

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Jun 17 13:23:05 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           	psect	idataCOMRAM
    83  001E76                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _Transmit_stall
    87  001E76  01                 	db	1
    88  0000                     _ANSELA	set	3896
    89  0000                     _ANSELB	set	3897
    90  0000                     _ANSELC	set	3898
    91  0000                     _ANSELCbits	set	3898
    92  0000                     _ANSELD	set	3899
    93  0000                     _ANSELE	set	3900
    94  0000                     _CCP4CON	set	3927
    95  0000                     _CCPR4H	set	3929
    96  0000                     _CCPR4L	set	3928
    97  0000                     _CCPTMRS1bits	set	3912
    98  0000                     _ANSB3	set	31179
    99  0000                     _ANSB4	set	31180
   100  0000                     _ANSD7	set	31199
   101  0000                     _TMR1	set	4046
   102  0000                     _ADCON0	set	4034
   103  0000                     _ADCON0bits	set	4034
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON2	set	4032
   106  0000                     _ADRESH	set	4036
   107  0000                     _ADRESL	set	4035
   108  0000                     _BAUD1CON	set	4024
   109  0000                     _EEADR	set	4009
   110  0000                     _EECON1bits	set	4006
   111  0000                     _EECON2	set	4007
   112  0000                     _EEDATA	set	4008
   113  0000                     _INTCON2bits	set	4081
   114  0000                     _INTCONbits	set	4082
   115  0000                     _IPR1bits	set	3999
   116  0000                     _LATA	set	3977
   117  0000                     _LATB	set	3978
   118  0000                     _LATC	set	3979
   119  0000                     _LATCbits	set	3979
   120  0000                     _LATD	set	3980
   121  0000                     _LATE	set	3981
   122  0000                     _OSCCON	set	4051
   123  0000                     _OSCCON2	set	4050
   124  0000                     _OSCTUNE	set	3995
   125  0000                     _PIE1bits	set	3997
   126  0000                     _PIR1bits	set	3998
   127  0000                     _PR2	set	4027
   128  0000                     _RC1STA	set	4011
   129  0000                     _RC1STAbits	set	4011
   130  0000                     _RCONbits	set	4048
   131  0000                     _RCREG1	set	4014
   132  0000                     _SPBRG1	set	4015
   133  0000                     _SPBRGH1	set	4016
   134  0000                     _T1CON	set	4045
   135  0000                     _T1CONbits	set	4045
   136  0000                     _T1GCON	set	4044
   137  0000                     _T1GCONbits	set	4044
   138  0000                     _T2CON	set	4026
   139  0000                     _T2CONbits	set	4026
   140  0000                     _TABLAT	set	4085
   141  0000                     _TBLPTRH	set	4087
   142  0000                     _TBLPTRL	set	4086
   143  0000                     _TBLPTRU	set	4088
   144  0000                     _TMR1H	set	4047
   145  0000                     _TMR1L	set	4046
   146  0000                     _TMR2	set	4028
   147  0000                     _TRISA	set	3986
   148  0000                     _TRISB	set	3987
   149  0000                     _TRISC	set	3988
   150  0000                     _TRISCbits	set	3988
   151  0000                     _TRISD	set	3989
   152  0000                     _TRISDbits	set	3989
   153  0000                     _TRISE	set	3990
   154  0000                     _TX1STA	set	4012
   155  0000                     _TXREG1	set	4013
   156  0000                     _WPUB	set	3937
   157  0000                     _LATA3	set	31819
   158  0000                     _LATB0	set	31824
   159  0000                     _LATB3	set	31827
   160  0000                     _LATB4	set	31828
   161  0000                     _LATB5	set	31829
   162  0000                     _LATD4	set	31844
   163  0000                     _LATD5	set	31845
   164  0000                     _LATD6	set	31846
   165  0000                     _LATD7	set	31847
   166  0000                     _TRISB3	set	31899
   167  0000                     _TRISB4	set	31900
   168  0000                     _TRISB5	set	31901
   169                           
   170                           ; #config settings
   171  0000                     
   172                           	psect	cinit
   173  0017E8                     __pcinit:
   174                           	opt stack 0
   175  0017E8                     start_initialization:
   176                           	opt stack 0
   177  0017E8                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK4 (206 bytes)
   181  0017E8  EE04  F000         	lfsr	0,__pbssBANK4
   182  0017EC  0ECE               	movlw	206
   183  0017EE                     clear_0:
   184  0017EE  6AEE               	clrf	postinc0,c
   185  0017F0  06E8               	decf	wreg,f,c
   186  0017F2  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to BANK3 (206 bytes)
   189  0017F4  EE03  F000         	lfsr	0,__pbssBANK3
   190  0017F8  0ECE               	movlw	206
   191  0017FA                     clear_1:
   192  0017FA  6AEE               	clrf	postinc0,c
   193  0017FC  06E8               	decf	wreg,f,c
   194  0017FE  E1FD               	bnz	clear_1
   195                           
   196                           ; Clear objects allocated to BANK2 (200 bytes)
   197  001800  EE02  F000         	lfsr	0,__pbssBANK2
   198  001804  0EC8               	movlw	200
   199  001806                     clear_2:
   200  001806  6AEE               	clrf	postinc0,c
   201  001808  06E8               	decf	wreg,f,c
   202  00180A  E1FD               	bnz	clear_2
   203                           
   204                           ; Clear objects allocated to BANK1 (254 bytes)
   205  00180C  EE01  F000         	lfsr	0,__pbssBANK1
   206  001810  0EFE               	movlw	254
   207  001812                     clear_3:
   208  001812  6AEE               	clrf	postinc0,c
   209  001814  06E8               	decf	wreg,f,c
   210  001816  E1FD               	bnz	clear_3
   211                           
   212                           ; Clear objects allocated to BANK0 (117 bytes)
   213  001818  EE00  F060         	lfsr	0,__pbssBANK0
   214  00181C  0E75               	movlw	117
   215  00181E                     clear_4:
   216  00181E  6AEE               	clrf	postinc0,c
   217  001820  06E8               	decf	wreg,f,c
   218  001822  E1FD               	bnz	clear_4
   219                           
   220                           ; Clear objects allocated to COMRAM (27 bytes)
   221  001824  EE00  F029         	lfsr	0,__pbssCOMRAM
   222  001828  0E1B               	movlw	27
   223  00182A                     clear_5:
   224  00182A  6AEE               	clrf	postinc0,c
   225  00182C  06E8               	decf	wreg,f,c
   226  00182E  E1FD               	bnz	clear_5
   227                           
   228                           ; Initialize objects allocated to COMRAM (1 bytes)
   229                           ; load TBLPTR registers with __pidataCOMRAM
   230  001830  0E76               	movlw	low __pidataCOMRAM
   231  001832  6EF6               	movwf	tblptrl,c
   232  001834  0E1E               	movlw	high __pidataCOMRAM
   233  001836  6EF7               	movwf	tblptrh,c
   234  001838  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   235  00183A  6EF8               	movwf	tblptru,c
   236  00183C  0009               	tblrd		*+	;fetch initializer
   237  00183E  CFF5 F044          	movff	tablat,__pdataCOMRAM
   238  001842                     end_of_initialization:
   239                           	opt stack 0
   240  001842                     __end_of__initialization:
   241                           	opt stack 0
   242  001842  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   243  001844  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   244  001846  0E00               	movlw	low (__Lmediumconst shr (0+16))
   245  001848  6EF8               	movwf	tblptru,c
   246  00184A  0100               	movlb	0
   247  00184C  EF80  F00B         	goto	_main	;jump to C main() function
   248                           tblptru	equ	0xFF8
   249                           tblptrh	equ	0xFF7
   250                           tblptrl	equ	0xFF6
   251                           tablat	equ	0xFF5
   252                           postinc0	equ	0xFEE
   253                           wreg	equ	0xFE8
   254                           
   255                           	psect	bssCOMRAM
   256  000029                     __pbssCOMRAM:
   257                           	opt stack 0
   258  000029                     _group:
   259                           	opt stack 0
   260  000029                     	ds	2
   261  00002B                     _prev_pos:
   262                           	opt stack 0
   263  00002B                     	ds	2
   264  00002D                     _readwhat:
   265                           	opt stack 0
   266  00002D                     	ds	2
   267  00002F                     _sendStructAddress:
   268                           	opt stack 0
   269  00002F                     	ds	2
   270  000031                     _serial_available:
   271                           	opt stack 0
   272  000031                     	ds	2
   273  000033                     _serial_read:
   274                           	opt stack 0
   275  000033                     	ds	2
   276  000035                     _serial_write:
   277                           	opt stack 0
   278  000035                     	ds	2
   279  000037                     _timer1ReloadVal:
   280                           	opt stack 0
   281  000037                     	ds	2
   282  000039                     updateComms@previousPowerState:
   283                           	opt stack 0
   284  000039                     	ds	2
   285  00003B                     _AKNAKsend:
   286                           	opt stack 0
   287  00003B                     	ds	1
   288  00003C                     _MCSOn:
   289                           	opt stack 0
   290  00003C                     	ds	1
   291  00003D                     _calc_CS:
   292                           	opt stack 0
   293  00003D                     	ds	1
   294  00003E                     _maxDataAddress:
   295                           	opt stack 0
   296  00003E                     	ds	1
   297  00003F                     _moduleAddress:
   298                           	opt stack 0
   299  00003F                     	ds	1
   300  000040                     _returnAddress:
   301                           	opt stack 0
   302  000040                     	ds	1
   303  000041                     _rx_address:
   304                           	opt stack 0
   305  000041                     	ds	1
   306  000042                     _rx_array_inx:
   307                           	opt stack 0
   308  000042                     	ds	1
   309  000043                     _rx_len:
   310                           	opt stack 0
   311  000043                     	ds	1
   312                           tblptru	equ	0xFF8
   313                           tblptrh	equ	0xFF7
   314                           tblptrl	equ	0xFF6
   315                           tablat	equ	0xFF5
   316                           postinc0	equ	0xFEE
   317                           wreg	equ	0xFE8
   318                           
   319                           	psect	dataCOMRAM
   320  000044                     __pdataCOMRAM:
   321                           	opt stack 0
   322  000044                     _Transmit_stall:
   323                           	opt stack 0
   324  000044                     	ds	1
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           
   332                           	psect	bssBANK0
   333  000060                     __pbssBANK0:
   334                           	opt stack 0
   335  000060                     _Current:
   336                           	opt stack 0
   337  000060                     	ds	12
   338  00006C                     _CurrentADC:
   339                           	opt stack 0
   340  00006C                     	ds	12
   341  000078                     _Currentcomp:
   342                           	opt stack 0
   343  000078                     	ds	12
   344  000084                     _data:
   345                           	opt stack 0
   346  000084                     	ds	12
   347  000090                     _addressErrorCounter:
   348                           	opt stack 0
   349  000090                     	ds	2
   350  000092                     _alignErrorCounter:
   351                           	opt stack 0
   352  000092                     	ds	2
   353  000094                     _crcErrorCounter:
   354                           	opt stack 0
   355  000094                     	ds	2
   356  000096                     _dataAdressErrorCounter:
   357                           	opt stack 0
   358  000096                     	ds	2
   359  000098                     _receiveArrayAddress:
   360                           	opt stack 0
   361  000098                     	ds	2
   362  00009A                     _serial_peek:
   363                           	opt stack 0
   364  00009A                     	ds	2
   365  00009C                     _receiveArray:
   366                           	opt stack 0
   367  00009C                     	ds	40
   368  0000C4                     _crc_buffer:
   369                           	opt stack 0
   370  0000C4                     	ds	17
   371                           tblptru	equ	0xFF8
   372                           tblptrh	equ	0xFF7
   373                           tblptrl	equ	0xFF6
   374                           tablat	equ	0xFF5
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           
   378                           	psect	bssBANK1
   379  000100                     __pbssBANK1:
   380                           	opt stack 0
   381  000100                     _registers:
   382                           	opt stack 0
   383  000100                     	ds	48
   384  000130                     _ring_buffer:
   385                           	opt stack 0
   386  000130                     	ds	206
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394                           	psect	bssBANK2
   395  000200                     __pbssBANK2:
   396                           	opt stack 0
   397  000200                     _rx_buffer:
   398                           	opt stack 0
   399  000200                     	ds	200
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           
   407                           	psect	bssBANK3
   408  000300                     __pbssBANK3:
   409                           	opt stack 0
   410  000300                     _input_buffer:
   411                           	opt stack 0
   412  000300                     	ds	206
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           
   420                           	psect	bssBANK4
   421  000400                     __pbssBANK4:
   422                           	opt stack 0
   423  000400                     _output_buffer:
   424                           	opt stack 0
   425  000400                     	ds	206
   426                           tblptru	equ	0xFF8
   427                           tblptrh	equ	0xFF7
   428                           tblptrl	equ	0xFF6
   429                           tablat	equ	0xFF5
   430                           postinc0	equ	0xFEE
   431                           wreg	equ	0xFE8
   432                           
   433                           	psect	cstackBANK0
   434  0000D5                     __pcstackBANK0:
   435                           	opt stack 0
   436  0000D5                     sendData@whereToSend:
   437                           	opt stack 0
   438  0000D5                     CRCcheck@SentCRC:
   439                           	opt stack 0
   440  0000D5                     processPowerRequest@powerSet:
   441                           	opt stack 0
   442  0000D5                     begin@ptr:
   443                           	opt stack 0
   444  0000D5                     ToSend@what:
   445                           	opt stack 0
   446  0000D5                     Clear595@i:
   447                           	opt stack 0
   448  0000D5                     PotSetpoint@set_point:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x0
   452  0000D5                     	ds	1
   453  0000D6                     sendData@CS:
   454                           	opt stack 0
   455  0000D6                     CRCcheck@calculatedCRC:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x1
   459  0000D6                     	ds	1
   460  0000D7                     begin@maxSize:
   461                           	opt stack 0
   462  0000D7                     sendData@i:
   463                           	opt stack 0
   464  0000D7                     PotSetpoint@x:
   465                           	opt stack 0
   466  0000D7                     CRCcheck@arrayHolder:
   467                           	opt stack 0
   468                           
   469                           ; 3 bytes @ 0x2
   470  0000D7                     	ds	1
   471  0000D8                     begin@givenAddress:
   472                           	opt stack 0
   473                           
   474                           ; 1 bytes @ 0x3
   475  0000D8                     	ds	1
   476  0000D9                     begin@error:
   477                           	opt stack 0
   478  0000D9                     PotSetpoint@new_pos:
   479                           	opt stack 0
   480                           
   481                           ; 2 bytes @ 0x4
   482  0000D9                     	ds	1
   483  0000DA                     begin@stufftosend:
   484                           	opt stack 0
   485  0000DA                     CRCcheck@rt:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0x5
   489  0000DA                     	ds	2
   490  0000DC                     ??_receiveData:
   491  0000DC                     begin@stufftoreceive:
   492                           	opt stack 0
   493                           
   494                           ; 2 bytes @ 0x7
   495  0000DC                     	ds	2
   496  0000DE                     begin@stuffavailable:
   497                           	opt stack 0
   498                           
   499                           ; 2 bytes @ 0x9
   500  0000DE                     	ds	2
   501  0000E0                     begin@stuffpeek:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0xB
   505  0000E0                     	ds	2
   506  0000E2                     receiveData@holder:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0xD
   510  0000E2                     	ds	3
   511  0000E5                     receiveData@holder_1395:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0x10
   515  0000E5                     	ds	3
   516  0000E8                     receiveData@crcHolder:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x13
   520  0000E8                     	ds	1
   521  0000E9                     receiveData@crcHolder_1396:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x14
   525  0000E9                     	ds	1
   526  0000EA                     receiveData@u:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x15
   530  0000EA                     	ds	2
   531  0000EC                     receiveData@r:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x17
   535  0000EC                     	ds	2
   536  0000EE                     main@i:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x19
   540  0000EE                     	ds	2
   541  0000F0                     main@UP:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x1B
   545  0000F0                     	ds	1
   546                           tblptru	equ	0xFF8
   547                           tblptrh	equ	0xFF7
   548                           tblptrl	equ	0xFF6
   549                           tablat	equ	0xFF5
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           
   553                           	psect	cstackCOMRAM
   554  000001                     __pcstackCOMRAM:
   555                           	opt stack 0
   556  000001                     ?i2_UART_buff_size:
   557                           	opt stack 0
   558  000001                     ?i2_UART_buff_modulo_inc:
   559                           	opt stack 0
   560  000001                     i2UART_buff_size@_this:
   561                           	opt stack 0
   562  000001                     i2UART_buff_modulo_inc@value:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x0
   566  000001                     	ds	2
   567  000003                     i2UART_buff_modulo_inc@modulus:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x2
   571  000003                     	ds	2
   572  000005                     i2UART_buff_modulo_inc@my_value:
   573                           	opt stack 0
   574                           
   575                           ; 2 bytes @ 0x4
   576  000005                     	ds	2
   577  000007                     i2UART_buff_put@_this:
   578                           	opt stack 0
   579  000007                     i2UART_buff_get@_this:
   580                           	opt stack 0
   581                           
   582                           ; 2 bytes @ 0x6
   583  000007                     	ds	2
   584  000009                     ??i2_UART_buff_get:
   585  000009                     i2UART_buff_put@c:
   586                           	opt stack 0
   587                           
   588                           ; 1 bytes @ 0x8
   589  000009                     	ds	1
   590  00000A                     ??i2_UART_buff_put:
   591                           
   592                           ; 0 bytes @ 0x9
   593  00000A                     	ds	1
   594  00000B                     i2UART_buff_get@c:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xA
   598  00000B                     	ds	1
   599  00000C                     EUSART1_Receive_ISR@data:
   600                           	opt stack 0
   601                           
   602                           ; 1 bytes @ 0xB
   603  00000C                     	ds	1
   604  00000D                     ??_INTERRUPT_InterruptManager:
   605                           
   606                           ; 0 bytes @ 0xC
   607  00000D                     	ds	14
   608  00001B                     ?_FastTransfer_buffer_modulo_inc:
   609                           	opt stack 0
   610  00001B                     ?_UART_buff_modulo_inc:
   611                           	opt stack 0
   612  00001B                     ?_UART_buff_size:
   613                           	opt stack 0
   614  00001B                     ?___awdiv:
   615                           	opt stack 0
   616  00001B                     DATAEE_ReadByte@bAdd:
   617                           	opt stack 0
   618  00001B                     PWM4_LoadDutyValue@dutyValue:
   619                           	opt stack 0
   620  00001B                     CRC8@data:
   621                           	opt stack 0
   622  00001B                     FastTransfer_buffer_modulo_inc@value:
   623                           	opt stack 0
   624  00001B                     crcBufS_put@_this:
   625                           	opt stack 0
   626  00001B                     crcBufS_status_put@_this:
   627                           	opt stack 0
   628  00001B                     crcBufS_get@_this:
   629                           	opt stack 0
   630  00001B                     SetPin595@Reg:
   631                           	opt stack 0
   632  00001B                     UART_buff_size@_this:
   633                           	opt stack 0
   634  00001B                     UART_buff_modulo_inc@value:
   635                           	opt stack 0
   636  00001B                     UART_buff_peek@_this:
   637                           	opt stack 0
   638  00001B                     ___awdiv@dividend:
   639                           	opt stack 0
   640  00001B                     memset@p1:
   641                           	opt stack 0
   642  00001B                     Delay@wait:
   643                           	opt stack 0
   644                           
   645                           ; 4 bytes @ 0x1A
   646  00001B                     	ds	1
   647  00001C                     ??_ComputeStorageData:
   648                           
   649                           ; 0 bytes @ 0x1B
   650  00001C                     	ds	1
   651  00001D                     ??_PWM4_LoadDutyValue:
   652  00001D                     ??_UART_buff_peek:
   653  00001D                     ?_Receive_available:
   654                           	opt stack 0
   655  00001D                     CRC8@len:
   656                           	opt stack 0
   657  00001D                     crcBufS_put@address:
   658                           	opt stack 0
   659  00001D                     crcBufS_status_put@time:
   660                           	opt stack 0
   661  00001D                     crcBufS_get@time:
   662                           	opt stack 0
   663  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   664                           	opt stack 0
   665  00001D                     SetPin595@pin:
   666                           	opt stack 0
   667  00001D                     UART_buff_modulo_inc@modulus:
   668                           	opt stack 0
   669  00001D                     ___awdiv@divisor:
   670                           	opt stack 0
   671  00001D                     memset@c:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x1C
   675  00001D                     	ds	1
   676  00001E                     CRC8@sum:
   677                           	opt stack 0
   678  00001E                     crcBufS_put@oldCRC:
   679                           	opt stack 0
   680  00001E                     crcBufS_status_put@status:
   681                           	opt stack 0
   682  00001E                     crcBufS_get@space:
   683                           	opt stack 0
   684  00001E                     ComputeStorageData@i:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x1D
   688  00001E                     	ds	1
   689  00001F                     ??_Delay:
   690  00001F                     ??_crcBufS_get:
   691  00001F                     ??_crcBufS_status_put:
   692  00001F                     CRC8@extract:
   693                           	opt stack 0
   694  00001F                     crcBufS_put@status:
   695                           	opt stack 0
   696  00001F                     ___awdiv@counter:
   697                           	opt stack 0
   698  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   699                           	opt stack 0
   700  00001F                     SetPin595@value:
   701                           	opt stack 0
   702  00001F                     UART_buff_modulo_inc@my_value:
   703                           	opt stack 0
   704  00001F                     memset@n:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x1E
   708  00001F                     	ds	1
   709  000020                     ??_crcBufS_put:
   710  000020                     CRC8@tempI:
   711                           	opt stack 0
   712  000020                     ___awdiv@sign:
   713                           	opt stack 0
   714  000020                     Delay@i:
   715                           	opt stack 0
   716                           
   717                           ; 4 bytes @ 0x1F
   718  000020                     	ds	1
   719  000021                     ??_SetPin595:
   720  000021                     CRC8@crc:
   721                           	opt stack 0
   722  000021                     FastTransfer_buffer_put@_this:
   723                           	opt stack 0
   724  000021                     UART_buff_put@_this:
   725                           	opt stack 0
   726  000021                     UART_buff_get@_this:
   727                           	opt stack 0
   728  000021                     ___awdiv@quotient:
   729                           	opt stack 0
   730  000021                     memset@p:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x20
   734  000021                     	ds	2
   735  000023                     ??_UART_buff_get:
   736  000023                     FastTransfer_buffer_put@towhere:
   737                           	opt stack 0
   738  000023                     UART_buff_put@c:
   739                           	opt stack 0
   740  000023                     FastTransfer_buffer_flush@_this:
   741                           	opt stack 0
   742  000023                     crcBufS_status_put@wantedTime:
   743                           	opt stack 0
   744  000023                     UART_buff_init@_this:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x22
   748  000023                     	ds	1
   749  000024                     ??_UART_buff_put:
   750  000024                     FastTransfer_buffer_put@towhat:
   751                           	opt stack 0
   752  000024                     writeRegisters@val:
   753                           	opt stack 0
   754  000024                     PotSetpoint@new_point:
   755                           	opt stack 0
   756  000024                     PotClear@x:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x23
   760  000024                     	ds	1
   761  000025                     UART_buff_get@c:
   762                           	opt stack 0
   763  000025                     FastTransfer_buffer_flush@clearBuffer:
   764                           	opt stack 0
   765  000025                     crcBufS_get@wantedTime:
   766                           	opt stack 0
   767  000025                     EnableSlavePower@onof:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x24
   771  000025                     	ds	1
   772  000026                     ??_FastTransfer_buffer_put:
   773  000026                     ??_PotSetpoint:
   774  000026                     Send_put@_data:
   775                           	opt stack 0
   776  000026                     writeRegisters@i:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x25
   780  000026                     	ds	1
   781  000027                     ??_sendData:
   782  000027                     EnableSlavePower@slave:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x26
   786  000027                     	ds	1
   787  000028                     ToSend@where:
   788                           	opt stack 0
   789                           
   790                           ; 1 bytes @ 0x27
   791  000028                     	ds	1
   792  000029                     tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           
   799                           ; 0 bytes @ 0x28
   800 ;;
   801 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   802 ;;
   803 ;; *************** function _main *****************
   804 ;; Defined at:
   805 ;;		line 10 in file "main.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  i               2   25[BANK0 ] int 
   810 ;;  UP              1   27[BANK0 ] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   820 ;;      Params:         0       0       0       0       0       0       0
   821 ;;      Locals:         0       3       0       0       0       0       0
   822 ;;      Temps:          0       0       0       0       0       0       0
   823 ;;      Totals:         0       3       0       0       0       0       0
   824 ;;Total ram usage:        3 bytes
   825 ;; Hardware stack levels required when called:   10
   826 ;; This function calls:
   827 ;;		_CoolingCheck
   828 ;;		_CoolingStart
   829 ;;		_CoolingStop
   830 ;;		_PDUStartup
   831 ;;		_PWM4_LoadDutyValue
   832 ;;		_PotSetpoint
   833 ;;		_SYSTEM_Initialize
   834 ;;		_updateComms
   835 ;; This function is called by:
   836 ;;		Startup code after reset
   837 ;; This function uses a non-reentrant model
   838 ;;
   839                           
   840                           	psect	text0
   841  001700                     __ptext0:
   842                           	opt stack 0
   843  001700                     _main:
   844                           	opt stack 21
   845                           
   846                           ;main.c: 12: SYSTEM_Initialize();
   847                           
   848                           ;incstack = 0
   849  001700  ECBB  F00B         	call	_SYSTEM_Initialize	;wreg free
   850                           
   851                           ;main.c: 13: PDUStartup();
   852  001704  ECE1  F00C         	call	_PDUStartup	;wreg free
   853                           
   854                           ;main.c: 32: (INTCONbits.GIE = 1);
   855  001708  8EF2               	bsf	intcon,7,c	;volatile
   856                           
   857                           ;main.c: 35: (INTCONbits.PEIE = 1);
   858  00170A  8CF2               	bsf	intcon,6,c	;volatile
   859                           
   860                           ;main.c: 42: PotSetpoint(0);
   861  00170C  0E00               	movlw	0
   862  00170E  6E25               	movwf	PotSetpoint@new_point+1,c
   863  001710  0E00               	movlw	0
   864  001712  6E24               	movwf	PotSetpoint@new_point,c
   865  001714  ECC9  F006         	call	_PotSetpoint	;wreg free
   866                           
   867                           ;main.c: 43: PWM4_LoadDutyValue(0);
   868  001718  0E00               	movlw	0
   869  00171A  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
   870  00171C  0E00               	movlw	0
   871  00171E  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
   872  001720  ECD4  F00D         	call	_PWM4_LoadDutyValue	;wreg free
   873                           
   874                           ;main.c: 44: LATCbits.LATC5 = 0;
   875  001724  9A8B               	bcf	3979,5,c	;volatile
   876                           
   877                           ;main.c: 45: int i = 0;
   878  001726  0E00               	movlw	0
   879  001728  0100               	movlb	0	; () banked
   880  00172A  6FEF               	movwf	(main@i+1)& (0+255),b
   881  00172C  0E00               	movlw	0
   882  00172E  6FEE               	movwf	main@i& (0+255),b
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 46: bool UP = 0;
   886  001730  0E00               	movlw	0
   887  001732  0100               	movlb	0	; () banked
   888  001734  6FF0               	movwf	main@UP& (0+255),b
   889  001736                     l4594:
   890                           
   891                           ;main.c: 54: updateComms();
   892  001736  ECB9  F00D         	call	_updateComms	;wreg free
   893                           
   894                           ;main.c: 55: if(CoolingCheck() && UP == 0){
   895  00173A  EC37  F00F         	call	_CoolingCheck	;wreg free
   896  00173E  0900               	iorlw	0
   897  001740  B4D8               	btfsc	status,2,c
   898  001742  D00A               	goto	l4604
   899  001744  0100               	movlb	0	; () banked
   900  001746  51F0               	movf	main@UP& (0+255),w,b
   901  001748  0100               	movlb	0	; () banked
   902  00174A  A4D8               	btfss	status,2,c
   903  00174C  D005               	goto	l4604
   904                           
   905                           ; BSR set to: 0
   906                           ;main.c: 56: UP = 1;
   907  00174E  0E01               	movlw	1
   908  001750  0100               	movlb	0	; () banked
   909  001752  6FF0               	movwf	main@UP& (0+255),b
   910                           
   911                           ; BSR set to: 0
   912                           ;main.c: 57: CoolingStart();
   913  001754  EC95  F00E         	call	_CoolingStart	;wreg free
   914  001758                     l4604:
   915                           
   916                           ;main.c: 58: }
   917                           ;main.c: 59: if(!CoolingCheck() && UP == 1){
   918  001758  EC37  F00F         	call	_CoolingCheck	;wreg free
   919  00175C  0900               	iorlw	0
   920  00175E  A4D8               	btfss	status,2,c
   921  001760  D7EA               	goto	l4594
   922  001762  0100               	movlb	0	; () banked
   923  001764  05F0               	decf	main@UP& (0+255),w,b
   924  001766  A4D8               	btfss	status,2,c
   925  001768  D7E6               	goto	l4594
   926                           
   927                           ; BSR set to: 0
   928                           ;main.c: 60: UP = 0;
   929  00176A  0E00               	movlw	0
   930  00176C  0100               	movlb	0	; () banked
   931  00176E  6FF0               	movwf	main@UP& (0+255),b
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 61: CoolingStop();
   935  001770  EC0F  F00F         	call	_CoolingStop	;wreg free
   936  001774  D7E0               	goto	l4594
   937  001776                     __end_of_main:
   938                           	opt stack 0
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           intcon	equ	0xFF2
   944                           postinc0	equ	0xFEE
   945                           wreg	equ	0xFE8
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _updateComms *****************
   949 ;; Defined at:
   950 ;;		line 21 in file "Communications.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;		None
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;		None               void
   957 ;; Registers used:
   958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   964 ;;      Params:         0       0       0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0
   967 ;;      Totals:         0       0       0       0       0       0       0
   968 ;;Total ram usage:        0 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    9
   971 ;; This function calls:
   972 ;;		_processPowerRequest
   973 ;;		_receiveData
   974 ;;		_respondECU
   975 ;; This function is called by:
   976 ;;		_main
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           	psect	text1
   981  001B72                     __ptext1:
   982                           	opt stack 0
   983  001B72                     _updateComms:
   984                           	opt stack 21
   985                           
   986                           ;Communications.c: 22: if (receiveData()) {
   987                           
   988                           ;incstack = 0
   989  001B72  EC52  F000         	call	_receiveData	;wreg free
   990  001B76  0900               	iorlw	0
   991  001B78  B4D8               	btfsc	status,2,c
   992  001B7A  0012               	return	
   993                           
   994                           ;Communications.c: 23: static int previousPowerState;
   995                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   996  001B7C  5039               	movf	updateComms@previousPowerState,w,c
   997  001B7E  0100               	movlb	0	; () banked
   998  001B80  199E               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   999  001B82  E105               	bnz	u4100
  1000  001B84  503A               	movf	updateComms@previousPowerState+1,w,c
  1001  001B86  0100               	movlb	0	; () banked
  1002  001B88  199F               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
  1003  001B8A  B4D8               	btfsc	status,2,c
  1004  001B8C  D00A               	goto	l4454
  1005  001B8E                     u4100:
  1006                           
  1007                           ; BSR set to: 0
  1008                           ;Communications.c: 25: previousPowerState = receiveArray[1];
  1009  001B8E  C09E  F039         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
  1010  001B92  C09F  F03A         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;Communications.c: 26: processPowerRequest(previousPowerState);
  1014  001B96  C039  F0D5         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
  1015  001B9A  C03A  F0D6         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
  1016  001B9E  ECD3  F009         	call	_processPowerRequest	;wreg free
  1017  001BA2                     l4454:
  1018                           
  1019                           ;Communications.c: 27: }
  1020                           ;Communications.c: 28: respondECU();
  1021  001BA2  ECB7  F00C         	call	_respondECU	;wreg free
  1022  001BA6  0012               	return	
  1023  001BA8                     __end_of_updateComms:
  1024                           	opt stack 0
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           intcon	equ	0xFF2
  1030                           postinc0	equ	0xFEE
  1031                           wreg	equ	0xFE8
  1032                           status	equ	0xFD8
  1033                           
  1034 ;; *************** function _respondECU *****************
  1035 ;; Defined at:
  1036 ;;		line 48 in file "Communications.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;		None               void
  1043 ;; Registers used:
  1044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1050 ;;      Params:         0       0       0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0       0       0
  1052 ;;      Temps:          0       0       0       0       0       0       0
  1053 ;;      Totals:         0       0       0       0       0       0       0
  1054 ;;Total ram usage:        0 bytes
  1055 ;; Hardware stack levels used:    1
  1056 ;; Hardware stack levels required when called:    8
  1057 ;; This function calls:
  1058 ;;		_Delay
  1059 ;;		_ToSend
  1060 ;;		_sendData
  1061 ;; This function is called by:
  1062 ;;		_updateComms
  1063 ;; This function uses a non-reentrant model
  1064 ;;
  1065                           
  1066                           	psect	text2
  1067  00196E                     __ptext2:
  1068                           	opt stack 0
  1069  00196E                     _respondECU:
  1070                           	opt stack 21
  1071                           
  1072                           ;Communications.c: 49: LATCbits.LATC5 = 1;
  1073                           
  1074                           ;incstack = 0
  1075  00196E  8A8B               	bsf	3979,5,c	;volatile
  1076                           
  1077                           ;Communications.c: 50: ToSend(0, 5);
  1078  001970  0E00               	movlw	0
  1079  001972  0100               	movlb	0	; () banked
  1080  001974  6FD6               	movwf	(ToSend@what+1)& (0+255),b
  1081  001976  0E05               	movlw	5
  1082  001978  6FD5               	movwf	ToSend@what& (0+255),b
  1083  00197A  0E00               	movlw	0
  1084  00197C  ECB3  F00E         	call	_ToSend
  1085                           
  1086                           ;Communications.c: 51: ToSend(9, 5);
  1087  001980  0E00               	movlw	0
  1088  001982  0100               	movlb	0	; () banked
  1089  001984  6FD6               	movwf	(ToSend@what+1)& (0+255),b
  1090  001986  0E05               	movlw	5
  1091  001988  6FD5               	movwf	ToSend@what& (0+255),b
  1092  00198A  0E09               	movlw	9
  1093  00198C  ECB3  F00E         	call	_ToSend
  1094                           
  1095                           ;Communications.c: 52: Delay(5);
  1096  001990  0E05               	movlw	5
  1097  001992  6E1B               	movwf	Delay@wait,c
  1098  001994  0E00               	movlw	0
  1099  001996  6E1C               	movwf	Delay@wait+1,c
  1100  001998  0E00               	movlw	0
  1101  00199A  6E1D               	movwf	Delay@wait+2,c
  1102  00199C  0E00               	movlw	0
  1103  00199E  6E1E               	movwf	Delay@wait+3,c
  1104  0019A0  EC57  F00D         	call	_Delay	;wreg free
  1105                           
  1106                           ;Communications.c: 54: sendData(1);
  1107  0019A4  0E01               	movlw	1
  1108  0019A6  EC0F  F005         	call	_sendData
  1109                           
  1110                           ;Communications.c: 55: Delay(3);
  1111  0019AA  0E03               	movlw	3
  1112  0019AC  6E1B               	movwf	Delay@wait,c
  1113  0019AE  0E00               	movlw	0
  1114  0019B0  6E1C               	movwf	Delay@wait+1,c
  1115  0019B2  0E00               	movlw	0
  1116  0019B4  6E1D               	movwf	Delay@wait+2,c
  1117  0019B6  0E00               	movlw	0
  1118  0019B8  6E1E               	movwf	Delay@wait+3,c
  1119  0019BA  EC57  F00D         	call	_Delay	;wreg free
  1120                           
  1121                           ;Communications.c: 56: LATCbits.LATC5 = 0;
  1122  0019BE  9A8B               	bcf	3979,5,c	;volatile
  1123  0019C0  0012               	return		;funcret
  1124  0019C2                     __end_of_respondECU:
  1125                           	opt stack 0
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           intcon	equ	0xFF2
  1131                           postinc0	equ	0xFEE
  1132                           wreg	equ	0xFE8
  1133                           status	equ	0xFD8
  1134                           
  1135 ;; *************** function _sendData *****************
  1136 ;; Defined at:
  1137 ;;		line 53 in file "FastTransfer.c"
  1138 ;; Parameters:    Size  Location     Type
  1139 ;;  whereToSend     1    wreg     unsigned char 
  1140 ;; Auto vars:     Size  Location     Type
  1141 ;;  whereToSend     1    0[BANK0 ] unsigned char 
  1142 ;;  i               2    2[BANK0 ] int 
  1143 ;;  CS              1    1[BANK0 ] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;		None               void
  1146 ;; Registers used:
  1147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1153 ;;      Params:         0       0       0       0       0       0       0
  1154 ;;      Locals:         0       4       0       0       0       0       0
  1155 ;;      Temps:          1       0       0       0       0       0       0
  1156 ;;      Totals:         1       4       0       0       0       0       0
  1157 ;;Total ram usage:        5 bytes
  1158 ;; Hardware stack levels used:    1
  1159 ;; Hardware stack levels required when called:    7
  1160 ;; This function calls:
  1161 ;;		Absolute function
  1162 ;;		_CRC8
  1163 ;;		_FastTransfer_buffer_flush
  1164 ;;		_Send_put
  1165 ;;		_crcBufS_put
  1166 ;; This function is called by:
  1167 ;;		_respondECU
  1168 ;; This function uses a non-reentrant model
  1169 ;;
  1170                           
  1171                           	psect	text3
  1172  000A1E                     __ptext3:
  1173                           	opt stack 0
  1174  000A1E                     _sendData:
  1175                           	opt stack 21
  1176                           
  1177                           ;incstack = 0
  1178                           ;sendData@whereToSend stored from wreg
  1179  000A1E  0100               	movlb	0	; () banked
  1180  000A20  6FD5               	movwf	sendData@whereToSend& (0+255),b
  1181                           
  1182                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1183  000A22  C02F  F01B         	movff	_sendStructAddress,CRC8@data
  1184  000A26  C030  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1185  000A2A  C1FC  F01D         	movff	_ring_buffer+204,CRC8@len
  1186  000A2E  EC32  F00D         	call	_CRC8	;wreg free
  1187  000A32  0100               	movlb	0	; () banked
  1188  000A34  6FD6               	movwf	sendData@CS& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191                           ;FastTransfer.c: 58: serial_write(0x06);
  1192  000A36  D801               	call	u3198
  1193  000A38  D00B               	goto	l3946
  1194  000A3A                     u3198:
  1195  000A3A  0005               	push	
  1196  000A3C  6EFA               	movwf	pclath,c
  1197  000A3E  5035               	movf	_serial_write,w,c
  1198  000A40  6EFD               	movwf	tosl,c
  1199  000A42  5036               	movf	_serial_write+1,w,c
  1200  000A44  6EFE               	movwf	tosh,c
  1201  000A46  50F8               	movf	tblptru,w,c
  1202  000A48  6EFF               	movwf	tosu,c
  1203  000A4A  50FA               	movf	pclath,w,c
  1204  000A4C  0E06               	movlw	6
  1205  000A4E  0012               	return		;indir
  1206  000A50                     l3946:
  1207                           
  1208                           ;FastTransfer.c: 59: serial_write(0x85);
  1209  000A50  D801               	call	u3208
  1210  000A52  D00B               	goto	l3948
  1211  000A54                     u3208:
  1212  000A54  0005               	push	
  1213  000A56  6EFA               	movwf	pclath,c
  1214  000A58  5035               	movf	_serial_write,w,c
  1215  000A5A  6EFD               	movwf	tosl,c
  1216  000A5C  5036               	movf	_serial_write+1,w,c
  1217  000A5E  6EFE               	movwf	tosh,c
  1218  000A60  50F8               	movf	tblptru,w,c
  1219  000A62  6EFF               	movwf	tosu,c
  1220  000A64  50FA               	movf	pclath,w,c
  1221  000A66  0E85               	movlw	133
  1222  000A68  0012               	return		;indir
  1223  000A6A                     l3948:
  1224                           
  1225                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1226  000A6A  D801               	call	u3218
  1227  000A6C  D00C               	goto	l3950
  1228  000A6E                     u3218:
  1229  000A6E  0005               	push	
  1230  000A70  6EFA               	movwf	pclath,c
  1231  000A72  5035               	movf	_serial_write,w,c
  1232  000A74  6EFD               	movwf	tosl,c
  1233  000A76  5036               	movf	_serial_write+1,w,c
  1234  000A78  6EFE               	movwf	tosh,c
  1235  000A7A  50F8               	movf	tblptru,w,c
  1236  000A7C  6EFF               	movwf	tosu,c
  1237  000A7E  50FA               	movf	pclath,w,c
  1238  000A80  0100               	movlb	0	; () banked
  1239  000A82  51D5               	movf	sendData@whereToSend& (0+255),w,b
  1240  000A84  0012               	return		;indir
  1241  000A86                     l3950:
  1242                           
  1243                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1244  000A86  D801               	call	u3228
  1245  000A88  D00B               	goto	l3952
  1246  000A8A                     u3228:
  1247  000A8A  0005               	push	
  1248  000A8C  6EFA               	movwf	pclath,c
  1249  000A8E  5035               	movf	_serial_write,w,c
  1250  000A90  6EFD               	movwf	tosl,c
  1251  000A92  5036               	movf	_serial_write+1,w,c
  1252  000A94  6EFE               	movwf	tosh,c
  1253  000A96  50F8               	movf	tblptru,w,c
  1254  000A98  6EFF               	movwf	tosu,c
  1255  000A9A  50FA               	movf	pclath,w,c
  1256  000A9C  503F               	movf	_moduleAddress,w,c
  1257  000A9E  0012               	return		;indir
  1258  000AA0                     l3952:
  1259                           
  1260                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1261  000AA0  D801               	call	u3238
  1262  000AA2  D00C               	goto	l3954
  1263  000AA4                     u3238:
  1264  000AA4  0005               	push	
  1265  000AA6  6EFA               	movwf	pclath,c
  1266  000AA8  5035               	movf	_serial_write,w,c
  1267  000AAA  6EFD               	movwf	tosl,c
  1268  000AAC  5036               	movf	_serial_write+1,w,c
  1269  000AAE  6EFE               	movwf	tosh,c
  1270  000AB0  50F8               	movf	tblptru,w,c
  1271  000AB2  6EFF               	movwf	tosu,c
  1272  000AB4  50FA               	movf	pclath,w,c
  1273  000AB6  0101               	movlb	1	; () banked
  1274  000AB8  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1275  000ABA  0012               	return		;indir
  1276  000ABC                     l3954:
  1277                           
  1278                           ;FastTransfer.c: 66: int i;
  1279                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1280  000ABC  0E00               	movlw	0
  1281  000ABE  0100               	movlb	0	; () banked
  1282  000AC0  6FD8               	movwf	(sendData@i+1)& (0+255),b
  1283  000AC2  0E00               	movlw	0
  1284  000AC4  6FD7               	movwf	sendData@i& (0+255),b
  1285  000AC6  D018               	goto	l3960
  1286  000AC8                     l3956:
  1287                           
  1288                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1289  000AC8  D801               	call	u3248
  1290  000ACA  D013               	goto	l3958
  1291  000ACC                     u3248:
  1292  000ACC  0005               	push	
  1293  000ACE  6EFA               	movwf	pclath,c
  1294  000AD0  5035               	movf	_serial_write,w,c
  1295  000AD2  6EFD               	movwf	tosl,c
  1296  000AD4  5036               	movf	_serial_write+1,w,c
  1297  000AD6  6EFE               	movwf	tosh,c
  1298  000AD8  50F8               	movf	tblptru,w,c
  1299  000ADA  6EFF               	movwf	tosu,c
  1300  000ADC  50FA               	movf	pclath,w,c
  1301  000ADE  0100               	movlb	0	; () banked
  1302  000AE0  51D7               	movf	sendData@i& (0+255),w,b
  1303  000AE2  242F               	addwf	_sendStructAddress,w,c
  1304  000AE4  6ED9               	movwf	fsr2l,c
  1305  000AE6  0100               	movlb	0	; () banked
  1306  000AE8  51D8               	movf	(sendData@i+1)& (0+255),w,b
  1307  000AEA  2030               	addwfc	_sendStructAddress+1,w,c
  1308  000AEC  6EDA               	movwf	fsr2h,c
  1309  000AEE  50DF               	movf	indf2,w,c
  1310  000AF0  0012               	return		;indir
  1311  000AF2                     l3958:
  1312  000AF2  0100               	movlb	0	; () banked
  1313  000AF4  4BD7               	infsnz	sendData@i& (0+255),f,b
  1314  000AF6  2BD8               	incf	(sendData@i+1)& (0+255),f,b
  1315  000AF8                     l3960:
  1316                           
  1317                           ; BSR set to: 0
  1318  000AF8  0101               	movlb	1	; () banked
  1319  000AFA  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1320  000AFC  0100               	movlb	0	; () banked
  1321  000AFE  5DD7               	subwf	sendData@i& (0+255),w,b
  1322  000B00  0100               	movlb	0	; () banked
  1323  000B02  51D8               	movf	(sendData@i+1)& (0+255),w,b
  1324  000B04  0A80               	xorlw	128
  1325  000B06  6E27               	movwf	??_sendData& (0+255),c
  1326  000B08  0101               	movlb	1	; () banked
  1327  000B0A  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1328  000B0C  0A80               	xorlw	128
  1329  000B0E  5827               	subwfb	??_sendData& (0+255),w,c
  1330  000B10  A0D8               	btfss	status,0,c
  1331  000B12  D7DA               	goto	l3956
  1332                           
  1333                           ; BSR set to: 1
  1334                           ;FastTransfer.c: 69: }
  1335                           ;FastTransfer.c: 72: serial_write(CS);
  1336                           
  1337                           ; BSR set to: 1
  1338  000B14  D801               	call	u3268
  1339  000B16  D00C               	goto	l3964
  1340  000B18                     u3268:
  1341  000B18  0005               	push	
  1342  000B1A  6EFA               	movwf	pclath,c
  1343  000B1C  5035               	movf	_serial_write,w,c
  1344  000B1E  6EFD               	movwf	tosl,c
  1345  000B20  5036               	movf	_serial_write+1,w,c
  1346  000B22  6EFE               	movwf	tosh,c
  1347  000B24  50F8               	movf	tblptru,w,c
  1348  000B26  6EFF               	movwf	tosu,c
  1349  000B28  50FA               	movf	pclath,w,c
  1350  000B2A  0100               	movlb	0	; () banked
  1351  000B2C  51D6               	movf	sendData@CS& (0+255),w,b
  1352  000B2E  0012               	return		;indir
  1353  000B30                     l3964:
  1354                           
  1355                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1356  000B30  0EC4               	movlw	low _crc_buffer
  1357  000B32  6E1B               	movwf	crcBufS_put@_this,c
  1358  000B34  0E00               	movlw	high _crc_buffer
  1359  000B36  6E1C               	movwf	crcBufS_put@_this+1,c
  1360  000B38  C0D5  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1361  000B3C  C0D6  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1362  000B40  0E00               	movlw	0
  1363  000B42  6E1F               	movwf	crcBufS_put@status,c
  1364  000B44  EC98  F008         	call	_crcBufS_put
  1365                           
  1366                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1367  000B48  0E30               	movlw	low _ring_buffer
  1368  000B4A  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1369  000B4C  0E01               	movlw	high _ring_buffer
  1370  000B4E  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1371  000B50  0E00               	movlw	0
  1372  000B52  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1373  000B54  0E01               	movlw	1
  1374  000B56  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1375  000B58  EC28  F00C         	call	_FastTransfer_buffer_flush	;wreg free
  1376  000B5C  0012               	return		;funcret
  1377  000B5E                     __end_of_sendData:
  1378                           	opt stack 0
  1379                           tosu	equ	0xFFF
  1380                           tosh	equ	0xFFE
  1381                           tosl	equ	0xFFD
  1382                           pclath	equ	0xFFA
  1383                           tblptru	equ	0xFF8
  1384                           tblptrh	equ	0xFF7
  1385                           tblptrl	equ	0xFF6
  1386                           tablat	equ	0xFF5
  1387                           intcon	equ	0xFF2
  1388                           postinc0	equ	0xFEE
  1389                           wreg	equ	0xFE8
  1390                           indf2	equ	0xFDF
  1391                           fsr2h	equ	0xFDA
  1392                           fsr2l	equ	0xFD9
  1393                           status	equ	0xFD8
  1394                           
  1395 ;; *************** function _crcBufS_put *****************
  1396 ;; Defined at:
  1397 ;;		line 321 in file "FastTransfer.c"
  1398 ;; Parameters:    Size  Location     Type
  1399 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1400 ;;		 -> crc_buffer(17), 
  1401 ;;  address         1   28[COMRAM] unsigned char 
  1402 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1403 ;;  status          1   30[COMRAM] unsigned char 
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;		None
  1406 ;; Return value:  Size  Location     Type
  1407 ;;		None               void
  1408 ;; Registers used:
  1409 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1410 ;; Tracked objects:
  1411 ;;		On entry : 0/0
  1412 ;;		On exit  : 0/0
  1413 ;;		Unchanged: 0/0
  1414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1415 ;;      Params:         5       0       0       0       0       0       0
  1416 ;;      Locals:         0       0       0       0       0       0       0
  1417 ;;      Temps:          2       0       0       0       0       0       0
  1418 ;;      Totals:         7       0       0       0       0       0       0
  1419 ;;Total ram usage:        7 bytes
  1420 ;; Hardware stack levels used:    1
  1421 ;; Hardware stack levels required when called:    4
  1422 ;; This function calls:
  1423 ;;		Nothing
  1424 ;; This function is called by:
  1425 ;;		_sendData
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text4
  1430  001130                     __ptext4:
  1431                           	opt stack 0
  1432  001130                     _crcBufS_put:
  1433                           	opt stack 23
  1434                           
  1435                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1436                           
  1437                           ;incstack = 0
  1438  001130  EE20 F00F          	lfsr	2,15
  1439  001134  501B               	movf	crcBufS_put@_this,w,c
  1440  001136  26D9               	addwf	fsr2l,f,c
  1441  001138  501C               	movf	crcBufS_put@_this+1,w,c
  1442  00113A  22DA               	addwfc	fsr2h,f,c
  1443  00113C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1444  001140  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1445  001144  5020               	movf	??_crcBufS_put,w,c
  1446  001146  241B               	addwf	crcBufS_put@_this,w,c
  1447  001148  6ED9               	movwf	fsr2l,c
  1448  00114A  5021               	movf	??_crcBufS_put+1,w,c
  1449  00114C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1450  00114E  6EDA               	movwf	fsr2h,c
  1451  001150  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1452                           
  1453                           ;FastTransfer.c: 323: _this->head++;
  1454  001154  EE20 F00F          	lfsr	2,15
  1455  001158  501B               	movf	crcBufS_put@_this,w,c
  1456  00115A  26D9               	addwf	fsr2l,f,c
  1457  00115C  501C               	movf	crcBufS_put@_this+1,w,c
  1458  00115E  22DA               	addwfc	fsr2h,f,c
  1459  001160  2ADE               	incf	postinc2,f,c
  1460  001162  0E00               	movlw	0
  1461  001164  22DD               	addwfc	postdec2,f,c
  1462                           
  1463                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1464  001166  EE20 F00F          	lfsr	2,15
  1465  00116A  501B               	movf	crcBufS_put@_this,w,c
  1466  00116C  26D9               	addwf	fsr2l,f,c
  1467  00116E  501C               	movf	crcBufS_put@_this+1,w,c
  1468  001170  22DA               	addwfc	fsr2h,f,c
  1469  001172  CFDE F020          	movff	postinc2,??_crcBufS_put
  1470  001176  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1471  00117A  5020               	movf	??_crcBufS_put,w,c
  1472  00117C  241B               	addwf	crcBufS_put@_this,w,c
  1473  00117E  6ED9               	movwf	fsr2l,c
  1474  001180  5021               	movf	??_crcBufS_put+1,w,c
  1475  001182  201C               	addwfc	crcBufS_put@_this+1,w,c
  1476  001184  6EDA               	movwf	fsr2h,c
  1477  001186  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1478                           
  1479                           ;FastTransfer.c: 325: _this->head++;
  1480  00118A  EE20 F00F          	lfsr	2,15
  1481  00118E  501B               	movf	crcBufS_put@_this,w,c
  1482  001190  26D9               	addwf	fsr2l,f,c
  1483  001192  501C               	movf	crcBufS_put@_this+1,w,c
  1484  001194  22DA               	addwfc	fsr2h,f,c
  1485  001196  2ADE               	incf	postinc2,f,c
  1486  001198  0E00               	movlw	0
  1487  00119A  22DD               	addwfc	postdec2,f,c
  1488                           
  1489                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1490  00119C  EE20 F00F          	lfsr	2,15
  1491  0011A0  501B               	movf	crcBufS_put@_this,w,c
  1492  0011A2  26D9               	addwf	fsr2l,f,c
  1493  0011A4  501C               	movf	crcBufS_put@_this+1,w,c
  1494  0011A6  22DA               	addwfc	fsr2h,f,c
  1495  0011A8  CFDE F020          	movff	postinc2,??_crcBufS_put
  1496  0011AC  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1497  0011B0  5020               	movf	??_crcBufS_put,w,c
  1498  0011B2  241B               	addwf	crcBufS_put@_this,w,c
  1499  0011B4  6ED9               	movwf	fsr2l,c
  1500  0011B6  5021               	movf	??_crcBufS_put+1,w,c
  1501  0011B8  201C               	addwfc	crcBufS_put@_this+1,w,c
  1502  0011BA  6EDA               	movwf	fsr2h,c
  1503  0011BC  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1504                           
  1505                           ;FastTransfer.c: 327: _this->head++;
  1506  0011C0  EE20 F00F          	lfsr	2,15
  1507  0011C4  501B               	movf	crcBufS_put@_this,w,c
  1508  0011C6  26D9               	addwf	fsr2l,f,c
  1509  0011C8  501C               	movf	crcBufS_put@_this+1,w,c
  1510  0011CA  22DA               	addwfc	fsr2h,f,c
  1511  0011CC  2ADE               	incf	postinc2,f,c
  1512  0011CE  0E00               	movlw	0
  1513  0011D0  22DD               	addwfc	postdec2,f,c
  1514                           
  1515                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1516  0011D2  EE20 F00F          	lfsr	2,15
  1517  0011D6  501B               	movf	crcBufS_put@_this,w,c
  1518  0011D8  26D9               	addwf	fsr2l,f,c
  1519  0011DA  501C               	movf	crcBufS_put@_this+1,w,c
  1520  0011DC  22DA               	addwfc	fsr2h,f,c
  1521  0011DE  0E01               	movlw	1
  1522  0011E0  BEDB               	btfsc	plusw2,7,c
  1523  0011E2  0012               	return	
  1524  0011E4  0E01               	movlw	1
  1525  0011E6  50DB               	movf	plusw2,w,c
  1526  0011E8  E104               	bnz	u3060
  1527  0011EA  0E0F               	movlw	15
  1528  0011EC  5CDE               	subwf	postinc2,w,c
  1529  0011EE  A0D8               	btfss	status,0,c
  1530  0011F0  0012               	return	
  1531  0011F2                     u3060:
  1532                           
  1533                           ;FastTransfer.c: 329: _this->head = 0;
  1534  0011F2  EE20 F00F          	lfsr	2,15
  1535  0011F6  501B               	movf	crcBufS_put@_this,w,c
  1536  0011F8  26D9               	addwf	fsr2l,f,c
  1537  0011FA  501C               	movf	crcBufS_put@_this+1,w,c
  1538  0011FC  22DA               	addwfc	fsr2h,f,c
  1539  0011FE  0E00               	movlw	0
  1540  001200  6EDE               	movwf	postinc2,c
  1541  001202  0E00               	movlw	0
  1542  001204  6EDD               	movwf	postdec2,c
  1543  001206  0012               	return	
  1544  001208                     __end_of_crcBufS_put:
  1545                           	opt stack 0
  1546                           tosu	equ	0xFFF
  1547                           tosh	equ	0xFFE
  1548                           tosl	equ	0xFFD
  1549                           pclath	equ	0xFFA
  1550                           tblptru	equ	0xFF8
  1551                           tblptrh	equ	0xFF7
  1552                           tblptrl	equ	0xFF6
  1553                           tablat	equ	0xFF5
  1554                           intcon	equ	0xFF2
  1555                           postinc0	equ	0xFEE
  1556                           wreg	equ	0xFE8
  1557                           indf2	equ	0xFDF
  1558                           postinc2	equ	0xFDE
  1559                           postdec2	equ	0xFDD
  1560                           plusw2	equ	0xFDB
  1561                           fsr2h	equ	0xFDA
  1562                           fsr2l	equ	0xFD9
  1563                           status	equ	0xFD8
  1564                           
  1565 ;; *************** function _FastTransfer_buffer_flush *****************
  1566 ;; Defined at:
  1567 ;;		line 261 in file "FastTransfer.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1570 ;;		 -> ring_buffer(206), 
  1571 ;;  clearBuffer     2   36[COMRAM] const int 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;		None
  1574 ;; Return value:  Size  Location     Type
  1575 ;;		None               void
  1576 ;; Registers used:
  1577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1578 ;; Tracked objects:
  1579 ;;		On entry : 0/0
  1580 ;;		On exit  : 0/0
  1581 ;;		Unchanged: 0/0
  1582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1583 ;;      Params:         4       0       0       0       0       0       0
  1584 ;;      Locals:         0       0       0       0       0       0       0
  1585 ;;      Temps:          0       0       0       0       0       0       0
  1586 ;;      Totals:         4       0       0       0       0       0       0
  1587 ;;Total ram usage:        4 bytes
  1588 ;; Hardware stack levels used:    1
  1589 ;; Hardware stack levels required when called:    5
  1590 ;; This function calls:
  1591 ;;		_memset
  1592 ;; This function is called by:
  1593 ;;		_sendData
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597                           	psect	text5
  1598  001850                     __ptext5:
  1599                           	opt stack 0
  1600  001850                     _FastTransfer_buffer_flush:
  1601                           	opt stack 22
  1602                           
  1603                           ;FastTransfer.c: 262: _this->count = 0;
  1604                           
  1605                           ;incstack = 0
  1606  001850  EE20 F0CC          	lfsr	2,204
  1607  001854  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1608  001856  26D9               	addwf	fsr2l,f,c
  1609  001858  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1610  00185A  22DA               	addwfc	fsr2h,f,c
  1611  00185C  0E00               	movlw	0
  1612  00185E  6EDE               	movwf	postinc2,c
  1613  001860  0E00               	movlw	0
  1614  001862  6EDD               	movwf	postdec2,c
  1615                           
  1616                           ;FastTransfer.c: 263: _this->head = 0;
  1617  001864  EE20 F0C8          	lfsr	2,200
  1618  001868  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1619  00186A  26D9               	addwf	fsr2l,f,c
  1620  00186C  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1621  00186E  22DA               	addwfc	fsr2h,f,c
  1622  001870  0E00               	movlw	0
  1623  001872  6EDE               	movwf	postinc2,c
  1624  001874  0E00               	movlw	0
  1625  001876  6EDD               	movwf	postdec2,c
  1626                           
  1627                           ;FastTransfer.c: 264: _this->tail = 0;
  1628  001878  EE20 F0CA          	lfsr	2,202
  1629  00187C  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1630  00187E  26D9               	addwf	fsr2l,f,c
  1631  001880  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1632  001882  22DA               	addwfc	fsr2h,f,c
  1633  001884  0E00               	movlw	0
  1634  001886  6EDE               	movwf	postinc2,c
  1635  001888  0E00               	movlw	0
  1636  00188A  6EDD               	movwf	postdec2,c
  1637                           
  1638                           ;FastTransfer.c: 265: if (clearBuffer) {
  1639  00188C  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1640  00188E  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1641  001890  B4D8               	btfsc	status,2,c
  1642  001892  0012               	return	
  1643                           
  1644                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1645  001894  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1646  001898  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1647  00189C  0E00               	movlw	0
  1648  00189E  6E1E               	movwf	memset@c+1,c
  1649  0018A0  0E00               	movlw	0
  1650  0018A2  6E1D               	movwf	memset@c,c
  1651  0018A4  0E00               	movlw	0
  1652  0018A6  6E20               	movwf	memset@n+1,c
  1653  0018A8  0EC8               	movlw	200
  1654  0018AA  6E1F               	movwf	memset@n,c
  1655  0018AC  EC1F  F00E         	call	_memset	;wreg free
  1656  0018B0  0012               	return	
  1657  0018B2                     __end_of_FastTransfer_buffer_flush:
  1658                           	opt stack 0
  1659                           tosu	equ	0xFFF
  1660                           tosh	equ	0xFFE
  1661                           tosl	equ	0xFFD
  1662                           pclath	equ	0xFFA
  1663                           tblptru	equ	0xFF8
  1664                           tblptrh	equ	0xFF7
  1665                           tblptrl	equ	0xFF6
  1666                           tablat	equ	0xFF5
  1667                           intcon	equ	0xFF2
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           indf2	equ	0xFDF
  1671                           postinc2	equ	0xFDE
  1672                           postdec2	equ	0xFDD
  1673                           plusw2	equ	0xFDB
  1674                           fsr2h	equ	0xFDA
  1675                           fsr2l	equ	0xFD9
  1676                           status	equ	0xFD8
  1677                           
  1678 ;; *************** function _ToSend *****************
  1679 ;; Defined at:
  1680 ;;		line 216 in file "FastTransfer.c"
  1681 ;; Parameters:    Size  Location     Type
  1682 ;;  where           1    wreg     unsigned char 
  1683 ;;  what            2    0[BANK0 ] unsigned int 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  where           1   39[COMRAM] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;		None               void
  1688 ;; Registers used:
  1689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1695 ;;      Params:         0       2       0       0       0       0       0
  1696 ;;      Locals:         1       0       0       0       0       0       0
  1697 ;;      Temps:          0       0       0       0       0       0       0
  1698 ;;      Totals:         1       2       0       0       0       0       0
  1699 ;;Total ram usage:        3 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    6
  1702 ;; This function calls:
  1703 ;;		_FastTransfer_buffer_put
  1704 ;; This function is called by:
  1705 ;;		_respondECU
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text6
  1710  001D66                     __ptext6:
  1711                           	opt stack 0
  1712  001D66                     _ToSend:
  1713                           	opt stack 22
  1714                           
  1715                           ;incstack = 0
  1716                           ;ToSend@where stored from wreg
  1717  001D66  6E28               	movwf	ToSend@where,c
  1718                           
  1719                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1720  001D68  0E30               	movlw	low _ring_buffer
  1721  001D6A  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1722  001D6C  0E01               	movlw	high _ring_buffer
  1723  001D6E  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1724  001D70  C028  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1725  001D74  C0D5  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1726  001D78  C0D6  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1727  001D7C  ECAC  F003         	call	_FastTransfer_buffer_put	;wreg free
  1728  001D80  0012               	return		;funcret
  1729  001D82                     __end_of_ToSend:
  1730                           	opt stack 0
  1731                           tosu	equ	0xFFF
  1732                           tosh	equ	0xFFE
  1733                           tosl	equ	0xFFD
  1734                           pclath	equ	0xFFA
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           intcon	equ	0xFF2
  1740                           postinc0	equ	0xFEE
  1741                           wreg	equ	0xFE8
  1742                           indf2	equ	0xFDF
  1743                           postinc2	equ	0xFDE
  1744                           postdec2	equ	0xFDD
  1745                           plusw2	equ	0xFDB
  1746                           fsr2h	equ	0xFDA
  1747                           fsr2l	equ	0xFD9
  1748                           status	equ	0xFD8
  1749                           
  1750 ;; *************** function _FastTransfer_buffer_put *****************
  1751 ;; Defined at:
  1752 ;;		line 223 in file "FastTransfer.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1755 ;;		 -> ring_buffer(206), 
  1756 ;;  towhere         1   34[COMRAM] unsigned char 
  1757 ;;  towhat          2   35[COMRAM] unsigned int 
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;		None               void
  1762 ;; Registers used:
  1763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1764 ;; Tracked objects:
  1765 ;;		On entry : 0/0
  1766 ;;		On exit  : 0/0
  1767 ;;		Unchanged: 0/0
  1768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1769 ;;      Params:         5       0       0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0       0       0
  1771 ;;      Temps:          2       0       0       0       0       0       0
  1772 ;;      Totals:         7       0       0       0       0       0       0
  1773 ;;Total ram usage:        7 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    5
  1776 ;; This function calls:
  1777 ;;		_FastTransfer_buffer_modulo_inc
  1778 ;; This function is called by:
  1779 ;;		_ToSend
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text7
  1784  000758                     __ptext7:
  1785                           	opt stack 0
  1786  000758                     _FastTransfer_buffer_put:
  1787                           	opt stack 22
  1788                           
  1789                           ;FastTransfer.c: 225: group.integer = towhat;
  1790                           
  1791                           ;incstack = 0
  1792  000758  C024  F029         	movff	FastTransfer_buffer_put@towhat,_group
  1793  00075C  C025  F02A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1794                           
  1795                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1796  000760  EE20 F0CC          	lfsr	2,204
  1797  000764  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1798  000766  26D9               	addwf	fsr2l,f,c
  1799  000768  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1800  00076A  22DA               	addwfc	fsr2h,f,c
  1801  00076C  0E01               	movlw	1
  1802  00076E  BEDB               	btfsc	plusw2,7,c
  1803  000770  D007               	goto	l3802
  1804  000772  0E01               	movlw	1
  1805  000774  50DB               	movf	plusw2,w,c
  1806  000776  E103               	bnz	u3081
  1807  000778  0EC5               	movlw	197
  1808  00077A  5CDE               	subwf	postinc2,w,c
  1809  00077C  B0D8               	btfsc	status,0,c
  1810  00077E                     u3081:
  1811  00077E  0012               	return	
  1812  000780                     l3802:
  1813                           
  1814                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1815  000780  EE20 F0C8          	lfsr	2,200
  1816  000784  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1817  000786  26D9               	addwf	fsr2l,f,c
  1818  000788  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1819  00078A  22DA               	addwfc	fsr2h,f,c
  1820  00078C  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  1821  000790  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  1822  000794  5026               	movf	??_FastTransfer_buffer_put,w,c
  1823  000796  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1824  000798  6ED9               	movwf	fsr2l,c
  1825  00079A  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  1826  00079C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1827  00079E  6EDA               	movwf	fsr2h,c
  1828  0007A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1829                           
  1830                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1831  0007A4  EE20 F0C8          	lfsr	2,200
  1832  0007A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1833  0007AA  26D9               	addwf	fsr2l,f,c
  1834  0007AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1835  0007AE  22DA               	addwfc	fsr2h,f,c
  1836  0007B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1837  0007B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1838  0007B8  0E00               	movlw	0
  1839  0007BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1840  0007BC  0EC8               	movlw	200
  1841  0007BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1842  0007C0  EC35  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1843  0007C4  EE20 F0C8          	lfsr	2,200
  1844  0007C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1845  0007CA  26D9               	addwf	fsr2l,f,c
  1846  0007CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1847  0007CE  22DA               	addwfc	fsr2h,f,c
  1848  0007D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1849  0007D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1850                           
  1851                           ;FastTransfer.c: 230: ++_this->count;
  1852  0007D8  EE20 F0CC          	lfsr	2,204
  1853  0007DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1854  0007DE  26D9               	addwf	fsr2l,f,c
  1855  0007E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1856  0007E2  22DA               	addwfc	fsr2h,f,c
  1857  0007E4  2ADE               	incf	postinc2,f,c
  1858  0007E6  0E00               	movlw	0
  1859  0007E8  22DD               	addwfc	postdec2,f,c
  1860                           
  1861                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1862  0007EA  EE20 F0C8          	lfsr	2,200
  1863  0007EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1864  0007F0  26D9               	addwf	fsr2l,f,c
  1865  0007F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1866  0007F4  22DA               	addwfc	fsr2h,f,c
  1867  0007F6  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  1868  0007FA  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  1869  0007FE  5026               	movf	??_FastTransfer_buffer_put,w,c
  1870  000800  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1871  000802  6ED9               	movwf	fsr2l,c
  1872  000804  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  1873  000806  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1874  000808  6EDA               	movwf	fsr2h,c
  1875  00080A  C029  FFDF         	movff	_group,indf2
  1876                           
  1877                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1878  00080E  EE20 F0C8          	lfsr	2,200
  1879  000812  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1880  000814  26D9               	addwf	fsr2l,f,c
  1881  000816  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1882  000818  22DA               	addwfc	fsr2h,f,c
  1883  00081A  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1884  00081E  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1885  000822  0E00               	movlw	0
  1886  000824  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1887  000826  0EC8               	movlw	200
  1888  000828  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1889  00082A  EC35  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1890  00082E  EE20 F0C8          	lfsr	2,200
  1891  000832  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1892  000834  26D9               	addwf	fsr2l,f,c
  1893  000836  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1894  000838  22DA               	addwfc	fsr2h,f,c
  1895  00083A  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1896  00083E  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1897                           
  1898                           ;FastTransfer.c: 233: ++_this->count;
  1899  000842  EE20 F0CC          	lfsr	2,204
  1900  000846  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1901  000848  26D9               	addwf	fsr2l,f,c
  1902  00084A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1903  00084C  22DA               	addwfc	fsr2h,f,c
  1904  00084E  2ADE               	incf	postinc2,f,c
  1905  000850  0E00               	movlw	0
  1906  000852  22DD               	addwfc	postdec2,f,c
  1907                           
  1908                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1909  000854  EE20 F0C8          	lfsr	2,200
  1910  000858  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1911  00085A  26D9               	addwf	fsr2l,f,c
  1912  00085C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1913  00085E  22DA               	addwfc	fsr2h,f,c
  1914  000860  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  1915  000864  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  1916  000868  5026               	movf	??_FastTransfer_buffer_put,w,c
  1917  00086A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1918  00086C  6ED9               	movwf	fsr2l,c
  1919  00086E  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  1920  000870  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1921  000872  6EDA               	movwf	fsr2h,c
  1922  000874  C02A  FFDF         	movff	_group+1,indf2
  1923                           
  1924                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1925  000878  EE20 F0C8          	lfsr	2,200
  1926  00087C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1927  00087E  26D9               	addwf	fsr2l,f,c
  1928  000880  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1929  000882  22DA               	addwfc	fsr2h,f,c
  1930  000884  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1931  000888  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1932  00088C  0E00               	movlw	0
  1933  00088E  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1934  000890  0EC8               	movlw	200
  1935  000892  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1936  000894  EC35  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1937  000898  EE20 F0C8          	lfsr	2,200
  1938  00089C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1939  00089E  26D9               	addwf	fsr2l,f,c
  1940  0008A0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1941  0008A2  22DA               	addwfc	fsr2h,f,c
  1942  0008A4  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1943  0008A8  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1944                           
  1945                           ;FastTransfer.c: 236: ++_this->count;
  1946  0008AC  EE20 F0CC          	lfsr	2,204
  1947  0008B0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1948  0008B2  26D9               	addwf	fsr2l,f,c
  1949  0008B4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1950  0008B6  22DA               	addwfc	fsr2h,f,c
  1951  0008B8  2ADE               	incf	postinc2,f,c
  1952  0008BA  0E00               	movlw	0
  1953  0008BC  22DD               	addwfc	postdec2,f,c
  1954  0008BE  0012               	return	
  1955  0008C0                     __end_of_FastTransfer_buffer_put:
  1956                           	opt stack 0
  1957                           tosu	equ	0xFFF
  1958                           tosh	equ	0xFFE
  1959                           tosl	equ	0xFFD
  1960                           pclath	equ	0xFFA
  1961                           tblptru	equ	0xFF8
  1962                           tblptrh	equ	0xFF7
  1963                           tblptrl	equ	0xFF6
  1964                           tablat	equ	0xFF5
  1965                           intcon	equ	0xFF2
  1966                           postinc0	equ	0xFEE
  1967                           wreg	equ	0xFE8
  1968                           indf2	equ	0xFDF
  1969                           postinc2	equ	0xFDE
  1970                           postdec2	equ	0xFDD
  1971                           plusw2	equ	0xFDB
  1972                           fsr2h	equ	0xFDA
  1973                           fsr2l	equ	0xFD9
  1974                           status	equ	0xFD8
  1975                           
  1976 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1977 ;; Defined at:
  1978 ;;		line 273 in file "FastTransfer.c"
  1979 ;; Parameters:    Size  Location     Type
  1980 ;;  value           2   26[COMRAM] const unsigned int 
  1981 ;;  modulus         2   28[COMRAM] const unsigned int 
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;  my_value        2   30[COMRAM] unsigned int 
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  2   26[COMRAM] unsigned int 
  1986 ;; Registers used:
  1987 ;;		wreg, status,2, status,0
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1993 ;;      Params:         4       0       0       0       0       0       0
  1994 ;;      Locals:         2       0       0       0       0       0       0
  1995 ;;      Temps:          0       0       0       0       0       0       0
  1996 ;;      Totals:         6       0       0       0       0       0       0
  1997 ;;Total ram usage:        6 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    4
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_FastTransfer_buffer_put
  2004 ;;		_FastTransfer_buffer_get
  2005 ;; This function uses a non-reentrant model
  2006 ;;
  2007                           
  2008                           	psect	text8
  2009  001C6A                     __ptext8:
  2010                           	opt stack 0
  2011  001C6A                     _FastTransfer_buffer_modulo_inc:
  2012                           	opt stack 22
  2013                           
  2014                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2015                           
  2016                           ;incstack = 0
  2017  001C6A  0E01               	movlw	1
  2018  001C6C  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2019  001C6E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2020  001C70  0E00               	movlw	0
  2021  001C72  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2022  001C74  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2023                           
  2024                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2025  001C76  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2026  001C78  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2027  001C7A  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2028  001C7C  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2029  001C7E  A0D8               	btfss	status,0,c
  2030  001C80  D004               	goto	l3722
  2031                           
  2032                           ;FastTransfer.c: 276: my_value = 0;
  2033  001C82  0E00               	movlw	0
  2034  001C84  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2035  001C86  0E00               	movlw	0
  2036  001C88  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2037  001C8A                     l3722:
  2038                           
  2039                           ;FastTransfer.c: 277: }
  2040                           ;FastTransfer.c: 278: return (my_value);
  2041  001C8A  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2042  001C8E  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2043  001C92  0012               	return	
  2044  001C94                     __end_of_FastTransfer_buffer_modulo_inc:
  2045                           	opt stack 0
  2046                           tosu	equ	0xFFF
  2047                           tosh	equ	0xFFE
  2048                           tosl	equ	0xFFD
  2049                           pclath	equ	0xFFA
  2050                           tblptru	equ	0xFF8
  2051                           tblptrh	equ	0xFF7
  2052                           tblptrl	equ	0xFF6
  2053                           tablat	equ	0xFF5
  2054                           intcon	equ	0xFF2
  2055                           postinc0	equ	0xFEE
  2056                           wreg	equ	0xFE8
  2057                           indf2	equ	0xFDF
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           plusw2	equ	0xFDB
  2061                           fsr2h	equ	0xFDA
  2062                           fsr2l	equ	0xFD9
  2063                           status	equ	0xFD8
  2064                           
  2065 ;; *************** function _receiveData *****************
  2066 ;; Defined at:
  2067 ;;		line 82 in file "FastTransfer.c"
  2068 ;; Parameters:    Size  Location     Type
  2069 ;;		None
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  holder          3   16[BANK0 ] unsigned char [3]
  2072 ;;  crcHolder       1   20[BANK0 ] unsigned char 
  2073 ;;  holder          3   13[BANK0 ] unsigned char [3]
  2074 ;;  crcHolder       1   19[BANK0 ] unsigned char 
  2075 ;;  u               2   21[BANK0 ] int 
  2076 ;;  r               2   23[BANK0 ] int 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      unsigned char 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         0       0       0       0       0       0       0
  2087 ;;      Locals:         0      12       0       0       0       0       0
  2088 ;;      Temps:          0       6       0       0       0       0       0
  2089 ;;      Totals:         0      18       0       0       0       0       0
  2090 ;;Total ram usage:       18 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    8
  2093 ;; This function calls:
  2094 ;;		Absolute function
  2095 ;;		_CRC8
  2096 ;;		_CRCcheck
  2097 ;;		_Receive_available
  2098 ;;		_Receive_get
  2099 ;;		_Receive_peek
  2100 ;;		_Send_put
  2101 ;; This function is called by:
  2102 ;;		_updateComms
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105                           
  2106                           	psect	text9
  2107  0000A4                     __ptext9:
  2108                           	opt stack 0
  2109  0000A4                     _receiveData:
  2110                           	opt stack 21
  2111                           
  2112                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2113                           
  2114                           ;incstack = 0
  2115  0000A4  5043               	movf	_rx_len,w,c
  2116  0000A6  A4D8               	btfss	status,2,c
  2117  0000A8  D0AC               	goto	l4182
  2118                           
  2119                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2120  0000AA  D801               	call	u3498
  2121  0000AC  D00A               	goto	u3499
  2122  0000AE                     u3498:
  2123  0000AE  0005               	push	
  2124  0000B0  6EFA               	movwf	pclath,c
  2125  0000B2  5031               	movf	_serial_available,w,c
  2126  0000B4  6EFD               	movwf	tosl,c
  2127  0000B6  5032               	movf	_serial_available+1,w,c
  2128  0000B8  6EFE               	movwf	tosh,c
  2129  0000BA  50F8               	movf	tblptru,w,c
  2130  0000BC  6EFF               	movwf	tosu,c
  2131  0000BE  50FA               	movf	pclath,w,c
  2132  0000C0  0012               	return		;indir
  2133  0000C2                     u3499:
  2134  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2135  0000C4  D09E               	goto	l4182
  2136  0000C6  501E               	movf	?_Receive_available+1,w,c
  2137  0000C8  E11E               	bnz	l4158
  2138  0000CA  0E05               	movlw	5
  2139  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2140  0000CE  B0D8               	btfsc	status,0,c
  2141  0000D0  D01A               	goto	l4158
  2142  0000D2  D097               	goto	l4182
  2143  0000D4                     l4150:
  2144                           
  2145                           ;FastTransfer.c: 93: alignErrorCounter++;
  2146  0000D4  0100               	movlb	0	; () banked
  2147  0000D6  4B92               	infsnz	_alignErrorCounter& (0+255),f,b
  2148  0000D8  2B93               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2152  0000DA  D801               	call	u3518
  2153  0000DC  D00A               	goto	u3519
  2154  0000DE                     u3518:
  2155  0000DE  0005               	push	
  2156  0000E0  6EFA               	movwf	pclath,c
  2157  0000E2  5031               	movf	_serial_available,w,c
  2158  0000E4  6EFD               	movwf	tosl,c
  2159  0000E6  5032               	movf	_serial_available+1,w,c
  2160  0000E8  6EFE               	movwf	tosh,c
  2161  0000EA  50F8               	movf	tblptru,w,c
  2162  0000EC  6EFF               	movwf	tosu,c
  2163  0000EE  50FA               	movf	pclath,w,c
  2164  0000F0  0012               	return		;indir
  2165  0000F2                     u3519:
  2166  0000F2  BE1E               	btfsc	?_Receive_available+1,7,c
  2167  0000F4  D006               	goto	l4154
  2168  0000F6  501E               	movf	?_Receive_available+1,w,c
  2169  0000F8  E106               	bnz	l4158
  2170  0000FA  0E05               	movlw	5
  2171  0000FC  5C1D               	subwf	?_Receive_available,w,c
  2172  0000FE  B0D8               	btfsc	status,0,c
  2173  000100  D002               	goto	l4158
  2174  000102                     l4154:
  2175                           
  2176                           ;FastTransfer.c: 95: return 0;
  2177  000102  0E00               	movlw	0
  2178  000104  0012               	return	
  2179  000106                     l4158:
  2180  000106  D801               	call	u3538
  2181  000108  D00A               	goto	u3539
  2182  00010A                     u3538:
  2183  00010A  0005               	push	
  2184  00010C  6EFA               	movwf	pclath,c
  2185  00010E  5033               	movf	_serial_read,w,c
  2186  000110  6EFD               	movwf	tosl,c
  2187  000112  5034               	movf	_serial_read+1,w,c
  2188  000114  6EFE               	movwf	tosh,c
  2189  000116  50F8               	movf	tblptru,w,c
  2190  000118  6EFF               	movwf	tosu,c
  2191  00011A  50FA               	movf	pclath,w,c
  2192  00011C  0012               	return		;indir
  2193  00011E                     u3539:
  2194  00011E  0A06               	xorlw	6
  2195  000120  A4D8               	btfss	status,2,c
  2196  000122  D7D8               	goto	l4150
  2197                           
  2198                           ;FastTransfer.c: 96: }
  2199                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2200  000124  D801               	call	u3558
  2201  000126  D00A               	goto	u3559
  2202  000128                     u3558:
  2203  000128  0005               	push	
  2204  00012A  6EFA               	movwf	pclath,c
  2205  00012C  5033               	movf	_serial_read,w,c
  2206  00012E  6EFD               	movwf	tosl,c
  2207  000130  5034               	movf	_serial_read+1,w,c
  2208  000132  6EFE               	movwf	tosh,c
  2209  000134  50F8               	movf	tblptru,w,c
  2210  000136  6EFF               	movwf	tosu,c
  2211  000138  50FA               	movf	pclath,w,c
  2212  00013A  0012               	return		;indir
  2213  00013C                     u3559:
  2214  00013C  0A85               	xorlw	133
  2215  00013E  A4D8               	btfss	status,2,c
  2216  000140  D060               	goto	l4182
  2217                           
  2218                           ;FastTransfer.c: 98: rx_address = serial_read();
  2219  000142  D801               	call	u3578
  2220  000144  D00A               	goto	u3579
  2221  000146                     u3578:
  2222  000146  0005               	push	
  2223  000148  6EFA               	movwf	pclath,c
  2224  00014A  5033               	movf	_serial_read,w,c
  2225  00014C  6EFD               	movwf	tosl,c
  2226  00014E  5034               	movf	_serial_read+1,w,c
  2227  000150  6EFE               	movwf	tosh,c
  2228  000152  50F8               	movf	tblptru,w,c
  2229  000154  6EFF               	movwf	tosu,c
  2230  000156  50FA               	movf	pclath,w,c
  2231  000158  0012               	return		;indir
  2232  00015A                     u3579:
  2233  00015A  6E41               	movwf	_rx_address,c
  2234                           
  2235                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2236  00015C  D801               	call	u3588
  2237  00015E  D00A               	goto	u3589
  2238  000160                     u3588:
  2239  000160  0005               	push	
  2240  000162  6EFA               	movwf	pclath,c
  2241  000164  5033               	movf	_serial_read,w,c
  2242  000166  6EFD               	movwf	tosl,c
  2243  000168  5034               	movf	_serial_read+1,w,c
  2244  00016A  6EFE               	movwf	tosh,c
  2245  00016C  50F8               	movf	tblptru,w,c
  2246  00016E  6EFF               	movwf	tosu,c
  2247  000170  50FA               	movf	pclath,w,c
  2248  000172  0012               	return		;indir
  2249  000174                     u3589:
  2250  000174  6E40               	movwf	_returnAddress,c
  2251                           
  2252                           ;FastTransfer.c: 100: rx_len = serial_read();
  2253  000176  D801               	call	u3598
  2254  000178  D00A               	goto	u3599
  2255  00017A                     u3598:
  2256  00017A  0005               	push	
  2257  00017C  6EFA               	movwf	pclath,c
  2258  00017E  5033               	movf	_serial_read,w,c
  2259  000180  6EFD               	movwf	tosl,c
  2260  000182  5034               	movf	_serial_read+1,w,c
  2261  000184  6EFE               	movwf	tosh,c
  2262  000186  50F8               	movf	tblptru,w,c
  2263  000188  6EFF               	movwf	tosu,c
  2264  00018A  50FA               	movf	pclath,w,c
  2265  00018C  0012               	return		;indir
  2266  00018E                     u3599:
  2267  00018E  6E43               	movwf	_rx_len,c
  2268                           
  2269                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2270  000190  503F               	movf	_moduleAddress,w,c
  2271  000192  1841               	xorwf	_rx_address,w,c
  2272  000194  B4D8               	btfsc	status,2,c
  2273  000196  D035               	goto	l4182
  2274                           
  2275                           ;FastTransfer.c: 103: addressErrorCounter++;
  2276  000198  0100               	movlb	0	; () banked
  2277  00019A  4B90               	infsnz	_addressErrorCounter& (0+255),f,b
  2278  00019C  2B91               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;FastTransfer.c: 106: int u;
  2282                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2283  00019E  0E00               	movlw	0
  2284  0001A0  0100               	movlb	0	; () banked
  2285  0001A2  6FEB               	movwf	(receiveData@u+1)& (0+255),b
  2286  0001A4  0E00               	movlw	0
  2287  0001A6  6FEA               	movwf	receiveData@u& (0+255),b
  2288  0001A8  D00F               	goto	l4174
  2289  0001AA                     l4170:
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;FastTransfer.c: 108: serial_read();
  2293  0001AA  D801               	call	u3618
  2294  0001AC  D00A               	goto	l4172
  2295  0001AE                     u3618:
  2296  0001AE  0005               	push	
  2297  0001B0  6EFA               	movwf	pclath,c
  2298  0001B2  5033               	movf	_serial_read,w,c
  2299  0001B4  6EFD               	movwf	tosl,c
  2300  0001B6  5034               	movf	_serial_read+1,w,c
  2301  0001B8  6EFE               	movwf	tosh,c
  2302  0001BA  50F8               	movf	tblptru,w,c
  2303  0001BC  6EFF               	movwf	tosu,c
  2304  0001BE  50FA               	movf	pclath,w,c
  2305  0001C0  0012               	return		;indir
  2306  0001C2                     l4172:
  2307  0001C2  0100               	movlb	0	; () banked
  2308  0001C4  4BEA               	infsnz	receiveData@u& (0+255),f,b
  2309  0001C6  2BEB               	incf	(receiveData@u+1)& (0+255),f,b
  2310  0001C8                     l4174:
  2311                           
  2312                           ; BSR set to: 0
  2313  0001C8  5043               	movf	_rx_len,w,c
  2314  0001CA  0100               	movlb	0	; () banked
  2315  0001CC  6FDC               	movwf	??_receiveData& (0+255),b
  2316  0001CE  6BDD               	clrf	(??_receiveData+1)& (0+255),b
  2317  0001D0  0E01               	movlw	1
  2318  0001D2  0100               	movlb	0	; () banked
  2319  0001D4  27DC               	addwf	??_receiveData& (0+255),f,b
  2320  0001D6  0E00               	movlw	0
  2321  0001D8  23DD               	addwfc	(??_receiveData+1)& (0+255),f,b
  2322  0001DA  0100               	movlb	0	; () banked
  2323  0001DC  51EA               	movf	receiveData@u& (0+255),w,b
  2324  0001DE  0100               	movlb	0	; () banked
  2325  0001E0  5DDC               	subwf	??_receiveData& (0+255),w,b
  2326  0001E2  0100               	movlb	0	; () banked
  2327  0001E4  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  2328  0001E6  0A80               	xorlw	128
  2329  0001E8  0100               	movlb	0	; () banked
  2330  0001EA  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  2331  0001EC  0100               	movlb	0	; () banked
  2332  0001EE  51EB               	movf	(receiveData@u+1)& (0+255),w,b
  2333  0001F0  0A80               	xorlw	128
  2334  0001F2  0100               	movlb	0	; () banked
  2335  0001F4  59DE               	subwfb	(??_receiveData+2)& (0+255),w,b
  2336  0001F6  B0D8               	btfsc	status,0,c
  2337  0001F8  D7D8               	goto	l4170
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;FastTransfer.c: 109: }
  2341                           ;FastTransfer.c: 110: rx_len = 0;
  2342                           
  2343                           ; BSR set to: 0
  2344  0001FA  0E00               	movlw	0
  2345  0001FC  6E43               	movwf	_rx_len,c
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;FastTransfer.c: 111: return 0;
  2349  0001FE  0E00               	movlw	0
  2350                           
  2351                           ; BSR set to: 0
  2352  000200  0012               	return	
  2353  000202                     l4182:
  2354                           
  2355                           ;FastTransfer.c: 112: }
  2356                           ;FastTransfer.c: 114: }
  2357                           ;FastTransfer.c: 115: }
  2358                           ;FastTransfer.c: 116: }
  2359                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2360  000202  5043               	movf	_rx_len,w,c
  2361  000204  B4D8               	btfsc	status,2,c
  2362  000206  D2A6               	goto	l4306
  2363                           
  2364                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2365  000208  5042               	movf	_rx_array_inx,w,c
  2366  00020A  A4D8               	btfss	status,2,c
  2367  00020C  D044               	goto	l4206
  2368  00020E                     l4188:
  2369  00020E  D801               	call	u3658
  2370  000210  D00A               	goto	u3659
  2371  000212                     u3658:
  2372  000212  0005               	push	
  2373  000214  6EFA               	movwf	pclath,c
  2374  000216  5031               	movf	_serial_available,w,c
  2375  000218  6EFD               	movwf	tosl,c
  2376  00021A  5032               	movf	_serial_available+1,w,c
  2377  00021C  6EFE               	movwf	tosh,c
  2378  00021E  50F8               	movf	tblptru,w,c
  2379  000220  6EFF               	movwf	tosu,c
  2380  000222  50FA               	movf	pclath,w,c
  2381  000224  0012               	return		;indir
  2382  000226                     u3659:
  2383  000226  BE1E               	btfsc	?_Receive_available+1,7,c
  2384  000228  D7F2               	goto	l4188
  2385  00022A  501E               	movf	?_Receive_available+1,w,c
  2386  00022C  E103               	bnz	l4190
  2387  00022E  041D               	decf	?_Receive_available,w,c
  2388  000230  A0D8               	btfss	status,0,c
  2389  000232  D7ED               	goto	l4188
  2390  000234                     l4190:
  2391                           
  2392                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2393  000234  D801               	call	u3678
  2394  000236  D00B               	goto	u3679
  2395  000238                     u3678:
  2396  000238  0005               	push	
  2397  00023A  0100               	movlb	0	; () banked
  2398  00023C  6EFA               	movwf	pclath,c
  2399  00023E  519A               	movf	_serial_peek& (0+255),w,b
  2400  000240  6EFD               	movwf	tosl,c
  2401  000242  519B               	movf	(_serial_peek+1)& (0+255),w,b
  2402  000244  6EFE               	movwf	tosh,c
  2403  000246  50F8               	movf	tblptru,w,c
  2404  000248  6EFF               	movwf	tosu,c
  2405  00024A  50FA               	movf	pclath,w,c
  2406  00024C  0012               	return		;indir
  2407  00024E                     u3679:
  2408  00024E  0AFF               	xorlw	255
  2409  000250  A4D8               	btfss	status,2,c
  2410  000252  D021               	goto	l4206
  2411                           
  2412                           ;FastTransfer.c: 125: CRCcheck();
  2413  000254  EC60  F004         	call	_CRCcheck	;wreg free
  2414                           
  2415                           ;FastTransfer.c: 126: rx_len = 0;
  2416  000258  0E00               	movlw	0
  2417  00025A  6E43               	movwf	_rx_len,c
  2418                           
  2419                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2420  00025C  0E00               	movlw	0
  2421  00025E  6E42               	movwf	_rx_array_inx,c
  2422                           
  2423                           ;FastTransfer.c: 128: return 0;
  2424  000260  0E00               	movlw	0
  2425  000262  0012               	return	
  2426  000264                     l4202:
  2427                           
  2428                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2429  000264  D801               	call	u3698
  2430  000266  D00A               	goto	u3699
  2431  000268                     u3698:
  2432  000268  0005               	push	
  2433  00026A  6EFA               	movwf	pclath,c
  2434  00026C  5033               	movf	_serial_read,w,c
  2435  00026E  6EFD               	movwf	tosl,c
  2436  000270  5034               	movf	_serial_read+1,w,c
  2437  000272  6EFE               	movwf	tosh,c
  2438  000274  50F8               	movf	tblptru,w,c
  2439  000276  6EFF               	movwf	tosu,c
  2440  000278  50FA               	movf	pclath,w,c
  2441  00027A  0012               	return		;indir
  2442  00027C                     u3699:
  2443  00027C  0100               	movlb	0	; () banked
  2444  00027E  6FDC               	movwf	??_receiveData& (0+255),b
  2445  000280  5042               	movf	_rx_array_inx,w,c
  2446  000282  0D01               	mullw	1
  2447  000284  0E00               	movlw	low _rx_buffer
  2448  000286  24F3               	addwf	prodl,w,c
  2449  000288  6ED9               	movwf	fsr2l,c
  2450  00028A  0E02               	movlw	high _rx_buffer
  2451  00028C  20F4               	addwfc	prodh,w,c
  2452  00028E  6EDA               	movwf	fsr2h,c
  2453  000290  C0DC  FFDF         	movff	??_receiveData,indf2
  2454                           
  2455                           ; BSR set to: 0
  2456  000294  2A42               	incf	_rx_array_inx,f,c
  2457  000296                     l4206:
  2458  000296  D801               	call	u3708
  2459  000298  D00A               	goto	u3709
  2460  00029A                     u3708:
  2461  00029A  0005               	push	
  2462  00029C  6EFA               	movwf	pclath,c
  2463  00029E  5031               	movf	_serial_available,w,c
  2464  0002A0  6EFD               	movwf	tosl,c
  2465  0002A2  5032               	movf	_serial_available+1,w,c
  2466  0002A4  6EFE               	movwf	tosh,c
  2467  0002A6  50F8               	movf	tblptru,w,c
  2468  0002A8  6EFF               	movwf	tosu,c
  2469  0002AA  50FA               	movf	pclath,w,c
  2470  0002AC  0012               	return		;indir
  2471  0002AE                     u3709:
  2472  0002AE  501D               	movf	?_Receive_available,w,c
  2473  0002B0  101E               	iorwf	?_Receive_available+1,w,c
  2474  0002B2  B4D8               	btfsc	status,2,c
  2475  0002B4  D004               	goto	l4210
  2476  0002B6  5042               	movf	_rx_array_inx,w,c
  2477  0002B8  5C43               	subwf	_rx_len,w,c
  2478  0002BA  B0D8               	btfsc	status,0,c
  2479  0002BC  D7D3               	goto	l4202
  2480  0002BE                     l4210:
  2481                           
  2482                           ;FastTransfer.c: 135: }
  2483                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2484  0002BE  5043               	movf	_rx_len,w,c
  2485  0002C0  0100               	movlb	0	; () banked
  2486  0002C2  6FDC               	movwf	??_receiveData& (0+255),b
  2487  0002C4  6BDD               	clrf	(??_receiveData+1)& (0+255),b
  2488  0002C6  0EFF               	movlw	255
  2489  0002C8  0100               	movlb	0	; () banked
  2490  0002CA  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  2491  0002CC  0EFF               	movlw	255
  2492  0002CE  0100               	movlb	0	; () banked
  2493  0002D0  6FDF               	movwf	(??_receiveData+3)& (0+255),b
  2494  0002D2  5042               	movf	_rx_array_inx,w,c
  2495  0002D4  0100               	movlb	0	; () banked
  2496  0002D6  6FE0               	movwf	(??_receiveData+4)& (0+255),b
  2497  0002D8  6BE1               	clrf	(??_receiveData+5)& (0+255),b
  2498  0002DA  0100               	movlb	0	; () banked
  2499  0002DC  51DE               	movf	(??_receiveData+2)& (0+255),w,b
  2500  0002DE  0100               	movlb	0	; () banked
  2501  0002E0  27E0               	addwf	(??_receiveData+4)& (0+255),f,b
  2502  0002E2  0100               	movlb	0	; () banked
  2503  0002E4  51DF               	movf	(??_receiveData+3)& (0+255),w,b
  2504  0002E6  0100               	movlb	0	; () banked
  2505  0002E8  23E1               	addwfc	(??_receiveData+5)& (0+255),f,b
  2506  0002EA  0100               	movlb	0	; () banked
  2507  0002EC  51DC               	movf	??_receiveData& (0+255),w,b
  2508  0002EE  0100               	movlb	0	; () banked
  2509  0002F0  19E0               	xorwf	(??_receiveData+4)& (0+255),w,b
  2510  0002F2  E105               	bnz	u3731
  2511  0002F4  0100               	movlb	0	; () banked
  2512  0002F6  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  2513  0002F8  0100               	movlb	0	; () banked
  2514  0002FA  19E1               	xorwf	(??_receiveData+5)& (0+255),w,b
  2515  0002FC  A4D8               	btfss	status,2,c
  2516  0002FE                     u3731:
  2517  0002FE  D22A               	goto	l4306
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2521  000300  0E00               	movlw	low _rx_buffer
  2522  000302  6E1B               	movwf	CRC8@data,c
  2523  000304  0E02               	movlw	high _rx_buffer
  2524  000306  6E1C               	movwf	CRC8@data+1,c
  2525  000308  C043  F01D         	movff	_rx_len,CRC8@len
  2526  00030C  EC32  F00D         	call	_CRC8	;wreg free
  2527  000310  6E3D               	movwf	_calc_CS,c
  2528                           
  2529                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2530  000312  0EFF               	movlw	255
  2531  000314  0100               	movlb	0	; () banked
  2532  000316  6FDC               	movwf	??_receiveData& (0+255),b
  2533  000318  0EFF               	movlw	255
  2534  00031A  0100               	movlb	0	; () banked
  2535  00031C  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  2536  00031E  5042               	movf	_rx_array_inx,w,c
  2537  000320  0100               	movlb	0	; () banked
  2538  000322  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  2539  000324  6BDF               	clrf	(??_receiveData+3)& (0+255),b
  2540  000326  0100               	movlb	0	; () banked
  2541  000328  51DC               	movf	??_receiveData& (0+255),w,b
  2542  00032A  0100               	movlb	0	; () banked
  2543  00032C  27DE               	addwf	(??_receiveData+2)& (0+255),f,b
  2544  00032E  0100               	movlb	0	; () banked
  2545  000330  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  2546  000332  0100               	movlb	0	; () banked
  2547  000334  23DF               	addwfc	(??_receiveData+3)& (0+255),f,b
  2548  000336  0E00               	movlw	low _rx_buffer
  2549  000338  0100               	movlb	0	; () banked
  2550  00033A  25DE               	addwf	(??_receiveData+2)& (0+255),w,b
  2551  00033C  6ED9               	movwf	fsr2l,c
  2552  00033E  0E02               	movlw	high _rx_buffer
  2553  000340  0100               	movlb	0	; () banked
  2554  000342  21DF               	addwfc	(??_receiveData+3)& (0+255),w,b
  2555  000344  6EDA               	movwf	fsr2h,c
  2556  000346  503D               	movf	_calc_CS,w,c
  2557  000348  18DE               	xorwf	postinc2,w,c
  2558  00034A  A4D8               	btfss	status,2,c
  2559  00034C  D13B               	goto	l4268
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;FastTransfer.c: 147: int r;
  2563                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2564  00034E  0E00               	movlw	0
  2565  000350  0100               	movlb	0	; () banked
  2566  000352  6FED               	movwf	(receiveData@r+1)& (0+255),b
  2567  000354  0E00               	movlw	0
  2568  000356  6FEC               	movwf	receiveData@r& (0+255),b
  2569  000358  D05C               	goto	l4228
  2570  00035A                     l4218:
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2574  00035A  0E00               	movlw	low _rx_buffer
  2575  00035C  0100               	movlb	0	; () banked
  2576  00035E  25EC               	addwf	receiveData@r& (0+255),w,b
  2577  000360  6ED9               	movwf	fsr2l,c
  2578  000362  0E02               	movlw	high _rx_buffer
  2579  000364  0100               	movlb	0	; () banked
  2580  000366  21ED               	addwfc	(receiveData@r+1)& (0+255),w,b
  2581  000368  6EDA               	movwf	fsr2h,c
  2582  00036A  503E               	movf	_maxDataAddress,w,c
  2583  00036C  5CDE               	subwf	postinc2,w,c
  2584  00036E  B0D8               	btfsc	status,0,c
  2585  000370  D043               	goto	l4224
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2589  000372  0E01               	movlw	1
  2590  000374  0100               	movlb	0	; () banked
  2591  000376  25EC               	addwf	receiveData@r& (0+255),w,b
  2592  000378  0100               	movlb	0	; () banked
  2593  00037A  6FDC               	movwf	??_receiveData& (0+255),b
  2594  00037C  0E00               	movlw	0
  2595  00037E  0100               	movlb	0	; () banked
  2596  000380  21ED               	addwfc	(receiveData@r+1)& (0+255),w,b
  2597  000382  0100               	movlb	0	; () banked
  2598  000384  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  2599  000386  0E00               	movlw	low _rx_buffer
  2600  000388  0100               	movlb	0	; () banked
  2601  00038A  25DC               	addwf	??_receiveData& (0+255),w,b
  2602  00038C  6ED9               	movwf	fsr2l,c
  2603  00038E  0E02               	movlw	high _rx_buffer
  2604  000390  0100               	movlb	0	; () banked
  2605  000392  21DD               	addwfc	(??_receiveData+1)& (0+255),w,b
  2606  000394  6EDA               	movwf	fsr2h,c
  2607  000396  50DF               	movf	indf2,w,c
  2608  000398  6E29               	movwf	_group,c
  2609                           
  2610                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2611  00039A  0E02               	movlw	2
  2612  00039C  0100               	movlb	0	; () banked
  2613  00039E  25EC               	addwf	receiveData@r& (0+255),w,b
  2614  0003A0  0100               	movlb	0	; () banked
  2615  0003A2  6FDC               	movwf	??_receiveData& (0+255),b
  2616  0003A4  0E00               	movlw	0
  2617  0003A6  0100               	movlb	0	; () banked
  2618  0003A8  21ED               	addwfc	(receiveData@r+1)& (0+255),w,b
  2619  0003AA  0100               	movlb	0	; () banked
  2620  0003AC  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  2621  0003AE  0E00               	movlw	low _rx_buffer
  2622  0003B0  0100               	movlb	0	; () banked
  2623  0003B2  25DC               	addwf	??_receiveData& (0+255),w,b
  2624  0003B4  6ED9               	movwf	fsr2l,c
  2625  0003B6  0E02               	movlw	high _rx_buffer
  2626  0003B8  0100               	movlb	0	; () banked
  2627  0003BA  21DD               	addwfc	(??_receiveData+1)& (0+255),w,b
  2628  0003BC  6EDA               	movwf	fsr2h,c
  2629  0003BE  50DF               	movf	indf2,w,c
  2630  0003C0  6E2A               	movwf	_group+1,c
  2631                           
  2632                           ; BSR set to: 0
  2633                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2634  0003C2  0E00               	movlw	low _rx_buffer
  2635  0003C4  0100               	movlb	0	; () banked
  2636  0003C6  25EC               	addwf	receiveData@r& (0+255),w,b
  2637  0003C8  6ED9               	movwf	fsr2l,c
  2638  0003CA  0E02               	movlw	high _rx_buffer
  2639  0003CC  0100               	movlb	0	; () banked
  2640  0003CE  21ED               	addwfc	(receiveData@r+1)& (0+255),w,b
  2641  0003D0  6EDA               	movwf	fsr2h,c
  2642  0003D2  50DF               	movf	indf2,w,c
  2643  0003D4  0100               	movlb	0	; () banked
  2644  0003D6  6FDC               	movwf	??_receiveData& (0+255),b
  2645  0003D8  0100               	movlb	0	; () banked
  2646  0003DA  51DC               	movf	??_receiveData& (0+255),w,b
  2647  0003DC  0D02               	mullw	2
  2648  0003DE  50F3               	movf	prodl,w,c
  2649  0003E0  0100               	movlb	0	; () banked
  2650  0003E2  2598               	addwf	_receiveArrayAddress& (0+255),w,b
  2651  0003E4  6ED9               	movwf	fsr2l,c
  2652  0003E6  50F4               	movf	prodh,w,c
  2653  0003E8  0100               	movlb	0	; () banked
  2654  0003EA  2199               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2655  0003EC  6EDA               	movwf	fsr2h,c
  2656  0003EE  C029  FFDE         	movff	_group,postinc2
  2657  0003F2  C02A  FFDD         	movff	_group+1,postdec2
  2658                           
  2659                           ;FastTransfer.c: 153: } else {
  2660  0003F6  D003               	goto	l4226
  2661  0003F8                     l4224:
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2665  0003F8  0100               	movlb	0	; () banked
  2666  0003FA  4B96               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2667  0003FC  2B97               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2668  0003FE                     l4226:
  2669                           
  2670                           ; BSR set to: 0
  2671  0003FE  0E03               	movlw	3
  2672  000400  0100               	movlb	0	; () banked
  2673  000402  25EC               	addwf	receiveData@r& (0+255),w,b
  2674  000404  0100               	movlb	0	; () banked
  2675  000406  6FEC               	movwf	receiveData@r& (0+255),b
  2676  000408  0E00               	movlw	0
  2677  00040A  0100               	movlb	0	; () banked
  2678  00040C  21ED               	addwfc	(receiveData@r+1)& (0+255),w,b
  2679  00040E  0100               	movlb	0	; () banked
  2680  000410  6FED               	movwf	(receiveData@r+1)& (0+255),b
  2681  000412                     l4228:
  2682                           
  2683                           ; BSR set to: 0
  2684  000412  5043               	movf	_rx_len,w,c
  2685  000414  0100               	movlb	0	; () banked
  2686  000416  6FDC               	movwf	??_receiveData& (0+255),b
  2687  000418  6BDD               	clrf	(??_receiveData+1)& (0+255),b
  2688  00041A  0100               	movlb	0	; () banked
  2689  00041C  51DC               	movf	??_receiveData& (0+255),w,b
  2690  00041E  0100               	movlb	0	; () banked
  2691  000420  5DEC               	subwf	receiveData@r& (0+255),w,b
  2692  000422  0100               	movlb	0	; () banked
  2693  000424  51ED               	movf	(receiveData@r+1)& (0+255),w,b
  2694  000426  0A80               	xorlw	128
  2695  000428  0100               	movlb	0	; () banked
  2696  00042A  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  2697  00042C  0100               	movlb	0	; () banked
  2698  00042E  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  2699  000430  0A80               	xorlw	128
  2700  000432  0100               	movlb	0	; () banked
  2701  000434  59DE               	subwfb	(??_receiveData+2)& (0+255),w,b
  2702  000436  A0D8               	btfss	status,0,c
  2703  000438  D790               	goto	l4218
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;FastTransfer.c: 155: }
  2707                           ;FastTransfer.c: 156: }
  2708                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2709                           
  2710                           ; BSR set to: 0
  2711  00043A  503B               	movf	_AKNAKsend,w,c
  2712  00043C  B4D8               	btfsc	status,2,c
  2713  00043E  D0BC               	goto	l4258
  2714                           
  2715                           ; BSR set to: 0
  2716                           ;FastTransfer.c: 160: unsigned char holder[3];
  2717                           ;FastTransfer.c: 161: holder[0] = 255;
  2718  000440  0100               	movlb	0	; () banked
  2719  000442  69E2               	setf	receiveData@holder& (0+255),b
  2720                           
  2721                           ; BSR set to: 0
  2722                           ;FastTransfer.c: 162: holder[1] = 1;
  2723  000444  0E01               	movlw	1
  2724  000446  0100               	movlb	0	; () banked
  2725  000448  6FE3               	movwf	(receiveData@holder+1)& (0+255),b
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2729  00044A  0EFF               	movlw	255
  2730  00044C  0100               	movlb	0	; () banked
  2731  00044E  6FDC               	movwf	??_receiveData& (0+255),b
  2732  000450  0EFF               	movlw	255
  2733  000452  0100               	movlb	0	; () banked
  2734  000454  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  2735  000456  5042               	movf	_rx_array_inx,w,c
  2736  000458  0100               	movlb	0	; () banked
  2737  00045A  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  2738  00045C  6BDF               	clrf	(??_receiveData+3)& (0+255),b
  2739  00045E  0100               	movlb	0	; () banked
  2740  000460  51DC               	movf	??_receiveData& (0+255),w,b
  2741  000462  0100               	movlb	0	; () banked
  2742  000464  27DE               	addwf	(??_receiveData+2)& (0+255),f,b
  2743  000466  0100               	movlb	0	; () banked
  2744  000468  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  2745  00046A  0100               	movlb	0	; () banked
  2746  00046C  23DF               	addwfc	(??_receiveData+3)& (0+255),f,b
  2747  00046E  0E00               	movlw	low _rx_buffer
  2748  000470  0100               	movlb	0	; () banked
  2749  000472  25DE               	addwf	(??_receiveData+2)& (0+255),w,b
  2750  000474  6ED9               	movwf	fsr2l,c
  2751  000476  0E02               	movlw	high _rx_buffer
  2752  000478  0100               	movlb	0	; () banked
  2753  00047A  21DF               	addwfc	(??_receiveData+3)& (0+255),w,b
  2754  00047C  6EDA               	movwf	fsr2h,c
  2755  00047E  50DF               	movf	indf2,w,c
  2756  000480  0100               	movlb	0	; () banked
  2757  000482  6FE4               	movwf	(receiveData@holder+2)& (0+255),b
  2758                           
  2759                           ; BSR set to: 0
  2760                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2761  000484  0EE2               	movlw	low receiveData@holder
  2762  000486  6E1B               	movwf	CRC8@data,c
  2763  000488  0E00               	movlw	high receiveData@holder
  2764  00048A  6E1C               	movwf	CRC8@data+1,c
  2765  00048C  0E03               	movlw	3
  2766  00048E  6E1D               	movwf	CRC8@len,c
  2767  000490  EC32  F00D         	call	_CRC8	;wreg free
  2768  000494  0100               	movlb	0	; () banked
  2769  000496  6FE8               	movwf	receiveData@crcHolder& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772                           ;FastTransfer.c: 165: serial_write(0x06);
  2773  000498  D801               	call	u3788
  2774  00049A  D00B               	goto	l4242
  2775  00049C                     u3788:
  2776  00049C  0005               	push	
  2777  00049E  6EFA               	movwf	pclath,c
  2778  0004A0  5035               	movf	_serial_write,w,c
  2779  0004A2  6EFD               	movwf	tosl,c
  2780  0004A4  5036               	movf	_serial_write+1,w,c
  2781  0004A6  6EFE               	movwf	tosh,c
  2782  0004A8  50F8               	movf	tblptru,w,c
  2783  0004AA  6EFF               	movwf	tosu,c
  2784  0004AC  50FA               	movf	pclath,w,c
  2785  0004AE  0E06               	movlw	6
  2786  0004B0  0012               	return		;indir
  2787  0004B2                     l4242:
  2788                           
  2789                           ;FastTransfer.c: 166: serial_write(0x85);
  2790  0004B2  D801               	call	u3798
  2791  0004B4  D00B               	goto	l4244
  2792  0004B6                     u3798:
  2793  0004B6  0005               	push	
  2794  0004B8  6EFA               	movwf	pclath,c
  2795  0004BA  5035               	movf	_serial_write,w,c
  2796  0004BC  6EFD               	movwf	tosl,c
  2797  0004BE  5036               	movf	_serial_write+1,w,c
  2798  0004C0  6EFE               	movwf	tosh,c
  2799  0004C2  50F8               	movf	tblptru,w,c
  2800  0004C4  6EFF               	movwf	tosu,c
  2801  0004C6  50FA               	movf	pclath,w,c
  2802  0004C8  0E85               	movlw	133
  2803  0004CA  0012               	return		;indir
  2804  0004CC                     l4244:
  2805                           
  2806                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2807  0004CC  D801               	call	u3808
  2808  0004CE  D00B               	goto	l4246
  2809  0004D0                     u3808:
  2810  0004D0  0005               	push	
  2811  0004D2  6EFA               	movwf	pclath,c
  2812  0004D4  5035               	movf	_serial_write,w,c
  2813  0004D6  6EFD               	movwf	tosl,c
  2814  0004D8  5036               	movf	_serial_write+1,w,c
  2815  0004DA  6EFE               	movwf	tosh,c
  2816  0004DC  50F8               	movf	tblptru,w,c
  2817  0004DE  6EFF               	movwf	tosu,c
  2818  0004E0  50FA               	movf	pclath,w,c
  2819  0004E2  5040               	movf	_returnAddress,w,c
  2820  0004E4  0012               	return		;indir
  2821  0004E6                     l4246:
  2822                           
  2823                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2824  0004E6  D801               	call	u3818
  2825  0004E8  D00B               	goto	l4248
  2826  0004EA                     u3818:
  2827  0004EA  0005               	push	
  2828  0004EC  6EFA               	movwf	pclath,c
  2829  0004EE  5035               	movf	_serial_write,w,c
  2830  0004F0  6EFD               	movwf	tosl,c
  2831  0004F2  5036               	movf	_serial_write+1,w,c
  2832  0004F4  6EFE               	movwf	tosh,c
  2833  0004F6  50F8               	movf	tblptru,w,c
  2834  0004F8  6EFF               	movwf	tosu,c
  2835  0004FA  50FA               	movf	pclath,w,c
  2836  0004FC  503F               	movf	_moduleAddress,w,c
  2837  0004FE  0012               	return		;indir
  2838  000500                     l4248:
  2839                           
  2840                           ;FastTransfer.c: 169: serial_write(3);
  2841  000500  D801               	call	u3828
  2842  000502  D00B               	goto	l4250
  2843  000504                     u3828:
  2844  000504  0005               	push	
  2845  000506  6EFA               	movwf	pclath,c
  2846  000508  5035               	movf	_serial_write,w,c
  2847  00050A  6EFD               	movwf	tosl,c
  2848  00050C  5036               	movf	_serial_write+1,w,c
  2849  00050E  6EFE               	movwf	tosh,c
  2850  000510  50F8               	movf	tblptru,w,c
  2851  000512  6EFF               	movwf	tosu,c
  2852  000514  50FA               	movf	pclath,w,c
  2853  000516  0E03               	movlw	3
  2854  000518  0012               	return		;indir
  2855  00051A                     l4250:
  2856                           
  2857                           ;FastTransfer.c: 170: serial_write(255);
  2858  00051A  D801               	call	u3838
  2859  00051C  D00B               	goto	l4252
  2860  00051E                     u3838:
  2861  00051E  0005               	push	
  2862  000520  6EFA               	movwf	pclath,c
  2863  000522  5035               	movf	_serial_write,w,c
  2864  000524  6EFD               	movwf	tosl,c
  2865  000526  5036               	movf	_serial_write+1,w,c
  2866  000528  6EFE               	movwf	tosh,c
  2867  00052A  50F8               	movf	tblptru,w,c
  2868  00052C  6EFF               	movwf	tosu,c
  2869  00052E  50FA               	movf	pclath,w,c
  2870  000530  0EFF               	movlw	255
  2871  000532  0012               	return		;indir
  2872  000534                     l4252:
  2873                           
  2874                           ;FastTransfer.c: 171: serial_write(1);
  2875  000534  D801               	call	u3848
  2876  000536  D00B               	goto	l4254
  2877  000538                     u3848:
  2878  000538  0005               	push	
  2879  00053A  6EFA               	movwf	pclath,c
  2880  00053C  5035               	movf	_serial_write,w,c
  2881  00053E  6EFD               	movwf	tosl,c
  2882  000540  5036               	movf	_serial_write+1,w,c
  2883  000542  6EFE               	movwf	tosh,c
  2884  000544  50F8               	movf	tblptru,w,c
  2885  000546  6EFF               	movwf	tosu,c
  2886  000548  50FA               	movf	pclath,w,c
  2887  00054A  0E01               	movlw	1
  2888  00054C  0012               	return		;indir
  2889  00054E                     l4254:
  2890                           
  2891                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2892  00054E  D801               	call	u3858
  2893  000550  D025               	goto	l4256
  2894  000552                     u3858:
  2895  000552  0005               	push	
  2896  000554  6EFA               	movwf	pclath,c
  2897  000556  5035               	movf	_serial_write,w,c
  2898  000558  6EFD               	movwf	tosl,c
  2899  00055A  5036               	movf	_serial_write+1,w,c
  2900  00055C  6EFE               	movwf	tosh,c
  2901  00055E  50F8               	movf	tblptru,w,c
  2902  000560  6EFF               	movwf	tosu,c
  2903  000562  50FA               	movf	pclath,w,c
  2904  000564  0EFF               	movlw	255
  2905  000566  0100               	movlb	0	; () banked
  2906  000568  6FDC               	movwf	??_receiveData& (0+255),b
  2907  00056A  0EFF               	movlw	255
  2908  00056C  0100               	movlb	0	; () banked
  2909  00056E  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  2910  000570  5042               	movf	_rx_array_inx,w,c
  2911  000572  0100               	movlb	0	; () banked
  2912  000574  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  2913  000576  6BDF               	clrf	(??_receiveData+3)& (0+255),b
  2914  000578  0100               	movlb	0	; () banked
  2915  00057A  51DC               	movf	??_receiveData& (0+255),w,b
  2916  00057C  0100               	movlb	0	; () banked
  2917  00057E  27DE               	addwf	(??_receiveData+2)& (0+255),f,b
  2918  000580  0100               	movlb	0	; () banked
  2919  000582  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  2920  000584  0100               	movlb	0	; () banked
  2921  000586  23DF               	addwfc	(??_receiveData+3)& (0+255),f,b
  2922  000588  0E00               	movlw	low _rx_buffer
  2923  00058A  0100               	movlb	0	; () banked
  2924  00058C  25DE               	addwf	(??_receiveData+2)& (0+255),w,b
  2925  00058E  6ED9               	movwf	fsr2l,c
  2926  000590  0E02               	movlw	high _rx_buffer
  2927  000592  0100               	movlb	0	; () banked
  2928  000594  21DF               	addwfc	(??_receiveData+3)& (0+255),w,b
  2929  000596  6EDA               	movwf	fsr2h,c
  2930  000598  50DF               	movf	indf2,w,c
  2931  00059A  0012               	return		;indir
  2932  00059C                     l4256:
  2933                           
  2934                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2935  00059C  D801               	call	u3868
  2936  00059E  D00C               	goto	l4258
  2937  0005A0                     u3868:
  2938  0005A0  0005               	push	
  2939  0005A2  6EFA               	movwf	pclath,c
  2940  0005A4  5035               	movf	_serial_write,w,c
  2941  0005A6  6EFD               	movwf	tosl,c
  2942  0005A8  5036               	movf	_serial_write+1,w,c
  2943  0005AA  6EFE               	movwf	tosh,c
  2944  0005AC  50F8               	movf	tblptru,w,c
  2945  0005AE  6EFF               	movwf	tosu,c
  2946  0005B0  50FA               	movf	pclath,w,c
  2947  0005B2  0100               	movlb	0	; () banked
  2948  0005B4  51E8               	movf	receiveData@crcHolder& (0+255),w,b
  2949  0005B6  0012               	return		;indir
  2950  0005B8                     l4258:
  2951                           
  2952                           ;FastTransfer.c: 174: }
  2953                           ;FastTransfer.c: 178: rx_len = 0;
  2954  0005B8  0E00               	movlw	0
  2955  0005BA  6E43               	movwf	_rx_len,c
  2956                           
  2957                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2958  0005BC  0E00               	movlw	0
  2959  0005BE  6E42               	movwf	_rx_array_inx,c
  2960                           
  2961                           ;FastTransfer.c: 180: return 1;
  2962  0005C0  0E01               	movlw	1
  2963  0005C2  0012               	return	
  2964  0005C4                     l4268:
  2965                           
  2966                           ;FastTransfer.c: 182: crcErrorCounter++;
  2967  0005C4  0100               	movlb	0	; () banked
  2968  0005C6  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  2969  0005C8  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2970                           
  2971                           ; BSR set to: 0
  2972                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2973  0005CA  503B               	movf	_AKNAKsend,w,c
  2974  0005CC  B4D8               	btfsc	status,2,c
  2975  0005CE  D0BC               	goto	l4298
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;FastTransfer.c: 185: unsigned char holder[3];
  2979                           ;FastTransfer.c: 186: holder[0] = 255;
  2980  0005D0  0100               	movlb	0	; () banked
  2981  0005D2  69E5               	setf	receiveData@holder_1395& (0+255),b
  2982                           
  2983                           ; BSR set to: 0
  2984                           ;FastTransfer.c: 187: holder[1] = 2;
  2985  0005D4  0E02               	movlw	2
  2986  0005D6  0100               	movlb	0	; () banked
  2987  0005D8  6FE6               	movwf	(receiveData@holder_1395+1)& (0+255),b
  2988                           
  2989                           ; BSR set to: 0
  2990                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2991  0005DA  0EFF               	movlw	255
  2992  0005DC  0100               	movlb	0	; () banked
  2993  0005DE  6FDC               	movwf	??_receiveData& (0+255),b
  2994  0005E0  0EFF               	movlw	255
  2995  0005E2  0100               	movlb	0	; () banked
  2996  0005E4  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  2997  0005E6  5042               	movf	_rx_array_inx,w,c
  2998  0005E8  0100               	movlb	0	; () banked
  2999  0005EA  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  3000  0005EC  6BDF               	clrf	(??_receiveData+3)& (0+255),b
  3001  0005EE  0100               	movlb	0	; () banked
  3002  0005F0  51DC               	movf	??_receiveData& (0+255),w,b
  3003  0005F2  0100               	movlb	0	; () banked
  3004  0005F4  27DE               	addwf	(??_receiveData+2)& (0+255),f,b
  3005  0005F6  0100               	movlb	0	; () banked
  3006  0005F8  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  3007  0005FA  0100               	movlb	0	; () banked
  3008  0005FC  23DF               	addwfc	(??_receiveData+3)& (0+255),f,b
  3009  0005FE  0E00               	movlw	low _rx_buffer
  3010  000600  0100               	movlb	0	; () banked
  3011  000602  25DE               	addwf	(??_receiveData+2)& (0+255),w,b
  3012  000604  6ED9               	movwf	fsr2l,c
  3013  000606  0E02               	movlw	high _rx_buffer
  3014  000608  0100               	movlb	0	; () banked
  3015  00060A  21DF               	addwfc	(??_receiveData+3)& (0+255),w,b
  3016  00060C  6EDA               	movwf	fsr2h,c
  3017  00060E  50DF               	movf	indf2,w,c
  3018  000610  0100               	movlb	0	; () banked
  3019  000612  6FE7               	movwf	(receiveData@holder_1395+2)& (0+255),b
  3020                           
  3021                           ; BSR set to: 0
  3022                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  3023  000614  0EE5               	movlw	low receiveData@holder_1395
  3024  000616  6E1B               	movwf	CRC8@data,c
  3025  000618  0E00               	movlw	high receiveData@holder_1395
  3026  00061A  6E1C               	movwf	CRC8@data+1,c
  3027  00061C  0E03               	movlw	3
  3028  00061E  6E1D               	movwf	CRC8@len,c
  3029  000620  EC32  F00D         	call	_CRC8
  3030  000624  0100               	movlb	0	; () banked
  3031  000626  6FE9               	movwf	receiveData@crcHolder_1396& (0+255),b
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;FastTransfer.c: 190: serial_write(0x06);
  3035  000628  D801               	call	u3888
  3036  00062A  D00B               	goto	l4282
  3037  00062C                     u3888:
  3038  00062C  0005               	push	
  3039  00062E  6EFA               	movwf	pclath,c
  3040  000630  5035               	movf	_serial_write,w,c
  3041  000632  6EFD               	movwf	tosl,c
  3042  000634  5036               	movf	_serial_write+1,w,c
  3043  000636  6EFE               	movwf	tosh,c
  3044  000638  50F8               	movf	tblptru,w,c
  3045  00063A  6EFF               	movwf	tosu,c
  3046  00063C  50FA               	movf	pclath,w,c
  3047  00063E  0E06               	movlw	6
  3048  000640  0012               	return		;indir
  3049  000642                     l4282:
  3050                           
  3051                           ;FastTransfer.c: 191: serial_write(0x85);
  3052  000642  D801               	call	u3898
  3053  000644  D00B               	goto	l4284
  3054  000646                     u3898:
  3055  000646  0005               	push	
  3056  000648  6EFA               	movwf	pclath,c
  3057  00064A  5035               	movf	_serial_write,w,c
  3058  00064C  6EFD               	movwf	tosl,c
  3059  00064E  5036               	movf	_serial_write+1,w,c
  3060  000650  6EFE               	movwf	tosh,c
  3061  000652  50F8               	movf	tblptru,w,c
  3062  000654  6EFF               	movwf	tosu,c
  3063  000656  50FA               	movf	pclath,w,c
  3064  000658  0E85               	movlw	133
  3065  00065A  0012               	return		;indir
  3066  00065C                     l4284:
  3067                           
  3068                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3069  00065C  D801               	call	u3908
  3070  00065E  D00B               	goto	l4286
  3071  000660                     u3908:
  3072  000660  0005               	push	
  3073  000662  6EFA               	movwf	pclath,c
  3074  000664  5035               	movf	_serial_write,w,c
  3075  000666  6EFD               	movwf	tosl,c
  3076  000668  5036               	movf	_serial_write+1,w,c
  3077  00066A  6EFE               	movwf	tosh,c
  3078  00066C  50F8               	movf	tblptru,w,c
  3079  00066E  6EFF               	movwf	tosu,c
  3080  000670  50FA               	movf	pclath,w,c
  3081  000672  5040               	movf	_returnAddress,w,c
  3082  000674  0012               	return		;indir
  3083  000676                     l4286:
  3084                           
  3085                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3086  000676  D801               	call	u3918
  3087  000678  D00B               	goto	l4288
  3088  00067A                     u3918:
  3089  00067A  0005               	push	
  3090  00067C  6EFA               	movwf	pclath,c
  3091  00067E  5035               	movf	_serial_write,w,c
  3092  000680  6EFD               	movwf	tosl,c
  3093  000682  5036               	movf	_serial_write+1,w,c
  3094  000684  6EFE               	movwf	tosh,c
  3095  000686  50F8               	movf	tblptru,w,c
  3096  000688  6EFF               	movwf	tosu,c
  3097  00068A  50FA               	movf	pclath,w,c
  3098  00068C  503F               	movf	_moduleAddress,w,c
  3099  00068E  0012               	return		;indir
  3100  000690                     l4288:
  3101                           
  3102                           ;FastTransfer.c: 194: serial_write(3);
  3103  000690  D801               	call	u3928
  3104  000692  D00B               	goto	l4290
  3105  000694                     u3928:
  3106  000694  0005               	push	
  3107  000696  6EFA               	movwf	pclath,c
  3108  000698  5035               	movf	_serial_write,w,c
  3109  00069A  6EFD               	movwf	tosl,c
  3110  00069C  5036               	movf	_serial_write+1,w,c
  3111  00069E  6EFE               	movwf	tosh,c
  3112  0006A0  50F8               	movf	tblptru,w,c
  3113  0006A2  6EFF               	movwf	tosu,c
  3114  0006A4  50FA               	movf	pclath,w,c
  3115  0006A6  0E03               	movlw	3
  3116  0006A8  0012               	return		;indir
  3117  0006AA                     l4290:
  3118                           
  3119                           ;FastTransfer.c: 195: serial_write(255);
  3120  0006AA  D801               	call	u3938
  3121  0006AC  D00B               	goto	l4292
  3122  0006AE                     u3938:
  3123  0006AE  0005               	push	
  3124  0006B0  6EFA               	movwf	pclath,c
  3125  0006B2  5035               	movf	_serial_write,w,c
  3126  0006B4  6EFD               	movwf	tosl,c
  3127  0006B6  5036               	movf	_serial_write+1,w,c
  3128  0006B8  6EFE               	movwf	tosh,c
  3129  0006BA  50F8               	movf	tblptru,w,c
  3130  0006BC  6EFF               	movwf	tosu,c
  3131  0006BE  50FA               	movf	pclath,w,c
  3132  0006C0  0EFF               	movlw	255
  3133  0006C2  0012               	return		;indir
  3134  0006C4                     l4292:
  3135                           
  3136                           ;FastTransfer.c: 196: serial_write(2);
  3137  0006C4  D801               	call	u3948
  3138  0006C6  D00B               	goto	l4294
  3139  0006C8                     u3948:
  3140  0006C8  0005               	push	
  3141  0006CA  6EFA               	movwf	pclath,c
  3142  0006CC  5035               	movf	_serial_write,w,c
  3143  0006CE  6EFD               	movwf	tosl,c
  3144  0006D0  5036               	movf	_serial_write+1,w,c
  3145  0006D2  6EFE               	movwf	tosh,c
  3146  0006D4  50F8               	movf	tblptru,w,c
  3147  0006D6  6EFF               	movwf	tosu,c
  3148  0006D8  50FA               	movf	pclath,w,c
  3149  0006DA  0E02               	movlw	2
  3150  0006DC  0012               	return		;indir
  3151  0006DE                     l4294:
  3152                           
  3153                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3154  0006DE  D801               	call	u3958
  3155  0006E0  D025               	goto	l4296
  3156  0006E2                     u3958:
  3157  0006E2  0005               	push	
  3158  0006E4  6EFA               	movwf	pclath,c
  3159  0006E6  5035               	movf	_serial_write,w,c
  3160  0006E8  6EFD               	movwf	tosl,c
  3161  0006EA  5036               	movf	_serial_write+1,w,c
  3162  0006EC  6EFE               	movwf	tosh,c
  3163  0006EE  50F8               	movf	tblptru,w,c
  3164  0006F0  6EFF               	movwf	tosu,c
  3165  0006F2  50FA               	movf	pclath,w,c
  3166  0006F4  0EFF               	movlw	255
  3167  0006F6  0100               	movlb	0	; () banked
  3168  0006F8  6FDC               	movwf	??_receiveData& (0+255),b
  3169  0006FA  0EFF               	movlw	255
  3170  0006FC  0100               	movlb	0	; () banked
  3171  0006FE  6FDD               	movwf	(??_receiveData+1)& (0+255),b
  3172  000700  5042               	movf	_rx_array_inx,w,c
  3173  000702  0100               	movlb	0	; () banked
  3174  000704  6FDE               	movwf	(??_receiveData+2)& (0+255),b
  3175  000706  6BDF               	clrf	(??_receiveData+3)& (0+255),b
  3176  000708  0100               	movlb	0	; () banked
  3177  00070A  51DC               	movf	??_receiveData& (0+255),w,b
  3178  00070C  0100               	movlb	0	; () banked
  3179  00070E  27DE               	addwf	(??_receiveData+2)& (0+255),f,b
  3180  000710  0100               	movlb	0	; () banked
  3181  000712  51DD               	movf	(??_receiveData+1)& (0+255),w,b
  3182  000714  0100               	movlb	0	; () banked
  3183  000716  23DF               	addwfc	(??_receiveData+3)& (0+255),f,b
  3184  000718  0E00               	movlw	low _rx_buffer
  3185  00071A  0100               	movlb	0	; () banked
  3186  00071C  25DE               	addwf	(??_receiveData+2)& (0+255),w,b
  3187  00071E  6ED9               	movwf	fsr2l,c
  3188  000720  0E02               	movlw	high _rx_buffer
  3189  000722  0100               	movlb	0	; () banked
  3190  000724  21DF               	addwfc	(??_receiveData+3)& (0+255),w,b
  3191  000726  6EDA               	movwf	fsr2h,c
  3192  000728  50DF               	movf	indf2,w,c
  3193  00072A  0012               	return		;indir
  3194  00072C                     l4296:
  3195                           
  3196                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3197  00072C  D801               	call	u3968
  3198  00072E  D00C               	goto	l4298
  3199  000730                     u3968:
  3200  000730  0005               	push	
  3201  000732  6EFA               	movwf	pclath,c
  3202  000734  5035               	movf	_serial_write,w,c
  3203  000736  6EFD               	movwf	tosl,c
  3204  000738  5036               	movf	_serial_write+1,w,c
  3205  00073A  6EFE               	movwf	tosh,c
  3206  00073C  50F8               	movf	tblptru,w,c
  3207  00073E  6EFF               	movwf	tosu,c
  3208  000740  50FA               	movf	pclath,w,c
  3209  000742  0100               	movlb	0	; () banked
  3210  000744  51E9               	movf	receiveData@crcHolder_1396& (0+255),w,b
  3211  000746  0012               	return		;indir
  3212  000748                     l4298:
  3213                           
  3214                           ;FastTransfer.c: 199: }
  3215                           ;FastTransfer.c: 202: rx_len = 0;
  3216  000748  0E00               	movlw	0
  3217  00074A  6E43               	movwf	_rx_len,c
  3218                           
  3219                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3220  00074C  0E00               	movlw	0
  3221  00074E  6E42               	movwf	_rx_array_inx,c
  3222                           
  3223                           ;FastTransfer.c: 204: return 0;
  3224  000750  0E00               	movlw	0
  3225  000752  0012               	return	
  3226  000754                     l4306:
  3227                           
  3228                           ;FastTransfer.c: 205: }
  3229                           ;FastTransfer.c: 206: }
  3230                           ;FastTransfer.c: 207: }
  3231                           ;FastTransfer.c: 210: return 0;
  3232  000754  0E00               	movlw	0
  3233  000756  0012               	return	
  3234  000758                     __end_of_receiveData:
  3235                           	opt stack 0
  3236                           tosu	equ	0xFFF
  3237                           tosh	equ	0xFFE
  3238                           tosl	equ	0xFFD
  3239                           pclath	equ	0xFFA
  3240                           tblptru	equ	0xFF8
  3241                           tblptrh	equ	0xFF7
  3242                           tblptrl	equ	0xFF6
  3243                           tablat	equ	0xFF5
  3244                           prodh	equ	0xFF4
  3245                           prodl	equ	0xFF3
  3246                           intcon	equ	0xFF2
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           indf2	equ	0xFDF
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           plusw2	equ	0xFDB
  3253                           fsr2h	equ	0xFDA
  3254                           fsr2l	equ	0xFD9
  3255                           status	equ	0xFD8
  3256                           
  3257 ;; *************** function _Send_put *****************
  3258 ;; Defined at:
  3259 ;;		line 130 in file "UART.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  _data           1    wreg     unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  _data           1   37[COMRAM] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;		None               void
  3266 ;; Registers used:
  3267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3273 ;;      Params:         0       0       0       0       0       0       0
  3274 ;;      Locals:         1       0       0       0       0       0       0
  3275 ;;      Temps:          0       0       0       0       0       0       0
  3276 ;;      Totals:         1       0       0       0       0       0       0
  3277 ;;Total ram usage:        1 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    6
  3280 ;; This function calls:
  3281 ;;		_UART_buff_get
  3282 ;;		_UART_buff_put
  3283 ;; This function is called by:
  3284 ;;		_SYSTEM_Initialize
  3285 ;;		_putch
  3286 ;;		_sendData
  3287 ;;		_receiveData
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text10
  3292  001C10                     __ptext10:
  3293                           	opt stack 0
  3294  001C10                     _Send_put:
  3295                           	opt stack 21
  3296                           
  3297                           ;incstack = 0
  3298                           ;Send_put@_data stored from wreg
  3299  001C10  6E26               	movwf	Send_put@_data,c
  3300                           
  3301                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3302  001C12  0E00               	movlw	low _output_buffer
  3303  001C14  6E21               	movwf	UART_buff_put@_this,c
  3304  001C16  0E04               	movlw	high _output_buffer
  3305  001C18  6E22               	movwf	UART_buff_put@_this+1,c
  3306  001C1A  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3307  001C1E  ECAF  F005         	call	_UART_buff_put
  3308                           
  3309                           ;UART.c: 132: if (Transmit_stall == 1) {
  3310  001C22  0444               	decf	_Transmit_stall,w,c
  3311  001C24  A4D8               	btfss	status,2,c
  3312  001C26  0012               	return	
  3313                           
  3314                           ;UART.c: 133: Transmit_stall = 0;
  3315  001C28  0E00               	movlw	0
  3316  001C2A  6E44               	movwf	_Transmit_stall,c
  3317                           
  3318                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3319  001C2C  0E00               	movlw	low _output_buffer
  3320  001C2E  6E21               	movwf	UART_buff_get@_this,c
  3321  001C30  0E04               	movlw	high _output_buffer
  3322  001C32  6E22               	movwf	UART_buff_get@_this+1,c
  3323  001C34  EC30  F00A         	call	_UART_buff_get	;wreg free
  3324  001C38  6EAD               	movwf	4013,c	;volatile
  3325                           
  3326                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3327  001C3A  889D               	bsf	3997,4,c	;volatile
  3328  001C3C  0012               	return	
  3329  001C3E                     __end_of_Send_put:
  3330                           	opt stack 0
  3331                           tosu	equ	0xFFF
  3332                           tosh	equ	0xFFE
  3333                           tosl	equ	0xFFD
  3334                           pclath	equ	0xFFA
  3335                           tblptru	equ	0xFF8
  3336                           tblptrh	equ	0xFF7
  3337                           tblptrl	equ	0xFF6
  3338                           tablat	equ	0xFF5
  3339                           prodh	equ	0xFF4
  3340                           prodl	equ	0xFF3
  3341                           intcon	equ	0xFF2
  3342                           postinc0	equ	0xFEE
  3343                           wreg	equ	0xFE8
  3344                           indf2	equ	0xFDF
  3345                           postinc2	equ	0xFDE
  3346                           postdec2	equ	0xFDD
  3347                           plusw2	equ	0xFDB
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _UART_buff_put *****************
  3353 ;; Defined at:
  3354 ;;		line 68 in file "UART.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3357 ;;		 -> output_buffer(206), input_buffer(206), 
  3358 ;;  c               1   34[COMRAM] const unsigned char 
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;		None               void
  3363 ;; Registers used:
  3364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3370 ;;      Params:         3       0       0       0       0       0       0
  3371 ;;      Locals:         0       0       0       0       0       0       0
  3372 ;;      Temps:          2       0       0       0       0       0       0
  3373 ;;      Totals:         5       0       0       0       0       0       0
  3374 ;;Total ram usage:        5 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    5
  3377 ;; This function calls:
  3378 ;;		_UART_buff_modulo_inc
  3379 ;; This function is called by:
  3380 ;;		_Send_put
  3381 ;; This function uses a non-reentrant model
  3382 ;;
  3383                           
  3384                           	psect	text11
  3385  000B5E                     __ptext11:
  3386                           	opt stack 0
  3387  000B5E                     _UART_buff_put:
  3388                           	opt stack 21
  3389                           
  3390                           ;UART.c: 69: if (_this->count < 200) {
  3391                           
  3392                           ;incstack = 0
  3393  000B5E  EE20 F0CC          	lfsr	2,204
  3394  000B62  5021               	movf	UART_buff_put@_this,w,c
  3395  000B64  26D9               	addwf	fsr2l,f,c
  3396  000B66  5022               	movf	UART_buff_put@_this+1,w,c
  3397  000B68  22DA               	addwfc	fsr2h,f,c
  3398  000B6A  0E01               	movlw	1
  3399  000B6C  BEDB               	btfsc	plusw2,7,c
  3400  000B6E  D007               	goto	l3736
  3401  000B70  0E01               	movlw	1
  3402  000B72  50DB               	movf	plusw2,w,c
  3403  000B74  E13A               	bnz	l3742
  3404  000B76  0EC8               	movlw	200
  3405  000B78  5CDE               	subwf	postinc2,w,c
  3406  000B7A  B0D8               	btfsc	status,0,c
  3407  000B7C  D036               	goto	l3742
  3408  000B7E                     l3736:
  3409                           
  3410                           ;UART.c: 70: _this->buf[_this->head] = c;
  3411  000B7E  EE20 F0C8          	lfsr	2,200
  3412  000B82  5021               	movf	UART_buff_put@_this,w,c
  3413  000B84  26D9               	addwf	fsr2l,f,c
  3414  000B86  5022               	movf	UART_buff_put@_this+1,w,c
  3415  000B88  22DA               	addwfc	fsr2h,f,c
  3416  000B8A  CFDE F024          	movff	postinc2,??_UART_buff_put
  3417  000B8E  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3418  000B92  5024               	movf	??_UART_buff_put,w,c
  3419  000B94  2421               	addwf	UART_buff_put@_this,w,c
  3420  000B96  6ED9               	movwf	fsr2l,c
  3421  000B98  5025               	movf	??_UART_buff_put+1,w,c
  3422  000B9A  2022               	addwfc	UART_buff_put@_this+1,w,c
  3423  000B9C  6EDA               	movwf	fsr2h,c
  3424  000B9E  C023  FFDF         	movff	UART_buff_put@c,indf2
  3425                           
  3426                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3427  000BA2  EE20 F0C8          	lfsr	2,200
  3428  000BA6  5021               	movf	UART_buff_put@_this,w,c
  3429  000BA8  26D9               	addwf	fsr2l,f,c
  3430  000BAA  5022               	movf	UART_buff_put@_this+1,w,c
  3431  000BAC  22DA               	addwfc	fsr2h,f,c
  3432  000BAE  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3433  000BB2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3434  000BB6  0E00               	movlw	0
  3435  000BB8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3436  000BBA  0EC8               	movlw	200
  3437  000BBC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3438  000BBE  EC4A  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3439  000BC2  EE20 F0C8          	lfsr	2,200
  3440  000BC6  5021               	movf	UART_buff_put@_this,w,c
  3441  000BC8  26D9               	addwf	fsr2l,f,c
  3442  000BCA  5022               	movf	UART_buff_put@_this+1,w,c
  3443  000BCC  22DA               	addwfc	fsr2h,f,c
  3444  000BCE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3445  000BD2  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3446                           
  3447                           ;UART.c: 72: ++_this->count;
  3448  000BD6  EE20 F0CC          	lfsr	2,204
  3449  000BDA  5021               	movf	UART_buff_put@_this,w,c
  3450  000BDC  26D9               	addwf	fsr2l,f,c
  3451  000BDE  5022               	movf	UART_buff_put@_this+1,w,c
  3452  000BE0  22DA               	addwfc	fsr2h,f,c
  3453  000BE2  2ADE               	incf	postinc2,f,c
  3454  000BE4  0E00               	movlw	0
  3455  000BE6  22DD               	addwfc	postdec2,f,c
  3456                           
  3457                           ;UART.c: 73: } else {
  3458  000BE8  0012               	return	
  3459  000BEA                     l3742:
  3460                           
  3461                           ;UART.c: 74: _this->buf[_this->head] = c;
  3462  000BEA  EE20 F0C8          	lfsr	2,200
  3463  000BEE  5021               	movf	UART_buff_put@_this,w,c
  3464  000BF0  26D9               	addwf	fsr2l,f,c
  3465  000BF2  5022               	movf	UART_buff_put@_this+1,w,c
  3466  000BF4  22DA               	addwfc	fsr2h,f,c
  3467  000BF6  CFDE F024          	movff	postinc2,??_UART_buff_put
  3468  000BFA  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3469  000BFE  5024               	movf	??_UART_buff_put,w,c
  3470  000C00  2421               	addwf	UART_buff_put@_this,w,c
  3471  000C02  6ED9               	movwf	fsr2l,c
  3472  000C04  5025               	movf	??_UART_buff_put+1,w,c
  3473  000C06  2022               	addwfc	UART_buff_put@_this+1,w,c
  3474  000C08  6EDA               	movwf	fsr2h,c
  3475  000C0A  C023  FFDF         	movff	UART_buff_put@c,indf2
  3476                           
  3477                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3478  000C0E  EE20 F0C8          	lfsr	2,200
  3479  000C12  5021               	movf	UART_buff_put@_this,w,c
  3480  000C14  26D9               	addwf	fsr2l,f,c
  3481  000C16  5022               	movf	UART_buff_put@_this+1,w,c
  3482  000C18  22DA               	addwfc	fsr2h,f,c
  3483  000C1A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3484  000C1E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3485  000C22  0E00               	movlw	0
  3486  000C24  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3487  000C26  0EC8               	movlw	200
  3488  000C28  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3489  000C2A  EC4A  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3490  000C2E  EE20 F0C8          	lfsr	2,200
  3491  000C32  5021               	movf	UART_buff_put@_this,w,c
  3492  000C34  26D9               	addwf	fsr2l,f,c
  3493  000C36  5022               	movf	UART_buff_put@_this+1,w,c
  3494  000C38  22DA               	addwfc	fsr2h,f,c
  3495  000C3A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3496  000C3E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3497                           
  3498                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3499  000C42  EE20 F0CA          	lfsr	2,202
  3500  000C46  5021               	movf	UART_buff_put@_this,w,c
  3501  000C48  26D9               	addwf	fsr2l,f,c
  3502  000C4A  5022               	movf	UART_buff_put@_this+1,w,c
  3503  000C4C  22DA               	addwfc	fsr2h,f,c
  3504  000C4E  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3505  000C52  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3506  000C56  0E00               	movlw	0
  3507  000C58  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3508  000C5A  0EC8               	movlw	200
  3509  000C5C  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3510  000C5E  EC4A  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3511  000C62  EE20 F0CA          	lfsr	2,202
  3512  000C66  5021               	movf	UART_buff_put@_this,w,c
  3513  000C68  26D9               	addwf	fsr2l,f,c
  3514  000C6A  5022               	movf	UART_buff_put@_this+1,w,c
  3515  000C6C  22DA               	addwfc	fsr2h,f,c
  3516  000C6E  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3517  000C72  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3518  000C76  0012               	return	
  3519  000C78                     __end_of_UART_buff_put:
  3520                           	opt stack 0
  3521                           tosu	equ	0xFFF
  3522                           tosh	equ	0xFFE
  3523                           tosl	equ	0xFFD
  3524                           pclath	equ	0xFFA
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           intcon	equ	0xFF2
  3532                           postinc0	equ	0xFEE
  3533                           wreg	equ	0xFE8
  3534                           indf2	equ	0xFDF
  3535                           postinc2	equ	0xFDE
  3536                           postdec2	equ	0xFDD
  3537                           plusw2	equ	0xFDB
  3538                           fsr2h	equ	0xFDA
  3539                           fsr2l	equ	0xFD9
  3540                           status	equ	0xFD8
  3541                           
  3542 ;; *************** function _Receive_peek *****************
  3543 ;; Defined at:
  3544 ;;		line 118 in file "UART.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  1    wreg      unsigned char 
  3551 ;; Registers used:
  3552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3558 ;;      Params:         0       0       0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0       0       0
  3560 ;;      Temps:          0       0       0       0       0       0       0
  3561 ;;      Totals:         0       0       0       0       0       0       0
  3562 ;;Total ram usage:        0 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    5
  3565 ;; This function calls:
  3566 ;;		_UART_buff_peek
  3567 ;; This function is called by:
  3568 ;;		_SYSTEM_Initialize
  3569 ;;		_receiveData
  3570 ;; This function uses a non-reentrant model
  3571 ;;
  3572                           
  3573                           	psect	text12
  3574  001E30                     __ptext12:
  3575                           	opt stack 0
  3576  001E30                     _Receive_peek:
  3577                           	opt stack 23
  3578                           
  3579                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3580                           
  3581                           ;incstack = 0
  3582  001E30  0E00               	movlw	low _input_buffer
  3583  001E32  6E1B               	movwf	UART_buff_peek@_this,c
  3584  001E34  0E03               	movlw	high _input_buffer
  3585  001E36  6E1C               	movwf	UART_buff_peek@_this+1,c
  3586  001E38  EC74  F00E         	call	_UART_buff_peek	;wreg free
  3587  001E3C  0012               	return	
  3588  001E3E                     __end_of_Receive_peek:
  3589                           	opt stack 0
  3590                           tosu	equ	0xFFF
  3591                           tosh	equ	0xFFE
  3592                           tosl	equ	0xFFD
  3593                           pclath	equ	0xFFA
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           plusw2	equ	0xFDB
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _UART_buff_peek *****************
  3612 ;; Defined at:
  3613 ;;		line 114 in file "UART.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3616 ;;		 -> input_buffer(206), 
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;                  1    wreg      unsigned char 
  3621 ;; Registers used:
  3622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3628 ;;      Params:         2       0       0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0       0       0
  3630 ;;      Temps:          2       0       0       0       0       0       0
  3631 ;;      Totals:         4       0       0       0       0       0       0
  3632 ;;Total ram usage:        4 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:    4
  3635 ;; This function calls:
  3636 ;;		Nothing
  3637 ;; This function is called by:
  3638 ;;		_Receive_peek
  3639 ;; This function uses a non-reentrant model
  3640 ;;
  3641                           
  3642                           	psect	text13
  3643  001CE8                     __ptext13:
  3644                           	opt stack 0
  3645  001CE8                     _UART_buff_peek:
  3646                           	opt stack 23
  3647                           
  3648                           ;UART.c: 115: return _this->buf[_this->tail];
  3649                           
  3650                           ;incstack = 0
  3651  001CE8  EE20 F0CA          	lfsr	2,202
  3652  001CEC  501B               	movf	UART_buff_peek@_this,w,c
  3653  001CEE  26D9               	addwf	fsr2l,f,c
  3654  001CF0  501C               	movf	UART_buff_peek@_this+1,w,c
  3655  001CF2  22DA               	addwfc	fsr2h,f,c
  3656  001CF4  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3657  001CF8  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3658  001CFC  501D               	movf	??_UART_buff_peek,w,c
  3659  001CFE  241B               	addwf	UART_buff_peek@_this,w,c
  3660  001D00  6ED9               	movwf	fsr2l,c
  3661  001D02  501E               	movf	??_UART_buff_peek+1,w,c
  3662  001D04  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3663  001D06  6EDA               	movwf	fsr2h,c
  3664  001D08  50DF               	movf	indf2,w,c
  3665  001D0A  0012               	return	
  3666  001D0C                     __end_of_UART_buff_peek:
  3667                           	opt stack 0
  3668                           tosu	equ	0xFFF
  3669                           tosh	equ	0xFFE
  3670                           tosl	equ	0xFFD
  3671                           pclath	equ	0xFFA
  3672                           tblptru	equ	0xFF8
  3673                           tblptrh	equ	0xFF7
  3674                           tblptrl	equ	0xFF6
  3675                           tablat	equ	0xFF5
  3676                           prodh	equ	0xFF4
  3677                           prodl	equ	0xFF3
  3678                           intcon	equ	0xFF2
  3679                           postinc0	equ	0xFEE
  3680                           wreg	equ	0xFE8
  3681                           indf2	equ	0xFDF
  3682                           postinc2	equ	0xFDE
  3683                           postdec2	equ	0xFDD
  3684                           plusw2	equ	0xFDB
  3685                           fsr2h	equ	0xFDA
  3686                           fsr2l	equ	0xFD9
  3687                           status	equ	0xFD8
  3688                           
  3689 ;; *************** function _CRCcheck *****************
  3690 ;; Defined at:
  3691 ;;		line 373 in file "FastTransfer.c"
  3692 ;; Parameters:    Size  Location     Type
  3693 ;;		None
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;  rt              2    5[BANK0 ] int 
  3696 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3697 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3698 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;		None               void
  3701 ;; Registers used:
  3702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3708 ;;      Params:         0       0       0       0       0       0       0
  3709 ;;      Locals:         0       7       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0
  3711 ;;      Totals:         0       7       0       0       0       0       0
  3712 ;;Total ram usage:        7 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    7
  3715 ;; This function calls:
  3716 ;;		Absolute function
  3717 ;;		_CRC8
  3718 ;;		_Receive_available
  3719 ;;		_Receive_get
  3720 ;;		_crcBufS_get
  3721 ;;		_crcBufS_status_put
  3722 ;; This function is called by:
  3723 ;;		_receiveData
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text14
  3728  0008C0                     __ptext14:
  3729                           	opt stack 0
  3730  0008C0                     _CRCcheck:
  3731                           	opt stack 21
  3732  0008C0                     l3970:
  3733  0008C0  D801               	call	u3278
  3734  0008C2  D00A               	goto	u3279
  3735  0008C4                     u3278:
  3736  0008C4  0005               	push	
  3737  0008C6  6EFA               	movwf	pclath,c
  3738  0008C8  5031               	movf	_serial_available,w,c
  3739  0008CA  6EFD               	movwf	tosl,c
  3740  0008CC  5032               	movf	_serial_available+1,w,c
  3741  0008CE  6EFE               	movwf	tosh,c
  3742  0008D0  50F8               	movf	tblptru,w,c
  3743  0008D2  6EFF               	movwf	tosu,c
  3744  0008D4  50FA               	movf	pclath,w,c
  3745  0008D6  0012               	return		;indir
  3746  0008D8                     u3279:
  3747  0008D8  BE1E               	btfsc	?_Receive_available+1,7,c
  3748  0008DA  D7F2               	goto	l3970
  3749  0008DC  501E               	movf	?_Receive_available+1,w,c
  3750  0008DE  E104               	bnz	l3972
  3751  0008E0  0E04               	movlw	4
  3752  0008E2  5C1D               	subwf	?_Receive_available,w,c
  3753  0008E4  A0D8               	btfss	status,0,c
  3754  0008E6  D7EC               	goto	l3970
  3755  0008E8                     l3972:
  3756                           
  3757                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3758                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3759  0008E8  D801               	call	u3298
  3760  0008EA  D00A               	goto	u3299
  3761  0008EC                     u3298:
  3762  0008EC  0005               	push	
  3763  0008EE  6EFA               	movwf	pclath,c
  3764  0008F0  5033               	movf	_serial_read,w,c
  3765  0008F2  6EFD               	movwf	tosl,c
  3766  0008F4  5034               	movf	_serial_read+1,w,c
  3767  0008F6  6EFE               	movwf	tosh,c
  3768  0008F8  50F8               	movf	tblptru,w,c
  3769  0008FA  6EFF               	movwf	tosu,c
  3770  0008FC  50FA               	movf	pclath,w,c
  3771  0008FE  0012               	return		;indir
  3772  000900                     u3299:
  3773  000900  0100               	movlb	0	; () banked
  3774  000902  6FD7               	movwf	CRCcheck@arrayHolder& (0+255),b
  3775                           
  3776                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3777  000904  D801               	call	u3308
  3778  000906  D00A               	goto	u3309
  3779  000908                     u3308:
  3780  000908  0005               	push	
  3781  00090A  6EFA               	movwf	pclath,c
  3782  00090C  5033               	movf	_serial_read,w,c
  3783  00090E  6EFD               	movwf	tosl,c
  3784  000910  5034               	movf	_serial_read+1,w,c
  3785  000912  6EFE               	movwf	tosh,c
  3786  000914  50F8               	movf	tblptru,w,c
  3787  000916  6EFF               	movwf	tosu,c
  3788  000918  50FA               	movf	pclath,w,c
  3789  00091A  0012               	return		;indir
  3790  00091C                     u3309:
  3791  00091C  0100               	movlb	0	; () banked
  3792  00091E  6FD8               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3793                           
  3794                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3795  000920  D801               	call	u3318
  3796  000922  D00A               	goto	u3319
  3797  000924                     u3318:
  3798  000924  0005               	push	
  3799  000926  6EFA               	movwf	pclath,c
  3800  000928  5033               	movf	_serial_read,w,c
  3801  00092A  6EFD               	movwf	tosl,c
  3802  00092C  5034               	movf	_serial_read+1,w,c
  3803  00092E  6EFE               	movwf	tosh,c
  3804  000930  50F8               	movf	tblptru,w,c
  3805  000932  6EFF               	movwf	tosu,c
  3806  000934  50FA               	movf	pclath,w,c
  3807  000936  0012               	return		;indir
  3808  000938                     u3319:
  3809  000938  0100               	movlb	0	; () banked
  3810  00093A  6FD9               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3811                           
  3812                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3813  00093C  D801               	call	u3328
  3814  00093E  D00A               	goto	u3329
  3815  000940                     u3328:
  3816  000940  0005               	push	
  3817  000942  6EFA               	movwf	pclath,c
  3818  000944  5033               	movf	_serial_read,w,c
  3819  000946  6EFD               	movwf	tosl,c
  3820  000948  5034               	movf	_serial_read+1,w,c
  3821  00094A  6EFE               	movwf	tosh,c
  3822  00094C  50F8               	movf	tblptru,w,c
  3823  00094E  6EFF               	movwf	tosu,c
  3824  000950  50FA               	movf	pclath,w,c
  3825  000952  0012               	return		;indir
  3826  000954                     u3329:
  3827  000954  0100               	movlb	0	; () banked
  3828  000956  6FD5               	movwf	CRCcheck@SentCRC& (0+255),b
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3832  000958  0ED7               	movlw	low CRCcheck@arrayHolder
  3833  00095A  6E1B               	movwf	CRC8@data,c
  3834  00095C  0E00               	movlw	high CRCcheck@arrayHolder
  3835  00095E  6E1C               	movwf	CRC8@data+1,c
  3836  000960  0E03               	movlw	3
  3837  000962  6E1D               	movwf	CRC8@len,c
  3838  000964  EC32  F00D         	call	_CRC8	;wreg free
  3839  000968  0100               	movlb	0	; () banked
  3840  00096A  6FD6               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3844  00096C  0100               	movlb	0	; () banked
  3845  00096E  51D6               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3846  000970  0100               	movlb	0	; () banked
  3847  000972  19D5               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3848  000974  A4D8               	btfss	status,2,c
  3849  000976  D04E               	goto	l4002
  3850                           
  3851                           ; BSR set to: 0
  3852                           ;FastTransfer.c: 387: int rt;
  3853                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3854  000978  0E00               	movlw	0
  3855  00097A  0100               	movlb	0	; () banked
  3856  00097C  6FDB               	movwf	(CRCcheck@rt+1)& (0+255),b
  3857  00097E  0E00               	movlw	0
  3858  000980  6FDA               	movwf	CRCcheck@rt& (0+255),b
  3859  000982                     l3980:
  3860                           
  3861                           ; BSR set to: 0
  3862  000982  0100               	movlb	0	; () banked
  3863  000984  BFDB               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3864  000986  D008               	goto	l3984
  3865  000988  0100               	movlb	0	; () banked
  3866  00098A  51DB               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3867  00098C  E147               	bnz	l587
  3868  00098E  0E05               	movlw	5
  3869  000990  0100               	movlb	0	; () banked
  3870  000992  5DDA               	subwf	CRCcheck@rt& (0+255),w,b
  3871  000994  B0D8               	btfsc	status,0,c
  3872  000996  0012               	return	
  3873  000998                     l3984:
  3874                           
  3875                           ; BSR set to: 0
  3876                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3877  000998  0EC4               	movlw	low _crc_buffer
  3878  00099A  6E1B               	movwf	crcBufS_get@_this,c
  3879  00099C  0E00               	movlw	high _crc_buffer
  3880  00099E  6E1C               	movwf	crcBufS_get@_this+1,c
  3881  0009A0  C0DA  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3882  0009A4  0E00               	movlw	0
  3883  0009A6  6E1E               	movwf	crcBufS_get@space,c
  3884  0009A8  ECB9  F007         	call	_crcBufS_get	;wreg free
  3885  0009AC  1840               	xorwf	_returnAddress,w,c
  3886  0009AE  A4D8               	btfss	status,2,c
  3887  0009B0  D02D               	goto	l3998
  3888                           
  3889                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3890  0009B2  0EC4               	movlw	low _crc_buffer
  3891  0009B4  6E1B               	movwf	crcBufS_get@_this,c
  3892  0009B6  0E00               	movlw	high _crc_buffer
  3893  0009B8  6E1C               	movwf	crcBufS_get@_this+1,c
  3894  0009BA  C0DA  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3895  0009BE  0E01               	movlw	1
  3896  0009C0  6E1E               	movwf	crcBufS_get@space,c
  3897  0009C2  ECB9  F007         	call	_crcBufS_get	;wreg free
  3898  0009C6  0100               	movlb	0	; () banked
  3899  0009C8  19D9               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3900  0009CA  A4D8               	btfss	status,2,c
  3901  0009CC  D01F               	goto	l3998
  3902                           
  3903                           ; BSR set to: 0
  3904                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3905  0009CE  0100               	movlb	0	; () banked
  3906  0009D0  05D8               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3907  0009D2  A4D8               	btfss	status,2,c
  3908  0009D4  D00B               	goto	l3994
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3912  0009D6  0EC4               	movlw	low _crc_buffer
  3913  0009D8  6E1B               	movwf	crcBufS_status_put@_this,c
  3914  0009DA  0E00               	movlw	high _crc_buffer
  3915  0009DC  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3916  0009DE  C0DA  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3917  0009E2  0E01               	movlw	1
  3918  0009E4  6E1E               	movwf	crcBufS_status_put@status,c
  3919  0009E6  EC04  F009         	call	_crcBufS_status_put	;wreg free
  3920                           
  3921                           ;FastTransfer.c: 393: break;
  3922  0009EA  0012               	return	
  3923  0009EC                     l3994:
  3924  0009EC  0E02               	movlw	2
  3925  0009EE  0100               	movlb	0	; () banked
  3926  0009F0  19D8               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3927  0009F2  A4D8               	btfss	status,2,c
  3928  0009F4  D00B               	goto	l3998
  3929                           
  3930                           ; BSR set to: 0
  3931                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3932  0009F6  0EC4               	movlw	low _crc_buffer
  3933  0009F8  6E1B               	movwf	crcBufS_status_put@_this,c
  3934  0009FA  0E00               	movlw	high _crc_buffer
  3935  0009FC  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3936  0009FE  C0DA  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3937  000A02  0E02               	movlw	2
  3938  000A04  6E1E               	movwf	crcBufS_status_put@status,c
  3939  000A06  EC04  F009         	call	_crcBufS_status_put	;wreg free
  3940                           
  3941                           ;FastTransfer.c: 396: break;
  3942  000A0A  0012               	return	
  3943  000A0C                     l3998:
  3944  000A0C  0100               	movlb	0	; () banked
  3945  000A0E  4BDA               	infsnz	CRCcheck@rt& (0+255),f,b
  3946  000A10  2BDB               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3947  000A12  D7B7               	goto	l3980
  3948  000A14                     l4002:
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;FastTransfer.c: 402: crcErrorCounter++;
  3952  000A14  0100               	movlb	0	; () banked
  3953  000A16  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  3954  000A18  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3955  000A1A  0012               	return	
  3956  000A1C                     l587:
  3957  000A1C  0012               	return		;funcret
  3958  000A1E                     __end_of_CRCcheck:
  3959                           	opt stack 0
  3960                           tosu	equ	0xFFF
  3961                           tosh	equ	0xFFE
  3962                           tosl	equ	0xFFD
  3963                           pclath	equ	0xFFA
  3964                           tblptru	equ	0xFF8
  3965                           tblptrh	equ	0xFF7
  3966                           tblptrl	equ	0xFF6
  3967                           tablat	equ	0xFF5
  3968                           prodh	equ	0xFF4
  3969                           prodl	equ	0xFF3
  3970                           intcon	equ	0xFF2
  3971                           postinc0	equ	0xFEE
  3972                           wreg	equ	0xFE8
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           plusw2	equ	0xFDB
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function _crcBufS_status_put *****************
  3982 ;; Defined at:
  3983 ;;		line 336 in file "FastTransfer.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3986 ;;		 -> crc_buffer(17), 
  3987 ;;  time            1   28[COMRAM] unsigned char 
  3988 ;;  status          1   29[COMRAM] unsigned char 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;  wantedTime      2   34[COMRAM] int 
  3991 ;; Return value:  Size  Location     Type
  3992 ;;		None               void
  3993 ;; Registers used:
  3994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4000 ;;      Params:         4       0       0       0       0       0       0
  4001 ;;      Locals:         2       0       0       0       0       0       0
  4002 ;;      Temps:          4       0       0       0       0       0       0
  4003 ;;      Totals:        10       0       0       0       0       0       0
  4004 ;;Total ram usage:       10 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    4
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_CRCcheck
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           	psect	text15
  4015  001208                     __ptext15:
  4016                           	opt stack 0
  4017  001208                     _crcBufS_status_put:
  4018                           	opt stack 23
  4019                           
  4020                           ;FastTransfer.c: 337: if (time >= 5) {
  4021                           
  4022                           ;incstack = 0
  4023  001208  0E04               	movlw	4
  4024  00120A  641D               	cpfsgt	crcBufS_status_put@time,c
  4025  00120C  D002               	goto	l3844
  4026                           
  4027                           ;FastTransfer.c: 338: time = 5 - 1;
  4028  00120E  0E04               	movlw	4
  4029  001210  6E1D               	movwf	crcBufS_status_put@time,c
  4030  001212                     l3844:
  4031                           
  4032                           ;FastTransfer.c: 339: }
  4033                           ;FastTransfer.c: 340: time = time + 1;
  4034  001212  281D               	incf	crcBufS_status_put@time,w,c
  4035  001214  6E1D               	movwf	crcBufS_status_put@time,c
  4036                           
  4037                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4038  001216  501D               	movf	crcBufS_status_put@time,w,c
  4039  001218  0D03               	mullw	3
  4040  00121A  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4041  00121E  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4042                           
  4043                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4044  001222  EE20 F00F          	lfsr	2,15
  4045  001226  501B               	movf	crcBufS_status_put@_this,w,c
  4046  001228  26D9               	addwf	fsr2l,f,c
  4047  00122A  501C               	movf	crcBufS_status_put@_this+1,w,c
  4048  00122C  22DA               	addwfc	fsr2h,f,c
  4049  00122E  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4050  001230  5CDE               	subwf	postinc2,w,c
  4051  001232  50DE               	movf	postinc2,w,c
  4052  001234  0A80               	xorlw	128
  4053  001236  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4054  001238  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4055  00123A  0A80               	xorlw	128
  4056  00123C  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4057  00123E  B0D8               	btfsc	status,0,c
  4058  001240  D02B               	goto	l3852
  4059                           
  4060                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4061  001242  EE20 F00F          	lfsr	2,15
  4062  001246  501B               	movf	crcBufS_status_put@_this,w,c
  4063  001248  26D9               	addwf	fsr2l,f,c
  4064  00124A  501C               	movf	crcBufS_status_put@_this+1,w,c
  4065  00124C  22DA               	addwfc	fsr2h,f,c
  4066  00124E  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4067  001252  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4068  001256  1E1F               	comf	??_crcBufS_status_put,f,c
  4069  001258  1E20               	comf	??_crcBufS_status_put+1,f,c
  4070  00125A  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4071  00125C  2A20               	incf	??_crcBufS_status_put+1,f,c
  4072  00125E  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4073  001260  261F               	addwf	??_crcBufS_status_put,f,c
  4074  001262  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4075  001264  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4076  001266  1E1F               	comf	??_crcBufS_status_put,f,c
  4077  001268  1E20               	comf	??_crcBufS_status_put+1,f,c
  4078  00126A  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4079  00126C  2A20               	incf	??_crcBufS_status_put+1,f,c
  4080  00126E  0E0F               	movlw	15
  4081  001270  241F               	addwf	??_crcBufS_status_put,w,c
  4082  001272  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4083  001274  0E00               	movlw	0
  4084  001276  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4085  001278  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4086                           
  4087                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4088  00127A  0E02               	movlw	2
  4089  00127C  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4090  00127E  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4091  001280  0E00               	movlw	0
  4092  001282  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4093  001284  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4094  001286  501F               	movf	??_crcBufS_status_put,w,c
  4095  001288  241B               	addwf	crcBufS_status_put@_this,w,c
  4096  00128A  6ED9               	movwf	fsr2l,c
  4097  00128C  5020               	movf	??_crcBufS_status_put+1,w,c
  4098  00128E  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4099  001290  6EDA               	movwf	fsr2h,c
  4100  001292  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4101                           
  4102                           ;FastTransfer.c: 345: } else {
  4103  001296  0012               	return	
  4104  001298                     l3852:
  4105                           
  4106                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4107  001298  EE20 F00F          	lfsr	2,15
  4108  00129C  501B               	movf	crcBufS_status_put@_this,w,c
  4109  00129E  26D9               	addwf	fsr2l,f,c
  4110  0012A0  501C               	movf	crcBufS_status_put@_this+1,w,c
  4111  0012A2  22DA               	addwfc	fsr2h,f,c
  4112  0012A4  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4113  0012A8  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4114  0012AC  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4115  0012B0  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4116  0012B4  1E21               	comf	??_crcBufS_status_put+2,f,c
  4117  0012B6  1E22               	comf	??_crcBufS_status_put+3,f,c
  4118  0012B8  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4119  0012BA  2A22               	incf	??_crcBufS_status_put+3,f,c
  4120  0012BC  501F               	movf	??_crcBufS_status_put,w,c
  4121  0012BE  2621               	addwf	??_crcBufS_status_put+2,f,c
  4122  0012C0  5020               	movf	??_crcBufS_status_put+1,w,c
  4123  0012C2  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4124  0012C4  0E02               	movlw	2
  4125  0012C6  2621               	addwf	??_crcBufS_status_put+2,f,c
  4126  0012C8  0E00               	movlw	0
  4127  0012CA  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4128  0012CC  5021               	movf	??_crcBufS_status_put+2,w,c
  4129  0012CE  241B               	addwf	crcBufS_status_put@_this,w,c
  4130  0012D0  6ED9               	movwf	fsr2l,c
  4131  0012D2  5022               	movf	??_crcBufS_status_put+3,w,c
  4132  0012D4  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4133  0012D6  6EDA               	movwf	fsr2h,c
  4134  0012D8  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4135  0012DC  0012               	return	
  4136  0012DE                     __end_of_crcBufS_status_put:
  4137                           	opt stack 0
  4138                           tosu	equ	0xFFF
  4139                           tosh	equ	0xFFE
  4140                           tosl	equ	0xFFD
  4141                           pclath	equ	0xFFA
  4142                           tblptru	equ	0xFF8
  4143                           tblptrh	equ	0xFF7
  4144                           tblptrl	equ	0xFF6
  4145                           tablat	equ	0xFF5
  4146                           prodh	equ	0xFF4
  4147                           prodl	equ	0xFF3
  4148                           intcon	equ	0xFF2
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           indf2	equ	0xFDF
  4152                           postinc2	equ	0xFDE
  4153                           postdec2	equ	0xFDD
  4154                           plusw2	equ	0xFDB
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _crcBufS_get *****************
  4160 ;; Defined at:
  4161 ;;		line 353 in file "FastTransfer.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4164 ;;		 -> crc_buffer(17), 
  4165 ;;  time            1   28[COMRAM] unsigned char 
  4166 ;;  space           1   29[COMRAM] unsigned char 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  wantedTime      2   36[COMRAM] int 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;                  1    wreg      unsigned char 
  4171 ;; Registers used:
  4172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4178 ;;      Params:         4       0       0       0       0       0       0
  4179 ;;      Locals:         2       0       0       0       0       0       0
  4180 ;;      Temps:          6       0       0       0       0       0       0
  4181 ;;      Totals:        12       0       0       0       0       0       0
  4182 ;;Total ram usage:       12 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    4
  4185 ;; This function calls:
  4186 ;;		Nothing
  4187 ;; This function is called by:
  4188 ;;		_CRCcheck
  4189 ;;		_AKNAK
  4190 ;; This function uses a non-reentrant model
  4191 ;;
  4192                           
  4193                           	psect	text16
  4194  000F72                     __ptext16:
  4195                           	opt stack 0
  4196  000F72                     _crcBufS_get:
  4197                           	opt stack 23
  4198                           
  4199                           ;FastTransfer.c: 354: if (time >= 5) {
  4200                           
  4201                           ;incstack = 0
  4202  000F72  0E04               	movlw	4
  4203  000F74  641D               	cpfsgt	crcBufS_get@time,c
  4204  000F76  D002               	goto	l3820
  4205                           
  4206                           ;FastTransfer.c: 355: time = 5 - 1;
  4207  000F78  0E04               	movlw	4
  4208  000F7A  6E1D               	movwf	crcBufS_get@time,c
  4209  000F7C                     l3820:
  4210                           
  4211                           ;FastTransfer.c: 356: }
  4212                           ;FastTransfer.c: 357: if (space >= 3) {
  4213  000F7C  0E02               	movlw	2
  4214  000F7E  641E               	cpfsgt	crcBufS_get@space,c
  4215  000F80  D002               	goto	l3824
  4216                           
  4217                           ;FastTransfer.c: 358: space = 3 - 1;
  4218  000F82  0E02               	movlw	2
  4219  000F84  6E1E               	movwf	crcBufS_get@space,c
  4220  000F86                     l3824:
  4221                           
  4222                           ;FastTransfer.c: 359: }
  4223                           ;FastTransfer.c: 360: time = time + 1;
  4224  000F86  281D               	incf	crcBufS_get@time,w,c
  4225  000F88  6E1D               	movwf	crcBufS_get@time,c
  4226                           
  4227                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4228  000F8A  501D               	movf	crcBufS_get@time,w,c
  4229  000F8C  0D03               	mullw	3
  4230  000F8E  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4231  000F92  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4232                           
  4233                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4234  000F96  EE20 F00F          	lfsr	2,15
  4235  000F9A  501B               	movf	crcBufS_get@_this,w,c
  4236  000F9C  26D9               	addwf	fsr2l,f,c
  4237  000F9E  501C               	movf	crcBufS_get@_this+1,w,c
  4238  000FA0  22DA               	addwfc	fsr2h,f,c
  4239  000FA2  5025               	movf	crcBufS_get@wantedTime,w,c
  4240  000FA4  5CDE               	subwf	postinc2,w,c
  4241  000FA6  50DE               	movf	postinc2,w,c
  4242  000FA8  0A80               	xorlw	128
  4243  000FAA  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4244  000FAC  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4245  000FAE  0A80               	xorlw	128
  4246  000FB0  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4247  000FB2  B0D8               	btfsc	status,0,c
  4248  000FB4  D02A               	goto	l3836
  4249                           
  4250                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4251  000FB6  EE20 F00F          	lfsr	2,15
  4252  000FBA  501B               	movf	crcBufS_get@_this,w,c
  4253  000FBC  26D9               	addwf	fsr2l,f,c
  4254  000FBE  501C               	movf	crcBufS_get@_this+1,w,c
  4255  000FC0  22DA               	addwfc	fsr2h,f,c
  4256  000FC2  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4257  000FC6  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4258  000FCA  1E1F               	comf	??_crcBufS_get,f,c
  4259  000FCC  1E20               	comf	??_crcBufS_get+1,f,c
  4260  000FCE  4A1F               	infsnz	??_crcBufS_get,f,c
  4261  000FD0  2A20               	incf	??_crcBufS_get+1,f,c
  4262  000FD2  5025               	movf	crcBufS_get@wantedTime,w,c
  4263  000FD4  261F               	addwf	??_crcBufS_get,f,c
  4264  000FD6  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4265  000FD8  2220               	addwfc	??_crcBufS_get+1,f,c
  4266  000FDA  1E1F               	comf	??_crcBufS_get,f,c
  4267  000FDC  1E20               	comf	??_crcBufS_get+1,f,c
  4268  000FDE  4A1F               	infsnz	??_crcBufS_get,f,c
  4269  000FE0  2A20               	incf	??_crcBufS_get+1,f,c
  4270  000FE2  0E0F               	movlw	15
  4271  000FE4  241F               	addwf	??_crcBufS_get,w,c
  4272  000FE6  6E25               	movwf	crcBufS_get@wantedTime,c
  4273  000FE8  0E00               	movlw	0
  4274  000FEA  2020               	addwfc	??_crcBufS_get+1,w,c
  4275  000FEC  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4276                           
  4277                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4278  000FEE  501E               	movf	crcBufS_get@space,w,c
  4279  000FF0  2425               	addwf	crcBufS_get@wantedTime,w,c
  4280  000FF2  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4281  000FF4  0E00               	movlw	0
  4282  000FF6  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4283  000FF8  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4284  000FFA  501F               	movf	??_crcBufS_get,w,c
  4285  000FFC  241B               	addwf	crcBufS_get@_this,w,c
  4286  000FFE  6ED9               	movwf	fsr2l,c
  4287  001000  5020               	movf	??_crcBufS_get+1,w,c
  4288  001002  201C               	addwfc	crcBufS_get@_this+1,w,c
  4289  001004  6EDA               	movwf	fsr2h,c
  4290  001006  50DF               	movf	indf2,w,c
  4291                           
  4292                           ;FastTransfer.c: 365: } else {
  4293  001008  0012               	return	
  4294  00100A                     l3836:
  4295                           
  4296                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4297  00100A  EE20 F00F          	lfsr	2,15
  4298  00100E  501B               	movf	crcBufS_get@_this,w,c
  4299  001010  26D9               	addwf	fsr2l,f,c
  4300  001012  501C               	movf	crcBufS_get@_this+1,w,c
  4301  001014  22DA               	addwfc	fsr2h,f,c
  4302  001016  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4303  00101A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4304  00101E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4305  001022  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4306  001026  1E21               	comf	??_crcBufS_get+2,f,c
  4307  001028  1E22               	comf	??_crcBufS_get+3,f,c
  4308  00102A  4A21               	infsnz	??_crcBufS_get+2,f,c
  4309  00102C  2A22               	incf	??_crcBufS_get+3,f,c
  4310  00102E  501E               	movf	crcBufS_get@space,w,c
  4311  001030  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4312  001032  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4313  001034  5021               	movf	??_crcBufS_get+2,w,c
  4314  001036  2623               	addwf	??_crcBufS_get+4,f,c
  4315  001038  5022               	movf	??_crcBufS_get+3,w,c
  4316  00103A  2224               	addwfc	??_crcBufS_get+5,f,c
  4317  00103C  501F               	movf	??_crcBufS_get,w,c
  4318  00103E  2623               	addwf	??_crcBufS_get+4,f,c
  4319  001040  5020               	movf	??_crcBufS_get+1,w,c
  4320  001042  2224               	addwfc	??_crcBufS_get+5,f,c
  4321  001044  5023               	movf	??_crcBufS_get+4,w,c
  4322  001046  241B               	addwf	crcBufS_get@_this,w,c
  4323  001048  6ED9               	movwf	fsr2l,c
  4324  00104A  5024               	movf	??_crcBufS_get+5,w,c
  4325  00104C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4326  00104E  6EDA               	movwf	fsr2h,c
  4327  001050  50DF               	movf	indf2,w,c
  4328  001052  0012               	return	
  4329  001054                     __end_of_crcBufS_get:
  4330                           	opt stack 0
  4331                           tosu	equ	0xFFF
  4332                           tosh	equ	0xFFE
  4333                           tosl	equ	0xFFD
  4334                           pclath	equ	0xFFA
  4335                           tblptru	equ	0xFF8
  4336                           tblptrh	equ	0xFF7
  4337                           tblptrl	equ	0xFF6
  4338                           tablat	equ	0xFF5
  4339                           prodh	equ	0xFF4
  4340                           prodl	equ	0xFF3
  4341                           intcon	equ	0xFF2
  4342                           postinc0	equ	0xFEE
  4343                           wreg	equ	0xFE8
  4344                           indf2	equ	0xFDF
  4345                           postinc2	equ	0xFDE
  4346                           postdec2	equ	0xFDD
  4347                           plusw2	equ	0xFDB
  4348                           fsr2h	equ	0xFDA
  4349                           fsr2l	equ	0xFD9
  4350                           status	equ	0xFD8
  4351                           
  4352 ;; *************** function _Receive_get *****************
  4353 ;; Defined at:
  4354 ;;		line 126 in file "UART.c"
  4355 ;; Parameters:    Size  Location     Type
  4356 ;;		None
  4357 ;; Auto vars:     Size  Location     Type
  4358 ;;		None
  4359 ;; Return value:  Size  Location     Type
  4360 ;;                  1    wreg      unsigned char 
  4361 ;; Registers used:
  4362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4363 ;; Tracked objects:
  4364 ;;		On entry : 0/0
  4365 ;;		On exit  : 0/0
  4366 ;;		Unchanged: 0/0
  4367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4368 ;;      Params:         0       0       0       0       0       0       0
  4369 ;;      Locals:         0       0       0       0       0       0       0
  4370 ;;      Temps:          0       0       0       0       0       0       0
  4371 ;;      Totals:         0       0       0       0       0       0       0
  4372 ;;Total ram usage:        0 bytes
  4373 ;; Hardware stack levels used:    1
  4374 ;; Hardware stack levels required when called:    6
  4375 ;; This function calls:
  4376 ;;		_UART_buff_get
  4377 ;; This function is called by:
  4378 ;;		_SYSTEM_Initialize
  4379 ;;		_getch
  4380 ;;		_CRCcheck
  4381 ;;		_receiveData
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           	psect	text17
  4386  001E3E                     __ptext17:
  4387                           	opt stack 0
  4388  001E3E                     _Receive_get:
  4389                           	opt stack 22
  4390                           
  4391                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4392                           
  4393                           ;incstack = 0
  4394  001E3E  0E00               	movlw	low _input_buffer
  4395  001E40  6E21               	movwf	UART_buff_get@_this,c
  4396  001E42  0E03               	movlw	high _input_buffer
  4397  001E44  6E22               	movwf	UART_buff_get@_this+1,c
  4398  001E46  EC30  F00A         	call	_UART_buff_get	;wreg free
  4399  001E4A  0012               	return	
  4400  001E4C                     __end_of_Receive_get:
  4401                           	opt stack 0
  4402                           tosu	equ	0xFFF
  4403                           tosh	equ	0xFFE
  4404                           tosl	equ	0xFFD
  4405                           pclath	equ	0xFFA
  4406                           tblptru	equ	0xFF8
  4407                           tblptrh	equ	0xFF7
  4408                           tblptrl	equ	0xFF6
  4409                           tablat	equ	0xFF5
  4410                           prodh	equ	0xFF4
  4411                           prodl	equ	0xFF3
  4412                           intcon	equ	0xFF2
  4413                           postinc0	equ	0xFEE
  4414                           wreg	equ	0xFE8
  4415                           indf2	equ	0xFDF
  4416                           postinc2	equ	0xFDE
  4417                           postdec2	equ	0xFDD
  4418                           plusw2	equ	0xFDB
  4419                           fsr2h	equ	0xFDA
  4420                           fsr2l	equ	0xFD9
  4421                           status	equ	0xFD8
  4422                           
  4423 ;; *************** function _UART_buff_get *****************
  4424 ;; Defined at:
  4425 ;;		line 81 in file "UART.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4428 ;;		 -> output_buffer(206), input_buffer(206), 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  c               1   36[COMRAM] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      unsigned char 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4440 ;;      Params:         2       0       0       0       0       0       0
  4441 ;;      Locals:         1       0       0       0       0       0       0
  4442 ;;      Temps:          2       0       0       0       0       0       0
  4443 ;;      Totals:         5       0       0       0       0       0       0
  4444 ;;Total ram usage:        5 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    5
  4447 ;; This function calls:
  4448 ;;		_UART_buff_modulo_inc
  4449 ;; This function is called by:
  4450 ;;		_Receive_get
  4451 ;;		_Send_put
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455                           	psect	text18
  4456  001460                     __ptext18:
  4457                           	opt stack 0
  4458  001460                     _UART_buff_get:
  4459                           	opt stack 21
  4460                           
  4461                           ;UART.c: 82: unsigned char c;
  4462                           ;UART.c: 83: if (_this->count > 0) {
  4463                           
  4464                           ;incstack = 0
  4465  001460  EE20 F0CC          	lfsr	2,204
  4466  001464  5021               	movf	UART_buff_get@_this,w,c
  4467  001466  26D9               	addwf	fsr2l,f,c
  4468  001468  5022               	movf	UART_buff_get@_this+1,w,c
  4469  00146A  22DA               	addwfc	fsr2h,f,c
  4470  00146C  0E01               	movlw	1
  4471  00146E  BEDB               	btfsc	plusw2,7,c
  4472  001470  D03C               	goto	l3756
  4473  001472  0E01               	movlw	1
  4474  001474  50DB               	movf	plusw2,w,c
  4475  001476  E103               	bnz	u3020
  4476  001478  04DE               	decf	postinc2,w,c
  4477  00147A  A0D8               	btfss	status,0,c
  4478  00147C  D036               	goto	l3756
  4479  00147E                     u3020:
  4480                           
  4481                           ;UART.c: 84: c = _this->buf[_this->tail];
  4482  00147E  EE20 F0CA          	lfsr	2,202
  4483  001482  5021               	movf	UART_buff_get@_this,w,c
  4484  001484  26D9               	addwf	fsr2l,f,c
  4485  001486  5022               	movf	UART_buff_get@_this+1,w,c
  4486  001488  22DA               	addwfc	fsr2h,f,c
  4487  00148A  CFDE F023          	movff	postinc2,??_UART_buff_get
  4488  00148E  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4489  001492  5023               	movf	??_UART_buff_get,w,c
  4490  001494  2421               	addwf	UART_buff_get@_this,w,c
  4491  001496  6ED9               	movwf	fsr2l,c
  4492  001498  5024               	movf	??_UART_buff_get+1,w,c
  4493  00149A  2022               	addwfc	UART_buff_get@_this+1,w,c
  4494  00149C  6EDA               	movwf	fsr2h,c
  4495  00149E  50DF               	movf	indf2,w,c
  4496  0014A0  6E25               	movwf	UART_buff_get@c,c
  4497                           
  4498                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4499  0014A2  EE20 F0CA          	lfsr	2,202
  4500  0014A6  5021               	movf	UART_buff_get@_this,w,c
  4501  0014A8  26D9               	addwf	fsr2l,f,c
  4502  0014AA  5022               	movf	UART_buff_get@_this+1,w,c
  4503  0014AC  22DA               	addwfc	fsr2h,f,c
  4504  0014AE  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4505  0014B2  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4506  0014B6  0E00               	movlw	0
  4507  0014B8  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4508  0014BA  0EC8               	movlw	200
  4509  0014BC  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4510  0014BE  EC4A  F00E         	call	_UART_buff_modulo_inc	;wreg free
  4511  0014C2  EE20 F0CA          	lfsr	2,202
  4512  0014C6  5021               	movf	UART_buff_get@_this,w,c
  4513  0014C8  26D9               	addwf	fsr2l,f,c
  4514  0014CA  5022               	movf	UART_buff_get@_this+1,w,c
  4515  0014CC  22DA               	addwfc	fsr2h,f,c
  4516  0014CE  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4517  0014D2  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4518                           
  4519                           ;UART.c: 86: --_this->count;
  4520  0014D6  EE20 F0CC          	lfsr	2,204
  4521  0014DA  5021               	movf	UART_buff_get@_this,w,c
  4522  0014DC  26D9               	addwf	fsr2l,f,c
  4523  0014DE  5022               	movf	UART_buff_get@_this+1,w,c
  4524  0014E0  22DA               	addwfc	fsr2h,f,c
  4525  0014E2  06DE               	decf	postinc2,f,c
  4526  0014E4  0E00               	movlw	0
  4527  0014E6  5ADD               	subwfb	postdec2,f,c
  4528                           
  4529                           ;UART.c: 87: } else {
  4530  0014E8  D002               	goto	l787
  4531  0014EA                     l3756:
  4532                           
  4533                           ;UART.c: 88: c = 0;
  4534  0014EA  0E00               	movlw	0
  4535  0014EC  6E25               	movwf	UART_buff_get@c,c
  4536  0014EE                     l787:
  4537                           
  4538                           ;UART.c: 89: }
  4539                           ;UART.c: 90: return (c);
  4540  0014EE  5025               	movf	UART_buff_get@c,w,c
  4541  0014F0  0012               	return	
  4542  0014F2                     __end_of_UART_buff_get:
  4543                           	opt stack 0
  4544                           tosu	equ	0xFFF
  4545                           tosh	equ	0xFFE
  4546                           tosl	equ	0xFFD
  4547                           pclath	equ	0xFFA
  4548                           tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           intcon	equ	0xFF2
  4555                           postinc0	equ	0xFEE
  4556                           wreg	equ	0xFE8
  4557                           indf2	equ	0xFDF
  4558                           postinc2	equ	0xFDE
  4559                           postdec2	equ	0xFDD
  4560                           plusw2	equ	0xFDB
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _UART_buff_modulo_inc *****************
  4566 ;; Defined at:
  4567 ;;		line 106 in file "UART.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  value           2   26[COMRAM] const unsigned int 
  4570 ;;  modulus         2   28[COMRAM] const unsigned int 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  my_value        2   30[COMRAM] unsigned int 
  4573 ;; Return value:  Size  Location     Type
  4574 ;;                  2   26[COMRAM] unsigned int 
  4575 ;; Registers used:
  4576 ;;		wreg, status,2, status,0
  4577 ;; Tracked objects:
  4578 ;;		On entry : 0/0
  4579 ;;		On exit  : 0/0
  4580 ;;		Unchanged: 0/0
  4581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4582 ;;      Params:         4       0       0       0       0       0       0
  4583 ;;      Locals:         2       0       0       0       0       0       0
  4584 ;;      Temps:          0       0       0       0       0       0       0
  4585 ;;      Totals:         6       0       0       0       0       0       0
  4586 ;;Total ram usage:        6 bytes
  4587 ;; Hardware stack levels used:    1
  4588 ;; Hardware stack levels required when called:    4
  4589 ;; This function calls:
  4590 ;;		Nothing
  4591 ;; This function is called by:
  4592 ;;		_UART_buff_put
  4593 ;;		_UART_buff_get
  4594 ;; This function uses a non-reentrant model
  4595 ;;
  4596                           
  4597                           	psect	text19
  4598  001C94                     __ptext19:
  4599                           	opt stack 0
  4600  001C94                     _UART_buff_modulo_inc:
  4601                           	opt stack 21
  4602                           
  4603                           ;UART.c: 107: unsigned int my_value = value + 1;
  4604                           
  4605                           ;incstack = 0
  4606  001C94  0E01               	movlw	1
  4607  001C96  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4608  001C98  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4609  001C9A  0E00               	movlw	0
  4610  001C9C  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4611  001C9E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4612                           
  4613                           ;UART.c: 108: if (my_value >= modulus) {
  4614  001CA0  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4615  001CA2  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4616  001CA4  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4617  001CA6  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4618  001CA8  A0D8               	btfss	status,0,c
  4619  001CAA  D004               	goto	l3706
  4620                           
  4621                           ;UART.c: 109: my_value = 0;
  4622  001CAC  0E00               	movlw	0
  4623  001CAE  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4624  001CB0  0E00               	movlw	0
  4625  001CB2  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4626  001CB4                     l3706:
  4627                           
  4628                           ;UART.c: 110: }
  4629                           ;UART.c: 111: return (my_value);
  4630  001CB4  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4631  001CB8  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4632  001CBC  0012               	return	
  4633  001CBE                     __end_of_UART_buff_modulo_inc:
  4634                           	opt stack 0
  4635                           tosu	equ	0xFFF
  4636                           tosh	equ	0xFFE
  4637                           tosl	equ	0xFFD
  4638                           pclath	equ	0xFFA
  4639                           tblptru	equ	0xFF8
  4640                           tblptrh	equ	0xFF7
  4641                           tblptrl	equ	0xFF6
  4642                           tablat	equ	0xFF5
  4643                           prodh	equ	0xFF4
  4644                           prodl	equ	0xFF3
  4645                           intcon	equ	0xFF2
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           indf2	equ	0xFDF
  4649                           postinc2	equ	0xFDE
  4650                           postdec2	equ	0xFDD
  4651                           plusw2	equ	0xFDB
  4652                           fsr2h	equ	0xFDA
  4653                           fsr2l	equ	0xFD9
  4654                           status	equ	0xFD8
  4655                           
  4656 ;; *************** function _Receive_available *****************
  4657 ;; Defined at:
  4658 ;;		line 122 in file "UART.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;		None
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;		None
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  2   28[COMRAM] int 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4672 ;;      Params:         2       0       0       0       0       0       0
  4673 ;;      Locals:         0       0       0       0       0       0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0
  4675 ;;      Totals:         2       0       0       0       0       0       0
  4676 ;;Total ram usage:        2 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    5
  4679 ;; This function calls:
  4680 ;;		_UART_buff_size
  4681 ;; This function is called by:
  4682 ;;		_SYSTEM_Initialize
  4683 ;;		_CRCcheck
  4684 ;;		_receiveData
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text20
  4689  001DB4                     __ptext20:
  4690                           	opt stack 0
  4691  001DB4                     _Receive_available:
  4692                           	opt stack 23
  4693                           
  4694                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4695                           
  4696                           ;incstack = 0
  4697  001DB4  0E00               	movlw	low _input_buffer
  4698  001DB6  6E1B               	movwf	UART_buff_size@_this,c
  4699  001DB8  0E03               	movlw	high _input_buffer
  4700  001DBA  6E1C               	movwf	UART_buff_size@_this+1,c
  4701  001DBC  ECE5  F00E         	call	_UART_buff_size	;wreg free
  4702  001DC0  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4703  001DC4  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4704  001DC8  0012               	return	
  4705  001DCA                     __end_of_Receive_available:
  4706                           	opt stack 0
  4707                           tosu	equ	0xFFF
  4708                           tosh	equ	0xFFE
  4709                           tosl	equ	0xFFD
  4710                           pclath	equ	0xFFA
  4711                           tblptru	equ	0xFF8
  4712                           tblptrh	equ	0xFF7
  4713                           tblptrl	equ	0xFF6
  4714                           tablat	equ	0xFF5
  4715                           prodh	equ	0xFF4
  4716                           prodl	equ	0xFF3
  4717                           intcon	equ	0xFF2
  4718                           postinc0	equ	0xFEE
  4719                           wreg	equ	0xFE8
  4720                           indf2	equ	0xFDF
  4721                           postinc2	equ	0xFDE
  4722                           postdec2	equ	0xFDD
  4723                           plusw2	equ	0xFDB
  4724                           fsr2h	equ	0xFDA
  4725                           fsr2l	equ	0xFD9
  4726                           status	equ	0xFD8
  4727                           
  4728 ;; *************** function _UART_buff_size *****************
  4729 ;; Defined at:
  4730 ;;		line 102 in file "UART.c"
  4731 ;; Parameters:    Size  Location     Type
  4732 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4733 ;;		 -> output_buffer(206), input_buffer(206), 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;		None
  4736 ;; Return value:  Size  Location     Type
  4737 ;;                  2   26[COMRAM] int 
  4738 ;; Registers used:
  4739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4745 ;;      Params:         2       0       0       0       0       0       0
  4746 ;;      Locals:         0       0       0       0       0       0       0
  4747 ;;      Temps:          0       0       0       0       0       0       0
  4748 ;;      Totals:         2       0       0       0       0       0       0
  4749 ;;Total ram usage:        2 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    4
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		_Receive_available
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text21
  4760  001DCA                     __ptext21:
  4761                           	opt stack 0
  4762  001DCA                     _UART_buff_size:
  4763                           	opt stack 23
  4764                           
  4765                           ;UART.c: 103: return (_this->count);
  4766                           
  4767                           ;incstack = 0
  4768  001DCA  EE20 F0CC          	lfsr	2,204
  4769  001DCE  501B               	movf	UART_buff_size@_this,w,c
  4770  001DD0  26D9               	addwf	fsr2l,f,c
  4771  001DD2  501C               	movf	UART_buff_size@_this+1,w,c
  4772  001DD4  22DA               	addwfc	fsr2h,f,c
  4773  001DD6  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4774  001DDA  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4775  001DDE  0012               	return	
  4776  001DE0                     __end_of_UART_buff_size:
  4777                           	opt stack 0
  4778                           tosu	equ	0xFFF
  4779                           tosh	equ	0xFFE
  4780                           tosl	equ	0xFFD
  4781                           pclath	equ	0xFFA
  4782                           tblptru	equ	0xFF8
  4783                           tblptrh	equ	0xFF7
  4784                           tblptrl	equ	0xFF6
  4785                           tablat	equ	0xFF5
  4786                           prodh	equ	0xFF4
  4787                           prodl	equ	0xFF3
  4788                           intcon	equ	0xFF2
  4789                           postinc0	equ	0xFEE
  4790                           wreg	equ	0xFE8
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           plusw2	equ	0xFDB
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799 ;; *************** function _CRC8 *****************
  4800 ;; Defined at:
  4801 ;;		line 34 in file "FastTransfer.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4804 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1395(3), receiveData@holder(3), 
  4805 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4806 ;;  len             1   28[COMRAM] unsigned char 
  4807 ;; Auto vars:     Size  Location     Type
  4808 ;;  sum             1   29[COMRAM] unsigned char 
  4809 ;;  tempI           1   31[COMRAM] unsigned char 
  4810 ;;  extract         1   30[COMRAM] unsigned char 
  4811 ;;  crc             1   32[COMRAM] unsigned char 
  4812 ;; Return value:  Size  Location     Type
  4813 ;;                  1    wreg      unsigned char 
  4814 ;; Registers used:
  4815 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4816 ;; Tracked objects:
  4817 ;;		On entry : 0/0
  4818 ;;		On exit  : 0/0
  4819 ;;		Unchanged: 0/0
  4820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4821 ;;      Params:         3       0       0       0       0       0       0
  4822 ;;      Locals:         4       0       0       0       0       0       0
  4823 ;;      Temps:          0       0       0       0       0       0       0
  4824 ;;      Totals:         7       0       0       0       0       0       0
  4825 ;;Total ram usage:        7 bytes
  4826 ;; Hardware stack levels used:    1
  4827 ;; Hardware stack levels required when called:    4
  4828 ;; This function calls:
  4829 ;;		Nothing
  4830 ;; This function is called by:
  4831 ;;		_sendData
  4832 ;;		_receiveData
  4833 ;;		_CRCcheck
  4834 ;; This function uses a non-reentrant model
  4835 ;;
  4836                           
  4837                           	psect	text22
  4838  001A64                     __ptext22:
  4839                           	opt stack 0
  4840  001A64                     _CRC8:
  4841                           	opt stack 23
  4842                           
  4843                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4844                           
  4845                           ;incstack = 0
  4846  001A64  0E00               	movlw	0
  4847  001A66  6E21               	movwf	CRC8@crc,c
  4848                           
  4849                           ;FastTransfer.c: 36: while (len--) {
  4850  001A68  D01C               	goto	l3782
  4851  001A6A                     l3766:
  4852                           
  4853                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4854  001A6A  C01B  FFD9         	movff	CRC8@data,fsr2l
  4855  001A6E  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4856  001A72  50DF               	movf	indf2,w,c
  4857  001A74  6E1F               	movwf	CRC8@extract,c
  4858  001A76  4A1B               	infsnz	CRC8@data,f,c
  4859  001A78  2A1C               	incf	CRC8@data+1,f,c
  4860                           
  4861                           ;FastTransfer.c: 38: unsigned char tempI;
  4862                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4863  001A7A  0E08               	movlw	8
  4864  001A7C  6E20               	movwf	CRC8@tempI,c
  4865  001A7E  D00E               	goto	l3780
  4866  001A80                     l3772:
  4867                           
  4868                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4869  001A80  5021               	movf	CRC8@crc,w,c
  4870  001A82  181F               	xorwf	CRC8@extract,w,c
  4871  001A84  0B01               	andlw	1
  4872  001A86  6E1E               	movwf	CRC8@sum,c
  4873                           
  4874                           ;FastTransfer.c: 41: crc >>= 1;
  4875  001A88  90D8               	bcf	status,0,c
  4876  001A8A  3221               	rrcf	CRC8@crc,f,c
  4877                           
  4878                           ;FastTransfer.c: 42: if (sum) {
  4879  001A8C  501E               	movf	CRC8@sum,w,c
  4880  001A8E  B4D8               	btfsc	status,2,c
  4881  001A90  D002               	goto	l473
  4882                           
  4883                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4884  001A92  0E8C               	movlw	140
  4885  001A94  1A21               	xorwf	CRC8@crc,f,c
  4886  001A96                     l473:
  4887                           
  4888                           ;FastTransfer.c: 44: }
  4889                           ;FastTransfer.c: 45: extract >>= 1;
  4890  001A96  90D8               	bcf	status,0,c
  4891  001A98  321F               	rrcf	CRC8@extract,f,c
  4892  001A9A  0620               	decf	CRC8@tempI,f,c
  4893  001A9C                     l3780:
  4894  001A9C  5020               	movf	CRC8@tempI,w,c
  4895  001A9E  A4D8               	btfss	status,2,c
  4896  001AA0  D7EF               	goto	l3772
  4897  001AA2                     l3782:
  4898  001AA2  061D               	decf	CRC8@len,f,c
  4899  001AA4  281D               	incf	CRC8@len,w,c
  4900  001AA6  A4D8               	btfss	status,2,c
  4901  001AA8  D7E0               	goto	l3766
  4902                           
  4903                           ;FastTransfer.c: 46: }
  4904                           ;FastTransfer.c: 47: }
  4905                           ;FastTransfer.c: 48: return crc;
  4906  001AAA  5021               	movf	CRC8@crc,w,c
  4907  001AAC  0012               	return	
  4908  001AAE                     __end_of_CRC8:
  4909                           	opt stack 0
  4910                           tosu	equ	0xFFF
  4911                           tosh	equ	0xFFE
  4912                           tosl	equ	0xFFD
  4913                           pclath	equ	0xFFA
  4914                           tblptru	equ	0xFF8
  4915                           tblptrh	equ	0xFF7
  4916                           tblptrl	equ	0xFF6
  4917                           tablat	equ	0xFF5
  4918                           prodh	equ	0xFF4
  4919                           prodl	equ	0xFF3
  4920                           intcon	equ	0xFF2
  4921                           postinc0	equ	0xFEE
  4922                           wreg	equ	0xFE8
  4923                           indf2	equ	0xFDF
  4924                           postinc2	equ	0xFDE
  4925                           postdec2	equ	0xFDD
  4926                           plusw2	equ	0xFDB
  4927                           fsr2h	equ	0xFDA
  4928                           fsr2l	equ	0xFD9
  4929                           status	equ	0xFD8
  4930                           
  4931 ;; *************** function _processPowerRequest *****************
  4932 ;; Defined at:
  4933 ;;		line 33 in file "Communications.c"
  4934 ;; Parameters:    Size  Location     Type
  4935 ;;  powerSet        2    0[BANK0 ] int 
  4936 ;; Auto vars:     Size  Location     Type
  4937 ;;		None
  4938 ;; Return value:  Size  Location     Type
  4939 ;;		None               void
  4940 ;; Registers used:
  4941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4942 ;; Tracked objects:
  4943 ;;		On entry : 0/0
  4944 ;;		On exit  : 0/0
  4945 ;;		Unchanged: 0/0
  4946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4947 ;;      Params:         0       2       0       0       0       0       0
  4948 ;;      Locals:         0       0       0       0       0       0       0
  4949 ;;      Temps:          0       0       0       0       0       0       0
  4950 ;;      Totals:         0       2       0       0       0       0       0
  4951 ;;Total ram usage:        2 bytes
  4952 ;; Hardware stack levels used:    1
  4953 ;; Hardware stack levels required when called:    7
  4954 ;; This function calls:
  4955 ;;		_EnableSlavePower
  4956 ;;		_Update
  4957 ;; This function is called by:
  4958 ;;		_updateComms
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	text23
  4963  0013A6                     __ptext23:
  4964                           	opt stack 0
  4965  0013A6                     _processPowerRequest:
  4966                           	opt stack 22
  4967                           
  4968                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4969                           
  4970                           ;incstack = 0
  4971  0013A6  0100               	movlb	0	; () banked
  4972  0013A8  A1D5               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4973  0013AA  D008               	goto	l4314
  4974                           
  4975                           ; BSR set to: 0
  4976  0013AC  0E00               	movlw	0
  4977  0013AE  6E26               	movwf	EnableSlavePower@onof+1,c
  4978  0013B0  0E01               	movlw	1
  4979  0013B2  6E25               	movwf	EnableSlavePower@onof,c
  4980  0013B4  0E04               	movlw	4
  4981  0013B6  EC47  F007         	call	_EnableSlavePower
  4982  0013BA  D007               	goto	l4316
  4983  0013BC                     l4314:
  4984                           
  4985                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4986  0013BC  0E00               	movlw	0
  4987  0013BE  6E26               	movwf	EnableSlavePower@onof+1,c
  4988  0013C0  0E00               	movlw	0
  4989  0013C2  6E25               	movwf	EnableSlavePower@onof,c
  4990  0013C4  0E04               	movlw	4
  4991  0013C6  EC47  F007         	call	_EnableSlavePower
  4992  0013CA                     l4316:
  4993                           
  4994                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4995  0013CA  0100               	movlb	0	; () banked
  4996  0013CC  A3D5               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4997  0013CE  D008               	goto	l4320
  4998                           
  4999                           ; BSR set to: 0
  5000  0013D0  0E00               	movlw	0
  5001  0013D2  6E26               	movwf	EnableSlavePower@onof+1,c
  5002  0013D4  0E01               	movlw	1
  5003  0013D6  6E25               	movwf	EnableSlavePower@onof,c
  5004  0013D8  0E02               	movlw	2
  5005  0013DA  EC47  F007         	call	_EnableSlavePower
  5006  0013DE  D007               	goto	l4322
  5007  0013E0                     l4320:
  5008                           
  5009                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  5010  0013E0  0E00               	movlw	0
  5011  0013E2  6E26               	movwf	EnableSlavePower@onof+1,c
  5012  0013E4  0E00               	movlw	0
  5013  0013E6  6E25               	movwf	EnableSlavePower@onof,c
  5014  0013E8  0E02               	movlw	2
  5015  0013EA  EC47  F007         	call	_EnableSlavePower
  5016  0013EE                     l4322:
  5017                           
  5018                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  5019  0013EE  0100               	movlb	0	; () banked
  5020  0013F0  A5D5               	btfss	processPowerRequest@powerSet& (0+255),2,b
  5021  0013F2  D008               	goto	l4326
  5022                           
  5023                           ; BSR set to: 0
  5024  0013F4  0E00               	movlw	0
  5025  0013F6  6E26               	movwf	EnableSlavePower@onof+1,c
  5026  0013F8  0E01               	movlw	1
  5027  0013FA  6E25               	movwf	EnableSlavePower@onof,c
  5028  0013FC  0E01               	movlw	1
  5029  0013FE  EC47  F007         	call	_EnableSlavePower
  5030  001402  D007               	goto	l4328
  5031  001404                     l4326:
  5032                           
  5033                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  5034  001404  0E00               	movlw	0
  5035  001406  6E26               	movwf	EnableSlavePower@onof+1,c
  5036  001408  0E00               	movlw	0
  5037  00140A  6E25               	movwf	EnableSlavePower@onof,c
  5038  00140C  0E01               	movlw	1
  5039  00140E  EC47  F007         	call	_EnableSlavePower
  5040  001412                     l4328:
  5041                           
  5042                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  5043  001412  0100               	movlb	0	; () banked
  5044  001414  A7D5               	btfss	processPowerRequest@powerSet& (0+255),3,b
  5045  001416  D008               	goto	l4332
  5046                           
  5047                           ; BSR set to: 0
  5048  001418  0E00               	movlw	0
  5049  00141A  6E26               	movwf	EnableSlavePower@onof+1,c
  5050  00141C  0E01               	movlw	1
  5051  00141E  6E25               	movwf	EnableSlavePower@onof,c
  5052  001420  0E03               	movlw	3
  5053  001422  EC47  F007         	call	_EnableSlavePower
  5054  001426  D007               	goto	l4334
  5055  001428                     l4332:
  5056                           
  5057                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  5058  001428  0E00               	movlw	0
  5059  00142A  6E26               	movwf	EnableSlavePower@onof+1,c
  5060  00142C  0E00               	movlw	0
  5061  00142E  6E25               	movwf	EnableSlavePower@onof,c
  5062  001430  0E03               	movlw	3
  5063  001432  EC47  F007         	call	_EnableSlavePower
  5064  001436                     l4334:
  5065                           
  5066                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  5067  001436  0100               	movlb	0	; () banked
  5068  001438  A9D5               	btfss	processPowerRequest@powerSet& (0+255),4,b
  5069  00143A  D008               	goto	l4338
  5070                           
  5071                           ; BSR set to: 0
  5072  00143C  0E00               	movlw	0
  5073  00143E  6E26               	movwf	EnableSlavePower@onof+1,c
  5074  001440  0E01               	movlw	1
  5075  001442  6E25               	movwf	EnableSlavePower@onof,c
  5076  001444  0E05               	movlw	5
  5077  001446  EC47  F007         	call	_EnableSlavePower
  5078  00144A  D007               	goto	l399
  5079  00144C                     l4338:
  5080                           
  5081                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  5082  00144C  0E00               	movlw	0
  5083  00144E  6E26               	movwf	EnableSlavePower@onof+1,c
  5084  001450  0E00               	movlw	0
  5085  001452  6E25               	movwf	EnableSlavePower@onof,c
  5086  001454  0E05               	movlw	5
  5087  001456  EC47  F007         	call	_EnableSlavePower
  5088  00145A                     l399:
  5089                           
  5090                           ;Communications.c: 45: Update();
  5091  00145A  EC32  F00F         	call	_Update	;wreg free
  5092  00145E  0012               	return		;funcret
  5093  001460                     __end_of_processPowerRequest:
  5094                           	opt stack 0
  5095                           tosu	equ	0xFFF
  5096                           tosh	equ	0xFFE
  5097                           tosl	equ	0xFFD
  5098                           pclath	equ	0xFFA
  5099                           tblptru	equ	0xFF8
  5100                           tblptrh	equ	0xFF7
  5101                           tblptrl	equ	0xFF6
  5102                           tablat	equ	0xFF5
  5103                           prodh	equ	0xFF4
  5104                           prodl	equ	0xFF3
  5105                           intcon	equ	0xFF2
  5106                           postinc0	equ	0xFEE
  5107                           wreg	equ	0xFE8
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           plusw2	equ	0xFDB
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function _SYSTEM_Initialize *****************
  5117 ;; Defined at:
  5118 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;		None
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;		None
  5123 ;; Return value:  Size  Location     Type
  5124 ;;		None               void
  5125 ;; Registers used:
  5126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5132 ;;      Params:         0       0       0       0       0       0       0
  5133 ;;      Locals:         0       0       0       0       0       0       0
  5134 ;;      Temps:          0       0       0       0       0       0       0
  5135 ;;      Totals:         0       0       0       0       0       0       0
  5136 ;;Total ram usage:        0 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    7
  5139 ;; This function calls:
  5140 ;;		_ADC_Initialize
  5141 ;;		_EUSART1_Initialize
  5142 ;;		_INTERRUPT_Initialize
  5143 ;;		_OSCILLATOR_Initialize
  5144 ;;		_PIN_MANAGER_Initialize
  5145 ;;		_PWM4_Initialize
  5146 ;;		_TMR2_Initialize
  5147 ;;		_begin
  5148 ;; This function is called by:
  5149 ;;		_main
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text24
  5154  001776                     __ptext24:
  5155                           	opt stack 0
  5156  001776                     _SYSTEM_Initialize:
  5157                           	opt stack 23
  5158                           
  5159                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5160                           
  5161                           ;incstack = 0
  5162  001776  EC26  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  5163                           
  5164                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5165  00177A  EC43  F00B         	call	_PIN_MANAGER_Initialize	;wreg free
  5166                           
  5167                           ;mcc.c: 116: INTERRUPT_Initialize();
  5168  00177E  EC2D  F00F         	call	_INTERRUPT_Initialize	;wreg free
  5169                           
  5170                           ;mcc.c: 117: EUSART1_Initialize();
  5171  001782  EC9B  F00D         	call	_EUSART1_Initialize	;wreg free
  5172                           
  5173                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5174  001786  0E9C               	movlw	low _receiveArray
  5175  001788  0100               	movlb	0	; () banked
  5176  00178A  6FD5               	movwf	begin@ptr& (0+255),b
  5177  00178C  0E00               	movlw	high _receiveArray
  5178  00178E  0100               	movlb	0	; () banked
  5179  001790  6FD6               	movwf	(begin@ptr+1)& (0+255),b
  5180  001792  0E28               	movlw	40
  5181  001794  0100               	movlb	0	; () banked
  5182  001796  6FD7               	movwf	begin@maxSize& (0+255),b
  5183  001798  0E05               	movlw	5
  5184  00179A  0100               	movlb	0	; () banked
  5185  00179C  6FD8               	movwf	begin@givenAddress& (0+255),b
  5186  00179E  0E00               	movlw	0
  5187  0017A0  0100               	movlb	0	; () banked
  5188  0017A2  6FD9               	movwf	begin@error& (0+255),b
  5189  0017A4  0E10               	movlw	low _Send_put
  5190  0017A6  0100               	movlb	0	; () banked
  5191  0017A8  6FDA               	movwf	begin@stufftosend& (0+255),b
  5192  0017AA  0E1C               	movlw	high _Send_put
  5193  0017AC  0100               	movlb	0	; () banked
  5194  0017AE  6FDB               	movwf	(begin@stufftosend+1)& (0+255),b
  5195  0017B0  0E3E               	movlw	low _Receive_get
  5196  0017B2  0100               	movlb	0	; () banked
  5197  0017B4  6FDC               	movwf	begin@stufftoreceive& (0+255),b
  5198  0017B6  0E1E               	movlw	high _Receive_get
  5199  0017B8  0100               	movlb	0	; () banked
  5200  0017BA  6FDD               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5201  0017BC  0EB4               	movlw	low _Receive_available
  5202  0017BE  0100               	movlb	0	; () banked
  5203  0017C0  6FDE               	movwf	begin@stuffavailable& (0+255),b
  5204  0017C2  0E1D               	movlw	high _Receive_available
  5205  0017C4  0100               	movlb	0	; () banked
  5206  0017C6  6FDF               	movwf	(begin@stuffavailable+1)& (0+255),b
  5207  0017C8  0E30               	movlw	low _Receive_peek
  5208  0017CA  0100               	movlb	0	; () banked
  5209  0017CC  6FE0               	movwf	begin@stuffpeek& (0+255),b
  5210  0017CE  0E1E               	movlw	high _Receive_peek
  5211  0017D0  0100               	movlb	0	; () banked
  5212  0017D2  6FE1               	movwf	(begin@stuffpeek+1)& (0+255),b
  5213  0017D4  EC8A  F00C         	call	_begin	;wreg free
  5214                           
  5215                           ;mcc.c: 119: PWM4_Initialize();
  5216  0017D8  ECC1  F00E         	call	_PWM4_Initialize	;wreg free
  5217                           
  5218                           ;mcc.c: 120: TMR2_Initialize();
  5219  0017DC  ECFB  F00E         	call	_TMR2_Initialize	;wreg free
  5220                           
  5221                           ;mcc.c: 121: LATB4 = 1;
  5222  0017E0  888A               	bsf	3978,4,c	;volatile
  5223                           
  5224                           ;mcc.c: 122: ADC_Initialize();
  5225  0017E2  ECCE  F00E         	call	_ADC_Initialize	;wreg free
  5226  0017E6  0012               	return		;funcret
  5227  0017E8                     __end_of_SYSTEM_Initialize:
  5228                           	opt stack 0
  5229                           tosu	equ	0xFFF
  5230                           tosh	equ	0xFFE
  5231                           tosl	equ	0xFFD
  5232                           pclath	equ	0xFFA
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           intcon	equ	0xFF2
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           plusw2	equ	0xFDB
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function _begin *****************
  5251 ;; Defined at:
  5252 ;;		line 18 in file "FastTransfer.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5255 ;;		 -> receiveArray(40), 
  5256 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5257 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5258 ;;  error           1    4[BANK0 ] unsigned char 
  5259 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5260 ;;		 -> Send_put(0), 
  5261 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5262 ;;		 -> Receive_get(1), 
  5263 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5264 ;;		 -> Receive_available(2), 
  5265 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5266 ;;		 -> Receive_peek(1), 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;		None
  5269 ;; Return value:  Size  Location     Type
  5270 ;;		None               void
  5271 ;; Registers used:
  5272 ;;		wreg, status,2, status,0, cstack
  5273 ;; Tracked objects:
  5274 ;;		On entry : 0/0
  5275 ;;		On exit  : 0/0
  5276 ;;		Unchanged: 0/0
  5277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5278 ;;      Params:         0      13       0       0       0       0       0
  5279 ;;      Locals:         0       0       0       0       0       0       0
  5280 ;;      Temps:          0       0       0       0       0       0       0
  5281 ;;      Totals:         0      13       0       0       0       0       0
  5282 ;;Total ram usage:       13 bytes
  5283 ;; Hardware stack levels used:    1
  5284 ;; Hardware stack levels required when called:    5
  5285 ;; This function calls:
  5286 ;;		___awdiv
  5287 ;; This function is called by:
  5288 ;;		_SYSTEM_Initialize
  5289 ;; This function uses a non-reentrant model
  5290 ;;
  5291                           
  5292                           	psect	text25
  5293  001914                     __ptext25:
  5294                           	opt stack 0
  5295  001914                     _begin:
  5296                           	opt stack 24
  5297                           
  5298                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5299                           
  5300                           ;incstack = 0
  5301  001914  C0D5  F098         	movff	begin@ptr,_receiveArrayAddress
  5302  001918  C0D6  F099         	movff	begin@ptr+1,_receiveArrayAddress+1
  5303                           
  5304                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5305  00191C  C0D8  F03F         	movff	begin@givenAddress,_moduleAddress
  5306                           
  5307                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5308  001920  C0DA  F035         	movff	begin@stufftosend,_serial_write
  5309  001924  C0DB  F036         	movff	begin@stufftosend+1,_serial_write+1
  5310                           
  5311                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5312  001928  C0DE  F031         	movff	begin@stuffavailable,_serial_available
  5313  00192C  C0DF  F032         	movff	begin@stuffavailable+1,_serial_available+1
  5314                           
  5315                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5316  001930  C0E0  F09A         	movff	begin@stuffpeek,_serial_peek
  5317  001934  C0E1  F09B         	movff	begin@stuffpeek+1,_serial_peek+1
  5318                           
  5319                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5320  001938  C0DC  F033         	movff	begin@stufftoreceive,_serial_read
  5321  00193C  C0DD  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  5322                           
  5323                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5324  001940  C0D7  F01B         	movff	begin@maxSize,___awdiv@dividend
  5325  001944  6A1C               	clrf	___awdiv@dividend+1,c
  5326  001946  0E00               	movlw	0
  5327  001948  6E1E               	movwf	___awdiv@divisor+1,c
  5328  00194A  0E02               	movlw	2
  5329  00194C  6E1D               	movwf	___awdiv@divisor,c
  5330  00194E  ECC2  F00A         	call	___awdiv	;wreg free
  5331  001952  501B               	movf	?___awdiv,w,c
  5332  001954  6E3E               	movwf	_maxDataAddress,c
  5333                           
  5334                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5335  001956  0E30               	movlw	low _ring_buffer
  5336  001958  6E2F               	movwf	_sendStructAddress,c
  5337  00195A  0E01               	movlw	high _ring_buffer
  5338  00195C  6E30               	movwf	_sendStructAddress+1,c
  5339                           
  5340                           ;FastTransfer.c: 27: AKNAKsend = error;
  5341  00195E  C0D9  F03B         	movff	begin@error,_AKNAKsend
  5342                           
  5343                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5344  001962  0E00               	movlw	0
  5345  001964  0100               	movlb	0	; () banked
  5346  001966  6F93               	movwf	(_alignErrorCounter+1)& (0+255),b
  5347  001968  0E00               	movlw	0
  5348  00196A  6F92               	movwf	_alignErrorCounter& (0+255),b
  5349                           
  5350                           ; BSR set to: 0
  5351  00196C  0012               	return		;funcret
  5352  00196E                     __end_of_begin:
  5353                           	opt stack 0
  5354                           tosu	equ	0xFFF
  5355                           tosh	equ	0xFFE
  5356                           tosl	equ	0xFFD
  5357                           pclath	equ	0xFFA
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodh	equ	0xFF4
  5363                           prodl	equ	0xFF3
  5364                           intcon	equ	0xFF2
  5365                           postinc0	equ	0xFEE
  5366                           wreg	equ	0xFE8
  5367                           indf2	equ	0xFDF
  5368                           postinc2	equ	0xFDE
  5369                           postdec2	equ	0xFDD
  5370                           plusw2	equ	0xFDB
  5371                           fsr2h	equ	0xFDA
  5372                           fsr2l	equ	0xFD9
  5373                           status	equ	0xFD8
  5374                           
  5375 ;; *************** function ___awdiv *****************
  5376 ;; Defined at:
  5377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5378 ;; Parameters:    Size  Location     Type
  5379 ;;  dividend        2   26[COMRAM] int 
  5380 ;;  divisor         2   28[COMRAM] int 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  quotient        2   32[COMRAM] int 
  5383 ;;  sign            1   31[COMRAM] unsigned char 
  5384 ;;  counter         1   30[COMRAM] unsigned char 
  5385 ;; Return value:  Size  Location     Type
  5386 ;;                  2   26[COMRAM] int 
  5387 ;; Registers used:
  5388 ;;		wreg, status,2, status,0
  5389 ;; Tracked objects:
  5390 ;;		On entry : 0/0
  5391 ;;		On exit  : 0/0
  5392 ;;		Unchanged: 0/0
  5393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5394 ;;      Params:         4       0       0       0       0       0       0
  5395 ;;      Locals:         4       0       0       0       0       0       0
  5396 ;;      Temps:          0       0       0       0       0       0       0
  5397 ;;      Totals:         8       0       0       0       0       0       0
  5398 ;;Total ram usage:        8 bytes
  5399 ;; Hardware stack levels used:    1
  5400 ;; Hardware stack levels required when called:    4
  5401 ;; This function calls:
  5402 ;;		Nothing
  5403 ;; This function is called by:
  5404 ;;		_begin
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           	psect	text26
  5409  001584                     __ptext26:
  5410                           	opt stack 0
  5411  001584                     ___awdiv:
  5412                           	opt stack 24
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;incstack = 0
  5416  001584  0E00               	movlw	0
  5417  001586  6E20               	movwf	___awdiv@sign,c
  5418  001588  AE1E               	btfss	___awdiv@divisor+1,7,c
  5419  00158A  D006               	goto	l4032
  5420  00158C  6C1D               	negf	___awdiv@divisor,c
  5421  00158E  1E1E               	comf	___awdiv@divisor+1,f,c
  5422  001590  B0D8               	btfsc	status,0,c
  5423  001592  2A1E               	incf	___awdiv@divisor+1,f,c
  5424  001594  0E01               	movlw	1
  5425  001596  6E20               	movwf	___awdiv@sign,c
  5426  001598                     l4032:
  5427  001598  AE1C               	btfss	___awdiv@dividend+1,7,c
  5428  00159A  D006               	goto	l4038
  5429  00159C  6C1B               	negf	___awdiv@dividend,c
  5430  00159E  1E1C               	comf	___awdiv@dividend+1,f,c
  5431  0015A0  B0D8               	btfsc	status,0,c
  5432  0015A2  2A1C               	incf	___awdiv@dividend+1,f,c
  5433  0015A4  0E01               	movlw	1
  5434  0015A6  1A20               	xorwf	___awdiv@sign,f,c
  5435  0015A8                     l4038:
  5436  0015A8  0E00               	movlw	0
  5437  0015AA  6E22               	movwf	___awdiv@quotient+1,c
  5438  0015AC  0E00               	movlw	0
  5439  0015AE  6E21               	movwf	___awdiv@quotient,c
  5440  0015B0  501D               	movf	___awdiv@divisor,w,c
  5441  0015B2  101E               	iorwf	___awdiv@divisor+1,w,c
  5442  0015B4  B4D8               	btfsc	status,2,c
  5443  0015B6  D01C               	goto	l4060
  5444  0015B8  0E01               	movlw	1
  5445  0015BA  6E1F               	movwf	___awdiv@counter,c
  5446  0015BC  D004               	goto	l4046
  5447  0015BE                     l4044:
  5448  0015BE  90D8               	bcf	status,0,c
  5449  0015C0  361D               	rlcf	___awdiv@divisor,f,c
  5450  0015C2  361E               	rlcf	___awdiv@divisor+1,f,c
  5451  0015C4  2A1F               	incf	___awdiv@counter,f,c
  5452  0015C6                     l4046:
  5453  0015C6  AE1E               	btfss	___awdiv@divisor+1,7,c
  5454  0015C8  D7FA               	goto	l4044
  5455  0015CA                     l4048:
  5456  0015CA  90D8               	bcf	status,0,c
  5457  0015CC  3621               	rlcf	___awdiv@quotient,f,c
  5458  0015CE  3622               	rlcf	___awdiv@quotient+1,f,c
  5459  0015D0  501D               	movf	___awdiv@divisor,w,c
  5460  0015D2  5C1B               	subwf	___awdiv@dividend,w,c
  5461  0015D4  501E               	movf	___awdiv@divisor+1,w,c
  5462  0015D6  581C               	subwfb	___awdiv@dividend+1,w,c
  5463  0015D8  A0D8               	btfss	status,0,c
  5464  0015DA  D005               	goto	l4056
  5465  0015DC  501D               	movf	___awdiv@divisor,w,c
  5466  0015DE  5E1B               	subwf	___awdiv@dividend,f,c
  5467  0015E0  501E               	movf	___awdiv@divisor+1,w,c
  5468  0015E2  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5469  0015E4  8021               	bsf	___awdiv@quotient,0,c
  5470  0015E6                     l4056:
  5471  0015E6  90D8               	bcf	status,0,c
  5472  0015E8  321E               	rrcf	___awdiv@divisor+1,f,c
  5473  0015EA  321D               	rrcf	___awdiv@divisor,f,c
  5474  0015EC  2E1F               	decfsz	___awdiv@counter,f,c
  5475  0015EE  D7ED               	goto	l4048
  5476  0015F0                     l4060:
  5477  0015F0  5020               	movf	___awdiv@sign,w,c
  5478  0015F2  B4D8               	btfsc	status,2,c
  5479  0015F4  D004               	goto	l4064
  5480  0015F6  6C21               	negf	___awdiv@quotient,c
  5481  0015F8  1E22               	comf	___awdiv@quotient+1,f,c
  5482  0015FA  B0D8               	btfsc	status,0,c
  5483  0015FC  2A22               	incf	___awdiv@quotient+1,f,c
  5484  0015FE                     l4064:
  5485  0015FE  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5486  001602  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5487  001606  0012               	return	
  5488  001608                     __end_of___awdiv:
  5489                           	opt stack 0
  5490                           tosu	equ	0xFFF
  5491                           tosh	equ	0xFFE
  5492                           tosl	equ	0xFFD
  5493                           pclath	equ	0xFFA
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           prodh	equ	0xFF4
  5499                           prodl	equ	0xFF3
  5500                           intcon	equ	0xFF2
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           indf2	equ	0xFDF
  5504                           postinc2	equ	0xFDE
  5505                           postdec2	equ	0xFDD
  5506                           plusw2	equ	0xFDB
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _TMR2_Initialize *****************
  5512 ;; Defined at:
  5513 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;		None
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;		None
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5527 ;;      Params:         0       0       0       0       0       0       0
  5528 ;;      Locals:         0       0       0       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0
  5530 ;;      Totals:         0       0       0       0       0       0       0
  5531 ;;Total ram usage:        0 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    5
  5534 ;; This function calls:
  5535 ;;		_TMR2_StartTimer
  5536 ;; This function is called by:
  5537 ;;		_SYSTEM_Initialize
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text27
  5542  001DF6                     __ptext27:
  5543                           	opt stack 0
  5544  001DF6                     _TMR2_Initialize:
  5545                           	opt stack 24
  5546                           
  5547                           ;tmr2.c: 63: T2CON = 0x1A;
  5548                           
  5549                           ;incstack = 0
  5550  001DF6  0E1A               	movlw	26
  5551  001DF8  6EBA               	movwf	4026,c	;volatile
  5552                           
  5553                           ;tmr2.c: 66: PR2 = 0x7C;
  5554  001DFA  0E7C               	movlw	124
  5555  001DFC  6EBB               	movwf	4027,c	;volatile
  5556                           
  5557                           ;tmr2.c: 69: TMR2 = 0x00;
  5558  001DFE  0E00               	movlw	0
  5559  001E00  6EBC               	movwf	4028,c	;volatile
  5560                           
  5561                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  5562  001E02  929E               	bcf	3998,1,c	;volatile
  5563                           
  5564                           ;tmr2.c: 75: TMR2_StartTimer();
  5565  001E04  EC35  F00F         	call	_TMR2_StartTimer	;wreg free
  5566  001E08  0012               	return		;funcret
  5567  001E0A                     __end_of_TMR2_Initialize:
  5568                           	opt stack 0
  5569                           tosu	equ	0xFFF
  5570                           tosh	equ	0xFFE
  5571                           tosl	equ	0xFFD
  5572                           pclath	equ	0xFFA
  5573                           tblptru	equ	0xFF8
  5574                           tblptrh	equ	0xFF7
  5575                           tblptrl	equ	0xFF6
  5576                           tablat	equ	0xFF5
  5577                           prodh	equ	0xFF4
  5578                           prodl	equ	0xFF3
  5579                           intcon	equ	0xFF2
  5580                           postinc0	equ	0xFEE
  5581                           wreg	equ	0xFE8
  5582                           indf2	equ	0xFDF
  5583                           postinc2	equ	0xFDE
  5584                           postdec2	equ	0xFDD
  5585                           plusw2	equ	0xFDB
  5586                           fsr2h	equ	0xFDA
  5587                           fsr2l	equ	0xFD9
  5588                           status	equ	0xFD8
  5589                           
  5590 ;; *************** function _TMR2_StartTimer *****************
  5591 ;; Defined at:
  5592 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;		None
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;		None
  5597 ;; Return value:  Size  Location     Type
  5598 ;;		None               void
  5599 ;; Registers used:
  5600 ;;		None
  5601 ;; Tracked objects:
  5602 ;;		On entry : 0/0
  5603 ;;		On exit  : 0/0
  5604 ;;		Unchanged: 0/0
  5605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5606 ;;      Params:         0       0       0       0       0       0       0
  5607 ;;      Locals:         0       0       0       0       0       0       0
  5608 ;;      Temps:          0       0       0       0       0       0       0
  5609 ;;      Totals:         0       0       0       0       0       0       0
  5610 ;;Total ram usage:        0 bytes
  5611 ;; Hardware stack levels used:    1
  5612 ;; Hardware stack levels required when called:    4
  5613 ;; This function calls:
  5614 ;;		Nothing
  5615 ;; This function is called by:
  5616 ;;		_TMR2_Initialize
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text28
  5621  001E6A                     __ptext28:
  5622                           	opt stack 0
  5623  001E6A                     _TMR2_StartTimer:
  5624                           	opt stack 24
  5625                           
  5626                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  5627                           
  5628                           ;incstack = 0
  5629  001E6A  84BA               	bsf	4026,2,c	;volatile
  5630  001E6C  0012               	return		;funcret
  5631  001E6E                     __end_of_TMR2_StartTimer:
  5632                           	opt stack 0
  5633                           tosu	equ	0xFFF
  5634                           tosh	equ	0xFFE
  5635                           tosl	equ	0xFFD
  5636                           pclath	equ	0xFFA
  5637                           tblptru	equ	0xFF8
  5638                           tblptrh	equ	0xFF7
  5639                           tblptrl	equ	0xFF6
  5640                           tablat	equ	0xFF5
  5641                           prodh	equ	0xFF4
  5642                           prodl	equ	0xFF3
  5643                           intcon	equ	0xFF2
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           indf2	equ	0xFDF
  5647                           postinc2	equ	0xFDE
  5648                           postdec2	equ	0xFDD
  5649                           plusw2	equ	0xFDB
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function _PWM4_Initialize *****************
  5655 ;; Defined at:
  5656 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;		None
  5661 ;; Return value:  Size  Location     Type
  5662 ;;		None               void
  5663 ;; Registers used:
  5664 ;;		wreg, status,2
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5670 ;;      Params:         0       0       0       0       0       0       0
  5671 ;;      Locals:         0       0       0       0       0       0       0
  5672 ;;      Temps:          0       0       0       0       0       0       0
  5673 ;;      Totals:         0       0       0       0       0       0       0
  5674 ;;Total ram usage:        0 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; Hardware stack levels required when called:    4
  5677 ;; This function calls:
  5678 ;;		Nothing
  5679 ;; This function is called by:
  5680 ;;		_SYSTEM_Initialize
  5681 ;; This function uses a non-reentrant model
  5682 ;;
  5683                           
  5684                           	psect	text29
  5685  001D82                     __ptext29:
  5686                           	opt stack 0
  5687  001D82                     _PWM4_Initialize:
  5688                           	opt stack 25
  5689                           
  5690                           ;pwm4.c: 69: CCP4CON = 0x1C;
  5691                           
  5692                           ;incstack = 0
  5693  001D82  0E1C               	movlw	28
  5694  001D84  010F               	movlb	15	; () banked
  5695  001D86  6F57               	movwf	87,b	;volatile
  5696                           
  5697                           ;pwm4.c: 72: CCPR4L = 0x3E;
  5698  001D88  0E3E               	movlw	62
  5699  001D8A  010F               	movlb	15	; () banked
  5700  001D8C  6F58               	movwf	88,b	;volatile
  5701                           
  5702                           ;pwm4.c: 75: CCPR4H = 0x00;
  5703  001D8E  0E00               	movlw	0
  5704  001D90  010F               	movlb	15	; () banked
  5705  001D92  6F59               	movwf	89,b	;volatile
  5706                           
  5707                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5708  001D94  0EFC               	movlw	-4
  5709  001D96  010F               	movlb	15	; () banked
  5710  001D98  1748               	andwf	72,f,b	;volatile
  5711                           
  5712                           ; BSR set to: 15
  5713  001D9A  0012               	return		;funcret
  5714  001D9C                     __end_of_PWM4_Initialize:
  5715                           	opt stack 0
  5716                           tosu	equ	0xFFF
  5717                           tosh	equ	0xFFE
  5718                           tosl	equ	0xFFD
  5719                           pclath	equ	0xFFA
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           indf2	equ	0xFDF
  5730                           postinc2	equ	0xFDE
  5731                           postdec2	equ	0xFDD
  5732                           plusw2	equ	0xFDB
  5733                           fsr2h	equ	0xFDA
  5734                           fsr2l	equ	0xFD9
  5735                           status	equ	0xFD8
  5736                           
  5737 ;; *************** function _PIN_MANAGER_Initialize *****************
  5738 ;; Defined at:
  5739 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;		None
  5742 ;; Auto vars:     Size  Location     Type
  5743 ;;		None
  5744 ;; Return value:  Size  Location     Type
  5745 ;;		None               void
  5746 ;; Registers used:
  5747 ;;		wreg, status,2
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5753 ;;      Params:         0       0       0       0       0       0       0
  5754 ;;      Locals:         0       0       0       0       0       0       0
  5755 ;;      Temps:          0       0       0       0       0       0       0
  5756 ;;      Totals:         0       0       0       0       0       0       0
  5757 ;;Total ram usage:        0 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    4
  5760 ;; This function calls:
  5761 ;;		Nothing
  5762 ;; This function is called by:
  5763 ;;		_SYSTEM_Initialize
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text30
  5768  001686                     __ptext30:
  5769                           	opt stack 0
  5770  001686                     _PIN_MANAGER_Initialize:
  5771                           	opt stack 25
  5772                           
  5773                           ;pin_manager.c: 52: LATA = 0x00;
  5774                           
  5775                           ; BSR set to: 15
  5776                           ;incstack = 0
  5777  001686  0E00               	movlw	0
  5778  001688  6E89               	movwf	3977,c	;volatile
  5779                           
  5780                           ;pin_manager.c: 53: TRISA = 0xF7;
  5781  00168A  0EF7               	movlw	247
  5782  00168C  6E92               	movwf	3986,c	;volatile
  5783                           
  5784                           ;pin_manager.c: 54: ANSELA = 0x27;
  5785  00168E  0E27               	movlw	39
  5786  001690  010F               	movlb	15	; () banked
  5787  001692  6F38               	movwf	56,b	;volatile
  5788                           
  5789                           ;pin_manager.c: 56: LATB = 0x01;
  5790  001694  0E01               	movlw	1
  5791  001696  6E8A               	movwf	3978,c	;volatile
  5792                           
  5793                           ;pin_manager.c: 57: TRISB = 0xFE;
  5794  001698  0EFE               	movlw	254
  5795  00169A  6E93               	movwf	3987,c	;volatile
  5796                           
  5797                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5798  00169C  0E3E               	movlw	62
  5799  00169E  010F               	movlb	15	; () banked
  5800  0016A0  6F39               	movwf	57,b	;volatile
  5801                           
  5802                           ;pin_manager.c: 59: WPUB = 0x00;
  5803  0016A2  0E00               	movlw	0
  5804  0016A4  6E61               	movwf	3937,c	;volatile
  5805                           
  5806                           ;pin_manager.c: 61: LATC = 0x00;
  5807  0016A6  0E00               	movlw	0
  5808  0016A8  6E8B               	movwf	3979,c	;volatile
  5809                           
  5810                           ;pin_manager.c: 62: TRISC = 0xDF;
  5811  0016AA  0EDF               	movlw	223
  5812  0016AC  6E94               	movwf	3988,c	;volatile
  5813                           
  5814                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5815  0016AE  0E1C               	movlw	28
  5816  0016B0  010F               	movlb	15	; () banked
  5817  0016B2  6F3A               	movwf	58,b	;volatile
  5818                           
  5819                           ;pin_manager.c: 65: LATD = 0x00;
  5820  0016B4  0E00               	movlw	0
  5821  0016B6  6E8C               	movwf	3980,c	;volatile
  5822                           
  5823                           ;pin_manager.c: 66: TRISD = 0x0F;
  5824  0016B8  0E0F               	movlw	15
  5825  0016BA  6E95               	movwf	3989,c	;volatile
  5826                           
  5827                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5828  0016BC  0E0F               	movlw	15
  5829  0016BE  010F               	movlb	15	; () banked
  5830  0016C0  6F3B               	movwf	59,b	;volatile
  5831                           
  5832                           ;pin_manager.c: 69: LATE = 0x00;
  5833  0016C2  0E00               	movlw	0
  5834  0016C4  6E8D               	movwf	3981,c	;volatile
  5835                           
  5836                           ;pin_manager.c: 70: TRISE = 0x07;
  5837  0016C6  0E07               	movlw	7
  5838  0016C8  6E96               	movwf	3990,c	;volatile
  5839                           
  5840                           ;pin_manager.c: 71: ANSELE = 0x07;
  5841  0016CA  0E07               	movlw	7
  5842  0016CC  010F               	movlb	15	; () banked
  5843  0016CE  6F3C               	movwf	60,b	;volatile
  5844                           
  5845                           ; BSR set to: 15
  5846                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5847  0016D0  8C94               	bsf	3988,6,c	;volatile
  5848                           
  5849                           ; BSR set to: 15
  5850                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5851  0016D2  8E94               	bsf	3988,7,c	;volatile
  5852                           
  5853                           ; BSR set to: 15
  5854                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5855  0016D4  9A94               	bcf	3988,5,c	;volatile
  5856                           
  5857                           ; BSR set to: 15
  5858                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5859  0016D6  8A8B               	bsf	3979,5,c	;volatile
  5860                           
  5861                           ; BSR set to: 15
  5862                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5863  0016D8  8C8B               	bsf	3979,6,c	;volatile
  5864                           
  5865                           ; BSR set to: 15
  5866                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5867  0016DA  8E8B               	bsf	3979,7,c	;volatile
  5868                           
  5869                           ; BSR set to: 15
  5870                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5871  0016DC  010F               	movlb	15	; () banked
  5872  0016DE  9B3A               	bcf	58,5,b	;volatile
  5873                           
  5874                           ; BSR set to: 15
  5875                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5876  0016E0  010F               	movlb	15	; () banked
  5877  0016E2  9D3A               	bcf	58,6,b	;volatile
  5878                           
  5879                           ; BSR set to: 15
  5880                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5881  0016E4  010F               	movlb	15	; () banked
  5882  0016E6  9F3A               	bcf	58,7,b	;volatile
  5883                           
  5884                           ; BSR set to: 15
  5885                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5886  0016E8  8EF1               	bsf	intcon2,7,c	;volatile
  5887                           
  5888                           ; BSR set to: 15
  5889                           
  5890                           ; BSR set to: 15
  5891                           
  5892                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  5893  0016EA  9893               	bcf	3987,4,c	;volatile
  5894                           
  5895                           ; BSR set to: 15
  5896                           
  5897                           ; BSR set to: 15
  5898                           
  5899                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  5900                           
  5901                           ; BSR set to: 15
  5902  0016EC  9693               	bcf	3987,3,c	;volatile
  5903                           
  5904                           ; BSR set to: 15
  5905                           
  5906                           ; BSR set to: 15
  5907                           
  5908                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  5909                           
  5910                           ; BSR set to: 15
  5911  0016EE  9A93               	bcf	3987,5,c	;volatile
  5912                           
  5913                           ; BSR set to: 15
  5914                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  5915                           
  5916                           ; BSR set to: 15
  5917  0016F0  9295               	bcf	3989,1,c	;volatile
  5918                           
  5919                           ; BSR set to: 15
  5920                           
  5921                           ; BSR set to: 15
  5922                           
  5923                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  5924  0016F2  010F               	movlb	15	; () banked
  5925  0016F4  9739               	bcf	57,3,b	;volatile
  5926                           
  5927                           ; BSR set to: 15
  5928                           
  5929                           ; BSR set to: 15
  5930                           
  5931                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  5932                           
  5933                           ; BSR set to: 15
  5934  0016F6  010F               	movlb	15	; () banked
  5935  0016F8  9F3B               	bcf	59,7,b	;volatile
  5936                           
  5937                           ; BSR set to: 15
  5938                           
  5939                           ; BSR set to: 15
  5940                           
  5941                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  5942                           
  5943                           ; BSR set to: 15
  5944  0016FA  010F               	movlb	15	; () banked
  5945  0016FC  9939               	bcf	57,4,b	;volatile
  5946  0016FE  0012               	return	
  5947  001700                     __end_of_PIN_MANAGER_Initialize:
  5948                           	opt stack 0
  5949                           tosu	equ	0xFFF
  5950                           tosh	equ	0xFFE
  5951                           tosl	equ	0xFFD
  5952                           pclath	equ	0xFFA
  5953                           tblptru	equ	0xFF8
  5954                           tblptrh	equ	0xFF7
  5955                           tblptrl	equ	0xFF6
  5956                           tablat	equ	0xFF5
  5957                           prodh	equ	0xFF4
  5958                           prodl	equ	0xFF3
  5959                           intcon	equ	0xFF2
  5960                           intcon2	equ	0xFF1
  5961                           postinc0	equ	0xFEE
  5962                           wreg	equ	0xFE8
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           plusw2	equ	0xFDB
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _OSCILLATOR_Initialize *****************
  5972 ;; Defined at:
  5973 ;;		line 125 in file "mcc_generated_files/mcc.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;		None
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;		None
  5978 ;; Return value:  Size  Location     Type
  5979 ;;		None               void
  5980 ;; Registers used:
  5981 ;;		wreg, status,2
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5987 ;;      Params:         0       0       0       0       0       0       0
  5988 ;;      Locals:         0       0       0       0       0       0       0
  5989 ;;      Temps:          0       0       0       0       0       0       0
  5990 ;;      Totals:         0       0       0       0       0       0       0
  5991 ;;Total ram usage:        0 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:    4
  5994 ;; This function calls:
  5995 ;;		Nothing
  5996 ;; This function is called by:
  5997 ;;		_SYSTEM_Initialize
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text31
  6002  001E4C                     __ptext31:
  6003                           	opt stack 0
  6004  001E4C                     _OSCILLATOR_Initialize:
  6005                           	opt stack 25
  6006                           
  6007                           ;mcc.c: 127: OSCCON = 0x60;
  6008                           
  6009                           ; BSR set to: 15
  6010                           ;incstack = 0
  6011  001E4C  0E60               	movlw	96
  6012  001E4E  6ED3               	movwf	4051,c	;volatile
  6013                           
  6014                           ;mcc.c: 129: OSCCON2 = 0x04;
  6015  001E50  0E04               	movlw	4
  6016  001E52  6ED2               	movwf	4050,c	;volatile
  6017                           
  6018                           ;mcc.c: 131: OSCTUNE = 0x00;
  6019  001E54  0E00               	movlw	0
  6020  001E56  6E9B               	movwf	3995,c	;volatile
  6021  001E58  0012               	return		;funcret
  6022  001E5A                     __end_of_OSCILLATOR_Initialize:
  6023                           	opt stack 0
  6024                           tosu	equ	0xFFF
  6025                           tosh	equ	0xFFE
  6026                           tosl	equ	0xFFD
  6027                           pclath	equ	0xFFA
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon	equ	0xFF2
  6035                           intcon2	equ	0xFF1
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           indf2	equ	0xFDF
  6039                           postinc2	equ	0xFDE
  6040                           postdec2	equ	0xFDD
  6041                           plusw2	equ	0xFDB
  6042                           fsr2h	equ	0xFDA
  6043                           fsr2l	equ	0xFD9
  6044                           status	equ	0xFD8
  6045                           
  6046 ;; *************** function _INTERRUPT_Initialize *****************
  6047 ;; Defined at:
  6048 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;		None
  6053 ;; Return value:  Size  Location     Type
  6054 ;;		None               void
  6055 ;; Registers used:
  6056 ;;		None
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6062 ;;      Params:         0       0       0       0       0       0       0
  6063 ;;      Locals:         0       0       0       0       0       0       0
  6064 ;;      Temps:          0       0       0       0       0       0       0
  6065 ;;      Totals:         0       0       0       0       0       0       0
  6066 ;;Total ram usage:        0 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    4
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_SYSTEM_Initialize
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text32
  6077  001E5A                     __ptext32:
  6078                           	opt stack 0
  6079  001E5A                     _INTERRUPT_Initialize:
  6080                           	opt stack 25
  6081                           
  6082                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6083                           
  6084                           ;incstack = 0
  6085  001E5A  9ED0               	bcf	4048,7,c	;volatile
  6086                           
  6087                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6088  001E5C  9A9F               	bcf	3999,5,c	;volatile
  6089                           
  6090                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  6091  001E5E  989F               	bcf	3999,4,c	;volatile
  6092                           
  6093                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  6094  001E60  9C9F               	bcf	3999,6,c	;volatile
  6095  001E62  0012               	return		;funcret
  6096  001E64                     __end_of_INTERRUPT_Initialize:
  6097                           	opt stack 0
  6098                           tosu	equ	0xFFF
  6099                           tosh	equ	0xFFE
  6100                           tosl	equ	0xFFD
  6101                           pclath	equ	0xFFA
  6102                           tblptru	equ	0xFF8
  6103                           tblptrh	equ	0xFF7
  6104                           tblptrl	equ	0xFF6
  6105                           tablat	equ	0xFF5
  6106                           prodh	equ	0xFF4
  6107                           prodl	equ	0xFF3
  6108                           intcon	equ	0xFF2
  6109                           intcon2	equ	0xFF1
  6110                           postinc0	equ	0xFEE
  6111                           wreg	equ	0xFE8
  6112                           indf2	equ	0xFDF
  6113                           postinc2	equ	0xFDE
  6114                           postdec2	equ	0xFDD
  6115                           plusw2	equ	0xFDB
  6116                           fsr2h	equ	0xFDA
  6117                           fsr2l	equ	0xFD9
  6118                           status	equ	0xFD8
  6119                           
  6120 ;; *************** function _EUSART1_Initialize *****************
  6121 ;; Defined at:
  6122 ;;		line 21 in file "UART.c"
  6123 ;; Parameters:    Size  Location     Type
  6124 ;;		None
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;		None               void
  6129 ;; Registers used:
  6130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6136 ;;      Params:         0       0       0       0       0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0
  6139 ;;      Totals:         0       0       0       0       0       0       0
  6140 ;;Total ram usage:        0 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    6
  6143 ;; This function calls:
  6144 ;;		_UART_buff_init
  6145 ;; This function is called by:
  6146 ;;		_SYSTEM_Initialize
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text33
  6151  001B36                     __ptext33:
  6152                           	opt stack 0
  6153  001B36                     _EUSART1_Initialize:
  6154                           	opt stack 23
  6155                           
  6156                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  6157                           
  6158                           ;incstack = 0
  6159  001B36  9A9D               	bcf	3997,5,c	;volatile
  6160                           
  6161                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  6162  001B38  989D               	bcf	3997,4,c	;volatile
  6163                           
  6164                           ;UART.c: 29: BAUD1CON = 0x48;
  6165  001B3A  0E48               	movlw	72
  6166  001B3C  6EB8               	movwf	4024,c	;volatile
  6167                           
  6168                           ;UART.c: 32: RC1STA = 0x98;
  6169  001B3E  0E98               	movlw	152
  6170  001B40  6EAB               	movwf	4011,c	;volatile
  6171                           
  6172                           ;UART.c: 35: TX1STA = 0x26;
  6173  001B42  0E26               	movlw	38
  6174  001B44  6EAC               	movwf	4012,c	;volatile
  6175                           
  6176                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  6177  001B46  0E33               	movlw	51
  6178  001B48  6EAF               	movwf	4015,c	;volatile
  6179                           
  6180                           ;UART.c: 41: SPBRGH1 = 0x00;
  6181  001B4A  0E00               	movlw	0
  6182  001B4C  6EB0               	movwf	4016,c	;volatile
  6183                           
  6184                           ;UART.c: 44: TXREG1 = 0x00;
  6185  001B4E  0E00               	movlw	0
  6186  001B50  6EAD               	movwf	4013,c	;volatile
  6187                           
  6188                           ;UART.c: 47: RCREG1 = 0x00;
  6189  001B52  0E00               	movlw	0
  6190  001B54  6EAE               	movwf	4014,c	;volatile
  6191                           
  6192                           ;UART.c: 49: UART_buff_init(&input_buffer);
  6193  001B56  0E00               	movlw	low _input_buffer
  6194  001B58  6E23               	movwf	UART_buff_init@_this,c
  6195  001B5A  0E03               	movlw	high _input_buffer
  6196  001B5C  6E24               	movwf	UART_buff_init@_this+1,c
  6197  001B5E  EC86  F00E         	call	_UART_buff_init	;wreg free
  6198                           
  6199                           ;UART.c: 50: UART_buff_init(&output_buffer);
  6200  001B62  0E00               	movlw	low _output_buffer
  6201  001B64  6E23               	movwf	UART_buff_init@_this,c
  6202  001B66  0E04               	movlw	high _output_buffer
  6203  001B68  6E24               	movwf	UART_buff_init@_this+1,c
  6204  001B6A  EC86  F00E         	call	_UART_buff_init	;wreg free
  6205                           
  6206                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  6207  001B6E  8A9D               	bsf	3997,5,c	;volatile
  6208  001B70  0012               	return		;funcret
  6209  001B72                     __end_of_EUSART1_Initialize:
  6210                           	opt stack 0
  6211                           tosu	equ	0xFFF
  6212                           tosh	equ	0xFFE
  6213                           tosl	equ	0xFFD
  6214                           pclath	equ	0xFFA
  6215                           tblptru	equ	0xFF8
  6216                           tblptrh	equ	0xFF7
  6217                           tblptrl	equ	0xFF6
  6218                           tablat	equ	0xFF5
  6219                           prodh	equ	0xFF4
  6220                           prodl	equ	0xFF3
  6221                           intcon	equ	0xFF2
  6222                           intcon2	equ	0xFF1
  6223                           postinc0	equ	0xFEE
  6224                           wreg	equ	0xFE8
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _UART_buff_init *****************
  6234 ;; Defined at:
  6235 ;;		line 56 in file "UART.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  6238 ;;		 -> output_buffer(206), input_buffer(206), 
  6239 ;; Auto vars:     Size  Location     Type
  6240 ;;		None
  6241 ;; Return value:  Size  Location     Type
  6242 ;;		None               void
  6243 ;; Registers used:
  6244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6245 ;; Tracked objects:
  6246 ;;		On entry : 0/0
  6247 ;;		On exit  : 0/0
  6248 ;;		Unchanged: 0/0
  6249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6250 ;;      Params:         2       0       0       0       0       0       0
  6251 ;;      Locals:         0       0       0       0       0       0       0
  6252 ;;      Temps:          0       0       0       0       0       0       0
  6253 ;;      Totals:         2       0       0       0       0       0       0
  6254 ;;Total ram usage:        2 bytes
  6255 ;; Hardware stack levels used:    1
  6256 ;; Hardware stack levels required when called:    5
  6257 ;; This function calls:
  6258 ;;		_memset
  6259 ;; This function is called by:
  6260 ;;		_EUSART1_Initialize
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text34
  6265  001D0C                     __ptext34:
  6266                           	opt stack 0
  6267  001D0C                     _UART_buff_init:
  6268                           	opt stack 23
  6269                           
  6270                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  6271                           
  6272                           ;incstack = 0
  6273  001D0C  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  6274  001D10  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  6275  001D14  0E00               	movlw	0
  6276  001D16  6E1E               	movwf	memset@c+1,c
  6277  001D18  0E00               	movlw	0
  6278  001D1A  6E1D               	movwf	memset@c,c
  6279  001D1C  0E00               	movlw	0
  6280  001D1E  6E20               	movwf	memset@n+1,c
  6281  001D20  0ECE               	movlw	206
  6282  001D22  6E1F               	movwf	memset@n,c
  6283  001D24  EC1F  F00E         	call	_memset	;wreg free
  6284  001D28  0012               	return		;funcret
  6285  001D2A                     __end_of_UART_buff_init:
  6286                           	opt stack 0
  6287                           tosu	equ	0xFFF
  6288                           tosh	equ	0xFFE
  6289                           tosl	equ	0xFFD
  6290                           pclath	equ	0xFFA
  6291                           tblptru	equ	0xFF8
  6292                           tblptrh	equ	0xFF7
  6293                           tblptrl	equ	0xFF6
  6294                           tablat	equ	0xFF5
  6295                           prodh	equ	0xFF4
  6296                           prodl	equ	0xFF3
  6297                           intcon	equ	0xFF2
  6298                           intcon2	equ	0xFF1
  6299                           postinc0	equ	0xFEE
  6300                           wreg	equ	0xFE8
  6301                           indf2	equ	0xFDF
  6302                           postinc2	equ	0xFDE
  6303                           postdec2	equ	0xFDD
  6304                           plusw2	equ	0xFDB
  6305                           fsr2h	equ	0xFDA
  6306                           fsr2l	equ	0xFD9
  6307                           status	equ	0xFD8
  6308                           
  6309 ;; *************** function _memset *****************
  6310 ;; Defined at:
  6311 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  p1              2   26[COMRAM] PTR void 
  6314 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6315 ;;  c               2   28[COMRAM] int 
  6316 ;;  n               2   30[COMRAM] unsigned int 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  p               2   32[COMRAM] PTR unsigned char 
  6319 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6320 ;; Return value:  Size  Location     Type
  6321 ;;                  2   26[COMRAM] PTR void 
  6322 ;; Registers used:
  6323 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6324 ;; Tracked objects:
  6325 ;;		On entry : 0/0
  6326 ;;		On exit  : 0/0
  6327 ;;		Unchanged: 0/0
  6328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6329 ;;      Params:         6       0       0       0       0       0       0
  6330 ;;      Locals:         2       0       0       0       0       0       0
  6331 ;;      Temps:          0       0       0       0       0       0       0
  6332 ;;      Totals:         8       0       0       0       0       0       0
  6333 ;;Total ram usage:        8 bytes
  6334 ;; Hardware stack levels used:    1
  6335 ;; Hardware stack levels required when called:    4
  6336 ;; This function calls:
  6337 ;;		Nothing
  6338 ;; This function is called by:
  6339 ;;		_FastTransfer_buffer_flush
  6340 ;;		_UART_buff_init
  6341 ;;		_UART_buff_flush
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text35
  6346  001C3E                     __ptext35:
  6347                           	opt stack 0
  6348  001C3E                     _memset:
  6349                           	opt stack 22
  6350                           
  6351                           ;incstack = 0
  6352  001C3E  C01B  F021         	movff	memset@p1,memset@p
  6353  001C42  C01C  F022         	movff	memset@p1+1,memset@p+1
  6354  001C46  D008               	goto	l3732
  6355  001C48                     l3728:
  6356  001C48  C021  FFD9         	movff	memset@p,fsr2l
  6357  001C4C  C022  FFDA         	movff	memset@p+1,fsr2h
  6358  001C50  C01D  FFDF         	movff	memset@c,indf2
  6359  001C54  4A21               	infsnz	memset@p,f,c
  6360  001C56  2A22               	incf	memset@p+1,f,c
  6361  001C58                     l3732:
  6362  001C58  061F               	decf	memset@n,f,c
  6363  001C5A  A0D8               	btfss	status,0,c
  6364  001C5C  0620               	decf	memset@n+1,f,c
  6365  001C5E  281F               	incf	memset@n,w,c
  6366  001C60  E1F3               	bnz	l3728
  6367  001C62  2820               	incf	memset@n+1,w,c
  6368  001C64  B4D8               	btfsc	status,2,c
  6369  001C66  0012               	return	
  6370  001C68  D7EF               	goto	l3728
  6371  001C6A                     __end_of_memset:
  6372                           	opt stack 0
  6373                           tosu	equ	0xFFF
  6374                           tosh	equ	0xFFE
  6375                           tosl	equ	0xFFD
  6376                           pclath	equ	0xFFA
  6377                           tblptru	equ	0xFF8
  6378                           tblptrh	equ	0xFF7
  6379                           tblptrl	equ	0xFF6
  6380                           tablat	equ	0xFF5
  6381                           prodh	equ	0xFF4
  6382                           prodl	equ	0xFF3
  6383                           intcon	equ	0xFF2
  6384                           intcon2	equ	0xFF1
  6385                           postinc0	equ	0xFEE
  6386                           wreg	equ	0xFE8
  6387                           indf2	equ	0xFDF
  6388                           postinc2	equ	0xFDE
  6389                           postdec2	equ	0xFDD
  6390                           plusw2	equ	0xFDB
  6391                           fsr2h	equ	0xFDA
  6392                           fsr2l	equ	0xFD9
  6393                           status	equ	0xFD8
  6394                           
  6395 ;; *************** function _ADC_Initialize *****************
  6396 ;; Defined at:
  6397 ;;		line 59 in file "mcc_generated_files/adc.c"
  6398 ;; Parameters:    Size  Location     Type
  6399 ;;		None
  6400 ;; Auto vars:     Size  Location     Type
  6401 ;;		None
  6402 ;; Return value:  Size  Location     Type
  6403 ;;		None               void
  6404 ;; Registers used:
  6405 ;;		wreg, status,2
  6406 ;; Tracked objects:
  6407 ;;		On entry : 0/0
  6408 ;;		On exit  : 0/0
  6409 ;;		Unchanged: 0/0
  6410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6411 ;;      Params:         0       0       0       0       0       0       0
  6412 ;;      Locals:         0       0       0       0       0       0       0
  6413 ;;      Temps:          0       0       0       0       0       0       0
  6414 ;;      Totals:         0       0       0       0       0       0       0
  6415 ;;Total ram usage:        0 bytes
  6416 ;; Hardware stack levels used:    1
  6417 ;; Hardware stack levels required when called:    4
  6418 ;; This function calls:
  6419 ;;		Nothing
  6420 ;; This function is called by:
  6421 ;;		_SYSTEM_Initialize
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text36
  6426  001D9C                     __ptext36:
  6427                           	opt stack 0
  6428  001D9C                     _ADC_Initialize:
  6429                           	opt stack 25
  6430                           
  6431                           ;adc.c: 64: ADCON0 = 0x01;
  6432                           
  6433                           ;incstack = 0
  6434  001D9C  0E01               	movlw	1
  6435  001D9E  6EC2               	movwf	4034,c	;volatile
  6436                           
  6437                           ;adc.c: 67: ADCON1 = 0x80;
  6438  001DA0  0E80               	movlw	128
  6439  001DA2  6EC1               	movwf	4033,c	;volatile
  6440                           
  6441                           ;adc.c: 70: ADCON2 = 0x12;
  6442  001DA4  0E12               	movlw	18
  6443  001DA6  6EC0               	movwf	4032,c	;volatile
  6444                           
  6445                           ;adc.c: 73: ADRESL = 0x00;
  6446  001DA8  0E00               	movlw	0
  6447  001DAA  6EC3               	movwf	4035,c	;volatile
  6448                           
  6449                           ;adc.c: 76: ADRESH = 0x00;
  6450  001DAC  0E00               	movlw	0
  6451  001DAE  6EC4               	movwf	4036,c	;volatile
  6452                           
  6453                           ;adc.c: 79: PIE1bits.ADIE = 1;
  6454  001DB0  8C9D               	bsf	3997,6,c	;volatile
  6455  001DB2  0012               	return		;funcret
  6456  001DB4                     __end_of_ADC_Initialize:
  6457                           	opt stack 0
  6458                           tosu	equ	0xFFF
  6459                           tosh	equ	0xFFE
  6460                           tosl	equ	0xFFD
  6461                           pclath	equ	0xFFA
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon2	equ	0xFF1
  6470                           postinc0	equ	0xFEE
  6471                           wreg	equ	0xFE8
  6472                           indf2	equ	0xFDF
  6473                           postinc2	equ	0xFDE
  6474                           postdec2	equ	0xFDD
  6475                           plusw2	equ	0xFDB
  6476                           fsr2h	equ	0xFDA
  6477                           fsr2l	equ	0xFD9
  6478                           status	equ	0xFD8
  6479                           
  6480 ;; *************** function _PDUStartup *****************
  6481 ;; Defined at:
  6482 ;;		line 17 in file "PDU.c"
  6483 ;; Parameters:    Size  Location     Type
  6484 ;;		None
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;		None
  6487 ;; Return value:  Size  Location     Type
  6488 ;;		None               void
  6489 ;; Registers used:
  6490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6491 ;; Tracked objects:
  6492 ;;		On entry : 0/0
  6493 ;;		On exit  : 0/0
  6494 ;;		Unchanged: 0/0
  6495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6496 ;;      Params:         0       0       0       0       0       0       0
  6497 ;;      Locals:         0       0       0       0       0       0       0
  6498 ;;      Temps:          0       0       0       0       0       0       0
  6499 ;;      Totals:         0       0       0       0       0       0       0
  6500 ;;Total ram usage:        0 bytes
  6501 ;; Hardware stack levels used:    1
  6502 ;; Hardware stack levels required when called:    8
  6503 ;; This function calls:
  6504 ;;		_ComputeStorageData
  6505 ;;		_EnableSlavePower
  6506 ;;		_StartUp595
  6507 ;;		_Update
  6508 ;; This function is called by:
  6509 ;;		_main
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           	psect	text37
  6514  0019C2                     __ptext37:
  6515                           	opt stack 0
  6516  0019C2                     _PDUStartup:
  6517                           	opt stack 22
  6518                           
  6519                           ;PDU.c: 20: StartUp595();
  6520                           
  6521                           ;incstack = 0
  6522  0019C2  EC59  F00C         	call	_StartUp595	;wreg free
  6523                           
  6524                           ;PDU.c: 22: EnableSlavePower(SAS, OFF);
  6525  0019C6  0E00               	movlw	0
  6526  0019C8  6E26               	movwf	EnableSlavePower@onof+1,c
  6527  0019CA  0E00               	movlw	0
  6528  0019CC  6E25               	movwf	EnableSlavePower@onof,c
  6529  0019CE  0E03               	movlw	3
  6530  0019D0  EC47  F007         	call	_EnableSlavePower
  6531                           
  6532                           ;PDU.c: 23: EnableSlavePower(DDS, OFF);
  6533  0019D4  0E00               	movlw	0
  6534  0019D6  6E26               	movwf	EnableSlavePower@onof+1,c
  6535  0019D8  0E00               	movlw	0
  6536  0019DA  6E25               	movwf	EnableSlavePower@onof,c
  6537  0019DC  0E01               	movlw	1
  6538  0019DE  EC47  F007         	call	_EnableSlavePower
  6539                           
  6540                           ;PDU.c: 24: EnableSlavePower(MCS, OFF);
  6541  0019E2  0E00               	movlw	0
  6542  0019E4  6E26               	movwf	EnableSlavePower@onof+1,c
  6543  0019E6  0E00               	movlw	0
  6544  0019E8  6E25               	movwf	EnableSlavePower@onof,c
  6545  0019EA  0E02               	movlw	2
  6546  0019EC  EC47  F007         	call	_EnableSlavePower
  6547                           
  6548                           ;PDU.c: 25: EnableSlavePower(BMM, OFF);
  6549  0019F0  0E00               	movlw	0
  6550  0019F2  6E26               	movwf	EnableSlavePower@onof+1,c
  6551  0019F4  0E00               	movlw	0
  6552  0019F6  6E25               	movwf	EnableSlavePower@onof,c
  6553  0019F8  0E04               	movlw	4
  6554  0019FA  EC47  F007         	call	_EnableSlavePower
  6555                           
  6556                           ;PDU.c: 26: EnableSlavePower(TSS, OFF);
  6557  0019FE  0E00               	movlw	0
  6558  001A00  6E26               	movwf	EnableSlavePower@onof+1,c
  6559  001A02  0E00               	movlw	0
  6560  001A04  6E25               	movwf	EnableSlavePower@onof,c
  6561  001A06  0E05               	movlw	5
  6562  001A08  EC47  F007         	call	_EnableSlavePower
  6563                           
  6564                           ;PDU.c: 27: Update();
  6565  001A0C  EC32  F00F         	call	_Update	;wreg free
  6566                           
  6567                           ;PDU.c: 29: ComputeStorageData();
  6568  001A10  EC2A  F008         	call	_ComputeStorageData	;wreg free
  6569  001A14  0012               	return		;funcret
  6570  001A16                     __end_of_PDUStartup:
  6571                           	opt stack 0
  6572                           tosu	equ	0xFFF
  6573                           tosh	equ	0xFFE
  6574                           tosl	equ	0xFFD
  6575                           pclath	equ	0xFFA
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           intcon2	equ	0xFF1
  6584                           postinc0	equ	0xFEE
  6585                           wreg	equ	0xFE8
  6586                           indf2	equ	0xFDF
  6587                           postinc2	equ	0xFDE
  6588                           postdec2	equ	0xFDD
  6589                           plusw2	equ	0xFDB
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function _Update *****************
  6595 ;; Defined at:
  6596 ;;		line 145 in file "PDU.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;		None
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;		None
  6601 ;; Return value:  Size  Location     Type
  6602 ;;		None               void
  6603 ;; Registers used:
  6604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6605 ;; Tracked objects:
  6606 ;;		On entry : 0/0
  6607 ;;		On exit  : 0/0
  6608 ;;		Unchanged: 0/0
  6609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6610 ;;      Params:         0       0       0       0       0       0       0
  6611 ;;      Locals:         0       0       0       0       0       0       0
  6612 ;;      Temps:          0       0       0       0       0       0       0
  6613 ;;      Totals:         0       0       0       0       0       0       0
  6614 ;;Total ram usage:        0 bytes
  6615 ;; Hardware stack levels used:    1
  6616 ;; Hardware stack levels required when called:    6
  6617 ;; This function calls:
  6618 ;;		_writeRegisters
  6619 ;; This function is called by:
  6620 ;;		_processPowerRequest
  6621 ;;		_PDUStartup
  6622 ;;		_ReadCurrent
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text38
  6627  001E64                     __ptext38:
  6628                           	opt stack 0
  6629  001E64                     _Update:
  6630                           	opt stack 22
  6631                           
  6632                           ;PDU.c: 146: writeRegisters();
  6633                           
  6634                           ;incstack = 0
  6635  001E64  EC04  F00B         	call	_writeRegisters	;wreg free
  6636  001E68  0012               	return		;funcret
  6637  001E6A                     __end_of_Update:
  6638                           	opt stack 0
  6639                           tosu	equ	0xFFF
  6640                           tosh	equ	0xFFE
  6641                           tosl	equ	0xFFD
  6642                           pclath	equ	0xFFA
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           postinc0	equ	0xFEE
  6652                           wreg	equ	0xFE8
  6653                           indf2	equ	0xFDF
  6654                           postinc2	equ	0xFDE
  6655                           postdec2	equ	0xFDD
  6656                           plusw2	equ	0xFDB
  6657                           fsr2h	equ	0xFDA
  6658                           fsr2l	equ	0xFD9
  6659                           status	equ	0xFD8
  6660                           
  6661 ;; *************** function _StartUp595 *****************
  6662 ;; Defined at:
  6663 ;;		line 10 in file "Shift595.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;		None
  6666 ;; Auto vars:     Size  Location     Type
  6667 ;;		None
  6668 ;; Return value:  Size  Location     Type
  6669 ;;		None               void
  6670 ;; Registers used:
  6671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/0
  6674 ;;		On exit  : 0/0
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6677 ;;      Params:         0       0       0       0       0       0       0
  6678 ;;      Locals:         0       0       0       0       0       0       0
  6679 ;;      Temps:          0       0       0       0       0       0       0
  6680 ;;      Totals:         0       0       0       0       0       0       0
  6681 ;;Total ram usage:        0 bytes
  6682 ;; Hardware stack levels used:    1
  6683 ;; Hardware stack levels required when called:    7
  6684 ;; This function calls:
  6685 ;;		_Clear595
  6686 ;;		_Delay
  6687 ;; This function is called by:
  6688 ;;		_PDUStartup
  6689 ;; This function uses a non-reentrant model
  6690 ;;
  6691                           
  6692                           	psect	text39
  6693  0018B2                     __ptext39:
  6694                           	opt stack 0
  6695  0018B2                     _StartUp595:
  6696                           	opt stack 22
  6697                           
  6698                           ;incstack = 0
  6699                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6700  0018B2  8A8C               	bsf	3980,5,c	;volatile
  6701                           
  6702                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6703  0018B4  808A               	bsf	3978,0,c	;volatile
  6704                           
  6705                           ;Shift595.c: 15: Delay(2);
  6706  0018B6  0E02               	movlw	2
  6707  0018B8  6E1B               	movwf	Delay@wait,c
  6708  0018BA  0E00               	movlw	0
  6709  0018BC  6E1C               	movwf	Delay@wait+1,c
  6710  0018BE  0E00               	movlw	0
  6711  0018C0  6E1D               	movwf	Delay@wait+2,c
  6712  0018C2  0E00               	movlw	0
  6713  0018C4  6E1E               	movwf	Delay@wait+3,c
  6714  0018C6  EC57  F00D         	call	_Delay	;wreg free
  6715                           
  6716                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6717  0018CA  9A8C               	bcf	3980,5,c	;volatile
  6718                           
  6719                           ;Shift595.c: 17: Delay(2);
  6720  0018CC  0E02               	movlw	2
  6721  0018CE  6E1B               	movwf	Delay@wait,c
  6722  0018D0  0E00               	movlw	0
  6723  0018D2  6E1C               	movwf	Delay@wait+1,c
  6724  0018D4  0E00               	movlw	0
  6725  0018D6  6E1D               	movwf	Delay@wait+2,c
  6726  0018D8  0E00               	movlw	0
  6727  0018DA  6E1E               	movwf	Delay@wait+3,c
  6728  0018DC  EC57  F00D         	call	_Delay	;wreg free
  6729                           
  6730                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6731  0018E0  908A               	bcf	3978,0,c	;volatile
  6732                           
  6733                           ;Shift595.c: 19: Delay(2);
  6734  0018E2  0E02               	movlw	2
  6735  0018E4  6E1B               	movwf	Delay@wait,c
  6736  0018E6  0E00               	movlw	0
  6737  0018E8  6E1C               	movwf	Delay@wait+1,c
  6738  0018EA  0E00               	movlw	0
  6739  0018EC  6E1D               	movwf	Delay@wait+2,c
  6740  0018EE  0E00               	movlw	0
  6741  0018F0  6E1E               	movwf	Delay@wait+3,c
  6742  0018F2  EC57  F00D         	call	_Delay	;wreg free
  6743                           
  6744                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6745  0018F6  8A8C               	bsf	3980,5,c	;volatile
  6746                           
  6747                           ;Shift595.c: 21: Delay(2);
  6748  0018F8  0E02               	movlw	2
  6749  0018FA  6E1B               	movwf	Delay@wait,c
  6750  0018FC  0E00               	movlw	0
  6751  0018FE  6E1C               	movwf	Delay@wait+1,c
  6752  001900  0E00               	movlw	0
  6753  001902  6E1D               	movwf	Delay@wait+2,c
  6754  001904  0E00               	movlw	0
  6755  001906  6E1E               	movwf	Delay@wait+3,c
  6756  001908  EC57  F00D         	call	_Delay	;wreg free
  6757                           
  6758                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6759  00190C  808A               	bsf	3978,0,c	;volatile
  6760                           
  6761                           ;Shift595.c: 24: Clear595();
  6762  00190E  EC7C  F00D         	call	_Clear595	;wreg free
  6763  001912  0012               	return		;funcret
  6764  001914                     __end_of_StartUp595:
  6765                           	opt stack 0
  6766                           tosu	equ	0xFFF
  6767                           tosh	equ	0xFFE
  6768                           tosl	equ	0xFFD
  6769                           pclath	equ	0xFFA
  6770                           tblptru	equ	0xFF8
  6771                           tblptrh	equ	0xFF7
  6772                           tblptrl	equ	0xFF6
  6773                           tablat	equ	0xFF5
  6774                           prodh	equ	0xFF4
  6775                           prodl	equ	0xFF3
  6776                           intcon	equ	0xFF2
  6777                           intcon2	equ	0xFF1
  6778                           postinc0	equ	0xFEE
  6779                           wreg	equ	0xFE8
  6780                           indf2	equ	0xFDF
  6781                           postinc2	equ	0xFDE
  6782                           postdec2	equ	0xFDD
  6783                           plusw2	equ	0xFDB
  6784                           fsr2h	equ	0xFDA
  6785                           fsr2l	equ	0xFD9
  6786                           status	equ	0xFD8
  6787                           
  6788 ;; *************** function _Clear595 *****************
  6789 ;; Defined at:
  6790 ;;		line 39 in file "Shift595.c"
  6791 ;; Parameters:    Size  Location     Type
  6792 ;;		None
  6793 ;; Auto vars:     Size  Location     Type
  6794 ;;  i               2    0[BANK0 ] int 
  6795 ;; Return value:  Size  Location     Type
  6796 ;;		None               void
  6797 ;; Registers used:
  6798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6799 ;; Tracked objects:
  6800 ;;		On entry : 0/0
  6801 ;;		On exit  : 0/0
  6802 ;;		Unchanged: 0/0
  6803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6804 ;;      Params:         0       0       0       0       0       0       0
  6805 ;;      Locals:         0       2       0       0       0       0       0
  6806 ;;      Temps:          0       0       0       0       0       0       0
  6807 ;;      Totals:         0       2       0       0       0       0       0
  6808 ;;Total ram usage:        2 bytes
  6809 ;; Hardware stack levels used:    1
  6810 ;; Hardware stack levels required when called:    6
  6811 ;; This function calls:
  6812 ;;		_writeRegisters
  6813 ;; This function is called by:
  6814 ;;		_StartUp595
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text40
  6819  001AF8                     __ptext40:
  6820                           	opt stack 0
  6821  001AF8                     _Clear595:
  6822                           	opt stack 22
  6823                           
  6824                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6825                           
  6826                           ;incstack = 0
  6827  001AF8  0E00               	movlw	0
  6828  001AFA  0100               	movlb	0	; () banked
  6829  001AFC  6FD6               	movwf	(Clear595@i+1)& (0+255),b
  6830  001AFE  0E17               	movlw	23
  6831  001B00  6FD5               	movwf	Clear595@i& (0+255),b
  6832  001B02                     l4006:
  6833                           
  6834                           ; BSR set to: 0
  6835  001B02  0100               	movlb	0	; () banked
  6836  001B04  BFD6               	btfsc	(Clear595@i+1)& (0+255),7,b
  6837  001B06  D014               	goto	l4016
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;Shift595.c: 41: registers[i] = 0;
  6841                           
  6842                           ; BSR set to: 0
  6843                           
  6844                           ; BSR set to: 0
  6845  001B08  90D8               	bcf	status,0,c
  6846  001B0A  0100               	movlb	0	; () banked
  6847  001B0C  35D5               	rlcf	Clear595@i& (0+255),w,b
  6848  001B0E  6ED9               	movwf	fsr2l,c
  6849  001B10  0100               	movlb	0	; () banked
  6850  001B12  35D6               	rlcf	(Clear595@i+1)& (0+255),w,b
  6851  001B14  6EDA               	movwf	fsr2h,c
  6852  001B16  0E00               	movlw	low _registers
  6853  001B18  26D9               	addwf	fsr2l,f,c
  6854  001B1A  0E01               	movlw	high _registers
  6855  001B1C  22DA               	addwfc	fsr2h,f,c
  6856  001B1E  0E00               	movlw	0
  6857  001B20  6EDE               	movwf	postinc2,c
  6858  001B22  0E00               	movlw	0
  6859  001B24  6EDD               	movwf	postdec2,c
  6860                           
  6861                           ; BSR set to: 0
  6862  001B26  0100               	movlb	0	; () banked
  6863  001B28  07D5               	decf	Clear595@i& (0+255),f,b
  6864  001B2A  A0D8               	btfss	status,0,c
  6865  001B2C  07D6               	decf	(Clear595@i+1)& (0+255),f,b
  6866  001B2E  D7E9               	goto	l4006
  6867  001B30                     l4016:
  6868                           
  6869                           ; BSR set to: 0
  6870                           ;Shift595.c: 42: }
  6871                           ;Shift595.c: 44: writeRegisters();
  6872  001B30  EC04  F00B         	call	_writeRegisters	;wreg free
  6873  001B34  0012               	return		;funcret
  6874  001B36                     __end_of_Clear595:
  6875                           	opt stack 0
  6876                           tosu	equ	0xFFF
  6877                           tosh	equ	0xFFE
  6878                           tosl	equ	0xFFD
  6879                           pclath	equ	0xFFA
  6880                           tblptru	equ	0xFF8
  6881                           tblptrh	equ	0xFF7
  6882                           tblptrl	equ	0xFF6
  6883                           tablat	equ	0xFF5
  6884                           prodh	equ	0xFF4
  6885                           prodl	equ	0xFF3
  6886                           intcon	equ	0xFF2
  6887                           intcon2	equ	0xFF1
  6888                           postinc0	equ	0xFEE
  6889                           wreg	equ	0xFE8
  6890                           indf2	equ	0xFDF
  6891                           postinc2	equ	0xFDE
  6892                           postdec2	equ	0xFDD
  6893                           plusw2	equ	0xFDB
  6894                           fsr2h	equ	0xFDA
  6895                           fsr2l	equ	0xFD9
  6896                           status	equ	0xFD8
  6897                           
  6898 ;; *************** function _writeRegisters *****************
  6899 ;; Defined at:
  6900 ;;		line 50 in file "Shift595.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;		None
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;  i               2   37[COMRAM] int 
  6905 ;;  val             2   35[COMRAM] int 
  6906 ;; Return value:  Size  Location     Type
  6907 ;;		None               void
  6908 ;; Registers used:
  6909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6910 ;; Tracked objects:
  6911 ;;		On entry : 0/0
  6912 ;;		On exit  : 0/0
  6913 ;;		Unchanged: 0/0
  6914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6915 ;;      Params:         0       0       0       0       0       0       0
  6916 ;;      Locals:         4       0       0       0       0       0       0
  6917 ;;      Temps:          0       0       0       0       0       0       0
  6918 ;;      Totals:         4       0       0       0       0       0       0
  6919 ;;Total ram usage:        4 bytes
  6920 ;; Hardware stack levels used:    1
  6921 ;; Hardware stack levels required when called:    5
  6922 ;; This function calls:
  6923 ;;		_Delay
  6924 ;; This function is called by:
  6925 ;;		_Update
  6926 ;;		_Clear595
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text41
  6931  001608                     __ptext41:
  6932                           	opt stack 0
  6933  001608                     _writeRegisters:
  6934                           	opt stack 22
  6935                           
  6936                           ;Shift595.c: 51: int val = 0;
  6937                           
  6938                           ;incstack = 0
  6939  001608  0E00               	movlw	0
  6940  00160A  6E25               	movwf	writeRegisters@val+1,c
  6941  00160C  0E00               	movlw	0
  6942  00160E  6E24               	movwf	writeRegisters@val,c
  6943                           
  6944                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6945  001610  0E00               	movlw	0
  6946  001612  6E27               	movwf	writeRegisters@i+1,c
  6947  001614  0E17               	movlw	23
  6948  001616  6E26               	movwf	writeRegisters@i,c
  6949  001618                     l3858:
  6950  001618  BE27               	btfsc	writeRegisters@i+1,7,c
  6951  00161A  D01D               	goto	l736
  6952                           
  6953                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6954  00161C  9E8C               	bcf	3980,7,c	;volatile
  6955                           
  6956                           ;Shift595.c: 55: val = registers[i];
  6957  00161E  90D8               	bcf	status,0,c
  6958  001620  3426               	rlcf	writeRegisters@i,w,c
  6959  001622  6ED9               	movwf	fsr2l,c
  6960  001624  3427               	rlcf	writeRegisters@i+1,w,c
  6961  001626  6EDA               	movwf	fsr2h,c
  6962  001628  0E00               	movlw	low _registers
  6963  00162A  26D9               	addwf	fsr2l,f,c
  6964  00162C  0E01               	movlw	high _registers
  6965  00162E  22DA               	addwfc	fsr2h,f,c
  6966  001630  CFDE F024          	movff	postinc2,writeRegisters@val
  6967  001634  CFDD F025          	movff	postdec2,writeRegisters@val+1
  6968                           
  6969                           ;Shift595.c: 56: if (val == 1) {
  6970  001638  0424               	decf	writeRegisters@val,w,c
  6971  00163A  1025               	iorwf	writeRegisters@val+1,w,c
  6972  00163C  A4D8               	btfss	status,2,c
  6973  00163E  D002               	goto	l3866
  6974                           
  6975                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6976  001640  888C               	bsf	3980,4,c	;volatile
  6977                           
  6978                           ;Shift595.c: 58: } else if (val == 0) {
  6979  001642  D004               	goto	l734
  6980  001644                     l3866:
  6981  001644  5024               	movf	writeRegisters@val,w,c
  6982  001646  1025               	iorwf	writeRegisters@val+1,w,c
  6983  001648  B4D8               	btfsc	status,2,c
  6984                           
  6985                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6986  00164A  988C               	bcf	3980,4,c	;volatile
  6987  00164C                     l734:
  6988  00164C  8E8C               	bsf	3980,7,c	;volatile
  6989  00164E  0626               	decf	writeRegisters@i,f,c
  6990  001650  A0D8               	btfss	status,0,c
  6991  001652  0627               	decf	writeRegisters@i+1,f,c
  6992  001654  D7E1               	goto	l3858
  6993  001656                     l736:
  6994  001656  9E8C               	bcf	3980,7,c	;volatile
  6995                           
  6996                           ;Shift595.c: 67: Delay(1);
  6997  001658  0E01               	movlw	1
  6998  00165A  6E1B               	movwf	Delay@wait,c
  6999  00165C  0E00               	movlw	0
  7000  00165E  6E1C               	movwf	Delay@wait+1,c
  7001  001660  0E00               	movlw	0
  7002  001662  6E1D               	movwf	Delay@wait+2,c
  7003  001664  0E00               	movlw	0
  7004  001666  6E1E               	movwf	Delay@wait+3,c
  7005  001668  EC57  F00D         	call	_Delay	;wreg free
  7006                           
  7007                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  7008  00166C  8C8C               	bsf	3980,6,c	;volatile
  7009                           
  7010                           ;Shift595.c: 69: Delay(1);
  7011  00166E  0E01               	movlw	1
  7012  001670  6E1B               	movwf	Delay@wait,c
  7013  001672  0E00               	movlw	0
  7014  001674  6E1C               	movwf	Delay@wait+1,c
  7015  001676  0E00               	movlw	0
  7016  001678  6E1D               	movwf	Delay@wait+2,c
  7017  00167A  0E00               	movlw	0
  7018  00167C  6E1E               	movwf	Delay@wait+3,c
  7019  00167E  EC57  F00D         	call	_Delay	;wreg free
  7020                           
  7021                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  7022  001682  9C8C               	bcf	3980,6,c	;volatile
  7023  001684  0012               	return	
  7024  001686                     __end_of_writeRegisters:
  7025                           	opt stack 0
  7026                           tosu	equ	0xFFF
  7027                           tosh	equ	0xFFE
  7028                           tosl	equ	0xFFD
  7029                           pclath	equ	0xFFA
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           intcon	equ	0xFF2
  7037                           intcon2	equ	0xFF1
  7038                           postinc0	equ	0xFEE
  7039                           wreg	equ	0xFE8
  7040                           indf2	equ	0xFDF
  7041                           postinc2	equ	0xFDE
  7042                           postdec2	equ	0xFDD
  7043                           plusw2	equ	0xFDB
  7044                           fsr2h	equ	0xFDA
  7045                           fsr2l	equ	0xFD9
  7046                           status	equ	0xFD8
  7047                           
  7048 ;; *************** function _EnableSlavePower *****************
  7049 ;; Defined at:
  7050 ;;		line 34 in file "PDU.c"
  7051 ;; Parameters:    Size  Location     Type
  7052 ;;  slave           1    wreg     enum E6
  7053 ;;  onof            2   36[COMRAM] int 
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  slave           1   38[COMRAM] enum E6
  7056 ;; Return value:  Size  Location     Type
  7057 ;;		None               void
  7058 ;; Registers used:
  7059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7060 ;; Tracked objects:
  7061 ;;		On entry : 0/0
  7062 ;;		On exit  : 0/0
  7063 ;;		Unchanged: 0/0
  7064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7065 ;;      Params:         2       0       0       0       0       0       0
  7066 ;;      Locals:         1       0       0       0       0       0       0
  7067 ;;      Temps:          0       0       0       0       0       0       0
  7068 ;;      Totals:         3       0       0       0       0       0       0
  7069 ;;Total ram usage:        3 bytes
  7070 ;; Hardware stack levels used:    1
  7071 ;; Hardware stack levels required when called:    5
  7072 ;; This function calls:
  7073 ;;		_SetPin595
  7074 ;; This function is called by:
  7075 ;;		_processPowerRequest
  7076 ;;		_PDUStartup
  7077 ;;		_FuseSystem
  7078 ;; This function uses a non-reentrant model
  7079 ;;
  7080                           
  7081                           	psect	text42
  7082  000E8E                     __ptext42:
  7083                           	opt stack 0
  7084  000E8E                     _EnableSlavePower:
  7085                           	opt stack 23
  7086                           
  7087                           ;incstack = 0
  7088                           ;EnableSlavePower@slave stored from wreg
  7089  000E8E  6E27               	movwf	EnableSlavePower@slave,c
  7090                           
  7091                           ;PDU.c: 35: switch (slave) {
  7092  000E90  D05C               	goto	l3936
  7093  000E92                     l3920:
  7094                           
  7095                           ;PDU.c: 37: SetPin595(2, 6, onof);
  7096  000E92  0E00               	movlw	0
  7097  000E94  6E1C               	movwf	SetPin595@Reg+1,c
  7098  000E96  0E02               	movlw	2
  7099  000E98  6E1B               	movwf	SetPin595@Reg,c
  7100  000E9A  0E00               	movlw	0
  7101  000E9C  6E1E               	movwf	SetPin595@pin+1,c
  7102  000E9E  0E06               	movlw	6
  7103  000EA0  6E1D               	movwf	SetPin595@pin,c
  7104  000EA2  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7105  000EA6  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7106  000EAA  EC0B  F00D         	call	_SetPin595	;wreg free
  7107                           
  7108                           ;PDU.c: 38: break;
  7109  000EAE  0012               	return	
  7110  000EB0                     l3922:
  7111                           
  7112                           ;PDU.c: 40: SetPin595(1, 1, onof);
  7113  000EB0  0E00               	movlw	0
  7114  000EB2  6E1C               	movwf	SetPin595@Reg+1,c
  7115  000EB4  0E01               	movlw	1
  7116  000EB6  6E1B               	movwf	SetPin595@Reg,c
  7117  000EB8  0E00               	movlw	0
  7118  000EBA  6E1E               	movwf	SetPin595@pin+1,c
  7119  000EBC  0E01               	movlw	1
  7120  000EBE  6E1D               	movwf	SetPin595@pin,c
  7121  000EC0  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7122  000EC4  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7123  000EC8  EC0B  F00D         	call	_SetPin595	;wreg free
  7124                           
  7125                           ;PDU.c: 41: break;
  7126  000ECC  0012               	return	
  7127  000ECE                     l3924:
  7128                           
  7129                           ;PDU.c: 43: SetPin595(1, 6, onof);
  7130  000ECE  0E00               	movlw	0
  7131  000ED0  6E1C               	movwf	SetPin595@Reg+1,c
  7132  000ED2  0E01               	movlw	1
  7133  000ED4  6E1B               	movwf	SetPin595@Reg,c
  7134  000ED6  0E00               	movlw	0
  7135  000ED8  6E1E               	movwf	SetPin595@pin+1,c
  7136  000EDA  0E06               	movlw	6
  7137  000EDC  6E1D               	movwf	SetPin595@pin,c
  7138  000EDE  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7139  000EE2  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7140  000EE6  EC0B  F00D         	call	_SetPin595	;wreg free
  7141                           
  7142                           ;PDU.c: 44: MCSOn = onof;
  7143  000EEA  C025  F03C         	movff	EnableSlavePower@onof,_MCSOn
  7144                           
  7145                           ;PDU.c: 45: break;
  7146  000EEE  0012               	return	
  7147  000EF0                     l3928:
  7148                           
  7149                           ;PDU.c: 47: SetPin595(2, 1, onof);
  7150  000EF0  0E00               	movlw	0
  7151  000EF2  6E1C               	movwf	SetPin595@Reg+1,c
  7152  000EF4  0E02               	movlw	2
  7153  000EF6  6E1B               	movwf	SetPin595@Reg,c
  7154  000EF8  0E00               	movlw	0
  7155  000EFA  6E1E               	movwf	SetPin595@pin+1,c
  7156  000EFC  0E01               	movlw	1
  7157  000EFE  6E1D               	movwf	SetPin595@pin,c
  7158  000F00  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7159  000F04  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7160  000F08  EC0B  F00D         	call	_SetPin595	;wreg free
  7161                           
  7162                           ;PDU.c: 48: break;
  7163  000F0C  0012               	return	
  7164  000F0E                     l3930:
  7165                           
  7166                           ;PDU.c: 50: SetPin595(3, 6, onof);
  7167  000F0E  0E00               	movlw	0
  7168  000F10  6E1C               	movwf	SetPin595@Reg+1,c
  7169  000F12  0E03               	movlw	3
  7170  000F14  6E1B               	movwf	SetPin595@Reg,c
  7171  000F16  0E00               	movlw	0
  7172  000F18  6E1E               	movwf	SetPin595@pin+1,c
  7173  000F1A  0E06               	movlw	6
  7174  000F1C  6E1D               	movwf	SetPin595@pin,c
  7175  000F1E  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7176  000F22  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7177  000F26  EC0B  F00D         	call	_SetPin595	;wreg free
  7178                           
  7179                           ;PDU.c: 51: break;
  7180  000F2A  0012               	return	
  7181  000F2C                     l3932:
  7182                           
  7183                           ;PDU.c: 53: SetPin595(3, 1, onof);
  7184  000F2C  0E00               	movlw	0
  7185  000F2E  6E1C               	movwf	SetPin595@Reg+1,c
  7186  000F30  0E03               	movlw	3
  7187  000F32  6E1B               	movwf	SetPin595@Reg,c
  7188  000F34  0E00               	movlw	0
  7189  000F36  6E1E               	movwf	SetPin595@pin+1,c
  7190  000F38  0E01               	movlw	1
  7191  000F3A  6E1D               	movwf	SetPin595@pin,c
  7192  000F3C  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7193  000F40  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7194  000F44  EC0B  F00D         	call	_SetPin595	;wreg free
  7195                           
  7196                           ;PDU.c: 55: }
  7197                           
  7198                           ;PDU.c: 54: break;
  7199  000F48  0012               	return	
  7200  000F4A                     l3936:
  7201  000F4A  5027               	movf	EnableSlavePower@slave,w,c
  7202                           
  7203                           ; Switch size 1, requested type "space"
  7204                           ; Number of cases is 6, Range of values is 1 to 6
  7205                           ; switch strategies available:
  7206                           ; Name         Instructions Cycles
  7207                           ; simple_byte           19    10 (average)
  7208                           ;	Chosen strategy is simple_byte
  7209  000F4C  0A01               	xorlw	1	; case 1
  7210  000F4E  B4D8               	btfsc	status,2,c
  7211  000F50  D7CF               	goto	l3928
  7212  000F52  0A03               	xorlw	3	; case 2
  7213  000F54  B4D8               	btfsc	status,2,c
  7214  000F56  D7BB               	goto	l3924
  7215  000F58  0A01               	xorlw	1	; case 3
  7216  000F5A  B4D8               	btfsc	status,2,c
  7217  000F5C  D79A               	goto	l3920
  7218  000F5E  0A07               	xorlw	7	; case 4
  7219  000F60  B4D8               	btfsc	status,2,c
  7220  000F62  D7A6               	goto	l3922
  7221  000F64  0A01               	xorlw	1	; case 5
  7222  000F66  B4D8               	btfsc	status,2,c
  7223  000F68  D7D2               	goto	l3930
  7224  000F6A  0A03               	xorlw	3	; case 6
  7225  000F6C  A4D8               	btfss	status,2,c
  7226  000F6E  0012               	return	
  7227  000F70  D7DD               	goto	l3932
  7228  000F72                     __end_of_EnableSlavePower:
  7229                           	opt stack 0
  7230                           tosu	equ	0xFFF
  7231                           tosh	equ	0xFFE
  7232                           tosl	equ	0xFFD
  7233                           pclath	equ	0xFFA
  7234                           tblptru	equ	0xFF8
  7235                           tblptrh	equ	0xFF7
  7236                           tblptrl	equ	0xFF6
  7237                           tablat	equ	0xFF5
  7238                           prodh	equ	0xFF4
  7239                           prodl	equ	0xFF3
  7240                           intcon	equ	0xFF2
  7241                           intcon2	equ	0xFF1
  7242                           postinc0	equ	0xFEE
  7243                           wreg	equ	0xFE8
  7244                           indf2	equ	0xFDF
  7245                           postinc2	equ	0xFDE
  7246                           postdec2	equ	0xFDD
  7247                           plusw2	equ	0xFDB
  7248                           fsr2h	equ	0xFDA
  7249                           fsr2l	equ	0xFD9
  7250                           status	equ	0xFD8
  7251                           
  7252 ;; *************** function _SetPin595 *****************
  7253 ;; Defined at:
  7254 ;;		line 32 in file "Shift595.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  Reg             2   26[COMRAM] int 
  7257 ;;  pin             2   28[COMRAM] int 
  7258 ;;  value           2   30[COMRAM] int 
  7259 ;; Auto vars:     Size  Location     Type
  7260 ;;		None
  7261 ;; Return value:  Size  Location     Type
  7262 ;;		None               void
  7263 ;; Registers used:
  7264 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7265 ;; Tracked objects:
  7266 ;;		On entry : 0/0
  7267 ;;		On exit  : 0/0
  7268 ;;		Unchanged: 0/0
  7269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7270 ;;      Params:         6       0       0       0       0       0       0
  7271 ;;      Locals:         0       0       0       0       0       0       0
  7272 ;;      Temps:          4       0       0       0       0       0       0
  7273 ;;      Totals:        10       0       0       0       0       0       0
  7274 ;;Total ram usage:       10 bytes
  7275 ;; Hardware stack levels used:    1
  7276 ;; Hardware stack levels required when called:    4
  7277 ;; This function calls:
  7278 ;;		Nothing
  7279 ;; This function is called by:
  7280 ;;		_EnableSlavePower
  7281 ;;		_ReadCurrent
  7282 ;; This function uses a non-reentrant model
  7283 ;;
  7284                           
  7285                           	psect	text43
  7286  001A16                     __ptext43:
  7287                           	opt stack 0
  7288  001A16                     _SetPin595:
  7289                           	opt stack 23
  7290                           
  7291                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7292                           
  7293                           ;incstack = 0
  7294  001A16  0EF0               	movlw	240
  7295  001A18  6E21               	movwf	??_SetPin595& (0+255),c
  7296  001A1A  0EFF               	movlw	255
  7297  001A1C  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  7298  001A1E  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  7299  001A22  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  7300  001A26  90D8               	bcf	status,0,c
  7301  001A28  3623               	rlcf	??_SetPin595+2,f,c
  7302  001A2A  3624               	rlcf	??_SetPin595+3,f,c
  7303  001A2C  90D8               	bcf	status,0,c
  7304  001A2E  3623               	rlcf	??_SetPin595+2,f,c
  7305  001A30  3624               	rlcf	??_SetPin595+3,f,c
  7306  001A32  90D8               	bcf	status,0,c
  7307  001A34  3623               	rlcf	??_SetPin595+2,f,c
  7308  001A36  3624               	rlcf	??_SetPin595+3,f,c
  7309  001A38  501D               	movf	SetPin595@pin,w,c
  7310  001A3A  2623               	addwf	??_SetPin595+2,f,c
  7311  001A3C  501E               	movf	SetPin595@pin+1,w,c
  7312  001A3E  2224               	addwfc	??_SetPin595+3,f,c
  7313  001A40  90D8               	bcf	status,0,c
  7314  001A42  3623               	rlcf	??_SetPin595+2,f,c
  7315  001A44  3624               	rlcf	??_SetPin595+3,f,c
  7316  001A46  5021               	movf	??_SetPin595,w,c
  7317  001A48  2623               	addwf	??_SetPin595+2,f,c
  7318  001A4A  5022               	movf	??_SetPin595+1,w,c
  7319  001A4C  2224               	addwfc	??_SetPin595+3,f,c
  7320  001A4E  0E00               	movlw	low _registers
  7321  001A50  2423               	addwf	??_SetPin595+2,w,c
  7322  001A52  6ED9               	movwf	fsr2l,c
  7323  001A54  0E01               	movlw	high _registers
  7324  001A56  2024               	addwfc	??_SetPin595+3,w,c
  7325  001A58  6EDA               	movwf	fsr2h,c
  7326  001A5A  C01F  FFDE         	movff	SetPin595@value,postinc2
  7327  001A5E  C020  FFDD         	movff	SetPin595@value+1,postdec2
  7328  001A62  0012               	return		;funcret
  7329  001A64                     __end_of_SetPin595:
  7330                           	opt stack 0
  7331                           tosu	equ	0xFFF
  7332                           tosh	equ	0xFFE
  7333                           tosl	equ	0xFFD
  7334                           pclath	equ	0xFFA
  7335                           tblptru	equ	0xFF8
  7336                           tblptrh	equ	0xFF7
  7337                           tblptrl	equ	0xFF6
  7338                           tablat	equ	0xFF5
  7339                           prodh	equ	0xFF4
  7340                           prodl	equ	0xFF3
  7341                           intcon	equ	0xFF2
  7342                           intcon2	equ	0xFF1
  7343                           postinc0	equ	0xFEE
  7344                           wreg	equ	0xFE8
  7345                           indf2	equ	0xFDF
  7346                           postinc2	equ	0xFDE
  7347                           postdec2	equ	0xFDD
  7348                           plusw2	equ	0xFDB
  7349                           fsr2h	equ	0xFDA
  7350                           fsr2l	equ	0xFD9
  7351                           status	equ	0xFD8
  7352                           
  7353 ;; *************** function _ComputeStorageData *****************
  7354 ;; Defined at:
  7355 ;;		line 97 in file "PDU.c"
  7356 ;; Parameters:    Size  Location     Type
  7357 ;;		None
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  i               2   29[COMRAM] int 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;		None               void
  7362 ;; Registers used:
  7363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7364 ;; Tracked objects:
  7365 ;;		On entry : 0/0
  7366 ;;		On exit  : 0/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7369 ;;      Params:         0       0       0       0       0       0       0
  7370 ;;      Locals:         2       0       0       0       0       0       0
  7371 ;;      Temps:          2       0       0       0       0       0       0
  7372 ;;      Totals:         4       0       0       0       0       0       0
  7373 ;;Total ram usage:        4 bytes
  7374 ;; Hardware stack levels used:    1
  7375 ;; Hardware stack levels required when called:    5
  7376 ;; This function calls:
  7377 ;;		_DATAEE_ReadByte
  7378 ;; This function is called by:
  7379 ;;		_PDUStartup
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text44
  7384  001054                     __ptext44:
  7385                           	opt stack 0
  7386  001054                     _ComputeStorageData:
  7387                           	opt stack 24
  7388                           
  7389                           ;PDU.c: 98: for (int i = 0; i < 12; i++) {
  7390                           
  7391                           ;incstack = 0
  7392  001054  0E00               	movlw	0
  7393  001056  6E1F               	movwf	ComputeStorageData@i+1,c
  7394  001058  0E00               	movlw	0
  7395  00105A  6E1E               	movwf	ComputeStorageData@i,c
  7396  00105C                     l4366:
  7397  00105C  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7398  00105E  D006               	goto	l4370
  7399  001060  501F               	movf	ComputeStorageData@i+1,w,c
  7400  001062  E111               	bnz	l4376
  7401  001064  0E0C               	movlw	12
  7402  001066  5C1E               	subwf	ComputeStorageData@i,w,c
  7403  001068  B0D8               	btfsc	status,0,c
  7404  00106A  D00D               	goto	l4376
  7405  00106C                     l4370:
  7406                           
  7407                           ;PDU.c: 99: data[i] = DATAEE_ReadByte(i);
  7408  00106C  0E84               	movlw	low _data
  7409  00106E  241E               	addwf	ComputeStorageData@i,w,c
  7410  001070  6ED9               	movwf	fsr2l,c
  7411  001072  0E00               	movlw	high _data
  7412  001074  201F               	addwfc	ComputeStorageData@i+1,w,c
  7413  001076  6EDA               	movwf	fsr2h,c
  7414  001078  501E               	movf	ComputeStorageData@i,w,c
  7415  00107A  EC05  F00F         	call	_DATAEE_ReadByte
  7416  00107E  6EDF               	movwf	indf2,c
  7417  001080  4A1E               	infsnz	ComputeStorageData@i,f,c
  7418  001082  2A1F               	incf	ComputeStorageData@i+1,f,c
  7419  001084  D7EB               	goto	l4366
  7420  001086                     l4376:
  7421                           
  7422                           ;PDU.c: 100: }
  7423                           ;PDU.c: 101: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7424  001086  0100               	movlb	0	; () banked
  7425  001088  5185               	movf	(_data+1)& (0+255),w,b
  7426  00108A  C084  F01C         	movff	_data,??_ComputeStorageData
  7427  00108E  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7428  001090  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7429  001094  6A1C               	clrf	??_ComputeStorageData,c
  7430  001096  101C               	iorwf	??_ComputeStorageData,w,c
  7431  001098  0100               	movlb	0	; () banked
  7432  00109A  6F78               	movwf	_Currentcomp& (0+255),b
  7433  00109C  501D               	movf	??_ComputeStorageData+1,w,c
  7434  00109E  0100               	movlb	0	; () banked
  7435  0010A0  6F79               	movwf	(_Currentcomp+1)& (0+255),b
  7436                           
  7437                           ;PDU.c: 102: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7438  0010A2  0100               	movlb	0	; () banked
  7439  0010A4  5187               	movf	(_data+3)& (0+255),w,b
  7440  0010A6  C086  F01C         	movff	_data+2,??_ComputeStorageData
  7441  0010AA  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7442  0010AC  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7443  0010B0  6A1C               	clrf	??_ComputeStorageData,c
  7444  0010B2  101C               	iorwf	??_ComputeStorageData,w,c
  7445  0010B4  0100               	movlb	0	; () banked
  7446  0010B6  6F7A               	movwf	(_Currentcomp+2)& (0+255),b
  7447  0010B8  501D               	movf	??_ComputeStorageData+1,w,c
  7448  0010BA  0100               	movlb	0	; () banked
  7449  0010BC  6F7B               	movwf	(_Currentcomp+3)& (0+255),b
  7450                           
  7451                           ;PDU.c: 103: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7452  0010BE  0100               	movlb	0	; () banked
  7453  0010C0  5189               	movf	(_data+5)& (0+255),w,b
  7454  0010C2  C088  F01C         	movff	_data+4,??_ComputeStorageData
  7455  0010C6  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7456  0010C8  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7457  0010CC  6A1C               	clrf	??_ComputeStorageData,c
  7458  0010CE  101C               	iorwf	??_ComputeStorageData,w,c
  7459  0010D0  0100               	movlb	0	; () banked
  7460  0010D2  6F7C               	movwf	(_Currentcomp+4)& (0+255),b
  7461  0010D4  501D               	movf	??_ComputeStorageData+1,w,c
  7462  0010D6  0100               	movlb	0	; () banked
  7463  0010D8  6F7D               	movwf	(_Currentcomp+5)& (0+255),b
  7464                           
  7465                           ;PDU.c: 104: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7466  0010DA  0100               	movlb	0	; () banked
  7467  0010DC  518B               	movf	(_data+7)& (0+255),w,b
  7468  0010DE  C08A  F01C         	movff	_data+6,??_ComputeStorageData
  7469  0010E2  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7470  0010E4  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7471  0010E8  6A1C               	clrf	??_ComputeStorageData,c
  7472  0010EA  101C               	iorwf	??_ComputeStorageData,w,c
  7473  0010EC  0100               	movlb	0	; () banked
  7474  0010EE  6F7E               	movwf	(_Currentcomp+6)& (0+255),b
  7475  0010F0  501D               	movf	??_ComputeStorageData+1,w,c
  7476  0010F2  0100               	movlb	0	; () banked
  7477  0010F4  6F7F               	movwf	(_Currentcomp+7)& (0+255),b
  7478                           
  7479                           ;PDU.c: 105: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7480  0010F6  0100               	movlb	0	; () banked
  7481  0010F8  518D               	movf	(_data+9)& (0+255),w,b
  7482  0010FA  C08C  F01C         	movff	_data+8,??_ComputeStorageData
  7483  0010FE  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7484  001100  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7485  001104  6A1C               	clrf	??_ComputeStorageData,c
  7486  001106  101C               	iorwf	??_ComputeStorageData,w,c
  7487  001108  0100               	movlb	0	; () banked
  7488  00110A  6F80               	movwf	(_Currentcomp+8)& (0+255),b
  7489  00110C  501D               	movf	??_ComputeStorageData+1,w,c
  7490  00110E  0100               	movlb	0	; () banked
  7491  001110  6F81               	movwf	(_Currentcomp+9)& (0+255),b
  7492                           
  7493                           ;PDU.c: 106: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7494  001112  0100               	movlb	0	; () banked
  7495  001114  518F               	movf	(_data+11)& (0+255),w,b
  7496  001116  C08E  F01C         	movff	_data+10,??_ComputeStorageData
  7497  00111A  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7498  00111C  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7499  001120  6A1C               	clrf	??_ComputeStorageData,c
  7500  001122  101C               	iorwf	??_ComputeStorageData,w,c
  7501  001124  0100               	movlb	0	; () banked
  7502  001126  6F82               	movwf	(_Currentcomp+10)& (0+255),b
  7503  001128  501D               	movf	??_ComputeStorageData+1,w,c
  7504  00112A  0100               	movlb	0	; () banked
  7505  00112C  6F83               	movwf	(_Currentcomp+11)& (0+255),b
  7506                           
  7507                           ; BSR set to: 0
  7508  00112E  0012               	return		;funcret
  7509  001130                     __end_of_ComputeStorageData:
  7510                           	opt stack 0
  7511                           tosu	equ	0xFFF
  7512                           tosh	equ	0xFFE
  7513                           tosl	equ	0xFFD
  7514                           pclath	equ	0xFFA
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           intcon	equ	0xFF2
  7522                           intcon2	equ	0xFF1
  7523                           postinc0	equ	0xFEE
  7524                           wreg	equ	0xFE8
  7525                           indf2	equ	0xFDF
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           plusw2	equ	0xFDB
  7529                           fsr2h	equ	0xFDA
  7530                           fsr2l	equ	0xFD9
  7531                           status	equ	0xFD8
  7532                           
  7533 ;; *************** function _DATAEE_ReadByte *****************
  7534 ;; Defined at:
  7535 ;;		line 143 in file "mcc_generated_files/memory.c"
  7536 ;; Parameters:    Size  Location     Type
  7537 ;;  bAdd            1    wreg     unsigned char 
  7538 ;; Auto vars:     Size  Location     Type
  7539 ;;  bAdd            1   26[COMRAM] unsigned char 
  7540 ;; Return value:  Size  Location     Type
  7541 ;;                  1    wreg      unsigned char 
  7542 ;; Registers used:
  7543 ;;		wreg, status,2
  7544 ;; Tracked objects:
  7545 ;;		On entry : 0/0
  7546 ;;		On exit  : 0/0
  7547 ;;		Unchanged: 0/0
  7548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7549 ;;      Params:         0       0       0       0       0       0       0
  7550 ;;      Locals:         1       0       0       0       0       0       0
  7551 ;;      Temps:          0       0       0       0       0       0       0
  7552 ;;      Totals:         1       0       0       0       0       0       0
  7553 ;;Total ram usage:        1 bytes
  7554 ;; Hardware stack levels used:    1
  7555 ;; Hardware stack levels required when called:    4
  7556 ;; This function calls:
  7557 ;;		Nothing
  7558 ;; This function is called by:
  7559 ;;		_ComputeStorageData
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text45
  7564  001E0A                     __ptext45:
  7565                           	opt stack 0
  7566  001E0A                     _DATAEE_ReadByte:
  7567                           	opt stack 24
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;incstack = 0
  7571                           ;DATAEE_ReadByte@bAdd stored from wreg
  7572  001E0A  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7573                           
  7574                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7575  001E0C  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7576                           
  7577                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7578  001E10  9CA6               	bcf	4006,6,c	;volatile
  7579                           
  7580                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7581  001E12  9EA6               	bcf	4006,7,c	;volatile
  7582                           
  7583                           ;memory.c: 148: EECON1bits.RD = 1;
  7584  001E14  80A6               	bsf	4006,0,c	;volatile
  7585                           
  7586                           ;memory.c: 149: __nop();
  7587  001E16  F000               	nop	
  7588                           
  7589                           ;memory.c: 150: __nop();
  7590  001E18  F000               	nop	
  7591                           
  7592                           ;memory.c: 152: return (EEDATA);
  7593  001E1A  50A8               	movf	4008,w,c	;volatile
  7594  001E1C  0012               	return	
  7595  001E1E                     __end_of_DATAEE_ReadByte:
  7596                           	opt stack 0
  7597                           tosu	equ	0xFFF
  7598                           tosh	equ	0xFFE
  7599                           tosl	equ	0xFFD
  7600                           pclath	equ	0xFFA
  7601                           tblptru	equ	0xFF8
  7602                           tblptrh	equ	0xFF7
  7603                           tblptrl	equ	0xFF6
  7604                           tablat	equ	0xFF5
  7605                           prodh	equ	0xFF4
  7606                           prodl	equ	0xFF3
  7607                           intcon	equ	0xFF2
  7608                           intcon2	equ	0xFF1
  7609                           postinc0	equ	0xFEE
  7610                           wreg	equ	0xFE8
  7611                           indf2	equ	0xFDF
  7612                           postinc2	equ	0xFDE
  7613                           postdec2	equ	0xFDD
  7614                           plusw2	equ	0xFDB
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619 ;; *************** function _CoolingStop *****************
  7620 ;; Defined at:
  7621 ;;		line 30 in file "CoolingControl.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;		None
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;		None
  7626 ;; Return value:  Size  Location     Type
  7627 ;;		None               void
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7635 ;;      Params:         0       0       0       0       0       0       0
  7636 ;;      Locals:         0       0       0       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0
  7638 ;;      Totals:         0       0       0       0       0       0       0
  7639 ;;Total ram usage:        0 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:    6
  7642 ;; This function calls:
  7643 ;;		_PWM4_LoadDutyValue
  7644 ;;		_PotClear
  7645 ;; This function is called by:
  7646 ;;		_main
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text46
  7651  001E1E                     __ptext46:
  7652                           	opt stack 0
  7653  001E1E                     _CoolingStop:
  7654                           	opt stack 24
  7655                           
  7656                           ;CoolingControl.c: 31: PotClear();
  7657                           
  7658                           ;incstack = 0
  7659  001E1E  EC6F  F009         	call	_PotClear	;wreg free
  7660                           
  7661                           ;CoolingControl.c: 32: PWM4_LoadDutyValue(0);
  7662  001E22  0E00               	movlw	0
  7663  001E24  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7664  001E26  0E00               	movlw	0
  7665  001E28  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7666  001E2A  ECD4  F00D         	call	_PWM4_LoadDutyValue	;wreg free
  7667  001E2E  0012               	return		;funcret
  7668  001E30                     __end_of_CoolingStop:
  7669                           	opt stack 0
  7670                           tosu	equ	0xFFF
  7671                           tosh	equ	0xFFE
  7672                           tosl	equ	0xFFD
  7673                           pclath	equ	0xFFA
  7674                           tblptru	equ	0xFF8
  7675                           tblptrh	equ	0xFF7
  7676                           tblptrl	equ	0xFF6
  7677                           tablat	equ	0xFF5
  7678                           prodh	equ	0xFF4
  7679                           prodl	equ	0xFF3
  7680                           intcon	equ	0xFF2
  7681                           intcon2	equ	0xFF1
  7682                           postinc0	equ	0xFEE
  7683                           wreg	equ	0xFE8
  7684                           indf2	equ	0xFDF
  7685                           postinc2	equ	0xFDE
  7686                           postdec2	equ	0xFDD
  7687                           plusw2	equ	0xFDB
  7688                           fsr2h	equ	0xFDA
  7689                           fsr2l	equ	0xFD9
  7690                           status	equ	0xFD8
  7691                           
  7692 ;; *************** function _CoolingStart *****************
  7693 ;; Defined at:
  7694 ;;		line 19 in file "CoolingControl.c"
  7695 ;; Parameters:    Size  Location     Type
  7696 ;;		None
  7697 ;; Auto vars:     Size  Location     Type
  7698 ;;		None
  7699 ;; Return value:  Size  Location     Type
  7700 ;;		None               void
  7701 ;; Registers used:
  7702 ;;		wreg, status,2, status,0, cstack
  7703 ;; Tracked objects:
  7704 ;;		On entry : 0/0
  7705 ;;		On exit  : 0/0
  7706 ;;		Unchanged: 0/0
  7707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7708 ;;      Params:         0       0       0       0       0       0       0
  7709 ;;      Locals:         0       0       0       0       0       0       0
  7710 ;;      Temps:          0       0       0       0       0       0       0
  7711 ;;      Totals:         0       0       0       0       0       0       0
  7712 ;;Total ram usage:        0 bytes
  7713 ;; Hardware stack levels used:    1
  7714 ;; Hardware stack levels required when called:    6
  7715 ;; This function calls:
  7716 ;;		_PWM4_LoadDutyValue
  7717 ;;		_PotClear
  7718 ;;		_PotSetpoint
  7719 ;; This function is called by:
  7720 ;;		_main
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text47
  7725  001D2A                     __ptext47:
  7726                           	opt stack 0
  7727  001D2A                     _CoolingStart:
  7728                           	opt stack 24
  7729                           
  7730                           ;CoolingControl.c: 21: PotClear();
  7731                           
  7732                           ;incstack = 0
  7733  001D2A  EC6F  F009         	call	_PotClear	;wreg free
  7734                           
  7735                           ;CoolingControl.c: 22: PotSetpoint(40);
  7736  001D2E  0E00               	movlw	0
  7737  001D30  6E25               	movwf	PotSetpoint@new_point+1,c
  7738  001D32  0E28               	movlw	40
  7739  001D34  6E24               	movwf	PotSetpoint@new_point,c
  7740  001D36  ECC9  F006         	call	_PotSetpoint	;wreg free
  7741                           
  7742                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  7743  001D3A  0E03               	movlw	3
  7744  001D3C  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7745  001D3E  0EE8               	movlw	232
  7746  001D40  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7747  001D42  ECD4  F00D         	call	_PWM4_LoadDutyValue	;wreg free
  7748  001D46  0012               	return		;funcret
  7749  001D48                     __end_of_CoolingStart:
  7750                           	opt stack 0
  7751                           tosu	equ	0xFFF
  7752                           tosh	equ	0xFFE
  7753                           tosl	equ	0xFFD
  7754                           pclath	equ	0xFFA
  7755                           tblptru	equ	0xFF8
  7756                           tblptrh	equ	0xFF7
  7757                           tblptrl	equ	0xFF6
  7758                           tablat	equ	0xFF5
  7759                           prodh	equ	0xFF4
  7760                           prodl	equ	0xFF3
  7761                           intcon	equ	0xFF2
  7762                           intcon2	equ	0xFF1
  7763                           postinc0	equ	0xFEE
  7764                           wreg	equ	0xFE8
  7765                           indf2	equ	0xFDF
  7766                           postinc2	equ	0xFDE
  7767                           postdec2	equ	0xFDD
  7768                           plusw2	equ	0xFDB
  7769                           fsr2h	equ	0xFDA
  7770                           fsr2l	equ	0xFD9
  7771                           status	equ	0xFD8
  7772                           
  7773 ;; *************** function _PotSetpoint *****************
  7774 ;; Defined at:
  7775 ;;		line 21 in file "DigiPot.c"
  7776 ;; Parameters:    Size  Location     Type
  7777 ;;  new_point       2   35[COMRAM] int 
  7778 ;; Auto vars:     Size  Location     Type
  7779 ;;  new_pos         2    4[BANK0 ] int 
  7780 ;;  x               2    2[BANK0 ] int 
  7781 ;;  set_point       2    0[BANK0 ] int 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;		None               void
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0, cstack
  7786 ;; Tracked objects:
  7787 ;;		On entry : 0/0
  7788 ;;		On exit  : 0/0
  7789 ;;		Unchanged: 0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7791 ;;      Params:         2       0       0       0       0       0       0
  7792 ;;      Locals:         0       6       0       0       0       0       0
  7793 ;;      Temps:          2       0       0       0       0       0       0
  7794 ;;      Totals:         4       6       0       0       0       0       0
  7795 ;;Total ram usage:       10 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    5
  7798 ;; This function calls:
  7799 ;;		_Delay
  7800 ;; This function is called by:
  7801 ;;		_main
  7802 ;;		_CoolingStart
  7803 ;; This function uses a non-reentrant model
  7804 ;;
  7805                           
  7806                           	psect	text48
  7807  000D92                     __ptext48:
  7808                           	opt stack 0
  7809  000D92                     _PotSetpoint:
  7810                           	opt stack 25
  7811                           
  7812                           ;DigiPot.c: 22: int set_point;
  7813                           ;DigiPot.c: 31: int new_pos = new_point;
  7814                           
  7815                           ;incstack = 0
  7816  000D92  C024  F0D9         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7817  000D96  C025  F0DA         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7818                           
  7819                           ;DigiPot.c: 35: LATB5 = 0;
  7820  000D9A  9A8A               	bcf	3978,5,c	;volatile
  7821                           
  7822                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7823  000D9C  0100               	movlb	0	; () banked
  7824  000D9E  51D9               	movf	PotSetpoint@new_pos& (0+255),w,b
  7825  000DA0  5C2B               	subwf	_prev_pos,w,c
  7826  000DA2  502C               	movf	_prev_pos+1,w,c
  7827  000DA4  0A80               	xorlw	128
  7828  000DA6  6E26               	movwf	??_PotSetpoint& (0+255),c
  7829  000DA8  0100               	movlb	0	; () banked
  7830  000DAA  51DA               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7831  000DAC  0A80               	xorlw	128
  7832  000DAE  5826               	subwfb	??_PotSetpoint& (0+255),w,c
  7833  000DB0  B0D8               	btfsc	status,0,c
  7834  000DB2  D013               	goto	l900
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;DigiPot.c: 40: LATB3 = 1;
  7838  000DB4  868A               	bsf	3978,3,c	;volatile
  7839                           
  7840                           ; BSR set to: 0
  7841                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7842  000DB6  C02B  F026         	movff	_prev_pos,??_PotSetpoint
  7843  000DBA  C02C  F027         	movff	_prev_pos+1,??_PotSetpoint+1
  7844  000DBE  1E26               	comf	??_PotSetpoint,f,c
  7845  000DC0  1E27               	comf	??_PotSetpoint+1,f,c
  7846  000DC2  4A26               	infsnz	??_PotSetpoint,f,c
  7847  000DC4  2A27               	incf	??_PotSetpoint+1,f,c
  7848  000DC6  0100               	movlb	0	; () banked
  7849  000DC8  51D9               	movf	PotSetpoint@new_pos& (0+255),w,b
  7850  000DCA  2426               	addwf	??_PotSetpoint,w,c
  7851  000DCC  0100               	movlb	0	; () banked
  7852  000DCE  6FD5               	movwf	PotSetpoint@set_point& (0+255),b
  7853  000DD0  0100               	movlb	0	; () banked
  7854  000DD2  51DA               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7855  000DD4  2027               	addwfc	??_PotSetpoint+1,w,c
  7856  000DD6  0100               	movlb	0	; () banked
  7857  000DD8  6FD6               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7858  000DDA                     l900:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;DigiPot.c: 42: }
  7862                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7863  000DDA  502B               	movf	_prev_pos,w,c
  7864  000DDC  0100               	movlb	0	; () banked
  7865  000DDE  5DD9               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7866  000DE0  0100               	movlb	0	; () banked
  7867  000DE2  51DA               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7868  000DE4  0A80               	xorlw	128
  7869  000DE6  6E26               	movwf	??_PotSetpoint& (0+255),c
  7870  000DE8  502C               	movf	_prev_pos+1,w,c
  7871  000DEA  0A80               	xorlw	128
  7872  000DEC  5826               	subwfb	??_PotSetpoint& (0+255),w,c
  7873  000DEE  B0D8               	btfsc	status,0,c
  7874  000DF0  D011               	goto	l4390
  7875                           
  7876                           ; BSR set to: 0
  7877                           ;DigiPot.c: 45: LATB3 = 0;
  7878  000DF2  968A               	bcf	3978,3,c	;volatile
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7882  000DF4  C0D9  F026         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7883  000DF8  C0DA  F027         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7884  000DFC  1E26               	comf	??_PotSetpoint,f,c
  7885  000DFE  1E27               	comf	??_PotSetpoint+1,f,c
  7886  000E00  4A26               	infsnz	??_PotSetpoint,f,c
  7887  000E02  2A27               	incf	??_PotSetpoint+1,f,c
  7888  000E04  502B               	movf	_prev_pos,w,c
  7889  000E06  2426               	addwf	??_PotSetpoint,w,c
  7890  000E08  0100               	movlb	0	; () banked
  7891  000E0A  6FD5               	movwf	PotSetpoint@set_point& (0+255),b
  7892  000E0C  502C               	movf	_prev_pos+1,w,c
  7893  000E0E  2027               	addwfc	??_PotSetpoint+1,w,c
  7894  000E10  0100               	movlb	0	; () banked
  7895  000E12  6FD6               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7896  000E14                     l4390:
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;DigiPot.c: 47: }
  7900                           ;DigiPot.c: 48: Delay(1);
  7901  000E14  0E01               	movlw	1
  7902  000E16  6E1B               	movwf	Delay@wait,c
  7903  000E18  0E00               	movlw	0
  7904  000E1A  6E1C               	movwf	Delay@wait+1,c
  7905  000E1C  0E00               	movlw	0
  7906  000E1E  6E1D               	movwf	Delay@wait+2,c
  7907  000E20  0E00               	movlw	0
  7908  000E22  6E1E               	movwf	Delay@wait+3,c
  7909  000E24  EC57  F00D         	call	_Delay	;wreg free
  7910                           
  7911                           ;DigiPot.c: 50: int x;
  7912                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7913  000E28  0E00               	movlw	0
  7914  000E2A  0100               	movlb	0	; () banked
  7915  000E2C  6FD8               	movwf	(PotSetpoint@x+1)& (0+255),b
  7916  000E2E  0E00               	movlw	0
  7917  000E30  6FD7               	movwf	PotSetpoint@x& (0+255),b
  7918  000E32  D019               	goto	l4400
  7919  000E34                     l903:
  7920                           
  7921                           ; BSR set to: 0
  7922                           ;DigiPot.c: 53: LATB4 = 1;
  7923  000E34  888A               	bsf	3978,4,c	;volatile
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;DigiPot.c: 54: Delay(1);
  7927  000E36  0E01               	movlw	1
  7928  000E38  6E1B               	movwf	Delay@wait,c
  7929  000E3A  0E00               	movlw	0
  7930  000E3C  6E1C               	movwf	Delay@wait+1,c
  7931  000E3E  0E00               	movlw	0
  7932  000E40  6E1D               	movwf	Delay@wait+2,c
  7933  000E42  0E00               	movlw	0
  7934  000E44  6E1E               	movwf	Delay@wait+3,c
  7935  000E46  EC57  F00D         	call	_Delay	;wreg free
  7936                           
  7937                           ;DigiPot.c: 55: LATB4 = 0;
  7938  000E4A  988A               	bcf	3978,4,c	;volatile
  7939                           
  7940                           ;DigiPot.c: 56: Delay(1);
  7941  000E4C  0E01               	movlw	1
  7942  000E4E  6E1B               	movwf	Delay@wait,c
  7943  000E50  0E00               	movlw	0
  7944  000E52  6E1C               	movwf	Delay@wait+1,c
  7945  000E54  0E00               	movlw	0
  7946  000E56  6E1D               	movwf	Delay@wait+2,c
  7947  000E58  0E00               	movlw	0
  7948  000E5A  6E1E               	movwf	Delay@wait+3,c
  7949  000E5C  EC57  F00D         	call	_Delay	;wreg free
  7950  000E60  0100               	movlb	0	; () banked
  7951  000E62  4BD7               	infsnz	PotSetpoint@x& (0+255),f,b
  7952  000E64  2BD8               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7953  000E66                     l4400:
  7954                           
  7955                           ; BSR set to: 0
  7956  000E66  0100               	movlb	0	; () banked
  7957  000E68  51D5               	movf	PotSetpoint@set_point& (0+255),w,b
  7958  000E6A  0100               	movlb	0	; () banked
  7959  000E6C  5DD7               	subwf	PotSetpoint@x& (0+255),w,b
  7960  000E6E  0100               	movlb	0	; () banked
  7961  000E70  51D8               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7962  000E72  0A80               	xorlw	128
  7963  000E74  6E26               	movwf	??_PotSetpoint& (0+255),c
  7964  000E76  0100               	movlb	0	; () banked
  7965  000E78  51D6               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7966  000E7A  0A80               	xorlw	128
  7967  000E7C  5826               	subwfb	??_PotSetpoint& (0+255),w,c
  7968  000E7E  A0D8               	btfss	status,0,c
  7969  000E80  D7D9               	goto	l903
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;DigiPot.c: 57: }
  7973                           ;DigiPot.c: 59: LATB5 = 1;
  7974  000E82  8A8A               	bsf	3978,5,c	;volatile
  7975                           
  7976                           ;DigiPot.c: 60: prev_pos = new_pos;
  7977  000E84  C0D9  F02B         	movff	PotSetpoint@new_pos,_prev_pos
  7978  000E88  C0DA  F02C         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7979                           
  7980                           ; BSR set to: 0
  7981  000E8C  0012               	return		;funcret
  7982  000E8E                     __end_of_PotSetpoint:
  7983                           	opt stack 0
  7984                           tosu	equ	0xFFF
  7985                           tosh	equ	0xFFE
  7986                           tosl	equ	0xFFD
  7987                           pclath	equ	0xFFA
  7988                           tblptru	equ	0xFF8
  7989                           tblptrh	equ	0xFF7
  7990                           tblptrl	equ	0xFF6
  7991                           tablat	equ	0xFF5
  7992                           prodh	equ	0xFF4
  7993                           prodl	equ	0xFF3
  7994                           intcon	equ	0xFF2
  7995                           intcon2	equ	0xFF1
  7996                           postinc0	equ	0xFEE
  7997                           wreg	equ	0xFE8
  7998                           indf2	equ	0xFDF
  7999                           postinc2	equ	0xFDE
  8000                           postdec2	equ	0xFDD
  8001                           plusw2	equ	0xFDB
  8002                           fsr2h	equ	0xFDA
  8003                           fsr2l	equ	0xFD9
  8004                           status	equ	0xFD8
  8005                           
  8006 ;; *************** function _PotClear *****************
  8007 ;; Defined at:
  8008 ;;		line 66 in file "DigiPot.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  x               2   35[COMRAM] int 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;		None               void
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8022 ;;      Params:         0       0       0       0       0       0       0
  8023 ;;      Locals:         2       0       0       0       0       0       0
  8024 ;;      Temps:          0       0       0       0       0       0       0
  8025 ;;      Totals:         2       0       0       0       0       0       0
  8026 ;;Total ram usage:        2 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    5
  8029 ;; This function calls:
  8030 ;;		_Delay
  8031 ;; This function is called by:
  8032 ;;		_CoolingStart
  8033 ;;		_CoolingStop
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text49
  8038  0012DE                     __ptext49:
  8039                           	opt stack 0
  8040  0012DE                     _PotClear:
  8041                           	opt stack 24
  8042                           
  8043                           ;DigiPot.c: 67: Delay(1);
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;incstack = 0
  8047  0012DE  0E01               	movlw	1
  8048  0012E0  6E1B               	movwf	Delay@wait,c
  8049  0012E2  0E00               	movlw	0
  8050  0012E4  6E1C               	movwf	Delay@wait+1,c
  8051  0012E6  0E00               	movlw	0
  8052  0012E8  6E1D               	movwf	Delay@wait+2,c
  8053  0012EA  0E00               	movlw	0
  8054  0012EC  6E1E               	movwf	Delay@wait+3,c
  8055  0012EE  EC57  F00D         	call	_Delay	;wreg free
  8056                           
  8057                           ;DigiPot.c: 69: LATB5 = 0;
  8058  0012F2  9A8A               	bcf	3978,5,c	;volatile
  8059                           
  8060                           ;DigiPot.c: 70: Delay(1);
  8061  0012F4  0E01               	movlw	1
  8062  0012F6  6E1B               	movwf	Delay@wait,c
  8063  0012F8  0E00               	movlw	0
  8064  0012FA  6E1C               	movwf	Delay@wait+1,c
  8065  0012FC  0E00               	movlw	0
  8066  0012FE  6E1D               	movwf	Delay@wait+2,c
  8067  001300  0E00               	movlw	0
  8068  001302  6E1E               	movwf	Delay@wait+3,c
  8069  001304  EC57  F00D         	call	_Delay	;wreg free
  8070                           
  8071                           ;DigiPot.c: 71: LATB3 = 0;
  8072  001308  968A               	bcf	3978,3,c	;volatile
  8073                           
  8074                           ;DigiPot.c: 72: Delay(1);
  8075  00130A  0E01               	movlw	1
  8076  00130C  6E1B               	movwf	Delay@wait,c
  8077  00130E  0E00               	movlw	0
  8078  001310  6E1C               	movwf	Delay@wait+1,c
  8079  001312  0E00               	movlw	0
  8080  001314  6E1D               	movwf	Delay@wait+2,c
  8081  001316  0E00               	movlw	0
  8082  001318  6E1E               	movwf	Delay@wait+3,c
  8083  00131A  EC57  F00D         	call	_Delay	;wreg free
  8084                           
  8085                           ;DigiPot.c: 73: int x;
  8086                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  8087  00131E  0E00               	movlw	0
  8088  001320  6E25               	movwf	PotClear@x+1,c
  8089  001322  0E00               	movlw	0
  8090  001324  6E24               	movwf	PotClear@x,c
  8091  001326  BE25               	btfsc	PotClear@x+1,7,c
  8092  001328  D006               	goto	l908
  8093  00132A  5025               	movf	PotClear@x+1,w,c
  8094  00132C  E121               	bnz	l909
  8095  00132E  0E20               	movlw	32
  8096  001330  5C24               	subwf	PotClear@x,w,c
  8097  001332  B0D8               	btfsc	status,0,c
  8098  001334  D01D               	goto	l909
  8099  001336                     l908:
  8100                           
  8101                           ;DigiPot.c: 75: LATB4 = 1;
  8102  001336  888A               	bsf	3978,4,c	;volatile
  8103                           
  8104                           ;DigiPot.c: 76: Delay(1);
  8105  001338  0E01               	movlw	1
  8106  00133A  6E1B               	movwf	Delay@wait,c
  8107  00133C  0E00               	movlw	0
  8108  00133E  6E1C               	movwf	Delay@wait+1,c
  8109  001340  0E00               	movlw	0
  8110  001342  6E1D               	movwf	Delay@wait+2,c
  8111  001344  0E00               	movlw	0
  8112  001346  6E1E               	movwf	Delay@wait+3,c
  8113  001348  EC57  F00D         	call	_Delay	;wreg free
  8114                           
  8115                           ;DigiPot.c: 77: LATB4 = 0;
  8116  00134C  988A               	bcf	3978,4,c	;volatile
  8117                           
  8118                           ;DigiPot.c: 78: Delay(1);
  8119  00134E  0E01               	movlw	1
  8120  001350  6E1B               	movwf	Delay@wait,c
  8121  001352  0E00               	movlw	0
  8122  001354  6E1C               	movwf	Delay@wait+1,c
  8123  001356  0E00               	movlw	0
  8124  001358  6E1D               	movwf	Delay@wait+2,c
  8125  00135A  0E00               	movlw	0
  8126  00135C  6E1E               	movwf	Delay@wait+3,c
  8127  00135E  EC57  F00D         	call	_Delay	;wreg free
  8128  001362  4A24               	infsnz	PotClear@x,f,c
  8129  001364  2A25               	incf	PotClear@x+1,f,c
  8130  001366  BE25               	btfsc	PotClear@x+1,7,c
  8131  001368  D7E6               	goto	l908
  8132  00136A  5025               	movf	PotClear@x+1,w,c
  8133  00136C  E101               	bnz	u4080
  8134  00136E  D7DF               	goto	L1
  8135  001370                     u4080:
  8136  001370                     l909:
  8137                           
  8138                           ;DigiPot.c: 79: }
  8139                           ;DigiPot.c: 80: LATB4 = 1;
  8140  001370  888A               	bsf	3978,4,c	;volatile
  8141                           
  8142                           ;DigiPot.c: 81: Delay(1);
  8143  001372  0E01               	movlw	1
  8144  001374  6E1B               	movwf	Delay@wait,c
  8145  001376  0E00               	movlw	0
  8146  001378  6E1C               	movwf	Delay@wait+1,c
  8147  00137A  0E00               	movlw	0
  8148  00137C  6E1D               	movwf	Delay@wait+2,c
  8149  00137E  0E00               	movlw	0
  8150  001380  6E1E               	movwf	Delay@wait+3,c
  8151  001382  EC57  F00D         	call	_Delay	;wreg free
  8152                           
  8153                           ;DigiPot.c: 83: LATB5 = 1;
  8154  001386  8A8A               	bsf	3978,5,c	;volatile
  8155                           
  8156                           ;DigiPot.c: 84: prev_pos = 0;
  8157  001388  0E00               	movlw	0
  8158  00138A  6E2C               	movwf	_prev_pos+1,c
  8159  00138C  0E00               	movlw	0
  8160  00138E  6E2B               	movwf	_prev_pos,c
  8161                           
  8162                           ;DigiPot.c: 85: Delay(1);
  8163  001390  0E01               	movlw	1
  8164  001392  6E1B               	movwf	Delay@wait,c
  8165  001394  0E00               	movlw	0
  8166  001396  6E1C               	movwf	Delay@wait+1,c
  8167  001398  0E00               	movlw	0
  8168  00139A  6E1D               	movwf	Delay@wait+2,c
  8169  00139C  0E00               	movlw	0
  8170  00139E  6E1E               	movwf	Delay@wait+3,c
  8171  0013A0  EC57  F00D         	call	_Delay	;wreg free
  8172  0013A4  0012               	return		;funcret
  8173  0013A6                     __end_of_PotClear:
  8174                           	opt stack 0
  8175                           tosu	equ	0xFFF
  8176                           tosh	equ	0xFFE
  8177                           tosl	equ	0xFFD
  8178                           pclath	equ	0xFFA
  8179                           tblptru	equ	0xFF8
  8180                           tblptrh	equ	0xFF7
  8181                           tblptrl	equ	0xFF6
  8182                           tablat	equ	0xFF5
  8183                           prodh	equ	0xFF4
  8184                           prodl	equ	0xFF3
  8185                           intcon	equ	0xFF2
  8186                           intcon2	equ	0xFF1
  8187                           postinc0	equ	0xFEE
  8188                           wreg	equ	0xFE8
  8189                           indf2	equ	0xFDF
  8190                           postinc2	equ	0xFDE
  8191                           postdec2	equ	0xFDD
  8192                           plusw2	equ	0xFDB
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _Delay *****************
  8198 ;; Defined at:
  8199 ;;		line 9 in file "Functions.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  wait            4   26[COMRAM] long 
  8202 ;; Auto vars:     Size  Location     Type
  8203 ;;  i               4   31[COMRAM] long 
  8204 ;; Return value:  Size  Location     Type
  8205 ;;		None               void
  8206 ;; Registers used:
  8207 ;;		wreg, status,2, status,0
  8208 ;; Tracked objects:
  8209 ;;		On entry : 0/0
  8210 ;;		On exit  : 0/0
  8211 ;;		Unchanged: 0/0
  8212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8213 ;;      Params:         4       0       0       0       0       0       0
  8214 ;;      Locals:         4       0       0       0       0       0       0
  8215 ;;      Temps:          1       0       0       0       0       0       0
  8216 ;;      Totals:         9       0       0       0       0       0       0
  8217 ;;Total ram usage:        9 bytes
  8218 ;; Hardware stack levels used:    1
  8219 ;; Hardware stack levels required when called:    4
  8220 ;; This function calls:
  8221 ;;		Nothing
  8222 ;; This function is called by:
  8223 ;;		_respondECU
  8224 ;;		_StartUp595
  8225 ;;		_writeRegisters
  8226 ;;		_PotSetpoint
  8227 ;;		_PotClear
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text50
  8232  001AAE                     __ptext50:
  8233                           	opt stack 0
  8234  001AAE                     _Delay:
  8235                           	opt stack 24
  8236                           
  8237                           ;Functions.c: 10: long int i = 0;
  8238                           
  8239                           ;incstack = 0
  8240  001AAE  0E00               	movlw	0
  8241  001AB0  6E20               	movwf	Delay@i,c
  8242  001AB2  0E00               	movlw	0
  8243  001AB4  6E21               	movwf	Delay@i+1,c
  8244  001AB6  0E00               	movlw	0
  8245  001AB8  6E22               	movwf	Delay@i+2,c
  8246  001ABA  0E00               	movlw	0
  8247  001ABC  6E23               	movwf	Delay@i+3,c
  8248                           
  8249                           ;Functions.c: 11: for (; wait > i; i++) {
  8250  001ABE  D00D               	goto	l3716
  8251  001AC0                     l3712:
  8252                           
  8253                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8254  001AC0  0E03               	movlw	3
  8255  001AC2  6E1F               	movwf	??_Delay& (0+255),c
  8256  001AC4  0E98               	movlw	152
  8257  001AC6                     u4277:
  8258  001AC6  2EE8               	decfsz	wreg,f,c
  8259  001AC8  D7FE               	goto	u4277
  8260  001ACA  2E1F               	decfsz	??_Delay& (0+255),f,c
  8261  001ACC  D7FC               	goto	u4277
  8262  001ACE  0E01               	movlw	1
  8263  001AD0  2620               	addwf	Delay@i,f,c
  8264  001AD2  0E00               	movlw	0
  8265  001AD4  2221               	addwfc	Delay@i+1,f,c
  8266  001AD6  2222               	addwfc	Delay@i+2,f,c
  8267  001AD8  2223               	addwfc	Delay@i+3,f,c
  8268  001ADA                     l3716:
  8269  001ADA  501B               	movf	Delay@wait,w,c
  8270  001ADC  5C20               	subwf	Delay@i,w,c
  8271  001ADE  501C               	movf	Delay@wait+1,w,c
  8272  001AE0  5821               	subwfb	Delay@i+1,w,c
  8273  001AE2  501D               	movf	Delay@wait+2,w,c
  8274  001AE4  5822               	subwfb	Delay@i+2,w,c
  8275  001AE6  5023               	movf	Delay@i+3,w,c
  8276  001AE8  0A80               	xorlw	128
  8277  001AEA  6E1F               	movwf	??_Delay& (0+255),c
  8278  001AEC  501E               	movf	Delay@wait+3,w,c
  8279  001AEE  0A80               	xorlw	128
  8280  001AF0  581F               	subwfb	??_Delay& (0+255),w,c
  8281  001AF2  B0D8               	btfsc	status,0,c
  8282  001AF4  0012               	return	
  8283  001AF6  D7E4               	goto	l3712
  8284  001AF8                     __end_of_Delay:
  8285                           	opt stack 0
  8286                           tosu	equ	0xFFF
  8287                           tosh	equ	0xFFE
  8288                           tosl	equ	0xFFD
  8289                           pclath	equ	0xFFA
  8290                           tblptru	equ	0xFF8
  8291                           tblptrh	equ	0xFF7
  8292                           tblptrl	equ	0xFF6
  8293                           tablat	equ	0xFF5
  8294                           prodh	equ	0xFF4
  8295                           prodl	equ	0xFF3
  8296                           intcon	equ	0xFF2
  8297                           intcon2	equ	0xFF1
  8298                           postinc0	equ	0xFEE
  8299                           wreg	equ	0xFE8
  8300                           indf2	equ	0xFDF
  8301                           postinc2	equ	0xFDE
  8302                           postdec2	equ	0xFDD
  8303                           plusw2	equ	0xFDB
  8304                           fsr2h	equ	0xFDA
  8305                           fsr2l	equ	0xFD9
  8306                           status	equ	0xFD8
  8307                           
  8308 ;; *************** function _PWM4_LoadDutyValue *****************
  8309 ;; Defined at:
  8310 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  8311 ;; Parameters:    Size  Location     Type
  8312 ;;  dutyValue       2   26[COMRAM] unsigned int 
  8313 ;; Auto vars:     Size  Location     Type
  8314 ;;		None
  8315 ;; Return value:  Size  Location     Type
  8316 ;;		None               void
  8317 ;; Registers used:
  8318 ;;		wreg, status,2, status,0
  8319 ;; Tracked objects:
  8320 ;;		On entry : 0/0
  8321 ;;		On exit  : 0/0
  8322 ;;		Unchanged: 0/0
  8323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8324 ;;      Params:         2       0       0       0       0       0       0
  8325 ;;      Locals:         0       0       0       0       0       0       0
  8326 ;;      Temps:          2       0       0       0       0       0       0
  8327 ;;      Totals:         4       0       0       0       0       0       0
  8328 ;;Total ram usage:        4 bytes
  8329 ;; Hardware stack levels used:    1
  8330 ;; Hardware stack levels required when called:    4
  8331 ;; This function calls:
  8332 ;;		Nothing
  8333 ;; This function is called by:
  8334 ;;		_main
  8335 ;;		_CoolingStart
  8336 ;;		_CoolingStop
  8337 ;; This function uses a non-reentrant model
  8338 ;;
  8339                           
  8340                           	psect	text51
  8341  001BA8                     __ptext51:
  8342                           	opt stack 0
  8343  001BA8                     _PWM4_LoadDutyValue:
  8344                           	opt stack 26
  8345                           
  8346                           ;pwm4.c: 84: CCPR4L = ((dutyValue & 0x03FC)>>2);
  8347                           
  8348                           ;incstack = 0
  8349  001BA8  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8350  001BAC  C01C  F01E         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  8351  001BB0  90D8               	bcf	status,0,c
  8352  001BB2  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8353  001BB4  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8354  001BB6  90D8               	bcf	status,0,c
  8355  001BB8  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8356  001BBA  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8357  001BBC  501D               	movf	??_PWM4_LoadDutyValue,w,c
  8358  001BBE  010F               	movlb	15	; () banked
  8359  001BC0  6F58               	movwf	88,b	;volatile
  8360                           
  8361                           ;pwm4.c: 87: CCP4CON = (CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  8362  001BC2  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8363  001BC6  0E03               	movlw	3
  8364  001BC8  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8365  001BCA  3A1D               	swapf	??_PWM4_LoadDutyValue,f,c
  8366  001BCC  0EF0               	movlw	240
  8367  001BCE  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8368  001BD0  010F               	movlb	15	; () banked
  8369  001BD2  5157               	movf	87,w,b	;volatile
  8370  001BD4  0BCF               	andlw	207
  8371  001BD6  101D               	iorwf	??_PWM4_LoadDutyValue,w,c
  8372  001BD8  010F               	movlb	15	; () banked
  8373  001BDA  6F57               	movwf	87,b	;volatile
  8374                           
  8375                           ; BSR set to: 15
  8376  001BDC  0012               	return		;funcret
  8377  001BDE                     __end_of_PWM4_LoadDutyValue:
  8378                           	opt stack 0
  8379                           tosu	equ	0xFFF
  8380                           tosh	equ	0xFFE
  8381                           tosl	equ	0xFFD
  8382                           pclath	equ	0xFFA
  8383                           tblptru	equ	0xFF8
  8384                           tblptrh	equ	0xFF7
  8385                           tblptrl	equ	0xFF6
  8386                           tablat	equ	0xFF5
  8387                           prodh	equ	0xFF4
  8388                           prodl	equ	0xFF3
  8389                           intcon	equ	0xFF2
  8390                           intcon2	equ	0xFF1
  8391                           postinc0	equ	0xFEE
  8392                           wreg	equ	0xFE8
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           plusw2	equ	0xFDB
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _CoolingCheck *****************
  8402 ;; Defined at:
  8403 ;;		line 149 in file "PDU.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      unsigned char 
  8410 ;; Registers used:
  8411 ;;		wreg, status,2
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8417 ;;      Params:         0       0       0       0       0       0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0
  8419 ;;      Temps:          0       0       0       0       0       0       0
  8420 ;;      Totals:         0       0       0       0       0       0       0
  8421 ;;Total ram usage:        0 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    4
  8424 ;; This function calls:
  8425 ;;		Nothing
  8426 ;; This function is called by:
  8427 ;;		_main
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text52
  8432  001E6E                     __ptext52:
  8433                           	opt stack 0
  8434  001E6E                     _CoolingCheck:
  8435                           	opt stack 26
  8436                           
  8437                           ;PDU.c: 150: return MCSOn;
  8438                           
  8439                           ; BSR set to: 15
  8440                           ;incstack = 0
  8441  001E6E  503C               	movf	_MCSOn,w,c
  8442  001E70  0012               	return	
  8443  001E72                     __end_of_CoolingCheck:
  8444                           	opt stack 0
  8445                           tosu	equ	0xFFF
  8446                           tosh	equ	0xFFE
  8447                           tosl	equ	0xFFD
  8448                           pclath	equ	0xFFA
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           intcon2	equ	0xFF1
  8457                           postinc0	equ	0xFEE
  8458                           wreg	equ	0xFE8
  8459                           indf2	equ	0xFDF
  8460                           postinc2	equ	0xFDE
  8461                           postdec2	equ	0xFDD
  8462                           plusw2	equ	0xFDB
  8463                           fsr2h	equ	0xFDA
  8464                           fsr2l	equ	0xFD9
  8465                           status	equ	0xFD8
  8466                           
  8467 ;; *************** function _INTERRUPT_InterruptManager *****************
  8468 ;; Defined at:
  8469 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  8470 ;; Parameters:    Size  Location     Type
  8471 ;;		None
  8472 ;; Auto vars:     Size  Location     Type
  8473 ;;		None
  8474 ;; Return value:  Size  Location     Type
  8475 ;;		None               void
  8476 ;; Registers used:
  8477 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8478 ;; Tracked objects:
  8479 ;;		On entry : 0/0
  8480 ;;		On exit  : 0/0
  8481 ;;		Unchanged: 0/0
  8482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8483 ;;      Params:         0       0       0       0       0       0       0
  8484 ;;      Locals:         0       0       0       0       0       0       0
  8485 ;;      Temps:         14       0       0       0       0       0       0
  8486 ;;      Totals:        14       0       0       0       0       0       0
  8487 ;;Total ram usage:       14 bytes
  8488 ;; Hardware stack levels used:    1
  8489 ;; Hardware stack levels required when called:    3
  8490 ;; This function calls:
  8491 ;;		_ADC_ISR
  8492 ;;		_EUSART1_Receive_ISR
  8493 ;;		_EUSART1_Transmit_ISR
  8494 ;; This function is called by:
  8495 ;;		Interrupt level 2
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           	psect	intcode
  8500  000008                     __pintcode:
  8501                           	opt stack 0
  8502  000008                     _INTERRUPT_InterruptManager:
  8503                           	opt stack 21
  8504                           
  8505                           ;incstack = 0
  8506  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8507  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  8508  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8509  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8510  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8511  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8512  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8513  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8514  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8515  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8516  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8517  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8518  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8519  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8520  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8521                           
  8522                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8523  000042  BA9D               	btfsc	3997,5,c	;volatile
  8524  000044  AA9E               	btfss	3998,5,c	;volatile
  8525  000046  D003               	goto	i2l63
  8526                           
  8527                           ;interrupt_manager.c: 71: {
  8528                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8529  000048  ECA4  F00E         	call	_EUSART1_Receive_ISR	;wreg free
  8530                           
  8531                           ;interrupt_manager.c: 73: }
  8532  00004C  D00B               	goto	i2l69
  8533  00004E                     i2l63:
  8534                           
  8535                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8536  00004E  B89D               	btfsc	3997,4,c	;volatile
  8537  000050  A89E               	btfss	3998,4,c	;volatile
  8538  000052  D003               	goto	i2l65
  8539                           
  8540                           ;interrupt_manager.c: 75: {
  8541                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8542  000054  ECEF  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  8543                           
  8544                           ;interrupt_manager.c: 77: }
  8545  000058  D005               	goto	i2l69
  8546  00005A                     i2l65:
  8547                           
  8548                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8549  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8550  00005C  AC9E               	btfss	3998,6,c	;volatile
  8551  00005E  D002               	goto	i2l69
  8552                           
  8553                           ;interrupt_manager.c: 79: {
  8554                           ;interrupt_manager.c: 80: ADC_ISR();
  8555  000060  EC39  F00F         	call	_ADC_ISR	;wreg free
  8556  000064                     i2l69:
  8557  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8558  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8559  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8560  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8561  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8562  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8563  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8564  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8565  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8566  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8567  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8568  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8569  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8570  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8571  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8572  00009E  0011               	retfie		f
  8573  0000A0                     __end_of_INTERRUPT_InterruptManager:
  8574                           	opt stack 0
  8575                           tosu	equ	0xFFF
  8576                           tosh	equ	0xFFE
  8577                           tosl	equ	0xFFD
  8578                           pclatu	equ	0xFFB
  8579                           pclath	equ	0xFFA
  8580                           tblptru	equ	0xFF8
  8581                           tblptrh	equ	0xFF7
  8582                           tblptrl	equ	0xFF6
  8583                           tablat	equ	0xFF5
  8584                           prodh	equ	0xFF4
  8585                           prodl	equ	0xFF3
  8586                           intcon	equ	0xFF2
  8587                           intcon2	equ	0xFF1
  8588                           postinc0	equ	0xFEE
  8589                           fsr0h	equ	0xFEA
  8590                           fsr0l	equ	0xFE9
  8591                           wreg	equ	0xFE8
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           plusw2	equ	0xFDB
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _EUSART1_Transmit_ISR *****************
  8603 ;; Defined at:
  8604 ;;		line 150 in file "UART.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;		None               void
  8611 ;; Registers used:
  8612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8618 ;;      Params:         0       0       0       0       0       0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0
  8621 ;;      Totals:         0       0       0       0       0       0       0
  8622 ;;Total ram usage:        0 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    2
  8625 ;; This function calls:
  8626 ;;		i2_UART_buff_get
  8627 ;;		i2_UART_buff_size
  8628 ;; This function is called by:
  8629 ;;		_INTERRUPT_InterruptManager
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           	psect	text54
  8634  001BDE                     __ptext54:
  8635                           	opt stack 0
  8636  001BDE                     _EUSART1_Transmit_ISR:
  8637                           	opt stack 21
  8638                           
  8639                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  8640                           
  8641                           ;incstack = 0
  8642  001BDE  0E00               	movlw	low _output_buffer
  8643  001BE0  6E01               	movwf	i2UART_buff_size@_this,c
  8644  001BE2  0E04               	movlw	high _output_buffer
  8645  001BE4  6E02               	movwf	i2UART_buff_size@_this+1,c
  8646  001BE6  ECF0  F00E         	call	i2_UART_buff_size	;wreg free
  8647  001BEA  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  8648  001BEC  D00D               	goto	i2l3500
  8649  001BEE  5002               	movf	?i2_UART_buff_size+1,w,c
  8650  001BF0  E103               	bnz	i2u272_40
  8651  001BF2  0401               	decf	?i2_UART_buff_size,w,c
  8652  001BF4  A0D8               	btfss	status,0,c
  8653  001BF6  D008               	goto	i2l3500
  8654  001BF8                     i2u272_40:
  8655                           
  8656                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  8657  001BF8  0E00               	movlw	low _output_buffer
  8658  001BFA  6E07               	movwf	i2UART_buff_get@_this,c
  8659  001BFC  0E04               	movlw	high _output_buffer
  8660  001BFE  6E08               	movwf	i2UART_buff_get@_this+1,c
  8661  001C00  EC79  F00A         	call	i2_UART_buff_get	;wreg free
  8662  001C04  6EAD               	movwf	4013,c	;volatile
  8663                           
  8664                           ;UART.c: 154: } else {
  8665  001C06  0012               	return	
  8666  001C08                     i2l3500:
  8667                           
  8668                           ;UART.c: 155: Transmit_stall = 1;
  8669  001C08  0E01               	movlw	1
  8670  001C0A  6E44               	movwf	_Transmit_stall,c
  8671                           
  8672                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  8673  001C0C  989D               	bcf	3997,4,c	;volatile
  8674  001C0E  0012               	return	
  8675  001C10                     __end_of_EUSART1_Transmit_ISR:
  8676                           	opt stack 0
  8677                           tosu	equ	0xFFF
  8678                           tosh	equ	0xFFE
  8679                           tosl	equ	0xFFD
  8680                           pclatu	equ	0xFFB
  8681                           pclath	equ	0xFFA
  8682                           tblptru	equ	0xFF8
  8683                           tblptrh	equ	0xFF7
  8684                           tblptrl	equ	0xFF6
  8685                           tablat	equ	0xFF5
  8686                           prodh	equ	0xFF4
  8687                           prodl	equ	0xFF3
  8688                           intcon	equ	0xFF2
  8689                           intcon2	equ	0xFF1
  8690                           postinc0	equ	0xFEE
  8691                           fsr0h	equ	0xFEA
  8692                           fsr0l	equ	0xFE9
  8693                           wreg	equ	0xFE8
  8694                           fsr1h	equ	0xFE2
  8695                           fsr1l	equ	0xFE1
  8696                           indf2	equ	0xFDF
  8697                           postinc2	equ	0xFDE
  8698                           postdec2	equ	0xFDD
  8699                           plusw2	equ	0xFDB
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function i2_UART_buff_size *****************
  8705 ;; Defined at:
  8706 ;;		line 102 in file "UART.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  8709 ;;		 -> output_buffer(206), input_buffer(206), 
  8710 ;; Auto vars:     Size  Location     Type
  8711 ;;		None
  8712 ;; Return value:  Size  Location     Type
  8713 ;;                  2    0[COMRAM] int 
  8714 ;; Registers used:
  8715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8716 ;; Tracked objects:
  8717 ;;		On entry : 0/0
  8718 ;;		On exit  : 0/0
  8719 ;;		Unchanged: 0/0
  8720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8721 ;;      Params:         2       0       0       0       0       0       0
  8722 ;;      Locals:         0       0       0       0       0       0       0
  8723 ;;      Temps:          0       0       0       0       0       0       0
  8724 ;;      Totals:         2       0       0       0       0       0       0
  8725 ;;Total ram usage:        2 bytes
  8726 ;; Hardware stack levels used:    1
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_EUSART1_Transmit_ISR
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text55
  8735  001DE0                     __ptext55:
  8736                           	opt stack 0
  8737  001DE0                     i2_UART_buff_size:
  8738                           	opt stack 22
  8739                           
  8740                           ;UART.c: 103: return (_this->count);
  8741                           
  8742                           ;incstack = 0
  8743  001DE0  EE20 F0CC          	lfsr	2,204
  8744  001DE4  5001               	movf	i2UART_buff_size@_this,w,c
  8745  001DE6  26D9               	addwf	fsr2l,f,c
  8746  001DE8  5002               	movf	i2UART_buff_size@_this+1,w,c
  8747  001DEA  22DA               	addwfc	fsr2h,f,c
  8748  001DEC  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  8749  001DF0  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  8750  001DF4  0012               	return	
  8751  001DF6                     __end_ofi2_UART_buff_size:
  8752                           	opt stack 0
  8753                           tosu	equ	0xFFF
  8754                           tosh	equ	0xFFE
  8755                           tosl	equ	0xFFD
  8756                           pclatu	equ	0xFFB
  8757                           pclath	equ	0xFFA
  8758                           tblptru	equ	0xFF8
  8759                           tblptrh	equ	0xFF7
  8760                           tblptrl	equ	0xFF6
  8761                           tablat	equ	0xFF5
  8762                           prodh	equ	0xFF4
  8763                           prodl	equ	0xFF3
  8764                           intcon	equ	0xFF2
  8765                           intcon2	equ	0xFF1
  8766                           postinc0	equ	0xFEE
  8767                           fsr0h	equ	0xFEA
  8768                           fsr0l	equ	0xFE9
  8769                           wreg	equ	0xFE8
  8770                           fsr1h	equ	0xFE2
  8771                           fsr1l	equ	0xFE1
  8772                           indf2	equ	0xFDF
  8773                           postinc2	equ	0xFDE
  8774                           postdec2	equ	0xFDD
  8775                           plusw2	equ	0xFDB
  8776                           fsr2h	equ	0xFDA
  8777                           fsr2l	equ	0xFD9
  8778                           status	equ	0xFD8
  8779                           
  8780 ;; *************** function i2_UART_buff_get *****************
  8781 ;; Defined at:
  8782 ;;		line 81 in file "UART.c"
  8783 ;; Parameters:    Size  Location     Type
  8784 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8785 ;;		 -> output_buffer(206), input_buffer(206), 
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  8788 ;; Return value:  Size  Location     Type
  8789 ;;                  1    wreg      unsigned char 
  8790 ;; Registers used:
  8791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8792 ;; Tracked objects:
  8793 ;;		On entry : 0/0
  8794 ;;		On exit  : 0/0
  8795 ;;		Unchanged: 0/0
  8796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8797 ;;      Params:         2       0       0       0       0       0       0
  8798 ;;      Locals:         1       0       0       0       0       0       0
  8799 ;;      Temps:          2       0       0       0       0       0       0
  8800 ;;      Totals:         5       0       0       0       0       0       0
  8801 ;;Total ram usage:        5 bytes
  8802 ;; Hardware stack levels used:    1
  8803 ;; Hardware stack levels required when called:    1
  8804 ;; This function calls:
  8805 ;;		i2_UART_buff_modulo_inc
  8806 ;; This function is called by:
  8807 ;;		_EUSART1_Transmit_ISR
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text56
  8812  0014F2                     __ptext56:
  8813                           	opt stack 0
  8814  0014F2                     i2_UART_buff_get:
  8815                           	opt stack 21
  8816                           
  8817                           ;UART.c: 82: unsigned char c;
  8818                           ;UART.c: 83: if (_this->count > 0) {
  8819                           
  8820                           ;incstack = 0
  8821  0014F2  EE20 F0CC          	lfsr	2,204
  8822  0014F6  5007               	movf	i2UART_buff_get@_this,w,c
  8823  0014F8  26D9               	addwf	fsr2l,f,c
  8824  0014FA  5008               	movf	i2UART_buff_get@_this+1,w,c
  8825  0014FC  22DA               	addwfc	fsr2h,f,c
  8826  0014FE  0E01               	movlw	1
  8827  001500  BEDB               	btfsc	plusw2,7,c
  8828  001502  D03C               	goto	i2l3472
  8829  001504  0E01               	movlw	1
  8830  001506  50DB               	movf	plusw2,w,c
  8831  001508  E103               	bnz	i2u269_40
  8832  00150A  04DE               	decf	postinc2,w,c
  8833  00150C  A0D8               	btfss	status,0,c
  8834  00150E  D036               	goto	i2l3472
  8835  001510                     i2u269_40:
  8836                           
  8837                           ;UART.c: 84: c = _this->buf[_this->tail];
  8838  001510  EE20 F0CA          	lfsr	2,202
  8839  001514  5007               	movf	i2UART_buff_get@_this,w,c
  8840  001516  26D9               	addwf	fsr2l,f,c
  8841  001518  5008               	movf	i2UART_buff_get@_this+1,w,c
  8842  00151A  22DA               	addwfc	fsr2h,f,c
  8843  00151C  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  8844  001520  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  8845  001524  5009               	movf	??i2_UART_buff_get,w,c
  8846  001526  2407               	addwf	i2UART_buff_get@_this,w,c
  8847  001528  6ED9               	movwf	fsr2l,c
  8848  00152A  500A               	movf	??i2_UART_buff_get+1,w,c
  8849  00152C  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  8850  00152E  6EDA               	movwf	fsr2h,c
  8851  001530  50DF               	movf	indf2,w,c
  8852  001532  6E0B               	movwf	i2UART_buff_get@c,c
  8853                           
  8854                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8855  001534  EE20 F0CA          	lfsr	2,202
  8856  001538  5007               	movf	i2UART_buff_get@_this,w,c
  8857  00153A  26D9               	addwf	fsr2l,f,c
  8858  00153C  5008               	movf	i2UART_buff_get@_this+1,w,c
  8859  00153E  22DA               	addwfc	fsr2h,f,c
  8860  001540  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8861  001544  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8862  001548  0E00               	movlw	0
  8863  00154A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8864  00154C  0EC8               	movlw	200
  8865  00154E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8866  001550  EC5F  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8867  001554  EE20 F0CA          	lfsr	2,202
  8868  001558  5007               	movf	i2UART_buff_get@_this,w,c
  8869  00155A  26D9               	addwf	fsr2l,f,c
  8870  00155C  5008               	movf	i2UART_buff_get@_this+1,w,c
  8871  00155E  22DA               	addwfc	fsr2h,f,c
  8872  001560  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8873  001564  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8874                           
  8875                           ;UART.c: 86: --_this->count;
  8876  001568  EE20 F0CC          	lfsr	2,204
  8877  00156C  5007               	movf	i2UART_buff_get@_this,w,c
  8878  00156E  26D9               	addwf	fsr2l,f,c
  8879  001570  5008               	movf	i2UART_buff_get@_this+1,w,c
  8880  001572  22DA               	addwfc	fsr2h,f,c
  8881  001574  06DE               	decf	postinc2,f,c
  8882  001576  0E00               	movlw	0
  8883  001578  5ADD               	subwfb	postdec2,f,c
  8884                           
  8885                           ;UART.c: 87: } else {
  8886  00157A  D002               	goto	i2l787
  8887  00157C                     i2l3472:
  8888                           
  8889                           ;UART.c: 88: c = 0;
  8890  00157C  0E00               	movlw	0
  8891  00157E  6E0B               	movwf	i2UART_buff_get@c,c
  8892  001580                     i2l787:
  8893                           
  8894                           ;UART.c: 89: }
  8895                           ;UART.c: 90: return (c);
  8896  001580  500B               	movf	i2UART_buff_get@c,w,c
  8897  001582  0012               	return	
  8898  001584                     __end_ofi2_UART_buff_get:
  8899                           	opt stack 0
  8900                           tosu	equ	0xFFF
  8901                           tosh	equ	0xFFE
  8902                           tosl	equ	0xFFD
  8903                           pclatu	equ	0xFFB
  8904                           pclath	equ	0xFFA
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           prodh	equ	0xFF4
  8910                           prodl	equ	0xFF3
  8911                           intcon	equ	0xFF2
  8912                           intcon2	equ	0xFF1
  8913                           postinc0	equ	0xFEE
  8914                           fsr0h	equ	0xFEA
  8915                           fsr0l	equ	0xFE9
  8916                           wreg	equ	0xFE8
  8917                           fsr1h	equ	0xFE2
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           plusw2	equ	0xFDB
  8923                           fsr2h	equ	0xFDA
  8924                           fsr2l	equ	0xFD9
  8925                           status	equ	0xFD8
  8926                           
  8927 ;; *************** function _EUSART1_Receive_ISR *****************
  8928 ;; Defined at:
  8929 ;;		line 139 in file "UART.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;  data            1   11[COMRAM] unsigned char 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;		None               void
  8936 ;; Registers used:
  8937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8943 ;;      Params:         0       0       0       0       0       0       0
  8944 ;;      Locals:         1       0       0       0       0       0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0
  8946 ;;      Totals:         1       0       0       0       0       0       0
  8947 ;;Total ram usage:        1 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    2
  8950 ;; This function calls:
  8951 ;;		i2_UART_buff_put
  8952 ;; This function is called by:
  8953 ;;		_INTERRUPT_InterruptManager
  8954 ;; This function uses a non-reentrant model
  8955 ;;
  8956                           
  8957                           	psect	text57
  8958  001D48                     __ptext57:
  8959                           	opt stack 0
  8960  001D48                     _EUSART1_Receive_ISR:
  8961                           	opt stack 21
  8962                           
  8963                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  8964                           
  8965                           ;incstack = 0
  8966  001D48  A2AB               	btfss	4011,1,c	;volatile
  8967  001D4A  D002               	goto	i2l818
  8968                           
  8969                           ;UART.c: 143: RC1STAbits.CREN = 0;
  8970  001D4C  98AB               	bcf	4011,4,c	;volatile
  8971                           
  8972                           ;UART.c: 144: RC1STAbits.CREN = 1;
  8973  001D4E  88AB               	bsf	4011,4,c	;volatile
  8974  001D50                     i2l818:
  8975                           
  8976                           ;UART.c: 145: }
  8977                           ;UART.c: 146: unsigned char data = RCREG1;
  8978  001D50  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8979                           
  8980                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  8981  001D54  0E00               	movlw	low _input_buffer
  8982  001D56  6E07               	movwf	i2UART_buff_put@_this,c
  8983  001D58  0E03               	movlw	high _input_buffer
  8984  001D5A  6E08               	movwf	i2UART_buff_put@_this+1,c
  8985  001D5C  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8986  001D60  EC3C  F006         	call	i2_UART_buff_put	;wreg free
  8987  001D64  0012               	return		;funcret
  8988  001D66                     __end_of_EUSART1_Receive_ISR:
  8989                           	opt stack 0
  8990                           tosu	equ	0xFFF
  8991                           tosh	equ	0xFFE
  8992                           tosl	equ	0xFFD
  8993                           pclatu	equ	0xFFB
  8994                           pclath	equ	0xFFA
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodh	equ	0xFF4
  9000                           prodl	equ	0xFF3
  9001                           intcon	equ	0xFF2
  9002                           intcon2	equ	0xFF1
  9003                           postinc0	equ	0xFEE
  9004                           fsr0h	equ	0xFEA
  9005                           fsr0l	equ	0xFE9
  9006                           wreg	equ	0xFE8
  9007                           fsr1h	equ	0xFE2
  9008                           fsr1l	equ	0xFE1
  9009                           indf2	equ	0xFDF
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           plusw2	equ	0xFDB
  9013                           fsr2h	equ	0xFDA
  9014                           fsr2l	equ	0xFD9
  9015                           status	equ	0xFD8
  9016                           
  9017 ;; *************** function i2_UART_buff_put *****************
  9018 ;; Defined at:
  9019 ;;		line 68 in file "UART.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9022 ;;		 -> output_buffer(206), input_buffer(206), 
  9023 ;;  c               1    8[COMRAM] const unsigned char 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;		None
  9026 ;; Return value:  Size  Location     Type
  9027 ;;		None               void
  9028 ;; Registers used:
  9029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9030 ;; Tracked objects:
  9031 ;;		On entry : 0/0
  9032 ;;		On exit  : 0/0
  9033 ;;		Unchanged: 0/0
  9034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9035 ;;      Params:         3       0       0       0       0       0       0
  9036 ;;      Locals:         0       0       0       0       0       0       0
  9037 ;;      Temps:          2       0       0       0       0       0       0
  9038 ;;      Totals:         5       0       0       0       0       0       0
  9039 ;;Total ram usage:        5 bytes
  9040 ;; Hardware stack levels used:    1
  9041 ;; Hardware stack levels required when called:    1
  9042 ;; This function calls:
  9043 ;;		i2_UART_buff_modulo_inc
  9044 ;; This function is called by:
  9045 ;;		_EUSART1_Receive_ISR
  9046 ;; This function uses a non-reentrant model
  9047 ;;
  9048                           
  9049                           	psect	text58
  9050  000C78                     __ptext58:
  9051                           	opt stack 0
  9052  000C78                     i2_UART_buff_put:
  9053                           	opt stack 21
  9054                           
  9055                           ;UART.c: 69: if (_this->count < 200) {
  9056                           
  9057                           ;incstack = 0
  9058  000C78  EE20 F0CC          	lfsr	2,204
  9059  000C7C  5007               	movf	i2UART_buff_put@_this,w,c
  9060  000C7E  26D9               	addwf	fsr2l,f,c
  9061  000C80  5008               	movf	i2UART_buff_put@_this+1,w,c
  9062  000C82  22DA               	addwfc	fsr2h,f,c
  9063  000C84  0E01               	movlw	1
  9064  000C86  BEDB               	btfsc	plusw2,7,c
  9065  000C88  D007               	goto	i2l3452
  9066  000C8A  0E01               	movlw	1
  9067  000C8C  50DB               	movf	plusw2,w,c
  9068  000C8E  E13A               	bnz	i2l3458
  9069  000C90  0EC8               	movlw	200
  9070  000C92  5CDE               	subwf	postinc2,w,c
  9071  000C94  B0D8               	btfsc	status,0,c
  9072  000C96  D036               	goto	i2l3458
  9073  000C98                     i2l3452:
  9074                           
  9075                           ;UART.c: 70: _this->buf[_this->head] = c;
  9076  000C98  EE20 F0C8          	lfsr	2,200
  9077  000C9C  5007               	movf	i2UART_buff_put@_this,w,c
  9078  000C9E  26D9               	addwf	fsr2l,f,c
  9079  000CA0  5008               	movf	i2UART_buff_put@_this+1,w,c
  9080  000CA2  22DA               	addwfc	fsr2h,f,c
  9081  000CA4  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9082  000CA8  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9083  000CAC  500A               	movf	??i2_UART_buff_put,w,c
  9084  000CAE  2407               	addwf	i2UART_buff_put@_this,w,c
  9085  000CB0  6ED9               	movwf	fsr2l,c
  9086  000CB2  500B               	movf	??i2_UART_buff_put+1,w,c
  9087  000CB4  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9088  000CB6  6EDA               	movwf	fsr2h,c
  9089  000CB8  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9090                           
  9091                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  9092  000CBC  EE20 F0C8          	lfsr	2,200
  9093  000CC0  5007               	movf	i2UART_buff_put@_this,w,c
  9094  000CC2  26D9               	addwf	fsr2l,f,c
  9095  000CC4  5008               	movf	i2UART_buff_put@_this+1,w,c
  9096  000CC6  22DA               	addwfc	fsr2h,f,c
  9097  000CC8  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9098  000CCC  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9099  000CD0  0E00               	movlw	0
  9100  000CD2  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9101  000CD4  0EC8               	movlw	200
  9102  000CD6  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9103  000CD8  EC5F  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9104  000CDC  EE20 F0C8          	lfsr	2,200
  9105  000CE0  5007               	movf	i2UART_buff_put@_this,w,c
  9106  000CE2  26D9               	addwf	fsr2l,f,c
  9107  000CE4  5008               	movf	i2UART_buff_put@_this+1,w,c
  9108  000CE6  22DA               	addwfc	fsr2h,f,c
  9109  000CE8  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9110  000CEC  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9111                           
  9112                           ;UART.c: 72: ++_this->count;
  9113  000CF0  EE20 F0CC          	lfsr	2,204
  9114  000CF4  5007               	movf	i2UART_buff_put@_this,w,c
  9115  000CF6  26D9               	addwf	fsr2l,f,c
  9116  000CF8  5008               	movf	i2UART_buff_put@_this+1,w,c
  9117  000CFA  22DA               	addwfc	fsr2h,f,c
  9118  000CFC  2ADE               	incf	postinc2,f,c
  9119  000CFE  0E00               	movlw	0
  9120  000D00  22DD               	addwfc	postdec2,f,c
  9121                           
  9122                           ;UART.c: 73: } else {
  9123  000D02  0012               	return	
  9124  000D04                     i2l3458:
  9125                           
  9126                           ;UART.c: 74: _this->buf[_this->head] = c;
  9127  000D04  EE20 F0C8          	lfsr	2,200
  9128  000D08  5007               	movf	i2UART_buff_put@_this,w,c
  9129  000D0A  26D9               	addwf	fsr2l,f,c
  9130  000D0C  5008               	movf	i2UART_buff_put@_this+1,w,c
  9131  000D0E  22DA               	addwfc	fsr2h,f,c
  9132  000D10  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  9133  000D14  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  9134  000D18  500A               	movf	??i2_UART_buff_put,w,c
  9135  000D1A  2407               	addwf	i2UART_buff_put@_this,w,c
  9136  000D1C  6ED9               	movwf	fsr2l,c
  9137  000D1E  500B               	movf	??i2_UART_buff_put+1,w,c
  9138  000D20  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  9139  000D22  6EDA               	movwf	fsr2h,c
  9140  000D24  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  9141                           
  9142                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  9143  000D28  EE20 F0C8          	lfsr	2,200
  9144  000D2C  5007               	movf	i2UART_buff_put@_this,w,c
  9145  000D2E  26D9               	addwf	fsr2l,f,c
  9146  000D30  5008               	movf	i2UART_buff_put@_this+1,w,c
  9147  000D32  22DA               	addwfc	fsr2h,f,c
  9148  000D34  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9149  000D38  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9150  000D3C  0E00               	movlw	0
  9151  000D3E  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9152  000D40  0EC8               	movlw	200
  9153  000D42  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9154  000D44  EC5F  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9155  000D48  EE20 F0C8          	lfsr	2,200
  9156  000D4C  5007               	movf	i2UART_buff_put@_this,w,c
  9157  000D4E  26D9               	addwf	fsr2l,f,c
  9158  000D50  5008               	movf	i2UART_buff_put@_this+1,w,c
  9159  000D52  22DA               	addwfc	fsr2h,f,c
  9160  000D54  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9161  000D58  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9162                           
  9163                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  9164  000D5C  EE20 F0CA          	lfsr	2,202
  9165  000D60  5007               	movf	i2UART_buff_put@_this,w,c
  9166  000D62  26D9               	addwf	fsr2l,f,c
  9167  000D64  5008               	movf	i2UART_buff_put@_this+1,w,c
  9168  000D66  22DA               	addwfc	fsr2h,f,c
  9169  000D68  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  9170  000D6C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  9171  000D70  0E00               	movlw	0
  9172  000D72  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  9173  000D74  0EC8               	movlw	200
  9174  000D76  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  9175  000D78  EC5F  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  9176  000D7C  EE20 F0CA          	lfsr	2,202
  9177  000D80  5007               	movf	i2UART_buff_put@_this,w,c
  9178  000D82  26D9               	addwf	fsr2l,f,c
  9179  000D84  5008               	movf	i2UART_buff_put@_this+1,w,c
  9180  000D86  22DA               	addwfc	fsr2h,f,c
  9181  000D88  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9182  000D8C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9183  000D90  0012               	return	
  9184  000D92                     __end_ofi2_UART_buff_put:
  9185                           	opt stack 0
  9186                           tosu	equ	0xFFF
  9187                           tosh	equ	0xFFE
  9188                           tosl	equ	0xFFD
  9189                           pclatu	equ	0xFFB
  9190                           pclath	equ	0xFFA
  9191                           tblptru	equ	0xFF8
  9192                           tblptrh	equ	0xFF7
  9193                           tblptrl	equ	0xFF6
  9194                           tablat	equ	0xFF5
  9195                           prodh	equ	0xFF4
  9196                           prodl	equ	0xFF3
  9197                           intcon	equ	0xFF2
  9198                           intcon2	equ	0xFF1
  9199                           postinc0	equ	0xFEE
  9200                           fsr0h	equ	0xFEA
  9201                           fsr0l	equ	0xFE9
  9202                           wreg	equ	0xFE8
  9203                           fsr1h	equ	0xFE2
  9204                           fsr1l	equ	0xFE1
  9205                           indf2	equ	0xFDF
  9206                           postinc2	equ	0xFDE
  9207                           postdec2	equ	0xFDD
  9208                           plusw2	equ	0xFDB
  9209                           fsr2h	equ	0xFDA
  9210                           fsr2l	equ	0xFD9
  9211                           status	equ	0xFD8
  9212                           
  9213 ;; *************** function i2_UART_buff_modulo_inc *****************
  9214 ;; Defined at:
  9215 ;;		line 106 in file "UART.c"
  9216 ;; Parameters:    Size  Location     Type
  9217 ;;  value           2    0[COMRAM] const unsigned int 
  9218 ;;  modulus         2    2[COMRAM] const unsigned int 
  9219 ;; Auto vars:     Size  Location     Type
  9220 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9221 ;; Return value:  Size  Location     Type
  9222 ;;                  2    0[COMRAM] unsigned int 
  9223 ;; Registers used:
  9224 ;;		wreg, status,2, status,0
  9225 ;; Tracked objects:
  9226 ;;		On entry : 0/0
  9227 ;;		On exit  : 0/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9230 ;;      Params:         4       0       0       0       0       0       0
  9231 ;;      Locals:         2       0       0       0       0       0       0
  9232 ;;      Temps:          0       0       0       0       0       0       0
  9233 ;;      Totals:         6       0       0       0       0       0       0
  9234 ;;Total ram usage:        6 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; This function calls:
  9237 ;;		Nothing
  9238 ;; This function is called by:
  9239 ;;		i2_UART_buff_put
  9240 ;;		i2_UART_buff_get
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text59
  9245  001CBE                     __ptext59:
  9246                           	opt stack 0
  9247  001CBE                     i2_UART_buff_modulo_inc:
  9248                           	opt stack 21
  9249                           
  9250                           ;UART.c: 107: unsigned int my_value = value + 1;
  9251                           
  9252                           ;incstack = 0
  9253  001CBE  0E01               	movlw	1
  9254  001CC0  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9255  001CC2  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9256  001CC4  0E00               	movlw	0
  9257  001CC6  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9258  001CC8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9259                           
  9260                           ;UART.c: 108: if (my_value >= modulus) {
  9261  001CCA  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9262  001CCC  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9263  001CCE  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9264  001CD0  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9265  001CD2  A0D8               	btfss	status,0,c
  9266  001CD4  D004               	goto	i2l3084
  9267                           
  9268                           ;UART.c: 109: my_value = 0;
  9269  001CD6  0E00               	movlw	0
  9270  001CD8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9271  001CDA  0E00               	movlw	0
  9272  001CDC  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9273  001CDE                     i2l3084:
  9274                           
  9275                           ;UART.c: 110: }
  9276                           ;UART.c: 111: return (my_value);
  9277  001CDE  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9278  001CE2  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9279  001CE6  0012               	return	
  9280  001CE8                     __end_ofi2_UART_buff_modulo_inc:
  9281                           	opt stack 0
  9282                           tosu	equ	0xFFF
  9283                           tosh	equ	0xFFE
  9284                           tosl	equ	0xFFD
  9285                           pclatu	equ	0xFFB
  9286                           pclath	equ	0xFFA
  9287                           tblptru	equ	0xFF8
  9288                           tblptrh	equ	0xFF7
  9289                           tblptrl	equ	0xFF6
  9290                           tablat	equ	0xFF5
  9291                           prodh	equ	0xFF4
  9292                           prodl	equ	0xFF3
  9293                           intcon	equ	0xFF2
  9294                           intcon2	equ	0xFF1
  9295                           postinc0	equ	0xFEE
  9296                           fsr0h	equ	0xFEA
  9297                           fsr0l	equ	0xFE9
  9298                           wreg	equ	0xFE8
  9299                           fsr1h	equ	0xFE2
  9300                           fsr1l	equ	0xFE1
  9301                           indf2	equ	0xFDF
  9302                           postinc2	equ	0xFDE
  9303                           postdec2	equ	0xFDD
  9304                           plusw2	equ	0xFDB
  9305                           fsr2h	equ	0xFDA
  9306                           fsr2l	equ	0xFD9
  9307                           status	equ	0xFD8
  9308                           
  9309 ;; *************** function _ADC_ISR *****************
  9310 ;; Defined at:
  9311 ;;		line 128 in file "mcc_generated_files/adc.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;		None
  9316 ;; Return value:  Size  Location     Type
  9317 ;;		None               void
  9318 ;; Registers used:
  9319 ;;		None
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9325 ;;      Params:         0       0       0       0       0       0       0
  9326 ;;      Locals:         0       0       0       0       0       0       0
  9327 ;;      Temps:          0       0       0       0       0       0       0
  9328 ;;      Totals:         0       0       0       0       0       0       0
  9329 ;;Total ram usage:        0 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; This function calls:
  9332 ;;		Nothing
  9333 ;; This function is called by:
  9334 ;;		_INTERRUPT_InterruptManager
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text60
  9339  001E72                     __ptext60:
  9340                           	opt stack 0
  9341  001E72                     _ADC_ISR:
  9342                           	opt stack 23
  9343                           
  9344                           ;adc.c: 131: PIR1bits.ADIF = 0;
  9345                           
  9346                           ;incstack = 0
  9347  001E72  9C9E               	bcf	3998,6,c	;volatile
  9348  001E74  0012               	return		;funcret
  9349  001E76                     __end_of_ADC_ISR:
  9350                           	opt stack 0
  9351  0000                     tosu	equ	0xFFF
  9352                           tosh	equ	0xFFE
  9353                           tosl	equ	0xFFD
  9354                           pclatu	equ	0xFFB
  9355                           pclath	equ	0xFFA
  9356                           tblptru	equ	0xFF8
  9357                           tblptrh	equ	0xFF7
  9358                           tblptrl	equ	0xFF6
  9359                           tablat	equ	0xFF5
  9360                           prodh	equ	0xFF4
  9361                           prodl	equ	0xFF3
  9362                           intcon	equ	0xFF2
  9363                           intcon2	equ	0xFF1
  9364                           postinc0	equ	0xFEE
  9365                           fsr0h	equ	0xFEA
  9366                           fsr0l	equ	0xFE9
  9367                           wreg	equ	0xFE8
  9368                           fsr1h	equ	0xFE2
  9369                           fsr1l	equ	0xFE1
  9370                           indf2	equ	0xFDF
  9371                           postinc2	equ	0xFDE
  9372                           postdec2	equ	0xFDD
  9373                           plusw2	equ	0xFDB
  9374                           fsr2h	equ	0xFDA
  9375                           fsr2l	equ	0xFD9
  9376                           status	equ	0xFD8
  9377                           tosu	equ	0xFFF
  9378                           tosh	equ	0xFFE
  9379                           tosl	equ	0xFFD
  9380                           pclatu	equ	0xFFB
  9381                           pclath	equ	0xFFA
  9382                           tblptru	equ	0xFF8
  9383                           tblptrh	equ	0xFF7
  9384                           tblptrl	equ	0xFF6
  9385                           tablat	equ	0xFF5
  9386                           prodh	equ	0xFF4
  9387                           prodl	equ	0xFF3
  9388                           intcon	equ	0xFF2
  9389                           intcon2	equ	0xFF1
  9390                           postinc0	equ	0xFEE
  9391                           fsr0h	equ	0xFEA
  9392                           fsr0l	equ	0xFE9
  9393                           wreg	equ	0xFE8
  9394                           fsr1h	equ	0xFE2
  9395                           fsr1l	equ	0xFE1
  9396                           indf2	equ	0xFDF
  9397                           postinc2	equ	0xFDE
  9398                           postdec2	equ	0xFDD
  9399                           plusw2	equ	0xFDB
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404                           	psect	text61
  9405  000000                     __ptext61:
  9406                           	opt stack 0
  9407                           tosu	equ	0xFFF
  9408                           tosh	equ	0xFFE
  9409                           tosl	equ	0xFFD
  9410                           pclatu	equ	0xFFB
  9411                           pclath	equ	0xFFA
  9412                           tblptru	equ	0xFF8
  9413                           tblptrh	equ	0xFF7
  9414                           tblptrl	equ	0xFF6
  9415                           tablat	equ	0xFF5
  9416                           prodh	equ	0xFF4
  9417                           prodl	equ	0xFF3
  9418                           intcon	equ	0xFF2
  9419                           intcon2	equ	0xFF1
  9420                           postinc0	equ	0xFEE
  9421                           fsr0h	equ	0xFEA
  9422                           fsr0l	equ	0xFE9
  9423                           wreg	equ	0xFE8
  9424                           fsr1h	equ	0xFE2
  9425                           fsr1l	equ	0xFE1
  9426                           indf2	equ	0xFDF
  9427                           postinc2	equ	0xFDE
  9428                           postdec2	equ	0xFDD
  9429                           plusw2	equ	0xFDB
  9430                           fsr2h	equ	0xFDA
  9431                           fsr2l	equ	0xFD9
  9432                           status	equ	0xFD8
  9433                           
  9434                           	psect	rparam
  9435  0000                     tosu	equ	0xFFF
  9436                           tosh	equ	0xFFE
  9437                           tosl	equ	0xFFD
  9438                           pclatu	equ	0xFFB
  9439                           pclath	equ	0xFFA
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           intcon2	equ	0xFF1
  9448                           postinc0	equ	0xFEE
  9449                           fsr0h	equ	0xFEA
  9450                           fsr0l	equ	0xFE9
  9451                           wreg	equ	0xFE8
  9452                           fsr1h	equ	0xFE2
  9453                           fsr1l	equ	0xFE1
  9454                           indf2	equ	0xFDF
  9455                           postinc2	equ	0xFDE
  9456                           postdec2	equ	0xFDD
  9457                           plusw2	equ	0xFDB
  9458                           fsr2h	equ	0xFDA
  9459                           fsr2l	equ	0xFD9
  9460                           status	equ	0xFD8
  9461                           
  9462                           	psect	temp
  9463  000045                     btemp:
  9464                           	opt stack 0
  9465  000045                     	ds	1
  9466  0000                     int$flags	set	btemp
  9467                           tosu	equ	0xFFF
  9468                           tosh	equ	0xFFE
  9469                           tosl	equ	0xFFD
  9470                           pclatu	equ	0xFFB
  9471                           pclath	equ	0xFFA
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           intcon2	equ	0xFF1
  9480                           postinc0	equ	0xFEE
  9481                           fsr0h	equ	0xFEA
  9482                           fsr0l	equ	0xFE9
  9483                           wreg	equ	0xFE8
  9484                           fsr1h	equ	0xFE2
  9485                           fsr1l	equ	0xFE1
  9486                           indf2	equ	0xFDF
  9487                           postinc2	equ	0xFDE
  9488                           postdec2	equ	0xFDD
  9489                           plusw2	equ	0xFDB
  9490                           fsr2h	equ	0xFDA
  9491                           fsr2l	equ	0xFD9
  9492                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1010
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      68
    BANK0           160     28     145
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1395(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStop->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _receiveData->_CRCcheck
    _SYSTEM_Initialize->_begin
    _StartUp595->_Clear595
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   51654
                                             25 BANK0      3     3      0
                       _CoolingCheck
                       _CoolingStart
                        _CoolingStop
                         _PDUStartup
                 _PWM4_LoadDutyValue
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   28979
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8909
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                             38 COMRAM     1     1      0
                                              0 BANK0      4     4      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                             39 COMRAM     1     1      0
                                              0 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              7 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2    9355
                                              0 BANK0      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2478
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR2_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1463
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     599
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   12458
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    1621
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3174
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1720
                                              0 BANK0      2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    1621
                                             35 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    7502
                                             36 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    5637
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStop                                          0     0      0    1815
                 _PWM4_LoadDutyValue
                           _PotClear
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    3686
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    1871
                                             35 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1522
                                             35 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1454
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _PWM4_LoadDutyValue                                   4     2      2     293
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _CoolingCheck                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CoolingCheck
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _CoolingStop
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PWM4_LoadDutyValue
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1C      91       4       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     437       9        0.0%
DATA                 0      0     437      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Jun 17 13:23:05 2016

      __end_of_FastTransfer_buffer_flush 18B2                   i2_UART_buff_modulo_inc 1CBE  
                          ??_CoolingStop 0026                           ??_CoolingCheck 001B  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                         ??_CoolingStart 0028                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l473 1A96  
                                    l900 0DDA                                      l734 164C  
                                    l903 0E34                                      l399 145A  
                                    l736 1656                                      l587 0A1C  
                                    l908 1336                                      l909 1370  
                                    l787 14EE                             __CFG_CPB$OFF 000000  
                                    _PR2 000FBB                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0037                          __end_of_ADC_ISR 1E76  
   FastTransfer_buffer_flush@clearBuffer 0025                          _TMR2_Initialize 1DF6  
                        _PWM4_Initialize 1D82                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4002 0A14                                     l4006 1B02  
                                   l4016 1B30                                     l4032 1598  
                                   l4210 02BE                                     l4202 0264  
                                   l4044 15BE                                     l4060 15F0  
                                   l4046 15C6                                     l4038 15A8  
                                   l4206 0296                                     l4150 00D4  
                                   l4400 0E66                                     l4064 15FE  
                                   l4056 15E6                                     l4048 15CA  
                                   l4320 13E0                                     l4224 03F8  
                                   l4322 13EE                                     l4314 13BC  
                                   l4250 051A                                     l4242 04B2  
                                   l4226 03FE                                     l4218 035A  
                                   l4306 0754                                     l4170 01AA  
                                   l4154 0102                                     l4332 1428  
                                   l4316 13CA                                     l4252 0534  
                                   l4244 04CC                                     l4228 0412  
                                   l4172 01C2                                     l4334 1436  
                                   l4326 1404                                     l4254 054E  
                                   l4246 04E6                                     l4190 0234  
                                   l4174 01C8                                     l4158 0106  
                                   l4182 0202                                     l3712 1AC0  
                                   l4328 1412                                     l4256 059C  
                                   l4248 0500                                     l4370 106C  
                                   l4338 144C                                     l3706 1CB4  
                                   l4290 06AA                                     l4282 0642  
                                   l4258 05B8                                     l3722 1C8A  
                                   l3802 0780                                     l3716 1ADA  
                                   l3732 1C58                                     l3820 0F7C  
                                   l4292 06C4                                     l4284 065C  
                                   l4268 05C4                                     l4188 020E  
                                   l4604 1758                                     l4390 0E14  
                                   l4366 105C                                     l3742 0BEA  
                                   l4294 06DE                                     l4286 0676  
                                   l4454 1BA2                                     l4376 1086  
                                   l3920 0E92                                     l3728 1C48  
                                   l3824 0F86                                     l3736 0B7E  
                                   l4296 072C                                     l4288 0690  
                                   l3930 0F0E                                     l3922 0EB0  
                                   l4298 0748                                     l3932 0F2C  
                                   l3924 0ECE                                     l3772 1A80  
                                   l3780 1A9C                                     l3756 14EA  
                                   l3836 100A                                     l3852 1298  
                                   l3844 1212                                     l3766 1A6A  
                                   l3782 1AA2                                     l3950 0A86  
                                   l3928 0EF0                                     l3936 0F4A  
                                   l3960 0AF8                                     l3952 0AA0  
                   receiveData@crcHolder 00E8                                     l3866 1644  
                                   l3858 1618                                     l3970 08C0  
                                   l3954 0ABC                                     l3946 0A50  
                                   l4594 1736                                     l3980 0982  
                                   l3972 08E8                                     l3964 0B30  
                                   l3956 0AC8                                     l3948 0A6A  
                                   l3958 0AF2                                     l3984 0998  
                                   l3994 09EC                                     l3998 0A0C  
                                   _CRC8 1A64                                     u3020 147E  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u3060 11F2  
                                   u4100 1B8E                                     u3208 0A54  
                                   u3081 077E                                     u3218 0A6E  
                                   u3308 0908                                     u3228 0A8A  
                                   u3309 091C                                     u3318 0924  
                                   u3238 0AA4                                     u3319 0938  
                                   u4080 1370                                     u3328 0940  
                                   u3248 0ACC                                     u3329 0954  
                                   u3268 0B18                                     u3278 08C4  
                                   u3518 00DE                                     u3198 0A3A  
                                   u3279 08D8                                     u3519 00F2  
                                   u3298 08EC                                     u3618 01AE  
                                   u3538 010A                                     u3299 0900  
                                   u3731 02FE                                     u3539 011E  
                                   u3708 029A                                     u4277 1AC6  
                                   u3709 02AE                                     u3558 0128  
                                   u3559 013C                                     u3808 04D0  
                                   u3818 04EA                                     u3658 0212  
                                   u3578 0146                                     u3498 00AE  
                                   u3659 0226                                     u3579 015A  
                                   u3499 00C2                                     u3908 0660  
                                   u3828 0504                                     u3588 0160  
                                   u3589 0174                                     u3918 067A  
                                   u3838 051E                                     u3678 0238  
                                   u3598 017A                                     u3679 024E  
                                   u3599 018E                                     u3928 0694  
                                   u3848 0538                                     u3938 06AE  
                                   u3858 0552                                     u3698 0268  
                                   u3699 027C                                     u3948 06C8  
                                   u3868 05A0                                     u3788 049C  
                                   u3958 06E2                                     u3798 04B6  
                                   i2l63 004E                                     u3968 0730  
                                   u3888 062C                                     i2l65 005A  
                                   u3898 0646                                     i2l69 0064  
                                   _TMR1 000FCE                                     _TMR2 000FBC  
                                   _WPUB 000F61                                     _data 0084  
                                   _main 1700                 __end_of_EnableSlavePower 0F72  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 08C0                                     start 00A0  
                          __CFG_IESO$OFF 000000                             ___param_bank 000010  
         i2UART_buff_modulo_inc@my_value 0005                                    ?_CRC8 001B  
                       __end_of_CRCcheck 0A1E           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1E5A                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 1608  
                                  _EEADR 000FA9                                    _ANSB3 0079CB  
                                  _ANSB4 0079CC                                    _ANSD7 0079DF  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                                  _T2CON 000FBA                                    _LATB0 007C50  
                                  _LATA3 007C4B                                    _LATB3 007C53  
                                  _LATB4 007C54                                    _LATB5 007C55  
                                  _LATD4 007C64                                    _LATD5 007C65  
                                  _LATD6 007C66                                    _LATD7 007C67  
                         __CFG_DEBUG$OFF 000000                              ?_PDUStartup 0001  
                                  i2l818 1D50                                    _MCSOn 003C  
                                  i2l787 1580                          ___awdiv@counter 001F  
                     _PWM4_LoadDutyValue 1BA8                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                      __end_of_CoolingStop 1E30  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 1AAE  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1BDE                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       ??_writeRegisters 0024                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 1914                          _DATAEE_ReadByte 1E0A  
                         __CFG_EBTRB$OFF 000000                                    _group 0029  
                    ?_PWM4_LoadDutyValue 001B                       __CFG_MCLRE$EXTMCLR 000000  
                                  main@i 00EE                                    pclath 000FFA  
                                  tablat 000FF5                            ??_Receive_get 0026  
                   __size_of_crcBufS_get 00E2                                    plusw2 000FDB  
                         begin@stuffpeek 00E0                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                         __end_of_Clear595 1B36  
                         __CFG_HFOFST$ON 000000                          _TMR2_StartTimer 1E6A  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                   PotSetpoint@new_point 0024                             __end_of_CRC8 1AAE  
                        CRCcheck@SentCRC 00D5                          __initialization 17E8  
             __end_of_EUSART1_Initialize 1B72                             __end_of_main 1776  
                             _CurrentADC 006C                     ??_PWM4_LoadDutyValue 001D  
                             ToSend@what 00D5                                   ??_CRC8 001E  
                __end_of_PWM4_Initialize 1D9C                  __end_of_TMR2_Initialize 1E0A  
                              ??_ADC_ISR 0001              ?_INTERRUPT_InterruptManager 0001  
                   PotSetpoint@set_point 00D5                                   ??_main 0029  
                       __end_of_PotClear 13A6                            __activetblptr 000002  
                       __end_of_Send_put 1C3E                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                            ?_Receive_peek 0001  
                                 ?_begin 00D5                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                                   _CCPR4H 000F59  
                                 _CCPR4L 000F58                                   _EECON2 000FA7  
                       ___awdiv@dividend 001B                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                                 _T1GCON 000FCC                     __end_of_CoolingCheck 1E72  
                        i2_UART_buff_get 14F2                                   _RC1STA 000FAB  
                        i2_UART_buff_put 0C78                                   Delay@i 0020  
                                 i2l3084 1CDE                                   i2l3500 1C08  
                         __CFG_WDTEN$OFF 000000                                   i2l3452 0C98  
                                 i2l3472 157C              UART_buff_modulo_inc@modulus 001D  
                                 i2l3458 0D04                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
            __end_of_processPowerRequest 1460                                   _SPBRG1 000FAF  
                   __end_of_CoolingStart 1D48                                   _TX1STA 000FAC  
                                 _TRISB3 007C9B                                   _TRISB4 007C9C  
                                 _TRISB5 007C9D                                   _TXREG1 000FAD  
                    __size_of_PDUStartup 0054                           __CFG_XINST$OFF 000000  
                                 _ToSend 1D66                            ??_PotSetpoint 0026  
                    __end_of_Receive_get 1E4C                         crcBufS_get@_this 001B  
                           _CCPTMRS1bits 000F48              ??_FastTransfer_buffer_flush 0027  
                                 _Update 1E64                       __size_of_SetPin595 004E  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                              _CoolingStop 1E1E  
                                 _memset 1C3E                                   clear_0 17EE  
                                 clear_1 17FA                                   clear_2 1806  
                                 clear_3 1812                                   clear_4 181E  
                                 clear_5 182A                         ___awdiv@quotient 0021  
                                 main@UP 00F0                                   _rx_len 0043  
                       __end_of_sendData 0B5E                  __end_of_DATAEE_ReadByte 1E1E  
                           __pdataCOMRAM 0044                            Send_put@_data 0026  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0168                               _StartUp595 18B2  
           __end_of_UART_buff_modulo_inc 1CBE                  __end_of_TMR2_StartTimer 1E6E  
          __size_of_INTERRUPT_Initialize 000A                        _SYSTEM_Initialize 1776  
                             __accesstop 0060                  __end_of__initialization 1842  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 1AF8  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 1208  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 196E   __end_of_FastTransfer_buffer_modulo_inc 1C94  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1C6A  
                       ?_TMR2_Initialize 0001                         ?_PWM4_Initialize 0001  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0028  
                    __end_of_PotSetpoint 0E8E              __size_of_ComputeStorageData 00DC  
            PWM4_LoadDutyValue@dutyValue 001B                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                              _Currentcomp 0078  
                  __end_of_UART_buff_get 14F2                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 0C78                                ?_Clear595 0001  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 1584  
                __end_ofi2_UART_buff_put 0D92              __end_of_EUSART1_Receive_ISR 1D66  
              _FastTransfer_buffer_flush 1850                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                        __end_of_SetPin595 1A64  
              __end_of_SYSTEM_Initialize 17E8                   receiveData@holder_1395 00E5  
                    _addressErrorCounter 0090                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1E3E  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 1CE8                        begin@givenAddress 00D8  
                      ?_EnableSlavePower 0025                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0024                  __size_of_UART_buff_size 0016  
                              ?_PotClear 0001                                ?_Send_put 0001  
                     ??_EnableSlavePower 0027                     __size_of_receiveData 06B4  
                                ?_ToSend 00D5                       __CFG_CCP2MX$PORTC1 000000  
                                ?_Update 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  _CCP4CON 000F57  
                                _ADC_ISR 1E72                                  ?_memset 001B  
                             _crc_buffer 00C4                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0028  
                     UART_buff_put@_this 0021                               ??_Clear595 0028  
                       i2_UART_buff_size 1DE0              i2UART_buff_modulo_inc@value 0001  
                  __size_of_CoolingCheck 0004                                  _OSCCON2 000FD2  
                                _TBLPTRH 000FF7                                  _TBLPTRL 000FF6  
                                _TBLPTRU 000FF8                              ?_StartUp595 0001  
                      _Receive_available 1DB4             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 00D5  
                    _receiveArrayAddress 0098                    __size_of_CoolingStart 001E  
                       ?_TMR2_StartTimer 0001                       ?_Receive_available 001D  
                             begin@error 00D9                      ??_Receive_available 001F  
                              ?_sendData 0001                                  _Current 0060  
                      _alignErrorCounter 0092                          __CFG_PWRTEN$OFF 000000  
                             ??_PotClear 0024                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                     __end_of_PDUStartup 1A16                          __size_of_ToSend 001C  
                   __end_of_Receive_peek 1E3E                              _PotSetpoint 0D92  
                              _AKNAKsend 003B                          __size_of_Update 0006  
                                ___awdiv 1584                     _UART_buff_modulo_inc 1C94  
                                _calc_CS 003D                             _CoolingCheck 1E6E  
                                __pcinit 17E8                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 1700                                  __ptext1 1B72  
                                __ptext2 196E                                  __ptext3 0A1E  
                                __ptext4 1130                                  __ptext5 1850  
                                __ptext6 1D66                                  __ptext7 0758  
                                __ptext8 1C6A                                  __ptext9 00A4  
                           _CoolingStart 1D2A                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 1E4C  
              __end_of_Receive_available 1DCA                                _T2CONbits 000FBA  
                _FastTransfer_buffer_put 0758                    CRCcheck@calculatedCRC 00D6  
                     _EUSART1_Initialize 1B36                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                Clear595@i 00D5  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0072                     end_of_initialization 1842  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0036                                  postdec2 000FDD  
                    __size_of_StartUp595 0062                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 196E  
            __size_of_PWM4_LoadDutyValue 0036                             ?_CoolingStop 0001  
                       begin@stufftosend 00DA                      CRCcheck@arrayHolder 00D7  
                           SetPin595@Reg 001B                     ??_EUSART1_Initialize 0025  
                           SetPin595@pin 001D                   _dataAdressErrorCounter 0096  
                             _rx_address 0041                                _TRISCbits 000F94  
                              _TRISDbits 000F95                             begin@maxSize 00D7  
     __size_of_FastTransfer_buffer_flush 0062                    i2UART_buff_size@_this 0001  
                         _UART_buff_init 1D0C                           _UART_buff_peek 1CE8  
                         _UART_buff_size 1DCA                      __end_of_crcBufS_get 1054  
                __size_of_writeRegisters 007E                      __end_of_crcBufS_put 1208  
                      __size_of_CRCcheck 015E                            _moduleAddress 003F  
                             CRCcheck@rt 00DA             __size_of_processPowerRequest 00BA  
                         __end_of_ToSend 1D82             __end_of_INTERRUPT_Initialize 1E64  
                         __end_of_Update 1E6A                          _crcErrorCounter 0094  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1E76  
                         _ADC_Initialize 1D9C                ??_FastTransfer_buffer_put 0026  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 1C6A  
                      crcBufS_put@status 001F                             receiveData@r 00EC  
             __size_of_Receive_available 0016                             receiveData@u 00EA  
                    start_initialization 17E8          __size_of_PIN_MANAGER_Initialize 007A  
                  crcBufS_get@wantedTime 0025                    EnableSlavePower@slave 0027  
                      __size_of_Clear595 003E                                PotClear@x 0024  
                 __end_of_UART_buff_init 1D2A                   __end_of_UART_buff_peek 1D0C  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 1DE0  
                           ?_Receive_get 0001                                _SetPin595 1A16  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 000E  
                    DATAEE_ReadByte@bAdd 001B                 __end_ofi2_UART_buff_size 1DF6  
                               ??_ToSend 0028                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                                 ??_Update 0028  
                        crcBufS_get@time 001D                        __size_of_PotClear 00C8  
                      __size_of_Send_put 002E                              ?_respondECU 0001  
                 __end_of_ADC_Initialize 1DB4               __end_of_ComputeStorageData 1130  
                               ?_ADC_ISR 0001                                 ??_memset 0021  
              __size_of_EnableSlavePower 00E4                              __pbssCOMRAM 0029  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00D5  
                           ??_StartUp595 0028                 __size_of_PWM4_Initialize 001A  
               __size_of_TMR2_Initialize 0014                             _Receive_peek 1E30  
                    UART_buff_init@_this 0023                              _crcBufS_get 0F72  
                    UART_buff_peek@_this 001B                              _crcBufS_put 1130  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                             ?_SetPin595 001B                            ??_receiveData 00DC  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00D6  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                 _PIN_MANAGER_Initialize 1686                        __size_of_sendData 0140  
                           ?_PotSetpoint 0024                                __pintcode 0008  
                               ?___awdiv 001B                       __end_of_StartUp595 1914  
                        ?_ADC_Initialize 0001             ??_INTERRUPT_InterruptManager 000D  
                   i2UART_buff_get@_this 0007                     __size_of_CoolingStop 0012  
                               _BAUD1CON 000FB8                           __size_of_Delay 004A  
                         __size_of_begin 005A                 __size_of_DATAEE_ReadByte 0014  
                    __size_of_respondECU 0054                     _INTERRUPT_Initialize 1E5A  
                           _receiveArray 009C              processPowerRequest@powerSet 00D5  
                               _CRCcheck 08C0                                 _LATCbits 000F8B  
                         _writeRegisters 1608                      UART_buff_size@_this 001B  
                              _registers 0100                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                 __size_of_TMR2_StartTimer 0004  
    __size_of_INTERRUPT_InterruptManager 0098                                 i2u272_40 1BF8  
                               _PIR1bits 000F9E                                 i2u269_40 1510  
                    begin@stuffavailable 00DE                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0758  
         FastTransfer_buffer_flush@_this 0023                             PotSetpoint@x 00D7  
                           _input_buffer 0300                                _rx_buffer 0200  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                   i2UART_buff_put@_this 0007                                 _Clear595 1AF8  
                          _UART_buff_get 1460                            _UART_buff_put 0B5E  
                    _processPowerRequest 13A6                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002F                   __end_of_writeRegisters 1686  
                     PotSetpoint@new_pos 00D9                              ??_SetPin595 0021  
                   EnableSlavePower@onof 0025                 __size_ofi2_UART_buff_get 0092  
                      ??_TMR2_Initialize 001B                        ??_PWM4_Initialize 001B  
               __size_ofi2_UART_buff_put 011A                               _EECON1bits 000FA6  
                          ??_updateComms 0029                     __size_of_Receive_get 000E  
                               _PotClear 12DE                                 __Hrparam 0000  
                               _Send_put 1C10               __end_of_PWM4_LoadDutyValue 1BDE  
                               __Lrparam 0000                     ?_processPowerRequest 00D5  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00DC  
                       _EnableSlavePower 0E8E                               _ANSELCbits 000F3A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 00D7  
               crcBufS_status_put@status 001E                                 __ptext10 1C10  
                               __ptext11 0B5E                                 __ptext20 1DB4  
                               __ptext12 1E30                                 __ptext21 1DCA  
                               __ptext13 1CE8                               _T1GCONbits 000FCC  
                               __ptext30 1686                                 __ptext22 1A64  
                               __ptext14 08C0                                 __ptext31 1E4C  
                               __ptext23 13A6                                 __ptext15 1208  
                               __ptext40 1AF8                                 __ptext32 1E5A  
                               __ptext24 1776                                 __ptext16 0F72  
                               __ptext41 1608                                 __ptext33 1B36  
                               __ptext25 1914                                 __ptext17 1E3E  
                               __ptext50 1AAE                                 __ptext42 0E8E  
                               __ptext34 1D0C                                 __ptext26 1584  
                               __ptext18 1460                                 __ptext51 1BA8  
                               __ptext43 1A16                                 __ptext35 1C3E  
                               __ptext27 1DF6                                 __ptext19 1C94  
                               __ptext60 1E72                                 __ptext52 1E6E  
                               __ptext44 1054                                 __ptext36 1D9C  
                               __ptext28 1E6A                                 __ptext61 0000  
                               __ptext45 1E0A                                 __ptext37 19C2  
                               __ptext29 1D82                                 __ptext54 1BDE  
                               __ptext46 1E1E                                 __ptext38 1E64  
                               __ptext55 1DE0                                 __ptext47 1D2A  
                               __ptext39 18B2                                 __ptext56 14F2  
                               __ptext48 0D92                                 __ptext57 1D48  
                               __ptext49 12DE                                 __ptext58 0C78  
                               __ptext59 1CBE                            __size_of_CRC8 004A  
                               begin@ptr 00D5                  EUSART1_Receive_ISR@data 000C  
                        ?_writeRegisters 0001                            _returnAddress 0040  
                          __size_of_main 0076                              _receiveData 00A4  
                               _readwhat 002D                           _Transmit_stall 0044  
                               _sendData 0A1E                        ??_DATAEE_ReadByte 001B  
                      ?i2_UART_buff_size 0001                    ??_processPowerRequest 0028  
                             _RC1STAbits 000FAB                                 _prev_pos 002B  
                           ??_respondECU 0029                       ??i2_UART_buff_size 0003  
                      writeRegisters@val 0024                                 int$flags 0045  
                           _serial_write 0035                        ??_TMR2_StartTimer 001B  
                    __end_of_updateComms 1BA8       __end_of_INTERRUPT_InterruptManager 00A0  
             _INTERRUPT_InterruptManager 0008                     __size_of_PotSetpoint 00FC  
                    _EUSART1_Receive_ISR 1D48                        receiveData@holder 00E2  
                             _INTCONbits 000FF2                      ComputeStorageData@i 001E  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                     _ComputeStorageData 1054                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0031  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 19C2  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 001F  
           __end_of_EUSART1_Transmit_ISR 1C10                              _ring_buffer 0130  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 009A  
                            _serial_read 0033                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                          ?_CoolingCheck 0001                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024                     ??_ComputeStorageData 001C  
                          ?_CoolingStart 0001    FastTransfer_buffer_modulo_inc@modulus 001D  
                             _PDUStartup 19C2                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1396 00E9                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003E                          writeRegisters@i 0026  
             __end_of_crcBufS_status_put 12DE                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 1700         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B            updateComms@previousPowerState 0039  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 1B72  
