

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Apr 23 04:07:40 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	idataCOMRAM
    75  001BE4                     __pidataCOMRAM:
    76                           	opt stack 0
    77                           
    78                           ;initializer for _Transmit_stall
    79  001BE4  01                 	db	1
    80  0000                     _ANSELA	set	3896
    81  0000                     _ANSELB	set	3897
    82  0000                     _ANSELC	set	3898
    83  0000                     _ANSELCbits	set	3898
    84  0000                     _ANSELD	set	3899
    85  0000                     _ANSELE	set	3900
    86  0000                     _TMR1	set	4046
    87  0000                     _ADCON0	set	4034
    88  0000                     _ADCON0bits	set	4034
    89  0000                     _ADCON1	set	4033
    90  0000                     _ADCON2	set	4032
    91  0000                     _ADRESH	set	4036
    92  0000                     _ADRESL	set	4035
    93  0000                     _BAUD1CON	set	4024
    94  0000                     _EEADR	set	4009
    95  0000                     _EECON1bits	set	4006
    96  0000                     _EECON2	set	4007
    97  0000                     _EEDATA	set	4008
    98  0000                     _INTCON2bits	set	4081
    99  0000                     _INTCONbits	set	4082
   100  0000                     _IPR1bits	set	3999
   101  0000                     _LATA	set	3977
   102  0000                     _LATB	set	3978
   103  0000                     _LATC	set	3979
   104  0000                     _LATCbits	set	3979
   105  0000                     _LATD	set	3980
   106  0000                     _LATE	set	3981
   107  0000                     _OSCCON	set	4051
   108  0000                     _OSCCON2	set	4050
   109  0000                     _OSCTUNE	set	3995
   110  0000                     _PIE1bits	set	3997
   111  0000                     _PIR1bits	set	3998
   112  0000                     _RC1STA	set	4011
   113  0000                     _RC1STAbits	set	4011
   114  0000                     _RCONbits	set	4048
   115  0000                     _RCREG1	set	4014
   116  0000                     _SPBRG1	set	4015
   117  0000                     _SPBRGH1	set	4016
   118  0000                     _T1CON	set	4045
   119  0000                     _T1CONbits	set	4045
   120  0000                     _T1GCON	set	4044
   121  0000                     _T1GCONbits	set	4044
   122  0000                     _TABLAT	set	4085
   123  0000                     _TBLPTRH	set	4087
   124  0000                     _TBLPTRL	set	4086
   125  0000                     _TBLPTRU	set	4088
   126  0000                     _TMR1H	set	4047
   127  0000                     _TMR1L	set	4046
   128  0000                     _TRISA	set	3986
   129  0000                     _TRISB	set	3987
   130  0000                     _TRISC	set	3988
   131  0000                     _TRISCbits	set	3988
   132  0000                     _TRISD	set	3989
   133  0000                     _TRISE	set	3990
   134  0000                     _TX1STA	set	4012
   135  0000                     _TXREG1	set	4013
   136  0000                     _WPUB	set	3937
   137  0000                     _LATA3	set	31819
   138  0000                     _LATB0	set	31824
   139  0000                     _LATD4	set	31844
   140  0000                     _LATD5	set	31845
   141  0000                     _LATD6	set	31846
   142  0000                     _LATD7	set	31847
   143                           
   144                           ; #config settings
   145  0000                     
   146                           	psect	cinit
   147  001570                     __pcinit:
   148                           	opt stack 0
   149  001570                     start_initialization:
   150                           	opt stack 0
   151  001570                     __initialization:
   152                           	opt stack 0
   153                           
   154                           ; Clear objects allocated to BANK4 (206 bytes)
   155  001570  EE04  F000         	lfsr	0,__pbssBANK4
   156  001574  0ECE               	movlw	206
   157  001576                     clear_0:
   158  001576  6AEE               	clrf	postinc0,c
   159  001578  06E8               	decf	wreg,f,c
   160  00157A  E1FD               	bnz	clear_0
   161                           
   162                           ; Clear objects allocated to BANK3 (206 bytes)
   163  00157C  EE03  F000         	lfsr	0,__pbssBANK3
   164  001580  0ECE               	movlw	206
   165  001582                     clear_1:
   166  001582  6AEE               	clrf	postinc0,c
   167  001584  06E8               	decf	wreg,f,c
   168  001586  E1FD               	bnz	clear_1
   169                           
   170                           ; Clear objects allocated to BANK2 (200 bytes)
   171  001588  EE02  F000         	lfsr	0,__pbssBANK2
   172  00158C  0EC8               	movlw	200
   173  00158E                     clear_2:
   174  00158E  6AEE               	clrf	postinc0,c
   175  001590  06E8               	decf	wreg,f,c
   176  001592  E1FD               	bnz	clear_2
   177                           
   178                           ; Clear objects allocated to BANK1 (206 bytes)
   179  001594  EE01  F000         	lfsr	0,__pbssBANK1
   180  001598  0ECE               	movlw	206
   181  00159A                     clear_3:
   182  00159A  6AEE               	clrf	postinc0,c
   183  00159C  06E8               	decf	wreg,f,c
   184  00159E  E1FD               	bnz	clear_3
   185                           
   186                           ; Clear objects allocated to BANK0 (159 bytes)
   187  0015A0  EE00  F060         	lfsr	0,__pbssBANK0
   188  0015A4  0E9F               	movlw	159
   189  0015A6                     clear_4:
   190  0015A6  6AEE               	clrf	postinc0,c
   191  0015A8  06E8               	decf	wreg,f,c
   192  0015AA  E1FD               	bnz	clear_4
   193                           
   194                           ; Clear objects allocated to COMRAM (30 bytes)
   195  0015AC  EE00  F026         	lfsr	0,__pbssCOMRAM
   196  0015B0  0E1E               	movlw	30
   197  0015B2                     clear_5:
   198  0015B2  6AEE               	clrf	postinc0,c
   199  0015B4  06E8               	decf	wreg,f,c
   200  0015B6  E1FD               	bnz	clear_5
   201                           
   202                           ; Initialize objects allocated to COMRAM (1 bytes)
   203                           ; load TBLPTR registers with __pidataCOMRAM
   204  0015B8  0EE4               	movlw	low __pidataCOMRAM
   205  0015BA  6EF6               	movwf	tblptrl,c
   206  0015BC  0E1B               	movlw	high __pidataCOMRAM
   207  0015BE  6EF7               	movwf	tblptrh,c
   208  0015C0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   209  0015C2  6EF8               	movwf	tblptru,c
   210  0015C4  0009               	tblrd		*+	;fetch initializer
   211  0015C6  CFF5 F044          	movff	tablat,__pdataCOMRAM
   212  0015CA                     end_of_initialization:
   213                           	opt stack 0
   214  0015CA                     __end_of__initialization:
   215                           	opt stack 0
   216  0015CA  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   217  0015CC  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   218  0015CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   219  0015D0  6EF8               	movwf	tblptru,c
   220  0015D2  0100               	movlb	0
   221  0015D4  EFBF  F00D         	goto	_main	;jump to C main() function
   222                           tblptru	equ	0xFF8
   223                           tblptrh	equ	0xFF7
   224                           tblptrl	equ	0xFF6
   225                           tablat	equ	0xFF5
   226                           postinc0	equ	0xFEE
   227                           wreg	equ	0xFE8
   228                           
   229                           	psect	bssCOMRAM
   230  000026                     __pbssCOMRAM:
   231                           	opt stack 0
   232  000026                     _alignErrorCounter:
   233                           	opt stack 0
   234  000026                     	ds	2
   235  000028                     _group:
   236                           	opt stack 0
   237  000028                     	ds	2
   238  00002A                     _readwhat:
   239                           	opt stack 0
   240  00002A                     	ds	2
   241  00002C                     _receiveArrayAddress:
   242                           	opt stack 0
   243  00002C                     	ds	2
   244  00002E                     _sendStructAddress:
   245                           	opt stack 0
   246  00002E                     	ds	2
   247  000030                     _serial_available:
   248                           	opt stack 0
   249  000030                     	ds	2
   250  000032                     _serial_peek:
   251                           	opt stack 0
   252  000032                     	ds	2
   253  000034                     _serial_read:
   254                           	opt stack 0
   255  000034                     	ds	2
   256  000036                     _serial_write:
   257                           	opt stack 0
   258  000036                     	ds	2
   259  000038                     _timer1ReloadVal:
   260                           	opt stack 0
   261  000038                     	ds	2
   262  00003A                     updateComms@previousPowerState:
   263                           	opt stack 0
   264  00003A                     	ds	2
   265  00003C                     _AKNAKsend:
   266                           	opt stack 0
   267  00003C                     	ds	1
   268  00003D                     _calc_CS:
   269                           	opt stack 0
   270  00003D                     	ds	1
   271  00003E                     _maxDataAddress:
   272                           	opt stack 0
   273  00003E                     	ds	1
   274  00003F                     _moduleAddress:
   275                           	opt stack 0
   276  00003F                     	ds	1
   277  000040                     _returnAddress:
   278                           	opt stack 0
   279  000040                     	ds	1
   280  000041                     _rx_address:
   281                           	opt stack 0
   282  000041                     	ds	1
   283  000042                     _rx_array_inx:
   284                           	opt stack 0
   285  000042                     	ds	1
   286  000043                     _rx_len:
   287                           	opt stack 0
   288  000043                     	ds	1
   289                           tblptru	equ	0xFF8
   290                           tblptrh	equ	0xFF7
   291                           tblptrl	equ	0xFF6
   292                           tablat	equ	0xFF5
   293                           postinc0	equ	0xFEE
   294                           wreg	equ	0xFE8
   295                           
   296                           	psect	dataCOMRAM
   297  000044                     __pdataCOMRAM:
   298                           	opt stack 0
   299  000044                     _Transmit_stall:
   300                           	opt stack 0
   301  000044                     	ds	1
   302                           tblptru	equ	0xFF8
   303                           tblptrh	equ	0xFF7
   304                           tblptrl	equ	0xFF6
   305                           tablat	equ	0xFF5
   306                           postinc0	equ	0xFEE
   307                           wreg	equ	0xFE8
   308                           
   309                           	psect	bssBANK0
   310  000060                     __pbssBANK0:
   311                           	opt stack 0
   312  000060                     _registers:
   313                           	opt stack 0
   314  000060                     	ds	48
   315  000090                     _Current:
   316                           	opt stack 0
   317  000090                     	ds	12
   318  00009C                     _CurrentADC:
   319                           	opt stack 0
   320  00009C                     	ds	12
   321  0000A8                     _Currentcomp:
   322                           	opt stack 0
   323  0000A8                     	ds	12
   324  0000B4                     _data:
   325                           	opt stack 0
   326  0000B4                     	ds	12
   327  0000C0                     _addressErrorCounter:
   328                           	opt stack 0
   329  0000C0                     	ds	2
   330  0000C2                     _crcErrorCounter:
   331                           	opt stack 0
   332  0000C2                     	ds	2
   333  0000C4                     _dataAdressErrorCounter:
   334                           	opt stack 0
   335  0000C4                     	ds	2
   336  0000C6                     _receiveArray:
   337                           	opt stack 0
   338  0000C6                     	ds	40
   339  0000EE                     _crc_buffer:
   340                           	opt stack 0
   341  0000EE                     	ds	17
   342                           tblptru	equ	0xFF8
   343                           tblptrh	equ	0xFF7
   344                           tblptrl	equ	0xFF6
   345                           tablat	equ	0xFF5
   346                           postinc0	equ	0xFEE
   347                           wreg	equ	0xFE8
   348                           
   349                           	psect	bssBANK1
   350  000100                     __pbssBANK1:
   351                           	opt stack 0
   352  000100                     _ring_buffer:
   353                           	opt stack 0
   354  000100                     	ds	206
   355                           tblptru	equ	0xFF8
   356                           tblptrh	equ	0xFF7
   357                           tblptrl	equ	0xFF6
   358                           tablat	equ	0xFF5
   359                           postinc0	equ	0xFEE
   360                           wreg	equ	0xFE8
   361                           
   362                           	psect	bssBANK2
   363  000200                     __pbssBANK2:
   364                           	opt stack 0
   365  000200                     _rx_buffer:
   366                           	opt stack 0
   367  000200                     	ds	200
   368                           tblptru	equ	0xFF8
   369                           tblptrh	equ	0xFF7
   370                           tblptrl	equ	0xFF6
   371                           tablat	equ	0xFF5
   372                           postinc0	equ	0xFEE
   373                           wreg	equ	0xFE8
   374                           
   375                           	psect	bssBANK3
   376  000300                     __pbssBANK3:
   377                           	opt stack 0
   378  000300                     _input_buffer:
   379                           	opt stack 0
   380  000300                     	ds	206
   381                           tblptru	equ	0xFF8
   382                           tblptrh	equ	0xFF7
   383                           tblptrl	equ	0xFF6
   384                           tablat	equ	0xFF5
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           
   388                           	psect	bssBANK4
   389  000400                     __pbssBANK4:
   390                           	opt stack 0
   391  000400                     _output_buffer:
   392                           	opt stack 0
   393  000400                     	ds	206
   394                           tblptru	equ	0xFF8
   395                           tblptrh	equ	0xFF7
   396                           tblptrl	equ	0xFF6
   397                           tablat	equ	0xFF5
   398                           postinc0	equ	0xFEE
   399                           wreg	equ	0xFE8
   400                           
   401                           	psect	cstackBANK1
   402  0001CE                     __pcstackBANK1:
   403                           	opt stack 0
   404  0001CE                     ??_FastTransfer_buffer_put:
   405  0001CE                     begin@ptr:
   406                           	opt stack 0
   407  0001CE                     FastTransfer_buffer_flush@_this:
   408                           	opt stack 0
   409  0001CE                     crcBufS_get@wantedTime:
   410                           	opt stack 0
   411  0001CE                     EnableSlavePower@onof:
   412                           	opt stack 0
   413  0001CE                     writeRegisters@val:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0x0
   417  0001CE                     	ds	2
   418  0001D0                     begin@maxSize:
   419                           	opt stack 0
   420  0001D0                     CRCcheck@SentCRC:
   421                           	opt stack 0
   422  0001D0                     ToSend@what:
   423                           	opt stack 0
   424  0001D0                     FastTransfer_buffer_flush@clearBuffer:
   425                           	opt stack 0
   426  0001D0                     writeRegisters@i:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x2
   430  0001D0                     	ds	1
   431  0001D1                     begin@givenAddress:
   432                           	opt stack 0
   433  0001D1                     CRCcheck@calculatedCRC:
   434                           	opt stack 0
   435                           
   436                           ; 1 bytes @ 0x3
   437  0001D1                     	ds	1
   438  0001D2                     ??_sendData:
   439  0001D2                     begin@error:
   440                           	opt stack 0
   441  0001D2                     processPowerRequest@powerSet:
   442                           	opt stack 0
   443  0001D2                     CRCcheck@arrayHolder:
   444                           	opt stack 0
   445                           
   446                           ; 3 bytes @ 0x4
   447  0001D2                     	ds	1
   448  0001D3                     sendData@whereToSend:
   449                           	opt stack 0
   450  0001D3                     begin@stufftosend:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x5
   454  0001D3                     	ds	1
   455  0001D4                     sendData@CS:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x6
   459  0001D4                     	ds	1
   460  0001D5                     begin@stufftoreceive:
   461                           	opt stack 0
   462  0001D5                     sendData@i:
   463                           	opt stack 0
   464  0001D5                     CRCcheck@rt:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0x7
   468  0001D5                     	ds	2
   469  0001D7                     ??_receiveData:
   470  0001D7                     begin@stuffavailable:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x9
   474  0001D7                     	ds	2
   475  0001D9                     begin@stuffpeek:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0xB
   479  0001D9                     	ds	4
   480  0001DD                     receiveData@holder:
   481                           	opt stack 0
   482                           
   483                           ; 3 bytes @ 0xF
   484  0001DD                     	ds	3
   485  0001E0                     receiveData@holder_1238:
   486                           	opt stack 0
   487                           
   488                           ; 3 bytes @ 0x12
   489  0001E0                     	ds	3
   490  0001E3                     receiveData@crcHolder:
   491                           	opt stack 0
   492                           
   493                           ; 1 bytes @ 0x15
   494  0001E3                     	ds	1
   495  0001E4                     receiveData@crcHolder_1239:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x16
   499  0001E4                     	ds	1
   500  0001E5                     receiveData@u:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x17
   504  0001E5                     	ds	2
   505  0001E7                     receiveData@r:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x19
   509  0001E7                     	ds	2
   510                           tblptru	equ	0xFF8
   511                           tblptrh	equ	0xFF7
   512                           tblptrl	equ	0xFF6
   513                           tablat	equ	0xFF5
   514                           postinc0	equ	0xFEE
   515                           wreg	equ	0xFE8
   516                           
   517                           	psect	cstackBANK0
   518  0000FF                     __pcstackBANK0:
   519                           	opt stack 0
   520  0000FF                     ToSend@where:
   521                           	opt stack 0
   522  0000FF                     Send_put@_data:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x0
   526  0000FF                     	ds	1
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           
   534                           	psect	cstackCOMRAM
   535  000001                     __pcstackCOMRAM:
   536                           	opt stack 0
   537  000001                     ?i2_UART_buff_size:
   538                           	opt stack 0
   539  000001                     ?i2_UART_buff_modulo_inc:
   540                           	opt stack 0
   541  000001                     i2UART_buff_size@_this:
   542                           	opt stack 0
   543  000001                     i2UART_buff_modulo_inc@value:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x0
   547  000001                     	ds	2
   548  000003                     i2UART_buff_modulo_inc@modulus:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x2
   552  000003                     	ds	2
   553  000005                     i2UART_buff_modulo_inc@my_value:
   554                           	opt stack 0
   555                           
   556                           ; 2 bytes @ 0x4
   557  000005                     	ds	2
   558  000007                     i2UART_buff_put@_this:
   559                           	opt stack 0
   560  000007                     i2UART_buff_get@_this:
   561                           	opt stack 0
   562                           
   563                           ; 2 bytes @ 0x6
   564  000007                     	ds	2
   565  000009                     ??i2_UART_buff_get:
   566  000009                     i2UART_buff_put@c:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x8
   570  000009                     	ds	1
   571  00000A                     ??i2_UART_buff_put:
   572                           
   573                           ; 0 bytes @ 0x9
   574  00000A                     	ds	1
   575  00000B                     i2UART_buff_get@c:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0xA
   579  00000B                     	ds	1
   580  00000C                     EUSART1_Receive_ISR@data:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0xB
   584  00000C                     	ds	1
   585  00000D                     ??_INTERRUPT_InterruptManager:
   586                           
   587                           ; 0 bytes @ 0xC
   588  00000D                     	ds	14
   589  00001B                     ?_FastTransfer_buffer_modulo_inc:
   590                           	opt stack 0
   591  00001B                     ?_UART_buff_modulo_inc:
   592                           	opt stack 0
   593  00001B                     ?_UART_buff_size:
   594                           	opt stack 0
   595  00001B                     ?___awdiv:
   596                           	opt stack 0
   597  00001B                     DATAEE_ReadByte@bAdd:
   598                           	opt stack 0
   599  00001B                     CRC8@data:
   600                           	opt stack 0
   601  00001B                     FastTransfer_buffer_modulo_inc@value:
   602                           	opt stack 0
   603  00001B                     crcBufS_put@_this:
   604                           	opt stack 0
   605  00001B                     crcBufS_status_put@_this:
   606                           	opt stack 0
   607  00001B                     crcBufS_get@_this:
   608                           	opt stack 0
   609  00001B                     SetPin595@Reg:
   610                           	opt stack 0
   611  00001B                     UART_buff_size@_this:
   612                           	opt stack 0
   613  00001B                     UART_buff_modulo_inc@value:
   614                           	opt stack 0
   615  00001B                     UART_buff_peek@_this:
   616                           	opt stack 0
   617  00001B                     ___awdiv@dividend:
   618                           	opt stack 0
   619  00001B                     memset@p1:
   620                           	opt stack 0
   621  00001B                     Delay@wait:
   622                           	opt stack 0
   623                           
   624                           ; 4 bytes @ 0x1A
   625  00001B                     	ds	1
   626  00001C                     ??_ComputeStorageData:
   627                           
   628                           ; 0 bytes @ 0x1B
   629  00001C                     	ds	1
   630  00001D                     ??_UART_buff_peek:
   631  00001D                     ?_Receive_available:
   632                           	opt stack 0
   633  00001D                     CRC8@len:
   634                           	opt stack 0
   635  00001D                     crcBufS_put@address:
   636                           	opt stack 0
   637  00001D                     crcBufS_status_put@time:
   638                           	opt stack 0
   639  00001D                     crcBufS_get@time:
   640                           	opt stack 0
   641  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   642                           	opt stack 0
   643  00001D                     SetPin595@pin:
   644                           	opt stack 0
   645  00001D                     UART_buff_modulo_inc@modulus:
   646                           	opt stack 0
   647  00001D                     ___awdiv@divisor:
   648                           	opt stack 0
   649  00001D                     memset@c:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x1C
   653  00001D                     	ds	1
   654  00001E                     CRC8@sum:
   655                           	opt stack 0
   656  00001E                     crcBufS_put@oldCRC:
   657                           	opt stack 0
   658  00001E                     crcBufS_status_put@status:
   659                           	opt stack 0
   660  00001E                     crcBufS_get@space:
   661                           	opt stack 0
   662  00001E                     ComputeStorageData@i:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x1D
   666  00001E                     	ds	1
   667  00001F                     ??_Delay:
   668  00001F                     ??_crcBufS_get:
   669  00001F                     ??_crcBufS_status_put:
   670  00001F                     CRC8@extract:
   671                           	opt stack 0
   672  00001F                     crcBufS_put@status:
   673                           	opt stack 0
   674  00001F                     ___awdiv@counter:
   675                           	opt stack 0
   676  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   677                           	opt stack 0
   678  00001F                     SetPin595@value:
   679                           	opt stack 0
   680  00001F                     UART_buff_modulo_inc@my_value:
   681                           	opt stack 0
   682  00001F                     memset@n:
   683                           	opt stack 0
   684                           
   685                           ; 2 bytes @ 0x1E
   686  00001F                     	ds	1
   687  000020                     ??_crcBufS_put:
   688  000020                     CRC8@tempI:
   689                           	opt stack 0
   690  000020                     ___awdiv@sign:
   691                           	opt stack 0
   692  000020                     Delay@i:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0x1F
   696  000020                     	ds	1
   697  000021                     ??_SetPin595:
   698  000021                     CRC8@crc:
   699                           	opt stack 0
   700  000021                     FastTransfer_buffer_put@_this:
   701                           	opt stack 0
   702  000021                     UART_buff_put@_this:
   703                           	opt stack 0
   704  000021                     UART_buff_get@_this:
   705                           	opt stack 0
   706  000021                     ___awdiv@quotient:
   707                           	opt stack 0
   708  000021                     memset@p:
   709                           	opt stack 0
   710                           
   711                           ; 2 bytes @ 0x20
   712  000021                     	ds	2
   713  000023                     ??_UART_buff_get:
   714  000023                     FastTransfer_buffer_put@towhere:
   715                           	opt stack 0
   716  000023                     UART_buff_put@c:
   717                           	opt stack 0
   718  000023                     crcBufS_status_put@wantedTime:
   719                           	opt stack 0
   720  000023                     UART_buff_init@_this:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x22
   724  000023                     	ds	1
   725  000024                     ??_UART_buff_put:
   726  000024                     FastTransfer_buffer_put@towhat:
   727                           	opt stack 0
   728  000024                     Clear595@i:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x23
   732  000024                     	ds	1
   733  000025                     EnableSlavePower@slave:
   734                           	opt stack 0
   735  000025                     UART_buff_get@c:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x24
   739  000025                     	ds	1
   740  000026                     tblptru	equ	0xFF8
   741                           tblptrh	equ	0xFF7
   742                           tblptrl	equ	0xFF6
   743                           tablat	equ	0xFF5
   744                           postinc0	equ	0xFEE
   745                           wreg	equ	0xFE8
   746                           
   747                           ; 0 bytes @ 0x25
   748 ;;
   749 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   750 ;;
   751 ;; *************** function _main *****************
   752 ;; Defined at:
   753 ;;		line 9 in file "main.c"
   754 ;; Parameters:    Size  Location     Type
   755 ;;		None
   756 ;; Auto vars:     Size  Location     Type
   757 ;;		None
   758 ;; Return value:  Size  Location     Type
   759 ;;		None               void
   760 ;; Registers used:
   761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   767 ;;      Params:         0       0       0       0       0       0       0
   768 ;;      Locals:         0       0       0       0       0       0       0
   769 ;;      Temps:          0       0       0       0       0       0       0
   770 ;;      Totals:         0       0       0       0       0       0       0
   771 ;;Total ram usage:        0 bytes
   772 ;; Hardware stack levels required when called:   10
   773 ;; This function calls:
   774 ;;		_PDUStartup
   775 ;;		_SYSTEM_Initialize
   776 ;;		_updateComms
   777 ;; This function is called by:
   778 ;;		Startup code after reset
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           	psect	text0
   783  001B7E                     __ptext0:
   784                           	opt stack 0
   785  001B7E                     _main:
   786                           	opt stack 21
   787                           
   788                           ;main.c: 11: SYSTEM_Initialize();
   789                           
   790                           ;incstack = 0
   791  001B7E  ECEC  F00A         	call	_SYSTEM_Initialize	;wreg free
   792                           
   793                           ;main.c: 12: PDUStartup();
   794  001B82  EC84  F00B         	call	_PDUStartup	;wreg free
   795                           
   796                           ;main.c: 30: (INTCONbits.GIE = 1);
   797  001B86  8EF2               	bsf	intcon,7,c	;volatile
   798                           
   799                           ;main.c: 33: (INTCONbits.PEIE = 1);
   800  001B88  8CF2               	bsf	intcon,6,c	;volatile
   801                           
   802                           ;main.c: 41: LATCbits.LATC5 = 0;
   803  001B8A  9A8B               	bcf	3979,5,c	;volatile
   804  001B8C                     l4005:
   805                           
   806                           ;main.c: 49: updateComms();
   807  001B8C  EC98  F00C         	call	_updateComms	;wreg free
   808  001B90  D7FD               	goto	l4005
   809  001B92                     __end_of_main:
   810                           	opt stack 0
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           intcon	equ	0xFF2
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           
   819 ;; *************** function _updateComms *****************
   820 ;; Defined at:
   821 ;;		line 21 in file "Communications.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;		None
   826 ;; Return value:  Size  Location     Type
   827 ;;		None               void
   828 ;; Registers used:
   829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   835 ;;      Params:         0       0       0       0       0       0       0
   836 ;;      Locals:         0       0       0       0       0       0       0
   837 ;;      Temps:          0       0       0       0       0       0       0
   838 ;;      Totals:         0       0       0       0       0       0       0
   839 ;;Total ram usage:        0 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    9
   842 ;; This function calls:
   843 ;;		_processPowerRequest
   844 ;;		_receiveData
   845 ;;		_respondECU
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text1
   852  001930                     __ptext1:
   853                           	opt stack 0
   854  001930                     _updateComms:
   855                           	opt stack 21
   856                           
   857                           ;Communications.c: 22: if (receiveData()) {
   858                           
   859                           ;incstack = 0
   860  001930  EC52  F000         	call	_receiveData	;wreg free
   861  001934  0900               	iorlw	0
   862  001936  B4D8               	btfsc	status,2,c
   863  001938  0012               	return	
   864                           
   865                           ;Communications.c: 23: static int previousPowerState;
   866                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   867  00193A  503A               	movf	updateComms@previousPowerState,w,c
   868  00193C  0100               	movlb	0	; () banked
   869  00193E  19C8               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   870  001940  E105               	bnz	u3780
   871  001942  503B               	movf	updateComms@previousPowerState+1,w,c
   872  001944  0100               	movlb	0	; () banked
   873  001946  19C9               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
   874  001948  B4D8               	btfsc	status,2,c
   875  00194A  D00A               	goto	l3881
   876  00194C                     u3780:
   877                           
   878                           ; BSR set to: 0
   879                           ;Communications.c: 25: previousPowerState = receiveArray[1];
   880  00194C  C0C8  F03A         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
   881  001950  C0C9  F03B         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
   882                           
   883                           ; BSR set to: 0
   884                           ;Communications.c: 26: processPowerRequest(previousPowerState);
   885  001954  C03A  F1D2         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
   886  001958  C03B  F1D3         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
   887  00195C  ECFE  F008         	call	_processPowerRequest	;wreg free
   888  001960                     l3881:
   889                           
   890                           ;Communications.c: 27: }
   891                           ;Communications.c: 28: respondECU();
   892  001960  ECDF  F00B         	call	_respondECU	;wreg free
   893  001964  0012               	return	
   894  001966                     __end_of_updateComms:
   895                           	opt stack 0
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           intcon	equ	0xFF2
   901                           postinc0	equ	0xFEE
   902                           wreg	equ	0xFE8
   903                           status	equ	0xFD8
   904                           
   905 ;; *************** function _respondECU *****************
   906 ;; Defined at:
   907 ;;		line 48 in file "Communications.c"
   908 ;; Parameters:    Size  Location     Type
   909 ;;		None
   910 ;; Auto vars:     Size  Location     Type
   911 ;;		None
   912 ;; Return value:  Size  Location     Type
   913 ;;		None               void
   914 ;; Registers used:
   915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   921 ;;      Params:         0       0       0       0       0       0       0
   922 ;;      Locals:         0       0       0       0       0       0       0
   923 ;;      Temps:          0       0       0       0       0       0       0
   924 ;;      Totals:         0       0       0       0       0       0       0
   925 ;;Total ram usage:        0 bytes
   926 ;; Hardware stack levels used:    1
   927 ;; Hardware stack levels required when called:    8
   928 ;; This function calls:
   929 ;;		_Delay
   930 ;;		_ToSend
   931 ;;		_sendData
   932 ;; This function is called by:
   933 ;;		_updateComms
   934 ;; This function uses a non-reentrant model
   935 ;;
   936                           
   937                           	psect	text2
   938  0017BE                     __ptext2:
   939                           	opt stack 0
   940  0017BE                     _respondECU:
   941                           	opt stack 21
   942                           
   943                           ;Communications.c: 49: LATCbits.LATC5 = 1;
   944                           
   945                           ;incstack = 0
   946  0017BE  8A8B               	bsf	3979,5,c	;volatile
   947                           
   948                           ;Communications.c: 50: ToSend(0, 5);
   949  0017C0  0E00               	movlw	0
   950  0017C2  0101               	movlb	1	; () banked
   951  0017C4  6FD1               	movwf	(ToSend@what+1)& (0+255),b
   952  0017C6  0E05               	movlw	5
   953  0017C8  6FD0               	movwf	ToSend@what& (0+255),b
   954  0017CA  0E00               	movlw	0
   955  0017CC  EC65  F00D         	call	_ToSend
   956                           
   957                           ;Communications.c: 51: ToSend(9, 5);
   958  0017D0  0E00               	movlw	0
   959  0017D2  0101               	movlb	1	; () banked
   960  0017D4  6FD1               	movwf	(ToSend@what+1)& (0+255),b
   961  0017D6  0E05               	movlw	5
   962  0017D8  6FD0               	movwf	ToSend@what& (0+255),b
   963  0017DA  0E09               	movlw	9
   964  0017DC  EC65  F00D         	call	_ToSend
   965                           
   966                           ;Communications.c: 52: Delay(5);
   967  0017E0  0E05               	movlw	5
   968  0017E2  6E1B               	movwf	Delay@wait,c
   969  0017E4  0E00               	movlw	0
   970  0017E6  6E1C               	movwf	Delay@wait+1,c
   971  0017E8  0E00               	movlw	0
   972  0017EA  6E1D               	movwf	Delay@wait+2,c
   973  0017EC  0E00               	movlw	0
   974  0017EE  6E1E               	movwf	Delay@wait+3,c
   975  0017F0  EC55  F00C         	call	_Delay	;wreg free
   976                           
   977                           ;Communications.c: 54: sendData(1);
   978  0017F4  0E01               	movlw	1
   979  0017F6  EC11  F005         	call	_sendData
   980                           
   981                           ;Communications.c: 55: Delay(3);
   982  0017FA  0E03               	movlw	3
   983  0017FC  6E1B               	movwf	Delay@wait,c
   984  0017FE  0E00               	movlw	0
   985  001800  6E1C               	movwf	Delay@wait+1,c
   986  001802  0E00               	movlw	0
   987  001804  6E1D               	movwf	Delay@wait+2,c
   988  001806  0E00               	movlw	0
   989  001808  6E1E               	movwf	Delay@wait+3,c
   990  00180A  EC55  F00C         	call	_Delay	;wreg free
   991                           
   992                           ;Communications.c: 56: LATCbits.LATC5 = 0;
   993  00180E  9A8B               	bcf	3979,5,c	;volatile
   994  001810  0012               	return		;funcret
   995  001812                     __end_of_respondECU:
   996                           	opt stack 0
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           intcon	equ	0xFF2
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           status	equ	0xFD8
  1005                           
  1006 ;; *************** function _sendData *****************
  1007 ;; Defined at:
  1008 ;;		line 53 in file "FastTransfer.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  whereToSend     1    wreg     unsigned char 
  1011 ;; Auto vars:     Size  Location     Type
  1012 ;;  whereToSend     1    5[BANK1 ] unsigned char 
  1013 ;;  i               2    7[BANK1 ] int 
  1014 ;;  CS              1    6[BANK1 ] unsigned char 
  1015 ;; Return value:  Size  Location     Type
  1016 ;;		None               void
  1017 ;; Registers used:
  1018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1019 ;; Tracked objects:
  1020 ;;		On entry : 0/0
  1021 ;;		On exit  : 0/0
  1022 ;;		Unchanged: 0/0
  1023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1024 ;;      Params:         0       0       0       0       0       0       0
  1025 ;;      Locals:         0       0       4       0       0       0       0
  1026 ;;      Temps:          0       0       1       0       0       0       0
  1027 ;;      Totals:         0       0       5       0       0       0       0
  1028 ;;Total ram usage:        5 bytes
  1029 ;; Hardware stack levels used:    1
  1030 ;; Hardware stack levels required when called:    7
  1031 ;; This function calls:
  1032 ;;		Absolute function
  1033 ;;		_CRC8
  1034 ;;		_FastTransfer_buffer_flush
  1035 ;;		_Send_put
  1036 ;;		_crcBufS_put
  1037 ;; This function is called by:
  1038 ;;		_respondECU
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text3
  1043  000A22                     __ptext3:
  1044                           	opt stack 0
  1045  000A22                     _sendData:
  1046                           	opt stack 21
  1047                           
  1048                           ;incstack = 0
  1049                           ;sendData@whereToSend stored from wreg
  1050  000A22  0101               	movlb	1	; () banked
  1051  000A24  6FD3               	movwf	sendData@whereToSend& (0+255),b
  1052                           
  1053                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1054  000A26  C02E  F01B         	movff	_sendStructAddress,CRC8@data
  1055  000A2A  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1056  000A2E  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1057  000A32  EC30  F00C         	call	_CRC8	;wreg free
  1058  000A36  0101               	movlb	1	; () banked
  1059  000A38  6FD4               	movwf	sendData@CS& (0+255),b
  1060                           
  1061                           ; BSR set to: 1
  1062                           ;FastTransfer.c: 58: serial_write(0x06);
  1063  000A3A  D801               	call	u3008
  1064  000A3C  D00B               	goto	l3543
  1065  000A3E                     u3008:
  1066  000A3E  0005               	push	
  1067  000A40  6EFA               	movwf	pclath,c
  1068  000A42  5036               	movf	_serial_write,w,c
  1069  000A44  6EFD               	movwf	tosl,c
  1070  000A46  5037               	movf	_serial_write+1,w,c
  1071  000A48  6EFE               	movwf	tosh,c
  1072  000A4A  50F8               	movf	tblptru,w,c
  1073  000A4C  6EFF               	movwf	tosu,c
  1074  000A4E  50FA               	movf	pclath,w,c
  1075  000A50  0E06               	movlw	6
  1076  000A52  0012               	return		;indir
  1077  000A54                     l3543:
  1078                           
  1079                           ;FastTransfer.c: 59: serial_write(0x85);
  1080  000A54  D801               	call	u3018
  1081  000A56  D00B               	goto	l3545
  1082  000A58                     u3018:
  1083  000A58  0005               	push	
  1084  000A5A  6EFA               	movwf	pclath,c
  1085  000A5C  5036               	movf	_serial_write,w,c
  1086  000A5E  6EFD               	movwf	tosl,c
  1087  000A60  5037               	movf	_serial_write+1,w,c
  1088  000A62  6EFE               	movwf	tosh,c
  1089  000A64  50F8               	movf	tblptru,w,c
  1090  000A66  6EFF               	movwf	tosu,c
  1091  000A68  50FA               	movf	pclath,w,c
  1092  000A6A  0E85               	movlw	133
  1093  000A6C  0012               	return		;indir
  1094  000A6E                     l3545:
  1095                           
  1096                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1097  000A6E  D801               	call	u3028
  1098  000A70  D00C               	goto	l3547
  1099  000A72                     u3028:
  1100  000A72  0005               	push	
  1101  000A74  6EFA               	movwf	pclath,c
  1102  000A76  5036               	movf	_serial_write,w,c
  1103  000A78  6EFD               	movwf	tosl,c
  1104  000A7A  5037               	movf	_serial_write+1,w,c
  1105  000A7C  6EFE               	movwf	tosh,c
  1106  000A7E  50F8               	movf	tblptru,w,c
  1107  000A80  6EFF               	movwf	tosu,c
  1108  000A82  50FA               	movf	pclath,w,c
  1109  000A84  0101               	movlb	1	; () banked
  1110  000A86  51D3               	movf	sendData@whereToSend& (0+255),w,b
  1111  000A88  0012               	return		;indir
  1112  000A8A                     l3547:
  1113                           
  1114                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1115  000A8A  D801               	call	u3038
  1116  000A8C  D00B               	goto	l3549
  1117  000A8E                     u3038:
  1118  000A8E  0005               	push	
  1119  000A90  6EFA               	movwf	pclath,c
  1120  000A92  5036               	movf	_serial_write,w,c
  1121  000A94  6EFD               	movwf	tosl,c
  1122  000A96  5037               	movf	_serial_write+1,w,c
  1123  000A98  6EFE               	movwf	tosh,c
  1124  000A9A  50F8               	movf	tblptru,w,c
  1125  000A9C  6EFF               	movwf	tosu,c
  1126  000A9E  50FA               	movf	pclath,w,c
  1127  000AA0  503F               	movf	_moduleAddress,w,c
  1128  000AA2  0012               	return		;indir
  1129  000AA4                     l3549:
  1130                           
  1131                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1132  000AA4  D801               	call	u3048
  1133  000AA6  D00C               	goto	l3551
  1134  000AA8                     u3048:
  1135  000AA8  0005               	push	
  1136  000AAA  6EFA               	movwf	pclath,c
  1137  000AAC  5036               	movf	_serial_write,w,c
  1138  000AAE  6EFD               	movwf	tosl,c
  1139  000AB0  5037               	movf	_serial_write+1,w,c
  1140  000AB2  6EFE               	movwf	tosh,c
  1141  000AB4  50F8               	movf	tblptru,w,c
  1142  000AB6  6EFF               	movwf	tosu,c
  1143  000AB8  50FA               	movf	pclath,w,c
  1144  000ABA  0101               	movlb	1	; () banked
  1145  000ABC  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1146  000ABE  0012               	return		;indir
  1147  000AC0                     l3551:
  1148                           
  1149                           ;FastTransfer.c: 66: int i;
  1150                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1151  000AC0  0E00               	movlw	0
  1152  000AC2  0101               	movlb	1	; () banked
  1153  000AC4  6FD6               	movwf	(sendData@i+1)& (0+255),b
  1154  000AC6  0E00               	movlw	0
  1155  000AC8  6FD5               	movwf	sendData@i& (0+255),b
  1156  000ACA  D018               	goto	l3557
  1157  000ACC                     l3553:
  1158                           
  1159                           ; BSR set to: 1
  1160                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1161  000ACC  D801               	call	u3058
  1162  000ACE  D013               	goto	l3555
  1163  000AD0                     u3058:
  1164  000AD0  0005               	push	
  1165  000AD2  6EFA               	movwf	pclath,c
  1166  000AD4  5036               	movf	_serial_write,w,c
  1167  000AD6  6EFD               	movwf	tosl,c
  1168  000AD8  5037               	movf	_serial_write+1,w,c
  1169  000ADA  6EFE               	movwf	tosh,c
  1170  000ADC  50F8               	movf	tblptru,w,c
  1171  000ADE  6EFF               	movwf	tosu,c
  1172  000AE0  50FA               	movf	pclath,w,c
  1173  000AE2  0101               	movlb	1	; () banked
  1174  000AE4  51D5               	movf	sendData@i& (0+255),w,b
  1175  000AE6  242E               	addwf	_sendStructAddress,w,c
  1176  000AE8  6ED9               	movwf	fsr2l,c
  1177  000AEA  0101               	movlb	1	; () banked
  1178  000AEC  51D6               	movf	(sendData@i+1)& (0+255),w,b
  1179  000AEE  202F               	addwfc	_sendStructAddress+1,w,c
  1180  000AF0  6EDA               	movwf	fsr2h,c
  1181  000AF2  50DF               	movf	indf2,w,c
  1182  000AF4  0012               	return		;indir
  1183  000AF6                     l3555:
  1184  000AF6  0101               	movlb	1	; () banked
  1185  000AF8  4BD5               	infsnz	sendData@i& (0+255),f,b
  1186  000AFA  2BD6               	incf	(sendData@i+1)& (0+255),f,b
  1187  000AFC                     l3557:
  1188                           
  1189                           ; BSR set to: 1
  1190  000AFC  0101               	movlb	1	; () banked
  1191  000AFE  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1192  000B00  0101               	movlb	1	; () banked
  1193  000B02  5DD5               	subwf	sendData@i& (0+255),w,b
  1194  000B04  0101               	movlb	1	; () banked
  1195  000B06  51D6               	movf	(sendData@i+1)& (0+255),w,b
  1196  000B08  0A80               	xorlw	128
  1197  000B0A  0101               	movlb	1	; () banked
  1198  000B0C  6FD2               	movwf	??_sendData& (0+255),b
  1199  000B0E  0101               	movlb	1	; () banked
  1200  000B10  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1201  000B12  0A80               	xorlw	128
  1202  000B14  0101               	movlb	1	; () banked
  1203  000B16  59D2               	subwfb	??_sendData& (0+255),w,b
  1204  000B18  A0D8               	btfss	status,0,c
  1205  000B1A  D7D8               	goto	l3553
  1206                           
  1207                           ; BSR set to: 1
  1208                           ;FastTransfer.c: 69: }
  1209                           ;FastTransfer.c: 72: serial_write(CS);
  1210                           
  1211                           ; BSR set to: 1
  1212  000B1C  D801               	call	u3078
  1213  000B1E  D00C               	goto	l3561
  1214  000B20                     u3078:
  1215  000B20  0005               	push	
  1216  000B22  6EFA               	movwf	pclath,c
  1217  000B24  5036               	movf	_serial_write,w,c
  1218  000B26  6EFD               	movwf	tosl,c
  1219  000B28  5037               	movf	_serial_write+1,w,c
  1220  000B2A  6EFE               	movwf	tosh,c
  1221  000B2C  50F8               	movf	tblptru,w,c
  1222  000B2E  6EFF               	movwf	tosu,c
  1223  000B30  50FA               	movf	pclath,w,c
  1224  000B32  0101               	movlb	1	; () banked
  1225  000B34  51D4               	movf	sendData@CS& (0+255),w,b
  1226  000B36  0012               	return		;indir
  1227  000B38                     l3561:
  1228                           
  1229                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1230  000B38  0EEE               	movlw	low _crc_buffer
  1231  000B3A  6E1B               	movwf	crcBufS_put@_this,c
  1232  000B3C  0E00               	movlw	high _crc_buffer
  1233  000B3E  6E1C               	movwf	crcBufS_put@_this+1,c
  1234  000B40  C1D3  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1235  000B44  C1D4  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1236  000B48  0E00               	movlw	0
  1237  000B4A  6E1F               	movwf	crcBufS_put@status,c
  1238  000B4C  EC27  F008         	call	_crcBufS_put
  1239                           
  1240                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1241  000B50  0E00               	movlw	low _ring_buffer
  1242  000B52  0101               	movlb	1	; () banked
  1243  000B54  6FCE               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1244  000B56  0E01               	movlw	high _ring_buffer
  1245  000B58  0101               	movlb	1	; () banked
  1246  000B5A  6FCF               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1247  000B5C  0E00               	movlw	0
  1248  000B5E  0101               	movlb	1	; () banked
  1249  000B60  6FD1               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1250  000B62  0E01               	movlw	1
  1251  000B64  6FD0               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1252  000B66  EC82  F00A         	call	_FastTransfer_buffer_flush	;wreg free
  1253  000B6A  0012               	return		;funcret
  1254  000B6C                     __end_of_sendData:
  1255                           	opt stack 0
  1256                           tosu	equ	0xFFF
  1257                           tosh	equ	0xFFE
  1258                           tosl	equ	0xFFD
  1259                           pclath	equ	0xFFA
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           intcon	equ	0xFF2
  1265                           postinc0	equ	0xFEE
  1266                           wreg	equ	0xFE8
  1267                           indf2	equ	0xFDF
  1268                           fsr2h	equ	0xFDA
  1269                           fsr2l	equ	0xFD9
  1270                           status	equ	0xFD8
  1271                           
  1272 ;; *************** function _crcBufS_put *****************
  1273 ;; Defined at:
  1274 ;;		line 321 in file "FastTransfer.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1277 ;;		 -> crc_buffer(17), 
  1278 ;;  address         1   28[COMRAM] unsigned char 
  1279 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1280 ;;  status          1   30[COMRAM] unsigned char 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;		None
  1283 ;; Return value:  Size  Location     Type
  1284 ;;		None               void
  1285 ;; Registers used:
  1286 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1292 ;;      Params:         5       0       0       0       0       0       0
  1293 ;;      Locals:         0       0       0       0       0       0       0
  1294 ;;      Temps:          2       0       0       0       0       0       0
  1295 ;;      Totals:         7       0       0       0       0       0       0
  1296 ;;Total ram usage:        7 bytes
  1297 ;; Hardware stack levels used:    1
  1298 ;; Hardware stack levels required when called:    4
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_sendData
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text4
  1307  00104E                     __ptext4:
  1308                           	opt stack 0
  1309  00104E                     _crcBufS_put:
  1310                           	opt stack 23
  1311                           
  1312                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1313                           
  1314                           ;incstack = 0
  1315  00104E  EE20 F00F          	lfsr	2,15
  1316  001052  501B               	movf	crcBufS_put@_this,w,c
  1317  001054  26D9               	addwf	fsr2l,f,c
  1318  001056  501C               	movf	crcBufS_put@_this+1,w,c
  1319  001058  22DA               	addwfc	fsr2h,f,c
  1320  00105A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1321  00105E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1322  001062  5020               	movf	??_crcBufS_put,w,c
  1323  001064  241B               	addwf	crcBufS_put@_this,w,c
  1324  001066  6ED9               	movwf	fsr2l,c
  1325  001068  5021               	movf	??_crcBufS_put+1,w,c
  1326  00106A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1327  00106C  6EDA               	movwf	fsr2h,c
  1328  00106E  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1329                           
  1330                           ;FastTransfer.c: 323: _this->head++;
  1331  001072  EE20 F00F          	lfsr	2,15
  1332  001076  501B               	movf	crcBufS_put@_this,w,c
  1333  001078  26D9               	addwf	fsr2l,f,c
  1334  00107A  501C               	movf	crcBufS_put@_this+1,w,c
  1335  00107C  22DA               	addwfc	fsr2h,f,c
  1336  00107E  2ADE               	incf	postinc2,f,c
  1337  001080  0E00               	movlw	0
  1338  001082  22DD               	addwfc	postdec2,f,c
  1339                           
  1340                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1341  001084  EE20 F00F          	lfsr	2,15
  1342  001088  501B               	movf	crcBufS_put@_this,w,c
  1343  00108A  26D9               	addwf	fsr2l,f,c
  1344  00108C  501C               	movf	crcBufS_put@_this+1,w,c
  1345  00108E  22DA               	addwfc	fsr2h,f,c
  1346  001090  CFDE F020          	movff	postinc2,??_crcBufS_put
  1347  001094  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1348  001098  5020               	movf	??_crcBufS_put,w,c
  1349  00109A  241B               	addwf	crcBufS_put@_this,w,c
  1350  00109C  6ED9               	movwf	fsr2l,c
  1351  00109E  5021               	movf	??_crcBufS_put+1,w,c
  1352  0010A0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1353  0010A2  6EDA               	movwf	fsr2h,c
  1354  0010A4  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1355                           
  1356                           ;FastTransfer.c: 325: _this->head++;
  1357  0010A8  EE20 F00F          	lfsr	2,15
  1358  0010AC  501B               	movf	crcBufS_put@_this,w,c
  1359  0010AE  26D9               	addwf	fsr2l,f,c
  1360  0010B0  501C               	movf	crcBufS_put@_this+1,w,c
  1361  0010B2  22DA               	addwfc	fsr2h,f,c
  1362  0010B4  2ADE               	incf	postinc2,f,c
  1363  0010B6  0E00               	movlw	0
  1364  0010B8  22DD               	addwfc	postdec2,f,c
  1365                           
  1366                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1367  0010BA  EE20 F00F          	lfsr	2,15
  1368  0010BE  501B               	movf	crcBufS_put@_this,w,c
  1369  0010C0  26D9               	addwf	fsr2l,f,c
  1370  0010C2  501C               	movf	crcBufS_put@_this+1,w,c
  1371  0010C4  22DA               	addwfc	fsr2h,f,c
  1372  0010C6  CFDE F020          	movff	postinc2,??_crcBufS_put
  1373  0010CA  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1374  0010CE  5020               	movf	??_crcBufS_put,w,c
  1375  0010D0  241B               	addwf	crcBufS_put@_this,w,c
  1376  0010D2  6ED9               	movwf	fsr2l,c
  1377  0010D4  5021               	movf	??_crcBufS_put+1,w,c
  1378  0010D6  201C               	addwfc	crcBufS_put@_this+1,w,c
  1379  0010D8  6EDA               	movwf	fsr2h,c
  1380  0010DA  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1381                           
  1382                           ;FastTransfer.c: 327: _this->head++;
  1383  0010DE  EE20 F00F          	lfsr	2,15
  1384  0010E2  501B               	movf	crcBufS_put@_this,w,c
  1385  0010E4  26D9               	addwf	fsr2l,f,c
  1386  0010E6  501C               	movf	crcBufS_put@_this+1,w,c
  1387  0010E8  22DA               	addwfc	fsr2h,f,c
  1388  0010EA  2ADE               	incf	postinc2,f,c
  1389  0010EC  0E00               	movlw	0
  1390  0010EE  22DD               	addwfc	postdec2,f,c
  1391                           
  1392                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1393  0010F0  EE20 F00F          	lfsr	2,15
  1394  0010F4  501B               	movf	crcBufS_put@_this,w,c
  1395  0010F6  26D9               	addwf	fsr2l,f,c
  1396  0010F8  501C               	movf	crcBufS_put@_this+1,w,c
  1397  0010FA  22DA               	addwfc	fsr2h,f,c
  1398  0010FC  0E01               	movlw	1
  1399  0010FE  BEDB               	btfsc	plusw2,7,c
  1400  001100  0012               	return	
  1401  001102  0E01               	movlw	1
  1402  001104  50DB               	movf	plusw2,w,c
  1403  001106  E104               	bnz	u2870
  1404  001108  0E0F               	movlw	15
  1405  00110A  5CDE               	subwf	postinc2,w,c
  1406  00110C  A0D8               	btfss	status,0,c
  1407  00110E  0012               	return	
  1408  001110                     u2870:
  1409                           
  1410                           ;FastTransfer.c: 329: _this->head = 0;
  1411  001110  EE20 F00F          	lfsr	2,15
  1412  001114  501B               	movf	crcBufS_put@_this,w,c
  1413  001116  26D9               	addwf	fsr2l,f,c
  1414  001118  501C               	movf	crcBufS_put@_this+1,w,c
  1415  00111A  22DA               	addwfc	fsr2h,f,c
  1416  00111C  0E00               	movlw	0
  1417  00111E  6EDE               	movwf	postinc2,c
  1418  001120  0E00               	movlw	0
  1419  001122  6EDD               	movwf	postdec2,c
  1420  001124  0012               	return	
  1421  001126                     __end_of_crcBufS_put:
  1422                           	opt stack 0
  1423                           tosu	equ	0xFFF
  1424                           tosh	equ	0xFFE
  1425                           tosl	equ	0xFFD
  1426                           pclath	equ	0xFFA
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           intcon	equ	0xFF2
  1432                           postinc0	equ	0xFEE
  1433                           wreg	equ	0xFE8
  1434                           indf2	equ	0xFDF
  1435                           postinc2	equ	0xFDE
  1436                           postdec2	equ	0xFDD
  1437                           plusw2	equ	0xFDB
  1438                           fsr2h	equ	0xFDA
  1439                           fsr2l	equ	0xFD9
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function _FastTransfer_buffer_flush *****************
  1443 ;; Defined at:
  1444 ;;		line 261 in file "FastTransfer.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  _this           2    0[BANK1 ] PTR struct ringBufS
  1447 ;;		 -> ring_buffer(206), 
  1448 ;;  clearBuffer     2    2[BANK1 ] const int 
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;		None
  1451 ;; Return value:  Size  Location     Type
  1452 ;;		None               void
  1453 ;; Registers used:
  1454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1460 ;;      Params:         0       0       4       0       0       0       0
  1461 ;;      Locals:         0       0       0       0       0       0       0
  1462 ;;      Temps:          0       0       0       0       0       0       0
  1463 ;;      Totals:         0       0       4       0       0       0       0
  1464 ;;Total ram usage:        4 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    5
  1467 ;; This function calls:
  1468 ;;		_memset
  1469 ;; This function is called by:
  1470 ;;		_sendData
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text5
  1475  001504                     __ptext5:
  1476                           	opt stack 0
  1477  001504                     _FastTransfer_buffer_flush:
  1478                           	opt stack 22
  1479                           
  1480                           ;FastTransfer.c: 262: _this->count = 0;
  1481                           
  1482                           ;incstack = 0
  1483  001504  0101               	movlb	1	; () banked
  1484  001506  EE20 F0CC          	lfsr	2,204
  1485  00150A  51CE               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1486  00150C  26D9               	addwf	fsr2l,f,c
  1487  00150E  51CF               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1488  001510  22DA               	addwfc	fsr2h,f,c
  1489  001512  0E00               	movlw	0
  1490  001514  6EDE               	movwf	postinc2,c
  1491  001516  0E00               	movlw	0
  1492  001518  6EDD               	movwf	postdec2,c
  1493                           
  1494                           ;FastTransfer.c: 263: _this->head = 0;
  1495  00151A  0101               	movlb	1	; () banked
  1496  00151C  EE20 F0C8          	lfsr	2,200
  1497  001520  51CE               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1498  001522  26D9               	addwf	fsr2l,f,c
  1499  001524  51CF               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1500  001526  22DA               	addwfc	fsr2h,f,c
  1501  001528  0E00               	movlw	0
  1502  00152A  6EDE               	movwf	postinc2,c
  1503  00152C  0E00               	movlw	0
  1504  00152E  6EDD               	movwf	postdec2,c
  1505                           
  1506                           ;FastTransfer.c: 264: _this->tail = 0;
  1507  001530  0101               	movlb	1	; () banked
  1508  001532  EE20 F0CA          	lfsr	2,202
  1509  001536  51CE               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1510  001538  26D9               	addwf	fsr2l,f,c
  1511  00153A  51CF               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1512  00153C  22DA               	addwfc	fsr2h,f,c
  1513  00153E  0E00               	movlw	0
  1514  001540  6EDE               	movwf	postinc2,c
  1515  001542  0E00               	movlw	0
  1516  001544  6EDD               	movwf	postdec2,c
  1517                           
  1518                           ; BSR set to: 1
  1519                           ;FastTransfer.c: 265: if (clearBuffer) {
  1520  001546  0101               	movlb	1	; () banked
  1521  001548  51D0               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1522  00154A  0101               	movlb	1	; () banked
  1523  00154C  11D1               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1524  00154E  B4D8               	btfsc	status,2,c
  1525  001550  0012               	return	
  1526                           
  1527                           ; BSR set to: 1
  1528                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1529  001552  C1CE  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1530  001556  C1CF  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1531  00155A  0E00               	movlw	0
  1532  00155C  6E1E               	movwf	memset@c+1,c
  1533  00155E  0E00               	movlw	0
  1534  001560  6E1D               	movwf	memset@c,c
  1535  001562  0E00               	movlw	0
  1536  001564  6E20               	movwf	memset@n+1,c
  1537  001566  0EC8               	movlw	200
  1538  001568  6E1F               	movwf	memset@n,c
  1539  00156A  ECFE  F00C         	call	_memset	;wreg free
  1540  00156E  0012               	return	
  1541  001570                     __end_of_FastTransfer_buffer_flush:
  1542                           	opt stack 0
  1543                           tosu	equ	0xFFF
  1544                           tosh	equ	0xFFE
  1545                           tosl	equ	0xFFD
  1546                           pclath	equ	0xFFA
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           intcon	equ	0xFF2
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           indf2	equ	0xFDF
  1555                           postinc2	equ	0xFDE
  1556                           postdec2	equ	0xFDD
  1557                           plusw2	equ	0xFDB
  1558                           fsr2h	equ	0xFDA
  1559                           fsr2l	equ	0xFD9
  1560                           status	equ	0xFD8
  1561                           
  1562 ;; *************** function _ToSend *****************
  1563 ;; Defined at:
  1564 ;;		line 216 in file "FastTransfer.c"
  1565 ;; Parameters:    Size  Location     Type
  1566 ;;  where           1    wreg     unsigned char 
  1567 ;;  what            2    2[BANK1 ] unsigned int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  where           1    0[BANK0 ] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;		None               void
  1572 ;; Registers used:
  1573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1579 ;;      Params:         0       0       2       0       0       0       0
  1580 ;;      Locals:         0       1       0       0       0       0       0
  1581 ;;      Temps:          0       0       0       0       0       0       0
  1582 ;;      Totals:         0       1       2       0       0       0       0
  1583 ;;Total ram usage:        3 bytes
  1584 ;; Hardware stack levels used:    1
  1585 ;; Hardware stack levels required when called:    6
  1586 ;; This function calls:
  1587 ;;		_FastTransfer_buffer_put
  1588 ;; This function is called by:
  1589 ;;		_respondECU
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text6
  1594  001ACA                     __ptext6:
  1595                           	opt stack 0
  1596  001ACA                     _ToSend:
  1597                           	opt stack 22
  1598                           
  1599                           ;incstack = 0
  1600                           ;ToSend@where stored from wreg
  1601  001ACA  0100               	movlb	0	; () banked
  1602  001ACC  6FFF               	movwf	ToSend@where& (0+255),b
  1603                           
  1604                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1605  001ACE  0E00               	movlw	low _ring_buffer
  1606  001AD0  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1607  001AD2  0E01               	movlw	high _ring_buffer
  1608  001AD4  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1609  001AD6  C0FF  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1610  001ADA  C1D0  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1611  001ADE  C1D1  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1612  001AE2  ECA8  F003         	call	_FastTransfer_buffer_put	;wreg free
  1613  001AE6  0012               	return		;funcret
  1614  001AE8                     __end_of_ToSend:
  1615                           	opt stack 0
  1616                           tosu	equ	0xFFF
  1617                           tosh	equ	0xFFE
  1618                           tosl	equ	0xFFD
  1619                           pclath	equ	0xFFA
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           intcon	equ	0xFF2
  1625                           postinc0	equ	0xFEE
  1626                           wreg	equ	0xFE8
  1627                           indf2	equ	0xFDF
  1628                           postinc2	equ	0xFDE
  1629                           postdec2	equ	0xFDD
  1630                           plusw2	equ	0xFDB
  1631                           fsr2h	equ	0xFDA
  1632                           fsr2l	equ	0xFD9
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _FastTransfer_buffer_put *****************
  1636 ;; Defined at:
  1637 ;;		line 223 in file "FastTransfer.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1640 ;;		 -> ring_buffer(206), 
  1641 ;;  towhere         1   34[COMRAM] unsigned char 
  1642 ;;  towhat          2   35[COMRAM] unsigned int 
  1643 ;; Auto vars:     Size  Location     Type
  1644 ;;		None
  1645 ;; Return value:  Size  Location     Type
  1646 ;;		None               void
  1647 ;; Registers used:
  1648 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1649 ;; Tracked objects:
  1650 ;;		On entry : 0/0
  1651 ;;		On exit  : 0/0
  1652 ;;		Unchanged: 0/0
  1653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1654 ;;      Params:         5       0       0       0       0       0       0
  1655 ;;      Locals:         0       0       0       0       0       0       0
  1656 ;;      Temps:          0       0       2       0       0       0       0
  1657 ;;      Totals:         5       0       2       0       0       0       0
  1658 ;;Total ram usage:        7 bytes
  1659 ;; Hardware stack levels used:    1
  1660 ;; Hardware stack levels required when called:    5
  1661 ;; This function calls:
  1662 ;;		_FastTransfer_buffer_modulo_inc
  1663 ;; This function is called by:
  1664 ;;		_ToSend
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text7
  1669  000750                     __ptext7:
  1670                           	opt stack 0
  1671  000750                     _FastTransfer_buffer_put:
  1672                           	opt stack 22
  1673                           
  1674                           ;FastTransfer.c: 225: group.integer = towhat;
  1675                           
  1676                           ;incstack = 0
  1677  000750  C024  F028         	movff	FastTransfer_buffer_put@towhat,_group
  1678  000754  C025  F029         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1679                           
  1680                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1681  000758  EE20 F0CC          	lfsr	2,204
  1682  00075C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1683  00075E  26D9               	addwf	fsr2l,f,c
  1684  000760  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1685  000762  22DA               	addwfc	fsr2h,f,c
  1686  000764  0E01               	movlw	1
  1687  000766  BEDB               	btfsc	plusw2,7,c
  1688  000768  D007               	goto	l3421
  1689  00076A  0E01               	movlw	1
  1690  00076C  50DB               	movf	plusw2,w,c
  1691  00076E  E103               	bnz	u2891
  1692  000770  0EC5               	movlw	197
  1693  000772  5CDE               	subwf	postinc2,w,c
  1694  000774  B0D8               	btfsc	status,0,c
  1695  000776                     u2891:
  1696  000776  0012               	return	
  1697  000778                     l3421:
  1698                           
  1699                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1700  000778  EE20 F0C8          	lfsr	2,200
  1701  00077C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1702  00077E  26D9               	addwf	fsr2l,f,c
  1703  000780  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1704  000782  22DA               	addwfc	fsr2h,f,c
  1705  000784  CFDE F1CE          	movff	postinc2,??_FastTransfer_buffer_put
  1706  000788  CFDD F1CF          	movff	postdec2,??_FastTransfer_buffer_put+1
  1707  00078C  0101               	movlb	1	; () banked
  1708  00078E  51CE               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1709  000790  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1710  000792  6ED9               	movwf	fsr2l,c
  1711  000794  0101               	movlb	1	; () banked
  1712  000796  51CF               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1713  000798  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1714  00079A  6EDA               	movwf	fsr2h,c
  1715  00079C  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1716                           
  1717                           ; BSR set to: 1
  1718                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1719  0007A0  EE20 F0C8          	lfsr	2,200
  1720  0007A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1721  0007A6  26D9               	addwf	fsr2l,f,c
  1722  0007A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1723  0007AA  22DA               	addwfc	fsr2h,f,c
  1724  0007AC  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1725  0007B0  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1726  0007B4  0E00               	movlw	0
  1727  0007B6  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1728  0007B8  0EC8               	movlw	200
  1729  0007BA  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1730  0007BC  EC14  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1731  0007C0  EE20 F0C8          	lfsr	2,200
  1732  0007C4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1733  0007C6  26D9               	addwf	fsr2l,f,c
  1734  0007C8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1735  0007CA  22DA               	addwfc	fsr2h,f,c
  1736  0007CC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1737  0007D0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1738                           
  1739                           ;FastTransfer.c: 230: ++_this->count;
  1740  0007D4  EE20 F0CC          	lfsr	2,204
  1741  0007D8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1742  0007DA  26D9               	addwf	fsr2l,f,c
  1743  0007DC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1744  0007DE  22DA               	addwfc	fsr2h,f,c
  1745  0007E0  2ADE               	incf	postinc2,f,c
  1746  0007E2  0E00               	movlw	0
  1747  0007E4  22DD               	addwfc	postdec2,f,c
  1748                           
  1749                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1750  0007E6  EE20 F0C8          	lfsr	2,200
  1751  0007EA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1752  0007EC  26D9               	addwf	fsr2l,f,c
  1753  0007EE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1754  0007F0  22DA               	addwfc	fsr2h,f,c
  1755  0007F2  CFDE F1CE          	movff	postinc2,??_FastTransfer_buffer_put
  1756  0007F6  CFDD F1CF          	movff	postdec2,??_FastTransfer_buffer_put+1
  1757  0007FA  0101               	movlb	1	; () banked
  1758  0007FC  51CE               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1759  0007FE  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1760  000800  6ED9               	movwf	fsr2l,c
  1761  000802  0101               	movlb	1	; () banked
  1762  000804  51CF               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1763  000806  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1764  000808  6EDA               	movwf	fsr2h,c
  1765  00080A  C028  FFDF         	movff	_group,indf2
  1766                           
  1767                           ; BSR set to: 1
  1768                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1769  00080E  EE20 F0C8          	lfsr	2,200
  1770  000812  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1771  000814  26D9               	addwf	fsr2l,f,c
  1772  000816  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1773  000818  22DA               	addwfc	fsr2h,f,c
  1774  00081A  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1775  00081E  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1776  000822  0E00               	movlw	0
  1777  000824  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1778  000826  0EC8               	movlw	200
  1779  000828  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1780  00082A  EC14  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1781  00082E  EE20 F0C8          	lfsr	2,200
  1782  000832  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1783  000834  26D9               	addwf	fsr2l,f,c
  1784  000836  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1785  000838  22DA               	addwfc	fsr2h,f,c
  1786  00083A  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1787  00083E  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1788                           
  1789                           ;FastTransfer.c: 233: ++_this->count;
  1790  000842  EE20 F0CC          	lfsr	2,204
  1791  000846  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1792  000848  26D9               	addwf	fsr2l,f,c
  1793  00084A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1794  00084C  22DA               	addwfc	fsr2h,f,c
  1795  00084E  2ADE               	incf	postinc2,f,c
  1796  000850  0E00               	movlw	0
  1797  000852  22DD               	addwfc	postdec2,f,c
  1798                           
  1799                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1800  000854  EE20 F0C8          	lfsr	2,200
  1801  000858  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1802  00085A  26D9               	addwf	fsr2l,f,c
  1803  00085C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1804  00085E  22DA               	addwfc	fsr2h,f,c
  1805  000860  CFDE F1CE          	movff	postinc2,??_FastTransfer_buffer_put
  1806  000864  CFDD F1CF          	movff	postdec2,??_FastTransfer_buffer_put+1
  1807  000868  0101               	movlb	1	; () banked
  1808  00086A  51CE               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1809  00086C  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1810  00086E  6ED9               	movwf	fsr2l,c
  1811  000870  0101               	movlb	1	; () banked
  1812  000872  51CF               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1813  000874  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1814  000876  6EDA               	movwf	fsr2h,c
  1815  000878  C029  FFDF         	movff	_group+1,indf2
  1816                           
  1817                           ; BSR set to: 1
  1818                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1819  00087C  EE20 F0C8          	lfsr	2,200
  1820  000880  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1821  000882  26D9               	addwf	fsr2l,f,c
  1822  000884  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1823  000886  22DA               	addwfc	fsr2h,f,c
  1824  000888  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1825  00088C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1826  000890  0E00               	movlw	0
  1827  000892  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1828  000894  0EC8               	movlw	200
  1829  000896  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1830  000898  EC14  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1831  00089C  EE20 F0C8          	lfsr	2,200
  1832  0008A0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1833  0008A2  26D9               	addwf	fsr2l,f,c
  1834  0008A4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1835  0008A6  22DA               	addwfc	fsr2h,f,c
  1836  0008A8  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1837  0008AC  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1838                           
  1839                           ;FastTransfer.c: 236: ++_this->count;
  1840  0008B0  EE20 F0CC          	lfsr	2,204
  1841  0008B4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1842  0008B6  26D9               	addwf	fsr2l,f,c
  1843  0008B8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1844  0008BA  22DA               	addwfc	fsr2h,f,c
  1845  0008BC  2ADE               	incf	postinc2,f,c
  1846  0008BE  0E00               	movlw	0
  1847  0008C0  22DD               	addwfc	postdec2,f,c
  1848  0008C2  0012               	return	
  1849  0008C4                     __end_of_FastTransfer_buffer_put:
  1850                           	opt stack 0
  1851                           tosu	equ	0xFFF
  1852                           tosh	equ	0xFFE
  1853                           tosl	equ	0xFFD
  1854                           pclath	equ	0xFFA
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           indf2	equ	0xFDF
  1863                           postinc2	equ	0xFDE
  1864                           postdec2	equ	0xFDD
  1865                           plusw2	equ	0xFDB
  1866                           fsr2h	equ	0xFDA
  1867                           fsr2l	equ	0xFD9
  1868                           status	equ	0xFD8
  1869                           
  1870 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1871 ;; Defined at:
  1872 ;;		line 273 in file "FastTransfer.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;  value           2   26[COMRAM] const unsigned int 
  1875 ;;  modulus         2   28[COMRAM] const unsigned int 
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;  my_value        2   30[COMRAM] unsigned int 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  2   26[COMRAM] unsigned int 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1887 ;;      Params:         4       0       0       0       0       0       0
  1888 ;;      Locals:         2       0       0       0       0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0
  1890 ;;      Totals:         6       0       0       0       0       0       0
  1891 ;;Total ram usage:        6 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    4
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_FastTransfer_buffer_put
  1898 ;;		_FastTransfer_buffer_get
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text8
  1903  001A28                     __ptext8:
  1904                           	opt stack 0
  1905  001A28                     _FastTransfer_buffer_modulo_inc:
  1906                           	opt stack 22
  1907                           
  1908                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  1909                           
  1910                           ;incstack = 0
  1911  001A28  0E01               	movlw	1
  1912  001A2A  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1913  001A2C  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1914  001A2E  0E00               	movlw	0
  1915  001A30  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1916  001A32  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1917                           
  1918                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  1919  001A34  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1920  001A36  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1921  001A38  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1922  001A3A  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1923  001A3C  A0D8               	btfss	status,0,c
  1924  001A3E  D004               	goto	l3341
  1925                           
  1926                           ;FastTransfer.c: 276: my_value = 0;
  1927  001A40  0E00               	movlw	0
  1928  001A42  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1929  001A44  0E00               	movlw	0
  1930  001A46  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1931  001A48                     l3341:
  1932                           
  1933                           ;FastTransfer.c: 277: }
  1934                           ;FastTransfer.c: 278: return (my_value);
  1935  001A48  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1936  001A4C  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1937  001A50  0012               	return	
  1938  001A52                     __end_of_FastTransfer_buffer_modulo_inc:
  1939                           	opt stack 0
  1940                           tosu	equ	0xFFF
  1941                           tosh	equ	0xFFE
  1942                           tosl	equ	0xFFD
  1943                           pclath	equ	0xFFA
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           intcon	equ	0xFF2
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           indf2	equ	0xFDF
  1952                           postinc2	equ	0xFDE
  1953                           postdec2	equ	0xFDD
  1954                           plusw2	equ	0xFDB
  1955                           fsr2h	equ	0xFDA
  1956                           fsr2l	equ	0xFD9
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _receiveData *****************
  1960 ;; Defined at:
  1961 ;;		line 82 in file "FastTransfer.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  holder          3   18[BANK1 ] unsigned char [3]
  1966 ;;  crcHolder       1   22[BANK1 ] unsigned char 
  1967 ;;  holder          3   15[BANK1 ] unsigned char [3]
  1968 ;;  crcHolder       1   21[BANK1 ] unsigned char 
  1969 ;;  u               2   23[BANK1 ] int 
  1970 ;;  r               2   25[BANK1 ] int 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      unsigned char 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1980 ;;      Params:         0       0       0       0       0       0       0
  1981 ;;      Locals:         0       0      12       0       0       0       0
  1982 ;;      Temps:          0       0       6       0       0       0       0
  1983 ;;      Totals:         0       0      18       0       0       0       0
  1984 ;;Total ram usage:       18 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    8
  1987 ;; This function calls:
  1988 ;;		Absolute function
  1989 ;;		_CRC8
  1990 ;;		_CRCcheck
  1991 ;;		_Receive_available
  1992 ;;		_Receive_get
  1993 ;;		_Receive_peek
  1994 ;;		_Send_put
  1995 ;; This function is called by:
  1996 ;;		_updateComms
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text9
  2001  0000A4                     __ptext9:
  2002                           	opt stack 0
  2003  0000A4                     _receiveData:
  2004                           	opt stack 21
  2005                           
  2006                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2007                           
  2008                           ;incstack = 0
  2009  0000A4  5043               	movf	_rx_len,w,c
  2010  0000A6  A4D8               	btfss	status,2,c
  2011  0000A8  D0AB               	goto	l3681
  2012                           
  2013                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2014  0000AA  D801               	call	u3248
  2015  0000AC  D00A               	goto	u3249
  2016  0000AE                     u3248:
  2017  0000AE  0005               	push	
  2018  0000B0  6EFA               	movwf	pclath,c
  2019  0000B2  5030               	movf	_serial_available,w,c
  2020  0000B4  6EFD               	movwf	tosl,c
  2021  0000B6  5031               	movf	_serial_available+1,w,c
  2022  0000B8  6EFE               	movwf	tosh,c
  2023  0000BA  50F8               	movf	tblptru,w,c
  2024  0000BC  6EFF               	movwf	tosu,c
  2025  0000BE  50FA               	movf	pclath,w,c
  2026  0000C0  0012               	return		;indir
  2027  0000C2                     u3249:
  2028  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2029  0000C4  D09D               	goto	l3681
  2030  0000C6  501E               	movf	?_Receive_available+1,w,c
  2031  0000C8  E11D               	bnz	l3657
  2032  0000CA  0E05               	movlw	5
  2033  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2034  0000CE  B0D8               	btfsc	status,0,c
  2035  0000D0  D019               	goto	l3657
  2036  0000D2  D096               	goto	l3681
  2037  0000D4                     l3649:
  2038                           
  2039                           ;FastTransfer.c: 93: alignErrorCounter++;
  2040  0000D4  4A26               	infsnz	_alignErrorCounter,f,c
  2041  0000D6  2A27               	incf	_alignErrorCounter+1,f,c
  2042                           
  2043                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2044  0000D8  D801               	call	u3268
  2045  0000DA  D00A               	goto	u3269
  2046  0000DC                     u3268:
  2047  0000DC  0005               	push	
  2048  0000DE  6EFA               	movwf	pclath,c
  2049  0000E0  5030               	movf	_serial_available,w,c
  2050  0000E2  6EFD               	movwf	tosl,c
  2051  0000E4  5031               	movf	_serial_available+1,w,c
  2052  0000E6  6EFE               	movwf	tosh,c
  2053  0000E8  50F8               	movf	tblptru,w,c
  2054  0000EA  6EFF               	movwf	tosu,c
  2055  0000EC  50FA               	movf	pclath,w,c
  2056  0000EE  0012               	return		;indir
  2057  0000F0                     u3269:
  2058  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2059  0000F2  D006               	goto	l3653
  2060  0000F4  501E               	movf	?_Receive_available+1,w,c
  2061  0000F6  E106               	bnz	l3657
  2062  0000F8  0E05               	movlw	5
  2063  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2064  0000FC  B0D8               	btfsc	status,0,c
  2065  0000FE  D002               	goto	l3657
  2066  000100                     l3653:
  2067                           
  2068                           ;FastTransfer.c: 95: return 0;
  2069  000100  0E00               	movlw	0
  2070  000102  0012               	return	
  2071  000104                     l3657:
  2072  000104  D801               	call	u3288
  2073  000106  D00A               	goto	u3289
  2074  000108                     u3288:
  2075  000108  0005               	push	
  2076  00010A  6EFA               	movwf	pclath,c
  2077  00010C  5034               	movf	_serial_read,w,c
  2078  00010E  6EFD               	movwf	tosl,c
  2079  000110  5035               	movf	_serial_read+1,w,c
  2080  000112  6EFE               	movwf	tosh,c
  2081  000114  50F8               	movf	tblptru,w,c
  2082  000116  6EFF               	movwf	tosu,c
  2083  000118  50FA               	movf	pclath,w,c
  2084  00011A  0012               	return		;indir
  2085  00011C                     u3289:
  2086  00011C  0A06               	xorlw	6
  2087  00011E  A4D8               	btfss	status,2,c
  2088  000120  D7D9               	goto	l3649
  2089                           
  2090                           ;FastTransfer.c: 96: }
  2091                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2092  000122  D801               	call	u3308
  2093  000124  D00A               	goto	u3309
  2094  000126                     u3308:
  2095  000126  0005               	push	
  2096  000128  6EFA               	movwf	pclath,c
  2097  00012A  5034               	movf	_serial_read,w,c
  2098  00012C  6EFD               	movwf	tosl,c
  2099  00012E  5035               	movf	_serial_read+1,w,c
  2100  000130  6EFE               	movwf	tosh,c
  2101  000132  50F8               	movf	tblptru,w,c
  2102  000134  6EFF               	movwf	tosu,c
  2103  000136  50FA               	movf	pclath,w,c
  2104  000138  0012               	return		;indir
  2105  00013A                     u3309:
  2106  00013A  0A85               	xorlw	133
  2107  00013C  A4D8               	btfss	status,2,c
  2108  00013E  D060               	goto	l3681
  2109                           
  2110                           ;FastTransfer.c: 98: rx_address = serial_read();
  2111  000140  D801               	call	u3328
  2112  000142  D00A               	goto	u3329
  2113  000144                     u3328:
  2114  000144  0005               	push	
  2115  000146  6EFA               	movwf	pclath,c
  2116  000148  5034               	movf	_serial_read,w,c
  2117  00014A  6EFD               	movwf	tosl,c
  2118  00014C  5035               	movf	_serial_read+1,w,c
  2119  00014E  6EFE               	movwf	tosh,c
  2120  000150  50F8               	movf	tblptru,w,c
  2121  000152  6EFF               	movwf	tosu,c
  2122  000154  50FA               	movf	pclath,w,c
  2123  000156  0012               	return		;indir
  2124  000158                     u3329:
  2125  000158  6E41               	movwf	_rx_address,c
  2126                           
  2127                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2128  00015A  D801               	call	u3338
  2129  00015C  D00A               	goto	u3339
  2130  00015E                     u3338:
  2131  00015E  0005               	push	
  2132  000160  6EFA               	movwf	pclath,c
  2133  000162  5034               	movf	_serial_read,w,c
  2134  000164  6EFD               	movwf	tosl,c
  2135  000166  5035               	movf	_serial_read+1,w,c
  2136  000168  6EFE               	movwf	tosh,c
  2137  00016A  50F8               	movf	tblptru,w,c
  2138  00016C  6EFF               	movwf	tosu,c
  2139  00016E  50FA               	movf	pclath,w,c
  2140  000170  0012               	return		;indir
  2141  000172                     u3339:
  2142  000172  6E40               	movwf	_returnAddress,c
  2143                           
  2144                           ;FastTransfer.c: 100: rx_len = serial_read();
  2145  000174  D801               	call	u3348
  2146  000176  D00A               	goto	u3349
  2147  000178                     u3348:
  2148  000178  0005               	push	
  2149  00017A  6EFA               	movwf	pclath,c
  2150  00017C  5034               	movf	_serial_read,w,c
  2151  00017E  6EFD               	movwf	tosl,c
  2152  000180  5035               	movf	_serial_read+1,w,c
  2153  000182  6EFE               	movwf	tosh,c
  2154  000184  50F8               	movf	tblptru,w,c
  2155  000186  6EFF               	movwf	tosu,c
  2156  000188  50FA               	movf	pclath,w,c
  2157  00018A  0012               	return		;indir
  2158  00018C                     u3349:
  2159  00018C  6E43               	movwf	_rx_len,c
  2160                           
  2161                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2162  00018E  503F               	movf	_moduleAddress,w,c
  2163  000190  1841               	xorwf	_rx_address,w,c
  2164  000192  B4D8               	btfsc	status,2,c
  2165  000194  D035               	goto	l3681
  2166                           
  2167                           ;FastTransfer.c: 103: addressErrorCounter++;
  2168  000196  0100               	movlb	0	; () banked
  2169  000198  4BC0               	infsnz	_addressErrorCounter& (0+255),f,b
  2170  00019A  2BC1               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;FastTransfer.c: 106: int u;
  2174                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2175  00019C  0E00               	movlw	0
  2176  00019E  0101               	movlb	1	; () banked
  2177  0001A0  6FE6               	movwf	(receiveData@u+1)& (0+255),b
  2178  0001A2  0E00               	movlw	0
  2179  0001A4  6FE5               	movwf	receiveData@u& (0+255),b
  2180  0001A6  D00F               	goto	l3673
  2181  0001A8                     l3669:
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;FastTransfer.c: 108: serial_read();
  2185  0001A8  D801               	call	u3368
  2186  0001AA  D00A               	goto	l3671
  2187  0001AC                     u3368:
  2188  0001AC  0005               	push	
  2189  0001AE  6EFA               	movwf	pclath,c
  2190  0001B0  5034               	movf	_serial_read,w,c
  2191  0001B2  6EFD               	movwf	tosl,c
  2192  0001B4  5035               	movf	_serial_read+1,w,c
  2193  0001B6  6EFE               	movwf	tosh,c
  2194  0001B8  50F8               	movf	tblptru,w,c
  2195  0001BA  6EFF               	movwf	tosu,c
  2196  0001BC  50FA               	movf	pclath,w,c
  2197  0001BE  0012               	return		;indir
  2198  0001C0                     l3671:
  2199  0001C0  0101               	movlb	1	; () banked
  2200  0001C2  4BE5               	infsnz	receiveData@u& (0+255),f,b
  2201  0001C4  2BE6               	incf	(receiveData@u+1)& (0+255),f,b
  2202  0001C6                     l3673:
  2203                           
  2204                           ; BSR set to: 1
  2205  0001C6  5043               	movf	_rx_len,w,c
  2206  0001C8  0101               	movlb	1	; () banked
  2207  0001CA  6FD7               	movwf	??_receiveData& (0+255),b
  2208  0001CC  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  2209  0001CE  0E01               	movlw	1
  2210  0001D0  0101               	movlb	1	; () banked
  2211  0001D2  27D7               	addwf	??_receiveData& (0+255),f,b
  2212  0001D4  0E00               	movlw	0
  2213  0001D6  23D8               	addwfc	(??_receiveData+1)& (0+255),f,b
  2214  0001D8  0101               	movlb	1	; () banked
  2215  0001DA  51E5               	movf	receiveData@u& (0+255),w,b
  2216  0001DC  0101               	movlb	1	; () banked
  2217  0001DE  5DD7               	subwf	??_receiveData& (0+255),w,b
  2218  0001E0  0101               	movlb	1	; () banked
  2219  0001E2  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2220  0001E4  0A80               	xorlw	128
  2221  0001E6  0101               	movlb	1	; () banked
  2222  0001E8  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2223  0001EA  0101               	movlb	1	; () banked
  2224  0001EC  51E6               	movf	(receiveData@u+1)& (0+255),w,b
  2225  0001EE  0A80               	xorlw	128
  2226  0001F0  0101               	movlb	1	; () banked
  2227  0001F2  59D9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2228  0001F4  B0D8               	btfsc	status,0,c
  2229  0001F6  D7D8               	goto	l3669
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;FastTransfer.c: 109: }
  2233                           ;FastTransfer.c: 110: rx_len = 0;
  2234                           
  2235                           ; BSR set to: 1
  2236  0001F8  0E00               	movlw	0
  2237  0001FA  6E43               	movwf	_rx_len,c
  2238                           
  2239                           ; BSR set to: 1
  2240                           ;FastTransfer.c: 111: return 0;
  2241  0001FC  0E00               	movlw	0
  2242                           
  2243                           ; BSR set to: 1
  2244  0001FE  0012               	return	
  2245  000200                     l3681:
  2246                           
  2247                           ;FastTransfer.c: 112: }
  2248                           ;FastTransfer.c: 114: }
  2249                           ;FastTransfer.c: 115: }
  2250                           ;FastTransfer.c: 116: }
  2251                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2252  000200  5043               	movf	_rx_len,w,c
  2253  000202  B4D8               	btfsc	status,2,c
  2254  000204  D2A3               	goto	l3805
  2255                           
  2256                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2257  000206  5042               	movf	_rx_array_inx,w,c
  2258  000208  A4D8               	btfss	status,2,c
  2259  00020A  D043               	goto	l3705
  2260  00020C                     l3687:
  2261  00020C  D801               	call	u3408
  2262  00020E  D00A               	goto	u3409
  2263  000210                     u3408:
  2264  000210  0005               	push	
  2265  000212  6EFA               	movwf	pclath,c
  2266  000214  5030               	movf	_serial_available,w,c
  2267  000216  6EFD               	movwf	tosl,c
  2268  000218  5031               	movf	_serial_available+1,w,c
  2269  00021A  6EFE               	movwf	tosh,c
  2270  00021C  50F8               	movf	tblptru,w,c
  2271  00021E  6EFF               	movwf	tosu,c
  2272  000220  50FA               	movf	pclath,w,c
  2273  000222  0012               	return		;indir
  2274  000224                     u3409:
  2275  000224  BE1E               	btfsc	?_Receive_available+1,7,c
  2276  000226  D7F2               	goto	l3687
  2277  000228  501E               	movf	?_Receive_available+1,w,c
  2278  00022A  E103               	bnz	l3689
  2279  00022C  041D               	decf	?_Receive_available,w,c
  2280  00022E  A0D8               	btfss	status,0,c
  2281  000230  D7ED               	goto	l3687
  2282  000232                     l3689:
  2283                           
  2284                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2285  000232  D801               	call	u3428
  2286  000234  D00A               	goto	u3429
  2287  000236                     u3428:
  2288  000236  0005               	push	
  2289  000238  6EFA               	movwf	pclath,c
  2290  00023A  5032               	movf	_serial_peek,w,c
  2291  00023C  6EFD               	movwf	tosl,c
  2292  00023E  5033               	movf	_serial_peek+1,w,c
  2293  000240  6EFE               	movwf	tosh,c
  2294  000242  50F8               	movf	tblptru,w,c
  2295  000244  6EFF               	movwf	tosu,c
  2296  000246  50FA               	movf	pclath,w,c
  2297  000248  0012               	return		;indir
  2298  00024A                     u3429:
  2299  00024A  0AFF               	xorlw	255
  2300  00024C  A4D8               	btfss	status,2,c
  2301  00024E  D021               	goto	l3705
  2302                           
  2303                           ;FastTransfer.c: 125: CRCcheck();
  2304  000250  EC62  F004         	call	_CRCcheck	;wreg free
  2305                           
  2306                           ;FastTransfer.c: 126: rx_len = 0;
  2307  000254  0E00               	movlw	0
  2308  000256  6E43               	movwf	_rx_len,c
  2309                           
  2310                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2311  000258  0E00               	movlw	0
  2312  00025A  6E42               	movwf	_rx_array_inx,c
  2313                           
  2314                           ;FastTransfer.c: 128: return 0;
  2315  00025C  0E00               	movlw	0
  2316  00025E  0012               	return	
  2317  000260                     l3701:
  2318                           
  2319                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2320  000260  D801               	call	u3448
  2321  000262  D00A               	goto	u3449
  2322  000264                     u3448:
  2323  000264  0005               	push	
  2324  000266  6EFA               	movwf	pclath,c
  2325  000268  5034               	movf	_serial_read,w,c
  2326  00026A  6EFD               	movwf	tosl,c
  2327  00026C  5035               	movf	_serial_read+1,w,c
  2328  00026E  6EFE               	movwf	tosh,c
  2329  000270  50F8               	movf	tblptru,w,c
  2330  000272  6EFF               	movwf	tosu,c
  2331  000274  50FA               	movf	pclath,w,c
  2332  000276  0012               	return		;indir
  2333  000278                     u3449:
  2334  000278  0101               	movlb	1	; () banked
  2335  00027A  6FD7               	movwf	??_receiveData& (0+255),b
  2336  00027C  5042               	movf	_rx_array_inx,w,c
  2337  00027E  0D01               	mullw	1
  2338  000280  0E00               	movlw	low _rx_buffer
  2339  000282  24F3               	addwf	prodl,w,c
  2340  000284  6ED9               	movwf	fsr2l,c
  2341  000286  0E02               	movlw	high _rx_buffer
  2342  000288  20F4               	addwfc	prodh,w,c
  2343  00028A  6EDA               	movwf	fsr2h,c
  2344  00028C  C1D7  FFDF         	movff	??_receiveData,indf2
  2345                           
  2346                           ; BSR set to: 1
  2347  000290  2A42               	incf	_rx_array_inx,f,c
  2348  000292                     l3705:
  2349  000292  D801               	call	u3458
  2350  000294  D00A               	goto	u3459
  2351  000296                     u3458:
  2352  000296  0005               	push	
  2353  000298  6EFA               	movwf	pclath,c
  2354  00029A  5030               	movf	_serial_available,w,c
  2355  00029C  6EFD               	movwf	tosl,c
  2356  00029E  5031               	movf	_serial_available+1,w,c
  2357  0002A0  6EFE               	movwf	tosh,c
  2358  0002A2  50F8               	movf	tblptru,w,c
  2359  0002A4  6EFF               	movwf	tosu,c
  2360  0002A6  50FA               	movf	pclath,w,c
  2361  0002A8  0012               	return		;indir
  2362  0002AA                     u3459:
  2363  0002AA  501D               	movf	?_Receive_available,w,c
  2364  0002AC  101E               	iorwf	?_Receive_available+1,w,c
  2365  0002AE  B4D8               	btfsc	status,2,c
  2366  0002B0  D004               	goto	l3709
  2367  0002B2  5042               	movf	_rx_array_inx,w,c
  2368  0002B4  5C43               	subwf	_rx_len,w,c
  2369  0002B6  B0D8               	btfsc	status,0,c
  2370  0002B8  D7D3               	goto	l3701
  2371  0002BA                     l3709:
  2372                           
  2373                           ;FastTransfer.c: 135: }
  2374                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2375  0002BA  5043               	movf	_rx_len,w,c
  2376  0002BC  0101               	movlb	1	; () banked
  2377  0002BE  6FD7               	movwf	??_receiveData& (0+255),b
  2378  0002C0  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  2379  0002C2  0EFF               	movlw	255
  2380  0002C4  0101               	movlb	1	; () banked
  2381  0002C6  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2382  0002C8  0EFF               	movlw	255
  2383  0002CA  0101               	movlb	1	; () banked
  2384  0002CC  6FDA               	movwf	(??_receiveData+3)& (0+255),b
  2385  0002CE  5042               	movf	_rx_array_inx,w,c
  2386  0002D0  0101               	movlb	1	; () banked
  2387  0002D2  6FDB               	movwf	(??_receiveData+4)& (0+255),b
  2388  0002D4  6BDC               	clrf	(??_receiveData+5)& (0+255),b
  2389  0002D6  0101               	movlb	1	; () banked
  2390  0002D8  51D9               	movf	(??_receiveData+2)& (0+255),w,b
  2391  0002DA  0101               	movlb	1	; () banked
  2392  0002DC  27DB               	addwf	(??_receiveData+4)& (0+255),f,b
  2393  0002DE  0101               	movlb	1	; () banked
  2394  0002E0  51DA               	movf	(??_receiveData+3)& (0+255),w,b
  2395  0002E2  0101               	movlb	1	; () banked
  2396  0002E4  23DC               	addwfc	(??_receiveData+5)& (0+255),f,b
  2397  0002E6  0101               	movlb	1	; () banked
  2398  0002E8  51D7               	movf	??_receiveData& (0+255),w,b
  2399  0002EA  0101               	movlb	1	; () banked
  2400  0002EC  19DB               	xorwf	(??_receiveData+4)& (0+255),w,b
  2401  0002EE  E105               	bnz	u3481
  2402  0002F0  0101               	movlb	1	; () banked
  2403  0002F2  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2404  0002F4  0101               	movlb	1	; () banked
  2405  0002F6  19DC               	xorwf	(??_receiveData+5)& (0+255),w,b
  2406  0002F8  A4D8               	btfss	status,2,c
  2407  0002FA                     u3481:
  2408  0002FA  D228               	goto	l3805
  2409                           
  2410                           ; BSR set to: 1
  2411                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2412  0002FC  0E00               	movlw	low _rx_buffer
  2413  0002FE  6E1B               	movwf	CRC8@data,c
  2414  000300  0E02               	movlw	high _rx_buffer
  2415  000302  6E1C               	movwf	CRC8@data+1,c
  2416  000304  C043  F01D         	movff	_rx_len,CRC8@len
  2417  000308  EC30  F00C         	call	_CRC8	;wreg free
  2418  00030C  6E3D               	movwf	_calc_CS,c
  2419                           
  2420                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2421  00030E  0EFF               	movlw	255
  2422  000310  0101               	movlb	1	; () banked
  2423  000312  6FD7               	movwf	??_receiveData& (0+255),b
  2424  000314  0EFF               	movlw	255
  2425  000316  0101               	movlb	1	; () banked
  2426  000318  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2427  00031A  5042               	movf	_rx_array_inx,w,c
  2428  00031C  0101               	movlb	1	; () banked
  2429  00031E  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2430  000320  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2431  000322  0101               	movlb	1	; () banked
  2432  000324  51D7               	movf	??_receiveData& (0+255),w,b
  2433  000326  0101               	movlb	1	; () banked
  2434  000328  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2435  00032A  0101               	movlb	1	; () banked
  2436  00032C  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2437  00032E  0101               	movlb	1	; () banked
  2438  000330  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2439  000332  0E00               	movlw	low _rx_buffer
  2440  000334  0101               	movlb	1	; () banked
  2441  000336  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2442  000338  6ED9               	movwf	fsr2l,c
  2443  00033A  0E02               	movlw	high _rx_buffer
  2444  00033C  0101               	movlb	1	; () banked
  2445  00033E  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2446  000340  6EDA               	movwf	fsr2h,c
  2447  000342  503D               	movf	_calc_CS,w,c
  2448  000344  18DE               	xorwf	postinc2,w,c
  2449  000346  A4D8               	btfss	status,2,c
  2450  000348  D139               	goto	l3767
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;FastTransfer.c: 147: int r;
  2454                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2455  00034A  0E00               	movlw	0
  2456  00034C  0101               	movlb	1	; () banked
  2457  00034E  6FE8               	movwf	(receiveData@r+1)& (0+255),b
  2458  000350  0E00               	movlw	0
  2459  000352  6FE7               	movwf	receiveData@r& (0+255),b
  2460  000354  D05A               	goto	l3727
  2461  000356                     l3717:
  2462                           
  2463                           ; BSR set to: 1
  2464                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2465  000356  0E00               	movlw	low _rx_buffer
  2466  000358  0101               	movlb	1	; () banked
  2467  00035A  25E7               	addwf	receiveData@r& (0+255),w,b
  2468  00035C  6ED9               	movwf	fsr2l,c
  2469  00035E  0E02               	movlw	high _rx_buffer
  2470  000360  0101               	movlb	1	; () banked
  2471  000362  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2472  000364  6EDA               	movwf	fsr2h,c
  2473  000366  503E               	movf	_maxDataAddress,w,c
  2474  000368  5CDE               	subwf	postinc2,w,c
  2475  00036A  B0D8               	btfsc	status,0,c
  2476  00036C  D041               	goto	l3723
  2477                           
  2478                           ; BSR set to: 1
  2479                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2480  00036E  0E01               	movlw	1
  2481  000370  0101               	movlb	1	; () banked
  2482  000372  25E7               	addwf	receiveData@r& (0+255),w,b
  2483  000374  0101               	movlb	1	; () banked
  2484  000376  6FD7               	movwf	??_receiveData& (0+255),b
  2485  000378  0E00               	movlw	0
  2486  00037A  0101               	movlb	1	; () banked
  2487  00037C  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2488  00037E  0101               	movlb	1	; () banked
  2489  000380  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2490  000382  0E00               	movlw	low _rx_buffer
  2491  000384  0101               	movlb	1	; () banked
  2492  000386  25D7               	addwf	??_receiveData& (0+255),w,b
  2493  000388  6ED9               	movwf	fsr2l,c
  2494  00038A  0E02               	movlw	high _rx_buffer
  2495  00038C  0101               	movlb	1	; () banked
  2496  00038E  21D8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2497  000390  6EDA               	movwf	fsr2h,c
  2498  000392  50DF               	movf	indf2,w,c
  2499  000394  6E28               	movwf	_group,c
  2500                           
  2501                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2502  000396  0E02               	movlw	2
  2503  000398  0101               	movlb	1	; () banked
  2504  00039A  25E7               	addwf	receiveData@r& (0+255),w,b
  2505  00039C  0101               	movlb	1	; () banked
  2506  00039E  6FD7               	movwf	??_receiveData& (0+255),b
  2507  0003A0  0E00               	movlw	0
  2508  0003A2  0101               	movlb	1	; () banked
  2509  0003A4  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2510  0003A6  0101               	movlb	1	; () banked
  2511  0003A8  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2512  0003AA  0E00               	movlw	low _rx_buffer
  2513  0003AC  0101               	movlb	1	; () banked
  2514  0003AE  25D7               	addwf	??_receiveData& (0+255),w,b
  2515  0003B0  6ED9               	movwf	fsr2l,c
  2516  0003B2  0E02               	movlw	high _rx_buffer
  2517  0003B4  0101               	movlb	1	; () banked
  2518  0003B6  21D8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2519  0003B8  6EDA               	movwf	fsr2h,c
  2520  0003BA  50DF               	movf	indf2,w,c
  2521  0003BC  6E29               	movwf	_group+1,c
  2522                           
  2523                           ; BSR set to: 1
  2524                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2525  0003BE  0E00               	movlw	low _rx_buffer
  2526  0003C0  0101               	movlb	1	; () banked
  2527  0003C2  25E7               	addwf	receiveData@r& (0+255),w,b
  2528  0003C4  6ED9               	movwf	fsr2l,c
  2529  0003C6  0E02               	movlw	high _rx_buffer
  2530  0003C8  0101               	movlb	1	; () banked
  2531  0003CA  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2532  0003CC  6EDA               	movwf	fsr2h,c
  2533  0003CE  50DF               	movf	indf2,w,c
  2534  0003D0  0101               	movlb	1	; () banked
  2535  0003D2  6FD7               	movwf	??_receiveData& (0+255),b
  2536  0003D4  0101               	movlb	1	; () banked
  2537  0003D6  51D7               	movf	??_receiveData& (0+255),w,b
  2538  0003D8  0D02               	mullw	2
  2539  0003DA  50F3               	movf	prodl,w,c
  2540  0003DC  242C               	addwf	_receiveArrayAddress,w,c
  2541  0003DE  6ED9               	movwf	fsr2l,c
  2542  0003E0  50F4               	movf	prodh,w,c
  2543  0003E2  202D               	addwfc	_receiveArrayAddress+1,w,c
  2544  0003E4  6EDA               	movwf	fsr2h,c
  2545  0003E6  C028  FFDE         	movff	_group,postinc2
  2546  0003EA  C029  FFDD         	movff	_group+1,postdec2
  2547                           
  2548                           ;FastTransfer.c: 153: } else {
  2549  0003EE  D003               	goto	l3725
  2550  0003F0                     l3723:
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2554  0003F0  0100               	movlb	0	; () banked
  2555  0003F2  4BC4               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2556  0003F4  2BC5               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2557  0003F6                     l3725:
  2558  0003F6  0E03               	movlw	3
  2559  0003F8  0101               	movlb	1	; () banked
  2560  0003FA  25E7               	addwf	receiveData@r& (0+255),w,b
  2561  0003FC  0101               	movlb	1	; () banked
  2562  0003FE  6FE7               	movwf	receiveData@r& (0+255),b
  2563  000400  0E00               	movlw	0
  2564  000402  0101               	movlb	1	; () banked
  2565  000404  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2566  000406  0101               	movlb	1	; () banked
  2567  000408  6FE8               	movwf	(receiveData@r+1)& (0+255),b
  2568  00040A                     l3727:
  2569                           
  2570                           ; BSR set to: 1
  2571  00040A  5043               	movf	_rx_len,w,c
  2572  00040C  0101               	movlb	1	; () banked
  2573  00040E  6FD7               	movwf	??_receiveData& (0+255),b
  2574  000410  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  2575  000412  0101               	movlb	1	; () banked
  2576  000414  51D7               	movf	??_receiveData& (0+255),w,b
  2577  000416  0101               	movlb	1	; () banked
  2578  000418  5DE7               	subwf	receiveData@r& (0+255),w,b
  2579  00041A  0101               	movlb	1	; () banked
  2580  00041C  51E8               	movf	(receiveData@r+1)& (0+255),w,b
  2581  00041E  0A80               	xorlw	128
  2582  000420  0101               	movlb	1	; () banked
  2583  000422  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2584  000424  0101               	movlb	1	; () banked
  2585  000426  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2586  000428  0A80               	xorlw	128
  2587  00042A  0101               	movlb	1	; () banked
  2588  00042C  59D9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2589  00042E  A0D8               	btfss	status,0,c
  2590  000430  D792               	goto	l3717
  2591                           
  2592                           ; BSR set to: 1
  2593                           ;FastTransfer.c: 155: }
  2594                           ;FastTransfer.c: 156: }
  2595                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2596                           
  2597                           ; BSR set to: 1
  2598  000432  503C               	movf	_AKNAKsend,w,c
  2599  000434  B4D8               	btfsc	status,2,c
  2600  000436  D0BC               	goto	l3757
  2601                           
  2602                           ; BSR set to: 1
  2603                           ;FastTransfer.c: 160: unsigned char holder[3];
  2604                           ;FastTransfer.c: 161: holder[0] = 255;
  2605  000438  0101               	movlb	1	; () banked
  2606  00043A  69DD               	setf	receiveData@holder& (0+255),b
  2607                           
  2608                           ; BSR set to: 1
  2609                           ;FastTransfer.c: 162: holder[1] = 1;
  2610  00043C  0E01               	movlw	1
  2611  00043E  0101               	movlb	1	; () banked
  2612  000440  6FDE               	movwf	(receiveData@holder+1)& (0+255),b
  2613                           
  2614                           ; BSR set to: 1
  2615                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2616  000442  0EFF               	movlw	255
  2617  000444  0101               	movlb	1	; () banked
  2618  000446  6FD7               	movwf	??_receiveData& (0+255),b
  2619  000448  0EFF               	movlw	255
  2620  00044A  0101               	movlb	1	; () banked
  2621  00044C  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2622  00044E  5042               	movf	_rx_array_inx,w,c
  2623  000450  0101               	movlb	1	; () banked
  2624  000452  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2625  000454  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2626  000456  0101               	movlb	1	; () banked
  2627  000458  51D7               	movf	??_receiveData& (0+255),w,b
  2628  00045A  0101               	movlb	1	; () banked
  2629  00045C  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2630  00045E  0101               	movlb	1	; () banked
  2631  000460  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2632  000462  0101               	movlb	1	; () banked
  2633  000464  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2634  000466  0E00               	movlw	low _rx_buffer
  2635  000468  0101               	movlb	1	; () banked
  2636  00046A  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2637  00046C  6ED9               	movwf	fsr2l,c
  2638  00046E  0E02               	movlw	high _rx_buffer
  2639  000470  0101               	movlb	1	; () banked
  2640  000472  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2641  000474  6EDA               	movwf	fsr2h,c
  2642  000476  50DF               	movf	indf2,w,c
  2643  000478  0101               	movlb	1	; () banked
  2644  00047A  6FDF               	movwf	(receiveData@holder+2)& (0+255),b
  2645                           
  2646                           ; BSR set to: 1
  2647                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2648  00047C  0EDD               	movlw	low receiveData@holder
  2649  00047E  6E1B               	movwf	CRC8@data,c
  2650  000480  0E01               	movlw	high receiveData@holder
  2651  000482  6E1C               	movwf	CRC8@data+1,c
  2652  000484  0E03               	movlw	3
  2653  000486  6E1D               	movwf	CRC8@len,c
  2654  000488  EC30  F00C         	call	_CRC8	;wreg free
  2655  00048C  0101               	movlb	1	; () banked
  2656  00048E  6FE3               	movwf	receiveData@crcHolder& (0+255),b
  2657                           
  2658                           ; BSR set to: 1
  2659                           ;FastTransfer.c: 165: serial_write(0x06);
  2660  000490  D801               	call	u3538
  2661  000492  D00B               	goto	l3741
  2662  000494                     u3538:
  2663  000494  0005               	push	
  2664  000496  6EFA               	movwf	pclath,c
  2665  000498  5036               	movf	_serial_write,w,c
  2666  00049A  6EFD               	movwf	tosl,c
  2667  00049C  5037               	movf	_serial_write+1,w,c
  2668  00049E  6EFE               	movwf	tosh,c
  2669  0004A0  50F8               	movf	tblptru,w,c
  2670  0004A2  6EFF               	movwf	tosu,c
  2671  0004A4  50FA               	movf	pclath,w,c
  2672  0004A6  0E06               	movlw	6
  2673  0004A8  0012               	return		;indir
  2674  0004AA                     l3741:
  2675                           
  2676                           ;FastTransfer.c: 166: serial_write(0x85);
  2677  0004AA  D801               	call	u3548
  2678  0004AC  D00B               	goto	l3743
  2679  0004AE                     u3548:
  2680  0004AE  0005               	push	
  2681  0004B0  6EFA               	movwf	pclath,c
  2682  0004B2  5036               	movf	_serial_write,w,c
  2683  0004B4  6EFD               	movwf	tosl,c
  2684  0004B6  5037               	movf	_serial_write+1,w,c
  2685  0004B8  6EFE               	movwf	tosh,c
  2686  0004BA  50F8               	movf	tblptru,w,c
  2687  0004BC  6EFF               	movwf	tosu,c
  2688  0004BE  50FA               	movf	pclath,w,c
  2689  0004C0  0E85               	movlw	133
  2690  0004C2  0012               	return		;indir
  2691  0004C4                     l3743:
  2692                           
  2693                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2694  0004C4  D801               	call	u3558
  2695  0004C6  D00B               	goto	l3745
  2696  0004C8                     u3558:
  2697  0004C8  0005               	push	
  2698  0004CA  6EFA               	movwf	pclath,c
  2699  0004CC  5036               	movf	_serial_write,w,c
  2700  0004CE  6EFD               	movwf	tosl,c
  2701  0004D0  5037               	movf	_serial_write+1,w,c
  2702  0004D2  6EFE               	movwf	tosh,c
  2703  0004D4  50F8               	movf	tblptru,w,c
  2704  0004D6  6EFF               	movwf	tosu,c
  2705  0004D8  50FA               	movf	pclath,w,c
  2706  0004DA  5040               	movf	_returnAddress,w,c
  2707  0004DC  0012               	return		;indir
  2708  0004DE                     l3745:
  2709                           
  2710                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2711  0004DE  D801               	call	u3568
  2712  0004E0  D00B               	goto	l3747
  2713  0004E2                     u3568:
  2714  0004E2  0005               	push	
  2715  0004E4  6EFA               	movwf	pclath,c
  2716  0004E6  5036               	movf	_serial_write,w,c
  2717  0004E8  6EFD               	movwf	tosl,c
  2718  0004EA  5037               	movf	_serial_write+1,w,c
  2719  0004EC  6EFE               	movwf	tosh,c
  2720  0004EE  50F8               	movf	tblptru,w,c
  2721  0004F0  6EFF               	movwf	tosu,c
  2722  0004F2  50FA               	movf	pclath,w,c
  2723  0004F4  503F               	movf	_moduleAddress,w,c
  2724  0004F6  0012               	return		;indir
  2725  0004F8                     l3747:
  2726                           
  2727                           ;FastTransfer.c: 169: serial_write(3);
  2728  0004F8  D801               	call	u3578
  2729  0004FA  D00B               	goto	l3749
  2730  0004FC                     u3578:
  2731  0004FC  0005               	push	
  2732  0004FE  6EFA               	movwf	pclath,c
  2733  000500  5036               	movf	_serial_write,w,c
  2734  000502  6EFD               	movwf	tosl,c
  2735  000504  5037               	movf	_serial_write+1,w,c
  2736  000506  6EFE               	movwf	tosh,c
  2737  000508  50F8               	movf	tblptru,w,c
  2738  00050A  6EFF               	movwf	tosu,c
  2739  00050C  50FA               	movf	pclath,w,c
  2740  00050E  0E03               	movlw	3
  2741  000510  0012               	return		;indir
  2742  000512                     l3749:
  2743                           
  2744                           ;FastTransfer.c: 170: serial_write(255);
  2745  000512  D801               	call	u3588
  2746  000514  D00B               	goto	l3751
  2747  000516                     u3588:
  2748  000516  0005               	push	
  2749  000518  6EFA               	movwf	pclath,c
  2750  00051A  5036               	movf	_serial_write,w,c
  2751  00051C  6EFD               	movwf	tosl,c
  2752  00051E  5037               	movf	_serial_write+1,w,c
  2753  000520  6EFE               	movwf	tosh,c
  2754  000522  50F8               	movf	tblptru,w,c
  2755  000524  6EFF               	movwf	tosu,c
  2756  000526  50FA               	movf	pclath,w,c
  2757  000528  0EFF               	movlw	255
  2758  00052A  0012               	return		;indir
  2759  00052C                     l3751:
  2760                           
  2761                           ;FastTransfer.c: 171: serial_write(1);
  2762  00052C  D801               	call	u3598
  2763  00052E  D00B               	goto	l3753
  2764  000530                     u3598:
  2765  000530  0005               	push	
  2766  000532  6EFA               	movwf	pclath,c
  2767  000534  5036               	movf	_serial_write,w,c
  2768  000536  6EFD               	movwf	tosl,c
  2769  000538  5037               	movf	_serial_write+1,w,c
  2770  00053A  6EFE               	movwf	tosh,c
  2771  00053C  50F8               	movf	tblptru,w,c
  2772  00053E  6EFF               	movwf	tosu,c
  2773  000540  50FA               	movf	pclath,w,c
  2774  000542  0E01               	movlw	1
  2775  000544  0012               	return		;indir
  2776  000546                     l3753:
  2777                           
  2778                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2779  000546  D801               	call	u3608
  2780  000548  D025               	goto	l3755
  2781  00054A                     u3608:
  2782  00054A  0005               	push	
  2783  00054C  6EFA               	movwf	pclath,c
  2784  00054E  5036               	movf	_serial_write,w,c
  2785  000550  6EFD               	movwf	tosl,c
  2786  000552  5037               	movf	_serial_write+1,w,c
  2787  000554  6EFE               	movwf	tosh,c
  2788  000556  50F8               	movf	tblptru,w,c
  2789  000558  6EFF               	movwf	tosu,c
  2790  00055A  50FA               	movf	pclath,w,c
  2791  00055C  0EFF               	movlw	255
  2792  00055E  0101               	movlb	1	; () banked
  2793  000560  6FD7               	movwf	??_receiveData& (0+255),b
  2794  000562  0EFF               	movlw	255
  2795  000564  0101               	movlb	1	; () banked
  2796  000566  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2797  000568  5042               	movf	_rx_array_inx,w,c
  2798  00056A  0101               	movlb	1	; () banked
  2799  00056C  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2800  00056E  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2801  000570  0101               	movlb	1	; () banked
  2802  000572  51D7               	movf	??_receiveData& (0+255),w,b
  2803  000574  0101               	movlb	1	; () banked
  2804  000576  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2805  000578  0101               	movlb	1	; () banked
  2806  00057A  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2807  00057C  0101               	movlb	1	; () banked
  2808  00057E  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2809  000580  0E00               	movlw	low _rx_buffer
  2810  000582  0101               	movlb	1	; () banked
  2811  000584  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2812  000586  6ED9               	movwf	fsr2l,c
  2813  000588  0E02               	movlw	high _rx_buffer
  2814  00058A  0101               	movlb	1	; () banked
  2815  00058C  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2816  00058E  6EDA               	movwf	fsr2h,c
  2817  000590  50DF               	movf	indf2,w,c
  2818  000592  0012               	return		;indir
  2819  000594                     l3755:
  2820                           
  2821                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2822  000594  D801               	call	u3618
  2823  000596  D00C               	goto	l3757
  2824  000598                     u3618:
  2825  000598  0005               	push	
  2826  00059A  6EFA               	movwf	pclath,c
  2827  00059C  5036               	movf	_serial_write,w,c
  2828  00059E  6EFD               	movwf	tosl,c
  2829  0005A0  5037               	movf	_serial_write+1,w,c
  2830  0005A2  6EFE               	movwf	tosh,c
  2831  0005A4  50F8               	movf	tblptru,w,c
  2832  0005A6  6EFF               	movwf	tosu,c
  2833  0005A8  50FA               	movf	pclath,w,c
  2834  0005AA  0101               	movlb	1	; () banked
  2835  0005AC  51E3               	movf	receiveData@crcHolder& (0+255),w,b
  2836  0005AE  0012               	return		;indir
  2837  0005B0                     l3757:
  2838                           
  2839                           ;FastTransfer.c: 174: }
  2840                           ;FastTransfer.c: 178: rx_len = 0;
  2841  0005B0  0E00               	movlw	0
  2842  0005B2  6E43               	movwf	_rx_len,c
  2843                           
  2844                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2845  0005B4  0E00               	movlw	0
  2846  0005B6  6E42               	movwf	_rx_array_inx,c
  2847                           
  2848                           ;FastTransfer.c: 180: return 1;
  2849  0005B8  0E01               	movlw	1
  2850  0005BA  0012               	return	
  2851  0005BC                     l3767:
  2852                           
  2853                           ;FastTransfer.c: 182: crcErrorCounter++;
  2854  0005BC  0100               	movlb	0	; () banked
  2855  0005BE  4BC2               	infsnz	_crcErrorCounter& (0+255),f,b
  2856  0005C0  2BC3               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2860  0005C2  503C               	movf	_AKNAKsend,w,c
  2861  0005C4  B4D8               	btfsc	status,2,c
  2862  0005C6  D0BC               	goto	l3797
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;FastTransfer.c: 185: unsigned char holder[3];
  2866                           ;FastTransfer.c: 186: holder[0] = 255;
  2867  0005C8  0101               	movlb	1	; () banked
  2868  0005CA  69E0               	setf	receiveData@holder_1238& (0+255),b
  2869                           
  2870                           ; BSR set to: 1
  2871                           ;FastTransfer.c: 187: holder[1] = 2;
  2872  0005CC  0E02               	movlw	2
  2873  0005CE  0101               	movlb	1	; () banked
  2874  0005D0  6FE1               	movwf	(receiveData@holder_1238+1)& (0+255),b
  2875                           
  2876                           ; BSR set to: 1
  2877                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2878  0005D2  0EFF               	movlw	255
  2879  0005D4  0101               	movlb	1	; () banked
  2880  0005D6  6FD7               	movwf	??_receiveData& (0+255),b
  2881  0005D8  0EFF               	movlw	255
  2882  0005DA  0101               	movlb	1	; () banked
  2883  0005DC  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2884  0005DE  5042               	movf	_rx_array_inx,w,c
  2885  0005E0  0101               	movlb	1	; () banked
  2886  0005E2  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2887  0005E4  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2888  0005E6  0101               	movlb	1	; () banked
  2889  0005E8  51D7               	movf	??_receiveData& (0+255),w,b
  2890  0005EA  0101               	movlb	1	; () banked
  2891  0005EC  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2892  0005EE  0101               	movlb	1	; () banked
  2893  0005F0  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2894  0005F2  0101               	movlb	1	; () banked
  2895  0005F4  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2896  0005F6  0E00               	movlw	low _rx_buffer
  2897  0005F8  0101               	movlb	1	; () banked
  2898  0005FA  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2899  0005FC  6ED9               	movwf	fsr2l,c
  2900  0005FE  0E02               	movlw	high _rx_buffer
  2901  000600  0101               	movlb	1	; () banked
  2902  000602  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2903  000604  6EDA               	movwf	fsr2h,c
  2904  000606  50DF               	movf	indf2,w,c
  2905  000608  0101               	movlb	1	; () banked
  2906  00060A  6FE2               	movwf	(receiveData@holder_1238+2)& (0+255),b
  2907                           
  2908                           ; BSR set to: 1
  2909                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2910  00060C  0EE0               	movlw	low receiveData@holder_1238
  2911  00060E  6E1B               	movwf	CRC8@data,c
  2912  000610  0E01               	movlw	high receiveData@holder_1238
  2913  000612  6E1C               	movwf	CRC8@data+1,c
  2914  000614  0E03               	movlw	3
  2915  000616  6E1D               	movwf	CRC8@len,c
  2916  000618  EC30  F00C         	call	_CRC8
  2917  00061C  0101               	movlb	1	; () banked
  2918  00061E  6FE4               	movwf	receiveData@crcHolder_1239& (0+255),b
  2919                           
  2920                           ; BSR set to: 1
  2921                           ;FastTransfer.c: 190: serial_write(0x06);
  2922  000620  D801               	call	u3638
  2923  000622  D00B               	goto	l3781
  2924  000624                     u3638:
  2925  000624  0005               	push	
  2926  000626  6EFA               	movwf	pclath,c
  2927  000628  5036               	movf	_serial_write,w,c
  2928  00062A  6EFD               	movwf	tosl,c
  2929  00062C  5037               	movf	_serial_write+1,w,c
  2930  00062E  6EFE               	movwf	tosh,c
  2931  000630  50F8               	movf	tblptru,w,c
  2932  000632  6EFF               	movwf	tosu,c
  2933  000634  50FA               	movf	pclath,w,c
  2934  000636  0E06               	movlw	6
  2935  000638  0012               	return		;indir
  2936  00063A                     l3781:
  2937                           
  2938                           ;FastTransfer.c: 191: serial_write(0x85);
  2939  00063A  D801               	call	u3648
  2940  00063C  D00B               	goto	l3783
  2941  00063E                     u3648:
  2942  00063E  0005               	push	
  2943  000640  6EFA               	movwf	pclath,c
  2944  000642  5036               	movf	_serial_write,w,c
  2945  000644  6EFD               	movwf	tosl,c
  2946  000646  5037               	movf	_serial_write+1,w,c
  2947  000648  6EFE               	movwf	tosh,c
  2948  00064A  50F8               	movf	tblptru,w,c
  2949  00064C  6EFF               	movwf	tosu,c
  2950  00064E  50FA               	movf	pclath,w,c
  2951  000650  0E85               	movlw	133
  2952  000652  0012               	return		;indir
  2953  000654                     l3783:
  2954                           
  2955                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2956  000654  D801               	call	u3658
  2957  000656  D00B               	goto	l3785
  2958  000658                     u3658:
  2959  000658  0005               	push	
  2960  00065A  6EFA               	movwf	pclath,c
  2961  00065C  5036               	movf	_serial_write,w,c
  2962  00065E  6EFD               	movwf	tosl,c
  2963  000660  5037               	movf	_serial_write+1,w,c
  2964  000662  6EFE               	movwf	tosh,c
  2965  000664  50F8               	movf	tblptru,w,c
  2966  000666  6EFF               	movwf	tosu,c
  2967  000668  50FA               	movf	pclath,w,c
  2968  00066A  5040               	movf	_returnAddress,w,c
  2969  00066C  0012               	return		;indir
  2970  00066E                     l3785:
  2971                           
  2972                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  2973  00066E  D801               	call	u3668
  2974  000670  D00B               	goto	l3787
  2975  000672                     u3668:
  2976  000672  0005               	push	
  2977  000674  6EFA               	movwf	pclath,c
  2978  000676  5036               	movf	_serial_write,w,c
  2979  000678  6EFD               	movwf	tosl,c
  2980  00067A  5037               	movf	_serial_write+1,w,c
  2981  00067C  6EFE               	movwf	tosh,c
  2982  00067E  50F8               	movf	tblptru,w,c
  2983  000680  6EFF               	movwf	tosu,c
  2984  000682  50FA               	movf	pclath,w,c
  2985  000684  503F               	movf	_moduleAddress,w,c
  2986  000686  0012               	return		;indir
  2987  000688                     l3787:
  2988                           
  2989                           ;FastTransfer.c: 194: serial_write(3);
  2990  000688  D801               	call	u3678
  2991  00068A  D00B               	goto	l3789
  2992  00068C                     u3678:
  2993  00068C  0005               	push	
  2994  00068E  6EFA               	movwf	pclath,c
  2995  000690  5036               	movf	_serial_write,w,c
  2996  000692  6EFD               	movwf	tosl,c
  2997  000694  5037               	movf	_serial_write+1,w,c
  2998  000696  6EFE               	movwf	tosh,c
  2999  000698  50F8               	movf	tblptru,w,c
  3000  00069A  6EFF               	movwf	tosu,c
  3001  00069C  50FA               	movf	pclath,w,c
  3002  00069E  0E03               	movlw	3
  3003  0006A0  0012               	return		;indir
  3004  0006A2                     l3789:
  3005                           
  3006                           ;FastTransfer.c: 195: serial_write(255);
  3007  0006A2  D801               	call	u3688
  3008  0006A4  D00B               	goto	l3791
  3009  0006A6                     u3688:
  3010  0006A6  0005               	push	
  3011  0006A8  6EFA               	movwf	pclath,c
  3012  0006AA  5036               	movf	_serial_write,w,c
  3013  0006AC  6EFD               	movwf	tosl,c
  3014  0006AE  5037               	movf	_serial_write+1,w,c
  3015  0006B0  6EFE               	movwf	tosh,c
  3016  0006B2  50F8               	movf	tblptru,w,c
  3017  0006B4  6EFF               	movwf	tosu,c
  3018  0006B6  50FA               	movf	pclath,w,c
  3019  0006B8  0EFF               	movlw	255
  3020  0006BA  0012               	return		;indir
  3021  0006BC                     l3791:
  3022                           
  3023                           ;FastTransfer.c: 196: serial_write(2);
  3024  0006BC  D801               	call	u3698
  3025  0006BE  D00B               	goto	l3793
  3026  0006C0                     u3698:
  3027  0006C0  0005               	push	
  3028  0006C2  6EFA               	movwf	pclath,c
  3029  0006C4  5036               	movf	_serial_write,w,c
  3030  0006C6  6EFD               	movwf	tosl,c
  3031  0006C8  5037               	movf	_serial_write+1,w,c
  3032  0006CA  6EFE               	movwf	tosh,c
  3033  0006CC  50F8               	movf	tblptru,w,c
  3034  0006CE  6EFF               	movwf	tosu,c
  3035  0006D0  50FA               	movf	pclath,w,c
  3036  0006D2  0E02               	movlw	2
  3037  0006D4  0012               	return		;indir
  3038  0006D6                     l3793:
  3039                           
  3040                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3041  0006D6  D801               	call	u3708
  3042  0006D8  D025               	goto	l3795
  3043  0006DA                     u3708:
  3044  0006DA  0005               	push	
  3045  0006DC  6EFA               	movwf	pclath,c
  3046  0006DE  5036               	movf	_serial_write,w,c
  3047  0006E0  6EFD               	movwf	tosl,c
  3048  0006E2  5037               	movf	_serial_write+1,w,c
  3049  0006E4  6EFE               	movwf	tosh,c
  3050  0006E6  50F8               	movf	tblptru,w,c
  3051  0006E8  6EFF               	movwf	tosu,c
  3052  0006EA  50FA               	movf	pclath,w,c
  3053  0006EC  0EFF               	movlw	255
  3054  0006EE  0101               	movlb	1	; () banked
  3055  0006F0  6FD7               	movwf	??_receiveData& (0+255),b
  3056  0006F2  0EFF               	movlw	255
  3057  0006F4  0101               	movlb	1	; () banked
  3058  0006F6  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  3059  0006F8  5042               	movf	_rx_array_inx,w,c
  3060  0006FA  0101               	movlb	1	; () banked
  3061  0006FC  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  3062  0006FE  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  3063  000700  0101               	movlb	1	; () banked
  3064  000702  51D7               	movf	??_receiveData& (0+255),w,b
  3065  000704  0101               	movlb	1	; () banked
  3066  000706  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  3067  000708  0101               	movlb	1	; () banked
  3068  00070A  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  3069  00070C  0101               	movlb	1	; () banked
  3070  00070E  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  3071  000710  0E00               	movlw	low _rx_buffer
  3072  000712  0101               	movlb	1	; () banked
  3073  000714  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  3074  000716  6ED9               	movwf	fsr2l,c
  3075  000718  0E02               	movlw	high _rx_buffer
  3076  00071A  0101               	movlb	1	; () banked
  3077  00071C  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  3078  00071E  6EDA               	movwf	fsr2h,c
  3079  000720  50DF               	movf	indf2,w,c
  3080  000722  0012               	return		;indir
  3081  000724                     l3795:
  3082                           
  3083                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3084  000724  D801               	call	u3718
  3085  000726  D00C               	goto	l3797
  3086  000728                     u3718:
  3087  000728  0005               	push	
  3088  00072A  6EFA               	movwf	pclath,c
  3089  00072C  5036               	movf	_serial_write,w,c
  3090  00072E  6EFD               	movwf	tosl,c
  3091  000730  5037               	movf	_serial_write+1,w,c
  3092  000732  6EFE               	movwf	tosh,c
  3093  000734  50F8               	movf	tblptru,w,c
  3094  000736  6EFF               	movwf	tosu,c
  3095  000738  50FA               	movf	pclath,w,c
  3096  00073A  0101               	movlb	1	; () banked
  3097  00073C  51E4               	movf	receiveData@crcHolder_1239& (0+255),w,b
  3098  00073E  0012               	return		;indir
  3099  000740                     l3797:
  3100                           
  3101                           ;FastTransfer.c: 199: }
  3102                           ;FastTransfer.c: 202: rx_len = 0;
  3103  000740  0E00               	movlw	0
  3104  000742  6E43               	movwf	_rx_len,c
  3105                           
  3106                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3107  000744  0E00               	movlw	0
  3108  000746  6E42               	movwf	_rx_array_inx,c
  3109                           
  3110                           ;FastTransfer.c: 204: return 0;
  3111  000748  0E00               	movlw	0
  3112  00074A  0012               	return	
  3113  00074C                     l3805:
  3114                           
  3115                           ;FastTransfer.c: 205: }
  3116                           ;FastTransfer.c: 206: }
  3117                           ;FastTransfer.c: 207: }
  3118                           ;FastTransfer.c: 210: return 0;
  3119  00074C  0E00               	movlw	0
  3120  00074E  0012               	return	
  3121  000750                     __end_of_receiveData:
  3122                           	opt stack 0
  3123                           tosu	equ	0xFFF
  3124                           tosh	equ	0xFFE
  3125                           tosl	equ	0xFFD
  3126                           pclath	equ	0xFFA
  3127                           tblptru	equ	0xFF8
  3128                           tblptrh	equ	0xFF7
  3129                           tblptrl	equ	0xFF6
  3130                           tablat	equ	0xFF5
  3131                           prodh	equ	0xFF4
  3132                           prodl	equ	0xFF3
  3133                           intcon	equ	0xFF2
  3134                           postinc0	equ	0xFEE
  3135                           wreg	equ	0xFE8
  3136                           indf2	equ	0xFDF
  3137                           postinc2	equ	0xFDE
  3138                           postdec2	equ	0xFDD
  3139                           plusw2	equ	0xFDB
  3140                           fsr2h	equ	0xFDA
  3141                           fsr2l	equ	0xFD9
  3142                           status	equ	0xFD8
  3143                           
  3144 ;; *************** function _Send_put *****************
  3145 ;; Defined at:
  3146 ;;		line 130 in file "UART.c"
  3147 ;; Parameters:    Size  Location     Type
  3148 ;;  _data           1    wreg     unsigned char 
  3149 ;; Auto vars:     Size  Location     Type
  3150 ;;  _data           1    0[BANK0 ] unsigned char 
  3151 ;; Return value:  Size  Location     Type
  3152 ;;		None               void
  3153 ;; Registers used:
  3154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3155 ;; Tracked objects:
  3156 ;;		On entry : 0/0
  3157 ;;		On exit  : 0/0
  3158 ;;		Unchanged: 0/0
  3159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3160 ;;      Params:         0       0       0       0       0       0       0
  3161 ;;      Locals:         0       1       0       0       0       0       0
  3162 ;;      Temps:          0       0       0       0       0       0       0
  3163 ;;      Totals:         0       1       0       0       0       0       0
  3164 ;;Total ram usage:        1 bytes
  3165 ;; Hardware stack levels used:    1
  3166 ;; Hardware stack levels required when called:    6
  3167 ;; This function calls:
  3168 ;;		_UART_buff_get
  3169 ;;		_UART_buff_put
  3170 ;; This function is called by:
  3171 ;;		_SYSTEM_Initialize
  3172 ;;		_putch
  3173 ;;		_sendData
  3174 ;;		_receiveData
  3175 ;; This function uses a non-reentrant model
  3176 ;;
  3177                           
  3178                           	psect	text10
  3179  0019CC                     __ptext10:
  3180                           	opt stack 0
  3181  0019CC                     _Send_put:
  3182                           	opt stack 21
  3183                           
  3184                           ;incstack = 0
  3185                           ;Send_put@_data stored from wreg
  3186  0019CC  0100               	movlb	0	; () banked
  3187  0019CE  6FFF               	movwf	Send_put@_data& (0+255),b
  3188                           
  3189                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3190  0019D0  0E00               	movlw	low _output_buffer
  3191  0019D2  6E21               	movwf	UART_buff_put@_this,c
  3192  0019D4  0E04               	movlw	high _output_buffer
  3193  0019D6  6E22               	movwf	UART_buff_put@_this+1,c
  3194  0019D8  C0FF  F023         	movff	Send_put@_data,UART_buff_put@c
  3195  0019DC  ECB6  F005         	call	_UART_buff_put
  3196                           
  3197                           ;UART.c: 132: if (Transmit_stall == 1) {
  3198  0019E0  0444               	decf	_Transmit_stall,w,c
  3199  0019E2  A4D8               	btfss	status,2,c
  3200  0019E4  0012               	return	
  3201                           
  3202                           ;UART.c: 133: Transmit_stall = 0;
  3203  0019E6  0E00               	movlw	0
  3204  0019E8  6E44               	movwf	_Transmit_stall,c
  3205                           
  3206                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3207  0019EA  0E00               	movlw	low _output_buffer
  3208  0019EC  6E21               	movwf	UART_buff_get@_this,c
  3209  0019EE  0E04               	movlw	high _output_buffer
  3210  0019F0  6E22               	movwf	UART_buff_get@_this+1,c
  3211  0019F2  EC65  F009         	call	_UART_buff_get	;wreg free
  3212  0019F6  6EAD               	movwf	4013,c	;volatile
  3213                           
  3214                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3215  0019F8  889D               	bsf	3997,4,c	;volatile
  3216  0019FA  0012               	return	
  3217  0019FC                     __end_of_Send_put:
  3218                           	opt stack 0
  3219                           tosu	equ	0xFFF
  3220                           tosh	equ	0xFFE
  3221                           tosl	equ	0xFFD
  3222                           pclath	equ	0xFFA
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           intcon	equ	0xFF2
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           indf2	equ	0xFDF
  3233                           postinc2	equ	0xFDE
  3234                           postdec2	equ	0xFDD
  3235                           plusw2	equ	0xFDB
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _UART_buff_put *****************
  3241 ;; Defined at:
  3242 ;;		line 68 in file "UART.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3245 ;;		 -> output_buffer(206), input_buffer(206), 
  3246 ;;  c               1   34[COMRAM] const unsigned char 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;		None
  3249 ;; Return value:  Size  Location     Type
  3250 ;;		None               void
  3251 ;; Registers used:
  3252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3253 ;; Tracked objects:
  3254 ;;		On entry : 0/0
  3255 ;;		On exit  : 0/0
  3256 ;;		Unchanged: 0/0
  3257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3258 ;;      Params:         3       0       0       0       0       0       0
  3259 ;;      Locals:         0       0       0       0       0       0       0
  3260 ;;      Temps:          2       0       0       0       0       0       0
  3261 ;;      Totals:         5       0       0       0       0       0       0
  3262 ;;Total ram usage:        5 bytes
  3263 ;; Hardware stack levels used:    1
  3264 ;; Hardware stack levels required when called:    5
  3265 ;; This function calls:
  3266 ;;		_UART_buff_modulo_inc
  3267 ;; This function is called by:
  3268 ;;		_Send_put
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text11
  3273  000B6C                     __ptext11:
  3274                           	opt stack 0
  3275  000B6C                     _UART_buff_put:
  3276                           	opt stack 21
  3277                           
  3278                           ;UART.c: 69: if (_this->count < 200) {
  3279                           
  3280                           ;incstack = 0
  3281  000B6C  EE20 F0CC          	lfsr	2,204
  3282  000B70  5021               	movf	UART_buff_put@_this,w,c
  3283  000B72  26D9               	addwf	fsr2l,f,c
  3284  000B74  5022               	movf	UART_buff_put@_this+1,w,c
  3285  000B76  22DA               	addwfc	fsr2h,f,c
  3286  000B78  0E01               	movlw	1
  3287  000B7A  BEDB               	btfsc	plusw2,7,c
  3288  000B7C  D007               	goto	l3355
  3289  000B7E  0E01               	movlw	1
  3290  000B80  50DB               	movf	plusw2,w,c
  3291  000B82  E13A               	bnz	l3361
  3292  000B84  0EC8               	movlw	200
  3293  000B86  5CDE               	subwf	postinc2,w,c
  3294  000B88  B0D8               	btfsc	status,0,c
  3295  000B8A  D036               	goto	l3361
  3296  000B8C                     l3355:
  3297                           
  3298                           ;UART.c: 70: _this->buf[_this->head] = c;
  3299  000B8C  EE20 F0C8          	lfsr	2,200
  3300  000B90  5021               	movf	UART_buff_put@_this,w,c
  3301  000B92  26D9               	addwf	fsr2l,f,c
  3302  000B94  5022               	movf	UART_buff_put@_this+1,w,c
  3303  000B96  22DA               	addwfc	fsr2h,f,c
  3304  000B98  CFDE F024          	movff	postinc2,??_UART_buff_put
  3305  000B9C  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3306  000BA0  5024               	movf	??_UART_buff_put,w,c
  3307  000BA2  2421               	addwf	UART_buff_put@_this,w,c
  3308  000BA4  6ED9               	movwf	fsr2l,c
  3309  000BA6  5025               	movf	??_UART_buff_put+1,w,c
  3310  000BA8  2022               	addwfc	UART_buff_put@_this+1,w,c
  3311  000BAA  6EDA               	movwf	fsr2h,c
  3312  000BAC  C023  FFDF         	movff	UART_buff_put@c,indf2
  3313                           
  3314                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3315  000BB0  EE20 F0C8          	lfsr	2,200
  3316  000BB4  5021               	movf	UART_buff_put@_this,w,c
  3317  000BB6  26D9               	addwf	fsr2l,f,c
  3318  000BB8  5022               	movf	UART_buff_put@_this+1,w,c
  3319  000BBA  22DA               	addwfc	fsr2h,f,c
  3320  000BBC  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3321  000BC0  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3322  000BC4  0E00               	movlw	0
  3323  000BC6  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3324  000BC8  0EC8               	movlw	200
  3325  000BCA  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3326  000BCC  EC29  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3327  000BD0  EE20 F0C8          	lfsr	2,200
  3328  000BD4  5021               	movf	UART_buff_put@_this,w,c
  3329  000BD6  26D9               	addwf	fsr2l,f,c
  3330  000BD8  5022               	movf	UART_buff_put@_this+1,w,c
  3331  000BDA  22DA               	addwfc	fsr2h,f,c
  3332  000BDC  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3333  000BE0  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3334                           
  3335                           ;UART.c: 72: ++_this->count;
  3336  000BE4  EE20 F0CC          	lfsr	2,204
  3337  000BE8  5021               	movf	UART_buff_put@_this,w,c
  3338  000BEA  26D9               	addwf	fsr2l,f,c
  3339  000BEC  5022               	movf	UART_buff_put@_this+1,w,c
  3340  000BEE  22DA               	addwfc	fsr2h,f,c
  3341  000BF0  2ADE               	incf	postinc2,f,c
  3342  000BF2  0E00               	movlw	0
  3343  000BF4  22DD               	addwfc	postdec2,f,c
  3344                           
  3345                           ;UART.c: 73: } else {
  3346  000BF6  0012               	return	
  3347  000BF8                     l3361:
  3348                           
  3349                           ;UART.c: 74: _this->buf[_this->head] = c;
  3350  000BF8  EE20 F0C8          	lfsr	2,200
  3351  000BFC  5021               	movf	UART_buff_put@_this,w,c
  3352  000BFE  26D9               	addwf	fsr2l,f,c
  3353  000C00  5022               	movf	UART_buff_put@_this+1,w,c
  3354  000C02  22DA               	addwfc	fsr2h,f,c
  3355  000C04  CFDE F024          	movff	postinc2,??_UART_buff_put
  3356  000C08  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3357  000C0C  5024               	movf	??_UART_buff_put,w,c
  3358  000C0E  2421               	addwf	UART_buff_put@_this,w,c
  3359  000C10  6ED9               	movwf	fsr2l,c
  3360  000C12  5025               	movf	??_UART_buff_put+1,w,c
  3361  000C14  2022               	addwfc	UART_buff_put@_this+1,w,c
  3362  000C16  6EDA               	movwf	fsr2h,c
  3363  000C18  C023  FFDF         	movff	UART_buff_put@c,indf2
  3364                           
  3365                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3366  000C1C  EE20 F0C8          	lfsr	2,200
  3367  000C20  5021               	movf	UART_buff_put@_this,w,c
  3368  000C22  26D9               	addwf	fsr2l,f,c
  3369  000C24  5022               	movf	UART_buff_put@_this+1,w,c
  3370  000C26  22DA               	addwfc	fsr2h,f,c
  3371  000C28  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3372  000C2C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3373  000C30  0E00               	movlw	0
  3374  000C32  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3375  000C34  0EC8               	movlw	200
  3376  000C36  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3377  000C38  EC29  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3378  000C3C  EE20 F0C8          	lfsr	2,200
  3379  000C40  5021               	movf	UART_buff_put@_this,w,c
  3380  000C42  26D9               	addwf	fsr2l,f,c
  3381  000C44  5022               	movf	UART_buff_put@_this+1,w,c
  3382  000C46  22DA               	addwfc	fsr2h,f,c
  3383  000C48  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3384  000C4C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3385                           
  3386                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3387  000C50  EE20 F0CA          	lfsr	2,202
  3388  000C54  5021               	movf	UART_buff_put@_this,w,c
  3389  000C56  26D9               	addwf	fsr2l,f,c
  3390  000C58  5022               	movf	UART_buff_put@_this+1,w,c
  3391  000C5A  22DA               	addwfc	fsr2h,f,c
  3392  000C5C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3393  000C60  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3394  000C64  0E00               	movlw	0
  3395  000C66  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3396  000C68  0EC8               	movlw	200
  3397  000C6A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3398  000C6C  EC29  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3399  000C70  EE20 F0CA          	lfsr	2,202
  3400  000C74  5021               	movf	UART_buff_put@_this,w,c
  3401  000C76  26D9               	addwf	fsr2l,f,c
  3402  000C78  5022               	movf	UART_buff_put@_this+1,w,c
  3403  000C7A  22DA               	addwfc	fsr2h,f,c
  3404  000C7C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3405  000C80  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3406  000C84  0012               	return	
  3407  000C86                     __end_of_UART_buff_put:
  3408                           	opt stack 0
  3409                           tosu	equ	0xFFF
  3410                           tosh	equ	0xFFE
  3411                           tosl	equ	0xFFD
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           indf2	equ	0xFDF
  3423                           postinc2	equ	0xFDE
  3424                           postdec2	equ	0xFDD
  3425                           plusw2	equ	0xFDB
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _Receive_peek *****************
  3431 ;; Defined at:
  3432 ;;		line 118 in file "UART.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;		None
  3437 ;; Return value:  Size  Location     Type
  3438 ;;                  1    wreg      unsigned char 
  3439 ;; Registers used:
  3440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3441 ;; Tracked objects:
  3442 ;;		On entry : 0/0
  3443 ;;		On exit  : 0/0
  3444 ;;		Unchanged: 0/0
  3445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3446 ;;      Params:         0       0       0       0       0       0       0
  3447 ;;      Locals:         0       0       0       0       0       0       0
  3448 ;;      Temps:          0       0       0       0       0       0       0
  3449 ;;      Totals:         0       0       0       0       0       0       0
  3450 ;;Total ram usage:        0 bytes
  3451 ;; Hardware stack levels used:    1
  3452 ;; Hardware stack levels required when called:    5
  3453 ;; This function calls:
  3454 ;;		_UART_buff_peek
  3455 ;; This function is called by:
  3456 ;;		_SYSTEM_Initialize
  3457 ;;		_receiveData
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460                           
  3461                           	psect	text12
  3462  001BA6                     __ptext12:
  3463                           	opt stack 0
  3464  001BA6                     _Receive_peek:
  3465                           	opt stack 23
  3466                           
  3467                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3468                           
  3469                           ;incstack = 0
  3470  001BA6  0E00               	movlw	low _input_buffer
  3471  001BA8  6E1B               	movwf	UART_buff_peek@_this,c
  3472  001BAA  0E03               	movlw	high _input_buffer
  3473  001BAC  6E1C               	movwf	UART_buff_peek@_this+1,c
  3474  001BAE  EC53  F00D         	call	_UART_buff_peek	;wreg free
  3475  001BB2  0012               	return	
  3476  001BB4                     __end_of_Receive_peek:
  3477                           	opt stack 0
  3478                           tosu	equ	0xFFF
  3479                           tosh	equ	0xFFE
  3480                           tosl	equ	0xFFD
  3481                           pclath	equ	0xFFA
  3482                           tblptru	equ	0xFF8
  3483                           tblptrh	equ	0xFF7
  3484                           tblptrl	equ	0xFF6
  3485                           tablat	equ	0xFF5
  3486                           prodh	equ	0xFF4
  3487                           prodl	equ	0xFF3
  3488                           intcon	equ	0xFF2
  3489                           postinc0	equ	0xFEE
  3490                           wreg	equ	0xFE8
  3491                           indf2	equ	0xFDF
  3492                           postinc2	equ	0xFDE
  3493                           postdec2	equ	0xFDD
  3494                           plusw2	equ	0xFDB
  3495                           fsr2h	equ	0xFDA
  3496                           fsr2l	equ	0xFD9
  3497                           status	equ	0xFD8
  3498                           
  3499 ;; *************** function _UART_buff_peek *****************
  3500 ;; Defined at:
  3501 ;;		line 114 in file "UART.c"
  3502 ;; Parameters:    Size  Location     Type
  3503 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3504 ;;		 -> input_buffer(206), 
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;                  1    wreg      unsigned char 
  3509 ;; Registers used:
  3510 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: 0/0
  3515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3516 ;;      Params:         2       0       0       0       0       0       0
  3517 ;;      Locals:         0       0       0       0       0       0       0
  3518 ;;      Temps:          2       0       0       0       0       0       0
  3519 ;;      Totals:         4       0       0       0       0       0       0
  3520 ;;Total ram usage:        4 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; Hardware stack levels required when called:    4
  3523 ;; This function calls:
  3524 ;;		Nothing
  3525 ;; This function is called by:
  3526 ;;		_Receive_peek
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text13
  3531  001AA6                     __ptext13:
  3532                           	opt stack 0
  3533  001AA6                     _UART_buff_peek:
  3534                           	opt stack 23
  3535                           
  3536                           ;UART.c: 115: return _this->buf[_this->tail];
  3537                           
  3538                           ;incstack = 0
  3539  001AA6  EE20 F0CA          	lfsr	2,202
  3540  001AAA  501B               	movf	UART_buff_peek@_this,w,c
  3541  001AAC  26D9               	addwf	fsr2l,f,c
  3542  001AAE  501C               	movf	UART_buff_peek@_this+1,w,c
  3543  001AB0  22DA               	addwfc	fsr2h,f,c
  3544  001AB2  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3545  001AB6  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3546  001ABA  501D               	movf	??_UART_buff_peek,w,c
  3547  001ABC  241B               	addwf	UART_buff_peek@_this,w,c
  3548  001ABE  6ED9               	movwf	fsr2l,c
  3549  001AC0  501E               	movf	??_UART_buff_peek+1,w,c
  3550  001AC2  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3551  001AC4  6EDA               	movwf	fsr2h,c
  3552  001AC6  50DF               	movf	indf2,w,c
  3553  001AC8  0012               	return	
  3554  001ACA                     __end_of_UART_buff_peek:
  3555                           	opt stack 0
  3556                           tosu	equ	0xFFF
  3557                           tosh	equ	0xFFE
  3558                           tosl	equ	0xFFD
  3559                           pclath	equ	0xFFA
  3560                           tblptru	equ	0xFF8
  3561                           tblptrh	equ	0xFF7
  3562                           tblptrl	equ	0xFF6
  3563                           tablat	equ	0xFF5
  3564                           prodh	equ	0xFF4
  3565                           prodl	equ	0xFF3
  3566                           intcon	equ	0xFF2
  3567                           postinc0	equ	0xFEE
  3568                           wreg	equ	0xFE8
  3569                           indf2	equ	0xFDF
  3570                           postinc2	equ	0xFDE
  3571                           postdec2	equ	0xFDD
  3572                           plusw2	equ	0xFDB
  3573                           fsr2h	equ	0xFDA
  3574                           fsr2l	equ	0xFD9
  3575                           status	equ	0xFD8
  3576                           
  3577 ;; *************** function _CRCcheck *****************
  3578 ;; Defined at:
  3579 ;;		line 373 in file "FastTransfer.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;  rt              2    7[BANK1 ] int 
  3584 ;;  arrayHolder     3    4[BANK1 ] unsigned char [3]
  3585 ;;  calculatedCR    1    3[BANK1 ] unsigned char 
  3586 ;;  SentCRC         1    2[BANK1 ] unsigned char 
  3587 ;; Return value:  Size  Location     Type
  3588 ;;		None               void
  3589 ;; Registers used:
  3590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3596 ;;      Params:         0       0       0       0       0       0       0
  3597 ;;      Locals:         0       0       7       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0
  3599 ;;      Totals:         0       0       7       0       0       0       0
  3600 ;;Total ram usage:        7 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:    7
  3603 ;; This function calls:
  3604 ;;		Absolute function
  3605 ;;		_CRC8
  3606 ;;		_Receive_available
  3607 ;;		_Receive_get
  3608 ;;		_crcBufS_get
  3609 ;;		_crcBufS_status_put
  3610 ;; This function is called by:
  3611 ;;		_receiveData
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           	psect	text14
  3616  0008C4                     __ptext14:
  3617                           	opt stack 0
  3618  0008C4                     _CRCcheck:
  3619                           	opt stack 21
  3620  0008C4                     l3567:
  3621  0008C4  D801               	call	u3088
  3622  0008C6  D00A               	goto	u3089
  3623  0008C8                     u3088:
  3624  0008C8  0005               	push	
  3625  0008CA  6EFA               	movwf	pclath,c
  3626  0008CC  5030               	movf	_serial_available,w,c
  3627  0008CE  6EFD               	movwf	tosl,c
  3628  0008D0  5031               	movf	_serial_available+1,w,c
  3629  0008D2  6EFE               	movwf	tosh,c
  3630  0008D4  50F8               	movf	tblptru,w,c
  3631  0008D6  6EFF               	movwf	tosu,c
  3632  0008D8  50FA               	movf	pclath,w,c
  3633  0008DA  0012               	return		;indir
  3634  0008DC                     u3089:
  3635  0008DC  BE1E               	btfsc	?_Receive_available+1,7,c
  3636  0008DE  D7F2               	goto	l3567
  3637  0008E0  501E               	movf	?_Receive_available+1,w,c
  3638  0008E2  E104               	bnz	l3569
  3639  0008E4  0E04               	movlw	4
  3640  0008E6  5C1D               	subwf	?_Receive_available,w,c
  3641  0008E8  A0D8               	btfss	status,0,c
  3642  0008EA  D7EC               	goto	l3567
  3643  0008EC                     l3569:
  3644                           
  3645                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3646                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3647  0008EC  D801               	call	u3108
  3648  0008EE  D00A               	goto	u3109
  3649  0008F0                     u3108:
  3650  0008F0  0005               	push	
  3651  0008F2  6EFA               	movwf	pclath,c
  3652  0008F4  5034               	movf	_serial_read,w,c
  3653  0008F6  6EFD               	movwf	tosl,c
  3654  0008F8  5035               	movf	_serial_read+1,w,c
  3655  0008FA  6EFE               	movwf	tosh,c
  3656  0008FC  50F8               	movf	tblptru,w,c
  3657  0008FE  6EFF               	movwf	tosu,c
  3658  000900  50FA               	movf	pclath,w,c
  3659  000902  0012               	return		;indir
  3660  000904                     u3109:
  3661  000904  0101               	movlb	1	; () banked
  3662  000906  6FD2               	movwf	CRCcheck@arrayHolder& (0+255),b
  3663                           
  3664                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3665  000908  D801               	call	u3118
  3666  00090A  D00A               	goto	u3119
  3667  00090C                     u3118:
  3668  00090C  0005               	push	
  3669  00090E  6EFA               	movwf	pclath,c
  3670  000910  5034               	movf	_serial_read,w,c
  3671  000912  6EFD               	movwf	tosl,c
  3672  000914  5035               	movf	_serial_read+1,w,c
  3673  000916  6EFE               	movwf	tosh,c
  3674  000918  50F8               	movf	tblptru,w,c
  3675  00091A  6EFF               	movwf	tosu,c
  3676  00091C  50FA               	movf	pclath,w,c
  3677  00091E  0012               	return		;indir
  3678  000920                     u3119:
  3679  000920  0101               	movlb	1	; () banked
  3680  000922  6FD3               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3681                           
  3682                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3683  000924  D801               	call	u3128
  3684  000926  D00A               	goto	u3129
  3685  000928                     u3128:
  3686  000928  0005               	push	
  3687  00092A  6EFA               	movwf	pclath,c
  3688  00092C  5034               	movf	_serial_read,w,c
  3689  00092E  6EFD               	movwf	tosl,c
  3690  000930  5035               	movf	_serial_read+1,w,c
  3691  000932  6EFE               	movwf	tosh,c
  3692  000934  50F8               	movf	tblptru,w,c
  3693  000936  6EFF               	movwf	tosu,c
  3694  000938  50FA               	movf	pclath,w,c
  3695  00093A  0012               	return		;indir
  3696  00093C                     u3129:
  3697  00093C  0101               	movlb	1	; () banked
  3698  00093E  6FD4               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3699                           
  3700                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3701  000940  D801               	call	u3138
  3702  000942  D00A               	goto	u3139
  3703  000944                     u3138:
  3704  000944  0005               	push	
  3705  000946  6EFA               	movwf	pclath,c
  3706  000948  5034               	movf	_serial_read,w,c
  3707  00094A  6EFD               	movwf	tosl,c
  3708  00094C  5035               	movf	_serial_read+1,w,c
  3709  00094E  6EFE               	movwf	tosh,c
  3710  000950  50F8               	movf	tblptru,w,c
  3711  000952  6EFF               	movwf	tosu,c
  3712  000954  50FA               	movf	pclath,w,c
  3713  000956  0012               	return		;indir
  3714  000958                     u3139:
  3715  000958  0101               	movlb	1	; () banked
  3716  00095A  6FD0               	movwf	CRCcheck@SentCRC& (0+255),b
  3717                           
  3718                           ; BSR set to: 1
  3719                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3720  00095C  0ED2               	movlw	low CRCcheck@arrayHolder
  3721  00095E  6E1B               	movwf	CRC8@data,c
  3722  000960  0E01               	movlw	high CRCcheck@arrayHolder
  3723  000962  6E1C               	movwf	CRC8@data+1,c
  3724  000964  0E03               	movlw	3
  3725  000966  6E1D               	movwf	CRC8@len,c
  3726  000968  EC30  F00C         	call	_CRC8	;wreg free
  3727  00096C  0101               	movlb	1	; () banked
  3728  00096E  6FD1               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3729                           
  3730                           ; BSR set to: 1
  3731                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3732  000970  0101               	movlb	1	; () banked
  3733  000972  51D1               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3734  000974  0101               	movlb	1	; () banked
  3735  000976  19D0               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3736  000978  A4D8               	btfss	status,2,c
  3737  00097A  D04E               	goto	l3599
  3738                           
  3739                           ; BSR set to: 1
  3740                           ;FastTransfer.c: 387: int rt;
  3741                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3742  00097C  0E00               	movlw	0
  3743  00097E  0101               	movlb	1	; () banked
  3744  000980  6FD6               	movwf	(CRCcheck@rt+1)& (0+255),b
  3745  000982  0E00               	movlw	0
  3746  000984  6FD5               	movwf	CRCcheck@rt& (0+255),b
  3747  000986                     l3577:
  3748                           
  3749                           ; BSR set to: 1
  3750  000986  0101               	movlb	1	; () banked
  3751  000988  BFD6               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3752  00098A  D008               	goto	l3581
  3753  00098C  0101               	movlb	1	; () banked
  3754  00098E  51D6               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3755  000990  E147               	bnz	l507
  3756  000992  0E05               	movlw	5
  3757  000994  0101               	movlb	1	; () banked
  3758  000996  5DD5               	subwf	CRCcheck@rt& (0+255),w,b
  3759  000998  B0D8               	btfsc	status,0,c
  3760  00099A  0012               	return	
  3761  00099C                     l3581:
  3762                           
  3763                           ; BSR set to: 1
  3764                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3765  00099C  0EEE               	movlw	low _crc_buffer
  3766  00099E  6E1B               	movwf	crcBufS_get@_this,c
  3767  0009A0  0E00               	movlw	high _crc_buffer
  3768  0009A2  6E1C               	movwf	crcBufS_get@_this+1,c
  3769  0009A4  C1D5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3770  0009A8  0E00               	movlw	0
  3771  0009AA  6E1E               	movwf	crcBufS_get@space,c
  3772  0009AC  ECD0  F006         	call	_crcBufS_get	;wreg free
  3773  0009B0  1840               	xorwf	_returnAddress,w,c
  3774  0009B2  A4D8               	btfss	status,2,c
  3775  0009B4  D02D               	goto	l3595
  3776                           
  3777                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3778  0009B6  0EEE               	movlw	low _crc_buffer
  3779  0009B8  6E1B               	movwf	crcBufS_get@_this,c
  3780  0009BA  0E00               	movlw	high _crc_buffer
  3781  0009BC  6E1C               	movwf	crcBufS_get@_this+1,c
  3782  0009BE  C1D5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3783  0009C2  0E01               	movlw	1
  3784  0009C4  6E1E               	movwf	crcBufS_get@space,c
  3785  0009C6  ECD0  F006         	call	_crcBufS_get	;wreg free
  3786  0009CA  0101               	movlb	1	; () banked
  3787  0009CC  19D4               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3788  0009CE  A4D8               	btfss	status,2,c
  3789  0009D0  D01F               	goto	l3595
  3790                           
  3791                           ; BSR set to: 1
  3792                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3793  0009D2  0101               	movlb	1	; () banked
  3794  0009D4  05D3               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3795  0009D6  A4D8               	btfss	status,2,c
  3796  0009D8  D00B               	goto	l3591
  3797                           
  3798                           ; BSR set to: 1
  3799                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3800  0009DA  0EEE               	movlw	low _crc_buffer
  3801  0009DC  6E1B               	movwf	crcBufS_status_put@_this,c
  3802  0009DE  0E00               	movlw	high _crc_buffer
  3803  0009E0  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3804  0009E2  C1D5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3805  0009E6  0E01               	movlw	1
  3806  0009E8  6E1E               	movwf	crcBufS_status_put@status,c
  3807  0009EA  EC93  F008         	call	_crcBufS_status_put	;wreg free
  3808                           
  3809                           ;FastTransfer.c: 393: break;
  3810  0009EE  0012               	return	
  3811  0009F0                     l3591:
  3812  0009F0  0E02               	movlw	2
  3813  0009F2  0101               	movlb	1	; () banked
  3814  0009F4  19D3               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3815  0009F6  A4D8               	btfss	status,2,c
  3816  0009F8  D00B               	goto	l3595
  3817                           
  3818                           ; BSR set to: 1
  3819                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3820  0009FA  0EEE               	movlw	low _crc_buffer
  3821  0009FC  6E1B               	movwf	crcBufS_status_put@_this,c
  3822  0009FE  0E00               	movlw	high _crc_buffer
  3823  000A00  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3824  000A02  C1D5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3825  000A06  0E02               	movlw	2
  3826  000A08  6E1E               	movwf	crcBufS_status_put@status,c
  3827  000A0A  EC93  F008         	call	_crcBufS_status_put	;wreg free
  3828                           
  3829                           ;FastTransfer.c: 396: break;
  3830  000A0E  0012               	return	
  3831  000A10                     l3595:
  3832  000A10  0101               	movlb	1	; () banked
  3833  000A12  4BD5               	infsnz	CRCcheck@rt& (0+255),f,b
  3834  000A14  2BD6               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3835  000A16  D7B7               	goto	l3577
  3836  000A18                     l3599:
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;FastTransfer.c: 402: crcErrorCounter++;
  3840  000A18  0100               	movlb	0	; () banked
  3841  000A1A  4BC2               	infsnz	_crcErrorCounter& (0+255),f,b
  3842  000A1C  2BC3               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3843  000A1E  0012               	return	
  3844  000A20                     l507:
  3845  000A20  0012               	return		;funcret
  3846  000A22                     __end_of_CRCcheck:
  3847                           	opt stack 0
  3848                           tosu	equ	0xFFF
  3849                           tosh	equ	0xFFE
  3850                           tosl	equ	0xFFD
  3851                           pclath	equ	0xFFA
  3852                           tblptru	equ	0xFF8
  3853                           tblptrh	equ	0xFF7
  3854                           tblptrl	equ	0xFF6
  3855                           tablat	equ	0xFF5
  3856                           prodh	equ	0xFF4
  3857                           prodl	equ	0xFF3
  3858                           intcon	equ	0xFF2
  3859                           postinc0	equ	0xFEE
  3860                           wreg	equ	0xFE8
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           plusw2	equ	0xFDB
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function _crcBufS_status_put *****************
  3870 ;; Defined at:
  3871 ;;		line 336 in file "FastTransfer.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3874 ;;		 -> crc_buffer(17), 
  3875 ;;  time            1   28[COMRAM] unsigned char 
  3876 ;;  status          1   29[COMRAM] unsigned char 
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  wantedTime      2   34[COMRAM] int 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;		None               void
  3881 ;; Registers used:
  3882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3888 ;;      Params:         4       0       0       0       0       0       0
  3889 ;;      Locals:         2       0       0       0       0       0       0
  3890 ;;      Temps:          4       0       0       0       0       0       0
  3891 ;;      Totals:        10       0       0       0       0       0       0
  3892 ;;Total ram usage:       10 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    4
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_CRCcheck
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text15
  3903  001126                     __ptext15:
  3904                           	opt stack 0
  3905  001126                     _crcBufS_status_put:
  3906                           	opt stack 23
  3907                           
  3908                           ;FastTransfer.c: 337: if (time >= 5) {
  3909                           
  3910                           ;incstack = 0
  3911  001126  0E04               	movlw	4
  3912  001128  641D               	cpfsgt	crcBufS_status_put@time,c
  3913  00112A  D002               	goto	l3463
  3914                           
  3915                           ;FastTransfer.c: 338: time = 5 - 1;
  3916  00112C  0E04               	movlw	4
  3917  00112E  6E1D               	movwf	crcBufS_status_put@time,c
  3918  001130                     l3463:
  3919                           
  3920                           ;FastTransfer.c: 339: }
  3921                           ;FastTransfer.c: 340: time = time + 1;
  3922  001130  281D               	incf	crcBufS_status_put@time,w,c
  3923  001132  6E1D               	movwf	crcBufS_status_put@time,c
  3924                           
  3925                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3926  001134  501D               	movf	crcBufS_status_put@time,w,c
  3927  001136  0D03               	mullw	3
  3928  001138  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3929  00113C  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3930                           
  3931                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3932  001140  EE20 F00F          	lfsr	2,15
  3933  001144  501B               	movf	crcBufS_status_put@_this,w,c
  3934  001146  26D9               	addwf	fsr2l,f,c
  3935  001148  501C               	movf	crcBufS_status_put@_this+1,w,c
  3936  00114A  22DA               	addwfc	fsr2h,f,c
  3937  00114C  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3938  00114E  5CDE               	subwf	postinc2,w,c
  3939  001150  50DE               	movf	postinc2,w,c
  3940  001152  0A80               	xorlw	128
  3941  001154  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3942  001156  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3943  001158  0A80               	xorlw	128
  3944  00115A  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3945  00115C  B0D8               	btfsc	status,0,c
  3946  00115E  D02B               	goto	l3471
  3947                           
  3948                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3949  001160  EE20 F00F          	lfsr	2,15
  3950  001164  501B               	movf	crcBufS_status_put@_this,w,c
  3951  001166  26D9               	addwf	fsr2l,f,c
  3952  001168  501C               	movf	crcBufS_status_put@_this+1,w,c
  3953  00116A  22DA               	addwfc	fsr2h,f,c
  3954  00116C  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3955  001170  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3956  001174  1E1F               	comf	??_crcBufS_status_put,f,c
  3957  001176  1E20               	comf	??_crcBufS_status_put+1,f,c
  3958  001178  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3959  00117A  2A20               	incf	??_crcBufS_status_put+1,f,c
  3960  00117C  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3961  00117E  261F               	addwf	??_crcBufS_status_put,f,c
  3962  001180  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3963  001182  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3964  001184  1E1F               	comf	??_crcBufS_status_put,f,c
  3965  001186  1E20               	comf	??_crcBufS_status_put+1,f,c
  3966  001188  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3967  00118A  2A20               	incf	??_crcBufS_status_put+1,f,c
  3968  00118C  0E0F               	movlw	15
  3969  00118E  241F               	addwf	??_crcBufS_status_put,w,c
  3970  001190  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3971  001192  0E00               	movlw	0
  3972  001194  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3973  001196  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3974                           
  3975                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3976  001198  0E02               	movlw	2
  3977  00119A  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3978  00119C  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3979  00119E  0E00               	movlw	0
  3980  0011A0  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3981  0011A2  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3982  0011A4  501F               	movf	??_crcBufS_status_put,w,c
  3983  0011A6  241B               	addwf	crcBufS_status_put@_this,w,c
  3984  0011A8  6ED9               	movwf	fsr2l,c
  3985  0011AA  5020               	movf	??_crcBufS_status_put+1,w,c
  3986  0011AC  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3987  0011AE  6EDA               	movwf	fsr2h,c
  3988  0011B0  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3989                           
  3990                           ;FastTransfer.c: 345: } else {
  3991  0011B4  0012               	return	
  3992  0011B6                     l3471:
  3993                           
  3994                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3995  0011B6  EE20 F00F          	lfsr	2,15
  3996  0011BA  501B               	movf	crcBufS_status_put@_this,w,c
  3997  0011BC  26D9               	addwf	fsr2l,f,c
  3998  0011BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3999  0011C0  22DA               	addwfc	fsr2h,f,c
  4000  0011C2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4001  0011C6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4002  0011CA  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4003  0011CE  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4004  0011D2  1E21               	comf	??_crcBufS_status_put+2,f,c
  4005  0011D4  1E22               	comf	??_crcBufS_status_put+3,f,c
  4006  0011D6  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4007  0011D8  2A22               	incf	??_crcBufS_status_put+3,f,c
  4008  0011DA  501F               	movf	??_crcBufS_status_put,w,c
  4009  0011DC  2621               	addwf	??_crcBufS_status_put+2,f,c
  4010  0011DE  5020               	movf	??_crcBufS_status_put+1,w,c
  4011  0011E0  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4012  0011E2  0E02               	movlw	2
  4013  0011E4  2621               	addwf	??_crcBufS_status_put+2,f,c
  4014  0011E6  0E00               	movlw	0
  4015  0011E8  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4016  0011EA  5021               	movf	??_crcBufS_status_put+2,w,c
  4017  0011EC  241B               	addwf	crcBufS_status_put@_this,w,c
  4018  0011EE  6ED9               	movwf	fsr2l,c
  4019  0011F0  5022               	movf	??_crcBufS_status_put+3,w,c
  4020  0011F2  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4021  0011F4  6EDA               	movwf	fsr2h,c
  4022  0011F6  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4023  0011FA  0012               	return	
  4024  0011FC                     __end_of_crcBufS_status_put:
  4025                           	opt stack 0
  4026                           tosu	equ	0xFFF
  4027                           tosh	equ	0xFFE
  4028                           tosl	equ	0xFFD
  4029                           pclath	equ	0xFFA
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           postinc0	equ	0xFEE
  4038                           wreg	equ	0xFE8
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           plusw2	equ	0xFDB
  4043                           fsr2h	equ	0xFDA
  4044                           fsr2l	equ	0xFD9
  4045                           status	equ	0xFD8
  4046                           
  4047 ;; *************** function _crcBufS_get *****************
  4048 ;; Defined at:
  4049 ;;		line 353 in file "FastTransfer.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4052 ;;		 -> crc_buffer(17), 
  4053 ;;  time            1   28[COMRAM] unsigned char 
  4054 ;;  space           1   29[COMRAM] unsigned char 
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  wantedTime      2    0[BANK1 ] int 
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      unsigned char 
  4059 ;; Registers used:
  4060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4066 ;;      Params:         4       0       0       0       0       0       0
  4067 ;;      Locals:         0       0       2       0       0       0       0
  4068 ;;      Temps:          6       0       0       0       0       0       0
  4069 ;;      Totals:        10       0       2       0       0       0       0
  4070 ;;Total ram usage:       12 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; Hardware stack levels required when called:    4
  4073 ;; This function calls:
  4074 ;;		Nothing
  4075 ;; This function is called by:
  4076 ;;		_CRCcheck
  4077 ;;		_AKNAK
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           	psect	text16
  4082  000DA0                     __ptext16:
  4083                           	opt stack 0
  4084  000DA0                     _crcBufS_get:
  4085                           	opt stack 23
  4086                           
  4087                           ;FastTransfer.c: 354: if (time >= 5) {
  4088                           
  4089                           ;incstack = 0
  4090  000DA0  0E04               	movlw	4
  4091  000DA2  641D               	cpfsgt	crcBufS_get@time,c
  4092  000DA4  D002               	goto	l3439
  4093                           
  4094                           ;FastTransfer.c: 355: time = 5 - 1;
  4095  000DA6  0E04               	movlw	4
  4096  000DA8  6E1D               	movwf	crcBufS_get@time,c
  4097  000DAA                     l3439:
  4098                           
  4099                           ;FastTransfer.c: 356: }
  4100                           ;FastTransfer.c: 357: if (space >= 3) {
  4101  000DAA  0E02               	movlw	2
  4102  000DAC  641E               	cpfsgt	crcBufS_get@space,c
  4103  000DAE  D002               	goto	l3443
  4104                           
  4105                           ;FastTransfer.c: 358: space = 3 - 1;
  4106  000DB0  0E02               	movlw	2
  4107  000DB2  6E1E               	movwf	crcBufS_get@space,c
  4108  000DB4                     l3443:
  4109                           
  4110                           ;FastTransfer.c: 359: }
  4111                           ;FastTransfer.c: 360: time = time + 1;
  4112  000DB4  281D               	incf	crcBufS_get@time,w,c
  4113  000DB6  6E1D               	movwf	crcBufS_get@time,c
  4114                           
  4115                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4116  000DB8  501D               	movf	crcBufS_get@time,w,c
  4117  000DBA  0D03               	mullw	3
  4118  000DBC  CFF3 F1CE          	movff	prodl,crcBufS_get@wantedTime
  4119  000DC0  CFF4 F1CF          	movff	prodh,crcBufS_get@wantedTime+1
  4120                           
  4121                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4122  000DC4  EE20 F00F          	lfsr	2,15
  4123  000DC8  501B               	movf	crcBufS_get@_this,w,c
  4124  000DCA  26D9               	addwf	fsr2l,f,c
  4125  000DCC  501C               	movf	crcBufS_get@_this+1,w,c
  4126  000DCE  22DA               	addwfc	fsr2h,f,c
  4127  000DD0  0101               	movlb	1	; () banked
  4128  000DD2  51CE               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4129  000DD4  5CDE               	subwf	postinc2,w,c
  4130  000DD6  50DE               	movf	postinc2,w,c
  4131  000DD8  0A80               	xorlw	128
  4132  000DDA  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4133  000DDC  0101               	movlb	1	; () banked
  4134  000DDE  51CF               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4135  000DE0  0A80               	xorlw	128
  4136  000DE2  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4137  000DE4  B0D8               	btfsc	status,0,c
  4138  000DE6  D030               	goto	l3455
  4139                           
  4140                           ; BSR set to: 1
  4141                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4142  000DE8  EE20 F00F          	lfsr	2,15
  4143  000DEC  501B               	movf	crcBufS_get@_this,w,c
  4144  000DEE  26D9               	addwf	fsr2l,f,c
  4145  000DF0  501C               	movf	crcBufS_get@_this+1,w,c
  4146  000DF2  22DA               	addwfc	fsr2h,f,c
  4147  000DF4  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4148  000DF8  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4149  000DFC  1E1F               	comf	??_crcBufS_get,f,c
  4150  000DFE  1E20               	comf	??_crcBufS_get+1,f,c
  4151  000E00  4A1F               	infsnz	??_crcBufS_get,f,c
  4152  000E02  2A20               	incf	??_crcBufS_get+1,f,c
  4153  000E04  0101               	movlb	1	; () banked
  4154  000E06  51CE               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4155  000E08  261F               	addwf	??_crcBufS_get,f,c
  4156  000E0A  0101               	movlb	1	; () banked
  4157  000E0C  51CF               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4158  000E0E  2220               	addwfc	??_crcBufS_get+1,f,c
  4159  000E10  1E1F               	comf	??_crcBufS_get,f,c
  4160  000E12  1E20               	comf	??_crcBufS_get+1,f,c
  4161  000E14  4A1F               	infsnz	??_crcBufS_get,f,c
  4162  000E16  2A20               	incf	??_crcBufS_get+1,f,c
  4163  000E18  0E0F               	movlw	15
  4164  000E1A  241F               	addwf	??_crcBufS_get,w,c
  4165  000E1C  0101               	movlb	1	; () banked
  4166  000E1E  6FCE               	movwf	crcBufS_get@wantedTime& (0+255),b
  4167  000E20  0E00               	movlw	0
  4168  000E22  2020               	addwfc	??_crcBufS_get+1,w,c
  4169  000E24  0101               	movlb	1	; () banked
  4170  000E26  6FCF               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4171                           
  4172                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4173  000E28  501E               	movf	crcBufS_get@space,w,c
  4174  000E2A  0101               	movlb	1	; () banked
  4175  000E2C  25CE               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4176  000E2E  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4177  000E30  0E00               	movlw	0
  4178  000E32  0101               	movlb	1	; () banked
  4179  000E34  21CF               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4180  000E36  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4181  000E38  501F               	movf	??_crcBufS_get,w,c
  4182  000E3A  241B               	addwf	crcBufS_get@_this,w,c
  4183  000E3C  6ED9               	movwf	fsr2l,c
  4184  000E3E  5020               	movf	??_crcBufS_get+1,w,c
  4185  000E40  201C               	addwfc	crcBufS_get@_this+1,w,c
  4186  000E42  6EDA               	movwf	fsr2h,c
  4187  000E44  50DF               	movf	indf2,w,c
  4188                           
  4189                           ; BSR set to: 1
  4190                           ;FastTransfer.c: 365: } else {
  4191                           
  4192                           ; BSR set to: 1
  4193  000E46  0012               	return	
  4194  000E48                     l3455:
  4195                           
  4196                           ; BSR set to: 1
  4197                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4198  000E48  EE20 F00F          	lfsr	2,15
  4199  000E4C  501B               	movf	crcBufS_get@_this,w,c
  4200  000E4E  26D9               	addwf	fsr2l,f,c
  4201  000E50  501C               	movf	crcBufS_get@_this+1,w,c
  4202  000E52  22DA               	addwfc	fsr2h,f,c
  4203  000E54  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4204  000E58  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4205  000E5C  C1CE  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4206  000E60  C1CF  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4207  000E64  1E21               	comf	??_crcBufS_get+2,f,c
  4208  000E66  1E22               	comf	??_crcBufS_get+3,f,c
  4209  000E68  4A21               	infsnz	??_crcBufS_get+2,f,c
  4210  000E6A  2A22               	incf	??_crcBufS_get+3,f,c
  4211  000E6C  501E               	movf	crcBufS_get@space,w,c
  4212  000E6E  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4213  000E70  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4214  000E72  5021               	movf	??_crcBufS_get+2,w,c
  4215  000E74  2623               	addwf	??_crcBufS_get+4,f,c
  4216  000E76  5022               	movf	??_crcBufS_get+3,w,c
  4217  000E78  2224               	addwfc	??_crcBufS_get+5,f,c
  4218  000E7A  501F               	movf	??_crcBufS_get,w,c
  4219  000E7C  2623               	addwf	??_crcBufS_get+4,f,c
  4220  000E7E  5020               	movf	??_crcBufS_get+1,w,c
  4221  000E80  2224               	addwfc	??_crcBufS_get+5,f,c
  4222  000E82  5023               	movf	??_crcBufS_get+4,w,c
  4223  000E84  241B               	addwf	crcBufS_get@_this,w,c
  4224  000E86  6ED9               	movwf	fsr2l,c
  4225  000E88  5024               	movf	??_crcBufS_get+5,w,c
  4226  000E8A  201C               	addwfc	crcBufS_get@_this+1,w,c
  4227  000E8C  6EDA               	movwf	fsr2h,c
  4228  000E8E  50DF               	movf	indf2,w,c
  4229                           
  4230                           ; BSR set to: 1
  4231  000E90  0012               	return	
  4232  000E92                     __end_of_crcBufS_get:
  4233                           	opt stack 0
  4234                           tosu	equ	0xFFF
  4235                           tosh	equ	0xFFE
  4236                           tosl	equ	0xFFD
  4237                           pclath	equ	0xFFA
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           intcon	equ	0xFF2
  4245                           postinc0	equ	0xFEE
  4246                           wreg	equ	0xFE8
  4247                           indf2	equ	0xFDF
  4248                           postinc2	equ	0xFDE
  4249                           postdec2	equ	0xFDD
  4250                           plusw2	equ	0xFDB
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function _Receive_get *****************
  4256 ;; Defined at:
  4257 ;;		line 126 in file "UART.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;		None
  4260 ;; Auto vars:     Size  Location     Type
  4261 ;;		None
  4262 ;; Return value:  Size  Location     Type
  4263 ;;                  1    wreg      unsigned char 
  4264 ;; Registers used:
  4265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4266 ;; Tracked objects:
  4267 ;;		On entry : 0/0
  4268 ;;		On exit  : 0/0
  4269 ;;		Unchanged: 0/0
  4270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4271 ;;      Params:         0       0       0       0       0       0       0
  4272 ;;      Locals:         0       0       0       0       0       0       0
  4273 ;;      Temps:          0       0       0       0       0       0       0
  4274 ;;      Totals:         0       0       0       0       0       0       0
  4275 ;;Total ram usage:        0 bytes
  4276 ;; Hardware stack levels used:    1
  4277 ;; Hardware stack levels required when called:    6
  4278 ;; This function calls:
  4279 ;;		_UART_buff_get
  4280 ;; This function is called by:
  4281 ;;		_SYSTEM_Initialize
  4282 ;;		_getch
  4283 ;;		_CRCcheck
  4284 ;;		_receiveData
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           	psect	text17
  4289  001BB4                     __ptext17:
  4290                           	opt stack 0
  4291  001BB4                     _Receive_get:
  4292                           	opt stack 22
  4293                           
  4294                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4295                           
  4296                           ; BSR set to: 1
  4297                           ;incstack = 0
  4298  001BB4  0E00               	movlw	low _input_buffer
  4299  001BB6  6E21               	movwf	UART_buff_get@_this,c
  4300  001BB8  0E03               	movlw	high _input_buffer
  4301  001BBA  6E22               	movwf	UART_buff_get@_this+1,c
  4302  001BBC  EC65  F009         	call	_UART_buff_get	;wreg free
  4303  001BC0  0012               	return	
  4304  001BC2                     __end_of_Receive_get:
  4305                           	opt stack 0
  4306                           tosu	equ	0xFFF
  4307                           tosh	equ	0xFFE
  4308                           tosl	equ	0xFFD
  4309                           pclath	equ	0xFFA
  4310                           tblptru	equ	0xFF8
  4311                           tblptrh	equ	0xFF7
  4312                           tblptrl	equ	0xFF6
  4313                           tablat	equ	0xFF5
  4314                           prodh	equ	0xFF4
  4315                           prodl	equ	0xFF3
  4316                           intcon	equ	0xFF2
  4317                           postinc0	equ	0xFEE
  4318                           wreg	equ	0xFE8
  4319                           indf2	equ	0xFDF
  4320                           postinc2	equ	0xFDE
  4321                           postdec2	equ	0xFDD
  4322                           plusw2	equ	0xFDB
  4323                           fsr2h	equ	0xFDA
  4324                           fsr2l	equ	0xFD9
  4325                           status	equ	0xFD8
  4326                           
  4327 ;; *************** function _UART_buff_get *****************
  4328 ;; Defined at:
  4329 ;;		line 81 in file "UART.c"
  4330 ;; Parameters:    Size  Location     Type
  4331 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4332 ;;		 -> output_buffer(206), input_buffer(206), 
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  c               1   36[COMRAM] unsigned char 
  4335 ;; Return value:  Size  Location     Type
  4336 ;;                  1    wreg      unsigned char 
  4337 ;; Registers used:
  4338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4339 ;; Tracked objects:
  4340 ;;		On entry : 0/0
  4341 ;;		On exit  : 0/0
  4342 ;;		Unchanged: 0/0
  4343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4344 ;;      Params:         2       0       0       0       0       0       0
  4345 ;;      Locals:         1       0       0       0       0       0       0
  4346 ;;      Temps:          2       0       0       0       0       0       0
  4347 ;;      Totals:         5       0       0       0       0       0       0
  4348 ;;Total ram usage:        5 bytes
  4349 ;; Hardware stack levels used:    1
  4350 ;; Hardware stack levels required when called:    5
  4351 ;; This function calls:
  4352 ;;		_UART_buff_modulo_inc
  4353 ;; This function is called by:
  4354 ;;		_Receive_get
  4355 ;;		_Send_put
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text18
  4360  0012CA                     __ptext18:
  4361                           	opt stack 0
  4362  0012CA                     _UART_buff_get:
  4363                           	opt stack 21
  4364                           
  4365                           ;UART.c: 82: unsigned char c;
  4366                           ;UART.c: 83: if (_this->count > 0) {
  4367                           
  4368                           ;incstack = 0
  4369  0012CA  EE20 F0CC          	lfsr	2,204
  4370  0012CE  5021               	movf	UART_buff_get@_this,w,c
  4371  0012D0  26D9               	addwf	fsr2l,f,c
  4372  0012D2  5022               	movf	UART_buff_get@_this+1,w,c
  4373  0012D4  22DA               	addwfc	fsr2h,f,c
  4374  0012D6  0E01               	movlw	1
  4375  0012D8  BEDB               	btfsc	plusw2,7,c
  4376  0012DA  D03C               	goto	l3375
  4377  0012DC  0E01               	movlw	1
  4378  0012DE  50DB               	movf	plusw2,w,c
  4379  0012E0  E103               	bnz	u2830
  4380  0012E2  04DE               	decf	postinc2,w,c
  4381  0012E4  A0D8               	btfss	status,0,c
  4382  0012E6  D036               	goto	l3375
  4383  0012E8                     u2830:
  4384                           
  4385                           ;UART.c: 84: c = _this->buf[_this->tail];
  4386  0012E8  EE20 F0CA          	lfsr	2,202
  4387  0012EC  5021               	movf	UART_buff_get@_this,w,c
  4388  0012EE  26D9               	addwf	fsr2l,f,c
  4389  0012F0  5022               	movf	UART_buff_get@_this+1,w,c
  4390  0012F2  22DA               	addwfc	fsr2h,f,c
  4391  0012F4  CFDE F023          	movff	postinc2,??_UART_buff_get
  4392  0012F8  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4393  0012FC  5023               	movf	??_UART_buff_get,w,c
  4394  0012FE  2421               	addwf	UART_buff_get@_this,w,c
  4395  001300  6ED9               	movwf	fsr2l,c
  4396  001302  5024               	movf	??_UART_buff_get+1,w,c
  4397  001304  2022               	addwfc	UART_buff_get@_this+1,w,c
  4398  001306  6EDA               	movwf	fsr2h,c
  4399  001308  50DF               	movf	indf2,w,c
  4400  00130A  6E25               	movwf	UART_buff_get@c,c
  4401                           
  4402                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4403  00130C  EE20 F0CA          	lfsr	2,202
  4404  001310  5021               	movf	UART_buff_get@_this,w,c
  4405  001312  26D9               	addwf	fsr2l,f,c
  4406  001314  5022               	movf	UART_buff_get@_this+1,w,c
  4407  001316  22DA               	addwfc	fsr2h,f,c
  4408  001318  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4409  00131C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4410  001320  0E00               	movlw	0
  4411  001322  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4412  001324  0EC8               	movlw	200
  4413  001326  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4414  001328  EC29  F00D         	call	_UART_buff_modulo_inc	;wreg free
  4415  00132C  EE20 F0CA          	lfsr	2,202
  4416  001330  5021               	movf	UART_buff_get@_this,w,c
  4417  001332  26D9               	addwf	fsr2l,f,c
  4418  001334  5022               	movf	UART_buff_get@_this+1,w,c
  4419  001336  22DA               	addwfc	fsr2h,f,c
  4420  001338  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4421  00133C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4422                           
  4423                           ;UART.c: 86: --_this->count;
  4424  001340  EE20 F0CC          	lfsr	2,204
  4425  001344  5021               	movf	UART_buff_get@_this,w,c
  4426  001346  26D9               	addwf	fsr2l,f,c
  4427  001348  5022               	movf	UART_buff_get@_this+1,w,c
  4428  00134A  22DA               	addwfc	fsr2h,f,c
  4429  00134C  06DE               	decf	postinc2,f,c
  4430  00134E  0E00               	movlw	0
  4431  001350  5ADD               	subwfb	postdec2,f,c
  4432                           
  4433                           ;UART.c: 87: } else {
  4434  001352  D002               	goto	l702
  4435  001354                     l3375:
  4436                           
  4437                           ;UART.c: 88: c = 0;
  4438  001354  0E00               	movlw	0
  4439  001356  6E25               	movwf	UART_buff_get@c,c
  4440  001358                     l702:
  4441                           
  4442                           ;UART.c: 89: }
  4443                           ;UART.c: 90: return (c);
  4444  001358  5025               	movf	UART_buff_get@c,w,c
  4445  00135A  0012               	return	
  4446  00135C                     __end_of_UART_buff_get:
  4447                           	opt stack 0
  4448                           tosu	equ	0xFFF
  4449                           tosh	equ	0xFFE
  4450                           tosl	equ	0xFFD
  4451                           pclath	equ	0xFFA
  4452                           tblptru	equ	0xFF8
  4453                           tblptrh	equ	0xFF7
  4454                           tblptrl	equ	0xFF6
  4455                           tablat	equ	0xFF5
  4456                           prodh	equ	0xFF4
  4457                           prodl	equ	0xFF3
  4458                           intcon	equ	0xFF2
  4459                           postinc0	equ	0xFEE
  4460                           wreg	equ	0xFE8
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           plusw2	equ	0xFDB
  4465                           fsr2h	equ	0xFDA
  4466                           fsr2l	equ	0xFD9
  4467                           status	equ	0xFD8
  4468                           
  4469 ;; *************** function _UART_buff_modulo_inc *****************
  4470 ;; Defined at:
  4471 ;;		line 106 in file "UART.c"
  4472 ;; Parameters:    Size  Location     Type
  4473 ;;  value           2   26[COMRAM] const unsigned int 
  4474 ;;  modulus         2   28[COMRAM] const unsigned int 
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  my_value        2   30[COMRAM] unsigned int 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  2   26[COMRAM] unsigned int 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2, status,0
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4486 ;;      Params:         4       0       0       0       0       0       0
  4487 ;;      Locals:         2       0       0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0
  4489 ;;      Totals:         6       0       0       0       0       0       0
  4490 ;;Total ram usage:        6 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    4
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_UART_buff_put
  4497 ;;		_UART_buff_get
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text19
  4502  001A52                     __ptext19:
  4503                           	opt stack 0
  4504  001A52                     _UART_buff_modulo_inc:
  4505                           	opt stack 21
  4506                           
  4507                           ;UART.c: 107: unsigned int my_value = value + 1;
  4508                           
  4509                           ;incstack = 0
  4510  001A52  0E01               	movlw	1
  4511  001A54  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4512  001A56  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4513  001A58  0E00               	movlw	0
  4514  001A5A  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4515  001A5C  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4516                           
  4517                           ;UART.c: 108: if (my_value >= modulus) {
  4518  001A5E  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4519  001A60  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4520  001A62  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4521  001A64  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4522  001A66  A0D8               	btfss	status,0,c
  4523  001A68  D004               	goto	l3325
  4524                           
  4525                           ;UART.c: 109: my_value = 0;
  4526  001A6A  0E00               	movlw	0
  4527  001A6C  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4528  001A6E  0E00               	movlw	0
  4529  001A70  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4530  001A72                     l3325:
  4531                           
  4532                           ;UART.c: 110: }
  4533                           ;UART.c: 111: return (my_value);
  4534  001A72  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4535  001A76  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4536  001A7A  0012               	return	
  4537  001A7C                     __end_of_UART_buff_modulo_inc:
  4538                           	opt stack 0
  4539                           tosu	equ	0xFFF
  4540                           tosh	equ	0xFFE
  4541                           tosl	equ	0xFFD
  4542                           pclath	equ	0xFFA
  4543                           tblptru	equ	0xFF8
  4544                           tblptrh	equ	0xFF7
  4545                           tblptrl	equ	0xFF6
  4546                           tablat	equ	0xFF5
  4547                           prodh	equ	0xFF4
  4548                           prodl	equ	0xFF3
  4549                           intcon	equ	0xFF2
  4550                           postinc0	equ	0xFEE
  4551                           wreg	equ	0xFE8
  4552                           indf2	equ	0xFDF
  4553                           postinc2	equ	0xFDE
  4554                           postdec2	equ	0xFDD
  4555                           plusw2	equ	0xFDB
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _Receive_available *****************
  4561 ;; Defined at:
  4562 ;;		line 122 in file "UART.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;		None
  4567 ;; Return value:  Size  Location     Type
  4568 ;;                  2   28[COMRAM] int 
  4569 ;; Registers used:
  4570 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4571 ;; Tracked objects:
  4572 ;;		On entry : 0/0
  4573 ;;		On exit  : 0/0
  4574 ;;		Unchanged: 0/0
  4575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4576 ;;      Params:         2       0       0       0       0       0       0
  4577 ;;      Locals:         0       0       0       0       0       0       0
  4578 ;;      Temps:          0       0       0       0       0       0       0
  4579 ;;      Totals:         2       0       0       0       0       0       0
  4580 ;;Total ram usage:        2 bytes
  4581 ;; Hardware stack levels used:    1
  4582 ;; Hardware stack levels required when called:    5
  4583 ;; This function calls:
  4584 ;;		_UART_buff_size
  4585 ;; This function is called by:
  4586 ;;		_SYSTEM_Initialize
  4587 ;;		_CRCcheck
  4588 ;;		_receiveData
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text20
  4593  001B3C                     __ptext20:
  4594                           	opt stack 0
  4595  001B3C                     _Receive_available:
  4596                           	opt stack 23
  4597                           
  4598                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4599                           
  4600                           ;incstack = 0
  4601  001B3C  0E00               	movlw	low _input_buffer
  4602  001B3E  6E1B               	movwf	UART_buff_size@_this,c
  4603  001B40  0E03               	movlw	high _input_buffer
  4604  001B42  6E1C               	movwf	UART_buff_size@_this+1,c
  4605  001B44  ECA9  F00D         	call	_UART_buff_size	;wreg free
  4606  001B48  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4607  001B4C  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4608  001B50  0012               	return	
  4609  001B52                     __end_of_Receive_available:
  4610                           	opt stack 0
  4611                           tosu	equ	0xFFF
  4612                           tosh	equ	0xFFE
  4613                           tosl	equ	0xFFD
  4614                           pclath	equ	0xFFA
  4615                           tblptru	equ	0xFF8
  4616                           tblptrh	equ	0xFF7
  4617                           tblptrl	equ	0xFF6
  4618                           tablat	equ	0xFF5
  4619                           prodh	equ	0xFF4
  4620                           prodl	equ	0xFF3
  4621                           intcon	equ	0xFF2
  4622                           postinc0	equ	0xFEE
  4623                           wreg	equ	0xFE8
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           postdec2	equ	0xFDD
  4627                           plusw2	equ	0xFDB
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _UART_buff_size *****************
  4633 ;; Defined at:
  4634 ;;		line 102 in file "UART.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4637 ;;		 -> output_buffer(206), input_buffer(206), 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;		None
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  2   26[COMRAM] int 
  4642 ;; Registers used:
  4643 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4649 ;;      Params:         2       0       0       0       0       0       0
  4650 ;;      Locals:         0       0       0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0
  4652 ;;      Totals:         2       0       0       0       0       0       0
  4653 ;;Total ram usage:        2 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    4
  4656 ;; This function calls:
  4657 ;;		Nothing
  4658 ;; This function is called by:
  4659 ;;		_Receive_available
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text21
  4664  001B52                     __ptext21:
  4665                           	opt stack 0
  4666  001B52                     _UART_buff_size:
  4667                           	opt stack 23
  4668                           
  4669                           ;UART.c: 103: return (_this->count);
  4670                           
  4671                           ;incstack = 0
  4672  001B52  EE20 F0CC          	lfsr	2,204
  4673  001B56  501B               	movf	UART_buff_size@_this,w,c
  4674  001B58  26D9               	addwf	fsr2l,f,c
  4675  001B5A  501C               	movf	UART_buff_size@_this+1,w,c
  4676  001B5C  22DA               	addwfc	fsr2h,f,c
  4677  001B5E  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4678  001B62  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4679  001B66  0012               	return	
  4680  001B68                     __end_of_UART_buff_size:
  4681                           	opt stack 0
  4682                           tosu	equ	0xFFF
  4683                           tosh	equ	0xFFE
  4684                           tosl	equ	0xFFD
  4685                           pclath	equ	0xFFA
  4686                           tblptru	equ	0xFF8
  4687                           tblptrh	equ	0xFF7
  4688                           tblptrl	equ	0xFF6
  4689                           tablat	equ	0xFF5
  4690                           prodh	equ	0xFF4
  4691                           prodl	equ	0xFF3
  4692                           intcon	equ	0xFF2
  4693                           postinc0	equ	0xFEE
  4694                           wreg	equ	0xFE8
  4695                           indf2	equ	0xFDF
  4696                           postinc2	equ	0xFDE
  4697                           postdec2	equ	0xFDD
  4698                           plusw2	equ	0xFDB
  4699                           fsr2h	equ	0xFDA
  4700                           fsr2l	equ	0xFD9
  4701                           status	equ	0xFD8
  4702                           
  4703 ;; *************** function _CRC8 *****************
  4704 ;; Defined at:
  4705 ;;		line 34 in file "FastTransfer.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4708 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1238(3), receiveData@holder(3), 
  4709 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4710 ;;  len             1   28[COMRAM] unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  sum             1   29[COMRAM] unsigned char 
  4713 ;;  tempI           1   31[COMRAM] unsigned char 
  4714 ;;  extract         1   30[COMRAM] unsigned char 
  4715 ;;  crc             1   32[COMRAM] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      unsigned char 
  4718 ;; Registers used:
  4719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4725 ;;      Params:         3       0       0       0       0       0       0
  4726 ;;      Locals:         4       0       0       0       0       0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0
  4728 ;;      Totals:         7       0       0       0       0       0       0
  4729 ;;Total ram usage:        7 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    4
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_sendData
  4736 ;;		_receiveData
  4737 ;;		_CRCcheck
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           	psect	text22
  4742  001860                     __ptext22:
  4743                           	opt stack 0
  4744  001860                     _CRC8:
  4745                           	opt stack 23
  4746                           
  4747                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4748                           
  4749                           ;incstack = 0
  4750  001860  0E00               	movlw	0
  4751  001862  6E21               	movwf	CRC8@crc,c
  4752                           
  4753                           ;FastTransfer.c: 36: while (len--) {
  4754  001864  D01C               	goto	l3401
  4755  001866                     l3385:
  4756                           
  4757                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4758  001866  C01B  FFD9         	movff	CRC8@data,fsr2l
  4759  00186A  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4760  00186E  50DF               	movf	indf2,w,c
  4761  001870  6E1F               	movwf	CRC8@extract,c
  4762  001872  4A1B               	infsnz	CRC8@data,f,c
  4763  001874  2A1C               	incf	CRC8@data+1,f,c
  4764                           
  4765                           ;FastTransfer.c: 38: unsigned char tempI;
  4766                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4767  001876  0E08               	movlw	8
  4768  001878  6E20               	movwf	CRC8@tempI,c
  4769  00187A  D00E               	goto	l3399
  4770  00187C                     l3391:
  4771                           
  4772                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4773  00187C  5021               	movf	CRC8@crc,w,c
  4774  00187E  181F               	xorwf	CRC8@extract,w,c
  4775  001880  0B01               	andlw	1
  4776  001882  6E1E               	movwf	CRC8@sum,c
  4777                           
  4778                           ;FastTransfer.c: 41: crc >>= 1;
  4779  001884  90D8               	bcf	status,0,c
  4780  001886  3221               	rrcf	CRC8@crc,f,c
  4781                           
  4782                           ;FastTransfer.c: 42: if (sum) {
  4783  001888  501E               	movf	CRC8@sum,w,c
  4784  00188A  B4D8               	btfsc	status,2,c
  4785  00188C  D002               	goto	l393
  4786                           
  4787                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4788  00188E  0E8C               	movlw	140
  4789  001890  1A21               	xorwf	CRC8@crc,f,c
  4790  001892                     l393:
  4791                           
  4792                           ;FastTransfer.c: 44: }
  4793                           ;FastTransfer.c: 45: extract >>= 1;
  4794  001892  90D8               	bcf	status,0,c
  4795  001894  321F               	rrcf	CRC8@extract,f,c
  4796  001896  0620               	decf	CRC8@tempI,f,c
  4797  001898                     l3399:
  4798  001898  5020               	movf	CRC8@tempI,w,c
  4799  00189A  A4D8               	btfss	status,2,c
  4800  00189C  D7EF               	goto	l3391
  4801  00189E                     l3401:
  4802  00189E  061D               	decf	CRC8@len,f,c
  4803  0018A0  281D               	incf	CRC8@len,w,c
  4804  0018A2  A4D8               	btfss	status,2,c
  4805  0018A4  D7E0               	goto	l3385
  4806                           
  4807                           ;FastTransfer.c: 46: }
  4808                           ;FastTransfer.c: 47: }
  4809                           ;FastTransfer.c: 48: return crc;
  4810  0018A6  5021               	movf	CRC8@crc,w,c
  4811  0018A8  0012               	return	
  4812  0018AA                     __end_of_CRC8:
  4813                           	opt stack 0
  4814                           tosu	equ	0xFFF
  4815                           tosh	equ	0xFFE
  4816                           tosl	equ	0xFFD
  4817                           pclath	equ	0xFFA
  4818                           tblptru	equ	0xFF8
  4819                           tblptrh	equ	0xFF7
  4820                           tblptrl	equ	0xFF6
  4821                           tablat	equ	0xFF5
  4822                           prodh	equ	0xFF4
  4823                           prodl	equ	0xFF3
  4824                           intcon	equ	0xFF2
  4825                           postinc0	equ	0xFEE
  4826                           wreg	equ	0xFE8
  4827                           indf2	equ	0xFDF
  4828                           postinc2	equ	0xFDE
  4829                           postdec2	equ	0xFDD
  4830                           plusw2	equ	0xFDB
  4831                           fsr2h	equ	0xFDA
  4832                           fsr2l	equ	0xFD9
  4833                           status	equ	0xFD8
  4834                           
  4835 ;; *************** function _processPowerRequest *****************
  4836 ;; Defined at:
  4837 ;;		line 33 in file "Communications.c"
  4838 ;; Parameters:    Size  Location     Type
  4839 ;;  powerSet        2    4[BANK1 ] int 
  4840 ;; Auto vars:     Size  Location     Type
  4841 ;;		None
  4842 ;; Return value:  Size  Location     Type
  4843 ;;		None               void
  4844 ;; Registers used:
  4845 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4851 ;;      Params:         0       0       2       0       0       0       0
  4852 ;;      Locals:         0       0       0       0       0       0       0
  4853 ;;      Temps:          0       0       0       0       0       0       0
  4854 ;;      Totals:         0       0       2       0       0       0       0
  4855 ;;Total ram usage:        2 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    7
  4858 ;; This function calls:
  4859 ;;		_EnableSlavePower
  4860 ;;		_Update
  4861 ;; This function is called by:
  4862 ;;		_updateComms
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           	psect	text23
  4867  0011FC                     __ptext23:
  4868                           	opt stack 0
  4869  0011FC                     _processPowerRequest:
  4870                           	opt stack 22
  4871                           
  4872                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4873                           
  4874                           ;incstack = 0
  4875  0011FC  0101               	movlb	1	; () banked
  4876  0011FE  A1D2               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4877  001200  D009               	goto	l3813
  4878                           
  4879                           ; BSR set to: 1
  4880  001202  0E00               	movlw	0
  4881  001204  0101               	movlb	1	; () banked
  4882  001206  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4883  001208  0E01               	movlw	1
  4884  00120A  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4885  00120C  0E04               	movlw	4
  4886  00120E  EC49  F007         	call	_EnableSlavePower
  4887  001212  D008               	goto	l3815
  4888  001214                     l3813:
  4889                           
  4890                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4891  001214  0E00               	movlw	0
  4892  001216  0101               	movlb	1	; () banked
  4893  001218  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4894  00121A  0E00               	movlw	0
  4895  00121C  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4896  00121E  0E04               	movlw	4
  4897  001220  EC49  F007         	call	_EnableSlavePower
  4898  001224                     l3815:
  4899                           
  4900                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4901  001224  0101               	movlb	1	; () banked
  4902  001226  A3D2               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4903  001228  D009               	goto	l3819
  4904                           
  4905                           ; BSR set to: 1
  4906  00122A  0E00               	movlw	0
  4907  00122C  0101               	movlb	1	; () banked
  4908  00122E  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4909  001230  0E01               	movlw	1
  4910  001232  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4911  001234  0E02               	movlw	2
  4912  001236  EC49  F007         	call	_EnableSlavePower
  4913  00123A  D008               	goto	l3821
  4914  00123C                     l3819:
  4915                           
  4916                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4917  00123C  0E00               	movlw	0
  4918  00123E  0101               	movlb	1	; () banked
  4919  001240  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4920  001242  0E00               	movlw	0
  4921  001244  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4922  001246  0E02               	movlw	2
  4923  001248  EC49  F007         	call	_EnableSlavePower
  4924  00124C                     l3821:
  4925                           
  4926                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4927  00124C  0101               	movlb	1	; () banked
  4928  00124E  A5D2               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4929  001250  D009               	goto	l3825
  4930                           
  4931                           ; BSR set to: 1
  4932  001252  0E00               	movlw	0
  4933  001254  0101               	movlb	1	; () banked
  4934  001256  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4935  001258  0E01               	movlw	1
  4936  00125A  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4937  00125C  0E01               	movlw	1
  4938  00125E  EC49  F007         	call	_EnableSlavePower
  4939  001262  D008               	goto	l3827
  4940  001264                     l3825:
  4941                           
  4942                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4943  001264  0E00               	movlw	0
  4944  001266  0101               	movlb	1	; () banked
  4945  001268  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4946  00126A  0E00               	movlw	0
  4947  00126C  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4948  00126E  0E01               	movlw	1
  4949  001270  EC49  F007         	call	_EnableSlavePower
  4950  001274                     l3827:
  4951                           
  4952                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  4953  001274  0101               	movlb	1	; () banked
  4954  001276  A7D2               	btfss	processPowerRequest@powerSet& (0+255),3,b
  4955  001278  D009               	goto	l3831
  4956                           
  4957                           ; BSR set to: 1
  4958  00127A  0E00               	movlw	0
  4959  00127C  0101               	movlb	1	; () banked
  4960  00127E  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4961  001280  0E01               	movlw	1
  4962  001282  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4963  001284  0E03               	movlw	3
  4964  001286  EC49  F007         	call	_EnableSlavePower
  4965  00128A  D008               	goto	l3833
  4966  00128C                     l3831:
  4967                           
  4968                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  4969  00128C  0E00               	movlw	0
  4970  00128E  0101               	movlb	1	; () banked
  4971  001290  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4972  001292  0E00               	movlw	0
  4973  001294  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4974  001296  0E03               	movlw	3
  4975  001298  EC49  F007         	call	_EnableSlavePower
  4976  00129C                     l3833:
  4977                           
  4978                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  4979  00129C  0101               	movlb	1	; () banked
  4980  00129E  A9D2               	btfss	processPowerRequest@powerSet& (0+255),4,b
  4981  0012A0  D009               	goto	l3837
  4982                           
  4983                           ; BSR set to: 1
  4984  0012A2  0E00               	movlw	0
  4985  0012A4  0101               	movlb	1	; () banked
  4986  0012A6  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4987  0012A8  0E01               	movlw	1
  4988  0012AA  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  4989  0012AC  0E05               	movlw	5
  4990  0012AE  EC49  F007         	call	_EnableSlavePower
  4991  0012B2  D008               	goto	l319
  4992  0012B4                     l3837:
  4993                           
  4994                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  4995  0012B4  0E00               	movlw	0
  4996  0012B6  0101               	movlb	1	; () banked
  4997  0012B8  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4998  0012BA  0E00               	movlw	0
  4999  0012BC  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  5000  0012BE  0E05               	movlw	5
  5001  0012C0  EC49  F007         	call	_EnableSlavePower
  5002  0012C4                     l319:
  5003                           
  5004                           ;Communications.c: 45: Update();
  5005  0012C4  ECED  F00D         	call	_Update	;wreg free
  5006  0012C8  0012               	return		;funcret
  5007  0012CA                     __end_of_processPowerRequest:
  5008                           	opt stack 0
  5009                           tosu	equ	0xFFF
  5010                           tosh	equ	0xFFE
  5011                           tosl	equ	0xFFD
  5012                           pclath	equ	0xFFA
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           intcon	equ	0xFF2
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           indf2	equ	0xFDF
  5023                           postinc2	equ	0xFDE
  5024                           postdec2	equ	0xFDD
  5025                           plusw2	equ	0xFDB
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030 ;; *************** function _SYSTEM_Initialize *****************
  5031 ;; Defined at:
  5032 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;		None
  5035 ;; Auto vars:     Size  Location     Type
  5036 ;;		None
  5037 ;; Return value:  Size  Location     Type
  5038 ;;		None               void
  5039 ;; Registers used:
  5040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5041 ;; Tracked objects:
  5042 ;;		On entry : 0/0
  5043 ;;		On exit  : 0/0
  5044 ;;		Unchanged: 0/0
  5045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5046 ;;      Params:         0       0       0       0       0       0       0
  5047 ;;      Locals:         0       0       0       0       0       0       0
  5048 ;;      Temps:          0       0       0       0       0       0       0
  5049 ;;      Totals:         0       0       0       0       0       0       0
  5050 ;;Total ram usage:        0 bytes
  5051 ;; Hardware stack levels used:    1
  5052 ;; Hardware stack levels required when called:    7
  5053 ;; This function calls:
  5054 ;;		_ADC_Initialize
  5055 ;;		_EUSART1_Initialize
  5056 ;;		_INTERRUPT_Initialize
  5057 ;;		_OSCILLATOR_Initialize
  5058 ;;		_PIN_MANAGER_Initialize
  5059 ;;		_begin
  5060 ;; This function is called by:
  5061 ;;		_main
  5062 ;; This function uses a non-reentrant model
  5063 ;;
  5064                           
  5065                           	psect	text24
  5066  0015D8                     __ptext24:
  5067                           	opt stack 0
  5068  0015D8                     _SYSTEM_Initialize:
  5069                           	opt stack 23
  5070                           
  5071                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5072                           
  5073                           ;incstack = 0
  5074  0015D8  ECE1  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  5075                           
  5076                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5077  0015DC  EC20  F00B         	call	_PIN_MANAGER_Initialize	;wreg free
  5078                           
  5079                           ;mcc.c: 116: INTERRUPT_Initialize();
  5080  0015E0  ECE8  F00D         	call	_INTERRUPT_Initialize	;wreg free
  5081                           
  5082                           ;mcc.c: 117: EUSART1_Initialize();
  5083  0015E4  EC7A  F00C         	call	_EUSART1_Initialize	;wreg free
  5084                           
  5085                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5086  0015E8  0EC6               	movlw	low _receiveArray
  5087  0015EA  0101               	movlb	1	; () banked
  5088  0015EC  6FCE               	movwf	begin@ptr& (0+255),b
  5089  0015EE  0E00               	movlw	high _receiveArray
  5090  0015F0  0101               	movlb	1	; () banked
  5091  0015F2  6FCF               	movwf	(begin@ptr+1)& (0+255),b
  5092  0015F4  0E28               	movlw	40
  5093  0015F6  0101               	movlb	1	; () banked
  5094  0015F8  6FD0               	movwf	begin@maxSize& (0+255),b
  5095  0015FA  0E05               	movlw	5
  5096  0015FC  0101               	movlb	1	; () banked
  5097  0015FE  6FD1               	movwf	begin@givenAddress& (0+255),b
  5098  001600  0E00               	movlw	0
  5099  001602  0101               	movlb	1	; () banked
  5100  001604  6FD2               	movwf	begin@error& (0+255),b
  5101  001606  0ECC               	movlw	low _Send_put
  5102  001608  0101               	movlb	1	; () banked
  5103  00160A  6FD3               	movwf	begin@stufftosend& (0+255),b
  5104  00160C  0E19               	movlw	high _Send_put
  5105  00160E  0101               	movlb	1	; () banked
  5106  001610  6FD4               	movwf	(begin@stufftosend+1)& (0+255),b
  5107  001612  0EB4               	movlw	low _Receive_get
  5108  001614  0101               	movlb	1	; () banked
  5109  001616  6FD5               	movwf	begin@stufftoreceive& (0+255),b
  5110  001618  0E1B               	movlw	high _Receive_get
  5111  00161A  0101               	movlb	1	; () banked
  5112  00161C  6FD6               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5113  00161E  0E3C               	movlw	low _Receive_available
  5114  001620  0101               	movlb	1	; () banked
  5115  001622  6FD7               	movwf	begin@stuffavailable& (0+255),b
  5116  001624  0E1B               	movlw	high _Receive_available
  5117  001626  0101               	movlb	1	; () banked
  5118  001628  6FD8               	movwf	(begin@stuffavailable+1)& (0+255),b
  5119  00162A  0EA6               	movlw	low _Receive_peek
  5120  00162C  0101               	movlb	1	; () banked
  5121  00162E  6FD9               	movwf	begin@stuffpeek& (0+255),b
  5122  001630  0E1B               	movlw	high _Receive_peek
  5123  001632  0101               	movlb	1	; () banked
  5124  001634  6FDA               	movwf	(begin@stuffpeek+1)& (0+255),b
  5125  001636  ECB3  F00B         	call	_begin	;wreg free
  5126                           
  5127                           ;mcc.c: 120: ADC_Initialize();
  5128  00163A  EC92  F00D         	call	_ADC_Initialize	;wreg free
  5129  00163E  0012               	return		;funcret
  5130  001640                     __end_of_SYSTEM_Initialize:
  5131                           	opt stack 0
  5132                           tosu	equ	0xFFF
  5133                           tosh	equ	0xFFE
  5134                           tosl	equ	0xFFD
  5135                           pclath	equ	0xFFA
  5136                           tblptru	equ	0xFF8
  5137                           tblptrh	equ	0xFF7
  5138                           tblptrl	equ	0xFF6
  5139                           tablat	equ	0xFF5
  5140                           prodh	equ	0xFF4
  5141                           prodl	equ	0xFF3
  5142                           intcon	equ	0xFF2
  5143                           postinc0	equ	0xFEE
  5144                           wreg	equ	0xFE8
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           plusw2	equ	0xFDB
  5149                           fsr2h	equ	0xFDA
  5150                           fsr2l	equ	0xFD9
  5151                           status	equ	0xFD8
  5152                           
  5153 ;; *************** function _begin *****************
  5154 ;; Defined at:
  5155 ;;		line 18 in file "FastTransfer.c"
  5156 ;; Parameters:    Size  Location     Type
  5157 ;;  ptr             2    0[BANK1 ] PTR volatile int 
  5158 ;;		 -> receiveArray(40), 
  5159 ;;  maxSize         1    2[BANK1 ] unsigned char 
  5160 ;;  givenAddress    1    3[BANK1 ] unsigned char 
  5161 ;;  error           1    4[BANK1 ] unsigned char 
  5162 ;;  stufftosend     2    5[BANK1 ] PTR FTN(unsigned char ,)
  5163 ;;		 -> Send_put(0), 
  5164 ;;  stufftorecei    2    7[BANK1 ] PTR FTN()unsigned char 
  5165 ;;		 -> Receive_get(1), 
  5166 ;;  stuffavailab    2    9[BANK1 ] PTR FTN()int 
  5167 ;;		 -> Receive_available(2), 
  5168 ;;  stuffpeek       2   11[BANK1 ] PTR FTN()unsigned char 
  5169 ;;		 -> Receive_peek(1), 
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;		None
  5172 ;; Return value:  Size  Location     Type
  5173 ;;		None               void
  5174 ;; Registers used:
  5175 ;;		wreg, status,2, status,0, cstack
  5176 ;; Tracked objects:
  5177 ;;		On entry : 0/0
  5178 ;;		On exit  : 0/0
  5179 ;;		Unchanged: 0/0
  5180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5181 ;;      Params:         0       0      13       0       0       0       0
  5182 ;;      Locals:         0       0       0       0       0       0       0
  5183 ;;      Temps:          0       0       0       0       0       0       0
  5184 ;;      Totals:         0       0      13       0       0       0       0
  5185 ;;Total ram usage:       13 bytes
  5186 ;; Hardware stack levels used:    1
  5187 ;; Hardware stack levels required when called:    5
  5188 ;; This function calls:
  5189 ;;		___awdiv
  5190 ;; This function is called by:
  5191 ;;		_SYSTEM_Initialize
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text25
  5196  001766                     __ptext25:
  5197                           	opt stack 0
  5198  001766                     _begin:
  5199                           	opt stack 24
  5200                           
  5201                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5202                           
  5203                           ;incstack = 0
  5204  001766  C1CE  F02C         	movff	begin@ptr,_receiveArrayAddress
  5205  00176A  C1CF  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5206                           
  5207                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5208  00176E  C1D1  F03F         	movff	begin@givenAddress,_moduleAddress
  5209                           
  5210                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5211  001772  C1D3  F036         	movff	begin@stufftosend,_serial_write
  5212  001776  C1D4  F037         	movff	begin@stufftosend+1,_serial_write+1
  5213                           
  5214                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5215  00177A  C1D7  F030         	movff	begin@stuffavailable,_serial_available
  5216  00177E  C1D8  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5217                           
  5218                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5219  001782  C1D9  F032         	movff	begin@stuffpeek,_serial_peek
  5220  001786  C1DA  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5221                           
  5222                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5223  00178A  C1D5  F034         	movff	begin@stufftoreceive,_serial_read
  5224  00178E  C1D6  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5225                           
  5226                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5227  001792  C1D0  F01B         	movff	begin@maxSize,___awdiv@dividend
  5228  001796  6A1C               	clrf	___awdiv@dividend+1,c
  5229  001798  0E00               	movlw	0
  5230  00179A  6E1E               	movwf	___awdiv@divisor+1,c
  5231  00179C  0E02               	movlw	2
  5232  00179E  6E1D               	movwf	___awdiv@divisor,c
  5233  0017A0  EC40  F00A         	call	___awdiv	;wreg free
  5234  0017A4  501B               	movf	?___awdiv,w,c
  5235  0017A6  6E3E               	movwf	_maxDataAddress,c
  5236                           
  5237                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5238  0017A8  0E00               	movlw	low _ring_buffer
  5239  0017AA  6E2E               	movwf	_sendStructAddress,c
  5240  0017AC  0E01               	movlw	high _ring_buffer
  5241  0017AE  6E2F               	movwf	_sendStructAddress+1,c
  5242                           
  5243                           ;FastTransfer.c: 27: AKNAKsend = error;
  5244  0017B0  C1D2  F03C         	movff	begin@error,_AKNAKsend
  5245                           
  5246                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5247  0017B4  0E00               	movlw	0
  5248  0017B6  6E27               	movwf	_alignErrorCounter+1,c
  5249  0017B8  0E00               	movlw	0
  5250  0017BA  6E26               	movwf	_alignErrorCounter,c
  5251  0017BC  0012               	return		;funcret
  5252  0017BE                     __end_of_begin:
  5253                           	opt stack 0
  5254                           tosu	equ	0xFFF
  5255                           tosh	equ	0xFFE
  5256                           tosl	equ	0xFFD
  5257                           pclath	equ	0xFFA
  5258                           tblptru	equ	0xFF8
  5259                           tblptrh	equ	0xFF7
  5260                           tblptrl	equ	0xFF6
  5261                           tablat	equ	0xFF5
  5262                           prodh	equ	0xFF4
  5263                           prodl	equ	0xFF3
  5264                           intcon	equ	0xFF2
  5265                           postinc0	equ	0xFEE
  5266                           wreg	equ	0xFE8
  5267                           indf2	equ	0xFDF
  5268                           postinc2	equ	0xFDE
  5269                           postdec2	equ	0xFDD
  5270                           plusw2	equ	0xFDB
  5271                           fsr2h	equ	0xFDA
  5272                           fsr2l	equ	0xFD9
  5273                           status	equ	0xFD8
  5274                           
  5275 ;; *************** function ___awdiv *****************
  5276 ;; Defined at:
  5277 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;  dividend        2   26[COMRAM] int 
  5280 ;;  divisor         2   28[COMRAM] int 
  5281 ;; Auto vars:     Size  Location     Type
  5282 ;;  quotient        2   32[COMRAM] int 
  5283 ;;  sign            1   31[COMRAM] unsigned char 
  5284 ;;  counter         1   30[COMRAM] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;                  2   26[COMRAM] int 
  5287 ;; Registers used:
  5288 ;;		wreg, status,2, status,0
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5294 ;;      Params:         4       0       0       0       0       0       0
  5295 ;;      Locals:         4       0       0       0       0       0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0
  5297 ;;      Totals:         8       0       0       0       0       0       0
  5298 ;;Total ram usage:        8 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    4
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_begin
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text26
  5309  001480                     __ptext26:
  5310                           	opt stack 0
  5311  001480                     ___awdiv:
  5312                           	opt stack 24
  5313                           
  5314                           ;incstack = 0
  5315  001480  0E00               	movlw	0
  5316  001482  6E20               	movwf	___awdiv@sign,c
  5317  001484  AE1E               	btfss	___awdiv@divisor+1,7,c
  5318  001486  D006               	goto	l2773
  5319  001488  6C1D               	negf	___awdiv@divisor,c
  5320  00148A  1E1E               	comf	___awdiv@divisor+1,f,c
  5321  00148C  B0D8               	btfsc	status,0,c
  5322  00148E  2A1E               	incf	___awdiv@divisor+1,f,c
  5323  001490  0E01               	movlw	1
  5324  001492  6E20               	movwf	___awdiv@sign,c
  5325  001494                     l2773:
  5326  001494  AE1C               	btfss	___awdiv@dividend+1,7,c
  5327  001496  D006               	goto	l2779
  5328  001498  6C1B               	negf	___awdiv@dividend,c
  5329  00149A  1E1C               	comf	___awdiv@dividend+1,f,c
  5330  00149C  B0D8               	btfsc	status,0,c
  5331  00149E  2A1C               	incf	___awdiv@dividend+1,f,c
  5332  0014A0  0E01               	movlw	1
  5333  0014A2  1A20               	xorwf	___awdiv@sign,f,c
  5334  0014A4                     l2779:
  5335  0014A4  0E00               	movlw	0
  5336  0014A6  6E22               	movwf	___awdiv@quotient+1,c
  5337  0014A8  0E00               	movlw	0
  5338  0014AA  6E21               	movwf	___awdiv@quotient,c
  5339  0014AC  501D               	movf	___awdiv@divisor,w,c
  5340  0014AE  101E               	iorwf	___awdiv@divisor+1,w,c
  5341  0014B0  B4D8               	btfsc	status,2,c
  5342  0014B2  D01C               	goto	l2801
  5343  0014B4  0E01               	movlw	1
  5344  0014B6  6E1F               	movwf	___awdiv@counter,c
  5345  0014B8  D004               	goto	l2787
  5346  0014BA                     l2785:
  5347  0014BA  90D8               	bcf	status,0,c
  5348  0014BC  361D               	rlcf	___awdiv@divisor,f,c
  5349  0014BE  361E               	rlcf	___awdiv@divisor+1,f,c
  5350  0014C0  2A1F               	incf	___awdiv@counter,f,c
  5351  0014C2                     l2787:
  5352  0014C2  AE1E               	btfss	___awdiv@divisor+1,7,c
  5353  0014C4  D7FA               	goto	l2785
  5354  0014C6                     l2789:
  5355  0014C6  90D8               	bcf	status,0,c
  5356  0014C8  3621               	rlcf	___awdiv@quotient,f,c
  5357  0014CA  3622               	rlcf	___awdiv@quotient+1,f,c
  5358  0014CC  501D               	movf	___awdiv@divisor,w,c
  5359  0014CE  5C1B               	subwf	___awdiv@dividend,w,c
  5360  0014D0  501E               	movf	___awdiv@divisor+1,w,c
  5361  0014D2  581C               	subwfb	___awdiv@dividend+1,w,c
  5362  0014D4  A0D8               	btfss	status,0,c
  5363  0014D6  D005               	goto	l2797
  5364  0014D8  501D               	movf	___awdiv@divisor,w,c
  5365  0014DA  5E1B               	subwf	___awdiv@dividend,f,c
  5366  0014DC  501E               	movf	___awdiv@divisor+1,w,c
  5367  0014DE  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5368  0014E0  8021               	bsf	___awdiv@quotient,0,c
  5369  0014E2                     l2797:
  5370  0014E2  90D8               	bcf	status,0,c
  5371  0014E4  321E               	rrcf	___awdiv@divisor+1,f,c
  5372  0014E6  321D               	rrcf	___awdiv@divisor,f,c
  5373  0014E8  2E1F               	decfsz	___awdiv@counter,f,c
  5374  0014EA  D7ED               	goto	l2789
  5375  0014EC                     l2801:
  5376  0014EC  5020               	movf	___awdiv@sign,w,c
  5377  0014EE  B4D8               	btfsc	status,2,c
  5378  0014F0  D004               	goto	l2805
  5379  0014F2  6C21               	negf	___awdiv@quotient,c
  5380  0014F4  1E22               	comf	___awdiv@quotient+1,f,c
  5381  0014F6  B0D8               	btfsc	status,0,c
  5382  0014F8  2A22               	incf	___awdiv@quotient+1,f,c
  5383  0014FA                     l2805:
  5384  0014FA  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5385  0014FE  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5386  001502  0012               	return	
  5387  001504                     __end_of___awdiv:
  5388                           	opt stack 0
  5389                           tosu	equ	0xFFF
  5390                           tosh	equ	0xFFE
  5391                           tosl	equ	0xFFD
  5392                           pclath	equ	0xFFA
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           prodh	equ	0xFF4
  5398                           prodl	equ	0xFF3
  5399                           intcon	equ	0xFF2
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           plusw2	equ	0xFDB
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _PIN_MANAGER_Initialize *****************
  5411 ;; Defined at:
  5412 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;		None
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;		None
  5417 ;; Return value:  Size  Location     Type
  5418 ;;		None               void
  5419 ;; Registers used:
  5420 ;;		wreg, status,2
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5426 ;;      Params:         0       0       0       0       0       0       0
  5427 ;;      Locals:         0       0       0       0       0       0       0
  5428 ;;      Temps:          0       0       0       0       0       0       0
  5429 ;;      Totals:         0       0       0       0       0       0       0
  5430 ;;Total ram usage:        0 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:    4
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_SYSTEM_Initialize
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text27
  5441  001640                     __ptext27:
  5442                           	opt stack 0
  5443  001640                     _PIN_MANAGER_Initialize:
  5444                           	opt stack 25
  5445                           
  5446                           ;pin_manager.c: 52: LATA = 0x00;
  5447                           
  5448                           ;incstack = 0
  5449  001640  0E00               	movlw	0
  5450  001642  6E89               	movwf	3977,c	;volatile
  5451                           
  5452                           ;pin_manager.c: 53: TRISA = 0xF7;
  5453  001644  0EF7               	movlw	247
  5454  001646  6E92               	movwf	3986,c	;volatile
  5455                           
  5456                           ;pin_manager.c: 54: ANSELA = 0x27;
  5457  001648  0E27               	movlw	39
  5458  00164A  010F               	movlb	15	; () banked
  5459  00164C  6F38               	movwf	56,b	;volatile
  5460                           
  5461                           ;pin_manager.c: 56: LATB = 0x01;
  5462  00164E  0E01               	movlw	1
  5463  001650  6E8A               	movwf	3978,c	;volatile
  5464                           
  5465                           ;pin_manager.c: 57: TRISB = 0xFE;
  5466  001652  0EFE               	movlw	254
  5467  001654  6E93               	movwf	3987,c	;volatile
  5468                           
  5469                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5470  001656  0E3E               	movlw	62
  5471  001658  010F               	movlb	15	; () banked
  5472  00165A  6F39               	movwf	57,b	;volatile
  5473                           
  5474                           ;pin_manager.c: 59: WPUB = 0x00;
  5475  00165C  0E00               	movlw	0
  5476  00165E  6E61               	movwf	3937,c	;volatile
  5477                           
  5478                           ;pin_manager.c: 61: LATC = 0x00;
  5479  001660  0E00               	movlw	0
  5480  001662  6E8B               	movwf	3979,c	;volatile
  5481                           
  5482                           ;pin_manager.c: 62: TRISC = 0xDF;
  5483  001664  0EDF               	movlw	223
  5484  001666  6E94               	movwf	3988,c	;volatile
  5485                           
  5486                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5487  001668  0E1C               	movlw	28
  5488  00166A  010F               	movlb	15	; () banked
  5489  00166C  6F3A               	movwf	58,b	;volatile
  5490                           
  5491                           ;pin_manager.c: 65: LATD = 0x00;
  5492  00166E  0E00               	movlw	0
  5493  001670  6E8C               	movwf	3980,c	;volatile
  5494                           
  5495                           ;pin_manager.c: 66: TRISD = 0x0F;
  5496  001672  0E0F               	movlw	15
  5497  001674  6E95               	movwf	3989,c	;volatile
  5498                           
  5499                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5500  001676  0E0F               	movlw	15
  5501  001678  010F               	movlb	15	; () banked
  5502  00167A  6F3B               	movwf	59,b	;volatile
  5503                           
  5504                           ;pin_manager.c: 69: LATE = 0x00;
  5505  00167C  0E00               	movlw	0
  5506  00167E  6E8D               	movwf	3981,c	;volatile
  5507                           
  5508                           ;pin_manager.c: 70: TRISE = 0x07;
  5509  001680  0E07               	movlw	7
  5510  001682  6E96               	movwf	3990,c	;volatile
  5511                           
  5512                           ;pin_manager.c: 71: ANSELE = 0x07;
  5513  001684  0E07               	movlw	7
  5514  001686  010F               	movlb	15	; () banked
  5515  001688  6F3C               	movwf	60,b	;volatile
  5516                           
  5517                           ; BSR set to: 15
  5518                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5519  00168A  8C94               	bsf	3988,6,c	;volatile
  5520                           
  5521                           ; BSR set to: 15
  5522                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5523  00168C  8E94               	bsf	3988,7,c	;volatile
  5524                           
  5525                           ; BSR set to: 15
  5526                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5527  00168E  9A94               	bcf	3988,5,c	;volatile
  5528                           
  5529                           ; BSR set to: 15
  5530                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5531  001690  8A8B               	bsf	3979,5,c	;volatile
  5532                           
  5533                           ; BSR set to: 15
  5534                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5535  001692  8C8B               	bsf	3979,6,c	;volatile
  5536                           
  5537                           ; BSR set to: 15
  5538                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5539  001694  8E8B               	bsf	3979,7,c	;volatile
  5540                           
  5541                           ; BSR set to: 15
  5542                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5543  001696  010F               	movlb	15	; () banked
  5544  001698  9B3A               	bcf	58,5,b	;volatile
  5545                           
  5546                           ; BSR set to: 15
  5547                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5548  00169A  010F               	movlb	15	; () banked
  5549  00169C  9D3A               	bcf	58,6,b	;volatile
  5550                           
  5551                           ; BSR set to: 15
  5552                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5553  00169E  010F               	movlb	15	; () banked
  5554  0016A0  9F3A               	bcf	58,7,b	;volatile
  5555                           
  5556                           ; BSR set to: 15
  5557                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5558  0016A2  8EF1               	bsf	intcon2,7,c	;volatile
  5559                           
  5560                           ; BSR set to: 15
  5561  0016A4  0012               	return		;funcret
  5562  0016A6                     __end_of_PIN_MANAGER_Initialize:
  5563                           	opt stack 0
  5564                           tosu	equ	0xFFF
  5565                           tosh	equ	0xFFE
  5566                           tosl	equ	0xFFD
  5567                           pclath	equ	0xFFA
  5568                           tblptru	equ	0xFF8
  5569                           tblptrh	equ	0xFF7
  5570                           tblptrl	equ	0xFF6
  5571                           tablat	equ	0xFF5
  5572                           prodh	equ	0xFF4
  5573                           prodl	equ	0xFF3
  5574                           intcon	equ	0xFF2
  5575                           intcon2	equ	0xFF1
  5576                           postinc0	equ	0xFEE
  5577                           wreg	equ	0xFE8
  5578                           indf2	equ	0xFDF
  5579                           postinc2	equ	0xFDE
  5580                           postdec2	equ	0xFDD
  5581                           plusw2	equ	0xFDB
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _OSCILLATOR_Initialize *****************
  5587 ;; Defined at:
  5588 ;;		line 123 in file "mcc_generated_files/mcc.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;		None
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;		None               void
  5595 ;; Registers used:
  5596 ;;		wreg, status,2
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5602 ;;      Params:         0       0       0       0       0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0
  5604 ;;      Temps:          0       0       0       0       0       0       0
  5605 ;;      Totals:         0       0       0       0       0       0       0
  5606 ;;Total ram usage:        0 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    4
  5609 ;; This function calls:
  5610 ;;		Nothing
  5611 ;; This function is called by:
  5612 ;;		_SYSTEM_Initialize
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text28
  5617  001BC2                     __ptext28:
  5618                           	opt stack 0
  5619  001BC2                     _OSCILLATOR_Initialize:
  5620                           	opt stack 25
  5621                           
  5622                           ;mcc.c: 125: OSCCON = 0x60;
  5623                           
  5624                           ; BSR set to: 15
  5625                           ;incstack = 0
  5626  001BC2  0E60               	movlw	96
  5627  001BC4  6ED3               	movwf	4051,c	;volatile
  5628                           
  5629                           ;mcc.c: 127: OSCCON2 = 0x04;
  5630  001BC6  0E04               	movlw	4
  5631  001BC8  6ED2               	movwf	4050,c	;volatile
  5632                           
  5633                           ;mcc.c: 129: OSCTUNE = 0x00;
  5634  001BCA  0E00               	movlw	0
  5635  001BCC  6E9B               	movwf	3995,c	;volatile
  5636  001BCE  0012               	return		;funcret
  5637  001BD0                     __end_of_OSCILLATOR_Initialize:
  5638                           	opt stack 0
  5639                           tosu	equ	0xFFF
  5640                           tosh	equ	0xFFE
  5641                           tosl	equ	0xFFD
  5642                           pclath	equ	0xFFA
  5643                           tblptru	equ	0xFF8
  5644                           tblptrh	equ	0xFF7
  5645                           tblptrl	equ	0xFF6
  5646                           tablat	equ	0xFF5
  5647                           prodh	equ	0xFF4
  5648                           prodl	equ	0xFF3
  5649                           intcon	equ	0xFF2
  5650                           intcon2	equ	0xFF1
  5651                           postinc0	equ	0xFEE
  5652                           wreg	equ	0xFE8
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           plusw2	equ	0xFDB
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function _INTERRUPT_Initialize *****************
  5662 ;; Defined at:
  5663 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;		None
  5666 ;; Auto vars:     Size  Location     Type
  5667 ;;		None
  5668 ;; Return value:  Size  Location     Type
  5669 ;;		None               void
  5670 ;; Registers used:
  5671 ;;		None
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5677 ;;      Params:         0       0       0       0       0       0       0
  5678 ;;      Locals:         0       0       0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0
  5680 ;;      Totals:         0       0       0       0       0       0       0
  5681 ;;Total ram usage:        0 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    4
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_SYSTEM_Initialize
  5688 ;; This function uses a non-reentrant model
  5689 ;;
  5690                           
  5691                           	psect	text29
  5692  001BD0                     __ptext29:
  5693                           	opt stack 0
  5694  001BD0                     _INTERRUPT_Initialize:
  5695                           	opt stack 25
  5696                           
  5697                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5698                           
  5699                           ;incstack = 0
  5700  001BD0  9ED0               	bcf	4048,7,c	;volatile
  5701                           
  5702                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5703  001BD2  9A9F               	bcf	3999,5,c	;volatile
  5704                           
  5705                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5706  001BD4  989F               	bcf	3999,4,c	;volatile
  5707                           
  5708                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5709  001BD6  9C9F               	bcf	3999,6,c	;volatile
  5710  001BD8  0012               	return		;funcret
  5711  001BDA                     __end_of_INTERRUPT_Initialize:
  5712                           	opt stack 0
  5713                           tosu	equ	0xFFF
  5714                           tosh	equ	0xFFE
  5715                           tosl	equ	0xFFD
  5716                           pclath	equ	0xFFA
  5717                           tblptru	equ	0xFF8
  5718                           tblptrh	equ	0xFF7
  5719                           tblptrl	equ	0xFF6
  5720                           tablat	equ	0xFF5
  5721                           prodh	equ	0xFF4
  5722                           prodl	equ	0xFF3
  5723                           intcon	equ	0xFF2
  5724                           intcon2	equ	0xFF1
  5725                           postinc0	equ	0xFEE
  5726                           wreg	equ	0xFE8
  5727                           indf2	equ	0xFDF
  5728                           postinc2	equ	0xFDE
  5729                           postdec2	equ	0xFDD
  5730                           plusw2	equ	0xFDB
  5731                           fsr2h	equ	0xFDA
  5732                           fsr2l	equ	0xFD9
  5733                           status	equ	0xFD8
  5734                           
  5735 ;; *************** function _EUSART1_Initialize *****************
  5736 ;; Defined at:
  5737 ;;		line 21 in file "UART.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;		None
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;		None
  5742 ;; Return value:  Size  Location     Type
  5743 ;;		None               void
  5744 ;; Registers used:
  5745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5751 ;;      Params:         0       0       0       0       0       0       0
  5752 ;;      Locals:         0       0       0       0       0       0       0
  5753 ;;      Temps:          0       0       0       0       0       0       0
  5754 ;;      Totals:         0       0       0       0       0       0       0
  5755 ;;Total ram usage:        0 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    6
  5758 ;; This function calls:
  5759 ;;		_UART_buff_init
  5760 ;; This function is called by:
  5761 ;;		_SYSTEM_Initialize
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text30
  5766  0018F4                     __ptext30:
  5767                           	opt stack 0
  5768  0018F4                     _EUSART1_Initialize:
  5769                           	opt stack 23
  5770                           
  5771                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5772                           
  5773                           ;incstack = 0
  5774  0018F4  9A9D               	bcf	3997,5,c	;volatile
  5775                           
  5776                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5777  0018F6  989D               	bcf	3997,4,c	;volatile
  5778                           
  5779                           ;UART.c: 29: BAUD1CON = 0x48;
  5780  0018F8  0E48               	movlw	72
  5781  0018FA  6EB8               	movwf	4024,c	;volatile
  5782                           
  5783                           ;UART.c: 32: RC1STA = 0x98;
  5784  0018FC  0E98               	movlw	152
  5785  0018FE  6EAB               	movwf	4011,c	;volatile
  5786                           
  5787                           ;UART.c: 35: TX1STA = 0x26;
  5788  001900  0E26               	movlw	38
  5789  001902  6EAC               	movwf	4012,c	;volatile
  5790                           
  5791                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  5792  001904  0E33               	movlw	51
  5793  001906  6EAF               	movwf	4015,c	;volatile
  5794                           
  5795                           ;UART.c: 41: SPBRGH1 = 0x00;
  5796  001908  0E00               	movlw	0
  5797  00190A  6EB0               	movwf	4016,c	;volatile
  5798                           
  5799                           ;UART.c: 44: TXREG1 = 0x00;
  5800  00190C  0E00               	movlw	0
  5801  00190E  6EAD               	movwf	4013,c	;volatile
  5802                           
  5803                           ;UART.c: 47: RCREG1 = 0x00;
  5804  001910  0E00               	movlw	0
  5805  001912  6EAE               	movwf	4014,c	;volatile
  5806                           
  5807                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5808  001914  0E00               	movlw	low _input_buffer
  5809  001916  6E23               	movwf	UART_buff_init@_this,c
  5810  001918  0E03               	movlw	high _input_buffer
  5811  00191A  6E24               	movwf	UART_buff_init@_this+1,c
  5812  00191C  EC74  F00D         	call	_UART_buff_init	;wreg free
  5813                           
  5814                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5815  001920  0E00               	movlw	low _output_buffer
  5816  001922  6E23               	movwf	UART_buff_init@_this,c
  5817  001924  0E04               	movlw	high _output_buffer
  5818  001926  6E24               	movwf	UART_buff_init@_this+1,c
  5819  001928  EC74  F00D         	call	_UART_buff_init	;wreg free
  5820                           
  5821                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5822  00192C  8A9D               	bsf	3997,5,c	;volatile
  5823  00192E  0012               	return		;funcret
  5824  001930                     __end_of_EUSART1_Initialize:
  5825                           	opt stack 0
  5826                           tosu	equ	0xFFF
  5827                           tosh	equ	0xFFE
  5828                           tosl	equ	0xFFD
  5829                           pclath	equ	0xFFA
  5830                           tblptru	equ	0xFF8
  5831                           tblptrh	equ	0xFF7
  5832                           tblptrl	equ	0xFF6
  5833                           tablat	equ	0xFF5
  5834                           prodh	equ	0xFF4
  5835                           prodl	equ	0xFF3
  5836                           intcon	equ	0xFF2
  5837                           intcon2	equ	0xFF1
  5838                           postinc0	equ	0xFEE
  5839                           wreg	equ	0xFE8
  5840                           indf2	equ	0xFDF
  5841                           postinc2	equ	0xFDE
  5842                           postdec2	equ	0xFDD
  5843                           plusw2	equ	0xFDB
  5844                           fsr2h	equ	0xFDA
  5845                           fsr2l	equ	0xFD9
  5846                           status	equ	0xFD8
  5847                           
  5848 ;; *************** function _UART_buff_init *****************
  5849 ;; Defined at:
  5850 ;;		line 56 in file "UART.c"
  5851 ;; Parameters:    Size  Location     Type
  5852 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5853 ;;		 -> output_buffer(206), input_buffer(206), 
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;		None
  5856 ;; Return value:  Size  Location     Type
  5857 ;;		None               void
  5858 ;; Registers used:
  5859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5860 ;; Tracked objects:
  5861 ;;		On entry : 0/0
  5862 ;;		On exit  : 0/0
  5863 ;;		Unchanged: 0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5865 ;;      Params:         2       0       0       0       0       0       0
  5866 ;;      Locals:         0       0       0       0       0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0
  5868 ;;      Totals:         2       0       0       0       0       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    5
  5872 ;; This function calls:
  5873 ;;		_memset
  5874 ;; This function is called by:
  5875 ;;		_EUSART1_Initialize
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text31
  5880  001AE8                     __ptext31:
  5881                           	opt stack 0
  5882  001AE8                     _UART_buff_init:
  5883                           	opt stack 23
  5884                           
  5885                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5886                           
  5887                           ;incstack = 0
  5888  001AE8  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5889  001AEC  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5890  001AF0  0E00               	movlw	0
  5891  001AF2  6E1E               	movwf	memset@c+1,c
  5892  001AF4  0E00               	movlw	0
  5893  001AF6  6E1D               	movwf	memset@c,c
  5894  001AF8  0E00               	movlw	0
  5895  001AFA  6E20               	movwf	memset@n+1,c
  5896  001AFC  0ECE               	movlw	206
  5897  001AFE  6E1F               	movwf	memset@n,c
  5898  001B00  ECFE  F00C         	call	_memset	;wreg free
  5899  001B04  0012               	return		;funcret
  5900  001B06                     __end_of_UART_buff_init:
  5901                           	opt stack 0
  5902                           tosu	equ	0xFFF
  5903                           tosh	equ	0xFFE
  5904                           tosl	equ	0xFFD
  5905                           pclath	equ	0xFFA
  5906                           tblptru	equ	0xFF8
  5907                           tblptrh	equ	0xFF7
  5908                           tblptrl	equ	0xFF6
  5909                           tablat	equ	0xFF5
  5910                           prodh	equ	0xFF4
  5911                           prodl	equ	0xFF3
  5912                           intcon	equ	0xFF2
  5913                           intcon2	equ	0xFF1
  5914                           postinc0	equ	0xFEE
  5915                           wreg	equ	0xFE8
  5916                           indf2	equ	0xFDF
  5917                           postinc2	equ	0xFDE
  5918                           postdec2	equ	0xFDD
  5919                           plusw2	equ	0xFDB
  5920                           fsr2h	equ	0xFDA
  5921                           fsr2l	equ	0xFD9
  5922                           status	equ	0xFD8
  5923                           
  5924 ;; *************** function _memset *****************
  5925 ;; Defined at:
  5926 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  5927 ;; Parameters:    Size  Location     Type
  5928 ;;  p1              2   26[COMRAM] PTR void 
  5929 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5930 ;;  c               2   28[COMRAM] int 
  5931 ;;  n               2   30[COMRAM] unsigned int 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  p               2   32[COMRAM] PTR unsigned char 
  5934 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5935 ;; Return value:  Size  Location     Type
  5936 ;;                  2   26[COMRAM] PTR void 
  5937 ;; Registers used:
  5938 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5939 ;; Tracked objects:
  5940 ;;		On entry : 0/0
  5941 ;;		On exit  : 0/0
  5942 ;;		Unchanged: 0/0
  5943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5944 ;;      Params:         6       0       0       0       0       0       0
  5945 ;;      Locals:         2       0       0       0       0       0       0
  5946 ;;      Temps:          0       0       0       0       0       0       0
  5947 ;;      Totals:         8       0       0       0       0       0       0
  5948 ;;Total ram usage:        8 bytes
  5949 ;; Hardware stack levels used:    1
  5950 ;; Hardware stack levels required when called:    4
  5951 ;; This function calls:
  5952 ;;		Nothing
  5953 ;; This function is called by:
  5954 ;;		_FastTransfer_buffer_flush
  5955 ;;		_UART_buff_init
  5956 ;;		_UART_buff_flush
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           	psect	text32
  5961  0019FC                     __ptext32:
  5962                           	opt stack 0
  5963  0019FC                     _memset:
  5964                           	opt stack 22
  5965                           
  5966                           ;incstack = 0
  5967  0019FC  C01B  F021         	movff	memset@p1,memset@p
  5968  001A00  C01C  F022         	movff	memset@p1+1,memset@p+1
  5969  001A04  D008               	goto	l3351
  5970  001A06                     l3347:
  5971  001A06  C021  FFD9         	movff	memset@p,fsr2l
  5972  001A0A  C022  FFDA         	movff	memset@p+1,fsr2h
  5973  001A0E  C01D  FFDF         	movff	memset@c,indf2
  5974  001A12  4A21               	infsnz	memset@p,f,c
  5975  001A14  2A22               	incf	memset@p+1,f,c
  5976  001A16                     l3351:
  5977  001A16  061F               	decf	memset@n,f,c
  5978  001A18  A0D8               	btfss	status,0,c
  5979  001A1A  0620               	decf	memset@n+1,f,c
  5980  001A1C  281F               	incf	memset@n,w,c
  5981  001A1E  E1F3               	bnz	l3347
  5982  001A20  2820               	incf	memset@n+1,w,c
  5983  001A22  B4D8               	btfsc	status,2,c
  5984  001A24  0012               	return	
  5985  001A26  D7EF               	goto	l3347
  5986  001A28                     __end_of_memset:
  5987                           	opt stack 0
  5988                           tosu	equ	0xFFF
  5989                           tosh	equ	0xFFE
  5990                           tosl	equ	0xFFD
  5991                           pclath	equ	0xFFA
  5992                           tblptru	equ	0xFF8
  5993                           tblptrh	equ	0xFF7
  5994                           tblptrl	equ	0xFF6
  5995                           tablat	equ	0xFF5
  5996                           prodh	equ	0xFF4
  5997                           prodl	equ	0xFF3
  5998                           intcon	equ	0xFF2
  5999                           intcon2	equ	0xFF1
  6000                           postinc0	equ	0xFEE
  6001                           wreg	equ	0xFE8
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           postdec2	equ	0xFDD
  6005                           plusw2	equ	0xFDB
  6006                           fsr2h	equ	0xFDA
  6007                           fsr2l	equ	0xFD9
  6008                           status	equ	0xFD8
  6009                           
  6010 ;; *************** function _ADC_Initialize *****************
  6011 ;; Defined at:
  6012 ;;		line 59 in file "mcc_generated_files/adc.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;		None
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;		None
  6017 ;; Return value:  Size  Location     Type
  6018 ;;		None               void
  6019 ;; Registers used:
  6020 ;;		wreg, status,2
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6026 ;;      Params:         0       0       0       0       0       0       0
  6027 ;;      Locals:         0       0       0       0       0       0       0
  6028 ;;      Temps:          0       0       0       0       0       0       0
  6029 ;;      Totals:         0       0       0       0       0       0       0
  6030 ;;Total ram usage:        0 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:    4
  6033 ;; This function calls:
  6034 ;;		Nothing
  6035 ;; This function is called by:
  6036 ;;		_SYSTEM_Initialize
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text33
  6041  001B24                     __ptext33:
  6042                           	opt stack 0
  6043  001B24                     _ADC_Initialize:
  6044                           	opt stack 25
  6045                           
  6046                           ;adc.c: 64: ADCON0 = 0x01;
  6047                           
  6048                           ;incstack = 0
  6049  001B24  0E01               	movlw	1
  6050  001B26  6EC2               	movwf	4034,c	;volatile
  6051                           
  6052                           ;adc.c: 67: ADCON1 = 0x80;
  6053  001B28  0E80               	movlw	128
  6054  001B2A  6EC1               	movwf	4033,c	;volatile
  6055                           
  6056                           ;adc.c: 70: ADCON2 = 0x12;
  6057  001B2C  0E12               	movlw	18
  6058  001B2E  6EC0               	movwf	4032,c	;volatile
  6059                           
  6060                           ;adc.c: 73: ADRESL = 0x00;
  6061  001B30  0E00               	movlw	0
  6062  001B32  6EC3               	movwf	4035,c	;volatile
  6063                           
  6064                           ;adc.c: 76: ADRESH = 0x00;
  6065  001B34  0E00               	movlw	0
  6066  001B36  6EC4               	movwf	4036,c	;volatile
  6067                           
  6068                           ;adc.c: 79: PIE1bits.ADIE = 1;
  6069  001B38  8C9D               	bsf	3997,6,c	;volatile
  6070  001B3A  0012               	return		;funcret
  6071  001B3C                     __end_of_ADC_Initialize:
  6072                           	opt stack 0
  6073                           tosu	equ	0xFFF
  6074                           tosh	equ	0xFFE
  6075                           tosl	equ	0xFFD
  6076                           pclath	equ	0xFFA
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           intcon2	equ	0xFF1
  6085                           postinc0	equ	0xFEE
  6086                           wreg	equ	0xFE8
  6087                           indf2	equ	0xFDF
  6088                           postinc2	equ	0xFDE
  6089                           postdec2	equ	0xFDD
  6090                           plusw2	equ	0xFDB
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8
  6094                           
  6095 ;; *************** function _PDUStartup *****************
  6096 ;; Defined at:
  6097 ;;		line 15 in file "PDU.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;		None
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;		None
  6102 ;; Return value:  Size  Location     Type
  6103 ;;		None               void
  6104 ;; Registers used:
  6105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6111 ;;      Params:         0       0       0       0       0       0       0
  6112 ;;      Locals:         0       0       0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0
  6114 ;;      Totals:         0       0       0       0       0       0       0
  6115 ;;Total ram usage:        0 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    8
  6118 ;; This function calls:
  6119 ;;		_ComputeStorageData
  6120 ;;		_EnableSlavePower
  6121 ;;		_StartUp595
  6122 ;;		_Update
  6123 ;; This function is called by:
  6124 ;;		_main
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text34
  6129  001708                     __ptext34:
  6130                           	opt stack 0
  6131  001708                     _PDUStartup:
  6132                           	opt stack 22
  6133                           
  6134                           ;PDU.c: 18: StartUp595();
  6135                           
  6136                           ;incstack = 0
  6137  001708  EC53  F00B         	call	_StartUp595	;wreg free
  6138                           
  6139                           ;PDU.c: 20: EnableSlavePower(SAS, ON);
  6140  00170C  0E00               	movlw	0
  6141  00170E  0101               	movlb	1	; () banked
  6142  001710  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6143  001712  0E01               	movlw	1
  6144  001714  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  6145  001716  0E03               	movlw	3
  6146  001718  EC49  F007         	call	_EnableSlavePower
  6147                           
  6148                           ;PDU.c: 21: EnableSlavePower(DDS, ON);
  6149  00171C  0E00               	movlw	0
  6150  00171E  0101               	movlb	1	; () banked
  6151  001720  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6152  001722  0E01               	movlw	1
  6153  001724  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  6154  001726  0E01               	movlw	1
  6155  001728  EC49  F007         	call	_EnableSlavePower
  6156                           
  6157                           ;PDU.c: 22: EnableSlavePower(MCS, ON);
  6158  00172C  0E00               	movlw	0
  6159  00172E  0101               	movlb	1	; () banked
  6160  001730  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6161  001732  0E01               	movlw	1
  6162  001734  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  6163  001736  0E02               	movlw	2
  6164  001738  EC49  F007         	call	_EnableSlavePower
  6165                           
  6166                           ;PDU.c: 23: EnableSlavePower(BMM, ON);
  6167  00173C  0E00               	movlw	0
  6168  00173E  0101               	movlb	1	; () banked
  6169  001740  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6170  001742  0E01               	movlw	1
  6171  001744  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  6172  001746  0E04               	movlw	4
  6173  001748  EC49  F007         	call	_EnableSlavePower
  6174                           
  6175                           ;PDU.c: 24: EnableSlavePower(TSS, ON);
  6176  00174C  0E00               	movlw	0
  6177  00174E  0101               	movlb	1	; () banked
  6178  001750  6FCF               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6179  001752  0E01               	movlw	1
  6180  001754  6FCE               	movwf	EnableSlavePower@onof& (0+255),b
  6181  001756  0E05               	movlw	5
  6182  001758  EC49  F007         	call	_EnableSlavePower
  6183                           
  6184                           ;PDU.c: 25: Update();
  6185  00175C  ECED  F00D         	call	_Update	;wreg free
  6186                           
  6187                           ;PDU.c: 27: ComputeStorageData();
  6188  001760  ECB9  F007         	call	_ComputeStorageData	;wreg free
  6189  001764  0012               	return		;funcret
  6190  001766                     __end_of_PDUStartup:
  6191                           	opt stack 0
  6192                           tosu	equ	0xFFF
  6193                           tosh	equ	0xFFE
  6194                           tosl	equ	0xFFD
  6195                           pclath	equ	0xFFA
  6196                           tblptru	equ	0xFF8
  6197                           tblptrh	equ	0xFF7
  6198                           tblptrl	equ	0xFF6
  6199                           tablat	equ	0xFF5
  6200                           prodh	equ	0xFF4
  6201                           prodl	equ	0xFF3
  6202                           intcon	equ	0xFF2
  6203                           intcon2	equ	0xFF1
  6204                           postinc0	equ	0xFEE
  6205                           wreg	equ	0xFE8
  6206                           indf2	equ	0xFDF
  6207                           postinc2	equ	0xFDE
  6208                           postdec2	equ	0xFDD
  6209                           plusw2	equ	0xFDB
  6210                           fsr2h	equ	0xFDA
  6211                           fsr2l	equ	0xFD9
  6212                           status	equ	0xFD8
  6213                           
  6214 ;; *************** function _Update *****************
  6215 ;; Defined at:
  6216 ;;		line 142 in file "PDU.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;		None
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;		None
  6221 ;; Return value:  Size  Location     Type
  6222 ;;		None               void
  6223 ;; Registers used:
  6224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6230 ;;      Params:         0       0       0       0       0       0       0
  6231 ;;      Locals:         0       0       0       0       0       0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0
  6233 ;;      Totals:         0       0       0       0       0       0       0
  6234 ;;Total ram usage:        0 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    6
  6237 ;; This function calls:
  6238 ;;		_writeRegisters
  6239 ;; This function is called by:
  6240 ;;		_processPowerRequest
  6241 ;;		_PDUStartup
  6242 ;;		_ReadCurrent
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text35
  6247  001BDA                     __ptext35:
  6248                           	opt stack 0
  6249  001BDA                     _Update:
  6250                           	opt stack 22
  6251                           
  6252                           ;PDU.c: 143: writeRegisters();
  6253                           
  6254                           ;incstack = 0
  6255  001BDA  ECAE  F009         	call	_writeRegisters	;wreg free
  6256  001BDE  0012               	return		;funcret
  6257  001BE0                     __end_of_Update:
  6258                           	opt stack 0
  6259                           tosu	equ	0xFFF
  6260                           tosh	equ	0xFFE
  6261                           tosl	equ	0xFFD
  6262                           pclath	equ	0xFFA
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           intcon2	equ	0xFF1
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           plusw2	equ	0xFDB
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _StartUp595 *****************
  6282 ;; Defined at:
  6283 ;;		line 10 in file "Shift595.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6297 ;;      Params:         0       0       0       0       0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    7
  6304 ;; This function calls:
  6305 ;;		_Clear595
  6306 ;;		_Delay
  6307 ;; This function is called by:
  6308 ;;		_PDUStartup
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text36
  6313  0016A6                     __ptext36:
  6314                           	opt stack 0
  6315  0016A6                     _StartUp595:
  6316                           	opt stack 22
  6317                           
  6318                           ;incstack = 0
  6319                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6320  0016A6  8A8C               	bsf	3980,5,c	;volatile
  6321                           
  6322                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6323  0016A8  808A               	bsf	3978,0,c	;volatile
  6324                           
  6325                           ;Shift595.c: 15: Delay(2);
  6326  0016AA  0E02               	movlw	2
  6327  0016AC  6E1B               	movwf	Delay@wait,c
  6328  0016AE  0E00               	movlw	0
  6329  0016B0  6E1C               	movwf	Delay@wait+1,c
  6330  0016B2  0E00               	movlw	0
  6331  0016B4  6E1D               	movwf	Delay@wait+2,c
  6332  0016B6  0E00               	movlw	0
  6333  0016B8  6E1E               	movwf	Delay@wait+3,c
  6334  0016BA  EC55  F00C         	call	_Delay	;wreg free
  6335                           
  6336                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6337  0016BE  9A8C               	bcf	3980,5,c	;volatile
  6338                           
  6339                           ;Shift595.c: 17: Delay(2);
  6340  0016C0  0E02               	movlw	2
  6341  0016C2  6E1B               	movwf	Delay@wait,c
  6342  0016C4  0E00               	movlw	0
  6343  0016C6  6E1C               	movwf	Delay@wait+1,c
  6344  0016C8  0E00               	movlw	0
  6345  0016CA  6E1D               	movwf	Delay@wait+2,c
  6346  0016CC  0E00               	movlw	0
  6347  0016CE  6E1E               	movwf	Delay@wait+3,c
  6348  0016D0  EC55  F00C         	call	_Delay	;wreg free
  6349                           
  6350                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6351  0016D4  908A               	bcf	3978,0,c	;volatile
  6352                           
  6353                           ;Shift595.c: 19: Delay(2);
  6354  0016D6  0E02               	movlw	2
  6355  0016D8  6E1B               	movwf	Delay@wait,c
  6356  0016DA  0E00               	movlw	0
  6357  0016DC  6E1C               	movwf	Delay@wait+1,c
  6358  0016DE  0E00               	movlw	0
  6359  0016E0  6E1D               	movwf	Delay@wait+2,c
  6360  0016E2  0E00               	movlw	0
  6361  0016E4  6E1E               	movwf	Delay@wait+3,c
  6362  0016E6  EC55  F00C         	call	_Delay	;wreg free
  6363                           
  6364                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6365  0016EA  8A8C               	bsf	3980,5,c	;volatile
  6366                           
  6367                           ;Shift595.c: 21: Delay(2);
  6368  0016EC  0E02               	movlw	2
  6369  0016EE  6E1B               	movwf	Delay@wait,c
  6370  0016F0  0E00               	movlw	0
  6371  0016F2  6E1C               	movwf	Delay@wait+1,c
  6372  0016F4  0E00               	movlw	0
  6373  0016F6  6E1D               	movwf	Delay@wait+2,c
  6374  0016F8  0E00               	movlw	0
  6375  0016FA  6E1E               	movwf	Delay@wait+3,c
  6376  0016FC  EC55  F00C         	call	_Delay	;wreg free
  6377                           
  6378                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6379  001700  808A               	bsf	3978,0,c	;volatile
  6380                           
  6381                           ;Shift595.c: 24: Clear595();
  6382  001702  ECB3  F00C         	call	_Clear595	;wreg free
  6383  001706  0012               	return		;funcret
  6384  001708                     __end_of_StartUp595:
  6385                           	opt stack 0
  6386                           tosu	equ	0xFFF
  6387                           tosh	equ	0xFFE
  6388                           tosl	equ	0xFFD
  6389                           pclath	equ	0xFFA
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           intcon	equ	0xFF2
  6397                           intcon2	equ	0xFF1
  6398                           postinc0	equ	0xFEE
  6399                           wreg	equ	0xFE8
  6400                           indf2	equ	0xFDF
  6401                           postinc2	equ	0xFDE
  6402                           postdec2	equ	0xFDD
  6403                           plusw2	equ	0xFDB
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _Clear595 *****************
  6409 ;; Defined at:
  6410 ;;		line 39 in file "Shift595.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;  i               2   35[COMRAM] int 
  6415 ;; Return value:  Size  Location     Type
  6416 ;;		None               void
  6417 ;; Registers used:
  6418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6424 ;;      Params:         0       0       0       0       0       0       0
  6425 ;;      Locals:         2       0       0       0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0
  6427 ;;      Totals:         2       0       0       0       0       0       0
  6428 ;;Total ram usage:        2 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    6
  6431 ;; This function calls:
  6432 ;;		_writeRegisters
  6433 ;; This function is called by:
  6434 ;;		_StartUp595
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text37
  6439  001966                     __ptext37:
  6440                           	opt stack 0
  6441  001966                     _Clear595:
  6442                           	opt stack 22
  6443                           
  6444                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6445                           
  6446                           ;incstack = 0
  6447  001966  0E00               	movlw	0
  6448  001968  6E25               	movwf	Clear595@i+1,c
  6449  00196A  0E17               	movlw	23
  6450  00196C  6E24               	movwf	Clear595@i,c
  6451  00196E                     l3603:
  6452  00196E  BE25               	btfsc	Clear595@i+1,7,c
  6453  001970  D011               	goto	l3613
  6454                           
  6455                           ;Shift595.c: 41: registers[i] = 0;
  6456  001972  90D8               	bcf	status,0,c
  6457  001974  3424               	rlcf	Clear595@i,w,c
  6458  001976  6ED9               	movwf	fsr2l,c
  6459  001978  3425               	rlcf	Clear595@i+1,w,c
  6460  00197A  6EDA               	movwf	fsr2h,c
  6461  00197C  0E60               	movlw	low _registers
  6462  00197E  26D9               	addwf	fsr2l,f,c
  6463  001980  0E00               	movlw	high _registers
  6464  001982  22DA               	addwfc	fsr2h,f,c
  6465  001984  0E00               	movlw	0
  6466  001986  6EDE               	movwf	postinc2,c
  6467  001988  0E00               	movlw	0
  6468  00198A  6EDD               	movwf	postdec2,c
  6469  00198C  0624               	decf	Clear595@i,f,c
  6470  00198E  A0D8               	btfss	status,0,c
  6471  001990  0625               	decf	Clear595@i+1,f,c
  6472  001992  D7ED               	goto	l3603
  6473  001994                     l3613:
  6474                           
  6475                           ;Shift595.c: 42: }
  6476                           ;Shift595.c: 44: writeRegisters();
  6477  001994  ECAE  F009         	call	_writeRegisters	;wreg free
  6478  001998  0012               	return		;funcret
  6479  00199A                     __end_of_Clear595:
  6480                           	opt stack 0
  6481                           tosu	equ	0xFFF
  6482                           tosh	equ	0xFFE
  6483                           tosl	equ	0xFFD
  6484                           pclath	equ	0xFFA
  6485                           tblptru	equ	0xFF8
  6486                           tblptrh	equ	0xFF7
  6487                           tblptrl	equ	0xFF6
  6488                           tablat	equ	0xFF5
  6489                           prodh	equ	0xFF4
  6490                           prodl	equ	0xFF3
  6491                           intcon	equ	0xFF2
  6492                           intcon2	equ	0xFF1
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           plusw2	equ	0xFDB
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _writeRegisters *****************
  6504 ;; Defined at:
  6505 ;;		line 50 in file "Shift595.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;		None
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  i               2    2[BANK1 ] int 
  6510 ;;  val             2    0[BANK1 ] int 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;		None               void
  6513 ;; Registers used:
  6514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6520 ;;      Params:         0       0       0       0       0       0       0
  6521 ;;      Locals:         0       0       4       0       0       0       0
  6522 ;;      Temps:          0       0       0       0       0       0       0
  6523 ;;      Totals:         0       0       4       0       0       0       0
  6524 ;;Total ram usage:        4 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    5
  6527 ;; This function calls:
  6528 ;;		_Delay
  6529 ;; This function is called by:
  6530 ;;		_Update
  6531 ;;		_Clear595
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text38
  6536  00135C                     __ptext38:
  6537                           	opt stack 0
  6538  00135C                     _writeRegisters:
  6539                           	opt stack 22
  6540                           
  6541                           ;Shift595.c: 51: int val = 0;
  6542                           
  6543                           ;incstack = 0
  6544  00135C  0E00               	movlw	0
  6545  00135E  0101               	movlb	1	; () banked
  6546  001360  6FCF               	movwf	(writeRegisters@val+1)& (0+255),b
  6547  001362  0E00               	movlw	0
  6548  001364  6FCE               	movwf	writeRegisters@val& (0+255),b
  6549                           
  6550                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6551  001366  0E00               	movlw	0
  6552  001368  0101               	movlb	1	; () banked
  6553  00136A  6FD1               	movwf	(writeRegisters@i+1)& (0+255),b
  6554  00136C  0E17               	movlw	23
  6555  00136E  6FD0               	movwf	writeRegisters@i& (0+255),b
  6556  001370                     l3475:
  6557                           
  6558                           ; BSR set to: 1
  6559  001370  0101               	movlb	1	; () banked
  6560  001372  BFD1               	btfsc	(writeRegisters@i+1)& (0+255),7,b
  6561  001374  D024               	goto	l651
  6562                           
  6563                           ; BSR set to: 1
  6564                           
  6565                           ; BSR set to: 1
  6566                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6567                           
  6568                           ; BSR set to: 1
  6569  001376  9E8C               	bcf	3980,7,c	;volatile
  6570                           
  6571                           ; BSR set to: 1
  6572                           ;Shift595.c: 55: val = registers[i];
  6573                           
  6574                           ; BSR set to: 1
  6575  001378  90D8               	bcf	status,0,c
  6576  00137A  0101               	movlb	1	; () banked
  6577  00137C  35D0               	rlcf	writeRegisters@i& (0+255),w,b
  6578  00137E  6ED9               	movwf	fsr2l,c
  6579  001380  0101               	movlb	1	; () banked
  6580  001382  35D1               	rlcf	(writeRegisters@i+1)& (0+255),w,b
  6581  001384  6EDA               	movwf	fsr2h,c
  6582  001386  0E60               	movlw	low _registers
  6583  001388  26D9               	addwf	fsr2l,f,c
  6584  00138A  0E00               	movlw	high _registers
  6585  00138C  22DA               	addwfc	fsr2h,f,c
  6586  00138E  CFDE F1CE          	movff	postinc2,writeRegisters@val
  6587  001392  CFDD F1CF          	movff	postdec2,writeRegisters@val+1
  6588                           
  6589                           ; BSR set to: 1
  6590                           ;Shift595.c: 56: if (val == 1) {
  6591  001396  0101               	movlb	1	; () banked
  6592  001398  05CE               	decf	writeRegisters@val& (0+255),w,b
  6593  00139A  0101               	movlb	1	; () banked
  6594  00139C  11CF               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6595  00139E  A4D8               	btfss	status,2,c
  6596  0013A0  D002               	goto	l3483
  6597                           
  6598                           ; BSR set to: 1
  6599                           
  6600                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6601  0013A2  888C               	bsf	3980,4,c	;volatile
  6602                           
  6603                           ; BSR set to: 1
  6604                           ;Shift595.c: 58: } else if (val == 0) {
  6605  0013A4  D006               	goto	l649
  6606  0013A6                     l3483:
  6607                           
  6608                           ; BSR set to: 1
  6609  0013A6  0101               	movlb	1	; () banked
  6610  0013A8  51CE               	movf	writeRegisters@val& (0+255),w,b
  6611  0013AA  0101               	movlb	1	; () banked
  6612  0013AC  11CF               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6613  0013AE  B4D8               	btfsc	status,2,c
  6614                           
  6615                           ; BSR set to: 1
  6616                           
  6617                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6618  0013B0  988C               	bcf	3980,4,c	;volatile
  6619  0013B2                     l649:
  6620                           
  6621                           ; BSR set to: 1
  6622  0013B2  8E8C               	bsf	3980,7,c	;volatile
  6623                           
  6624                           ; BSR set to: 1
  6625                           
  6626                           ; BSR set to: 1
  6627  0013B4  0101               	movlb	1	; () banked
  6628  0013B6  07D0               	decf	writeRegisters@i& (0+255),f,b
  6629  0013B8  A0D8               	btfss	status,0,c
  6630  0013BA  07D1               	decf	(writeRegisters@i+1)& (0+255),f,b
  6631  0013BC  D7D9               	goto	l3475
  6632  0013BE                     l651:
  6633                           
  6634                           ; BSR set to: 1
  6635  0013BE  9E8C               	bcf	3980,7,c	;volatile
  6636                           
  6637                           ; BSR set to: 1
  6638                           ;Shift595.c: 67: Delay(1);
  6639                           
  6640                           ; BSR set to: 1
  6641  0013C0  0E01               	movlw	1
  6642  0013C2  6E1B               	movwf	Delay@wait,c
  6643  0013C4  0E00               	movlw	0
  6644  0013C6  6E1C               	movwf	Delay@wait+1,c
  6645  0013C8  0E00               	movlw	0
  6646  0013CA  6E1D               	movwf	Delay@wait+2,c
  6647  0013CC  0E00               	movlw	0
  6648  0013CE  6E1E               	movwf	Delay@wait+3,c
  6649  0013D0  EC55  F00C         	call	_Delay	;wreg free
  6650                           
  6651                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6652  0013D4  8C8C               	bsf	3980,6,c	;volatile
  6653                           
  6654                           ;Shift595.c: 69: Delay(1);
  6655  0013D6  0E01               	movlw	1
  6656  0013D8  6E1B               	movwf	Delay@wait,c
  6657  0013DA  0E00               	movlw	0
  6658  0013DC  6E1C               	movwf	Delay@wait+1,c
  6659  0013DE  0E00               	movlw	0
  6660  0013E0  6E1D               	movwf	Delay@wait+2,c
  6661  0013E2  0E00               	movlw	0
  6662  0013E4  6E1E               	movwf	Delay@wait+3,c
  6663  0013E6  EC55  F00C         	call	_Delay	;wreg free
  6664                           
  6665                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6666  0013EA  9C8C               	bcf	3980,6,c	;volatile
  6667  0013EC  0012               	return	
  6668  0013EE                     __end_of_writeRegisters:
  6669                           	opt stack 0
  6670                           tosu	equ	0xFFF
  6671                           tosh	equ	0xFFE
  6672                           tosl	equ	0xFFD
  6673                           pclath	equ	0xFFA
  6674                           tblptru	equ	0xFF8
  6675                           tblptrh	equ	0xFF7
  6676                           tblptrl	equ	0xFF6
  6677                           tablat	equ	0xFF5
  6678                           prodh	equ	0xFF4
  6679                           prodl	equ	0xFF3
  6680                           intcon	equ	0xFF2
  6681                           intcon2	equ	0xFF1
  6682                           postinc0	equ	0xFEE
  6683                           wreg	equ	0xFE8
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           postdec2	equ	0xFDD
  6687                           plusw2	equ	0xFDB
  6688                           fsr2h	equ	0xFDA
  6689                           fsr2l	equ	0xFD9
  6690                           status	equ	0xFD8
  6691                           
  6692 ;; *************** function _Delay *****************
  6693 ;; Defined at:
  6694 ;;		line 9 in file "Functions.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  wait            4   26[COMRAM] long 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;  i               4   31[COMRAM] long 
  6699 ;; Return value:  Size  Location     Type
  6700 ;;		None               void
  6701 ;; Registers used:
  6702 ;;		wreg, status,2, status,0
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6708 ;;      Params:         4       0       0       0       0       0       0
  6709 ;;      Locals:         4       0       0       0       0       0       0
  6710 ;;      Temps:          1       0       0       0       0       0       0
  6711 ;;      Totals:         9       0       0       0       0       0       0
  6712 ;;Total ram usage:        9 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; Hardware stack levels required when called:    4
  6715 ;; This function calls:
  6716 ;;		Nothing
  6717 ;; This function is called by:
  6718 ;;		_respondECU
  6719 ;;		_StartUp595
  6720 ;;		_writeRegisters
  6721 ;; This function uses a non-reentrant model
  6722 ;;
  6723                           
  6724                           	psect	text39
  6725  0018AA                     __ptext39:
  6726                           	opt stack 0
  6727  0018AA                     _Delay:
  6728                           	opt stack 24
  6729                           
  6730                           ;Functions.c: 10: long int i = 0;
  6731                           
  6732                           ;incstack = 0
  6733  0018AA  0E00               	movlw	0
  6734  0018AC  6E20               	movwf	Delay@i,c
  6735  0018AE  0E00               	movlw	0
  6736  0018B0  6E21               	movwf	Delay@i+1,c
  6737  0018B2  0E00               	movlw	0
  6738  0018B4  6E22               	movwf	Delay@i+2,c
  6739  0018B6  0E00               	movlw	0
  6740  0018B8  6E23               	movwf	Delay@i+3,c
  6741                           
  6742                           ;Functions.c: 11: for (; wait > i; i++) {
  6743  0018BA  D00D               	goto	l3335
  6744  0018BC                     l3331:
  6745                           
  6746                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  6747  0018BC  0E03               	movlw	3
  6748  0018BE  6E1F               	movwf	??_Delay& (0+255),c
  6749  0018C0  0E98               	movlw	152
  6750  0018C2                     u3917:
  6751  0018C2  2EE8               	decfsz	wreg,f,c
  6752  0018C4  D7FE               	goto	u3917
  6753  0018C6  2E1F               	decfsz	??_Delay& (0+255),f,c
  6754  0018C8  D7FC               	goto	u3917
  6755  0018CA  0E01               	movlw	1
  6756  0018CC  2620               	addwf	Delay@i,f,c
  6757  0018CE  0E00               	movlw	0
  6758  0018D0  2221               	addwfc	Delay@i+1,f,c
  6759  0018D2  2222               	addwfc	Delay@i+2,f,c
  6760  0018D4  2223               	addwfc	Delay@i+3,f,c
  6761  0018D6                     l3335:
  6762  0018D6  501B               	movf	Delay@wait,w,c
  6763  0018D8  5C20               	subwf	Delay@i,w,c
  6764  0018DA  501C               	movf	Delay@wait+1,w,c
  6765  0018DC  5821               	subwfb	Delay@i+1,w,c
  6766  0018DE  501D               	movf	Delay@wait+2,w,c
  6767  0018E0  5822               	subwfb	Delay@i+2,w,c
  6768  0018E2  5023               	movf	Delay@i+3,w,c
  6769  0018E4  0A80               	xorlw	128
  6770  0018E6  6E1F               	movwf	??_Delay& (0+255),c
  6771  0018E8  501E               	movf	Delay@wait+3,w,c
  6772  0018EA  0A80               	xorlw	128
  6773  0018EC  581F               	subwfb	??_Delay& (0+255),w,c
  6774  0018EE  B0D8               	btfsc	status,0,c
  6775  0018F0  0012               	return	
  6776  0018F2  D7E4               	goto	l3331
  6777  0018F4                     __end_of_Delay:
  6778                           	opt stack 0
  6779                           tosu	equ	0xFFF
  6780                           tosh	equ	0xFFE
  6781                           tosl	equ	0xFFD
  6782                           pclath	equ	0xFFA
  6783                           tblptru	equ	0xFF8
  6784                           tblptrh	equ	0xFF7
  6785                           tblptrl	equ	0xFF6
  6786                           tablat	equ	0xFF5
  6787                           prodh	equ	0xFF4
  6788                           prodl	equ	0xFF3
  6789                           intcon	equ	0xFF2
  6790                           intcon2	equ	0xFF1
  6791                           postinc0	equ	0xFEE
  6792                           wreg	equ	0xFE8
  6793                           indf2	equ	0xFDF
  6794                           postinc2	equ	0xFDE
  6795                           postdec2	equ	0xFDD
  6796                           plusw2	equ	0xFDB
  6797                           fsr2h	equ	0xFDA
  6798                           fsr2l	equ	0xFD9
  6799                           status	equ	0xFD8
  6800                           
  6801 ;; *************** function _EnableSlavePower *****************
  6802 ;; Defined at:
  6803 ;;		line 32 in file "PDU.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;  slave           1    wreg     enum E5
  6806 ;;  onof            2    0[BANK1 ] int 
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  slave           1   36[COMRAM] enum E5
  6809 ;; Return value:  Size  Location     Type
  6810 ;;		None               void
  6811 ;; Registers used:
  6812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6818 ;;      Params:         0       0       2       0       0       0       0
  6819 ;;      Locals:         1       0       0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0
  6821 ;;      Totals:         1       0       2       0       0       0       0
  6822 ;;Total ram usage:        3 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    5
  6825 ;; This function calls:
  6826 ;;		_SetPin595
  6827 ;; This function is called by:
  6828 ;;		_processPowerRequest
  6829 ;;		_PDUStartup
  6830 ;;		_FuseSystem
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text40
  6835  000E92                     __ptext40:
  6836                           	opt stack 0
  6837  000E92                     _EnableSlavePower:
  6838                           	opt stack 23
  6839                           
  6840                           ;incstack = 0
  6841                           ;EnableSlavePower@slave stored from wreg
  6842  000E92  6E25               	movwf	EnableSlavePower@slave,c
  6843                           
  6844                           ;PDU.c: 33: switch (slave) {
  6845  000E94  D05A               	goto	l3533
  6846  000E96                     l3519:
  6847                           
  6848                           ;PDU.c: 35: SetPin595(2, 1, onof);
  6849  000E96  0E00               	movlw	0
  6850  000E98  6E1C               	movwf	SetPin595@Reg+1,c
  6851  000E9A  0E02               	movlw	2
  6852  000E9C  6E1B               	movwf	SetPin595@Reg,c
  6853  000E9E  0E00               	movlw	0
  6854  000EA0  6E1E               	movwf	SetPin595@pin+1,c
  6855  000EA2  0E01               	movlw	1
  6856  000EA4  6E1D               	movwf	SetPin595@pin,c
  6857  000EA6  C1CE  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6858  000EAA  C1CF  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6859  000EAE  EC09  F00C         	call	_SetPin595	;wreg free
  6860                           
  6861                           ;PDU.c: 36: break;
  6862  000EB2  0012               	return	
  6863  000EB4                     l3521:
  6864                           
  6865                           ;PDU.c: 38: SetPin595(3, 1, onof);
  6866  000EB4  0E00               	movlw	0
  6867  000EB6  6E1C               	movwf	SetPin595@Reg+1,c
  6868  000EB8  0E03               	movlw	3
  6869  000EBA  6E1B               	movwf	SetPin595@Reg,c
  6870  000EBC  0E00               	movlw	0
  6871  000EBE  6E1E               	movwf	SetPin595@pin+1,c
  6872  000EC0  0E01               	movlw	1
  6873  000EC2  6E1D               	movwf	SetPin595@pin,c
  6874  000EC4  C1CE  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6875  000EC8  C1CF  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6876  000ECC  EC09  F00C         	call	_SetPin595	;wreg free
  6877                           
  6878                           ;PDU.c: 39: break;
  6879  000ED0  0012               	return	
  6880  000ED2                     l3523:
  6881                           
  6882                           ;PDU.c: 41: SetPin595(2, 6, onof);
  6883  000ED2  0E00               	movlw	0
  6884  000ED4  6E1C               	movwf	SetPin595@Reg+1,c
  6885  000ED6  0E02               	movlw	2
  6886  000ED8  6E1B               	movwf	SetPin595@Reg,c
  6887  000EDA  0E00               	movlw	0
  6888  000EDC  6E1E               	movwf	SetPin595@pin+1,c
  6889  000EDE  0E06               	movlw	6
  6890  000EE0  6E1D               	movwf	SetPin595@pin,c
  6891  000EE2  C1CE  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6892  000EE6  C1CF  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6893  000EEA  EC09  F00C         	call	_SetPin595	;wreg free
  6894                           
  6895                           ;PDU.c: 42: break;
  6896  000EEE  0012               	return	
  6897  000EF0                     l3525:
  6898                           
  6899                           ;PDU.c: 44: SetPin595(3, 6, onof);
  6900  000EF0  0E00               	movlw	0
  6901  000EF2  6E1C               	movwf	SetPin595@Reg+1,c
  6902  000EF4  0E03               	movlw	3
  6903  000EF6  6E1B               	movwf	SetPin595@Reg,c
  6904  000EF8  0E00               	movlw	0
  6905  000EFA  6E1E               	movwf	SetPin595@pin+1,c
  6906  000EFC  0E06               	movlw	6
  6907  000EFE  6E1D               	movwf	SetPin595@pin,c
  6908  000F00  C1CE  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6909  000F04  C1CF  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6910  000F08  EC09  F00C         	call	_SetPin595	;wreg free
  6911                           
  6912                           ;PDU.c: 45: break;
  6913  000F0C  0012               	return	
  6914  000F0E                     l3527:
  6915                           
  6916                           ;PDU.c: 47: SetPin595(1, 1, onof);
  6917  000F0E  0E00               	movlw	0
  6918  000F10  6E1C               	movwf	SetPin595@Reg+1,c
  6919  000F12  0E01               	movlw	1
  6920  000F14  6E1B               	movwf	SetPin595@Reg,c
  6921  000F16  0E00               	movlw	0
  6922  000F18  6E1E               	movwf	SetPin595@pin+1,c
  6923  000F1A  0E01               	movlw	1
  6924  000F1C  6E1D               	movwf	SetPin595@pin,c
  6925  000F1E  C1CE  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6926  000F22  C1CF  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6927  000F26  EC09  F00C         	call	_SetPin595	;wreg free
  6928                           
  6929                           ;PDU.c: 48: break;
  6930  000F2A  0012               	return	
  6931  000F2C                     l3529:
  6932                           
  6933                           ;PDU.c: 50: SetPin595(1, 6, onof);
  6934  000F2C  0E00               	movlw	0
  6935  000F2E  6E1C               	movwf	SetPin595@Reg+1,c
  6936  000F30  0E01               	movlw	1
  6937  000F32  6E1B               	movwf	SetPin595@Reg,c
  6938  000F34  0E00               	movlw	0
  6939  000F36  6E1E               	movwf	SetPin595@pin+1,c
  6940  000F38  0E06               	movlw	6
  6941  000F3A  6E1D               	movwf	SetPin595@pin,c
  6942  000F3C  C1CE  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6943  000F40  C1CF  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6944  000F44  EC09  F00C         	call	_SetPin595	;wreg free
  6945                           
  6946                           ;PDU.c: 52: }
  6947                           
  6948                           ;PDU.c: 51: break;
  6949  000F48  0012               	return	
  6950  000F4A                     l3533:
  6951  000F4A  5025               	movf	EnableSlavePower@slave,w,c
  6952                           
  6953                           ; Switch size 1, requested type "space"
  6954                           ; Number of cases is 6, Range of values is 1 to 6
  6955                           ; switch strategies available:
  6956                           ; Name         Instructions Cycles
  6957                           ; simple_byte           19    10 (average)
  6958                           ;	Chosen strategy is simple_byte
  6959  000F4C  0A01               	xorlw	1	; case 1
  6960  000F4E  B4D8               	btfsc	status,2,c
  6961  000F50  D7CF               	goto	l3525
  6962  000F52  0A03               	xorlw	3	; case 2
  6963  000F54  B4D8               	btfsc	status,2,c
  6964  000F56  D7BD               	goto	l3523
  6965  000F58  0A01               	xorlw	1	; case 3
  6966  000F5A  B4D8               	btfsc	status,2,c
  6967  000F5C  D79C               	goto	l3519
  6968  000F5E  0A07               	xorlw	7	; case 4
  6969  000F60  B4D8               	btfsc	status,2,c
  6970  000F62  D7A8               	goto	l3521
  6971  000F64  0A01               	xorlw	1	; case 5
  6972  000F66  B4D8               	btfsc	status,2,c
  6973  000F68  D7D2               	goto	l3527
  6974  000F6A  0A03               	xorlw	3	; case 6
  6975  000F6C  A4D8               	btfss	status,2,c
  6976  000F6E  0012               	return	
  6977  000F70  D7DD               	goto	l3529
  6978  000F72                     __end_of_EnableSlavePower:
  6979                           	opt stack 0
  6980                           tosu	equ	0xFFF
  6981                           tosh	equ	0xFFE
  6982                           tosl	equ	0xFFD
  6983                           pclath	equ	0xFFA
  6984                           tblptru	equ	0xFF8
  6985                           tblptrh	equ	0xFF7
  6986                           tblptrl	equ	0xFF6
  6987                           tablat	equ	0xFF5
  6988                           prodh	equ	0xFF4
  6989                           prodl	equ	0xFF3
  6990                           intcon	equ	0xFF2
  6991                           intcon2	equ	0xFF1
  6992                           postinc0	equ	0xFEE
  6993                           wreg	equ	0xFE8
  6994                           indf2	equ	0xFDF
  6995                           postinc2	equ	0xFDE
  6996                           postdec2	equ	0xFDD
  6997                           plusw2	equ	0xFDB
  6998                           fsr2h	equ	0xFDA
  6999                           fsr2l	equ	0xFD9
  7000                           status	equ	0xFD8
  7001                           
  7002 ;; *************** function _SetPin595 *****************
  7003 ;; Defined at:
  7004 ;;		line 32 in file "Shift595.c"
  7005 ;; Parameters:    Size  Location     Type
  7006 ;;  Reg             2   26[COMRAM] int 
  7007 ;;  pin             2   28[COMRAM] int 
  7008 ;;  value           2   30[COMRAM] int 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         6       0       0       0       0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0       0
  7022 ;;      Temps:          4       0       0       0       0       0       0
  7023 ;;      Totals:        10       0       0       0       0       0       0
  7024 ;;Total ram usage:       10 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    4
  7027 ;; This function calls:
  7028 ;;		Nothing
  7029 ;; This function is called by:
  7030 ;;		_EnableSlavePower
  7031 ;;		_ReadCurrent
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           	psect	text41
  7036  001812                     __ptext41:
  7037                           	opt stack 0
  7038  001812                     _SetPin595:
  7039                           	opt stack 23
  7040                           
  7041                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7042                           
  7043                           ;incstack = 0
  7044  001812  0EF0               	movlw	240
  7045  001814  6E21               	movwf	??_SetPin595& (0+255),c
  7046  001816  0EFF               	movlw	255
  7047  001818  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  7048  00181A  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  7049  00181E  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  7050  001822  90D8               	bcf	status,0,c
  7051  001824  3623               	rlcf	??_SetPin595+2,f,c
  7052  001826  3624               	rlcf	??_SetPin595+3,f,c
  7053  001828  90D8               	bcf	status,0,c
  7054  00182A  3623               	rlcf	??_SetPin595+2,f,c
  7055  00182C  3624               	rlcf	??_SetPin595+3,f,c
  7056  00182E  90D8               	bcf	status,0,c
  7057  001830  3623               	rlcf	??_SetPin595+2,f,c
  7058  001832  3624               	rlcf	??_SetPin595+3,f,c
  7059  001834  501D               	movf	SetPin595@pin,w,c
  7060  001836  2623               	addwf	??_SetPin595+2,f,c
  7061  001838  501E               	movf	SetPin595@pin+1,w,c
  7062  00183A  2224               	addwfc	??_SetPin595+3,f,c
  7063  00183C  90D8               	bcf	status,0,c
  7064  00183E  3623               	rlcf	??_SetPin595+2,f,c
  7065  001840  3624               	rlcf	??_SetPin595+3,f,c
  7066  001842  5021               	movf	??_SetPin595,w,c
  7067  001844  2623               	addwf	??_SetPin595+2,f,c
  7068  001846  5022               	movf	??_SetPin595+1,w,c
  7069  001848  2224               	addwfc	??_SetPin595+3,f,c
  7070  00184A  0E60               	movlw	low _registers
  7071  00184C  2423               	addwf	??_SetPin595+2,w,c
  7072  00184E  6ED9               	movwf	fsr2l,c
  7073  001850  0E00               	movlw	high _registers
  7074  001852  2024               	addwfc	??_SetPin595+3,w,c
  7075  001854  6EDA               	movwf	fsr2h,c
  7076  001856  C01F  FFDE         	movff	SetPin595@value,postinc2
  7077  00185A  C020  FFDD         	movff	SetPin595@value+1,postdec2
  7078  00185E  0012               	return		;funcret
  7079  001860                     __end_of_SetPin595:
  7080                           	opt stack 0
  7081                           tosu	equ	0xFFF
  7082                           tosh	equ	0xFFE
  7083                           tosl	equ	0xFFD
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           intcon	equ	0xFF2
  7092                           intcon2	equ	0xFF1
  7093                           postinc0	equ	0xFEE
  7094                           wreg	equ	0xFE8
  7095                           indf2	equ	0xFDF
  7096                           postinc2	equ	0xFDE
  7097                           postdec2	equ	0xFDD
  7098                           plusw2	equ	0xFDB
  7099                           fsr2h	equ	0xFDA
  7100                           fsr2l	equ	0xFD9
  7101                           status	equ	0xFD8
  7102                           
  7103 ;; *************** function _ComputeStorageData *****************
  7104 ;; Defined at:
  7105 ;;		line 94 in file "PDU.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;		None
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;  i               2   29[COMRAM] int 
  7110 ;; Return value:  Size  Location     Type
  7111 ;;		None               void
  7112 ;; Registers used:
  7113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7119 ;;      Params:         0       0       0       0       0       0       0
  7120 ;;      Locals:         2       0       0       0       0       0       0
  7121 ;;      Temps:          2       0       0       0       0       0       0
  7122 ;;      Totals:         4       0       0       0       0       0       0
  7123 ;;Total ram usage:        4 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:    5
  7126 ;; This function calls:
  7127 ;;		_DATAEE_ReadByte
  7128 ;; This function is called by:
  7129 ;;		_PDUStartup
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           	psect	text42
  7134  000F72                     __ptext42:
  7135                           	opt stack 0
  7136  000F72                     _ComputeStorageData:
  7137                           	opt stack 24
  7138                           
  7139                           ;PDU.c: 95: for (int i = 0; i < 12; i++) {
  7140                           
  7141                           ;incstack = 0
  7142  000F72  0E00               	movlw	0
  7143  000F74  6E1F               	movwf	ComputeStorageData@i+1,c
  7144  000F76  0E00               	movlw	0
  7145  000F78  6E1E               	movwf	ComputeStorageData@i,c
  7146  000F7A                     l3091:
  7147  000F7A  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7148  000F7C  D006               	goto	l3095
  7149  000F7E  501F               	movf	ComputeStorageData@i+1,w,c
  7150  000F80  E111               	bnz	l3101
  7151  000F82  0E0C               	movlw	12
  7152  000F84  5C1E               	subwf	ComputeStorageData@i,w,c
  7153  000F86  B0D8               	btfsc	status,0,c
  7154  000F88  D00D               	goto	l3101
  7155  000F8A                     l3095:
  7156                           
  7157                           ;PDU.c: 96: data[i] = DATAEE_ReadByte(i);
  7158  000F8A  0EB4               	movlw	low _data
  7159  000F8C  241E               	addwf	ComputeStorageData@i,w,c
  7160  000F8E  6ED9               	movwf	fsr2l,c
  7161  000F90  0E00               	movlw	high _data
  7162  000F92  201F               	addwfc	ComputeStorageData@i+1,w,c
  7163  000F94  6EDA               	movwf	fsr2h,c
  7164  000F96  501E               	movf	ComputeStorageData@i,w,c
  7165  000F98  ECC9  F00D         	call	_DATAEE_ReadByte
  7166  000F9C  6EDF               	movwf	indf2,c
  7167  000F9E  4A1E               	infsnz	ComputeStorageData@i,f,c
  7168  000FA0  2A1F               	incf	ComputeStorageData@i+1,f,c
  7169  000FA2  D7EB               	goto	l3091
  7170  000FA4                     l3101:
  7171                           
  7172                           ;PDU.c: 97: }
  7173                           ;PDU.c: 98: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7174  000FA4  0100               	movlb	0	; () banked
  7175  000FA6  51B5               	movf	(_data+1)& (0+255),w,b
  7176  000FA8  C0B4  F01C         	movff	_data,??_ComputeStorageData
  7177  000FAC  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7178  000FAE  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7179  000FB2  6A1C               	clrf	??_ComputeStorageData,c
  7180  000FB4  101C               	iorwf	??_ComputeStorageData,w,c
  7181  000FB6  0100               	movlb	0	; () banked
  7182  000FB8  6FA8               	movwf	_Currentcomp& (0+255),b
  7183  000FBA  501D               	movf	??_ComputeStorageData+1,w,c
  7184  000FBC  0100               	movlb	0	; () banked
  7185  000FBE  6FA9               	movwf	(_Currentcomp+1)& (0+255),b
  7186                           
  7187                           ;PDU.c: 99: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7188  000FC0  0100               	movlb	0	; () banked
  7189  000FC2  51B7               	movf	(_data+3)& (0+255),w,b
  7190  000FC4  C0B6  F01C         	movff	_data+2,??_ComputeStorageData
  7191  000FC8  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7192  000FCA  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7193  000FCE  6A1C               	clrf	??_ComputeStorageData,c
  7194  000FD0  101C               	iorwf	??_ComputeStorageData,w,c
  7195  000FD2  0100               	movlb	0	; () banked
  7196  000FD4  6FAA               	movwf	(_Currentcomp+2)& (0+255),b
  7197  000FD6  501D               	movf	??_ComputeStorageData+1,w,c
  7198  000FD8  0100               	movlb	0	; () banked
  7199  000FDA  6FAB               	movwf	(_Currentcomp+3)& (0+255),b
  7200                           
  7201                           ;PDU.c: 100: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7202  000FDC  0100               	movlb	0	; () banked
  7203  000FDE  51B9               	movf	(_data+5)& (0+255),w,b
  7204  000FE0  C0B8  F01C         	movff	_data+4,??_ComputeStorageData
  7205  000FE4  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7206  000FE6  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7207  000FEA  6A1C               	clrf	??_ComputeStorageData,c
  7208  000FEC  101C               	iorwf	??_ComputeStorageData,w,c
  7209  000FEE  0100               	movlb	0	; () banked
  7210  000FF0  6FAC               	movwf	(_Currentcomp+4)& (0+255),b
  7211  000FF2  501D               	movf	??_ComputeStorageData+1,w,c
  7212  000FF4  0100               	movlb	0	; () banked
  7213  000FF6  6FAD               	movwf	(_Currentcomp+5)& (0+255),b
  7214                           
  7215                           ;PDU.c: 101: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7216  000FF8  0100               	movlb	0	; () banked
  7217  000FFA  51BB               	movf	(_data+7)& (0+255),w,b
  7218  000FFC  C0BA  F01C         	movff	_data+6,??_ComputeStorageData
  7219  001000  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7220  001002  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7221  001006  6A1C               	clrf	??_ComputeStorageData,c
  7222  001008  101C               	iorwf	??_ComputeStorageData,w,c
  7223  00100A  0100               	movlb	0	; () banked
  7224  00100C  6FAE               	movwf	(_Currentcomp+6)& (0+255),b
  7225  00100E  501D               	movf	??_ComputeStorageData+1,w,c
  7226  001010  0100               	movlb	0	; () banked
  7227  001012  6FAF               	movwf	(_Currentcomp+7)& (0+255),b
  7228                           
  7229                           ;PDU.c: 102: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7230  001014  0100               	movlb	0	; () banked
  7231  001016  51BD               	movf	(_data+9)& (0+255),w,b
  7232  001018  C0BC  F01C         	movff	_data+8,??_ComputeStorageData
  7233  00101C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7234  00101E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7235  001022  6A1C               	clrf	??_ComputeStorageData,c
  7236  001024  101C               	iorwf	??_ComputeStorageData,w,c
  7237  001026  0100               	movlb	0	; () banked
  7238  001028  6FB0               	movwf	(_Currentcomp+8)& (0+255),b
  7239  00102A  501D               	movf	??_ComputeStorageData+1,w,c
  7240  00102C  0100               	movlb	0	; () banked
  7241  00102E  6FB1               	movwf	(_Currentcomp+9)& (0+255),b
  7242                           
  7243                           ;PDU.c: 103: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7244  001030  0100               	movlb	0	; () banked
  7245  001032  51BF               	movf	(_data+11)& (0+255),w,b
  7246  001034  C0BE  F01C         	movff	_data+10,??_ComputeStorageData
  7247  001038  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7248  00103A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7249  00103E  6A1C               	clrf	??_ComputeStorageData,c
  7250  001040  101C               	iorwf	??_ComputeStorageData,w,c
  7251  001042  0100               	movlb	0	; () banked
  7252  001044  6FB2               	movwf	(_Currentcomp+10)& (0+255),b
  7253  001046  501D               	movf	??_ComputeStorageData+1,w,c
  7254  001048  0100               	movlb	0	; () banked
  7255  00104A  6FB3               	movwf	(_Currentcomp+11)& (0+255),b
  7256                           
  7257                           ; BSR set to: 0
  7258  00104C  0012               	return		;funcret
  7259  00104E                     __end_of_ComputeStorageData:
  7260                           	opt stack 0
  7261                           tosu	equ	0xFFF
  7262                           tosh	equ	0xFFE
  7263                           tosl	equ	0xFFD
  7264                           pclath	equ	0xFFA
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           prodh	equ	0xFF4
  7270                           prodl	equ	0xFF3
  7271                           intcon	equ	0xFF2
  7272                           intcon2	equ	0xFF1
  7273                           postinc0	equ	0xFEE
  7274                           wreg	equ	0xFE8
  7275                           indf2	equ	0xFDF
  7276                           postinc2	equ	0xFDE
  7277                           postdec2	equ	0xFDD
  7278                           plusw2	equ	0xFDB
  7279                           fsr2h	equ	0xFDA
  7280                           fsr2l	equ	0xFD9
  7281                           status	equ	0xFD8
  7282                           
  7283 ;; *************** function _DATAEE_ReadByte *****************
  7284 ;; Defined at:
  7285 ;;		line 143 in file "mcc_generated_files/memory.c"
  7286 ;; Parameters:    Size  Location     Type
  7287 ;;  bAdd            1    wreg     unsigned char 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;  bAdd            1   26[COMRAM] unsigned char 
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      unsigned char 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7299 ;;      Params:         0       0       0       0       0       0       0
  7300 ;;      Locals:         1       0       0       0       0       0       0
  7301 ;;      Temps:          0       0       0       0       0       0       0
  7302 ;;      Totals:         1       0       0       0       0       0       0
  7303 ;;Total ram usage:        1 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    4
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		_ComputeStorageData
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text43
  7314  001B92                     __ptext43:
  7315                           	opt stack 0
  7316  001B92                     _DATAEE_ReadByte:
  7317                           	opt stack 24
  7318                           
  7319                           ; BSR set to: 0
  7320                           ;incstack = 0
  7321                           ;DATAEE_ReadByte@bAdd stored from wreg
  7322  001B92  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7323                           
  7324                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7325  001B94  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7326                           
  7327                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7328  001B98  9CA6               	bcf	4006,6,c	;volatile
  7329                           
  7330                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7331  001B9A  9EA6               	bcf	4006,7,c	;volatile
  7332                           
  7333                           ;memory.c: 148: EECON1bits.RD = 1;
  7334  001B9C  80A6               	bsf	4006,0,c	;volatile
  7335                           
  7336                           ;memory.c: 149: __nop();
  7337  001B9E  F000               	nop	
  7338                           
  7339                           ;memory.c: 150: __nop();
  7340  001BA0  F000               	nop	
  7341                           
  7342                           ;memory.c: 152: return (EEDATA);
  7343  001BA2  50A8               	movf	4008,w,c	;volatile
  7344  001BA4  0012               	return	
  7345  001BA6                     __end_of_DATAEE_ReadByte:
  7346                           	opt stack 0
  7347                           tosu	equ	0xFFF
  7348                           tosh	equ	0xFFE
  7349                           tosl	equ	0xFFD
  7350                           pclath	equ	0xFFA
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodh	equ	0xFF4
  7356                           prodl	equ	0xFF3
  7357                           intcon	equ	0xFF2
  7358                           intcon2	equ	0xFF1
  7359                           postinc0	equ	0xFEE
  7360                           wreg	equ	0xFE8
  7361                           indf2	equ	0xFDF
  7362                           postinc2	equ	0xFDE
  7363                           postdec2	equ	0xFDD
  7364                           plusw2	equ	0xFDB
  7365                           fsr2h	equ	0xFDA
  7366                           fsr2l	equ	0xFD9
  7367                           status	equ	0xFD8
  7368                           
  7369 ;; *************** function _INTERRUPT_InterruptManager *****************
  7370 ;; Defined at:
  7371 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7372 ;; Parameters:    Size  Location     Type
  7373 ;;		None
  7374 ;; Auto vars:     Size  Location     Type
  7375 ;;		None
  7376 ;; Return value:  Size  Location     Type
  7377 ;;		None               void
  7378 ;; Registers used:
  7379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7380 ;; Tracked objects:
  7381 ;;		On entry : 0/0
  7382 ;;		On exit  : 0/0
  7383 ;;		Unchanged: 0/0
  7384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7385 ;;      Params:         0       0       0       0       0       0       0
  7386 ;;      Locals:         0       0       0       0       0       0       0
  7387 ;;      Temps:         14       0       0       0       0       0       0
  7388 ;;      Totals:        14       0       0       0       0       0       0
  7389 ;;Total ram usage:       14 bytes
  7390 ;; Hardware stack levels used:    1
  7391 ;; Hardware stack levels required when called:    3
  7392 ;; This function calls:
  7393 ;;		_ADC_ISR
  7394 ;;		_EUSART1_Receive_ISR
  7395 ;;		_EUSART1_Transmit_ISR
  7396 ;; This function is called by:
  7397 ;;		Interrupt level 2
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400                           
  7401                           	psect	intcode
  7402  000008                     __pintcode:
  7403                           	opt stack 0
  7404  000008                     _INTERRUPT_InterruptManager:
  7405                           	opt stack 21
  7406                           
  7407                           ;incstack = 0
  7408  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7409  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7410  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7411  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7412  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7413  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7414  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7415  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7416  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7417  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7418  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7419  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7420  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7421  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7422  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7423                           
  7424                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7425  000042  BA9D               	btfsc	3997,5,c	;volatile
  7426  000044  AA9E               	btfss	3998,5,c	;volatile
  7427  000046  D003               	goto	i2l63
  7428                           
  7429                           ;interrupt_manager.c: 71: {
  7430                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7431  000048  EC83  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  7432                           
  7433                           ;interrupt_manager.c: 73: }
  7434  00004C  D00B               	goto	i2l69
  7435  00004E                     i2l63:
  7436                           
  7437                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7438  00004E  B89D               	btfsc	3997,4,c	;volatile
  7439  000050  A89E               	btfss	3998,4,c	;volatile
  7440  000052  D003               	goto	i2l65
  7441                           
  7442                           ;interrupt_manager.c: 75: {
  7443                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7444  000054  ECCD  F00C         	call	_EUSART1_Transmit_ISR	;wreg free
  7445                           
  7446                           ;interrupt_manager.c: 77: }
  7447  000058  D005               	goto	i2l69
  7448  00005A                     i2l65:
  7449                           
  7450                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7451  00005A  BC9D               	btfsc	3997,6,c	;volatile
  7452  00005C  AC9E               	btfss	3998,6,c	;volatile
  7453  00005E  D002               	goto	i2l69
  7454                           
  7455                           ;interrupt_manager.c: 79: {
  7456                           ;interrupt_manager.c: 80: ADC_ISR();
  7457  000060  ECF0  F00D         	call	_ADC_ISR	;wreg free
  7458  000064                     i2l69:
  7459  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7460  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7461  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7462  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7463  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7464  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7465  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7466  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7467  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7468  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7469  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7470  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7471  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7472  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7473  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7474  00009E  0011               	retfie		f
  7475  0000A0                     __end_of_INTERRUPT_InterruptManager:
  7476                           	opt stack 0
  7477                           tosu	equ	0xFFF
  7478                           tosh	equ	0xFFE
  7479                           tosl	equ	0xFFD
  7480                           pclatu	equ	0xFFB
  7481                           pclath	equ	0xFFA
  7482                           tblptru	equ	0xFF8
  7483                           tblptrh	equ	0xFF7
  7484                           tblptrl	equ	0xFF6
  7485                           tablat	equ	0xFF5
  7486                           prodh	equ	0xFF4
  7487                           prodl	equ	0xFF3
  7488                           intcon	equ	0xFF2
  7489                           intcon2	equ	0xFF1
  7490                           postinc0	equ	0xFEE
  7491                           fsr0h	equ	0xFEA
  7492                           fsr0l	equ	0xFE9
  7493                           wreg	equ	0xFE8
  7494                           fsr1h	equ	0xFE2
  7495                           fsr1l	equ	0xFE1
  7496                           indf2	equ	0xFDF
  7497                           postinc2	equ	0xFDE
  7498                           postdec2	equ	0xFDD
  7499                           plusw2	equ	0xFDB
  7500                           fsr2h	equ	0xFDA
  7501                           fsr2l	equ	0xFD9
  7502                           status	equ	0xFD8
  7503                           
  7504 ;; *************** function _EUSART1_Transmit_ISR *****************
  7505 ;; Defined at:
  7506 ;;		line 150 in file "UART.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;		None
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;		None
  7511 ;; Return value:  Size  Location     Type
  7512 ;;		None               void
  7513 ;; Registers used:
  7514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7515 ;; Tracked objects:
  7516 ;;		On entry : 0/0
  7517 ;;		On exit  : 0/0
  7518 ;;		Unchanged: 0/0
  7519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7520 ;;      Params:         0       0       0       0       0       0       0
  7521 ;;      Locals:         0       0       0       0       0       0       0
  7522 ;;      Temps:          0       0       0       0       0       0       0
  7523 ;;      Totals:         0       0       0       0       0       0       0
  7524 ;;Total ram usage:        0 bytes
  7525 ;; Hardware stack levels used:    1
  7526 ;; Hardware stack levels required when called:    2
  7527 ;; This function calls:
  7528 ;;		i2_UART_buff_get
  7529 ;;		i2_UART_buff_size
  7530 ;; This function is called by:
  7531 ;;		_INTERRUPT_InterruptManager
  7532 ;; This function uses a non-reentrant model
  7533 ;;
  7534                           
  7535                           	psect	text45
  7536  00199A                     __ptext45:
  7537                           	opt stack 0
  7538  00199A                     _EUSART1_Transmit_ISR:
  7539                           	opt stack 21
  7540                           
  7541                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7542                           
  7543                           ;incstack = 0
  7544  00199A  0E00               	movlw	low _output_buffer
  7545  00199C  6E01               	movwf	i2UART_buff_size@_this,c
  7546  00199E  0E04               	movlw	high _output_buffer
  7547  0019A0  6E02               	movwf	i2UART_buff_size@_this+1,c
  7548  0019A2  ECB4  F00D         	call	i2_UART_buff_size	;wreg free
  7549  0019A6  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7550  0019A8  D00D               	goto	i2l3153
  7551  0019AA  5002               	movf	?i2_UART_buff_size+1,w,c
  7552  0019AC  E103               	bnz	i2u257_40
  7553  0019AE  0401               	decf	?i2_UART_buff_size,w,c
  7554  0019B0  A0D8               	btfss	status,0,c
  7555  0019B2  D008               	goto	i2l3153
  7556  0019B4                     i2u257_40:
  7557                           
  7558                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7559  0019B4  0E00               	movlw	low _output_buffer
  7560  0019B6  6E07               	movwf	i2UART_buff_get@_this,c
  7561  0019B8  0E04               	movlw	high _output_buffer
  7562  0019BA  6E08               	movwf	i2UART_buff_get@_this+1,c
  7563  0019BC  ECF7  F009         	call	i2_UART_buff_get	;wreg free
  7564  0019C0  6EAD               	movwf	4013,c	;volatile
  7565                           
  7566                           ;UART.c: 154: } else {
  7567  0019C2  0012               	return	
  7568  0019C4                     i2l3153:
  7569                           
  7570                           ;UART.c: 155: Transmit_stall = 1;
  7571  0019C4  0E01               	movlw	1
  7572  0019C6  6E44               	movwf	_Transmit_stall,c
  7573                           
  7574                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7575  0019C8  989D               	bcf	3997,4,c	;volatile
  7576  0019CA  0012               	return	
  7577  0019CC                     __end_of_EUSART1_Transmit_ISR:
  7578                           	opt stack 0
  7579                           tosu	equ	0xFFF
  7580                           tosh	equ	0xFFE
  7581                           tosl	equ	0xFFD
  7582                           pclatu	equ	0xFFB
  7583                           pclath	equ	0xFFA
  7584                           tblptru	equ	0xFF8
  7585                           tblptrh	equ	0xFF7
  7586                           tblptrl	equ	0xFF6
  7587                           tablat	equ	0xFF5
  7588                           prodh	equ	0xFF4
  7589                           prodl	equ	0xFF3
  7590                           intcon	equ	0xFF2
  7591                           intcon2	equ	0xFF1
  7592                           postinc0	equ	0xFEE
  7593                           fsr0h	equ	0xFEA
  7594                           fsr0l	equ	0xFE9
  7595                           wreg	equ	0xFE8
  7596                           fsr1h	equ	0xFE2
  7597                           fsr1l	equ	0xFE1
  7598                           indf2	equ	0xFDF
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           plusw2	equ	0xFDB
  7602                           fsr2h	equ	0xFDA
  7603                           fsr2l	equ	0xFD9
  7604                           status	equ	0xFD8
  7605                           
  7606 ;; *************** function i2_UART_buff_size *****************
  7607 ;; Defined at:
  7608 ;;		line 102 in file "UART.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7611 ;;		 -> output_buffer(206), input_buffer(206), 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;		None
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  2    0[COMRAM] int 
  7616 ;; Registers used:
  7617 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7623 ;;      Params:         2       0       0       0       0       0       0
  7624 ;;      Locals:         0       0       0       0       0       0       0
  7625 ;;      Temps:          0       0       0       0       0       0       0
  7626 ;;      Totals:         2       0       0       0       0       0       0
  7627 ;;Total ram usage:        2 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; This function calls:
  7630 ;;		Nothing
  7631 ;; This function is called by:
  7632 ;;		_EUSART1_Transmit_ISR
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           	psect	text46
  7637  001B68                     __ptext46:
  7638                           	opt stack 0
  7639  001B68                     i2_UART_buff_size:
  7640                           	opt stack 22
  7641                           
  7642                           ;UART.c: 103: return (_this->count);
  7643                           
  7644                           ;incstack = 0
  7645  001B68  EE20 F0CC          	lfsr	2,204
  7646  001B6C  5001               	movf	i2UART_buff_size@_this,w,c
  7647  001B6E  26D9               	addwf	fsr2l,f,c
  7648  001B70  5002               	movf	i2UART_buff_size@_this+1,w,c
  7649  001B72  22DA               	addwfc	fsr2h,f,c
  7650  001B74  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7651  001B78  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7652  001B7C  0012               	return	
  7653  001B7E                     __end_ofi2_UART_buff_size:
  7654                           	opt stack 0
  7655                           tosu	equ	0xFFF
  7656                           tosh	equ	0xFFE
  7657                           tosl	equ	0xFFD
  7658                           pclatu	equ	0xFFB
  7659                           pclath	equ	0xFFA
  7660                           tblptru	equ	0xFF8
  7661                           tblptrh	equ	0xFF7
  7662                           tblptrl	equ	0xFF6
  7663                           tablat	equ	0xFF5
  7664                           prodh	equ	0xFF4
  7665                           prodl	equ	0xFF3
  7666                           intcon	equ	0xFF2
  7667                           intcon2	equ	0xFF1
  7668                           postinc0	equ	0xFEE
  7669                           fsr0h	equ	0xFEA
  7670                           fsr0l	equ	0xFE9
  7671                           wreg	equ	0xFE8
  7672                           fsr1h	equ	0xFE2
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           plusw2	equ	0xFDB
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function i2_UART_buff_get *****************
  7683 ;; Defined at:
  7684 ;;		line 81 in file "UART.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7687 ;;		 -> output_buffer(206), input_buffer(206), 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;                  1    wreg      unsigned char 
  7692 ;; Registers used:
  7693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7699 ;;      Params:         2       0       0       0       0       0       0
  7700 ;;      Locals:         1       0       0       0       0       0       0
  7701 ;;      Temps:          2       0       0       0       0       0       0
  7702 ;;      Totals:         5       0       0       0       0       0       0
  7703 ;;Total ram usage:        5 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    1
  7706 ;; This function calls:
  7707 ;;		i2_UART_buff_modulo_inc
  7708 ;; This function is called by:
  7709 ;;		_EUSART1_Transmit_ISR
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text47
  7714  0013EE                     __ptext47:
  7715                           	opt stack 0
  7716  0013EE                     i2_UART_buff_get:
  7717                           	opt stack 21
  7718                           
  7719                           ;UART.c: 82: unsigned char c;
  7720                           ;UART.c: 83: if (_this->count > 0) {
  7721                           
  7722                           ;incstack = 0
  7723  0013EE  EE20 F0CC          	lfsr	2,204
  7724  0013F2  5007               	movf	i2UART_buff_get@_this,w,c
  7725  0013F4  26D9               	addwf	fsr2l,f,c
  7726  0013F6  5008               	movf	i2UART_buff_get@_this+1,w,c
  7727  0013F8  22DA               	addwfc	fsr2h,f,c
  7728  0013FA  0E01               	movlw	1
  7729  0013FC  BEDB               	btfsc	plusw2,7,c
  7730  0013FE  D03C               	goto	i2l3125
  7731  001400  0E01               	movlw	1
  7732  001402  50DB               	movf	plusw2,w,c
  7733  001404  E103               	bnz	i2u254_40
  7734  001406  04DE               	decf	postinc2,w,c
  7735  001408  A0D8               	btfss	status,0,c
  7736  00140A  D036               	goto	i2l3125
  7737  00140C                     i2u254_40:
  7738                           
  7739                           ;UART.c: 84: c = _this->buf[_this->tail];
  7740  00140C  EE20 F0CA          	lfsr	2,202
  7741  001410  5007               	movf	i2UART_buff_get@_this,w,c
  7742  001412  26D9               	addwf	fsr2l,f,c
  7743  001414  5008               	movf	i2UART_buff_get@_this+1,w,c
  7744  001416  22DA               	addwfc	fsr2h,f,c
  7745  001418  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7746  00141C  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7747  001420  5009               	movf	??i2_UART_buff_get,w,c
  7748  001422  2407               	addwf	i2UART_buff_get@_this,w,c
  7749  001424  6ED9               	movwf	fsr2l,c
  7750  001426  500A               	movf	??i2_UART_buff_get+1,w,c
  7751  001428  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7752  00142A  6EDA               	movwf	fsr2h,c
  7753  00142C  50DF               	movf	indf2,w,c
  7754  00142E  6E0B               	movwf	i2UART_buff_get@c,c
  7755                           
  7756                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7757  001430  EE20 F0CA          	lfsr	2,202
  7758  001434  5007               	movf	i2UART_buff_get@_this,w,c
  7759  001436  26D9               	addwf	fsr2l,f,c
  7760  001438  5008               	movf	i2UART_buff_get@_this+1,w,c
  7761  00143A  22DA               	addwfc	fsr2h,f,c
  7762  00143C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7763  001440  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7764  001444  0E00               	movlw	0
  7765  001446  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7766  001448  0EC8               	movlw	200
  7767  00144A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7768  00144C  EC3E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  7769  001450  EE20 F0CA          	lfsr	2,202
  7770  001454  5007               	movf	i2UART_buff_get@_this,w,c
  7771  001456  26D9               	addwf	fsr2l,f,c
  7772  001458  5008               	movf	i2UART_buff_get@_this+1,w,c
  7773  00145A  22DA               	addwfc	fsr2h,f,c
  7774  00145C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7775  001460  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7776                           
  7777                           ;UART.c: 86: --_this->count;
  7778  001464  EE20 F0CC          	lfsr	2,204
  7779  001468  5007               	movf	i2UART_buff_get@_this,w,c
  7780  00146A  26D9               	addwf	fsr2l,f,c
  7781  00146C  5008               	movf	i2UART_buff_get@_this+1,w,c
  7782  00146E  22DA               	addwfc	fsr2h,f,c
  7783  001470  06DE               	decf	postinc2,f,c
  7784  001472  0E00               	movlw	0
  7785  001474  5ADD               	subwfb	postdec2,f,c
  7786                           
  7787                           ;UART.c: 87: } else {
  7788  001476  D002               	goto	i2l702
  7789  001478                     i2l3125:
  7790                           
  7791                           ;UART.c: 88: c = 0;
  7792  001478  0E00               	movlw	0
  7793  00147A  6E0B               	movwf	i2UART_buff_get@c,c
  7794  00147C                     i2l702:
  7795                           
  7796                           ;UART.c: 89: }
  7797                           ;UART.c: 90: return (c);
  7798  00147C  500B               	movf	i2UART_buff_get@c,w,c
  7799  00147E  0012               	return	
  7800  001480                     __end_ofi2_UART_buff_get:
  7801                           	opt stack 0
  7802                           tosu	equ	0xFFF
  7803                           tosh	equ	0xFFE
  7804                           tosl	equ	0xFFD
  7805                           pclatu	equ	0xFFB
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           intcon	equ	0xFF2
  7814                           intcon2	equ	0xFF1
  7815                           postinc0	equ	0xFEE
  7816                           fsr0h	equ	0xFEA
  7817                           fsr0l	equ	0xFE9
  7818                           wreg	equ	0xFE8
  7819                           fsr1h	equ	0xFE2
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           plusw2	equ	0xFDB
  7825                           fsr2h	equ	0xFDA
  7826                           fsr2l	equ	0xFD9
  7827                           status	equ	0xFD8
  7828                           
  7829 ;; *************** function _EUSART1_Receive_ISR *****************
  7830 ;; Defined at:
  7831 ;;		line 139 in file "UART.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;		None
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;  data            1   11[COMRAM] unsigned char 
  7836 ;; Return value:  Size  Location     Type
  7837 ;;		None               void
  7838 ;; Registers used:
  7839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7845 ;;      Params:         0       0       0       0       0       0       0
  7846 ;;      Locals:         1       0       0       0       0       0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0
  7848 ;;      Totals:         1       0       0       0       0       0       0
  7849 ;;Total ram usage:        1 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    2
  7852 ;; This function calls:
  7853 ;;		i2_UART_buff_put
  7854 ;; This function is called by:
  7855 ;;		_INTERRUPT_InterruptManager
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text48
  7860  001B06                     __ptext48:
  7861                           	opt stack 0
  7862  001B06                     _EUSART1_Receive_ISR:
  7863                           	opt stack 21
  7864                           
  7865                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  7866                           
  7867                           ;incstack = 0
  7868  001B06  A2AB               	btfss	4011,1,c	;volatile
  7869  001B08  D002               	goto	i2l733
  7870                           
  7871                           ;UART.c: 143: RC1STAbits.CREN = 0;
  7872  001B0A  98AB               	bcf	4011,4,c	;volatile
  7873                           
  7874                           ;UART.c: 144: RC1STAbits.CREN = 1;
  7875  001B0C  88AB               	bsf	4011,4,c	;volatile
  7876  001B0E                     i2l733:
  7877                           
  7878                           ;UART.c: 145: }
  7879                           ;UART.c: 146: unsigned char data = RCREG1;
  7880  001B0E  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  7881                           
  7882                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7883  001B12  0E00               	movlw	low _input_buffer
  7884  001B14  6E07               	movwf	i2UART_buff_put@_this,c
  7885  001B16  0E03               	movlw	high _input_buffer
  7886  001B18  6E08               	movwf	i2UART_buff_put@_this+1,c
  7887  001B1A  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  7888  001B1E  EC43  F006         	call	i2_UART_buff_put	;wreg free
  7889  001B22  0012               	return		;funcret
  7890  001B24                     __end_of_EUSART1_Receive_ISR:
  7891                           	opt stack 0
  7892                           tosu	equ	0xFFF
  7893                           tosh	equ	0xFFE
  7894                           tosl	equ	0xFFD
  7895                           pclatu	equ	0xFFB
  7896                           pclath	equ	0xFFA
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           intcon	equ	0xFF2
  7904                           intcon2	equ	0xFF1
  7905                           postinc0	equ	0xFEE
  7906                           fsr0h	equ	0xFEA
  7907                           fsr0l	equ	0xFE9
  7908                           wreg	equ	0xFE8
  7909                           fsr1h	equ	0xFE2
  7910                           fsr1l	equ	0xFE1
  7911                           indf2	equ	0xFDF
  7912                           postinc2	equ	0xFDE
  7913                           postdec2	equ	0xFDD
  7914                           plusw2	equ	0xFDB
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function i2_UART_buff_put *****************
  7920 ;; Defined at:
  7921 ;;		line 68 in file "UART.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7924 ;;		 -> output_buffer(206), input_buffer(206), 
  7925 ;;  c               1    8[COMRAM] const unsigned char 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;		None
  7928 ;; Return value:  Size  Location     Type
  7929 ;;		None               void
  7930 ;; Registers used:
  7931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7937 ;;      Params:         3       0       0       0       0       0       0
  7938 ;;      Locals:         0       0       0       0       0       0       0
  7939 ;;      Temps:          2       0       0       0       0       0       0
  7940 ;;      Totals:         5       0       0       0       0       0       0
  7941 ;;Total ram usage:        5 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    1
  7944 ;; This function calls:
  7945 ;;		i2_UART_buff_modulo_inc
  7946 ;; This function is called by:
  7947 ;;		_EUSART1_Receive_ISR
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text49
  7952  000C86                     __ptext49:
  7953                           	opt stack 0
  7954  000C86                     i2_UART_buff_put:
  7955                           	opt stack 21
  7956                           
  7957                           ;UART.c: 69: if (_this->count < 200) {
  7958                           
  7959                           ;incstack = 0
  7960  000C86  EE20 F0CC          	lfsr	2,204
  7961  000C8A  5007               	movf	i2UART_buff_put@_this,w,c
  7962  000C8C  26D9               	addwf	fsr2l,f,c
  7963  000C8E  5008               	movf	i2UART_buff_put@_this+1,w,c
  7964  000C90  22DA               	addwfc	fsr2h,f,c
  7965  000C92  0E01               	movlw	1
  7966  000C94  BEDB               	btfsc	plusw2,7,c
  7967  000C96  D007               	goto	i2l3105
  7968  000C98  0E01               	movlw	1
  7969  000C9A  50DB               	movf	plusw2,w,c
  7970  000C9C  E13A               	bnz	i2l3111
  7971  000C9E  0EC8               	movlw	200
  7972  000CA0  5CDE               	subwf	postinc2,w,c
  7973  000CA2  B0D8               	btfsc	status,0,c
  7974  000CA4  D036               	goto	i2l3111
  7975  000CA6                     i2l3105:
  7976                           
  7977                           ;UART.c: 70: _this->buf[_this->head] = c;
  7978  000CA6  EE20 F0C8          	lfsr	2,200
  7979  000CAA  5007               	movf	i2UART_buff_put@_this,w,c
  7980  000CAC  26D9               	addwf	fsr2l,f,c
  7981  000CAE  5008               	movf	i2UART_buff_put@_this+1,w,c
  7982  000CB0  22DA               	addwfc	fsr2h,f,c
  7983  000CB2  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  7984  000CB6  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  7985  000CBA  500A               	movf	??i2_UART_buff_put,w,c
  7986  000CBC  2407               	addwf	i2UART_buff_put@_this,w,c
  7987  000CBE  6ED9               	movwf	fsr2l,c
  7988  000CC0  500B               	movf	??i2_UART_buff_put+1,w,c
  7989  000CC2  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  7990  000CC4  6EDA               	movwf	fsr2h,c
  7991  000CC6  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  7992                           
  7993                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7994  000CCA  EE20 F0C8          	lfsr	2,200
  7995  000CCE  5007               	movf	i2UART_buff_put@_this,w,c
  7996  000CD0  26D9               	addwf	fsr2l,f,c
  7997  000CD2  5008               	movf	i2UART_buff_put@_this+1,w,c
  7998  000CD4  22DA               	addwfc	fsr2h,f,c
  7999  000CD6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8000  000CDA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8001  000CDE  0E00               	movlw	0
  8002  000CE0  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8003  000CE2  0EC8               	movlw	200
  8004  000CE4  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8005  000CE6  EC3E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8006  000CEA  EE20 F0C8          	lfsr	2,200
  8007  000CEE  5007               	movf	i2UART_buff_put@_this,w,c
  8008  000CF0  26D9               	addwf	fsr2l,f,c
  8009  000CF2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8010  000CF4  22DA               	addwfc	fsr2h,f,c
  8011  000CF6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8012  000CFA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8013                           
  8014                           ;UART.c: 72: ++_this->count;
  8015  000CFE  EE20 F0CC          	lfsr	2,204
  8016  000D02  5007               	movf	i2UART_buff_put@_this,w,c
  8017  000D04  26D9               	addwf	fsr2l,f,c
  8018  000D06  5008               	movf	i2UART_buff_put@_this+1,w,c
  8019  000D08  22DA               	addwfc	fsr2h,f,c
  8020  000D0A  2ADE               	incf	postinc2,f,c
  8021  000D0C  0E00               	movlw	0
  8022  000D0E  22DD               	addwfc	postdec2,f,c
  8023                           
  8024                           ;UART.c: 73: } else {
  8025  000D10  0012               	return	
  8026  000D12                     i2l3111:
  8027                           
  8028                           ;UART.c: 74: _this->buf[_this->head] = c;
  8029  000D12  EE20 F0C8          	lfsr	2,200
  8030  000D16  5007               	movf	i2UART_buff_put@_this,w,c
  8031  000D18  26D9               	addwf	fsr2l,f,c
  8032  000D1A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8033  000D1C  22DA               	addwfc	fsr2h,f,c
  8034  000D1E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8035  000D22  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8036  000D26  500A               	movf	??i2_UART_buff_put,w,c
  8037  000D28  2407               	addwf	i2UART_buff_put@_this,w,c
  8038  000D2A  6ED9               	movwf	fsr2l,c
  8039  000D2C  500B               	movf	??i2_UART_buff_put+1,w,c
  8040  000D2E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8041  000D30  6EDA               	movwf	fsr2h,c
  8042  000D32  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8043                           
  8044                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8045  000D36  EE20 F0C8          	lfsr	2,200
  8046  000D3A  5007               	movf	i2UART_buff_put@_this,w,c
  8047  000D3C  26D9               	addwf	fsr2l,f,c
  8048  000D3E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8049  000D40  22DA               	addwfc	fsr2h,f,c
  8050  000D42  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8051  000D46  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8052  000D4A  0E00               	movlw	0
  8053  000D4C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8054  000D4E  0EC8               	movlw	200
  8055  000D50  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8056  000D52  EC3E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8057  000D56  EE20 F0C8          	lfsr	2,200
  8058  000D5A  5007               	movf	i2UART_buff_put@_this,w,c
  8059  000D5C  26D9               	addwf	fsr2l,f,c
  8060  000D5E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8061  000D60  22DA               	addwfc	fsr2h,f,c
  8062  000D62  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8063  000D66  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8064                           
  8065                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8066  000D6A  EE20 F0CA          	lfsr	2,202
  8067  000D6E  5007               	movf	i2UART_buff_put@_this,w,c
  8068  000D70  26D9               	addwf	fsr2l,f,c
  8069  000D72  5008               	movf	i2UART_buff_put@_this+1,w,c
  8070  000D74  22DA               	addwfc	fsr2h,f,c
  8071  000D76  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8072  000D7A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8073  000D7E  0E00               	movlw	0
  8074  000D80  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8075  000D82  0EC8               	movlw	200
  8076  000D84  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8077  000D86  EC3E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8078  000D8A  EE20 F0CA          	lfsr	2,202
  8079  000D8E  5007               	movf	i2UART_buff_put@_this,w,c
  8080  000D90  26D9               	addwf	fsr2l,f,c
  8081  000D92  5008               	movf	i2UART_buff_put@_this+1,w,c
  8082  000D94  22DA               	addwfc	fsr2h,f,c
  8083  000D96  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8084  000D9A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8085  000D9E  0012               	return	
  8086  000DA0                     __end_ofi2_UART_buff_put:
  8087                           	opt stack 0
  8088                           tosu	equ	0xFFF
  8089                           tosh	equ	0xFFE
  8090                           tosl	equ	0xFFD
  8091                           pclatu	equ	0xFFB
  8092                           pclath	equ	0xFFA
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           intcon2	equ	0xFF1
  8101                           postinc0	equ	0xFEE
  8102                           fsr0h	equ	0xFEA
  8103                           fsr0l	equ	0xFE9
  8104                           wreg	equ	0xFE8
  8105                           fsr1h	equ	0xFE2
  8106                           fsr1l	equ	0xFE1
  8107                           indf2	equ	0xFDF
  8108                           postinc2	equ	0xFDE
  8109                           postdec2	equ	0xFDD
  8110                           plusw2	equ	0xFDB
  8111                           fsr2h	equ	0xFDA
  8112                           fsr2l	equ	0xFD9
  8113                           status	equ	0xFD8
  8114                           
  8115 ;; *************** function i2_UART_buff_modulo_inc *****************
  8116 ;; Defined at:
  8117 ;;		line 106 in file "UART.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;  value           2    0[COMRAM] const unsigned int 
  8120 ;;  modulus         2    2[COMRAM] const unsigned int 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8123 ;; Return value:  Size  Location     Type
  8124 ;;                  2    0[COMRAM] unsigned int 
  8125 ;; Registers used:
  8126 ;;		wreg, status,2, status,0
  8127 ;; Tracked objects:
  8128 ;;		On entry : 0/0
  8129 ;;		On exit  : 0/0
  8130 ;;		Unchanged: 0/0
  8131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8132 ;;      Params:         4       0       0       0       0       0       0
  8133 ;;      Locals:         2       0       0       0       0       0       0
  8134 ;;      Temps:          0       0       0       0       0       0       0
  8135 ;;      Totals:         6       0       0       0       0       0       0
  8136 ;;Total ram usage:        6 bytes
  8137 ;; Hardware stack levels used:    1
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		i2_UART_buff_put
  8142 ;;		i2_UART_buff_get
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text50
  8147  001A7C                     __ptext50:
  8148                           	opt stack 0
  8149  001A7C                     i2_UART_buff_modulo_inc:
  8150                           	opt stack 21
  8151                           
  8152                           ;UART.c: 107: unsigned int my_value = value + 1;
  8153                           
  8154                           ;incstack = 0
  8155  001A7C  0E01               	movlw	1
  8156  001A7E  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8157  001A80  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8158  001A82  0E00               	movlw	0
  8159  001A84  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8160  001A86  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8161                           
  8162                           ;UART.c: 108: if (my_value >= modulus) {
  8163  001A88  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8164  001A8A  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8165  001A8C  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8166  001A8E  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8167  001A90  A0D8               	btfss	status,0,c
  8168  001A92  D004               	goto	i2l2813
  8169                           
  8170                           ;UART.c: 109: my_value = 0;
  8171  001A94  0E00               	movlw	0
  8172  001A96  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8173  001A98  0E00               	movlw	0
  8174  001A9A  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8175  001A9C                     i2l2813:
  8176                           
  8177                           ;UART.c: 110: }
  8178                           ;UART.c: 111: return (my_value);
  8179  001A9C  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8180  001AA0  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8181  001AA4  0012               	return	
  8182  001AA6                     __end_ofi2_UART_buff_modulo_inc:
  8183                           	opt stack 0
  8184                           tosu	equ	0xFFF
  8185                           tosh	equ	0xFFE
  8186                           tosl	equ	0xFFD
  8187                           pclatu	equ	0xFFB
  8188                           pclath	equ	0xFFA
  8189                           tblptru	equ	0xFF8
  8190                           tblptrh	equ	0xFF7
  8191                           tblptrl	equ	0xFF6
  8192                           tablat	equ	0xFF5
  8193                           prodh	equ	0xFF4
  8194                           prodl	equ	0xFF3
  8195                           intcon	equ	0xFF2
  8196                           intcon2	equ	0xFF1
  8197                           postinc0	equ	0xFEE
  8198                           fsr0h	equ	0xFEA
  8199                           fsr0l	equ	0xFE9
  8200                           wreg	equ	0xFE8
  8201                           fsr1h	equ	0xFE2
  8202                           fsr1l	equ	0xFE1
  8203                           indf2	equ	0xFDF
  8204                           postinc2	equ	0xFDE
  8205                           postdec2	equ	0xFDD
  8206                           plusw2	equ	0xFDB
  8207                           fsr2h	equ	0xFDA
  8208                           fsr2l	equ	0xFD9
  8209                           status	equ	0xFD8
  8210                           
  8211 ;; *************** function _ADC_ISR *****************
  8212 ;; Defined at:
  8213 ;;		line 128 in file "mcc_generated_files/adc.c"
  8214 ;; Parameters:    Size  Location     Type
  8215 ;;		None
  8216 ;; Auto vars:     Size  Location     Type
  8217 ;;		None
  8218 ;; Return value:  Size  Location     Type
  8219 ;;		None               void
  8220 ;; Registers used:
  8221 ;;		None
  8222 ;; Tracked objects:
  8223 ;;		On entry : 0/0
  8224 ;;		On exit  : 0/0
  8225 ;;		Unchanged: 0/0
  8226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8227 ;;      Params:         0       0       0       0       0       0       0
  8228 ;;      Locals:         0       0       0       0       0       0       0
  8229 ;;      Temps:          0       0       0       0       0       0       0
  8230 ;;      Totals:         0       0       0       0       0       0       0
  8231 ;;Total ram usage:        0 bytes
  8232 ;; Hardware stack levels used:    1
  8233 ;; This function calls:
  8234 ;;		Nothing
  8235 ;; This function is called by:
  8236 ;;		_INTERRUPT_InterruptManager
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text51
  8241  001BE0                     __ptext51:
  8242                           	opt stack 0
  8243  001BE0                     _ADC_ISR:
  8244                           	opt stack 23
  8245                           
  8246                           ;adc.c: 131: PIR1bits.ADIF = 0;
  8247                           
  8248                           ;incstack = 0
  8249  001BE0  9C9E               	bcf	3998,6,c	;volatile
  8250  001BE2  0012               	return		;funcret
  8251  001BE4                     __end_of_ADC_ISR:
  8252                           	opt stack 0
  8253  0000                     tosu	equ	0xFFF
  8254                           tosh	equ	0xFFE
  8255                           tosl	equ	0xFFD
  8256                           pclatu	equ	0xFFB
  8257                           pclath	equ	0xFFA
  8258                           tblptru	equ	0xFF8
  8259                           tblptrh	equ	0xFF7
  8260                           tblptrl	equ	0xFF6
  8261                           tablat	equ	0xFF5
  8262                           prodh	equ	0xFF4
  8263                           prodl	equ	0xFF3
  8264                           intcon	equ	0xFF2
  8265                           intcon2	equ	0xFF1
  8266                           postinc0	equ	0xFEE
  8267                           fsr0h	equ	0xFEA
  8268                           fsr0l	equ	0xFE9
  8269                           wreg	equ	0xFE8
  8270                           fsr1h	equ	0xFE2
  8271                           fsr1l	equ	0xFE1
  8272                           indf2	equ	0xFDF
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           plusw2	equ	0xFDB
  8276                           fsr2h	equ	0xFDA
  8277                           fsr2l	equ	0xFD9
  8278                           status	equ	0xFD8
  8279                           tosu	equ	0xFFF
  8280                           tosh	equ	0xFFE
  8281                           tosl	equ	0xFFD
  8282                           pclatu	equ	0xFFB
  8283                           pclath	equ	0xFFA
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           intcon2	equ	0xFF1
  8292                           postinc0	equ	0xFEE
  8293                           fsr0h	equ	0xFEA
  8294                           fsr0l	equ	0xFE9
  8295                           wreg	equ	0xFE8
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           plusw2	equ	0xFDB
  8302                           fsr2h	equ	0xFDA
  8303                           fsr2l	equ	0xFD9
  8304                           status	equ	0xFD8
  8305                           
  8306                           	psect	text52
  8307  000000                     __ptext52:
  8308                           	opt stack 0
  8309                           tosu	equ	0xFFF
  8310                           tosh	equ	0xFFE
  8311                           tosl	equ	0xFFD
  8312                           pclatu	equ	0xFFB
  8313                           pclath	equ	0xFFA
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           intcon2	equ	0xFF1
  8322                           postinc0	equ	0xFEE
  8323                           fsr0h	equ	0xFEA
  8324                           fsr0l	equ	0xFE9
  8325                           wreg	equ	0xFE8
  8326                           fsr1h	equ	0xFE2
  8327                           fsr1l	equ	0xFE1
  8328                           indf2	equ	0xFDF
  8329                           postinc2	equ	0xFDE
  8330                           postdec2	equ	0xFDD
  8331                           plusw2	equ	0xFDB
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336                           	psect	rparam
  8337  0000                     tosu	equ	0xFFF
  8338                           tosh	equ	0xFFE
  8339                           tosl	equ	0xFFD
  8340                           pclatu	equ	0xFFB
  8341                           pclath	equ	0xFFA
  8342                           tblptru	equ	0xFF8
  8343                           tblptrh	equ	0xFF7
  8344                           tblptrl	equ	0xFF6
  8345                           tablat	equ	0xFF5
  8346                           prodh	equ	0xFF4
  8347                           prodl	equ	0xFF3
  8348                           intcon	equ	0xFF2
  8349                           intcon2	equ	0xFF1
  8350                           postinc0	equ	0xFEE
  8351                           fsr0h	equ	0xFEA
  8352                           fsr0l	equ	0xFE9
  8353                           wreg	equ	0xFE8
  8354                           fsr1h	equ	0xFE2
  8355                           fsr1l	equ	0xFE1
  8356                           indf2	equ	0xFDF
  8357                           postinc2	equ	0xFDE
  8358                           postdec2	equ	0xFDD
  8359                           plusw2	equ	0xFDB
  8360                           fsr2h	equ	0xFDA
  8361                           fsr2l	equ	0xFD9
  8362                           status	equ	0xFD8
  8363                           
  8364                           	psect	temp
  8365  000045                     btemp:
  8366                           	opt stack 0
  8367  000045                     	ds	1
  8368  0000                     int$flags	set	btemp
  8369                           tosu	equ	0xFFF
  8370                           tosh	equ	0xFFE
  8371                           tosl	equ	0xFFD
  8372                           pclatu	equ	0xFFB
  8373                           pclath	equ	0xFFA
  8374                           tblptru	equ	0xFF8
  8375                           tblptrh	equ	0xFF7
  8376                           tblptrl	equ	0xFF6
  8377                           tablat	equ	0xFF5
  8378                           prodh	equ	0xFF4
  8379                           prodl	equ	0xFF3
  8380                           intcon	equ	0xFF2
  8381                           intcon2	equ	0xFF1
  8382                           postinc0	equ	0xFEE
  8383                           fsr0h	equ	0xFEA
  8384                           fsr0l	equ	0xFE9
  8385                           wreg	equ	0xFE8
  8386                           fsr1h	equ	0xFE2
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           plusw2	equ	0xFDB
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1007
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160      1     160
    BANK1           256     27     233
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK1[3]), receiveData@holder_1238(BANK1[3]), receiveData@holder(BANK1[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _StartUp595->_Clear595
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _respondECU->_ToSend
    _sendData->_Send_put
    _receiveData->_Send_put

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _SYSTEM_Initialize->_begin
    _Update->_writeRegisters
    _Clear595->_writeRegisters

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   37857
                         _PDUStartup
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   26445
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8139
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK1      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK1      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              0 BANK0      1     1      0
                                              2 BANK1      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK1      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK1     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK1      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2    7591
                                              4 BANK1      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1292
                                              0 BANK1     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0    9105
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0     851
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    1634
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0     950
                                             35 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0     851
                                              0 BANK1      4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     684
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    6508
                                             36 COMRAM     1     1      0
                                              0 BANK1      2     0      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    4674
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     112
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100     1B      E9       6       91.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      1      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     431       9        0.0%
DATA                 0      0     431      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Apr 23 04:07:40 2016

      __end_of_FastTransfer_buffer_flush 1570                   i2_UART_buff_modulo_inc 1A7C  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l319 12C4                                      l507 0A20  
                                    l702 1358                                      l393 1892  
                                    l651 13BE                                      l649 13B2  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0038                          __end_of_ADC_ISR 1BE4  
   FastTransfer_buffer_flush@clearBuffer 01D0                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l3101 0FA4                                     l4005 1B8C  
                                   l3401 189E                                     l3091 0F7A  
                                   l3331 18BC                                     l3325 1A72  
                                   l3341 1A48                                     l3421 0778  
                                   l3095 0F8A                                     l3335 18D6  
                                   l3351 1A16                                     l3521 0EB4  
                                   l2801 14EC                                     l3361 0BF8  
                                   l3523 0ED2                                     l3603 196E  
                                   l3347 1A06                                     l3443 0DB4  
                                   l3355 0B8C                                     l3525 0EF0  
                                   l3533 0F4A                                     l3613 1994  
                                   l2805 14FA                                     l3701 0260  
                                   l3527 0F0E                                     l3519 0E96  
                                   l3391 187C                                     l3375 1354  
                                   l3455 0E48                                     l3439 0DAA  
                                   l3471 11B6                                     l3463 1130  
                                   l3551 0AC0                                     l3543 0A54  
                                   l3529 0F2C                                     l3385 1866  
                                   l3705 0292                                     l3561 0B38  
                                   l3553 0ACC                                     l3545 0A6E  
                                   l3483 13A6                                     l3475 1370  
                                   l3723 03F0                                     l3555 0AF6  
                                   l3547 0A8A                                     l2773 1494  
                                   l3821 124C                                     l3813 1214  
                                   l3581 099C                                     l3741 04AA  
                                   l3725 03F6                                     l3717 0356  
                                   l3709 02BA                                     l3805 074C  
                                   l3653 0100                                     l3557 0AFC  
                                   l3549 0AA4                                     l3831 128C  
                                   l3815 1224                                     l3399 1898  
                                   l3591 09F0                                     l3567 08C4  
                                   l3751 052C                                     l3743 04C4  
                                   l3727 040A                                     l3671 01C0  
                                   l2785 14BA                                     l3833 129C  
                                   l3825 1264                                     l3577 0986  
                                   l3569 08EC                                     l3753 0546  
                                   l3745 04DE                                     l3673 01C6  
                                   l3649 00D4                                     l3657 0104  
                                   l3681 0200                                     l2787 14C2  
                                   l2779 14A4                                     l3827 1274  
                                   l3819 123C                                     l3595 0A10  
                                   l3755 0594                                     l3747 04F8  
                                   l2797 14E2                                     l2789 14C6  
                                   l3837 12B4                                     l3781 063A  
                                   l3749 0512                                     l3757 05B0  
                                   l3669 01A8                                     l3599 0A18  
                                   l3791 06BC                                     l3783 0654  
                                   l3767 05BC                                     l3687 020C  
                                   l3793 06D6                                     l3785 066E  
                                   l3689 0232                                     l3881 1960  
                   receiveData@crcHolder 01E3                                     l3795 0724  
                                   l3787 0688                                     l3789 06A2  
                                   l3797 0740                                     _CRC8 1860  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u3008 0A3E  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u3018 0A58                                     u3108 08F0  
                                   u3028 0A72                                     u3109 0904  
                                   u3118 090C                                     u3038 0A8E  
                                   u3119 0920                                     u3128 0928  
                                   u3048 0AA8                                     u3129 093C  
                                   u3138 0944                                     u3058 0AD0  
                                   u3139 0958                                     u3308 0126  
                                   u3309 013A                                     u3078 0B20  
                                   u3088 08C8                                     u3408 0210  
                                   u3328 0144                                     u3248 00AE  
                                   u3089 08DC                                     u3409 0224  
                                   u3329 0158                                     u3249 00C2  
                                   u3338 015E                                     u3339 0172  
                                   u3428 0236                                     u3348 0178  
                                   u3268 00DC                                     u3429 024A  
                                   u3349 018C                                     u3269 00F0  
                                   u2830 12E8                                     u3608 054A  
                                   u3448 0264                                     u3368 01AC  
                                   u3288 0108                                     u3481 02FA  
                                   u3449 0278                                     u3289 011C  
                                   u3618 0598                                     u3538 0494  
                                   u3458 0296                                     u3459 02AA  
                                   u3708 06DA                                     u3548 04AE  
                                   u3718 0728                                     u3638 0624  
                                   u3558 04C8                                     u2870 1110  
                                   u3648 063E                                     u3568 04E2  
                                   u3658 0658                                     u3578 04FC  
                                   u2891 0776                                     u3668 0672  
                                   u3588 0516                                     u3780 194C  
                                   u3917 18C2                                     u3678 068C  
                                   u3598 0530                                     u3688 06A6  
                                   u3698 06C0                                     i2l63 004E  
                                   i2l65 005A                                     i2l69 0064  
                                   _TMR1 000FCE                                     _WPUB 000F61  
                                   _data 00B4                                     _main 1B7E  
               __end_of_EnableSlavePower 0F72                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C4  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                         __end_of_CRCcheck 0A22  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1BD0  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 1504                                    _EEADR 000FA9  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                                  _LATB0 007C50                                    _LATA3 007C4B  
                                  _LATD4 007C64                                    _LATD5 007C65  
                                  _LATD6 007C66                                    _LATD7 007C67  
                         __CFG_DEBUG$OFF 000000                              ?_PDUStartup 0001  
                                  i2l702 147C                                    i2l733 1B0E  
                        ___awdiv@counter 001F                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 18AA                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 199A  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         ??_writeRegisters 0024  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1766  
                        _DATAEE_ReadByte 1B92                           __CFG_EBTRB$OFF 000000  
                                  _group 0028                       __CFG_MCLRE$EXTMCLR 000000  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                           begin@stuffpeek 01D9  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                       __end_of_Clear595 199A                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 18AA                          CRCcheck@SentCRC 01D0  
                        __initialization 1570               __end_of_EUSART1_Initialize 1930  
                           __end_of_main 1B92                               _CurrentADC 009C  
                             ToSend@what 01D0                                   ??_CRC8 001E  
                              ??_ADC_ISR 0001              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0026                            __activetblptr 000002  
                       __end_of_Send_put 19FC                __size_ofi2_UART_buff_size 0016  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                            ?_Receive_peek 0001  
                                 ?_begin 01CE                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                       ___awdiv@dividend 001B                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                                 _T1GCON 000FCC                          i2_UART_buff_get 13EE  
                                 _RC1STA 000FAB                                   i2l3111 0D12  
                        i2_UART_buff_put 0C86                                   i2l3105 0CA6  
                                 i2l3125 1478                                   Delay@i 0020  
                                 i2l3153 19C4                           __CFG_WDTEN$OFF 000000  
                                 i2l2813 1A9C              UART_buff_modulo_inc@modulus 001D  
                                 _TABLAT 000FF5                                   _RCREG1 000FAE  
                                 _OSCCON 000FD3              __end_of_processPowerRequest 12CA  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                      __size_of_PDUStartup 005E  
                         __CFG_XINST$OFF 000000                                   _ToSend 1ACA  
                    __end_of_Receive_get 1BC2                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0023                                   _Update 1BDA  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                       crcBufS_get@space 001E                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                                 _memset 19FC                                   clear_0 1576  
                                 clear_1 1582                                   clear_2 158E  
                                 clear_3 159A                                   clear_4 15A6  
                                 clear_5 15B2                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B6C  
                __end_of_DATAEE_ReadByte 1BA6                             __pdataCOMRAM 0044  
                          Send_put@_data 00FF                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                             _StartUp595 16A6             __end_of_UART_buff_modulo_inc 1A7C  
          __size_of_INTERRUPT_Initialize 000A                        _SYSTEM_Initialize 15D8  
                             __accesstop 0060                  __end_of__initialization 15CA  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 18F4  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 1126  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 17BE   __end_of_FastTransfer_buffer_modulo_inc 1A52  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1A28  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00FF  
            __size_of_ComputeStorageData 00DC                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                              _Currentcomp 00A8  
                  __end_of_UART_buff_get 135C                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 0C86                                ?_Clear595 0001  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 1480  
                __end_ofi2_UART_buff_put 0DA0              __end_of_EUSART1_Receive_ISR 1B24  
              _FastTransfer_buffer_flush 1504                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                        __end_of_SetPin595 1860  
              __end_of_SYSTEM_Initialize 1640                   receiveData@holder_1238 01E0  
                    _addressErrorCounter 00C0                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1BB4  
                             ??_CRCcheck 0026                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 1AA6                        begin@givenAddress 01D1  
                      ?_EnableSlavePower 01CE                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0024                  __size_of_UART_buff_size 0016  
                              ?_Send_put 0001                       ??_EnableSlavePower 0025  
                   __size_of_receiveData 06AC                                  ?_ToSend 01D0  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Update 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                _ADC_ISR 1BE0                                  ?_memset 001B  
                             _crc_buffer 00EE                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0026  
                     UART_buff_put@_this 0021                               ??_Clear595 0024  
                       i2_UART_buff_size 1B68              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                                  _TBLPTRH 000FF7  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                            ?_StartUp595 0001                        _Receive_available 1B3C  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 01D3                      _receiveArrayAddress 002C  
                     ?_Receive_available 001D                               begin@error 01D2  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0090                        _alignErrorCounter 0026  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                     __end_of_PDUStartup 1766                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 1BB4                                _AKNAKsend 003C  
                        __size_of_Update 0006                                  ___awdiv 1480  
                   _UART_buff_modulo_inc 1A52                                  _calc_CS 003D  
                                __pcinit 1570                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 1B7E                                  __ptext1 1930  
                                __ptext2 17BE                                  __ptext3 0A22  
                                __ptext4 104E                                  __ptext5 1504  
                                __ptext6 1ACA                                  __ptext7 0750  
                                __ptext8 1A28                                  __ptext9 00A4  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 1BC2                __end_of_Receive_available 1B52  
                _FastTransfer_buffer_put 0750                    CRCcheck@calculatedCRC 01D1  
                     _EUSART1_Initialize 18F4                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                Clear595@i 0024  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0068                     end_of_initialization 15CA  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 01D2                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0036                                  postdec2 000FDD  
                    __size_of_StartUp595 0062                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 17BE  
                       begin@stufftosend 01D3                      CRCcheck@arrayHolder 01D2  
                           SetPin595@Reg 001B                     ??_EUSART1_Initialize 0025  
                           SetPin595@pin 001D                   _dataAdressErrorCounter 00C4  
                             _rx_address 0041                                _TRISCbits 000F94  
                           begin@maxSize 01D0       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1AE8  
                         _UART_buff_peek 1AA6                           _UART_buff_size 1B52  
                    __end_of_crcBufS_get 0E92                  __size_of_writeRegisters 0092  
                    __end_of_crcBufS_put 1126                        __size_of_CRCcheck 015E  
                          _moduleAddress 003F                               CRCcheck@rt 01D5  
           __size_of_processPowerRequest 00CE                           __end_of_ToSend 1AE8  
           __end_of_INTERRUPT_Initialize 1BDA                           __end_of_Update 1BE0  
                        _crcErrorCounter 00C2                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1BE4                           _ADC_Initialize 1B24  
              ??_FastTransfer_buffer_put 01CE                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 1A28                        crcBufS_put@status 001F  
                           receiveData@r 01E7               __size_of_Receive_available 0016  
                           receiveData@u 01E5                      start_initialization 1570  
        __size_of_PIN_MANAGER_Initialize 0066                    crcBufS_get@wantedTime 01CE  
                  EnableSlavePower@slave 0025                        __size_of_Clear595 0034  
                 __end_of_UART_buff_init 1B06                   __end_of_UART_buff_peek 1ACA  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 1B68  
                           ?_Receive_get 0001                                _SetPin595 1812  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 000E  
                    DATAEE_ReadByte@bAdd 001B                 __end_ofi2_UART_buff_size 1B7E  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                                 ??_Update 0024  
                        crcBufS_get@time 001D                        __size_of_Send_put 0030  
                            ?_respondECU 0001                   __end_of_ADC_Initialize 1B3C  
             __end_of_ComputeStorageData 104E                                 ?_ADC_ISR 0001  
                               ??_memset 0021                __size_of_EnableSlavePower 00E0  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00FF                            __pcstackBANK1 01CE  
                           ??_StartUp595 0026                             _Receive_peek 1BA6  
                    UART_buff_init@_this 0023                              _crcBufS_get 0DA0  
                    UART_buff_peek@_this 001B                              _crcBufS_put 104E  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                             ?_SetPin595 001B                            ??_receiveData 01D7  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 01D4  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                 _PIN_MANAGER_Initialize 1640                        __size_of_sendData 014A  
                              __pintcode 0008                                 ?___awdiv 001B  
                     __end_of_StartUp595 1708                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                           __size_of_Delay 004A  
                         __size_of_begin 0058                 __size_of_DATAEE_ReadByte 0014  
                    __size_of_respondECU 0054                     _INTERRUPT_Initialize 1BD0  
                           _receiveArray 00C6              processPowerRequest@powerSet 01D2  
                               _CRCcheck 08C4                                 _LATCbits 000F8B  
                         _writeRegisters 135C                      UART_buff_size@_this 001B  
                              _registers 0060                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 0098  
                               i2u254_40 140C                                 i2u257_40 19B4  
                               _PIR1bits 000F9E                      begin@stuffavailable 01D7  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0750           FastTransfer_buffer_flush@_this 01CE  
                           _input_buffer 0300                                _rx_buffer 0200  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                   i2UART_buff_put@_this 0007                                 _Clear595 1966  
                          _UART_buff_get 12CA                            _UART_buff_put 0B6C  
                    _processPowerRequest 11FC                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002E                   __end_of_writeRegisters 13EE  
                            ??_SetPin595 0021                     EnableSlavePower@onof 01CE  
               __size_ofi2_UART_buff_get 0092                 __size_ofi2_UART_buff_put 011A  
                             _EECON1bits 000FA6                            ??_updateComms 0026  
                   __size_of_Receive_get 000E                                 __Hrparam 0000  
                               _Send_put 19CC                                 __Lrparam 0000  
                   ?_processPowerRequest 01D2                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 01D5                         _EnableSlavePower 0E92  
                             _ANSELCbits 000F3A                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 01D5                 crcBufS_status_put@status 001E  
                               __ptext10 19CC                                 __ptext11 0B6C  
                               __ptext20 1B3C                                 __ptext12 1BA6  
                               __ptext21 1B52                                 __ptext13 1AA6  
                             _T1GCONbits 000FCC                                 __ptext30 18F4  
                               __ptext22 1860                                 __ptext14 08C4  
                               __ptext31 1AE8                                 __ptext23 11FC  
                               __ptext15 1126                                 __ptext40 0E92  
                               __ptext32 19FC                                 __ptext24 15D8  
                               __ptext16 0DA0                                 __ptext41 1812  
                               __ptext33 1B24                                 __ptext25 1766  
                               __ptext17 1BB4                                 __ptext50 1A7C  
                               __ptext42 0F72                                 __ptext34 1708  
                               __ptext26 1480                                 __ptext18 12CA  
                               __ptext51 1BE0                                 __ptext43 1B92  
                               __ptext35 1BDA                                 __ptext27 1640  
                               __ptext19 1A52                                 __ptext52 0000  
                               __ptext36 16A6                                 __ptext28 1BC2  
                               __ptext45 199A                                 __ptext37 1966  
                               __ptext29 1BD0                                 __ptext46 1B68  
                               __ptext38 135C                                 __ptext47 13EE  
                               __ptext39 18AA                                 __ptext48 1B06  
                               __ptext49 0C86                            __size_of_CRC8 004A  
                               begin@ptr 01CE                  EUSART1_Receive_ISR@data 000C  
                        ?_writeRegisters 0001                            _returnAddress 0040  
                          __size_of_main 0014                              _receiveData 00A4  
                               _readwhat 002A                           _Transmit_stall 0044  
                               _sendData 0A22                        ??_DATAEE_ReadByte 001B  
                      ?i2_UART_buff_size 0001                    ??_processPowerRequest 0026  
                             _RC1STAbits 000FAB                             ??_respondECU 0026  
                     ??i2_UART_buff_size 0003                        writeRegisters@val 01CE  
                               int$flags 0045                             _serial_write 0036  
                    __end_of_updateComms 1966       __end_of_INTERRUPT_InterruptManager 00A0  
             _INTERRUPT_InterruptManager 0008                      _EUSART1_Receive_ISR 1B06  
                      receiveData@holder 01DD                               _INTCONbits 000FF2  
                    ComputeStorageData@i 001E                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                       _ComputeStorageData 0F72  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 0030          __size_ofi2_UART_buff_modulo_inc 002A  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 1812                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                    ?_ComputeStorageData 0001                  ?_PIN_MANAGER_Initialize 0001  
                         SetPin595@value 001F             __end_of_EUSART1_Transmit_ISR 19CC  
                            _ring_buffer 0100                         ??_ADC_Initialize 001B  
             ?_FastTransfer_buffer_flush 01CE                        ??i2_UART_buff_get 0009  
                            _serial_peek 0032                              _serial_read 0034  
                      ??i2_UART_buff_put 000A                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0023  
                        ??_UART_buff_put 0024                     ??_ComputeStorageData 001C  
  FastTransfer_buffer_modulo_inc@modulus 001D                               _PDUStartup 1708  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1239 01E4  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003E  
                        writeRegisters@i 01D0               __end_of_crcBufS_status_put 11FC  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 16A6  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
          updateComms@previousPowerState 003A                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1930  
