

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri May 27 22:47:35 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001E86                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _Transmit_stall
    85  001E86  01                 	db	1
    86  0000                     _ANSELA	set	3896
    87  0000                     _ANSELB	set	3897
    88  0000                     _ANSELC	set	3898
    89  0000                     _ANSELCbits	set	3898
    90  0000                     _ANSELD	set	3899
    91  0000                     _ANSELE	set	3900
    92  0000                     _CCP4CON	set	3927
    93  0000                     _CCPR4H	set	3929
    94  0000                     _CCPR4L	set	3928
    95  0000                     _CCPTMRS1bits	set	3912
    96  0000                     _TMR1	set	4046
    97  0000                     _ADCON0	set	4034
    98  0000                     _ADCON0bits	set	4034
    99  0000                     _ADCON1	set	4033
   100  0000                     _ADCON2	set	4032
   101  0000                     _ADRESH	set	4036
   102  0000                     _ADRESL	set	4035
   103  0000                     _BAUD1CON	set	4024
   104  0000                     _EEADR	set	4009
   105  0000                     _EECON1bits	set	4006
   106  0000                     _EECON2	set	4007
   107  0000                     _EEDATA	set	4008
   108  0000                     _INTCON2bits	set	4081
   109  0000                     _INTCONbits	set	4082
   110  0000                     _IPR1bits	set	3999
   111  0000                     _LATA	set	3977
   112  0000                     _LATB	set	3978
   113  0000                     _LATC	set	3979
   114  0000                     _LATCbits	set	3979
   115  0000                     _LATD	set	3980
   116  0000                     _LATE	set	3981
   117  0000                     _OSCCON	set	4051
   118  0000                     _OSCCON2	set	4050
   119  0000                     _OSCTUNE	set	3995
   120  0000                     _PIE1bits	set	3997
   121  0000                     _PIR1bits	set	3998
   122  0000                     _PR2	set	4027
   123  0000                     _RC1STA	set	4011
   124  0000                     _RC1STAbits	set	4011
   125  0000                     _RCONbits	set	4048
   126  0000                     _RCREG1	set	4014
   127  0000                     _SPBRG1	set	4015
   128  0000                     _SPBRGH1	set	4016
   129  0000                     _T1CON	set	4045
   130  0000                     _T1CONbits	set	4045
   131  0000                     _T1GCON	set	4044
   132  0000                     _T1GCONbits	set	4044
   133  0000                     _T2CON	set	4026
   134  0000                     _T2CONbits	set	4026
   135  0000                     _TABLAT	set	4085
   136  0000                     _TBLPTRH	set	4087
   137  0000                     _TBLPTRL	set	4086
   138  0000                     _TBLPTRU	set	4088
   139  0000                     _TMR1H	set	4047
   140  0000                     _TMR1L	set	4046
   141  0000                     _TMR2	set	4028
   142  0000                     _TRISA	set	3986
   143  0000                     _TRISB	set	3987
   144  0000                     _TRISC	set	3988
   145  0000                     _TRISCbits	set	3988
   146  0000                     _TRISD	set	3989
   147  0000                     _TRISE	set	3990
   148  0000                     _TX1STA	set	4012
   149  0000                     _TXREG1	set	4013
   150  0000                     _WPUB	set	3937
   151  0000                     _LATA3	set	31819
   152  0000                     _LATB0	set	31824
   153  0000                     _LATB3	set	31827
   154  0000                     _LATB4	set	31828
   155  0000                     _LATB5	set	31829
   156  0000                     _LATD4	set	31844
   157  0000                     _LATD5	set	31845
   158  0000                     _LATD6	set	31846
   159  0000                     _LATD7	set	31847
   160                           
   161                           ; #config settings
   162  0000                     
   163                           	psect	cinit
   164  0017EE                     __pcinit:
   165                           	opt stack 0
   166  0017EE                     start_initialization:
   167                           	opt stack 0
   168  0017EE                     __initialization:
   169                           	opt stack 0
   170                           
   171                           ; Clear objects allocated to BANK4 (206 bytes)
   172  0017EE  EE04  F000         	lfsr	0,__pbssBANK4
   173  0017F2  0ECE               	movlw	206
   174  0017F4                     clear_0:
   175  0017F4  6AEE               	clrf	postinc0,c
   176  0017F6  06E8               	decf	wreg,f,c
   177  0017F8  E1FD               	bnz	clear_0
   178                           
   179                           ; Clear objects allocated to BANK3 (206 bytes)
   180  0017FA  EE03  F000         	lfsr	0,__pbssBANK3
   181  0017FE  0ECE               	movlw	206
   182  001800                     clear_1:
   183  001800  6AEE               	clrf	postinc0,c
   184  001802  06E8               	decf	wreg,f,c
   185  001804  E1FD               	bnz	clear_1
   186                           
   187                           ; Clear objects allocated to BANK2 (200 bytes)
   188  001806  EE02  F000         	lfsr	0,__pbssBANK2
   189  00180A  0EC8               	movlw	200
   190  00180C                     clear_2:
   191  00180C  6AEE               	clrf	postinc0,c
   192  00180E  06E8               	decf	wreg,f,c
   193  001810  E1FD               	bnz	clear_2
   194                           
   195                           ; Clear objects allocated to BANK1 (254 bytes)
   196  001812  EE01  F000         	lfsr	0,__pbssBANK1
   197  001816  0EFE               	movlw	254
   198  001818                     clear_3:
   199  001818  6AEE               	clrf	postinc0,c
   200  00181A  06E8               	decf	wreg,f,c
   201  00181C  E1FD               	bnz	clear_3
   202                           
   203                           ; Clear objects allocated to BANK0 (113 bytes)
   204  00181E  EE00  F060         	lfsr	0,__pbssBANK0
   205  001822  0E71               	movlw	113
   206  001824                     clear_4:
   207  001824  6AEE               	clrf	postinc0,c
   208  001826  06E8               	decf	wreg,f,c
   209  001828  E1FD               	bnz	clear_4
   210                           
   211                           ; Clear objects allocated to COMRAM (30 bytes)
   212  00182A  EE00  F026         	lfsr	0,__pbssCOMRAM
   213  00182E  0E1E               	movlw	30
   214  001830                     clear_5:
   215  001830  6AEE               	clrf	postinc0,c
   216  001832  06E8               	decf	wreg,f,c
   217  001834  E1FD               	bnz	clear_5
   218                           
   219                           ; Initialize objects allocated to COMRAM (1 bytes)
   220                           ; load TBLPTR registers with __pidataCOMRAM
   221  001836  0E86               	movlw	low __pidataCOMRAM
   222  001838  6EF6               	movwf	tblptrl,c
   223  00183A  0E1E               	movlw	high __pidataCOMRAM
   224  00183C  6EF7               	movwf	tblptrh,c
   225  00183E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   226  001840  6EF8               	movwf	tblptru,c
   227  001842  0009               	tblrd		*+	;fetch initializer
   228  001844  CFF5 F044          	movff	tablat,__pdataCOMRAM
   229  001848                     end_of_initialization:
   230                           	opt stack 0
   231  001848                     __end_of__initialization:
   232                           	opt stack 0
   233  001848  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   234  00184A  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   235  00184C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   236  00184E  6EF8               	movwf	tblptru,c
   237  001850  0100               	movlb	0
   238  001852  EFD5  F00E         	goto	_main	;jump to C main() function
   239                           tblptru	equ	0xFF8
   240                           tblptrh	equ	0xFF7
   241                           tblptrl	equ	0xFF6
   242                           tablat	equ	0xFF5
   243                           postinc0	equ	0xFEE
   244                           wreg	equ	0xFE8
   245                           
   246                           	psect	bssCOMRAM
   247  000026                     __pbssCOMRAM:
   248                           	opt stack 0
   249  000026                     _group:
   250                           	opt stack 0
   251  000026                     	ds	2
   252  000028                     _prev_pos:
   253                           	opt stack 0
   254  000028                     	ds	2
   255  00002A                     _readwhat:
   256                           	opt stack 0
   257  00002A                     	ds	2
   258  00002C                     _receiveArrayAddress:
   259                           	opt stack 0
   260  00002C                     	ds	2
   261  00002E                     _sendStructAddress:
   262                           	opt stack 0
   263  00002E                     	ds	2
   264  000030                     _serial_available:
   265                           	opt stack 0
   266  000030                     	ds	2
   267  000032                     _serial_peek:
   268                           	opt stack 0
   269  000032                     	ds	2
   270  000034                     _serial_read:
   271                           	opt stack 0
   272  000034                     	ds	2
   273  000036                     _serial_write:
   274                           	opt stack 0
   275  000036                     	ds	2
   276  000038                     _timer1ReloadVal:
   277                           	opt stack 0
   278  000038                     	ds	2
   279  00003A                     updateComms@previousPowerState:
   280                           	opt stack 0
   281  00003A                     	ds	2
   282  00003C                     _AKNAKsend:
   283                           	opt stack 0
   284  00003C                     	ds	1
   285  00003D                     _calc_CS:
   286                           	opt stack 0
   287  00003D                     	ds	1
   288  00003E                     _maxDataAddress:
   289                           	opt stack 0
   290  00003E                     	ds	1
   291  00003F                     _moduleAddress:
   292                           	opt stack 0
   293  00003F                     	ds	1
   294  000040                     _returnAddress:
   295                           	opt stack 0
   296  000040                     	ds	1
   297  000041                     _rx_address:
   298                           	opt stack 0
   299  000041                     	ds	1
   300  000042                     _rx_array_inx:
   301                           	opt stack 0
   302  000042                     	ds	1
   303  000043                     _rx_len:
   304                           	opt stack 0
   305  000043                     	ds	1
   306                           tblptru	equ	0xFF8
   307                           tblptrh	equ	0xFF7
   308                           tblptrl	equ	0xFF6
   309                           tablat	equ	0xFF5
   310                           postinc0	equ	0xFEE
   311                           wreg	equ	0xFE8
   312                           
   313                           	psect	dataCOMRAM
   314  000044                     __pdataCOMRAM:
   315                           	opt stack 0
   316  000044                     _Transmit_stall:
   317                           	opt stack 0
   318  000044                     	ds	1
   319                           tblptru	equ	0xFF8
   320                           tblptrh	equ	0xFF7
   321                           tblptrl	equ	0xFF6
   322                           tablat	equ	0xFF5
   323                           postinc0	equ	0xFEE
   324                           wreg	equ	0xFE8
   325                           
   326                           	psect	bssBANK0
   327  000060                     __pbssBANK0:
   328                           	opt stack 0
   329  000060                     _Current:
   330                           	opt stack 0
   331  000060                     	ds	12
   332  00006C                     _CurrentADC:
   333                           	opt stack 0
   334  00006C                     	ds	12
   335  000078                     _Currentcomp:
   336                           	opt stack 0
   337  000078                     	ds	12
   338  000084                     _data:
   339                           	opt stack 0
   340  000084                     	ds	12
   341  000090                     _addressErrorCounter:
   342                           	opt stack 0
   343  000090                     	ds	2
   344  000092                     _alignErrorCounter:
   345                           	opt stack 0
   346  000092                     	ds	2
   347  000094                     _crcErrorCounter:
   348                           	opt stack 0
   349  000094                     	ds	2
   350  000096                     _dataAdressErrorCounter:
   351                           	opt stack 0
   352  000096                     	ds	2
   353  000098                     _receiveArray:
   354                           	opt stack 0
   355  000098                     	ds	40
   356  0000C0                     _crc_buffer:
   357                           	opt stack 0
   358  0000C0                     	ds	17
   359                           tblptru	equ	0xFF8
   360                           tblptrh	equ	0xFF7
   361                           tblptrl	equ	0xFF6
   362                           tablat	equ	0xFF5
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           
   366                           	psect	bssBANK1
   367  000100                     __pbssBANK1:
   368                           	opt stack 0
   369  000100                     _registers:
   370                           	opt stack 0
   371  000100                     	ds	48
   372  000130                     _ring_buffer:
   373                           	opt stack 0
   374  000130                     	ds	206
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           
   382                           	psect	bssBANK2
   383  000200                     __pbssBANK2:
   384                           	opt stack 0
   385  000200                     _rx_buffer:
   386                           	opt stack 0
   387  000200                     	ds	200
   388                           tblptru	equ	0xFF8
   389                           tblptrh	equ	0xFF7
   390                           tblptrl	equ	0xFF6
   391                           tablat	equ	0xFF5
   392                           postinc0	equ	0xFEE
   393                           wreg	equ	0xFE8
   394                           
   395                           	psect	bssBANK3
   396  000300                     __pbssBANK3:
   397                           	opt stack 0
   398  000300                     _input_buffer:
   399                           	opt stack 0
   400  000300                     	ds	206
   401                           tblptru	equ	0xFF8
   402                           tblptrh	equ	0xFF7
   403                           tblptrl	equ	0xFF6
   404                           tablat	equ	0xFF5
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           
   408                           	psect	bssBANK4
   409  000400                     __pbssBANK4:
   410                           	opt stack 0
   411  000400                     _output_buffer:
   412                           	opt stack 0
   413  000400                     	ds	206
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           
   421                           	psect	cstackBANK0
   422  0000D1                     __pcstackBANK0:
   423                           	opt stack 0
   424  0000D1                     ??_FastTransfer_buffer_put:
   425  0000D1                     ??_PotSetpoint:
   426  0000D1                     Send_put@_data:
   427                           	opt stack 0
   428  0000D1                     begin@ptr:
   429                           	opt stack 0
   430  0000D1                     FastTransfer_buffer_flush@_this:
   431                           	opt stack 0
   432  0000D1                     crcBufS_get@wantedTime:
   433                           	opt stack 0
   434  0000D1                     EnableSlavePower@onof:
   435                           	opt stack 0
   436  0000D1                     writeRegisters@val:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x0
   440  0000D1                     	ds	2
   441  0000D3                     begin@maxSize:
   442                           	opt stack 0
   443  0000D3                     CRCcheck@SentCRC:
   444                           	opt stack 0
   445  0000D3                     ToSend@what:
   446                           	opt stack 0
   447  0000D3                     FastTransfer_buffer_flush@clearBuffer:
   448                           	opt stack 0
   449  0000D3                     writeRegisters@i:
   450                           	opt stack 0
   451  0000D3                     PotSetpoint@set_point:
   452                           	opt stack 0
   453                           
   454                           ; 2 bytes @ 0x2
   455  0000D3                     	ds	1
   456  0000D4                     begin@givenAddress:
   457                           	opt stack 0
   458  0000D4                     CRCcheck@calculatedCRC:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0x3
   462  0000D4                     	ds	1
   463  0000D5                     ??_sendData:
   464  0000D5                     begin@error:
   465                           	opt stack 0
   466  0000D5                     ToSend@where:
   467                           	opt stack 0
   468  0000D5                     processPowerRequest@powerSet:
   469                           	opt stack 0
   470  0000D5                     PotSetpoint@x:
   471                           	opt stack 0
   472  0000D5                     CRCcheck@arrayHolder:
   473                           	opt stack 0
   474                           
   475                           ; 3 bytes @ 0x4
   476  0000D5                     	ds	1
   477  0000D6                     sendData@whereToSend:
   478                           	opt stack 0
   479  0000D6                     begin@stufftosend:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x5
   483  0000D6                     	ds	1
   484  0000D7                     sendData@CS:
   485                           	opt stack 0
   486  0000D7                     PotSetpoint@new_pos:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x6
   490  0000D7                     	ds	1
   491  0000D8                     begin@stufftoreceive:
   492                           	opt stack 0
   493  0000D8                     sendData@i:
   494                           	opt stack 0
   495  0000D8                     CRCcheck@rt:
   496                           	opt stack 0
   497                           
   498                           ; 2 bytes @ 0x7
   499  0000D8                     	ds	2
   500  0000DA                     ??_receiveData:
   501  0000DA                     begin@stuffavailable:
   502                           	opt stack 0
   503                           
   504                           ; 2 bytes @ 0x9
   505  0000DA                     	ds	2
   506  0000DC                     begin@stuffpeek:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0xB
   510  0000DC                     	ds	4
   511  0000E0                     receiveData@holder:
   512                           	opt stack 0
   513                           
   514                           ; 3 bytes @ 0xF
   515  0000E0                     	ds	3
   516  0000E3                     receiveData@holder_1247:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x12
   520  0000E3                     	ds	3
   521  0000E6                     receiveData@crcHolder:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x15
   525  0000E6                     	ds	1
   526  0000E7                     receiveData@crcHolder_1248:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x16
   530  0000E7                     	ds	1
   531  0000E8                     receiveData@u:
   532                           	opt stack 0
   533                           
   534                           ; 2 bytes @ 0x17
   535  0000E8                     	ds	2
   536  0000EA                     receiveData@r:
   537                           	opt stack 0
   538                           
   539                           ; 2 bytes @ 0x19
   540  0000EA                     	ds	2
   541                           tblptru	equ	0xFF8
   542                           tblptrh	equ	0xFF7
   543                           tblptrl	equ	0xFF6
   544                           tablat	equ	0xFF5
   545                           postinc0	equ	0xFEE
   546                           wreg	equ	0xFE8
   547                           
   548                           	psect	cstackCOMRAM
   549  000001                     __pcstackCOMRAM:
   550                           	opt stack 0
   551  000001                     ?i2_UART_buff_size:
   552                           	opt stack 0
   553  000001                     ?i2_UART_buff_modulo_inc:
   554                           	opt stack 0
   555  000001                     i2UART_buff_size@_this:
   556                           	opt stack 0
   557  000001                     i2UART_buff_modulo_inc@value:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x0
   561  000001                     	ds	2
   562  000003                     i2UART_buff_modulo_inc@modulus:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x2
   566  000003                     	ds	2
   567  000005                     i2UART_buff_modulo_inc@my_value:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x4
   571  000005                     	ds	2
   572  000007                     i2UART_buff_put@_this:
   573                           	opt stack 0
   574  000007                     i2UART_buff_get@_this:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0x6
   578  000007                     	ds	2
   579  000009                     ??i2_UART_buff_get:
   580  000009                     i2UART_buff_put@c:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x8
   584  000009                     	ds	1
   585  00000A                     ??i2_UART_buff_put:
   586                           
   587                           ; 0 bytes @ 0x9
   588  00000A                     	ds	1
   589  00000B                     i2UART_buff_get@c:
   590                           	opt stack 0
   591                           
   592                           ; 1 bytes @ 0xA
   593  00000B                     	ds	1
   594  00000C                     EUSART1_Receive_ISR@data:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0xB
   598  00000C                     	ds	1
   599  00000D                     ??_INTERRUPT_InterruptManager:
   600                           
   601                           ; 0 bytes @ 0xC
   602  00000D                     	ds	14
   603  00001B                     ?_FastTransfer_buffer_modulo_inc:
   604                           	opt stack 0
   605  00001B                     ?_UART_buff_modulo_inc:
   606                           	opt stack 0
   607  00001B                     ?_UART_buff_size:
   608                           	opt stack 0
   609  00001B                     ?___awdiv:
   610                           	opt stack 0
   611  00001B                     DATAEE_ReadByte@bAdd:
   612                           	opt stack 0
   613  00001B                     CRC8@data:
   614                           	opt stack 0
   615  00001B                     FastTransfer_buffer_modulo_inc@value:
   616                           	opt stack 0
   617  00001B                     crcBufS_put@_this:
   618                           	opt stack 0
   619  00001B                     crcBufS_status_put@_this:
   620                           	opt stack 0
   621  00001B                     crcBufS_get@_this:
   622                           	opt stack 0
   623  00001B                     SetPin595@Reg:
   624                           	opt stack 0
   625  00001B                     UART_buff_size@_this:
   626                           	opt stack 0
   627  00001B                     UART_buff_modulo_inc@value:
   628                           	opt stack 0
   629  00001B                     UART_buff_peek@_this:
   630                           	opt stack 0
   631  00001B                     PWM4_LoadDutyValue@dutyValue:
   632                           	opt stack 0
   633  00001B                     ___awdiv@dividend:
   634                           	opt stack 0
   635  00001B                     memset@p1:
   636                           	opt stack 0
   637  00001B                     Delay@wait:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x1A
   641  00001B                     	ds	1
   642  00001C                     ??_ComputeStorageData:
   643                           
   644                           ; 0 bytes @ 0x1B
   645  00001C                     	ds	1
   646  00001D                     ??_PWM4_LoadDutyValue:
   647  00001D                     ??_UART_buff_peek:
   648  00001D                     ?_Receive_available:
   649                           	opt stack 0
   650  00001D                     CRC8@len:
   651                           	opt stack 0
   652  00001D                     crcBufS_put@address:
   653                           	opt stack 0
   654  00001D                     crcBufS_status_put@time:
   655                           	opt stack 0
   656  00001D                     crcBufS_get@time:
   657                           	opt stack 0
   658  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   659                           	opt stack 0
   660  00001D                     SetPin595@pin:
   661                           	opt stack 0
   662  00001D                     UART_buff_modulo_inc@modulus:
   663                           	opt stack 0
   664  00001D                     ___awdiv@divisor:
   665                           	opt stack 0
   666  00001D                     memset@c:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x1C
   670  00001D                     	ds	1
   671  00001E                     CRC8@sum:
   672                           	opt stack 0
   673  00001E                     crcBufS_put@oldCRC:
   674                           	opt stack 0
   675  00001E                     crcBufS_status_put@status:
   676                           	opt stack 0
   677  00001E                     crcBufS_get@space:
   678                           	opt stack 0
   679  00001E                     ComputeStorageData@i:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x1D
   683  00001E                     	ds	1
   684  00001F                     ??_Delay:
   685  00001F                     ??_crcBufS_get:
   686  00001F                     ??_crcBufS_status_put:
   687  00001F                     CRC8@extract:
   688                           	opt stack 0
   689  00001F                     crcBufS_put@status:
   690                           	opt stack 0
   691  00001F                     ___awdiv@counter:
   692                           	opt stack 0
   693  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   694                           	opt stack 0
   695  00001F                     SetPin595@value:
   696                           	opt stack 0
   697  00001F                     UART_buff_modulo_inc@my_value:
   698                           	opt stack 0
   699  00001F                     memset@n:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x1E
   703  00001F                     	ds	1
   704  000020                     ??_crcBufS_put:
   705  000020                     CRC8@tempI:
   706                           	opt stack 0
   707  000020                     ___awdiv@sign:
   708                           	opt stack 0
   709  000020                     Delay@i:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x1F
   713  000020                     	ds	1
   714  000021                     ??_SetPin595:
   715  000021                     CRC8@crc:
   716                           	opt stack 0
   717  000021                     FastTransfer_buffer_put@_this:
   718                           	opt stack 0
   719  000021                     UART_buff_put@_this:
   720                           	opt stack 0
   721  000021                     UART_buff_get@_this:
   722                           	opt stack 0
   723  000021                     ___awdiv@quotient:
   724                           	opt stack 0
   725  000021                     memset@p:
   726                           	opt stack 0
   727                           
   728                           ; 2 bytes @ 0x20
   729  000021                     	ds	2
   730  000023                     ??_UART_buff_get:
   731  000023                     FastTransfer_buffer_put@towhere:
   732                           	opt stack 0
   733  000023                     UART_buff_put@c:
   734                           	opt stack 0
   735  000023                     crcBufS_status_put@wantedTime:
   736                           	opt stack 0
   737  000023                     UART_buff_init@_this:
   738                           	opt stack 0
   739                           
   740                           ; 2 bytes @ 0x22
   741  000023                     	ds	1
   742  000024                     ??_UART_buff_put:
   743  000024                     FastTransfer_buffer_put@towhat:
   744                           	opt stack 0
   745  000024                     Clear595@i:
   746                           	opt stack 0
   747  000024                     PotSetpoint@new_point:
   748                           	opt stack 0
   749  000024                     PotClear@x:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x23
   753  000024                     	ds	1
   754  000025                     EnableSlavePower@slave:
   755                           	opt stack 0
   756  000025                     UART_buff_get@c:
   757                           	opt stack 0
   758                           
   759                           ; 1 bytes @ 0x24
   760  000025                     	ds	1
   761  000026                     tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           
   768                           ; 0 bytes @ 0x25
   769 ;;
   770 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   771 ;;
   772 ;; *************** function _main *****************
   773 ;; Defined at:
   774 ;;		line 9 in file "main.c"
   775 ;; Parameters:    Size  Location     Type
   776 ;;		None
   777 ;; Auto vars:     Size  Location     Type
   778 ;;		None
   779 ;; Return value:  Size  Location     Type
   780 ;;		None               void
   781 ;; Registers used:
   782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   783 ;; Tracked objects:
   784 ;;		On entry : 0/0
   785 ;;		On exit  : 0/0
   786 ;;		Unchanged: 0/0
   787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   788 ;;      Params:         0       0       0       0       0       0       0
   789 ;;      Locals:         0       0       0       0       0       0       0
   790 ;;      Temps:          0       0       0       0       0       0       0
   791 ;;      Totals:         0       0       0       0       0       0       0
   792 ;;Total ram usage:        0 bytes
   793 ;; Hardware stack levels required when called:   10
   794 ;; This function calls:
   795 ;;		_CoolingStart
   796 ;;		_PDUStartup
   797 ;;		_SYSTEM_Initialize
   798 ;;		_updateComms
   799 ;; This function is called by:
   800 ;;		Startup code after reset
   801 ;; This function uses a non-reentrant model
   802 ;;
   803                           
   804                           	psect	text0
   805  001DAA                     __ptext0:
   806                           	opt stack 0
   807  001DAA                     _main:
   808                           	opt stack 21
   809                           
   810                           ;main.c: 11: SYSTEM_Initialize();
   811                           
   812                           ;incstack = 0
   813  001DAA  EC88  F00B         	call	_SYSTEM_Initialize	;wreg free
   814                           
   815                           ;main.c: 12: PDUStartup();
   816  001DAE  EC8F  F00C         	call	_PDUStartup	;wreg free
   817                           
   818                           ;main.c: 13: CoolingStart();
   819  001DB2  ECAA  F00E         	call	_CoolingStart	;wreg free
   820                           
   821                           ;main.c: 31: (INTCONbits.GIE = 1);
   822  001DB6  8EF2               	bsf	intcon,7,c	;volatile
   823                           
   824                           ;main.c: 34: (INTCONbits.PEIE = 1);
   825  001DB8  8CF2               	bsf	intcon,6,c	;volatile
   826                           
   827                           ;main.c: 42: LATCbits.LATC5 = 0;
   828  001DBA  9A8B               	bcf	3979,5,c	;volatile
   829  001DBC                     l4352:
   830                           
   831                           ;main.c: 50: updateComms();
   832  001DBC  ECA4  F00D         	call	_updateComms	;wreg free
   833  001DC0  D7FD               	goto	l4352
   834  001DC2                     __end_of_main:
   835                           	opt stack 0
   836                           tblptru	equ	0xFF8
   837                           tblptrh	equ	0xFF7
   838                           tblptrl	equ	0xFF6
   839                           tablat	equ	0xFF5
   840                           intcon	equ	0xFF2
   841                           postinc0	equ	0xFEE
   842                           wreg	equ	0xFE8
   843                           
   844 ;; *************** function _updateComms *****************
   845 ;; Defined at:
   846 ;;		line 21 in file "Communications.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;		None
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;		None               void
   853 ;; Registers used:
   854 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   860 ;;      Params:         0       0       0       0       0       0       0
   861 ;;      Locals:         0       0       0       0       0       0       0
   862 ;;      Temps:          0       0       0       0       0       0       0
   863 ;;      Totals:         0       0       0       0       0       0       0
   864 ;;Total ram usage:        0 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; Hardware stack levels required when called:    9
   867 ;; This function calls:
   868 ;;		_processPowerRequest
   869 ;;		_receiveData
   870 ;;		_respondECU
   871 ;; This function is called by:
   872 ;;		_main
   873 ;; This function uses a non-reentrant model
   874 ;;
   875                           
   876                           	psect	text1
   877  001B48                     __ptext1:
   878                           	opt stack 0
   879  001B48                     _updateComms:
   880                           	opt stack 21
   881                           
   882                           ;Communications.c: 22: if (receiveData()) {
   883                           
   884                           ;incstack = 0
   885  001B48  EC52  F000         	call	_receiveData	;wreg free
   886  001B4C  0900               	iorlw	0
   887  001B4E  B4D8               	btfsc	status,2,c
   888  001B50  0012               	return	
   889                           
   890                           ;Communications.c: 23: static int previousPowerState;
   891                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   892  001B52  503A               	movf	updateComms@previousPowerState,w,c
   893  001B54  0100               	movlb	0	; () banked
   894  001B56  199A               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   895  001B58  E105               	bnz	u4000
   896  001B5A  503B               	movf	updateComms@previousPowerState+1,w,c
   897  001B5C  0100               	movlb	0	; () banked
   898  001B5E  199B               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
   899  001B60  B4D8               	btfsc	status,2,c
   900  001B62  D00A               	goto	l4224
   901  001B64                     u4000:
   902                           
   903                           ; BSR set to: 0
   904                           ;Communications.c: 25: previousPowerState = receiveArray[1];
   905  001B64  C09A  F03A         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
   906  001B68  C09B  F03B         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
   907                           
   908                           ; BSR set to: 0
   909                           ;Communications.c: 26: processPowerRequest(previousPowerState);
   910  001B6C  C03A  F0D5         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
   911  001B70  C03B  F0D6         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
   912  001B74  ECA0  F009         	call	_processPowerRequest	;wreg free
   913  001B78                     l4224:
   914                           
   915                           ;Communications.c: 27: }
   916                           ;Communications.c: 28: respondECU();
   917  001B78  ECEB  F00C         	call	_respondECU	;wreg free
   918  001B7C  0012               	return	
   919  001B7E                     __end_of_updateComms:
   920                           	opt stack 0
   921                           tblptru	equ	0xFF8
   922                           tblptrh	equ	0xFF7
   923                           tblptrl	equ	0xFF6
   924                           tablat	equ	0xFF5
   925                           intcon	equ	0xFF2
   926                           postinc0	equ	0xFEE
   927                           wreg	equ	0xFE8
   928                           status	equ	0xFD8
   929                           
   930 ;; *************** function _respondECU *****************
   931 ;; Defined at:
   932 ;;		line 48 in file "Communications.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;		None               void
   939 ;; Registers used:
   940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   946 ;;      Params:         0       0       0       0       0       0       0
   947 ;;      Locals:         0       0       0       0       0       0       0
   948 ;;      Temps:          0       0       0       0       0       0       0
   949 ;;      Totals:         0       0       0       0       0       0       0
   950 ;;Total ram usage:        0 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    8
   953 ;; This function calls:
   954 ;;		_Delay
   955 ;;		_ToSend
   956 ;;		_sendData
   957 ;; This function is called by:
   958 ;;		_updateComms
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           	psect	text2
   963  0019D6                     __ptext2:
   964                           	opt stack 0
   965  0019D6                     _respondECU:
   966                           	opt stack 21
   967                           
   968                           ;Communications.c: 49: LATCbits.LATC5 = 1;
   969                           
   970                           ;incstack = 0
   971  0019D6  8A8B               	bsf	3979,5,c	;volatile
   972                           
   973                           ;Communications.c: 50: ToSend(0, 5);
   974  0019D8  0E00               	movlw	0
   975  0019DA  0100               	movlb	0	; () banked
   976  0019DC  6FD4               	movwf	(ToSend@what+1)& (0+255),b
   977  0019DE  0E05               	movlw	5
   978  0019E0  6FD3               	movwf	ToSend@what& (0+255),b
   979  0019E2  0E00               	movlw	0
   980  0019E4  EC8C  F00E         	call	_ToSend
   981                           
   982                           ;Communications.c: 51: ToSend(9, 5);
   983  0019E8  0E00               	movlw	0
   984  0019EA  0100               	movlb	0	; () banked
   985  0019EC  6FD4               	movwf	(ToSend@what+1)& (0+255),b
   986  0019EE  0E05               	movlw	5
   987  0019F0  6FD3               	movwf	ToSend@what& (0+255),b
   988  0019F2  0E09               	movlw	9
   989  0019F4  EC8C  F00E         	call	_ToSend
   990                           
   991                           ;Communications.c: 52: Delay(5);
   992  0019F8  0E05               	movlw	5
   993  0019FA  6E1B               	movwf	Delay@wait,c
   994  0019FC  0E00               	movlw	0
   995  0019FE  6E1C               	movwf	Delay@wait+1,c
   996  001A00  0E00               	movlw	0
   997  001A02  6E1D               	movwf	Delay@wait+2,c
   998  001A04  0E00               	movlw	0
   999  001A06  6E1E               	movwf	Delay@wait+3,c
  1000  001A08  EC61  F00D         	call	_Delay	;wreg free
  1001                           
  1002                           ;Communications.c: 54: sendData(1);
  1003  001A0C  0E01               	movlw	1
  1004  001A0E  EC12  F005         	call	_sendData
  1005                           
  1006                           ;Communications.c: 55: Delay(3);
  1007  001A12  0E03               	movlw	3
  1008  001A14  6E1B               	movwf	Delay@wait,c
  1009  001A16  0E00               	movlw	0
  1010  001A18  6E1C               	movwf	Delay@wait+1,c
  1011  001A1A  0E00               	movlw	0
  1012  001A1C  6E1D               	movwf	Delay@wait+2,c
  1013  001A1E  0E00               	movlw	0
  1014  001A20  6E1E               	movwf	Delay@wait+3,c
  1015  001A22  EC61  F00D         	call	_Delay	;wreg free
  1016                           
  1017                           ;Communications.c: 56: LATCbits.LATC5 = 0;
  1018  001A26  9A8B               	bcf	3979,5,c	;volatile
  1019  001A28  0012               	return		;funcret
  1020  001A2A                     __end_of_respondECU:
  1021                           	opt stack 0
  1022                           tblptru	equ	0xFF8
  1023                           tblptrh	equ	0xFF7
  1024                           tblptrl	equ	0xFF6
  1025                           tablat	equ	0xFF5
  1026                           intcon	equ	0xFF2
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _sendData *****************
  1032 ;; Defined at:
  1033 ;;		line 53 in file "FastTransfer.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;  whereToSend     1    wreg     unsigned char 
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  1038 ;;  i               2    7[BANK0 ] int 
  1039 ;;  CS              1    6[BANK0 ] unsigned char 
  1040 ;; Return value:  Size  Location     Type
  1041 ;;		None               void
  1042 ;; Registers used:
  1043 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1044 ;; Tracked objects:
  1045 ;;		On entry : 0/0
  1046 ;;		On exit  : 0/0
  1047 ;;		Unchanged: 0/0
  1048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1049 ;;      Params:         0       0       0       0       0       0       0
  1050 ;;      Locals:         0       4       0       0       0       0       0
  1051 ;;      Temps:          0       1       0       0       0       0       0
  1052 ;;      Totals:         0       5       0       0       0       0       0
  1053 ;;Total ram usage:        5 bytes
  1054 ;; Hardware stack levels used:    1
  1055 ;; Hardware stack levels required when called:    7
  1056 ;; This function calls:
  1057 ;;		Absolute function
  1058 ;;		_CRC8
  1059 ;;		_FastTransfer_buffer_flush
  1060 ;;		_Send_put
  1061 ;;		_crcBufS_put
  1062 ;; This function is called by:
  1063 ;;		_respondECU
  1064 ;; This function uses a non-reentrant model
  1065 ;;
  1066                           
  1067                           	psect	text3
  1068  000A24                     __ptext3:
  1069                           	opt stack 0
  1070  000A24                     _sendData:
  1071                           	opt stack 21
  1072                           
  1073                           ;incstack = 0
  1074                           ;sendData@whereToSend stored from wreg
  1075  000A24  0100               	movlb	0	; () banked
  1076  000A26  6FD6               	movwf	sendData@whereToSend& (0+255),b
  1077                           
  1078                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1079  000A28  C02E  F01B         	movff	_sendStructAddress,CRC8@data
  1080  000A2C  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1081  000A30  C1FC  F01D         	movff	_ring_buffer+204,CRC8@len
  1082  000A34  EC3C  F00D         	call	_CRC8	;wreg free
  1083  000A38  0100               	movlb	0	; () banked
  1084  000A3A  6FD7               	movwf	sendData@CS& (0+255),b
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;FastTransfer.c: 58: serial_write(0x06);
  1088  000A3C  D801               	call	u3158
  1089  000A3E  D00B               	goto	l3818
  1090  000A40                     u3158:
  1091  000A40  0005               	push	
  1092  000A42  6EFA               	movwf	pclath,c
  1093  000A44  5036               	movf	_serial_write,w,c
  1094  000A46  6EFD               	movwf	tosl,c
  1095  000A48  5037               	movf	_serial_write+1,w,c
  1096  000A4A  6EFE               	movwf	tosh,c
  1097  000A4C  50F8               	movf	tblptru,w,c
  1098  000A4E  6EFF               	movwf	tosu,c
  1099  000A50  50FA               	movf	pclath,w,c
  1100  000A52  0E06               	movlw	6
  1101  000A54  0012               	return		;indir
  1102  000A56                     l3818:
  1103                           
  1104                           ;FastTransfer.c: 59: serial_write(0x85);
  1105  000A56  D801               	call	u3168
  1106  000A58  D00B               	goto	l3820
  1107  000A5A                     u3168:
  1108  000A5A  0005               	push	
  1109  000A5C  6EFA               	movwf	pclath,c
  1110  000A5E  5036               	movf	_serial_write,w,c
  1111  000A60  6EFD               	movwf	tosl,c
  1112  000A62  5037               	movf	_serial_write+1,w,c
  1113  000A64  6EFE               	movwf	tosh,c
  1114  000A66  50F8               	movf	tblptru,w,c
  1115  000A68  6EFF               	movwf	tosu,c
  1116  000A6A  50FA               	movf	pclath,w,c
  1117  000A6C  0E85               	movlw	133
  1118  000A6E  0012               	return		;indir
  1119  000A70                     l3820:
  1120                           
  1121                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1122  000A70  D801               	call	u3178
  1123  000A72  D00C               	goto	l3822
  1124  000A74                     u3178:
  1125  000A74  0005               	push	
  1126  000A76  6EFA               	movwf	pclath,c
  1127  000A78  5036               	movf	_serial_write,w,c
  1128  000A7A  6EFD               	movwf	tosl,c
  1129  000A7C  5037               	movf	_serial_write+1,w,c
  1130  000A7E  6EFE               	movwf	tosh,c
  1131  000A80  50F8               	movf	tblptru,w,c
  1132  000A82  6EFF               	movwf	tosu,c
  1133  000A84  50FA               	movf	pclath,w,c
  1134  000A86  0100               	movlb	0	; () banked
  1135  000A88  51D6               	movf	sendData@whereToSend& (0+255),w,b
  1136  000A8A  0012               	return		;indir
  1137  000A8C                     l3822:
  1138                           
  1139                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1140  000A8C  D801               	call	u3188
  1141  000A8E  D00B               	goto	l3824
  1142  000A90                     u3188:
  1143  000A90  0005               	push	
  1144  000A92  6EFA               	movwf	pclath,c
  1145  000A94  5036               	movf	_serial_write,w,c
  1146  000A96  6EFD               	movwf	tosl,c
  1147  000A98  5037               	movf	_serial_write+1,w,c
  1148  000A9A  6EFE               	movwf	tosh,c
  1149  000A9C  50F8               	movf	tblptru,w,c
  1150  000A9E  6EFF               	movwf	tosu,c
  1151  000AA0  50FA               	movf	pclath,w,c
  1152  000AA2  503F               	movf	_moduleAddress,w,c
  1153  000AA4  0012               	return		;indir
  1154  000AA6                     l3824:
  1155                           
  1156                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1157  000AA6  D801               	call	u3198
  1158  000AA8  D00C               	goto	l3826
  1159  000AAA                     u3198:
  1160  000AAA  0005               	push	
  1161  000AAC  6EFA               	movwf	pclath,c
  1162  000AAE  5036               	movf	_serial_write,w,c
  1163  000AB0  6EFD               	movwf	tosl,c
  1164  000AB2  5037               	movf	_serial_write+1,w,c
  1165  000AB4  6EFE               	movwf	tosh,c
  1166  000AB6  50F8               	movf	tblptru,w,c
  1167  000AB8  6EFF               	movwf	tosu,c
  1168  000ABA  50FA               	movf	pclath,w,c
  1169  000ABC  0101               	movlb	1	; () banked
  1170  000ABE  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1171  000AC0  0012               	return		;indir
  1172  000AC2                     l3826:
  1173                           
  1174                           ;FastTransfer.c: 66: int i;
  1175                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1176  000AC2  0E00               	movlw	0
  1177  000AC4  0100               	movlb	0	; () banked
  1178  000AC6  6FD9               	movwf	(sendData@i+1)& (0+255),b
  1179  000AC8  0E00               	movlw	0
  1180  000ACA  6FD8               	movwf	sendData@i& (0+255),b
  1181  000ACC  D018               	goto	l3832
  1182  000ACE                     l3828:
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1186  000ACE  D801               	call	u3208
  1187  000AD0  D013               	goto	l3830
  1188  000AD2                     u3208:
  1189  000AD2  0005               	push	
  1190  000AD4  6EFA               	movwf	pclath,c
  1191  000AD6  5036               	movf	_serial_write,w,c
  1192  000AD8  6EFD               	movwf	tosl,c
  1193  000ADA  5037               	movf	_serial_write+1,w,c
  1194  000ADC  6EFE               	movwf	tosh,c
  1195  000ADE  50F8               	movf	tblptru,w,c
  1196  000AE0  6EFF               	movwf	tosu,c
  1197  000AE2  50FA               	movf	pclath,w,c
  1198  000AE4  0100               	movlb	0	; () banked
  1199  000AE6  51D8               	movf	sendData@i& (0+255),w,b
  1200  000AE8  242E               	addwf	_sendStructAddress,w,c
  1201  000AEA  6ED9               	movwf	fsr2l,c
  1202  000AEC  0100               	movlb	0	; () banked
  1203  000AEE  51D9               	movf	(sendData@i+1)& (0+255),w,b
  1204  000AF0  202F               	addwfc	_sendStructAddress+1,w,c
  1205  000AF2  6EDA               	movwf	fsr2h,c
  1206  000AF4  50DF               	movf	indf2,w,c
  1207  000AF6  0012               	return		;indir
  1208  000AF8                     l3830:
  1209  000AF8  0100               	movlb	0	; () banked
  1210  000AFA  4BD8               	infsnz	sendData@i& (0+255),f,b
  1211  000AFC  2BD9               	incf	(sendData@i+1)& (0+255),f,b
  1212  000AFE                     l3832:
  1213                           
  1214                           ; BSR set to: 0
  1215  000AFE  0101               	movlb	1	; () banked
  1216  000B00  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1217  000B02  0100               	movlb	0	; () banked
  1218  000B04  5DD8               	subwf	sendData@i& (0+255),w,b
  1219  000B06  0100               	movlb	0	; () banked
  1220  000B08  51D9               	movf	(sendData@i+1)& (0+255),w,b
  1221  000B0A  0A80               	xorlw	128
  1222  000B0C  0100               	movlb	0	; () banked
  1223  000B0E  6FD5               	movwf	??_sendData& (0+255),b
  1224  000B10  0101               	movlb	1	; () banked
  1225  000B12  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1226  000B14  0A80               	xorlw	128
  1227  000B16  0100               	movlb	0	; () banked
  1228  000B18  59D5               	subwfb	??_sendData& (0+255),w,b
  1229  000B1A  A0D8               	btfss	status,0,c
  1230  000B1C  D7D8               	goto	l3828
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;FastTransfer.c: 69: }
  1234                           ;FastTransfer.c: 72: serial_write(CS);
  1235                           
  1236                           ; BSR set to: 0
  1237  000B1E  D801               	call	u3228
  1238  000B20  D00C               	goto	l3836
  1239  000B22                     u3228:
  1240  000B22  0005               	push	
  1241  000B24  6EFA               	movwf	pclath,c
  1242  000B26  5036               	movf	_serial_write,w,c
  1243  000B28  6EFD               	movwf	tosl,c
  1244  000B2A  5037               	movf	_serial_write+1,w,c
  1245  000B2C  6EFE               	movwf	tosh,c
  1246  000B2E  50F8               	movf	tblptru,w,c
  1247  000B30  6EFF               	movwf	tosu,c
  1248  000B32  50FA               	movf	pclath,w,c
  1249  000B34  0100               	movlb	0	; () banked
  1250  000B36  51D7               	movf	sendData@CS& (0+255),w,b
  1251  000B38  0012               	return		;indir
  1252  000B3A                     l3836:
  1253                           
  1254                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1255  000B3A  0EC0               	movlw	low _crc_buffer
  1256  000B3C  6E1B               	movwf	crcBufS_put@_this,c
  1257  000B3E  0E00               	movlw	high _crc_buffer
  1258  000B40  6E1C               	movwf	crcBufS_put@_this+1,c
  1259  000B42  C0D6  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1260  000B46  C0D7  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1261  000B4A  0E00               	movlw	0
  1262  000B4C  6E1F               	movwf	crcBufS_put@status,c
  1263  000B4E  ECC9  F008         	call	_crcBufS_put
  1264                           
  1265                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1266  000B52  0E30               	movlw	low _ring_buffer
  1267  000B54  0100               	movlb	0	; () banked
  1268  000B56  6FD1               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1269  000B58  0E01               	movlw	high _ring_buffer
  1270  000B5A  0100               	movlb	0	; () banked
  1271  000B5C  6FD2               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1272  000B5E  0E00               	movlw	0
  1273  000B60  0100               	movlb	0	; () banked
  1274  000B62  6FD4               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1275  000B64  0E01               	movlw	1
  1276  000B66  6FD3               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1277  000B68  ECC1  F00B         	call	_FastTransfer_buffer_flush	;wreg free
  1278  000B6C  0012               	return		;funcret
  1279  000B6E                     __end_of_sendData:
  1280                           	opt stack 0
  1281                           tosu	equ	0xFFF
  1282                           tosh	equ	0xFFE
  1283                           tosl	equ	0xFFD
  1284                           pclath	equ	0xFFA
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           intcon	equ	0xFF2
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           indf2	equ	0xFDF
  1293                           fsr2h	equ	0xFDA
  1294                           fsr2l	equ	0xFD9
  1295                           status	equ	0xFD8
  1296                           
  1297 ;; *************** function _crcBufS_put *****************
  1298 ;; Defined at:
  1299 ;;		line 321 in file "FastTransfer.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1302 ;;		 -> crc_buffer(17), 
  1303 ;;  address         1   28[COMRAM] unsigned char 
  1304 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1305 ;;  status          1   30[COMRAM] unsigned char 
  1306 ;; Auto vars:     Size  Location     Type
  1307 ;;		None
  1308 ;; Return value:  Size  Location     Type
  1309 ;;		None               void
  1310 ;; Registers used:
  1311 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1317 ;;      Params:         5       0       0       0       0       0       0
  1318 ;;      Locals:         0       0       0       0       0       0       0
  1319 ;;      Temps:          2       0       0       0       0       0       0
  1320 ;;      Totals:         7       0       0       0       0       0       0
  1321 ;;Total ram usage:        7 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    4
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_sendData
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           	psect	text4
  1332  001192                     __ptext4:
  1333                           	opt stack 0
  1334  001192                     _crcBufS_put:
  1335                           	opt stack 23
  1336                           
  1337                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1338                           
  1339                           ;incstack = 0
  1340  001192  EE20 F00F          	lfsr	2,15
  1341  001196  501B               	movf	crcBufS_put@_this,w,c
  1342  001198  26D9               	addwf	fsr2l,f,c
  1343  00119A  501C               	movf	crcBufS_put@_this+1,w,c
  1344  00119C  22DA               	addwfc	fsr2h,f,c
  1345  00119E  CFDE F020          	movff	postinc2,??_crcBufS_put
  1346  0011A2  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1347  0011A6  5020               	movf	??_crcBufS_put,w,c
  1348  0011A8  241B               	addwf	crcBufS_put@_this,w,c
  1349  0011AA  6ED9               	movwf	fsr2l,c
  1350  0011AC  5021               	movf	??_crcBufS_put+1,w,c
  1351  0011AE  201C               	addwfc	crcBufS_put@_this+1,w,c
  1352  0011B0  6EDA               	movwf	fsr2h,c
  1353  0011B2  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1354                           
  1355                           ;FastTransfer.c: 323: _this->head++;
  1356  0011B6  EE20 F00F          	lfsr	2,15
  1357  0011BA  501B               	movf	crcBufS_put@_this,w,c
  1358  0011BC  26D9               	addwf	fsr2l,f,c
  1359  0011BE  501C               	movf	crcBufS_put@_this+1,w,c
  1360  0011C0  22DA               	addwfc	fsr2h,f,c
  1361  0011C2  2ADE               	incf	postinc2,f,c
  1362  0011C4  0E00               	movlw	0
  1363  0011C6  22DD               	addwfc	postdec2,f,c
  1364                           
  1365                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1366  0011C8  EE20 F00F          	lfsr	2,15
  1367  0011CC  501B               	movf	crcBufS_put@_this,w,c
  1368  0011CE  26D9               	addwf	fsr2l,f,c
  1369  0011D0  501C               	movf	crcBufS_put@_this+1,w,c
  1370  0011D2  22DA               	addwfc	fsr2h,f,c
  1371  0011D4  CFDE F020          	movff	postinc2,??_crcBufS_put
  1372  0011D8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1373  0011DC  5020               	movf	??_crcBufS_put,w,c
  1374  0011DE  241B               	addwf	crcBufS_put@_this,w,c
  1375  0011E0  6ED9               	movwf	fsr2l,c
  1376  0011E2  5021               	movf	??_crcBufS_put+1,w,c
  1377  0011E4  201C               	addwfc	crcBufS_put@_this+1,w,c
  1378  0011E6  6EDA               	movwf	fsr2h,c
  1379  0011E8  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1380                           
  1381                           ;FastTransfer.c: 325: _this->head++;
  1382  0011EC  EE20 F00F          	lfsr	2,15
  1383  0011F0  501B               	movf	crcBufS_put@_this,w,c
  1384  0011F2  26D9               	addwf	fsr2l,f,c
  1385  0011F4  501C               	movf	crcBufS_put@_this+1,w,c
  1386  0011F6  22DA               	addwfc	fsr2h,f,c
  1387  0011F8  2ADE               	incf	postinc2,f,c
  1388  0011FA  0E00               	movlw	0
  1389  0011FC  22DD               	addwfc	postdec2,f,c
  1390                           
  1391                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1392  0011FE  EE20 F00F          	lfsr	2,15
  1393  001202  501B               	movf	crcBufS_put@_this,w,c
  1394  001204  26D9               	addwf	fsr2l,f,c
  1395  001206  501C               	movf	crcBufS_put@_this+1,w,c
  1396  001208  22DA               	addwfc	fsr2h,f,c
  1397  00120A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1398  00120E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1399  001212  5020               	movf	??_crcBufS_put,w,c
  1400  001214  241B               	addwf	crcBufS_put@_this,w,c
  1401  001216  6ED9               	movwf	fsr2l,c
  1402  001218  5021               	movf	??_crcBufS_put+1,w,c
  1403  00121A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1404  00121C  6EDA               	movwf	fsr2h,c
  1405  00121E  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1406                           
  1407                           ;FastTransfer.c: 327: _this->head++;
  1408  001222  EE20 F00F          	lfsr	2,15
  1409  001226  501B               	movf	crcBufS_put@_this,w,c
  1410  001228  26D9               	addwf	fsr2l,f,c
  1411  00122A  501C               	movf	crcBufS_put@_this+1,w,c
  1412  00122C  22DA               	addwfc	fsr2h,f,c
  1413  00122E  2ADE               	incf	postinc2,f,c
  1414  001230  0E00               	movlw	0
  1415  001232  22DD               	addwfc	postdec2,f,c
  1416                           
  1417                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1418  001234  EE20 F00F          	lfsr	2,15
  1419  001238  501B               	movf	crcBufS_put@_this,w,c
  1420  00123A  26D9               	addwf	fsr2l,f,c
  1421  00123C  501C               	movf	crcBufS_put@_this+1,w,c
  1422  00123E  22DA               	addwfc	fsr2h,f,c
  1423  001240  0E01               	movlw	1
  1424  001242  BEDB               	btfsc	plusw2,7,c
  1425  001244  0012               	return	
  1426  001246  0E01               	movlw	1
  1427  001248  50DB               	movf	plusw2,w,c
  1428  00124A  E104               	bnz	u3020
  1429  00124C  0E0F               	movlw	15
  1430  00124E  5CDE               	subwf	postinc2,w,c
  1431  001250  A0D8               	btfss	status,0,c
  1432  001252  0012               	return	
  1433  001254                     u3020:
  1434                           
  1435                           ;FastTransfer.c: 329: _this->head = 0;
  1436  001254  EE20 F00F          	lfsr	2,15
  1437  001258  501B               	movf	crcBufS_put@_this,w,c
  1438  00125A  26D9               	addwf	fsr2l,f,c
  1439  00125C  501C               	movf	crcBufS_put@_this+1,w,c
  1440  00125E  22DA               	addwfc	fsr2h,f,c
  1441  001260  0E00               	movlw	0
  1442  001262  6EDE               	movwf	postinc2,c
  1443  001264  0E00               	movlw	0
  1444  001266  6EDD               	movwf	postdec2,c
  1445  001268  0012               	return	
  1446  00126A                     __end_of_crcBufS_put:
  1447                           	opt stack 0
  1448                           tosu	equ	0xFFF
  1449                           tosh	equ	0xFFE
  1450                           tosl	equ	0xFFD
  1451                           pclath	equ	0xFFA
  1452                           tblptru	equ	0xFF8
  1453                           tblptrh	equ	0xFF7
  1454                           tblptrl	equ	0xFF6
  1455                           tablat	equ	0xFF5
  1456                           intcon	equ	0xFF2
  1457                           postinc0	equ	0xFEE
  1458                           wreg	equ	0xFE8
  1459                           indf2	equ	0xFDF
  1460                           postinc2	equ	0xFDE
  1461                           postdec2	equ	0xFDD
  1462                           plusw2	equ	0xFDB
  1463                           fsr2h	equ	0xFDA
  1464                           fsr2l	equ	0xFD9
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _FastTransfer_buffer_flush *****************
  1468 ;; Defined at:
  1469 ;;		line 261 in file "FastTransfer.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  1472 ;;		 -> ring_buffer(206), 
  1473 ;;  clearBuffer     2    2[BANK0 ] const int 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;		None               void
  1478 ;; Registers used:
  1479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1485 ;;      Params:         0       4       0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0       0       0
  1487 ;;      Temps:          0       0       0       0       0       0       0
  1488 ;;      Totals:         0       4       0       0       0       0       0
  1489 ;;Total ram usage:        4 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    5
  1492 ;; This function calls:
  1493 ;;		_memset
  1494 ;; This function is called by:
  1495 ;;		_sendData
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           	psect	text5
  1500  001782                     __ptext5:
  1501                           	opt stack 0
  1502  001782                     _FastTransfer_buffer_flush:
  1503                           	opt stack 22
  1504                           
  1505                           ;FastTransfer.c: 262: _this->count = 0;
  1506                           
  1507                           ;incstack = 0
  1508  001782  0100               	movlb	0	; () banked
  1509  001784  EE20 F0CC          	lfsr	2,204
  1510  001788  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1511  00178A  26D9               	addwf	fsr2l,f,c
  1512  00178C  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1513  00178E  22DA               	addwfc	fsr2h,f,c
  1514  001790  0E00               	movlw	0
  1515  001792  6EDE               	movwf	postinc2,c
  1516  001794  0E00               	movlw	0
  1517  001796  6EDD               	movwf	postdec2,c
  1518                           
  1519                           ;FastTransfer.c: 263: _this->head = 0;
  1520  001798  0100               	movlb	0	; () banked
  1521  00179A  EE20 F0C8          	lfsr	2,200
  1522  00179E  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1523  0017A0  26D9               	addwf	fsr2l,f,c
  1524  0017A2  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1525  0017A4  22DA               	addwfc	fsr2h,f,c
  1526  0017A6  0E00               	movlw	0
  1527  0017A8  6EDE               	movwf	postinc2,c
  1528  0017AA  0E00               	movlw	0
  1529  0017AC  6EDD               	movwf	postdec2,c
  1530                           
  1531                           ;FastTransfer.c: 264: _this->tail = 0;
  1532  0017AE  0100               	movlb	0	; () banked
  1533  0017B0  EE20 F0CA          	lfsr	2,202
  1534  0017B4  51D1               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  1535  0017B6  26D9               	addwf	fsr2l,f,c
  1536  0017B8  51D2               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  1537  0017BA  22DA               	addwfc	fsr2h,f,c
  1538  0017BC  0E00               	movlw	0
  1539  0017BE  6EDE               	movwf	postinc2,c
  1540  0017C0  0E00               	movlw	0
  1541  0017C2  6EDD               	movwf	postdec2,c
  1542                           
  1543                           ; BSR set to: 0
  1544                           ;FastTransfer.c: 265: if (clearBuffer) {
  1545  0017C4  0100               	movlb	0	; () banked
  1546  0017C6  51D3               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  1547  0017C8  0100               	movlb	0	; () banked
  1548  0017CA  11D4               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  1549  0017CC  B4D8               	btfsc	status,2,c
  1550  0017CE  0012               	return	
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1554  0017D0  C0D1  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1555  0017D4  C0D2  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1556  0017D8  0E00               	movlw	0
  1557  0017DA  6E1E               	movwf	memset@c+1,c
  1558  0017DC  0E00               	movlw	0
  1559  0017DE  6E1D               	movwf	memset@c,c
  1560  0017E0  0E00               	movlw	0
  1561  0017E2  6E20               	movwf	memset@n+1,c
  1562  0017E4  0EC8               	movlw	200
  1563  0017E6  6E1F               	movwf	memset@n,c
  1564  0017E8  EC25  F00E         	call	_memset	;wreg free
  1565  0017EC  0012               	return	
  1566  0017EE                     __end_of_FastTransfer_buffer_flush:
  1567                           	opt stack 0
  1568                           tosu	equ	0xFFF
  1569                           tosh	equ	0xFFE
  1570                           tosl	equ	0xFFD
  1571                           pclath	equ	0xFFA
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           intcon	equ	0xFF2
  1577                           postinc0	equ	0xFEE
  1578                           wreg	equ	0xFE8
  1579                           indf2	equ	0xFDF
  1580                           postinc2	equ	0xFDE
  1581                           postdec2	equ	0xFDD
  1582                           plusw2	equ	0xFDB
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _ToSend *****************
  1588 ;; Defined at:
  1589 ;;		line 216 in file "FastTransfer.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;  where           1    wreg     unsigned char 
  1592 ;;  what            2    2[BANK0 ] unsigned int 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;  where           1    4[BANK0 ] unsigned char 
  1595 ;; Return value:  Size  Location     Type
  1596 ;;		None               void
  1597 ;; Registers used:
  1598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1604 ;;      Params:         0       2       0       0       0       0       0
  1605 ;;      Locals:         0       1       0       0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0
  1607 ;;      Totals:         0       3       0       0       0       0       0
  1608 ;;Total ram usage:        3 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    6
  1611 ;; This function calls:
  1612 ;;		_FastTransfer_buffer_put
  1613 ;; This function is called by:
  1614 ;;		_respondECU
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text6
  1619  001D18                     __ptext6:
  1620                           	opt stack 0
  1621  001D18                     _ToSend:
  1622                           	opt stack 22
  1623                           
  1624                           ;incstack = 0
  1625                           ;ToSend@where stored from wreg
  1626  001D18  0100               	movlb	0	; () banked
  1627  001D1A  6FD5               	movwf	ToSend@where& (0+255),b
  1628                           
  1629                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1630  001D1C  0E30               	movlw	low _ring_buffer
  1631  001D1E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1632  001D20  0E01               	movlw	high _ring_buffer
  1633  001D22  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1634  001D24  C0D5  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1635  001D28  C0D3  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1636  001D2C  C0D4  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1637  001D30  ECA9  F003         	call	_FastTransfer_buffer_put	;wreg free
  1638  001D34  0012               	return		;funcret
  1639  001D36                     __end_of_ToSend:
  1640                           	opt stack 0
  1641                           tosu	equ	0xFFF
  1642                           tosh	equ	0xFFE
  1643                           tosl	equ	0xFFD
  1644                           pclath	equ	0xFFA
  1645                           tblptru	equ	0xFF8
  1646                           tblptrh	equ	0xFF7
  1647                           tblptrl	equ	0xFF6
  1648                           tablat	equ	0xFF5
  1649                           intcon	equ	0xFF2
  1650                           postinc0	equ	0xFEE
  1651                           wreg	equ	0xFE8
  1652                           indf2	equ	0xFDF
  1653                           postinc2	equ	0xFDE
  1654                           postdec2	equ	0xFDD
  1655                           plusw2	equ	0xFDB
  1656                           fsr2h	equ	0xFDA
  1657                           fsr2l	equ	0xFD9
  1658                           status	equ	0xFD8
  1659                           
  1660 ;; *************** function _FastTransfer_buffer_put *****************
  1661 ;; Defined at:
  1662 ;;		line 223 in file "FastTransfer.c"
  1663 ;; Parameters:    Size  Location     Type
  1664 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1665 ;;		 -> ring_buffer(206), 
  1666 ;;  towhere         1   34[COMRAM] unsigned char 
  1667 ;;  towhat          2   35[COMRAM] unsigned int 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;		None
  1670 ;; Return value:  Size  Location     Type
  1671 ;;		None               void
  1672 ;; Registers used:
  1673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1674 ;; Tracked objects:
  1675 ;;		On entry : 0/0
  1676 ;;		On exit  : 0/0
  1677 ;;		Unchanged: 0/0
  1678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1679 ;;      Params:         5       0       0       0       0       0       0
  1680 ;;      Locals:         0       0       0       0       0       0       0
  1681 ;;      Temps:          0       2       0       0       0       0       0
  1682 ;;      Totals:         5       2       0       0       0       0       0
  1683 ;;Total ram usage:        7 bytes
  1684 ;; Hardware stack levels used:    1
  1685 ;; Hardware stack levels required when called:    5
  1686 ;; This function calls:
  1687 ;;		_FastTransfer_buffer_modulo_inc
  1688 ;; This function is called by:
  1689 ;;		_ToSend
  1690 ;; This function uses a non-reentrant model
  1691 ;;
  1692                           
  1693                           	psect	text7
  1694  000752                     __ptext7:
  1695                           	opt stack 0
  1696  000752                     _FastTransfer_buffer_put:
  1697                           	opt stack 22
  1698                           
  1699                           ;FastTransfer.c: 225: group.integer = towhat;
  1700                           
  1701                           ;incstack = 0
  1702  000752  C024  F026         	movff	FastTransfer_buffer_put@towhat,_group
  1703  000756  C025  F027         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1704                           
  1705                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1706  00075A  EE20 F0CC          	lfsr	2,204
  1707  00075E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1708  000760  26D9               	addwf	fsr2l,f,c
  1709  000762  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1710  000764  22DA               	addwfc	fsr2h,f,c
  1711  000766  0E01               	movlw	1
  1712  000768  BEDB               	btfsc	plusw2,7,c
  1713  00076A  D007               	goto	l3696
  1714  00076C  0E01               	movlw	1
  1715  00076E  50DB               	movf	plusw2,w,c
  1716  000770  E103               	bnz	u3041
  1717  000772  0EC5               	movlw	197
  1718  000774  5CDE               	subwf	postinc2,w,c
  1719  000776  B0D8               	btfsc	status,0,c
  1720  000778                     u3041:
  1721  000778  0012               	return	
  1722  00077A                     l3696:
  1723                           
  1724                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1725  00077A  EE20 F0C8          	lfsr	2,200
  1726  00077E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1727  000780  26D9               	addwf	fsr2l,f,c
  1728  000782  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1729  000784  22DA               	addwfc	fsr2h,f,c
  1730  000786  CFDE F0D1          	movff	postinc2,??_FastTransfer_buffer_put
  1731  00078A  CFDD F0D2          	movff	postdec2,??_FastTransfer_buffer_put+1
  1732  00078E  0100               	movlb	0	; () banked
  1733  000790  51D1               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1734  000792  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1735  000794  6ED9               	movwf	fsr2l,c
  1736  000796  0100               	movlb	0	; () banked
  1737  000798  51D2               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1738  00079A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1739  00079C  6EDA               	movwf	fsr2h,c
  1740  00079E  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1741                           
  1742                           ; BSR set to: 0
  1743                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1744  0007A2  EE20 F0C8          	lfsr	2,200
  1745  0007A6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1746  0007A8  26D9               	addwf	fsr2l,f,c
  1747  0007AA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1748  0007AC  22DA               	addwfc	fsr2h,f,c
  1749  0007AE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1750  0007B2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1751  0007B6  0E00               	movlw	0
  1752  0007B8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1753  0007BA  0EC8               	movlw	200
  1754  0007BC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1755  0007BE  EC3B  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1756  0007C2  EE20 F0C8          	lfsr	2,200
  1757  0007C6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1758  0007C8  26D9               	addwf	fsr2l,f,c
  1759  0007CA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1760  0007CC  22DA               	addwfc	fsr2h,f,c
  1761  0007CE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1762  0007D2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1763                           
  1764                           ;FastTransfer.c: 230: ++_this->count;
  1765  0007D6  EE20 F0CC          	lfsr	2,204
  1766  0007DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1767  0007DC  26D9               	addwf	fsr2l,f,c
  1768  0007DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1769  0007E0  22DA               	addwfc	fsr2h,f,c
  1770  0007E2  2ADE               	incf	postinc2,f,c
  1771  0007E4  0E00               	movlw	0
  1772  0007E6  22DD               	addwfc	postdec2,f,c
  1773                           
  1774                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1775  0007E8  EE20 F0C8          	lfsr	2,200
  1776  0007EC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1777  0007EE  26D9               	addwf	fsr2l,f,c
  1778  0007F0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1779  0007F2  22DA               	addwfc	fsr2h,f,c
  1780  0007F4  CFDE F0D1          	movff	postinc2,??_FastTransfer_buffer_put
  1781  0007F8  CFDD F0D2          	movff	postdec2,??_FastTransfer_buffer_put+1
  1782  0007FC  0100               	movlb	0	; () banked
  1783  0007FE  51D1               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1784  000800  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1785  000802  6ED9               	movwf	fsr2l,c
  1786  000804  0100               	movlb	0	; () banked
  1787  000806  51D2               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1788  000808  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1789  00080A  6EDA               	movwf	fsr2h,c
  1790  00080C  C026  FFDF         	movff	_group,indf2
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1794  000810  EE20 F0C8          	lfsr	2,200
  1795  000814  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1796  000816  26D9               	addwf	fsr2l,f,c
  1797  000818  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1798  00081A  22DA               	addwfc	fsr2h,f,c
  1799  00081C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1800  000820  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1801  000824  0E00               	movlw	0
  1802  000826  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1803  000828  0EC8               	movlw	200
  1804  00082A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1805  00082C  EC3B  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1806  000830  EE20 F0C8          	lfsr	2,200
  1807  000834  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1808  000836  26D9               	addwf	fsr2l,f,c
  1809  000838  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1810  00083A  22DA               	addwfc	fsr2h,f,c
  1811  00083C  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1812  000840  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1813                           
  1814                           ;FastTransfer.c: 233: ++_this->count;
  1815  000844  EE20 F0CC          	lfsr	2,204
  1816  000848  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1817  00084A  26D9               	addwf	fsr2l,f,c
  1818  00084C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1819  00084E  22DA               	addwfc	fsr2h,f,c
  1820  000850  2ADE               	incf	postinc2,f,c
  1821  000852  0E00               	movlw	0
  1822  000854  22DD               	addwfc	postdec2,f,c
  1823                           
  1824                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1825  000856  EE20 F0C8          	lfsr	2,200
  1826  00085A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1827  00085C  26D9               	addwf	fsr2l,f,c
  1828  00085E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1829  000860  22DA               	addwfc	fsr2h,f,c
  1830  000862  CFDE F0D1          	movff	postinc2,??_FastTransfer_buffer_put
  1831  000866  CFDD F0D2          	movff	postdec2,??_FastTransfer_buffer_put+1
  1832  00086A  0100               	movlb	0	; () banked
  1833  00086C  51D1               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1834  00086E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1835  000870  6ED9               	movwf	fsr2l,c
  1836  000872  0100               	movlb	0	; () banked
  1837  000874  51D2               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1838  000876  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1839  000878  6EDA               	movwf	fsr2h,c
  1840  00087A  C027  FFDF         	movff	_group+1,indf2
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1844  00087E  EE20 F0C8          	lfsr	2,200
  1845  000882  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1846  000884  26D9               	addwf	fsr2l,f,c
  1847  000886  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1848  000888  22DA               	addwfc	fsr2h,f,c
  1849  00088A  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1850  00088E  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1851  000892  0E00               	movlw	0
  1852  000894  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1853  000896  0EC8               	movlw	200
  1854  000898  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1855  00089A  EC3B  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1856  00089E  EE20 F0C8          	lfsr	2,200
  1857  0008A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1858  0008A4  26D9               	addwf	fsr2l,f,c
  1859  0008A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1860  0008A8  22DA               	addwfc	fsr2h,f,c
  1861  0008AA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1862  0008AE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1863                           
  1864                           ;FastTransfer.c: 236: ++_this->count;
  1865  0008B2  EE20 F0CC          	lfsr	2,204
  1866  0008B6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1867  0008B8  26D9               	addwf	fsr2l,f,c
  1868  0008BA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1869  0008BC  22DA               	addwfc	fsr2h,f,c
  1870  0008BE  2ADE               	incf	postinc2,f,c
  1871  0008C0  0E00               	movlw	0
  1872  0008C2  22DD               	addwfc	postdec2,f,c
  1873  0008C4  0012               	return	
  1874  0008C6                     __end_of_FastTransfer_buffer_put:
  1875                           	opt stack 0
  1876                           tosu	equ	0xFFF
  1877                           tosh	equ	0xFFE
  1878                           tosl	equ	0xFFD
  1879                           pclath	equ	0xFFA
  1880                           tblptru	equ	0xFF8
  1881                           tblptrh	equ	0xFF7
  1882                           tblptrl	equ	0xFF6
  1883                           tablat	equ	0xFF5
  1884                           intcon	equ	0xFF2
  1885                           postinc0	equ	0xFEE
  1886                           wreg	equ	0xFE8
  1887                           indf2	equ	0xFDF
  1888                           postinc2	equ	0xFDE
  1889                           postdec2	equ	0xFDD
  1890                           plusw2	equ	0xFDB
  1891                           fsr2h	equ	0xFDA
  1892                           fsr2l	equ	0xFD9
  1893                           status	equ	0xFD8
  1894                           
  1895 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1896 ;; Defined at:
  1897 ;;		line 273 in file "FastTransfer.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  value           2   26[COMRAM] const unsigned int 
  1900 ;;  modulus         2   28[COMRAM] const unsigned int 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  my_value        2   30[COMRAM] unsigned int 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  2   26[COMRAM] unsigned int 
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1912 ;;      Params:         4       0       0       0       0       0       0
  1913 ;;      Locals:         2       0       0       0       0       0       0
  1914 ;;      Temps:          0       0       0       0       0       0       0
  1915 ;;      Totals:         6       0       0       0       0       0       0
  1916 ;;Total ram usage:        6 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    4
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_FastTransfer_buffer_put
  1923 ;;		_FastTransfer_buffer_get
  1924 ;; This function uses a non-reentrant model
  1925 ;;
  1926                           
  1927                           	psect	text8
  1928  001C76                     __ptext8:
  1929                           	opt stack 0
  1930  001C76                     _FastTransfer_buffer_modulo_inc:
  1931                           	opt stack 22
  1932                           
  1933                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  1934                           
  1935                           ;incstack = 0
  1936  001C76  0E01               	movlw	1
  1937  001C78  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1938  001C7A  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1939  001C7C  0E00               	movlw	0
  1940  001C7E  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1941  001C80  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1942                           
  1943                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  1944  001C82  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1945  001C84  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1946  001C86  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1947  001C88  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1948  001C8A  A0D8               	btfss	status,0,c
  1949  001C8C  D004               	goto	l3616
  1950                           
  1951                           ;FastTransfer.c: 276: my_value = 0;
  1952  001C8E  0E00               	movlw	0
  1953  001C90  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1954  001C92  0E00               	movlw	0
  1955  001C94  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1956  001C96                     l3616:
  1957                           
  1958                           ;FastTransfer.c: 277: }
  1959                           ;FastTransfer.c: 278: return (my_value);
  1960  001C96  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1961  001C9A  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1962  001C9E  0012               	return	
  1963  001CA0                     __end_of_FastTransfer_buffer_modulo_inc:
  1964                           	opt stack 0
  1965                           tosu	equ	0xFFF
  1966                           tosh	equ	0xFFE
  1967                           tosl	equ	0xFFD
  1968                           pclath	equ	0xFFA
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           intcon	equ	0xFF2
  1974                           postinc0	equ	0xFEE
  1975                           wreg	equ	0xFE8
  1976                           indf2	equ	0xFDF
  1977                           postinc2	equ	0xFDE
  1978                           postdec2	equ	0xFDD
  1979                           plusw2	equ	0xFDB
  1980                           fsr2h	equ	0xFDA
  1981                           fsr2l	equ	0xFD9
  1982                           status	equ	0xFD8
  1983                           
  1984 ;; *************** function _receiveData *****************
  1985 ;; Defined at:
  1986 ;;		line 82 in file "FastTransfer.c"
  1987 ;; Parameters:    Size  Location     Type
  1988 ;;		None
  1989 ;; Auto vars:     Size  Location     Type
  1990 ;;  holder          3   18[BANK0 ] unsigned char [3]
  1991 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  1992 ;;  holder          3   15[BANK0 ] unsigned char [3]
  1993 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  1994 ;;  u               2   23[BANK0 ] int 
  1995 ;;  r               2   25[BANK0 ] int 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      unsigned char 
  1998 ;; Registers used:
  1999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2005 ;;      Params:         0       0       0       0       0       0       0
  2006 ;;      Locals:         0      12       0       0       0       0       0
  2007 ;;      Temps:          0       6       0       0       0       0       0
  2008 ;;      Totals:         0      18       0       0       0       0       0
  2009 ;;Total ram usage:       18 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    8
  2012 ;; This function calls:
  2013 ;;		Absolute function
  2014 ;;		_CRC8
  2015 ;;		_CRCcheck
  2016 ;;		_Receive_available
  2017 ;;		_Receive_get
  2018 ;;		_Receive_peek
  2019 ;;		_Send_put
  2020 ;; This function is called by:
  2021 ;;		_updateComms
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text9
  2026  0000A4                     __ptext9:
  2027                           	opt stack 0
  2028  0000A4                     _receiveData:
  2029                           	opt stack 21
  2030                           
  2031                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2032                           
  2033                           ;incstack = 0
  2034  0000A4  5043               	movf	_rx_len,w,c
  2035  0000A6  A4D8               	btfss	status,2,c
  2036  0000A8  D0AC               	goto	l3956
  2037                           
  2038                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2039  0000AA  D801               	call	u3398
  2040  0000AC  D00A               	goto	u3399
  2041  0000AE                     u3398:
  2042  0000AE  0005               	push	
  2043  0000B0  6EFA               	movwf	pclath,c
  2044  0000B2  5030               	movf	_serial_available,w,c
  2045  0000B4  6EFD               	movwf	tosl,c
  2046  0000B6  5031               	movf	_serial_available+1,w,c
  2047  0000B8  6EFE               	movwf	tosh,c
  2048  0000BA  50F8               	movf	tblptru,w,c
  2049  0000BC  6EFF               	movwf	tosu,c
  2050  0000BE  50FA               	movf	pclath,w,c
  2051  0000C0  0012               	return		;indir
  2052  0000C2                     u3399:
  2053  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2054  0000C4  D09E               	goto	l3956
  2055  0000C6  501E               	movf	?_Receive_available+1,w,c
  2056  0000C8  E11E               	bnz	l3932
  2057  0000CA  0E05               	movlw	5
  2058  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2059  0000CE  B0D8               	btfsc	status,0,c
  2060  0000D0  D01A               	goto	l3932
  2061  0000D2  D097               	goto	l3956
  2062  0000D4                     l3924:
  2063                           
  2064                           ;FastTransfer.c: 93: alignErrorCounter++;
  2065  0000D4  0100               	movlb	0	; () banked
  2066  0000D6  4B92               	infsnz	_alignErrorCounter& (0+255),f,b
  2067  0000D8  2B93               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2071  0000DA  D801               	call	u3418
  2072  0000DC  D00A               	goto	u3419
  2073  0000DE                     u3418:
  2074  0000DE  0005               	push	
  2075  0000E0  6EFA               	movwf	pclath,c
  2076  0000E2  5030               	movf	_serial_available,w,c
  2077  0000E4  6EFD               	movwf	tosl,c
  2078  0000E6  5031               	movf	_serial_available+1,w,c
  2079  0000E8  6EFE               	movwf	tosh,c
  2080  0000EA  50F8               	movf	tblptru,w,c
  2081  0000EC  6EFF               	movwf	tosu,c
  2082  0000EE  50FA               	movf	pclath,w,c
  2083  0000F0  0012               	return		;indir
  2084  0000F2                     u3419:
  2085  0000F2  BE1E               	btfsc	?_Receive_available+1,7,c
  2086  0000F4  D006               	goto	l3928
  2087  0000F6  501E               	movf	?_Receive_available+1,w,c
  2088  0000F8  E106               	bnz	l3932
  2089  0000FA  0E05               	movlw	5
  2090  0000FC  5C1D               	subwf	?_Receive_available,w,c
  2091  0000FE  B0D8               	btfsc	status,0,c
  2092  000100  D002               	goto	l3932
  2093  000102                     l3928:
  2094                           
  2095                           ;FastTransfer.c: 95: return 0;
  2096  000102  0E00               	movlw	0
  2097  000104  0012               	return	
  2098  000106                     l3932:
  2099  000106  D801               	call	u3438
  2100  000108  D00A               	goto	u3439
  2101  00010A                     u3438:
  2102  00010A  0005               	push	
  2103  00010C  6EFA               	movwf	pclath,c
  2104  00010E  5034               	movf	_serial_read,w,c
  2105  000110  6EFD               	movwf	tosl,c
  2106  000112  5035               	movf	_serial_read+1,w,c
  2107  000114  6EFE               	movwf	tosh,c
  2108  000116  50F8               	movf	tblptru,w,c
  2109  000118  6EFF               	movwf	tosu,c
  2110  00011A  50FA               	movf	pclath,w,c
  2111  00011C  0012               	return		;indir
  2112  00011E                     u3439:
  2113  00011E  0A06               	xorlw	6
  2114  000120  A4D8               	btfss	status,2,c
  2115  000122  D7D8               	goto	l3924
  2116                           
  2117                           ;FastTransfer.c: 96: }
  2118                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2119  000124  D801               	call	u3458
  2120  000126  D00A               	goto	u3459
  2121  000128                     u3458:
  2122  000128  0005               	push	
  2123  00012A  6EFA               	movwf	pclath,c
  2124  00012C  5034               	movf	_serial_read,w,c
  2125  00012E  6EFD               	movwf	tosl,c
  2126  000130  5035               	movf	_serial_read+1,w,c
  2127  000132  6EFE               	movwf	tosh,c
  2128  000134  50F8               	movf	tblptru,w,c
  2129  000136  6EFF               	movwf	tosu,c
  2130  000138  50FA               	movf	pclath,w,c
  2131  00013A  0012               	return		;indir
  2132  00013C                     u3459:
  2133  00013C  0A85               	xorlw	133
  2134  00013E  A4D8               	btfss	status,2,c
  2135  000140  D060               	goto	l3956
  2136                           
  2137                           ;FastTransfer.c: 98: rx_address = serial_read();
  2138  000142  D801               	call	u3478
  2139  000144  D00A               	goto	u3479
  2140  000146                     u3478:
  2141  000146  0005               	push	
  2142  000148  6EFA               	movwf	pclath,c
  2143  00014A  5034               	movf	_serial_read,w,c
  2144  00014C  6EFD               	movwf	tosl,c
  2145  00014E  5035               	movf	_serial_read+1,w,c
  2146  000150  6EFE               	movwf	tosh,c
  2147  000152  50F8               	movf	tblptru,w,c
  2148  000154  6EFF               	movwf	tosu,c
  2149  000156  50FA               	movf	pclath,w,c
  2150  000158  0012               	return		;indir
  2151  00015A                     u3479:
  2152  00015A  6E41               	movwf	_rx_address,c
  2153                           
  2154                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2155  00015C  D801               	call	u3488
  2156  00015E  D00A               	goto	u3489
  2157  000160                     u3488:
  2158  000160  0005               	push	
  2159  000162  6EFA               	movwf	pclath,c
  2160  000164  5034               	movf	_serial_read,w,c
  2161  000166  6EFD               	movwf	tosl,c
  2162  000168  5035               	movf	_serial_read+1,w,c
  2163  00016A  6EFE               	movwf	tosh,c
  2164  00016C  50F8               	movf	tblptru,w,c
  2165  00016E  6EFF               	movwf	tosu,c
  2166  000170  50FA               	movf	pclath,w,c
  2167  000172  0012               	return		;indir
  2168  000174                     u3489:
  2169  000174  6E40               	movwf	_returnAddress,c
  2170                           
  2171                           ;FastTransfer.c: 100: rx_len = serial_read();
  2172  000176  D801               	call	u3498
  2173  000178  D00A               	goto	u3499
  2174  00017A                     u3498:
  2175  00017A  0005               	push	
  2176  00017C  6EFA               	movwf	pclath,c
  2177  00017E  5034               	movf	_serial_read,w,c
  2178  000180  6EFD               	movwf	tosl,c
  2179  000182  5035               	movf	_serial_read+1,w,c
  2180  000184  6EFE               	movwf	tosh,c
  2181  000186  50F8               	movf	tblptru,w,c
  2182  000188  6EFF               	movwf	tosu,c
  2183  00018A  50FA               	movf	pclath,w,c
  2184  00018C  0012               	return		;indir
  2185  00018E                     u3499:
  2186  00018E  6E43               	movwf	_rx_len,c
  2187                           
  2188                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2189  000190  503F               	movf	_moduleAddress,w,c
  2190  000192  1841               	xorwf	_rx_address,w,c
  2191  000194  B4D8               	btfsc	status,2,c
  2192  000196  D035               	goto	l3956
  2193                           
  2194                           ;FastTransfer.c: 103: addressErrorCounter++;
  2195  000198  0100               	movlb	0	; () banked
  2196  00019A  4B90               	infsnz	_addressErrorCounter& (0+255),f,b
  2197  00019C  2B91               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;FastTransfer.c: 106: int u;
  2201                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2202  00019E  0E00               	movlw	0
  2203  0001A0  0100               	movlb	0	; () banked
  2204  0001A2  6FE9               	movwf	(receiveData@u+1)& (0+255),b
  2205  0001A4  0E00               	movlw	0
  2206  0001A6  6FE8               	movwf	receiveData@u& (0+255),b
  2207  0001A8  D00F               	goto	l3948
  2208  0001AA                     l3944:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;FastTransfer.c: 108: serial_read();
  2212  0001AA  D801               	call	u3518
  2213  0001AC  D00A               	goto	l3946
  2214  0001AE                     u3518:
  2215  0001AE  0005               	push	
  2216  0001B0  6EFA               	movwf	pclath,c
  2217  0001B2  5034               	movf	_serial_read,w,c
  2218  0001B4  6EFD               	movwf	tosl,c
  2219  0001B6  5035               	movf	_serial_read+1,w,c
  2220  0001B8  6EFE               	movwf	tosh,c
  2221  0001BA  50F8               	movf	tblptru,w,c
  2222  0001BC  6EFF               	movwf	tosu,c
  2223  0001BE  50FA               	movf	pclath,w,c
  2224  0001C0  0012               	return		;indir
  2225  0001C2                     l3946:
  2226  0001C2  0100               	movlb	0	; () banked
  2227  0001C4  4BE8               	infsnz	receiveData@u& (0+255),f,b
  2228  0001C6  2BE9               	incf	(receiveData@u+1)& (0+255),f,b
  2229  0001C8                     l3948:
  2230                           
  2231                           ; BSR set to: 0
  2232  0001C8  5043               	movf	_rx_len,w,c
  2233  0001CA  0100               	movlb	0	; () banked
  2234  0001CC  6FDA               	movwf	??_receiveData& (0+255),b
  2235  0001CE  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2236  0001D0  0E01               	movlw	1
  2237  0001D2  0100               	movlb	0	; () banked
  2238  0001D4  27DA               	addwf	??_receiveData& (0+255),f,b
  2239  0001D6  0E00               	movlw	0
  2240  0001D8  23DB               	addwfc	(??_receiveData+1)& (0+255),f,b
  2241  0001DA  0100               	movlb	0	; () banked
  2242  0001DC  51E8               	movf	receiveData@u& (0+255),w,b
  2243  0001DE  0100               	movlb	0	; () banked
  2244  0001E0  5DDA               	subwf	??_receiveData& (0+255),w,b
  2245  0001E2  0100               	movlb	0	; () banked
  2246  0001E4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2247  0001E6  0A80               	xorlw	128
  2248  0001E8  0100               	movlb	0	; () banked
  2249  0001EA  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2250  0001EC  0100               	movlb	0	; () banked
  2251  0001EE  51E9               	movf	(receiveData@u+1)& (0+255),w,b
  2252  0001F0  0A80               	xorlw	128
  2253  0001F2  0100               	movlb	0	; () banked
  2254  0001F4  59DC               	subwfb	(??_receiveData+2)& (0+255),w,b
  2255  0001F6  B0D8               	btfsc	status,0,c
  2256  0001F8  D7D8               	goto	l3944
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;FastTransfer.c: 109: }
  2260                           ;FastTransfer.c: 110: rx_len = 0;
  2261                           
  2262                           ; BSR set to: 0
  2263  0001FA  0E00               	movlw	0
  2264  0001FC  6E43               	movwf	_rx_len,c
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;FastTransfer.c: 111: return 0;
  2268  0001FE  0E00               	movlw	0
  2269                           
  2270                           ; BSR set to: 0
  2271  000200  0012               	return	
  2272  000202                     l3956:
  2273                           
  2274                           ;FastTransfer.c: 112: }
  2275                           ;FastTransfer.c: 114: }
  2276                           ;FastTransfer.c: 115: }
  2277                           ;FastTransfer.c: 116: }
  2278                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2279  000202  5043               	movf	_rx_len,w,c
  2280  000204  B4D8               	btfsc	status,2,c
  2281  000206  D2A3               	goto	l4080
  2282                           
  2283                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2284  000208  5042               	movf	_rx_array_inx,w,c
  2285  00020A  A4D8               	btfss	status,2,c
  2286  00020C  D043               	goto	l3980
  2287  00020E                     l3962:
  2288  00020E  D801               	call	u3558
  2289  000210  D00A               	goto	u3559
  2290  000212                     u3558:
  2291  000212  0005               	push	
  2292  000214  6EFA               	movwf	pclath,c
  2293  000216  5030               	movf	_serial_available,w,c
  2294  000218  6EFD               	movwf	tosl,c
  2295  00021A  5031               	movf	_serial_available+1,w,c
  2296  00021C  6EFE               	movwf	tosh,c
  2297  00021E  50F8               	movf	tblptru,w,c
  2298  000220  6EFF               	movwf	tosu,c
  2299  000222  50FA               	movf	pclath,w,c
  2300  000224  0012               	return		;indir
  2301  000226                     u3559:
  2302  000226  BE1E               	btfsc	?_Receive_available+1,7,c
  2303  000228  D7F2               	goto	l3962
  2304  00022A  501E               	movf	?_Receive_available+1,w,c
  2305  00022C  E103               	bnz	l3964
  2306  00022E  041D               	decf	?_Receive_available,w,c
  2307  000230  A0D8               	btfss	status,0,c
  2308  000232  D7ED               	goto	l3962
  2309  000234                     l3964:
  2310                           
  2311                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2312  000234  D801               	call	u3578
  2313  000236  D00A               	goto	u3579
  2314  000238                     u3578:
  2315  000238  0005               	push	
  2316  00023A  6EFA               	movwf	pclath,c
  2317  00023C  5032               	movf	_serial_peek,w,c
  2318  00023E  6EFD               	movwf	tosl,c
  2319  000240  5033               	movf	_serial_peek+1,w,c
  2320  000242  6EFE               	movwf	tosh,c
  2321  000244  50F8               	movf	tblptru,w,c
  2322  000246  6EFF               	movwf	tosu,c
  2323  000248  50FA               	movf	pclath,w,c
  2324  00024A  0012               	return		;indir
  2325  00024C                     u3579:
  2326  00024C  0AFF               	xorlw	255
  2327  00024E  A4D8               	btfss	status,2,c
  2328  000250  D021               	goto	l3980
  2329                           
  2330                           ;FastTransfer.c: 125: CRCcheck();
  2331  000252  EC63  F004         	call	_CRCcheck	;wreg free
  2332                           
  2333                           ;FastTransfer.c: 126: rx_len = 0;
  2334  000256  0E00               	movlw	0
  2335  000258  6E43               	movwf	_rx_len,c
  2336                           
  2337                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2338  00025A  0E00               	movlw	0
  2339  00025C  6E42               	movwf	_rx_array_inx,c
  2340                           
  2341                           ;FastTransfer.c: 128: return 0;
  2342  00025E  0E00               	movlw	0
  2343  000260  0012               	return	
  2344  000262                     l3976:
  2345                           
  2346                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2347  000262  D801               	call	u3598
  2348  000264  D00A               	goto	u3599
  2349  000266                     u3598:
  2350  000266  0005               	push	
  2351  000268  6EFA               	movwf	pclath,c
  2352  00026A  5034               	movf	_serial_read,w,c
  2353  00026C  6EFD               	movwf	tosl,c
  2354  00026E  5035               	movf	_serial_read+1,w,c
  2355  000270  6EFE               	movwf	tosh,c
  2356  000272  50F8               	movf	tblptru,w,c
  2357  000274  6EFF               	movwf	tosu,c
  2358  000276  50FA               	movf	pclath,w,c
  2359  000278  0012               	return		;indir
  2360  00027A                     u3599:
  2361  00027A  0100               	movlb	0	; () banked
  2362  00027C  6FDA               	movwf	??_receiveData& (0+255),b
  2363  00027E  5042               	movf	_rx_array_inx,w,c
  2364  000280  0D01               	mullw	1
  2365  000282  0E00               	movlw	low _rx_buffer
  2366  000284  24F3               	addwf	prodl,w,c
  2367  000286  6ED9               	movwf	fsr2l,c
  2368  000288  0E02               	movlw	high _rx_buffer
  2369  00028A  20F4               	addwfc	prodh,w,c
  2370  00028C  6EDA               	movwf	fsr2h,c
  2371  00028E  C0DA  FFDF         	movff	??_receiveData,indf2
  2372                           
  2373                           ; BSR set to: 0
  2374  000292  2A42               	incf	_rx_array_inx,f,c
  2375  000294                     l3980:
  2376  000294  D801               	call	u3608
  2377  000296  D00A               	goto	u3609
  2378  000298                     u3608:
  2379  000298  0005               	push	
  2380  00029A  6EFA               	movwf	pclath,c
  2381  00029C  5030               	movf	_serial_available,w,c
  2382  00029E  6EFD               	movwf	tosl,c
  2383  0002A0  5031               	movf	_serial_available+1,w,c
  2384  0002A2  6EFE               	movwf	tosh,c
  2385  0002A4  50F8               	movf	tblptru,w,c
  2386  0002A6  6EFF               	movwf	tosu,c
  2387  0002A8  50FA               	movf	pclath,w,c
  2388  0002AA  0012               	return		;indir
  2389  0002AC                     u3609:
  2390  0002AC  501D               	movf	?_Receive_available,w,c
  2391  0002AE  101E               	iorwf	?_Receive_available+1,w,c
  2392  0002B0  B4D8               	btfsc	status,2,c
  2393  0002B2  D004               	goto	l3984
  2394  0002B4  5042               	movf	_rx_array_inx,w,c
  2395  0002B6  5C43               	subwf	_rx_len,w,c
  2396  0002B8  B0D8               	btfsc	status,0,c
  2397  0002BA  D7D3               	goto	l3976
  2398  0002BC                     l3984:
  2399                           
  2400                           ;FastTransfer.c: 135: }
  2401                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2402  0002BC  5043               	movf	_rx_len,w,c
  2403  0002BE  0100               	movlb	0	; () banked
  2404  0002C0  6FDA               	movwf	??_receiveData& (0+255),b
  2405  0002C2  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2406  0002C4  0EFF               	movlw	255
  2407  0002C6  0100               	movlb	0	; () banked
  2408  0002C8  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2409  0002CA  0EFF               	movlw	255
  2410  0002CC  0100               	movlb	0	; () banked
  2411  0002CE  6FDD               	movwf	(??_receiveData+3)& (0+255),b
  2412  0002D0  5042               	movf	_rx_array_inx,w,c
  2413  0002D2  0100               	movlb	0	; () banked
  2414  0002D4  6FDE               	movwf	(??_receiveData+4)& (0+255),b
  2415  0002D6  6BDF               	clrf	(??_receiveData+5)& (0+255),b
  2416  0002D8  0100               	movlb	0	; () banked
  2417  0002DA  51DC               	movf	(??_receiveData+2)& (0+255),w,b
  2418  0002DC  0100               	movlb	0	; () banked
  2419  0002DE  27DE               	addwf	(??_receiveData+4)& (0+255),f,b
  2420  0002E0  0100               	movlb	0	; () banked
  2421  0002E2  51DD               	movf	(??_receiveData+3)& (0+255),w,b
  2422  0002E4  0100               	movlb	0	; () banked
  2423  0002E6  23DF               	addwfc	(??_receiveData+5)& (0+255),f,b
  2424  0002E8  0100               	movlb	0	; () banked
  2425  0002EA  51DA               	movf	??_receiveData& (0+255),w,b
  2426  0002EC  0100               	movlb	0	; () banked
  2427  0002EE  19DE               	xorwf	(??_receiveData+4)& (0+255),w,b
  2428  0002F0  E105               	bnz	u3631
  2429  0002F2  0100               	movlb	0	; () banked
  2430  0002F4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2431  0002F6  0100               	movlb	0	; () banked
  2432  0002F8  19DF               	xorwf	(??_receiveData+5)& (0+255),w,b
  2433  0002FA  A4D8               	btfss	status,2,c
  2434  0002FC                     u3631:
  2435  0002FC  D228               	goto	l4080
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2439  0002FE  0E00               	movlw	low _rx_buffer
  2440  000300  6E1B               	movwf	CRC8@data,c
  2441  000302  0E02               	movlw	high _rx_buffer
  2442  000304  6E1C               	movwf	CRC8@data+1,c
  2443  000306  C043  F01D         	movff	_rx_len,CRC8@len
  2444  00030A  EC3C  F00D         	call	_CRC8	;wreg free
  2445  00030E  6E3D               	movwf	_calc_CS,c
  2446                           
  2447                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2448  000310  0EFF               	movlw	255
  2449  000312  0100               	movlb	0	; () banked
  2450  000314  6FDA               	movwf	??_receiveData& (0+255),b
  2451  000316  0EFF               	movlw	255
  2452  000318  0100               	movlb	0	; () banked
  2453  00031A  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2454  00031C  5042               	movf	_rx_array_inx,w,c
  2455  00031E  0100               	movlb	0	; () banked
  2456  000320  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2457  000322  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2458  000324  0100               	movlb	0	; () banked
  2459  000326  51DA               	movf	??_receiveData& (0+255),w,b
  2460  000328  0100               	movlb	0	; () banked
  2461  00032A  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2462  00032C  0100               	movlb	0	; () banked
  2463  00032E  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2464  000330  0100               	movlb	0	; () banked
  2465  000332  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2466  000334  0E00               	movlw	low _rx_buffer
  2467  000336  0100               	movlb	0	; () banked
  2468  000338  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2469  00033A  6ED9               	movwf	fsr2l,c
  2470  00033C  0E02               	movlw	high _rx_buffer
  2471  00033E  0100               	movlb	0	; () banked
  2472  000340  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2473  000342  6EDA               	movwf	fsr2h,c
  2474  000344  503D               	movf	_calc_CS,w,c
  2475  000346  18DE               	xorwf	postinc2,w,c
  2476  000348  A4D8               	btfss	status,2,c
  2477  00034A  D139               	goto	l4042
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;FastTransfer.c: 147: int r;
  2481                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2482  00034C  0E00               	movlw	0
  2483  00034E  0100               	movlb	0	; () banked
  2484  000350  6FEB               	movwf	(receiveData@r+1)& (0+255),b
  2485  000352  0E00               	movlw	0
  2486  000354  6FEA               	movwf	receiveData@r& (0+255),b
  2487  000356  D05A               	goto	l4002
  2488  000358                     l3992:
  2489                           
  2490                           ; BSR set to: 0
  2491                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2492  000358  0E00               	movlw	low _rx_buffer
  2493  00035A  0100               	movlb	0	; () banked
  2494  00035C  25EA               	addwf	receiveData@r& (0+255),w,b
  2495  00035E  6ED9               	movwf	fsr2l,c
  2496  000360  0E02               	movlw	high _rx_buffer
  2497  000362  0100               	movlb	0	; () banked
  2498  000364  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2499  000366  6EDA               	movwf	fsr2h,c
  2500  000368  503E               	movf	_maxDataAddress,w,c
  2501  00036A  5CDE               	subwf	postinc2,w,c
  2502  00036C  B0D8               	btfsc	status,0,c
  2503  00036E  D041               	goto	l3998
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2507  000370  0E01               	movlw	1
  2508  000372  0100               	movlb	0	; () banked
  2509  000374  25EA               	addwf	receiveData@r& (0+255),w,b
  2510  000376  0100               	movlb	0	; () banked
  2511  000378  6FDA               	movwf	??_receiveData& (0+255),b
  2512  00037A  0E00               	movlw	0
  2513  00037C  0100               	movlb	0	; () banked
  2514  00037E  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2515  000380  0100               	movlb	0	; () banked
  2516  000382  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2517  000384  0E00               	movlw	low _rx_buffer
  2518  000386  0100               	movlb	0	; () banked
  2519  000388  25DA               	addwf	??_receiveData& (0+255),w,b
  2520  00038A  6ED9               	movwf	fsr2l,c
  2521  00038C  0E02               	movlw	high _rx_buffer
  2522  00038E  0100               	movlb	0	; () banked
  2523  000390  21DB               	addwfc	(??_receiveData+1)& (0+255),w,b
  2524  000392  6EDA               	movwf	fsr2h,c
  2525  000394  50DF               	movf	indf2,w,c
  2526  000396  6E26               	movwf	_group,c
  2527                           
  2528                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2529  000398  0E02               	movlw	2
  2530  00039A  0100               	movlb	0	; () banked
  2531  00039C  25EA               	addwf	receiveData@r& (0+255),w,b
  2532  00039E  0100               	movlb	0	; () banked
  2533  0003A0  6FDA               	movwf	??_receiveData& (0+255),b
  2534  0003A2  0E00               	movlw	0
  2535  0003A4  0100               	movlb	0	; () banked
  2536  0003A6  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2537  0003A8  0100               	movlb	0	; () banked
  2538  0003AA  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2539  0003AC  0E00               	movlw	low _rx_buffer
  2540  0003AE  0100               	movlb	0	; () banked
  2541  0003B0  25DA               	addwf	??_receiveData& (0+255),w,b
  2542  0003B2  6ED9               	movwf	fsr2l,c
  2543  0003B4  0E02               	movlw	high _rx_buffer
  2544  0003B6  0100               	movlb	0	; () banked
  2545  0003B8  21DB               	addwfc	(??_receiveData+1)& (0+255),w,b
  2546  0003BA  6EDA               	movwf	fsr2h,c
  2547  0003BC  50DF               	movf	indf2,w,c
  2548  0003BE  6E27               	movwf	_group+1,c
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2552  0003C0  0E00               	movlw	low _rx_buffer
  2553  0003C2  0100               	movlb	0	; () banked
  2554  0003C4  25EA               	addwf	receiveData@r& (0+255),w,b
  2555  0003C6  6ED9               	movwf	fsr2l,c
  2556  0003C8  0E02               	movlw	high _rx_buffer
  2557  0003CA  0100               	movlb	0	; () banked
  2558  0003CC  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2559  0003CE  6EDA               	movwf	fsr2h,c
  2560  0003D0  50DF               	movf	indf2,w,c
  2561  0003D2  0100               	movlb	0	; () banked
  2562  0003D4  6FDA               	movwf	??_receiveData& (0+255),b
  2563  0003D6  0100               	movlb	0	; () banked
  2564  0003D8  51DA               	movf	??_receiveData& (0+255),w,b
  2565  0003DA  0D02               	mullw	2
  2566  0003DC  50F3               	movf	prodl,w,c
  2567  0003DE  242C               	addwf	_receiveArrayAddress,w,c
  2568  0003E0  6ED9               	movwf	fsr2l,c
  2569  0003E2  50F4               	movf	prodh,w,c
  2570  0003E4  202D               	addwfc	_receiveArrayAddress+1,w,c
  2571  0003E6  6EDA               	movwf	fsr2h,c
  2572  0003E8  C026  FFDE         	movff	_group,postinc2
  2573  0003EC  C027  FFDD         	movff	_group+1,postdec2
  2574                           
  2575                           ;FastTransfer.c: 153: } else {
  2576  0003F0  D003               	goto	l4000
  2577  0003F2                     l3998:
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2581  0003F2  0100               	movlb	0	; () banked
  2582  0003F4  4B96               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2583  0003F6  2B97               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2584  0003F8                     l4000:
  2585                           
  2586                           ; BSR set to: 0
  2587  0003F8  0E03               	movlw	3
  2588  0003FA  0100               	movlb	0	; () banked
  2589  0003FC  25EA               	addwf	receiveData@r& (0+255),w,b
  2590  0003FE  0100               	movlb	0	; () banked
  2591  000400  6FEA               	movwf	receiveData@r& (0+255),b
  2592  000402  0E00               	movlw	0
  2593  000404  0100               	movlb	0	; () banked
  2594  000406  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2595  000408  0100               	movlb	0	; () banked
  2596  00040A  6FEB               	movwf	(receiveData@r+1)& (0+255),b
  2597  00040C                     l4002:
  2598                           
  2599                           ; BSR set to: 0
  2600  00040C  5043               	movf	_rx_len,w,c
  2601  00040E  0100               	movlb	0	; () banked
  2602  000410  6FDA               	movwf	??_receiveData& (0+255),b
  2603  000412  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2604  000414  0100               	movlb	0	; () banked
  2605  000416  51DA               	movf	??_receiveData& (0+255),w,b
  2606  000418  0100               	movlb	0	; () banked
  2607  00041A  5DEA               	subwf	receiveData@r& (0+255),w,b
  2608  00041C  0100               	movlb	0	; () banked
  2609  00041E  51EB               	movf	(receiveData@r+1)& (0+255),w,b
  2610  000420  0A80               	xorlw	128
  2611  000422  0100               	movlb	0	; () banked
  2612  000424  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2613  000426  0100               	movlb	0	; () banked
  2614  000428  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2615  00042A  0A80               	xorlw	128
  2616  00042C  0100               	movlb	0	; () banked
  2617  00042E  59DC               	subwfb	(??_receiveData+2)& (0+255),w,b
  2618  000430  A0D8               	btfss	status,0,c
  2619  000432  D792               	goto	l3992
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;FastTransfer.c: 155: }
  2623                           ;FastTransfer.c: 156: }
  2624                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2625                           
  2626                           ; BSR set to: 0
  2627  000434  503C               	movf	_AKNAKsend,w,c
  2628  000436  B4D8               	btfsc	status,2,c
  2629  000438  D0BC               	goto	l4032
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;FastTransfer.c: 160: unsigned char holder[3];
  2633                           ;FastTransfer.c: 161: holder[0] = 255;
  2634  00043A  0100               	movlb	0	; () banked
  2635  00043C  69E0               	setf	receiveData@holder& (0+255),b
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;FastTransfer.c: 162: holder[1] = 1;
  2639  00043E  0E01               	movlw	1
  2640  000440  0100               	movlb	0	; () banked
  2641  000442  6FE1               	movwf	(receiveData@holder+1)& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2645  000444  0EFF               	movlw	255
  2646  000446  0100               	movlb	0	; () banked
  2647  000448  6FDA               	movwf	??_receiveData& (0+255),b
  2648  00044A  0EFF               	movlw	255
  2649  00044C  0100               	movlb	0	; () banked
  2650  00044E  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2651  000450  5042               	movf	_rx_array_inx,w,c
  2652  000452  0100               	movlb	0	; () banked
  2653  000454  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2654  000456  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2655  000458  0100               	movlb	0	; () banked
  2656  00045A  51DA               	movf	??_receiveData& (0+255),w,b
  2657  00045C  0100               	movlb	0	; () banked
  2658  00045E  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2659  000460  0100               	movlb	0	; () banked
  2660  000462  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2661  000464  0100               	movlb	0	; () banked
  2662  000466  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2663  000468  0E00               	movlw	low _rx_buffer
  2664  00046A  0100               	movlb	0	; () banked
  2665  00046C  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2666  00046E  6ED9               	movwf	fsr2l,c
  2667  000470  0E02               	movlw	high _rx_buffer
  2668  000472  0100               	movlb	0	; () banked
  2669  000474  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2670  000476  6EDA               	movwf	fsr2h,c
  2671  000478  50DF               	movf	indf2,w,c
  2672  00047A  0100               	movlb	0	; () banked
  2673  00047C  6FE2               	movwf	(receiveData@holder+2)& (0+255),b
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2677  00047E  0EE0               	movlw	low receiveData@holder
  2678  000480  6E1B               	movwf	CRC8@data,c
  2679  000482  0E00               	movlw	high receiveData@holder
  2680  000484  6E1C               	movwf	CRC8@data+1,c
  2681  000486  0E03               	movlw	3
  2682  000488  6E1D               	movwf	CRC8@len,c
  2683  00048A  EC3C  F00D         	call	_CRC8	;wreg free
  2684  00048E  0100               	movlb	0	; () banked
  2685  000490  6FE6               	movwf	receiveData@crcHolder& (0+255),b
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;FastTransfer.c: 165: serial_write(0x06);
  2689  000492  D801               	call	u3688
  2690  000494  D00B               	goto	l4016
  2691  000496                     u3688:
  2692  000496  0005               	push	
  2693  000498  6EFA               	movwf	pclath,c
  2694  00049A  5036               	movf	_serial_write,w,c
  2695  00049C  6EFD               	movwf	tosl,c
  2696  00049E  5037               	movf	_serial_write+1,w,c
  2697  0004A0  6EFE               	movwf	tosh,c
  2698  0004A2  50F8               	movf	tblptru,w,c
  2699  0004A4  6EFF               	movwf	tosu,c
  2700  0004A6  50FA               	movf	pclath,w,c
  2701  0004A8  0E06               	movlw	6
  2702  0004AA  0012               	return		;indir
  2703  0004AC                     l4016:
  2704                           
  2705                           ;FastTransfer.c: 166: serial_write(0x85);
  2706  0004AC  D801               	call	u3698
  2707  0004AE  D00B               	goto	l4018
  2708  0004B0                     u3698:
  2709  0004B0  0005               	push	
  2710  0004B2  6EFA               	movwf	pclath,c
  2711  0004B4  5036               	movf	_serial_write,w,c
  2712  0004B6  6EFD               	movwf	tosl,c
  2713  0004B8  5037               	movf	_serial_write+1,w,c
  2714  0004BA  6EFE               	movwf	tosh,c
  2715  0004BC  50F8               	movf	tblptru,w,c
  2716  0004BE  6EFF               	movwf	tosu,c
  2717  0004C0  50FA               	movf	pclath,w,c
  2718  0004C2  0E85               	movlw	133
  2719  0004C4  0012               	return		;indir
  2720  0004C6                     l4018:
  2721                           
  2722                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2723  0004C6  D801               	call	u3708
  2724  0004C8  D00B               	goto	l4020
  2725  0004CA                     u3708:
  2726  0004CA  0005               	push	
  2727  0004CC  6EFA               	movwf	pclath,c
  2728  0004CE  5036               	movf	_serial_write,w,c
  2729  0004D0  6EFD               	movwf	tosl,c
  2730  0004D2  5037               	movf	_serial_write+1,w,c
  2731  0004D4  6EFE               	movwf	tosh,c
  2732  0004D6  50F8               	movf	tblptru,w,c
  2733  0004D8  6EFF               	movwf	tosu,c
  2734  0004DA  50FA               	movf	pclath,w,c
  2735  0004DC  5040               	movf	_returnAddress,w,c
  2736  0004DE  0012               	return		;indir
  2737  0004E0                     l4020:
  2738                           
  2739                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2740  0004E0  D801               	call	u3718
  2741  0004E2  D00B               	goto	l4022
  2742  0004E4                     u3718:
  2743  0004E4  0005               	push	
  2744  0004E6  6EFA               	movwf	pclath,c
  2745  0004E8  5036               	movf	_serial_write,w,c
  2746  0004EA  6EFD               	movwf	tosl,c
  2747  0004EC  5037               	movf	_serial_write+1,w,c
  2748  0004EE  6EFE               	movwf	tosh,c
  2749  0004F0  50F8               	movf	tblptru,w,c
  2750  0004F2  6EFF               	movwf	tosu,c
  2751  0004F4  50FA               	movf	pclath,w,c
  2752  0004F6  503F               	movf	_moduleAddress,w,c
  2753  0004F8  0012               	return		;indir
  2754  0004FA                     l4022:
  2755                           
  2756                           ;FastTransfer.c: 169: serial_write(3);
  2757  0004FA  D801               	call	u3728
  2758  0004FC  D00B               	goto	l4024
  2759  0004FE                     u3728:
  2760  0004FE  0005               	push	
  2761  000500  6EFA               	movwf	pclath,c
  2762  000502  5036               	movf	_serial_write,w,c
  2763  000504  6EFD               	movwf	tosl,c
  2764  000506  5037               	movf	_serial_write+1,w,c
  2765  000508  6EFE               	movwf	tosh,c
  2766  00050A  50F8               	movf	tblptru,w,c
  2767  00050C  6EFF               	movwf	tosu,c
  2768  00050E  50FA               	movf	pclath,w,c
  2769  000510  0E03               	movlw	3
  2770  000512  0012               	return		;indir
  2771  000514                     l4024:
  2772                           
  2773                           ;FastTransfer.c: 170: serial_write(255);
  2774  000514  D801               	call	u3738
  2775  000516  D00B               	goto	l4026
  2776  000518                     u3738:
  2777  000518  0005               	push	
  2778  00051A  6EFA               	movwf	pclath,c
  2779  00051C  5036               	movf	_serial_write,w,c
  2780  00051E  6EFD               	movwf	tosl,c
  2781  000520  5037               	movf	_serial_write+1,w,c
  2782  000522  6EFE               	movwf	tosh,c
  2783  000524  50F8               	movf	tblptru,w,c
  2784  000526  6EFF               	movwf	tosu,c
  2785  000528  50FA               	movf	pclath,w,c
  2786  00052A  0EFF               	movlw	255
  2787  00052C  0012               	return		;indir
  2788  00052E                     l4026:
  2789                           
  2790                           ;FastTransfer.c: 171: serial_write(1);
  2791  00052E  D801               	call	u3748
  2792  000530  D00B               	goto	l4028
  2793  000532                     u3748:
  2794  000532  0005               	push	
  2795  000534  6EFA               	movwf	pclath,c
  2796  000536  5036               	movf	_serial_write,w,c
  2797  000538  6EFD               	movwf	tosl,c
  2798  00053A  5037               	movf	_serial_write+1,w,c
  2799  00053C  6EFE               	movwf	tosh,c
  2800  00053E  50F8               	movf	tblptru,w,c
  2801  000540  6EFF               	movwf	tosu,c
  2802  000542  50FA               	movf	pclath,w,c
  2803  000544  0E01               	movlw	1
  2804  000546  0012               	return		;indir
  2805  000548                     l4028:
  2806                           
  2807                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2808  000548  D801               	call	u3758
  2809  00054A  D025               	goto	l4030
  2810  00054C                     u3758:
  2811  00054C  0005               	push	
  2812  00054E  6EFA               	movwf	pclath,c
  2813  000550  5036               	movf	_serial_write,w,c
  2814  000552  6EFD               	movwf	tosl,c
  2815  000554  5037               	movf	_serial_write+1,w,c
  2816  000556  6EFE               	movwf	tosh,c
  2817  000558  50F8               	movf	tblptru,w,c
  2818  00055A  6EFF               	movwf	tosu,c
  2819  00055C  50FA               	movf	pclath,w,c
  2820  00055E  0EFF               	movlw	255
  2821  000560  0100               	movlb	0	; () banked
  2822  000562  6FDA               	movwf	??_receiveData& (0+255),b
  2823  000564  0EFF               	movlw	255
  2824  000566  0100               	movlb	0	; () banked
  2825  000568  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2826  00056A  5042               	movf	_rx_array_inx,w,c
  2827  00056C  0100               	movlb	0	; () banked
  2828  00056E  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2829  000570  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2830  000572  0100               	movlb	0	; () banked
  2831  000574  51DA               	movf	??_receiveData& (0+255),w,b
  2832  000576  0100               	movlb	0	; () banked
  2833  000578  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2834  00057A  0100               	movlb	0	; () banked
  2835  00057C  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2836  00057E  0100               	movlb	0	; () banked
  2837  000580  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2838  000582  0E00               	movlw	low _rx_buffer
  2839  000584  0100               	movlb	0	; () banked
  2840  000586  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2841  000588  6ED9               	movwf	fsr2l,c
  2842  00058A  0E02               	movlw	high _rx_buffer
  2843  00058C  0100               	movlb	0	; () banked
  2844  00058E  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2845  000590  6EDA               	movwf	fsr2h,c
  2846  000592  50DF               	movf	indf2,w,c
  2847  000594  0012               	return		;indir
  2848  000596                     l4030:
  2849                           
  2850                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2851  000596  D801               	call	u3768
  2852  000598  D00C               	goto	l4032
  2853  00059A                     u3768:
  2854  00059A  0005               	push	
  2855  00059C  6EFA               	movwf	pclath,c
  2856  00059E  5036               	movf	_serial_write,w,c
  2857  0005A0  6EFD               	movwf	tosl,c
  2858  0005A2  5037               	movf	_serial_write+1,w,c
  2859  0005A4  6EFE               	movwf	tosh,c
  2860  0005A6  50F8               	movf	tblptru,w,c
  2861  0005A8  6EFF               	movwf	tosu,c
  2862  0005AA  50FA               	movf	pclath,w,c
  2863  0005AC  0100               	movlb	0	; () banked
  2864  0005AE  51E6               	movf	receiveData@crcHolder& (0+255),w,b
  2865  0005B0  0012               	return		;indir
  2866  0005B2                     l4032:
  2867                           
  2868                           ;FastTransfer.c: 174: }
  2869                           ;FastTransfer.c: 178: rx_len = 0;
  2870  0005B2  0E00               	movlw	0
  2871  0005B4  6E43               	movwf	_rx_len,c
  2872                           
  2873                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2874  0005B6  0E00               	movlw	0
  2875  0005B8  6E42               	movwf	_rx_array_inx,c
  2876                           
  2877                           ;FastTransfer.c: 180: return 1;
  2878  0005BA  0E01               	movlw	1
  2879  0005BC  0012               	return	
  2880  0005BE                     l4042:
  2881                           
  2882                           ;FastTransfer.c: 182: crcErrorCounter++;
  2883  0005BE  0100               	movlb	0	; () banked
  2884  0005C0  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  2885  0005C2  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2889  0005C4  503C               	movf	_AKNAKsend,w,c
  2890  0005C6  B4D8               	btfsc	status,2,c
  2891  0005C8  D0BC               	goto	l4072
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;FastTransfer.c: 185: unsigned char holder[3];
  2895                           ;FastTransfer.c: 186: holder[0] = 255;
  2896  0005CA  0100               	movlb	0	; () banked
  2897  0005CC  69E3               	setf	receiveData@holder_1247& (0+255),b
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;FastTransfer.c: 187: holder[1] = 2;
  2901  0005CE  0E02               	movlw	2
  2902  0005D0  0100               	movlb	0	; () banked
  2903  0005D2  6FE4               	movwf	(receiveData@holder_1247+1)& (0+255),b
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2907  0005D4  0EFF               	movlw	255
  2908  0005D6  0100               	movlb	0	; () banked
  2909  0005D8  6FDA               	movwf	??_receiveData& (0+255),b
  2910  0005DA  0EFF               	movlw	255
  2911  0005DC  0100               	movlb	0	; () banked
  2912  0005DE  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2913  0005E0  5042               	movf	_rx_array_inx,w,c
  2914  0005E2  0100               	movlb	0	; () banked
  2915  0005E4  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2916  0005E6  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2917  0005E8  0100               	movlb	0	; () banked
  2918  0005EA  51DA               	movf	??_receiveData& (0+255),w,b
  2919  0005EC  0100               	movlb	0	; () banked
  2920  0005EE  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2921  0005F0  0100               	movlb	0	; () banked
  2922  0005F2  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2923  0005F4  0100               	movlb	0	; () banked
  2924  0005F6  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2925  0005F8  0E00               	movlw	low _rx_buffer
  2926  0005FA  0100               	movlb	0	; () banked
  2927  0005FC  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2928  0005FE  6ED9               	movwf	fsr2l,c
  2929  000600  0E02               	movlw	high _rx_buffer
  2930  000602  0100               	movlb	0	; () banked
  2931  000604  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2932  000606  6EDA               	movwf	fsr2h,c
  2933  000608  50DF               	movf	indf2,w,c
  2934  00060A  0100               	movlb	0	; () banked
  2935  00060C  6FE5               	movwf	(receiveData@holder_1247+2)& (0+255),b
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2939  00060E  0EE3               	movlw	low receiveData@holder_1247
  2940  000610  6E1B               	movwf	CRC8@data,c
  2941  000612  0E00               	movlw	high receiveData@holder_1247
  2942  000614  6E1C               	movwf	CRC8@data+1,c
  2943  000616  0E03               	movlw	3
  2944  000618  6E1D               	movwf	CRC8@len,c
  2945  00061A  EC3C  F00D         	call	_CRC8
  2946  00061E  0100               	movlb	0	; () banked
  2947  000620  6FE7               	movwf	receiveData@crcHolder_1248& (0+255),b
  2948                           
  2949                           ; BSR set to: 0
  2950                           ;FastTransfer.c: 190: serial_write(0x06);
  2951  000622  D801               	call	u3788
  2952  000624  D00B               	goto	l4056
  2953  000626                     u3788:
  2954  000626  0005               	push	
  2955  000628  6EFA               	movwf	pclath,c
  2956  00062A  5036               	movf	_serial_write,w,c
  2957  00062C  6EFD               	movwf	tosl,c
  2958  00062E  5037               	movf	_serial_write+1,w,c
  2959  000630  6EFE               	movwf	tosh,c
  2960  000632  50F8               	movf	tblptru,w,c
  2961  000634  6EFF               	movwf	tosu,c
  2962  000636  50FA               	movf	pclath,w,c
  2963  000638  0E06               	movlw	6
  2964  00063A  0012               	return		;indir
  2965  00063C                     l4056:
  2966                           
  2967                           ;FastTransfer.c: 191: serial_write(0x85);
  2968  00063C  D801               	call	u3798
  2969  00063E  D00B               	goto	l4058
  2970  000640                     u3798:
  2971  000640  0005               	push	
  2972  000642  6EFA               	movwf	pclath,c
  2973  000644  5036               	movf	_serial_write,w,c
  2974  000646  6EFD               	movwf	tosl,c
  2975  000648  5037               	movf	_serial_write+1,w,c
  2976  00064A  6EFE               	movwf	tosh,c
  2977  00064C  50F8               	movf	tblptru,w,c
  2978  00064E  6EFF               	movwf	tosu,c
  2979  000650  50FA               	movf	pclath,w,c
  2980  000652  0E85               	movlw	133
  2981  000654  0012               	return		;indir
  2982  000656                     l4058:
  2983                           
  2984                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2985  000656  D801               	call	u3808
  2986  000658  D00B               	goto	l4060
  2987  00065A                     u3808:
  2988  00065A  0005               	push	
  2989  00065C  6EFA               	movwf	pclath,c
  2990  00065E  5036               	movf	_serial_write,w,c
  2991  000660  6EFD               	movwf	tosl,c
  2992  000662  5037               	movf	_serial_write+1,w,c
  2993  000664  6EFE               	movwf	tosh,c
  2994  000666  50F8               	movf	tblptru,w,c
  2995  000668  6EFF               	movwf	tosu,c
  2996  00066A  50FA               	movf	pclath,w,c
  2997  00066C  5040               	movf	_returnAddress,w,c
  2998  00066E  0012               	return		;indir
  2999  000670                     l4060:
  3000                           
  3001                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3002  000670  D801               	call	u3818
  3003  000672  D00B               	goto	l4062
  3004  000674                     u3818:
  3005  000674  0005               	push	
  3006  000676  6EFA               	movwf	pclath,c
  3007  000678  5036               	movf	_serial_write,w,c
  3008  00067A  6EFD               	movwf	tosl,c
  3009  00067C  5037               	movf	_serial_write+1,w,c
  3010  00067E  6EFE               	movwf	tosh,c
  3011  000680  50F8               	movf	tblptru,w,c
  3012  000682  6EFF               	movwf	tosu,c
  3013  000684  50FA               	movf	pclath,w,c
  3014  000686  503F               	movf	_moduleAddress,w,c
  3015  000688  0012               	return		;indir
  3016  00068A                     l4062:
  3017                           
  3018                           ;FastTransfer.c: 194: serial_write(3);
  3019  00068A  D801               	call	u3828
  3020  00068C  D00B               	goto	l4064
  3021  00068E                     u3828:
  3022  00068E  0005               	push	
  3023  000690  6EFA               	movwf	pclath,c
  3024  000692  5036               	movf	_serial_write,w,c
  3025  000694  6EFD               	movwf	tosl,c
  3026  000696  5037               	movf	_serial_write+1,w,c
  3027  000698  6EFE               	movwf	tosh,c
  3028  00069A  50F8               	movf	tblptru,w,c
  3029  00069C  6EFF               	movwf	tosu,c
  3030  00069E  50FA               	movf	pclath,w,c
  3031  0006A0  0E03               	movlw	3
  3032  0006A2  0012               	return		;indir
  3033  0006A4                     l4064:
  3034                           
  3035                           ;FastTransfer.c: 195: serial_write(255);
  3036  0006A4  D801               	call	u3838
  3037  0006A6  D00B               	goto	l4066
  3038  0006A8                     u3838:
  3039  0006A8  0005               	push	
  3040  0006AA  6EFA               	movwf	pclath,c
  3041  0006AC  5036               	movf	_serial_write,w,c
  3042  0006AE  6EFD               	movwf	tosl,c
  3043  0006B0  5037               	movf	_serial_write+1,w,c
  3044  0006B2  6EFE               	movwf	tosh,c
  3045  0006B4  50F8               	movf	tblptru,w,c
  3046  0006B6  6EFF               	movwf	tosu,c
  3047  0006B8  50FA               	movf	pclath,w,c
  3048  0006BA  0EFF               	movlw	255
  3049  0006BC  0012               	return		;indir
  3050  0006BE                     l4066:
  3051                           
  3052                           ;FastTransfer.c: 196: serial_write(2);
  3053  0006BE  D801               	call	u3848
  3054  0006C0  D00B               	goto	l4068
  3055  0006C2                     u3848:
  3056  0006C2  0005               	push	
  3057  0006C4  6EFA               	movwf	pclath,c
  3058  0006C6  5036               	movf	_serial_write,w,c
  3059  0006C8  6EFD               	movwf	tosl,c
  3060  0006CA  5037               	movf	_serial_write+1,w,c
  3061  0006CC  6EFE               	movwf	tosh,c
  3062  0006CE  50F8               	movf	tblptru,w,c
  3063  0006D0  6EFF               	movwf	tosu,c
  3064  0006D2  50FA               	movf	pclath,w,c
  3065  0006D4  0E02               	movlw	2
  3066  0006D6  0012               	return		;indir
  3067  0006D8                     l4068:
  3068                           
  3069                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3070  0006D8  D801               	call	u3858
  3071  0006DA  D025               	goto	l4070
  3072  0006DC                     u3858:
  3073  0006DC  0005               	push	
  3074  0006DE  6EFA               	movwf	pclath,c
  3075  0006E0  5036               	movf	_serial_write,w,c
  3076  0006E2  6EFD               	movwf	tosl,c
  3077  0006E4  5037               	movf	_serial_write+1,w,c
  3078  0006E6  6EFE               	movwf	tosh,c
  3079  0006E8  50F8               	movf	tblptru,w,c
  3080  0006EA  6EFF               	movwf	tosu,c
  3081  0006EC  50FA               	movf	pclath,w,c
  3082  0006EE  0EFF               	movlw	255
  3083  0006F0  0100               	movlb	0	; () banked
  3084  0006F2  6FDA               	movwf	??_receiveData& (0+255),b
  3085  0006F4  0EFF               	movlw	255
  3086  0006F6  0100               	movlb	0	; () banked
  3087  0006F8  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  3088  0006FA  5042               	movf	_rx_array_inx,w,c
  3089  0006FC  0100               	movlb	0	; () banked
  3090  0006FE  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  3091  000700  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  3092  000702  0100               	movlb	0	; () banked
  3093  000704  51DA               	movf	??_receiveData& (0+255),w,b
  3094  000706  0100               	movlb	0	; () banked
  3095  000708  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  3096  00070A  0100               	movlb	0	; () banked
  3097  00070C  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  3098  00070E  0100               	movlb	0	; () banked
  3099  000710  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  3100  000712  0E00               	movlw	low _rx_buffer
  3101  000714  0100               	movlb	0	; () banked
  3102  000716  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  3103  000718  6ED9               	movwf	fsr2l,c
  3104  00071A  0E02               	movlw	high _rx_buffer
  3105  00071C  0100               	movlb	0	; () banked
  3106  00071E  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  3107  000720  6EDA               	movwf	fsr2h,c
  3108  000722  50DF               	movf	indf2,w,c
  3109  000724  0012               	return		;indir
  3110  000726                     l4070:
  3111                           
  3112                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3113  000726  D801               	call	u3868
  3114  000728  D00C               	goto	l4072
  3115  00072A                     u3868:
  3116  00072A  0005               	push	
  3117  00072C  6EFA               	movwf	pclath,c
  3118  00072E  5036               	movf	_serial_write,w,c
  3119  000730  6EFD               	movwf	tosl,c
  3120  000732  5037               	movf	_serial_write+1,w,c
  3121  000734  6EFE               	movwf	tosh,c
  3122  000736  50F8               	movf	tblptru,w,c
  3123  000738  6EFF               	movwf	tosu,c
  3124  00073A  50FA               	movf	pclath,w,c
  3125  00073C  0100               	movlb	0	; () banked
  3126  00073E  51E7               	movf	receiveData@crcHolder_1248& (0+255),w,b
  3127  000740  0012               	return		;indir
  3128  000742                     l4072:
  3129                           
  3130                           ;FastTransfer.c: 199: }
  3131                           ;FastTransfer.c: 202: rx_len = 0;
  3132  000742  0E00               	movlw	0
  3133  000744  6E43               	movwf	_rx_len,c
  3134                           
  3135                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3136  000746  0E00               	movlw	0
  3137  000748  6E42               	movwf	_rx_array_inx,c
  3138                           
  3139                           ;FastTransfer.c: 204: return 0;
  3140  00074A  0E00               	movlw	0
  3141  00074C  0012               	return	
  3142  00074E                     l4080:
  3143                           
  3144                           ;FastTransfer.c: 205: }
  3145                           ;FastTransfer.c: 206: }
  3146                           ;FastTransfer.c: 207: }
  3147                           ;FastTransfer.c: 210: return 0;
  3148  00074E  0E00               	movlw	0
  3149  000750  0012               	return	
  3150  000752                     __end_of_receiveData:
  3151                           	opt stack 0
  3152                           tosu	equ	0xFFF
  3153                           tosh	equ	0xFFE
  3154                           tosl	equ	0xFFD
  3155                           pclath	equ	0xFFA
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           prodh	equ	0xFF4
  3161                           prodl	equ	0xFF3
  3162                           intcon	equ	0xFF2
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           indf2	equ	0xFDF
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           plusw2	equ	0xFDB
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _Send_put *****************
  3174 ;; Defined at:
  3175 ;;		line 130 in file "UART.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;  _data           1    wreg     unsigned char 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  _data           1    0[BANK0 ] unsigned char 
  3180 ;; Return value:  Size  Location     Type
  3181 ;;		None               void
  3182 ;; Registers used:
  3183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3189 ;;      Params:         0       0       0       0       0       0       0
  3190 ;;      Locals:         0       1       0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0       0       0
  3192 ;;      Totals:         0       1       0       0       0       0       0
  3193 ;;Total ram usage:        1 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:    6
  3196 ;; This function calls:
  3197 ;;		_UART_buff_get
  3198 ;;		_UART_buff_put
  3199 ;; This function is called by:
  3200 ;;		_SYSTEM_Initialize
  3201 ;;		_putch
  3202 ;;		_sendData
  3203 ;;		_receiveData
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text10
  3208  001C1A                     __ptext10:
  3209                           	opt stack 0
  3210  001C1A                     _Send_put:
  3211                           	opt stack 21
  3212                           
  3213                           ;incstack = 0
  3214                           ;Send_put@_data stored from wreg
  3215  001C1A  0100               	movlb	0	; () banked
  3216  001C1C  6FD1               	movwf	Send_put@_data& (0+255),b
  3217                           
  3218                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3219  001C1E  0E00               	movlw	low _output_buffer
  3220  001C20  6E21               	movwf	UART_buff_put@_this,c
  3221  001C22  0E04               	movlw	high _output_buffer
  3222  001C24  6E22               	movwf	UART_buff_put@_this+1,c
  3223  001C26  C0D1  F023         	movff	Send_put@_data,UART_buff_put@c
  3224  001C2A  EC58  F006         	call	_UART_buff_put
  3225                           
  3226                           ;UART.c: 132: if (Transmit_stall == 1) {
  3227  001C2E  0444               	decf	_Transmit_stall,w,c
  3228  001C30  A4D8               	btfss	status,2,c
  3229  001C32  0012               	return	
  3230                           
  3231                           ;UART.c: 133: Transmit_stall = 0;
  3232  001C34  0E00               	movlw	0
  3233  001C36  6E44               	movwf	_Transmit_stall,c
  3234                           
  3235                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3236  001C38  0E00               	movlw	low _output_buffer
  3237  001C3A  6E21               	movwf	UART_buff_get@_this,c
  3238  001C3C  0E04               	movlw	high _output_buffer
  3239  001C3E  6E22               	movwf	UART_buff_get@_this+1,c
  3240  001C40  EC6B  F00A         	call	_UART_buff_get	;wreg free
  3241  001C44  6EAD               	movwf	4013,c	;volatile
  3242                           
  3243                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3244  001C46  889D               	bsf	3997,4,c	;volatile
  3245  001C48  0012               	return	
  3246  001C4A                     __end_of_Send_put:
  3247                           	opt stack 0
  3248                           tosu	equ	0xFFF
  3249                           tosh	equ	0xFFE
  3250                           tosl	equ	0xFFD
  3251                           pclath	equ	0xFFA
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           prodh	equ	0xFF4
  3257                           prodl	equ	0xFF3
  3258                           intcon	equ	0xFF2
  3259                           postinc0	equ	0xFEE
  3260                           wreg	equ	0xFE8
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           postdec2	equ	0xFDD
  3264                           plusw2	equ	0xFDB
  3265                           fsr2h	equ	0xFDA
  3266                           fsr2l	equ	0xFD9
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function _UART_buff_put *****************
  3270 ;; Defined at:
  3271 ;;		line 68 in file "UART.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3274 ;;		 -> output_buffer(206), input_buffer(206), 
  3275 ;;  c               1   34[COMRAM] const unsigned char 
  3276 ;; Auto vars:     Size  Location     Type
  3277 ;;		None
  3278 ;; Return value:  Size  Location     Type
  3279 ;;		None               void
  3280 ;; Registers used:
  3281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3287 ;;      Params:         3       0       0       0       0       0       0
  3288 ;;      Locals:         0       0       0       0       0       0       0
  3289 ;;      Temps:          2       0       0       0       0       0       0
  3290 ;;      Totals:         5       0       0       0       0       0       0
  3291 ;;Total ram usage:        5 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    5
  3294 ;; This function calls:
  3295 ;;		_UART_buff_modulo_inc
  3296 ;; This function is called by:
  3297 ;;		_Send_put
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text11
  3302  000CB0                     __ptext11:
  3303                           	opt stack 0
  3304  000CB0                     _UART_buff_put:
  3305                           	opt stack 21
  3306                           
  3307                           ;UART.c: 69: if (_this->count < 200) {
  3308                           
  3309                           ;incstack = 0
  3310  000CB0  EE20 F0CC          	lfsr	2,204
  3311  000CB4  5021               	movf	UART_buff_put@_this,w,c
  3312  000CB6  26D9               	addwf	fsr2l,f,c
  3313  000CB8  5022               	movf	UART_buff_put@_this+1,w,c
  3314  000CBA  22DA               	addwfc	fsr2h,f,c
  3315  000CBC  0E01               	movlw	1
  3316  000CBE  BEDB               	btfsc	plusw2,7,c
  3317  000CC0  D007               	goto	l3630
  3318  000CC2  0E01               	movlw	1
  3319  000CC4  50DB               	movf	plusw2,w,c
  3320  000CC6  E13A               	bnz	l3636
  3321  000CC8  0EC8               	movlw	200
  3322  000CCA  5CDE               	subwf	postinc2,w,c
  3323  000CCC  B0D8               	btfsc	status,0,c
  3324  000CCE  D036               	goto	l3636
  3325  000CD0                     l3630:
  3326                           
  3327                           ;UART.c: 70: _this->buf[_this->head] = c;
  3328  000CD0  EE20 F0C8          	lfsr	2,200
  3329  000CD4  5021               	movf	UART_buff_put@_this,w,c
  3330  000CD6  26D9               	addwf	fsr2l,f,c
  3331  000CD8  5022               	movf	UART_buff_put@_this+1,w,c
  3332  000CDA  22DA               	addwfc	fsr2h,f,c
  3333  000CDC  CFDE F024          	movff	postinc2,??_UART_buff_put
  3334  000CE0  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3335  000CE4  5024               	movf	??_UART_buff_put,w,c
  3336  000CE6  2421               	addwf	UART_buff_put@_this,w,c
  3337  000CE8  6ED9               	movwf	fsr2l,c
  3338  000CEA  5025               	movf	??_UART_buff_put+1,w,c
  3339  000CEC  2022               	addwfc	UART_buff_put@_this+1,w,c
  3340  000CEE  6EDA               	movwf	fsr2h,c
  3341  000CF0  C023  FFDF         	movff	UART_buff_put@c,indf2
  3342                           
  3343                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3344  000CF4  EE20 F0C8          	lfsr	2,200
  3345  000CF8  5021               	movf	UART_buff_put@_this,w,c
  3346  000CFA  26D9               	addwf	fsr2l,f,c
  3347  000CFC  5022               	movf	UART_buff_put@_this+1,w,c
  3348  000CFE  22DA               	addwfc	fsr2h,f,c
  3349  000D00  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3350  000D04  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3351  000D08  0E00               	movlw	0
  3352  000D0A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3353  000D0C  0EC8               	movlw	200
  3354  000D0E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3355  000D10  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3356  000D14  EE20 F0C8          	lfsr	2,200
  3357  000D18  5021               	movf	UART_buff_put@_this,w,c
  3358  000D1A  26D9               	addwf	fsr2l,f,c
  3359  000D1C  5022               	movf	UART_buff_put@_this+1,w,c
  3360  000D1E  22DA               	addwfc	fsr2h,f,c
  3361  000D20  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3362  000D24  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3363                           
  3364                           ;UART.c: 72: ++_this->count;
  3365  000D28  EE20 F0CC          	lfsr	2,204
  3366  000D2C  5021               	movf	UART_buff_put@_this,w,c
  3367  000D2E  26D9               	addwf	fsr2l,f,c
  3368  000D30  5022               	movf	UART_buff_put@_this+1,w,c
  3369  000D32  22DA               	addwfc	fsr2h,f,c
  3370  000D34  2ADE               	incf	postinc2,f,c
  3371  000D36  0E00               	movlw	0
  3372  000D38  22DD               	addwfc	postdec2,f,c
  3373                           
  3374                           ;UART.c: 73: } else {
  3375  000D3A  0012               	return	
  3376  000D3C                     l3636:
  3377                           
  3378                           ;UART.c: 74: _this->buf[_this->head] = c;
  3379  000D3C  EE20 F0C8          	lfsr	2,200
  3380  000D40  5021               	movf	UART_buff_put@_this,w,c
  3381  000D42  26D9               	addwf	fsr2l,f,c
  3382  000D44  5022               	movf	UART_buff_put@_this+1,w,c
  3383  000D46  22DA               	addwfc	fsr2h,f,c
  3384  000D48  CFDE F024          	movff	postinc2,??_UART_buff_put
  3385  000D4C  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3386  000D50  5024               	movf	??_UART_buff_put,w,c
  3387  000D52  2421               	addwf	UART_buff_put@_this,w,c
  3388  000D54  6ED9               	movwf	fsr2l,c
  3389  000D56  5025               	movf	??_UART_buff_put+1,w,c
  3390  000D58  2022               	addwfc	UART_buff_put@_this+1,w,c
  3391  000D5A  6EDA               	movwf	fsr2h,c
  3392  000D5C  C023  FFDF         	movff	UART_buff_put@c,indf2
  3393                           
  3394                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3395  000D60  EE20 F0C8          	lfsr	2,200
  3396  000D64  5021               	movf	UART_buff_put@_this,w,c
  3397  000D66  26D9               	addwf	fsr2l,f,c
  3398  000D68  5022               	movf	UART_buff_put@_this+1,w,c
  3399  000D6A  22DA               	addwfc	fsr2h,f,c
  3400  000D6C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3401  000D70  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3402  000D74  0E00               	movlw	0
  3403  000D76  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3404  000D78  0EC8               	movlw	200
  3405  000D7A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3406  000D7C  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3407  000D80  EE20 F0C8          	lfsr	2,200
  3408  000D84  5021               	movf	UART_buff_put@_this,w,c
  3409  000D86  26D9               	addwf	fsr2l,f,c
  3410  000D88  5022               	movf	UART_buff_put@_this+1,w,c
  3411  000D8A  22DA               	addwfc	fsr2h,f,c
  3412  000D8C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3413  000D90  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3414                           
  3415                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3416  000D94  EE20 F0CA          	lfsr	2,202
  3417  000D98  5021               	movf	UART_buff_put@_this,w,c
  3418  000D9A  26D9               	addwf	fsr2l,f,c
  3419  000D9C  5022               	movf	UART_buff_put@_this+1,w,c
  3420  000D9E  22DA               	addwfc	fsr2h,f,c
  3421  000DA0  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3422  000DA4  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3423  000DA8  0E00               	movlw	0
  3424  000DAA  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3425  000DAC  0EC8               	movlw	200
  3426  000DAE  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3427  000DB0  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3428  000DB4  EE20 F0CA          	lfsr	2,202
  3429  000DB8  5021               	movf	UART_buff_put@_this,w,c
  3430  000DBA  26D9               	addwf	fsr2l,f,c
  3431  000DBC  5022               	movf	UART_buff_put@_this+1,w,c
  3432  000DBE  22DA               	addwfc	fsr2h,f,c
  3433  000DC0  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3434  000DC4  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3435  000DC8  0012               	return	
  3436  000DCA                     __end_of_UART_buff_put:
  3437                           	opt stack 0
  3438                           tosu	equ	0xFFF
  3439                           tosh	equ	0xFFE
  3440                           tosl	equ	0xFFD
  3441                           pclath	equ	0xFFA
  3442                           tblptru	equ	0xFF8
  3443                           tblptrh	equ	0xFF7
  3444                           tblptrl	equ	0xFF6
  3445                           tablat	equ	0xFF5
  3446                           prodh	equ	0xFF4
  3447                           prodl	equ	0xFF3
  3448                           intcon	equ	0xFF2
  3449                           postinc0	equ	0xFEE
  3450                           wreg	equ	0xFE8
  3451                           indf2	equ	0xFDF
  3452                           postinc2	equ	0xFDE
  3453                           postdec2	equ	0xFDD
  3454                           plusw2	equ	0xFDB
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _Receive_peek *****************
  3460 ;; Defined at:
  3461 ;;		line 118 in file "UART.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;		None
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;		None
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      unsigned char 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3475 ;;      Params:         0       0       0       0       0       0       0
  3476 ;;      Locals:         0       0       0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0
  3478 ;;      Totals:         0       0       0       0       0       0       0
  3479 ;;Total ram usage:        0 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    5
  3482 ;; This function calls:
  3483 ;;		_UART_buff_peek
  3484 ;; This function is called by:
  3485 ;;		_SYSTEM_Initialize
  3486 ;;		_receiveData
  3487 ;; This function uses a non-reentrant model
  3488 ;;
  3489                           
  3490                           	psect	text12
  3491  001E44                     __ptext12:
  3492                           	opt stack 0
  3493  001E44                     _Receive_peek:
  3494                           	opt stack 23
  3495                           
  3496                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3497                           
  3498                           ;incstack = 0
  3499  001E44  0E00               	movlw	low _input_buffer
  3500  001E46  6E1B               	movwf	UART_buff_peek@_this,c
  3501  001E48  0E03               	movlw	high _input_buffer
  3502  001E4A  6E1C               	movwf	UART_buff_peek@_this+1,c
  3503  001E4C  EC7A  F00E         	call	_UART_buff_peek	;wreg free
  3504  001E50  0012               	return	
  3505  001E52                     __end_of_Receive_peek:
  3506                           	opt stack 0
  3507                           tosu	equ	0xFFF
  3508                           tosh	equ	0xFFE
  3509                           tosl	equ	0xFFD
  3510                           pclath	equ	0xFFA
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           postinc0	equ	0xFEE
  3519                           wreg	equ	0xFE8
  3520                           indf2	equ	0xFDF
  3521                           postinc2	equ	0xFDE
  3522                           postdec2	equ	0xFDD
  3523                           plusw2	equ	0xFDB
  3524                           fsr2h	equ	0xFDA
  3525                           fsr2l	equ	0xFD9
  3526                           status	equ	0xFD8
  3527                           
  3528 ;; *************** function _UART_buff_peek *****************
  3529 ;; Defined at:
  3530 ;;		line 114 in file "UART.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3533 ;;		 -> input_buffer(206), 
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      unsigned char 
  3538 ;; Registers used:
  3539 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3545 ;;      Params:         2       0       0       0       0       0       0
  3546 ;;      Locals:         0       0       0       0       0       0       0
  3547 ;;      Temps:          2       0       0       0       0       0       0
  3548 ;;      Totals:         4       0       0       0       0       0       0
  3549 ;;Total ram usage:        4 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    4
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_Receive_peek
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text13
  3560  001CF4                     __ptext13:
  3561                           	opt stack 0
  3562  001CF4                     _UART_buff_peek:
  3563                           	opt stack 23
  3564                           
  3565                           ;UART.c: 115: return _this->buf[_this->tail];
  3566                           
  3567                           ;incstack = 0
  3568  001CF4  EE20 F0CA          	lfsr	2,202
  3569  001CF8  501B               	movf	UART_buff_peek@_this,w,c
  3570  001CFA  26D9               	addwf	fsr2l,f,c
  3571  001CFC  501C               	movf	UART_buff_peek@_this+1,w,c
  3572  001CFE  22DA               	addwfc	fsr2h,f,c
  3573  001D00  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3574  001D04  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3575  001D08  501D               	movf	??_UART_buff_peek,w,c
  3576  001D0A  241B               	addwf	UART_buff_peek@_this,w,c
  3577  001D0C  6ED9               	movwf	fsr2l,c
  3578  001D0E  501E               	movf	??_UART_buff_peek+1,w,c
  3579  001D10  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3580  001D12  6EDA               	movwf	fsr2h,c
  3581  001D14  50DF               	movf	indf2,w,c
  3582  001D16  0012               	return	
  3583  001D18                     __end_of_UART_buff_peek:
  3584                           	opt stack 0
  3585                           tosu	equ	0xFFF
  3586                           tosh	equ	0xFFE
  3587                           tosl	equ	0xFFD
  3588                           pclath	equ	0xFFA
  3589                           tblptru	equ	0xFF8
  3590                           tblptrh	equ	0xFF7
  3591                           tblptrl	equ	0xFF6
  3592                           tablat	equ	0xFF5
  3593                           prodh	equ	0xFF4
  3594                           prodl	equ	0xFF3
  3595                           intcon	equ	0xFF2
  3596                           postinc0	equ	0xFEE
  3597                           wreg	equ	0xFE8
  3598                           indf2	equ	0xFDF
  3599                           postinc2	equ	0xFDE
  3600                           postdec2	equ	0xFDD
  3601                           plusw2	equ	0xFDB
  3602                           fsr2h	equ	0xFDA
  3603                           fsr2l	equ	0xFD9
  3604                           status	equ	0xFD8
  3605                           
  3606 ;; *************** function _CRCcheck *****************
  3607 ;; Defined at:
  3608 ;;		line 373 in file "FastTransfer.c"
  3609 ;; Parameters:    Size  Location     Type
  3610 ;;		None
  3611 ;; Auto vars:     Size  Location     Type
  3612 ;;  rt              2    7[BANK0 ] int 
  3613 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3614 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3615 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3616 ;; Return value:  Size  Location     Type
  3617 ;;		None               void
  3618 ;; Registers used:
  3619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3620 ;; Tracked objects:
  3621 ;;		On entry : 0/0
  3622 ;;		On exit  : 0/0
  3623 ;;		Unchanged: 0/0
  3624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3625 ;;      Params:         0       0       0       0       0       0       0
  3626 ;;      Locals:         0       7       0       0       0       0       0
  3627 ;;      Temps:          0       0       0       0       0       0       0
  3628 ;;      Totals:         0       7       0       0       0       0       0
  3629 ;;Total ram usage:        7 bytes
  3630 ;; Hardware stack levels used:    1
  3631 ;; Hardware stack levels required when called:    7
  3632 ;; This function calls:
  3633 ;;		Absolute function
  3634 ;;		_CRC8
  3635 ;;		_Receive_available
  3636 ;;		_Receive_get
  3637 ;;		_crcBufS_get
  3638 ;;		_crcBufS_status_put
  3639 ;; This function is called by:
  3640 ;;		_receiveData
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text14
  3645  0008C6                     __ptext14:
  3646                           	opt stack 0
  3647  0008C6                     _CRCcheck:
  3648                           	opt stack 21
  3649  0008C6                     l3842:
  3650  0008C6  D801               	call	u3238
  3651  0008C8  D00A               	goto	u3239
  3652  0008CA                     u3238:
  3653  0008CA  0005               	push	
  3654  0008CC  6EFA               	movwf	pclath,c
  3655  0008CE  5030               	movf	_serial_available,w,c
  3656  0008D0  6EFD               	movwf	tosl,c
  3657  0008D2  5031               	movf	_serial_available+1,w,c
  3658  0008D4  6EFE               	movwf	tosh,c
  3659  0008D6  50F8               	movf	tblptru,w,c
  3660  0008D8  6EFF               	movwf	tosu,c
  3661  0008DA  50FA               	movf	pclath,w,c
  3662  0008DC  0012               	return		;indir
  3663  0008DE                     u3239:
  3664  0008DE  BE1E               	btfsc	?_Receive_available+1,7,c
  3665  0008E0  D7F2               	goto	l3842
  3666  0008E2  501E               	movf	?_Receive_available+1,w,c
  3667  0008E4  E104               	bnz	l3844
  3668  0008E6  0E04               	movlw	4
  3669  0008E8  5C1D               	subwf	?_Receive_available,w,c
  3670  0008EA  A0D8               	btfss	status,0,c
  3671  0008EC  D7EC               	goto	l3842
  3672  0008EE                     l3844:
  3673                           
  3674                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3675                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3676  0008EE  D801               	call	u3258
  3677  0008F0  D00A               	goto	u3259
  3678  0008F2                     u3258:
  3679  0008F2  0005               	push	
  3680  0008F4  6EFA               	movwf	pclath,c
  3681  0008F6  5034               	movf	_serial_read,w,c
  3682  0008F8  6EFD               	movwf	tosl,c
  3683  0008FA  5035               	movf	_serial_read+1,w,c
  3684  0008FC  6EFE               	movwf	tosh,c
  3685  0008FE  50F8               	movf	tblptru,w,c
  3686  000900  6EFF               	movwf	tosu,c
  3687  000902  50FA               	movf	pclath,w,c
  3688  000904  0012               	return		;indir
  3689  000906                     u3259:
  3690  000906  0100               	movlb	0	; () banked
  3691  000908  6FD5               	movwf	CRCcheck@arrayHolder& (0+255),b
  3692                           
  3693                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3694  00090A  D801               	call	u3268
  3695  00090C  D00A               	goto	u3269
  3696  00090E                     u3268:
  3697  00090E  0005               	push	
  3698  000910  6EFA               	movwf	pclath,c
  3699  000912  5034               	movf	_serial_read,w,c
  3700  000914  6EFD               	movwf	tosl,c
  3701  000916  5035               	movf	_serial_read+1,w,c
  3702  000918  6EFE               	movwf	tosh,c
  3703  00091A  50F8               	movf	tblptru,w,c
  3704  00091C  6EFF               	movwf	tosu,c
  3705  00091E  50FA               	movf	pclath,w,c
  3706  000920  0012               	return		;indir
  3707  000922                     u3269:
  3708  000922  0100               	movlb	0	; () banked
  3709  000924  6FD6               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3710                           
  3711                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3712  000926  D801               	call	u3278
  3713  000928  D00A               	goto	u3279
  3714  00092A                     u3278:
  3715  00092A  0005               	push	
  3716  00092C  6EFA               	movwf	pclath,c
  3717  00092E  5034               	movf	_serial_read,w,c
  3718  000930  6EFD               	movwf	tosl,c
  3719  000932  5035               	movf	_serial_read+1,w,c
  3720  000934  6EFE               	movwf	tosh,c
  3721  000936  50F8               	movf	tblptru,w,c
  3722  000938  6EFF               	movwf	tosu,c
  3723  00093A  50FA               	movf	pclath,w,c
  3724  00093C  0012               	return		;indir
  3725  00093E                     u3279:
  3726  00093E  0100               	movlb	0	; () banked
  3727  000940  6FD7               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3728                           
  3729                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3730  000942  D801               	call	u3288
  3731  000944  D00A               	goto	u3289
  3732  000946                     u3288:
  3733  000946  0005               	push	
  3734  000948  6EFA               	movwf	pclath,c
  3735  00094A  5034               	movf	_serial_read,w,c
  3736  00094C  6EFD               	movwf	tosl,c
  3737  00094E  5035               	movf	_serial_read+1,w,c
  3738  000950  6EFE               	movwf	tosh,c
  3739  000952  50F8               	movf	tblptru,w,c
  3740  000954  6EFF               	movwf	tosu,c
  3741  000956  50FA               	movf	pclath,w,c
  3742  000958  0012               	return		;indir
  3743  00095A                     u3289:
  3744  00095A  0100               	movlb	0	; () banked
  3745  00095C  6FD3               	movwf	CRCcheck@SentCRC& (0+255),b
  3746                           
  3747                           ; BSR set to: 0
  3748                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3749  00095E  0ED5               	movlw	low CRCcheck@arrayHolder
  3750  000960  6E1B               	movwf	CRC8@data,c
  3751  000962  0E00               	movlw	high CRCcheck@arrayHolder
  3752  000964  6E1C               	movwf	CRC8@data+1,c
  3753  000966  0E03               	movlw	3
  3754  000968  6E1D               	movwf	CRC8@len,c
  3755  00096A  EC3C  F00D         	call	_CRC8	;wreg free
  3756  00096E  0100               	movlb	0	; () banked
  3757  000970  6FD4               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3761  000972  0100               	movlb	0	; () banked
  3762  000974  51D4               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3763  000976  0100               	movlb	0	; () banked
  3764  000978  19D3               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3765  00097A  A4D8               	btfss	status,2,c
  3766  00097C  D04E               	goto	l3874
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;FastTransfer.c: 387: int rt;
  3770                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3771  00097E  0E00               	movlw	0
  3772  000980  0100               	movlb	0	; () banked
  3773  000982  6FD9               	movwf	(CRCcheck@rt+1)& (0+255),b
  3774  000984  0E00               	movlw	0
  3775  000986  6FD8               	movwf	CRCcheck@rt& (0+255),b
  3776  000988                     l3852:
  3777                           
  3778                           ; BSR set to: 0
  3779  000988  0100               	movlb	0	; () banked
  3780  00098A  BFD9               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3781  00098C  D008               	goto	l3856
  3782  00098E  0100               	movlb	0	; () banked
  3783  000990  51D9               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3784  000992  E147               	bnz	l513
  3785  000994  0E05               	movlw	5
  3786  000996  0100               	movlb	0	; () banked
  3787  000998  5DD8               	subwf	CRCcheck@rt& (0+255),w,b
  3788  00099A  B0D8               	btfsc	status,0,c
  3789  00099C  0012               	return	
  3790  00099E                     l3856:
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3794  00099E  0EC0               	movlw	low _crc_buffer
  3795  0009A0  6E1B               	movwf	crcBufS_get@_this,c
  3796  0009A2  0E00               	movlw	high _crc_buffer
  3797  0009A4  6E1C               	movwf	crcBufS_get@_this+1,c
  3798  0009A6  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3799  0009AA  0E00               	movlw	0
  3800  0009AC  6E1E               	movwf	crcBufS_get@space,c
  3801  0009AE  EC72  F007         	call	_crcBufS_get	;wreg free
  3802  0009B2  1840               	xorwf	_returnAddress,w,c
  3803  0009B4  A4D8               	btfss	status,2,c
  3804  0009B6  D02D               	goto	l3870
  3805                           
  3806                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3807  0009B8  0EC0               	movlw	low _crc_buffer
  3808  0009BA  6E1B               	movwf	crcBufS_get@_this,c
  3809  0009BC  0E00               	movlw	high _crc_buffer
  3810  0009BE  6E1C               	movwf	crcBufS_get@_this+1,c
  3811  0009C0  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3812  0009C4  0E01               	movlw	1
  3813  0009C6  6E1E               	movwf	crcBufS_get@space,c
  3814  0009C8  EC72  F007         	call	_crcBufS_get	;wreg free
  3815  0009CC  0100               	movlb	0	; () banked
  3816  0009CE  19D7               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3817  0009D0  A4D8               	btfss	status,2,c
  3818  0009D2  D01F               	goto	l3870
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3822  0009D4  0100               	movlb	0	; () banked
  3823  0009D6  05D6               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3824  0009D8  A4D8               	btfss	status,2,c
  3825  0009DA  D00B               	goto	l3866
  3826                           
  3827                           ; BSR set to: 0
  3828                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3829  0009DC  0EC0               	movlw	low _crc_buffer
  3830  0009DE  6E1B               	movwf	crcBufS_status_put@_this,c
  3831  0009E0  0E00               	movlw	high _crc_buffer
  3832  0009E2  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3833  0009E4  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3834  0009E8  0E01               	movlw	1
  3835  0009EA  6E1E               	movwf	crcBufS_status_put@status,c
  3836  0009EC  EC35  F009         	call	_crcBufS_status_put	;wreg free
  3837                           
  3838                           ;FastTransfer.c: 393: break;
  3839  0009F0  0012               	return	
  3840  0009F2                     l3866:
  3841  0009F2  0E02               	movlw	2
  3842  0009F4  0100               	movlb	0	; () banked
  3843  0009F6  19D6               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3844  0009F8  A4D8               	btfss	status,2,c
  3845  0009FA  D00B               	goto	l3870
  3846                           
  3847                           ; BSR set to: 0
  3848                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3849  0009FC  0EC0               	movlw	low _crc_buffer
  3850  0009FE  6E1B               	movwf	crcBufS_status_put@_this,c
  3851  000A00  0E00               	movlw	high _crc_buffer
  3852  000A02  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3853  000A04  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3854  000A08  0E02               	movlw	2
  3855  000A0A  6E1E               	movwf	crcBufS_status_put@status,c
  3856  000A0C  EC35  F009         	call	_crcBufS_status_put	;wreg free
  3857                           
  3858                           ;FastTransfer.c: 396: break;
  3859  000A10  0012               	return	
  3860  000A12                     l3870:
  3861  000A12  0100               	movlb	0	; () banked
  3862  000A14  4BD8               	infsnz	CRCcheck@rt& (0+255),f,b
  3863  000A16  2BD9               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3864  000A18  D7B7               	goto	l3852
  3865  000A1A                     l3874:
  3866                           
  3867                           ; BSR set to: 0
  3868                           ;FastTransfer.c: 402: crcErrorCounter++;
  3869  000A1A  0100               	movlb	0	; () banked
  3870  000A1C  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  3871  000A1E  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3872  000A20  0012               	return	
  3873  000A22                     l513:
  3874  000A22  0012               	return		;funcret
  3875  000A24                     __end_of_CRCcheck:
  3876                           	opt stack 0
  3877                           tosu	equ	0xFFF
  3878                           tosh	equ	0xFFE
  3879                           tosl	equ	0xFFD
  3880                           pclath	equ	0xFFA
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           postinc0	equ	0xFEE
  3889                           wreg	equ	0xFE8
  3890                           indf2	equ	0xFDF
  3891                           postinc2	equ	0xFDE
  3892                           postdec2	equ	0xFDD
  3893                           plusw2	equ	0xFDB
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _crcBufS_status_put *****************
  3899 ;; Defined at:
  3900 ;;		line 336 in file "FastTransfer.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3903 ;;		 -> crc_buffer(17), 
  3904 ;;  time            1   28[COMRAM] unsigned char 
  3905 ;;  status          1   29[COMRAM] unsigned char 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  wantedTime      2   34[COMRAM] int 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;		None               void
  3910 ;; Registers used:
  3911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3917 ;;      Params:         4       0       0       0       0       0       0
  3918 ;;      Locals:         2       0       0       0       0       0       0
  3919 ;;      Temps:          4       0       0       0       0       0       0
  3920 ;;      Totals:        10       0       0       0       0       0       0
  3921 ;;Total ram usage:       10 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    4
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_CRCcheck
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text15
  3932  00126A                     __ptext15:
  3933                           	opt stack 0
  3934  00126A                     _crcBufS_status_put:
  3935                           	opt stack 23
  3936                           
  3937                           ;FastTransfer.c: 337: if (time >= 5) {
  3938                           
  3939                           ;incstack = 0
  3940  00126A  0E04               	movlw	4
  3941  00126C  641D               	cpfsgt	crcBufS_status_put@time,c
  3942  00126E  D002               	goto	l3738
  3943                           
  3944                           ;FastTransfer.c: 338: time = 5 - 1;
  3945  001270  0E04               	movlw	4
  3946  001272  6E1D               	movwf	crcBufS_status_put@time,c
  3947  001274                     l3738:
  3948                           
  3949                           ;FastTransfer.c: 339: }
  3950                           ;FastTransfer.c: 340: time = time + 1;
  3951  001274  281D               	incf	crcBufS_status_put@time,w,c
  3952  001276  6E1D               	movwf	crcBufS_status_put@time,c
  3953                           
  3954                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3955  001278  501D               	movf	crcBufS_status_put@time,w,c
  3956  00127A  0D03               	mullw	3
  3957  00127C  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3958  001280  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3959                           
  3960                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3961  001284  EE20 F00F          	lfsr	2,15
  3962  001288  501B               	movf	crcBufS_status_put@_this,w,c
  3963  00128A  26D9               	addwf	fsr2l,f,c
  3964  00128C  501C               	movf	crcBufS_status_put@_this+1,w,c
  3965  00128E  22DA               	addwfc	fsr2h,f,c
  3966  001290  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3967  001292  5CDE               	subwf	postinc2,w,c
  3968  001294  50DE               	movf	postinc2,w,c
  3969  001296  0A80               	xorlw	128
  3970  001298  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3971  00129A  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3972  00129C  0A80               	xorlw	128
  3973  00129E  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3974  0012A0  B0D8               	btfsc	status,0,c
  3975  0012A2  D02B               	goto	l3746
  3976                           
  3977                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3978  0012A4  EE20 F00F          	lfsr	2,15
  3979  0012A8  501B               	movf	crcBufS_status_put@_this,w,c
  3980  0012AA  26D9               	addwf	fsr2l,f,c
  3981  0012AC  501C               	movf	crcBufS_status_put@_this+1,w,c
  3982  0012AE  22DA               	addwfc	fsr2h,f,c
  3983  0012B0  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3984  0012B4  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3985  0012B8  1E1F               	comf	??_crcBufS_status_put,f,c
  3986  0012BA  1E20               	comf	??_crcBufS_status_put+1,f,c
  3987  0012BC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3988  0012BE  2A20               	incf	??_crcBufS_status_put+1,f,c
  3989  0012C0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3990  0012C2  261F               	addwf	??_crcBufS_status_put,f,c
  3991  0012C4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3992  0012C6  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3993  0012C8  1E1F               	comf	??_crcBufS_status_put,f,c
  3994  0012CA  1E20               	comf	??_crcBufS_status_put+1,f,c
  3995  0012CC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3996  0012CE  2A20               	incf	??_crcBufS_status_put+1,f,c
  3997  0012D0  0E0F               	movlw	15
  3998  0012D2  241F               	addwf	??_crcBufS_status_put,w,c
  3999  0012D4  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4000  0012D6  0E00               	movlw	0
  4001  0012D8  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4002  0012DA  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4003                           
  4004                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4005  0012DC  0E02               	movlw	2
  4006  0012DE  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4007  0012E0  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4008  0012E2  0E00               	movlw	0
  4009  0012E4  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4010  0012E6  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4011  0012E8  501F               	movf	??_crcBufS_status_put,w,c
  4012  0012EA  241B               	addwf	crcBufS_status_put@_this,w,c
  4013  0012EC  6ED9               	movwf	fsr2l,c
  4014  0012EE  5020               	movf	??_crcBufS_status_put+1,w,c
  4015  0012F0  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4016  0012F2  6EDA               	movwf	fsr2h,c
  4017  0012F4  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4018                           
  4019                           ;FastTransfer.c: 345: } else {
  4020  0012F8  0012               	return	
  4021  0012FA                     l3746:
  4022                           
  4023                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4024  0012FA  EE20 F00F          	lfsr	2,15
  4025  0012FE  501B               	movf	crcBufS_status_put@_this,w,c
  4026  001300  26D9               	addwf	fsr2l,f,c
  4027  001302  501C               	movf	crcBufS_status_put@_this+1,w,c
  4028  001304  22DA               	addwfc	fsr2h,f,c
  4029  001306  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4030  00130A  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4031  00130E  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4032  001312  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4033  001316  1E21               	comf	??_crcBufS_status_put+2,f,c
  4034  001318  1E22               	comf	??_crcBufS_status_put+3,f,c
  4035  00131A  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4036  00131C  2A22               	incf	??_crcBufS_status_put+3,f,c
  4037  00131E  501F               	movf	??_crcBufS_status_put,w,c
  4038  001320  2621               	addwf	??_crcBufS_status_put+2,f,c
  4039  001322  5020               	movf	??_crcBufS_status_put+1,w,c
  4040  001324  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4041  001326  0E02               	movlw	2
  4042  001328  2621               	addwf	??_crcBufS_status_put+2,f,c
  4043  00132A  0E00               	movlw	0
  4044  00132C  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4045  00132E  5021               	movf	??_crcBufS_status_put+2,w,c
  4046  001330  241B               	addwf	crcBufS_status_put@_this,w,c
  4047  001332  6ED9               	movwf	fsr2l,c
  4048  001334  5022               	movf	??_crcBufS_status_put+3,w,c
  4049  001336  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4050  001338  6EDA               	movwf	fsr2h,c
  4051  00133A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4052  00133E  0012               	return	
  4053  001340                     __end_of_crcBufS_status_put:
  4054                           	opt stack 0
  4055                           tosu	equ	0xFFF
  4056                           tosh	equ	0xFFE
  4057                           tosl	equ	0xFFD
  4058                           pclath	equ	0xFFA
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           intcon	equ	0xFF2
  4066                           postinc0	equ	0xFEE
  4067                           wreg	equ	0xFE8
  4068                           indf2	equ	0xFDF
  4069                           postinc2	equ	0xFDE
  4070                           postdec2	equ	0xFDD
  4071                           plusw2	equ	0xFDB
  4072                           fsr2h	equ	0xFDA
  4073                           fsr2l	equ	0xFD9
  4074                           status	equ	0xFD8
  4075                           
  4076 ;; *************** function _crcBufS_get *****************
  4077 ;; Defined at:
  4078 ;;		line 353 in file "FastTransfer.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4081 ;;		 -> crc_buffer(17), 
  4082 ;;  time            1   28[COMRAM] unsigned char 
  4083 ;;  space           1   29[COMRAM] unsigned char 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  wantedTime      2    0[BANK0 ] int 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      unsigned char 
  4088 ;; Registers used:
  4089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4095 ;;      Params:         4       0       0       0       0       0       0
  4096 ;;      Locals:         0       2       0       0       0       0       0
  4097 ;;      Temps:          6       0       0       0       0       0       0
  4098 ;;      Totals:        10       2       0       0       0       0       0
  4099 ;;Total ram usage:       12 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    4
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_CRCcheck
  4106 ;;		_AKNAK
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text16
  4111  000EE4                     __ptext16:
  4112                           	opt stack 0
  4113  000EE4                     _crcBufS_get:
  4114                           	opt stack 23
  4115                           
  4116                           ;FastTransfer.c: 354: if (time >= 5) {
  4117                           
  4118                           ;incstack = 0
  4119  000EE4  0E04               	movlw	4
  4120  000EE6  641D               	cpfsgt	crcBufS_get@time,c
  4121  000EE8  D002               	goto	l3714
  4122                           
  4123                           ;FastTransfer.c: 355: time = 5 - 1;
  4124  000EEA  0E04               	movlw	4
  4125  000EEC  6E1D               	movwf	crcBufS_get@time,c
  4126  000EEE                     l3714:
  4127                           
  4128                           ;FastTransfer.c: 356: }
  4129                           ;FastTransfer.c: 357: if (space >= 3) {
  4130  000EEE  0E02               	movlw	2
  4131  000EF0  641E               	cpfsgt	crcBufS_get@space,c
  4132  000EF2  D002               	goto	l3718
  4133                           
  4134                           ;FastTransfer.c: 358: space = 3 - 1;
  4135  000EF4  0E02               	movlw	2
  4136  000EF6  6E1E               	movwf	crcBufS_get@space,c
  4137  000EF8                     l3718:
  4138                           
  4139                           ;FastTransfer.c: 359: }
  4140                           ;FastTransfer.c: 360: time = time + 1;
  4141  000EF8  281D               	incf	crcBufS_get@time,w,c
  4142  000EFA  6E1D               	movwf	crcBufS_get@time,c
  4143                           
  4144                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4145  000EFC  501D               	movf	crcBufS_get@time,w,c
  4146  000EFE  0D03               	mullw	3
  4147  000F00  CFF3 F0D1          	movff	prodl,crcBufS_get@wantedTime
  4148  000F04  CFF4 F0D2          	movff	prodh,crcBufS_get@wantedTime+1
  4149                           
  4150                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4151  000F08  EE20 F00F          	lfsr	2,15
  4152  000F0C  501B               	movf	crcBufS_get@_this,w,c
  4153  000F0E  26D9               	addwf	fsr2l,f,c
  4154  000F10  501C               	movf	crcBufS_get@_this+1,w,c
  4155  000F12  22DA               	addwfc	fsr2h,f,c
  4156  000F14  0100               	movlb	0	; () banked
  4157  000F16  51D1               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4158  000F18  5CDE               	subwf	postinc2,w,c
  4159  000F1A  50DE               	movf	postinc2,w,c
  4160  000F1C  0A80               	xorlw	128
  4161  000F1E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4162  000F20  0100               	movlb	0	; () banked
  4163  000F22  51D2               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4164  000F24  0A80               	xorlw	128
  4165  000F26  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4166  000F28  B0D8               	btfsc	status,0,c
  4167  000F2A  D030               	goto	l3730
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4171  000F2C  EE20 F00F          	lfsr	2,15
  4172  000F30  501B               	movf	crcBufS_get@_this,w,c
  4173  000F32  26D9               	addwf	fsr2l,f,c
  4174  000F34  501C               	movf	crcBufS_get@_this+1,w,c
  4175  000F36  22DA               	addwfc	fsr2h,f,c
  4176  000F38  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4177  000F3C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4178  000F40  1E1F               	comf	??_crcBufS_get,f,c
  4179  000F42  1E20               	comf	??_crcBufS_get+1,f,c
  4180  000F44  4A1F               	infsnz	??_crcBufS_get,f,c
  4181  000F46  2A20               	incf	??_crcBufS_get+1,f,c
  4182  000F48  0100               	movlb	0	; () banked
  4183  000F4A  51D1               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4184  000F4C  261F               	addwf	??_crcBufS_get,f,c
  4185  000F4E  0100               	movlb	0	; () banked
  4186  000F50  51D2               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4187  000F52  2220               	addwfc	??_crcBufS_get+1,f,c
  4188  000F54  1E1F               	comf	??_crcBufS_get,f,c
  4189  000F56  1E20               	comf	??_crcBufS_get+1,f,c
  4190  000F58  4A1F               	infsnz	??_crcBufS_get,f,c
  4191  000F5A  2A20               	incf	??_crcBufS_get+1,f,c
  4192  000F5C  0E0F               	movlw	15
  4193  000F5E  241F               	addwf	??_crcBufS_get,w,c
  4194  000F60  0100               	movlb	0	; () banked
  4195  000F62  6FD1               	movwf	crcBufS_get@wantedTime& (0+255),b
  4196  000F64  0E00               	movlw	0
  4197  000F66  2020               	addwfc	??_crcBufS_get+1,w,c
  4198  000F68  0100               	movlb	0	; () banked
  4199  000F6A  6FD2               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4200                           
  4201                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4202  000F6C  501E               	movf	crcBufS_get@space,w,c
  4203  000F6E  0100               	movlb	0	; () banked
  4204  000F70  25D1               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4205  000F72  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4206  000F74  0E00               	movlw	0
  4207  000F76  0100               	movlb	0	; () banked
  4208  000F78  21D2               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4209  000F7A  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4210  000F7C  501F               	movf	??_crcBufS_get,w,c
  4211  000F7E  241B               	addwf	crcBufS_get@_this,w,c
  4212  000F80  6ED9               	movwf	fsr2l,c
  4213  000F82  5020               	movf	??_crcBufS_get+1,w,c
  4214  000F84  201C               	addwfc	crcBufS_get@_this+1,w,c
  4215  000F86  6EDA               	movwf	fsr2h,c
  4216  000F88  50DF               	movf	indf2,w,c
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;FastTransfer.c: 365: } else {
  4220                           
  4221                           ; BSR set to: 0
  4222  000F8A  0012               	return	
  4223  000F8C                     l3730:
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4227  000F8C  EE20 F00F          	lfsr	2,15
  4228  000F90  501B               	movf	crcBufS_get@_this,w,c
  4229  000F92  26D9               	addwf	fsr2l,f,c
  4230  000F94  501C               	movf	crcBufS_get@_this+1,w,c
  4231  000F96  22DA               	addwfc	fsr2h,f,c
  4232  000F98  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4233  000F9C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4234  000FA0  C0D1  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4235  000FA4  C0D2  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4236  000FA8  1E21               	comf	??_crcBufS_get+2,f,c
  4237  000FAA  1E22               	comf	??_crcBufS_get+3,f,c
  4238  000FAC  4A21               	infsnz	??_crcBufS_get+2,f,c
  4239  000FAE  2A22               	incf	??_crcBufS_get+3,f,c
  4240  000FB0  501E               	movf	crcBufS_get@space,w,c
  4241  000FB2  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4242  000FB4  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4243  000FB6  5021               	movf	??_crcBufS_get+2,w,c
  4244  000FB8  2623               	addwf	??_crcBufS_get+4,f,c
  4245  000FBA  5022               	movf	??_crcBufS_get+3,w,c
  4246  000FBC  2224               	addwfc	??_crcBufS_get+5,f,c
  4247  000FBE  501F               	movf	??_crcBufS_get,w,c
  4248  000FC0  2623               	addwf	??_crcBufS_get+4,f,c
  4249  000FC2  5020               	movf	??_crcBufS_get+1,w,c
  4250  000FC4  2224               	addwfc	??_crcBufS_get+5,f,c
  4251  000FC6  5023               	movf	??_crcBufS_get+4,w,c
  4252  000FC8  241B               	addwf	crcBufS_get@_this,w,c
  4253  000FCA  6ED9               	movwf	fsr2l,c
  4254  000FCC  5024               	movf	??_crcBufS_get+5,w,c
  4255  000FCE  201C               	addwfc	crcBufS_get@_this+1,w,c
  4256  000FD0  6EDA               	movwf	fsr2h,c
  4257  000FD2  50DF               	movf	indf2,w,c
  4258                           
  4259                           ; BSR set to: 0
  4260  000FD4  0012               	return	
  4261  000FD6                     __end_of_crcBufS_get:
  4262                           	opt stack 0
  4263                           tosu	equ	0xFFF
  4264                           tosh	equ	0xFFE
  4265                           tosl	equ	0xFFD
  4266                           pclath	equ	0xFFA
  4267                           tblptru	equ	0xFF8
  4268                           tblptrh	equ	0xFF7
  4269                           tblptrl	equ	0xFF6
  4270                           tablat	equ	0xFF5
  4271                           prodh	equ	0xFF4
  4272                           prodl	equ	0xFF3
  4273                           intcon	equ	0xFF2
  4274                           postinc0	equ	0xFEE
  4275                           wreg	equ	0xFE8
  4276                           indf2	equ	0xFDF
  4277                           postinc2	equ	0xFDE
  4278                           postdec2	equ	0xFDD
  4279                           plusw2	equ	0xFDB
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function _Receive_get *****************
  4285 ;; Defined at:
  4286 ;;		line 126 in file "UART.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;		None
  4289 ;; Auto vars:     Size  Location     Type
  4290 ;;		None
  4291 ;; Return value:  Size  Location     Type
  4292 ;;                  1    wreg      unsigned char 
  4293 ;; Registers used:
  4294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4295 ;; Tracked objects:
  4296 ;;		On entry : 0/0
  4297 ;;		On exit  : 0/0
  4298 ;;		Unchanged: 0/0
  4299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4300 ;;      Params:         0       0       0       0       0       0       0
  4301 ;;      Locals:         0       0       0       0       0       0       0
  4302 ;;      Temps:          0       0       0       0       0       0       0
  4303 ;;      Totals:         0       0       0       0       0       0       0
  4304 ;;Total ram usage:        0 bytes
  4305 ;; Hardware stack levels used:    1
  4306 ;; Hardware stack levels required when called:    6
  4307 ;; This function calls:
  4308 ;;		_UART_buff_get
  4309 ;; This function is called by:
  4310 ;;		_SYSTEM_Initialize
  4311 ;;		_getch
  4312 ;;		_CRCcheck
  4313 ;;		_receiveData
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text17
  4318  001E52                     __ptext17:
  4319                           	opt stack 0
  4320  001E52                     _Receive_get:
  4321                           	opt stack 22
  4322                           
  4323                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4324                           
  4325                           ; BSR set to: 0
  4326                           ;incstack = 0
  4327  001E52  0E00               	movlw	low _input_buffer
  4328  001E54  6E21               	movwf	UART_buff_get@_this,c
  4329  001E56  0E03               	movlw	high _input_buffer
  4330  001E58  6E22               	movwf	UART_buff_get@_this+1,c
  4331  001E5A  EC6B  F00A         	call	_UART_buff_get	;wreg free
  4332  001E5E  0012               	return	
  4333  001E60                     __end_of_Receive_get:
  4334                           	opt stack 0
  4335                           tosu	equ	0xFFF
  4336                           tosh	equ	0xFFE
  4337                           tosl	equ	0xFFD
  4338                           pclath	equ	0xFFA
  4339                           tblptru	equ	0xFF8
  4340                           tblptrh	equ	0xFF7
  4341                           tblptrl	equ	0xFF6
  4342                           tablat	equ	0xFF5
  4343                           prodh	equ	0xFF4
  4344                           prodl	equ	0xFF3
  4345                           intcon	equ	0xFF2
  4346                           postinc0	equ	0xFEE
  4347                           wreg	equ	0xFE8
  4348                           indf2	equ	0xFDF
  4349                           postinc2	equ	0xFDE
  4350                           postdec2	equ	0xFDD
  4351                           plusw2	equ	0xFDB
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _UART_buff_get *****************
  4357 ;; Defined at:
  4358 ;;		line 81 in file "UART.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4361 ;;		 -> output_buffer(206), input_buffer(206), 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  c               1   36[COMRAM] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  1    wreg      unsigned char 
  4366 ;; Registers used:
  4367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4373 ;;      Params:         2       0       0       0       0       0       0
  4374 ;;      Locals:         1       0       0       0       0       0       0
  4375 ;;      Temps:          2       0       0       0       0       0       0
  4376 ;;      Totals:         5       0       0       0       0       0       0
  4377 ;;Total ram usage:        5 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    5
  4380 ;; This function calls:
  4381 ;;		_UART_buff_modulo_inc
  4382 ;; This function is called by:
  4383 ;;		_Receive_get
  4384 ;;		_Send_put
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text18
  4389  0014D6                     __ptext18:
  4390                           	opt stack 0
  4391  0014D6                     _UART_buff_get:
  4392                           	opt stack 21
  4393                           
  4394                           ;UART.c: 82: unsigned char c;
  4395                           ;UART.c: 83: if (_this->count > 0) {
  4396                           
  4397                           ;incstack = 0
  4398  0014D6  EE20 F0CC          	lfsr	2,204
  4399  0014DA  5021               	movf	UART_buff_get@_this,w,c
  4400  0014DC  26D9               	addwf	fsr2l,f,c
  4401  0014DE  5022               	movf	UART_buff_get@_this+1,w,c
  4402  0014E0  22DA               	addwfc	fsr2h,f,c
  4403  0014E2  0E01               	movlw	1
  4404  0014E4  BEDB               	btfsc	plusw2,7,c
  4405  0014E6  D03C               	goto	l3650
  4406  0014E8  0E01               	movlw	1
  4407  0014EA  50DB               	movf	plusw2,w,c
  4408  0014EC  E103               	bnz	u2980
  4409  0014EE  04DE               	decf	postinc2,w,c
  4410  0014F0  A0D8               	btfss	status,0,c
  4411  0014F2  D036               	goto	l3650
  4412  0014F4                     u2980:
  4413                           
  4414                           ;UART.c: 84: c = _this->buf[_this->tail];
  4415  0014F4  EE20 F0CA          	lfsr	2,202
  4416  0014F8  5021               	movf	UART_buff_get@_this,w,c
  4417  0014FA  26D9               	addwf	fsr2l,f,c
  4418  0014FC  5022               	movf	UART_buff_get@_this+1,w,c
  4419  0014FE  22DA               	addwfc	fsr2h,f,c
  4420  001500  CFDE F023          	movff	postinc2,??_UART_buff_get
  4421  001504  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4422  001508  5023               	movf	??_UART_buff_get,w,c
  4423  00150A  2421               	addwf	UART_buff_get@_this,w,c
  4424  00150C  6ED9               	movwf	fsr2l,c
  4425  00150E  5024               	movf	??_UART_buff_get+1,w,c
  4426  001510  2022               	addwfc	UART_buff_get@_this+1,w,c
  4427  001512  6EDA               	movwf	fsr2h,c
  4428  001514  50DF               	movf	indf2,w,c
  4429  001516  6E25               	movwf	UART_buff_get@c,c
  4430                           
  4431                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4432  001518  EE20 F0CA          	lfsr	2,202
  4433  00151C  5021               	movf	UART_buff_get@_this,w,c
  4434  00151E  26D9               	addwf	fsr2l,f,c
  4435  001520  5022               	movf	UART_buff_get@_this+1,w,c
  4436  001522  22DA               	addwfc	fsr2h,f,c
  4437  001524  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4438  001528  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4439  00152C  0E00               	movlw	0
  4440  00152E  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4441  001530  0EC8               	movlw	200
  4442  001532  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4443  001534  EC50  F00E         	call	_UART_buff_modulo_inc	;wreg free
  4444  001538  EE20 F0CA          	lfsr	2,202
  4445  00153C  5021               	movf	UART_buff_get@_this,w,c
  4446  00153E  26D9               	addwf	fsr2l,f,c
  4447  001540  5022               	movf	UART_buff_get@_this+1,w,c
  4448  001542  22DA               	addwfc	fsr2h,f,c
  4449  001544  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4450  001548  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4451                           
  4452                           ;UART.c: 86: --_this->count;
  4453  00154C  EE20 F0CC          	lfsr	2,204
  4454  001550  5021               	movf	UART_buff_get@_this,w,c
  4455  001552  26D9               	addwf	fsr2l,f,c
  4456  001554  5022               	movf	UART_buff_get@_this+1,w,c
  4457  001556  22DA               	addwfc	fsr2h,f,c
  4458  001558  06DE               	decf	postinc2,f,c
  4459  00155A  0E00               	movlw	0
  4460  00155C  5ADD               	subwfb	postdec2,f,c
  4461                           
  4462                           ;UART.c: 87: } else {
  4463  00155E  D002               	goto	l708
  4464  001560                     l3650:
  4465                           
  4466                           ;UART.c: 88: c = 0;
  4467  001560  0E00               	movlw	0
  4468  001562  6E25               	movwf	UART_buff_get@c,c
  4469  001564                     l708:
  4470                           
  4471                           ;UART.c: 89: }
  4472                           ;UART.c: 90: return (c);
  4473  001564  5025               	movf	UART_buff_get@c,w,c
  4474  001566  0012               	return	
  4475  001568                     __end_of_UART_buff_get:
  4476                           	opt stack 0
  4477                           tosu	equ	0xFFF
  4478                           tosh	equ	0xFFE
  4479                           tosl	equ	0xFFD
  4480                           pclath	equ	0xFFA
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           postinc0	equ	0xFEE
  4489                           wreg	equ	0xFE8
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           postdec2	equ	0xFDD
  4493                           plusw2	equ	0xFDB
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function _UART_buff_modulo_inc *****************
  4499 ;; Defined at:
  4500 ;;		line 106 in file "UART.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  value           2   26[COMRAM] const unsigned int 
  4503 ;;  modulus         2   28[COMRAM] const unsigned int 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  my_value        2   30[COMRAM] unsigned int 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  2   26[COMRAM] unsigned int 
  4508 ;; Registers used:
  4509 ;;		wreg, status,2, status,0
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4515 ;;      Params:         4       0       0       0       0       0       0
  4516 ;;      Locals:         2       0       0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0
  4518 ;;      Totals:         6       0       0       0       0       0       0
  4519 ;;Total ram usage:        6 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:    4
  4522 ;; This function calls:
  4523 ;;		Nothing
  4524 ;; This function is called by:
  4525 ;;		_UART_buff_put
  4526 ;;		_UART_buff_get
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text19
  4531  001CA0                     __ptext19:
  4532                           	opt stack 0
  4533  001CA0                     _UART_buff_modulo_inc:
  4534                           	opt stack 21
  4535                           
  4536                           ;UART.c: 107: unsigned int my_value = value + 1;
  4537                           
  4538                           ;incstack = 0
  4539  001CA0  0E01               	movlw	1
  4540  001CA2  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4541  001CA4  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4542  001CA6  0E00               	movlw	0
  4543  001CA8  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4544  001CAA  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4545                           
  4546                           ;UART.c: 108: if (my_value >= modulus) {
  4547  001CAC  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4548  001CAE  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4549  001CB0  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4550  001CB2  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4551  001CB4  A0D8               	btfss	status,0,c
  4552  001CB6  D004               	goto	l3600
  4553                           
  4554                           ;UART.c: 109: my_value = 0;
  4555  001CB8  0E00               	movlw	0
  4556  001CBA  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4557  001CBC  0E00               	movlw	0
  4558  001CBE  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4559  001CC0                     l3600:
  4560                           
  4561                           ;UART.c: 110: }
  4562                           ;UART.c: 111: return (my_value);
  4563  001CC0  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4564  001CC4  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4565  001CC8  0012               	return	
  4566  001CCA                     __end_of_UART_buff_modulo_inc:
  4567                           	opt stack 0
  4568                           tosu	equ	0xFFF
  4569                           tosh	equ	0xFFE
  4570                           tosl	equ	0xFFD
  4571                           pclath	equ	0xFFA
  4572                           tblptru	equ	0xFF8
  4573                           tblptrh	equ	0xFF7
  4574                           tblptrl	equ	0xFF6
  4575                           tablat	equ	0xFF5
  4576                           prodh	equ	0xFF4
  4577                           prodl	equ	0xFF3
  4578                           intcon	equ	0xFF2
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           indf2	equ	0xFDF
  4582                           postinc2	equ	0xFDE
  4583                           postdec2	equ	0xFDD
  4584                           plusw2	equ	0xFDB
  4585                           fsr2h	equ	0xFDA
  4586                           fsr2l	equ	0xFD9
  4587                           status	equ	0xFD8
  4588                           
  4589 ;; *************** function _Receive_available *****************
  4590 ;; Defined at:
  4591 ;;		line 122 in file "UART.c"
  4592 ;; Parameters:    Size  Location     Type
  4593 ;;		None
  4594 ;; Auto vars:     Size  Location     Type
  4595 ;;		None
  4596 ;; Return value:  Size  Location     Type
  4597 ;;                  2   28[COMRAM] int 
  4598 ;; Registers used:
  4599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4605 ;;      Params:         2       0       0       0       0       0       0
  4606 ;;      Locals:         0       0       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0
  4608 ;;      Totals:         2       0       0       0       0       0       0
  4609 ;;Total ram usage:        2 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    5
  4612 ;; This function calls:
  4613 ;;		_UART_buff_size
  4614 ;; This function is called by:
  4615 ;;		_SYSTEM_Initialize
  4616 ;;		_CRCcheck
  4617 ;;		_receiveData
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text20
  4622  001DDA                     __ptext20:
  4623                           	opt stack 0
  4624  001DDA                     _Receive_available:
  4625                           	opt stack 23
  4626                           
  4627                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4628                           
  4629                           ;incstack = 0
  4630  001DDA  0E00               	movlw	low _input_buffer
  4631  001DDC  6E1B               	movwf	UART_buff_size@_this,c
  4632  001DDE  0E03               	movlw	high _input_buffer
  4633  001DE0  6E1C               	movwf	UART_buff_size@_this+1,c
  4634  001DE2  ECF8  F00E         	call	_UART_buff_size	;wreg free
  4635  001DE6  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4636  001DEA  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4637  001DEE  0012               	return	
  4638  001DF0                     __end_of_Receive_available:
  4639                           	opt stack 0
  4640                           tosu	equ	0xFFF
  4641                           tosh	equ	0xFFE
  4642                           tosl	equ	0xFFD
  4643                           pclath	equ	0xFFA
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodh	equ	0xFF4
  4649                           prodl	equ	0xFF3
  4650                           intcon	equ	0xFF2
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           indf2	equ	0xFDF
  4654                           postinc2	equ	0xFDE
  4655                           postdec2	equ	0xFDD
  4656                           plusw2	equ	0xFDB
  4657                           fsr2h	equ	0xFDA
  4658                           fsr2l	equ	0xFD9
  4659                           status	equ	0xFD8
  4660                           
  4661 ;; *************** function _UART_buff_size *****************
  4662 ;; Defined at:
  4663 ;;		line 102 in file "UART.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4666 ;;		 -> output_buffer(206), input_buffer(206), 
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;		None
  4669 ;; Return value:  Size  Location     Type
  4670 ;;                  2   26[COMRAM] int 
  4671 ;; Registers used:
  4672 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4678 ;;      Params:         2       0       0       0       0       0       0
  4679 ;;      Locals:         0       0       0       0       0       0       0
  4680 ;;      Temps:          0       0       0       0       0       0       0
  4681 ;;      Totals:         2       0       0       0       0       0       0
  4682 ;;Total ram usage:        2 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    4
  4685 ;; This function calls:
  4686 ;;		Nothing
  4687 ;; This function is called by:
  4688 ;;		_Receive_available
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           	psect	text21
  4693  001DF0                     __ptext21:
  4694                           	opt stack 0
  4695  001DF0                     _UART_buff_size:
  4696                           	opt stack 23
  4697                           
  4698                           ;UART.c: 103: return (_this->count);
  4699                           
  4700                           ;incstack = 0
  4701  001DF0  EE20 F0CC          	lfsr	2,204
  4702  001DF4  501B               	movf	UART_buff_size@_this,w,c
  4703  001DF6  26D9               	addwf	fsr2l,f,c
  4704  001DF8  501C               	movf	UART_buff_size@_this+1,w,c
  4705  001DFA  22DA               	addwfc	fsr2h,f,c
  4706  001DFC  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4707  001E00  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4708  001E04  0012               	return	
  4709  001E06                     __end_of_UART_buff_size:
  4710                           	opt stack 0
  4711                           tosu	equ	0xFFF
  4712                           tosh	equ	0xFFE
  4713                           tosl	equ	0xFFD
  4714                           pclath	equ	0xFFA
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           intcon	equ	0xFF2
  4722                           postinc0	equ	0xFEE
  4723                           wreg	equ	0xFE8
  4724                           indf2	equ	0xFDF
  4725                           postinc2	equ	0xFDE
  4726                           postdec2	equ	0xFDD
  4727                           plusw2	equ	0xFDB
  4728                           fsr2h	equ	0xFDA
  4729                           fsr2l	equ	0xFD9
  4730                           status	equ	0xFD8
  4731                           
  4732 ;; *************** function _CRC8 *****************
  4733 ;; Defined at:
  4734 ;;		line 34 in file "FastTransfer.c"
  4735 ;; Parameters:    Size  Location     Type
  4736 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4737 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1247(3), receiveData@holder(3), 
  4738 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4739 ;;  len             1   28[COMRAM] unsigned char 
  4740 ;; Auto vars:     Size  Location     Type
  4741 ;;  sum             1   29[COMRAM] unsigned char 
  4742 ;;  tempI           1   31[COMRAM] unsigned char 
  4743 ;;  extract         1   30[COMRAM] unsigned char 
  4744 ;;  crc             1   32[COMRAM] unsigned char 
  4745 ;; Return value:  Size  Location     Type
  4746 ;;                  1    wreg      unsigned char 
  4747 ;; Registers used:
  4748 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4749 ;; Tracked objects:
  4750 ;;		On entry : 0/0
  4751 ;;		On exit  : 0/0
  4752 ;;		Unchanged: 0/0
  4753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4754 ;;      Params:         3       0       0       0       0       0       0
  4755 ;;      Locals:         4       0       0       0       0       0       0
  4756 ;;      Temps:          0       0       0       0       0       0       0
  4757 ;;      Totals:         7       0       0       0       0       0       0
  4758 ;;Total ram usage:        7 bytes
  4759 ;; Hardware stack levels used:    1
  4760 ;; Hardware stack levels required when called:    4
  4761 ;; This function calls:
  4762 ;;		Nothing
  4763 ;; This function is called by:
  4764 ;;		_sendData
  4765 ;;		_receiveData
  4766 ;;		_CRCcheck
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text22
  4771  001A78                     __ptext22:
  4772                           	opt stack 0
  4773  001A78                     _CRC8:
  4774                           	opt stack 23
  4775                           
  4776                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4777                           
  4778                           ;incstack = 0
  4779  001A78  0E00               	movlw	0
  4780  001A7A  6E21               	movwf	CRC8@crc,c
  4781                           
  4782                           ;FastTransfer.c: 36: while (len--) {
  4783  001A7C  D01C               	goto	l3676
  4784  001A7E                     l3660:
  4785                           
  4786                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4787  001A7E  C01B  FFD9         	movff	CRC8@data,fsr2l
  4788  001A82  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4789  001A86  50DF               	movf	indf2,w,c
  4790  001A88  6E1F               	movwf	CRC8@extract,c
  4791  001A8A  4A1B               	infsnz	CRC8@data,f,c
  4792  001A8C  2A1C               	incf	CRC8@data+1,f,c
  4793                           
  4794                           ;FastTransfer.c: 38: unsigned char tempI;
  4795                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4796  001A8E  0E08               	movlw	8
  4797  001A90  6E20               	movwf	CRC8@tempI,c
  4798  001A92  D00E               	goto	l3674
  4799  001A94                     l3666:
  4800                           
  4801                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4802  001A94  5021               	movf	CRC8@crc,w,c
  4803  001A96  181F               	xorwf	CRC8@extract,w,c
  4804  001A98  0B01               	andlw	1
  4805  001A9A  6E1E               	movwf	CRC8@sum,c
  4806                           
  4807                           ;FastTransfer.c: 41: crc >>= 1;
  4808  001A9C  90D8               	bcf	status,0,c
  4809  001A9E  3221               	rrcf	CRC8@crc,f,c
  4810                           
  4811                           ;FastTransfer.c: 42: if (sum) {
  4812  001AA0  501E               	movf	CRC8@sum,w,c
  4813  001AA2  B4D8               	btfsc	status,2,c
  4814  001AA4  D002               	goto	l399
  4815                           
  4816                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4817  001AA6  0E8C               	movlw	140
  4818  001AA8  1A21               	xorwf	CRC8@crc,f,c
  4819  001AAA                     l399:
  4820                           
  4821                           ;FastTransfer.c: 44: }
  4822                           ;FastTransfer.c: 45: extract >>= 1;
  4823  001AAA  90D8               	bcf	status,0,c
  4824  001AAC  321F               	rrcf	CRC8@extract,f,c
  4825  001AAE  0620               	decf	CRC8@tempI,f,c
  4826  001AB0                     l3674:
  4827  001AB0  5020               	movf	CRC8@tempI,w,c
  4828  001AB2  A4D8               	btfss	status,2,c
  4829  001AB4  D7EF               	goto	l3666
  4830  001AB6                     l3676:
  4831  001AB6  061D               	decf	CRC8@len,f,c
  4832  001AB8  281D               	incf	CRC8@len,w,c
  4833  001ABA  A4D8               	btfss	status,2,c
  4834  001ABC  D7E0               	goto	l3660
  4835                           
  4836                           ;FastTransfer.c: 46: }
  4837                           ;FastTransfer.c: 47: }
  4838                           ;FastTransfer.c: 48: return crc;
  4839  001ABE  5021               	movf	CRC8@crc,w,c
  4840  001AC0  0012               	return	
  4841  001AC2                     __end_of_CRC8:
  4842                           	opt stack 0
  4843                           tosu	equ	0xFFF
  4844                           tosh	equ	0xFFE
  4845                           tosl	equ	0xFFD
  4846                           pclath	equ	0xFFA
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           postinc0	equ	0xFEE
  4855                           wreg	equ	0xFE8
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           plusw2	equ	0xFDB
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _processPowerRequest *****************
  4865 ;; Defined at:
  4866 ;;		line 33 in file "Communications.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  powerSet        2    4[BANK0 ] int 
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;		None               void
  4873 ;; Registers used:
  4874 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4880 ;;      Params:         0       2       0       0       0       0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0
  4883 ;;      Totals:         0       2       0       0       0       0       0
  4884 ;;Total ram usage:        2 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    7
  4887 ;; This function calls:
  4888 ;;		_EnableSlavePower
  4889 ;;		_Update
  4890 ;; This function is called by:
  4891 ;;		_updateComms
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text23
  4896  001340                     __ptext23:
  4897                           	opt stack 0
  4898  001340                     _processPowerRequest:
  4899                           	opt stack 22
  4900                           
  4901                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4902                           
  4903                           ;incstack = 0
  4904  001340  0100               	movlb	0	; () banked
  4905  001342  A1D5               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4906  001344  D009               	goto	l4088
  4907                           
  4908                           ; BSR set to: 0
  4909  001346  0E00               	movlw	0
  4910  001348  0100               	movlb	0	; () banked
  4911  00134A  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4912  00134C  0E01               	movlw	1
  4913  00134E  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4914  001350  0E04               	movlw	4
  4915  001352  ECEB  F007         	call	_EnableSlavePower
  4916  001356  D008               	goto	l4090
  4917  001358                     l4088:
  4918                           
  4919                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4920  001358  0E00               	movlw	0
  4921  00135A  0100               	movlb	0	; () banked
  4922  00135C  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4923  00135E  0E00               	movlw	0
  4924  001360  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4925  001362  0E04               	movlw	4
  4926  001364  ECEB  F007         	call	_EnableSlavePower
  4927  001368                     l4090:
  4928                           
  4929                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4930  001368  0100               	movlb	0	; () banked
  4931  00136A  A3D5               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4932  00136C  D009               	goto	l4094
  4933                           
  4934                           ; BSR set to: 0
  4935  00136E  0E00               	movlw	0
  4936  001370  0100               	movlb	0	; () banked
  4937  001372  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4938  001374  0E01               	movlw	1
  4939  001376  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4940  001378  0E02               	movlw	2
  4941  00137A  ECEB  F007         	call	_EnableSlavePower
  4942  00137E  D008               	goto	l4096
  4943  001380                     l4094:
  4944                           
  4945                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4946  001380  0E00               	movlw	0
  4947  001382  0100               	movlb	0	; () banked
  4948  001384  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4949  001386  0E00               	movlw	0
  4950  001388  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4951  00138A  0E02               	movlw	2
  4952  00138C  ECEB  F007         	call	_EnableSlavePower
  4953  001390                     l4096:
  4954                           
  4955                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4956  001390  0100               	movlb	0	; () banked
  4957  001392  A5D5               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4958  001394  D009               	goto	l4100
  4959                           
  4960                           ; BSR set to: 0
  4961  001396  0E00               	movlw	0
  4962  001398  0100               	movlb	0	; () banked
  4963  00139A  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4964  00139C  0E01               	movlw	1
  4965  00139E  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4966  0013A0  0E01               	movlw	1
  4967  0013A2  ECEB  F007         	call	_EnableSlavePower
  4968  0013A6  D008               	goto	l4102
  4969  0013A8                     l4100:
  4970                           
  4971                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4972  0013A8  0E00               	movlw	0
  4973  0013AA  0100               	movlb	0	; () banked
  4974  0013AC  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4975  0013AE  0E00               	movlw	0
  4976  0013B0  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4977  0013B2  0E01               	movlw	1
  4978  0013B4  ECEB  F007         	call	_EnableSlavePower
  4979  0013B8                     l4102:
  4980                           
  4981                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  4982  0013B8  0100               	movlb	0	; () banked
  4983  0013BA  A7D5               	btfss	processPowerRequest@powerSet& (0+255),3,b
  4984  0013BC  D009               	goto	l4106
  4985                           
  4986                           ; BSR set to: 0
  4987  0013BE  0E00               	movlw	0
  4988  0013C0  0100               	movlb	0	; () banked
  4989  0013C2  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  4990  0013C4  0E01               	movlw	1
  4991  0013C6  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  4992  0013C8  0E03               	movlw	3
  4993  0013CA  ECEB  F007         	call	_EnableSlavePower
  4994  0013CE  D008               	goto	l4108
  4995  0013D0                     l4106:
  4996                           
  4997                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  4998  0013D0  0E00               	movlw	0
  4999  0013D2  0100               	movlb	0	; () banked
  5000  0013D4  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5001  0013D6  0E00               	movlw	0
  5002  0013D8  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5003  0013DA  0E03               	movlw	3
  5004  0013DC  ECEB  F007         	call	_EnableSlavePower
  5005  0013E0                     l4108:
  5006                           
  5007                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  5008  0013E0  0100               	movlb	0	; () banked
  5009  0013E2  A9D5               	btfss	processPowerRequest@powerSet& (0+255),4,b
  5010  0013E4  D009               	goto	l4112
  5011                           
  5012                           ; BSR set to: 0
  5013  0013E6  0E00               	movlw	0
  5014  0013E8  0100               	movlb	0	; () banked
  5015  0013EA  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5016  0013EC  0E01               	movlw	1
  5017  0013EE  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5018  0013F0  0E05               	movlw	5
  5019  0013F2  ECEB  F007         	call	_EnableSlavePower
  5020  0013F6  D008               	goto	l325
  5021  0013F8                     l4112:
  5022                           
  5023                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  5024  0013F8  0E00               	movlw	0
  5025  0013FA  0100               	movlb	0	; () banked
  5026  0013FC  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  5027  0013FE  0E00               	movlw	0
  5028  001400  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  5029  001402  0E05               	movlw	5
  5030  001404  ECEB  F007         	call	_EnableSlavePower
  5031  001408                     l325:
  5032                           
  5033                           ;Communications.c: 45: Update();
  5034  001408  EC3C  F00F         	call	_Update	;wreg free
  5035  00140C  0012               	return		;funcret
  5036  00140E                     __end_of_processPowerRequest:
  5037                           	opt stack 0
  5038                           tosu	equ	0xFFF
  5039                           tosh	equ	0xFFE
  5040                           tosl	equ	0xFFD
  5041                           pclath	equ	0xFFA
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           intcon	equ	0xFF2
  5049                           postinc0	equ	0xFEE
  5050                           wreg	equ	0xFE8
  5051                           indf2	equ	0xFDF
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           plusw2	equ	0xFDB
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _SYSTEM_Initialize *****************
  5060 ;; Defined at:
  5061 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5075 ;;      Params:         0       0       0       0       0       0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0
  5078 ;;      Totals:         0       0       0       0       0       0       0
  5079 ;;Total ram usage:        0 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    7
  5082 ;; This function calls:
  5083 ;;		_ADC_Initialize
  5084 ;;		_EUSART1_Initialize
  5085 ;;		_INTERRUPT_Initialize
  5086 ;;		_OSCILLATOR_Initialize
  5087 ;;		_PIN_MANAGER_Initialize
  5088 ;;		_PWM4_Initialize
  5089 ;;		_TMR2_Initialize
  5090 ;;		_begin
  5091 ;; This function is called by:
  5092 ;;		_main
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text24
  5097  001710                     __ptext24:
  5098                           	opt stack 0
  5099  001710                     _SYSTEM_Initialize:
  5100                           	opt stack 23
  5101                           
  5102                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5103                           
  5104                           ;incstack = 0
  5105  001710  EC30  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  5106                           
  5107                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5108  001714  EC2B  F00C         	call	_PIN_MANAGER_Initialize	;wreg free
  5109                           
  5110                           ;mcc.c: 116: INTERRUPT_Initialize();
  5111  001718  EC37  F00F         	call	_INTERRUPT_Initialize	;wreg free
  5112                           
  5113                           ;mcc.c: 117: EUSART1_Initialize();
  5114  00171C  EC86  F00D         	call	_EUSART1_Initialize	;wreg free
  5115                           
  5116                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5117  001720  0E98               	movlw	low _receiveArray
  5118  001722  0100               	movlb	0	; () banked
  5119  001724  6FD1               	movwf	begin@ptr& (0+255),b
  5120  001726  0E00               	movlw	high _receiveArray
  5121  001728  0100               	movlb	0	; () banked
  5122  00172A  6FD2               	movwf	(begin@ptr+1)& (0+255),b
  5123  00172C  0E28               	movlw	40
  5124  00172E  0100               	movlb	0	; () banked
  5125  001730  6FD3               	movwf	begin@maxSize& (0+255),b
  5126  001732  0E05               	movlw	5
  5127  001734  0100               	movlb	0	; () banked
  5128  001736  6FD4               	movwf	begin@givenAddress& (0+255),b
  5129  001738  0E00               	movlw	0
  5130  00173A  0100               	movlb	0	; () banked
  5131  00173C  6FD5               	movwf	begin@error& (0+255),b
  5132  00173E  0E1A               	movlw	low _Send_put
  5133  001740  0100               	movlb	0	; () banked
  5134  001742  6FD6               	movwf	begin@stufftosend& (0+255),b
  5135  001744  0E1C               	movlw	high _Send_put
  5136  001746  0100               	movlb	0	; () banked
  5137  001748  6FD7               	movwf	(begin@stufftosend+1)& (0+255),b
  5138  00174A  0E52               	movlw	low _Receive_get
  5139  00174C  0100               	movlb	0	; () banked
  5140  00174E  6FD8               	movwf	begin@stufftoreceive& (0+255),b
  5141  001750  0E1E               	movlw	high _Receive_get
  5142  001752  0100               	movlb	0	; () banked
  5143  001754  6FD9               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5144  001756  0EDA               	movlw	low _Receive_available
  5145  001758  0100               	movlb	0	; () banked
  5146  00175A  6FDA               	movwf	begin@stuffavailable& (0+255),b
  5147  00175C  0E1D               	movlw	high _Receive_available
  5148  00175E  0100               	movlb	0	; () banked
  5149  001760  6FDB               	movwf	(begin@stuffavailable+1)& (0+255),b
  5150  001762  0E44               	movlw	low _Receive_peek
  5151  001764  0100               	movlb	0	; () banked
  5152  001766  6FDC               	movwf	begin@stuffpeek& (0+255),b
  5153  001768  0E1E               	movlw	high _Receive_peek
  5154  00176A  0100               	movlb	0	; () banked
  5155  00176C  6FDD               	movwf	(begin@stuffpeek+1)& (0+255),b
  5156  00176E  ECBE  F00C         	call	_begin	;wreg free
  5157                           
  5158                           ;mcc.c: 119: PWM4_Initialize();
  5159  001772  ECC8  F00E         	call	_PWM4_Initialize	;wreg free
  5160                           
  5161                           ;mcc.c: 120: TMR2_Initialize();
  5162  001776  EC0E  F00F         	call	_TMR2_Initialize	;wreg free
  5163                           
  5164                           ;mcc.c: 121: LATB4 = 1;
  5165  00177A  888A               	bsf	3978,4,c	;volatile
  5166                           
  5167                           ;mcc.c: 122: ADC_Initialize();
  5168  00177C  ECE1  F00E         	call	_ADC_Initialize	;wreg free
  5169  001780  0012               	return		;funcret
  5170  001782                     __end_of_SYSTEM_Initialize:
  5171                           	opt stack 0
  5172                           tosu	equ	0xFFF
  5173                           tosh	equ	0xFFE
  5174                           tosl	equ	0xFFD
  5175                           pclath	equ	0xFFA
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           intcon	equ	0xFF2
  5183                           postinc0	equ	0xFEE
  5184                           wreg	equ	0xFE8
  5185                           indf2	equ	0xFDF
  5186                           postinc2	equ	0xFDE
  5187                           postdec2	equ	0xFDD
  5188                           plusw2	equ	0xFDB
  5189                           fsr2h	equ	0xFDA
  5190                           fsr2l	equ	0xFD9
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function _begin *****************
  5194 ;; Defined at:
  5195 ;;		line 18 in file "FastTransfer.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5198 ;;		 -> receiveArray(40), 
  5199 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5200 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5201 ;;  error           1    4[BANK0 ] unsigned char 
  5202 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5203 ;;		 -> Send_put(0), 
  5204 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5205 ;;		 -> Receive_get(1), 
  5206 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5207 ;;		 -> Receive_available(2), 
  5208 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5209 ;;		 -> Receive_peek(1), 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;		None
  5212 ;; Return value:  Size  Location     Type
  5213 ;;		None               void
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0, cstack
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5221 ;;      Params:         0      13       0       0       0       0       0
  5222 ;;      Locals:         0       0       0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0
  5224 ;;      Totals:         0      13       0       0       0       0       0
  5225 ;;Total ram usage:       13 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    5
  5228 ;; This function calls:
  5229 ;;		___awdiv
  5230 ;; This function is called by:
  5231 ;;		_SYSTEM_Initialize
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text25
  5236  00197C                     __ptext25:
  5237                           	opt stack 0
  5238  00197C                     _begin:
  5239                           	opt stack 24
  5240                           
  5241                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5242                           
  5243                           ;incstack = 0
  5244  00197C  C0D1  F02C         	movff	begin@ptr,_receiveArrayAddress
  5245  001980  C0D2  F02D         	movff	begin@ptr+1,_receiveArrayAddress+1
  5246                           
  5247                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5248  001984  C0D4  F03F         	movff	begin@givenAddress,_moduleAddress
  5249                           
  5250                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5251  001988  C0D6  F036         	movff	begin@stufftosend,_serial_write
  5252  00198C  C0D7  F037         	movff	begin@stufftosend+1,_serial_write+1
  5253                           
  5254                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5255  001990  C0DA  F030         	movff	begin@stuffavailable,_serial_available
  5256  001994  C0DB  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5257                           
  5258                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5259  001998  C0DC  F032         	movff	begin@stuffpeek,_serial_peek
  5260  00199C  C0DD  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5261                           
  5262                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5263  0019A0  C0D8  F034         	movff	begin@stufftoreceive,_serial_read
  5264  0019A4  C0D9  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5265                           
  5266                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5267  0019A8  C0D3  F01B         	movff	begin@maxSize,___awdiv@dividend
  5268  0019AC  6A1C               	clrf	___awdiv@dividend+1,c
  5269  0019AE  0E00               	movlw	0
  5270  0019B0  6E1E               	movwf	___awdiv@divisor+1,c
  5271  0019B2  0E02               	movlw	2
  5272  0019B4  6E1D               	movwf	___awdiv@divisor,c
  5273  0019B6  EC46  F00B         	call	___awdiv	;wreg free
  5274  0019BA  501B               	movf	?___awdiv,w,c
  5275  0019BC  6E3E               	movwf	_maxDataAddress,c
  5276                           
  5277                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5278  0019BE  0E30               	movlw	low _ring_buffer
  5279  0019C0  6E2E               	movwf	_sendStructAddress,c
  5280  0019C2  0E01               	movlw	high _ring_buffer
  5281  0019C4  6E2F               	movwf	_sendStructAddress+1,c
  5282                           
  5283                           ;FastTransfer.c: 27: AKNAKsend = error;
  5284  0019C6  C0D5  F03C         	movff	begin@error,_AKNAKsend
  5285                           
  5286                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5287  0019CA  0E00               	movlw	0
  5288  0019CC  0100               	movlb	0	; () banked
  5289  0019CE  6F93               	movwf	(_alignErrorCounter+1)& (0+255),b
  5290  0019D0  0E00               	movlw	0
  5291  0019D2  6F92               	movwf	_alignErrorCounter& (0+255),b
  5292                           
  5293                           ; BSR set to: 0
  5294  0019D4  0012               	return		;funcret
  5295  0019D6                     __end_of_begin:
  5296                           	opt stack 0
  5297                           tosu	equ	0xFFF
  5298                           tosh	equ	0xFFE
  5299                           tosl	equ	0xFFD
  5300                           pclath	equ	0xFFA
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf2	equ	0xFDF
  5311                           postinc2	equ	0xFDE
  5312                           postdec2	equ	0xFDD
  5313                           plusw2	equ	0xFDB
  5314                           fsr2h	equ	0xFDA
  5315                           fsr2l	equ	0xFD9
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function ___awdiv *****************
  5319 ;; Defined at:
  5320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  dividend        2   26[COMRAM] int 
  5323 ;;  divisor         2   28[COMRAM] int 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  quotient        2   32[COMRAM] int 
  5326 ;;  sign            1   31[COMRAM] unsigned char 
  5327 ;;  counter         1   30[COMRAM] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;                  2   26[COMRAM] int 
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, status,0
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5337 ;;      Params:         4       0       0       0       0       0       0
  5338 ;;      Locals:         4       0       0       0       0       0       0
  5339 ;;      Temps:          0       0       0       0       0       0       0
  5340 ;;      Totals:         8       0       0       0       0       0       0
  5341 ;;Total ram usage:        8 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:    4
  5344 ;; This function calls:
  5345 ;;		Nothing
  5346 ;; This function is called by:
  5347 ;;		_begin
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text26
  5352  00168C                     __ptext26:
  5353                           	opt stack 0
  5354  00168C                     ___awdiv:
  5355                           	opt stack 24
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;incstack = 0
  5359  00168C  0E00               	movlw	0
  5360  00168E  6E20               	movwf	___awdiv@sign,c
  5361  001690  AE1E               	btfss	___awdiv@divisor+1,7,c
  5362  001692  D006               	goto	l2966
  5363  001694  6C1D               	negf	___awdiv@divisor,c
  5364  001696  1E1E               	comf	___awdiv@divisor+1,f,c
  5365  001698  B0D8               	btfsc	status,0,c
  5366  00169A  2A1E               	incf	___awdiv@divisor+1,f,c
  5367  00169C  0E01               	movlw	1
  5368  00169E  6E20               	movwf	___awdiv@sign,c
  5369  0016A0                     l2966:
  5370  0016A0  AE1C               	btfss	___awdiv@dividend+1,7,c
  5371  0016A2  D006               	goto	l2972
  5372  0016A4  6C1B               	negf	___awdiv@dividend,c
  5373  0016A6  1E1C               	comf	___awdiv@dividend+1,f,c
  5374  0016A8  B0D8               	btfsc	status,0,c
  5375  0016AA  2A1C               	incf	___awdiv@dividend+1,f,c
  5376  0016AC  0E01               	movlw	1
  5377  0016AE  1A20               	xorwf	___awdiv@sign,f,c
  5378  0016B0                     l2972:
  5379  0016B0  0E00               	movlw	0
  5380  0016B2  6E22               	movwf	___awdiv@quotient+1,c
  5381  0016B4  0E00               	movlw	0
  5382  0016B6  6E21               	movwf	___awdiv@quotient,c
  5383  0016B8  501D               	movf	___awdiv@divisor,w,c
  5384  0016BA  101E               	iorwf	___awdiv@divisor+1,w,c
  5385  0016BC  B4D8               	btfsc	status,2,c
  5386  0016BE  D01C               	goto	l2994
  5387  0016C0  0E01               	movlw	1
  5388  0016C2  6E1F               	movwf	___awdiv@counter,c
  5389  0016C4  D004               	goto	l2980
  5390  0016C6                     l2978:
  5391  0016C6  90D8               	bcf	status,0,c
  5392  0016C8  361D               	rlcf	___awdiv@divisor,f,c
  5393  0016CA  361E               	rlcf	___awdiv@divisor+1,f,c
  5394  0016CC  2A1F               	incf	___awdiv@counter,f,c
  5395  0016CE                     l2980:
  5396  0016CE  AE1E               	btfss	___awdiv@divisor+1,7,c
  5397  0016D0  D7FA               	goto	l2978
  5398  0016D2                     l2982:
  5399  0016D2  90D8               	bcf	status,0,c
  5400  0016D4  3621               	rlcf	___awdiv@quotient,f,c
  5401  0016D6  3622               	rlcf	___awdiv@quotient+1,f,c
  5402  0016D8  501D               	movf	___awdiv@divisor,w,c
  5403  0016DA  5C1B               	subwf	___awdiv@dividend,w,c
  5404  0016DC  501E               	movf	___awdiv@divisor+1,w,c
  5405  0016DE  581C               	subwfb	___awdiv@dividend+1,w,c
  5406  0016E0  A0D8               	btfss	status,0,c
  5407  0016E2  D005               	goto	l2990
  5408  0016E4  501D               	movf	___awdiv@divisor,w,c
  5409  0016E6  5E1B               	subwf	___awdiv@dividend,f,c
  5410  0016E8  501E               	movf	___awdiv@divisor+1,w,c
  5411  0016EA  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5412  0016EC  8021               	bsf	___awdiv@quotient,0,c
  5413  0016EE                     l2990:
  5414  0016EE  90D8               	bcf	status,0,c
  5415  0016F0  321E               	rrcf	___awdiv@divisor+1,f,c
  5416  0016F2  321D               	rrcf	___awdiv@divisor,f,c
  5417  0016F4  2E1F               	decfsz	___awdiv@counter,f,c
  5418  0016F6  D7ED               	goto	l2982
  5419  0016F8                     l2994:
  5420  0016F8  5020               	movf	___awdiv@sign,w,c
  5421  0016FA  B4D8               	btfsc	status,2,c
  5422  0016FC  D004               	goto	l2998
  5423  0016FE  6C21               	negf	___awdiv@quotient,c
  5424  001700  1E22               	comf	___awdiv@quotient+1,f,c
  5425  001702  B0D8               	btfsc	status,0,c
  5426  001704  2A22               	incf	___awdiv@quotient+1,f,c
  5427  001706                     l2998:
  5428  001706  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5429  00170A  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5430  00170E  0012               	return	
  5431  001710                     __end_of___awdiv:
  5432                           	opt stack 0
  5433                           tosu	equ	0xFFF
  5434                           tosh	equ	0xFFE
  5435                           tosl	equ	0xFFD
  5436                           pclath	equ	0xFFA
  5437                           tblptru	equ	0xFF8
  5438                           tblptrh	equ	0xFF7
  5439                           tblptrl	equ	0xFF6
  5440                           tablat	equ	0xFF5
  5441                           prodh	equ	0xFF4
  5442                           prodl	equ	0xFF3
  5443                           intcon	equ	0xFF2
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           indf2	equ	0xFDF
  5447                           postinc2	equ	0xFDE
  5448                           postdec2	equ	0xFDD
  5449                           plusw2	equ	0xFDB
  5450                           fsr2h	equ	0xFDA
  5451                           fsr2l	equ	0xFD9
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _TMR2_Initialize *****************
  5455 ;; Defined at:
  5456 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;		None               void
  5463 ;; Registers used:
  5464 ;;		wreg, status,2, cstack
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5470 ;;      Params:         0       0       0       0       0       0       0
  5471 ;;      Locals:         0       0       0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0       0       0
  5473 ;;      Totals:         0       0       0       0       0       0       0
  5474 ;;Total ram usage:        0 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    5
  5477 ;; This function calls:
  5478 ;;		_TMR2_StartTimer
  5479 ;; This function is called by:
  5480 ;;		_SYSTEM_Initialize
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text27
  5485  001E1C                     __ptext27:
  5486                           	opt stack 0
  5487  001E1C                     _TMR2_Initialize:
  5488                           	opt stack 24
  5489                           
  5490                           ;tmr2.c: 63: T2CON = 0x29;
  5491                           
  5492                           ;incstack = 0
  5493  001E1C  0E29               	movlw	41
  5494  001E1E  6EBA               	movwf	4026,c	;volatile
  5495                           
  5496                           ;tmr2.c: 66: PR2 = 0xF9;
  5497  001E20  0EF9               	movlw	249
  5498  001E22  6EBB               	movwf	4027,c	;volatile
  5499                           
  5500                           ;tmr2.c: 69: TMR2 = 0x00;
  5501  001E24  0E00               	movlw	0
  5502  001E26  6EBC               	movwf	4028,c	;volatile
  5503                           
  5504                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  5505  001E28  929E               	bcf	3998,1,c	;volatile
  5506                           
  5507                           ;tmr2.c: 75: TMR2_StartTimer();
  5508  001E2A  EC3F  F00F         	call	_TMR2_StartTimer	;wreg free
  5509  001E2E  0012               	return		;funcret
  5510  001E30                     __end_of_TMR2_Initialize:
  5511                           	opt stack 0
  5512                           tosu	equ	0xFFF
  5513                           tosh	equ	0xFFE
  5514                           tosl	equ	0xFFD
  5515                           pclath	equ	0xFFA
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           indf2	equ	0xFDF
  5526                           postinc2	equ	0xFDE
  5527                           postdec2	equ	0xFDD
  5528                           plusw2	equ	0xFDB
  5529                           fsr2h	equ	0xFDA
  5530                           fsr2l	equ	0xFD9
  5531                           status	equ	0xFD8
  5532                           
  5533 ;; *************** function _TMR2_StartTimer *****************
  5534 ;; Defined at:
  5535 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;		None
  5540 ;; Return value:  Size  Location     Type
  5541 ;;		None               void
  5542 ;; Registers used:
  5543 ;;		None
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5549 ;;      Params:         0       0       0       0       0       0       0
  5550 ;;      Locals:         0       0       0       0       0       0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0
  5552 ;;      Totals:         0       0       0       0       0       0       0
  5553 ;;Total ram usage:        0 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    4
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_TMR2_Initialize
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           	psect	text28
  5564  001E7E                     __ptext28:
  5565                           	opt stack 0
  5566  001E7E                     _TMR2_StartTimer:
  5567                           	opt stack 24
  5568                           
  5569                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  5570                           
  5571                           ;incstack = 0
  5572  001E7E  84BA               	bsf	4026,2,c	;volatile
  5573  001E80  0012               	return		;funcret
  5574  001E82                     __end_of_TMR2_StartTimer:
  5575                           	opt stack 0
  5576                           tosu	equ	0xFFF
  5577                           tosh	equ	0xFFE
  5578                           tosl	equ	0xFFD
  5579                           pclath	equ	0xFFA
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           indf2	equ	0xFDF
  5590                           postinc2	equ	0xFDE
  5591                           postdec2	equ	0xFDD
  5592                           plusw2	equ	0xFDB
  5593                           fsr2h	equ	0xFDA
  5594                           fsr2l	equ	0xFD9
  5595                           status	equ	0xFD8
  5596                           
  5597 ;; *************** function _PWM4_Initialize *****************
  5598 ;; Defined at:
  5599 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;		None
  5602 ;; Auto vars:     Size  Location     Type
  5603 ;;		None
  5604 ;; Return value:  Size  Location     Type
  5605 ;;		None               void
  5606 ;; Registers used:
  5607 ;;		wreg, status,2
  5608 ;; Tracked objects:
  5609 ;;		On entry : 0/0
  5610 ;;		On exit  : 0/0
  5611 ;;		Unchanged: 0/0
  5612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5613 ;;      Params:         0       0       0       0       0       0       0
  5614 ;;      Locals:         0       0       0       0       0       0       0
  5615 ;;      Temps:          0       0       0       0       0       0       0
  5616 ;;      Totals:         0       0       0       0       0       0       0
  5617 ;;Total ram usage:        0 bytes
  5618 ;; Hardware stack levels used:    1
  5619 ;; Hardware stack levels required when called:    4
  5620 ;; This function calls:
  5621 ;;		Nothing
  5622 ;; This function is called by:
  5623 ;;		_SYSTEM_Initialize
  5624 ;; This function uses a non-reentrant model
  5625 ;;
  5626                           
  5627                           	psect	text29
  5628  001D90                     __ptext29:
  5629                           	opt stack 0
  5630  001D90                     _PWM4_Initialize:
  5631                           	opt stack 25
  5632                           
  5633                           ;pwm4.c: 69: CCP4CON = 0x3C;
  5634                           
  5635                           ;incstack = 0
  5636  001D90  0E3C               	movlw	60
  5637  001D92  010F               	movlb	15	; () banked
  5638  001D94  6F57               	movwf	87,b	;volatile
  5639                           
  5640                           ;pwm4.c: 72: CCPR4L = 0x7C;
  5641  001D96  0E7C               	movlw	124
  5642  001D98  010F               	movlb	15	; () banked
  5643  001D9A  6F58               	movwf	88,b	;volatile
  5644                           
  5645                           ;pwm4.c: 75: CCPR4H = 0x00;
  5646  001D9C  0E00               	movlw	0
  5647  001D9E  010F               	movlb	15	; () banked
  5648  001DA0  6F59               	movwf	89,b	;volatile
  5649                           
  5650                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5651  001DA2  0EFC               	movlw	-4
  5652  001DA4  010F               	movlb	15	; () banked
  5653  001DA6  1748               	andwf	72,f,b	;volatile
  5654                           
  5655                           ; BSR set to: 15
  5656  001DA8  0012               	return		;funcret
  5657  001DAA                     __end_of_PWM4_Initialize:
  5658                           	opt stack 0
  5659                           tosu	equ	0xFFF
  5660                           tosh	equ	0xFFE
  5661                           tosl	equ	0xFFD
  5662                           pclath	equ	0xFFA
  5663                           tblptru	equ	0xFF8
  5664                           tblptrh	equ	0xFF7
  5665                           tblptrl	equ	0xFF6
  5666                           tablat	equ	0xFF5
  5667                           prodh	equ	0xFF4
  5668                           prodl	equ	0xFF3
  5669                           intcon	equ	0xFF2
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           plusw2	equ	0xFDB
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function _PIN_MANAGER_Initialize *****************
  5681 ;; Defined at:
  5682 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;		None
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;		None               void
  5689 ;; Registers used:
  5690 ;;		wreg, status,2
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5696 ;;      Params:         0       0       0       0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0
  5699 ;;      Totals:         0       0       0       0       0       0       0
  5700 ;;Total ram usage:        0 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    4
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_SYSTEM_Initialize
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text30
  5711  001856                     __ptext30:
  5712                           	opt stack 0
  5713  001856                     _PIN_MANAGER_Initialize:
  5714                           	opt stack 25
  5715                           
  5716                           ;pin_manager.c: 52: LATA = 0x00;
  5717                           
  5718                           ; BSR set to: 15
  5719                           ;incstack = 0
  5720  001856  0E00               	movlw	0
  5721  001858  6E89               	movwf	3977,c	;volatile
  5722                           
  5723                           ;pin_manager.c: 53: TRISA = 0xF7;
  5724  00185A  0EF7               	movlw	247
  5725  00185C  6E92               	movwf	3986,c	;volatile
  5726                           
  5727                           ;pin_manager.c: 54: ANSELA = 0x27;
  5728  00185E  0E27               	movlw	39
  5729  001860  010F               	movlb	15	; () banked
  5730  001862  6F38               	movwf	56,b	;volatile
  5731                           
  5732                           ;pin_manager.c: 56: LATB = 0x01;
  5733  001864  0E01               	movlw	1
  5734  001866  6E8A               	movwf	3978,c	;volatile
  5735                           
  5736                           ;pin_manager.c: 57: TRISB = 0xFE;
  5737  001868  0EFE               	movlw	254
  5738  00186A  6E93               	movwf	3987,c	;volatile
  5739                           
  5740                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5741  00186C  0E3E               	movlw	62
  5742  00186E  010F               	movlb	15	; () banked
  5743  001870  6F39               	movwf	57,b	;volatile
  5744                           
  5745                           ;pin_manager.c: 59: WPUB = 0x00;
  5746  001872  0E00               	movlw	0
  5747  001874  6E61               	movwf	3937,c	;volatile
  5748                           
  5749                           ;pin_manager.c: 61: LATC = 0x00;
  5750  001876  0E00               	movlw	0
  5751  001878  6E8B               	movwf	3979,c	;volatile
  5752                           
  5753                           ;pin_manager.c: 62: TRISC = 0xDF;
  5754  00187A  0EDF               	movlw	223
  5755  00187C  6E94               	movwf	3988,c	;volatile
  5756                           
  5757                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5758  00187E  0E1C               	movlw	28
  5759  001880  010F               	movlb	15	; () banked
  5760  001882  6F3A               	movwf	58,b	;volatile
  5761                           
  5762                           ;pin_manager.c: 65: LATD = 0x00;
  5763  001884  0E00               	movlw	0
  5764  001886  6E8C               	movwf	3980,c	;volatile
  5765                           
  5766                           ;pin_manager.c: 66: TRISD = 0x0F;
  5767  001888  0E0F               	movlw	15
  5768  00188A  6E95               	movwf	3989,c	;volatile
  5769                           
  5770                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5771  00188C  0E0F               	movlw	15
  5772  00188E  010F               	movlb	15	; () banked
  5773  001890  6F3B               	movwf	59,b	;volatile
  5774                           
  5775                           ;pin_manager.c: 69: LATE = 0x00;
  5776  001892  0E00               	movlw	0
  5777  001894  6E8D               	movwf	3981,c	;volatile
  5778                           
  5779                           ;pin_manager.c: 70: TRISE = 0x07;
  5780  001896  0E07               	movlw	7
  5781  001898  6E96               	movwf	3990,c	;volatile
  5782                           
  5783                           ;pin_manager.c: 71: ANSELE = 0x07;
  5784  00189A  0E07               	movlw	7
  5785  00189C  010F               	movlb	15	; () banked
  5786  00189E  6F3C               	movwf	60,b	;volatile
  5787                           
  5788                           ; BSR set to: 15
  5789                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5790  0018A0  8C94               	bsf	3988,6,c	;volatile
  5791                           
  5792                           ; BSR set to: 15
  5793                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5794  0018A2  8E94               	bsf	3988,7,c	;volatile
  5795                           
  5796                           ; BSR set to: 15
  5797                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5798  0018A4  9A94               	bcf	3988,5,c	;volatile
  5799                           
  5800                           ; BSR set to: 15
  5801                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5802  0018A6  8A8B               	bsf	3979,5,c	;volatile
  5803                           
  5804                           ; BSR set to: 15
  5805                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5806  0018A8  8C8B               	bsf	3979,6,c	;volatile
  5807                           
  5808                           ; BSR set to: 15
  5809                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5810  0018AA  8E8B               	bsf	3979,7,c	;volatile
  5811                           
  5812                           ; BSR set to: 15
  5813                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5814  0018AC  010F               	movlb	15	; () banked
  5815  0018AE  9B3A               	bcf	58,5,b	;volatile
  5816                           
  5817                           ; BSR set to: 15
  5818                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5819  0018B0  010F               	movlb	15	; () banked
  5820  0018B2  9D3A               	bcf	58,6,b	;volatile
  5821                           
  5822                           ; BSR set to: 15
  5823                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5824  0018B4  010F               	movlb	15	; () banked
  5825  0018B6  9F3A               	bcf	58,7,b	;volatile
  5826                           
  5827                           ; BSR set to: 15
  5828                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5829  0018B8  8EF1               	bsf	intcon2,7,c	;volatile
  5830                           
  5831                           ; BSR set to: 15
  5832  0018BA  0012               	return		;funcret
  5833  0018BC                     __end_of_PIN_MANAGER_Initialize:
  5834                           	opt stack 0
  5835                           tosu	equ	0xFFF
  5836                           tosh	equ	0xFFE
  5837                           tosl	equ	0xFFD
  5838                           pclath	equ	0xFFA
  5839                           tblptru	equ	0xFF8
  5840                           tblptrh	equ	0xFF7
  5841                           tblptrl	equ	0xFF6
  5842                           tablat	equ	0xFF5
  5843                           prodh	equ	0xFF4
  5844                           prodl	equ	0xFF3
  5845                           intcon	equ	0xFF2
  5846                           intcon2	equ	0xFF1
  5847                           postinc0	equ	0xFEE
  5848                           wreg	equ	0xFE8
  5849                           indf2	equ	0xFDF
  5850                           postinc2	equ	0xFDE
  5851                           postdec2	equ	0xFDD
  5852                           plusw2	equ	0xFDB
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _OSCILLATOR_Initialize *****************
  5858 ;; Defined at:
  5859 ;;		line 125 in file "mcc_generated_files/mcc.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;		None               void
  5866 ;; Registers used:
  5867 ;;		wreg, status,2
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5873 ;;      Params:         0       0       0       0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0
  5876 ;;      Totals:         0       0       0       0       0       0       0
  5877 ;;Total ram usage:        0 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    4
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_SYSTEM_Initialize
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text31
  5888  001E60                     __ptext31:
  5889                           	opt stack 0
  5890  001E60                     _OSCILLATOR_Initialize:
  5891                           	opt stack 25
  5892                           
  5893                           ;mcc.c: 127: OSCCON = 0x60;
  5894                           
  5895                           ; BSR set to: 15
  5896                           ;incstack = 0
  5897  001E60  0E60               	movlw	96
  5898  001E62  6ED3               	movwf	4051,c	;volatile
  5899                           
  5900                           ;mcc.c: 129: OSCCON2 = 0x04;
  5901  001E64  0E04               	movlw	4
  5902  001E66  6ED2               	movwf	4050,c	;volatile
  5903                           
  5904                           ;mcc.c: 131: OSCTUNE = 0x00;
  5905  001E68  0E00               	movlw	0
  5906  001E6A  6E9B               	movwf	3995,c	;volatile
  5907  001E6C  0012               	return		;funcret
  5908  001E6E                     __end_of_OSCILLATOR_Initialize:
  5909                           	opt stack 0
  5910                           tosu	equ	0xFFF
  5911                           tosh	equ	0xFFE
  5912                           tosl	equ	0xFFD
  5913                           pclath	equ	0xFFA
  5914                           tblptru	equ	0xFF8
  5915                           tblptrh	equ	0xFF7
  5916                           tblptrl	equ	0xFF6
  5917                           tablat	equ	0xFF5
  5918                           prodh	equ	0xFF4
  5919                           prodl	equ	0xFF3
  5920                           intcon	equ	0xFF2
  5921                           intcon2	equ	0xFF1
  5922                           postinc0	equ	0xFEE
  5923                           wreg	equ	0xFE8
  5924                           indf2	equ	0xFDF
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           plusw2	equ	0xFDB
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function _INTERRUPT_Initialize *****************
  5933 ;; Defined at:
  5934 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;		None
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;		None               void
  5941 ;; Registers used:
  5942 ;;		None
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5948 ;;      Params:         0       0       0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0
  5951 ;;      Totals:         0       0       0       0       0       0       0
  5952 ;;Total ram usage:        0 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    4
  5955 ;; This function calls:
  5956 ;;		Nothing
  5957 ;; This function is called by:
  5958 ;;		_SYSTEM_Initialize
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text32
  5963  001E6E                     __ptext32:
  5964                           	opt stack 0
  5965  001E6E                     _INTERRUPT_Initialize:
  5966                           	opt stack 25
  5967                           
  5968                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5969                           
  5970                           ;incstack = 0
  5971  001E6E  9ED0               	bcf	4048,7,c	;volatile
  5972                           
  5973                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5974  001E70  9A9F               	bcf	3999,5,c	;volatile
  5975                           
  5976                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5977  001E72  989F               	bcf	3999,4,c	;volatile
  5978                           
  5979                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5980  001E74  9C9F               	bcf	3999,6,c	;volatile
  5981  001E76  0012               	return		;funcret
  5982  001E78                     __end_of_INTERRUPT_Initialize:
  5983                           	opt stack 0
  5984                           tosu	equ	0xFFF
  5985                           tosh	equ	0xFFE
  5986                           tosl	equ	0xFFD
  5987                           pclath	equ	0xFFA
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           intcon2	equ	0xFF1
  5996                           postinc0	equ	0xFEE
  5997                           wreg	equ	0xFE8
  5998                           indf2	equ	0xFDF
  5999                           postinc2	equ	0xFDE
  6000                           postdec2	equ	0xFDD
  6001                           plusw2	equ	0xFDB
  6002                           fsr2h	equ	0xFDA
  6003                           fsr2l	equ	0xFD9
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _EUSART1_Initialize *****************
  6007 ;; Defined at:
  6008 ;;		line 21 in file "UART.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;		None
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;		None
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6022 ;;      Params:         0       0       0       0       0       0       0
  6023 ;;      Locals:         0       0       0       0       0       0       0
  6024 ;;      Temps:          0       0       0       0       0       0       0
  6025 ;;      Totals:         0       0       0       0       0       0       0
  6026 ;;Total ram usage:        0 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:    6
  6029 ;; This function calls:
  6030 ;;		_UART_buff_init
  6031 ;; This function is called by:
  6032 ;;		_SYSTEM_Initialize
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text33
  6037  001B0C                     __ptext33:
  6038                           	opt stack 0
  6039  001B0C                     _EUSART1_Initialize:
  6040                           	opt stack 23
  6041                           
  6042                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  6043                           
  6044                           ;incstack = 0
  6045  001B0C  9A9D               	bcf	3997,5,c	;volatile
  6046                           
  6047                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  6048  001B0E  989D               	bcf	3997,4,c	;volatile
  6049                           
  6050                           ;UART.c: 29: BAUD1CON = 0x48;
  6051  001B10  0E48               	movlw	72
  6052  001B12  6EB8               	movwf	4024,c	;volatile
  6053                           
  6054                           ;UART.c: 32: RC1STA = 0x98;
  6055  001B14  0E98               	movlw	152
  6056  001B16  6EAB               	movwf	4011,c	;volatile
  6057                           
  6058                           ;UART.c: 35: TX1STA = 0x26;
  6059  001B18  0E26               	movlw	38
  6060  001B1A  6EAC               	movwf	4012,c	;volatile
  6061                           
  6062                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  6063  001B1C  0E33               	movlw	51
  6064  001B1E  6EAF               	movwf	4015,c	;volatile
  6065                           
  6066                           ;UART.c: 41: SPBRGH1 = 0x00;
  6067  001B20  0E00               	movlw	0
  6068  001B22  6EB0               	movwf	4016,c	;volatile
  6069                           
  6070                           ;UART.c: 44: TXREG1 = 0x00;
  6071  001B24  0E00               	movlw	0
  6072  001B26  6EAD               	movwf	4013,c	;volatile
  6073                           
  6074                           ;UART.c: 47: RCREG1 = 0x00;
  6075  001B28  0E00               	movlw	0
  6076  001B2A  6EAE               	movwf	4014,c	;volatile
  6077                           
  6078                           ;UART.c: 49: UART_buff_init(&input_buffer);
  6079  001B2C  0E00               	movlw	low _input_buffer
  6080  001B2E  6E23               	movwf	UART_buff_init@_this,c
  6081  001B30  0E03               	movlw	high _input_buffer
  6082  001B32  6E24               	movwf	UART_buff_init@_this+1,c
  6083  001B34  EC9B  F00E         	call	_UART_buff_init	;wreg free
  6084                           
  6085                           ;UART.c: 50: UART_buff_init(&output_buffer);
  6086  001B38  0E00               	movlw	low _output_buffer
  6087  001B3A  6E23               	movwf	UART_buff_init@_this,c
  6088  001B3C  0E04               	movlw	high _output_buffer
  6089  001B3E  6E24               	movwf	UART_buff_init@_this+1,c
  6090  001B40  EC9B  F00E         	call	_UART_buff_init	;wreg free
  6091                           
  6092                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  6093  001B44  8A9D               	bsf	3997,5,c	;volatile
  6094  001B46  0012               	return		;funcret
  6095  001B48                     __end_of_EUSART1_Initialize:
  6096                           	opt stack 0
  6097                           tosu	equ	0xFFF
  6098                           tosh	equ	0xFFE
  6099                           tosl	equ	0xFFD
  6100                           pclath	equ	0xFFA
  6101                           tblptru	equ	0xFF8
  6102                           tblptrh	equ	0xFF7
  6103                           tblptrl	equ	0xFF6
  6104                           tablat	equ	0xFF5
  6105                           prodh	equ	0xFF4
  6106                           prodl	equ	0xFF3
  6107                           intcon	equ	0xFF2
  6108                           intcon2	equ	0xFF1
  6109                           postinc0	equ	0xFEE
  6110                           wreg	equ	0xFE8
  6111                           indf2	equ	0xFDF
  6112                           postinc2	equ	0xFDE
  6113                           postdec2	equ	0xFDD
  6114                           plusw2	equ	0xFDB
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _UART_buff_init *****************
  6120 ;; Defined at:
  6121 ;;		line 56 in file "UART.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  6124 ;;		 -> output_buffer(206), input_buffer(206), 
  6125 ;; Auto vars:     Size  Location     Type
  6126 ;;		None
  6127 ;; Return value:  Size  Location     Type
  6128 ;;		None               void
  6129 ;; Registers used:
  6130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6131 ;; Tracked objects:
  6132 ;;		On entry : 0/0
  6133 ;;		On exit  : 0/0
  6134 ;;		Unchanged: 0/0
  6135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6136 ;;      Params:         2       0       0       0       0       0       0
  6137 ;;      Locals:         0       0       0       0       0       0       0
  6138 ;;      Temps:          0       0       0       0       0       0       0
  6139 ;;      Totals:         2       0       0       0       0       0       0
  6140 ;;Total ram usage:        2 bytes
  6141 ;; Hardware stack levels used:    1
  6142 ;; Hardware stack levels required when called:    5
  6143 ;; This function calls:
  6144 ;;		_memset
  6145 ;; This function is called by:
  6146 ;;		_EUSART1_Initialize
  6147 ;; This function uses a non-reentrant model
  6148 ;;
  6149                           
  6150                           	psect	text34
  6151  001D36                     __ptext34:
  6152                           	opt stack 0
  6153  001D36                     _UART_buff_init:
  6154                           	opt stack 23
  6155                           
  6156                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  6157                           
  6158                           ;incstack = 0
  6159  001D36  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  6160  001D3A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  6161  001D3E  0E00               	movlw	0
  6162  001D40  6E1E               	movwf	memset@c+1,c
  6163  001D42  0E00               	movlw	0
  6164  001D44  6E1D               	movwf	memset@c,c
  6165  001D46  0E00               	movlw	0
  6166  001D48  6E20               	movwf	memset@n+1,c
  6167  001D4A  0ECE               	movlw	206
  6168  001D4C  6E1F               	movwf	memset@n,c
  6169  001D4E  EC25  F00E         	call	_memset	;wreg free
  6170  001D52  0012               	return		;funcret
  6171  001D54                     __end_of_UART_buff_init:
  6172                           	opt stack 0
  6173                           tosu	equ	0xFFF
  6174                           tosh	equ	0xFFE
  6175                           tosl	equ	0xFFD
  6176                           pclath	equ	0xFFA
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           prodh	equ	0xFF4
  6182                           prodl	equ	0xFF3
  6183                           intcon	equ	0xFF2
  6184                           intcon2	equ	0xFF1
  6185                           postinc0	equ	0xFEE
  6186                           wreg	equ	0xFE8
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           plusw2	equ	0xFDB
  6191                           fsr2h	equ	0xFDA
  6192                           fsr2l	equ	0xFD9
  6193                           status	equ	0xFD8
  6194                           
  6195 ;; *************** function _memset *****************
  6196 ;; Defined at:
  6197 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;  p1              2   26[COMRAM] PTR void 
  6200 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6201 ;;  c               2   28[COMRAM] int 
  6202 ;;  n               2   30[COMRAM] unsigned int 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  p               2   32[COMRAM] PTR unsigned char 
  6205 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  2   26[COMRAM] PTR void 
  6208 ;; Registers used:
  6209 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6215 ;;      Params:         6       0       0       0       0       0       0
  6216 ;;      Locals:         2       0       0       0       0       0       0
  6217 ;;      Temps:          0       0       0       0       0       0       0
  6218 ;;      Totals:         8       0       0       0       0       0       0
  6219 ;;Total ram usage:        8 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    4
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_FastTransfer_buffer_flush
  6226 ;;		_UART_buff_init
  6227 ;;		_UART_buff_flush
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text35
  6232  001C4A                     __ptext35:
  6233                           	opt stack 0
  6234  001C4A                     _memset:
  6235                           	opt stack 22
  6236                           
  6237                           ;incstack = 0
  6238  001C4A  C01B  F021         	movff	memset@p1,memset@p
  6239  001C4E  C01C  F022         	movff	memset@p1+1,memset@p+1
  6240  001C52  D008               	goto	l3626
  6241  001C54                     l3622:
  6242  001C54  C021  FFD9         	movff	memset@p,fsr2l
  6243  001C58  C022  FFDA         	movff	memset@p+1,fsr2h
  6244  001C5C  C01D  FFDF         	movff	memset@c,indf2
  6245  001C60  4A21               	infsnz	memset@p,f,c
  6246  001C62  2A22               	incf	memset@p+1,f,c
  6247  001C64                     l3626:
  6248  001C64  061F               	decf	memset@n,f,c
  6249  001C66  A0D8               	btfss	status,0,c
  6250  001C68  0620               	decf	memset@n+1,f,c
  6251  001C6A  281F               	incf	memset@n,w,c
  6252  001C6C  E1F3               	bnz	l3622
  6253  001C6E  2820               	incf	memset@n+1,w,c
  6254  001C70  B4D8               	btfsc	status,2,c
  6255  001C72  0012               	return	
  6256  001C74  D7EF               	goto	l3622
  6257  001C76                     __end_of_memset:
  6258                           	opt stack 0
  6259                           tosu	equ	0xFFF
  6260                           tosh	equ	0xFFE
  6261                           tosl	equ	0xFFD
  6262                           pclath	equ	0xFFA
  6263                           tblptru	equ	0xFF8
  6264                           tblptrh	equ	0xFF7
  6265                           tblptrl	equ	0xFF6
  6266                           tablat	equ	0xFF5
  6267                           prodh	equ	0xFF4
  6268                           prodl	equ	0xFF3
  6269                           intcon	equ	0xFF2
  6270                           intcon2	equ	0xFF1
  6271                           postinc0	equ	0xFEE
  6272                           wreg	equ	0xFE8
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           plusw2	equ	0xFDB
  6277                           fsr2h	equ	0xFDA
  6278                           fsr2l	equ	0xFD9
  6279                           status	equ	0xFD8
  6280                           
  6281 ;; *************** function _ADC_Initialize *****************
  6282 ;; Defined at:
  6283 ;;		line 59 in file "mcc_generated_files/adc.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, status,2
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6297 ;;      Params:         0       0       0       0       0       0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    4
  6304 ;; This function calls:
  6305 ;;		Nothing
  6306 ;; This function is called by:
  6307 ;;		_SYSTEM_Initialize
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           	psect	text36
  6312  001DC2                     __ptext36:
  6313                           	opt stack 0
  6314  001DC2                     _ADC_Initialize:
  6315                           	opt stack 25
  6316                           
  6317                           ;adc.c: 64: ADCON0 = 0x01;
  6318                           
  6319                           ;incstack = 0
  6320  001DC2  0E01               	movlw	1
  6321  001DC4  6EC2               	movwf	4034,c	;volatile
  6322                           
  6323                           ;adc.c: 67: ADCON1 = 0x80;
  6324  001DC6  0E80               	movlw	128
  6325  001DC8  6EC1               	movwf	4033,c	;volatile
  6326                           
  6327                           ;adc.c: 70: ADCON2 = 0x12;
  6328  001DCA  0E12               	movlw	18
  6329  001DCC  6EC0               	movwf	4032,c	;volatile
  6330                           
  6331                           ;adc.c: 73: ADRESL = 0x00;
  6332  001DCE  0E00               	movlw	0
  6333  001DD0  6EC3               	movwf	4035,c	;volatile
  6334                           
  6335                           ;adc.c: 76: ADRESH = 0x00;
  6336  001DD2  0E00               	movlw	0
  6337  001DD4  6EC4               	movwf	4036,c	;volatile
  6338                           
  6339                           ;adc.c: 79: PIE1bits.ADIE = 1;
  6340  001DD6  8C9D               	bsf	3997,6,c	;volatile
  6341  001DD8  0012               	return		;funcret
  6342  001DDA                     __end_of_ADC_Initialize:
  6343                           	opt stack 0
  6344                           tosu	equ	0xFFF
  6345                           tosh	equ	0xFFE
  6346                           tosl	equ	0xFFD
  6347                           pclath	equ	0xFFA
  6348                           tblptru	equ	0xFF8
  6349                           tblptrh	equ	0xFF7
  6350                           tblptrl	equ	0xFF6
  6351                           tablat	equ	0xFF5
  6352                           prodh	equ	0xFF4
  6353                           prodl	equ	0xFF3
  6354                           intcon	equ	0xFF2
  6355                           intcon2	equ	0xFF1
  6356                           postinc0	equ	0xFEE
  6357                           wreg	equ	0xFE8
  6358                           indf2	equ	0xFDF
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           plusw2	equ	0xFDB
  6362                           fsr2h	equ	0xFDA
  6363                           fsr2l	equ	0xFD9
  6364                           status	equ	0xFD8
  6365                           
  6366 ;; *************** function _PDUStartup *****************
  6367 ;; Defined at:
  6368 ;;		line 15 in file "PDU.c"
  6369 ;; Parameters:    Size  Location     Type
  6370 ;;		None
  6371 ;; Auto vars:     Size  Location     Type
  6372 ;;		None
  6373 ;; Return value:  Size  Location     Type
  6374 ;;		None               void
  6375 ;; Registers used:
  6376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6377 ;; Tracked objects:
  6378 ;;		On entry : 0/0
  6379 ;;		On exit  : 0/0
  6380 ;;		Unchanged: 0/0
  6381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6382 ;;      Params:         0       0       0       0       0       0       0
  6383 ;;      Locals:         0       0       0       0       0       0       0
  6384 ;;      Temps:          0       0       0       0       0       0       0
  6385 ;;      Totals:         0       0       0       0       0       0       0
  6386 ;;Total ram usage:        0 bytes
  6387 ;; Hardware stack levels used:    1
  6388 ;; Hardware stack levels required when called:    8
  6389 ;; This function calls:
  6390 ;;		_ComputeStorageData
  6391 ;;		_EnableSlavePower
  6392 ;;		_StartUp595
  6393 ;;		_Update
  6394 ;; This function is called by:
  6395 ;;		_main
  6396 ;; This function uses a non-reentrant model
  6397 ;;
  6398                           
  6399                           	psect	text37
  6400  00191E                     __ptext37:
  6401                           	opt stack 0
  6402  00191E                     _PDUStartup:
  6403                           	opt stack 22
  6404                           
  6405                           ;PDU.c: 18: StartUp595();
  6406                           
  6407                           ;incstack = 0
  6408  00191E  EC5E  F00C         	call	_StartUp595	;wreg free
  6409                           
  6410                           ;PDU.c: 20: EnableSlavePower(SAS, ON);
  6411  001922  0E00               	movlw	0
  6412  001924  0100               	movlb	0	; () banked
  6413  001926  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6414  001928  0E01               	movlw	1
  6415  00192A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6416  00192C  0E03               	movlw	3
  6417  00192E  ECEB  F007         	call	_EnableSlavePower
  6418                           
  6419                           ;PDU.c: 21: EnableSlavePower(DDS, ON);
  6420  001932  0E00               	movlw	0
  6421  001934  0100               	movlb	0	; () banked
  6422  001936  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6423  001938  0E01               	movlw	1
  6424  00193A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6425  00193C  0E01               	movlw	1
  6426  00193E  ECEB  F007         	call	_EnableSlavePower
  6427                           
  6428                           ;PDU.c: 22: EnableSlavePower(MCS, ON);
  6429  001942  0E00               	movlw	0
  6430  001944  0100               	movlb	0	; () banked
  6431  001946  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6432  001948  0E01               	movlw	1
  6433  00194A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6434  00194C  0E02               	movlw	2
  6435  00194E  ECEB  F007         	call	_EnableSlavePower
  6436                           
  6437                           ;PDU.c: 23: EnableSlavePower(BMM, ON);
  6438  001952  0E00               	movlw	0
  6439  001954  0100               	movlb	0	; () banked
  6440  001956  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6441  001958  0E01               	movlw	1
  6442  00195A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6443  00195C  0E04               	movlw	4
  6444  00195E  ECEB  F007         	call	_EnableSlavePower
  6445                           
  6446                           ;PDU.c: 24: EnableSlavePower(TSS, ON);
  6447  001962  0E00               	movlw	0
  6448  001964  0100               	movlb	0	; () banked
  6449  001966  6FD2               	movwf	(EnableSlavePower@onof+1)& (0+255),b
  6450  001968  0E01               	movlw	1
  6451  00196A  6FD1               	movwf	EnableSlavePower@onof& (0+255),b
  6452  00196C  0E05               	movlw	5
  6453  00196E  ECEB  F007         	call	_EnableSlavePower
  6454                           
  6455                           ;PDU.c: 25: Update();
  6456  001972  EC3C  F00F         	call	_Update	;wreg free
  6457                           
  6458                           ;PDU.c: 27: ComputeStorageData();
  6459  001976  EC5B  F008         	call	_ComputeStorageData	;wreg free
  6460  00197A  0012               	return		;funcret
  6461  00197C                     __end_of_PDUStartup:
  6462                           	opt stack 0
  6463                           tosu	equ	0xFFF
  6464                           tosh	equ	0xFFE
  6465                           tosl	equ	0xFFD
  6466                           pclath	equ	0xFFA
  6467                           tblptru	equ	0xFF8
  6468                           tblptrh	equ	0xFF7
  6469                           tblptrl	equ	0xFF6
  6470                           tablat	equ	0xFF5
  6471                           prodh	equ	0xFF4
  6472                           prodl	equ	0xFF3
  6473                           intcon	equ	0xFF2
  6474                           intcon2	equ	0xFF1
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           indf2	equ	0xFDF
  6478                           postinc2	equ	0xFDE
  6479                           postdec2	equ	0xFDD
  6480                           plusw2	equ	0xFDB
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function _Update *****************
  6486 ;; Defined at:
  6487 ;;		line 142 in file "PDU.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;		None               void
  6494 ;; Registers used:
  6495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6501 ;;      Params:         0       0       0       0       0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0
  6503 ;;      Temps:          0       0       0       0       0       0       0
  6504 ;;      Totals:         0       0       0       0       0       0       0
  6505 ;;Total ram usage:        0 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; Hardware stack levels required when called:    6
  6508 ;; This function calls:
  6509 ;;		_writeRegisters
  6510 ;; This function is called by:
  6511 ;;		_processPowerRequest
  6512 ;;		_PDUStartup
  6513 ;;		_ReadCurrent
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text38
  6518  001E78                     __ptext38:
  6519                           	opt stack 0
  6520  001E78                     _Update:
  6521                           	opt stack 22
  6522                           
  6523                           ;PDU.c: 143: writeRegisters();
  6524                           
  6525                           ;incstack = 0
  6526  001E78  ECB4  F00A         	call	_writeRegisters	;wreg free
  6527  001E7C  0012               	return		;funcret
  6528  001E7E                     __end_of_Update:
  6529                           	opt stack 0
  6530                           tosu	equ	0xFFF
  6531                           tosh	equ	0xFFE
  6532                           tosl	equ	0xFFD
  6533                           pclath	equ	0xFFA
  6534                           tblptru	equ	0xFF8
  6535                           tblptrh	equ	0xFF7
  6536                           tblptrl	equ	0xFF6
  6537                           tablat	equ	0xFF5
  6538                           prodh	equ	0xFF4
  6539                           prodl	equ	0xFF3
  6540                           intcon	equ	0xFF2
  6541                           intcon2	equ	0xFF1
  6542                           postinc0	equ	0xFEE
  6543                           wreg	equ	0xFE8
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           plusw2	equ	0xFDB
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8
  6551                           
  6552 ;; *************** function _StartUp595 *****************
  6553 ;; Defined at:
  6554 ;;		line 10 in file "Shift595.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;		None
  6559 ;; Return value:  Size  Location     Type
  6560 ;;		None               void
  6561 ;; Registers used:
  6562 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6563 ;; Tracked objects:
  6564 ;;		On entry : 0/0
  6565 ;;		On exit  : 0/0
  6566 ;;		Unchanged: 0/0
  6567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6568 ;;      Params:         0       0       0       0       0       0       0
  6569 ;;      Locals:         0       0       0       0       0       0       0
  6570 ;;      Temps:          0       0       0       0       0       0       0
  6571 ;;      Totals:         0       0       0       0       0       0       0
  6572 ;;Total ram usage:        0 bytes
  6573 ;; Hardware stack levels used:    1
  6574 ;; Hardware stack levels required when called:    7
  6575 ;; This function calls:
  6576 ;;		_Clear595
  6577 ;;		_Delay
  6578 ;; This function is called by:
  6579 ;;		_PDUStartup
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           	psect	text39
  6584  0018BC                     __ptext39:
  6585                           	opt stack 0
  6586  0018BC                     _StartUp595:
  6587                           	opt stack 22
  6588                           
  6589                           ;incstack = 0
  6590                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6591  0018BC  8A8C               	bsf	3980,5,c	;volatile
  6592                           
  6593                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6594  0018BE  808A               	bsf	3978,0,c	;volatile
  6595                           
  6596                           ;Shift595.c: 15: Delay(2);
  6597  0018C0  0E02               	movlw	2
  6598  0018C2  6E1B               	movwf	Delay@wait,c
  6599  0018C4  0E00               	movlw	0
  6600  0018C6  6E1C               	movwf	Delay@wait+1,c
  6601  0018C8  0E00               	movlw	0
  6602  0018CA  6E1D               	movwf	Delay@wait+2,c
  6603  0018CC  0E00               	movlw	0
  6604  0018CE  6E1E               	movwf	Delay@wait+3,c
  6605  0018D0  EC61  F00D         	call	_Delay	;wreg free
  6606                           
  6607                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6608  0018D4  9A8C               	bcf	3980,5,c	;volatile
  6609                           
  6610                           ;Shift595.c: 17: Delay(2);
  6611  0018D6  0E02               	movlw	2
  6612  0018D8  6E1B               	movwf	Delay@wait,c
  6613  0018DA  0E00               	movlw	0
  6614  0018DC  6E1C               	movwf	Delay@wait+1,c
  6615  0018DE  0E00               	movlw	0
  6616  0018E0  6E1D               	movwf	Delay@wait+2,c
  6617  0018E2  0E00               	movlw	0
  6618  0018E4  6E1E               	movwf	Delay@wait+3,c
  6619  0018E6  EC61  F00D         	call	_Delay	;wreg free
  6620                           
  6621                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6622  0018EA  908A               	bcf	3978,0,c	;volatile
  6623                           
  6624                           ;Shift595.c: 19: Delay(2);
  6625  0018EC  0E02               	movlw	2
  6626  0018EE  6E1B               	movwf	Delay@wait,c
  6627  0018F0  0E00               	movlw	0
  6628  0018F2  6E1C               	movwf	Delay@wait+1,c
  6629  0018F4  0E00               	movlw	0
  6630  0018F6  6E1D               	movwf	Delay@wait+2,c
  6631  0018F8  0E00               	movlw	0
  6632  0018FA  6E1E               	movwf	Delay@wait+3,c
  6633  0018FC  EC61  F00D         	call	_Delay	;wreg free
  6634                           
  6635                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6636  001900  8A8C               	bsf	3980,5,c	;volatile
  6637                           
  6638                           ;Shift595.c: 21: Delay(2);
  6639  001902  0E02               	movlw	2
  6640  001904  6E1B               	movwf	Delay@wait,c
  6641  001906  0E00               	movlw	0
  6642  001908  6E1C               	movwf	Delay@wait+1,c
  6643  00190A  0E00               	movlw	0
  6644  00190C  6E1D               	movwf	Delay@wait+2,c
  6645  00190E  0E00               	movlw	0
  6646  001910  6E1E               	movwf	Delay@wait+3,c
  6647  001912  EC61  F00D         	call	_Delay	;wreg free
  6648                           
  6649                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6650  001916  808A               	bsf	3978,0,c	;volatile
  6651                           
  6652                           ;Shift595.c: 24: Clear595();
  6653  001918  ECDA  F00D         	call	_Clear595	;wreg free
  6654  00191C  0012               	return		;funcret
  6655  00191E                     __end_of_StartUp595:
  6656                           	opt stack 0
  6657                           tosu	equ	0xFFF
  6658                           tosh	equ	0xFFE
  6659                           tosl	equ	0xFFD
  6660                           pclath	equ	0xFFA
  6661                           tblptru	equ	0xFF8
  6662                           tblptrh	equ	0xFF7
  6663                           tblptrl	equ	0xFF6
  6664                           tablat	equ	0xFF5
  6665                           prodh	equ	0xFF4
  6666                           prodl	equ	0xFF3
  6667                           intcon	equ	0xFF2
  6668                           intcon2	equ	0xFF1
  6669                           postinc0	equ	0xFEE
  6670                           wreg	equ	0xFE8
  6671                           indf2	equ	0xFDF
  6672                           postinc2	equ	0xFDE
  6673                           postdec2	equ	0xFDD
  6674                           plusw2	equ	0xFDB
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function _Clear595 *****************
  6680 ;; Defined at:
  6681 ;;		line 39 in file "Shift595.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;		None
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  i               2   35[COMRAM] int 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;		None               void
  6688 ;; Registers used:
  6689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6695 ;;      Params:         0       0       0       0       0       0       0
  6696 ;;      Locals:         2       0       0       0       0       0       0
  6697 ;;      Temps:          0       0       0       0       0       0       0
  6698 ;;      Totals:         2       0       0       0       0       0       0
  6699 ;;Total ram usage:        2 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    6
  6702 ;; This function calls:
  6703 ;;		_writeRegisters
  6704 ;; This function is called by:
  6705 ;;		_StartUp595
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           	psect	text40
  6710  001BB4                     __ptext40:
  6711                           	opt stack 0
  6712  001BB4                     _Clear595:
  6713                           	opt stack 22
  6714                           
  6715                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6716                           
  6717                           ;incstack = 0
  6718  001BB4  0E00               	movlw	0
  6719  001BB6  6E25               	movwf	Clear595@i+1,c
  6720  001BB8  0E17               	movlw	23
  6721  001BBA  6E24               	movwf	Clear595@i,c
  6722  001BBC                     l3878:
  6723  001BBC  BE25               	btfsc	Clear595@i+1,7,c
  6724  001BBE  D011               	goto	l3888
  6725                           
  6726                           ;Shift595.c: 41: registers[i] = 0;
  6727  001BC0  90D8               	bcf	status,0,c
  6728  001BC2  3424               	rlcf	Clear595@i,w,c
  6729  001BC4  6ED9               	movwf	fsr2l,c
  6730  001BC6  3425               	rlcf	Clear595@i+1,w,c
  6731  001BC8  6EDA               	movwf	fsr2h,c
  6732  001BCA  0E00               	movlw	low _registers
  6733  001BCC  26D9               	addwf	fsr2l,f,c
  6734  001BCE  0E01               	movlw	high _registers
  6735  001BD0  22DA               	addwfc	fsr2h,f,c
  6736  001BD2  0E00               	movlw	0
  6737  001BD4  6EDE               	movwf	postinc2,c
  6738  001BD6  0E00               	movlw	0
  6739  001BD8  6EDD               	movwf	postdec2,c
  6740  001BDA  0624               	decf	Clear595@i,f,c
  6741  001BDC  A0D8               	btfss	status,0,c
  6742  001BDE  0625               	decf	Clear595@i+1,f,c
  6743  001BE0  D7ED               	goto	l3878
  6744  001BE2                     l3888:
  6745                           
  6746                           ;Shift595.c: 42: }
  6747                           ;Shift595.c: 44: writeRegisters();
  6748  001BE2  ECB4  F00A         	call	_writeRegisters	;wreg free
  6749  001BE6  0012               	return		;funcret
  6750  001BE8                     __end_of_Clear595:
  6751                           	opt stack 0
  6752                           tosu	equ	0xFFF
  6753                           tosh	equ	0xFFE
  6754                           tosl	equ	0xFFD
  6755                           pclath	equ	0xFFA
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           intcon2	equ	0xFF1
  6764                           postinc0	equ	0xFEE
  6765                           wreg	equ	0xFE8
  6766                           indf2	equ	0xFDF
  6767                           postinc2	equ	0xFDE
  6768                           postdec2	equ	0xFDD
  6769                           plusw2	equ	0xFDB
  6770                           fsr2h	equ	0xFDA
  6771                           fsr2l	equ	0xFD9
  6772                           status	equ	0xFD8
  6773                           
  6774 ;; *************** function _writeRegisters *****************
  6775 ;; Defined at:
  6776 ;;		line 50 in file "Shift595.c"
  6777 ;; Parameters:    Size  Location     Type
  6778 ;;		None
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  i               2    2[BANK0 ] int 
  6781 ;;  val             2    0[BANK0 ] int 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6791 ;;      Params:         0       0       0       0       0       0       0
  6792 ;;      Locals:         0       4       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0
  6794 ;;      Totals:         0       4       0       0       0       0       0
  6795 ;;Total ram usage:        4 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    5
  6798 ;; This function calls:
  6799 ;;		_Delay
  6800 ;; This function is called by:
  6801 ;;		_Update
  6802 ;;		_Clear595
  6803 ;; This function uses a non-reentrant model
  6804 ;;
  6805                           
  6806                           	psect	text41
  6807  001568                     __ptext41:
  6808                           	opt stack 0
  6809  001568                     _writeRegisters:
  6810                           	opt stack 22
  6811                           
  6812                           ;Shift595.c: 51: int val = 0;
  6813                           
  6814                           ;incstack = 0
  6815  001568  0E00               	movlw	0
  6816  00156A  0100               	movlb	0	; () banked
  6817  00156C  6FD2               	movwf	(writeRegisters@val+1)& (0+255),b
  6818  00156E  0E00               	movlw	0
  6819  001570  6FD1               	movwf	writeRegisters@val& (0+255),b
  6820                           
  6821                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6822  001572  0E00               	movlw	0
  6823  001574  0100               	movlb	0	; () banked
  6824  001576  6FD4               	movwf	(writeRegisters@i+1)& (0+255),b
  6825  001578  0E17               	movlw	23
  6826  00157A  6FD3               	movwf	writeRegisters@i& (0+255),b
  6827  00157C                     l3750:
  6828                           
  6829                           ; BSR set to: 0
  6830  00157C  0100               	movlb	0	; () banked
  6831  00157E  BFD4               	btfsc	(writeRegisters@i+1)& (0+255),7,b
  6832  001580  D024               	goto	l657
  6833                           
  6834                           ; BSR set to: 0
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6838                           
  6839                           ; BSR set to: 0
  6840  001582  9E8C               	bcf	3980,7,c	;volatile
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;Shift595.c: 55: val = registers[i];
  6844                           
  6845                           ; BSR set to: 0
  6846  001584  90D8               	bcf	status,0,c
  6847  001586  0100               	movlb	0	; () banked
  6848  001588  35D3               	rlcf	writeRegisters@i& (0+255),w,b
  6849  00158A  6ED9               	movwf	fsr2l,c
  6850  00158C  0100               	movlb	0	; () banked
  6851  00158E  35D4               	rlcf	(writeRegisters@i+1)& (0+255),w,b
  6852  001590  6EDA               	movwf	fsr2h,c
  6853  001592  0E00               	movlw	low _registers
  6854  001594  26D9               	addwf	fsr2l,f,c
  6855  001596  0E01               	movlw	high _registers
  6856  001598  22DA               	addwfc	fsr2h,f,c
  6857  00159A  CFDE F0D1          	movff	postinc2,writeRegisters@val
  6858  00159E  CFDD F0D2          	movff	postdec2,writeRegisters@val+1
  6859                           
  6860                           ; BSR set to: 0
  6861                           ;Shift595.c: 56: if (val == 1) {
  6862  0015A2  0100               	movlb	0	; () banked
  6863  0015A4  05D1               	decf	writeRegisters@val& (0+255),w,b
  6864  0015A6  0100               	movlb	0	; () banked
  6865  0015A8  11D2               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6866  0015AA  A4D8               	btfss	status,2,c
  6867  0015AC  D002               	goto	l3758
  6868                           
  6869                           ; BSR set to: 0
  6870                           
  6871                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6872  0015AE  888C               	bsf	3980,4,c	;volatile
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;Shift595.c: 58: } else if (val == 0) {
  6876  0015B0  D006               	goto	l655
  6877  0015B2                     l3758:
  6878                           
  6879                           ; BSR set to: 0
  6880  0015B2  0100               	movlb	0	; () banked
  6881  0015B4  51D1               	movf	writeRegisters@val& (0+255),w,b
  6882  0015B6  0100               	movlb	0	; () banked
  6883  0015B8  11D2               	iorwf	(writeRegisters@val+1)& (0+255),w,b
  6884  0015BA  B4D8               	btfsc	status,2,c
  6885                           
  6886                           ; BSR set to: 0
  6887                           
  6888                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6889  0015BC  988C               	bcf	3980,4,c	;volatile
  6890  0015BE                     l655:
  6891                           
  6892                           ; BSR set to: 0
  6893  0015BE  8E8C               	bsf	3980,7,c	;volatile
  6894                           
  6895                           ; BSR set to: 0
  6896                           
  6897                           ; BSR set to: 0
  6898  0015C0  0100               	movlb	0	; () banked
  6899  0015C2  07D3               	decf	writeRegisters@i& (0+255),f,b
  6900  0015C4  A0D8               	btfss	status,0,c
  6901  0015C6  07D4               	decf	(writeRegisters@i+1)& (0+255),f,b
  6902  0015C8  D7D9               	goto	l3750
  6903  0015CA                     l657:
  6904                           
  6905                           ; BSR set to: 0
  6906  0015CA  9E8C               	bcf	3980,7,c	;volatile
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;Shift595.c: 67: Delay(1);
  6910                           
  6911                           ; BSR set to: 0
  6912  0015CC  0E01               	movlw	1
  6913  0015CE  6E1B               	movwf	Delay@wait,c
  6914  0015D0  0E00               	movlw	0
  6915  0015D2  6E1C               	movwf	Delay@wait+1,c
  6916  0015D4  0E00               	movlw	0
  6917  0015D6  6E1D               	movwf	Delay@wait+2,c
  6918  0015D8  0E00               	movlw	0
  6919  0015DA  6E1E               	movwf	Delay@wait+3,c
  6920  0015DC  EC61  F00D         	call	_Delay	;wreg free
  6921                           
  6922                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6923  0015E0  8C8C               	bsf	3980,6,c	;volatile
  6924                           
  6925                           ;Shift595.c: 69: Delay(1);
  6926  0015E2  0E01               	movlw	1
  6927  0015E4  6E1B               	movwf	Delay@wait,c
  6928  0015E6  0E00               	movlw	0
  6929  0015E8  6E1C               	movwf	Delay@wait+1,c
  6930  0015EA  0E00               	movlw	0
  6931  0015EC  6E1D               	movwf	Delay@wait+2,c
  6932  0015EE  0E00               	movlw	0
  6933  0015F0  6E1E               	movwf	Delay@wait+3,c
  6934  0015F2  EC61  F00D         	call	_Delay	;wreg free
  6935                           
  6936                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6937  0015F6  9C8C               	bcf	3980,6,c	;volatile
  6938  0015F8  0012               	return	
  6939  0015FA                     __end_of_writeRegisters:
  6940                           	opt stack 0
  6941                           tosu	equ	0xFFF
  6942                           tosh	equ	0xFFE
  6943                           tosl	equ	0xFFD
  6944                           pclath	equ	0xFFA
  6945                           tblptru	equ	0xFF8
  6946                           tblptrh	equ	0xFF7
  6947                           tblptrl	equ	0xFF6
  6948                           tablat	equ	0xFF5
  6949                           prodh	equ	0xFF4
  6950                           prodl	equ	0xFF3
  6951                           intcon	equ	0xFF2
  6952                           intcon2	equ	0xFF1
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           plusw2	equ	0xFDB
  6959                           fsr2h	equ	0xFDA
  6960                           fsr2l	equ	0xFD9
  6961                           status	equ	0xFD8
  6962                           
  6963 ;; *************** function _EnableSlavePower *****************
  6964 ;; Defined at:
  6965 ;;		line 32 in file "PDU.c"
  6966 ;; Parameters:    Size  Location     Type
  6967 ;;  slave           1    wreg     enum E5
  6968 ;;  onof            2    0[BANK0 ] int 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  slave           1   36[COMRAM] enum E5
  6971 ;; Return value:  Size  Location     Type
  6972 ;;		None               void
  6973 ;; Registers used:
  6974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6980 ;;      Params:         0       2       0       0       0       0       0
  6981 ;;      Locals:         1       0       0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0       0
  6983 ;;      Totals:         1       2       0       0       0       0       0
  6984 ;;Total ram usage:        3 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    5
  6987 ;; This function calls:
  6988 ;;		_SetPin595
  6989 ;; This function is called by:
  6990 ;;		_processPowerRequest
  6991 ;;		_PDUStartup
  6992 ;;		_FuseSystem
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text42
  6997  000FD6                     __ptext42:
  6998                           	opt stack 0
  6999  000FD6                     _EnableSlavePower:
  7000                           	opt stack 23
  7001                           
  7002                           ;incstack = 0
  7003                           ;EnableSlavePower@slave stored from wreg
  7004  000FD6  6E25               	movwf	EnableSlavePower@slave,c
  7005                           
  7006                           ;PDU.c: 33: switch (slave) {
  7007  000FD8  D05A               	goto	l3808
  7008  000FDA                     l3794:
  7009                           
  7010                           ;PDU.c: 35: SetPin595(2, 1, onof);
  7011  000FDA  0E00               	movlw	0
  7012  000FDC  6E1C               	movwf	SetPin595@Reg+1,c
  7013  000FDE  0E02               	movlw	2
  7014  000FE0  6E1B               	movwf	SetPin595@Reg,c
  7015  000FE2  0E00               	movlw	0
  7016  000FE4  6E1E               	movwf	SetPin595@pin+1,c
  7017  000FE6  0E01               	movlw	1
  7018  000FE8  6E1D               	movwf	SetPin595@pin,c
  7019  000FEA  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7020  000FEE  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7021  000FF2  EC15  F00D         	call	_SetPin595	;wreg free
  7022                           
  7023                           ;PDU.c: 36: break;
  7024  000FF6  0012               	return	
  7025  000FF8                     l3796:
  7026                           
  7027                           ;PDU.c: 38: SetPin595(1, 1, onof);
  7028  000FF8  0E00               	movlw	0
  7029  000FFA  6E1C               	movwf	SetPin595@Reg+1,c
  7030  000FFC  0E01               	movlw	1
  7031  000FFE  6E1B               	movwf	SetPin595@Reg,c
  7032  001000  0E00               	movlw	0
  7033  001002  6E1E               	movwf	SetPin595@pin+1,c
  7034  001004  0E01               	movlw	1
  7035  001006  6E1D               	movwf	SetPin595@pin,c
  7036  001008  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7037  00100C  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7038  001010  EC15  F00D         	call	_SetPin595	;wreg free
  7039                           
  7040                           ;PDU.c: 39: break;
  7041  001014  0012               	return	
  7042  001016                     l3798:
  7043                           
  7044                           ;PDU.c: 41: SetPin595(1, 6, onof);
  7045  001016  0E00               	movlw	0
  7046  001018  6E1C               	movwf	SetPin595@Reg+1,c
  7047  00101A  0E01               	movlw	1
  7048  00101C  6E1B               	movwf	SetPin595@Reg,c
  7049  00101E  0E00               	movlw	0
  7050  001020  6E1E               	movwf	SetPin595@pin+1,c
  7051  001022  0E06               	movlw	6
  7052  001024  6E1D               	movwf	SetPin595@pin,c
  7053  001026  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7054  00102A  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7055  00102E  EC15  F00D         	call	_SetPin595	;wreg free
  7056                           
  7057                           ;PDU.c: 42: break;
  7058  001032  0012               	return	
  7059  001034                     l3800:
  7060                           
  7061                           ;PDU.c: 44: SetPin595(2, 6, onof);
  7062  001034  0E00               	movlw	0
  7063  001036  6E1C               	movwf	SetPin595@Reg+1,c
  7064  001038  0E02               	movlw	2
  7065  00103A  6E1B               	movwf	SetPin595@Reg,c
  7066  00103C  0E00               	movlw	0
  7067  00103E  6E1E               	movwf	SetPin595@pin+1,c
  7068  001040  0E06               	movlw	6
  7069  001042  6E1D               	movwf	SetPin595@pin,c
  7070  001044  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7071  001048  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7072  00104C  EC15  F00D         	call	_SetPin595	;wreg free
  7073                           
  7074                           ;PDU.c: 45: break;
  7075  001050  0012               	return	
  7076  001052                     l3802:
  7077                           
  7078                           ;PDU.c: 47: SetPin595(3, 6, onof);
  7079  001052  0E00               	movlw	0
  7080  001054  6E1C               	movwf	SetPin595@Reg+1,c
  7081  001056  0E03               	movlw	3
  7082  001058  6E1B               	movwf	SetPin595@Reg,c
  7083  00105A  0E00               	movlw	0
  7084  00105C  6E1E               	movwf	SetPin595@pin+1,c
  7085  00105E  0E06               	movlw	6
  7086  001060  6E1D               	movwf	SetPin595@pin,c
  7087  001062  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7088  001066  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7089  00106A  EC15  F00D         	call	_SetPin595	;wreg free
  7090                           
  7091                           ;PDU.c: 48: break;
  7092  00106E  0012               	return	
  7093  001070                     l3804:
  7094                           
  7095                           ;PDU.c: 50: SetPin595(3, 1, onof);
  7096  001070  0E00               	movlw	0
  7097  001072  6E1C               	movwf	SetPin595@Reg+1,c
  7098  001074  0E03               	movlw	3
  7099  001076  6E1B               	movwf	SetPin595@Reg,c
  7100  001078  0E00               	movlw	0
  7101  00107A  6E1E               	movwf	SetPin595@pin+1,c
  7102  00107C  0E01               	movlw	1
  7103  00107E  6E1D               	movwf	SetPin595@pin,c
  7104  001080  C0D1  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7105  001084  C0D2  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7106  001088  EC15  F00D         	call	_SetPin595	;wreg free
  7107                           
  7108                           ;PDU.c: 52: }
  7109                           
  7110                           ;PDU.c: 51: break;
  7111  00108C  0012               	return	
  7112  00108E                     l3808:
  7113  00108E  5025               	movf	EnableSlavePower@slave,w,c
  7114                           
  7115                           ; Switch size 1, requested type "space"
  7116                           ; Number of cases is 6, Range of values is 1 to 6
  7117                           ; switch strategies available:
  7118                           ; Name         Instructions Cycles
  7119                           ; simple_byte           19    10 (average)
  7120                           ;	Chosen strategy is simple_byte
  7121  001090  0A01               	xorlw	1	; case 1
  7122  001092  B4D8               	btfsc	status,2,c
  7123  001094  D7CF               	goto	l3800
  7124  001096  0A03               	xorlw	3	; case 2
  7125  001098  B4D8               	btfsc	status,2,c
  7126  00109A  D7BD               	goto	l3798
  7127  00109C  0A01               	xorlw	1	; case 3
  7128  00109E  B4D8               	btfsc	status,2,c
  7129  0010A0  D79C               	goto	l3794
  7130  0010A2  0A07               	xorlw	7	; case 4
  7131  0010A4  B4D8               	btfsc	status,2,c
  7132  0010A6  D7A8               	goto	l3796
  7133  0010A8  0A01               	xorlw	1	; case 5
  7134  0010AA  B4D8               	btfsc	status,2,c
  7135  0010AC  D7D2               	goto	l3802
  7136  0010AE  0A03               	xorlw	3	; case 6
  7137  0010B0  A4D8               	btfss	status,2,c
  7138  0010B2  0012               	return	
  7139  0010B4  D7DD               	goto	l3804
  7140  0010B6                     __end_of_EnableSlavePower:
  7141                           	opt stack 0
  7142                           tosu	equ	0xFFF
  7143                           tosh	equ	0xFFE
  7144                           tosl	equ	0xFFD
  7145                           pclath	equ	0xFFA
  7146                           tblptru	equ	0xFF8
  7147                           tblptrh	equ	0xFF7
  7148                           tblptrl	equ	0xFF6
  7149                           tablat	equ	0xFF5
  7150                           prodh	equ	0xFF4
  7151                           prodl	equ	0xFF3
  7152                           intcon	equ	0xFF2
  7153                           intcon2	equ	0xFF1
  7154                           postinc0	equ	0xFEE
  7155                           wreg	equ	0xFE8
  7156                           indf2	equ	0xFDF
  7157                           postinc2	equ	0xFDE
  7158                           postdec2	equ	0xFDD
  7159                           plusw2	equ	0xFDB
  7160                           fsr2h	equ	0xFDA
  7161                           fsr2l	equ	0xFD9
  7162                           status	equ	0xFD8
  7163                           
  7164 ;; *************** function _SetPin595 *****************
  7165 ;; Defined at:
  7166 ;;		line 32 in file "Shift595.c"
  7167 ;; Parameters:    Size  Location     Type
  7168 ;;  Reg             2   26[COMRAM] int 
  7169 ;;  pin             2   28[COMRAM] int 
  7170 ;;  value           2   30[COMRAM] int 
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;		None               void
  7175 ;; Registers used:
  7176 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7182 ;;      Params:         6       0       0       0       0       0       0
  7183 ;;      Locals:         0       0       0       0       0       0       0
  7184 ;;      Temps:          4       0       0       0       0       0       0
  7185 ;;      Totals:        10       0       0       0       0       0       0
  7186 ;;Total ram usage:       10 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    4
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_EnableSlavePower
  7193 ;;		_ReadCurrent
  7194 ;; This function uses a non-reentrant model
  7195 ;;
  7196                           
  7197                           	psect	text43
  7198  001A2A                     __ptext43:
  7199                           	opt stack 0
  7200  001A2A                     _SetPin595:
  7201                           	opt stack 23
  7202                           
  7203                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7204                           
  7205                           ;incstack = 0
  7206  001A2A  0EF0               	movlw	240
  7207  001A2C  6E21               	movwf	??_SetPin595& (0+255),c
  7208  001A2E  0EFF               	movlw	255
  7209  001A30  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  7210  001A32  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  7211  001A36  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  7212  001A3A  90D8               	bcf	status,0,c
  7213  001A3C  3623               	rlcf	??_SetPin595+2,f,c
  7214  001A3E  3624               	rlcf	??_SetPin595+3,f,c
  7215  001A40  90D8               	bcf	status,0,c
  7216  001A42  3623               	rlcf	??_SetPin595+2,f,c
  7217  001A44  3624               	rlcf	??_SetPin595+3,f,c
  7218  001A46  90D8               	bcf	status,0,c
  7219  001A48  3623               	rlcf	??_SetPin595+2,f,c
  7220  001A4A  3624               	rlcf	??_SetPin595+3,f,c
  7221  001A4C  501D               	movf	SetPin595@pin,w,c
  7222  001A4E  2623               	addwf	??_SetPin595+2,f,c
  7223  001A50  501E               	movf	SetPin595@pin+1,w,c
  7224  001A52  2224               	addwfc	??_SetPin595+3,f,c
  7225  001A54  90D8               	bcf	status,0,c
  7226  001A56  3623               	rlcf	??_SetPin595+2,f,c
  7227  001A58  3624               	rlcf	??_SetPin595+3,f,c
  7228  001A5A  5021               	movf	??_SetPin595,w,c
  7229  001A5C  2623               	addwf	??_SetPin595+2,f,c
  7230  001A5E  5022               	movf	??_SetPin595+1,w,c
  7231  001A60  2224               	addwfc	??_SetPin595+3,f,c
  7232  001A62  0E00               	movlw	low _registers
  7233  001A64  2423               	addwf	??_SetPin595+2,w,c
  7234  001A66  6ED9               	movwf	fsr2l,c
  7235  001A68  0E01               	movlw	high _registers
  7236  001A6A  2024               	addwfc	??_SetPin595+3,w,c
  7237  001A6C  6EDA               	movwf	fsr2h,c
  7238  001A6E  C01F  FFDE         	movff	SetPin595@value,postinc2
  7239  001A72  C020  FFDD         	movff	SetPin595@value+1,postdec2
  7240  001A76  0012               	return		;funcret
  7241  001A78                     __end_of_SetPin595:
  7242                           	opt stack 0
  7243                           tosu	equ	0xFFF
  7244                           tosh	equ	0xFFE
  7245                           tosl	equ	0xFFD
  7246                           pclath	equ	0xFFA
  7247                           tblptru	equ	0xFF8
  7248                           tblptrh	equ	0xFF7
  7249                           tblptrl	equ	0xFF6
  7250                           tablat	equ	0xFF5
  7251                           prodh	equ	0xFF4
  7252                           prodl	equ	0xFF3
  7253                           intcon	equ	0xFF2
  7254                           intcon2	equ	0xFF1
  7255                           postinc0	equ	0xFEE
  7256                           wreg	equ	0xFE8
  7257                           indf2	equ	0xFDF
  7258                           postinc2	equ	0xFDE
  7259                           postdec2	equ	0xFDD
  7260                           plusw2	equ	0xFDB
  7261                           fsr2h	equ	0xFDA
  7262                           fsr2l	equ	0xFD9
  7263                           status	equ	0xFD8
  7264                           
  7265 ;; *************** function _ComputeStorageData *****************
  7266 ;; Defined at:
  7267 ;;		line 94 in file "PDU.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;  i               2   29[COMRAM] int 
  7272 ;; Return value:  Size  Location     Type
  7273 ;;		None               void
  7274 ;; Registers used:
  7275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7281 ;;      Params:         0       0       0       0       0       0       0
  7282 ;;      Locals:         2       0       0       0       0       0       0
  7283 ;;      Temps:          2       0       0       0       0       0       0
  7284 ;;      Totals:         4       0       0       0       0       0       0
  7285 ;;Total ram usage:        4 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    5
  7288 ;; This function calls:
  7289 ;;		_DATAEE_ReadByte
  7290 ;; This function is called by:
  7291 ;;		_PDUStartup
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text44
  7296  0010B6                     __ptext44:
  7297                           	opt stack 0
  7298  0010B6                     _ComputeStorageData:
  7299                           	opt stack 24
  7300                           
  7301                           ;PDU.c: 95: for (int i = 0; i < 12; i++) {
  7302                           
  7303                           ;incstack = 0
  7304  0010B6  0E00               	movlw	0
  7305  0010B8  6E1F               	movwf	ComputeStorageData@i+1,c
  7306  0010BA  0E00               	movlw	0
  7307  0010BC  6E1E               	movwf	ComputeStorageData@i,c
  7308  0010BE                     l3292:
  7309  0010BE  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7310  0010C0  D006               	goto	l3296
  7311  0010C2  501F               	movf	ComputeStorageData@i+1,w,c
  7312  0010C4  E111               	bnz	l3302
  7313  0010C6  0E0C               	movlw	12
  7314  0010C8  5C1E               	subwf	ComputeStorageData@i,w,c
  7315  0010CA  B0D8               	btfsc	status,0,c
  7316  0010CC  D00D               	goto	l3302
  7317  0010CE                     l3296:
  7318                           
  7319                           ;PDU.c: 96: data[i] = DATAEE_ReadByte(i);
  7320  0010CE  0E84               	movlw	low _data
  7321  0010D0  241E               	addwf	ComputeStorageData@i,w,c
  7322  0010D2  6ED9               	movwf	fsr2l,c
  7323  0010D4  0E00               	movlw	high _data
  7324  0010D6  201F               	addwfc	ComputeStorageData@i+1,w,c
  7325  0010D8  6EDA               	movwf	fsr2h,c
  7326  0010DA  501E               	movf	ComputeStorageData@i,w,c
  7327  0010DC  EC18  F00F         	call	_DATAEE_ReadByte
  7328  0010E0  6EDF               	movwf	indf2,c
  7329  0010E2  4A1E               	infsnz	ComputeStorageData@i,f,c
  7330  0010E4  2A1F               	incf	ComputeStorageData@i+1,f,c
  7331  0010E6  D7EB               	goto	l3292
  7332  0010E8                     l3302:
  7333                           
  7334                           ;PDU.c: 97: }
  7335                           ;PDU.c: 98: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7336  0010E8  0100               	movlb	0	; () banked
  7337  0010EA  5185               	movf	(_data+1)& (0+255),w,b
  7338  0010EC  C084  F01C         	movff	_data,??_ComputeStorageData
  7339  0010F0  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7340  0010F2  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7341  0010F6  6A1C               	clrf	??_ComputeStorageData,c
  7342  0010F8  101C               	iorwf	??_ComputeStorageData,w,c
  7343  0010FA  0100               	movlb	0	; () banked
  7344  0010FC  6F78               	movwf	_Currentcomp& (0+255),b
  7345  0010FE  501D               	movf	??_ComputeStorageData+1,w,c
  7346  001100  0100               	movlb	0	; () banked
  7347  001102  6F79               	movwf	(_Currentcomp+1)& (0+255),b
  7348                           
  7349                           ;PDU.c: 99: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7350  001104  0100               	movlb	0	; () banked
  7351  001106  5187               	movf	(_data+3)& (0+255),w,b
  7352  001108  C086  F01C         	movff	_data+2,??_ComputeStorageData
  7353  00110C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7354  00110E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7355  001112  6A1C               	clrf	??_ComputeStorageData,c
  7356  001114  101C               	iorwf	??_ComputeStorageData,w,c
  7357  001116  0100               	movlb	0	; () banked
  7358  001118  6F7A               	movwf	(_Currentcomp+2)& (0+255),b
  7359  00111A  501D               	movf	??_ComputeStorageData+1,w,c
  7360  00111C  0100               	movlb	0	; () banked
  7361  00111E  6F7B               	movwf	(_Currentcomp+3)& (0+255),b
  7362                           
  7363                           ;PDU.c: 100: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7364  001120  0100               	movlb	0	; () banked
  7365  001122  5189               	movf	(_data+5)& (0+255),w,b
  7366  001124  C088  F01C         	movff	_data+4,??_ComputeStorageData
  7367  001128  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7368  00112A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7369  00112E  6A1C               	clrf	??_ComputeStorageData,c
  7370  001130  101C               	iorwf	??_ComputeStorageData,w,c
  7371  001132  0100               	movlb	0	; () banked
  7372  001134  6F7C               	movwf	(_Currentcomp+4)& (0+255),b
  7373  001136  501D               	movf	??_ComputeStorageData+1,w,c
  7374  001138  0100               	movlb	0	; () banked
  7375  00113A  6F7D               	movwf	(_Currentcomp+5)& (0+255),b
  7376                           
  7377                           ;PDU.c: 101: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7378  00113C  0100               	movlb	0	; () banked
  7379  00113E  518B               	movf	(_data+7)& (0+255),w,b
  7380  001140  C08A  F01C         	movff	_data+6,??_ComputeStorageData
  7381  001144  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7382  001146  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7383  00114A  6A1C               	clrf	??_ComputeStorageData,c
  7384  00114C  101C               	iorwf	??_ComputeStorageData,w,c
  7385  00114E  0100               	movlb	0	; () banked
  7386  001150  6F7E               	movwf	(_Currentcomp+6)& (0+255),b
  7387  001152  501D               	movf	??_ComputeStorageData+1,w,c
  7388  001154  0100               	movlb	0	; () banked
  7389  001156  6F7F               	movwf	(_Currentcomp+7)& (0+255),b
  7390                           
  7391                           ;PDU.c: 102: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7392  001158  0100               	movlb	0	; () banked
  7393  00115A  518D               	movf	(_data+9)& (0+255),w,b
  7394  00115C  C08C  F01C         	movff	_data+8,??_ComputeStorageData
  7395  001160  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7396  001162  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7397  001166  6A1C               	clrf	??_ComputeStorageData,c
  7398  001168  101C               	iorwf	??_ComputeStorageData,w,c
  7399  00116A  0100               	movlb	0	; () banked
  7400  00116C  6F80               	movwf	(_Currentcomp+8)& (0+255),b
  7401  00116E  501D               	movf	??_ComputeStorageData+1,w,c
  7402  001170  0100               	movlb	0	; () banked
  7403  001172  6F81               	movwf	(_Currentcomp+9)& (0+255),b
  7404                           
  7405                           ;PDU.c: 103: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7406  001174  0100               	movlb	0	; () banked
  7407  001176  518F               	movf	(_data+11)& (0+255),w,b
  7408  001178  C08E  F01C         	movff	_data+10,??_ComputeStorageData
  7409  00117C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7410  00117E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7411  001182  6A1C               	clrf	??_ComputeStorageData,c
  7412  001184  101C               	iorwf	??_ComputeStorageData,w,c
  7413  001186  0100               	movlb	0	; () banked
  7414  001188  6F82               	movwf	(_Currentcomp+10)& (0+255),b
  7415  00118A  501D               	movf	??_ComputeStorageData+1,w,c
  7416  00118C  0100               	movlb	0	; () banked
  7417  00118E  6F83               	movwf	(_Currentcomp+11)& (0+255),b
  7418                           
  7419                           ; BSR set to: 0
  7420  001190  0012               	return		;funcret
  7421  001192                     __end_of_ComputeStorageData:
  7422                           	opt stack 0
  7423                           tosu	equ	0xFFF
  7424                           tosh	equ	0xFFE
  7425                           tosl	equ	0xFFD
  7426                           pclath	equ	0xFFA
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           intcon2	equ	0xFF1
  7435                           postinc0	equ	0xFEE
  7436                           wreg	equ	0xFE8
  7437                           indf2	equ	0xFDF
  7438                           postinc2	equ	0xFDE
  7439                           postdec2	equ	0xFDD
  7440                           plusw2	equ	0xFDB
  7441                           fsr2h	equ	0xFDA
  7442                           fsr2l	equ	0xFD9
  7443                           status	equ	0xFD8
  7444                           
  7445 ;; *************** function _DATAEE_ReadByte *****************
  7446 ;; Defined at:
  7447 ;;		line 143 in file "mcc_generated_files/memory.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;  bAdd            1    wreg     unsigned char 
  7450 ;; Auto vars:     Size  Location     Type
  7451 ;;  bAdd            1   26[COMRAM] unsigned char 
  7452 ;; Return value:  Size  Location     Type
  7453 ;;                  1    wreg      unsigned char 
  7454 ;; Registers used:
  7455 ;;		wreg, status,2
  7456 ;; Tracked objects:
  7457 ;;		On entry : 0/0
  7458 ;;		On exit  : 0/0
  7459 ;;		Unchanged: 0/0
  7460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7461 ;;      Params:         0       0       0       0       0       0       0
  7462 ;;      Locals:         1       0       0       0       0       0       0
  7463 ;;      Temps:          0       0       0       0       0       0       0
  7464 ;;      Totals:         1       0       0       0       0       0       0
  7465 ;;Total ram usage:        1 bytes
  7466 ;; Hardware stack levels used:    1
  7467 ;; Hardware stack levels required when called:    4
  7468 ;; This function calls:
  7469 ;;		Nothing
  7470 ;; This function is called by:
  7471 ;;		_ComputeStorageData
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text45
  7476  001E30                     __ptext45:
  7477                           	opt stack 0
  7478  001E30                     _DATAEE_ReadByte:
  7479                           	opt stack 24
  7480                           
  7481                           ; BSR set to: 0
  7482                           ;incstack = 0
  7483                           ;DATAEE_ReadByte@bAdd stored from wreg
  7484  001E30  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7485                           
  7486                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7487  001E32  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7488                           
  7489                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7490  001E36  9CA6               	bcf	4006,6,c	;volatile
  7491                           
  7492                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7493  001E38  9EA6               	bcf	4006,7,c	;volatile
  7494                           
  7495                           ;memory.c: 148: EECON1bits.RD = 1;
  7496  001E3A  80A6               	bsf	4006,0,c	;volatile
  7497                           
  7498                           ;memory.c: 149: __nop();
  7499  001E3C  F000               	nop	
  7500                           
  7501                           ;memory.c: 150: __nop();
  7502  001E3E  F000               	nop	
  7503                           
  7504                           ;memory.c: 152: return (EEDATA);
  7505  001E40  50A8               	movf	4008,w,c	;volatile
  7506  001E42  0012               	return	
  7507  001E44                     __end_of_DATAEE_ReadByte:
  7508                           	opt stack 0
  7509                           tosu	equ	0xFFF
  7510                           tosh	equ	0xFFE
  7511                           tosl	equ	0xFFD
  7512                           pclath	equ	0xFFA
  7513                           tblptru	equ	0xFF8
  7514                           tblptrh	equ	0xFF7
  7515                           tblptrl	equ	0xFF6
  7516                           tablat	equ	0xFF5
  7517                           prodh	equ	0xFF4
  7518                           prodl	equ	0xFF3
  7519                           intcon	equ	0xFF2
  7520                           intcon2	equ	0xFF1
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           indf2	equ	0xFDF
  7524                           postinc2	equ	0xFDE
  7525                           postdec2	equ	0xFDD
  7526                           plusw2	equ	0xFDB
  7527                           fsr2h	equ	0xFDA
  7528                           fsr2l	equ	0xFD9
  7529                           status	equ	0xFD8
  7530                           
  7531 ;; *************** function _CoolingStart *****************
  7532 ;; Defined at:
  7533 ;;		line 19 in file "CoolingControl.c"
  7534 ;; Parameters:    Size  Location     Type
  7535 ;;		None
  7536 ;; Auto vars:     Size  Location     Type
  7537 ;;		None
  7538 ;; Return value:  Size  Location     Type
  7539 ;;		None               void
  7540 ;; Registers used:
  7541 ;;		wreg, status,2, status,0, cstack
  7542 ;; Tracked objects:
  7543 ;;		On entry : 0/0
  7544 ;;		On exit  : 0/0
  7545 ;;		Unchanged: 0/0
  7546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7547 ;;      Params:         0       0       0       0       0       0       0
  7548 ;;      Locals:         0       0       0       0       0       0       0
  7549 ;;      Temps:          0       0       0       0       0       0       0
  7550 ;;      Totals:         0       0       0       0       0       0       0
  7551 ;;Total ram usage:        0 bytes
  7552 ;; Hardware stack levels used:    1
  7553 ;; Hardware stack levels required when called:    6
  7554 ;; This function calls:
  7555 ;;		_PWM4_LoadDutyValue
  7556 ;;		_PotClear
  7557 ;;		_PotSetpoint
  7558 ;; This function is called by:
  7559 ;;		_main
  7560 ;; This function uses a non-reentrant model
  7561 ;;
  7562                           
  7563                           	psect	text46
  7564  001D54                     __ptext46:
  7565                           	opt stack 0
  7566  001D54                     _CoolingStart:
  7567                           	opt stack 24
  7568                           
  7569                           ;CoolingControl.c: 21: PotClear();
  7570                           
  7571                           ;incstack = 0
  7572  001D54  EC07  F00A         	call	_PotClear	;wreg free
  7573                           
  7574                           ;CoolingControl.c: 22: PotSetpoint(15);
  7575  001D58  0E00               	movlw	0
  7576  001D5A  6E25               	movwf	PotSetpoint@new_point+1,c
  7577  001D5C  0E0F               	movlw	15
  7578  001D5E  6E24               	movwf	PotSetpoint@new_point,c
  7579  001D60  ECB7  F005         	call	_PotSetpoint	;wreg free
  7580                           
  7581                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(700);
  7582  001D64  0E02               	movlw	2
  7583  001D66  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7584  001D68  0EBC               	movlw	188
  7585  001D6A  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7586  001D6C  ECBF  F00D         	call	_PWM4_LoadDutyValue	;wreg free
  7587  001D70  0012               	return		;funcret
  7588  001D72                     __end_of_CoolingStart:
  7589                           	opt stack 0
  7590                           tosu	equ	0xFFF
  7591                           tosh	equ	0xFFE
  7592                           tosl	equ	0xFFD
  7593                           pclath	equ	0xFFA
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           intcon2	equ	0xFF1
  7602                           postinc0	equ	0xFEE
  7603                           wreg	equ	0xFE8
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           plusw2	equ	0xFDB
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function _PotSetpoint *****************
  7613 ;; Defined at:
  7614 ;;		line 21 in file "DigiPot.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  new_point       2   35[COMRAM] int 
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;  new_pos         2    6[BANK0 ] int 
  7619 ;;  x               2    4[BANK0 ] int 
  7620 ;;  set_point       2    2[BANK0 ] int 
  7621 ;; Return value:  Size  Location     Type
  7622 ;;		None               void
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0, cstack
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7630 ;;      Params:         2       0       0       0       0       0       0
  7631 ;;      Locals:         0       6       0       0       0       0       0
  7632 ;;      Temps:          0       2       0       0       0       0       0
  7633 ;;      Totals:         2       8       0       0       0       0       0
  7634 ;;Total ram usage:       10 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    5
  7637 ;; This function calls:
  7638 ;;		_Delay
  7639 ;; This function is called by:
  7640 ;;		_CoolingStart
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text47
  7645  000B6E                     __ptext47:
  7646                           	opt stack 0
  7647  000B6E                     _PotSetpoint:
  7648                           	opt stack 24
  7649                           
  7650                           ;DigiPot.c: 22: int set_point;
  7651                           ;DigiPot.c: 24: if (new_point > 32) {
  7652                           
  7653                           ;incstack = 0
  7654  000B6E  BE25               	btfsc	PotSetpoint@new_point+1,7,c
  7655  000B70  D00A               	goto	l4170
  7656  000B72  5025               	movf	PotSetpoint@new_point+1,w,c
  7657  000B74  E104               	bnz	u3940
  7658  000B76  0E21               	movlw	33
  7659  000B78  5C24               	subwf	PotSetpoint@new_point,w,c
  7660  000B7A  A0D8               	btfss	status,0,c
  7661  000B7C  D004               	goto	l4170
  7662  000B7E                     u3940:
  7663                           
  7664                           ;DigiPot.c: 25: new_point = 32;
  7665  000B7E  0E00               	movlw	0
  7666  000B80  6E25               	movwf	PotSetpoint@new_point+1,c
  7667  000B82  0E20               	movlw	32
  7668  000B84  6E24               	movwf	PotSetpoint@new_point,c
  7669  000B86                     l4170:
  7670                           
  7671                           ;DigiPot.c: 26: }
  7672                           ;DigiPot.c: 27: if (new_point <= 0) {
  7673  000B86  BE25               	btfsc	PotSetpoint@new_point+1,7,c
  7674  000B88  D005               	goto	l4172
  7675  000B8A  5025               	movf	PotSetpoint@new_point+1,w,c
  7676  000B8C  E107               	bnz	l4174
  7677  000B8E  0424               	decf	PotSetpoint@new_point,w,c
  7678  000B90  B0D8               	btfsc	status,0,c
  7679  000B92  D004               	goto	l4174
  7680  000B94                     l4172:
  7681                           
  7682                           ;DigiPot.c: 28: new_point = 0;
  7683  000B94  0E00               	movlw	0
  7684  000B96  6E25               	movwf	PotSetpoint@new_point+1,c
  7685  000B98  0E00               	movlw	0
  7686  000B9A  6E24               	movwf	PotSetpoint@new_point,c
  7687  000B9C                     l4174:
  7688                           
  7689                           ;DigiPot.c: 29: }
  7690                           ;DigiPot.c: 31: int new_pos = new_point;
  7691  000B9C  C024  F0D7         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7692  000BA0  C025  F0D8         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7693                           
  7694                           ;DigiPot.c: 35: LATB5 = 0;
  7695  000BA4  9A8A               	bcf	3978,5,c	;volatile
  7696                           
  7697                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7698  000BA6  0100               	movlb	0	; () banked
  7699  000BA8  51D7               	movf	PotSetpoint@new_pos& (0+255),w,b
  7700  000BAA  5C28               	subwf	_prev_pos,w,c
  7701  000BAC  5029               	movf	_prev_pos+1,w,c
  7702  000BAE  0A80               	xorlw	128
  7703  000BB0  0100               	movlb	0	; () banked
  7704  000BB2  6FD1               	movwf	??_PotSetpoint& (0+255),b
  7705  000BB4  0100               	movlb	0	; () banked
  7706  000BB6  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7707  000BB8  0A80               	xorlw	128
  7708  000BBA  0100               	movlb	0	; () banked
  7709  000BBC  59D1               	subwfb	??_PotSetpoint& (0+255),w,b
  7710  000BBE  B0D8               	btfsc	status,0,c
  7711  000BC0  D016               	goto	l810
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;DigiPot.c: 40: LATB3 = 1;
  7715  000BC2  868A               	bsf	3978,3,c	;volatile
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7719  000BC4  C028  F0D1         	movff	_prev_pos,??_PotSetpoint
  7720  000BC8  C029  F0D2         	movff	_prev_pos+1,??_PotSetpoint+1
  7721  000BCC  0100               	movlb	0	; () banked
  7722  000BCE  1FD1               	comf	??_PotSetpoint& (0+255),f,b
  7723  000BD0  1FD2               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7724  000BD2  4BD1               	infsnz	??_PotSetpoint& (0+255),f,b
  7725  000BD4  2BD2               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7726  000BD6  0100               	movlb	0	; () banked
  7727  000BD8  51D7               	movf	PotSetpoint@new_pos& (0+255),w,b
  7728  000BDA  0100               	movlb	0	; () banked
  7729  000BDC  25D1               	addwf	??_PotSetpoint& (0+255),w,b
  7730  000BDE  0100               	movlb	0	; () banked
  7731  000BE0  6FD3               	movwf	PotSetpoint@set_point& (0+255),b
  7732  000BE2  0100               	movlb	0	; () banked
  7733  000BE4  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7734  000BE6  0100               	movlb	0	; () banked
  7735  000BE8  21D2               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7736  000BEA  0100               	movlb	0	; () banked
  7737  000BEC  6FD4               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7738  000BEE                     l810:
  7739                           
  7740                           ; BSR set to: 0
  7741                           ;DigiPot.c: 42: }
  7742                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7743  000BEE  5028               	movf	_prev_pos,w,c
  7744  000BF0  0100               	movlb	0	; () banked
  7745  000BF2  5DD7               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7746  000BF4  0100               	movlb	0	; () banked
  7747  000BF6  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7748  000BF8  0A80               	xorlw	128
  7749  000BFA  0100               	movlb	0	; () banked
  7750  000BFC  6FD1               	movwf	??_PotSetpoint& (0+255),b
  7751  000BFE  5029               	movf	_prev_pos+1,w,c
  7752  000C00  0A80               	xorlw	128
  7753  000C02  0100               	movlb	0	; () banked
  7754  000C04  59D1               	subwfb	??_PotSetpoint& (0+255),w,b
  7755  000C06  B0D8               	btfsc	status,0,c
  7756  000C08  D014               	goto	l4188
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;DigiPot.c: 45: LATB3 = 0;
  7760  000C0A  968A               	bcf	3978,3,c	;volatile
  7761                           
  7762                           ; BSR set to: 0
  7763                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7764  000C0C  C0D7  F0D1         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7765  000C10  C0D8  F0D2         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7766  000C14  0100               	movlb	0	; () banked
  7767  000C16  1FD1               	comf	??_PotSetpoint& (0+255),f,b
  7768  000C18  1FD2               	comf	(??_PotSetpoint+1)& (0+255),f,b
  7769  000C1A  4BD1               	infsnz	??_PotSetpoint& (0+255),f,b
  7770  000C1C  2BD2               	incf	(??_PotSetpoint+1)& (0+255),f,b
  7771  000C1E  5028               	movf	_prev_pos,w,c
  7772  000C20  0100               	movlb	0	; () banked
  7773  000C22  25D1               	addwf	??_PotSetpoint& (0+255),w,b
  7774  000C24  0100               	movlb	0	; () banked
  7775  000C26  6FD3               	movwf	PotSetpoint@set_point& (0+255),b
  7776  000C28  5029               	movf	_prev_pos+1,w,c
  7777  000C2A  0100               	movlb	0	; () banked
  7778  000C2C  21D2               	addwfc	(??_PotSetpoint+1)& (0+255),w,b
  7779  000C2E  0100               	movlb	0	; () banked
  7780  000C30  6FD4               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7781  000C32                     l4188:
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;DigiPot.c: 47: }
  7785                           ;DigiPot.c: 48: Delay(1);
  7786  000C32  0E01               	movlw	1
  7787  000C34  6E1B               	movwf	Delay@wait,c
  7788  000C36  0E00               	movlw	0
  7789  000C38  6E1C               	movwf	Delay@wait+1,c
  7790  000C3A  0E00               	movlw	0
  7791  000C3C  6E1D               	movwf	Delay@wait+2,c
  7792  000C3E  0E00               	movlw	0
  7793  000C40  6E1E               	movwf	Delay@wait+3,c
  7794  000C42  EC61  F00D         	call	_Delay	;wreg free
  7795                           
  7796                           ;DigiPot.c: 50: int x;
  7797                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7798  000C46  0E00               	movlw	0
  7799  000C48  0100               	movlb	0	; () banked
  7800  000C4A  6FD6               	movwf	(PotSetpoint@x+1)& (0+255),b
  7801  000C4C  0E00               	movlw	0
  7802  000C4E  6FD5               	movwf	PotSetpoint@x& (0+255),b
  7803  000C50  D019               	goto	l4198
  7804  000C52                     l813:
  7805                           
  7806                           ; BSR set to: 0
  7807                           ;DigiPot.c: 53: LATB4 = 1;
  7808  000C52  888A               	bsf	3978,4,c	;volatile
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;DigiPot.c: 54: Delay(1);
  7812  000C54  0E01               	movlw	1
  7813  000C56  6E1B               	movwf	Delay@wait,c
  7814  000C58  0E00               	movlw	0
  7815  000C5A  6E1C               	movwf	Delay@wait+1,c
  7816  000C5C  0E00               	movlw	0
  7817  000C5E  6E1D               	movwf	Delay@wait+2,c
  7818  000C60  0E00               	movlw	0
  7819  000C62  6E1E               	movwf	Delay@wait+3,c
  7820  000C64  EC61  F00D         	call	_Delay	;wreg free
  7821                           
  7822                           ;DigiPot.c: 55: LATB4 = 0;
  7823  000C68  988A               	bcf	3978,4,c	;volatile
  7824                           
  7825                           ;DigiPot.c: 56: Delay(1);
  7826  000C6A  0E01               	movlw	1
  7827  000C6C  6E1B               	movwf	Delay@wait,c
  7828  000C6E  0E00               	movlw	0
  7829  000C70  6E1C               	movwf	Delay@wait+1,c
  7830  000C72  0E00               	movlw	0
  7831  000C74  6E1D               	movwf	Delay@wait+2,c
  7832  000C76  0E00               	movlw	0
  7833  000C78  6E1E               	movwf	Delay@wait+3,c
  7834  000C7A  EC61  F00D         	call	_Delay	;wreg free
  7835  000C7E  0100               	movlb	0	; () banked
  7836  000C80  4BD5               	infsnz	PotSetpoint@x& (0+255),f,b
  7837  000C82  2BD6               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7838  000C84                     l4198:
  7839                           
  7840                           ; BSR set to: 0
  7841  000C84  0100               	movlb	0	; () banked
  7842  000C86  51D3               	movf	PotSetpoint@set_point& (0+255),w,b
  7843  000C88  0100               	movlb	0	; () banked
  7844  000C8A  5DD5               	subwf	PotSetpoint@x& (0+255),w,b
  7845  000C8C  0100               	movlb	0	; () banked
  7846  000C8E  51D6               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7847  000C90  0A80               	xorlw	128
  7848  000C92  0100               	movlb	0	; () banked
  7849  000C94  6FD1               	movwf	??_PotSetpoint& (0+255),b
  7850  000C96  0100               	movlb	0	; () banked
  7851  000C98  51D4               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7852  000C9A  0A80               	xorlw	128
  7853  000C9C  0100               	movlb	0	; () banked
  7854  000C9E  59D1               	subwfb	??_PotSetpoint& (0+255),w,b
  7855  000CA0  A0D8               	btfss	status,0,c
  7856  000CA2  D7D7               	goto	l813
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;DigiPot.c: 57: }
  7860                           ;DigiPot.c: 59: LATB5 = 1;
  7861  000CA4  8A8A               	bsf	3978,5,c	;volatile
  7862                           
  7863                           ;DigiPot.c: 60: prev_pos = new_pos;
  7864  000CA6  C0D7  F028         	movff	PotSetpoint@new_pos,_prev_pos
  7865  000CAA  C0D8  F029         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7866                           
  7867                           ; BSR set to: 0
  7868  000CAE  0012               	return		;funcret
  7869  000CB0                     __end_of_PotSetpoint:
  7870                           	opt stack 0
  7871                           tosu	equ	0xFFF
  7872                           tosh	equ	0xFFE
  7873                           tosl	equ	0xFFD
  7874                           pclath	equ	0xFFA
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           intcon2	equ	0xFF1
  7883                           postinc0	equ	0xFEE
  7884                           wreg	equ	0xFE8
  7885                           indf2	equ	0xFDF
  7886                           postinc2	equ	0xFDE
  7887                           postdec2	equ	0xFDD
  7888                           plusw2	equ	0xFDB
  7889                           fsr2h	equ	0xFDA
  7890                           fsr2l	equ	0xFD9
  7891                           status	equ	0xFD8
  7892                           
  7893 ;; *************** function _PotClear *****************
  7894 ;; Defined at:
  7895 ;;		line 66 in file "DigiPot.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;		None
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  x               2   35[COMRAM] int 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;		None               void
  7902 ;; Registers used:
  7903 ;;		wreg, status,2, status,0, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7909 ;;      Params:         0       0       0       0       0       0       0
  7910 ;;      Locals:         2       0       0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0
  7912 ;;      Totals:         2       0       0       0       0       0       0
  7913 ;;Total ram usage:        2 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    5
  7916 ;; This function calls:
  7917 ;;		_Delay
  7918 ;; This function is called by:
  7919 ;;		_CoolingStart
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text48
  7924  00140E                     __ptext48:
  7925                           	opt stack 0
  7926  00140E                     _PotClear:
  7927                           	opt stack 24
  7928                           
  7929                           ;DigiPot.c: 67: Delay(1);
  7930                           
  7931                           ; BSR set to: 0
  7932                           ;incstack = 0
  7933  00140E  0E01               	movlw	1
  7934  001410  6E1B               	movwf	Delay@wait,c
  7935  001412  0E00               	movlw	0
  7936  001414  6E1C               	movwf	Delay@wait+1,c
  7937  001416  0E00               	movlw	0
  7938  001418  6E1D               	movwf	Delay@wait+2,c
  7939  00141A  0E00               	movlw	0
  7940  00141C  6E1E               	movwf	Delay@wait+3,c
  7941  00141E  EC61  F00D         	call	_Delay	;wreg free
  7942                           
  7943                           ;DigiPot.c: 69: LATB5 = 0;
  7944  001422  9A8A               	bcf	3978,5,c	;volatile
  7945                           
  7946                           ;DigiPot.c: 70: Delay(1);
  7947  001424  0E01               	movlw	1
  7948  001426  6E1B               	movwf	Delay@wait,c
  7949  001428  0E00               	movlw	0
  7950  00142A  6E1C               	movwf	Delay@wait+1,c
  7951  00142C  0E00               	movlw	0
  7952  00142E  6E1D               	movwf	Delay@wait+2,c
  7953  001430  0E00               	movlw	0
  7954  001432  6E1E               	movwf	Delay@wait+3,c
  7955  001434  EC61  F00D         	call	_Delay	;wreg free
  7956                           
  7957                           ;DigiPot.c: 71: LATB3 = 0;
  7958  001438  968A               	bcf	3978,3,c	;volatile
  7959                           
  7960                           ;DigiPot.c: 72: Delay(1);
  7961  00143A  0E01               	movlw	1
  7962  00143C  6E1B               	movwf	Delay@wait,c
  7963  00143E  0E00               	movlw	0
  7964  001440  6E1C               	movwf	Delay@wait+1,c
  7965  001442  0E00               	movlw	0
  7966  001444  6E1D               	movwf	Delay@wait+2,c
  7967  001446  0E00               	movlw	0
  7968  001448  6E1E               	movwf	Delay@wait+3,c
  7969  00144A  EC61  F00D         	call	_Delay	;wreg free
  7970                           
  7971                           ;DigiPot.c: 73: int x;
  7972                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  7973  00144E  0E00               	movlw	0
  7974  001450  6E25               	movwf	PotClear@x+1,c
  7975  001452  0E00               	movlw	0
  7976  001454  6E24               	movwf	PotClear@x,c
  7977  001456  BE25               	btfsc	PotClear@x+1,7,c
  7978  001458  D006               	goto	l818
  7979  00145A  5025               	movf	PotClear@x+1,w,c
  7980  00145C  E121               	bnz	l819
  7981  00145E  0E20               	movlw	32
  7982  001460  5C24               	subwf	PotClear@x,w,c
  7983  001462  B0D8               	btfsc	status,0,c
  7984  001464  D01D               	goto	l819
  7985  001466                     l818:
  7986                           
  7987                           ;DigiPot.c: 75: LATB4 = 1;
  7988  001466  888A               	bsf	3978,4,c	;volatile
  7989                           
  7990                           ;DigiPot.c: 76: Delay(1);
  7991  001468  0E01               	movlw	1
  7992  00146A  6E1B               	movwf	Delay@wait,c
  7993  00146C  0E00               	movlw	0
  7994  00146E  6E1C               	movwf	Delay@wait+1,c
  7995  001470  0E00               	movlw	0
  7996  001472  6E1D               	movwf	Delay@wait+2,c
  7997  001474  0E00               	movlw	0
  7998  001476  6E1E               	movwf	Delay@wait+3,c
  7999  001478  EC61  F00D         	call	_Delay	;wreg free
  8000                           
  8001                           ;DigiPot.c: 77: LATB4 = 0;
  8002  00147C  988A               	bcf	3978,4,c	;volatile
  8003                           
  8004                           ;DigiPot.c: 78: Delay(1);
  8005  00147E  0E01               	movlw	1
  8006  001480  6E1B               	movwf	Delay@wait,c
  8007  001482  0E00               	movlw	0
  8008  001484  6E1C               	movwf	Delay@wait+1,c
  8009  001486  0E00               	movlw	0
  8010  001488  6E1D               	movwf	Delay@wait+2,c
  8011  00148A  0E00               	movlw	0
  8012  00148C  6E1E               	movwf	Delay@wait+3,c
  8013  00148E  EC61  F00D         	call	_Delay	;wreg free
  8014  001492  4A24               	infsnz	PotClear@x,f,c
  8015  001494  2A25               	incf	PotClear@x+1,f,c
  8016  001496  BE25               	btfsc	PotClear@x+1,7,c
  8017  001498  D7E6               	goto	l818
  8018  00149A  5025               	movf	PotClear@x+1,w,c
  8019  00149C  E101               	bnz	u3930
  8020  00149E  D7DF               	goto	L1
  8021  0014A0                     u3930:
  8022  0014A0                     l819:
  8023                           
  8024                           ;DigiPot.c: 79: }
  8025                           ;DigiPot.c: 80: LATB4 = 1;
  8026  0014A0  888A               	bsf	3978,4,c	;volatile
  8027                           
  8028                           ;DigiPot.c: 81: Delay(1);
  8029  0014A2  0E01               	movlw	1
  8030  0014A4  6E1B               	movwf	Delay@wait,c
  8031  0014A6  0E00               	movlw	0
  8032  0014A8  6E1C               	movwf	Delay@wait+1,c
  8033  0014AA  0E00               	movlw	0
  8034  0014AC  6E1D               	movwf	Delay@wait+2,c
  8035  0014AE  0E00               	movlw	0
  8036  0014B0  6E1E               	movwf	Delay@wait+3,c
  8037  0014B2  EC61  F00D         	call	_Delay	;wreg free
  8038                           
  8039                           ;DigiPot.c: 83: LATB5 = 1;
  8040  0014B6  8A8A               	bsf	3978,5,c	;volatile
  8041                           
  8042                           ;DigiPot.c: 84: prev_pos = 0;
  8043  0014B8  0E00               	movlw	0
  8044  0014BA  6E29               	movwf	_prev_pos+1,c
  8045  0014BC  0E00               	movlw	0
  8046  0014BE  6E28               	movwf	_prev_pos,c
  8047                           
  8048                           ;DigiPot.c: 85: Delay(1);
  8049  0014C0  0E01               	movlw	1
  8050  0014C2  6E1B               	movwf	Delay@wait,c
  8051  0014C4  0E00               	movlw	0
  8052  0014C6  6E1C               	movwf	Delay@wait+1,c
  8053  0014C8  0E00               	movlw	0
  8054  0014CA  6E1D               	movwf	Delay@wait+2,c
  8055  0014CC  0E00               	movlw	0
  8056  0014CE  6E1E               	movwf	Delay@wait+3,c
  8057  0014D0  EC61  F00D         	call	_Delay	;wreg free
  8058  0014D4  0012               	return		;funcret
  8059  0014D6                     __end_of_PotClear:
  8060                           	opt stack 0
  8061                           tosu	equ	0xFFF
  8062                           tosh	equ	0xFFE
  8063                           tosl	equ	0xFFD
  8064                           pclath	equ	0xFFA
  8065                           tblptru	equ	0xFF8
  8066                           tblptrh	equ	0xFF7
  8067                           tblptrl	equ	0xFF6
  8068                           tablat	equ	0xFF5
  8069                           prodh	equ	0xFF4
  8070                           prodl	equ	0xFF3
  8071                           intcon	equ	0xFF2
  8072                           intcon2	equ	0xFF1
  8073                           postinc0	equ	0xFEE
  8074                           wreg	equ	0xFE8
  8075                           indf2	equ	0xFDF
  8076                           postinc2	equ	0xFDE
  8077                           postdec2	equ	0xFDD
  8078                           plusw2	equ	0xFDB
  8079                           fsr2h	equ	0xFDA
  8080                           fsr2l	equ	0xFD9
  8081                           status	equ	0xFD8
  8082                           
  8083 ;; *************** function _Delay *****************
  8084 ;; Defined at:
  8085 ;;		line 9 in file "Functions.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  wait            4   26[COMRAM] long 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  i               4   31[COMRAM] long 
  8090 ;; Return value:  Size  Location     Type
  8091 ;;		None               void
  8092 ;; Registers used:
  8093 ;;		wreg, status,2, status,0
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8099 ;;      Params:         4       0       0       0       0       0       0
  8100 ;;      Locals:         4       0       0       0       0       0       0
  8101 ;;      Temps:          1       0       0       0       0       0       0
  8102 ;;      Totals:         9       0       0       0       0       0       0
  8103 ;;Total ram usage:        9 bytes
  8104 ;; Hardware stack levels used:    1
  8105 ;; Hardware stack levels required when called:    4
  8106 ;; This function calls:
  8107 ;;		Nothing
  8108 ;; This function is called by:
  8109 ;;		_respondECU
  8110 ;;		_StartUp595
  8111 ;;		_writeRegisters
  8112 ;;		_PotSetpoint
  8113 ;;		_PotClear
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           	psect	text49
  8118  001AC2                     __ptext49:
  8119                           	opt stack 0
  8120  001AC2                     _Delay:
  8121                           	opt stack 24
  8122                           
  8123                           ;Functions.c: 10: long int i = 0;
  8124                           
  8125                           ;incstack = 0
  8126  001AC2  0E00               	movlw	0
  8127  001AC4  6E20               	movwf	Delay@i,c
  8128  001AC6  0E00               	movlw	0
  8129  001AC8  6E21               	movwf	Delay@i+1,c
  8130  001ACA  0E00               	movlw	0
  8131  001ACC  6E22               	movwf	Delay@i+2,c
  8132  001ACE  0E00               	movlw	0
  8133  001AD0  6E23               	movwf	Delay@i+3,c
  8134                           
  8135                           ;Functions.c: 11: for (; wait > i; i++) {
  8136  001AD2  D00D               	goto	l3610
  8137  001AD4                     l3606:
  8138                           
  8139                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8140  001AD4  0E03               	movlw	3
  8141  001AD6  6E1F               	movwf	??_Delay& (0+255),c
  8142  001AD8  0E98               	movlw	152
  8143  001ADA                     u4137:
  8144  001ADA  2EE8               	decfsz	wreg,f,c
  8145  001ADC  D7FE               	goto	u4137
  8146  001ADE  2E1F               	decfsz	??_Delay& (0+255),f,c
  8147  001AE0  D7FC               	goto	u4137
  8148  001AE2  0E01               	movlw	1
  8149  001AE4  2620               	addwf	Delay@i,f,c
  8150  001AE6  0E00               	movlw	0
  8151  001AE8  2221               	addwfc	Delay@i+1,f,c
  8152  001AEA  2222               	addwfc	Delay@i+2,f,c
  8153  001AEC  2223               	addwfc	Delay@i+3,f,c
  8154  001AEE                     l3610:
  8155  001AEE  501B               	movf	Delay@wait,w,c
  8156  001AF0  5C20               	subwf	Delay@i,w,c
  8157  001AF2  501C               	movf	Delay@wait+1,w,c
  8158  001AF4  5821               	subwfb	Delay@i+1,w,c
  8159  001AF6  501D               	movf	Delay@wait+2,w,c
  8160  001AF8  5822               	subwfb	Delay@i+2,w,c
  8161  001AFA  5023               	movf	Delay@i+3,w,c
  8162  001AFC  0A80               	xorlw	128
  8163  001AFE  6E1F               	movwf	??_Delay& (0+255),c
  8164  001B00  501E               	movf	Delay@wait+3,w,c
  8165  001B02  0A80               	xorlw	128
  8166  001B04  581F               	subwfb	??_Delay& (0+255),w,c
  8167  001B06  B0D8               	btfsc	status,0,c
  8168  001B08  0012               	return	
  8169  001B0A  D7E4               	goto	l3606
  8170  001B0C                     __end_of_Delay:
  8171                           	opt stack 0
  8172                           tosu	equ	0xFFF
  8173                           tosh	equ	0xFFE
  8174                           tosl	equ	0xFFD
  8175                           pclath	equ	0xFFA
  8176                           tblptru	equ	0xFF8
  8177                           tblptrh	equ	0xFF7
  8178                           tblptrl	equ	0xFF6
  8179                           tablat	equ	0xFF5
  8180                           prodh	equ	0xFF4
  8181                           prodl	equ	0xFF3
  8182                           intcon	equ	0xFF2
  8183                           intcon2	equ	0xFF1
  8184                           postinc0	equ	0xFEE
  8185                           wreg	equ	0xFE8
  8186                           indf2	equ	0xFDF
  8187                           postinc2	equ	0xFDE
  8188                           postdec2	equ	0xFDD
  8189                           plusw2	equ	0xFDB
  8190                           fsr2h	equ	0xFDA
  8191                           fsr2l	equ	0xFD9
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _PWM4_LoadDutyValue *****************
  8195 ;; Defined at:
  8196 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  dutyValue       2   26[COMRAM] unsigned int 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;		None
  8201 ;; Return value:  Size  Location     Type
  8202 ;;		None               void
  8203 ;; Registers used:
  8204 ;;		wreg, status,2, status,0
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8210 ;;      Params:         2       0       0       0       0       0       0
  8211 ;;      Locals:         0       0       0       0       0       0       0
  8212 ;;      Temps:          2       0       0       0       0       0       0
  8213 ;;      Totals:         4       0       0       0       0       0       0
  8214 ;;Total ram usage:        4 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    4
  8217 ;; This function calls:
  8218 ;;		Nothing
  8219 ;; This function is called by:
  8220 ;;		_CoolingStart
  8221 ;; This function uses a non-reentrant model
  8222 ;;
  8223                           
  8224                           	psect	text50
  8225  001B7E                     __ptext50:
  8226                           	opt stack 0
  8227  001B7E                     _PWM4_LoadDutyValue:
  8228                           	opt stack 25
  8229                           
  8230                           ;pwm4.c: 84: CCPR4L = ((dutyValue & 0x03FC)>>2);
  8231                           
  8232                           ;incstack = 0
  8233  001B7E  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8234  001B82  C01C  F01E         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  8235  001B86  90D8               	bcf	status,0,c
  8236  001B88  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8237  001B8A  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8238  001B8C  90D8               	bcf	status,0,c
  8239  001B8E  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8240  001B90  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8241  001B92  501D               	movf	??_PWM4_LoadDutyValue,w,c
  8242  001B94  010F               	movlb	15	; () banked
  8243  001B96  6F58               	movwf	88,b	;volatile
  8244                           
  8245                           ;pwm4.c: 87: CCP4CON = (CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  8246  001B98  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8247  001B9C  0E03               	movlw	3
  8248  001B9E  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8249  001BA0  3A1D               	swapf	??_PWM4_LoadDutyValue,f,c
  8250  001BA2  0EF0               	movlw	240
  8251  001BA4  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8252  001BA6  010F               	movlb	15	; () banked
  8253  001BA8  5157               	movf	87,w,b	;volatile
  8254  001BAA  0BCF               	andlw	207
  8255  001BAC  101D               	iorwf	??_PWM4_LoadDutyValue,w,c
  8256  001BAE  010F               	movlb	15	; () banked
  8257  001BB0  6F57               	movwf	87,b	;volatile
  8258                           
  8259                           ; BSR set to: 15
  8260  001BB2  0012               	return		;funcret
  8261  001BB4                     __end_of_PWM4_LoadDutyValue:
  8262                           	opt stack 0
  8263                           tosu	equ	0xFFF
  8264                           tosh	equ	0xFFE
  8265                           tosl	equ	0xFFD
  8266                           pclath	equ	0xFFA
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           intcon2	equ	0xFF1
  8275                           postinc0	equ	0xFEE
  8276                           wreg	equ	0xFE8
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           plusw2	equ	0xFDB
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _INTERRUPT_InterruptManager *****************
  8286 ;; Defined at:
  8287 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;		None
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;		None
  8292 ;; Return value:  Size  Location     Type
  8293 ;;		None               void
  8294 ;; Registers used:
  8295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8296 ;; Tracked objects:
  8297 ;;		On entry : 0/0
  8298 ;;		On exit  : 0/0
  8299 ;;		Unchanged: 0/0
  8300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8301 ;;      Params:         0       0       0       0       0       0       0
  8302 ;;      Locals:         0       0       0       0       0       0       0
  8303 ;;      Temps:         14       0       0       0       0       0       0
  8304 ;;      Totals:        14       0       0       0       0       0       0
  8305 ;;Total ram usage:       14 bytes
  8306 ;; Hardware stack levels used:    1
  8307 ;; Hardware stack levels required when called:    3
  8308 ;; This function calls:
  8309 ;;		_ADC_ISR
  8310 ;;		_EUSART1_Receive_ISR
  8311 ;;		_EUSART1_Transmit_ISR
  8312 ;; This function is called by:
  8313 ;;		Interrupt level 2
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           	psect	intcode
  8318  000008                     __pintcode:
  8319                           	opt stack 0
  8320  000008                     _INTERRUPT_InterruptManager:
  8321                           	opt stack 21
  8322                           
  8323                           ; BSR set to: 15
  8324                           ;incstack = 0
  8325  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8326  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  8327  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8328  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8329  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8330  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8331  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8332  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8333  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8334  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8335  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8336  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8337  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8338  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8339  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8340                           
  8341                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8342  000042  BA9D               	btfsc	3997,5,c	;volatile
  8343  000044  AA9E               	btfss	3998,5,c	;volatile
  8344  000046  D003               	goto	i2l63
  8345                           
  8346                           ;interrupt_manager.c: 71: {
  8347                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8348  000048  ECB9  F00E         	call	_EUSART1_Receive_ISR	;wreg free
  8349                           
  8350                           ;interrupt_manager.c: 73: }
  8351  00004C  D00B               	goto	i2l69
  8352  00004E                     i2l63:
  8353                           
  8354                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8355  00004E  B89D               	btfsc	3997,4,c	;volatile
  8356  000050  A89E               	btfss	3998,4,c	;volatile
  8357  000052  D003               	goto	i2l65
  8358                           
  8359                           ;interrupt_manager.c: 75: {
  8360                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8361  000054  ECF4  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  8362                           
  8363                           ;interrupt_manager.c: 77: }
  8364  000058  D005               	goto	i2l69
  8365  00005A                     i2l65:
  8366                           
  8367                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8368  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8369  00005C  AC9E               	btfss	3998,6,c	;volatile
  8370  00005E  D002               	goto	i2l69
  8371                           
  8372                           ;interrupt_manager.c: 79: {
  8373                           ;interrupt_manager.c: 80: ADC_ISR();
  8374  000060  EC41  F00F         	call	_ADC_ISR	;wreg free
  8375  000064                     i2l69:
  8376  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8377  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8378  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8379  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8380  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8381  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8382  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8383  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8384  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8385  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8386  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8387  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8388  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8389  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8390  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8391  00009E  0011               	retfie		f
  8392  0000A0                     __end_of_INTERRUPT_InterruptManager:
  8393                           	opt stack 0
  8394                           tosu	equ	0xFFF
  8395                           tosh	equ	0xFFE
  8396                           tosl	equ	0xFFD
  8397                           pclatu	equ	0xFFB
  8398                           pclath	equ	0xFFA
  8399                           tblptru	equ	0xFF8
  8400                           tblptrh	equ	0xFF7
  8401                           tblptrl	equ	0xFF6
  8402                           tablat	equ	0xFF5
  8403                           prodh	equ	0xFF4
  8404                           prodl	equ	0xFF3
  8405                           intcon	equ	0xFF2
  8406                           intcon2	equ	0xFF1
  8407                           postinc0	equ	0xFEE
  8408                           fsr0h	equ	0xFEA
  8409                           fsr0l	equ	0xFE9
  8410                           wreg	equ	0xFE8
  8411                           fsr1h	equ	0xFE2
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           plusw2	equ	0xFDB
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _EUSART1_Transmit_ISR *****************
  8422 ;; Defined at:
  8423 ;;		line 150 in file "UART.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;		None
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;		None
  8428 ;; Return value:  Size  Location     Type
  8429 ;;		None               void
  8430 ;; Registers used:
  8431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8437 ;;      Params:         0       0       0       0       0       0       0
  8438 ;;      Locals:         0       0       0       0       0       0       0
  8439 ;;      Temps:          0       0       0       0       0       0       0
  8440 ;;      Totals:         0       0       0       0       0       0       0
  8441 ;;Total ram usage:        0 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:    2
  8444 ;; This function calls:
  8445 ;;		i2_UART_buff_get
  8446 ;;		i2_UART_buff_size
  8447 ;; This function is called by:
  8448 ;;		_INTERRUPT_InterruptManager
  8449 ;; This function uses a non-reentrant model
  8450 ;;
  8451                           
  8452                           	psect	text52
  8453  001BE8                     __ptext52:
  8454                           	opt stack 0
  8455  001BE8                     _EUSART1_Transmit_ISR:
  8456                           	opt stack 21
  8457                           
  8458                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  8459                           
  8460                           ;incstack = 0
  8461  001BE8  0E00               	movlw	low _output_buffer
  8462  001BEA  6E01               	movwf	i2UART_buff_size@_this,c
  8463  001BEC  0E04               	movlw	high _output_buffer
  8464  001BEE  6E02               	movwf	i2UART_buff_size@_this+1,c
  8465  001BF0  EC03  F00F         	call	i2_UART_buff_size	;wreg free
  8466  001BF4  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  8467  001BF6  D00D               	goto	i2l3418
  8468  001BF8  5002               	movf	?i2_UART_buff_size+1,w,c
  8469  001BFA  E103               	bnz	i2u272_40
  8470  001BFC  0401               	decf	?i2_UART_buff_size,w,c
  8471  001BFE  A0D8               	btfss	status,0,c
  8472  001C00  D008               	goto	i2l3418
  8473  001C02                     i2u272_40:
  8474                           
  8475                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  8476  001C02  0E00               	movlw	low _output_buffer
  8477  001C04  6E07               	movwf	i2UART_buff_get@_this,c
  8478  001C06  0E04               	movlw	high _output_buffer
  8479  001C08  6E08               	movwf	i2UART_buff_get@_this+1,c
  8480  001C0A  ECFD  F00A         	call	i2_UART_buff_get	;wreg free
  8481  001C0E  6EAD               	movwf	4013,c	;volatile
  8482                           
  8483                           ;UART.c: 154: } else {
  8484  001C10  0012               	return	
  8485  001C12                     i2l3418:
  8486                           
  8487                           ;UART.c: 155: Transmit_stall = 1;
  8488  001C12  0E01               	movlw	1
  8489  001C14  6E44               	movwf	_Transmit_stall,c
  8490                           
  8491                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  8492  001C16  989D               	bcf	3997,4,c	;volatile
  8493  001C18  0012               	return	
  8494  001C1A                     __end_of_EUSART1_Transmit_ISR:
  8495                           	opt stack 0
  8496                           tosu	equ	0xFFF
  8497                           tosh	equ	0xFFE
  8498                           tosl	equ	0xFFD
  8499                           pclatu	equ	0xFFB
  8500                           pclath	equ	0xFFA
  8501                           tblptru	equ	0xFF8
  8502                           tblptrh	equ	0xFF7
  8503                           tblptrl	equ	0xFF6
  8504                           tablat	equ	0xFF5
  8505                           prodh	equ	0xFF4
  8506                           prodl	equ	0xFF3
  8507                           intcon	equ	0xFF2
  8508                           intcon2	equ	0xFF1
  8509                           postinc0	equ	0xFEE
  8510                           fsr0h	equ	0xFEA
  8511                           fsr0l	equ	0xFE9
  8512                           wreg	equ	0xFE8
  8513                           fsr1h	equ	0xFE2
  8514                           fsr1l	equ	0xFE1
  8515                           indf2	equ	0xFDF
  8516                           postinc2	equ	0xFDE
  8517                           postdec2	equ	0xFDD
  8518                           plusw2	equ	0xFDB
  8519                           fsr2h	equ	0xFDA
  8520                           fsr2l	equ	0xFD9
  8521                           status	equ	0xFD8
  8522                           
  8523 ;; *************** function i2_UART_buff_size *****************
  8524 ;; Defined at:
  8525 ;;		line 102 in file "UART.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  8528 ;;		 -> output_buffer(206), input_buffer(206), 
  8529 ;; Auto vars:     Size  Location     Type
  8530 ;;		None
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  2    0[COMRAM] int 
  8533 ;; Registers used:
  8534 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8540 ;;      Params:         2       0       0       0       0       0       0
  8541 ;;      Locals:         0       0       0       0       0       0       0
  8542 ;;      Temps:          0       0       0       0       0       0       0
  8543 ;;      Totals:         2       0       0       0       0       0       0
  8544 ;;Total ram usage:        2 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; This function calls:
  8547 ;;		Nothing
  8548 ;; This function is called by:
  8549 ;;		_EUSART1_Transmit_ISR
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           	psect	text53
  8554  001E06                     __ptext53:
  8555                           	opt stack 0
  8556  001E06                     i2_UART_buff_size:
  8557                           	opt stack 22
  8558                           
  8559                           ;UART.c: 103: return (_this->count);
  8560                           
  8561                           ;incstack = 0
  8562  001E06  EE20 F0CC          	lfsr	2,204
  8563  001E0A  5001               	movf	i2UART_buff_size@_this,w,c
  8564  001E0C  26D9               	addwf	fsr2l,f,c
  8565  001E0E  5002               	movf	i2UART_buff_size@_this+1,w,c
  8566  001E10  22DA               	addwfc	fsr2h,f,c
  8567  001E12  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  8568  001E16  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  8569  001E1A  0012               	return	
  8570  001E1C                     __end_ofi2_UART_buff_size:
  8571                           	opt stack 0
  8572                           tosu	equ	0xFFF
  8573                           tosh	equ	0xFFE
  8574                           tosl	equ	0xFFD
  8575                           pclatu	equ	0xFFB
  8576                           pclath	equ	0xFFA
  8577                           tblptru	equ	0xFF8
  8578                           tblptrh	equ	0xFF7
  8579                           tblptrl	equ	0xFF6
  8580                           tablat	equ	0xFF5
  8581                           prodh	equ	0xFF4
  8582                           prodl	equ	0xFF3
  8583                           intcon	equ	0xFF2
  8584                           intcon2	equ	0xFF1
  8585                           postinc0	equ	0xFEE
  8586                           fsr0h	equ	0xFEA
  8587                           fsr0l	equ	0xFE9
  8588                           wreg	equ	0xFE8
  8589                           fsr1h	equ	0xFE2
  8590                           fsr1l	equ	0xFE1
  8591                           indf2	equ	0xFDF
  8592                           postinc2	equ	0xFDE
  8593                           postdec2	equ	0xFDD
  8594                           plusw2	equ	0xFDB
  8595                           fsr2h	equ	0xFDA
  8596                           fsr2l	equ	0xFD9
  8597                           status	equ	0xFD8
  8598                           
  8599 ;; *************** function i2_UART_buff_get *****************
  8600 ;; Defined at:
  8601 ;;		line 81 in file "UART.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8604 ;;		 -> output_buffer(206), input_buffer(206), 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  1    wreg      unsigned char 
  8609 ;; Registers used:
  8610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8616 ;;      Params:         2       0       0       0       0       0       0
  8617 ;;      Locals:         1       0       0       0       0       0       0
  8618 ;;      Temps:          2       0       0       0       0       0       0
  8619 ;;      Totals:         5       0       0       0       0       0       0
  8620 ;;Total ram usage:        5 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; Hardware stack levels required when called:    1
  8623 ;; This function calls:
  8624 ;;		i2_UART_buff_modulo_inc
  8625 ;; This function is called by:
  8626 ;;		_EUSART1_Transmit_ISR
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           	psect	text54
  8631  0015FA                     __ptext54:
  8632                           	opt stack 0
  8633  0015FA                     i2_UART_buff_get:
  8634                           	opt stack 21
  8635                           
  8636                           ;UART.c: 82: unsigned char c;
  8637                           ;UART.c: 83: if (_this->count > 0) {
  8638                           
  8639                           ;incstack = 0
  8640  0015FA  EE20 F0CC          	lfsr	2,204
  8641  0015FE  5007               	movf	i2UART_buff_get@_this,w,c
  8642  001600  26D9               	addwf	fsr2l,f,c
  8643  001602  5008               	movf	i2UART_buff_get@_this+1,w,c
  8644  001604  22DA               	addwfc	fsr2h,f,c
  8645  001606  0E01               	movlw	1
  8646  001608  BEDB               	btfsc	plusw2,7,c
  8647  00160A  D03C               	goto	i2l3390
  8648  00160C  0E01               	movlw	1
  8649  00160E  50DB               	movf	plusw2,w,c
  8650  001610  E103               	bnz	i2u269_40
  8651  001612  04DE               	decf	postinc2,w,c
  8652  001614  A0D8               	btfss	status,0,c
  8653  001616  D036               	goto	i2l3390
  8654  001618                     i2u269_40:
  8655                           
  8656                           ;UART.c: 84: c = _this->buf[_this->tail];
  8657  001618  EE20 F0CA          	lfsr	2,202
  8658  00161C  5007               	movf	i2UART_buff_get@_this,w,c
  8659  00161E  26D9               	addwf	fsr2l,f,c
  8660  001620  5008               	movf	i2UART_buff_get@_this+1,w,c
  8661  001622  22DA               	addwfc	fsr2h,f,c
  8662  001624  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  8663  001628  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  8664  00162C  5009               	movf	??i2_UART_buff_get,w,c
  8665  00162E  2407               	addwf	i2UART_buff_get@_this,w,c
  8666  001630  6ED9               	movwf	fsr2l,c
  8667  001632  500A               	movf	??i2_UART_buff_get+1,w,c
  8668  001634  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  8669  001636  6EDA               	movwf	fsr2h,c
  8670  001638  50DF               	movf	indf2,w,c
  8671  00163A  6E0B               	movwf	i2UART_buff_get@c,c
  8672                           
  8673                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8674  00163C  EE20 F0CA          	lfsr	2,202
  8675  001640  5007               	movf	i2UART_buff_get@_this,w,c
  8676  001642  26D9               	addwf	fsr2l,f,c
  8677  001644  5008               	movf	i2UART_buff_get@_this+1,w,c
  8678  001646  22DA               	addwfc	fsr2h,f,c
  8679  001648  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8680  00164C  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8681  001650  0E00               	movlw	0
  8682  001652  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8683  001654  0EC8               	movlw	200
  8684  001656  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8685  001658  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8686  00165C  EE20 F0CA          	lfsr	2,202
  8687  001660  5007               	movf	i2UART_buff_get@_this,w,c
  8688  001662  26D9               	addwf	fsr2l,f,c
  8689  001664  5008               	movf	i2UART_buff_get@_this+1,w,c
  8690  001666  22DA               	addwfc	fsr2h,f,c
  8691  001668  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8692  00166C  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8693                           
  8694                           ;UART.c: 86: --_this->count;
  8695  001670  EE20 F0CC          	lfsr	2,204
  8696  001674  5007               	movf	i2UART_buff_get@_this,w,c
  8697  001676  26D9               	addwf	fsr2l,f,c
  8698  001678  5008               	movf	i2UART_buff_get@_this+1,w,c
  8699  00167A  22DA               	addwfc	fsr2h,f,c
  8700  00167C  06DE               	decf	postinc2,f,c
  8701  00167E  0E00               	movlw	0
  8702  001680  5ADD               	subwfb	postdec2,f,c
  8703                           
  8704                           ;UART.c: 87: } else {
  8705  001682  D002               	goto	i2l708
  8706  001684                     i2l3390:
  8707                           
  8708                           ;UART.c: 88: c = 0;
  8709  001684  0E00               	movlw	0
  8710  001686  6E0B               	movwf	i2UART_buff_get@c,c
  8711  001688                     i2l708:
  8712                           
  8713                           ;UART.c: 89: }
  8714                           ;UART.c: 90: return (c);
  8715  001688  500B               	movf	i2UART_buff_get@c,w,c
  8716  00168A  0012               	return	
  8717  00168C                     __end_ofi2_UART_buff_get:
  8718                           	opt stack 0
  8719                           tosu	equ	0xFFF
  8720                           tosh	equ	0xFFE
  8721                           tosl	equ	0xFFD
  8722                           pclatu	equ	0xFFB
  8723                           pclath	equ	0xFFA
  8724                           tblptru	equ	0xFF8
  8725                           tblptrh	equ	0xFF7
  8726                           tblptrl	equ	0xFF6
  8727                           tablat	equ	0xFF5
  8728                           prodh	equ	0xFF4
  8729                           prodl	equ	0xFF3
  8730                           intcon	equ	0xFF2
  8731                           intcon2	equ	0xFF1
  8732                           postinc0	equ	0xFEE
  8733                           fsr0h	equ	0xFEA
  8734                           fsr0l	equ	0xFE9
  8735                           wreg	equ	0xFE8
  8736                           fsr1h	equ	0xFE2
  8737                           fsr1l	equ	0xFE1
  8738                           indf2	equ	0xFDF
  8739                           postinc2	equ	0xFDE
  8740                           postdec2	equ	0xFDD
  8741                           plusw2	equ	0xFDB
  8742                           fsr2h	equ	0xFDA
  8743                           fsr2l	equ	0xFD9
  8744                           status	equ	0xFD8
  8745                           
  8746 ;; *************** function _EUSART1_Receive_ISR *****************
  8747 ;; Defined at:
  8748 ;;		line 139 in file "UART.c"
  8749 ;; Parameters:    Size  Location     Type
  8750 ;;		None
  8751 ;; Auto vars:     Size  Location     Type
  8752 ;;  data            1   11[COMRAM] unsigned char 
  8753 ;; Return value:  Size  Location     Type
  8754 ;;		None               void
  8755 ;; Registers used:
  8756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8757 ;; Tracked objects:
  8758 ;;		On entry : 0/0
  8759 ;;		On exit  : 0/0
  8760 ;;		Unchanged: 0/0
  8761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8762 ;;      Params:         0       0       0       0       0       0       0
  8763 ;;      Locals:         1       0       0       0       0       0       0
  8764 ;;      Temps:          0       0       0       0       0       0       0
  8765 ;;      Totals:         1       0       0       0       0       0       0
  8766 ;;Total ram usage:        1 bytes
  8767 ;; Hardware stack levels used:    1
  8768 ;; Hardware stack levels required when called:    2
  8769 ;; This function calls:
  8770 ;;		i2_UART_buff_put
  8771 ;; This function is called by:
  8772 ;;		_INTERRUPT_InterruptManager
  8773 ;; This function uses a non-reentrant model
  8774 ;;
  8775                           
  8776                           	psect	text55
  8777  001D72                     __ptext55:
  8778                           	opt stack 0
  8779  001D72                     _EUSART1_Receive_ISR:
  8780                           	opt stack 21
  8781                           
  8782                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  8783                           
  8784                           ;incstack = 0
  8785  001D72  A2AB               	btfss	4011,1,c	;volatile
  8786  001D74  D002               	goto	i2l739
  8787                           
  8788                           ;UART.c: 143: RC1STAbits.CREN = 0;
  8789  001D76  98AB               	bcf	4011,4,c	;volatile
  8790                           
  8791                           ;UART.c: 144: RC1STAbits.CREN = 1;
  8792  001D78  88AB               	bsf	4011,4,c	;volatile
  8793  001D7A                     i2l739:
  8794                           
  8795                           ;UART.c: 145: }
  8796                           ;UART.c: 146: unsigned char data = RCREG1;
  8797  001D7A  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8798                           
  8799                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  8800  001D7E  0E00               	movlw	low _input_buffer
  8801  001D80  6E07               	movwf	i2UART_buff_put@_this,c
  8802  001D82  0E03               	movlw	high _input_buffer
  8803  001D84  6E08               	movwf	i2UART_buff_put@_this+1,c
  8804  001D86  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8805  001D8A  ECE5  F006         	call	i2_UART_buff_put	;wreg free
  8806  001D8E  0012               	return		;funcret
  8807  001D90                     __end_of_EUSART1_Receive_ISR:
  8808                           	opt stack 0
  8809                           tosu	equ	0xFFF
  8810                           tosh	equ	0xFFE
  8811                           tosl	equ	0xFFD
  8812                           pclatu	equ	0xFFB
  8813                           pclath	equ	0xFFA
  8814                           tblptru	equ	0xFF8
  8815                           tblptrh	equ	0xFF7
  8816                           tblptrl	equ	0xFF6
  8817                           tablat	equ	0xFF5
  8818                           prodh	equ	0xFF4
  8819                           prodl	equ	0xFF3
  8820                           intcon	equ	0xFF2
  8821                           intcon2	equ	0xFF1
  8822                           postinc0	equ	0xFEE
  8823                           fsr0h	equ	0xFEA
  8824                           fsr0l	equ	0xFE9
  8825                           wreg	equ	0xFE8
  8826                           fsr1h	equ	0xFE2
  8827                           fsr1l	equ	0xFE1
  8828                           indf2	equ	0xFDF
  8829                           postinc2	equ	0xFDE
  8830                           postdec2	equ	0xFDD
  8831                           plusw2	equ	0xFDB
  8832                           fsr2h	equ	0xFDA
  8833                           fsr2l	equ	0xFD9
  8834                           status	equ	0xFD8
  8835                           
  8836 ;; *************** function i2_UART_buff_put *****************
  8837 ;; Defined at:
  8838 ;;		line 68 in file "UART.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8841 ;;		 -> output_buffer(206), input_buffer(206), 
  8842 ;;  c               1    8[COMRAM] const unsigned char 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;		None
  8845 ;; Return value:  Size  Location     Type
  8846 ;;		None               void
  8847 ;; Registers used:
  8848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8854 ;;      Params:         3       0       0       0       0       0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0
  8856 ;;      Temps:          2       0       0       0       0       0       0
  8857 ;;      Totals:         5       0       0       0       0       0       0
  8858 ;;Total ram usage:        5 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    1
  8861 ;; This function calls:
  8862 ;;		i2_UART_buff_modulo_inc
  8863 ;; This function is called by:
  8864 ;;		_EUSART1_Receive_ISR
  8865 ;; This function uses a non-reentrant model
  8866 ;;
  8867                           
  8868                           	psect	text56
  8869  000DCA                     __ptext56:
  8870                           	opt stack 0
  8871  000DCA                     i2_UART_buff_put:
  8872                           	opt stack 21
  8873                           
  8874                           ;UART.c: 69: if (_this->count < 200) {
  8875                           
  8876                           ;incstack = 0
  8877  000DCA  EE20 F0CC          	lfsr	2,204
  8878  000DCE  5007               	movf	i2UART_buff_put@_this,w,c
  8879  000DD0  26D9               	addwf	fsr2l,f,c
  8880  000DD2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8881  000DD4  22DA               	addwfc	fsr2h,f,c
  8882  000DD6  0E01               	movlw	1
  8883  000DD8  BEDB               	btfsc	plusw2,7,c
  8884  000DDA  D007               	goto	i2l3370
  8885  000DDC  0E01               	movlw	1
  8886  000DDE  50DB               	movf	plusw2,w,c
  8887  000DE0  E13A               	bnz	i2l3376
  8888  000DE2  0EC8               	movlw	200
  8889  000DE4  5CDE               	subwf	postinc2,w,c
  8890  000DE6  B0D8               	btfsc	status,0,c
  8891  000DE8  D036               	goto	i2l3376
  8892  000DEA                     i2l3370:
  8893                           
  8894                           ;UART.c: 70: _this->buf[_this->head] = c;
  8895  000DEA  EE20 F0C8          	lfsr	2,200
  8896  000DEE  5007               	movf	i2UART_buff_put@_this,w,c
  8897  000DF0  26D9               	addwf	fsr2l,f,c
  8898  000DF2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8899  000DF4  22DA               	addwfc	fsr2h,f,c
  8900  000DF6  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8901  000DFA  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8902  000DFE  500A               	movf	??i2_UART_buff_put,w,c
  8903  000E00  2407               	addwf	i2UART_buff_put@_this,w,c
  8904  000E02  6ED9               	movwf	fsr2l,c
  8905  000E04  500B               	movf	??i2_UART_buff_put+1,w,c
  8906  000E06  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8907  000E08  6EDA               	movwf	fsr2h,c
  8908  000E0A  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8909                           
  8910                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8911  000E0E  EE20 F0C8          	lfsr	2,200
  8912  000E12  5007               	movf	i2UART_buff_put@_this,w,c
  8913  000E14  26D9               	addwf	fsr2l,f,c
  8914  000E16  5008               	movf	i2UART_buff_put@_this+1,w,c
  8915  000E18  22DA               	addwfc	fsr2h,f,c
  8916  000E1A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8917  000E1E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8918  000E22  0E00               	movlw	0
  8919  000E24  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8920  000E26  0EC8               	movlw	200
  8921  000E28  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8922  000E2A  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8923  000E2E  EE20 F0C8          	lfsr	2,200
  8924  000E32  5007               	movf	i2UART_buff_put@_this,w,c
  8925  000E34  26D9               	addwf	fsr2l,f,c
  8926  000E36  5008               	movf	i2UART_buff_put@_this+1,w,c
  8927  000E38  22DA               	addwfc	fsr2h,f,c
  8928  000E3A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8929  000E3E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8930                           
  8931                           ;UART.c: 72: ++_this->count;
  8932  000E42  EE20 F0CC          	lfsr	2,204
  8933  000E46  5007               	movf	i2UART_buff_put@_this,w,c
  8934  000E48  26D9               	addwf	fsr2l,f,c
  8935  000E4A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8936  000E4C  22DA               	addwfc	fsr2h,f,c
  8937  000E4E  2ADE               	incf	postinc2,f,c
  8938  000E50  0E00               	movlw	0
  8939  000E52  22DD               	addwfc	postdec2,f,c
  8940                           
  8941                           ;UART.c: 73: } else {
  8942  000E54  0012               	return	
  8943  000E56                     i2l3376:
  8944                           
  8945                           ;UART.c: 74: _this->buf[_this->head] = c;
  8946  000E56  EE20 F0C8          	lfsr	2,200
  8947  000E5A  5007               	movf	i2UART_buff_put@_this,w,c
  8948  000E5C  26D9               	addwf	fsr2l,f,c
  8949  000E5E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8950  000E60  22DA               	addwfc	fsr2h,f,c
  8951  000E62  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8952  000E66  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8953  000E6A  500A               	movf	??i2_UART_buff_put,w,c
  8954  000E6C  2407               	addwf	i2UART_buff_put@_this,w,c
  8955  000E6E  6ED9               	movwf	fsr2l,c
  8956  000E70  500B               	movf	??i2_UART_buff_put+1,w,c
  8957  000E72  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8958  000E74  6EDA               	movwf	fsr2h,c
  8959  000E76  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8960                           
  8961                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8962  000E7A  EE20 F0C8          	lfsr	2,200
  8963  000E7E  5007               	movf	i2UART_buff_put@_this,w,c
  8964  000E80  26D9               	addwf	fsr2l,f,c
  8965  000E82  5008               	movf	i2UART_buff_put@_this+1,w,c
  8966  000E84  22DA               	addwfc	fsr2h,f,c
  8967  000E86  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8968  000E8A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8969  000E8E  0E00               	movlw	0
  8970  000E90  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8971  000E92  0EC8               	movlw	200
  8972  000E94  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8973  000E96  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8974  000E9A  EE20 F0C8          	lfsr	2,200
  8975  000E9E  5007               	movf	i2UART_buff_put@_this,w,c
  8976  000EA0  26D9               	addwf	fsr2l,f,c
  8977  000EA2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8978  000EA4  22DA               	addwfc	fsr2h,f,c
  8979  000EA6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8980  000EAA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8981                           
  8982                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8983  000EAE  EE20 F0CA          	lfsr	2,202
  8984  000EB2  5007               	movf	i2UART_buff_put@_this,w,c
  8985  000EB4  26D9               	addwf	fsr2l,f,c
  8986  000EB6  5008               	movf	i2UART_buff_put@_this+1,w,c
  8987  000EB8  22DA               	addwfc	fsr2h,f,c
  8988  000EBA  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8989  000EBE  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8990  000EC2  0E00               	movlw	0
  8991  000EC4  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8992  000EC6  0EC8               	movlw	200
  8993  000EC8  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8994  000ECA  EC65  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8995  000ECE  EE20 F0CA          	lfsr	2,202
  8996  000ED2  5007               	movf	i2UART_buff_put@_this,w,c
  8997  000ED4  26D9               	addwf	fsr2l,f,c
  8998  000ED6  5008               	movf	i2UART_buff_put@_this+1,w,c
  8999  000ED8  22DA               	addwfc	fsr2h,f,c
  9000  000EDA  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  9001  000EDE  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  9002  000EE2  0012               	return	
  9003  000EE4                     __end_ofi2_UART_buff_put:
  9004                           	opt stack 0
  9005                           tosu	equ	0xFFF
  9006                           tosh	equ	0xFFE
  9007                           tosl	equ	0xFFD
  9008                           pclatu	equ	0xFFB
  9009                           pclath	equ	0xFFA
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           intcon	equ	0xFF2
  9017                           intcon2	equ	0xFF1
  9018                           postinc0	equ	0xFEE
  9019                           fsr0h	equ	0xFEA
  9020                           fsr0l	equ	0xFE9
  9021                           wreg	equ	0xFE8
  9022                           fsr1h	equ	0xFE2
  9023                           fsr1l	equ	0xFE1
  9024                           indf2	equ	0xFDF
  9025                           postinc2	equ	0xFDE
  9026                           postdec2	equ	0xFDD
  9027                           plusw2	equ	0xFDB
  9028                           fsr2h	equ	0xFDA
  9029                           fsr2l	equ	0xFD9
  9030                           status	equ	0xFD8
  9031                           
  9032 ;; *************** function i2_UART_buff_modulo_inc *****************
  9033 ;; Defined at:
  9034 ;;		line 106 in file "UART.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;  value           2    0[COMRAM] const unsigned int 
  9037 ;;  modulus         2    2[COMRAM] const unsigned int 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9040 ;; Return value:  Size  Location     Type
  9041 ;;                  2    0[COMRAM] unsigned int 
  9042 ;; Registers used:
  9043 ;;		wreg, status,2, status,0
  9044 ;; Tracked objects:
  9045 ;;		On entry : 0/0
  9046 ;;		On exit  : 0/0
  9047 ;;		Unchanged: 0/0
  9048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9049 ;;      Params:         4       0       0       0       0       0       0
  9050 ;;      Locals:         2       0       0       0       0       0       0
  9051 ;;      Temps:          0       0       0       0       0       0       0
  9052 ;;      Totals:         6       0       0       0       0       0       0
  9053 ;;Total ram usage:        6 bytes
  9054 ;; Hardware stack levels used:    1
  9055 ;; This function calls:
  9056 ;;		Nothing
  9057 ;; This function is called by:
  9058 ;;		i2_UART_buff_put
  9059 ;;		i2_UART_buff_get
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text57
  9064  001CCA                     __ptext57:
  9065                           	opt stack 0
  9066  001CCA                     i2_UART_buff_modulo_inc:
  9067                           	opt stack 21
  9068                           
  9069                           ;UART.c: 107: unsigned int my_value = value + 1;
  9070                           
  9071                           ;incstack = 0
  9072  001CCA  0E01               	movlw	1
  9073  001CCC  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9074  001CCE  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9075  001CD0  0E00               	movlw	0
  9076  001CD2  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9077  001CD4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9078                           
  9079                           ;UART.c: 108: if (my_value >= modulus) {
  9080  001CD6  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9081  001CD8  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9082  001CDA  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9083  001CDC  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9084  001CDE  A0D8               	btfss	status,0,c
  9085  001CE0  D004               	goto	i2l3006
  9086                           
  9087                           ;UART.c: 109: my_value = 0;
  9088  001CE2  0E00               	movlw	0
  9089  001CE4  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9090  001CE6  0E00               	movlw	0
  9091  001CE8  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9092  001CEA                     i2l3006:
  9093                           
  9094                           ;UART.c: 110: }
  9095                           ;UART.c: 111: return (my_value);
  9096  001CEA  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9097  001CEE  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9098  001CF2  0012               	return	
  9099  001CF4                     __end_ofi2_UART_buff_modulo_inc:
  9100                           	opt stack 0
  9101                           tosu	equ	0xFFF
  9102                           tosh	equ	0xFFE
  9103                           tosl	equ	0xFFD
  9104                           pclatu	equ	0xFFB
  9105                           pclath	equ	0xFFA
  9106                           tblptru	equ	0xFF8
  9107                           tblptrh	equ	0xFF7
  9108                           tblptrl	equ	0xFF6
  9109                           tablat	equ	0xFF5
  9110                           prodh	equ	0xFF4
  9111                           prodl	equ	0xFF3
  9112                           intcon	equ	0xFF2
  9113                           intcon2	equ	0xFF1
  9114                           postinc0	equ	0xFEE
  9115                           fsr0h	equ	0xFEA
  9116                           fsr0l	equ	0xFE9
  9117                           wreg	equ	0xFE8
  9118                           fsr1h	equ	0xFE2
  9119                           fsr1l	equ	0xFE1
  9120                           indf2	equ	0xFDF
  9121                           postinc2	equ	0xFDE
  9122                           postdec2	equ	0xFDD
  9123                           plusw2	equ	0xFDB
  9124                           fsr2h	equ	0xFDA
  9125                           fsr2l	equ	0xFD9
  9126                           status	equ	0xFD8
  9127                           
  9128 ;; *************** function _ADC_ISR *****************
  9129 ;; Defined at:
  9130 ;;		line 128 in file "mcc_generated_files/adc.c"
  9131 ;; Parameters:    Size  Location     Type
  9132 ;;		None
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;		None               void
  9137 ;; Registers used:
  9138 ;;		None
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9144 ;;      Params:         0       0       0       0       0       0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0
  9147 ;;      Totals:         0       0       0       0       0       0       0
  9148 ;;Total ram usage:        0 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; This function calls:
  9151 ;;		Nothing
  9152 ;; This function is called by:
  9153 ;;		_INTERRUPT_InterruptManager
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text58
  9158  001E82                     __ptext58:
  9159                           	opt stack 0
  9160  001E82                     _ADC_ISR:
  9161                           	opt stack 23
  9162                           
  9163                           ;adc.c: 131: PIR1bits.ADIF = 0;
  9164                           
  9165                           ;incstack = 0
  9166  001E82  9C9E               	bcf	3998,6,c	;volatile
  9167  001E84  0012               	return		;funcret
  9168  001E86                     __end_of_ADC_ISR:
  9169                           	opt stack 0
  9170  0000                     tosu	equ	0xFFF
  9171                           tosh	equ	0xFFE
  9172                           tosl	equ	0xFFD
  9173                           pclatu	equ	0xFFB
  9174                           pclath	equ	0xFFA
  9175                           tblptru	equ	0xFF8
  9176                           tblptrh	equ	0xFF7
  9177                           tblptrl	equ	0xFF6
  9178                           tablat	equ	0xFF5
  9179                           prodh	equ	0xFF4
  9180                           prodl	equ	0xFF3
  9181                           intcon	equ	0xFF2
  9182                           intcon2	equ	0xFF1
  9183                           postinc0	equ	0xFEE
  9184                           fsr0h	equ	0xFEA
  9185                           fsr0l	equ	0xFE9
  9186                           wreg	equ	0xFE8
  9187                           fsr1h	equ	0xFE2
  9188                           fsr1l	equ	0xFE1
  9189                           indf2	equ	0xFDF
  9190                           postinc2	equ	0xFDE
  9191                           postdec2	equ	0xFDD
  9192                           plusw2	equ	0xFDB
  9193                           fsr2h	equ	0xFDA
  9194                           fsr2l	equ	0xFD9
  9195                           status	equ	0xFD8
  9196                           tosu	equ	0xFFF
  9197                           tosh	equ	0xFFE
  9198                           tosl	equ	0xFFD
  9199                           pclatu	equ	0xFFB
  9200                           pclath	equ	0xFFA
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           intcon2	equ	0xFF1
  9209                           postinc0	equ	0xFEE
  9210                           fsr0h	equ	0xFEA
  9211                           fsr0l	equ	0xFE9
  9212                           wreg	equ	0xFE8
  9213                           fsr1h	equ	0xFE2
  9214                           fsr1l	equ	0xFE1
  9215                           indf2	equ	0xFDF
  9216                           postinc2	equ	0xFDE
  9217                           postdec2	equ	0xFDD
  9218                           plusw2	equ	0xFDB
  9219                           fsr2h	equ	0xFDA
  9220                           fsr2l	equ	0xFD9
  9221                           status	equ	0xFD8
  9222                           
  9223                           	psect	text59
  9224  000000                     __ptext59:
  9225                           	opt stack 0
  9226                           tosu	equ	0xFFF
  9227                           tosh	equ	0xFFE
  9228                           tosl	equ	0xFFD
  9229                           pclatu	equ	0xFFB
  9230                           pclath	equ	0xFFA
  9231                           tblptru	equ	0xFF8
  9232                           tblptrh	equ	0xFF7
  9233                           tblptrl	equ	0xFF6
  9234                           tablat	equ	0xFF5
  9235                           prodh	equ	0xFF4
  9236                           prodl	equ	0xFF3
  9237                           intcon	equ	0xFF2
  9238                           intcon2	equ	0xFF1
  9239                           postinc0	equ	0xFEE
  9240                           fsr0h	equ	0xFEA
  9241                           fsr0l	equ	0xFE9
  9242                           wreg	equ	0xFE8
  9243                           fsr1h	equ	0xFE2
  9244                           fsr1l	equ	0xFE1
  9245                           indf2	equ	0xFDF
  9246                           postinc2	equ	0xFDE
  9247                           postdec2	equ	0xFDD
  9248                           plusw2	equ	0xFDB
  9249                           fsr2h	equ	0xFDA
  9250                           fsr2l	equ	0xFD9
  9251                           status	equ	0xFD8
  9252                           
  9253                           	psect	rparam
  9254  0000                     tosu	equ	0xFFF
  9255                           tosh	equ	0xFFE
  9256                           tosl	equ	0xFFD
  9257                           pclatu	equ	0xFFB
  9258                           pclath	equ	0xFFA
  9259                           tblptru	equ	0xFF8
  9260                           tblptrh	equ	0xFF7
  9261                           tblptrl	equ	0xFF6
  9262                           tablat	equ	0xFF5
  9263                           prodh	equ	0xFF4
  9264                           prodl	equ	0xFF3
  9265                           intcon	equ	0xFF2
  9266                           intcon2	equ	0xFF1
  9267                           postinc0	equ	0xFEE
  9268                           fsr0h	equ	0xFEA
  9269                           fsr0l	equ	0xFE9
  9270                           wreg	equ	0xFE8
  9271                           fsr1h	equ	0xFE2
  9272                           fsr1l	equ	0xFE1
  9273                           indf2	equ	0xFDF
  9274                           postinc2	equ	0xFDE
  9275                           postdec2	equ	0xFDD
  9276                           plusw2	equ	0xFDB
  9277                           fsr2h	equ	0xFDA
  9278                           fsr2l	equ	0xFD9
  9279                           status	equ	0xFD8
  9280                           
  9281                           	psect	temp
  9282  000045                     btemp:
  9283                           	opt stack 0
  9284  000045                     	ds	1
  9285  0000                     int$flags	set	btemp
  9286                           tosu	equ	0xFFF
  9287                           tosh	equ	0xFFE
  9288                           tosl	equ	0xFFD
  9289                           pclatu	equ	0xFFB
  9290                           pclath	equ	0xFFA
  9291                           tblptru	equ	0xFF8
  9292                           tblptrh	equ	0xFF7
  9293                           tblptrl	equ	0xFF6
  9294                           tablat	equ	0xFF5
  9295                           prodh	equ	0xFF4
  9296                           prodl	equ	0xFF3
  9297                           intcon	equ	0xFF2
  9298                           intcon2	equ	0xFF1
  9299                           postinc0	equ	0xFEE
  9300                           fsr0h	equ	0xFEA
  9301                           fsr0l	equ	0xFE9
  9302                           wreg	equ	0xFE8
  9303                           fsr1h	equ	0xFE2
  9304                           fsr1l	equ	0xFE1
  9305                           indf2	equ	0xFDF
  9306                           postinc2	equ	0xFDE
  9307                           postdec2	equ	0xFDD
  9308                           plusw2	equ	0xFDB
  9309                           fsr2h	equ	0xFDA
  9310                           fsr2l	equ	0xFD9
  9311                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1009
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     140
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1247(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _StartUp595->_Clear595
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStart->_PotClear
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _SYSTEM_Initialize->_begin
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   45199
                       _CoolingStart
                         _PDUStartup
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   27985
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8909
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2    8361
                                              4 BANK0      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR2_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   11415
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    1621
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3174
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1720
                                             35 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    1621
                                              0 BANK0      4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    6508
                                             36 COMRAM     1     1      0
                                              0 BANK0      2     0      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    4674
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     112
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    3492
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (2) _PotSetpoint                                         10     8      2    1862
                                             35 COMRAM     2     0      2
                                              0 BANK0      8     8      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1522
                                             35 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1454
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _PWM4_LoadDutyValue                                   4     2      2     108
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      8C       4       87.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     432       9        0.0%
DATA                 0      0     432      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri May 27 22:47:35 2016

      __end_of_FastTransfer_buffer_flush 17EE                   i2_UART_buff_modulo_inc 1CCA  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                         ??_CoolingStart 0026                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l325 1408  
                                    l513 0A22                                      l810 0BEE  
                                    l708 1564                                      l813 0C52  
                                    l655 15BE                                      l399 1AAA  
                                    l657 15CA                                      l818 1466  
                                    l819 14A0                             __CFG_CPB$OFF 000000  
                                    _PR2 000FBB                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0038                          __end_of_ADC_ISR 1E86  
   FastTransfer_buffer_flush@clearBuffer 00D3                          _TMR2_Initialize 1E1C  
                        _PWM4_Initialize 1D90                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4000 03F8                                     l4002 040C  
                                   l4100 13A8                                     l4020 04E0  
                                   l3302 10E8                                     l4102 13B8  
                                   l4030 0596                                     l4022 04FA  
                                   l4112 13F8                                     l4024 0514  
                                   l4016 04AC                                     l4032 05B2  
                                   l4106 13D0                                     l4026 052E  
                                   l4018 04C6                                     l4042 05BE  
                                   l4108 13E0                                     l4060 0670  
                                   l4028 0548                                     l4070 0726  
                                   l4062 068A                                     l3600 1CC0  
                                   l4064 06A4                                     l4056 063C  
                                   l4072 0742                                     l4080 074E  
                                   l4224 1B78                                     l3610 1AEE  
                                   l4170 0B86                                     l4090 1368  
                                   l4066 06BE                                     l4058 0656  
                                   l4172 0B94                                     l3292 10BE  
                                   l4068 06D8                                     l3606 1AD4  
                                   l4174 0B9C                                     l3622 1C54  
                                   l4094 1380                                     l3630 0CD0  
                                   l3296 10CE                                     l3800 1034  
                                   l4096 1390                                     l4088 1358  
                                   l3616 1C96                                     l4352 1DBC  
                                   l3802 1052                                     l3626 1C64  
                                   l3650 1560                                     l3730 0F8C  
                                   l3714 0EEE                                     l4188 0C32  
                                   l3804 1070                                     l3660 1A7E  
                                   l3636 0D3C                                     l3820 0A70  
                                   l4198 0C84                                     l3750 157C  
                                   l3718 0EF8                                     l3830 0AF8  
                                   l3822 0A8C                                     l3808 108E  
                                   l3832 0AFE                                     l3824 0AA6  
                                   l3666 1A94                                     l3674 1AB0  
                                   l3746 12FA                                     l3738 1274  
                                   l3842 08C6                                     l3826 0AC2  
                                   l3818 0A56                                     l2980 16CE  
                                   l2972 16B0                                     l3676 1AB6  
                                   l3852 0988                                     l3844 08EE  
                                   l3924 00D4                                     l3932 0106  
                                   l3836 0B3A                                     l3828 0ACE  
                                   l3758 15B2                                     l2990 16EE  
                                   l2982 16D2                                     l2966 16A0  
                                   l3870 0A12                                     l3856 099E  
                                   l3944 01AA                                     l3928 0102  
                                   l3696 077A                     receiveData@crcHolder 00E6  
                                   l3794 0FDA                                     l2978 16C6  
                                   l2994 16F8                                     l3866 09F2  
                                   l3874 0A1A                                     l3962 020E  
                                   l3946 01C2                                     l3796 0FF8  
                                   l3964 0234                                     l3980 0294  
                                   l3948 01C8                                     l3956 0202  
                                   l3798 1016                                     l3878 1BBC  
                                   l2998 1706                                     l3888 1BE2  
                                   l3992 0358                                     l3984 02BC  
                                   l3976 0262                                     l3998 03F2  
                                   _CRC8 1A78                                     u3020 1254  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u4000 1B64  
                                   _LATD 000F8C                                     u3041 0778  
                                   _LATE 000F8D                                     u3208 0AD2  
                                   u3228 0B22                                     u3238 08CA  
                                   u3158 0A40                                     u3239 08DE  
                                   u3168 0A5A                                     u4137 1ADA  
                                   u3258 08F2                                     u3418 00DE  
                                   u3178 0A74                                     u3259 0906  
                                   u3419 00F2                                     u3268 090E  
                                   u3188 0A90                                     u3269 0922  
                                   u3278 092A                                     u3518 01AE  
                                   u3438 010A                                     u3198 0AAA  
                                   u3279 093E                                     u3631 02FC  
                                   u3439 011E                                     u3288 0946  
                                   u3608 0298                                     u3289 095A  
                                   u3609 02AC                                     u3458 0128  
                                   u3459 013C                                     u3708 04CA  
                                   u3718 04E4                                     u3558 0212  
                                   u3478 0146                                     u3398 00AE  
                                   u3559 0226                                     u3479 015A  
                                   u3399 00C2                                     u3808 065A  
                                   u3728 04FE                                     u3488 0160  
                                   u3489 0174                                     u3930 14A0  
                                   u3818 0674                                     u3738 0518  
                                   u3578 0238                                     u3498 017A  
                                   u3579 024C                                     u3499 018E  
                                   u3940 0B7E                                     u2980 14F4  
                                   u3828 068E                                     u3748 0532  
                                   u3838 06A8                                     u3758 054C  
                                   u3598 0266                                     u3599 027A  
                                   u3848 06C2                                     u3768 059A  
                                   u3688 0496                                     u3858 06DC  
                                   u3698 04B0                                     u3868 072A  
                                   u3788 0626                                     u3798 0640  
                                   i2l63 004E                                     i2l65 005A  
                                   i2l69 0064                                     _TMR1 000FCE  
                                   _TMR2 000FBC                                     _WPUB 000F61  
                                   _data 0084                                     _main 1DAA  
               __end_of_EnableSlavePower 10B6                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08C6  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                         __end_of_CRCcheck 0A24  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1E6E  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 1710                                    _EEADR 000FA9  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                                  _T2CON 000FBA                                    _LATB0 007C50  
                                  _LATA3 007C4B                                    _LATB3 007C53  
                                  _LATB4 007C54                                    _LATB5 007C55  
                                  _LATD4 007C64                                    _LATD5 007C65  
                                  _LATD6 007C66                                    _LATD7 007C67  
                         __CFG_DEBUG$OFF 000000                              ?_PDUStartup 0001  
                                  i2l708 1688                                    i2l739 1D7A  
                        ___awdiv@counter 001F                       _PWM4_LoadDutyValue 1B7E  
                                  _TMR1H 000FCF                                    _TMR1L 000FCE  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 1AC2  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1BE8                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       ??_writeRegisters 0024                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _begin 197C                          _DATAEE_ReadByte 1E30  
                         __CFG_EBTRB$OFF 000000                                    _group 0026  
                    ?_PWM4_LoadDutyValue 001B                       __CFG_MCLRE$EXTMCLR 000000  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                           begin@stuffpeek 00DC  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                       __end_of_Clear595 1BE8                           __CFG_HFOFST$ON 000000  
                        _TMR2_StartTimer 1E7E                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                     PotSetpoint@new_point 0024  
                           __end_of_CRC8 1AC2                          CRCcheck@SentCRC 00D3  
                        __initialization 17EE               __end_of_EUSART1_Initialize 1B48  
                           __end_of_main 1DC2                               _CurrentADC 006C  
                   ??_PWM4_LoadDutyValue 001D                               ToSend@what 00D3  
                                 ??_CRC8 001E                  __end_of_PWM4_Initialize 1DAA  
                __end_of_TMR2_Initialize 1E30                                ??_ADC_ISR 0001  
            ?_INTERRUPT_InterruptManager 0001                     PotSetpoint@set_point 00D3  
                                 ??_main 0026                         __end_of_PotClear 14D6  
                          __activetblptr 000002                         __end_of_Send_put 1C4A  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00D1  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _CCPR4H 000F59                                   _CCPR4L 000F58  
                                 _EECON2 000FA7                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                        i2_UART_buff_get 15FA                                   _RC1STA 000FAB  
                                 i2l3006 1CEA                          i2_UART_buff_put 0DCA  
                                 Delay@i 0020                           __CFG_WDTEN$OFF 000000  
                                 i2l3370 0DEA                                   i2l3418 1C12  
                                 i2l3390 1684                                   i2l3376 0E56  
            UART_buff_modulo_inc@modulus 001D                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
            __end_of_processPowerRequest 140E                                   _SPBRG1 000FAF  
                   __end_of_CoolingStart 1D72                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                      __size_of_PDUStartup 005E  
                         __CFG_XINST$OFF 000000                                   _ToSend 1D18  
                          ??_PotSetpoint 00D1                      __end_of_Receive_get 1E60  
                       crcBufS_get@_this 001B                             _CCPTMRS1bits 000F48  
            ??_FastTransfer_buffer_flush 0023                                   _Update 1E78  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                       crcBufS_get@space 001E                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                                 _memset 1C4A                                   clear_0 17F4  
                                 clear_1 1800                                   clear_2 180C  
                                 clear_3 1818                                   clear_4 1824  
                                 clear_5 1830                         ___awdiv@quotient 0021  
                                 _rx_len 0043                         __end_of_sendData 0B6E  
                __end_of_DATAEE_ReadByte 1E44                             __pdataCOMRAM 0044  
                          Send_put@_data 00D1                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                             _StartUp595 18BC             __end_of_UART_buff_modulo_inc 1CCA  
                __end_of_TMR2_StartTimer 1E82            __size_of_INTERRUPT_Initialize 000A  
                      _SYSTEM_Initialize 1710                               __accesstop 0060  
                __end_of__initialization 1848                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 1B0C                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 126A                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 19D6  
 __end_of_FastTransfer_buffer_modulo_inc 1CA0  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1C76                         ?_TMR2_Initialize 0001  
                       ?_PWM4_Initialize 0001             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 00D5                      __end_of_PotSetpoint 0CB0  
            __size_of_ComputeStorageData 00DC              PWM4_LoadDutyValue@dutyValue 001B  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                            _Currentcomp 0078                    __end_of_UART_buff_get 1568  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 0DCA  
                              ?_Clear595 0001                                  ??_Delay 001F  
                __end_ofi2_UART_buff_get 168C                  __end_ofi2_UART_buff_put 0EE4  
            __end_of_EUSART1_Receive_ISR 1D90                _FastTransfer_buffer_flush 1782  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                                  ??_begin 0023  
                      __end_of_SetPin595 1A78                __end_of_SYSTEM_Initialize 1782  
                 receiveData@holder_1247 00E3                      _addressErrorCounter 0090  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 1E52                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 1CF4  
                      begin@givenAddress 00D4                        ?_EnableSlavePower 00D1  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                ?_PotClear 0001  
                              ?_Send_put 0001                       ??_EnableSlavePower 0025  
                   __size_of_receiveData 06AE                                  ?_ToSend 00D3  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Update 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                _CCP4CON 000F57                                  _ADC_ISR 1E82  
                                ?_memset 001B                               _crc_buffer 00C0  
                __size_of_ADC_Initialize 0018                         ?_DATAEE_ReadByte 0001  
                           ??_PDUStartup 0026                       UART_buff_put@_this 0021  
                             ??_Clear595 0024                         i2_UART_buff_size 1E06  
            i2UART_buff_modulo_inc@value 0001                                  _OSCCON2 000FD2  
                                _TBLPTRH 000FF7                                  _TBLPTRL 000FF6  
                                _TBLPTRU 000FF8                              ?_StartUp595 0001  
                      _Receive_available 1DDA             UART_buff_modulo_inc@my_value 001F  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                      sendData@whereToSend 00D6  
                    _receiveArrayAddress 002C                    __size_of_CoolingStart 001E  
                       ?_TMR2_StartTimer 0001                       ?_Receive_available 001D  
                             begin@error 00D5                      ??_Receive_available 001F  
                              ?_sendData 0001                                  _Current 0060  
                      _alignErrorCounter 0092                          __CFG_PWRTEN$OFF 000000  
                             ??_PotClear 0024                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                     __end_of_PDUStartup 197C                          __size_of_ToSend 001E  
                   __end_of_Receive_peek 1E52                              _PotSetpoint 0B6E  
                              _AKNAKsend 003C                          __size_of_Update 0006  
                                ___awdiv 168C                     _UART_buff_modulo_inc 1CA0  
                                _calc_CS 003D                                  __pcinit 17EE  
                        __size_of_memset 002C                                  __ramtop 0600  
                       i2UART_buff_get@c 000B                                  __ptext0 1DAA  
                                __ptext1 1B48                                  __ptext2 19D6  
                                __ptext3 0A24                                  __ptext4 1192  
                                __ptext5 1782                                  __ptext6 1D18  
                                __ptext7 0752                                  __ptext8 1C76  
                                __ptext9 00A4                             _CoolingStart 1D54  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 1E60                __end_of_Receive_available 1DF0  
                              _T2CONbits 000FBA                  _FastTransfer_buffer_put 0752  
                  CRCcheck@calculatedCRC 00D4                       _EUSART1_Initialize 1B0C  
                       ?i2_UART_buff_get 0007                 ??_PIN_MANAGER_Initialize 001B  
                              Clear595@i 0024                         ?i2_UART_buff_put 0007  
           crcBufS_status_put@wantedTime 0023                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0072  
                   end_of_initialization 1848                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 0000                               ??_sendData 00D5  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0036  
                                postdec2 000FDD                      __size_of_StartUp595 0062  
                                postinc0 000FEE                                  postinc2 000FDE  
                             _respondECU 19D6              __size_of_PWM4_LoadDutyValue 0036  
                       begin@stufftosend 00D6                      CRCcheck@arrayHolder 00D5  
                           SetPin595@Reg 001B                     ??_EUSART1_Initialize 0025  
                           SetPin595@pin 001D                   _dataAdressErrorCounter 0096  
                             _rx_address 0041                                _TRISCbits 000F94  
                           begin@maxSize 00D3       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1D36  
                         _UART_buff_peek 1CF4                           _UART_buff_size 1DF0  
                    __end_of_crcBufS_get 0FD6                  __size_of_writeRegisters 0092  
                    __end_of_crcBufS_put 126A                        __size_of_CRCcheck 015E  
                          _moduleAddress 003F                               CRCcheck@rt 00D8  
           __size_of_processPowerRequest 00CE                           __end_of_ToSend 1D36  
           __end_of_INTERRUPT_Initialize 1E78                           __end_of_Update 1E7E  
                        _crcErrorCounter 0094                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1E86                           _ADC_Initialize 1DC2  
              ??_FastTransfer_buffer_put 00D1                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 1C76                        crcBufS_put@status 001F  
                           receiveData@r 00EA               __size_of_Receive_available 0016  
                           receiveData@u 00E8                      start_initialization 17EE  
        __size_of_PIN_MANAGER_Initialize 0066                    crcBufS_get@wantedTime 00D1  
                  EnableSlavePower@slave 0025                        __size_of_Clear595 0034  
                              PotClear@x 0024                   __end_of_UART_buff_init 1D54  
                 __end_of_UART_buff_peek 1D18                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 1E06                             ?_Receive_get 0001  
                              _SetPin595 1A2A                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 000E                      DATAEE_ReadByte@bAdd 001B  
               __end_ofi2_UART_buff_size 1E1C                                 ??_ToSend 0026  
                 ??_UART_buff_modulo_inc 001F                                 CRC8@data 001B  
                               ??_Update 0024                          crcBufS_get@time 001D  
                      __size_of_PotClear 00C8                        __size_of_Send_put 0030  
                            ?_respondECU 0001                   __end_of_ADC_Initialize 1DDA  
             __end_of_ComputeStorageData 1192                                 ?_ADC_ISR 0001  
                               ??_memset 0021                __size_of_EnableSlavePower 00E0  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00D1                             ??_StartUp595 0026  
               __size_of_PWM4_Initialize 001A                 __size_of_TMR2_Initialize 0014  
                           _Receive_peek 1E44                      UART_buff_init@_this 0023  
                            _crcBufS_get 0EE4                      UART_buff_peek@_this 001B  
                            _crcBufS_put 1192                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                               ?_SetPin595 001B  
                          ??_receiveData 00DA              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00D7                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                   _PIN_MANAGER_Initialize 1856  
                      __size_of_sendData 014A                             ?_PotSetpoint 0024  
                              __pintcode 0008                                 ?___awdiv 001B  
                     __end_of_StartUp595 191E                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                           __size_of_Delay 004A  
                         __size_of_begin 005A                 __size_of_DATAEE_ReadByte 0014  
                    __size_of_respondECU 0054                     _INTERRUPT_Initialize 1E6E  
                           _receiveArray 0098              processPowerRequest@powerSet 00D5  
                               _CRCcheck 08C6                                 _LATCbits 000F8B  
                         _writeRegisters 1568                      UART_buff_size@_this 001B  
                              _registers 0100                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                 __size_of_TMR2_StartTimer 0004  
    __size_of_INTERRUPT_InterruptManager 0098                                 i2u272_40 1C02  
                               _PIR1bits 000F9E                                 i2u269_40 1618  
                    begin@stuffavailable 00DA                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0752  
         FastTransfer_buffer_flush@_this 00D1                             PotSetpoint@x 00D5  
                           _input_buffer 0300                                _rx_buffer 0200  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                   i2UART_buff_put@_this 0007                                 _Clear595 1BB4  
                          _UART_buff_get 14D6                            _UART_buff_put 0CB0  
                    _processPowerRequest 1340                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002E                   __end_of_writeRegisters 15FA  
                     PotSetpoint@new_pos 00D7                              ??_SetPin595 0021  
                   EnableSlavePower@onof 00D1                 __size_ofi2_UART_buff_get 0092  
                      ??_TMR2_Initialize 001B                        ??_PWM4_Initialize 001B  
               __size_ofi2_UART_buff_put 011A                               _EECON1bits 000FA6  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               _PotClear 140E                                 __Hrparam 0000  
                               _Send_put 1C1A               __end_of_PWM4_LoadDutyValue 1BB4  
                               __Lrparam 0000                     ?_processPowerRequest 00D5  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00D8  
                       _EnableSlavePower 0FD6                               _ANSELCbits 000F3A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 00D8  
               crcBufS_status_put@status 001E                                 __ptext10 1C1A  
                               __ptext11 0CB0                                 __ptext20 1DDA  
                               __ptext12 1E44                                 __ptext21 1DF0  
                               __ptext13 1CF4                               _T1GCONbits 000FCC  
                               __ptext30 1856                                 __ptext22 1A78  
                               __ptext14 08C6                                 __ptext31 1E60  
                               __ptext23 1340                                 __ptext15 126A  
                               __ptext40 1BB4                                 __ptext32 1E6E  
                               __ptext24 1710                                 __ptext16 0EE4  
                               __ptext41 1568                                 __ptext33 1B0C  
                               __ptext25 197C                                 __ptext17 1E52  
                               __ptext50 1B7E                                 __ptext42 0FD6  
                               __ptext34 1D36                                 __ptext26 168C  
                               __ptext18 14D6                                 __ptext43 1A2A  
                               __ptext35 1C4A                                 __ptext27 1E1C  
                               __ptext19 1CA0                                 __ptext52 1BE8  
                               __ptext44 10B6                                 __ptext36 1DC2  
                               __ptext28 1E7E                                 __ptext53 1E06  
                               __ptext45 1E30                                 __ptext37 191E  
                               __ptext29 1D90                                 __ptext54 15FA  
                               __ptext46 1D54                                 __ptext38 1E78  
                               __ptext55 1D72                                 __ptext47 0B6E  
                               __ptext39 18BC                                 __ptext56 0DCA  
                               __ptext48 140E                                 __ptext57 1CCA  
                               __ptext49 1AC2                                 __ptext58 1E82  
                               __ptext59 0000                            __size_of_CRC8 004A  
                               begin@ptr 00D1                  EUSART1_Receive_ISR@data 000C  
                        ?_writeRegisters 0001                            _returnAddress 0040  
                          __size_of_main 0018                              _receiveData 00A4  
                               _readwhat 002A                           _Transmit_stall 0044  
                               _sendData 0A24                        ??_DATAEE_ReadByte 001B  
                      ?i2_UART_buff_size 0001                    ??_processPowerRequest 0026  
                             _RC1STAbits 000FAB                                 _prev_pos 0028  
                           ??_respondECU 0026                       ??i2_UART_buff_size 0003  
                      writeRegisters@val 00D1                                 int$flags 0045  
                           _serial_write 0036                        ??_TMR2_StartTimer 001B  
                    __end_of_updateComms 1B7E       __end_of_INTERRUPT_InterruptManager 00A0  
             _INTERRUPT_InterruptManager 0008                     __size_of_PotSetpoint 0142  
                    _EUSART1_Receive_ISR 1D72                        receiveData@holder 00E0  
                             _INTCONbits 000FF2                      ComputeStorageData@i 001E  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                     _ComputeStorageData 10B6                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 1A2A  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 001F  
           __end_of_EUSART1_Transmit_ISR 1C1A                              _ring_buffer 0130  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 00D1  
                      ??i2_UART_buff_get 0009                              _serial_peek 0032  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
                   ??_ComputeStorageData 001C                            ?_CoolingStart 0001  
  FastTransfer_buffer_modulo_inc@modulus 001D                               _PDUStartup 191E  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1248 00E7  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003E  
                        writeRegisters@i 00D3               __end_of_crcBufS_status_put 1340  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 18BC  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
          updateComms@previousPowerState 003A                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1B48  
