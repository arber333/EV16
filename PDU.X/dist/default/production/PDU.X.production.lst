

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Fri Jun 10 02:28:20 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           	psect	idataCOMRAM
    81  001E32                     __pidataCOMRAM:
    82                           	opt stack 0
    83                           
    84                           ;initializer for _Transmit_stall
    85  001E32  01                 	db	1
    86  0000                     _ANSELA	set	3896
    87  0000                     _ANSELB	set	3897
    88  0000                     _ANSELC	set	3898
    89  0000                     _ANSELCbits	set	3898
    90  0000                     _ANSELD	set	3899
    91  0000                     _ANSELE	set	3900
    92  0000                     _CCP4CON	set	3927
    93  0000                     _CCPR4H	set	3929
    94  0000                     _CCPR4L	set	3928
    95  0000                     _CCPTMRS1bits	set	3912
    96  0000                     _ANSB3	set	31179
    97  0000                     _ANSB4	set	31180
    98  0000                     _ANSD7	set	31199
    99  0000                     _TMR1	set	4046
   100  0000                     _ADCON0	set	4034
   101  0000                     _ADCON0bits	set	4034
   102  0000                     _ADCON1	set	4033
   103  0000                     _ADCON2	set	4032
   104  0000                     _ADRESH	set	4036
   105  0000                     _ADRESL	set	4035
   106  0000                     _BAUD1CON	set	4024
   107  0000                     _EEADR	set	4009
   108  0000                     _EECON1bits	set	4006
   109  0000                     _EECON2	set	4007
   110  0000                     _EEDATA	set	4008
   111  0000                     _INTCON2bits	set	4081
   112  0000                     _INTCONbits	set	4082
   113  0000                     _IPR1bits	set	3999
   114  0000                     _LATA	set	3977
   115  0000                     _LATB	set	3978
   116  0000                     _LATC	set	3979
   117  0000                     _LATCbits	set	3979
   118  0000                     _LATD	set	3980
   119  0000                     _LATE	set	3981
   120  0000                     _OSCCON	set	4051
   121  0000                     _OSCCON2	set	4050
   122  0000                     _OSCTUNE	set	3995
   123  0000                     _PIE1bits	set	3997
   124  0000                     _PIR1bits	set	3998
   125  0000                     _PR2	set	4027
   126  0000                     _RC1STA	set	4011
   127  0000                     _RC1STAbits	set	4011
   128  0000                     _RCONbits	set	4048
   129  0000                     _RCREG1	set	4014
   130  0000                     _SPBRG1	set	4015
   131  0000                     _SPBRGH1	set	4016
   132  0000                     _T1CON	set	4045
   133  0000                     _T1CONbits	set	4045
   134  0000                     _T1GCON	set	4044
   135  0000                     _T1GCONbits	set	4044
   136  0000                     _T2CON	set	4026
   137  0000                     _T2CONbits	set	4026
   138  0000                     _TABLAT	set	4085
   139  0000                     _TBLPTRH	set	4087
   140  0000                     _TBLPTRL	set	4086
   141  0000                     _TBLPTRU	set	4088
   142  0000                     _TMR1H	set	4047
   143  0000                     _TMR1L	set	4046
   144  0000                     _TMR2	set	4028
   145  0000                     _TRISA	set	3986
   146  0000                     _TRISB	set	3987
   147  0000                     _TRISC	set	3988
   148  0000                     _TRISCbits	set	3988
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISDbits	set	3989
   151  0000                     _TRISE	set	3990
   152  0000                     _TX1STA	set	4012
   153  0000                     _TXREG1	set	4013
   154  0000                     _WPUB	set	3937
   155  0000                     _LATA3	set	31819
   156  0000                     _LATB0	set	31824
   157  0000                     _LATB3	set	31827
   158  0000                     _LATB4	set	31828
   159  0000                     _LATB5	set	31829
   160  0000                     _LATD4	set	31844
   161  0000                     _LATD5	set	31845
   162  0000                     _LATD6	set	31846
   163  0000                     _LATD7	set	31847
   164  0000                     _TRISB3	set	31899
   165  0000                     _TRISB4	set	31900
   166  0000                     _TRISB5	set	31901
   167                           
   168                           ; #config settings
   169  0000                     
   170                           	psect	cinit
   171  00176C                     __pcinit:
   172                           	opt stack 0
   173  00176C                     start_initialization:
   174                           	opt stack 0
   175  00176C                     __initialization:
   176                           	opt stack 0
   177                           
   178                           ; Clear objects allocated to BANK4 (206 bytes)
   179  00176C  EE04  F000         	lfsr	0,__pbssBANK4
   180  001770  0ECE               	movlw	206
   181  001772                     clear_0:
   182  001772  6AEE               	clrf	postinc0,c
   183  001774  06E8               	decf	wreg,f,c
   184  001776  E1FD               	bnz	clear_0
   185                           
   186                           ; Clear objects allocated to BANK3 (206 bytes)
   187  001778  EE03  F000         	lfsr	0,__pbssBANK3
   188  00177C  0ECE               	movlw	206
   189  00177E                     clear_1:
   190  00177E  6AEE               	clrf	postinc0,c
   191  001780  06E8               	decf	wreg,f,c
   192  001782  E1FD               	bnz	clear_1
   193                           
   194                           ; Clear objects allocated to BANK2 (200 bytes)
   195  001784  EE02  F000         	lfsr	0,__pbssBANK2
   196  001788  0EC8               	movlw	200
   197  00178A                     clear_2:
   198  00178A  6AEE               	clrf	postinc0,c
   199  00178C  06E8               	decf	wreg,f,c
   200  00178E  E1FD               	bnz	clear_2
   201                           
   202                           ; Clear objects allocated to BANK1 (254 bytes)
   203  001790  EE01  F000         	lfsr	0,__pbssBANK1
   204  001794  0EFE               	movlw	254
   205  001796                     clear_3:
   206  001796  6AEE               	clrf	postinc0,c
   207  001798  06E8               	decf	wreg,f,c
   208  00179A  E1FD               	bnz	clear_3
   209                           
   210                           ; Clear objects allocated to BANK0 (115 bytes)
   211  00179C  EE00  F060         	lfsr	0,__pbssBANK0
   212  0017A0  0E73               	movlw	115
   213  0017A2                     clear_4:
   214  0017A2  6AEE               	clrf	postinc0,c
   215  0017A4  06E8               	decf	wreg,f,c
   216  0017A6  E1FD               	bnz	clear_4
   217                           
   218                           ; Clear objects allocated to COMRAM (28 bytes)
   219  0017A8  EE00  F028         	lfsr	0,__pbssCOMRAM
   220  0017AC  0E1C               	movlw	28
   221  0017AE                     clear_5:
   222  0017AE  6AEE               	clrf	postinc0,c
   223  0017B0  06E8               	decf	wreg,f,c
   224  0017B2  E1FD               	bnz	clear_5
   225                           
   226                           ; Initialize objects allocated to COMRAM (1 bytes)
   227                           ; load TBLPTR registers with __pidataCOMRAM
   228  0017B4  0E32               	movlw	low __pidataCOMRAM
   229  0017B6  6EF6               	movwf	tblptrl,c
   230  0017B8  0E1E               	movlw	high __pidataCOMRAM
   231  0017BA  6EF7               	movwf	tblptrh,c
   232  0017BC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   233  0017BE  6EF8               	movwf	tblptru,c
   234  0017C0  0009               	tblrd		*+	;fetch initializer
   235  0017C2  CFF5 F044          	movff	tablat,__pdataCOMRAM
   236  0017C6                     end_of_initialization:
   237                           	opt stack 0
   238  0017C6                     __end_of__initialization:
   239                           	opt stack 0
   240  0017C6  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   241  0017C8  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   242  0017CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   243  0017CC  6EF8               	movwf	tblptru,c
   244  0017CE  0100               	movlb	0
   245  0017D0  EFF4  F00C         	goto	_main	;jump to C main() function
   246                           tblptru	equ	0xFF8
   247                           tblptrh	equ	0xFF7
   248                           tblptrl	equ	0xFF6
   249                           tablat	equ	0xFF5
   250                           postinc0	equ	0xFEE
   251                           wreg	equ	0xFE8
   252                           
   253                           	psect	bssCOMRAM
   254  000028                     __pbssCOMRAM:
   255                           	opt stack 0
   256  000028                     _group:
   257                           	opt stack 0
   258  000028                     	ds	2
   259  00002A                     _prev_pos:
   260                           	opt stack 0
   261  00002A                     	ds	2
   262  00002C                     _readwhat:
   263                           	opt stack 0
   264  00002C                     	ds	2
   265  00002E                     _sendStructAddress:
   266                           	opt stack 0
   267  00002E                     	ds	2
   268  000030                     _serial_available:
   269                           	opt stack 0
   270  000030                     	ds	2
   271  000032                     _serial_peek:
   272                           	opt stack 0
   273  000032                     	ds	2
   274  000034                     _serial_read:
   275                           	opt stack 0
   276  000034                     	ds	2
   277  000036                     _serial_write:
   278                           	opt stack 0
   279  000036                     	ds	2
   280  000038                     _timer1ReloadVal:
   281                           	opt stack 0
   282  000038                     	ds	2
   283  00003A                     updateComms@previousPowerState:
   284                           	opt stack 0
   285  00003A                     	ds	2
   286  00003C                     _AKNAKsend:
   287                           	opt stack 0
   288  00003C                     	ds	1
   289  00003D                     _calc_CS:
   290                           	opt stack 0
   291  00003D                     	ds	1
   292  00003E                     _maxDataAddress:
   293                           	opt stack 0
   294  00003E                     	ds	1
   295  00003F                     _moduleAddress:
   296                           	opt stack 0
   297  00003F                     	ds	1
   298  000040                     _returnAddress:
   299                           	opt stack 0
   300  000040                     	ds	1
   301  000041                     _rx_address:
   302                           	opt stack 0
   303  000041                     	ds	1
   304  000042                     _rx_array_inx:
   305                           	opt stack 0
   306  000042                     	ds	1
   307  000043                     _rx_len:
   308                           	opt stack 0
   309  000043                     	ds	1
   310                           tblptru	equ	0xFF8
   311                           tblptrh	equ	0xFF7
   312                           tblptrl	equ	0xFF6
   313                           tablat	equ	0xFF5
   314                           postinc0	equ	0xFEE
   315                           wreg	equ	0xFE8
   316                           
   317                           	psect	dataCOMRAM
   318  000044                     __pdataCOMRAM:
   319                           	opt stack 0
   320  000044                     _Transmit_stall:
   321                           	opt stack 0
   322  000044                     	ds	1
   323                           tblptru	equ	0xFF8
   324                           tblptrh	equ	0xFF7
   325                           tblptrl	equ	0xFF6
   326                           tablat	equ	0xFF5
   327                           postinc0	equ	0xFEE
   328                           wreg	equ	0xFE8
   329                           
   330                           	psect	bssBANK0
   331  000060                     __pbssBANK0:
   332                           	opt stack 0
   333  000060                     _Current:
   334                           	opt stack 0
   335  000060                     	ds	12
   336  00006C                     _CurrentADC:
   337                           	opt stack 0
   338  00006C                     	ds	12
   339  000078                     _Currentcomp:
   340                           	opt stack 0
   341  000078                     	ds	12
   342  000084                     _data:
   343                           	opt stack 0
   344  000084                     	ds	12
   345  000090                     _addressErrorCounter:
   346                           	opt stack 0
   347  000090                     	ds	2
   348  000092                     _alignErrorCounter:
   349                           	opt stack 0
   350  000092                     	ds	2
   351  000094                     _crcErrorCounter:
   352                           	opt stack 0
   353  000094                     	ds	2
   354  000096                     _dataAdressErrorCounter:
   355                           	opt stack 0
   356  000096                     	ds	2
   357  000098                     _receiveArrayAddress:
   358                           	opt stack 0
   359  000098                     	ds	2
   360  00009A                     _receiveArray:
   361                           	opt stack 0
   362  00009A                     	ds	40
   363  0000C2                     _crc_buffer:
   364                           	opt stack 0
   365  0000C2                     	ds	17
   366                           tblptru	equ	0xFF8
   367                           tblptrh	equ	0xFF7
   368                           tblptrl	equ	0xFF6
   369                           tablat	equ	0xFF5
   370                           postinc0	equ	0xFEE
   371                           wreg	equ	0xFE8
   372                           
   373                           	psect	bssBANK1
   374  000100                     __pbssBANK1:
   375                           	opt stack 0
   376  000100                     _registers:
   377                           	opt stack 0
   378  000100                     	ds	48
   379  000130                     _ring_buffer:
   380                           	opt stack 0
   381  000130                     	ds	206
   382                           tblptru	equ	0xFF8
   383                           tblptrh	equ	0xFF7
   384                           tblptrl	equ	0xFF6
   385                           tablat	equ	0xFF5
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           
   389                           	psect	bssBANK2
   390  000200                     __pbssBANK2:
   391                           	opt stack 0
   392  000200                     _rx_buffer:
   393                           	opt stack 0
   394  000200                     	ds	200
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           
   402                           	psect	bssBANK3
   403  000300                     __pbssBANK3:
   404                           	opt stack 0
   405  000300                     _input_buffer:
   406                           	opt stack 0
   407  000300                     	ds	206
   408                           tblptru	equ	0xFF8
   409                           tblptrh	equ	0xFF7
   410                           tblptrl	equ	0xFF6
   411                           tablat	equ	0xFF5
   412                           postinc0	equ	0xFEE
   413                           wreg	equ	0xFE8
   414                           
   415                           	psect	bssBANK4
   416  000400                     __pbssBANK4:
   417                           	opt stack 0
   418  000400                     _output_buffer:
   419                           	opt stack 0
   420  000400                     	ds	206
   421                           tblptru	equ	0xFF8
   422                           tblptrh	equ	0xFF7
   423                           tblptrl	equ	0xFF6
   424                           tablat	equ	0xFF5
   425                           postinc0	equ	0xFEE
   426                           wreg	equ	0xFE8
   427                           
   428                           	psect	cstackBANK0
   429  0000D3                     __pcstackBANK0:
   430                           	opt stack 0
   431  0000D3                     sendData@whereToSend:
   432                           	opt stack 0
   433  0000D3                     CRCcheck@SentCRC:
   434                           	opt stack 0
   435  0000D3                     processPowerRequest@powerSet:
   436                           	opt stack 0
   437  0000D3                     begin@ptr:
   438                           	opt stack 0
   439  0000D3                     ToSend@what:
   440                           	opt stack 0
   441  0000D3                     Clear595@i:
   442                           	opt stack 0
   443  0000D3                     PotSetpoint@set_point:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x0
   447  0000D3                     	ds	1
   448  0000D4                     sendData@CS:
   449                           	opt stack 0
   450  0000D4                     CRCcheck@calculatedCRC:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x1
   454  0000D4                     	ds	1
   455  0000D5                     begin@maxSize:
   456                           	opt stack 0
   457  0000D5                     ToSend@where:
   458                           	opt stack 0
   459  0000D5                     sendData@i:
   460                           	opt stack 0
   461  0000D5                     PotSetpoint@x:
   462                           	opt stack 0
   463  0000D5                     CRCcheck@arrayHolder:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0x2
   467  0000D5                     	ds	1
   468  0000D6                     begin@givenAddress:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x3
   472  0000D6                     	ds	1
   473  0000D7                     begin@error:
   474                           	opt stack 0
   475  0000D7                     PotSetpoint@new_pos:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x4
   479  0000D7                     	ds	1
   480  0000D8                     begin@stufftosend:
   481                           	opt stack 0
   482  0000D8                     CRCcheck@rt:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x5
   486  0000D8                     	ds	2
   487  0000DA                     ??_receiveData:
   488  0000DA                     begin@stufftoreceive:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x7
   492  0000DA                     	ds	2
   493  0000DC                     begin@stuffavailable:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x9
   497  0000DC                     	ds	2
   498  0000DE                     begin@stuffpeek:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0xB
   502  0000DE                     	ds	2
   503  0000E0                     receiveData@holder:
   504                           	opt stack 0
   505                           
   506                           ; 3 bytes @ 0xD
   507  0000E0                     	ds	3
   508  0000E3                     receiveData@holder_1395:
   509                           	opt stack 0
   510                           
   511                           ; 3 bytes @ 0x10
   512  0000E3                     	ds	3
   513  0000E6                     receiveData@crcHolder:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x13
   517  0000E6                     	ds	1
   518  0000E7                     receiveData@crcHolder_1396:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x14
   522  0000E7                     	ds	1
   523  0000E8                     receiveData@u:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x15
   527  0000E8                     	ds	2
   528  0000EA                     receiveData@r:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x17
   532  0000EA                     	ds	2
   533  0000EC                     main@i:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x19
   537  0000EC                     	ds	2
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           
   545                           	psect	cstackCOMRAM
   546  000001                     __pcstackCOMRAM:
   547                           	opt stack 0
   548  000001                     ?i2_UART_buff_size:
   549                           	opt stack 0
   550  000001                     ?i2_UART_buff_modulo_inc:
   551                           	opt stack 0
   552  000001                     i2UART_buff_size@_this:
   553                           	opt stack 0
   554  000001                     i2UART_buff_modulo_inc@value:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x0
   558  000001                     	ds	2
   559  000003                     i2UART_buff_modulo_inc@modulus:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x2
   563  000003                     	ds	2
   564  000005                     i2UART_buff_modulo_inc@my_value:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x4
   568  000005                     	ds	2
   569  000007                     i2UART_buff_put@_this:
   570                           	opt stack 0
   571  000007                     i2UART_buff_get@_this:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x6
   575  000007                     	ds	2
   576  000009                     ??i2_UART_buff_get:
   577  000009                     i2UART_buff_put@c:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0x8
   581  000009                     	ds	1
   582  00000A                     ??i2_UART_buff_put:
   583                           
   584                           ; 0 bytes @ 0x9
   585  00000A                     	ds	1
   586  00000B                     i2UART_buff_get@c:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0xA
   590  00000B                     	ds	1
   591  00000C                     EUSART1_Receive_ISR@data:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0xB
   595  00000C                     	ds	1
   596  00000D                     ??_INTERRUPT_InterruptManager:
   597                           
   598                           ; 0 bytes @ 0xC
   599  00000D                     	ds	14
   600  00001B                     ?_FastTransfer_buffer_modulo_inc:
   601                           	opt stack 0
   602  00001B                     ?_UART_buff_modulo_inc:
   603                           	opt stack 0
   604  00001B                     ?_UART_buff_size:
   605                           	opt stack 0
   606  00001B                     ?___awdiv:
   607                           	opt stack 0
   608  00001B                     DATAEE_ReadByte@bAdd:
   609                           	opt stack 0
   610  00001B                     PWM4_LoadDutyValue@dutyValue:
   611                           	opt stack 0
   612  00001B                     CRC8@data:
   613                           	opt stack 0
   614  00001B                     FastTransfer_buffer_modulo_inc@value:
   615                           	opt stack 0
   616  00001B                     crcBufS_put@_this:
   617                           	opt stack 0
   618  00001B                     crcBufS_status_put@_this:
   619                           	opt stack 0
   620  00001B                     crcBufS_get@_this:
   621                           	opt stack 0
   622  00001B                     SetPin595@Reg:
   623                           	opt stack 0
   624  00001B                     UART_buff_size@_this:
   625                           	opt stack 0
   626  00001B                     UART_buff_modulo_inc@value:
   627                           	opt stack 0
   628  00001B                     UART_buff_peek@_this:
   629                           	opt stack 0
   630  00001B                     ___awdiv@dividend:
   631                           	opt stack 0
   632  00001B                     memset@p1:
   633                           	opt stack 0
   634  00001B                     Delay@wait:
   635                           	opt stack 0
   636                           
   637                           ; 4 bytes @ 0x1A
   638  00001B                     	ds	1
   639  00001C                     ??_ComputeStorageData:
   640                           
   641                           ; 0 bytes @ 0x1B
   642  00001C                     	ds	1
   643  00001D                     ??_PWM4_LoadDutyValue:
   644  00001D                     ??_UART_buff_peek:
   645  00001D                     ?_Receive_available:
   646                           	opt stack 0
   647  00001D                     CRC8@len:
   648                           	opt stack 0
   649  00001D                     crcBufS_put@address:
   650                           	opt stack 0
   651  00001D                     crcBufS_status_put@time:
   652                           	opt stack 0
   653  00001D                     crcBufS_get@time:
   654                           	opt stack 0
   655  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   656                           	opt stack 0
   657  00001D                     SetPin595@pin:
   658                           	opt stack 0
   659  00001D                     UART_buff_modulo_inc@modulus:
   660                           	opt stack 0
   661  00001D                     ___awdiv@divisor:
   662                           	opt stack 0
   663  00001D                     memset@c:
   664                           	opt stack 0
   665                           
   666                           ; 2 bytes @ 0x1C
   667  00001D                     	ds	1
   668  00001E                     CRC8@sum:
   669                           	opt stack 0
   670  00001E                     crcBufS_put@oldCRC:
   671                           	opt stack 0
   672  00001E                     crcBufS_status_put@status:
   673                           	opt stack 0
   674  00001E                     crcBufS_get@space:
   675                           	opt stack 0
   676  00001E                     ComputeStorageData@i:
   677                           	opt stack 0
   678                           
   679                           ; 2 bytes @ 0x1D
   680  00001E                     	ds	1
   681  00001F                     ??_Delay:
   682  00001F                     ??_crcBufS_get:
   683  00001F                     ??_crcBufS_status_put:
   684  00001F                     CRC8@extract:
   685                           	opt stack 0
   686  00001F                     crcBufS_put@status:
   687                           	opt stack 0
   688  00001F                     ___awdiv@counter:
   689                           	opt stack 0
   690  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   691                           	opt stack 0
   692  00001F                     SetPin595@value:
   693                           	opt stack 0
   694  00001F                     UART_buff_modulo_inc@my_value:
   695                           	opt stack 0
   696  00001F                     memset@n:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x1E
   700  00001F                     	ds	1
   701  000020                     ??_crcBufS_put:
   702  000020                     CRC8@tempI:
   703                           	opt stack 0
   704  000020                     ___awdiv@sign:
   705                           	opt stack 0
   706  000020                     Delay@i:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x1F
   710  000020                     	ds	1
   711  000021                     ??_SetPin595:
   712  000021                     CRC8@crc:
   713                           	opt stack 0
   714  000021                     FastTransfer_buffer_put@_this:
   715                           	opt stack 0
   716  000021                     UART_buff_put@_this:
   717                           	opt stack 0
   718  000021                     UART_buff_get@_this:
   719                           	opt stack 0
   720  000021                     ___awdiv@quotient:
   721                           	opt stack 0
   722  000021                     memset@p:
   723                           	opt stack 0
   724                           
   725                           ; 2 bytes @ 0x20
   726  000021                     	ds	2
   727  000023                     ??_UART_buff_get:
   728  000023                     FastTransfer_buffer_put@towhere:
   729                           	opt stack 0
   730  000023                     UART_buff_put@c:
   731                           	opt stack 0
   732  000023                     FastTransfer_buffer_flush@_this:
   733                           	opt stack 0
   734  000023                     crcBufS_status_put@wantedTime:
   735                           	opt stack 0
   736  000023                     UART_buff_init@_this:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x22
   740  000023                     	ds	1
   741  000024                     ??_UART_buff_put:
   742  000024                     FastTransfer_buffer_put@towhat:
   743                           	opt stack 0
   744  000024                     writeRegisters@val:
   745                           	opt stack 0
   746  000024                     PotSetpoint@new_point:
   747                           	opt stack 0
   748  000024                     PotClear@x:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x23
   752  000024                     	ds	1
   753  000025                     UART_buff_get@c:
   754                           	opt stack 0
   755  000025                     FastTransfer_buffer_flush@clearBuffer:
   756                           	opt stack 0
   757  000025                     crcBufS_get@wantedTime:
   758                           	opt stack 0
   759  000025                     EnableSlavePower@onof:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x24
   763  000025                     	ds	1
   764  000026                     ??_FastTransfer_buffer_put:
   765  000026                     ??_PotSetpoint:
   766  000026                     Send_put@_data:
   767                           	opt stack 0
   768  000026                     writeRegisters@i:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x25
   772  000026                     	ds	1
   773  000027                     ??_sendData:
   774  000027                     EnableSlavePower@slave:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x26
   778  000027                     	ds	1
   779  000028                     tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           
   786                           ; 0 bytes @ 0x27
   787 ;;
   788 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   789 ;;
   790 ;; *************** function _main *****************
   791 ;; Defined at:
   792 ;;		line 10 in file "main.c"
   793 ;; Parameters:    Size  Location     Type
   794 ;;		None
   795 ;; Auto vars:     Size  Location     Type
   796 ;;  i               2   25[BANK0 ] int 
   797 ;; Return value:  Size  Location     Type
   798 ;;		None               void
   799 ;; Registers used:
   800 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   806 ;;      Params:         0       0       0       0       0       0       0
   807 ;;      Locals:         0       2       0       0       0       0       0
   808 ;;      Temps:          0       0       0       0       0       0       0
   809 ;;      Totals:         0       2       0       0       0       0       0
   810 ;;Total ram usage:        2 bytes
   811 ;; Hardware stack levels required when called:   10
   812 ;; This function calls:
   813 ;;		_CoolingStart
   814 ;;		_PDUStartup
   815 ;;		_PotSetpoint
   816 ;;		_SYSTEM_Initialize
   817 ;;		_updateComms
   818 ;; This function is called by:
   819 ;;		Startup code after reset
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           	psect	text0
   824  0019E8                     __ptext0:
   825                           	opt stack 0
   826  0019E8                     _main:
   827                           	opt stack 21
   828                           
   829                           ;main.c: 12: SYSTEM_Initialize();
   830                           
   831                           ;incstack = 0
   832  0019E8  EC7D  F00B         	call	_SYSTEM_Initialize	;wreg free
   833                           
   834                           ;main.c: 13: PDUStartup();
   835  0019EC  ECA3  F00C         	call	_PDUStartup	;wreg free
   836                           
   837                           ;main.c: 14: CoolingStart();
   838  0019F0  EC8C  F00E         	call	_CoolingStart	;wreg free
   839                           
   840                           ;main.c: 32: (INTCONbits.GIE = 1);
   841  0019F4  8EF2               	bsf	intcon,7,c	;volatile
   842                           
   843                           ;main.c: 35: (INTCONbits.PEIE = 1);
   844  0019F6  8CF2               	bsf	intcon,6,c	;volatile
   845                           
   846                           ;main.c: 43: LATCbits.LATC5 = 0;
   847  0019F8  9A8B               	bcf	3979,5,c	;volatile
   848  0019FA  D016               	goto	l4539
   849  0019FC                     l4531:
   850                           
   851                           ; BSR set to: 0
   852                           ;main.c: 52: updateComms();
   853  0019FC  ECA1  F00D         	call	_updateComms	;wreg free
   854                           
   855                           ;main.c: 53: PotSetpoint(i++);
   856  001A00  C0EC  F024         	movff	main@i,PotSetpoint@new_point
   857  001A04  C0ED  F025         	movff	main@i+1,PotSetpoint@new_point+1
   858  001A08  ECC8  F006         	call	_PotSetpoint	;wreg free
   859  001A0C  0100               	movlb	0	; () banked
   860  001A0E  4BEC               	infsnz	main@i& (0+255),f,b
   861  001A10  2BED               	incf	(main@i+1)& (0+255),f,b
   862                           
   863                           ; BSR set to: 0
   864                           ;main.c: 54: if (i>32){
   865  001A12  0100               	movlb	0	; () banked
   866  001A14  BFED               	btfsc	(main@i+1)& (0+255),7,b
   867  001A16  D7F2               	goto	l4531
   868  001A18  0100               	movlb	0	; () banked
   869  001A1A  51ED               	movf	(main@i+1)& (0+255),w,b
   870  001A1C  E105               	bnz	u4170
   871  001A1E  0E21               	movlw	33
   872  001A20  0100               	movlb	0	; () banked
   873  001A22  5DEC               	subwf	main@i& (0+255),w,b
   874  001A24  A0D8               	btfss	status,0,c
   875  001A26  D7EA               	goto	l4531
   876  001A28                     u4170:
   877  001A28                     l4539:
   878                           
   879                           ; BSR set to: 0
   880                           ;main.c: 55: i = 0;
   881  001A28  0E00               	movlw	0
   882  001A2A  0100               	movlb	0	; () banked
   883  001A2C  6FED               	movwf	(main@i+1)& (0+255),b
   884  001A2E  0E00               	movlw	0
   885  001A30  6FEC               	movwf	main@i& (0+255),b
   886                           
   887                           ; BSR set to: 0
   888                           
   889                           ; BSR set to: 0
   890  001A32  D7E4               	goto	l4531
   891  001A34                     __end_of_main:
   892                           	opt stack 0
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           intcon	equ	0xFF2
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           status	equ	0xFD8
   901                           
   902 ;; *************** function _updateComms *****************
   903 ;; Defined at:
   904 ;;		line 21 in file "Communications.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;		None               void
   911 ;; Registers used:
   912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   918 ;;      Params:         0       0       0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    9
   925 ;; This function calls:
   926 ;;		_processPowerRequest
   927 ;;		_receiveData
   928 ;;		_respondECU
   929 ;; This function is called by:
   930 ;;		_main
   931 ;; This function uses a non-reentrant model
   932 ;;
   933                           
   934                           	psect	text1
   935  001B42                     __ptext1:
   936                           	opt stack 0
   937  001B42                     _updateComms:
   938                           	opt stack 21
   939                           
   940                           ;Communications.c: 22: if (receiveData()) {
   941                           
   942                           ; BSR set to: 0
   943                           ;incstack = 0
   944  001B42  EC52  F000         	call	_receiveData	;wreg free
   945  001B46  0900               	iorlw	0
   946  001B48  B4D8               	btfsc	status,2,c
   947  001B4A  0012               	return	
   948                           
   949                           ;Communications.c: 23: static int previousPowerState;
   950                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   951  001B4C  503A               	movf	updateComms@previousPowerState,w,c
   952  001B4E  0100               	movlb	0	; () banked
   953  001B50  199C               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   954  001B52  E105               	bnz	u4040
   955  001B54  503B               	movf	updateComms@previousPowerState+1,w,c
   956  001B56  0100               	movlb	0	; () banked
   957  001B58  199D               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
   958  001B5A  B4D8               	btfsc	status,2,c
   959  001B5C  D00A               	goto	l4401
   960  001B5E                     u4040:
   961                           
   962                           ; BSR set to: 0
   963                           ;Communications.c: 25: previousPowerState = receiveArray[1];
   964  001B5E  C09C  F03A         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
   965  001B62  C09D  F03B         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
   966                           
   967                           ; BSR set to: 0
   968                           ;Communications.c: 26: processPowerRequest(previousPowerState);
   969  001B66  C03A  F0D3         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
   970  001B6A  C03B  F0D4         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
   971  001B6E  ECD0  F009         	call	_processPowerRequest	;wreg free
   972  001B72                     l4401:
   973                           
   974                           ;Communications.c: 27: }
   975                           ;Communications.c: 28: respondECU();
   976  001B72  EC79  F00C         	call	_respondECU	;wreg free
   977  001B76  0012               	return	
   978  001B78                     __end_of_updateComms:
   979                           	opt stack 0
   980                           tblptru	equ	0xFF8
   981                           tblptrh	equ	0xFF7
   982                           tblptrl	equ	0xFF6
   983                           tablat	equ	0xFF5
   984                           intcon	equ	0xFF2
   985                           postinc0	equ	0xFEE
   986                           wreg	equ	0xFE8
   987                           status	equ	0xFD8
   988                           
   989 ;; *************** function _respondECU *****************
   990 ;; Defined at:
   991 ;;		line 48 in file "Communications.c"
   992 ;; Parameters:    Size  Location     Type
   993 ;;		None
   994 ;; Auto vars:     Size  Location     Type
   995 ;;		None
   996 ;; Return value:  Size  Location     Type
   997 ;;		None               void
   998 ;; Registers used:
   999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1000 ;; Tracked objects:
  1001 ;;		On entry : 0/0
  1002 ;;		On exit  : 0/0
  1003 ;;		Unchanged: 0/0
  1004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1005 ;;      Params:         0       0       0       0       0       0       0
  1006 ;;      Locals:         0       0       0       0       0       0       0
  1007 ;;      Temps:          0       0       0       0       0       0       0
  1008 ;;      Totals:         0       0       0       0       0       0       0
  1009 ;;Total ram usage:        0 bytes
  1010 ;; Hardware stack levels used:    1
  1011 ;; Hardware stack levels required when called:    8
  1012 ;; This function calls:
  1013 ;;		_Delay
  1014 ;;		_ToSend
  1015 ;;		_sendData
  1016 ;; This function is called by:
  1017 ;;		_updateComms
  1018 ;; This function uses a non-reentrant model
  1019 ;;
  1020                           
  1021                           	psect	text2
  1022  0018F2                     __ptext2:
  1023                           	opt stack 0
  1024  0018F2                     _respondECU:
  1025                           	opt stack 21
  1026                           
  1027                           ;Communications.c: 49: LATCbits.LATC5 = 1;
  1028                           
  1029                           ;incstack = 0
  1030  0018F2  8A8B               	bsf	3979,5,c	;volatile
  1031                           
  1032                           ;Communications.c: 50: ToSend(0, 5);
  1033  0018F4  0E00               	movlw	0
  1034  0018F6  0100               	movlb	0	; () banked
  1035  0018F8  6FD4               	movwf	(ToSend@what+1)& (0+255),b
  1036  0018FA  0E05               	movlw	5
  1037  0018FC  6FD3               	movwf	ToSend@what& (0+255),b
  1038  0018FE  0E00               	movlw	0
  1039  001900  EC6E  F00E         	call	_ToSend
  1040                           
  1041                           ;Communications.c: 51: ToSend(9, 5);
  1042  001904  0E00               	movlw	0
  1043  001906  0100               	movlb	0	; () banked
  1044  001908  6FD4               	movwf	(ToSend@what+1)& (0+255),b
  1045  00190A  0E05               	movlw	5
  1046  00190C  6FD3               	movwf	ToSend@what& (0+255),b
  1047  00190E  0E09               	movlw	9
  1048  001910  EC6E  F00E         	call	_ToSend
  1049                           
  1050                           ;Communications.c: 52: Delay(5);
  1051  001914  0E05               	movlw	5
  1052  001916  6E1B               	movwf	Delay@wait,c
  1053  001918  0E00               	movlw	0
  1054  00191A  6E1C               	movwf	Delay@wait+1,c
  1055  00191C  0E00               	movlw	0
  1056  00191E  6E1D               	movwf	Delay@wait+2,c
  1057  001920  0E00               	movlw	0
  1058  001922  6E1E               	movwf	Delay@wait+3,c
  1059  001924  EC3F  F00D         	call	_Delay	;wreg free
  1060                           
  1061                           ;Communications.c: 54: sendData(1);
  1062  001928  0E01               	movlw	1
  1063  00192A  EC0E  F005         	call	_sendData
  1064                           
  1065                           ;Communications.c: 55: Delay(3);
  1066  00192E  0E03               	movlw	3
  1067  001930  6E1B               	movwf	Delay@wait,c
  1068  001932  0E00               	movlw	0
  1069  001934  6E1C               	movwf	Delay@wait+1,c
  1070  001936  0E00               	movlw	0
  1071  001938  6E1D               	movwf	Delay@wait+2,c
  1072  00193A  0E00               	movlw	0
  1073  00193C  6E1E               	movwf	Delay@wait+3,c
  1074  00193E  EC3F  F00D         	call	_Delay	;wreg free
  1075                           
  1076                           ;Communications.c: 56: LATCbits.LATC5 = 0;
  1077  001942  9A8B               	bcf	3979,5,c	;volatile
  1078  001944  0012               	return		;funcret
  1079  001946                     __end_of_respondECU:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           intcon	equ	0xFF2
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           status	equ	0xFD8
  1089                           
  1090 ;; *************** function _sendData *****************
  1091 ;; Defined at:
  1092 ;;		line 53 in file "FastTransfer.c"
  1093 ;; Parameters:    Size  Location     Type
  1094 ;;  whereToSend     1    wreg     unsigned char 
  1095 ;; Auto vars:     Size  Location     Type
  1096 ;;  whereToSend     1    0[BANK0 ] unsigned char 
  1097 ;;  i               2    2[BANK0 ] int 
  1098 ;;  CS              1    1[BANK0 ] unsigned char 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;		None               void
  1101 ;; Registers used:
  1102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1108 ;;      Params:         0       0       0       0       0       0       0
  1109 ;;      Locals:         0       4       0       0       0       0       0
  1110 ;;      Temps:          1       0       0       0       0       0       0
  1111 ;;      Totals:         1       4       0       0       0       0       0
  1112 ;;Total ram usage:        5 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    7
  1115 ;; This function calls:
  1116 ;;		Absolute function
  1117 ;;		_CRC8
  1118 ;;		_FastTransfer_buffer_flush
  1119 ;;		_Send_put
  1120 ;;		_crcBufS_put
  1121 ;; This function is called by:
  1122 ;;		_respondECU
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           	psect	text3
  1127  000A1C                     __ptext3:
  1128                           	opt stack 0
  1129  000A1C                     _sendData:
  1130                           	opt stack 21
  1131                           
  1132                           ;incstack = 0
  1133                           ;sendData@whereToSend stored from wreg
  1134  000A1C  0100               	movlb	0	; () banked
  1135  000A1E  6FD3               	movwf	sendData@whereToSend& (0+255),b
  1136                           
  1137                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1138  000A20  C02E  F01B         	movff	_sendStructAddress,CRC8@data
  1139  000A24  C02F  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1140  000A28  C1FC  F01D         	movff	_ring_buffer+204,CRC8@len
  1141  000A2C  EC1A  F00D         	call	_CRC8	;wreg free
  1142  000A30  0100               	movlb	0	; () banked
  1143  000A32  6FD4               	movwf	sendData@CS& (0+255),b
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;FastTransfer.c: 58: serial_write(0x06);
  1147  000A34  D801               	call	u3138
  1148  000A36  D00B               	goto	l3893
  1149  000A38                     u3138:
  1150  000A38  0005               	push	
  1151  000A3A  6EFA               	movwf	pclath,c
  1152  000A3C  5036               	movf	_serial_write,w,c
  1153  000A3E  6EFD               	movwf	tosl,c
  1154  000A40  5037               	movf	_serial_write+1,w,c
  1155  000A42  6EFE               	movwf	tosh,c
  1156  000A44  50F8               	movf	tblptru,w,c
  1157  000A46  6EFF               	movwf	tosu,c
  1158  000A48  50FA               	movf	pclath,w,c
  1159  000A4A  0E06               	movlw	6
  1160  000A4C  0012               	return		;indir
  1161  000A4E                     l3893:
  1162                           
  1163                           ;FastTransfer.c: 59: serial_write(0x85);
  1164  000A4E  D801               	call	u3148
  1165  000A50  D00B               	goto	l3895
  1166  000A52                     u3148:
  1167  000A52  0005               	push	
  1168  000A54  6EFA               	movwf	pclath,c
  1169  000A56  5036               	movf	_serial_write,w,c
  1170  000A58  6EFD               	movwf	tosl,c
  1171  000A5A  5037               	movf	_serial_write+1,w,c
  1172  000A5C  6EFE               	movwf	tosh,c
  1173  000A5E  50F8               	movf	tblptru,w,c
  1174  000A60  6EFF               	movwf	tosu,c
  1175  000A62  50FA               	movf	pclath,w,c
  1176  000A64  0E85               	movlw	133
  1177  000A66  0012               	return		;indir
  1178  000A68                     l3895:
  1179                           
  1180                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1181  000A68  D801               	call	u3158
  1182  000A6A  D00C               	goto	l3897
  1183  000A6C                     u3158:
  1184  000A6C  0005               	push	
  1185  000A6E  6EFA               	movwf	pclath,c
  1186  000A70  5036               	movf	_serial_write,w,c
  1187  000A72  6EFD               	movwf	tosl,c
  1188  000A74  5037               	movf	_serial_write+1,w,c
  1189  000A76  6EFE               	movwf	tosh,c
  1190  000A78  50F8               	movf	tblptru,w,c
  1191  000A7A  6EFF               	movwf	tosu,c
  1192  000A7C  50FA               	movf	pclath,w,c
  1193  000A7E  0100               	movlb	0	; () banked
  1194  000A80  51D3               	movf	sendData@whereToSend& (0+255),w,b
  1195  000A82  0012               	return		;indir
  1196  000A84                     l3897:
  1197                           
  1198                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1199  000A84  D801               	call	u3168
  1200  000A86  D00B               	goto	l3899
  1201  000A88                     u3168:
  1202  000A88  0005               	push	
  1203  000A8A  6EFA               	movwf	pclath,c
  1204  000A8C  5036               	movf	_serial_write,w,c
  1205  000A8E  6EFD               	movwf	tosl,c
  1206  000A90  5037               	movf	_serial_write+1,w,c
  1207  000A92  6EFE               	movwf	tosh,c
  1208  000A94  50F8               	movf	tblptru,w,c
  1209  000A96  6EFF               	movwf	tosu,c
  1210  000A98  50FA               	movf	pclath,w,c
  1211  000A9A  503F               	movf	_moduleAddress,w,c
  1212  000A9C  0012               	return		;indir
  1213  000A9E                     l3899:
  1214                           
  1215                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1216  000A9E  D801               	call	u3178
  1217  000AA0  D00C               	goto	l3901
  1218  000AA2                     u3178:
  1219  000AA2  0005               	push	
  1220  000AA4  6EFA               	movwf	pclath,c
  1221  000AA6  5036               	movf	_serial_write,w,c
  1222  000AA8  6EFD               	movwf	tosl,c
  1223  000AAA  5037               	movf	_serial_write+1,w,c
  1224  000AAC  6EFE               	movwf	tosh,c
  1225  000AAE  50F8               	movf	tblptru,w,c
  1226  000AB0  6EFF               	movwf	tosu,c
  1227  000AB2  50FA               	movf	pclath,w,c
  1228  000AB4  0101               	movlb	1	; () banked
  1229  000AB6  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1230  000AB8  0012               	return		;indir
  1231  000ABA                     l3901:
  1232                           
  1233                           ;FastTransfer.c: 66: int i;
  1234                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1235  000ABA  0E00               	movlw	0
  1236  000ABC  0100               	movlb	0	; () banked
  1237  000ABE  6FD6               	movwf	(sendData@i+1)& (0+255),b
  1238  000AC0  0E00               	movlw	0
  1239  000AC2  6FD5               	movwf	sendData@i& (0+255),b
  1240  000AC4  D018               	goto	l3907
  1241  000AC6                     l3903:
  1242                           
  1243                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1244  000AC6  D801               	call	u3188
  1245  000AC8  D013               	goto	l3905
  1246  000ACA                     u3188:
  1247  000ACA  0005               	push	
  1248  000ACC  6EFA               	movwf	pclath,c
  1249  000ACE  5036               	movf	_serial_write,w,c
  1250  000AD0  6EFD               	movwf	tosl,c
  1251  000AD2  5037               	movf	_serial_write+1,w,c
  1252  000AD4  6EFE               	movwf	tosh,c
  1253  000AD6  50F8               	movf	tblptru,w,c
  1254  000AD8  6EFF               	movwf	tosu,c
  1255  000ADA  50FA               	movf	pclath,w,c
  1256  000ADC  0100               	movlb	0	; () banked
  1257  000ADE  51D5               	movf	sendData@i& (0+255),w,b
  1258  000AE0  242E               	addwf	_sendStructAddress,w,c
  1259  000AE2  6ED9               	movwf	fsr2l,c
  1260  000AE4  0100               	movlb	0	; () banked
  1261  000AE6  51D6               	movf	(sendData@i+1)& (0+255),w,b
  1262  000AE8  202F               	addwfc	_sendStructAddress+1,w,c
  1263  000AEA  6EDA               	movwf	fsr2h,c
  1264  000AEC  50DF               	movf	indf2,w,c
  1265  000AEE  0012               	return		;indir
  1266  000AF0                     l3905:
  1267  000AF0  0100               	movlb	0	; () banked
  1268  000AF2  4BD5               	infsnz	sendData@i& (0+255),f,b
  1269  000AF4  2BD6               	incf	(sendData@i+1)& (0+255),f,b
  1270  000AF6                     l3907:
  1271                           
  1272                           ; BSR set to: 0
  1273  000AF6  0101               	movlb	1	; () banked
  1274  000AF8  51FC               	movf	(_ring_buffer+204)& (0+255),w,b
  1275  000AFA  0100               	movlb	0	; () banked
  1276  000AFC  5DD5               	subwf	sendData@i& (0+255),w,b
  1277  000AFE  0100               	movlb	0	; () banked
  1278  000B00  51D6               	movf	(sendData@i+1)& (0+255),w,b
  1279  000B02  0A80               	xorlw	128
  1280  000B04  6E27               	movwf	??_sendData& (0+255),c
  1281  000B06  0101               	movlb	1	; () banked
  1282  000B08  51FD               	movf	(_ring_buffer+205)& (0+255),w,b
  1283  000B0A  0A80               	xorlw	128
  1284  000B0C  5827               	subwfb	??_sendData& (0+255),w,c
  1285  000B0E  A0D8               	btfss	status,0,c
  1286  000B10  D7DA               	goto	l3903
  1287                           
  1288                           ; BSR set to: 1
  1289                           ;FastTransfer.c: 69: }
  1290                           ;FastTransfer.c: 72: serial_write(CS);
  1291                           
  1292                           ; BSR set to: 1
  1293  000B12  D801               	call	u3208
  1294  000B14  D00C               	goto	l3911
  1295  000B16                     u3208:
  1296  000B16  0005               	push	
  1297  000B18  6EFA               	movwf	pclath,c
  1298  000B1A  5036               	movf	_serial_write,w,c
  1299  000B1C  6EFD               	movwf	tosl,c
  1300  000B1E  5037               	movf	_serial_write+1,w,c
  1301  000B20  6EFE               	movwf	tosh,c
  1302  000B22  50F8               	movf	tblptru,w,c
  1303  000B24  6EFF               	movwf	tosu,c
  1304  000B26  50FA               	movf	pclath,w,c
  1305  000B28  0100               	movlb	0	; () banked
  1306  000B2A  51D4               	movf	sendData@CS& (0+255),w,b
  1307  000B2C  0012               	return		;indir
  1308  000B2E                     l3911:
  1309                           
  1310                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1311  000B2E  0EC2               	movlw	low _crc_buffer
  1312  000B30  6E1B               	movwf	crcBufS_put@_this,c
  1313  000B32  0E00               	movlw	high _crc_buffer
  1314  000B34  6E1C               	movwf	crcBufS_put@_this+1,c
  1315  000B36  C0D3  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1316  000B3A  C0D4  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1317  000B3E  0E00               	movlw	0
  1318  000B40  6E1F               	movwf	crcBufS_put@status,c
  1319  000B42  EC95  F008         	call	_crcBufS_put
  1320                           
  1321                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1322  000B46  0E30               	movlw	low _ring_buffer
  1323  000B48  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1324  000B4A  0E01               	movlw	high _ring_buffer
  1325  000B4C  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1326  000B4E  0E00               	movlw	0
  1327  000B50  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1328  000B52  0E01               	movlw	1
  1329  000B54  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1330  000B56  ECEA  F00B         	call	_FastTransfer_buffer_flush	;wreg free
  1331  000B5A  0012               	return		;funcret
  1332  000B5C                     __end_of_sendData:
  1333                           	opt stack 0
  1334                           tosu	equ	0xFFF
  1335                           tosh	equ	0xFFE
  1336                           tosl	equ	0xFFD
  1337                           pclath	equ	0xFFA
  1338                           tblptru	equ	0xFF8
  1339                           tblptrh	equ	0xFF7
  1340                           tblptrl	equ	0xFF6
  1341                           tablat	equ	0xFF5
  1342                           intcon	equ	0xFF2
  1343                           postinc0	equ	0xFEE
  1344                           wreg	equ	0xFE8
  1345                           indf2	equ	0xFDF
  1346                           fsr2h	equ	0xFDA
  1347                           fsr2l	equ	0xFD9
  1348                           status	equ	0xFD8
  1349                           
  1350 ;; *************** function _crcBufS_put *****************
  1351 ;; Defined at:
  1352 ;;		line 321 in file "FastTransfer.c"
  1353 ;; Parameters:    Size  Location     Type
  1354 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1355 ;;		 -> crc_buffer(17), 
  1356 ;;  address         1   28[COMRAM] unsigned char 
  1357 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1358 ;;  status          1   30[COMRAM] unsigned char 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;		None
  1361 ;; Return value:  Size  Location     Type
  1362 ;;		None               void
  1363 ;; Registers used:
  1364 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1365 ;; Tracked objects:
  1366 ;;		On entry : 0/0
  1367 ;;		On exit  : 0/0
  1368 ;;		Unchanged: 0/0
  1369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1370 ;;      Params:         5       0       0       0       0       0       0
  1371 ;;      Locals:         0       0       0       0       0       0       0
  1372 ;;      Temps:          2       0       0       0       0       0       0
  1373 ;;      Totals:         7       0       0       0       0       0       0
  1374 ;;Total ram usage:        7 bytes
  1375 ;; Hardware stack levels used:    1
  1376 ;; Hardware stack levels required when called:    4
  1377 ;; This function calls:
  1378 ;;		Nothing
  1379 ;; This function is called by:
  1380 ;;		_sendData
  1381 ;; This function uses a non-reentrant model
  1382 ;;
  1383                           
  1384                           	psect	text4
  1385  00112A                     __ptext4:
  1386                           	opt stack 0
  1387  00112A                     _crcBufS_put:
  1388                           	opt stack 23
  1389                           
  1390                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1391                           
  1392                           ;incstack = 0
  1393  00112A  EE20 F00F          	lfsr	2,15
  1394  00112E  501B               	movf	crcBufS_put@_this,w,c
  1395  001130  26D9               	addwf	fsr2l,f,c
  1396  001132  501C               	movf	crcBufS_put@_this+1,w,c
  1397  001134  22DA               	addwfc	fsr2h,f,c
  1398  001136  CFDE F020          	movff	postinc2,??_crcBufS_put
  1399  00113A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1400  00113E  5020               	movf	??_crcBufS_put,w,c
  1401  001140  241B               	addwf	crcBufS_put@_this,w,c
  1402  001142  6ED9               	movwf	fsr2l,c
  1403  001144  5021               	movf	??_crcBufS_put+1,w,c
  1404  001146  201C               	addwfc	crcBufS_put@_this+1,w,c
  1405  001148  6EDA               	movwf	fsr2h,c
  1406  00114A  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1407                           
  1408                           ;FastTransfer.c: 323: _this->head++;
  1409  00114E  EE20 F00F          	lfsr	2,15
  1410  001152  501B               	movf	crcBufS_put@_this,w,c
  1411  001154  26D9               	addwf	fsr2l,f,c
  1412  001156  501C               	movf	crcBufS_put@_this+1,w,c
  1413  001158  22DA               	addwfc	fsr2h,f,c
  1414  00115A  2ADE               	incf	postinc2,f,c
  1415  00115C  0E00               	movlw	0
  1416  00115E  22DD               	addwfc	postdec2,f,c
  1417                           
  1418                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1419  001160  EE20 F00F          	lfsr	2,15
  1420  001164  501B               	movf	crcBufS_put@_this,w,c
  1421  001166  26D9               	addwf	fsr2l,f,c
  1422  001168  501C               	movf	crcBufS_put@_this+1,w,c
  1423  00116A  22DA               	addwfc	fsr2h,f,c
  1424  00116C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1425  001170  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1426  001174  5020               	movf	??_crcBufS_put,w,c
  1427  001176  241B               	addwf	crcBufS_put@_this,w,c
  1428  001178  6ED9               	movwf	fsr2l,c
  1429  00117A  5021               	movf	??_crcBufS_put+1,w,c
  1430  00117C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1431  00117E  6EDA               	movwf	fsr2h,c
  1432  001180  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1433                           
  1434                           ;FastTransfer.c: 325: _this->head++;
  1435  001184  EE20 F00F          	lfsr	2,15
  1436  001188  501B               	movf	crcBufS_put@_this,w,c
  1437  00118A  26D9               	addwf	fsr2l,f,c
  1438  00118C  501C               	movf	crcBufS_put@_this+1,w,c
  1439  00118E  22DA               	addwfc	fsr2h,f,c
  1440  001190  2ADE               	incf	postinc2,f,c
  1441  001192  0E00               	movlw	0
  1442  001194  22DD               	addwfc	postdec2,f,c
  1443                           
  1444                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1445  001196  EE20 F00F          	lfsr	2,15
  1446  00119A  501B               	movf	crcBufS_put@_this,w,c
  1447  00119C  26D9               	addwf	fsr2l,f,c
  1448  00119E  501C               	movf	crcBufS_put@_this+1,w,c
  1449  0011A0  22DA               	addwfc	fsr2h,f,c
  1450  0011A2  CFDE F020          	movff	postinc2,??_crcBufS_put
  1451  0011A6  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1452  0011AA  5020               	movf	??_crcBufS_put,w,c
  1453  0011AC  241B               	addwf	crcBufS_put@_this,w,c
  1454  0011AE  6ED9               	movwf	fsr2l,c
  1455  0011B0  5021               	movf	??_crcBufS_put+1,w,c
  1456  0011B2  201C               	addwfc	crcBufS_put@_this+1,w,c
  1457  0011B4  6EDA               	movwf	fsr2h,c
  1458  0011B6  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1459                           
  1460                           ;FastTransfer.c: 327: _this->head++;
  1461  0011BA  EE20 F00F          	lfsr	2,15
  1462  0011BE  501B               	movf	crcBufS_put@_this,w,c
  1463  0011C0  26D9               	addwf	fsr2l,f,c
  1464  0011C2  501C               	movf	crcBufS_put@_this+1,w,c
  1465  0011C4  22DA               	addwfc	fsr2h,f,c
  1466  0011C6  2ADE               	incf	postinc2,f,c
  1467  0011C8  0E00               	movlw	0
  1468  0011CA  22DD               	addwfc	postdec2,f,c
  1469                           
  1470                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1471  0011CC  EE20 F00F          	lfsr	2,15
  1472  0011D0  501B               	movf	crcBufS_put@_this,w,c
  1473  0011D2  26D9               	addwf	fsr2l,f,c
  1474  0011D4  501C               	movf	crcBufS_put@_this+1,w,c
  1475  0011D6  22DA               	addwfc	fsr2h,f,c
  1476  0011D8  0E01               	movlw	1
  1477  0011DA  BEDB               	btfsc	plusw2,7,c
  1478  0011DC  0012               	return	
  1479  0011DE  0E01               	movlw	1
  1480  0011E0  50DB               	movf	plusw2,w,c
  1481  0011E2  E104               	bnz	u3000
  1482  0011E4  0E0F               	movlw	15
  1483  0011E6  5CDE               	subwf	postinc2,w,c
  1484  0011E8  A0D8               	btfss	status,0,c
  1485  0011EA  0012               	return	
  1486  0011EC                     u3000:
  1487                           
  1488                           ;FastTransfer.c: 329: _this->head = 0;
  1489  0011EC  EE20 F00F          	lfsr	2,15
  1490  0011F0  501B               	movf	crcBufS_put@_this,w,c
  1491  0011F2  26D9               	addwf	fsr2l,f,c
  1492  0011F4  501C               	movf	crcBufS_put@_this+1,w,c
  1493  0011F6  22DA               	addwfc	fsr2h,f,c
  1494  0011F8  0E00               	movlw	0
  1495  0011FA  6EDE               	movwf	postinc2,c
  1496  0011FC  0E00               	movlw	0
  1497  0011FE  6EDD               	movwf	postdec2,c
  1498  001200  0012               	return	
  1499  001202                     __end_of_crcBufS_put:
  1500                           	opt stack 0
  1501                           tosu	equ	0xFFF
  1502                           tosh	equ	0xFFE
  1503                           tosl	equ	0xFFD
  1504                           pclath	equ	0xFFA
  1505                           tblptru	equ	0xFF8
  1506                           tblptrh	equ	0xFF7
  1507                           tblptrl	equ	0xFF6
  1508                           tablat	equ	0xFF5
  1509                           intcon	equ	0xFF2
  1510                           postinc0	equ	0xFEE
  1511                           wreg	equ	0xFE8
  1512                           indf2	equ	0xFDF
  1513                           postinc2	equ	0xFDE
  1514                           postdec2	equ	0xFDD
  1515                           plusw2	equ	0xFDB
  1516                           fsr2h	equ	0xFDA
  1517                           fsr2l	equ	0xFD9
  1518                           status	equ	0xFD8
  1519                           
  1520 ;; *************** function _FastTransfer_buffer_flush *****************
  1521 ;; Defined at:
  1522 ;;		line 261 in file "FastTransfer.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1525 ;;		 -> ring_buffer(206), 
  1526 ;;  clearBuffer     2   36[COMRAM] const int 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;		None
  1529 ;; Return value:  Size  Location     Type
  1530 ;;		None               void
  1531 ;; Registers used:
  1532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1538 ;;      Params:         4       0       0       0       0       0       0
  1539 ;;      Locals:         0       0       0       0       0       0       0
  1540 ;;      Temps:          0       0       0       0       0       0       0
  1541 ;;      Totals:         4       0       0       0       0       0       0
  1542 ;;Total ram usage:        4 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    5
  1545 ;; This function calls:
  1546 ;;		_memset
  1547 ;; This function is called by:
  1548 ;;		_sendData
  1549 ;; This function uses a non-reentrant model
  1550 ;;
  1551                           
  1552                           	psect	text5
  1553  0017D4                     __ptext5:
  1554                           	opt stack 0
  1555  0017D4                     _FastTransfer_buffer_flush:
  1556                           	opt stack 22
  1557                           
  1558                           ;FastTransfer.c: 262: _this->count = 0;
  1559                           
  1560                           ;incstack = 0
  1561  0017D4  EE20 F0CC          	lfsr	2,204
  1562  0017D8  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1563  0017DA  26D9               	addwf	fsr2l,f,c
  1564  0017DC  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1565  0017DE  22DA               	addwfc	fsr2h,f,c
  1566  0017E0  0E00               	movlw	0
  1567  0017E2  6EDE               	movwf	postinc2,c
  1568  0017E4  0E00               	movlw	0
  1569  0017E6  6EDD               	movwf	postdec2,c
  1570                           
  1571                           ;FastTransfer.c: 263: _this->head = 0;
  1572  0017E8  EE20 F0C8          	lfsr	2,200
  1573  0017EC  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1574  0017EE  26D9               	addwf	fsr2l,f,c
  1575  0017F0  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1576  0017F2  22DA               	addwfc	fsr2h,f,c
  1577  0017F4  0E00               	movlw	0
  1578  0017F6  6EDE               	movwf	postinc2,c
  1579  0017F8  0E00               	movlw	0
  1580  0017FA  6EDD               	movwf	postdec2,c
  1581                           
  1582                           ;FastTransfer.c: 264: _this->tail = 0;
  1583  0017FC  EE20 F0CA          	lfsr	2,202
  1584  001800  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1585  001802  26D9               	addwf	fsr2l,f,c
  1586  001804  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1587  001806  22DA               	addwfc	fsr2h,f,c
  1588  001808  0E00               	movlw	0
  1589  00180A  6EDE               	movwf	postinc2,c
  1590  00180C  0E00               	movlw	0
  1591  00180E  6EDD               	movwf	postdec2,c
  1592                           
  1593                           ;FastTransfer.c: 265: if (clearBuffer) {
  1594  001810  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1595  001812  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1596  001814  B4D8               	btfsc	status,2,c
  1597  001816  0012               	return	
  1598                           
  1599                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1600  001818  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1601  00181C  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1602  001820  0E00               	movlw	0
  1603  001822  6E1E               	movwf	memset@c+1,c
  1604  001824  0E00               	movlw	0
  1605  001826  6E1D               	movwf	memset@c,c
  1606  001828  0E00               	movlw	0
  1607  00182A  6E20               	movwf	memset@n+1,c
  1608  00182C  0EC8               	movlw	200
  1609  00182E  6E1F               	movwf	memset@n,c
  1610  001830  EC07  F00E         	call	_memset	;wreg free
  1611  001834  0012               	return	
  1612  001836                     __end_of_FastTransfer_buffer_flush:
  1613                           	opt stack 0
  1614                           tosu	equ	0xFFF
  1615                           tosh	equ	0xFFE
  1616                           tosl	equ	0xFFD
  1617                           pclath	equ	0xFFA
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           intcon	equ	0xFF2
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           indf2	equ	0xFDF
  1626                           postinc2	equ	0xFDE
  1627                           postdec2	equ	0xFDD
  1628                           plusw2	equ	0xFDB
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _ToSend *****************
  1634 ;; Defined at:
  1635 ;;		line 216 in file "FastTransfer.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;  where           1    wreg     unsigned char 
  1638 ;;  what            2    0[BANK0 ] unsigned int 
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  where           1    2[BANK0 ] unsigned char 
  1641 ;; Return value:  Size  Location     Type
  1642 ;;		None               void
  1643 ;; Registers used:
  1644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1645 ;; Tracked objects:
  1646 ;;		On entry : 0/0
  1647 ;;		On exit  : 0/0
  1648 ;;		Unchanged: 0/0
  1649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1650 ;;      Params:         0       2       0       0       0       0       0
  1651 ;;      Locals:         0       1       0       0       0       0       0
  1652 ;;      Temps:          0       0       0       0       0       0       0
  1653 ;;      Totals:         0       3       0       0       0       0       0
  1654 ;;Total ram usage:        3 bytes
  1655 ;; Hardware stack levels used:    1
  1656 ;; Hardware stack levels required when called:    6
  1657 ;; This function calls:
  1658 ;;		_FastTransfer_buffer_put
  1659 ;; This function is called by:
  1660 ;;		_respondECU
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           	psect	text6
  1665  001CDC                     __ptext6:
  1666                           	opt stack 0
  1667  001CDC                     _ToSend:
  1668                           	opt stack 22
  1669                           
  1670                           ;incstack = 0
  1671                           ;ToSend@where stored from wreg
  1672  001CDC  0100               	movlb	0	; () banked
  1673  001CDE  6FD5               	movwf	ToSend@where& (0+255),b
  1674                           
  1675                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1676  001CE0  0E30               	movlw	low _ring_buffer
  1677  001CE2  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1678  001CE4  0E01               	movlw	high _ring_buffer
  1679  001CE6  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1680  001CE8  C0D5  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1681  001CEC  C0D3  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1682  001CF0  C0D4  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1683  001CF4  ECAB  F003         	call	_FastTransfer_buffer_put	;wreg free
  1684  001CF8  0012               	return		;funcret
  1685  001CFA                     __end_of_ToSend:
  1686                           	opt stack 0
  1687                           tosu	equ	0xFFF
  1688                           tosh	equ	0xFFE
  1689                           tosl	equ	0xFFD
  1690                           pclath	equ	0xFFA
  1691                           tblptru	equ	0xFF8
  1692                           tblptrh	equ	0xFF7
  1693                           tblptrl	equ	0xFF6
  1694                           tablat	equ	0xFF5
  1695                           intcon	equ	0xFF2
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           indf2	equ	0xFDF
  1699                           postinc2	equ	0xFDE
  1700                           postdec2	equ	0xFDD
  1701                           plusw2	equ	0xFDB
  1702                           fsr2h	equ	0xFDA
  1703                           fsr2l	equ	0xFD9
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _FastTransfer_buffer_put *****************
  1707 ;; Defined at:
  1708 ;;		line 223 in file "FastTransfer.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1711 ;;		 -> ring_buffer(206), 
  1712 ;;  towhere         1   34[COMRAM] unsigned char 
  1713 ;;  towhat          2   35[COMRAM] unsigned int 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;		None
  1716 ;; Return value:  Size  Location     Type
  1717 ;;		None               void
  1718 ;; Registers used:
  1719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1725 ;;      Params:         5       0       0       0       0       0       0
  1726 ;;      Locals:         0       0       0       0       0       0       0
  1727 ;;      Temps:          2       0       0       0       0       0       0
  1728 ;;      Totals:         7       0       0       0       0       0       0
  1729 ;;Total ram usage:        7 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    5
  1732 ;; This function calls:
  1733 ;;		_FastTransfer_buffer_modulo_inc
  1734 ;; This function is called by:
  1735 ;;		_ToSend
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text7
  1740  000756                     __ptext7:
  1741                           	opt stack 0
  1742  000756                     _FastTransfer_buffer_put:
  1743                           	opt stack 22
  1744                           
  1745                           ;FastTransfer.c: 225: group.integer = towhat;
  1746                           
  1747                           ;incstack = 0
  1748  000756  C024  F028         	movff	FastTransfer_buffer_put@towhat,_group
  1749  00075A  C025  F029         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1750                           
  1751                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1752  00075E  EE20 F0CC          	lfsr	2,204
  1753  000762  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1754  000764  26D9               	addwf	fsr2l,f,c
  1755  000766  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1756  000768  22DA               	addwfc	fsr2h,f,c
  1757  00076A  0E01               	movlw	1
  1758  00076C  BEDB               	btfsc	plusw2,7,c
  1759  00076E  D007               	goto	l3751
  1760  000770  0E01               	movlw	1
  1761  000772  50DB               	movf	plusw2,w,c
  1762  000774  E103               	bnz	u3021
  1763  000776  0EC5               	movlw	197
  1764  000778  5CDE               	subwf	postinc2,w,c
  1765  00077A  B0D8               	btfsc	status,0,c
  1766  00077C                     u3021:
  1767  00077C  0012               	return	
  1768  00077E                     l3751:
  1769                           
  1770                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1771  00077E  EE20 F0C8          	lfsr	2,200
  1772  000782  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1773  000784  26D9               	addwf	fsr2l,f,c
  1774  000786  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1775  000788  22DA               	addwfc	fsr2h,f,c
  1776  00078A  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  1777  00078E  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  1778  000792  5026               	movf	??_FastTransfer_buffer_put,w,c
  1779  000794  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1780  000796  6ED9               	movwf	fsr2l,c
  1781  000798  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  1782  00079A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1783  00079C  6EDA               	movwf	fsr2h,c
  1784  00079E  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1785                           
  1786                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1787  0007A2  EE20 F0C8          	lfsr	2,200
  1788  0007A6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1789  0007A8  26D9               	addwf	fsr2l,f,c
  1790  0007AA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1791  0007AC  22DA               	addwfc	fsr2h,f,c
  1792  0007AE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1793  0007B2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1794  0007B6  0E00               	movlw	0
  1795  0007B8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1796  0007BA  0EC8               	movlw	200
  1797  0007BC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1798  0007BE  EC1D  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1799  0007C2  EE20 F0C8          	lfsr	2,200
  1800  0007C6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1801  0007C8  26D9               	addwf	fsr2l,f,c
  1802  0007CA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1803  0007CC  22DA               	addwfc	fsr2h,f,c
  1804  0007CE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1805  0007D2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1806                           
  1807                           ;FastTransfer.c: 230: ++_this->count;
  1808  0007D6  EE20 F0CC          	lfsr	2,204
  1809  0007DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1810  0007DC  26D9               	addwf	fsr2l,f,c
  1811  0007DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1812  0007E0  22DA               	addwfc	fsr2h,f,c
  1813  0007E2  2ADE               	incf	postinc2,f,c
  1814  0007E4  0E00               	movlw	0
  1815  0007E6  22DD               	addwfc	postdec2,f,c
  1816                           
  1817                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1818  0007E8  EE20 F0C8          	lfsr	2,200
  1819  0007EC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1820  0007EE  26D9               	addwf	fsr2l,f,c
  1821  0007F0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1822  0007F2  22DA               	addwfc	fsr2h,f,c
  1823  0007F4  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  1824  0007F8  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  1825  0007FC  5026               	movf	??_FastTransfer_buffer_put,w,c
  1826  0007FE  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1827  000800  6ED9               	movwf	fsr2l,c
  1828  000802  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  1829  000804  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1830  000806  6EDA               	movwf	fsr2h,c
  1831  000808  C028  FFDF         	movff	_group,indf2
  1832                           
  1833                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1834  00080C  EE20 F0C8          	lfsr	2,200
  1835  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1836  000812  26D9               	addwf	fsr2l,f,c
  1837  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1838  000816  22DA               	addwfc	fsr2h,f,c
  1839  000818  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1840  00081C  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1841  000820  0E00               	movlw	0
  1842  000822  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1843  000824  0EC8               	movlw	200
  1844  000826  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1845  000828  EC1D  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1846  00082C  EE20 F0C8          	lfsr	2,200
  1847  000830  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1848  000832  26D9               	addwf	fsr2l,f,c
  1849  000834  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1850  000836  22DA               	addwfc	fsr2h,f,c
  1851  000838  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1852  00083C  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1853                           
  1854                           ;FastTransfer.c: 233: ++_this->count;
  1855  000840  EE20 F0CC          	lfsr	2,204
  1856  000844  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1857  000846  26D9               	addwf	fsr2l,f,c
  1858  000848  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1859  00084A  22DA               	addwfc	fsr2h,f,c
  1860  00084C  2ADE               	incf	postinc2,f,c
  1861  00084E  0E00               	movlw	0
  1862  000850  22DD               	addwfc	postdec2,f,c
  1863                           
  1864                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1865  000852  EE20 F0C8          	lfsr	2,200
  1866  000856  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1867  000858  26D9               	addwf	fsr2l,f,c
  1868  00085A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1869  00085C  22DA               	addwfc	fsr2h,f,c
  1870  00085E  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  1871  000862  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  1872  000866  5026               	movf	??_FastTransfer_buffer_put,w,c
  1873  000868  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1874  00086A  6ED9               	movwf	fsr2l,c
  1875  00086C  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  1876  00086E  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1877  000870  6EDA               	movwf	fsr2h,c
  1878  000872  C029  FFDF         	movff	_group+1,indf2
  1879                           
  1880                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1881  000876  EE20 F0C8          	lfsr	2,200
  1882  00087A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1883  00087C  26D9               	addwf	fsr2l,f,c
  1884  00087E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1885  000880  22DA               	addwfc	fsr2h,f,c
  1886  000882  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1887  000886  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1888  00088A  0E00               	movlw	0
  1889  00088C  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1890  00088E  0EC8               	movlw	200
  1891  000890  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1892  000892  EC1D  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1893  000896  EE20 F0C8          	lfsr	2,200
  1894  00089A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1895  00089C  26D9               	addwf	fsr2l,f,c
  1896  00089E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1897  0008A0  22DA               	addwfc	fsr2h,f,c
  1898  0008A2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1899  0008A6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1900                           
  1901                           ;FastTransfer.c: 236: ++_this->count;
  1902  0008AA  EE20 F0CC          	lfsr	2,204
  1903  0008AE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1904  0008B0  26D9               	addwf	fsr2l,f,c
  1905  0008B2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1906  0008B4  22DA               	addwfc	fsr2h,f,c
  1907  0008B6  2ADE               	incf	postinc2,f,c
  1908  0008B8  0E00               	movlw	0
  1909  0008BA  22DD               	addwfc	postdec2,f,c
  1910  0008BC  0012               	return	
  1911  0008BE                     __end_of_FastTransfer_buffer_put:
  1912                           	opt stack 0
  1913                           tosu	equ	0xFFF
  1914                           tosh	equ	0xFFE
  1915                           tosl	equ	0xFFD
  1916                           pclath	equ	0xFFA
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           indf2	equ	0xFDF
  1925                           postinc2	equ	0xFDE
  1926                           postdec2	equ	0xFDD
  1927                           plusw2	equ	0xFDB
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1933 ;; Defined at:
  1934 ;;		line 273 in file "FastTransfer.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  value           2   26[COMRAM] const unsigned int 
  1937 ;;  modulus         2   28[COMRAM] const unsigned int 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  my_value        2   30[COMRAM] unsigned int 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  2   26[COMRAM] unsigned int 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1949 ;;      Params:         4       0       0       0       0       0       0
  1950 ;;      Locals:         2       0       0       0       0       0       0
  1951 ;;      Temps:          0       0       0       0       0       0       0
  1952 ;;      Totals:         6       0       0       0       0       0       0
  1953 ;;Total ram usage:        6 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    4
  1956 ;; This function calls:
  1957 ;;		Nothing
  1958 ;; This function is called by:
  1959 ;;		_FastTransfer_buffer_put
  1960 ;;		_FastTransfer_buffer_get
  1961 ;; This function uses a non-reentrant model
  1962 ;;
  1963                           
  1964                           	psect	text8
  1965  001C3A                     __ptext8:
  1966                           	opt stack 0
  1967  001C3A                     _FastTransfer_buffer_modulo_inc:
  1968                           	opt stack 22
  1969                           
  1970                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  1971                           
  1972                           ;incstack = 0
  1973  001C3A  0E01               	movlw	1
  1974  001C3C  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1975  001C3E  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1976  001C40  0E00               	movlw	0
  1977  001C42  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1978  001C44  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1979                           
  1980                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  1981  001C46  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1982  001C48  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1983  001C4A  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1984  001C4C  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1985  001C4E  A0D8               	btfss	status,0,c
  1986  001C50  D004               	goto	l3671
  1987                           
  1988                           ;FastTransfer.c: 276: my_value = 0;
  1989  001C52  0E00               	movlw	0
  1990  001C54  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1991  001C56  0E00               	movlw	0
  1992  001C58  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1993  001C5A                     l3671:
  1994                           
  1995                           ;FastTransfer.c: 277: }
  1996                           ;FastTransfer.c: 278: return (my_value);
  1997  001C5A  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1998  001C5E  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1999  001C62  0012               	return	
  2000  001C64                     __end_of_FastTransfer_buffer_modulo_inc:
  2001                           	opt stack 0
  2002                           tosu	equ	0xFFF
  2003                           tosh	equ	0xFFE
  2004                           tosl	equ	0xFFD
  2005                           pclath	equ	0xFFA
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           intcon	equ	0xFF2
  2011                           postinc0	equ	0xFEE
  2012                           wreg	equ	0xFE8
  2013                           indf2	equ	0xFDF
  2014                           postinc2	equ	0xFDE
  2015                           postdec2	equ	0xFDD
  2016                           plusw2	equ	0xFDB
  2017                           fsr2h	equ	0xFDA
  2018                           fsr2l	equ	0xFD9
  2019                           status	equ	0xFD8
  2020                           
  2021 ;; *************** function _receiveData *****************
  2022 ;; Defined at:
  2023 ;;		line 82 in file "FastTransfer.c"
  2024 ;; Parameters:    Size  Location     Type
  2025 ;;		None
  2026 ;; Auto vars:     Size  Location     Type
  2027 ;;  holder          3   16[BANK0 ] unsigned char [3]
  2028 ;;  crcHolder       1   20[BANK0 ] unsigned char 
  2029 ;;  holder          3   13[BANK0 ] unsigned char [3]
  2030 ;;  crcHolder       1   19[BANK0 ] unsigned char 
  2031 ;;  u               2   21[BANK0 ] int 
  2032 ;;  r               2   23[BANK0 ] int 
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      unsigned char 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2042 ;;      Params:         0       0       0       0       0       0       0
  2043 ;;      Locals:         0      12       0       0       0       0       0
  2044 ;;      Temps:          0       6       0       0       0       0       0
  2045 ;;      Totals:         0      18       0       0       0       0       0
  2046 ;;Total ram usage:       18 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    8
  2049 ;; This function calls:
  2050 ;;		Absolute function
  2051 ;;		_CRC8
  2052 ;;		_CRCcheck
  2053 ;;		_Receive_available
  2054 ;;		_Receive_get
  2055 ;;		_Receive_peek
  2056 ;;		_Send_put
  2057 ;; This function is called by:
  2058 ;;		_updateComms
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061                           
  2062                           	psect	text9
  2063  0000A4                     __ptext9:
  2064                           	opt stack 0
  2065  0000A4                     _receiveData:
  2066                           	opt stack 21
  2067                           
  2068                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2069                           
  2070                           ;incstack = 0
  2071  0000A4  5043               	movf	_rx_len,w,c
  2072  0000A6  A4D8               	btfss	status,2,c
  2073  0000A8  D0AC               	goto	l4129
  2074                           
  2075                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2076  0000AA  D801               	call	u3438
  2077  0000AC  D00A               	goto	u3439
  2078  0000AE                     u3438:
  2079  0000AE  0005               	push	
  2080  0000B0  6EFA               	movwf	pclath,c
  2081  0000B2  5030               	movf	_serial_available,w,c
  2082  0000B4  6EFD               	movwf	tosl,c
  2083  0000B6  5031               	movf	_serial_available+1,w,c
  2084  0000B8  6EFE               	movwf	tosh,c
  2085  0000BA  50F8               	movf	tblptru,w,c
  2086  0000BC  6EFF               	movwf	tosu,c
  2087  0000BE  50FA               	movf	pclath,w,c
  2088  0000C0  0012               	return		;indir
  2089  0000C2                     u3439:
  2090  0000C2  BE1E               	btfsc	?_Receive_available+1,7,c
  2091  0000C4  D09E               	goto	l4129
  2092  0000C6  501E               	movf	?_Receive_available+1,w,c
  2093  0000C8  E11E               	bnz	l4105
  2094  0000CA  0E05               	movlw	5
  2095  0000CC  5C1D               	subwf	?_Receive_available,w,c
  2096  0000CE  B0D8               	btfsc	status,0,c
  2097  0000D0  D01A               	goto	l4105
  2098  0000D2  D097               	goto	l4129
  2099  0000D4                     l4097:
  2100                           
  2101                           ;FastTransfer.c: 93: alignErrorCounter++;
  2102  0000D4  0100               	movlb	0	; () banked
  2103  0000D6  4B92               	infsnz	_alignErrorCounter& (0+255),f,b
  2104  0000D8  2B93               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2108  0000DA  D801               	call	u3458
  2109  0000DC  D00A               	goto	u3459
  2110  0000DE                     u3458:
  2111  0000DE  0005               	push	
  2112  0000E0  6EFA               	movwf	pclath,c
  2113  0000E2  5030               	movf	_serial_available,w,c
  2114  0000E4  6EFD               	movwf	tosl,c
  2115  0000E6  5031               	movf	_serial_available+1,w,c
  2116  0000E8  6EFE               	movwf	tosh,c
  2117  0000EA  50F8               	movf	tblptru,w,c
  2118  0000EC  6EFF               	movwf	tosu,c
  2119  0000EE  50FA               	movf	pclath,w,c
  2120  0000F0  0012               	return		;indir
  2121  0000F2                     u3459:
  2122  0000F2  BE1E               	btfsc	?_Receive_available+1,7,c
  2123  0000F4  D006               	goto	l4101
  2124  0000F6  501E               	movf	?_Receive_available+1,w,c
  2125  0000F8  E106               	bnz	l4105
  2126  0000FA  0E05               	movlw	5
  2127  0000FC  5C1D               	subwf	?_Receive_available,w,c
  2128  0000FE  B0D8               	btfsc	status,0,c
  2129  000100  D002               	goto	l4105
  2130  000102                     l4101:
  2131                           
  2132                           ;FastTransfer.c: 95: return 0;
  2133  000102  0E00               	movlw	0
  2134  000104  0012               	return	
  2135  000106                     l4105:
  2136  000106  D801               	call	u3478
  2137  000108  D00A               	goto	u3479
  2138  00010A                     u3478:
  2139  00010A  0005               	push	
  2140  00010C  6EFA               	movwf	pclath,c
  2141  00010E  5034               	movf	_serial_read,w,c
  2142  000110  6EFD               	movwf	tosl,c
  2143  000112  5035               	movf	_serial_read+1,w,c
  2144  000114  6EFE               	movwf	tosh,c
  2145  000116  50F8               	movf	tblptru,w,c
  2146  000118  6EFF               	movwf	tosu,c
  2147  00011A  50FA               	movf	pclath,w,c
  2148  00011C  0012               	return		;indir
  2149  00011E                     u3479:
  2150  00011E  0A06               	xorlw	6
  2151  000120  A4D8               	btfss	status,2,c
  2152  000122  D7D8               	goto	l4097
  2153                           
  2154                           ;FastTransfer.c: 96: }
  2155                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2156  000124  D801               	call	u3498
  2157  000126  D00A               	goto	u3499
  2158  000128                     u3498:
  2159  000128  0005               	push	
  2160  00012A  6EFA               	movwf	pclath,c
  2161  00012C  5034               	movf	_serial_read,w,c
  2162  00012E  6EFD               	movwf	tosl,c
  2163  000130  5035               	movf	_serial_read+1,w,c
  2164  000132  6EFE               	movwf	tosh,c
  2165  000134  50F8               	movf	tblptru,w,c
  2166  000136  6EFF               	movwf	tosu,c
  2167  000138  50FA               	movf	pclath,w,c
  2168  00013A  0012               	return		;indir
  2169  00013C                     u3499:
  2170  00013C  0A85               	xorlw	133
  2171  00013E  A4D8               	btfss	status,2,c
  2172  000140  D060               	goto	l4129
  2173                           
  2174                           ;FastTransfer.c: 98: rx_address = serial_read();
  2175  000142  D801               	call	u3518
  2176  000144  D00A               	goto	u3519
  2177  000146                     u3518:
  2178  000146  0005               	push	
  2179  000148  6EFA               	movwf	pclath,c
  2180  00014A  5034               	movf	_serial_read,w,c
  2181  00014C  6EFD               	movwf	tosl,c
  2182  00014E  5035               	movf	_serial_read+1,w,c
  2183  000150  6EFE               	movwf	tosh,c
  2184  000152  50F8               	movf	tblptru,w,c
  2185  000154  6EFF               	movwf	tosu,c
  2186  000156  50FA               	movf	pclath,w,c
  2187  000158  0012               	return		;indir
  2188  00015A                     u3519:
  2189  00015A  6E41               	movwf	_rx_address,c
  2190                           
  2191                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2192  00015C  D801               	call	u3528
  2193  00015E  D00A               	goto	u3529
  2194  000160                     u3528:
  2195  000160  0005               	push	
  2196  000162  6EFA               	movwf	pclath,c
  2197  000164  5034               	movf	_serial_read,w,c
  2198  000166  6EFD               	movwf	tosl,c
  2199  000168  5035               	movf	_serial_read+1,w,c
  2200  00016A  6EFE               	movwf	tosh,c
  2201  00016C  50F8               	movf	tblptru,w,c
  2202  00016E  6EFF               	movwf	tosu,c
  2203  000170  50FA               	movf	pclath,w,c
  2204  000172  0012               	return		;indir
  2205  000174                     u3529:
  2206  000174  6E40               	movwf	_returnAddress,c
  2207                           
  2208                           ;FastTransfer.c: 100: rx_len = serial_read();
  2209  000176  D801               	call	u3538
  2210  000178  D00A               	goto	u3539
  2211  00017A                     u3538:
  2212  00017A  0005               	push	
  2213  00017C  6EFA               	movwf	pclath,c
  2214  00017E  5034               	movf	_serial_read,w,c
  2215  000180  6EFD               	movwf	tosl,c
  2216  000182  5035               	movf	_serial_read+1,w,c
  2217  000184  6EFE               	movwf	tosh,c
  2218  000186  50F8               	movf	tblptru,w,c
  2219  000188  6EFF               	movwf	tosu,c
  2220  00018A  50FA               	movf	pclath,w,c
  2221  00018C  0012               	return		;indir
  2222  00018E                     u3539:
  2223  00018E  6E43               	movwf	_rx_len,c
  2224                           
  2225                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2226  000190  503F               	movf	_moduleAddress,w,c
  2227  000192  1841               	xorwf	_rx_address,w,c
  2228  000194  B4D8               	btfsc	status,2,c
  2229  000196  D035               	goto	l4129
  2230                           
  2231                           ;FastTransfer.c: 103: addressErrorCounter++;
  2232  000198  0100               	movlb	0	; () banked
  2233  00019A  4B90               	infsnz	_addressErrorCounter& (0+255),f,b
  2234  00019C  2B91               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;FastTransfer.c: 106: int u;
  2238                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2239  00019E  0E00               	movlw	0
  2240  0001A0  0100               	movlb	0	; () banked
  2241  0001A2  6FE9               	movwf	(receiveData@u+1)& (0+255),b
  2242  0001A4  0E00               	movlw	0
  2243  0001A6  6FE8               	movwf	receiveData@u& (0+255),b
  2244  0001A8  D00F               	goto	l4121
  2245  0001AA                     l4117:
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;FastTransfer.c: 108: serial_read();
  2249  0001AA  D801               	call	u3558
  2250  0001AC  D00A               	goto	l4119
  2251  0001AE                     u3558:
  2252  0001AE  0005               	push	
  2253  0001B0  6EFA               	movwf	pclath,c
  2254  0001B2  5034               	movf	_serial_read,w,c
  2255  0001B4  6EFD               	movwf	tosl,c
  2256  0001B6  5035               	movf	_serial_read+1,w,c
  2257  0001B8  6EFE               	movwf	tosh,c
  2258  0001BA  50F8               	movf	tblptru,w,c
  2259  0001BC  6EFF               	movwf	tosu,c
  2260  0001BE  50FA               	movf	pclath,w,c
  2261  0001C0  0012               	return		;indir
  2262  0001C2                     l4119:
  2263  0001C2  0100               	movlb	0	; () banked
  2264  0001C4  4BE8               	infsnz	receiveData@u& (0+255),f,b
  2265  0001C6  2BE9               	incf	(receiveData@u+1)& (0+255),f,b
  2266  0001C8                     l4121:
  2267                           
  2268                           ; BSR set to: 0
  2269  0001C8  5043               	movf	_rx_len,w,c
  2270  0001CA  0100               	movlb	0	; () banked
  2271  0001CC  6FDA               	movwf	??_receiveData& (0+255),b
  2272  0001CE  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2273  0001D0  0E01               	movlw	1
  2274  0001D2  0100               	movlb	0	; () banked
  2275  0001D4  27DA               	addwf	??_receiveData& (0+255),f,b
  2276  0001D6  0E00               	movlw	0
  2277  0001D8  23DB               	addwfc	(??_receiveData+1)& (0+255),f,b
  2278  0001DA  0100               	movlb	0	; () banked
  2279  0001DC  51E8               	movf	receiveData@u& (0+255),w,b
  2280  0001DE  0100               	movlb	0	; () banked
  2281  0001E0  5DDA               	subwf	??_receiveData& (0+255),w,b
  2282  0001E2  0100               	movlb	0	; () banked
  2283  0001E4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2284  0001E6  0A80               	xorlw	128
  2285  0001E8  0100               	movlb	0	; () banked
  2286  0001EA  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2287  0001EC  0100               	movlb	0	; () banked
  2288  0001EE  51E9               	movf	(receiveData@u+1)& (0+255),w,b
  2289  0001F0  0A80               	xorlw	128
  2290  0001F2  0100               	movlb	0	; () banked
  2291  0001F4  59DC               	subwfb	(??_receiveData+2)& (0+255),w,b
  2292  0001F6  B0D8               	btfsc	status,0,c
  2293  0001F8  D7D8               	goto	l4117
  2294                           
  2295                           ; BSR set to: 0
  2296                           ;FastTransfer.c: 109: }
  2297                           ;FastTransfer.c: 110: rx_len = 0;
  2298                           
  2299                           ; BSR set to: 0
  2300  0001FA  0E00               	movlw	0
  2301  0001FC  6E43               	movwf	_rx_len,c
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;FastTransfer.c: 111: return 0;
  2305  0001FE  0E00               	movlw	0
  2306                           
  2307                           ; BSR set to: 0
  2308  000200  0012               	return	
  2309  000202                     l4129:
  2310                           
  2311                           ;FastTransfer.c: 112: }
  2312                           ;FastTransfer.c: 114: }
  2313                           ;FastTransfer.c: 115: }
  2314                           ;FastTransfer.c: 116: }
  2315                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2316  000202  5043               	movf	_rx_len,w,c
  2317  000204  B4D8               	btfsc	status,2,c
  2318  000206  D2A5               	goto	l4253
  2319                           
  2320                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2321  000208  5042               	movf	_rx_array_inx,w,c
  2322  00020A  A4D8               	btfss	status,2,c
  2323  00020C  D043               	goto	l4153
  2324  00020E                     l4135:
  2325  00020E  D801               	call	u3598
  2326  000210  D00A               	goto	u3599
  2327  000212                     u3598:
  2328  000212  0005               	push	
  2329  000214  6EFA               	movwf	pclath,c
  2330  000216  5030               	movf	_serial_available,w,c
  2331  000218  6EFD               	movwf	tosl,c
  2332  00021A  5031               	movf	_serial_available+1,w,c
  2333  00021C  6EFE               	movwf	tosh,c
  2334  00021E  50F8               	movf	tblptru,w,c
  2335  000220  6EFF               	movwf	tosu,c
  2336  000222  50FA               	movf	pclath,w,c
  2337  000224  0012               	return		;indir
  2338  000226                     u3599:
  2339  000226  BE1E               	btfsc	?_Receive_available+1,7,c
  2340  000228  D7F2               	goto	l4135
  2341  00022A  501E               	movf	?_Receive_available+1,w,c
  2342  00022C  E103               	bnz	l4137
  2343  00022E  041D               	decf	?_Receive_available,w,c
  2344  000230  A0D8               	btfss	status,0,c
  2345  000232  D7ED               	goto	l4135
  2346  000234                     l4137:
  2347                           
  2348                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2349  000234  D801               	call	u3618
  2350  000236  D00A               	goto	u3619
  2351  000238                     u3618:
  2352  000238  0005               	push	
  2353  00023A  6EFA               	movwf	pclath,c
  2354  00023C  5032               	movf	_serial_peek,w,c
  2355  00023E  6EFD               	movwf	tosl,c
  2356  000240  5033               	movf	_serial_peek+1,w,c
  2357  000242  6EFE               	movwf	tosh,c
  2358  000244  50F8               	movf	tblptru,w,c
  2359  000246  6EFF               	movwf	tosu,c
  2360  000248  50FA               	movf	pclath,w,c
  2361  00024A  0012               	return		;indir
  2362  00024C                     u3619:
  2363  00024C  0AFF               	xorlw	255
  2364  00024E  A4D8               	btfss	status,2,c
  2365  000250  D021               	goto	l4153
  2366                           
  2367                           ;FastTransfer.c: 125: CRCcheck();
  2368  000252  EC5F  F004         	call	_CRCcheck	;wreg free
  2369                           
  2370                           ;FastTransfer.c: 126: rx_len = 0;
  2371  000256  0E00               	movlw	0
  2372  000258  6E43               	movwf	_rx_len,c
  2373                           
  2374                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2375  00025A  0E00               	movlw	0
  2376  00025C  6E42               	movwf	_rx_array_inx,c
  2377                           
  2378                           ;FastTransfer.c: 128: return 0;
  2379  00025E  0E00               	movlw	0
  2380  000260  0012               	return	
  2381  000262                     l4149:
  2382                           
  2383                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2384  000262  D801               	call	u3638
  2385  000264  D00A               	goto	u3639
  2386  000266                     u3638:
  2387  000266  0005               	push	
  2388  000268  6EFA               	movwf	pclath,c
  2389  00026A  5034               	movf	_serial_read,w,c
  2390  00026C  6EFD               	movwf	tosl,c
  2391  00026E  5035               	movf	_serial_read+1,w,c
  2392  000270  6EFE               	movwf	tosh,c
  2393  000272  50F8               	movf	tblptru,w,c
  2394  000274  6EFF               	movwf	tosu,c
  2395  000276  50FA               	movf	pclath,w,c
  2396  000278  0012               	return		;indir
  2397  00027A                     u3639:
  2398  00027A  0100               	movlb	0	; () banked
  2399  00027C  6FDA               	movwf	??_receiveData& (0+255),b
  2400  00027E  5042               	movf	_rx_array_inx,w,c
  2401  000280  0D01               	mullw	1
  2402  000282  0E00               	movlw	low _rx_buffer
  2403  000284  24F3               	addwf	prodl,w,c
  2404  000286  6ED9               	movwf	fsr2l,c
  2405  000288  0E02               	movlw	high _rx_buffer
  2406  00028A  20F4               	addwfc	prodh,w,c
  2407  00028C  6EDA               	movwf	fsr2h,c
  2408  00028E  C0DA  FFDF         	movff	??_receiveData,indf2
  2409                           
  2410                           ; BSR set to: 0
  2411  000292  2A42               	incf	_rx_array_inx,f,c
  2412  000294                     l4153:
  2413  000294  D801               	call	u3648
  2414  000296  D00A               	goto	u3649
  2415  000298                     u3648:
  2416  000298  0005               	push	
  2417  00029A  6EFA               	movwf	pclath,c
  2418  00029C  5030               	movf	_serial_available,w,c
  2419  00029E  6EFD               	movwf	tosl,c
  2420  0002A0  5031               	movf	_serial_available+1,w,c
  2421  0002A2  6EFE               	movwf	tosh,c
  2422  0002A4  50F8               	movf	tblptru,w,c
  2423  0002A6  6EFF               	movwf	tosu,c
  2424  0002A8  50FA               	movf	pclath,w,c
  2425  0002AA  0012               	return		;indir
  2426  0002AC                     u3649:
  2427  0002AC  501D               	movf	?_Receive_available,w,c
  2428  0002AE  101E               	iorwf	?_Receive_available+1,w,c
  2429  0002B0  B4D8               	btfsc	status,2,c
  2430  0002B2  D004               	goto	l4157
  2431  0002B4  5042               	movf	_rx_array_inx,w,c
  2432  0002B6  5C43               	subwf	_rx_len,w,c
  2433  0002B8  B0D8               	btfsc	status,0,c
  2434  0002BA  D7D3               	goto	l4149
  2435  0002BC                     l4157:
  2436                           
  2437                           ;FastTransfer.c: 135: }
  2438                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2439  0002BC  5043               	movf	_rx_len,w,c
  2440  0002BE  0100               	movlb	0	; () banked
  2441  0002C0  6FDA               	movwf	??_receiveData& (0+255),b
  2442  0002C2  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2443  0002C4  0EFF               	movlw	255
  2444  0002C6  0100               	movlb	0	; () banked
  2445  0002C8  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2446  0002CA  0EFF               	movlw	255
  2447  0002CC  0100               	movlb	0	; () banked
  2448  0002CE  6FDD               	movwf	(??_receiveData+3)& (0+255),b
  2449  0002D0  5042               	movf	_rx_array_inx,w,c
  2450  0002D2  0100               	movlb	0	; () banked
  2451  0002D4  6FDE               	movwf	(??_receiveData+4)& (0+255),b
  2452  0002D6  6BDF               	clrf	(??_receiveData+5)& (0+255),b
  2453  0002D8  0100               	movlb	0	; () banked
  2454  0002DA  51DC               	movf	(??_receiveData+2)& (0+255),w,b
  2455  0002DC  0100               	movlb	0	; () banked
  2456  0002DE  27DE               	addwf	(??_receiveData+4)& (0+255),f,b
  2457  0002E0  0100               	movlb	0	; () banked
  2458  0002E2  51DD               	movf	(??_receiveData+3)& (0+255),w,b
  2459  0002E4  0100               	movlb	0	; () banked
  2460  0002E6  23DF               	addwfc	(??_receiveData+5)& (0+255),f,b
  2461  0002E8  0100               	movlb	0	; () banked
  2462  0002EA  51DA               	movf	??_receiveData& (0+255),w,b
  2463  0002EC  0100               	movlb	0	; () banked
  2464  0002EE  19DE               	xorwf	(??_receiveData+4)& (0+255),w,b
  2465  0002F0  E105               	bnz	u3671
  2466  0002F2  0100               	movlb	0	; () banked
  2467  0002F4  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2468  0002F6  0100               	movlb	0	; () banked
  2469  0002F8  19DF               	xorwf	(??_receiveData+5)& (0+255),w,b
  2470  0002FA  A4D8               	btfss	status,2,c
  2471  0002FC                     u3671:
  2472  0002FC  D22A               	goto	l4253
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2476  0002FE  0E00               	movlw	low _rx_buffer
  2477  000300  6E1B               	movwf	CRC8@data,c
  2478  000302  0E02               	movlw	high _rx_buffer
  2479  000304  6E1C               	movwf	CRC8@data+1,c
  2480  000306  C043  F01D         	movff	_rx_len,CRC8@len
  2481  00030A  EC1A  F00D         	call	_CRC8	;wreg free
  2482  00030E  6E3D               	movwf	_calc_CS,c
  2483                           
  2484                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2485  000310  0EFF               	movlw	255
  2486  000312  0100               	movlb	0	; () banked
  2487  000314  6FDA               	movwf	??_receiveData& (0+255),b
  2488  000316  0EFF               	movlw	255
  2489  000318  0100               	movlb	0	; () banked
  2490  00031A  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2491  00031C  5042               	movf	_rx_array_inx,w,c
  2492  00031E  0100               	movlb	0	; () banked
  2493  000320  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2494  000322  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2495  000324  0100               	movlb	0	; () banked
  2496  000326  51DA               	movf	??_receiveData& (0+255),w,b
  2497  000328  0100               	movlb	0	; () banked
  2498  00032A  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2499  00032C  0100               	movlb	0	; () banked
  2500  00032E  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2501  000330  0100               	movlb	0	; () banked
  2502  000332  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2503  000334  0E00               	movlw	low _rx_buffer
  2504  000336  0100               	movlb	0	; () banked
  2505  000338  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2506  00033A  6ED9               	movwf	fsr2l,c
  2507  00033C  0E02               	movlw	high _rx_buffer
  2508  00033E  0100               	movlb	0	; () banked
  2509  000340  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2510  000342  6EDA               	movwf	fsr2h,c
  2511  000344  503D               	movf	_calc_CS,w,c
  2512  000346  18DE               	xorwf	postinc2,w,c
  2513  000348  A4D8               	btfss	status,2,c
  2514  00034A  D13B               	goto	l4215
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;FastTransfer.c: 147: int r;
  2518                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2519  00034C  0E00               	movlw	0
  2520  00034E  0100               	movlb	0	; () banked
  2521  000350  6FEB               	movwf	(receiveData@r+1)& (0+255),b
  2522  000352  0E00               	movlw	0
  2523  000354  6FEA               	movwf	receiveData@r& (0+255),b
  2524  000356  D05C               	goto	l4175
  2525  000358                     l4165:
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2529  000358  0E00               	movlw	low _rx_buffer
  2530  00035A  0100               	movlb	0	; () banked
  2531  00035C  25EA               	addwf	receiveData@r& (0+255),w,b
  2532  00035E  6ED9               	movwf	fsr2l,c
  2533  000360  0E02               	movlw	high _rx_buffer
  2534  000362  0100               	movlb	0	; () banked
  2535  000364  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2536  000366  6EDA               	movwf	fsr2h,c
  2537  000368  503E               	movf	_maxDataAddress,w,c
  2538  00036A  5CDE               	subwf	postinc2,w,c
  2539  00036C  B0D8               	btfsc	status,0,c
  2540  00036E  D043               	goto	l4171
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2544  000370  0E01               	movlw	1
  2545  000372  0100               	movlb	0	; () banked
  2546  000374  25EA               	addwf	receiveData@r& (0+255),w,b
  2547  000376  0100               	movlb	0	; () banked
  2548  000378  6FDA               	movwf	??_receiveData& (0+255),b
  2549  00037A  0E00               	movlw	0
  2550  00037C  0100               	movlb	0	; () banked
  2551  00037E  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2552  000380  0100               	movlb	0	; () banked
  2553  000382  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2554  000384  0E00               	movlw	low _rx_buffer
  2555  000386  0100               	movlb	0	; () banked
  2556  000388  25DA               	addwf	??_receiveData& (0+255),w,b
  2557  00038A  6ED9               	movwf	fsr2l,c
  2558  00038C  0E02               	movlw	high _rx_buffer
  2559  00038E  0100               	movlb	0	; () banked
  2560  000390  21DB               	addwfc	(??_receiveData+1)& (0+255),w,b
  2561  000392  6EDA               	movwf	fsr2h,c
  2562  000394  50DF               	movf	indf2,w,c
  2563  000396  6E28               	movwf	_group,c
  2564                           
  2565                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2566  000398  0E02               	movlw	2
  2567  00039A  0100               	movlb	0	; () banked
  2568  00039C  25EA               	addwf	receiveData@r& (0+255),w,b
  2569  00039E  0100               	movlb	0	; () banked
  2570  0003A0  6FDA               	movwf	??_receiveData& (0+255),b
  2571  0003A2  0E00               	movlw	0
  2572  0003A4  0100               	movlb	0	; () banked
  2573  0003A6  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2574  0003A8  0100               	movlb	0	; () banked
  2575  0003AA  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2576  0003AC  0E00               	movlw	low _rx_buffer
  2577  0003AE  0100               	movlb	0	; () banked
  2578  0003B0  25DA               	addwf	??_receiveData& (0+255),w,b
  2579  0003B2  6ED9               	movwf	fsr2l,c
  2580  0003B4  0E02               	movlw	high _rx_buffer
  2581  0003B6  0100               	movlb	0	; () banked
  2582  0003B8  21DB               	addwfc	(??_receiveData+1)& (0+255),w,b
  2583  0003BA  6EDA               	movwf	fsr2h,c
  2584  0003BC  50DF               	movf	indf2,w,c
  2585  0003BE  6E29               	movwf	_group+1,c
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2589  0003C0  0E00               	movlw	low _rx_buffer
  2590  0003C2  0100               	movlb	0	; () banked
  2591  0003C4  25EA               	addwf	receiveData@r& (0+255),w,b
  2592  0003C6  6ED9               	movwf	fsr2l,c
  2593  0003C8  0E02               	movlw	high _rx_buffer
  2594  0003CA  0100               	movlb	0	; () banked
  2595  0003CC  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2596  0003CE  6EDA               	movwf	fsr2h,c
  2597  0003D0  50DF               	movf	indf2,w,c
  2598  0003D2  0100               	movlb	0	; () banked
  2599  0003D4  6FDA               	movwf	??_receiveData& (0+255),b
  2600  0003D6  0100               	movlb	0	; () banked
  2601  0003D8  51DA               	movf	??_receiveData& (0+255),w,b
  2602  0003DA  0D02               	mullw	2
  2603  0003DC  50F3               	movf	prodl,w,c
  2604  0003DE  0100               	movlb	0	; () banked
  2605  0003E0  2598               	addwf	_receiveArrayAddress& (0+255),w,b
  2606  0003E2  6ED9               	movwf	fsr2l,c
  2607  0003E4  50F4               	movf	prodh,w,c
  2608  0003E6  0100               	movlb	0	; () banked
  2609  0003E8  2199               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  2610  0003EA  6EDA               	movwf	fsr2h,c
  2611  0003EC  C028  FFDE         	movff	_group,postinc2
  2612  0003F0  C029  FFDD         	movff	_group+1,postdec2
  2613                           
  2614                           ;FastTransfer.c: 153: } else {
  2615  0003F4  D003               	goto	l4173
  2616  0003F6                     l4171:
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2620  0003F6  0100               	movlb	0	; () banked
  2621  0003F8  4B96               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2622  0003FA  2B97               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2623  0003FC                     l4173:
  2624                           
  2625                           ; BSR set to: 0
  2626  0003FC  0E03               	movlw	3
  2627  0003FE  0100               	movlb	0	; () banked
  2628  000400  25EA               	addwf	receiveData@r& (0+255),w,b
  2629  000402  0100               	movlb	0	; () banked
  2630  000404  6FEA               	movwf	receiveData@r& (0+255),b
  2631  000406  0E00               	movlw	0
  2632  000408  0100               	movlb	0	; () banked
  2633  00040A  21EB               	addwfc	(receiveData@r+1)& (0+255),w,b
  2634  00040C  0100               	movlb	0	; () banked
  2635  00040E  6FEB               	movwf	(receiveData@r+1)& (0+255),b
  2636  000410                     l4175:
  2637                           
  2638                           ; BSR set to: 0
  2639  000410  5043               	movf	_rx_len,w,c
  2640  000412  0100               	movlb	0	; () banked
  2641  000414  6FDA               	movwf	??_receiveData& (0+255),b
  2642  000416  6BDB               	clrf	(??_receiveData+1)& (0+255),b
  2643  000418  0100               	movlb	0	; () banked
  2644  00041A  51DA               	movf	??_receiveData& (0+255),w,b
  2645  00041C  0100               	movlb	0	; () banked
  2646  00041E  5DEA               	subwf	receiveData@r& (0+255),w,b
  2647  000420  0100               	movlb	0	; () banked
  2648  000422  51EB               	movf	(receiveData@r+1)& (0+255),w,b
  2649  000424  0A80               	xorlw	128
  2650  000426  0100               	movlb	0	; () banked
  2651  000428  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2652  00042A  0100               	movlb	0	; () banked
  2653  00042C  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2654  00042E  0A80               	xorlw	128
  2655  000430  0100               	movlb	0	; () banked
  2656  000432  59DC               	subwfb	(??_receiveData+2)& (0+255),w,b
  2657  000434  A0D8               	btfss	status,0,c
  2658  000436  D790               	goto	l4165
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;FastTransfer.c: 155: }
  2662                           ;FastTransfer.c: 156: }
  2663                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2664                           
  2665                           ; BSR set to: 0
  2666  000438  503C               	movf	_AKNAKsend,w,c
  2667  00043A  B4D8               	btfsc	status,2,c
  2668  00043C  D0BC               	goto	l4205
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;FastTransfer.c: 160: unsigned char holder[3];
  2672                           ;FastTransfer.c: 161: holder[0] = 255;
  2673  00043E  0100               	movlb	0	; () banked
  2674  000440  69E0               	setf	receiveData@holder& (0+255),b
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;FastTransfer.c: 162: holder[1] = 1;
  2678  000442  0E01               	movlw	1
  2679  000444  0100               	movlb	0	; () banked
  2680  000446  6FE1               	movwf	(receiveData@holder+1)& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2684  000448  0EFF               	movlw	255
  2685  00044A  0100               	movlb	0	; () banked
  2686  00044C  6FDA               	movwf	??_receiveData& (0+255),b
  2687  00044E  0EFF               	movlw	255
  2688  000450  0100               	movlb	0	; () banked
  2689  000452  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2690  000454  5042               	movf	_rx_array_inx,w,c
  2691  000456  0100               	movlb	0	; () banked
  2692  000458  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2693  00045A  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2694  00045C  0100               	movlb	0	; () banked
  2695  00045E  51DA               	movf	??_receiveData& (0+255),w,b
  2696  000460  0100               	movlb	0	; () banked
  2697  000462  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2698  000464  0100               	movlb	0	; () banked
  2699  000466  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2700  000468  0100               	movlb	0	; () banked
  2701  00046A  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2702  00046C  0E00               	movlw	low _rx_buffer
  2703  00046E  0100               	movlb	0	; () banked
  2704  000470  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2705  000472  6ED9               	movwf	fsr2l,c
  2706  000474  0E02               	movlw	high _rx_buffer
  2707  000476  0100               	movlb	0	; () banked
  2708  000478  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2709  00047A  6EDA               	movwf	fsr2h,c
  2710  00047C  50DF               	movf	indf2,w,c
  2711  00047E  0100               	movlb	0	; () banked
  2712  000480  6FE2               	movwf	(receiveData@holder+2)& (0+255),b
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2716  000482  0EE0               	movlw	low receiveData@holder
  2717  000484  6E1B               	movwf	CRC8@data,c
  2718  000486  0E00               	movlw	high receiveData@holder
  2719  000488  6E1C               	movwf	CRC8@data+1,c
  2720  00048A  0E03               	movlw	3
  2721  00048C  6E1D               	movwf	CRC8@len,c
  2722  00048E  EC1A  F00D         	call	_CRC8	;wreg free
  2723  000492  0100               	movlb	0	; () banked
  2724  000494  6FE6               	movwf	receiveData@crcHolder& (0+255),b
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;FastTransfer.c: 165: serial_write(0x06);
  2728  000496  D801               	call	u3728
  2729  000498  D00B               	goto	l4189
  2730  00049A                     u3728:
  2731  00049A  0005               	push	
  2732  00049C  6EFA               	movwf	pclath,c
  2733  00049E  5036               	movf	_serial_write,w,c
  2734  0004A0  6EFD               	movwf	tosl,c
  2735  0004A2  5037               	movf	_serial_write+1,w,c
  2736  0004A4  6EFE               	movwf	tosh,c
  2737  0004A6  50F8               	movf	tblptru,w,c
  2738  0004A8  6EFF               	movwf	tosu,c
  2739  0004AA  50FA               	movf	pclath,w,c
  2740  0004AC  0E06               	movlw	6
  2741  0004AE  0012               	return		;indir
  2742  0004B0                     l4189:
  2743                           
  2744                           ;FastTransfer.c: 166: serial_write(0x85);
  2745  0004B0  D801               	call	u3738
  2746  0004B2  D00B               	goto	l4191
  2747  0004B4                     u3738:
  2748  0004B4  0005               	push	
  2749  0004B6  6EFA               	movwf	pclath,c
  2750  0004B8  5036               	movf	_serial_write,w,c
  2751  0004BA  6EFD               	movwf	tosl,c
  2752  0004BC  5037               	movf	_serial_write+1,w,c
  2753  0004BE  6EFE               	movwf	tosh,c
  2754  0004C0  50F8               	movf	tblptru,w,c
  2755  0004C2  6EFF               	movwf	tosu,c
  2756  0004C4  50FA               	movf	pclath,w,c
  2757  0004C6  0E85               	movlw	133
  2758  0004C8  0012               	return		;indir
  2759  0004CA                     l4191:
  2760                           
  2761                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2762  0004CA  D801               	call	u3748
  2763  0004CC  D00B               	goto	l4193
  2764  0004CE                     u3748:
  2765  0004CE  0005               	push	
  2766  0004D0  6EFA               	movwf	pclath,c
  2767  0004D2  5036               	movf	_serial_write,w,c
  2768  0004D4  6EFD               	movwf	tosl,c
  2769  0004D6  5037               	movf	_serial_write+1,w,c
  2770  0004D8  6EFE               	movwf	tosh,c
  2771  0004DA  50F8               	movf	tblptru,w,c
  2772  0004DC  6EFF               	movwf	tosu,c
  2773  0004DE  50FA               	movf	pclath,w,c
  2774  0004E0  5040               	movf	_returnAddress,w,c
  2775  0004E2  0012               	return		;indir
  2776  0004E4                     l4193:
  2777                           
  2778                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2779  0004E4  D801               	call	u3758
  2780  0004E6  D00B               	goto	l4195
  2781  0004E8                     u3758:
  2782  0004E8  0005               	push	
  2783  0004EA  6EFA               	movwf	pclath,c
  2784  0004EC  5036               	movf	_serial_write,w,c
  2785  0004EE  6EFD               	movwf	tosl,c
  2786  0004F0  5037               	movf	_serial_write+1,w,c
  2787  0004F2  6EFE               	movwf	tosh,c
  2788  0004F4  50F8               	movf	tblptru,w,c
  2789  0004F6  6EFF               	movwf	tosu,c
  2790  0004F8  50FA               	movf	pclath,w,c
  2791  0004FA  503F               	movf	_moduleAddress,w,c
  2792  0004FC  0012               	return		;indir
  2793  0004FE                     l4195:
  2794                           
  2795                           ;FastTransfer.c: 169: serial_write(3);
  2796  0004FE  D801               	call	u3768
  2797  000500  D00B               	goto	l4197
  2798  000502                     u3768:
  2799  000502  0005               	push	
  2800  000504  6EFA               	movwf	pclath,c
  2801  000506  5036               	movf	_serial_write,w,c
  2802  000508  6EFD               	movwf	tosl,c
  2803  00050A  5037               	movf	_serial_write+1,w,c
  2804  00050C  6EFE               	movwf	tosh,c
  2805  00050E  50F8               	movf	tblptru,w,c
  2806  000510  6EFF               	movwf	tosu,c
  2807  000512  50FA               	movf	pclath,w,c
  2808  000514  0E03               	movlw	3
  2809  000516  0012               	return		;indir
  2810  000518                     l4197:
  2811                           
  2812                           ;FastTransfer.c: 170: serial_write(255);
  2813  000518  D801               	call	u3778
  2814  00051A  D00B               	goto	l4199
  2815  00051C                     u3778:
  2816  00051C  0005               	push	
  2817  00051E  6EFA               	movwf	pclath,c
  2818  000520  5036               	movf	_serial_write,w,c
  2819  000522  6EFD               	movwf	tosl,c
  2820  000524  5037               	movf	_serial_write+1,w,c
  2821  000526  6EFE               	movwf	tosh,c
  2822  000528  50F8               	movf	tblptru,w,c
  2823  00052A  6EFF               	movwf	tosu,c
  2824  00052C  50FA               	movf	pclath,w,c
  2825  00052E  0EFF               	movlw	255
  2826  000530  0012               	return		;indir
  2827  000532                     l4199:
  2828                           
  2829                           ;FastTransfer.c: 171: serial_write(1);
  2830  000532  D801               	call	u3788
  2831  000534  D00B               	goto	l4201
  2832  000536                     u3788:
  2833  000536  0005               	push	
  2834  000538  6EFA               	movwf	pclath,c
  2835  00053A  5036               	movf	_serial_write,w,c
  2836  00053C  6EFD               	movwf	tosl,c
  2837  00053E  5037               	movf	_serial_write+1,w,c
  2838  000540  6EFE               	movwf	tosh,c
  2839  000542  50F8               	movf	tblptru,w,c
  2840  000544  6EFF               	movwf	tosu,c
  2841  000546  50FA               	movf	pclath,w,c
  2842  000548  0E01               	movlw	1
  2843  00054A  0012               	return		;indir
  2844  00054C                     l4201:
  2845                           
  2846                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2847  00054C  D801               	call	u3798
  2848  00054E  D025               	goto	l4203
  2849  000550                     u3798:
  2850  000550  0005               	push	
  2851  000552  6EFA               	movwf	pclath,c
  2852  000554  5036               	movf	_serial_write,w,c
  2853  000556  6EFD               	movwf	tosl,c
  2854  000558  5037               	movf	_serial_write+1,w,c
  2855  00055A  6EFE               	movwf	tosh,c
  2856  00055C  50F8               	movf	tblptru,w,c
  2857  00055E  6EFF               	movwf	tosu,c
  2858  000560  50FA               	movf	pclath,w,c
  2859  000562  0EFF               	movlw	255
  2860  000564  0100               	movlb	0	; () banked
  2861  000566  6FDA               	movwf	??_receiveData& (0+255),b
  2862  000568  0EFF               	movlw	255
  2863  00056A  0100               	movlb	0	; () banked
  2864  00056C  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2865  00056E  5042               	movf	_rx_array_inx,w,c
  2866  000570  0100               	movlb	0	; () banked
  2867  000572  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2868  000574  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2869  000576  0100               	movlb	0	; () banked
  2870  000578  51DA               	movf	??_receiveData& (0+255),w,b
  2871  00057A  0100               	movlb	0	; () banked
  2872  00057C  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2873  00057E  0100               	movlb	0	; () banked
  2874  000580  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2875  000582  0100               	movlb	0	; () banked
  2876  000584  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2877  000586  0E00               	movlw	low _rx_buffer
  2878  000588  0100               	movlb	0	; () banked
  2879  00058A  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2880  00058C  6ED9               	movwf	fsr2l,c
  2881  00058E  0E02               	movlw	high _rx_buffer
  2882  000590  0100               	movlb	0	; () banked
  2883  000592  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2884  000594  6EDA               	movwf	fsr2h,c
  2885  000596  50DF               	movf	indf2,w,c
  2886  000598  0012               	return		;indir
  2887  00059A                     l4203:
  2888                           
  2889                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2890  00059A  D801               	call	u3808
  2891  00059C  D00C               	goto	l4205
  2892  00059E                     u3808:
  2893  00059E  0005               	push	
  2894  0005A0  6EFA               	movwf	pclath,c
  2895  0005A2  5036               	movf	_serial_write,w,c
  2896  0005A4  6EFD               	movwf	tosl,c
  2897  0005A6  5037               	movf	_serial_write+1,w,c
  2898  0005A8  6EFE               	movwf	tosh,c
  2899  0005AA  50F8               	movf	tblptru,w,c
  2900  0005AC  6EFF               	movwf	tosu,c
  2901  0005AE  50FA               	movf	pclath,w,c
  2902  0005B0  0100               	movlb	0	; () banked
  2903  0005B2  51E6               	movf	receiveData@crcHolder& (0+255),w,b
  2904  0005B4  0012               	return		;indir
  2905  0005B6                     l4205:
  2906                           
  2907                           ;FastTransfer.c: 174: }
  2908                           ;FastTransfer.c: 178: rx_len = 0;
  2909  0005B6  0E00               	movlw	0
  2910  0005B8  6E43               	movwf	_rx_len,c
  2911                           
  2912                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2913  0005BA  0E00               	movlw	0
  2914  0005BC  6E42               	movwf	_rx_array_inx,c
  2915                           
  2916                           ;FastTransfer.c: 180: return 1;
  2917  0005BE  0E01               	movlw	1
  2918  0005C0  0012               	return	
  2919  0005C2                     l4215:
  2920                           
  2921                           ;FastTransfer.c: 182: crcErrorCounter++;
  2922  0005C2  0100               	movlb	0	; () banked
  2923  0005C4  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  2924  0005C6  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2928  0005C8  503C               	movf	_AKNAKsend,w,c
  2929  0005CA  B4D8               	btfsc	status,2,c
  2930  0005CC  D0BC               	goto	l4245
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;FastTransfer.c: 185: unsigned char holder[3];
  2934                           ;FastTransfer.c: 186: holder[0] = 255;
  2935  0005CE  0100               	movlb	0	; () banked
  2936  0005D0  69E3               	setf	receiveData@holder_1395& (0+255),b
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;FastTransfer.c: 187: holder[1] = 2;
  2940  0005D2  0E02               	movlw	2
  2941  0005D4  0100               	movlb	0	; () banked
  2942  0005D6  6FE4               	movwf	(receiveData@holder_1395+1)& (0+255),b
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2946  0005D8  0EFF               	movlw	255
  2947  0005DA  0100               	movlb	0	; () banked
  2948  0005DC  6FDA               	movwf	??_receiveData& (0+255),b
  2949  0005DE  0EFF               	movlw	255
  2950  0005E0  0100               	movlb	0	; () banked
  2951  0005E2  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  2952  0005E4  5042               	movf	_rx_array_inx,w,c
  2953  0005E6  0100               	movlb	0	; () banked
  2954  0005E8  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  2955  0005EA  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  2956  0005EC  0100               	movlb	0	; () banked
  2957  0005EE  51DA               	movf	??_receiveData& (0+255),w,b
  2958  0005F0  0100               	movlb	0	; () banked
  2959  0005F2  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  2960  0005F4  0100               	movlb	0	; () banked
  2961  0005F6  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  2962  0005F8  0100               	movlb	0	; () banked
  2963  0005FA  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  2964  0005FC  0E00               	movlw	low _rx_buffer
  2965  0005FE  0100               	movlb	0	; () banked
  2966  000600  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  2967  000602  6ED9               	movwf	fsr2l,c
  2968  000604  0E02               	movlw	high _rx_buffer
  2969  000606  0100               	movlb	0	; () banked
  2970  000608  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  2971  00060A  6EDA               	movwf	fsr2h,c
  2972  00060C  50DF               	movf	indf2,w,c
  2973  00060E  0100               	movlb	0	; () banked
  2974  000610  6FE5               	movwf	(receiveData@holder_1395+2)& (0+255),b
  2975                           
  2976                           ; BSR set to: 0
  2977                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2978  000612  0EE3               	movlw	low receiveData@holder_1395
  2979  000614  6E1B               	movwf	CRC8@data,c
  2980  000616  0E00               	movlw	high receiveData@holder_1395
  2981  000618  6E1C               	movwf	CRC8@data+1,c
  2982  00061A  0E03               	movlw	3
  2983  00061C  6E1D               	movwf	CRC8@len,c
  2984  00061E  EC1A  F00D         	call	_CRC8
  2985  000622  0100               	movlb	0	; () banked
  2986  000624  6FE7               	movwf	receiveData@crcHolder_1396& (0+255),b
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;FastTransfer.c: 190: serial_write(0x06);
  2990  000626  D801               	call	u3828
  2991  000628  D00B               	goto	l4229
  2992  00062A                     u3828:
  2993  00062A  0005               	push	
  2994  00062C  6EFA               	movwf	pclath,c
  2995  00062E  5036               	movf	_serial_write,w,c
  2996  000630  6EFD               	movwf	tosl,c
  2997  000632  5037               	movf	_serial_write+1,w,c
  2998  000634  6EFE               	movwf	tosh,c
  2999  000636  50F8               	movf	tblptru,w,c
  3000  000638  6EFF               	movwf	tosu,c
  3001  00063A  50FA               	movf	pclath,w,c
  3002  00063C  0E06               	movlw	6
  3003  00063E  0012               	return		;indir
  3004  000640                     l4229:
  3005                           
  3006                           ;FastTransfer.c: 191: serial_write(0x85);
  3007  000640  D801               	call	u3838
  3008  000642  D00B               	goto	l4231
  3009  000644                     u3838:
  3010  000644  0005               	push	
  3011  000646  6EFA               	movwf	pclath,c
  3012  000648  5036               	movf	_serial_write,w,c
  3013  00064A  6EFD               	movwf	tosl,c
  3014  00064C  5037               	movf	_serial_write+1,w,c
  3015  00064E  6EFE               	movwf	tosh,c
  3016  000650  50F8               	movf	tblptru,w,c
  3017  000652  6EFF               	movwf	tosu,c
  3018  000654  50FA               	movf	pclath,w,c
  3019  000656  0E85               	movlw	133
  3020  000658  0012               	return		;indir
  3021  00065A                     l4231:
  3022                           
  3023                           ;FastTransfer.c: 192: serial_write(returnAddress);
  3024  00065A  D801               	call	u3848
  3025  00065C  D00B               	goto	l4233
  3026  00065E                     u3848:
  3027  00065E  0005               	push	
  3028  000660  6EFA               	movwf	pclath,c
  3029  000662  5036               	movf	_serial_write,w,c
  3030  000664  6EFD               	movwf	tosl,c
  3031  000666  5037               	movf	_serial_write+1,w,c
  3032  000668  6EFE               	movwf	tosh,c
  3033  00066A  50F8               	movf	tblptru,w,c
  3034  00066C  6EFF               	movwf	tosu,c
  3035  00066E  50FA               	movf	pclath,w,c
  3036  000670  5040               	movf	_returnAddress,w,c
  3037  000672  0012               	return		;indir
  3038  000674                     l4233:
  3039                           
  3040                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3041  000674  D801               	call	u3858
  3042  000676  D00B               	goto	l4235
  3043  000678                     u3858:
  3044  000678  0005               	push	
  3045  00067A  6EFA               	movwf	pclath,c
  3046  00067C  5036               	movf	_serial_write,w,c
  3047  00067E  6EFD               	movwf	tosl,c
  3048  000680  5037               	movf	_serial_write+1,w,c
  3049  000682  6EFE               	movwf	tosh,c
  3050  000684  50F8               	movf	tblptru,w,c
  3051  000686  6EFF               	movwf	tosu,c
  3052  000688  50FA               	movf	pclath,w,c
  3053  00068A  503F               	movf	_moduleAddress,w,c
  3054  00068C  0012               	return		;indir
  3055  00068E                     l4235:
  3056                           
  3057                           ;FastTransfer.c: 194: serial_write(3);
  3058  00068E  D801               	call	u3868
  3059  000690  D00B               	goto	l4237
  3060  000692                     u3868:
  3061  000692  0005               	push	
  3062  000694  6EFA               	movwf	pclath,c
  3063  000696  5036               	movf	_serial_write,w,c
  3064  000698  6EFD               	movwf	tosl,c
  3065  00069A  5037               	movf	_serial_write+1,w,c
  3066  00069C  6EFE               	movwf	tosh,c
  3067  00069E  50F8               	movf	tblptru,w,c
  3068  0006A0  6EFF               	movwf	tosu,c
  3069  0006A2  50FA               	movf	pclath,w,c
  3070  0006A4  0E03               	movlw	3
  3071  0006A6  0012               	return		;indir
  3072  0006A8                     l4237:
  3073                           
  3074                           ;FastTransfer.c: 195: serial_write(255);
  3075  0006A8  D801               	call	u3878
  3076  0006AA  D00B               	goto	l4239
  3077  0006AC                     u3878:
  3078  0006AC  0005               	push	
  3079  0006AE  6EFA               	movwf	pclath,c
  3080  0006B0  5036               	movf	_serial_write,w,c
  3081  0006B2  6EFD               	movwf	tosl,c
  3082  0006B4  5037               	movf	_serial_write+1,w,c
  3083  0006B6  6EFE               	movwf	tosh,c
  3084  0006B8  50F8               	movf	tblptru,w,c
  3085  0006BA  6EFF               	movwf	tosu,c
  3086  0006BC  50FA               	movf	pclath,w,c
  3087  0006BE  0EFF               	movlw	255
  3088  0006C0  0012               	return		;indir
  3089  0006C2                     l4239:
  3090                           
  3091                           ;FastTransfer.c: 196: serial_write(2);
  3092  0006C2  D801               	call	u3888
  3093  0006C4  D00B               	goto	l4241
  3094  0006C6                     u3888:
  3095  0006C6  0005               	push	
  3096  0006C8  6EFA               	movwf	pclath,c
  3097  0006CA  5036               	movf	_serial_write,w,c
  3098  0006CC  6EFD               	movwf	tosl,c
  3099  0006CE  5037               	movf	_serial_write+1,w,c
  3100  0006D0  6EFE               	movwf	tosh,c
  3101  0006D2  50F8               	movf	tblptru,w,c
  3102  0006D4  6EFF               	movwf	tosu,c
  3103  0006D6  50FA               	movf	pclath,w,c
  3104  0006D8  0E02               	movlw	2
  3105  0006DA  0012               	return		;indir
  3106  0006DC                     l4241:
  3107                           
  3108                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3109  0006DC  D801               	call	u3898
  3110  0006DE  D025               	goto	l4243
  3111  0006E0                     u3898:
  3112  0006E0  0005               	push	
  3113  0006E2  6EFA               	movwf	pclath,c
  3114  0006E4  5036               	movf	_serial_write,w,c
  3115  0006E6  6EFD               	movwf	tosl,c
  3116  0006E8  5037               	movf	_serial_write+1,w,c
  3117  0006EA  6EFE               	movwf	tosh,c
  3118  0006EC  50F8               	movf	tblptru,w,c
  3119  0006EE  6EFF               	movwf	tosu,c
  3120  0006F0  50FA               	movf	pclath,w,c
  3121  0006F2  0EFF               	movlw	255
  3122  0006F4  0100               	movlb	0	; () banked
  3123  0006F6  6FDA               	movwf	??_receiveData& (0+255),b
  3124  0006F8  0EFF               	movlw	255
  3125  0006FA  0100               	movlb	0	; () banked
  3126  0006FC  6FDB               	movwf	(??_receiveData+1)& (0+255),b
  3127  0006FE  5042               	movf	_rx_array_inx,w,c
  3128  000700  0100               	movlb	0	; () banked
  3129  000702  6FDC               	movwf	(??_receiveData+2)& (0+255),b
  3130  000704  6BDD               	clrf	(??_receiveData+3)& (0+255),b
  3131  000706  0100               	movlb	0	; () banked
  3132  000708  51DA               	movf	??_receiveData& (0+255),w,b
  3133  00070A  0100               	movlb	0	; () banked
  3134  00070C  27DC               	addwf	(??_receiveData+2)& (0+255),f,b
  3135  00070E  0100               	movlb	0	; () banked
  3136  000710  51DB               	movf	(??_receiveData+1)& (0+255),w,b
  3137  000712  0100               	movlb	0	; () banked
  3138  000714  23DD               	addwfc	(??_receiveData+3)& (0+255),f,b
  3139  000716  0E00               	movlw	low _rx_buffer
  3140  000718  0100               	movlb	0	; () banked
  3141  00071A  25DC               	addwf	(??_receiveData+2)& (0+255),w,b
  3142  00071C  6ED9               	movwf	fsr2l,c
  3143  00071E  0E02               	movlw	high _rx_buffer
  3144  000720  0100               	movlb	0	; () banked
  3145  000722  21DD               	addwfc	(??_receiveData+3)& (0+255),w,b
  3146  000724  6EDA               	movwf	fsr2h,c
  3147  000726  50DF               	movf	indf2,w,c
  3148  000728  0012               	return		;indir
  3149  00072A                     l4243:
  3150                           
  3151                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3152  00072A  D801               	call	u3908
  3153  00072C  D00C               	goto	l4245
  3154  00072E                     u3908:
  3155  00072E  0005               	push	
  3156  000730  6EFA               	movwf	pclath,c
  3157  000732  5036               	movf	_serial_write,w,c
  3158  000734  6EFD               	movwf	tosl,c
  3159  000736  5037               	movf	_serial_write+1,w,c
  3160  000738  6EFE               	movwf	tosh,c
  3161  00073A  50F8               	movf	tblptru,w,c
  3162  00073C  6EFF               	movwf	tosu,c
  3163  00073E  50FA               	movf	pclath,w,c
  3164  000740  0100               	movlb	0	; () banked
  3165  000742  51E7               	movf	receiveData@crcHolder_1396& (0+255),w,b
  3166  000744  0012               	return		;indir
  3167  000746                     l4245:
  3168                           
  3169                           ;FastTransfer.c: 199: }
  3170                           ;FastTransfer.c: 202: rx_len = 0;
  3171  000746  0E00               	movlw	0
  3172  000748  6E43               	movwf	_rx_len,c
  3173                           
  3174                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3175  00074A  0E00               	movlw	0
  3176  00074C  6E42               	movwf	_rx_array_inx,c
  3177                           
  3178                           ;FastTransfer.c: 204: return 0;
  3179  00074E  0E00               	movlw	0
  3180  000750  0012               	return	
  3181  000752                     l4253:
  3182                           
  3183                           ;FastTransfer.c: 205: }
  3184                           ;FastTransfer.c: 206: }
  3185                           ;FastTransfer.c: 207: }
  3186                           ;FastTransfer.c: 210: return 0;
  3187  000752  0E00               	movlw	0
  3188  000754  0012               	return	
  3189  000756                     __end_of_receiveData:
  3190                           	opt stack 0
  3191                           tosu	equ	0xFFF
  3192                           tosh	equ	0xFFE
  3193                           tosl	equ	0xFFD
  3194                           pclath	equ	0xFFA
  3195                           tblptru	equ	0xFF8
  3196                           tblptrh	equ	0xFF7
  3197                           tblptrl	equ	0xFF6
  3198                           tablat	equ	0xFF5
  3199                           prodh	equ	0xFF4
  3200                           prodl	equ	0xFF3
  3201                           intcon	equ	0xFF2
  3202                           postinc0	equ	0xFEE
  3203                           wreg	equ	0xFE8
  3204                           indf2	equ	0xFDF
  3205                           postinc2	equ	0xFDE
  3206                           postdec2	equ	0xFDD
  3207                           plusw2	equ	0xFDB
  3208                           fsr2h	equ	0xFDA
  3209                           fsr2l	equ	0xFD9
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _Send_put *****************
  3213 ;; Defined at:
  3214 ;;		line 130 in file "UART.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;  _data           1    wreg     unsigned char 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  _data           1   37[COMRAM] unsigned char 
  3219 ;; Return value:  Size  Location     Type
  3220 ;;		None               void
  3221 ;; Registers used:
  3222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3228 ;;      Params:         0       0       0       0       0       0       0
  3229 ;;      Locals:         1       0       0       0       0       0       0
  3230 ;;      Temps:          0       0       0       0       0       0       0
  3231 ;;      Totals:         1       0       0       0       0       0       0
  3232 ;;Total ram usage:        1 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:    6
  3235 ;; This function calls:
  3236 ;;		_UART_buff_get
  3237 ;;		_UART_buff_put
  3238 ;; This function is called by:
  3239 ;;		_SYSTEM_Initialize
  3240 ;;		_putch
  3241 ;;		_sendData
  3242 ;;		_receiveData
  3243 ;; This function uses a non-reentrant model
  3244 ;;
  3245                           
  3246                           	psect	text10
  3247  001BE0                     __ptext10:
  3248                           	opt stack 0
  3249  001BE0                     _Send_put:
  3250                           	opt stack 21
  3251                           
  3252                           ;incstack = 0
  3253                           ;Send_put@_data stored from wreg
  3254  001BE0  6E26               	movwf	Send_put@_data,c
  3255                           
  3256                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3257  001BE2  0E00               	movlw	low _output_buffer
  3258  001BE4  6E21               	movwf	UART_buff_put@_this,c
  3259  001BE6  0E04               	movlw	high _output_buffer
  3260  001BE8  6E22               	movwf	UART_buff_put@_this+1,c
  3261  001BEA  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3262  001BEE  ECAE  F005         	call	_UART_buff_put
  3263                           
  3264                           ;UART.c: 132: if (Transmit_stall == 1) {
  3265  001BF2  0444               	decf	_Transmit_stall,w,c
  3266  001BF4  A4D8               	btfss	status,2,c
  3267  001BF6  0012               	return	
  3268                           
  3269                           ;UART.c: 133: Transmit_stall = 0;
  3270  001BF8  0E00               	movlw	0
  3271  001BFA  6E44               	movwf	_Transmit_stall,c
  3272                           
  3273                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3274  001BFC  0E00               	movlw	low _output_buffer
  3275  001BFE  6E21               	movwf	UART_buff_get@_this,c
  3276  001C00  0E04               	movlw	high _output_buffer
  3277  001C02  6E22               	movwf	UART_buff_get@_this+1,c
  3278  001C04  EC2D  F00A         	call	_UART_buff_get	;wreg free
  3279  001C08  6EAD               	movwf	4013,c	;volatile
  3280                           
  3281                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3282  001C0A  889D               	bsf	3997,4,c	;volatile
  3283  001C0C  0012               	return	
  3284  001C0E                     __end_of_Send_put:
  3285                           	opt stack 0
  3286                           tosu	equ	0xFFF
  3287                           tosh	equ	0xFFE
  3288                           tosl	equ	0xFFD
  3289                           pclath	equ	0xFFA
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           plusw2	equ	0xFDB
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _UART_buff_put *****************
  3308 ;; Defined at:
  3309 ;;		line 68 in file "UART.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3312 ;;		 -> output_buffer(206), input_buffer(206), 
  3313 ;;  c               1   34[COMRAM] const unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3325 ;;      Params:         3       0       0       0       0       0       0
  3326 ;;      Locals:         0       0       0       0       0       0       0
  3327 ;;      Temps:          2       0       0       0       0       0       0
  3328 ;;      Totals:         5       0       0       0       0       0       0
  3329 ;;Total ram usage:        5 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    5
  3332 ;; This function calls:
  3333 ;;		_UART_buff_modulo_inc
  3334 ;; This function is called by:
  3335 ;;		_Send_put
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text11
  3340  000B5C                     __ptext11:
  3341                           	opt stack 0
  3342  000B5C                     _UART_buff_put:
  3343                           	opt stack 21
  3344                           
  3345                           ;UART.c: 69: if (_this->count < 200) {
  3346                           
  3347                           ;incstack = 0
  3348  000B5C  EE20 F0CC          	lfsr	2,204
  3349  000B60  5021               	movf	UART_buff_put@_this,w,c
  3350  000B62  26D9               	addwf	fsr2l,f,c
  3351  000B64  5022               	movf	UART_buff_put@_this+1,w,c
  3352  000B66  22DA               	addwfc	fsr2h,f,c
  3353  000B68  0E01               	movlw	1
  3354  000B6A  BEDB               	btfsc	plusw2,7,c
  3355  000B6C  D007               	goto	l3685
  3356  000B6E  0E01               	movlw	1
  3357  000B70  50DB               	movf	plusw2,w,c
  3358  000B72  E13A               	bnz	l3691
  3359  000B74  0EC8               	movlw	200
  3360  000B76  5CDE               	subwf	postinc2,w,c
  3361  000B78  B0D8               	btfsc	status,0,c
  3362  000B7A  D036               	goto	l3691
  3363  000B7C                     l3685:
  3364                           
  3365                           ;UART.c: 70: _this->buf[_this->head] = c;
  3366  000B7C  EE20 F0C8          	lfsr	2,200
  3367  000B80  5021               	movf	UART_buff_put@_this,w,c
  3368  000B82  26D9               	addwf	fsr2l,f,c
  3369  000B84  5022               	movf	UART_buff_put@_this+1,w,c
  3370  000B86  22DA               	addwfc	fsr2h,f,c
  3371  000B88  CFDE F024          	movff	postinc2,??_UART_buff_put
  3372  000B8C  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3373  000B90  5024               	movf	??_UART_buff_put,w,c
  3374  000B92  2421               	addwf	UART_buff_put@_this,w,c
  3375  000B94  6ED9               	movwf	fsr2l,c
  3376  000B96  5025               	movf	??_UART_buff_put+1,w,c
  3377  000B98  2022               	addwfc	UART_buff_put@_this+1,w,c
  3378  000B9A  6EDA               	movwf	fsr2h,c
  3379  000B9C  C023  FFDF         	movff	UART_buff_put@c,indf2
  3380                           
  3381                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3382  000BA0  EE20 F0C8          	lfsr	2,200
  3383  000BA4  5021               	movf	UART_buff_put@_this,w,c
  3384  000BA6  26D9               	addwf	fsr2l,f,c
  3385  000BA8  5022               	movf	UART_buff_put@_this+1,w,c
  3386  000BAA  22DA               	addwfc	fsr2h,f,c
  3387  000BAC  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3388  000BB0  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3389  000BB4  0E00               	movlw	0
  3390  000BB6  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3391  000BB8  0EC8               	movlw	200
  3392  000BBA  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3393  000BBC  EC32  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3394  000BC0  EE20 F0C8          	lfsr	2,200
  3395  000BC4  5021               	movf	UART_buff_put@_this,w,c
  3396  000BC6  26D9               	addwf	fsr2l,f,c
  3397  000BC8  5022               	movf	UART_buff_put@_this+1,w,c
  3398  000BCA  22DA               	addwfc	fsr2h,f,c
  3399  000BCC  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3400  000BD0  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3401                           
  3402                           ;UART.c: 72: ++_this->count;
  3403  000BD4  EE20 F0CC          	lfsr	2,204
  3404  000BD8  5021               	movf	UART_buff_put@_this,w,c
  3405  000BDA  26D9               	addwf	fsr2l,f,c
  3406  000BDC  5022               	movf	UART_buff_put@_this+1,w,c
  3407  000BDE  22DA               	addwfc	fsr2h,f,c
  3408  000BE0  2ADE               	incf	postinc2,f,c
  3409  000BE2  0E00               	movlw	0
  3410  000BE4  22DD               	addwfc	postdec2,f,c
  3411                           
  3412                           ;UART.c: 73: } else {
  3413  000BE6  0012               	return	
  3414  000BE8                     l3691:
  3415                           
  3416                           ;UART.c: 74: _this->buf[_this->head] = c;
  3417  000BE8  EE20 F0C8          	lfsr	2,200
  3418  000BEC  5021               	movf	UART_buff_put@_this,w,c
  3419  000BEE  26D9               	addwf	fsr2l,f,c
  3420  000BF0  5022               	movf	UART_buff_put@_this+1,w,c
  3421  000BF2  22DA               	addwfc	fsr2h,f,c
  3422  000BF4  CFDE F024          	movff	postinc2,??_UART_buff_put
  3423  000BF8  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3424  000BFC  5024               	movf	??_UART_buff_put,w,c
  3425  000BFE  2421               	addwf	UART_buff_put@_this,w,c
  3426  000C00  6ED9               	movwf	fsr2l,c
  3427  000C02  5025               	movf	??_UART_buff_put+1,w,c
  3428  000C04  2022               	addwfc	UART_buff_put@_this+1,w,c
  3429  000C06  6EDA               	movwf	fsr2h,c
  3430  000C08  C023  FFDF         	movff	UART_buff_put@c,indf2
  3431                           
  3432                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3433  000C0C  EE20 F0C8          	lfsr	2,200
  3434  000C10  5021               	movf	UART_buff_put@_this,w,c
  3435  000C12  26D9               	addwf	fsr2l,f,c
  3436  000C14  5022               	movf	UART_buff_put@_this+1,w,c
  3437  000C16  22DA               	addwfc	fsr2h,f,c
  3438  000C18  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3439  000C1C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3440  000C20  0E00               	movlw	0
  3441  000C22  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3442  000C24  0EC8               	movlw	200
  3443  000C26  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3444  000C28  EC32  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3445  000C2C  EE20 F0C8          	lfsr	2,200
  3446  000C30  5021               	movf	UART_buff_put@_this,w,c
  3447  000C32  26D9               	addwf	fsr2l,f,c
  3448  000C34  5022               	movf	UART_buff_put@_this+1,w,c
  3449  000C36  22DA               	addwfc	fsr2h,f,c
  3450  000C38  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3451  000C3C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3452                           
  3453                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3454  000C40  EE20 F0CA          	lfsr	2,202
  3455  000C44  5021               	movf	UART_buff_put@_this,w,c
  3456  000C46  26D9               	addwf	fsr2l,f,c
  3457  000C48  5022               	movf	UART_buff_put@_this+1,w,c
  3458  000C4A  22DA               	addwfc	fsr2h,f,c
  3459  000C4C  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3460  000C50  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3461  000C54  0E00               	movlw	0
  3462  000C56  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3463  000C58  0EC8               	movlw	200
  3464  000C5A  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3465  000C5C  EC32  F00E         	call	_UART_buff_modulo_inc	;wreg free
  3466  000C60  EE20 F0CA          	lfsr	2,202
  3467  000C64  5021               	movf	UART_buff_put@_this,w,c
  3468  000C66  26D9               	addwf	fsr2l,f,c
  3469  000C68  5022               	movf	UART_buff_put@_this+1,w,c
  3470  000C6A  22DA               	addwfc	fsr2h,f,c
  3471  000C6C  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3472  000C70  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3473  000C74  0012               	return	
  3474  000C76                     __end_of_UART_buff_put:
  3475                           	opt stack 0
  3476                           tosu	equ	0xFFF
  3477                           tosh	equ	0xFFE
  3478                           tosl	equ	0xFFD
  3479                           pclath	equ	0xFFA
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           intcon	equ	0xFF2
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           indf2	equ	0xFDF
  3490                           postinc2	equ	0xFDE
  3491                           postdec2	equ	0xFDD
  3492                           plusw2	equ	0xFDB
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _Receive_peek *****************
  3498 ;; Defined at:
  3499 ;;		line 118 in file "UART.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      unsigned char 
  3506 ;; Registers used:
  3507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3513 ;;      Params:         0       0       0       0       0       0       0
  3514 ;;      Locals:         0       0       0       0       0       0       0
  3515 ;;      Temps:          0       0       0       0       0       0       0
  3516 ;;      Totals:         0       0       0       0       0       0       0
  3517 ;;Total ram usage:        0 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:    5
  3520 ;; This function calls:
  3521 ;;		_UART_buff_peek
  3522 ;; This function is called by:
  3523 ;;		_SYSTEM_Initialize
  3524 ;;		_receiveData
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text12
  3529  001DF0                     __ptext12:
  3530                           	opt stack 0
  3531  001DF0                     _Receive_peek:
  3532                           	opt stack 23
  3533                           
  3534                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3535                           
  3536                           ;incstack = 0
  3537  001DF0  0E00               	movlw	low _input_buffer
  3538  001DF2  6E1B               	movwf	UART_buff_peek@_this,c
  3539  001DF4  0E03               	movlw	high _input_buffer
  3540  001DF6  6E1C               	movwf	UART_buff_peek@_this+1,c
  3541  001DF8  EC5C  F00E         	call	_UART_buff_peek	;wreg free
  3542  001DFC  0012               	return	
  3543  001DFE                     __end_of_Receive_peek:
  3544                           	opt stack 0
  3545                           tosu	equ	0xFFF
  3546                           tosh	equ	0xFFE
  3547                           tosl	equ	0xFFD
  3548                           pclath	equ	0xFFA
  3549                           tblptru	equ	0xFF8
  3550                           tblptrh	equ	0xFF7
  3551                           tblptrl	equ	0xFF6
  3552                           tablat	equ	0xFF5
  3553                           prodh	equ	0xFF4
  3554                           prodl	equ	0xFF3
  3555                           intcon	equ	0xFF2
  3556                           postinc0	equ	0xFEE
  3557                           wreg	equ	0xFE8
  3558                           indf2	equ	0xFDF
  3559                           postinc2	equ	0xFDE
  3560                           postdec2	equ	0xFDD
  3561                           plusw2	equ	0xFDB
  3562                           fsr2h	equ	0xFDA
  3563                           fsr2l	equ	0xFD9
  3564                           status	equ	0xFD8
  3565                           
  3566 ;; *************** function _UART_buff_peek *****************
  3567 ;; Defined at:
  3568 ;;		line 114 in file "UART.c"
  3569 ;; Parameters:    Size  Location     Type
  3570 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3571 ;;		 -> input_buffer(206), 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;		None
  3574 ;; Return value:  Size  Location     Type
  3575 ;;                  1    wreg      unsigned char 
  3576 ;; Registers used:
  3577 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3578 ;; Tracked objects:
  3579 ;;		On entry : 0/0
  3580 ;;		On exit  : 0/0
  3581 ;;		Unchanged: 0/0
  3582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3583 ;;      Params:         2       0       0       0       0       0       0
  3584 ;;      Locals:         0       0       0       0       0       0       0
  3585 ;;      Temps:          2       0       0       0       0       0       0
  3586 ;;      Totals:         4       0       0       0       0       0       0
  3587 ;;Total ram usage:        4 bytes
  3588 ;; Hardware stack levels used:    1
  3589 ;; Hardware stack levels required when called:    4
  3590 ;; This function calls:
  3591 ;;		Nothing
  3592 ;; This function is called by:
  3593 ;;		_Receive_peek
  3594 ;; This function uses a non-reentrant model
  3595 ;;
  3596                           
  3597                           	psect	text13
  3598  001CB8                     __ptext13:
  3599                           	opt stack 0
  3600  001CB8                     _UART_buff_peek:
  3601                           	opt stack 23
  3602                           
  3603                           ;UART.c: 115: return _this->buf[_this->tail];
  3604                           
  3605                           ;incstack = 0
  3606  001CB8  EE20 F0CA          	lfsr	2,202
  3607  001CBC  501B               	movf	UART_buff_peek@_this,w,c
  3608  001CBE  26D9               	addwf	fsr2l,f,c
  3609  001CC0  501C               	movf	UART_buff_peek@_this+1,w,c
  3610  001CC2  22DA               	addwfc	fsr2h,f,c
  3611  001CC4  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3612  001CC8  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3613  001CCC  501D               	movf	??_UART_buff_peek,w,c
  3614  001CCE  241B               	addwf	UART_buff_peek@_this,w,c
  3615  001CD0  6ED9               	movwf	fsr2l,c
  3616  001CD2  501E               	movf	??_UART_buff_peek+1,w,c
  3617  001CD4  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3618  001CD6  6EDA               	movwf	fsr2h,c
  3619  001CD8  50DF               	movf	indf2,w,c
  3620  001CDA  0012               	return	
  3621  001CDC                     __end_of_UART_buff_peek:
  3622                           	opt stack 0
  3623                           tosu	equ	0xFFF
  3624                           tosh	equ	0xFFE
  3625                           tosl	equ	0xFFD
  3626                           pclath	equ	0xFFA
  3627                           tblptru	equ	0xFF8
  3628                           tblptrh	equ	0xFF7
  3629                           tblptrl	equ	0xFF6
  3630                           tablat	equ	0xFF5
  3631                           prodh	equ	0xFF4
  3632                           prodl	equ	0xFF3
  3633                           intcon	equ	0xFF2
  3634                           postinc0	equ	0xFEE
  3635                           wreg	equ	0xFE8
  3636                           indf2	equ	0xFDF
  3637                           postinc2	equ	0xFDE
  3638                           postdec2	equ	0xFDD
  3639                           plusw2	equ	0xFDB
  3640                           fsr2h	equ	0xFDA
  3641                           fsr2l	equ	0xFD9
  3642                           status	equ	0xFD8
  3643                           
  3644 ;; *************** function _CRCcheck *****************
  3645 ;; Defined at:
  3646 ;;		line 373 in file "FastTransfer.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;		None
  3649 ;; Auto vars:     Size  Location     Type
  3650 ;;  rt              2    5[BANK0 ] int 
  3651 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3652 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3653 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;		None               void
  3656 ;; Registers used:
  3657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         0       0       0       0       0       0       0
  3664 ;;      Locals:         0       7       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0
  3666 ;;      Totals:         0       7       0       0       0       0       0
  3667 ;;Total ram usage:        7 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    7
  3670 ;; This function calls:
  3671 ;;		Absolute function
  3672 ;;		_CRC8
  3673 ;;		_Receive_available
  3674 ;;		_Receive_get
  3675 ;;		_crcBufS_get
  3676 ;;		_crcBufS_status_put
  3677 ;; This function is called by:
  3678 ;;		_receiveData
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text14
  3683  0008BE                     __ptext14:
  3684                           	opt stack 0
  3685  0008BE                     _CRCcheck:
  3686                           	opt stack 21
  3687  0008BE                     l3917:
  3688  0008BE  D801               	call	u3218
  3689  0008C0  D00A               	goto	u3219
  3690  0008C2                     u3218:
  3691  0008C2  0005               	push	
  3692  0008C4  6EFA               	movwf	pclath,c
  3693  0008C6  5030               	movf	_serial_available,w,c
  3694  0008C8  6EFD               	movwf	tosl,c
  3695  0008CA  5031               	movf	_serial_available+1,w,c
  3696  0008CC  6EFE               	movwf	tosh,c
  3697  0008CE  50F8               	movf	tblptru,w,c
  3698  0008D0  6EFF               	movwf	tosu,c
  3699  0008D2  50FA               	movf	pclath,w,c
  3700  0008D4  0012               	return		;indir
  3701  0008D6                     u3219:
  3702  0008D6  BE1E               	btfsc	?_Receive_available+1,7,c
  3703  0008D8  D7F2               	goto	l3917
  3704  0008DA  501E               	movf	?_Receive_available+1,w,c
  3705  0008DC  E104               	bnz	l3919
  3706  0008DE  0E04               	movlw	4
  3707  0008E0  5C1D               	subwf	?_Receive_available,w,c
  3708  0008E2  A0D8               	btfss	status,0,c
  3709  0008E4  D7EC               	goto	l3917
  3710  0008E6                     l3919:
  3711                           
  3712                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3713                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3714  0008E6  D801               	call	u3238
  3715  0008E8  D00A               	goto	u3239
  3716  0008EA                     u3238:
  3717  0008EA  0005               	push	
  3718  0008EC  6EFA               	movwf	pclath,c
  3719  0008EE  5034               	movf	_serial_read,w,c
  3720  0008F0  6EFD               	movwf	tosl,c
  3721  0008F2  5035               	movf	_serial_read+1,w,c
  3722  0008F4  6EFE               	movwf	tosh,c
  3723  0008F6  50F8               	movf	tblptru,w,c
  3724  0008F8  6EFF               	movwf	tosu,c
  3725  0008FA  50FA               	movf	pclath,w,c
  3726  0008FC  0012               	return		;indir
  3727  0008FE                     u3239:
  3728  0008FE  0100               	movlb	0	; () banked
  3729  000900  6FD5               	movwf	CRCcheck@arrayHolder& (0+255),b
  3730                           
  3731                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3732  000902  D801               	call	u3248
  3733  000904  D00A               	goto	u3249
  3734  000906                     u3248:
  3735  000906  0005               	push	
  3736  000908  6EFA               	movwf	pclath,c
  3737  00090A  5034               	movf	_serial_read,w,c
  3738  00090C  6EFD               	movwf	tosl,c
  3739  00090E  5035               	movf	_serial_read+1,w,c
  3740  000910  6EFE               	movwf	tosh,c
  3741  000912  50F8               	movf	tblptru,w,c
  3742  000914  6EFF               	movwf	tosu,c
  3743  000916  50FA               	movf	pclath,w,c
  3744  000918  0012               	return		;indir
  3745  00091A                     u3249:
  3746  00091A  0100               	movlb	0	; () banked
  3747  00091C  6FD6               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3748                           
  3749                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3750  00091E  D801               	call	u3258
  3751  000920  D00A               	goto	u3259
  3752  000922                     u3258:
  3753  000922  0005               	push	
  3754  000924  6EFA               	movwf	pclath,c
  3755  000926  5034               	movf	_serial_read,w,c
  3756  000928  6EFD               	movwf	tosl,c
  3757  00092A  5035               	movf	_serial_read+1,w,c
  3758  00092C  6EFE               	movwf	tosh,c
  3759  00092E  50F8               	movf	tblptru,w,c
  3760  000930  6EFF               	movwf	tosu,c
  3761  000932  50FA               	movf	pclath,w,c
  3762  000934  0012               	return		;indir
  3763  000936                     u3259:
  3764  000936  0100               	movlb	0	; () banked
  3765  000938  6FD7               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3766                           
  3767                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3768  00093A  D801               	call	u3268
  3769  00093C  D00A               	goto	u3269
  3770  00093E                     u3268:
  3771  00093E  0005               	push	
  3772  000940  6EFA               	movwf	pclath,c
  3773  000942  5034               	movf	_serial_read,w,c
  3774  000944  6EFD               	movwf	tosl,c
  3775  000946  5035               	movf	_serial_read+1,w,c
  3776  000948  6EFE               	movwf	tosh,c
  3777  00094A  50F8               	movf	tblptru,w,c
  3778  00094C  6EFF               	movwf	tosu,c
  3779  00094E  50FA               	movf	pclath,w,c
  3780  000950  0012               	return		;indir
  3781  000952                     u3269:
  3782  000952  0100               	movlb	0	; () banked
  3783  000954  6FD3               	movwf	CRCcheck@SentCRC& (0+255),b
  3784                           
  3785                           ; BSR set to: 0
  3786                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3787  000956  0ED5               	movlw	low CRCcheck@arrayHolder
  3788  000958  6E1B               	movwf	CRC8@data,c
  3789  00095A  0E00               	movlw	high CRCcheck@arrayHolder
  3790  00095C  6E1C               	movwf	CRC8@data+1,c
  3791  00095E  0E03               	movlw	3
  3792  000960  6E1D               	movwf	CRC8@len,c
  3793  000962  EC1A  F00D         	call	_CRC8	;wreg free
  3794  000966  0100               	movlb	0	; () banked
  3795  000968  6FD4               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3799  00096A  0100               	movlb	0	; () banked
  3800  00096C  51D4               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3801  00096E  0100               	movlb	0	; () banked
  3802  000970  19D3               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3803  000972  A4D8               	btfss	status,2,c
  3804  000974  D04E               	goto	l3949
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;FastTransfer.c: 387: int rt;
  3808                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3809  000976  0E00               	movlw	0
  3810  000978  0100               	movlb	0	; () banked
  3811  00097A  6FD9               	movwf	(CRCcheck@rt+1)& (0+255),b
  3812  00097C  0E00               	movlw	0
  3813  00097E  6FD8               	movwf	CRCcheck@rt& (0+255),b
  3814  000980                     l3927:
  3815                           
  3816                           ; BSR set to: 0
  3817  000980  0100               	movlb	0	; () banked
  3818  000982  BFD9               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3819  000984  D008               	goto	l3931
  3820  000986  0100               	movlb	0	; () banked
  3821  000988  51D9               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3822  00098A  E147               	bnz	l587
  3823  00098C  0E05               	movlw	5
  3824  00098E  0100               	movlb	0	; () banked
  3825  000990  5DD8               	subwf	CRCcheck@rt& (0+255),w,b
  3826  000992  B0D8               	btfsc	status,0,c
  3827  000994  0012               	return	
  3828  000996                     l3931:
  3829                           
  3830                           ; BSR set to: 0
  3831                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3832  000996  0EC2               	movlw	low _crc_buffer
  3833  000998  6E1B               	movwf	crcBufS_get@_this,c
  3834  00099A  0E00               	movlw	high _crc_buffer
  3835  00099C  6E1C               	movwf	crcBufS_get@_this+1,c
  3836  00099E  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3837  0009A2  0E00               	movlw	0
  3838  0009A4  6E1E               	movwf	crcBufS_get@space,c
  3839  0009A6  EC46  F007         	call	_crcBufS_get	;wreg free
  3840  0009AA  1840               	xorwf	_returnAddress,w,c
  3841  0009AC  A4D8               	btfss	status,2,c
  3842  0009AE  D02D               	goto	l3945
  3843                           
  3844                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3845  0009B0  0EC2               	movlw	low _crc_buffer
  3846  0009B2  6E1B               	movwf	crcBufS_get@_this,c
  3847  0009B4  0E00               	movlw	high _crc_buffer
  3848  0009B6  6E1C               	movwf	crcBufS_get@_this+1,c
  3849  0009B8  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3850  0009BC  0E01               	movlw	1
  3851  0009BE  6E1E               	movwf	crcBufS_get@space,c
  3852  0009C0  EC46  F007         	call	_crcBufS_get	;wreg free
  3853  0009C4  0100               	movlb	0	; () banked
  3854  0009C6  19D7               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3855  0009C8  A4D8               	btfss	status,2,c
  3856  0009CA  D01F               	goto	l3945
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3860  0009CC  0100               	movlb	0	; () banked
  3861  0009CE  05D6               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3862  0009D0  A4D8               	btfss	status,2,c
  3863  0009D2  D00B               	goto	l3941
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3867  0009D4  0EC2               	movlw	low _crc_buffer
  3868  0009D6  6E1B               	movwf	crcBufS_status_put@_this,c
  3869  0009D8  0E00               	movlw	high _crc_buffer
  3870  0009DA  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3871  0009DC  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3872  0009E0  0E01               	movlw	1
  3873  0009E2  6E1E               	movwf	crcBufS_status_put@status,c
  3874  0009E4  EC01  F009         	call	_crcBufS_status_put	;wreg free
  3875                           
  3876                           ;FastTransfer.c: 393: break;
  3877  0009E8  0012               	return	
  3878  0009EA                     l3941:
  3879  0009EA  0E02               	movlw	2
  3880  0009EC  0100               	movlb	0	; () banked
  3881  0009EE  19D6               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3882  0009F0  A4D8               	btfss	status,2,c
  3883  0009F2  D00B               	goto	l3945
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3887  0009F4  0EC2               	movlw	low _crc_buffer
  3888  0009F6  6E1B               	movwf	crcBufS_status_put@_this,c
  3889  0009F8  0E00               	movlw	high _crc_buffer
  3890  0009FA  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3891  0009FC  C0D8  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3892  000A00  0E02               	movlw	2
  3893  000A02  6E1E               	movwf	crcBufS_status_put@status,c
  3894  000A04  EC01  F009         	call	_crcBufS_status_put	;wreg free
  3895                           
  3896                           ;FastTransfer.c: 396: break;
  3897  000A08  0012               	return	
  3898  000A0A                     l3945:
  3899  000A0A  0100               	movlb	0	; () banked
  3900  000A0C  4BD8               	infsnz	CRCcheck@rt& (0+255),f,b
  3901  000A0E  2BD9               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3902  000A10  D7B7               	goto	l3927
  3903  000A12                     l3949:
  3904                           
  3905                           ; BSR set to: 0
  3906                           ;FastTransfer.c: 402: crcErrorCounter++;
  3907  000A12  0100               	movlb	0	; () banked
  3908  000A14  4B94               	infsnz	_crcErrorCounter& (0+255),f,b
  3909  000A16  2B95               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3910  000A18  0012               	return	
  3911  000A1A                     l587:
  3912  000A1A  0012               	return		;funcret
  3913  000A1C                     __end_of_CRCcheck:
  3914                           	opt stack 0
  3915                           tosu	equ	0xFFF
  3916                           tosh	equ	0xFFE
  3917                           tosl	equ	0xFFD
  3918                           pclath	equ	0xFFA
  3919                           tblptru	equ	0xFF8
  3920                           tblptrh	equ	0xFF7
  3921                           tblptrl	equ	0xFF6
  3922                           tablat	equ	0xFF5
  3923                           prodh	equ	0xFF4
  3924                           prodl	equ	0xFF3
  3925                           intcon	equ	0xFF2
  3926                           postinc0	equ	0xFEE
  3927                           wreg	equ	0xFE8
  3928                           indf2	equ	0xFDF
  3929                           postinc2	equ	0xFDE
  3930                           postdec2	equ	0xFDD
  3931                           plusw2	equ	0xFDB
  3932                           fsr2h	equ	0xFDA
  3933                           fsr2l	equ	0xFD9
  3934                           status	equ	0xFD8
  3935                           
  3936 ;; *************** function _crcBufS_status_put *****************
  3937 ;; Defined at:
  3938 ;;		line 336 in file "FastTransfer.c"
  3939 ;; Parameters:    Size  Location     Type
  3940 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3941 ;;		 -> crc_buffer(17), 
  3942 ;;  time            1   28[COMRAM] unsigned char 
  3943 ;;  status          1   29[COMRAM] unsigned char 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  wantedTime      2   34[COMRAM] int 
  3946 ;; Return value:  Size  Location     Type
  3947 ;;		None               void
  3948 ;; Registers used:
  3949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3955 ;;      Params:         4       0       0       0       0       0       0
  3956 ;;      Locals:         2       0       0       0       0       0       0
  3957 ;;      Temps:          4       0       0       0       0       0       0
  3958 ;;      Totals:        10       0       0       0       0       0       0
  3959 ;;Total ram usage:       10 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    4
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_CRCcheck
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           	psect	text15
  3970  001202                     __ptext15:
  3971                           	opt stack 0
  3972  001202                     _crcBufS_status_put:
  3973                           	opt stack 23
  3974                           
  3975                           ;FastTransfer.c: 337: if (time >= 5) {
  3976                           
  3977                           ;incstack = 0
  3978  001202  0E04               	movlw	4
  3979  001204  641D               	cpfsgt	crcBufS_status_put@time,c
  3980  001206  D002               	goto	l3793
  3981                           
  3982                           ;FastTransfer.c: 338: time = 5 - 1;
  3983  001208  0E04               	movlw	4
  3984  00120A  6E1D               	movwf	crcBufS_status_put@time,c
  3985  00120C                     l3793:
  3986                           
  3987                           ;FastTransfer.c: 339: }
  3988                           ;FastTransfer.c: 340: time = time + 1;
  3989  00120C  281D               	incf	crcBufS_status_put@time,w,c
  3990  00120E  6E1D               	movwf	crcBufS_status_put@time,c
  3991                           
  3992                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3993  001210  501D               	movf	crcBufS_status_put@time,w,c
  3994  001212  0D03               	mullw	3
  3995  001214  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3996  001218  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3997                           
  3998                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3999  00121C  EE20 F00F          	lfsr	2,15
  4000  001220  501B               	movf	crcBufS_status_put@_this,w,c
  4001  001222  26D9               	addwf	fsr2l,f,c
  4002  001224  501C               	movf	crcBufS_status_put@_this+1,w,c
  4003  001226  22DA               	addwfc	fsr2h,f,c
  4004  001228  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4005  00122A  5CDE               	subwf	postinc2,w,c
  4006  00122C  50DE               	movf	postinc2,w,c
  4007  00122E  0A80               	xorlw	128
  4008  001230  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4009  001232  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4010  001234  0A80               	xorlw	128
  4011  001236  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4012  001238  B0D8               	btfsc	status,0,c
  4013  00123A  D02B               	goto	l3801
  4014                           
  4015                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4016  00123C  EE20 F00F          	lfsr	2,15
  4017  001240  501B               	movf	crcBufS_status_put@_this,w,c
  4018  001242  26D9               	addwf	fsr2l,f,c
  4019  001244  501C               	movf	crcBufS_status_put@_this+1,w,c
  4020  001246  22DA               	addwfc	fsr2h,f,c
  4021  001248  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4022  00124C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4023  001250  1E1F               	comf	??_crcBufS_status_put,f,c
  4024  001252  1E20               	comf	??_crcBufS_status_put+1,f,c
  4025  001254  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4026  001256  2A20               	incf	??_crcBufS_status_put+1,f,c
  4027  001258  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4028  00125A  261F               	addwf	??_crcBufS_status_put,f,c
  4029  00125C  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4030  00125E  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4031  001260  1E1F               	comf	??_crcBufS_status_put,f,c
  4032  001262  1E20               	comf	??_crcBufS_status_put+1,f,c
  4033  001264  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4034  001266  2A20               	incf	??_crcBufS_status_put+1,f,c
  4035  001268  0E0F               	movlw	15
  4036  00126A  241F               	addwf	??_crcBufS_status_put,w,c
  4037  00126C  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4038  00126E  0E00               	movlw	0
  4039  001270  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4040  001272  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4041                           
  4042                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4043  001274  0E02               	movlw	2
  4044  001276  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4045  001278  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4046  00127A  0E00               	movlw	0
  4047  00127C  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4048  00127E  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4049  001280  501F               	movf	??_crcBufS_status_put,w,c
  4050  001282  241B               	addwf	crcBufS_status_put@_this,w,c
  4051  001284  6ED9               	movwf	fsr2l,c
  4052  001286  5020               	movf	??_crcBufS_status_put+1,w,c
  4053  001288  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4054  00128A  6EDA               	movwf	fsr2h,c
  4055  00128C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4056                           
  4057                           ;FastTransfer.c: 345: } else {
  4058  001290  0012               	return	
  4059  001292                     l3801:
  4060                           
  4061                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4062  001292  EE20 F00F          	lfsr	2,15
  4063  001296  501B               	movf	crcBufS_status_put@_this,w,c
  4064  001298  26D9               	addwf	fsr2l,f,c
  4065  00129A  501C               	movf	crcBufS_status_put@_this+1,w,c
  4066  00129C  22DA               	addwfc	fsr2h,f,c
  4067  00129E  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4068  0012A2  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4069  0012A6  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4070  0012AA  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4071  0012AE  1E21               	comf	??_crcBufS_status_put+2,f,c
  4072  0012B0  1E22               	comf	??_crcBufS_status_put+3,f,c
  4073  0012B2  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4074  0012B4  2A22               	incf	??_crcBufS_status_put+3,f,c
  4075  0012B6  501F               	movf	??_crcBufS_status_put,w,c
  4076  0012B8  2621               	addwf	??_crcBufS_status_put+2,f,c
  4077  0012BA  5020               	movf	??_crcBufS_status_put+1,w,c
  4078  0012BC  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4079  0012BE  0E02               	movlw	2
  4080  0012C0  2621               	addwf	??_crcBufS_status_put+2,f,c
  4081  0012C2  0E00               	movlw	0
  4082  0012C4  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4083  0012C6  5021               	movf	??_crcBufS_status_put+2,w,c
  4084  0012C8  241B               	addwf	crcBufS_status_put@_this,w,c
  4085  0012CA  6ED9               	movwf	fsr2l,c
  4086  0012CC  5022               	movf	??_crcBufS_status_put+3,w,c
  4087  0012CE  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4088  0012D0  6EDA               	movwf	fsr2h,c
  4089  0012D2  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4090  0012D6  0012               	return	
  4091  0012D8                     __end_of_crcBufS_status_put:
  4092                           	opt stack 0
  4093                           tosu	equ	0xFFF
  4094                           tosh	equ	0xFFE
  4095                           tosl	equ	0xFFD
  4096                           pclath	equ	0xFFA
  4097                           tblptru	equ	0xFF8
  4098                           tblptrh	equ	0xFF7
  4099                           tblptrl	equ	0xFF6
  4100                           tablat	equ	0xFF5
  4101                           prodh	equ	0xFF4
  4102                           prodl	equ	0xFF3
  4103                           intcon	equ	0xFF2
  4104                           postinc0	equ	0xFEE
  4105                           wreg	equ	0xFE8
  4106                           indf2	equ	0xFDF
  4107                           postinc2	equ	0xFDE
  4108                           postdec2	equ	0xFDD
  4109                           plusw2	equ	0xFDB
  4110                           fsr2h	equ	0xFDA
  4111                           fsr2l	equ	0xFD9
  4112                           status	equ	0xFD8
  4113                           
  4114 ;; *************** function _crcBufS_get *****************
  4115 ;; Defined at:
  4116 ;;		line 353 in file "FastTransfer.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4119 ;;		 -> crc_buffer(17), 
  4120 ;;  time            1   28[COMRAM] unsigned char 
  4121 ;;  space           1   29[COMRAM] unsigned char 
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;  wantedTime      2   36[COMRAM] int 
  4124 ;; Return value:  Size  Location     Type
  4125 ;;                  1    wreg      unsigned char 
  4126 ;; Registers used:
  4127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : 0/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4133 ;;      Params:         4       0       0       0       0       0       0
  4134 ;;      Locals:         2       0       0       0       0       0       0
  4135 ;;      Temps:          6       0       0       0       0       0       0
  4136 ;;      Totals:        12       0       0       0       0       0       0
  4137 ;;Total ram usage:       12 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:    4
  4140 ;; This function calls:
  4141 ;;		Nothing
  4142 ;; This function is called by:
  4143 ;;		_CRCcheck
  4144 ;;		_AKNAK
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148                           	psect	text16
  4149  000E8C                     __ptext16:
  4150                           	opt stack 0
  4151  000E8C                     _crcBufS_get:
  4152                           	opt stack 23
  4153                           
  4154                           ;FastTransfer.c: 354: if (time >= 5) {
  4155                           
  4156                           ;incstack = 0
  4157  000E8C  0E04               	movlw	4
  4158  000E8E  641D               	cpfsgt	crcBufS_get@time,c
  4159  000E90  D002               	goto	l3769
  4160                           
  4161                           ;FastTransfer.c: 355: time = 5 - 1;
  4162  000E92  0E04               	movlw	4
  4163  000E94  6E1D               	movwf	crcBufS_get@time,c
  4164  000E96                     l3769:
  4165                           
  4166                           ;FastTransfer.c: 356: }
  4167                           ;FastTransfer.c: 357: if (space >= 3) {
  4168  000E96  0E02               	movlw	2
  4169  000E98  641E               	cpfsgt	crcBufS_get@space,c
  4170  000E9A  D002               	goto	l3773
  4171                           
  4172                           ;FastTransfer.c: 358: space = 3 - 1;
  4173  000E9C  0E02               	movlw	2
  4174  000E9E  6E1E               	movwf	crcBufS_get@space,c
  4175  000EA0                     l3773:
  4176                           
  4177                           ;FastTransfer.c: 359: }
  4178                           ;FastTransfer.c: 360: time = time + 1;
  4179  000EA0  281D               	incf	crcBufS_get@time,w,c
  4180  000EA2  6E1D               	movwf	crcBufS_get@time,c
  4181                           
  4182                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4183  000EA4  501D               	movf	crcBufS_get@time,w,c
  4184  000EA6  0D03               	mullw	3
  4185  000EA8  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4186  000EAC  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4187                           
  4188                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4189  000EB0  EE20 F00F          	lfsr	2,15
  4190  000EB4  501B               	movf	crcBufS_get@_this,w,c
  4191  000EB6  26D9               	addwf	fsr2l,f,c
  4192  000EB8  501C               	movf	crcBufS_get@_this+1,w,c
  4193  000EBA  22DA               	addwfc	fsr2h,f,c
  4194  000EBC  5025               	movf	crcBufS_get@wantedTime,w,c
  4195  000EBE  5CDE               	subwf	postinc2,w,c
  4196  000EC0  50DE               	movf	postinc2,w,c
  4197  000EC2  0A80               	xorlw	128
  4198  000EC4  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4199  000EC6  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4200  000EC8  0A80               	xorlw	128
  4201  000ECA  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4202  000ECC  B0D8               	btfsc	status,0,c
  4203  000ECE  D02A               	goto	l3785
  4204                           
  4205                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4206  000ED0  EE20 F00F          	lfsr	2,15
  4207  000ED4  501B               	movf	crcBufS_get@_this,w,c
  4208  000ED6  26D9               	addwf	fsr2l,f,c
  4209  000ED8  501C               	movf	crcBufS_get@_this+1,w,c
  4210  000EDA  22DA               	addwfc	fsr2h,f,c
  4211  000EDC  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4212  000EE0  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4213  000EE4  1E1F               	comf	??_crcBufS_get,f,c
  4214  000EE6  1E20               	comf	??_crcBufS_get+1,f,c
  4215  000EE8  4A1F               	infsnz	??_crcBufS_get,f,c
  4216  000EEA  2A20               	incf	??_crcBufS_get+1,f,c
  4217  000EEC  5025               	movf	crcBufS_get@wantedTime,w,c
  4218  000EEE  261F               	addwf	??_crcBufS_get,f,c
  4219  000EF0  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4220  000EF2  2220               	addwfc	??_crcBufS_get+1,f,c
  4221  000EF4  1E1F               	comf	??_crcBufS_get,f,c
  4222  000EF6  1E20               	comf	??_crcBufS_get+1,f,c
  4223  000EF8  4A1F               	infsnz	??_crcBufS_get,f,c
  4224  000EFA  2A20               	incf	??_crcBufS_get+1,f,c
  4225  000EFC  0E0F               	movlw	15
  4226  000EFE  241F               	addwf	??_crcBufS_get,w,c
  4227  000F00  6E25               	movwf	crcBufS_get@wantedTime,c
  4228  000F02  0E00               	movlw	0
  4229  000F04  2020               	addwfc	??_crcBufS_get+1,w,c
  4230  000F06  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4231                           
  4232                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4233  000F08  501E               	movf	crcBufS_get@space,w,c
  4234  000F0A  2425               	addwf	crcBufS_get@wantedTime,w,c
  4235  000F0C  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4236  000F0E  0E00               	movlw	0
  4237  000F10  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4238  000F12  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4239  000F14  501F               	movf	??_crcBufS_get,w,c
  4240  000F16  241B               	addwf	crcBufS_get@_this,w,c
  4241  000F18  6ED9               	movwf	fsr2l,c
  4242  000F1A  5020               	movf	??_crcBufS_get+1,w,c
  4243  000F1C  201C               	addwfc	crcBufS_get@_this+1,w,c
  4244  000F1E  6EDA               	movwf	fsr2h,c
  4245  000F20  50DF               	movf	indf2,w,c
  4246                           
  4247                           ;FastTransfer.c: 365: } else {
  4248  000F22  0012               	return	
  4249  000F24                     l3785:
  4250                           
  4251                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4252  000F24  EE20 F00F          	lfsr	2,15
  4253  000F28  501B               	movf	crcBufS_get@_this,w,c
  4254  000F2A  26D9               	addwf	fsr2l,f,c
  4255  000F2C  501C               	movf	crcBufS_get@_this+1,w,c
  4256  000F2E  22DA               	addwfc	fsr2h,f,c
  4257  000F30  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4258  000F34  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4259  000F38  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4260  000F3C  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4261  000F40  1E21               	comf	??_crcBufS_get+2,f,c
  4262  000F42  1E22               	comf	??_crcBufS_get+3,f,c
  4263  000F44  4A21               	infsnz	??_crcBufS_get+2,f,c
  4264  000F46  2A22               	incf	??_crcBufS_get+3,f,c
  4265  000F48  501E               	movf	crcBufS_get@space,w,c
  4266  000F4A  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4267  000F4C  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4268  000F4E  5021               	movf	??_crcBufS_get+2,w,c
  4269  000F50  2623               	addwf	??_crcBufS_get+4,f,c
  4270  000F52  5022               	movf	??_crcBufS_get+3,w,c
  4271  000F54  2224               	addwfc	??_crcBufS_get+5,f,c
  4272  000F56  501F               	movf	??_crcBufS_get,w,c
  4273  000F58  2623               	addwf	??_crcBufS_get+4,f,c
  4274  000F5A  5020               	movf	??_crcBufS_get+1,w,c
  4275  000F5C  2224               	addwfc	??_crcBufS_get+5,f,c
  4276  000F5E  5023               	movf	??_crcBufS_get+4,w,c
  4277  000F60  241B               	addwf	crcBufS_get@_this,w,c
  4278  000F62  6ED9               	movwf	fsr2l,c
  4279  000F64  5024               	movf	??_crcBufS_get+5,w,c
  4280  000F66  201C               	addwfc	crcBufS_get@_this+1,w,c
  4281  000F68  6EDA               	movwf	fsr2h,c
  4282  000F6A  50DF               	movf	indf2,w,c
  4283  000F6C  0012               	return	
  4284  000F6E                     __end_of_crcBufS_get:
  4285                           	opt stack 0
  4286                           tosu	equ	0xFFF
  4287                           tosh	equ	0xFFE
  4288                           tosl	equ	0xFFD
  4289                           pclath	equ	0xFFA
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           intcon	equ	0xFF2
  4297                           postinc0	equ	0xFEE
  4298                           wreg	equ	0xFE8
  4299                           indf2	equ	0xFDF
  4300                           postinc2	equ	0xFDE
  4301                           postdec2	equ	0xFDD
  4302                           plusw2	equ	0xFDB
  4303                           fsr2h	equ	0xFDA
  4304                           fsr2l	equ	0xFD9
  4305                           status	equ	0xFD8
  4306                           
  4307 ;; *************** function _Receive_get *****************
  4308 ;; Defined at:
  4309 ;;		line 126 in file "UART.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;		None
  4312 ;; Auto vars:     Size  Location     Type
  4313 ;;		None
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      unsigned char 
  4316 ;; Registers used:
  4317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4323 ;;      Params:         0       0       0       0       0       0       0
  4324 ;;      Locals:         0       0       0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0
  4326 ;;      Totals:         0       0       0       0       0       0       0
  4327 ;;Total ram usage:        0 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; Hardware stack levels required when called:    6
  4330 ;; This function calls:
  4331 ;;		_UART_buff_get
  4332 ;; This function is called by:
  4333 ;;		_SYSTEM_Initialize
  4334 ;;		_getch
  4335 ;;		_CRCcheck
  4336 ;;		_receiveData
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text17
  4341  001DFE                     __ptext17:
  4342                           	opt stack 0
  4343  001DFE                     _Receive_get:
  4344                           	opt stack 22
  4345                           
  4346                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4347                           
  4348                           ;incstack = 0
  4349  001DFE  0E00               	movlw	low _input_buffer
  4350  001E00  6E21               	movwf	UART_buff_get@_this,c
  4351  001E02  0E03               	movlw	high _input_buffer
  4352  001E04  6E22               	movwf	UART_buff_get@_this+1,c
  4353  001E06  EC2D  F00A         	call	_UART_buff_get	;wreg free
  4354  001E0A  0012               	return	
  4355  001E0C                     __end_of_Receive_get:
  4356                           	opt stack 0
  4357                           tosu	equ	0xFFF
  4358                           tosh	equ	0xFFE
  4359                           tosl	equ	0xFFD
  4360                           pclath	equ	0xFFA
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           indf2	equ	0xFDF
  4371                           postinc2	equ	0xFDE
  4372                           postdec2	equ	0xFDD
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8
  4377                           
  4378 ;; *************** function _UART_buff_get *****************
  4379 ;; Defined at:
  4380 ;;		line 81 in file "UART.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4383 ;;		 -> output_buffer(206), input_buffer(206), 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  c               1   36[COMRAM] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4395 ;;      Params:         2       0       0       0       0       0       0
  4396 ;;      Locals:         1       0       0       0       0       0       0
  4397 ;;      Temps:          2       0       0       0       0       0       0
  4398 ;;      Totals:         5       0       0       0       0       0       0
  4399 ;;Total ram usage:        5 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    5
  4402 ;; This function calls:
  4403 ;;		_UART_buff_modulo_inc
  4404 ;; This function is called by:
  4405 ;;		_Receive_get
  4406 ;;		_Send_put
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	text18
  4411  00145A                     __ptext18:
  4412                           	opt stack 0
  4413  00145A                     _UART_buff_get:
  4414                           	opt stack 21
  4415                           
  4416                           ;UART.c: 82: unsigned char c;
  4417                           ;UART.c: 83: if (_this->count > 0) {
  4418                           
  4419                           ;incstack = 0
  4420  00145A  EE20 F0CC          	lfsr	2,204
  4421  00145E  5021               	movf	UART_buff_get@_this,w,c
  4422  001460  26D9               	addwf	fsr2l,f,c
  4423  001462  5022               	movf	UART_buff_get@_this+1,w,c
  4424  001464  22DA               	addwfc	fsr2h,f,c
  4425  001466  0E01               	movlw	1
  4426  001468  BEDB               	btfsc	plusw2,7,c
  4427  00146A  D03C               	goto	l3705
  4428  00146C  0E01               	movlw	1
  4429  00146E  50DB               	movf	plusw2,w,c
  4430  001470  E103               	bnz	u2960
  4431  001472  04DE               	decf	postinc2,w,c
  4432  001474  A0D8               	btfss	status,0,c
  4433  001476  D036               	goto	l3705
  4434  001478                     u2960:
  4435                           
  4436                           ;UART.c: 84: c = _this->buf[_this->tail];
  4437  001478  EE20 F0CA          	lfsr	2,202
  4438  00147C  5021               	movf	UART_buff_get@_this,w,c
  4439  00147E  26D9               	addwf	fsr2l,f,c
  4440  001480  5022               	movf	UART_buff_get@_this+1,w,c
  4441  001482  22DA               	addwfc	fsr2h,f,c
  4442  001484  CFDE F023          	movff	postinc2,??_UART_buff_get
  4443  001488  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4444  00148C  5023               	movf	??_UART_buff_get,w,c
  4445  00148E  2421               	addwf	UART_buff_get@_this,w,c
  4446  001490  6ED9               	movwf	fsr2l,c
  4447  001492  5024               	movf	??_UART_buff_get+1,w,c
  4448  001494  2022               	addwfc	UART_buff_get@_this+1,w,c
  4449  001496  6EDA               	movwf	fsr2h,c
  4450  001498  50DF               	movf	indf2,w,c
  4451  00149A  6E25               	movwf	UART_buff_get@c,c
  4452                           
  4453                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4454  00149C  EE20 F0CA          	lfsr	2,202
  4455  0014A0  5021               	movf	UART_buff_get@_this,w,c
  4456  0014A2  26D9               	addwf	fsr2l,f,c
  4457  0014A4  5022               	movf	UART_buff_get@_this+1,w,c
  4458  0014A6  22DA               	addwfc	fsr2h,f,c
  4459  0014A8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4460  0014AC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4461  0014B0  0E00               	movlw	0
  4462  0014B2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4463  0014B4  0EC8               	movlw	200
  4464  0014B6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4465  0014B8  EC32  F00E         	call	_UART_buff_modulo_inc	;wreg free
  4466  0014BC  EE20 F0CA          	lfsr	2,202
  4467  0014C0  5021               	movf	UART_buff_get@_this,w,c
  4468  0014C2  26D9               	addwf	fsr2l,f,c
  4469  0014C4  5022               	movf	UART_buff_get@_this+1,w,c
  4470  0014C6  22DA               	addwfc	fsr2h,f,c
  4471  0014C8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4472  0014CC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4473                           
  4474                           ;UART.c: 86: --_this->count;
  4475  0014D0  EE20 F0CC          	lfsr	2,204
  4476  0014D4  5021               	movf	UART_buff_get@_this,w,c
  4477  0014D6  26D9               	addwf	fsr2l,f,c
  4478  0014D8  5022               	movf	UART_buff_get@_this+1,w,c
  4479  0014DA  22DA               	addwfc	fsr2h,f,c
  4480  0014DC  06DE               	decf	postinc2,f,c
  4481  0014DE  0E00               	movlw	0
  4482  0014E0  5ADD               	subwfb	postdec2,f,c
  4483                           
  4484                           ;UART.c: 87: } else {
  4485  0014E2  D002               	goto	l782
  4486  0014E4                     l3705:
  4487                           
  4488                           ;UART.c: 88: c = 0;
  4489  0014E4  0E00               	movlw	0
  4490  0014E6  6E25               	movwf	UART_buff_get@c,c
  4491  0014E8                     l782:
  4492                           
  4493                           ;UART.c: 89: }
  4494                           ;UART.c: 90: return (c);
  4495  0014E8  5025               	movf	UART_buff_get@c,w,c
  4496  0014EA  0012               	return	
  4497  0014EC                     __end_of_UART_buff_get:
  4498                           	opt stack 0
  4499                           tosu	equ	0xFFF
  4500                           tosh	equ	0xFFE
  4501                           tosl	equ	0xFFD
  4502                           pclath	equ	0xFFA
  4503                           tblptru	equ	0xFF8
  4504                           tblptrh	equ	0xFF7
  4505                           tblptrl	equ	0xFF6
  4506                           tablat	equ	0xFF5
  4507                           prodh	equ	0xFF4
  4508                           prodl	equ	0xFF3
  4509                           intcon	equ	0xFF2
  4510                           postinc0	equ	0xFEE
  4511                           wreg	equ	0xFE8
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           plusw2	equ	0xFDB
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _UART_buff_modulo_inc *****************
  4521 ;; Defined at:
  4522 ;;		line 106 in file "UART.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;  value           2   26[COMRAM] const unsigned int 
  4525 ;;  modulus         2   28[COMRAM] const unsigned int 
  4526 ;; Auto vars:     Size  Location     Type
  4527 ;;  my_value        2   30[COMRAM] unsigned int 
  4528 ;; Return value:  Size  Location     Type
  4529 ;;                  2   26[COMRAM] unsigned int 
  4530 ;; Registers used:
  4531 ;;		wreg, status,2, status,0
  4532 ;; Tracked objects:
  4533 ;;		On entry : 0/0
  4534 ;;		On exit  : 0/0
  4535 ;;		Unchanged: 0/0
  4536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4537 ;;      Params:         4       0       0       0       0       0       0
  4538 ;;      Locals:         2       0       0       0       0       0       0
  4539 ;;      Temps:          0       0       0       0       0       0       0
  4540 ;;      Totals:         6       0       0       0       0       0       0
  4541 ;;Total ram usage:        6 bytes
  4542 ;; Hardware stack levels used:    1
  4543 ;; Hardware stack levels required when called:    4
  4544 ;; This function calls:
  4545 ;;		Nothing
  4546 ;; This function is called by:
  4547 ;;		_UART_buff_put
  4548 ;;		_UART_buff_get
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           	psect	text19
  4553  001C64                     __ptext19:
  4554                           	opt stack 0
  4555  001C64                     _UART_buff_modulo_inc:
  4556                           	opt stack 21
  4557                           
  4558                           ;UART.c: 107: unsigned int my_value = value + 1;
  4559                           
  4560                           ;incstack = 0
  4561  001C64  0E01               	movlw	1
  4562  001C66  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4563  001C68  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4564  001C6A  0E00               	movlw	0
  4565  001C6C  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4566  001C6E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4567                           
  4568                           ;UART.c: 108: if (my_value >= modulus) {
  4569  001C70  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4570  001C72  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4571  001C74  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4572  001C76  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4573  001C78  A0D8               	btfss	status,0,c
  4574  001C7A  D004               	goto	l3655
  4575                           
  4576                           ;UART.c: 109: my_value = 0;
  4577  001C7C  0E00               	movlw	0
  4578  001C7E  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4579  001C80  0E00               	movlw	0
  4580  001C82  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4581  001C84                     l3655:
  4582                           
  4583                           ;UART.c: 110: }
  4584                           ;UART.c: 111: return (my_value);
  4585  001C84  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4586  001C88  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4587  001C8C  0012               	return	
  4588  001C8E                     __end_of_UART_buff_modulo_inc:
  4589                           	opt stack 0
  4590                           tosu	equ	0xFFF
  4591                           tosh	equ	0xFFE
  4592                           tosl	equ	0xFFD
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           plusw2	equ	0xFDB
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _Receive_available *****************
  4612 ;; Defined at:
  4613 ;;		line 122 in file "UART.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;		None
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;		None
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  2   28[COMRAM] int 
  4620 ;; Registers used:
  4621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4622 ;; Tracked objects:
  4623 ;;		On entry : 0/0
  4624 ;;		On exit  : 0/0
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4627 ;;      Params:         2       0       0       0       0       0       0
  4628 ;;      Locals:         0       0       0       0       0       0       0
  4629 ;;      Temps:          0       0       0       0       0       0       0
  4630 ;;      Totals:         2       0       0       0       0       0       0
  4631 ;;Total ram usage:        2 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    5
  4634 ;; This function calls:
  4635 ;;		_UART_buff_size
  4636 ;; This function is called by:
  4637 ;;		_SYSTEM_Initialize
  4638 ;;		_CRCcheck
  4639 ;;		_receiveData
  4640 ;; This function uses a non-reentrant model
  4641 ;;
  4642                           
  4643                           	psect	text20
  4644  001D86                     __ptext20:
  4645                           	opt stack 0
  4646  001D86                     _Receive_available:
  4647                           	opt stack 23
  4648                           
  4649                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4650                           
  4651                           ;incstack = 0
  4652  001D86  0E00               	movlw	low _input_buffer
  4653  001D88  6E1B               	movwf	UART_buff_size@_this,c
  4654  001D8A  0E03               	movlw	high _input_buffer
  4655  001D8C  6E1C               	movwf	UART_buff_size@_this+1,c
  4656  001D8E  ECCE  F00E         	call	_UART_buff_size	;wreg free
  4657  001D92  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4658  001D96  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4659  001D9A  0012               	return	
  4660  001D9C                     __end_of_Receive_available:
  4661                           	opt stack 0
  4662                           tosu	equ	0xFFF
  4663                           tosh	equ	0xFFE
  4664                           tosl	equ	0xFFD
  4665                           pclath	equ	0xFFA
  4666                           tblptru	equ	0xFF8
  4667                           tblptrh	equ	0xFF7
  4668                           tblptrl	equ	0xFF6
  4669                           tablat	equ	0xFF5
  4670                           prodh	equ	0xFF4
  4671                           prodl	equ	0xFF3
  4672                           intcon	equ	0xFF2
  4673                           postinc0	equ	0xFEE
  4674                           wreg	equ	0xFE8
  4675                           indf2	equ	0xFDF
  4676                           postinc2	equ	0xFDE
  4677                           postdec2	equ	0xFDD
  4678                           plusw2	equ	0xFDB
  4679                           fsr2h	equ	0xFDA
  4680                           fsr2l	equ	0xFD9
  4681                           status	equ	0xFD8
  4682                           
  4683 ;; *************** function _UART_buff_size *****************
  4684 ;; Defined at:
  4685 ;;		line 102 in file "UART.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4688 ;;		 -> output_buffer(206), input_buffer(206), 
  4689 ;; Auto vars:     Size  Location     Type
  4690 ;;		None
  4691 ;; Return value:  Size  Location     Type
  4692 ;;                  2   26[COMRAM] int 
  4693 ;; Registers used:
  4694 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4695 ;; Tracked objects:
  4696 ;;		On entry : 0/0
  4697 ;;		On exit  : 0/0
  4698 ;;		Unchanged: 0/0
  4699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4700 ;;      Params:         2       0       0       0       0       0       0
  4701 ;;      Locals:         0       0       0       0       0       0       0
  4702 ;;      Temps:          0       0       0       0       0       0       0
  4703 ;;      Totals:         2       0       0       0       0       0       0
  4704 ;;Total ram usage:        2 bytes
  4705 ;; Hardware stack levels used:    1
  4706 ;; Hardware stack levels required when called:    4
  4707 ;; This function calls:
  4708 ;;		Nothing
  4709 ;; This function is called by:
  4710 ;;		_Receive_available
  4711 ;; This function uses a non-reentrant model
  4712 ;;
  4713                           
  4714                           	psect	text21
  4715  001D9C                     __ptext21:
  4716                           	opt stack 0
  4717  001D9C                     _UART_buff_size:
  4718                           	opt stack 23
  4719                           
  4720                           ;UART.c: 103: return (_this->count);
  4721                           
  4722                           ;incstack = 0
  4723  001D9C  EE20 F0CC          	lfsr	2,204
  4724  001DA0  501B               	movf	UART_buff_size@_this,w,c
  4725  001DA2  26D9               	addwf	fsr2l,f,c
  4726  001DA4  501C               	movf	UART_buff_size@_this+1,w,c
  4727  001DA6  22DA               	addwfc	fsr2h,f,c
  4728  001DA8  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4729  001DAC  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4730  001DB0  0012               	return	
  4731  001DB2                     __end_of_UART_buff_size:
  4732                           	opt stack 0
  4733                           tosu	equ	0xFFF
  4734                           tosh	equ	0xFFE
  4735                           tosl	equ	0xFFD
  4736                           pclath	equ	0xFFA
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           prodh	equ	0xFF4
  4742                           prodl	equ	0xFF3
  4743                           intcon	equ	0xFF2
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           plusw2	equ	0xFDB
  4750                           fsr2h	equ	0xFDA
  4751                           fsr2l	equ	0xFD9
  4752                           status	equ	0xFD8
  4753                           
  4754 ;; *************** function _CRC8 *****************
  4755 ;; Defined at:
  4756 ;;		line 34 in file "FastTransfer.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4759 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1395(3), receiveData@holder(3), 
  4760 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4761 ;;  len             1   28[COMRAM] unsigned char 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  sum             1   29[COMRAM] unsigned char 
  4764 ;;  tempI           1   31[COMRAM] unsigned char 
  4765 ;;  extract         1   30[COMRAM] unsigned char 
  4766 ;;  crc             1   32[COMRAM] unsigned char 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  1    wreg      unsigned char 
  4769 ;; Registers used:
  4770 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4776 ;;      Params:         3       0       0       0       0       0       0
  4777 ;;      Locals:         4       0       0       0       0       0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0
  4779 ;;      Totals:         7       0       0       0       0       0       0
  4780 ;;Total ram usage:        7 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    4
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_sendData
  4787 ;;		_receiveData
  4788 ;;		_CRCcheck
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           	psect	text22
  4793  001A34                     __ptext22:
  4794                           	opt stack 0
  4795  001A34                     _CRC8:
  4796                           	opt stack 23
  4797                           
  4798                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4799                           
  4800                           ;incstack = 0
  4801  001A34  0E00               	movlw	0
  4802  001A36  6E21               	movwf	CRC8@crc,c
  4803                           
  4804                           ;FastTransfer.c: 36: while (len--) {
  4805  001A38  D01C               	goto	l3731
  4806  001A3A                     l3715:
  4807                           
  4808                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4809  001A3A  C01B  FFD9         	movff	CRC8@data,fsr2l
  4810  001A3E  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4811  001A42  50DF               	movf	indf2,w,c
  4812  001A44  6E1F               	movwf	CRC8@extract,c
  4813  001A46  4A1B               	infsnz	CRC8@data,f,c
  4814  001A48  2A1C               	incf	CRC8@data+1,f,c
  4815                           
  4816                           ;FastTransfer.c: 38: unsigned char tempI;
  4817                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4818  001A4A  0E08               	movlw	8
  4819  001A4C  6E20               	movwf	CRC8@tempI,c
  4820  001A4E  D00E               	goto	l3729
  4821  001A50                     l3721:
  4822                           
  4823                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4824  001A50  5021               	movf	CRC8@crc,w,c
  4825  001A52  181F               	xorwf	CRC8@extract,w,c
  4826  001A54  0B01               	andlw	1
  4827  001A56  6E1E               	movwf	CRC8@sum,c
  4828                           
  4829                           ;FastTransfer.c: 41: crc >>= 1;
  4830  001A58  90D8               	bcf	status,0,c
  4831  001A5A  3221               	rrcf	CRC8@crc,f,c
  4832                           
  4833                           ;FastTransfer.c: 42: if (sum) {
  4834  001A5C  501E               	movf	CRC8@sum,w,c
  4835  001A5E  B4D8               	btfsc	status,2,c
  4836  001A60  D002               	goto	l473
  4837                           
  4838                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4839  001A62  0E8C               	movlw	140
  4840  001A64  1A21               	xorwf	CRC8@crc,f,c
  4841  001A66                     l473:
  4842                           
  4843                           ;FastTransfer.c: 44: }
  4844                           ;FastTransfer.c: 45: extract >>= 1;
  4845  001A66  90D8               	bcf	status,0,c
  4846  001A68  321F               	rrcf	CRC8@extract,f,c
  4847  001A6A  0620               	decf	CRC8@tempI,f,c
  4848  001A6C                     l3729:
  4849  001A6C  5020               	movf	CRC8@tempI,w,c
  4850  001A6E  A4D8               	btfss	status,2,c
  4851  001A70  D7EF               	goto	l3721
  4852  001A72                     l3731:
  4853  001A72  061D               	decf	CRC8@len,f,c
  4854  001A74  281D               	incf	CRC8@len,w,c
  4855  001A76  A4D8               	btfss	status,2,c
  4856  001A78  D7E0               	goto	l3715
  4857                           
  4858                           ;FastTransfer.c: 46: }
  4859                           ;FastTransfer.c: 47: }
  4860                           ;FastTransfer.c: 48: return crc;
  4861  001A7A  5021               	movf	CRC8@crc,w,c
  4862  001A7C  0012               	return	
  4863  001A7E                     __end_of_CRC8:
  4864                           	opt stack 0
  4865                           tosu	equ	0xFFF
  4866                           tosh	equ	0xFFE
  4867                           tosl	equ	0xFFD
  4868                           pclath	equ	0xFFA
  4869                           tblptru	equ	0xFF8
  4870                           tblptrh	equ	0xFF7
  4871                           tblptrl	equ	0xFF6
  4872                           tablat	equ	0xFF5
  4873                           prodh	equ	0xFF4
  4874                           prodl	equ	0xFF3
  4875                           intcon	equ	0xFF2
  4876                           postinc0	equ	0xFEE
  4877                           wreg	equ	0xFE8
  4878                           indf2	equ	0xFDF
  4879                           postinc2	equ	0xFDE
  4880                           postdec2	equ	0xFDD
  4881                           plusw2	equ	0xFDB
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886 ;; *************** function _processPowerRequest *****************
  4887 ;; Defined at:
  4888 ;;		line 33 in file "Communications.c"
  4889 ;; Parameters:    Size  Location     Type
  4890 ;;  powerSet        2    0[BANK0 ] int 
  4891 ;; Auto vars:     Size  Location     Type
  4892 ;;		None
  4893 ;; Return value:  Size  Location     Type
  4894 ;;		None               void
  4895 ;; Registers used:
  4896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4897 ;; Tracked objects:
  4898 ;;		On entry : 0/0
  4899 ;;		On exit  : 0/0
  4900 ;;		Unchanged: 0/0
  4901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4902 ;;      Params:         0       2       0       0       0       0       0
  4903 ;;      Locals:         0       0       0       0       0       0       0
  4904 ;;      Temps:          0       0       0       0       0       0       0
  4905 ;;      Totals:         0       2       0       0       0       0       0
  4906 ;;Total ram usage:        2 bytes
  4907 ;; Hardware stack levels used:    1
  4908 ;; Hardware stack levels required when called:    7
  4909 ;; This function calls:
  4910 ;;		_EnableSlavePower
  4911 ;;		_Update
  4912 ;; This function is called by:
  4913 ;;		_updateComms
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text23
  4918  0013A0                     __ptext23:
  4919                           	opt stack 0
  4920  0013A0                     _processPowerRequest:
  4921                           	opt stack 22
  4922                           
  4923                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4924                           
  4925                           ;incstack = 0
  4926  0013A0  0100               	movlb	0	; () banked
  4927  0013A2  A1D3               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4928  0013A4  D008               	goto	l4261
  4929                           
  4930                           ; BSR set to: 0
  4931  0013A6  0E00               	movlw	0
  4932  0013A8  6E26               	movwf	EnableSlavePower@onof+1,c
  4933  0013AA  0E01               	movlw	1
  4934  0013AC  6E25               	movwf	EnableSlavePower@onof,c
  4935  0013AE  0E04               	movlw	4
  4936  0013B0  ECB7  F007         	call	_EnableSlavePower
  4937  0013B4  D007               	goto	l4263
  4938  0013B6                     l4261:
  4939                           
  4940                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4941  0013B6  0E00               	movlw	0
  4942  0013B8  6E26               	movwf	EnableSlavePower@onof+1,c
  4943  0013BA  0E00               	movlw	0
  4944  0013BC  6E25               	movwf	EnableSlavePower@onof,c
  4945  0013BE  0E04               	movlw	4
  4946  0013C0  ECB7  F007         	call	_EnableSlavePower
  4947  0013C4                     l4263:
  4948                           
  4949                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4950  0013C4  0100               	movlb	0	; () banked
  4951  0013C6  A3D3               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4952  0013C8  D008               	goto	l4267
  4953                           
  4954                           ; BSR set to: 0
  4955  0013CA  0E00               	movlw	0
  4956  0013CC  6E26               	movwf	EnableSlavePower@onof+1,c
  4957  0013CE  0E01               	movlw	1
  4958  0013D0  6E25               	movwf	EnableSlavePower@onof,c
  4959  0013D2  0E02               	movlw	2
  4960  0013D4  ECB7  F007         	call	_EnableSlavePower
  4961  0013D8  D007               	goto	l4269
  4962  0013DA                     l4267:
  4963                           
  4964                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4965  0013DA  0E00               	movlw	0
  4966  0013DC  6E26               	movwf	EnableSlavePower@onof+1,c
  4967  0013DE  0E00               	movlw	0
  4968  0013E0  6E25               	movwf	EnableSlavePower@onof,c
  4969  0013E2  0E02               	movlw	2
  4970  0013E4  ECB7  F007         	call	_EnableSlavePower
  4971  0013E8                     l4269:
  4972                           
  4973                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4974  0013E8  0100               	movlb	0	; () banked
  4975  0013EA  A5D3               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4976  0013EC  D008               	goto	l4273
  4977                           
  4978                           ; BSR set to: 0
  4979  0013EE  0E00               	movlw	0
  4980  0013F0  6E26               	movwf	EnableSlavePower@onof+1,c
  4981  0013F2  0E01               	movlw	1
  4982  0013F4  6E25               	movwf	EnableSlavePower@onof,c
  4983  0013F6  0E01               	movlw	1
  4984  0013F8  ECB7  F007         	call	_EnableSlavePower
  4985  0013FC  D007               	goto	l4275
  4986  0013FE                     l4273:
  4987                           
  4988                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4989  0013FE  0E00               	movlw	0
  4990  001400  6E26               	movwf	EnableSlavePower@onof+1,c
  4991  001402  0E00               	movlw	0
  4992  001404  6E25               	movwf	EnableSlavePower@onof,c
  4993  001406  0E01               	movlw	1
  4994  001408  ECB7  F007         	call	_EnableSlavePower
  4995  00140C                     l4275:
  4996                           
  4997                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  4998  00140C  0100               	movlb	0	; () banked
  4999  00140E  A7D3               	btfss	processPowerRequest@powerSet& (0+255),3,b
  5000  001410  D008               	goto	l4279
  5001                           
  5002                           ; BSR set to: 0
  5003  001412  0E00               	movlw	0
  5004  001414  6E26               	movwf	EnableSlavePower@onof+1,c
  5005  001416  0E01               	movlw	1
  5006  001418  6E25               	movwf	EnableSlavePower@onof,c
  5007  00141A  0E03               	movlw	3
  5008  00141C  ECB7  F007         	call	_EnableSlavePower
  5009  001420  D007               	goto	l4281
  5010  001422                     l4279:
  5011                           
  5012                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  5013  001422  0E00               	movlw	0
  5014  001424  6E26               	movwf	EnableSlavePower@onof+1,c
  5015  001426  0E00               	movlw	0
  5016  001428  6E25               	movwf	EnableSlavePower@onof,c
  5017  00142A  0E03               	movlw	3
  5018  00142C  ECB7  F007         	call	_EnableSlavePower
  5019  001430                     l4281:
  5020                           
  5021                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  5022  001430  0100               	movlb	0	; () banked
  5023  001432  A9D3               	btfss	processPowerRequest@powerSet& (0+255),4,b
  5024  001434  D008               	goto	l4285
  5025                           
  5026                           ; BSR set to: 0
  5027  001436  0E00               	movlw	0
  5028  001438  6E26               	movwf	EnableSlavePower@onof+1,c
  5029  00143A  0E01               	movlw	1
  5030  00143C  6E25               	movwf	EnableSlavePower@onof,c
  5031  00143E  0E05               	movlw	5
  5032  001440  ECB7  F007         	call	_EnableSlavePower
  5033  001444  D007               	goto	l399
  5034  001446                     l4285:
  5035                           
  5036                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  5037  001446  0E00               	movlw	0
  5038  001448  6E26               	movwf	EnableSlavePower@onof+1,c
  5039  00144A  0E00               	movlw	0
  5040  00144C  6E25               	movwf	EnableSlavePower@onof,c
  5041  00144E  0E05               	movlw	5
  5042  001450  ECB7  F007         	call	_EnableSlavePower
  5043  001454                     l399:
  5044                           
  5045                           ;Communications.c: 45: Update();
  5046  001454  EC12  F00F         	call	_Update	;wreg free
  5047  001458  0012               	return		;funcret
  5048  00145A                     __end_of_processPowerRequest:
  5049                           	opt stack 0
  5050                           tosu	equ	0xFFF
  5051                           tosh	equ	0xFFE
  5052                           tosl	equ	0xFFD
  5053                           pclath	equ	0xFFA
  5054                           tblptru	equ	0xFF8
  5055                           tblptrh	equ	0xFF7
  5056                           tblptrl	equ	0xFF6
  5057                           tablat	equ	0xFF5
  5058                           prodh	equ	0xFF4
  5059                           prodl	equ	0xFF3
  5060                           intcon	equ	0xFF2
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _SYSTEM_Initialize *****************
  5072 ;; Defined at:
  5073 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;		None               void
  5080 ;; Registers used:
  5081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5087 ;;      Params:         0       0       0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    7
  5094 ;; This function calls:
  5095 ;;		_ADC_Initialize
  5096 ;;		_EUSART1_Initialize
  5097 ;;		_INTERRUPT_Initialize
  5098 ;;		_OSCILLATOR_Initialize
  5099 ;;		_PIN_MANAGER_Initialize
  5100 ;;		_PWM4_Initialize
  5101 ;;		_TMR2_Initialize
  5102 ;;		_begin
  5103 ;; This function is called by:
  5104 ;;		_main
  5105 ;; This function uses a non-reentrant model
  5106 ;;
  5107                           
  5108                           	psect	text24
  5109  0016FA                     __ptext24:
  5110                           	opt stack 0
  5111  0016FA                     _SYSTEM_Initialize:
  5112                           	opt stack 23
  5113                           
  5114                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5115                           
  5116                           ;incstack = 0
  5117  0016FA  EC06  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  5118                           
  5119                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5120  0016FE  EC40  F00B         	call	_PIN_MANAGER_Initialize	;wreg free
  5121                           
  5122                           ;mcc.c: 116: INTERRUPT_Initialize();
  5123  001702  EC0D  F00F         	call	_INTERRUPT_Initialize	;wreg free
  5124                           
  5125                           ;mcc.c: 117: EUSART1_Initialize();
  5126  001706  EC83  F00D         	call	_EUSART1_Initialize	;wreg free
  5127                           
  5128                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5129  00170A  0E9A               	movlw	low _receiveArray
  5130  00170C  0100               	movlb	0	; () banked
  5131  00170E  6FD3               	movwf	begin@ptr& (0+255),b
  5132  001710  0E00               	movlw	high _receiveArray
  5133  001712  0100               	movlb	0	; () banked
  5134  001714  6FD4               	movwf	(begin@ptr+1)& (0+255),b
  5135  001716  0E28               	movlw	40
  5136  001718  0100               	movlb	0	; () banked
  5137  00171A  6FD5               	movwf	begin@maxSize& (0+255),b
  5138  00171C  0E05               	movlw	5
  5139  00171E  0100               	movlb	0	; () banked
  5140  001720  6FD6               	movwf	begin@givenAddress& (0+255),b
  5141  001722  0E00               	movlw	0
  5142  001724  0100               	movlb	0	; () banked
  5143  001726  6FD7               	movwf	begin@error& (0+255),b
  5144  001728  0EE0               	movlw	low _Send_put
  5145  00172A  0100               	movlb	0	; () banked
  5146  00172C  6FD8               	movwf	begin@stufftosend& (0+255),b
  5147  00172E  0E1B               	movlw	high _Send_put
  5148  001730  0100               	movlb	0	; () banked
  5149  001732  6FD9               	movwf	(begin@stufftosend+1)& (0+255),b
  5150  001734  0EFE               	movlw	low _Receive_get
  5151  001736  0100               	movlb	0	; () banked
  5152  001738  6FDA               	movwf	begin@stufftoreceive& (0+255),b
  5153  00173A  0E1D               	movlw	high _Receive_get
  5154  00173C  0100               	movlb	0	; () banked
  5155  00173E  6FDB               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5156  001740  0E86               	movlw	low _Receive_available
  5157  001742  0100               	movlb	0	; () banked
  5158  001744  6FDC               	movwf	begin@stuffavailable& (0+255),b
  5159  001746  0E1D               	movlw	high _Receive_available
  5160  001748  0100               	movlb	0	; () banked
  5161  00174A  6FDD               	movwf	(begin@stuffavailable+1)& (0+255),b
  5162  00174C  0EF0               	movlw	low _Receive_peek
  5163  00174E  0100               	movlb	0	; () banked
  5164  001750  6FDE               	movwf	begin@stuffpeek& (0+255),b
  5165  001752  0E1D               	movlw	high _Receive_peek
  5166  001754  0100               	movlb	0	; () banked
  5167  001756  6FDF               	movwf	(begin@stuffpeek+1)& (0+255),b
  5168  001758  EC4C  F00C         	call	_begin	;wreg free
  5169                           
  5170                           ;mcc.c: 119: PWM4_Initialize();
  5171  00175C  ECAA  F00E         	call	_PWM4_Initialize	;wreg free
  5172                           
  5173                           ;mcc.c: 120: TMR2_Initialize();
  5174  001760  ECE4  F00E         	call	_TMR2_Initialize	;wreg free
  5175                           
  5176                           ;mcc.c: 121: LATB4 = 1;
  5177  001764  888A               	bsf	3978,4,c	;volatile
  5178                           
  5179                           ;mcc.c: 122: ADC_Initialize();
  5180  001766  ECB7  F00E         	call	_ADC_Initialize	;wreg free
  5181  00176A  0012               	return		;funcret
  5182  00176C                     __end_of_SYSTEM_Initialize:
  5183                           	opt stack 0
  5184                           tosu	equ	0xFFF
  5185                           tosh	equ	0xFFE
  5186                           tosl	equ	0xFFD
  5187                           pclath	equ	0xFFA
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           plusw2	equ	0xFDB
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function _begin *****************
  5206 ;; Defined at:
  5207 ;;		line 18 in file "FastTransfer.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  5210 ;;		 -> receiveArray(40), 
  5211 ;;  maxSize         1    2[BANK0 ] unsigned char 
  5212 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  5213 ;;  error           1    4[BANK0 ] unsigned char 
  5214 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  5215 ;;		 -> Send_put(0), 
  5216 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  5217 ;;		 -> Receive_get(1), 
  5218 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  5219 ;;		 -> Receive_available(2), 
  5220 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  5221 ;;		 -> Receive_peek(1), 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;		None               void
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5233 ;;      Params:         0      13       0       0       0       0       0
  5234 ;;      Locals:         0       0       0       0       0       0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0
  5236 ;;      Totals:         0      13       0       0       0       0       0
  5237 ;;Total ram usage:       13 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    5
  5240 ;; This function calls:
  5241 ;;		___awdiv
  5242 ;; This function is called by:
  5243 ;;		_SYSTEM_Initialize
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text25
  5248  001898                     __ptext25:
  5249                           	opt stack 0
  5250  001898                     _begin:
  5251                           	opt stack 24
  5252                           
  5253                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5254                           
  5255                           ;incstack = 0
  5256  001898  C0D3  F098         	movff	begin@ptr,_receiveArrayAddress
  5257  00189C  C0D4  F099         	movff	begin@ptr+1,_receiveArrayAddress+1
  5258                           
  5259                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5260  0018A0  C0D6  F03F         	movff	begin@givenAddress,_moduleAddress
  5261                           
  5262                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5263  0018A4  C0D8  F036         	movff	begin@stufftosend,_serial_write
  5264  0018A8  C0D9  F037         	movff	begin@stufftosend+1,_serial_write+1
  5265                           
  5266                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5267  0018AC  C0DC  F030         	movff	begin@stuffavailable,_serial_available
  5268  0018B0  C0DD  F031         	movff	begin@stuffavailable+1,_serial_available+1
  5269                           
  5270                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5271  0018B4  C0DE  F032         	movff	begin@stuffpeek,_serial_peek
  5272  0018B8  C0DF  F033         	movff	begin@stuffpeek+1,_serial_peek+1
  5273                           
  5274                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5275  0018BC  C0DA  F034         	movff	begin@stufftoreceive,_serial_read
  5276  0018C0  C0DB  F035         	movff	begin@stufftoreceive+1,_serial_read+1
  5277                           
  5278                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5279  0018C4  C0D5  F01B         	movff	begin@maxSize,___awdiv@dividend
  5280  0018C8  6A1C               	clrf	___awdiv@dividend+1,c
  5281  0018CA  0E00               	movlw	0
  5282  0018CC  6E1E               	movwf	___awdiv@divisor+1,c
  5283  0018CE  0E02               	movlw	2
  5284  0018D0  6E1D               	movwf	___awdiv@divisor,c
  5285  0018D2  ECBF  F00A         	call	___awdiv	;wreg free
  5286  0018D6  501B               	movf	?___awdiv,w,c
  5287  0018D8  6E3E               	movwf	_maxDataAddress,c
  5288                           
  5289                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5290  0018DA  0E30               	movlw	low _ring_buffer
  5291  0018DC  6E2E               	movwf	_sendStructAddress,c
  5292  0018DE  0E01               	movlw	high _ring_buffer
  5293  0018E0  6E2F               	movwf	_sendStructAddress+1,c
  5294                           
  5295                           ;FastTransfer.c: 27: AKNAKsend = error;
  5296  0018E2  C0D7  F03C         	movff	begin@error,_AKNAKsend
  5297                           
  5298                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5299  0018E6  0E00               	movlw	0
  5300  0018E8  0100               	movlb	0	; () banked
  5301  0018EA  6F93               	movwf	(_alignErrorCounter+1)& (0+255),b
  5302  0018EC  0E00               	movlw	0
  5303  0018EE  6F92               	movwf	_alignErrorCounter& (0+255),b
  5304                           
  5305                           ; BSR set to: 0
  5306  0018F0  0012               	return		;funcret
  5307  0018F2                     __end_of_begin:
  5308                           	opt stack 0
  5309                           tosu	equ	0xFFF
  5310                           tosh	equ	0xFFE
  5311                           tosl	equ	0xFFD
  5312                           pclath	equ	0xFFA
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           prodh	equ	0xFF4
  5318                           prodl	equ	0xFF3
  5319                           intcon	equ	0xFF2
  5320                           postinc0	equ	0xFEE
  5321                           wreg	equ	0xFE8
  5322                           indf2	equ	0xFDF
  5323                           postinc2	equ	0xFDE
  5324                           postdec2	equ	0xFDD
  5325                           plusw2	equ	0xFDB
  5326                           fsr2h	equ	0xFDA
  5327                           fsr2l	equ	0xFD9
  5328                           status	equ	0xFD8
  5329                           
  5330 ;; *************** function ___awdiv *****************
  5331 ;; Defined at:
  5332 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\awdiv.c"
  5333 ;; Parameters:    Size  Location     Type
  5334 ;;  dividend        2   26[COMRAM] int 
  5335 ;;  divisor         2   28[COMRAM] int 
  5336 ;; Auto vars:     Size  Location     Type
  5337 ;;  quotient        2   32[COMRAM] int 
  5338 ;;  sign            1   31[COMRAM] unsigned char 
  5339 ;;  counter         1   30[COMRAM] unsigned char 
  5340 ;; Return value:  Size  Location     Type
  5341 ;;                  2   26[COMRAM] int 
  5342 ;; Registers used:
  5343 ;;		wreg, status,2, status,0
  5344 ;; Tracked objects:
  5345 ;;		On entry : 0/0
  5346 ;;		On exit  : 0/0
  5347 ;;		Unchanged: 0/0
  5348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5349 ;;      Params:         4       0       0       0       0       0       0
  5350 ;;      Locals:         4       0       0       0       0       0       0
  5351 ;;      Temps:          0       0       0       0       0       0       0
  5352 ;;      Totals:         8       0       0       0       0       0       0
  5353 ;;Total ram usage:        8 bytes
  5354 ;; Hardware stack levels used:    1
  5355 ;; Hardware stack levels required when called:    4
  5356 ;; This function calls:
  5357 ;;		Nothing
  5358 ;; This function is called by:
  5359 ;;		_begin
  5360 ;; This function uses a non-reentrant model
  5361 ;;
  5362                           
  5363                           	psect	text26
  5364  00157E                     __ptext26:
  5365                           	opt stack 0
  5366  00157E                     ___awdiv:
  5367                           	opt stack 24
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;incstack = 0
  5371  00157E  0E00               	movlw	0
  5372  001580  6E20               	movwf	___awdiv@sign,c
  5373  001582  AE1E               	btfss	___awdiv@divisor+1,7,c
  5374  001584  D006               	goto	l3979
  5375  001586  6C1D               	negf	___awdiv@divisor,c
  5376  001588  1E1E               	comf	___awdiv@divisor+1,f,c
  5377  00158A  B0D8               	btfsc	status,0,c
  5378  00158C  2A1E               	incf	___awdiv@divisor+1,f,c
  5379  00158E  0E01               	movlw	1
  5380  001590  6E20               	movwf	___awdiv@sign,c
  5381  001592                     l3979:
  5382  001592  AE1C               	btfss	___awdiv@dividend+1,7,c
  5383  001594  D006               	goto	l3985
  5384  001596  6C1B               	negf	___awdiv@dividend,c
  5385  001598  1E1C               	comf	___awdiv@dividend+1,f,c
  5386  00159A  B0D8               	btfsc	status,0,c
  5387  00159C  2A1C               	incf	___awdiv@dividend+1,f,c
  5388  00159E  0E01               	movlw	1
  5389  0015A0  1A20               	xorwf	___awdiv@sign,f,c
  5390  0015A2                     l3985:
  5391  0015A2  0E00               	movlw	0
  5392  0015A4  6E22               	movwf	___awdiv@quotient+1,c
  5393  0015A6  0E00               	movlw	0
  5394  0015A8  6E21               	movwf	___awdiv@quotient,c
  5395  0015AA  501D               	movf	___awdiv@divisor,w,c
  5396  0015AC  101E               	iorwf	___awdiv@divisor+1,w,c
  5397  0015AE  B4D8               	btfsc	status,2,c
  5398  0015B0  D01C               	goto	l4007
  5399  0015B2  0E01               	movlw	1
  5400  0015B4  6E1F               	movwf	___awdiv@counter,c
  5401  0015B6  D004               	goto	l3993
  5402  0015B8                     l3991:
  5403  0015B8  90D8               	bcf	status,0,c
  5404  0015BA  361D               	rlcf	___awdiv@divisor,f,c
  5405  0015BC  361E               	rlcf	___awdiv@divisor+1,f,c
  5406  0015BE  2A1F               	incf	___awdiv@counter,f,c
  5407  0015C0                     l3993:
  5408  0015C0  AE1E               	btfss	___awdiv@divisor+1,7,c
  5409  0015C2  D7FA               	goto	l3991
  5410  0015C4                     l3995:
  5411  0015C4  90D8               	bcf	status,0,c
  5412  0015C6  3621               	rlcf	___awdiv@quotient,f,c
  5413  0015C8  3622               	rlcf	___awdiv@quotient+1,f,c
  5414  0015CA  501D               	movf	___awdiv@divisor,w,c
  5415  0015CC  5C1B               	subwf	___awdiv@dividend,w,c
  5416  0015CE  501E               	movf	___awdiv@divisor+1,w,c
  5417  0015D0  581C               	subwfb	___awdiv@dividend+1,w,c
  5418  0015D2  A0D8               	btfss	status,0,c
  5419  0015D4  D005               	goto	l4003
  5420  0015D6  501D               	movf	___awdiv@divisor,w,c
  5421  0015D8  5E1B               	subwf	___awdiv@dividend,f,c
  5422  0015DA  501E               	movf	___awdiv@divisor+1,w,c
  5423  0015DC  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5424  0015DE  8021               	bsf	___awdiv@quotient,0,c
  5425  0015E0                     l4003:
  5426  0015E0  90D8               	bcf	status,0,c
  5427  0015E2  321E               	rrcf	___awdiv@divisor+1,f,c
  5428  0015E4  321D               	rrcf	___awdiv@divisor,f,c
  5429  0015E6  2E1F               	decfsz	___awdiv@counter,f,c
  5430  0015E8  D7ED               	goto	l3995
  5431  0015EA                     l4007:
  5432  0015EA  5020               	movf	___awdiv@sign,w,c
  5433  0015EC  B4D8               	btfsc	status,2,c
  5434  0015EE  D004               	goto	l4011
  5435  0015F0  6C21               	negf	___awdiv@quotient,c
  5436  0015F2  1E22               	comf	___awdiv@quotient+1,f,c
  5437  0015F4  B0D8               	btfsc	status,0,c
  5438  0015F6  2A22               	incf	___awdiv@quotient+1,f,c
  5439  0015F8                     l4011:
  5440  0015F8  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5441  0015FC  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5442  001600  0012               	return	
  5443  001602                     __end_of___awdiv:
  5444                           	opt stack 0
  5445                           tosu	equ	0xFFF
  5446                           tosh	equ	0xFFE
  5447                           tosl	equ	0xFFD
  5448                           pclath	equ	0xFFA
  5449                           tblptru	equ	0xFF8
  5450                           tblptrh	equ	0xFF7
  5451                           tblptrl	equ	0xFF6
  5452                           tablat	equ	0xFF5
  5453                           prodh	equ	0xFF4
  5454                           prodl	equ	0xFF3
  5455                           intcon	equ	0xFF2
  5456                           postinc0	equ	0xFEE
  5457                           wreg	equ	0xFE8
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           plusw2	equ	0xFDB
  5462                           fsr2h	equ	0xFDA
  5463                           fsr2l	equ	0xFD9
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function _TMR2_Initialize *****************
  5467 ;; Defined at:
  5468 ;;		line 58 in file "mcc_generated_files/tmr2.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;		None
  5471 ;; Auto vars:     Size  Location     Type
  5472 ;;		None
  5473 ;; Return value:  Size  Location     Type
  5474 ;;		None               void
  5475 ;; Registers used:
  5476 ;;		wreg, status,2, cstack
  5477 ;; Tracked objects:
  5478 ;;		On entry : 0/0
  5479 ;;		On exit  : 0/0
  5480 ;;		Unchanged: 0/0
  5481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5482 ;;      Params:         0       0       0       0       0       0       0
  5483 ;;      Locals:         0       0       0       0       0       0       0
  5484 ;;      Temps:          0       0       0       0       0       0       0
  5485 ;;      Totals:         0       0       0       0       0       0       0
  5486 ;;Total ram usage:        0 bytes
  5487 ;; Hardware stack levels used:    1
  5488 ;; Hardware stack levels required when called:    5
  5489 ;; This function calls:
  5490 ;;		_TMR2_StartTimer
  5491 ;; This function is called by:
  5492 ;;		_SYSTEM_Initialize
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text27
  5497  001DC8                     __ptext27:
  5498                           	opt stack 0
  5499  001DC8                     _TMR2_Initialize:
  5500                           	opt stack 24
  5501                           
  5502                           ;tmr2.c: 63: T2CON = 0x1A;
  5503                           
  5504                           ;incstack = 0
  5505  001DC8  0E1A               	movlw	26
  5506  001DCA  6EBA               	movwf	4026,c	;volatile
  5507                           
  5508                           ;tmr2.c: 66: PR2 = 0x7C;
  5509  001DCC  0E7C               	movlw	124
  5510  001DCE  6EBB               	movwf	4027,c	;volatile
  5511                           
  5512                           ;tmr2.c: 69: TMR2 = 0x00;
  5513  001DD0  0E00               	movlw	0
  5514  001DD2  6EBC               	movwf	4028,c	;volatile
  5515                           
  5516                           ;tmr2.c: 72: PIR1bits.TMR2IF = 0;
  5517  001DD4  929E               	bcf	3998,1,c	;volatile
  5518                           
  5519                           ;tmr2.c: 75: TMR2_StartTimer();
  5520  001DD6  EC15  F00F         	call	_TMR2_StartTimer	;wreg free
  5521  001DDA  0012               	return		;funcret
  5522  001DDC                     __end_of_TMR2_Initialize:
  5523                           	opt stack 0
  5524                           tosu	equ	0xFFF
  5525                           tosh	equ	0xFFE
  5526                           tosl	equ	0xFFD
  5527                           pclath	equ	0xFFA
  5528                           tblptru	equ	0xFF8
  5529                           tblptrh	equ	0xFF7
  5530                           tblptrl	equ	0xFF6
  5531                           tablat	equ	0xFF5
  5532                           prodh	equ	0xFF4
  5533                           prodl	equ	0xFF3
  5534                           intcon	equ	0xFF2
  5535                           postinc0	equ	0xFEE
  5536                           wreg	equ	0xFE8
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           postdec2	equ	0xFDD
  5540                           plusw2	equ	0xFDB
  5541                           fsr2h	equ	0xFDA
  5542                           fsr2l	equ	0xFD9
  5543                           status	equ	0xFD8
  5544                           
  5545 ;; *************** function _TMR2_StartTimer *****************
  5546 ;; Defined at:
  5547 ;;		line 78 in file "mcc_generated_files/tmr2.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;		None
  5552 ;; Return value:  Size  Location     Type
  5553 ;;		None               void
  5554 ;; Registers used:
  5555 ;;		None
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/0
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5561 ;;      Params:         0       0       0       0       0       0       0
  5562 ;;      Locals:         0       0       0       0       0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0
  5564 ;;      Totals:         0       0       0       0       0       0       0
  5565 ;;Total ram usage:        0 bytes
  5566 ;; Hardware stack levels used:    1
  5567 ;; Hardware stack levels required when called:    4
  5568 ;; This function calls:
  5569 ;;		Nothing
  5570 ;; This function is called by:
  5571 ;;		_TMR2_Initialize
  5572 ;; This function uses a non-reentrant model
  5573 ;;
  5574                           
  5575                           	psect	text28
  5576  001E2A                     __ptext28:
  5577                           	opt stack 0
  5578  001E2A                     _TMR2_StartTimer:
  5579                           	opt stack 24
  5580                           
  5581                           ;tmr2.c: 81: T2CONbits.TMR2ON = 1;
  5582                           
  5583                           ;incstack = 0
  5584  001E2A  84BA               	bsf	4026,2,c	;volatile
  5585  001E2C  0012               	return		;funcret
  5586  001E2E                     __end_of_TMR2_StartTimer:
  5587                           	opt stack 0
  5588                           tosu	equ	0xFFF
  5589                           tosh	equ	0xFFE
  5590                           tosl	equ	0xFFD
  5591                           pclath	equ	0xFFA
  5592                           tblptru	equ	0xFF8
  5593                           tblptrh	equ	0xFF7
  5594                           tblptrl	equ	0xFF6
  5595                           tablat	equ	0xFF5
  5596                           prodh	equ	0xFF4
  5597                           prodl	equ	0xFF3
  5598                           intcon	equ	0xFF2
  5599                           postinc0	equ	0xFEE
  5600                           wreg	equ	0xFE8
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           postdec2	equ	0xFDD
  5604                           plusw2	equ	0xFDB
  5605                           fsr2h	equ	0xFDA
  5606                           fsr2l	equ	0xFD9
  5607                           status	equ	0xFD8
  5608                           
  5609 ;; *************** function _PWM4_Initialize *****************
  5610 ;; Defined at:
  5611 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;		None
  5616 ;; Return value:  Size  Location     Type
  5617 ;;		None               void
  5618 ;; Registers used:
  5619 ;;		wreg, status,2
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5625 ;;      Params:         0       0       0       0       0       0       0
  5626 ;;      Locals:         0       0       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0
  5628 ;;      Totals:         0       0       0       0       0       0       0
  5629 ;;Total ram usage:        0 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    4
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_SYSTEM_Initialize
  5636 ;; This function uses a non-reentrant model
  5637 ;;
  5638                           
  5639                           	psect	text29
  5640  001D54                     __ptext29:
  5641                           	opt stack 0
  5642  001D54                     _PWM4_Initialize:
  5643                           	opt stack 25
  5644                           
  5645                           ;pwm4.c: 69: CCP4CON = 0x1C;
  5646                           
  5647                           ;incstack = 0
  5648  001D54  0E1C               	movlw	28
  5649  001D56  010F               	movlb	15	; () banked
  5650  001D58  6F57               	movwf	87,b	;volatile
  5651                           
  5652                           ;pwm4.c: 72: CCPR4L = 0x3E;
  5653  001D5A  0E3E               	movlw	62
  5654  001D5C  010F               	movlb	15	; () banked
  5655  001D5E  6F58               	movwf	88,b	;volatile
  5656                           
  5657                           ;pwm4.c: 75: CCPR4H = 0x00;
  5658  001D60  0E00               	movlw	0
  5659  001D62  010F               	movlb	15	; () banked
  5660  001D64  6F59               	movwf	89,b	;volatile
  5661                           
  5662                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  5663  001D66  0EFC               	movlw	-4
  5664  001D68  010F               	movlb	15	; () banked
  5665  001D6A  1748               	andwf	72,f,b	;volatile
  5666                           
  5667                           ; BSR set to: 15
  5668  001D6C  0012               	return		;funcret
  5669  001D6E                     __end_of_PWM4_Initialize:
  5670                           	opt stack 0
  5671                           tosu	equ	0xFFF
  5672                           tosh	equ	0xFFE
  5673                           tosl	equ	0xFFD
  5674                           pclath	equ	0xFFA
  5675                           tblptru	equ	0xFF8
  5676                           tblptrh	equ	0xFF7
  5677                           tblptrl	equ	0xFF6
  5678                           tablat	equ	0xFF5
  5679                           prodh	equ	0xFF4
  5680                           prodl	equ	0xFF3
  5681                           intcon	equ	0xFF2
  5682                           postinc0	equ	0xFEE
  5683                           wreg	equ	0xFE8
  5684                           indf2	equ	0xFDF
  5685                           postinc2	equ	0xFDE
  5686                           postdec2	equ	0xFDD
  5687                           plusw2	equ	0xFDB
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _PIN_MANAGER_Initialize *****************
  5693 ;; Defined at:
  5694 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;		None               void
  5701 ;; Registers used:
  5702 ;;		wreg, status,2
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5708 ;;      Params:         0       0       0       0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    4
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_SYSTEM_Initialize
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text30
  5723  001680                     __ptext30:
  5724                           	opt stack 0
  5725  001680                     _PIN_MANAGER_Initialize:
  5726                           	opt stack 25
  5727                           
  5728                           ;pin_manager.c: 52: LATA = 0x00;
  5729                           
  5730                           ; BSR set to: 15
  5731                           ;incstack = 0
  5732  001680  0E00               	movlw	0
  5733  001682  6E89               	movwf	3977,c	;volatile
  5734                           
  5735                           ;pin_manager.c: 53: TRISA = 0xF7;
  5736  001684  0EF7               	movlw	247
  5737  001686  6E92               	movwf	3986,c	;volatile
  5738                           
  5739                           ;pin_manager.c: 54: ANSELA = 0x27;
  5740  001688  0E27               	movlw	39
  5741  00168A  010F               	movlb	15	; () banked
  5742  00168C  6F38               	movwf	56,b	;volatile
  5743                           
  5744                           ;pin_manager.c: 56: LATB = 0x01;
  5745  00168E  0E01               	movlw	1
  5746  001690  6E8A               	movwf	3978,c	;volatile
  5747                           
  5748                           ;pin_manager.c: 57: TRISB = 0xFE;
  5749  001692  0EFE               	movlw	254
  5750  001694  6E93               	movwf	3987,c	;volatile
  5751                           
  5752                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5753  001696  0E3E               	movlw	62
  5754  001698  010F               	movlb	15	; () banked
  5755  00169A  6F39               	movwf	57,b	;volatile
  5756                           
  5757                           ;pin_manager.c: 59: WPUB = 0x00;
  5758  00169C  0E00               	movlw	0
  5759  00169E  6E61               	movwf	3937,c	;volatile
  5760                           
  5761                           ;pin_manager.c: 61: LATC = 0x00;
  5762  0016A0  0E00               	movlw	0
  5763  0016A2  6E8B               	movwf	3979,c	;volatile
  5764                           
  5765                           ;pin_manager.c: 62: TRISC = 0xDF;
  5766  0016A4  0EDF               	movlw	223
  5767  0016A6  6E94               	movwf	3988,c	;volatile
  5768                           
  5769                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5770  0016A8  0E1C               	movlw	28
  5771  0016AA  010F               	movlb	15	; () banked
  5772  0016AC  6F3A               	movwf	58,b	;volatile
  5773                           
  5774                           ;pin_manager.c: 65: LATD = 0x00;
  5775  0016AE  0E00               	movlw	0
  5776  0016B0  6E8C               	movwf	3980,c	;volatile
  5777                           
  5778                           ;pin_manager.c: 66: TRISD = 0x0F;
  5779  0016B2  0E0F               	movlw	15
  5780  0016B4  6E95               	movwf	3989,c	;volatile
  5781                           
  5782                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5783  0016B6  0E0F               	movlw	15
  5784  0016B8  010F               	movlb	15	; () banked
  5785  0016BA  6F3B               	movwf	59,b	;volatile
  5786                           
  5787                           ;pin_manager.c: 69: LATE = 0x00;
  5788  0016BC  0E00               	movlw	0
  5789  0016BE  6E8D               	movwf	3981,c	;volatile
  5790                           
  5791                           ;pin_manager.c: 70: TRISE = 0x07;
  5792  0016C0  0E07               	movlw	7
  5793  0016C2  6E96               	movwf	3990,c	;volatile
  5794                           
  5795                           ;pin_manager.c: 71: ANSELE = 0x07;
  5796  0016C4  0E07               	movlw	7
  5797  0016C6  010F               	movlb	15	; () banked
  5798  0016C8  6F3C               	movwf	60,b	;volatile
  5799                           
  5800                           ; BSR set to: 15
  5801                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5802  0016CA  8C94               	bsf	3988,6,c	;volatile
  5803                           
  5804                           ; BSR set to: 15
  5805                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5806  0016CC  8E94               	bsf	3988,7,c	;volatile
  5807                           
  5808                           ; BSR set to: 15
  5809                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5810  0016CE  9A94               	bcf	3988,5,c	;volatile
  5811                           
  5812                           ; BSR set to: 15
  5813                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5814  0016D0  8A8B               	bsf	3979,5,c	;volatile
  5815                           
  5816                           ; BSR set to: 15
  5817                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5818  0016D2  8C8B               	bsf	3979,6,c	;volatile
  5819                           
  5820                           ; BSR set to: 15
  5821                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5822  0016D4  8E8B               	bsf	3979,7,c	;volatile
  5823                           
  5824                           ; BSR set to: 15
  5825                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5826  0016D6  010F               	movlb	15	; () banked
  5827  0016D8  9B3A               	bcf	58,5,b	;volatile
  5828                           
  5829                           ; BSR set to: 15
  5830                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5831  0016DA  010F               	movlb	15	; () banked
  5832  0016DC  9D3A               	bcf	58,6,b	;volatile
  5833                           
  5834                           ; BSR set to: 15
  5835                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5836  0016DE  010F               	movlb	15	; () banked
  5837  0016E0  9F3A               	bcf	58,7,b	;volatile
  5838                           
  5839                           ; BSR set to: 15
  5840                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5841  0016E2  8EF1               	bsf	intcon2,7,c	;volatile
  5842                           
  5843                           ; BSR set to: 15
  5844                           
  5845                           ; BSR set to: 15
  5846                           
  5847                           ;pin_manager.c: 84: do { TRISB4 = 0; } while(0);
  5848  0016E4  9893               	bcf	3987,4,c	;volatile
  5849                           
  5850                           ; BSR set to: 15
  5851                           
  5852                           ; BSR set to: 15
  5853                           
  5854                           ;pin_manager.c: 85: do { TRISB3 = 0; } while(0);
  5855                           
  5856                           ; BSR set to: 15
  5857  0016E6  9693               	bcf	3987,3,c	;volatile
  5858                           
  5859                           ; BSR set to: 15
  5860                           
  5861                           ; BSR set to: 15
  5862                           
  5863                           ;pin_manager.c: 86: do { TRISB5 = 0; } while(0);
  5864                           
  5865                           ; BSR set to: 15
  5866  0016E8  9A93               	bcf	3987,5,c	;volatile
  5867                           
  5868                           ; BSR set to: 15
  5869                           ;pin_manager.c: 88: TRISDbits.RD1 = 0;
  5870                           
  5871                           ; BSR set to: 15
  5872  0016EA  9295               	bcf	3989,1,c	;volatile
  5873                           
  5874                           ; BSR set to: 15
  5875                           
  5876                           ; BSR set to: 15
  5877                           
  5878                           ;pin_manager.c: 90: do { ANSB3 = 0; } while(0);
  5879  0016EC  010F               	movlb	15	; () banked
  5880  0016EE  9739               	bcf	57,3,b	;volatile
  5881                           
  5882                           ; BSR set to: 15
  5883                           
  5884                           ; BSR set to: 15
  5885                           
  5886                           ;pin_manager.c: 91: do { ANSD7 = 0; } while(0);
  5887                           
  5888                           ; BSR set to: 15
  5889  0016F0  010F               	movlb	15	; () banked
  5890  0016F2  9F3B               	bcf	59,7,b	;volatile
  5891                           
  5892                           ; BSR set to: 15
  5893                           
  5894                           ; BSR set to: 15
  5895                           
  5896                           ;pin_manager.c: 92: do { ANSB4 = 0; } while(0);
  5897                           
  5898                           ; BSR set to: 15
  5899  0016F4  010F               	movlb	15	; () banked
  5900  0016F6  9939               	bcf	57,4,b	;volatile
  5901  0016F8  0012               	return	
  5902  0016FA                     __end_of_PIN_MANAGER_Initialize:
  5903                           	opt stack 0
  5904                           tosu	equ	0xFFF
  5905                           tosh	equ	0xFFE
  5906                           tosl	equ	0xFFD
  5907                           pclath	equ	0xFFA
  5908                           tblptru	equ	0xFF8
  5909                           tblptrh	equ	0xFF7
  5910                           tblptrl	equ	0xFF6
  5911                           tablat	equ	0xFF5
  5912                           prodh	equ	0xFF4
  5913                           prodl	equ	0xFF3
  5914                           intcon	equ	0xFF2
  5915                           intcon2	equ	0xFF1
  5916                           postinc0	equ	0xFEE
  5917                           wreg	equ	0xFE8
  5918                           indf2	equ	0xFDF
  5919                           postinc2	equ	0xFDE
  5920                           postdec2	equ	0xFDD
  5921                           plusw2	equ	0xFDB
  5922                           fsr2h	equ	0xFDA
  5923                           fsr2l	equ	0xFD9
  5924                           status	equ	0xFD8
  5925                           
  5926 ;; *************** function _OSCILLATOR_Initialize *****************
  5927 ;; Defined at:
  5928 ;;		line 125 in file "mcc_generated_files/mcc.c"
  5929 ;; Parameters:    Size  Location     Type
  5930 ;;		None
  5931 ;; Auto vars:     Size  Location     Type
  5932 ;;		None
  5933 ;; Return value:  Size  Location     Type
  5934 ;;		None               void
  5935 ;; Registers used:
  5936 ;;		wreg, status,2
  5937 ;; Tracked objects:
  5938 ;;		On entry : 0/0
  5939 ;;		On exit  : 0/0
  5940 ;;		Unchanged: 0/0
  5941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5942 ;;      Params:         0       0       0       0       0       0       0
  5943 ;;      Locals:         0       0       0       0       0       0       0
  5944 ;;      Temps:          0       0       0       0       0       0       0
  5945 ;;      Totals:         0       0       0       0       0       0       0
  5946 ;;Total ram usage:        0 bytes
  5947 ;; Hardware stack levels used:    1
  5948 ;; Hardware stack levels required when called:    4
  5949 ;; This function calls:
  5950 ;;		Nothing
  5951 ;; This function is called by:
  5952 ;;		_SYSTEM_Initialize
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text31
  5957  001E0C                     __ptext31:
  5958                           	opt stack 0
  5959  001E0C                     _OSCILLATOR_Initialize:
  5960                           	opt stack 25
  5961                           
  5962                           ;mcc.c: 127: OSCCON = 0x60;
  5963                           
  5964                           ; BSR set to: 15
  5965                           ;incstack = 0
  5966  001E0C  0E60               	movlw	96
  5967  001E0E  6ED3               	movwf	4051,c	;volatile
  5968                           
  5969                           ;mcc.c: 129: OSCCON2 = 0x04;
  5970  001E10  0E04               	movlw	4
  5971  001E12  6ED2               	movwf	4050,c	;volatile
  5972                           
  5973                           ;mcc.c: 131: OSCTUNE = 0x00;
  5974  001E14  0E00               	movlw	0
  5975  001E16  6E9B               	movwf	3995,c	;volatile
  5976  001E18  0012               	return		;funcret
  5977  001E1A                     __end_of_OSCILLATOR_Initialize:
  5978                           	opt stack 0
  5979                           tosu	equ	0xFFF
  5980                           tosh	equ	0xFFE
  5981                           tosl	equ	0xFFD
  5982                           pclath	equ	0xFFA
  5983                           tblptru	equ	0xFF8
  5984                           tblptrh	equ	0xFF7
  5985                           tblptrl	equ	0xFF6
  5986                           tablat	equ	0xFF5
  5987                           prodh	equ	0xFF4
  5988                           prodl	equ	0xFF3
  5989                           intcon	equ	0xFF2
  5990                           intcon2	equ	0xFF1
  5991                           postinc0	equ	0xFEE
  5992                           wreg	equ	0xFE8
  5993                           indf2	equ	0xFDF
  5994                           postinc2	equ	0xFDE
  5995                           postdec2	equ	0xFDD
  5996                           plusw2	equ	0xFDB
  5997                           fsr2h	equ	0xFDA
  5998                           fsr2l	equ	0xFD9
  5999                           status	equ	0xFD8
  6000                           
  6001 ;; *************** function _INTERRUPT_Initialize *****************
  6002 ;; Defined at:
  6003 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6004 ;; Parameters:    Size  Location     Type
  6005 ;;		None
  6006 ;; Auto vars:     Size  Location     Type
  6007 ;;		None
  6008 ;; Return value:  Size  Location     Type
  6009 ;;		None               void
  6010 ;; Registers used:
  6011 ;;		None
  6012 ;; Tracked objects:
  6013 ;;		On entry : 0/0
  6014 ;;		On exit  : 0/0
  6015 ;;		Unchanged: 0/0
  6016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6017 ;;      Params:         0       0       0       0       0       0       0
  6018 ;;      Locals:         0       0       0       0       0       0       0
  6019 ;;      Temps:          0       0       0       0       0       0       0
  6020 ;;      Totals:         0       0       0       0       0       0       0
  6021 ;;Total ram usage:        0 bytes
  6022 ;; Hardware stack levels used:    1
  6023 ;; Hardware stack levels required when called:    4
  6024 ;; This function calls:
  6025 ;;		Nothing
  6026 ;; This function is called by:
  6027 ;;		_SYSTEM_Initialize
  6028 ;; This function uses a non-reentrant model
  6029 ;;
  6030                           
  6031                           	psect	text32
  6032  001E1A                     __ptext32:
  6033                           	opt stack 0
  6034  001E1A                     _INTERRUPT_Initialize:
  6035                           	opt stack 25
  6036                           
  6037                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  6038                           
  6039                           ;incstack = 0
  6040  001E1A  9ED0               	bcf	4048,7,c	;volatile
  6041                           
  6042                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  6043  001E1C  9A9F               	bcf	3999,5,c	;volatile
  6044                           
  6045                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  6046  001E1E  989F               	bcf	3999,4,c	;volatile
  6047                           
  6048                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  6049  001E20  9C9F               	bcf	3999,6,c	;volatile
  6050  001E22  0012               	return		;funcret
  6051  001E24                     __end_of_INTERRUPT_Initialize:
  6052                           	opt stack 0
  6053                           tosu	equ	0xFFF
  6054                           tosh	equ	0xFFE
  6055                           tosl	equ	0xFFD
  6056                           pclath	equ	0xFFA
  6057                           tblptru	equ	0xFF8
  6058                           tblptrh	equ	0xFF7
  6059                           tblptrl	equ	0xFF6
  6060                           tablat	equ	0xFF5
  6061                           prodh	equ	0xFF4
  6062                           prodl	equ	0xFF3
  6063                           intcon	equ	0xFF2
  6064                           intcon2	equ	0xFF1
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           indf2	equ	0xFDF
  6068                           postinc2	equ	0xFDE
  6069                           postdec2	equ	0xFDD
  6070                           plusw2	equ	0xFDB
  6071                           fsr2h	equ	0xFDA
  6072                           fsr2l	equ	0xFD9
  6073                           status	equ	0xFD8
  6074                           
  6075 ;; *************** function _EUSART1_Initialize *****************
  6076 ;; Defined at:
  6077 ;;		line 21 in file "UART.c"
  6078 ;; Parameters:    Size  Location     Type
  6079 ;;		None
  6080 ;; Auto vars:     Size  Location     Type
  6081 ;;		None
  6082 ;; Return value:  Size  Location     Type
  6083 ;;		None               void
  6084 ;; Registers used:
  6085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6091 ;;      Params:         0       0       0       0       0       0       0
  6092 ;;      Locals:         0       0       0       0       0       0       0
  6093 ;;      Temps:          0       0       0       0       0       0       0
  6094 ;;      Totals:         0       0       0       0       0       0       0
  6095 ;;Total ram usage:        0 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    6
  6098 ;; This function calls:
  6099 ;;		_UART_buff_init
  6100 ;; This function is called by:
  6101 ;;		_SYSTEM_Initialize
  6102 ;; This function uses a non-reentrant model
  6103 ;;
  6104                           
  6105                           	psect	text33
  6106  001B06                     __ptext33:
  6107                           	opt stack 0
  6108  001B06                     _EUSART1_Initialize:
  6109                           	opt stack 23
  6110                           
  6111                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  6112                           
  6113                           ;incstack = 0
  6114  001B06  9A9D               	bcf	3997,5,c	;volatile
  6115                           
  6116                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  6117  001B08  989D               	bcf	3997,4,c	;volatile
  6118                           
  6119                           ;UART.c: 29: BAUD1CON = 0x48;
  6120  001B0A  0E48               	movlw	72
  6121  001B0C  6EB8               	movwf	4024,c	;volatile
  6122                           
  6123                           ;UART.c: 32: RC1STA = 0x98;
  6124  001B0E  0E98               	movlw	152
  6125  001B10  6EAB               	movwf	4011,c	;volatile
  6126                           
  6127                           ;UART.c: 35: TX1STA = 0x26;
  6128  001B12  0E26               	movlw	38
  6129  001B14  6EAC               	movwf	4012,c	;volatile
  6130                           
  6131                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  6132  001B16  0E33               	movlw	51
  6133  001B18  6EAF               	movwf	4015,c	;volatile
  6134                           
  6135                           ;UART.c: 41: SPBRGH1 = 0x00;
  6136  001B1A  0E00               	movlw	0
  6137  001B1C  6EB0               	movwf	4016,c	;volatile
  6138                           
  6139                           ;UART.c: 44: TXREG1 = 0x00;
  6140  001B1E  0E00               	movlw	0
  6141  001B20  6EAD               	movwf	4013,c	;volatile
  6142                           
  6143                           ;UART.c: 47: RCREG1 = 0x00;
  6144  001B22  0E00               	movlw	0
  6145  001B24  6EAE               	movwf	4014,c	;volatile
  6146                           
  6147                           ;UART.c: 49: UART_buff_init(&input_buffer);
  6148  001B26  0E00               	movlw	low _input_buffer
  6149  001B28  6E23               	movwf	UART_buff_init@_this,c
  6150  001B2A  0E03               	movlw	high _input_buffer
  6151  001B2C  6E24               	movwf	UART_buff_init@_this+1,c
  6152  001B2E  EC7D  F00E         	call	_UART_buff_init	;wreg free
  6153                           
  6154                           ;UART.c: 50: UART_buff_init(&output_buffer);
  6155  001B32  0E00               	movlw	low _output_buffer
  6156  001B34  6E23               	movwf	UART_buff_init@_this,c
  6157  001B36  0E04               	movlw	high _output_buffer
  6158  001B38  6E24               	movwf	UART_buff_init@_this+1,c
  6159  001B3A  EC7D  F00E         	call	_UART_buff_init	;wreg free
  6160                           
  6161                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  6162  001B3E  8A9D               	bsf	3997,5,c	;volatile
  6163  001B40  0012               	return		;funcret
  6164  001B42                     __end_of_EUSART1_Initialize:
  6165                           	opt stack 0
  6166                           tosu	equ	0xFFF
  6167                           tosh	equ	0xFFE
  6168                           tosl	equ	0xFFD
  6169                           pclath	equ	0xFFA
  6170                           tblptru	equ	0xFF8
  6171                           tblptrh	equ	0xFF7
  6172                           tblptrl	equ	0xFF6
  6173                           tablat	equ	0xFF5
  6174                           prodh	equ	0xFF4
  6175                           prodl	equ	0xFF3
  6176                           intcon	equ	0xFF2
  6177                           intcon2	equ	0xFF1
  6178                           postinc0	equ	0xFEE
  6179                           wreg	equ	0xFE8
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           postdec2	equ	0xFDD
  6183                           plusw2	equ	0xFDB
  6184                           fsr2h	equ	0xFDA
  6185                           fsr2l	equ	0xFD9
  6186                           status	equ	0xFD8
  6187                           
  6188 ;; *************** function _UART_buff_init *****************
  6189 ;; Defined at:
  6190 ;;		line 56 in file "UART.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  6193 ;;		 -> output_buffer(206), input_buffer(206), 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6205 ;;      Params:         2       0       0       0       0       0       0
  6206 ;;      Locals:         0       0       0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0
  6208 ;;      Totals:         2       0       0       0       0       0       0
  6209 ;;Total ram usage:        2 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    5
  6212 ;; This function calls:
  6213 ;;		_memset
  6214 ;; This function is called by:
  6215 ;;		_EUSART1_Initialize
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text34
  6220  001CFA                     __ptext34:
  6221                           	opt stack 0
  6222  001CFA                     _UART_buff_init:
  6223                           	opt stack 23
  6224                           
  6225                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  6226                           
  6227                           ;incstack = 0
  6228  001CFA  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  6229  001CFE  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  6230  001D02  0E00               	movlw	0
  6231  001D04  6E1E               	movwf	memset@c+1,c
  6232  001D06  0E00               	movlw	0
  6233  001D08  6E1D               	movwf	memset@c,c
  6234  001D0A  0E00               	movlw	0
  6235  001D0C  6E20               	movwf	memset@n+1,c
  6236  001D0E  0ECE               	movlw	206
  6237  001D10  6E1F               	movwf	memset@n,c
  6238  001D12  EC07  F00E         	call	_memset	;wreg free
  6239  001D16  0012               	return		;funcret
  6240  001D18                     __end_of_UART_buff_init:
  6241                           	opt stack 0
  6242                           tosu	equ	0xFFF
  6243                           tosh	equ	0xFFE
  6244                           tosl	equ	0xFFD
  6245                           pclath	equ	0xFFA
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           intcon2	equ	0xFF1
  6254                           postinc0	equ	0xFEE
  6255                           wreg	equ	0xFE8
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           plusw2	equ	0xFDB
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function _memset *****************
  6265 ;; Defined at:
  6266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  p1              2   26[COMRAM] PTR void 
  6269 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6270 ;;  c               2   28[COMRAM] int 
  6271 ;;  n               2   30[COMRAM] unsigned int 
  6272 ;; Auto vars:     Size  Location     Type
  6273 ;;  p               2   32[COMRAM] PTR unsigned char 
  6274 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  2   26[COMRAM] PTR void 
  6277 ;; Registers used:
  6278 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6284 ;;      Params:         6       0       0       0       0       0       0
  6285 ;;      Locals:         2       0       0       0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0       0       0
  6287 ;;      Totals:         8       0       0       0       0       0       0
  6288 ;;Total ram usage:        8 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    4
  6291 ;; This function calls:
  6292 ;;		Nothing
  6293 ;; This function is called by:
  6294 ;;		_FastTransfer_buffer_flush
  6295 ;;		_UART_buff_init
  6296 ;;		_UART_buff_flush
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text35
  6301  001C0E                     __ptext35:
  6302                           	opt stack 0
  6303  001C0E                     _memset:
  6304                           	opt stack 22
  6305                           
  6306                           ;incstack = 0
  6307  001C0E  C01B  F021         	movff	memset@p1,memset@p
  6308  001C12  C01C  F022         	movff	memset@p1+1,memset@p+1
  6309  001C16  D008               	goto	l3681
  6310  001C18                     l3677:
  6311  001C18  C021  FFD9         	movff	memset@p,fsr2l
  6312  001C1C  C022  FFDA         	movff	memset@p+1,fsr2h
  6313  001C20  C01D  FFDF         	movff	memset@c,indf2
  6314  001C24  4A21               	infsnz	memset@p,f,c
  6315  001C26  2A22               	incf	memset@p+1,f,c
  6316  001C28                     l3681:
  6317  001C28  061F               	decf	memset@n,f,c
  6318  001C2A  A0D8               	btfss	status,0,c
  6319  001C2C  0620               	decf	memset@n+1,f,c
  6320  001C2E  281F               	incf	memset@n,w,c
  6321  001C30  E1F3               	bnz	l3677
  6322  001C32  2820               	incf	memset@n+1,w,c
  6323  001C34  B4D8               	btfsc	status,2,c
  6324  001C36  0012               	return	
  6325  001C38  D7EF               	goto	l3677
  6326  001C3A                     __end_of_memset:
  6327                           	opt stack 0
  6328                           tosu	equ	0xFFF
  6329                           tosh	equ	0xFFE
  6330                           tosl	equ	0xFFD
  6331                           pclath	equ	0xFFA
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon2	equ	0xFF1
  6340                           postinc0	equ	0xFEE
  6341                           wreg	equ	0xFE8
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           plusw2	equ	0xFDB
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _ADC_Initialize *****************
  6351 ;; Defined at:
  6352 ;;		line 59 in file "mcc_generated_files/adc.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;		None               void
  6359 ;; Registers used:
  6360 ;;		wreg, status,2
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6366 ;;      Params:         0       0       0       0       0       0       0
  6367 ;;      Locals:         0       0       0       0       0       0       0
  6368 ;;      Temps:          0       0       0       0       0       0       0
  6369 ;;      Totals:         0       0       0       0       0       0       0
  6370 ;;Total ram usage:        0 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    4
  6373 ;; This function calls:
  6374 ;;		Nothing
  6375 ;; This function is called by:
  6376 ;;		_SYSTEM_Initialize
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text36
  6381  001D6E                     __ptext36:
  6382                           	opt stack 0
  6383  001D6E                     _ADC_Initialize:
  6384                           	opt stack 25
  6385                           
  6386                           ;adc.c: 64: ADCON0 = 0x01;
  6387                           
  6388                           ;incstack = 0
  6389  001D6E  0E01               	movlw	1
  6390  001D70  6EC2               	movwf	4034,c	;volatile
  6391                           
  6392                           ;adc.c: 67: ADCON1 = 0x80;
  6393  001D72  0E80               	movlw	128
  6394  001D74  6EC1               	movwf	4033,c	;volatile
  6395                           
  6396                           ;adc.c: 70: ADCON2 = 0x12;
  6397  001D76  0E12               	movlw	18
  6398  001D78  6EC0               	movwf	4032,c	;volatile
  6399                           
  6400                           ;adc.c: 73: ADRESL = 0x00;
  6401  001D7A  0E00               	movlw	0
  6402  001D7C  6EC3               	movwf	4035,c	;volatile
  6403                           
  6404                           ;adc.c: 76: ADRESH = 0x00;
  6405  001D7E  0E00               	movlw	0
  6406  001D80  6EC4               	movwf	4036,c	;volatile
  6407                           
  6408                           ;adc.c: 79: PIE1bits.ADIE = 1;
  6409  001D82  8C9D               	bsf	3997,6,c	;volatile
  6410  001D84  0012               	return		;funcret
  6411  001D86                     __end_of_ADC_Initialize:
  6412                           	opt stack 0
  6413                           tosu	equ	0xFFF
  6414                           tosh	equ	0xFFE
  6415                           tosl	equ	0xFFD
  6416                           pclath	equ	0xFFA
  6417                           tblptru	equ	0xFF8
  6418                           tblptrh	equ	0xFF7
  6419                           tblptrl	equ	0xFF6
  6420                           tablat	equ	0xFF5
  6421                           prodh	equ	0xFF4
  6422                           prodl	equ	0xFF3
  6423                           intcon	equ	0xFF2
  6424                           intcon2	equ	0xFF1
  6425                           postinc0	equ	0xFEE
  6426                           wreg	equ	0xFE8
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           plusw2	equ	0xFDB
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435 ;; *************** function _PDUStartup *****************
  6436 ;; Defined at:
  6437 ;;		line 15 in file "PDU.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;		None
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;		None               void
  6444 ;; Registers used:
  6445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6451 ;;      Params:         0       0       0       0       0       0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0
  6454 ;;      Totals:         0       0       0       0       0       0       0
  6455 ;;Total ram usage:        0 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    8
  6458 ;; This function calls:
  6459 ;;		_ComputeStorageData
  6460 ;;		_EnableSlavePower
  6461 ;;		_StartUp595
  6462 ;;		_Update
  6463 ;; This function is called by:
  6464 ;;		_main
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text37
  6469  001946                     __ptext37:
  6470                           	opt stack 0
  6471  001946                     _PDUStartup:
  6472                           	opt stack 22
  6473                           
  6474                           ;PDU.c: 18: StartUp595();
  6475                           
  6476                           ;incstack = 0
  6477  001946  EC1B  F00C         	call	_StartUp595	;wreg free
  6478                           
  6479                           ;PDU.c: 20: EnableSlavePower(SAS, OFF);
  6480  00194A  0E00               	movlw	0
  6481  00194C  6E26               	movwf	EnableSlavePower@onof+1,c
  6482  00194E  0E00               	movlw	0
  6483  001950  6E25               	movwf	EnableSlavePower@onof,c
  6484  001952  0E03               	movlw	3
  6485  001954  ECB7  F007         	call	_EnableSlavePower
  6486                           
  6487                           ;PDU.c: 21: EnableSlavePower(DDS, OFF);
  6488  001958  0E00               	movlw	0
  6489  00195A  6E26               	movwf	EnableSlavePower@onof+1,c
  6490  00195C  0E00               	movlw	0
  6491  00195E  6E25               	movwf	EnableSlavePower@onof,c
  6492  001960  0E01               	movlw	1
  6493  001962  ECB7  F007         	call	_EnableSlavePower
  6494                           
  6495                           ;PDU.c: 22: EnableSlavePower(MCS, OFF);
  6496  001966  0E00               	movlw	0
  6497  001968  6E26               	movwf	EnableSlavePower@onof+1,c
  6498  00196A  0E00               	movlw	0
  6499  00196C  6E25               	movwf	EnableSlavePower@onof,c
  6500  00196E  0E02               	movlw	2
  6501  001970  ECB7  F007         	call	_EnableSlavePower
  6502                           
  6503                           ;PDU.c: 23: EnableSlavePower(BMM, OFF);
  6504  001974  0E00               	movlw	0
  6505  001976  6E26               	movwf	EnableSlavePower@onof+1,c
  6506  001978  0E00               	movlw	0
  6507  00197A  6E25               	movwf	EnableSlavePower@onof,c
  6508  00197C  0E04               	movlw	4
  6509  00197E  ECB7  F007         	call	_EnableSlavePower
  6510                           
  6511                           ;PDU.c: 24: EnableSlavePower(TSS, OFF);
  6512  001982  0E00               	movlw	0
  6513  001984  6E26               	movwf	EnableSlavePower@onof+1,c
  6514  001986  0E00               	movlw	0
  6515  001988  6E25               	movwf	EnableSlavePower@onof,c
  6516  00198A  0E05               	movlw	5
  6517  00198C  ECB7  F007         	call	_EnableSlavePower
  6518                           
  6519                           ;PDU.c: 25: Update();
  6520  001990  EC12  F00F         	call	_Update	;wreg free
  6521                           
  6522                           ;PDU.c: 27: ComputeStorageData();
  6523  001994  EC27  F008         	call	_ComputeStorageData	;wreg free
  6524  001998  0012               	return		;funcret
  6525  00199A                     __end_of_PDUStartup:
  6526                           	opt stack 0
  6527                           tosu	equ	0xFFF
  6528                           tosh	equ	0xFFE
  6529                           tosl	equ	0xFFD
  6530                           pclath	equ	0xFFA
  6531                           tblptru	equ	0xFF8
  6532                           tblptrh	equ	0xFF7
  6533                           tblptrl	equ	0xFF6
  6534                           tablat	equ	0xFF5
  6535                           prodh	equ	0xFF4
  6536                           prodl	equ	0xFF3
  6537                           intcon	equ	0xFF2
  6538                           intcon2	equ	0xFF1
  6539                           postinc0	equ	0xFEE
  6540                           wreg	equ	0xFE8
  6541                           indf2	equ	0xFDF
  6542                           postinc2	equ	0xFDE
  6543                           postdec2	equ	0xFDD
  6544                           plusw2	equ	0xFDB
  6545                           fsr2h	equ	0xFDA
  6546                           fsr2l	equ	0xFD9
  6547                           status	equ	0xFD8
  6548                           
  6549 ;; *************** function _Update *****************
  6550 ;; Defined at:
  6551 ;;		line 142 in file "PDU.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;		None
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;		None
  6556 ;; Return value:  Size  Location     Type
  6557 ;;		None               void
  6558 ;; Registers used:
  6559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6565 ;;      Params:         0       0       0       0       0       0       0
  6566 ;;      Locals:         0       0       0       0       0       0       0
  6567 ;;      Temps:          0       0       0       0       0       0       0
  6568 ;;      Totals:         0       0       0       0       0       0       0
  6569 ;;Total ram usage:        0 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    6
  6572 ;; This function calls:
  6573 ;;		_writeRegisters
  6574 ;; This function is called by:
  6575 ;;		_processPowerRequest
  6576 ;;		_PDUStartup
  6577 ;;		_ReadCurrent
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           	psect	text38
  6582  001E24                     __ptext38:
  6583                           	opt stack 0
  6584  001E24                     _Update:
  6585                           	opt stack 22
  6586                           
  6587                           ;PDU.c: 143: writeRegisters();
  6588                           
  6589                           ;incstack = 0
  6590  001E24  EC01  F00B         	call	_writeRegisters	;wreg free
  6591  001E28  0012               	return		;funcret
  6592  001E2A                     __end_of_Update:
  6593                           	opt stack 0
  6594                           tosu	equ	0xFFF
  6595                           tosh	equ	0xFFE
  6596                           tosl	equ	0xFFD
  6597                           pclath	equ	0xFFA
  6598                           tblptru	equ	0xFF8
  6599                           tblptrh	equ	0xFF7
  6600                           tblptrl	equ	0xFF6
  6601                           tablat	equ	0xFF5
  6602                           prodh	equ	0xFF4
  6603                           prodl	equ	0xFF3
  6604                           intcon	equ	0xFF2
  6605                           intcon2	equ	0xFF1
  6606                           postinc0	equ	0xFEE
  6607                           wreg	equ	0xFE8
  6608                           indf2	equ	0xFDF
  6609                           postinc2	equ	0xFDE
  6610                           postdec2	equ	0xFDD
  6611                           plusw2	equ	0xFDB
  6612                           fsr2h	equ	0xFDA
  6613                           fsr2l	equ	0xFD9
  6614                           status	equ	0xFD8
  6615                           
  6616 ;; *************** function _StartUp595 *****************
  6617 ;; Defined at:
  6618 ;;		line 10 in file "Shift595.c"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;		None               void
  6625 ;; Registers used:
  6626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6632 ;;      Params:         0       0       0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0       0       0
  6635 ;;      Totals:         0       0       0       0       0       0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used:    1
  6638 ;; Hardware stack levels required when called:    7
  6639 ;; This function calls:
  6640 ;;		_Clear595
  6641 ;;		_Delay
  6642 ;; This function is called by:
  6643 ;;		_PDUStartup
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text39
  6648  001836                     __ptext39:
  6649                           	opt stack 0
  6650  001836                     _StartUp595:
  6651                           	opt stack 22
  6652                           
  6653                           ;incstack = 0
  6654                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6655  001836  8A8C               	bsf	3980,5,c	;volatile
  6656                           
  6657                           ;Shift595.c: 13: do { LATB0 = 1; } while(0);
  6658  001838  808A               	bsf	3978,0,c	;volatile
  6659                           
  6660                           ;Shift595.c: 15: Delay(2);
  6661  00183A  0E02               	movlw	2
  6662  00183C  6E1B               	movwf	Delay@wait,c
  6663  00183E  0E00               	movlw	0
  6664  001840  6E1C               	movwf	Delay@wait+1,c
  6665  001842  0E00               	movlw	0
  6666  001844  6E1D               	movwf	Delay@wait+2,c
  6667  001846  0E00               	movlw	0
  6668  001848  6E1E               	movwf	Delay@wait+3,c
  6669  00184A  EC3F  F00D         	call	_Delay	;wreg free
  6670                           
  6671                           ;Shift595.c: 16: do { LATD5 = 0; } while(0);
  6672  00184E  9A8C               	bcf	3980,5,c	;volatile
  6673                           
  6674                           ;Shift595.c: 17: Delay(2);
  6675  001850  0E02               	movlw	2
  6676  001852  6E1B               	movwf	Delay@wait,c
  6677  001854  0E00               	movlw	0
  6678  001856  6E1C               	movwf	Delay@wait+1,c
  6679  001858  0E00               	movlw	0
  6680  00185A  6E1D               	movwf	Delay@wait+2,c
  6681  00185C  0E00               	movlw	0
  6682  00185E  6E1E               	movwf	Delay@wait+3,c
  6683  001860  EC3F  F00D         	call	_Delay	;wreg free
  6684                           
  6685                           ;Shift595.c: 18: do { LATB0 = 0; } while(0);
  6686  001864  908A               	bcf	3978,0,c	;volatile
  6687                           
  6688                           ;Shift595.c: 19: Delay(2);
  6689  001866  0E02               	movlw	2
  6690  001868  6E1B               	movwf	Delay@wait,c
  6691  00186A  0E00               	movlw	0
  6692  00186C  6E1C               	movwf	Delay@wait+1,c
  6693  00186E  0E00               	movlw	0
  6694  001870  6E1D               	movwf	Delay@wait+2,c
  6695  001872  0E00               	movlw	0
  6696  001874  6E1E               	movwf	Delay@wait+3,c
  6697  001876  EC3F  F00D         	call	_Delay	;wreg free
  6698                           
  6699                           ;Shift595.c: 20: do { LATD5 = 1; } while(0);
  6700  00187A  8A8C               	bsf	3980,5,c	;volatile
  6701                           
  6702                           ;Shift595.c: 21: Delay(2);
  6703  00187C  0E02               	movlw	2
  6704  00187E  6E1B               	movwf	Delay@wait,c
  6705  001880  0E00               	movlw	0
  6706  001882  6E1C               	movwf	Delay@wait+1,c
  6707  001884  0E00               	movlw	0
  6708  001886  6E1D               	movwf	Delay@wait+2,c
  6709  001888  0E00               	movlw	0
  6710  00188A  6E1E               	movwf	Delay@wait+3,c
  6711  00188C  EC3F  F00D         	call	_Delay	;wreg free
  6712                           
  6713                           ;Shift595.c: 22: do { LATB0 = 1; } while(0);
  6714  001890  808A               	bsf	3978,0,c	;volatile
  6715                           
  6716                           ;Shift595.c: 24: Clear595();
  6717  001892  EC64  F00D         	call	_Clear595	;wreg free
  6718  001896  0012               	return		;funcret
  6719  001898                     __end_of_StartUp595:
  6720                           	opt stack 0
  6721                           tosu	equ	0xFFF
  6722                           tosh	equ	0xFFE
  6723                           tosl	equ	0xFFD
  6724                           pclath	equ	0xFFA
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           intcon	equ	0xFF2
  6732                           intcon2	equ	0xFF1
  6733                           postinc0	equ	0xFEE
  6734                           wreg	equ	0xFE8
  6735                           indf2	equ	0xFDF
  6736                           postinc2	equ	0xFDE
  6737                           postdec2	equ	0xFDD
  6738                           plusw2	equ	0xFDB
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _Clear595 *****************
  6744 ;; Defined at:
  6745 ;;		line 39 in file "Shift595.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;  i               2    0[BANK0 ] int 
  6750 ;; Return value:  Size  Location     Type
  6751 ;;		None               void
  6752 ;; Registers used:
  6753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6759 ;;      Params:         0       0       0       0       0       0       0
  6760 ;;      Locals:         0       2       0       0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0
  6762 ;;      Totals:         0       2       0       0       0       0       0
  6763 ;;Total ram usage:        2 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    6
  6766 ;; This function calls:
  6767 ;;		_writeRegisters
  6768 ;; This function is called by:
  6769 ;;		_StartUp595
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           	psect	text40
  6774  001AC8                     __ptext40:
  6775                           	opt stack 0
  6776  001AC8                     _Clear595:
  6777                           	opt stack 22
  6778                           
  6779                           ;Shift595.c: 40: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6780                           
  6781                           ;incstack = 0
  6782  001AC8  0E00               	movlw	0
  6783  001ACA  0100               	movlb	0	; () banked
  6784  001ACC  6FD4               	movwf	(Clear595@i+1)& (0+255),b
  6785  001ACE  0E17               	movlw	23
  6786  001AD0  6FD3               	movwf	Clear595@i& (0+255),b
  6787  001AD2                     l3953:
  6788                           
  6789                           ; BSR set to: 0
  6790  001AD2  0100               	movlb	0	; () banked
  6791  001AD4  BFD4               	btfsc	(Clear595@i+1)& (0+255),7,b
  6792  001AD6  D014               	goto	l3963
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;Shift595.c: 41: registers[i] = 0;
  6796                           
  6797                           ; BSR set to: 0
  6798                           
  6799                           ; BSR set to: 0
  6800  001AD8  90D8               	bcf	status,0,c
  6801  001ADA  0100               	movlb	0	; () banked
  6802  001ADC  35D3               	rlcf	Clear595@i& (0+255),w,b
  6803  001ADE  6ED9               	movwf	fsr2l,c
  6804  001AE0  0100               	movlb	0	; () banked
  6805  001AE2  35D4               	rlcf	(Clear595@i+1)& (0+255),w,b
  6806  001AE4  6EDA               	movwf	fsr2h,c
  6807  001AE6  0E00               	movlw	low _registers
  6808  001AE8  26D9               	addwf	fsr2l,f,c
  6809  001AEA  0E01               	movlw	high _registers
  6810  001AEC  22DA               	addwfc	fsr2h,f,c
  6811  001AEE  0E00               	movlw	0
  6812  001AF0  6EDE               	movwf	postinc2,c
  6813  001AF2  0E00               	movlw	0
  6814  001AF4  6EDD               	movwf	postdec2,c
  6815                           
  6816                           ; BSR set to: 0
  6817  001AF6  0100               	movlb	0	; () banked
  6818  001AF8  07D3               	decf	Clear595@i& (0+255),f,b
  6819  001AFA  A0D8               	btfss	status,0,c
  6820  001AFC  07D4               	decf	(Clear595@i+1)& (0+255),f,b
  6821  001AFE  D7E9               	goto	l3953
  6822  001B00                     l3963:
  6823                           
  6824                           ; BSR set to: 0
  6825                           ;Shift595.c: 42: }
  6826                           ;Shift595.c: 44: writeRegisters();
  6827  001B00  EC01  F00B         	call	_writeRegisters	;wreg free
  6828  001B04  0012               	return		;funcret
  6829  001B06                     __end_of_Clear595:
  6830                           	opt stack 0
  6831                           tosu	equ	0xFFF
  6832                           tosh	equ	0xFFE
  6833                           tosl	equ	0xFFD
  6834                           pclath	equ	0xFFA
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           intcon	equ	0xFF2
  6842                           intcon2	equ	0xFF1
  6843                           postinc0	equ	0xFEE
  6844                           wreg	equ	0xFE8
  6845                           indf2	equ	0xFDF
  6846                           postinc2	equ	0xFDE
  6847                           postdec2	equ	0xFDD
  6848                           plusw2	equ	0xFDB
  6849                           fsr2h	equ	0xFDA
  6850                           fsr2l	equ	0xFD9
  6851                           status	equ	0xFD8
  6852                           
  6853 ;; *************** function _writeRegisters *****************
  6854 ;; Defined at:
  6855 ;;		line 50 in file "Shift595.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;		None
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;  i               2   37[COMRAM] int 
  6860 ;;  val             2   35[COMRAM] int 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;		None               void
  6863 ;; Registers used:
  6864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6870 ;;      Params:         0       0       0       0       0       0       0
  6871 ;;      Locals:         4       0       0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0
  6873 ;;      Totals:         4       0       0       0       0       0       0
  6874 ;;Total ram usage:        4 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    5
  6877 ;; This function calls:
  6878 ;;		_Delay
  6879 ;; This function is called by:
  6880 ;;		_Update
  6881 ;;		_Clear595
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           	psect	text41
  6886  001602                     __ptext41:
  6887                           	opt stack 0
  6888  001602                     _writeRegisters:
  6889                           	opt stack 22
  6890                           
  6891                           ;Shift595.c: 51: int val = 0;
  6892                           
  6893                           ;incstack = 0
  6894  001602  0E00               	movlw	0
  6895  001604  6E25               	movwf	writeRegisters@val+1,c
  6896  001606  0E00               	movlw	0
  6897  001608  6E24               	movwf	writeRegisters@val,c
  6898                           
  6899                           ;Shift595.c: 52: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6900  00160A  0E00               	movlw	0
  6901  00160C  6E27               	movwf	writeRegisters@i+1,c
  6902  00160E  0E17               	movlw	23
  6903  001610  6E26               	movwf	writeRegisters@i,c
  6904  001612                     l3807:
  6905  001612  BE27               	btfsc	writeRegisters@i+1,7,c
  6906  001614  D01D               	goto	l731
  6907                           
  6908                           ;Shift595.c: 53: do { LATD7 = 0; } while(0);
  6909  001616  9E8C               	bcf	3980,7,c	;volatile
  6910                           
  6911                           ;Shift595.c: 55: val = registers[i];
  6912  001618  90D8               	bcf	status,0,c
  6913  00161A  3426               	rlcf	writeRegisters@i,w,c
  6914  00161C  6ED9               	movwf	fsr2l,c
  6915  00161E  3427               	rlcf	writeRegisters@i+1,w,c
  6916  001620  6EDA               	movwf	fsr2h,c
  6917  001622  0E00               	movlw	low _registers
  6918  001624  26D9               	addwf	fsr2l,f,c
  6919  001626  0E01               	movlw	high _registers
  6920  001628  22DA               	addwfc	fsr2h,f,c
  6921  00162A  CFDE F024          	movff	postinc2,writeRegisters@val
  6922  00162E  CFDD F025          	movff	postdec2,writeRegisters@val+1
  6923                           
  6924                           ;Shift595.c: 56: if (val == 1) {
  6925  001632  0424               	decf	writeRegisters@val,w,c
  6926  001634  1025               	iorwf	writeRegisters@val+1,w,c
  6927  001636  A4D8               	btfss	status,2,c
  6928  001638  D002               	goto	l3815
  6929                           
  6930                           ;Shift595.c: 57: do { LATD4 = 1; } while(0);
  6931  00163A  888C               	bsf	3980,4,c	;volatile
  6932                           
  6933                           ;Shift595.c: 58: } else if (val == 0) {
  6934  00163C  D004               	goto	l729
  6935  00163E                     l3815:
  6936  00163E  5024               	movf	writeRegisters@val,w,c
  6937  001640  1025               	iorwf	writeRegisters@val+1,w,c
  6938  001642  B4D8               	btfsc	status,2,c
  6939                           
  6940                           ;Shift595.c: 59: do { LATD4 = 0; } while(0);
  6941  001644  988C               	bcf	3980,4,c	;volatile
  6942  001646                     l729:
  6943  001646  8E8C               	bsf	3980,7,c	;volatile
  6944  001648  0626               	decf	writeRegisters@i,f,c
  6945  00164A  A0D8               	btfss	status,0,c
  6946  00164C  0627               	decf	writeRegisters@i+1,f,c
  6947  00164E  D7E1               	goto	l3807
  6948  001650                     l731:
  6949  001650  9E8C               	bcf	3980,7,c	;volatile
  6950                           
  6951                           ;Shift595.c: 67: Delay(1);
  6952  001652  0E01               	movlw	1
  6953  001654  6E1B               	movwf	Delay@wait,c
  6954  001656  0E00               	movlw	0
  6955  001658  6E1C               	movwf	Delay@wait+1,c
  6956  00165A  0E00               	movlw	0
  6957  00165C  6E1D               	movwf	Delay@wait+2,c
  6958  00165E  0E00               	movlw	0
  6959  001660  6E1E               	movwf	Delay@wait+3,c
  6960  001662  EC3F  F00D         	call	_Delay	;wreg free
  6961                           
  6962                           ;Shift595.c: 68: do { LATD6 = 1; } while(0);
  6963  001666  8C8C               	bsf	3980,6,c	;volatile
  6964                           
  6965                           ;Shift595.c: 69: Delay(1);
  6966  001668  0E01               	movlw	1
  6967  00166A  6E1B               	movwf	Delay@wait,c
  6968  00166C  0E00               	movlw	0
  6969  00166E  6E1C               	movwf	Delay@wait+1,c
  6970  001670  0E00               	movlw	0
  6971  001672  6E1D               	movwf	Delay@wait+2,c
  6972  001674  0E00               	movlw	0
  6973  001676  6E1E               	movwf	Delay@wait+3,c
  6974  001678  EC3F  F00D         	call	_Delay	;wreg free
  6975                           
  6976                           ;Shift595.c: 70: do { LATD6 = 0; } while(0);
  6977  00167C  9C8C               	bcf	3980,6,c	;volatile
  6978  00167E  0012               	return	
  6979  001680                     __end_of_writeRegisters:
  6980                           	opt stack 0
  6981                           tosu	equ	0xFFF
  6982                           tosh	equ	0xFFE
  6983                           tosl	equ	0xFFD
  6984                           pclath	equ	0xFFA
  6985                           tblptru	equ	0xFF8
  6986                           tblptrh	equ	0xFF7
  6987                           tblptrl	equ	0xFF6
  6988                           tablat	equ	0xFF5
  6989                           prodh	equ	0xFF4
  6990                           prodl	equ	0xFF3
  6991                           intcon	equ	0xFF2
  6992                           intcon2	equ	0xFF1
  6993                           postinc0	equ	0xFEE
  6994                           wreg	equ	0xFE8
  6995                           indf2	equ	0xFDF
  6996                           postinc2	equ	0xFDE
  6997                           postdec2	equ	0xFDD
  6998                           plusw2	equ	0xFDB
  6999                           fsr2h	equ	0xFDA
  7000                           fsr2l	equ	0xFD9
  7001                           status	equ	0xFD8
  7002                           
  7003 ;; *************** function _EnableSlavePower *****************
  7004 ;; Defined at:
  7005 ;;		line 32 in file "PDU.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  slave           1    wreg     enum E5
  7008 ;;  onof            2   36[COMRAM] int 
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  slave           1   38[COMRAM] enum E5
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7020 ;;      Params:         2       0       0       0       0       0       0
  7021 ;;      Locals:         1       0       0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0
  7023 ;;      Totals:         3       0       0       0       0       0       0
  7024 ;;Total ram usage:        3 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    5
  7027 ;; This function calls:
  7028 ;;		_SetPin595
  7029 ;; This function is called by:
  7030 ;;		_processPowerRequest
  7031 ;;		_PDUStartup
  7032 ;;		_FuseSystem
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           	psect	text42
  7037  000F6E                     __ptext42:
  7038                           	opt stack 0
  7039  000F6E                     _EnableSlavePower:
  7040                           	opt stack 23
  7041                           
  7042                           ;incstack = 0
  7043                           ;EnableSlavePower@slave stored from wreg
  7044  000F6E  6E27               	movwf	EnableSlavePower@slave,c
  7045                           
  7046                           ;PDU.c: 33: switch (slave) {
  7047  000F70  D05A               	goto	l3883
  7048  000F72                     l3869:
  7049                           
  7050                           ;PDU.c: 35: SetPin595(2, 6, onof);
  7051  000F72  0E00               	movlw	0
  7052  000F74  6E1C               	movwf	SetPin595@Reg+1,c
  7053  000F76  0E02               	movlw	2
  7054  000F78  6E1B               	movwf	SetPin595@Reg,c
  7055  000F7A  0E00               	movlw	0
  7056  000F7C  6E1E               	movwf	SetPin595@pin+1,c
  7057  000F7E  0E06               	movlw	6
  7058  000F80  6E1D               	movwf	SetPin595@pin,c
  7059  000F82  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7060  000F86  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7061  000F8A  ECCD  F00C         	call	_SetPin595	;wreg free
  7062                           
  7063                           ;PDU.c: 36: break;
  7064  000F8E  0012               	return	
  7065  000F90                     l3871:
  7066                           
  7067                           ;PDU.c: 38: SetPin595(1, 1, onof);
  7068  000F90  0E00               	movlw	0
  7069  000F92  6E1C               	movwf	SetPin595@Reg+1,c
  7070  000F94  0E01               	movlw	1
  7071  000F96  6E1B               	movwf	SetPin595@Reg,c
  7072  000F98  0E00               	movlw	0
  7073  000F9A  6E1E               	movwf	SetPin595@pin+1,c
  7074  000F9C  0E01               	movlw	1
  7075  000F9E  6E1D               	movwf	SetPin595@pin,c
  7076  000FA0  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7077  000FA4  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7078  000FA8  ECCD  F00C         	call	_SetPin595	;wreg free
  7079                           
  7080                           ;PDU.c: 39: break;
  7081  000FAC  0012               	return	
  7082  000FAE                     l3873:
  7083                           
  7084                           ;PDU.c: 41: SetPin595(1, 6, onof);
  7085  000FAE  0E00               	movlw	0
  7086  000FB0  6E1C               	movwf	SetPin595@Reg+1,c
  7087  000FB2  0E01               	movlw	1
  7088  000FB4  6E1B               	movwf	SetPin595@Reg,c
  7089  000FB6  0E00               	movlw	0
  7090  000FB8  6E1E               	movwf	SetPin595@pin+1,c
  7091  000FBA  0E06               	movlw	6
  7092  000FBC  6E1D               	movwf	SetPin595@pin,c
  7093  000FBE  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7094  000FC2  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7095  000FC6  ECCD  F00C         	call	_SetPin595	;wreg free
  7096                           
  7097                           ;PDU.c: 42: break;
  7098  000FCA  0012               	return	
  7099  000FCC                     l3875:
  7100                           
  7101                           ;PDU.c: 44: SetPin595(2, 1, onof);
  7102  000FCC  0E00               	movlw	0
  7103  000FCE  6E1C               	movwf	SetPin595@Reg+1,c
  7104  000FD0  0E02               	movlw	2
  7105  000FD2  6E1B               	movwf	SetPin595@Reg,c
  7106  000FD4  0E00               	movlw	0
  7107  000FD6  6E1E               	movwf	SetPin595@pin+1,c
  7108  000FD8  0E01               	movlw	1
  7109  000FDA  6E1D               	movwf	SetPin595@pin,c
  7110  000FDC  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7111  000FE0  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7112  000FE4  ECCD  F00C         	call	_SetPin595	;wreg free
  7113                           
  7114                           ;PDU.c: 45: break;
  7115  000FE8  0012               	return	
  7116  000FEA                     l3877:
  7117                           
  7118                           ;PDU.c: 47: SetPin595(3, 6, onof);
  7119  000FEA  0E00               	movlw	0
  7120  000FEC  6E1C               	movwf	SetPin595@Reg+1,c
  7121  000FEE  0E03               	movlw	3
  7122  000FF0  6E1B               	movwf	SetPin595@Reg,c
  7123  000FF2  0E00               	movlw	0
  7124  000FF4  6E1E               	movwf	SetPin595@pin+1,c
  7125  000FF6  0E06               	movlw	6
  7126  000FF8  6E1D               	movwf	SetPin595@pin,c
  7127  000FFA  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7128  000FFE  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7129  001002  ECCD  F00C         	call	_SetPin595	;wreg free
  7130                           
  7131                           ;PDU.c: 48: break;
  7132  001006  0012               	return	
  7133  001008                     l3879:
  7134                           
  7135                           ;PDU.c: 50: SetPin595(3, 1, onof);
  7136  001008  0E00               	movlw	0
  7137  00100A  6E1C               	movwf	SetPin595@Reg+1,c
  7138  00100C  0E03               	movlw	3
  7139  00100E  6E1B               	movwf	SetPin595@Reg,c
  7140  001010  0E00               	movlw	0
  7141  001012  6E1E               	movwf	SetPin595@pin+1,c
  7142  001014  0E01               	movlw	1
  7143  001016  6E1D               	movwf	SetPin595@pin,c
  7144  001018  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  7145  00101C  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  7146  001020  ECCD  F00C         	call	_SetPin595	;wreg free
  7147                           
  7148                           ;PDU.c: 52: }
  7149                           
  7150                           ;PDU.c: 51: break;
  7151  001024  0012               	return	
  7152  001026                     l3883:
  7153  001026  5027               	movf	EnableSlavePower@slave,w,c
  7154                           
  7155                           ; Switch size 1, requested type "space"
  7156                           ; Number of cases is 6, Range of values is 1 to 6
  7157                           ; switch strategies available:
  7158                           ; Name         Instructions Cycles
  7159                           ; simple_byte           19    10 (average)
  7160                           ;	Chosen strategy is simple_byte
  7161  001028  0A01               	xorlw	1	; case 1
  7162  00102A  B4D8               	btfsc	status,2,c
  7163  00102C  D7CF               	goto	l3875
  7164  00102E  0A03               	xorlw	3	; case 2
  7165  001030  B4D8               	btfsc	status,2,c
  7166  001032  D7BD               	goto	l3873
  7167  001034  0A01               	xorlw	1	; case 3
  7168  001036  B4D8               	btfsc	status,2,c
  7169  001038  D79C               	goto	l3869
  7170  00103A  0A07               	xorlw	7	; case 4
  7171  00103C  B4D8               	btfsc	status,2,c
  7172  00103E  D7A8               	goto	l3871
  7173  001040  0A01               	xorlw	1	; case 5
  7174  001042  B4D8               	btfsc	status,2,c
  7175  001044  D7D2               	goto	l3877
  7176  001046  0A03               	xorlw	3	; case 6
  7177  001048  A4D8               	btfss	status,2,c
  7178  00104A  0012               	return	
  7179  00104C  D7DD               	goto	l3879
  7180  00104E                     __end_of_EnableSlavePower:
  7181                           	opt stack 0
  7182                           tosu	equ	0xFFF
  7183                           tosh	equ	0xFFE
  7184                           tosl	equ	0xFFD
  7185                           pclath	equ	0xFFA
  7186                           tblptru	equ	0xFF8
  7187                           tblptrh	equ	0xFF7
  7188                           tblptrl	equ	0xFF6
  7189                           tablat	equ	0xFF5
  7190                           prodh	equ	0xFF4
  7191                           prodl	equ	0xFF3
  7192                           intcon	equ	0xFF2
  7193                           intcon2	equ	0xFF1
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           indf2	equ	0xFDF
  7197                           postinc2	equ	0xFDE
  7198                           postdec2	equ	0xFDD
  7199                           plusw2	equ	0xFDB
  7200                           fsr2h	equ	0xFDA
  7201                           fsr2l	equ	0xFD9
  7202                           status	equ	0xFD8
  7203                           
  7204 ;; *************** function _SetPin595 *****************
  7205 ;; Defined at:
  7206 ;;		line 32 in file "Shift595.c"
  7207 ;; Parameters:    Size  Location     Type
  7208 ;;  Reg             2   26[COMRAM] int 
  7209 ;;  pin             2   28[COMRAM] int 
  7210 ;;  value           2   30[COMRAM] int 
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;		None
  7213 ;; Return value:  Size  Location     Type
  7214 ;;		None               void
  7215 ;; Registers used:
  7216 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7222 ;;      Params:         6       0       0       0       0       0       0
  7223 ;;      Locals:         0       0       0       0       0       0       0
  7224 ;;      Temps:          4       0       0       0       0       0       0
  7225 ;;      Totals:        10       0       0       0       0       0       0
  7226 ;;Total ram usage:       10 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    4
  7229 ;; This function calls:
  7230 ;;		Nothing
  7231 ;; This function is called by:
  7232 ;;		_EnableSlavePower
  7233 ;;		_ReadCurrent
  7234 ;; This function uses a non-reentrant model
  7235 ;;
  7236                           
  7237                           	psect	text43
  7238  00199A                     __ptext43:
  7239                           	opt stack 0
  7240  00199A                     _SetPin595:
  7241                           	opt stack 23
  7242                           
  7243                           ;Shift595.c: 33: registers[((Reg - 1)*8) + pin] = value;
  7244                           
  7245                           ;incstack = 0
  7246  00199A  0EF0               	movlw	240
  7247  00199C  6E21               	movwf	??_SetPin595& (0+255),c
  7248  00199E  0EFF               	movlw	255
  7249  0019A0  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  7250  0019A2  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  7251  0019A6  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  7252  0019AA  90D8               	bcf	status,0,c
  7253  0019AC  3623               	rlcf	??_SetPin595+2,f,c
  7254  0019AE  3624               	rlcf	??_SetPin595+3,f,c
  7255  0019B0  90D8               	bcf	status,0,c
  7256  0019B2  3623               	rlcf	??_SetPin595+2,f,c
  7257  0019B4  3624               	rlcf	??_SetPin595+3,f,c
  7258  0019B6  90D8               	bcf	status,0,c
  7259  0019B8  3623               	rlcf	??_SetPin595+2,f,c
  7260  0019BA  3624               	rlcf	??_SetPin595+3,f,c
  7261  0019BC  501D               	movf	SetPin595@pin,w,c
  7262  0019BE  2623               	addwf	??_SetPin595+2,f,c
  7263  0019C0  501E               	movf	SetPin595@pin+1,w,c
  7264  0019C2  2224               	addwfc	??_SetPin595+3,f,c
  7265  0019C4  90D8               	bcf	status,0,c
  7266  0019C6  3623               	rlcf	??_SetPin595+2,f,c
  7267  0019C8  3624               	rlcf	??_SetPin595+3,f,c
  7268  0019CA  5021               	movf	??_SetPin595,w,c
  7269  0019CC  2623               	addwf	??_SetPin595+2,f,c
  7270  0019CE  5022               	movf	??_SetPin595+1,w,c
  7271  0019D0  2224               	addwfc	??_SetPin595+3,f,c
  7272  0019D2  0E00               	movlw	low _registers
  7273  0019D4  2423               	addwf	??_SetPin595+2,w,c
  7274  0019D6  6ED9               	movwf	fsr2l,c
  7275  0019D8  0E01               	movlw	high _registers
  7276  0019DA  2024               	addwfc	??_SetPin595+3,w,c
  7277  0019DC  6EDA               	movwf	fsr2h,c
  7278  0019DE  C01F  FFDE         	movff	SetPin595@value,postinc2
  7279  0019E2  C020  FFDD         	movff	SetPin595@value+1,postdec2
  7280  0019E6  0012               	return		;funcret
  7281  0019E8                     __end_of_SetPin595:
  7282                           	opt stack 0
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclath	equ	0xFFA
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           intcon2	equ	0xFF1
  7295                           postinc0	equ	0xFEE
  7296                           wreg	equ	0xFE8
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           plusw2	equ	0xFDB
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305 ;; *************** function _ComputeStorageData *****************
  7306 ;; Defined at:
  7307 ;;		line 94 in file "PDU.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;		None
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  i               2   29[COMRAM] int 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;		None               void
  7314 ;; Registers used:
  7315 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7316 ;; Tracked objects:
  7317 ;;		On entry : 0/0
  7318 ;;		On exit  : 0/0
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7321 ;;      Params:         0       0       0       0       0       0       0
  7322 ;;      Locals:         2       0       0       0       0       0       0
  7323 ;;      Temps:          2       0       0       0       0       0       0
  7324 ;;      Totals:         4       0       0       0       0       0       0
  7325 ;;Total ram usage:        4 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    5
  7328 ;; This function calls:
  7329 ;;		_DATAEE_ReadByte
  7330 ;; This function is called by:
  7331 ;;		_PDUStartup
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text44
  7336  00104E                     __ptext44:
  7337                           	opt stack 0
  7338  00104E                     _ComputeStorageData:
  7339                           	opt stack 24
  7340                           
  7341                           ;PDU.c: 95: for (int i = 0; i < 12; i++) {
  7342                           
  7343                           ;incstack = 0
  7344  00104E  0E00               	movlw	0
  7345  001050  6E1F               	movwf	ComputeStorageData@i+1,c
  7346  001052  0E00               	movlw	0
  7347  001054  6E1E               	movwf	ComputeStorageData@i,c
  7348  001056                     l4313:
  7349  001056  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7350  001058  D006               	goto	l4317
  7351  00105A  501F               	movf	ComputeStorageData@i+1,w,c
  7352  00105C  E111               	bnz	l4323
  7353  00105E  0E0C               	movlw	12
  7354  001060  5C1E               	subwf	ComputeStorageData@i,w,c
  7355  001062  B0D8               	btfsc	status,0,c
  7356  001064  D00D               	goto	l4323
  7357  001066                     l4317:
  7358                           
  7359                           ;PDU.c: 96: data[i] = DATAEE_ReadByte(i);
  7360  001066  0E84               	movlw	low _data
  7361  001068  241E               	addwf	ComputeStorageData@i,w,c
  7362  00106A  6ED9               	movwf	fsr2l,c
  7363  00106C  0E00               	movlw	high _data
  7364  00106E  201F               	addwfc	ComputeStorageData@i+1,w,c
  7365  001070  6EDA               	movwf	fsr2h,c
  7366  001072  501E               	movf	ComputeStorageData@i,w,c
  7367  001074  ECEE  F00E         	call	_DATAEE_ReadByte
  7368  001078  6EDF               	movwf	indf2,c
  7369  00107A  4A1E               	infsnz	ComputeStorageData@i,f,c
  7370  00107C  2A1F               	incf	ComputeStorageData@i+1,f,c
  7371  00107E  D7EB               	goto	l4313
  7372  001080                     l4323:
  7373                           
  7374                           ;PDU.c: 97: }
  7375                           ;PDU.c: 98: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7376  001080  0100               	movlb	0	; () banked
  7377  001082  5185               	movf	(_data+1)& (0+255),w,b
  7378  001084  C084  F01C         	movff	_data,??_ComputeStorageData
  7379  001088  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7380  00108A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7381  00108E  6A1C               	clrf	??_ComputeStorageData,c
  7382  001090  101C               	iorwf	??_ComputeStorageData,w,c
  7383  001092  0100               	movlb	0	; () banked
  7384  001094  6F78               	movwf	_Currentcomp& (0+255),b
  7385  001096  501D               	movf	??_ComputeStorageData+1,w,c
  7386  001098  0100               	movlb	0	; () banked
  7387  00109A  6F79               	movwf	(_Currentcomp+1)& (0+255),b
  7388                           
  7389                           ;PDU.c: 99: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7390  00109C  0100               	movlb	0	; () banked
  7391  00109E  5187               	movf	(_data+3)& (0+255),w,b
  7392  0010A0  C086  F01C         	movff	_data+2,??_ComputeStorageData
  7393  0010A4  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7394  0010A6  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7395  0010AA  6A1C               	clrf	??_ComputeStorageData,c
  7396  0010AC  101C               	iorwf	??_ComputeStorageData,w,c
  7397  0010AE  0100               	movlb	0	; () banked
  7398  0010B0  6F7A               	movwf	(_Currentcomp+2)& (0+255),b
  7399  0010B2  501D               	movf	??_ComputeStorageData+1,w,c
  7400  0010B4  0100               	movlb	0	; () banked
  7401  0010B6  6F7B               	movwf	(_Currentcomp+3)& (0+255),b
  7402                           
  7403                           ;PDU.c: 100: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7404  0010B8  0100               	movlb	0	; () banked
  7405  0010BA  5189               	movf	(_data+5)& (0+255),w,b
  7406  0010BC  C088  F01C         	movff	_data+4,??_ComputeStorageData
  7407  0010C0  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7408  0010C2  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7409  0010C6  6A1C               	clrf	??_ComputeStorageData,c
  7410  0010C8  101C               	iorwf	??_ComputeStorageData,w,c
  7411  0010CA  0100               	movlb	0	; () banked
  7412  0010CC  6F7C               	movwf	(_Currentcomp+4)& (0+255),b
  7413  0010CE  501D               	movf	??_ComputeStorageData+1,w,c
  7414  0010D0  0100               	movlb	0	; () banked
  7415  0010D2  6F7D               	movwf	(_Currentcomp+5)& (0+255),b
  7416                           
  7417                           ;PDU.c: 101: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7418  0010D4  0100               	movlb	0	; () banked
  7419  0010D6  518B               	movf	(_data+7)& (0+255),w,b
  7420  0010D8  C08A  F01C         	movff	_data+6,??_ComputeStorageData
  7421  0010DC  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7422  0010DE  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7423  0010E2  6A1C               	clrf	??_ComputeStorageData,c
  7424  0010E4  101C               	iorwf	??_ComputeStorageData,w,c
  7425  0010E6  0100               	movlb	0	; () banked
  7426  0010E8  6F7E               	movwf	(_Currentcomp+6)& (0+255),b
  7427  0010EA  501D               	movf	??_ComputeStorageData+1,w,c
  7428  0010EC  0100               	movlb	0	; () banked
  7429  0010EE  6F7F               	movwf	(_Currentcomp+7)& (0+255),b
  7430                           
  7431                           ;PDU.c: 102: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7432  0010F0  0100               	movlb	0	; () banked
  7433  0010F2  518D               	movf	(_data+9)& (0+255),w,b
  7434  0010F4  C08C  F01C         	movff	_data+8,??_ComputeStorageData
  7435  0010F8  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7436  0010FA  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7437  0010FE  6A1C               	clrf	??_ComputeStorageData,c
  7438  001100  101C               	iorwf	??_ComputeStorageData,w,c
  7439  001102  0100               	movlb	0	; () banked
  7440  001104  6F80               	movwf	(_Currentcomp+8)& (0+255),b
  7441  001106  501D               	movf	??_ComputeStorageData+1,w,c
  7442  001108  0100               	movlb	0	; () banked
  7443  00110A  6F81               	movwf	(_Currentcomp+9)& (0+255),b
  7444                           
  7445                           ;PDU.c: 103: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7446  00110C  0100               	movlb	0	; () banked
  7447  00110E  518F               	movf	(_data+11)& (0+255),w,b
  7448  001110  C08E  F01C         	movff	_data+10,??_ComputeStorageData
  7449  001114  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7450  001116  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7451  00111A  6A1C               	clrf	??_ComputeStorageData,c
  7452  00111C  101C               	iorwf	??_ComputeStorageData,w,c
  7453  00111E  0100               	movlb	0	; () banked
  7454  001120  6F82               	movwf	(_Currentcomp+10)& (0+255),b
  7455  001122  501D               	movf	??_ComputeStorageData+1,w,c
  7456  001124  0100               	movlb	0	; () banked
  7457  001126  6F83               	movwf	(_Currentcomp+11)& (0+255),b
  7458                           
  7459                           ; BSR set to: 0
  7460  001128  0012               	return		;funcret
  7461  00112A                     __end_of_ComputeStorageData:
  7462                           	opt stack 0
  7463                           tosu	equ	0xFFF
  7464                           tosh	equ	0xFFE
  7465                           tosl	equ	0xFFD
  7466                           pclath	equ	0xFFA
  7467                           tblptru	equ	0xFF8
  7468                           tblptrh	equ	0xFF7
  7469                           tblptrl	equ	0xFF6
  7470                           tablat	equ	0xFF5
  7471                           prodh	equ	0xFF4
  7472                           prodl	equ	0xFF3
  7473                           intcon	equ	0xFF2
  7474                           intcon2	equ	0xFF1
  7475                           postinc0	equ	0xFEE
  7476                           wreg	equ	0xFE8
  7477                           indf2	equ	0xFDF
  7478                           postinc2	equ	0xFDE
  7479                           postdec2	equ	0xFDD
  7480                           plusw2	equ	0xFDB
  7481                           fsr2h	equ	0xFDA
  7482                           fsr2l	equ	0xFD9
  7483                           status	equ	0xFD8
  7484                           
  7485 ;; *************** function _DATAEE_ReadByte *****************
  7486 ;; Defined at:
  7487 ;;		line 143 in file "mcc_generated_files/memory.c"
  7488 ;; Parameters:    Size  Location     Type
  7489 ;;  bAdd            1    wreg     unsigned char 
  7490 ;; Auto vars:     Size  Location     Type
  7491 ;;  bAdd            1   26[COMRAM] unsigned char 
  7492 ;; Return value:  Size  Location     Type
  7493 ;;                  1    wreg      unsigned char 
  7494 ;; Registers used:
  7495 ;;		wreg, status,2
  7496 ;; Tracked objects:
  7497 ;;		On entry : 0/0
  7498 ;;		On exit  : 0/0
  7499 ;;		Unchanged: 0/0
  7500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7501 ;;      Params:         0       0       0       0       0       0       0
  7502 ;;      Locals:         1       0       0       0       0       0       0
  7503 ;;      Temps:          0       0       0       0       0       0       0
  7504 ;;      Totals:         1       0       0       0       0       0       0
  7505 ;;Total ram usage:        1 bytes
  7506 ;; Hardware stack levels used:    1
  7507 ;; Hardware stack levels required when called:    4
  7508 ;; This function calls:
  7509 ;;		Nothing
  7510 ;; This function is called by:
  7511 ;;		_ComputeStorageData
  7512 ;; This function uses a non-reentrant model
  7513 ;;
  7514                           
  7515                           	psect	text45
  7516  001DDC                     __ptext45:
  7517                           	opt stack 0
  7518  001DDC                     _DATAEE_ReadByte:
  7519                           	opt stack 24
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;incstack = 0
  7523                           ;DATAEE_ReadByte@bAdd stored from wreg
  7524  001DDC  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7525                           
  7526                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7527  001DDE  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7528                           
  7529                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7530  001DE2  9CA6               	bcf	4006,6,c	;volatile
  7531                           
  7532                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7533  001DE4  9EA6               	bcf	4006,7,c	;volatile
  7534                           
  7535                           ;memory.c: 148: EECON1bits.RD = 1;
  7536  001DE6  80A6               	bsf	4006,0,c	;volatile
  7537                           
  7538                           ;memory.c: 149: __nop();
  7539  001DE8  F000               	nop	
  7540                           
  7541                           ;memory.c: 150: __nop();
  7542  001DEA  F000               	nop	
  7543                           
  7544                           ;memory.c: 152: return (EEDATA);
  7545  001DEC  50A8               	movf	4008,w,c	;volatile
  7546  001DEE  0012               	return	
  7547  001DF0                     __end_of_DATAEE_ReadByte:
  7548                           	opt stack 0
  7549                           tosu	equ	0xFFF
  7550                           tosh	equ	0xFFE
  7551                           tosl	equ	0xFFD
  7552                           pclath	equ	0xFFA
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           intcon2	equ	0xFF1
  7561                           postinc0	equ	0xFEE
  7562                           wreg	equ	0xFE8
  7563                           indf2	equ	0xFDF
  7564                           postinc2	equ	0xFDE
  7565                           postdec2	equ	0xFDD
  7566                           plusw2	equ	0xFDB
  7567                           fsr2h	equ	0xFDA
  7568                           fsr2l	equ	0xFD9
  7569                           status	equ	0xFD8
  7570                           
  7571 ;; *************** function _CoolingStart *****************
  7572 ;; Defined at:
  7573 ;;		line 19 in file "CoolingControl.c"
  7574 ;; Parameters:    Size  Location     Type
  7575 ;;		None
  7576 ;; Auto vars:     Size  Location     Type
  7577 ;;		None
  7578 ;; Return value:  Size  Location     Type
  7579 ;;		None               void
  7580 ;; Registers used:
  7581 ;;		wreg, status,2, status,0, cstack
  7582 ;; Tracked objects:
  7583 ;;		On entry : 0/0
  7584 ;;		On exit  : 0/0
  7585 ;;		Unchanged: 0/0
  7586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7587 ;;      Params:         0       0       0       0       0       0       0
  7588 ;;      Locals:         0       0       0       0       0       0       0
  7589 ;;      Temps:          0       0       0       0       0       0       0
  7590 ;;      Totals:         0       0       0       0       0       0       0
  7591 ;;Total ram usage:        0 bytes
  7592 ;; Hardware stack levels used:    1
  7593 ;; Hardware stack levels required when called:    6
  7594 ;; This function calls:
  7595 ;;		_PWM4_LoadDutyValue
  7596 ;;		_PotClear
  7597 ;;		_PotSetpoint
  7598 ;; This function is called by:
  7599 ;;		_main
  7600 ;; This function uses a non-reentrant model
  7601 ;;
  7602                           
  7603                           	psect	text46
  7604  001D18                     __ptext46:
  7605                           	opt stack 0
  7606  001D18                     _CoolingStart:
  7607                           	opt stack 24
  7608                           
  7609                           ;CoolingControl.c: 21: PotClear();
  7610                           
  7611                           ;incstack = 0
  7612  001D18  EC6C  F009         	call	_PotClear	;wreg free
  7613                           
  7614                           ;CoolingControl.c: 22: PotSetpoint(40);
  7615  001D1C  0E00               	movlw	0
  7616  001D1E  6E25               	movwf	PotSetpoint@new_point+1,c
  7617  001D20  0E28               	movlw	40
  7618  001D22  6E24               	movwf	PotSetpoint@new_point,c
  7619  001D24  ECC8  F006         	call	_PotSetpoint	;wreg free
  7620                           
  7621                           ;CoolingControl.c: 23: PWM4_LoadDutyValue(1000);
  7622  001D28  0E03               	movlw	3
  7623  001D2A  6E1C               	movwf	PWM4_LoadDutyValue@dutyValue+1,c
  7624  001D2C  0EE8               	movlw	232
  7625  001D2E  6E1B               	movwf	PWM4_LoadDutyValue@dutyValue,c
  7626  001D30  ECBC  F00D         	call	_PWM4_LoadDutyValue	;wreg free
  7627  001D34  0012               	return		;funcret
  7628  001D36                     __end_of_CoolingStart:
  7629                           	opt stack 0
  7630                           tosu	equ	0xFFF
  7631                           tosh	equ	0xFFE
  7632                           tosl	equ	0xFFD
  7633                           pclath	equ	0xFFA
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon2	equ	0xFF1
  7642                           postinc0	equ	0xFEE
  7643                           wreg	equ	0xFE8
  7644                           indf2	equ	0xFDF
  7645                           postinc2	equ	0xFDE
  7646                           postdec2	equ	0xFDD
  7647                           plusw2	equ	0xFDB
  7648                           fsr2h	equ	0xFDA
  7649                           fsr2l	equ	0xFD9
  7650                           status	equ	0xFD8
  7651                           
  7652 ;; *************** function _PotSetpoint *****************
  7653 ;; Defined at:
  7654 ;;		line 21 in file "DigiPot.c"
  7655 ;; Parameters:    Size  Location     Type
  7656 ;;  new_point       2   35[COMRAM] int 
  7657 ;; Auto vars:     Size  Location     Type
  7658 ;;  new_pos         2    4[BANK0 ] int 
  7659 ;;  x               2    2[BANK0 ] int 
  7660 ;;  set_point       2    0[BANK0 ] int 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;		None               void
  7663 ;; Registers used:
  7664 ;;		wreg, status,2, status,0, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7670 ;;      Params:         2       0       0       0       0       0       0
  7671 ;;      Locals:         0       6       0       0       0       0       0
  7672 ;;      Temps:          2       0       0       0       0       0       0
  7673 ;;      Totals:         4       6       0       0       0       0       0
  7674 ;;Total ram usage:       10 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    5
  7677 ;; This function calls:
  7678 ;;		_Delay
  7679 ;; This function is called by:
  7680 ;;		_main
  7681 ;;		_CoolingStart
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           	psect	text47
  7686  000D90                     __ptext47:
  7687                           	opt stack 0
  7688  000D90                     _PotSetpoint:
  7689                           	opt stack 25
  7690                           
  7691                           ;DigiPot.c: 22: int set_point;
  7692                           ;DigiPot.c: 31: int new_pos = new_point;
  7693                           
  7694                           ;incstack = 0
  7695  000D90  C024  F0D7         	movff	PotSetpoint@new_point,PotSetpoint@new_pos
  7696  000D94  C025  F0D8         	movff	PotSetpoint@new_point+1,PotSetpoint@new_pos+1
  7697                           
  7698                           ;DigiPot.c: 35: LATB5 = 0;
  7699  000D98  9A8A               	bcf	3978,5,c	;volatile
  7700                           
  7701                           ;DigiPot.c: 38: if (new_pos > prev_pos) {
  7702  000D9A  0100               	movlb	0	; () banked
  7703  000D9C  51D7               	movf	PotSetpoint@new_pos& (0+255),w,b
  7704  000D9E  5C2A               	subwf	_prev_pos,w,c
  7705  000DA0  502B               	movf	_prev_pos+1,w,c
  7706  000DA2  0A80               	xorlw	128
  7707  000DA4  6E26               	movwf	??_PotSetpoint& (0+255),c
  7708  000DA6  0100               	movlb	0	; () banked
  7709  000DA8  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7710  000DAA  0A80               	xorlw	128
  7711  000DAC  5826               	subwfb	??_PotSetpoint& (0+255),w,c
  7712  000DAE  B0D8               	btfsc	status,0,c
  7713  000DB0  D013               	goto	l885
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;DigiPot.c: 40: LATB3 = 1;
  7717  000DB2  868A               	bsf	3978,3,c	;volatile
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;DigiPot.c: 41: set_point = new_pos - prev_pos;
  7721  000DB4  C02A  F026         	movff	_prev_pos,??_PotSetpoint
  7722  000DB8  C02B  F027         	movff	_prev_pos+1,??_PotSetpoint+1
  7723  000DBC  1E26               	comf	??_PotSetpoint,f,c
  7724  000DBE  1E27               	comf	??_PotSetpoint+1,f,c
  7725  000DC0  4A26               	infsnz	??_PotSetpoint,f,c
  7726  000DC2  2A27               	incf	??_PotSetpoint+1,f,c
  7727  000DC4  0100               	movlb	0	; () banked
  7728  000DC6  51D7               	movf	PotSetpoint@new_pos& (0+255),w,b
  7729  000DC8  2426               	addwf	??_PotSetpoint,w,c
  7730  000DCA  0100               	movlb	0	; () banked
  7731  000DCC  6FD3               	movwf	PotSetpoint@set_point& (0+255),b
  7732  000DCE  0100               	movlb	0	; () banked
  7733  000DD0  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7734  000DD2  2027               	addwfc	??_PotSetpoint+1,w,c
  7735  000DD4  0100               	movlb	0	; () banked
  7736  000DD6  6FD4               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7737  000DD8                     l885:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;DigiPot.c: 42: }
  7741                           ;DigiPot.c: 43: if (new_pos < prev_pos) {
  7742  000DD8  502A               	movf	_prev_pos,w,c
  7743  000DDA  0100               	movlb	0	; () banked
  7744  000DDC  5DD7               	subwf	PotSetpoint@new_pos& (0+255),w,b
  7745  000DDE  0100               	movlb	0	; () banked
  7746  000DE0  51D8               	movf	(PotSetpoint@new_pos+1)& (0+255),w,b
  7747  000DE2  0A80               	xorlw	128
  7748  000DE4  6E26               	movwf	??_PotSetpoint& (0+255),c
  7749  000DE6  502B               	movf	_prev_pos+1,w,c
  7750  000DE8  0A80               	xorlw	128
  7751  000DEA  5826               	subwfb	??_PotSetpoint& (0+255),w,c
  7752  000DEC  B0D8               	btfsc	status,0,c
  7753  000DEE  D011               	goto	l4337
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;DigiPot.c: 45: LATB3 = 0;
  7757  000DF0  968A               	bcf	3978,3,c	;volatile
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;DigiPot.c: 46: set_point = prev_pos - new_pos;
  7761  000DF2  C0D7  F026         	movff	PotSetpoint@new_pos,??_PotSetpoint
  7762  000DF6  C0D8  F027         	movff	PotSetpoint@new_pos+1,??_PotSetpoint+1
  7763  000DFA  1E26               	comf	??_PotSetpoint,f,c
  7764  000DFC  1E27               	comf	??_PotSetpoint+1,f,c
  7765  000DFE  4A26               	infsnz	??_PotSetpoint,f,c
  7766  000E00  2A27               	incf	??_PotSetpoint+1,f,c
  7767  000E02  502A               	movf	_prev_pos,w,c
  7768  000E04  2426               	addwf	??_PotSetpoint,w,c
  7769  000E06  0100               	movlb	0	; () banked
  7770  000E08  6FD3               	movwf	PotSetpoint@set_point& (0+255),b
  7771  000E0A  502B               	movf	_prev_pos+1,w,c
  7772  000E0C  2027               	addwfc	??_PotSetpoint+1,w,c
  7773  000E0E  0100               	movlb	0	; () banked
  7774  000E10  6FD4               	movwf	(PotSetpoint@set_point+1)& (0+255),b
  7775  000E12                     l4337:
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;DigiPot.c: 47: }
  7779                           ;DigiPot.c: 48: Delay(1);
  7780  000E12  0E01               	movlw	1
  7781  000E14  6E1B               	movwf	Delay@wait,c
  7782  000E16  0E00               	movlw	0
  7783  000E18  6E1C               	movwf	Delay@wait+1,c
  7784  000E1A  0E00               	movlw	0
  7785  000E1C  6E1D               	movwf	Delay@wait+2,c
  7786  000E1E  0E00               	movlw	0
  7787  000E20  6E1E               	movwf	Delay@wait+3,c
  7788  000E22  EC3F  F00D         	call	_Delay	;wreg free
  7789                           
  7790                           ;DigiPot.c: 50: int x;
  7791                           ;DigiPot.c: 52: for (x = 0; x < set_point; x++) {
  7792  000E26  0E00               	movlw	0
  7793  000E28  0100               	movlb	0	; () banked
  7794  000E2A  6FD6               	movwf	(PotSetpoint@x+1)& (0+255),b
  7795  000E2C  0E00               	movlw	0
  7796  000E2E  6FD5               	movwf	PotSetpoint@x& (0+255),b
  7797  000E30  D019               	goto	l4347
  7798  000E32                     l888:
  7799                           
  7800                           ; BSR set to: 0
  7801                           ;DigiPot.c: 53: LATB4 = 1;
  7802  000E32  888A               	bsf	3978,4,c	;volatile
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;DigiPot.c: 54: Delay(1);
  7806  000E34  0E01               	movlw	1
  7807  000E36  6E1B               	movwf	Delay@wait,c
  7808  000E38  0E00               	movlw	0
  7809  000E3A  6E1C               	movwf	Delay@wait+1,c
  7810  000E3C  0E00               	movlw	0
  7811  000E3E  6E1D               	movwf	Delay@wait+2,c
  7812  000E40  0E00               	movlw	0
  7813  000E42  6E1E               	movwf	Delay@wait+3,c
  7814  000E44  EC3F  F00D         	call	_Delay	;wreg free
  7815                           
  7816                           ;DigiPot.c: 55: LATB4 = 0;
  7817  000E48  988A               	bcf	3978,4,c	;volatile
  7818                           
  7819                           ;DigiPot.c: 56: Delay(1);
  7820  000E4A  0E01               	movlw	1
  7821  000E4C  6E1B               	movwf	Delay@wait,c
  7822  000E4E  0E00               	movlw	0
  7823  000E50  6E1C               	movwf	Delay@wait+1,c
  7824  000E52  0E00               	movlw	0
  7825  000E54  6E1D               	movwf	Delay@wait+2,c
  7826  000E56  0E00               	movlw	0
  7827  000E58  6E1E               	movwf	Delay@wait+3,c
  7828  000E5A  EC3F  F00D         	call	_Delay	;wreg free
  7829  000E5E  0100               	movlb	0	; () banked
  7830  000E60  4BD5               	infsnz	PotSetpoint@x& (0+255),f,b
  7831  000E62  2BD6               	incf	(PotSetpoint@x+1)& (0+255),f,b
  7832  000E64                     l4347:
  7833                           
  7834                           ; BSR set to: 0
  7835  000E64  0100               	movlb	0	; () banked
  7836  000E66  51D3               	movf	PotSetpoint@set_point& (0+255),w,b
  7837  000E68  0100               	movlb	0	; () banked
  7838  000E6A  5DD5               	subwf	PotSetpoint@x& (0+255),w,b
  7839  000E6C  0100               	movlb	0	; () banked
  7840  000E6E  51D6               	movf	(PotSetpoint@x+1)& (0+255),w,b
  7841  000E70  0A80               	xorlw	128
  7842  000E72  6E26               	movwf	??_PotSetpoint& (0+255),c
  7843  000E74  0100               	movlb	0	; () banked
  7844  000E76  51D4               	movf	(PotSetpoint@set_point+1)& (0+255),w,b
  7845  000E78  0A80               	xorlw	128
  7846  000E7A  5826               	subwfb	??_PotSetpoint& (0+255),w,c
  7847  000E7C  A0D8               	btfss	status,0,c
  7848  000E7E  D7D9               	goto	l888
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;DigiPot.c: 57: }
  7852                           ;DigiPot.c: 59: LATB5 = 1;
  7853  000E80  8A8A               	bsf	3978,5,c	;volatile
  7854                           
  7855                           ;DigiPot.c: 60: prev_pos = new_pos;
  7856  000E82  C0D7  F02A         	movff	PotSetpoint@new_pos,_prev_pos
  7857  000E86  C0D8  F02B         	movff	PotSetpoint@new_pos+1,_prev_pos+1
  7858                           
  7859                           ; BSR set to: 0
  7860  000E8A  0012               	return		;funcret
  7861  000E8C                     __end_of_PotSetpoint:
  7862                           	opt stack 0
  7863                           tosu	equ	0xFFF
  7864                           tosh	equ	0xFFE
  7865                           tosl	equ	0xFFD
  7866                           pclath	equ	0xFFA
  7867                           tblptru	equ	0xFF8
  7868                           tblptrh	equ	0xFF7
  7869                           tblptrl	equ	0xFF6
  7870                           tablat	equ	0xFF5
  7871                           prodh	equ	0xFF4
  7872                           prodl	equ	0xFF3
  7873                           intcon	equ	0xFF2
  7874                           intcon2	equ	0xFF1
  7875                           postinc0	equ	0xFEE
  7876                           wreg	equ	0xFE8
  7877                           indf2	equ	0xFDF
  7878                           postinc2	equ	0xFDE
  7879                           postdec2	equ	0xFDD
  7880                           plusw2	equ	0xFDB
  7881                           fsr2h	equ	0xFDA
  7882                           fsr2l	equ	0xFD9
  7883                           status	equ	0xFD8
  7884                           
  7885 ;; *************** function _PotClear *****************
  7886 ;; Defined at:
  7887 ;;		line 66 in file "DigiPot.c"
  7888 ;; Parameters:    Size  Location     Type
  7889 ;;		None
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  x               2   35[COMRAM] int 
  7892 ;; Return value:  Size  Location     Type
  7893 ;;		None               void
  7894 ;; Registers used:
  7895 ;;		wreg, status,2, status,0, cstack
  7896 ;; Tracked objects:
  7897 ;;		On entry : 0/0
  7898 ;;		On exit  : 0/0
  7899 ;;		Unchanged: 0/0
  7900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7901 ;;      Params:         0       0       0       0       0       0       0
  7902 ;;      Locals:         2       0       0       0       0       0       0
  7903 ;;      Temps:          0       0       0       0       0       0       0
  7904 ;;      Totals:         2       0       0       0       0       0       0
  7905 ;;Total ram usage:        2 bytes
  7906 ;; Hardware stack levels used:    1
  7907 ;; Hardware stack levels required when called:    5
  7908 ;; This function calls:
  7909 ;;		_Delay
  7910 ;; This function is called by:
  7911 ;;		_CoolingStart
  7912 ;; This function uses a non-reentrant model
  7913 ;;
  7914                           
  7915                           	psect	text48
  7916  0012D8                     __ptext48:
  7917                           	opt stack 0
  7918  0012D8                     _PotClear:
  7919                           	opt stack 24
  7920                           
  7921                           ;DigiPot.c: 67: Delay(1);
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;incstack = 0
  7925  0012D8  0E01               	movlw	1
  7926  0012DA  6E1B               	movwf	Delay@wait,c
  7927  0012DC  0E00               	movlw	0
  7928  0012DE  6E1C               	movwf	Delay@wait+1,c
  7929  0012E0  0E00               	movlw	0
  7930  0012E2  6E1D               	movwf	Delay@wait+2,c
  7931  0012E4  0E00               	movlw	0
  7932  0012E6  6E1E               	movwf	Delay@wait+3,c
  7933  0012E8  EC3F  F00D         	call	_Delay	;wreg free
  7934                           
  7935                           ;DigiPot.c: 69: LATB5 = 0;
  7936  0012EC  9A8A               	bcf	3978,5,c	;volatile
  7937                           
  7938                           ;DigiPot.c: 70: Delay(1);
  7939  0012EE  0E01               	movlw	1
  7940  0012F0  6E1B               	movwf	Delay@wait,c
  7941  0012F2  0E00               	movlw	0
  7942  0012F4  6E1C               	movwf	Delay@wait+1,c
  7943  0012F6  0E00               	movlw	0
  7944  0012F8  6E1D               	movwf	Delay@wait+2,c
  7945  0012FA  0E00               	movlw	0
  7946  0012FC  6E1E               	movwf	Delay@wait+3,c
  7947  0012FE  EC3F  F00D         	call	_Delay	;wreg free
  7948                           
  7949                           ;DigiPot.c: 71: LATB3 = 0;
  7950  001302  968A               	bcf	3978,3,c	;volatile
  7951                           
  7952                           ;DigiPot.c: 72: Delay(1);
  7953  001304  0E01               	movlw	1
  7954  001306  6E1B               	movwf	Delay@wait,c
  7955  001308  0E00               	movlw	0
  7956  00130A  6E1C               	movwf	Delay@wait+1,c
  7957  00130C  0E00               	movlw	0
  7958  00130E  6E1D               	movwf	Delay@wait+2,c
  7959  001310  0E00               	movlw	0
  7960  001312  6E1E               	movwf	Delay@wait+3,c
  7961  001314  EC3F  F00D         	call	_Delay	;wreg free
  7962                           
  7963                           ;DigiPot.c: 73: int x;
  7964                           ;DigiPot.c: 74: for (x = 0; x < 32; x++) {
  7965  001318  0E00               	movlw	0
  7966  00131A  6E25               	movwf	PotClear@x+1,c
  7967  00131C  0E00               	movlw	0
  7968  00131E  6E24               	movwf	PotClear@x,c
  7969  001320  BE25               	btfsc	PotClear@x+1,7,c
  7970  001322  D006               	goto	l893
  7971  001324  5025               	movf	PotClear@x+1,w,c
  7972  001326  E121               	bnz	l894
  7973  001328  0E20               	movlw	32
  7974  00132A  5C24               	subwf	PotClear@x,w,c
  7975  00132C  B0D8               	btfsc	status,0,c
  7976  00132E  D01D               	goto	l894
  7977  001330                     l893:
  7978                           
  7979                           ;DigiPot.c: 75: LATB4 = 1;
  7980  001330  888A               	bsf	3978,4,c	;volatile
  7981                           
  7982                           ;DigiPot.c: 76: Delay(1);
  7983  001332  0E01               	movlw	1
  7984  001334  6E1B               	movwf	Delay@wait,c
  7985  001336  0E00               	movlw	0
  7986  001338  6E1C               	movwf	Delay@wait+1,c
  7987  00133A  0E00               	movlw	0
  7988  00133C  6E1D               	movwf	Delay@wait+2,c
  7989  00133E  0E00               	movlw	0
  7990  001340  6E1E               	movwf	Delay@wait+3,c
  7991  001342  EC3F  F00D         	call	_Delay	;wreg free
  7992                           
  7993                           ;DigiPot.c: 77: LATB4 = 0;
  7994  001346  988A               	bcf	3978,4,c	;volatile
  7995                           
  7996                           ;DigiPot.c: 78: Delay(1);
  7997  001348  0E01               	movlw	1
  7998  00134A  6E1B               	movwf	Delay@wait,c
  7999  00134C  0E00               	movlw	0
  8000  00134E  6E1C               	movwf	Delay@wait+1,c
  8001  001350  0E00               	movlw	0
  8002  001352  6E1D               	movwf	Delay@wait+2,c
  8003  001354  0E00               	movlw	0
  8004  001356  6E1E               	movwf	Delay@wait+3,c
  8005  001358  EC3F  F00D         	call	_Delay	;wreg free
  8006  00135C  4A24               	infsnz	PotClear@x,f,c
  8007  00135E  2A25               	incf	PotClear@x+1,f,c
  8008  001360  BE25               	btfsc	PotClear@x+1,7,c
  8009  001362  D7E6               	goto	l893
  8010  001364  5025               	movf	PotClear@x+1,w,c
  8011  001366  E101               	bnz	u4020
  8012  001368  D7DF               	goto	L1
  8013  00136A                     u4020:
  8014  00136A                     l894:
  8015                           
  8016                           ;DigiPot.c: 79: }
  8017                           ;DigiPot.c: 80: LATB4 = 1;
  8018  00136A  888A               	bsf	3978,4,c	;volatile
  8019                           
  8020                           ;DigiPot.c: 81: Delay(1);
  8021  00136C  0E01               	movlw	1
  8022  00136E  6E1B               	movwf	Delay@wait,c
  8023  001370  0E00               	movlw	0
  8024  001372  6E1C               	movwf	Delay@wait+1,c
  8025  001374  0E00               	movlw	0
  8026  001376  6E1D               	movwf	Delay@wait+2,c
  8027  001378  0E00               	movlw	0
  8028  00137A  6E1E               	movwf	Delay@wait+3,c
  8029  00137C  EC3F  F00D         	call	_Delay	;wreg free
  8030                           
  8031                           ;DigiPot.c: 83: LATB5 = 1;
  8032  001380  8A8A               	bsf	3978,5,c	;volatile
  8033                           
  8034                           ;DigiPot.c: 84: prev_pos = 0;
  8035  001382  0E00               	movlw	0
  8036  001384  6E2B               	movwf	_prev_pos+1,c
  8037  001386  0E00               	movlw	0
  8038  001388  6E2A               	movwf	_prev_pos,c
  8039                           
  8040                           ;DigiPot.c: 85: Delay(1);
  8041  00138A  0E01               	movlw	1
  8042  00138C  6E1B               	movwf	Delay@wait,c
  8043  00138E  0E00               	movlw	0
  8044  001390  6E1C               	movwf	Delay@wait+1,c
  8045  001392  0E00               	movlw	0
  8046  001394  6E1D               	movwf	Delay@wait+2,c
  8047  001396  0E00               	movlw	0
  8048  001398  6E1E               	movwf	Delay@wait+3,c
  8049  00139A  EC3F  F00D         	call	_Delay	;wreg free
  8050  00139E  0012               	return		;funcret
  8051  0013A0                     __end_of_PotClear:
  8052                           	opt stack 0
  8053                           tosu	equ	0xFFF
  8054                           tosh	equ	0xFFE
  8055                           tosl	equ	0xFFD
  8056                           pclath	equ	0xFFA
  8057                           tblptru	equ	0xFF8
  8058                           tblptrh	equ	0xFF7
  8059                           tblptrl	equ	0xFF6
  8060                           tablat	equ	0xFF5
  8061                           prodh	equ	0xFF4
  8062                           prodl	equ	0xFF3
  8063                           intcon	equ	0xFF2
  8064                           intcon2	equ	0xFF1
  8065                           postinc0	equ	0xFEE
  8066                           wreg	equ	0xFE8
  8067                           indf2	equ	0xFDF
  8068                           postinc2	equ	0xFDE
  8069                           postdec2	equ	0xFDD
  8070                           plusw2	equ	0xFDB
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function _Delay *****************
  8076 ;; Defined at:
  8077 ;;		line 9 in file "Functions.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;  wait            4   26[COMRAM] long 
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;  i               4   31[COMRAM] long 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;		None               void
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8091 ;;      Params:         4       0       0       0       0       0       0
  8092 ;;      Locals:         4       0       0       0       0       0       0
  8093 ;;      Temps:          1       0       0       0       0       0       0
  8094 ;;      Totals:         9       0       0       0       0       0       0
  8095 ;;Total ram usage:        9 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    4
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_respondECU
  8102 ;;		_StartUp595
  8103 ;;		_writeRegisters
  8104 ;;		_PotSetpoint
  8105 ;;		_PotClear
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text49
  8110  001A7E                     __ptext49:
  8111                           	opt stack 0
  8112  001A7E                     _Delay:
  8113                           	opt stack 24
  8114                           
  8115                           ;Functions.c: 10: long int i = 0;
  8116                           
  8117                           ;incstack = 0
  8118  001A7E  0E00               	movlw	0
  8119  001A80  6E20               	movwf	Delay@i,c
  8120  001A82  0E00               	movlw	0
  8121  001A84  6E21               	movwf	Delay@i+1,c
  8122  001A86  0E00               	movlw	0
  8123  001A88  6E22               	movwf	Delay@i+2,c
  8124  001A8A  0E00               	movlw	0
  8125  001A8C  6E23               	movwf	Delay@i+3,c
  8126                           
  8127                           ;Functions.c: 11: for (; wait > i; i++) {
  8128  001A8E  D00D               	goto	l3665
  8129  001A90                     l3661:
  8130                           
  8131                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  8132  001A90  0E03               	movlw	3
  8133  001A92  6E1F               	movwf	??_Delay& (0+255),c
  8134  001A94  0E98               	movlw	152
  8135  001A96                     u4187:
  8136  001A96  2EE8               	decfsz	wreg,f,c
  8137  001A98  D7FE               	goto	u4187
  8138  001A9A  2E1F               	decfsz	??_Delay& (0+255),f,c
  8139  001A9C  D7FC               	goto	u4187
  8140  001A9E  0E01               	movlw	1
  8141  001AA0  2620               	addwf	Delay@i,f,c
  8142  001AA2  0E00               	movlw	0
  8143  001AA4  2221               	addwfc	Delay@i+1,f,c
  8144  001AA6  2222               	addwfc	Delay@i+2,f,c
  8145  001AA8  2223               	addwfc	Delay@i+3,f,c
  8146  001AAA                     l3665:
  8147  001AAA  501B               	movf	Delay@wait,w,c
  8148  001AAC  5C20               	subwf	Delay@i,w,c
  8149  001AAE  501C               	movf	Delay@wait+1,w,c
  8150  001AB0  5821               	subwfb	Delay@i+1,w,c
  8151  001AB2  501D               	movf	Delay@wait+2,w,c
  8152  001AB4  5822               	subwfb	Delay@i+2,w,c
  8153  001AB6  5023               	movf	Delay@i+3,w,c
  8154  001AB8  0A80               	xorlw	128
  8155  001ABA  6E1F               	movwf	??_Delay& (0+255),c
  8156  001ABC  501E               	movf	Delay@wait+3,w,c
  8157  001ABE  0A80               	xorlw	128
  8158  001AC0  581F               	subwfb	??_Delay& (0+255),w,c
  8159  001AC2  B0D8               	btfsc	status,0,c
  8160  001AC4  0012               	return	
  8161  001AC6  D7E4               	goto	l3661
  8162  001AC8                     __end_of_Delay:
  8163                           	opt stack 0
  8164                           tosu	equ	0xFFF
  8165                           tosh	equ	0xFFE
  8166                           tosl	equ	0xFFD
  8167                           pclath	equ	0xFFA
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           intcon2	equ	0xFF1
  8176                           postinc0	equ	0xFEE
  8177                           wreg	equ	0xFE8
  8178                           indf2	equ	0xFDF
  8179                           postinc2	equ	0xFDE
  8180                           postdec2	equ	0xFDD
  8181                           plusw2	equ	0xFDB
  8182                           fsr2h	equ	0xFDA
  8183                           fsr2l	equ	0xFD9
  8184                           status	equ	0xFD8
  8185                           
  8186 ;; *************** function _PWM4_LoadDutyValue *****************
  8187 ;; Defined at:
  8188 ;;		line 81 in file "mcc_generated_files/pwm4.c"
  8189 ;; Parameters:    Size  Location     Type
  8190 ;;  dutyValue       2   26[COMRAM] unsigned int 
  8191 ;; Auto vars:     Size  Location     Type
  8192 ;;		None
  8193 ;; Return value:  Size  Location     Type
  8194 ;;		None               void
  8195 ;; Registers used:
  8196 ;;		wreg, status,2, status,0
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8202 ;;      Params:         2       0       0       0       0       0       0
  8203 ;;      Locals:         0       0       0       0       0       0       0
  8204 ;;      Temps:          2       0       0       0       0       0       0
  8205 ;;      Totals:         4       0       0       0       0       0       0
  8206 ;;Total ram usage:        4 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    4
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_CoolingStart
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           	psect	text50
  8217  001B78                     __ptext50:
  8218                           	opt stack 0
  8219  001B78                     _PWM4_LoadDutyValue:
  8220                           	opt stack 25
  8221                           
  8222                           ;pwm4.c: 84: CCPR4L = ((dutyValue & 0x03FC)>>2);
  8223                           
  8224                           ;incstack = 0
  8225  001B78  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8226  001B7C  C01C  F01E         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  8227  001B80  90D8               	bcf	status,0,c
  8228  001B82  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8229  001B84  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8230  001B86  90D8               	bcf	status,0,c
  8231  001B88  321E               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  8232  001B8A  321D               	rrcf	??_PWM4_LoadDutyValue,f,c
  8233  001B8C  501D               	movf	??_PWM4_LoadDutyValue,w,c
  8234  001B8E  010F               	movlb	15	; () banked
  8235  001B90  6F58               	movwf	88,b	;volatile
  8236                           
  8237                           ;pwm4.c: 87: CCP4CON = (CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4);
  8238  001B92  C01B  F01D         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  8239  001B96  0E03               	movlw	3
  8240  001B98  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8241  001B9A  3A1D               	swapf	??_PWM4_LoadDutyValue,f,c
  8242  001B9C  0EF0               	movlw	240
  8243  001B9E  161D               	andwf	??_PWM4_LoadDutyValue,f,c
  8244  001BA0  010F               	movlb	15	; () banked
  8245  001BA2  5157               	movf	87,w,b	;volatile
  8246  001BA4  0BCF               	andlw	207
  8247  001BA6  101D               	iorwf	??_PWM4_LoadDutyValue,w,c
  8248  001BA8  010F               	movlb	15	; () banked
  8249  001BAA  6F57               	movwf	87,b	;volatile
  8250                           
  8251                           ; BSR set to: 15
  8252  001BAC  0012               	return		;funcret
  8253  001BAE                     __end_of_PWM4_LoadDutyValue:
  8254                           	opt stack 0
  8255                           tosu	equ	0xFFF
  8256                           tosh	equ	0xFFE
  8257                           tosl	equ	0xFFD
  8258                           pclath	equ	0xFFA
  8259                           tblptru	equ	0xFF8
  8260                           tblptrh	equ	0xFF7
  8261                           tblptrl	equ	0xFF6
  8262                           tablat	equ	0xFF5
  8263                           prodh	equ	0xFF4
  8264                           prodl	equ	0xFF3
  8265                           intcon	equ	0xFF2
  8266                           intcon2	equ	0xFF1
  8267                           postinc0	equ	0xFEE
  8268                           wreg	equ	0xFE8
  8269                           indf2	equ	0xFDF
  8270                           postinc2	equ	0xFDE
  8271                           postdec2	equ	0xFDD
  8272                           plusw2	equ	0xFDB
  8273                           fsr2h	equ	0xFDA
  8274                           fsr2l	equ	0xFD9
  8275                           status	equ	0xFD8
  8276                           
  8277 ;; *************** function _INTERRUPT_InterruptManager *****************
  8278 ;; Defined at:
  8279 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;		None
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;		None               void
  8286 ;; Registers used:
  8287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8293 ;;      Params:         0       0       0       0       0       0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0
  8295 ;;      Temps:         14       0       0       0       0       0       0
  8296 ;;      Totals:        14       0       0       0       0       0       0
  8297 ;;Total ram usage:       14 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    3
  8300 ;; This function calls:
  8301 ;;		_ADC_ISR
  8302 ;;		_EUSART1_Receive_ISR
  8303 ;;		_EUSART1_Transmit_ISR
  8304 ;; This function is called by:
  8305 ;;		Interrupt level 2
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           	psect	intcode
  8310  000008                     __pintcode:
  8311                           	opt stack 0
  8312  000008                     _INTERRUPT_InterruptManager:
  8313                           	opt stack 21
  8314                           
  8315                           ; BSR set to: 15
  8316                           ;incstack = 0
  8317  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8318  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  8319  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8320  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8321  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8322  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8323  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8324  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8325  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8326  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8327  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8328  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8329  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8330  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8331  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8332                           
  8333                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8334  000042  BA9D               	btfsc	3997,5,c	;volatile
  8335  000044  AA9E               	btfss	3998,5,c	;volatile
  8336  000046  D003               	goto	i2l63
  8337                           
  8338                           ;interrupt_manager.c: 71: {
  8339                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  8340  000048  EC9B  F00E         	call	_EUSART1_Receive_ISR	;wreg free
  8341                           
  8342                           ;interrupt_manager.c: 73: }
  8343  00004C  D00B               	goto	i2l69
  8344  00004E                     i2l63:
  8345                           
  8346                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8347  00004E  B89D               	btfsc	3997,4,c	;volatile
  8348  000050  A89E               	btfss	3998,4,c	;volatile
  8349  000052  D003               	goto	i2l65
  8350                           
  8351                           ;interrupt_manager.c: 75: {
  8352                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  8353  000054  ECD7  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  8354                           
  8355                           ;interrupt_manager.c: 77: }
  8356  000058  D005               	goto	i2l69
  8357  00005A                     i2l65:
  8358                           
  8359                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8360  00005A  BC9D               	btfsc	3997,6,c	;volatile
  8361  00005C  AC9E               	btfss	3998,6,c	;volatile
  8362  00005E  D002               	goto	i2l69
  8363                           
  8364                           ;interrupt_manager.c: 79: {
  8365                           ;interrupt_manager.c: 80: ADC_ISR();
  8366  000060  EC17  F00F         	call	_ADC_ISR	;wreg free
  8367  000064                     i2l69:
  8368  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8369  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8370  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8371  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8372  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8373  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8374  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8375  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8376  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8377  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8378  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8379  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8380  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8381  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8382  00009C  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8383  00009E  0011               	retfie		f
  8384  0000A0                     __end_of_INTERRUPT_InterruptManager:
  8385                           	opt stack 0
  8386                           tosu	equ	0xFFF
  8387                           tosh	equ	0xFFE
  8388                           tosl	equ	0xFFD
  8389                           pclatu	equ	0xFFB
  8390                           pclath	equ	0xFFA
  8391                           tblptru	equ	0xFF8
  8392                           tblptrh	equ	0xFF7
  8393                           tblptrl	equ	0xFF6
  8394                           tablat	equ	0xFF5
  8395                           prodh	equ	0xFF4
  8396                           prodl	equ	0xFF3
  8397                           intcon	equ	0xFF2
  8398                           intcon2	equ	0xFF1
  8399                           postinc0	equ	0xFEE
  8400                           fsr0h	equ	0xFEA
  8401                           fsr0l	equ	0xFE9
  8402                           wreg	equ	0xFE8
  8403                           fsr1h	equ	0xFE2
  8404                           fsr1l	equ	0xFE1
  8405                           indf2	equ	0xFDF
  8406                           postinc2	equ	0xFDE
  8407                           postdec2	equ	0xFDD
  8408                           plusw2	equ	0xFDB
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _EUSART1_Transmit_ISR *****************
  8414 ;; Defined at:
  8415 ;;		line 150 in file "UART.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;		None               void
  8422 ;; Registers used:
  8423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8429 ;;      Params:         0       0       0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0
  8432 ;;      Totals:         0       0       0       0       0       0       0
  8433 ;;Total ram usage:        0 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    2
  8436 ;; This function calls:
  8437 ;;		i2_UART_buff_get
  8438 ;;		i2_UART_buff_size
  8439 ;; This function is called by:
  8440 ;;		_INTERRUPT_InterruptManager
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           	psect	text52
  8445  001BAE                     __ptext52:
  8446                           	opt stack 0
  8447  001BAE                     _EUSART1_Transmit_ISR:
  8448                           	opt stack 21
  8449                           
  8450                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  8451                           
  8452                           ;incstack = 0
  8453  001BAE  0E00               	movlw	low _output_buffer
  8454  001BB0  6E01               	movwf	i2UART_buff_size@_this,c
  8455  001BB2  0E04               	movlw	high _output_buffer
  8456  001BB4  6E02               	movwf	i2UART_buff_size@_this+1,c
  8457  001BB6  ECD9  F00E         	call	i2_UART_buff_size	;wreg free
  8458  001BBA  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  8459  001BBC  D00D               	goto	i2l3463
  8460  001BBE  5002               	movf	?i2_UART_buff_size+1,w,c
  8461  001BC0  E103               	bnz	i2u269_40
  8462  001BC2  0401               	decf	?i2_UART_buff_size,w,c
  8463  001BC4  A0D8               	btfss	status,0,c
  8464  001BC6  D008               	goto	i2l3463
  8465  001BC8                     i2u269_40:
  8466                           
  8467                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  8468  001BC8  0E00               	movlw	low _output_buffer
  8469  001BCA  6E07               	movwf	i2UART_buff_get@_this,c
  8470  001BCC  0E04               	movlw	high _output_buffer
  8471  001BCE  6E08               	movwf	i2UART_buff_get@_this+1,c
  8472  001BD0  EC76  F00A         	call	i2_UART_buff_get	;wreg free
  8473  001BD4  6EAD               	movwf	4013,c	;volatile
  8474                           
  8475                           ;UART.c: 154: } else {
  8476  001BD6  0012               	return	
  8477  001BD8                     i2l3463:
  8478                           
  8479                           ;UART.c: 155: Transmit_stall = 1;
  8480  001BD8  0E01               	movlw	1
  8481  001BDA  6E44               	movwf	_Transmit_stall,c
  8482                           
  8483                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  8484  001BDC  989D               	bcf	3997,4,c	;volatile
  8485  001BDE  0012               	return	
  8486  001BE0                     __end_of_EUSART1_Transmit_ISR:
  8487                           	opt stack 0
  8488                           tosu	equ	0xFFF
  8489                           tosh	equ	0xFFE
  8490                           tosl	equ	0xFFD
  8491                           pclatu	equ	0xFFB
  8492                           pclath	equ	0xFFA
  8493                           tblptru	equ	0xFF8
  8494                           tblptrh	equ	0xFF7
  8495                           tblptrl	equ	0xFF6
  8496                           tablat	equ	0xFF5
  8497                           prodh	equ	0xFF4
  8498                           prodl	equ	0xFF3
  8499                           intcon	equ	0xFF2
  8500                           intcon2	equ	0xFF1
  8501                           postinc0	equ	0xFEE
  8502                           fsr0h	equ	0xFEA
  8503                           fsr0l	equ	0xFE9
  8504                           wreg	equ	0xFE8
  8505                           fsr1h	equ	0xFE2
  8506                           fsr1l	equ	0xFE1
  8507                           indf2	equ	0xFDF
  8508                           postinc2	equ	0xFDE
  8509                           postdec2	equ	0xFDD
  8510                           plusw2	equ	0xFDB
  8511                           fsr2h	equ	0xFDA
  8512                           fsr2l	equ	0xFD9
  8513                           status	equ	0xFD8
  8514                           
  8515 ;; *************** function i2_UART_buff_size *****************
  8516 ;; Defined at:
  8517 ;;		line 102 in file "UART.c"
  8518 ;; Parameters:    Size  Location     Type
  8519 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  8520 ;;		 -> output_buffer(206), input_buffer(206), 
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;		None
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  2    0[COMRAM] int 
  8525 ;; Registers used:
  8526 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8532 ;;      Params:         2       0       0       0       0       0       0
  8533 ;;      Locals:         0       0       0       0       0       0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0
  8535 ;;      Totals:         2       0       0       0       0       0       0
  8536 ;;Total ram usage:        2 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; This function calls:
  8539 ;;		Nothing
  8540 ;; This function is called by:
  8541 ;;		_EUSART1_Transmit_ISR
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text53
  8546  001DB2                     __ptext53:
  8547                           	opt stack 0
  8548  001DB2                     i2_UART_buff_size:
  8549                           	opt stack 22
  8550                           
  8551                           ;UART.c: 103: return (_this->count);
  8552                           
  8553                           ;incstack = 0
  8554  001DB2  EE20 F0CC          	lfsr	2,204
  8555  001DB6  5001               	movf	i2UART_buff_size@_this,w,c
  8556  001DB8  26D9               	addwf	fsr2l,f,c
  8557  001DBA  5002               	movf	i2UART_buff_size@_this+1,w,c
  8558  001DBC  22DA               	addwfc	fsr2h,f,c
  8559  001DBE  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  8560  001DC2  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  8561  001DC6  0012               	return	
  8562  001DC8                     __end_ofi2_UART_buff_size:
  8563                           	opt stack 0
  8564                           tosu	equ	0xFFF
  8565                           tosh	equ	0xFFE
  8566                           tosl	equ	0xFFD
  8567                           pclatu	equ	0xFFB
  8568                           pclath	equ	0xFFA
  8569                           tblptru	equ	0xFF8
  8570                           tblptrh	equ	0xFF7
  8571                           tblptrl	equ	0xFF6
  8572                           tablat	equ	0xFF5
  8573                           prodh	equ	0xFF4
  8574                           prodl	equ	0xFF3
  8575                           intcon	equ	0xFF2
  8576                           intcon2	equ	0xFF1
  8577                           postinc0	equ	0xFEE
  8578                           fsr0h	equ	0xFEA
  8579                           fsr0l	equ	0xFE9
  8580                           wreg	equ	0xFE8
  8581                           fsr1h	equ	0xFE2
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           plusw2	equ	0xFDB
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function i2_UART_buff_get *****************
  8592 ;; Defined at:
  8593 ;;		line 81 in file "UART.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8596 ;;		 -> output_buffer(206), input_buffer(206), 
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      unsigned char 
  8601 ;; Registers used:
  8602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8608 ;;      Params:         2       0       0       0       0       0       0
  8609 ;;      Locals:         1       0       0       0       0       0       0
  8610 ;;      Temps:          2       0       0       0       0       0       0
  8611 ;;      Totals:         5       0       0       0       0       0       0
  8612 ;;Total ram usage:        5 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    1
  8615 ;; This function calls:
  8616 ;;		i2_UART_buff_modulo_inc
  8617 ;; This function is called by:
  8618 ;;		_EUSART1_Transmit_ISR
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text54
  8623  0014EC                     __ptext54:
  8624                           	opt stack 0
  8625  0014EC                     i2_UART_buff_get:
  8626                           	opt stack 21
  8627                           
  8628                           ;UART.c: 82: unsigned char c;
  8629                           ;UART.c: 83: if (_this->count > 0) {
  8630                           
  8631                           ;incstack = 0
  8632  0014EC  EE20 F0CC          	lfsr	2,204
  8633  0014F0  5007               	movf	i2UART_buff_get@_this,w,c
  8634  0014F2  26D9               	addwf	fsr2l,f,c
  8635  0014F4  5008               	movf	i2UART_buff_get@_this+1,w,c
  8636  0014F6  22DA               	addwfc	fsr2h,f,c
  8637  0014F8  0E01               	movlw	1
  8638  0014FA  BEDB               	btfsc	plusw2,7,c
  8639  0014FC  D03C               	goto	i2l3435
  8640  0014FE  0E01               	movlw	1
  8641  001500  50DB               	movf	plusw2,w,c
  8642  001502  E103               	bnz	i2u266_40
  8643  001504  04DE               	decf	postinc2,w,c
  8644  001506  A0D8               	btfss	status,0,c
  8645  001508  D036               	goto	i2l3435
  8646  00150A                     i2u266_40:
  8647                           
  8648                           ;UART.c: 84: c = _this->buf[_this->tail];
  8649  00150A  EE20 F0CA          	lfsr	2,202
  8650  00150E  5007               	movf	i2UART_buff_get@_this,w,c
  8651  001510  26D9               	addwf	fsr2l,f,c
  8652  001512  5008               	movf	i2UART_buff_get@_this+1,w,c
  8653  001514  22DA               	addwfc	fsr2h,f,c
  8654  001516  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  8655  00151A  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  8656  00151E  5009               	movf	??i2_UART_buff_get,w,c
  8657  001520  2407               	addwf	i2UART_buff_get@_this,w,c
  8658  001522  6ED9               	movwf	fsr2l,c
  8659  001524  500A               	movf	??i2_UART_buff_get+1,w,c
  8660  001526  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  8661  001528  6EDA               	movwf	fsr2h,c
  8662  00152A  50DF               	movf	indf2,w,c
  8663  00152C  6E0B               	movwf	i2UART_buff_get@c,c
  8664                           
  8665                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8666  00152E  EE20 F0CA          	lfsr	2,202
  8667  001532  5007               	movf	i2UART_buff_get@_this,w,c
  8668  001534  26D9               	addwf	fsr2l,f,c
  8669  001536  5008               	movf	i2UART_buff_get@_this+1,w,c
  8670  001538  22DA               	addwfc	fsr2h,f,c
  8671  00153A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8672  00153E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8673  001542  0E00               	movlw	0
  8674  001544  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8675  001546  0EC8               	movlw	200
  8676  001548  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8677  00154A  EC47  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8678  00154E  EE20 F0CA          	lfsr	2,202
  8679  001552  5007               	movf	i2UART_buff_get@_this,w,c
  8680  001554  26D9               	addwf	fsr2l,f,c
  8681  001556  5008               	movf	i2UART_buff_get@_this+1,w,c
  8682  001558  22DA               	addwfc	fsr2h,f,c
  8683  00155A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8684  00155E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8685                           
  8686                           ;UART.c: 86: --_this->count;
  8687  001562  EE20 F0CC          	lfsr	2,204
  8688  001566  5007               	movf	i2UART_buff_get@_this,w,c
  8689  001568  26D9               	addwf	fsr2l,f,c
  8690  00156A  5008               	movf	i2UART_buff_get@_this+1,w,c
  8691  00156C  22DA               	addwfc	fsr2h,f,c
  8692  00156E  06DE               	decf	postinc2,f,c
  8693  001570  0E00               	movlw	0
  8694  001572  5ADD               	subwfb	postdec2,f,c
  8695                           
  8696                           ;UART.c: 87: } else {
  8697  001574  D002               	goto	i2l782
  8698  001576                     i2l3435:
  8699                           
  8700                           ;UART.c: 88: c = 0;
  8701  001576  0E00               	movlw	0
  8702  001578  6E0B               	movwf	i2UART_buff_get@c,c
  8703  00157A                     i2l782:
  8704                           
  8705                           ;UART.c: 89: }
  8706                           ;UART.c: 90: return (c);
  8707  00157A  500B               	movf	i2UART_buff_get@c,w,c
  8708  00157C  0012               	return	
  8709  00157E                     __end_ofi2_UART_buff_get:
  8710                           	opt stack 0
  8711                           tosu	equ	0xFFF
  8712                           tosh	equ	0xFFE
  8713                           tosl	equ	0xFFD
  8714                           pclatu	equ	0xFFB
  8715                           pclath	equ	0xFFA
  8716                           tblptru	equ	0xFF8
  8717                           tblptrh	equ	0xFF7
  8718                           tblptrl	equ	0xFF6
  8719                           tablat	equ	0xFF5
  8720                           prodh	equ	0xFF4
  8721                           prodl	equ	0xFF3
  8722                           intcon	equ	0xFF2
  8723                           intcon2	equ	0xFF1
  8724                           postinc0	equ	0xFEE
  8725                           fsr0h	equ	0xFEA
  8726                           fsr0l	equ	0xFE9
  8727                           wreg	equ	0xFE8
  8728                           fsr1h	equ	0xFE2
  8729                           fsr1l	equ	0xFE1
  8730                           indf2	equ	0xFDF
  8731                           postinc2	equ	0xFDE
  8732                           postdec2	equ	0xFDD
  8733                           plusw2	equ	0xFDB
  8734                           fsr2h	equ	0xFDA
  8735                           fsr2l	equ	0xFD9
  8736                           status	equ	0xFD8
  8737                           
  8738 ;; *************** function _EUSART1_Receive_ISR *****************
  8739 ;; Defined at:
  8740 ;;		line 139 in file "UART.c"
  8741 ;; Parameters:    Size  Location     Type
  8742 ;;		None
  8743 ;; Auto vars:     Size  Location     Type
  8744 ;;  data            1   11[COMRAM] unsigned char 
  8745 ;; Return value:  Size  Location     Type
  8746 ;;		None               void
  8747 ;; Registers used:
  8748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8749 ;; Tracked objects:
  8750 ;;		On entry : 0/0
  8751 ;;		On exit  : 0/0
  8752 ;;		Unchanged: 0/0
  8753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8754 ;;      Params:         0       0       0       0       0       0       0
  8755 ;;      Locals:         1       0       0       0       0       0       0
  8756 ;;      Temps:          0       0       0       0       0       0       0
  8757 ;;      Totals:         1       0       0       0       0       0       0
  8758 ;;Total ram usage:        1 bytes
  8759 ;; Hardware stack levels used:    1
  8760 ;; Hardware stack levels required when called:    2
  8761 ;; This function calls:
  8762 ;;		i2_UART_buff_put
  8763 ;; This function is called by:
  8764 ;;		_INTERRUPT_InterruptManager
  8765 ;; This function uses a non-reentrant model
  8766 ;;
  8767                           
  8768                           	psect	text55
  8769  001D36                     __ptext55:
  8770                           	opt stack 0
  8771  001D36                     _EUSART1_Receive_ISR:
  8772                           	opt stack 21
  8773                           
  8774                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  8775                           
  8776                           ;incstack = 0
  8777  001D36  A2AB               	btfss	4011,1,c	;volatile
  8778  001D38  D002               	goto	i2l813
  8779                           
  8780                           ;UART.c: 143: RC1STAbits.CREN = 0;
  8781  001D3A  98AB               	bcf	4011,4,c	;volatile
  8782                           
  8783                           ;UART.c: 144: RC1STAbits.CREN = 1;
  8784  001D3C  88AB               	bsf	4011,4,c	;volatile
  8785  001D3E                     i2l813:
  8786                           
  8787                           ;UART.c: 145: }
  8788                           ;UART.c: 146: unsigned char data = RCREG1;
  8789  001D3E  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  8790                           
  8791                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  8792  001D42  0E00               	movlw	low _input_buffer
  8793  001D44  6E07               	movwf	i2UART_buff_put@_this,c
  8794  001D46  0E03               	movlw	high _input_buffer
  8795  001D48  6E08               	movwf	i2UART_buff_put@_this+1,c
  8796  001D4A  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  8797  001D4E  EC3B  F006         	call	i2_UART_buff_put	;wreg free
  8798  001D52  0012               	return		;funcret
  8799  001D54                     __end_of_EUSART1_Receive_ISR:
  8800                           	opt stack 0
  8801                           tosu	equ	0xFFF
  8802                           tosh	equ	0xFFE
  8803                           tosl	equ	0xFFD
  8804                           pclatu	equ	0xFFB
  8805                           pclath	equ	0xFFA
  8806                           tblptru	equ	0xFF8
  8807                           tblptrh	equ	0xFF7
  8808                           tblptrl	equ	0xFF6
  8809                           tablat	equ	0xFF5
  8810                           prodh	equ	0xFF4
  8811                           prodl	equ	0xFF3
  8812                           intcon	equ	0xFF2
  8813                           intcon2	equ	0xFF1
  8814                           postinc0	equ	0xFEE
  8815                           fsr0h	equ	0xFEA
  8816                           fsr0l	equ	0xFE9
  8817                           wreg	equ	0xFE8
  8818                           fsr1h	equ	0xFE2
  8819                           fsr1l	equ	0xFE1
  8820                           indf2	equ	0xFDF
  8821                           postinc2	equ	0xFDE
  8822                           postdec2	equ	0xFDD
  8823                           plusw2	equ	0xFDB
  8824                           fsr2h	equ	0xFDA
  8825                           fsr2l	equ	0xFD9
  8826                           status	equ	0xFD8
  8827                           
  8828 ;; *************** function i2_UART_buff_put *****************
  8829 ;; Defined at:
  8830 ;;		line 68 in file "UART.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8833 ;;		 -> output_buffer(206), input_buffer(206), 
  8834 ;;  c               1    8[COMRAM] const unsigned char 
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;		None
  8837 ;; Return value:  Size  Location     Type
  8838 ;;		None               void
  8839 ;; Registers used:
  8840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8846 ;;      Params:         3       0       0       0       0       0       0
  8847 ;;      Locals:         0       0       0       0       0       0       0
  8848 ;;      Temps:          2       0       0       0       0       0       0
  8849 ;;      Totals:         5       0       0       0       0       0       0
  8850 ;;Total ram usage:        5 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    1
  8853 ;; This function calls:
  8854 ;;		i2_UART_buff_modulo_inc
  8855 ;; This function is called by:
  8856 ;;		_EUSART1_Receive_ISR
  8857 ;; This function uses a non-reentrant model
  8858 ;;
  8859                           
  8860                           	psect	text56
  8861  000C76                     __ptext56:
  8862                           	opt stack 0
  8863  000C76                     i2_UART_buff_put:
  8864                           	opt stack 21
  8865                           
  8866                           ;UART.c: 69: if (_this->count < 200) {
  8867                           
  8868                           ;incstack = 0
  8869  000C76  EE20 F0CC          	lfsr	2,204
  8870  000C7A  5007               	movf	i2UART_buff_put@_this,w,c
  8871  000C7C  26D9               	addwf	fsr2l,f,c
  8872  000C7E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8873  000C80  22DA               	addwfc	fsr2h,f,c
  8874  000C82  0E01               	movlw	1
  8875  000C84  BEDB               	btfsc	plusw2,7,c
  8876  000C86  D007               	goto	i2l3415
  8877  000C88  0E01               	movlw	1
  8878  000C8A  50DB               	movf	plusw2,w,c
  8879  000C8C  E13A               	bnz	i2l3421
  8880  000C8E  0EC8               	movlw	200
  8881  000C90  5CDE               	subwf	postinc2,w,c
  8882  000C92  B0D8               	btfsc	status,0,c
  8883  000C94  D036               	goto	i2l3421
  8884  000C96                     i2l3415:
  8885                           
  8886                           ;UART.c: 70: _this->buf[_this->head] = c;
  8887  000C96  EE20 F0C8          	lfsr	2,200
  8888  000C9A  5007               	movf	i2UART_buff_put@_this,w,c
  8889  000C9C  26D9               	addwf	fsr2l,f,c
  8890  000C9E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8891  000CA0  22DA               	addwfc	fsr2h,f,c
  8892  000CA2  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8893  000CA6  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8894  000CAA  500A               	movf	??i2_UART_buff_put,w,c
  8895  000CAC  2407               	addwf	i2UART_buff_put@_this,w,c
  8896  000CAE  6ED9               	movwf	fsr2l,c
  8897  000CB0  500B               	movf	??i2_UART_buff_put+1,w,c
  8898  000CB2  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8899  000CB4  6EDA               	movwf	fsr2h,c
  8900  000CB6  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8901                           
  8902                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8903  000CBA  EE20 F0C8          	lfsr	2,200
  8904  000CBE  5007               	movf	i2UART_buff_put@_this,w,c
  8905  000CC0  26D9               	addwf	fsr2l,f,c
  8906  000CC2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8907  000CC4  22DA               	addwfc	fsr2h,f,c
  8908  000CC6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8909  000CCA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8910  000CCE  0E00               	movlw	0
  8911  000CD0  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8912  000CD2  0EC8               	movlw	200
  8913  000CD4  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8914  000CD6  EC47  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8915  000CDA  EE20 F0C8          	lfsr	2,200
  8916  000CDE  5007               	movf	i2UART_buff_put@_this,w,c
  8917  000CE0  26D9               	addwf	fsr2l,f,c
  8918  000CE2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8919  000CE4  22DA               	addwfc	fsr2h,f,c
  8920  000CE6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8921  000CEA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8922                           
  8923                           ;UART.c: 72: ++_this->count;
  8924  000CEE  EE20 F0CC          	lfsr	2,204
  8925  000CF2  5007               	movf	i2UART_buff_put@_this,w,c
  8926  000CF4  26D9               	addwf	fsr2l,f,c
  8927  000CF6  5008               	movf	i2UART_buff_put@_this+1,w,c
  8928  000CF8  22DA               	addwfc	fsr2h,f,c
  8929  000CFA  2ADE               	incf	postinc2,f,c
  8930  000CFC  0E00               	movlw	0
  8931  000CFE  22DD               	addwfc	postdec2,f,c
  8932                           
  8933                           ;UART.c: 73: } else {
  8934  000D00  0012               	return	
  8935  000D02                     i2l3421:
  8936                           
  8937                           ;UART.c: 74: _this->buf[_this->head] = c;
  8938  000D02  EE20 F0C8          	lfsr	2,200
  8939  000D06  5007               	movf	i2UART_buff_put@_this,w,c
  8940  000D08  26D9               	addwf	fsr2l,f,c
  8941  000D0A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8942  000D0C  22DA               	addwfc	fsr2h,f,c
  8943  000D0E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8944  000D12  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8945  000D16  500A               	movf	??i2_UART_buff_put,w,c
  8946  000D18  2407               	addwf	i2UART_buff_put@_this,w,c
  8947  000D1A  6ED9               	movwf	fsr2l,c
  8948  000D1C  500B               	movf	??i2_UART_buff_put+1,w,c
  8949  000D1E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8950  000D20  6EDA               	movwf	fsr2h,c
  8951  000D22  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8952                           
  8953                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8954  000D26  EE20 F0C8          	lfsr	2,200
  8955  000D2A  5007               	movf	i2UART_buff_put@_this,w,c
  8956  000D2C  26D9               	addwf	fsr2l,f,c
  8957  000D2E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8958  000D30  22DA               	addwfc	fsr2h,f,c
  8959  000D32  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8960  000D36  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8961  000D3A  0E00               	movlw	0
  8962  000D3C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8963  000D3E  0EC8               	movlw	200
  8964  000D40  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8965  000D42  EC47  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8966  000D46  EE20 F0C8          	lfsr	2,200
  8967  000D4A  5007               	movf	i2UART_buff_put@_this,w,c
  8968  000D4C  26D9               	addwf	fsr2l,f,c
  8969  000D4E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8970  000D50  22DA               	addwfc	fsr2h,f,c
  8971  000D52  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8972  000D56  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8973                           
  8974                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8975  000D5A  EE20 F0CA          	lfsr	2,202
  8976  000D5E  5007               	movf	i2UART_buff_put@_this,w,c
  8977  000D60  26D9               	addwf	fsr2l,f,c
  8978  000D62  5008               	movf	i2UART_buff_put@_this+1,w,c
  8979  000D64  22DA               	addwfc	fsr2h,f,c
  8980  000D66  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8981  000D6A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8982  000D6E  0E00               	movlw	0
  8983  000D70  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8984  000D72  0EC8               	movlw	200
  8985  000D74  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8986  000D76  EC47  F00E         	call	i2_UART_buff_modulo_inc	;wreg free
  8987  000D7A  EE20 F0CA          	lfsr	2,202
  8988  000D7E  5007               	movf	i2UART_buff_put@_this,w,c
  8989  000D80  26D9               	addwf	fsr2l,f,c
  8990  000D82  5008               	movf	i2UART_buff_put@_this+1,w,c
  8991  000D84  22DA               	addwfc	fsr2h,f,c
  8992  000D86  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8993  000D8A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8994  000D8E  0012               	return	
  8995  000D90                     __end_ofi2_UART_buff_put:
  8996                           	opt stack 0
  8997                           tosu	equ	0xFFF
  8998                           tosh	equ	0xFFE
  8999                           tosl	equ	0xFFD
  9000                           pclatu	equ	0xFFB
  9001                           pclath	equ	0xFFA
  9002                           tblptru	equ	0xFF8
  9003                           tblptrh	equ	0xFF7
  9004                           tblptrl	equ	0xFF6
  9005                           tablat	equ	0xFF5
  9006                           prodh	equ	0xFF4
  9007                           prodl	equ	0xFF3
  9008                           intcon	equ	0xFF2
  9009                           intcon2	equ	0xFF1
  9010                           postinc0	equ	0xFEE
  9011                           fsr0h	equ	0xFEA
  9012                           fsr0l	equ	0xFE9
  9013                           wreg	equ	0xFE8
  9014                           fsr1h	equ	0xFE2
  9015                           fsr1l	equ	0xFE1
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           plusw2	equ	0xFDB
  9020                           fsr2h	equ	0xFDA
  9021                           fsr2l	equ	0xFD9
  9022                           status	equ	0xFD8
  9023                           
  9024 ;; *************** function i2_UART_buff_modulo_inc *****************
  9025 ;; Defined at:
  9026 ;;		line 106 in file "UART.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  value           2    0[COMRAM] const unsigned int 
  9029 ;;  modulus         2    2[COMRAM] const unsigned int 
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  9032 ;; Return value:  Size  Location     Type
  9033 ;;                  2    0[COMRAM] unsigned int 
  9034 ;; Registers used:
  9035 ;;		wreg, status,2, status,0
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9041 ;;      Params:         4       0       0       0       0       0       0
  9042 ;;      Locals:         2       0       0       0       0       0       0
  9043 ;;      Temps:          0       0       0       0       0       0       0
  9044 ;;      Totals:         6       0       0       0       0       0       0
  9045 ;;Total ram usage:        6 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; This function calls:
  9048 ;;		Nothing
  9049 ;; This function is called by:
  9050 ;;		i2_UART_buff_put
  9051 ;;		i2_UART_buff_get
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           	psect	text57
  9056  001C8E                     __ptext57:
  9057                           	opt stack 0
  9058  001C8E                     i2_UART_buff_modulo_inc:
  9059                           	opt stack 21
  9060                           
  9061                           ;UART.c: 107: unsigned int my_value = value + 1;
  9062                           
  9063                           ;incstack = 0
  9064  001C8E  0E01               	movlw	1
  9065  001C90  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  9066  001C92  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9067  001C94  0E00               	movlw	0
  9068  001C96  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  9069  001C98  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9070                           
  9071                           ;UART.c: 108: if (my_value >= modulus) {
  9072  001C9A  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  9073  001C9C  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  9074  001C9E  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  9075  001CA0  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  9076  001CA2  A0D8               	btfss	status,0,c
  9077  001CA4  D004               	goto	i2l3047
  9078                           
  9079                           ;UART.c: 109: my_value = 0;
  9080  001CA6  0E00               	movlw	0
  9081  001CA8  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  9082  001CAA  0E00               	movlw	0
  9083  001CAC  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  9084  001CAE                     i2l3047:
  9085                           
  9086                           ;UART.c: 110: }
  9087                           ;UART.c: 111: return (my_value);
  9088  001CAE  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  9089  001CB2  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  9090  001CB6  0012               	return	
  9091  001CB8                     __end_ofi2_UART_buff_modulo_inc:
  9092                           	opt stack 0
  9093                           tosu	equ	0xFFF
  9094                           tosh	equ	0xFFE
  9095                           tosl	equ	0xFFD
  9096                           pclatu	equ	0xFFB
  9097                           pclath	equ	0xFFA
  9098                           tblptru	equ	0xFF8
  9099                           tblptrh	equ	0xFF7
  9100                           tblptrl	equ	0xFF6
  9101                           tablat	equ	0xFF5
  9102                           prodh	equ	0xFF4
  9103                           prodl	equ	0xFF3
  9104                           intcon	equ	0xFF2
  9105                           intcon2	equ	0xFF1
  9106                           postinc0	equ	0xFEE
  9107                           fsr0h	equ	0xFEA
  9108                           fsr0l	equ	0xFE9
  9109                           wreg	equ	0xFE8
  9110                           fsr1h	equ	0xFE2
  9111                           fsr1l	equ	0xFE1
  9112                           indf2	equ	0xFDF
  9113                           postinc2	equ	0xFDE
  9114                           postdec2	equ	0xFDD
  9115                           plusw2	equ	0xFDB
  9116                           fsr2h	equ	0xFDA
  9117                           fsr2l	equ	0xFD9
  9118                           status	equ	0xFD8
  9119                           
  9120 ;; *************** function _ADC_ISR *****************
  9121 ;; Defined at:
  9122 ;;		line 128 in file "mcc_generated_files/adc.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;		None
  9125 ;; Auto vars:     Size  Location     Type
  9126 ;;		None
  9127 ;; Return value:  Size  Location     Type
  9128 ;;		None               void
  9129 ;; Registers used:
  9130 ;;		None
  9131 ;; Tracked objects:
  9132 ;;		On entry : 0/0
  9133 ;;		On exit  : 0/0
  9134 ;;		Unchanged: 0/0
  9135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9136 ;;      Params:         0       0       0       0       0       0       0
  9137 ;;      Locals:         0       0       0       0       0       0       0
  9138 ;;      Temps:          0       0       0       0       0       0       0
  9139 ;;      Totals:         0       0       0       0       0       0       0
  9140 ;;Total ram usage:        0 bytes
  9141 ;; Hardware stack levels used:    1
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_INTERRUPT_InterruptManager
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           	psect	text58
  9150  001E2E                     __ptext58:
  9151                           	opt stack 0
  9152  001E2E                     _ADC_ISR:
  9153                           	opt stack 23
  9154                           
  9155                           ;adc.c: 131: PIR1bits.ADIF = 0;
  9156                           
  9157                           ;incstack = 0
  9158  001E2E  9C9E               	bcf	3998,6,c	;volatile
  9159  001E30  0012               	return		;funcret
  9160  001E32                     __end_of_ADC_ISR:
  9161                           	opt stack 0
  9162  0000                     tosu	equ	0xFFF
  9163                           tosh	equ	0xFFE
  9164                           tosl	equ	0xFFD
  9165                           pclatu	equ	0xFFB
  9166                           pclath	equ	0xFFA
  9167                           tblptru	equ	0xFF8
  9168                           tblptrh	equ	0xFF7
  9169                           tblptrl	equ	0xFF6
  9170                           tablat	equ	0xFF5
  9171                           prodh	equ	0xFF4
  9172                           prodl	equ	0xFF3
  9173                           intcon	equ	0xFF2
  9174                           intcon2	equ	0xFF1
  9175                           postinc0	equ	0xFEE
  9176                           fsr0h	equ	0xFEA
  9177                           fsr0l	equ	0xFE9
  9178                           wreg	equ	0xFE8
  9179                           fsr1h	equ	0xFE2
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           plusw2	equ	0xFDB
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           tosu	equ	0xFFF
  9189                           tosh	equ	0xFFE
  9190                           tosl	equ	0xFFD
  9191                           pclatu	equ	0xFFB
  9192                           pclath	equ	0xFFA
  9193                           tblptru	equ	0xFF8
  9194                           tblptrh	equ	0xFF7
  9195                           tblptrl	equ	0xFF6
  9196                           tablat	equ	0xFF5
  9197                           prodh	equ	0xFF4
  9198                           prodl	equ	0xFF3
  9199                           intcon	equ	0xFF2
  9200                           intcon2	equ	0xFF1
  9201                           postinc0	equ	0xFEE
  9202                           fsr0h	equ	0xFEA
  9203                           fsr0l	equ	0xFE9
  9204                           wreg	equ	0xFE8
  9205                           fsr1h	equ	0xFE2
  9206                           fsr1l	equ	0xFE1
  9207                           indf2	equ	0xFDF
  9208                           postinc2	equ	0xFDE
  9209                           postdec2	equ	0xFDD
  9210                           plusw2	equ	0xFDB
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215                           	psect	text59
  9216  000000                     __ptext59:
  9217                           	opt stack 0
  9218                           tosu	equ	0xFFF
  9219                           tosh	equ	0xFFE
  9220                           tosl	equ	0xFFD
  9221                           pclatu	equ	0xFFB
  9222                           pclath	equ	0xFFA
  9223                           tblptru	equ	0xFF8
  9224                           tblptrh	equ	0xFF7
  9225                           tblptrl	equ	0xFF6
  9226                           tablat	equ	0xFF5
  9227                           prodh	equ	0xFF4
  9228                           prodl	equ	0xFF3
  9229                           intcon	equ	0xFF2
  9230                           intcon2	equ	0xFF1
  9231                           postinc0	equ	0xFEE
  9232                           fsr0h	equ	0xFEA
  9233                           fsr0l	equ	0xFE9
  9234                           wreg	equ	0xFE8
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           plusw2	equ	0xFDB
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245                           	psect	rparam
  9246  0000                     tosu	equ	0xFFF
  9247                           tosh	equ	0xFFE
  9248                           tosl	equ	0xFFD
  9249                           pclatu	equ	0xFFB
  9250                           pclath	equ	0xFFA
  9251                           tblptru	equ	0xFF8
  9252                           tblptrh	equ	0xFF7
  9253                           tblptrl	equ	0xFF6
  9254                           tablat	equ	0xFF5
  9255                           prodh	equ	0xFF4
  9256                           prodl	equ	0xFF3
  9257                           intcon	equ	0xFF2
  9258                           intcon2	equ	0xFF1
  9259                           postinc0	equ	0xFEE
  9260                           fsr0h	equ	0xFEA
  9261                           fsr0l	equ	0xFE9
  9262                           wreg	equ	0xFE8
  9263                           fsr1h	equ	0xFE2
  9264                           fsr1l	equ	0xFE1
  9265                           indf2	equ	0xFDF
  9266                           postinc2	equ	0xFDE
  9267                           postdec2	equ	0xFDD
  9268                           plusw2	equ	0xFDB
  9269                           fsr2h	equ	0xFDA
  9270                           fsr2l	equ	0xFD9
  9271                           status	equ	0xFD8
  9272                           
  9273                           	psect	temp
  9274  000045                     btemp:
  9275                           	opt stack 0
  9276  000045                     	ds	1
  9277  0000                     int$flags	set	btemp
  9278                           tosu	equ	0xFFF
  9279                           tosh	equ	0xFFE
  9280                           tosl	equ	0xFFD
  9281                           pclatu	equ	0xFFB
  9282                           pclath	equ	0xFFA
  9283                           tblptru	equ	0xFF8
  9284                           tblptrh	equ	0xFF7
  9285                           tblptrl	equ	0xFF6
  9286                           tablat	equ	0xFF5
  9287                           prodh	equ	0xFF4
  9288                           prodl	equ	0xFF3
  9289                           intcon	equ	0xFF2
  9290                           intcon2	equ	0xFF1
  9291                           postinc0	equ	0xFEE
  9292                           fsr0h	equ	0xFEA
  9293                           fsr0l	equ	0xFE9
  9294                           wreg	equ	0xFE8
  9295                           fsr1h	equ	0xFE2
  9296                           fsr1l	equ	0xFE1
  9297                           indf2	equ	0xFDF
  9298                           postinc2	equ	0xFDE
  9299                           postdec2	equ	0xFDD
  9300                           plusw2	equ	0xFDB
  9301                           fsr2h	equ	0xFDA
  9302                           fsr2l	equ	0xFD9
  9303                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1009
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      68
    BANK0           160     27     142
    BANK1           256      0     254
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1395(BANK0[3]), receiveData@holder(BANK0[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _main->_PotSetpoint
    _respondECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _Update->_writeRegisters
    _Clear595->_writeRegisters
    _writeRegisters->_Delay
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte
    _CoolingStart->_PotSetpoint
    _PotSetpoint->_Delay
    _PotClear->_Delay

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _receiveData->_CRCcheck
    _SYSTEM_Initialize->_begin
    _StartUp595->_Clear595
    _CoolingStart->_PotSetpoint

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   49327
                                             25 BANK0      2     2      0
                       _CoolingStart
                         _PDUStartup
                        _PotSetpoint
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   28948
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    8909
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                             38 COMRAM     1     1      0
                                              0 BANK0      4     4      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                              0 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              7 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2    9324
                                              0 BANK0      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2478
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR2_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1463
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     599
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
                    _TMR2_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR2_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0   12427
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0    1621
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0    3174
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0    1720
                                              0 BANK0      2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0    1621
                                             35 COMRAM     4     4      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    7471
                                             36 COMRAM     3     1      2
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    5637
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     161
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CoolingStart                                         0     0      0    3532
                 _PWM4_LoadDutyValue
                           _PotClear
                        _PotSetpoint
 ---------------------------------------------------------------------------------
 (1) _PotSetpoint                                         10     8      2    1871
                                             35 COMRAM     4     2      2
                                              0 BANK0      6     6      0
                              _Delay
 ---------------------------------------------------------------------------------
 (2) _PotClear                                             2     2      0    1522
                                             35 COMRAM     2     2      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4    1454
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _PWM4_LoadDutyValue                                   4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CoolingStart
     _PWM4_LoadDutyValue
     _PotClear
       _Delay
     _PotSetpoint
       _Delay
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
           _Delay
       _Delay
     _Update
       _writeRegisters
         _Delay
   _PotSetpoint
     _Delay
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR2_Initialize
       _TMR2_StartTimer
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
           _Delay
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FE       6       99.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      8E       4       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     434       9        0.0%
DATA                 0      0     434      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Fri Jun 10 02:28:20 2016

      __end_of_FastTransfer_buffer_flush 1836                   i2_UART_buff_modulo_inc 1C8E  
                           _rx_array_inx 0042                             ___awdiv@sign 0020  
                         ??_CoolingStart 0028                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l473 1A66  
                                    l731 1650                                      l399 1454  
                                    l729 1646                                      l587 0A1A  
                                    l782 14E8                                      l893 1330  
                                    l885 0DD8                                      l894 136A  
                                    l888 0E32                             __CFG_CPB$OFF 000000  
                                    _PR2 000FBB                             __CFG_CPD$OFF 000000  
                        _timer1ReloadVal 0038                          __end_of_ADC_ISR 1E32  
   FastTransfer_buffer_flush@clearBuffer 0025                          _TMR2_Initialize 1DC8  
                        _PWM4_Initialize 1D54                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4011 15F8                                     l4003 15E0  
                                   l4101 0102                                     l4007 15EA  
                                   l4201 054C                                     l4121 01C8  
                                   l4105 0106                                     l4203 059A  
                                   l4205 05B6                                     l4117 01AA  
                                   l4231 065A                                     l4215 05C2  
                                   l4135 020E                                     l4119 01C2  
                                   l4313 1056                                     l4241 06DC  
                                   l4233 0674                                     l4137 0234  
                                   l4153 0294                                     l4129 0202  
                                   l4401 1B72                                     l4323 1080  
                                   l4243 072A                                     l4235 068E  
                                   l4171 03F6                                     l4317 1066  
                                   l4261 13B6                                     l4237 06A8  
                                   l4229 0640                                     l4245 0746  
                                   l4173 03FC                                     l4165 0358  
                                   l4157 02BC                                     l4149 0262  
                                   l4253 0752                                     l4263 13C4  
                                   l4239 06C2                                     l4191 04CA  
                                   l4175 0410                                     l4337 0E12  
                                   l4281 1430                                     l4273 13FE  
                                   l3721 1A50                                     l3705 14E4  
                                   l3801 1292                                     l4193 04E4  
                                   l4097 00D4                                     l4347 0E64  
                                   l4275 140C                                     l4267 13DA  
                                   l3715 1A3A                                     l3731 1A72  
                                   l4195 04FE                                     l4531 19FC  
                                   l3661 1A90                                     l4285 1446  
                                   l4269 13E8                                     l4197 0518  
                                   l4189 04B0                                     l3901 0ABA  
                                   l3815 163E                                     l3807 1612  
                                   l4279 1422                                     l3655 1C84  
                                   l4199 0532                                     l3671 1C5A  
                                   l3751 077E                                     l3911 0B2E  
                                   l3903 0AC6                                     l3665 1AAA  
                                   l3681 1C28                                     l3729 1A6C  
                                   l3905 0AF0                                     l3931 0996  
                                   l3691 0BE8                                     l3907 0AF6  
                                   l4539 1A28                                     l3677 1C18  
                                   l3773 0EA0                                     l3941 09EA  
                                   l3917 08BE                                     l3685 0B7C  
                                   l3871 0F90                                     l3927 0980  
                                   l3919 08E6                                     l3873 0FAE  
                                   l3953 1AD2                                     l3785 0F24  
                                   l3769 0E96                                     l3793 120C  
                                   l3945 0A0A                     receiveData@crcHolder 00E6  
                                   l3875 0FCC                                     l3883 1026  
                                   l3963 1B00                                     l3877 0FEA  
                                   l3869 0F72                                     l3949 0A12  
                                   l3893 0A4E                                     l3879 1008  
                                   l3991 15B8                                     l3895 0A68  
                                   l3993 15C0                                     l3985 15A2  
                                   l3897 0A84                                     l3995 15C4  
                                   l3979 1592                                     l3899 0A9E  
                                   _CRC8 1A34                                     u3000 11EC  
                                   u3021 077C                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4020 136A                                     u3208 0B16  
                                   u4040 1B5E                                     u3218 08C2  
                                   u3138 0A38                                     u3219 08D6  
                                   u3148 0A52                                     u3238 08EA  
                                   u3158 0A6C                                     u3239 08FE  
                                   u3248 0906                                     u3168 0A88  
                                   u3249 091A                                     u3258 0922  
                                   u3178 0AA2                                     u4170 1A28  
                                   u3259 0936                                     u3268 093E  
                                   u3188 0ACA                                     u3269 0952  
                                   u3518 0146                                     u3438 00AE  
                                   u3519 015A                                     u3439 00C2  
                                   u3528 0160                                     u3529 0174  
                                   u3618 0238                                     u3538 017A  
                                   u3458 00DE                                     u4187 1A96  
                                   u3619 024C                                     u3539 018E  
                                   u3459 00F2                                     u3638 0266  
                                   u3558 01AE                                     u3478 010A  
                                   u3671 02FC                                     u3639 027A  
                                   u3479 011E                                     u2960 1478  
                                   u3808 059E                                     u3728 049A  
                                   u3648 0298                                     u3649 02AC  
                                   u3738 04B4                                     u3498 0128  
                                   u3499 013C                                     u3908 072E  
                                   u3828 062A                                     u3748 04CE  
                                   u3838 0644                                     u3758 04E8  
                                   u3598 0212                                     u3599 0226  
                                   u3848 065E                                     u3768 0502  
                                   u3858 0678                                     u3778 051C  
                                   u3868 0692                                     u3788 0536  
                                   u3878 06AC                                     u3798 0550  
                                   i2l63 004E                                     u3888 06C6  
                                   i2l65 005A                                     u3898 06E0  
                                   i2l69 0064                                     _TMR1 000FCE  
                                   _TMR2 000FBC                                     _WPUB 000F61  
                                   _data 0084                                     _main 19E8  
               __end_of_EnableSlavePower 104E                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08BE  
                                   start 00A0                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                         __end_of_CRCcheck 0A1C  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1E1A  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 1602                                    _EEADR 000FA9  
                                  _ANSB3 0079CB                                    _ANSB4 0079CC  
                                  _ANSD7 0079DF                          ___awdiv@divisor 001D  
                                  _T1CON 000FCD                                    _T2CON 000FBA  
                                  _LATB0 007C50                                    _LATA3 007C4B  
                                  _LATB3 007C53                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD4 007C64  
                                  _LATD5 007C65                                    _LATD6 007C66  
                                  _LATD7 007C67                           __CFG_DEBUG$OFF 000000  
                            ?_PDUStartup 0001                                    i2l813 1D3E  
                                  i2l782 157A                          ___awdiv@counter 001F  
                     _PWM4_LoadDutyValue 1B78                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 1A7E                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 1BAE  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         ??_writeRegisters 0024  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1898  
                        _DATAEE_ReadByte 1DDC                           __CFG_EBTRB$OFF 000000  
                                  _group 0028                      ?_PWM4_LoadDutyValue 001B  
                     __CFG_MCLRE$EXTMCLR 000000                                    main@i 00EC  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E2  
                                  plusw2 000FDB                           begin@stuffpeek 00DE  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                       __end_of_Clear595 1B06                           __CFG_HFOFST$ON 000000  
                        _TMR2_StartTimer 1E2A                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                     PotSetpoint@new_point 0024  
                           __end_of_CRC8 1A7E                          CRCcheck@SentCRC 00D3  
                        __initialization 176C               __end_of_EUSART1_Initialize 1B42  
                           __end_of_main 1A34                               _CurrentADC 006C  
                   ??_PWM4_LoadDutyValue 001D                               ToSend@what 00D3  
                                 ??_CRC8 001E                  __end_of_PWM4_Initialize 1D6E  
                __end_of_TMR2_Initialize 1DDC                                ??_ADC_ISR 0001  
            ?_INTERRUPT_InterruptManager 0001                     PotSetpoint@set_point 00D3  
                                 ??_main 0028                         __end_of_PotClear 13A0  
                          __activetblptr 000002                         __end_of_Send_put 1C0E  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00D3  
                                 _ADCON0 000FC2                                   _ADCON1 000FC1  
                                 _ADCON2 000FC0                                   _ADRESH 000FC4  
                                 _ADRESL 000FC3                                   _EEDATA 000FA8  
                                 _CCPR4H 000F59                                   _CCPR4L 000F58  
                                 _EECON2 000FA7                         ___awdiv@dividend 001B  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                                   _T1GCON 000FCC  
                        i2_UART_buff_get 14EC                                   _RC1STA 000FAB  
                        i2_UART_buff_put 0C76                                   Delay@i 0020  
                                 i2l3047 1CAE                                   i2l3421 0D02  
                         __CFG_WDTEN$OFF 000000                                   i2l3415 0C96  
                                 i2l3435 1576                                   i2l3463 1BD8  
            UART_buff_modulo_inc@modulus 001D                                   _TABLAT 000FF5  
                                 _RCREG1 000FAE                                   _OSCCON 000FD3  
            __end_of_processPowerRequest 145A                                   _SPBRG1 000FAF  
                   __end_of_CoolingStart 1D36                                   _TX1STA 000FAC  
                                 _TRISB3 007C9B                                   _TRISB4 007C9C  
                                 _TRISB5 007C9D                                   _TXREG1 000FAD  
                    __size_of_PDUStartup 0054                           __CFG_XINST$OFF 000000  
                                 _ToSend 1CDC                            ??_PotSetpoint 0026  
                    __end_of_Receive_get 1E0C                         crcBufS_get@_this 001B  
                           _CCPTMRS1bits 000F48              ??_FastTransfer_buffer_flush 0027  
                                 _Update 1E24                       __size_of_SetPin595 004E  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                                   _memset 1C0E  
                                 clear_0 1772                                   clear_1 177E  
                                 clear_2 178A                                   clear_3 1796  
                                 clear_4 17A2                                   clear_5 17AE  
                       ___awdiv@quotient 0021                                   _rx_len 0043  
                       __end_of_sendData 0B5C                  __end_of_DATAEE_ReadByte 1DF0  
                           __pdataCOMRAM 0044                            Send_put@_data 0026  
                         ??_Receive_peek 001F                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0168                               _StartUp595 1836  
           __end_of_UART_buff_modulo_inc 1C8E                  __end_of_TMR2_StartTimer 1E2E  
          __size_of_INTERRUPT_Initialize 000A                        _SYSTEM_Initialize 16FA  
                             __accesstop 0060                  __end_of__initialization 17C6  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 1AC8  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 1202  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 18F2   __end_of_FastTransfer_buffer_modulo_inc 1C64  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1C3A  
                       ?_TMR2_Initialize 0001                         ?_PWM4_Initialize 0001  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00D5  
                    __end_of_PotSetpoint 0E8C              __size_of_ComputeStorageData 00DC  
            PWM4_LoadDutyValue@dutyValue 001B                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                              _Currentcomp 0078  
                  __end_of_UART_buff_get 14EC                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 0C76                                ?_Clear595 0001  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 157E  
                __end_ofi2_UART_buff_put 0D90              __end_of_EUSART1_Receive_ISR 1D54  
              _FastTransfer_buffer_flush 17D4                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                        __end_of_SetPin595 19E8  
              __end_of_SYSTEM_Initialize 176C                   receiveData@holder_1395 00E3  
                    _addressErrorCounter 0090                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1DFE  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 1CB8                        begin@givenAddress 00D6  
                      ?_EnableSlavePower 0025                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0024                  __size_of_UART_buff_size 0016  
                              ?_PotClear 0001                                ?_Send_put 0001  
                     ??_EnableSlavePower 0027                     __size_of_receiveData 06B2  
                                ?_ToSend 00D3                       __CFG_CCP2MX$PORTC1 000000  
                                ?_Update 0001                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  _CCP4CON 000F57  
                                _ADC_ISR 1E2E                                  ?_memset 001B  
                             _crc_buffer 00C2                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0028  
                     UART_buff_put@_this 0021                               ??_Clear595 0028  
                       i2_UART_buff_size 1DB2              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                                  _TBLPTRH 000FF7  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                            ?_StartUp595 0001                        _Receive_available 1D86  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 00D3                      _receiveArrayAddress 0098  
                  __size_of_CoolingStart 001E                         ?_TMR2_StartTimer 0001  
                     ?_Receive_available 001D                               begin@error 00D7  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0060                        _alignErrorCounter 0092  
                        __CFG_PWRTEN$OFF 000000                               ??_PotClear 0024  
                             ??_Send_put 0026                                  __Hparam 0000  
                                __Lparam 0000                       __end_of_PDUStartup 199A  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 1DFE  
                            _PotSetpoint 0D90                                _AKNAKsend 003C  
                        __size_of_Update 0006                                  ___awdiv 157E  
                   _UART_buff_modulo_inc 1C64                                  _calc_CS 003D  
                                __pcinit 176C                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 19E8                                  __ptext1 1B42  
                                __ptext2 18F2                                  __ptext3 0A1C  
                                __ptext4 112A                                  __ptext5 17D4  
                                __ptext6 1CDC                                  __ptext7 0756  
                                __ptext8 1C3A                                  __ptext9 00A4  
                           _CoolingStart 1D18                         i2UART_buff_put@c 0009  
                              _T1CONbits 000FCD                    _OSCILLATOR_Initialize 1E0C  
              __end_of_Receive_available 1D9C                                _T2CONbits 000FBA  
                _FastTransfer_buffer_put 0756                    CRCcheck@calculatedCRC 00D4  
                     _EUSART1_Initialize 1B06                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                Clear595@i 00D3  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0072                     end_of_initialization 17C6  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 0027                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 0036                                  postdec2 000FDD  
                    __size_of_StartUp595 0062                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 18F2  
            __size_of_PWM4_LoadDutyValue 0036                         begin@stufftosend 00D8  
                    CRCcheck@arrayHolder 00D5                             SetPin595@Reg 001B  
                   ??_EUSART1_Initialize 0025                             SetPin595@pin 001D  
                 _dataAdressErrorCounter 0096                               _rx_address 0041  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           begin@maxSize 00D5       __size_of_FastTransfer_buffer_flush 0062  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1CFA  
                         _UART_buff_peek 1CB8                           _UART_buff_size 1D9C  
                    __end_of_crcBufS_get 0F6E                  __size_of_writeRegisters 007E  
                    __end_of_crcBufS_put 1202                        __size_of_CRCcheck 015E  
                          _moduleAddress 003F                               CRCcheck@rt 00D8  
           __size_of_processPowerRequest 00BA                           __end_of_ToSend 1CFA  
           __end_of_INTERRUPT_Initialize 1E24                           __end_of_Update 1E2A  
                        _crcErrorCounter 0094                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1E32                           _ADC_Initialize 1D6E  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 1C3A                        crcBufS_put@status 001F  
                           receiveData@r 00EA               __size_of_Receive_available 0016  
                           receiveData@u 00E8                      start_initialization 176C  
        __size_of_PIN_MANAGER_Initialize 007A                    crcBufS_get@wantedTime 0025  
                  EnableSlavePower@slave 0027                        __size_of_Clear595 003E  
                              PotClear@x 0024                   __end_of_UART_buff_init 1D18  
                 __end_of_UART_buff_peek 1CDC                           UART_buff_get@c 0025  
                 __end_of_UART_buff_size 1DB2                             ?_Receive_get 0001  
                              _SetPin595 199A                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 000E                      DATAEE_ReadByte@bAdd 001B  
               __end_ofi2_UART_buff_size 1DC8                                 ??_ToSend 0028  
                 ??_UART_buff_modulo_inc 001F                                 CRC8@data 001B  
                               ??_Update 0028                          crcBufS_get@time 001D  
                      __size_of_PotClear 00C8                        __size_of_Send_put 002E  
                            ?_respondECU 0001                   __end_of_ADC_Initialize 1D86  
             __end_of_ComputeStorageData 112A                                 ?_ADC_ISR 0001  
                               ??_memset 0021                __size_of_EnableSlavePower 00E0  
                            __pbssCOMRAM 0028            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00D3                             ??_StartUp595 0028  
               __size_of_PWM4_Initialize 001A                 __size_of_TMR2_Initialize 0014  
                           _Receive_peek 1DF0                      UART_buff_init@_this 0023  
                            _crcBufS_get 0E8C                      UART_buff_peek@_this 001B  
                            _crcBufS_put 112A                          ?_UART_buff_init 0023  
                        ?_UART_buff_peek 001B                          ?_UART_buff_size 001B  
           __size_of_EUSART1_Receive_ISR 001E                               ?_SetPin595 001B  
                          ??_receiveData 00DA              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00D4                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                   _PIN_MANAGER_Initialize 1680  
                      __size_of_sendData 0140                             ?_PotSetpoint 0024  
                              __pintcode 0008                                 ?___awdiv 001B  
                     __end_of_StartUp595 1898                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                           __size_of_Delay 004A  
                         __size_of_begin 005A                 __size_of_DATAEE_ReadByte 0014  
                    __size_of_respondECU 0054                     _INTERRUPT_Initialize 1E1A  
                           _receiveArray 009A              processPowerRequest@powerSet 00D3  
                               _CRCcheck 08BE                                 _LATCbits 000F8B  
                         _writeRegisters 1602                      UART_buff_size@_this 001B  
                              _registers 0100                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                 __size_of_TMR2_StartTimer 0004  
    __size_of_INTERRUPT_InterruptManager 0098                                 _PIR1bits 000F9E  
                               i2u266_40 150A                                 i2u269_40 1BC8  
                    begin@stuffavailable 00DC                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0756  
         FastTransfer_buffer_flush@_this 0023                             PotSetpoint@x 00D5  
                           _input_buffer 0300                                _rx_buffer 0200  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                   i2UART_buff_put@_this 0007                                 _Clear595 1AC8  
                          _UART_buff_get 145A                            _UART_buff_put 0B5C  
                    _processPowerRequest 13A0                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002E                   __end_of_writeRegisters 1680  
                     PotSetpoint@new_pos 00D7                              ??_SetPin595 0021  
                   EnableSlavePower@onof 0025                 __size_ofi2_UART_buff_get 0092  
                      ??_TMR2_Initialize 001B                        ??_PWM4_Initialize 001B  
               __size_ofi2_UART_buff_put 011A                               _EECON1bits 000FA6  
                          ??_updateComms 0028                     __size_of_Receive_get 000E  
                               _PotClear 12D8                                 __Hrparam 0000  
                               _Send_put 1BE0               __end_of_PWM4_LoadDutyValue 1BAE  
                               __Lrparam 0000                     ?_processPowerRequest 00D3  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                         __size_of___awdiv 0084  
            __size_of_EUSART1_Initialize 003C                      begin@stufftoreceive 00DA  
                       _EnableSlavePower 0F6E                               _ANSELCbits 000F3A  
                         ?_UART_buff_get 0021                           ?_UART_buff_put 0021  
                            CRC8@extract 001F                                sendData@i 00D5  
               crcBufS_status_put@status 001E                                 __ptext10 1BE0  
                               __ptext11 0B5C                                 __ptext20 1D86  
                               __ptext12 1DF0                                 __ptext21 1D9C  
                               __ptext13 1CB8                               _T1GCONbits 000FCC  
                               __ptext30 1680                                 __ptext22 1A34  
                               __ptext14 08BE                                 __ptext31 1E0C  
                               __ptext23 13A0                                 __ptext15 1202  
                               __ptext40 1AC8                                 __ptext32 1E1A  
                               __ptext24 16FA                                 __ptext16 0E8C  
                               __ptext41 1602                                 __ptext33 1B06  
                               __ptext25 1898                                 __ptext17 1DFE  
                               __ptext50 1B78                                 __ptext42 0F6E  
                               __ptext34 1CFA                                 __ptext26 157E  
                               __ptext18 145A                                 __ptext43 199A  
                               __ptext35 1C0E                                 __ptext27 1DC8  
                               __ptext19 1C64                                 __ptext52 1BAE  
                               __ptext44 104E                                 __ptext36 1D6E  
                               __ptext28 1E2A                                 __ptext53 1DB2  
                               __ptext45 1DDC                                 __ptext37 1946  
                               __ptext29 1D54                                 __ptext54 14EC  
                               __ptext46 1D18                                 __ptext38 1E24  
                               __ptext55 1D36                                 __ptext47 0D90  
                               __ptext39 1836                                 __ptext56 0C76  
                               __ptext48 12D8                                 __ptext57 1C8E  
                               __ptext49 1A7E                                 __ptext58 1E2E  
                               __ptext59 0000                            __size_of_CRC8 004A  
                               begin@ptr 00D3                  EUSART1_Receive_ISR@data 000C  
                        ?_writeRegisters 0001                            _returnAddress 0040  
                          __size_of_main 004C                              _receiveData 00A4  
                               _readwhat 002C                           _Transmit_stall 0044  
                               _sendData 0A1C                        ??_DATAEE_ReadByte 001B  
                      ?i2_UART_buff_size 0001                    ??_processPowerRequest 0028  
                             _RC1STAbits 000FAB                                 _prev_pos 002A  
                           ??_respondECU 0028                       ??i2_UART_buff_size 0003  
                      writeRegisters@val 0024                                 int$flags 0045  
                           _serial_write 0036                        ??_TMR2_StartTimer 001B  
                    __end_of_updateComms 1B78       __end_of_INTERRUPT_InterruptManager 00A0  
             _INTERRUPT_InterruptManager 0008                     __size_of_PotSetpoint 00FC  
                    _EUSART1_Receive_ISR 1D36                        receiveData@holder 00E0  
                             _INTCONbits 000FF2                      ComputeStorageData@i 001E  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                     _ComputeStorageData 104E                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0030  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 1946  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 001F  
           __end_of_EUSART1_Transmit_ISR 1BE0                              _ring_buffer 0130  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 0032  
                            _serial_read 0034                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
                   ??_ComputeStorageData 001C                            ?_CoolingStart 0001  
  FastTransfer_buffer_modulo_inc@modulus 001D                               _PDUStartup 1946  
                 crcBufS_status_put@time 001D                receiveData@crcHolder_1396 00E7  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003E  
                        writeRegisters@i 0026               __end_of_crcBufS_status_put 12D8  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 16FA  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
          updateComms@previousPowerState 003A                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 1B42  
