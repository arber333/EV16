

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu May 05 01:23:08 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  001346                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _Transmit_stall
    76  001346  01                 	db	1
    77                           
    78                           	psect	idataBANK0
    79  001338                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _ChargerData
    83  001338  4D                 	db	77
    84  001339  2C                 	db	44
    85  00133A  00                 	db	0
    86  00133B  2C                 	db	44
    87  00133C  00                 	db	0
    88  00133D  2C                 	db	44
    89  00133E  00                 	db	0
    90  00133F  2C                 	db	44
    91  001340  45                 	db	69
    92                           
    93                           	psect	mediumconst
    94  007E2C                     __pmediumconst:
    95                           	opt stack 0
    96  007E2C  00                 	db	0
    97  007E2D                     _FONTLOOKUP:
    98                           	opt stack 0
    99  007E2D  00                 	db	0
   100  007E2E  00                 	db	0
   101  007E2F  00                 	db	0
   102  007E30  00                 	db	0
   103  007E31  00                 	db	0
   104  007E32  00                 	db	0
   105  007E33  00                 	db	0
   106  007E34  2F                 	db	47
   107  007E35  00                 	db	0
   108  007E36  00                 	db	0
   109  007E37  00                 	db	0
   110  007E38  07                 	db	7
   111  007E39  00                 	db	0
   112  007E3A  07                 	db	7
   113  007E3B  00                 	db	0
   114  007E3C  14                 	db	20
   115  007E3D  7F                 	db	127
   116  007E3E  14                 	db	20
   117  007E3F  7F                 	db	127
   118  007E40  14                 	db	20
   119  007E41  24                 	db	36
   120  007E42  2A                 	db	42
   121  007E43  7F                 	db	127
   122  007E44  2A                 	db	42
   123  007E45  12                 	db	18
   124  007E46  C4                 	db	196
   125  007E47  C8                 	db	200
   126  007E48  10                 	db	16
   127  007E49  26                 	db	38
   128  007E4A  46                 	db	70
   129  007E4B  36                 	db	54
   130  007E4C  49                 	db	73
   131  007E4D  55                 	db	85
   132  007E4E  22                 	db	34
   133  007E4F  50                 	db	80
   134  007E50  00                 	db	0
   135  007E51  05                 	db	5
   136  007E52  03                 	db	3
   137  007E53  00                 	db	0
   138  007E54  00                 	db	0
   139  007E55  00                 	db	0
   140  007E56  1C                 	db	28
   141  007E57  22                 	db	34
   142  007E58  41                 	db	65
   143  007E59  00                 	db	0
   144  007E5A  00                 	db	0
   145  007E5B  41                 	db	65
   146  007E5C  22                 	db	34
   147  007E5D  1C                 	db	28
   148  007E5E  00                 	db	0
   149  007E5F  14                 	db	20
   150  007E60  08                 	db	8
   151  007E61  3E                 	db	62
   152  007E62  08                 	db	8
   153  007E63  14                 	db	20
   154  007E64  08                 	db	8
   155  007E65  08                 	db	8
   156  007E66  3E                 	db	62
   157  007E67  08                 	db	8
   158  007E68  08                 	db	8
   159  007E69  00                 	db	0
   160  007E6A  00                 	db	0
   161  007E6B  50                 	db	80
   162  007E6C  30                 	db	48
   163  007E6D  00                 	db	0
   164  007E6E  10                 	db	16
   165  007E6F  10                 	db	16
   166  007E70  10                 	db	16
   167  007E71  10                 	db	16
   168  007E72  10                 	db	16
   169  007E73  00                 	db	0
   170  007E74  60                 	db	96
   171  007E75  60                 	db	96
   172  007E76  00                 	db	0
   173  007E77  00                 	db	0
   174  007E78  20                 	db	32
   175  007E79  10                 	db	16
   176  007E7A  08                 	db	8
   177  007E7B  04                 	db	4
   178  007E7C  02                 	db	2
   179  007E7D  3E                 	db	62
   180  007E7E  51                 	db	81
   181  007E7F  49                 	db	73
   182  007E80  45                 	db	69
   183  007E81  3E                 	db	62
   184  007E82  00                 	db	0
   185  007E83  42                 	db	66
   186  007E84  7F                 	db	127
   187  007E85  40                 	db	64
   188  007E86  00                 	db	0
   189  007E87  42                 	db	66
   190  007E88  61                 	db	97
   191  007E89  51                 	db	81
   192  007E8A  49                 	db	73
   193  007E8B  46                 	db	70
   194  007E8C  21                 	db	33
   195  007E8D  41                 	db	65
   196  007E8E  45                 	db	69
   197  007E8F  4B                 	db	75
   198  007E90  31                 	db	49
   199  007E91  18                 	db	24
   200  007E92  14                 	db	20
   201  007E93  12                 	db	18
   202  007E94  7F                 	db	127
   203  007E95  10                 	db	16
   204  007E96  27                 	db	39
   205  007E97  45                 	db	69
   206  007E98  45                 	db	69
   207  007E99  45                 	db	69
   208  007E9A  39                 	db	57
   209  007E9B  3C                 	db	60
   210  007E9C  4A                 	db	74
   211  007E9D  49                 	db	73
   212  007E9E  49                 	db	73
   213  007E9F  30                 	db	48
   214  007EA0  01                 	db	1
   215  007EA1  71                 	db	113
   216  007EA2  09                 	db	9
   217  007EA3  05                 	db	5
   218  007EA4  03                 	db	3
   219  007EA5  36                 	db	54
   220  007EA6  49                 	db	73
   221  007EA7  49                 	db	73
   222  007EA8  49                 	db	73
   223  007EA9  36                 	db	54
   224  007EAA  06                 	db	6
   225  007EAB  49                 	db	73
   226  007EAC  49                 	db	73
   227  007EAD  29                 	db	41
   228  007EAE  1E                 	db	30
   229  007EAF  00                 	db	0
   230  007EB0  36                 	db	54
   231  007EB1  36                 	db	54
   232  007EB2  00                 	db	0
   233  007EB3  00                 	db	0
   234  007EB4  00                 	db	0
   235  007EB5  56                 	db	86
   236  007EB6  36                 	db	54
   237  007EB7  00                 	db	0
   238  007EB8  00                 	db	0
   239  007EB9  08                 	db	8
   240  007EBA  14                 	db	20
   241  007EBB  22                 	db	34
   242  007EBC  41                 	db	65
   243  007EBD  00                 	db	0
   244  007EBE  14                 	db	20
   245  007EBF  14                 	db	20
   246  007EC0  14                 	db	20
   247  007EC1  14                 	db	20
   248  007EC2  14                 	db	20
   249  007EC3  00                 	db	0
   250  007EC4  41                 	db	65
   251  007EC5  22                 	db	34
   252  007EC6  14                 	db	20
   253  007EC7  08                 	db	8
   254  007EC8  02                 	db	2
   255  007EC9  01                 	db	1
   256  007ECA  51                 	db	81
   257  007ECB  09                 	db	9
   258  007ECC  06                 	db	6
   259  007ECD  32                 	db	50
   260  007ECE  49                 	db	73
   261  007ECF  59                 	db	89
   262  007ED0  51                 	db	81
   263  007ED1  3E                 	db	62
   264  007ED2  7E                 	db	126
   265  007ED3  11                 	db	17
   266  007ED4  11                 	db	17
   267  007ED5  11                 	db	17
   268  007ED6  7E                 	db	126
   269  007ED7  7F                 	db	127
   270  007ED8  49                 	db	73
   271  007ED9  49                 	db	73
   272  007EDA  49                 	db	73
   273  007EDB  36                 	db	54
   274  007EDC  3E                 	db	62
   275  007EDD  41                 	db	65
   276  007EDE  41                 	db	65
   277  007EDF  41                 	db	65
   278  007EE0  22                 	db	34
   279  007EE1  7F                 	db	127
   280  007EE2  41                 	db	65
   281  007EE3  41                 	db	65
   282  007EE4  22                 	db	34
   283  007EE5  1C                 	db	28
   284  007EE6  7F                 	db	127
   285  007EE7  49                 	db	73
   286  007EE8  49                 	db	73
   287  007EE9  49                 	db	73
   288  007EEA  41                 	db	65
   289  007EEB  7F                 	db	127
   290  007EEC  09                 	db	9
   291  007EED  09                 	db	9
   292  007EEE  09                 	db	9
   293  007EEF  01                 	db	1
   294  007EF0  3E                 	db	62
   295  007EF1  41                 	db	65
   296  007EF2  49                 	db	73
   297  007EF3  49                 	db	73
   298  007EF4  7A                 	db	122
   299  007EF5  7F                 	db	127
   300  007EF6  08                 	db	8
   301  007EF7  08                 	db	8
   302  007EF8  08                 	db	8
   303  007EF9  7F                 	db	127
   304  007EFA  00                 	db	0
   305  007EFB  41                 	db	65
   306  007EFC  7F                 	db	127
   307  007EFD  41                 	db	65
   308  007EFE  00                 	db	0
   309  007EFF  20                 	db	32
   310  007F00  40                 	db	64
   311  007F01  41                 	db	65
   312  007F02  3F                 	db	63
   313  007F03  01                 	db	1
   314  007F04  7F                 	db	127
   315  007F05  08                 	db	8
   316  007F06  14                 	db	20
   317  007F07  22                 	db	34
   318  007F08  41                 	db	65
   319  007F09  7F                 	db	127
   320  007F0A  40                 	db	64
   321  007F0B  40                 	db	64
   322  007F0C  40                 	db	64
   323  007F0D  40                 	db	64
   324  007F0E  7F                 	db	127
   325  007F0F  02                 	db	2
   326  007F10  0C                 	db	12
   327  007F11  02                 	db	2
   328  007F12  7F                 	db	127
   329  007F13  7F                 	db	127
   330  007F14  04                 	db	4
   331  007F15  08                 	db	8
   332  007F16  10                 	db	16
   333  007F17  7F                 	db	127
   334  007F18  3E                 	db	62
   335  007F19  41                 	db	65
   336  007F1A  41                 	db	65
   337  007F1B  41                 	db	65
   338  007F1C  3E                 	db	62
   339  007F1D  7F                 	db	127
   340  007F1E  09                 	db	9
   341  007F1F  09                 	db	9
   342  007F20  09                 	db	9
   343  007F21  06                 	db	6
   344  007F22  3E                 	db	62
   345  007F23  41                 	db	65
   346  007F24  51                 	db	81
   347  007F25  21                 	db	33
   348  007F26  5E                 	db	94
   349  007F27  7F                 	db	127
   350  007F28  09                 	db	9
   351  007F29  19                 	db	25
   352  007F2A  29                 	db	41
   353  007F2B  46                 	db	70
   354  007F2C  46                 	db	70
   355  007F2D  49                 	db	73
   356  007F2E  49                 	db	73
   357  007F2F  49                 	db	73
   358  007F30  31                 	db	49
   359  007F31  01                 	db	1
   360  007F32  01                 	db	1
   361  007F33  7F                 	db	127
   362  007F34  01                 	db	1
   363  007F35  01                 	db	1
   364  007F36  3F                 	db	63
   365  007F37  40                 	db	64
   366  007F38  40                 	db	64
   367  007F39  40                 	db	64
   368  007F3A  3F                 	db	63
   369  007F3B  1F                 	db	31
   370  007F3C  20                 	db	32
   371  007F3D  40                 	db	64
   372  007F3E  20                 	db	32
   373  007F3F  1F                 	db	31
   374  007F40  3F                 	db	63
   375  007F41  40                 	db	64
   376  007F42  38                 	db	56
   377  007F43  40                 	db	64
   378  007F44  3F                 	db	63
   379  007F45  63                 	db	99
   380  007F46  14                 	db	20
   381  007F47  08                 	db	8
   382  007F48  14                 	db	20
   383  007F49  63                 	db	99
   384  007F4A  07                 	db	7
   385  007F4B  08                 	db	8
   386  007F4C  70                 	db	112
   387  007F4D  08                 	db	8
   388  007F4E  07                 	db	7
   389  007F4F  61                 	db	97
   390  007F50  51                 	db	81
   391  007F51  49                 	db	73
   392  007F52  45                 	db	69
   393  007F53  43                 	db	67
   394  007F54  00                 	db	0
   395  007F55  7F                 	db	127
   396  007F56  41                 	db	65
   397  007F57  41                 	db	65
   398  007F58  00                 	db	0
   399  007F59  55                 	db	85
   400  007F5A  2A                 	db	42
   401  007F5B  55                 	db	85
   402  007F5C  2A                 	db	42
   403  007F5D  55                 	db	85
   404  007F5E  00                 	db	0
   405  007F5F  41                 	db	65
   406  007F60  41                 	db	65
   407  007F61  7F                 	db	127
   408  007F62  00                 	db	0
   409  007F63  04                 	db	4
   410  007F64  02                 	db	2
   411  007F65  01                 	db	1
   412  007F66  02                 	db	2
   413  007F67  04                 	db	4
   414  007F68  40                 	db	64
   415  007F69  40                 	db	64
   416  007F6A  40                 	db	64
   417  007F6B  40                 	db	64
   418  007F6C  40                 	db	64
   419  007F6D  00                 	db	0
   420  007F6E  01                 	db	1
   421  007F6F  02                 	db	2
   422  007F70  04                 	db	4
   423  007F71  00                 	db	0
   424  007F72  20                 	db	32
   425  007F73  54                 	db	84
   426  007F74  54                 	db	84
   427  007F75  54                 	db	84
   428  007F76  78                 	db	120
   429  007F77  7F                 	db	127
   430  007F78  48                 	db	72
   431  007F79  44                 	db	68
   432  007F7A  44                 	db	68
   433  007F7B  38                 	db	56
   434  007F7C  38                 	db	56
   435  007F7D  44                 	db	68
   436  007F7E  44                 	db	68
   437  007F7F  44                 	db	68
   438  007F80  20                 	db	32
   439  007F81  38                 	db	56
   440  007F82  44                 	db	68
   441  007F83  44                 	db	68
   442  007F84  48                 	db	72
   443  007F85  7F                 	db	127
   444  007F86  38                 	db	56
   445  007F87  54                 	db	84
   446  007F88  54                 	db	84
   447  007F89  54                 	db	84
   448  007F8A  18                 	db	24
   449  007F8B  08                 	db	8
   450  007F8C  7E                 	db	126
   451  007F8D  09                 	db	9
   452  007F8E  01                 	db	1
   453  007F8F  02                 	db	2
   454  007F90  0C                 	db	12
   455  007F91  52                 	db	82
   456  007F92  52                 	db	82
   457  007F93  52                 	db	82
   458  007F94  3E                 	db	62
   459  007F95  7F                 	db	127
   460  007F96  08                 	db	8
   461  007F97  04                 	db	4
   462  007F98  04                 	db	4
   463  007F99  78                 	db	120
   464  007F9A  00                 	db	0
   465  007F9B  44                 	db	68
   466  007F9C  7D                 	db	125
   467  007F9D  40                 	db	64
   468  007F9E  00                 	db	0
   469  007F9F  20                 	db	32
   470  007FA0  40                 	db	64
   471  007FA1  44                 	db	68
   472  007FA2  3D                 	db	61
   473  007FA3  00                 	db	0
   474  007FA4  7F                 	db	127
   475  007FA5  10                 	db	16
   476  007FA6  28                 	db	40
   477  007FA7  44                 	db	68
   478  007FA8  00                 	db	0
   479  007FA9  00                 	db	0
   480  007FAA  41                 	db	65
   481  007FAB  7F                 	db	127
   482  007FAC  40                 	db	64
   483  007FAD  00                 	db	0
   484  007FAE  7C                 	db	124
   485  007FAF  04                 	db	4
   486  007FB0  18                 	db	24
   487  007FB1  04                 	db	4
   488  007FB2  78                 	db	120
   489  007FB3  7C                 	db	124
   490  007FB4  08                 	db	8
   491  007FB5  04                 	db	4
   492  007FB6  04                 	db	4
   493  007FB7  78                 	db	120
   494  007FB8  38                 	db	56
   495  007FB9  44                 	db	68
   496  007FBA  44                 	db	68
   497  007FBB  44                 	db	68
   498  007FBC  38                 	db	56
   499  007FBD  7C                 	db	124
   500  007FBE  14                 	db	20
   501  007FBF  14                 	db	20
   502  007FC0  14                 	db	20
   503  007FC1  08                 	db	8
   504  007FC2  08                 	db	8
   505  007FC3  14                 	db	20
   506  007FC4  14                 	db	20
   507  007FC5  18                 	db	24
   508  007FC6  7C                 	db	124
   509  007FC7  7C                 	db	124
   510  007FC8  08                 	db	8
   511  007FC9  04                 	db	4
   512  007FCA  04                 	db	4
   513  007FCB  08                 	db	8
   514  007FCC  48                 	db	72
   515  007FCD  54                 	db	84
   516  007FCE  54                 	db	84
   517  007FCF  54                 	db	84
   518  007FD0  20                 	db	32
   519  007FD1  04                 	db	4
   520  007FD2  3F                 	db	63
   521  007FD3  44                 	db	68
   522  007FD4  40                 	db	64
   523  007FD5  20                 	db	32
   524  007FD6  3C                 	db	60
   525  007FD7  40                 	db	64
   526  007FD8  40                 	db	64
   527  007FD9  20                 	db	32
   528  007FDA  7C                 	db	124
   529  007FDB  1C                 	db	28
   530  007FDC  20                 	db	32
   531  007FDD  40                 	db	64
   532  007FDE  20                 	db	32
   533  007FDF  1C                 	db	28
   534  007FE0  3C                 	db	60
   535  007FE1  40                 	db	64
   536  007FE2  30                 	db	48
   537  007FE3  40                 	db	64
   538  007FE4  3C                 	db	60
   539  007FE5  44                 	db	68
   540  007FE6  28                 	db	40
   541  007FE7  10                 	db	16
   542  007FE8  28                 	db	40
   543  007FE9  44                 	db	68
   544  007FEA  0C                 	db	12
   545  007FEB  50                 	db	80
   546  007FEC  50                 	db	80
   547  007FED  50                 	db	80
   548  007FEE  3C                 	db	60
   549  007FEF  44                 	db	68
   550  007FF0  64                 	db	100
   551  007FF1  54                 	db	84
   552  007FF2  4C                 	db	76
   553  007FF3  44                 	db	68
   554  007FF4                     __end_of_FONTLOOKUP:
   555                           	opt stack 0
   556  007FF4                     STR_3:
   557  007FF4  28                 	db	40
   558  007FF5  6E                 	db	110	;'n'
   559  007FF6  75                 	db	117	;'u'
   560  007FF7  6C                 	db	108	;'l'
   561  007FF8  6C                 	db	108	;'l'
   562  007FF9  29                 	db	41
   563  007FFA  00                 	db	0
   564  007FFB                     STR_1:
   565  007FFB  25                 	db	37
   566  007FFC  73                 	db	115	;'s'
   567  007FFD  00                 	db	0
   568  0000                     
   569                           ; #config settings
   570  007FFE  00                 	db	0	; dummy byte at the end
   571  0000                     
   572                           	psect	nvCOMRAM
   573  000041                     __pnvCOMRAM:
   574                           	opt stack 0
   575  000041                     _timer0ReloadVal16bit:
   576                           	opt stack 0
   577  000041                     	ds	2
   578  000043                     _eusart2TxBufferRemaining:
   579                           	opt stack 0
   580  000043                     	ds	1
   581  0000                     _ANSELA	set	3896
   582  0000                     _ANSELB	set	3897
   583  0000                     _ANSELC	set	3898
   584  0000                     _ANSELD	set	3899
   585  0000                     _ANSELE	set	3900
   586  0000                     _BAUD1CON	set	4024
   587  0000                     _BAUD2CON	set	3952
   588  0000                     _INTCON2bits	set	4081
   589  0000                     _INTCONbits	set	4082
   590  0000                     _IPR1bits	set	3999
   591  0000                     _IPR3bits	set	4005
   592  0000                     _LATA	set	3977
   593  0000                     _LATB	set	3978
   594  0000                     _LATBbits	set	3978
   595  0000                     _LATC	set	3979
   596  0000                     _LATCbits	set	3979
   597  0000                     _LATD	set	3980
   598  0000                     _LATE	set	3981
   599  0000                     _OSCCON	set	4051
   600  0000                     _OSCCON2	set	4050
   601  0000                     _OSCTUNE	set	3995
   602  0000                     _PIE1bits	set	3997
   603  0000                     _PIE3bits	set	4003
   604  0000                     _PIR1bits	set	3998
   605  0000                     _PIR3bits	set	4004
   606  0000                     _RC1STA	set	4011
   607  0000                     _RC1STAbits	set	4011
   608  0000                     _RC2STA	set	3953
   609  0000                     _RC2STAbits	set	3953
   610  0000                     _RCONbits	set	4048
   611  0000                     _RCREG1	set	4014
   612  0000                     _RCREG2	set	3956
   613  0000                     _SPBRG1	set	4015
   614  0000                     _SPBRG2	set	3957
   615  0000                     _SPBRGH1	set	4016
   616  0000                     _SPBRGH2	set	3958
   617  0000                     _SSP1ADD	set	4040
   618  0000                     _SSP1BUF	set	4041
   619  0000                     _SSP1CON1	set	4038
   620  0000                     _SSP1CON1bits	set	4038
   621  0000                     _SSP1STAT	set	4039
   622  0000                     _SSP1STATbits	set	4039
   623  0000                     _T0CON	set	4053
   624  0000                     _T0CONbits	set	4053
   625  0000                     _TMR0H	set	4055
   626  0000                     _TMR0L	set	4054
   627  0000                     _TRISA	set	3986
   628  0000                     _TRISB	set	3987
   629  0000                     _TRISBbits	set	3987
   630  0000                     _TRISC	set	3988
   631  0000                     _TRISD	set	3989
   632  0000                     _TRISE	set	3990
   633  0000                     _TX1STA	set	4012
   634  0000                     _TX2STA	set	3954
   635  0000                     _TXREG1	set	4013
   636  0000                     _TXREG2	set	3955
   637  0000                     _WPUB	set	3937
   638  0000                     _LATA3	set	31819
   639  0000                     _LATA6	set	31822
   640  0000                     _LATB0	set	31824
   641  0000                     _LATB1	set	31825
   642  0000                     _LATB3	set	31827
   643  0000                     _LATB4	set	31828
   644  0000                     _LATB5	set	31829
   645  0000                     _LATC0	set	31832
   646  0000                     _LATC1	set	31833
   647  0000                     _LATD0	set	31840
   648  0000                     _LATD3	set	31843
   649  0000                     _TRISA3	set	31891
   650  0000                     _TRISD0	set	31912
   651  0000                     _TRISD2	set	31914
   652  0000                     _TRISD3	set	31915
   653                           
   654                           	psect	cinit
   655  000CE0                     __pcinit:
   656                           	opt stack 0
   657  000CE0                     start_initialization:
   658                           	opt stack 0
   659  000CE0                     __initialization:
   660                           	opt stack 0
   661                           
   662                           ; Clear objects allocated to BANK4 (200 bytes)
   663  000CE0  EE04  F000         	lfsr	0,__pbssBANK4
   664  000CE4  0EC8               	movlw	200
   665  000CE6                     clear_0:
   666  000CE6  6AEE               	clrf	postinc0,c
   667  000CE8  06E8               	decf	wreg,f,c
   668  000CEA  E1FD               	bnz	clear_0
   669                           
   670                           ; Clear objects allocated to BANK3 (206 bytes)
   671  000CEC  EE03  F000         	lfsr	0,__pbssBANK3
   672  000CF0  0ECE               	movlw	206
   673  000CF2                     clear_1:
   674  000CF2  6AEE               	clrf	postinc0,c
   675  000CF4  06E8               	decf	wreg,f,c
   676  000CF6  E1FD               	bnz	clear_1
   677                           
   678                           ; Clear objects allocated to BANK2 (206 bytes)
   679  000CF8  EE02  F000         	lfsr	0,__pbssBANK2
   680  000CFC  0ECE               	movlw	206
   681  000CFE                     clear_2:
   682  000CFE  6AEE               	clrf	postinc0,c
   683  000D00  06E8               	decf	wreg,f,c
   684  000D02  E1FD               	bnz	clear_2
   685                           
   686                           ; Clear objects allocated to BANK1 (206 bytes)
   687  000D04  EE01  F000         	lfsr	0,__pbssBANK1
   688  000D08  0ECE               	movlw	206
   689  000D0A                     clear_3:
   690  000D0A  6AEE               	clrf	postinc0,c
   691  000D0C  06E8               	decf	wreg,f,c
   692  000D0E  E1FD               	bnz	clear_3
   693                           
   694                           ; Clear objects allocated to BANK0 (96 bytes)
   695  000D10  EE00  F060         	lfsr	0,__pbssBANK0
   696  000D14  0E60               	movlw	96
   697  000D16                     clear_4:
   698  000D16  6AEE               	clrf	postinc0,c
   699  000D18  06E8               	decf	wreg,f,c
   700  000D1A  E1FD               	bnz	clear_4
   701                           
   702                           ; Clear objects allocated to COMRAM (26 bytes)
   703  000D1C  EE00  F027         	lfsr	0,__pbssCOMRAM
   704  000D20  0E1A               	movlw	26
   705  000D22                     clear_5:
   706  000D22  6AEE               	clrf	postinc0,c
   707  000D24  06E8               	decf	wreg,f,c
   708  000D26  E1FD               	bnz	clear_5
   709                           
   710                           ; Initialize objects allocated to BANK0 (9 bytes)
   711                           ; load TBLPTR registers with __pidataBANK0
   712  000D28  0E38               	movlw	low __pidataBANK0
   713  000D2A  6EF6               	movwf	tblptrl,c
   714  000D2C  0E13               	movlw	high __pidataBANK0
   715  000D2E  6EF7               	movwf	tblptrh,c
   716  000D30  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   717  000D32  6EF8               	movwf	tblptru,c
   718  000D34  EE00  F0D9         	lfsr	0,__pdataBANK0
   719  000D38  EE10 F009          	lfsr	1,9
   720  000D3C                     copy_data0:
   721  000D3C  0009               	tblrd		*+
   722  000D3E  CFF5 FFEE          	movff	tablat,postinc0
   723  000D42  50E5               	movf	postdec1,w,c
   724  000D44  50E1               	movf	fsr1l,w,c
   725  000D46  E1FA               	bnz	copy_data0
   726                           
   727                           ; Initialize objects allocated to COMRAM (1 bytes)
   728                           ; load TBLPTR registers with __pidataCOMRAM
   729  000D48  0E46               	movlw	low __pidataCOMRAM
   730  000D4A  6EF6               	movwf	tblptrl,c
   731  000D4C  0E13               	movlw	high __pidataCOMRAM
   732  000D4E  6EF7               	movwf	tblptrh,c
   733  000D50  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   734  000D52  6EF8               	movwf	tblptru,c
   735  000D54  0009               	tblrd		*+	;fetch initializer
   736  000D56  CFF5 F044          	movff	tablat,__pdataCOMRAM
   737  000D5A                     end_of_initialization:
   738                           	opt stack 0
   739  000D5A                     __end_of__initialization:
   740                           	opt stack 0
   741  000D5A  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   742  000D5C  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   743  000D5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   744  000D60  6EF8               	movwf	tblptru,c
   745  000D62  0100               	movlb	0
   746  000D64  EFA3  F004         	goto	_main	;jump to C main() function
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           postdec1	equ	0xFE5
   754                           fsr1l	equ	0xFE1
   755                           
   756                           	psect	bssCOMRAM
   757  000027                     __pbssCOMRAM:
   758                           	opt stack 0
   759  000027                     _Start:
   760                           	opt stack 0
   761  000027                     	ds	2
   762  000029                     _group:
   763                           	opt stack 0
   764  000029                     	ds	2
   765  00002B                     _receiveArrayAddress:
   766                           	opt stack 0
   767  00002B                     	ds	2
   768  00002D                     _sendStructAddress:
   769                           	opt stack 0
   770  00002D                     	ds	2
   771  00002F                     _serial_read:
   772                           	opt stack 0
   773  00002F                     	ds	2
   774  000031                     _serial_write:
   775                           	opt stack 0
   776  000031                     	ds	2
   777  000033                     _AKNAKsend:
   778                           	opt stack 0
   779  000033                     	ds	1
   780  000034                     _calc_CS:
   781                           	opt stack 0
   782  000034                     	ds	1
   783  000035                     _eusart2RxCount:
   784                           	opt stack 0
   785  000035                     	ds	1
   786  000036                     _eusart2RxHead:
   787                           	opt stack 0
   788  000036                     	ds	1
   789  000037                     _eusart2RxTail:
   790                           	opt stack 0
   791  000037                     	ds	1
   792  000038                     _eusart2TxHead:
   793                           	opt stack 0
   794  000038                     	ds	1
   795  000039                     _eusart2TxTail:
   796                           	opt stack 0
   797  000039                     	ds	1
   798  00003A                     _i:
   799                           	opt stack 0
   800  00003A                     	ds	1
   801  00003B                     _maxDataAddress:
   802                           	opt stack 0
   803  00003B                     	ds	1
   804  00003C                     _moduleAddress:
   805                           	opt stack 0
   806  00003C                     	ds	1
   807  00003D                     _returnAddress:
   808                           	opt stack 0
   809  00003D                     	ds	1
   810  00003E                     _rx_address:
   811                           	opt stack 0
   812  00003E                     	ds	1
   813  00003F                     _rx_array_inx:
   814                           	opt stack 0
   815  00003F                     	ds	1
   816  000040                     _rx_len:
   817                           	opt stack 0
   818  000040                     	ds	1
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           
   828                           	psect	dataCOMRAM
   829  000044                     __pdataCOMRAM:
   830                           	opt stack 0
   831  000044                     _Transmit_stall:
   832                           	opt stack 0
   833  000044                     	ds	1
   834                           tblptru	equ	0xFF8
   835                           tblptrh	equ	0xFF7
   836                           tblptrl	equ	0xFF6
   837                           tablat	equ	0xFF5
   838                           postinc0	equ	0xFEE
   839                           wreg	equ	0xFE8
   840                           postdec1	equ	0xFE5
   841                           fsr1l	equ	0xFE1
   842                           
   843                           	psect	bssBANK0
   844  000060                     __pbssBANK0:
   845                           	opt stack 0
   846  000060                     _receiveArray:
   847                           	opt stack 0
   848  000060                     	ds	40
   849  000088                     _eusart2RxBuffer:
   850                           	opt stack 0
   851  000088                     	ds	8
   852  000090                     _eusart2TxBuffer:
   853                           	opt stack 0
   854  000090                     	ds	8
   855  000098                     _addressErrorCounter:
   856                           	opt stack 0
   857  000098                     	ds	2
   858  00009A                     _alignErrorCounter:
   859                           	opt stack 0
   860  00009A                     	ds	2
   861  00009C                     _crcErrorCounter:
   862                           	opt stack 0
   863  00009C                     	ds	2
   864  00009E                     _dataAdressErrorCounter:
   865                           	opt stack 0
   866  00009E                     	ds	2
   867  0000A0                     _serial_available:
   868                           	opt stack 0
   869  0000A0                     	ds	2
   870  0000A2                     _serial_peek:
   871                           	opt stack 0
   872  0000A2                     	ds	2
   873  0000A4                     _crc_buffer:
   874                           	opt stack 0
   875  0000A4                     	ds	17
   876  0000B5                     _ddata:
   877                           	opt stack 0
   878  0000B5                     	ds	11
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           postdec1	equ	0xFE5
   886                           fsr1l	equ	0xFE1
   887                           
   888                           	psect	dataBANK0
   889  0000D9                     __pdataBANK0:
   890                           	opt stack 0
   891  0000D9                     _ChargerData:
   892                           	opt stack 0
   893  0000D9                     	ds	9
   894                           tblptru	equ	0xFF8
   895                           tblptrh	equ	0xFF7
   896                           tblptrl	equ	0xFF6
   897                           tablat	equ	0xFF5
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           postdec1	equ	0xFE5
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	bssBANK1
   904  000100                     __pbssBANK1:
   905                           	opt stack 0
   906  000100                     _ring_buffer:
   907                           	opt stack 0
   908  000100                     	ds	206
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1l	equ	0xFE1
   917                           
   918                           	psect	bssBANK2
   919  000200                     __pbssBANK2:
   920                           	opt stack 0
   921  000200                     _input_buffer:
   922                           	opt stack 0
   923  000200                     	ds	206
   924                           tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           postdec1	equ	0xFE5
   931                           fsr1l	equ	0xFE1
   932                           
   933                           	psect	bssBANK3
   934  000300                     __pbssBANK3:
   935                           	opt stack 0
   936  000300                     _output_buffer:
   937                           	opt stack 0
   938  000300                     	ds	206
   939                           tblptru	equ	0xFF8
   940                           tblptrh	equ	0xFF7
   941                           tblptrl	equ	0xFF6
   942                           tablat	equ	0xFF5
   943                           postinc0	equ	0xFEE
   944                           wreg	equ	0xFE8
   945                           postdec1	equ	0xFE5
   946                           fsr1l	equ	0xFE1
   947                           
   948                           	psect	bssBANK4
   949  000400                     __pbssBANK4:
   950                           	opt stack 0
   951  000400                     _rx_buffer:
   952                           	opt stack 0
   953  000400                     	ds	200
   954                           tblptru	equ	0xFF8
   955                           tblptrh	equ	0xFF7
   956                           tblptrl	equ	0xFF6
   957                           tablat	equ	0xFF5
   958                           postinc0	equ	0xFEE
   959                           wreg	equ	0xFE8
   960                           postdec1	equ	0xFE5
   961                           fsr1l	equ	0xFE1
   962                           
   963                           	psect	cstackBANK0
   964  0000C0                     __pcstackBANK0:
   965                           	opt stack 0
   966  0000C0                     ??_NokiaStr:
   967  0000C0                     ??_sendData:
   968  0000C0                     ??_FastTransfer_buffer_put:
   969  0000C0                     CRCcheck@SentCRC:
   970                           	opt stack 0
   971  0000C0                     Precharge@OnOff:
   972                           	opt stack 0
   973  0000C0                     SetCharger@Current:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x0
   977  0000C0                     	ds	1
   978  0000C1                     sendData@whereToSend:
   979                           	opt stack 0
   980  0000C1                     CRCcheck@calculatedCRC:
   981                           	opt stack 0
   982  0000C1                     SetCharger@Voltage:
   983                           	opt stack 0
   984  0000C1                     Precharge@i:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0x1
   988  0000C1                     	ds	1
   989  0000C2                     sendData@CS:
   990                           	opt stack 0
   991  0000C2                     SetCharger@mode:
   992                           	opt stack 0
   993  0000C2                     ToSend@what:
   994                           	opt stack 0
   995  0000C2                     CRCcheck@arrayHolder:
   996                           	opt stack 0
   997                           
   998                           ; 3 bytes @ 0x2
   999  0000C2                     	ds	1
  1000  0000C3                     sendData@i:
  1001                           	opt stack 0
  1002  0000C3                     Precharge@i_1701:
  1003                           	opt stack 0
  1004  0000C3                     NokiaStr@i:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x3
  1008  0000C3                     	ds	2
  1009  0000C5                     CRCcheck@rt:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x5
  1013  0000C5                     	ds	2
  1014  0000C7                     ??_receiveData:
  1015                           
  1016                           ; 1 bytes @ 0x7
  1017  0000C7                     	ds	6
  1018  0000CD                     receiveData@crcHolder:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0xD
  1022  0000CD                     	ds	1
  1023  0000CE                     receiveData@crcHolder_1422:
  1024                           	opt stack 0
  1025                           
  1026                           ; 1 bytes @ 0xE
  1027  0000CE                     	ds	1
  1028  0000CF                     receiveData@holder:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0xF
  1032  0000CF                     	ds	3
  1033  0000D2                     receiveData@holder_1421:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x12
  1037  0000D2                     	ds	3
  1038  0000D5                     receiveData@u:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x15
  1042  0000D5                     	ds	2
  1043  0000D7                     receiveData@r:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x17
  1047  0000D7                     	ds	2
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           
  1057                           	psect	cstackCOMRAM
  1058  000001                     __pcstackCOMRAM:
  1059                           	opt stack 0
  1060  000001                     ?_UART_buff_modulo_inc:
  1061                           	opt stack 0
  1062  000001                     ?_UART_buff_size:
  1063                           	opt stack 0
  1064  000001                     UART_buff_size@_this:
  1065                           	opt stack 0
  1066  000001                     UART_buff_modulo_inc@value:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x0
  1070  000001                     	ds	2
  1071  000003                     UART_buff_modulo_inc@modulus:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x2
  1075  000003                     	ds	2
  1076  000005                     UART_buff_modulo_inc@my_value:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x4
  1080  000005                     	ds	2
  1081  000007                     UART_buff_put@_this:
  1082                           	opt stack 0
  1083  000007                     UART_buff_get@_this:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x6
  1087  000007                     	ds	2
  1088  000009                     ??_UART_buff_get:
  1089  000009                     UART_buff_put@c:
  1090                           	opt stack 0
  1091                           
  1092                           ; 1 bytes @ 0x8
  1093  000009                     	ds	1
  1094  00000A                     ??_UART_buff_put:
  1095                           
  1096                           ; 1 bytes @ 0x9
  1097  00000A                     	ds	1
  1098  00000B                     UART_buff_get@c:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0xA
  1102  00000B                     	ds	1
  1103  00000C                     EUSART1_Receive_ISR@data:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0xB
  1107  00000C                     	ds	1
  1108  00000D                     ??_INTERRUPT_InterruptManager:
  1109                           
  1110                           ; 1 bytes @ 0xC
  1111  00000D                     	ds	14
  1112  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1113                           	opt stack 0
  1114  00001B                     ?___wmul:
  1115                           	opt stack 0
  1116  00001B                     EUSART2_Write@txData:
  1117                           	opt stack 0
  1118  00001B                     SPI1_Exchange8bit@data:
  1119                           	opt stack 0
  1120  00001B                     SetMux@channel:
  1121                           	opt stack 0
  1122  00001B                     CRC8@data:
  1123                           	opt stack 0
  1124  00001B                     FastTransfer_buffer_modulo_inc@value:
  1125                           	opt stack 0
  1126  00001B                     crcBufS_put@_this:
  1127                           	opt stack 0
  1128  00001B                     crcBufS_status_put@_this:
  1129                           	opt stack 0
  1130  00001B                     crcBufS_get@_this:
  1131                           	opt stack 0
  1132  00001B                     ___wmul@multiplier:
  1133                           	opt stack 0
  1134  00001B                     memset@p1:
  1135                           	opt stack 0
  1136  00001B                     Delay@wait:
  1137                           	opt stack 0
  1138                           
  1139                           ; 4 bytes @ 0x1A
  1140  00001B                     	ds	1
  1141  00001C                     putch@txData:
  1142                           	opt stack 0
  1143                           
  1144                           ; 1 bytes @ 0x1B
  1145  00001C                     	ds	1
  1146  00001D                     ?_printf:
  1147                           	opt stack 0
  1148  00001D                     CRC8@len:
  1149                           	opt stack 0
  1150  00001D                     crcBufS_put@address:
  1151                           	opt stack 0
  1152  00001D                     crcBufS_status_put@time:
  1153                           	opt stack 0
  1154  00001D                     crcBufS_get@time:
  1155                           	opt stack 0
  1156  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1157                           	opt stack 0
  1158  00001D                     printf@f:
  1159                           	opt stack 0
  1160  00001D                     ___wmul@multiplicand:
  1161                           	opt stack 0
  1162  00001D                     memset@c:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x1C
  1166  00001D                     	ds	1
  1167  00001E                     CRC8@sum:
  1168                           	opt stack 0
  1169  00001E                     crcBufS_put@oldCRC:
  1170                           	opt stack 0
  1171  00001E                     crcBufS_status_put@status:
  1172                           	opt stack 0
  1173  00001E                     crcBufS_get@space:
  1174                           	opt stack 0
  1175                           
  1176                           ; 1 bytes @ 0x1D
  1177  00001E                     	ds	1
  1178  00001F                     ??_Delay:
  1179  00001F                     ??_crcBufS_get:
  1180  00001F                     ??_crcBufS_status_put:
  1181  00001F                     CRC8@extract:
  1182                           	opt stack 0
  1183  00001F                     crcBufS_put@status:
  1184                           	opt stack 0
  1185  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1186                           	opt stack 0
  1187  00001F                     ___wmul@product:
  1188                           	opt stack 0
  1189  00001F                     memset@n:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x1E
  1193  00001F                     	ds	1
  1194  000020                     ??_crcBufS_put:
  1195  000020                     CRC8@tempI:
  1196                           	opt stack 0
  1197  000020                     Delay@i:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x1F
  1201  000020                     	ds	1
  1202  000021                     CRC8@crc:
  1203                           	opt stack 0
  1204  000021                     LCDwrite@data:
  1205                           	opt stack 0
  1206  000021                     printf@flag:
  1207                           	opt stack 0
  1208  000021                     FastTransfer_buffer_put@_this:
  1209                           	opt stack 0
  1210  000021                     memset@p:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x20
  1214  000021                     	ds	1
  1215  000022                     LCDwrite@mode:
  1216                           	opt stack 0
  1217  000022                     printf@ap:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x21
  1221  000022                     	ds	1
  1222  000023                     FastTransfer_buffer_put@towhere:
  1223                           	opt stack 0
  1224  000023                     gotoXy@y:
  1225                           	opt stack 0
  1226  000023                     FastTransfer_buffer_flush@_this:
  1227                           	opt stack 0
  1228  000023                     crcBufS_status_put@wantedTime:
  1229                           	opt stack 0
  1230  000023                     clearLcd@res:
  1231                           	opt stack 0
  1232  000023                     blackLcd@res:
  1233                           	opt stack 0
  1234  000023                     NokiaStr@str:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x22
  1238  000023                     	ds	1
  1239  000024                     gotoXy@x:
  1240                           	opt stack 0
  1241  000024                     printf@c:
  1242                           	opt stack 0
  1243  000024                     FastTransfer_buffer_put@towhat:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x23
  1247  000024                     	ds	1
  1248  000025                     NokiaStr@len:
  1249                           	opt stack 0
  1250  000025                     FastTransfer_buffer_flush@clearBuffer:
  1251                           	opt stack 0
  1252  000025                     crcBufS_get@wantedTime:
  1253                           	opt stack 0
  1254  000025                     printf@cp:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x24
  1258  000025                     	ds	1
  1259  000026                     ToSend@where:
  1260                           	opt stack 0
  1261                           
  1262                           ; 1 bytes @ 0x25
  1263  000026                     	ds	1
  1264  000027                     tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postdec1	equ	0xFE5
  1271                           fsr1l	equ	0xFE1
  1272                           
  1273                           ; 1 bytes @ 0x26
  1274 ;;
  1275 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1276 ;;
  1277 ;; *************** function _main *****************
  1278 ;; Defined at:
  1279 ;;		line 16 in file "main.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      void 
  1286 ;; Registers used:
  1287 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1293 ;;      Params:         0       0       0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0       0       0
  1296 ;;      Totals:         0       0       0       0       0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels required when called:    9
  1299 ;; This function calls:
  1300 ;;		_Delay
  1301 ;;		_NokiaStart
  1302 ;;		_NokiaStr
  1303 ;;		_SYSTEM_Initialize
  1304 ;;		_gotoXy
  1305 ;;		_respondECU
  1306 ;;		_updateComms
  1307 ;; This function is called by:
  1308 ;;		Startup code after reset
  1309 ;; This function uses a non-reentrant model
  1310 ;;
  1311                           
  1312                           	psect	text0
  1313  000946                     __ptext0:
  1314                           	opt stack 0
  1315  000946                     _main:
  1316                           	opt stack 22
  1317                           
  1318                           ;main.c: 18: SYSTEM_Initialize();
  1319                           
  1320                           ;incstack = 0
  1321  000946  EC65  F009         	call	_SYSTEM_Initialize	;wreg free
  1322                           
  1323                           ;main.c: 37: (INTCONbits.GIE = 1);
  1324  00094A  8EF2               	bsf	intcon,7,c	;volatile
  1325                           
  1326                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1327  00094C  8CF2               	bsf	intcon,6,c	;volatile
  1328                           
  1329                           ;main.c: 47: NokiaStart();
  1330  00094E  EC2A  F006         	call	_NokiaStart	;wreg free
  1331                           
  1332                           ;main.c: 48: do { TRISA3 = 0; } while(0);
  1333  000952  9692               	bcf	3986,3,c	;volatile
  1334  000954  D046               	goto	u2761
  1335  000956                     l3600:
  1336                           
  1337                           ;main.c: 52: Delay(1000);
  1338  000956  0EE8               	movlw	232
  1339  000958  6E1B               	movwf	Delay@wait,c
  1340  00095A  0E03               	movlw	3
  1341  00095C  6E1C               	movwf	Delay@wait+1,c
  1342  00095E  0E00               	movlw	0
  1343  000960  6E1D               	movwf	Delay@wait+2,c
  1344  000962  0E00               	movlw	0
  1345  000964  6E1E               	movwf	Delay@wait+3,c
  1346  000966  ECA9  F007         	call	_Delay	;wreg free
  1347                           
  1348                           ;main.c: 54: ddata[0]='T';
  1349  00096A  0E54               	movlw	84
  1350  00096C  0100               	movlb	0	; () banked
  1351  00096E  6FB5               	movwf	_ddata& (0+255),b
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 55: ddata[1]='E';
  1355  000970  0E45               	movlw	69
  1356  000972  0100               	movlb	0	; () banked
  1357  000974  6FB6               	movwf	(_ddata+1)& (0+255),b
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 56: ddata[2]='S';
  1361  000976  0E53               	movlw	83
  1362  000978  0100               	movlb	0	; () banked
  1363  00097A  6FB7               	movwf	(_ddata+2)& (0+255),b
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 57: ddata[3]='T';
  1367  00097C  0E54               	movlw	84
  1368  00097E  0100               	movlb	0	; () banked
  1369  000980  6FB8               	movwf	(_ddata+3)& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 58: ddata[4]=' ';
  1373  000982  0E20               	movlw	32
  1374  000984  0100               	movlb	0	; () banked
  1375  000986  6FB9               	movwf	(_ddata+4)& (0+255),b
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 59: ddata[5]='L';
  1379  000988  0E4C               	movlw	76
  1380  00098A  0100               	movlb	0	; () banked
  1381  00098C  6FBA               	movwf	(_ddata+5)& (0+255),b
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 60: ddata[6]='C';
  1385  00098E  0E43               	movlw	67
  1386  000990  0100               	movlb	0	; () banked
  1387  000992  6FBB               	movwf	(_ddata+6)& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 61: ddata[7]='D';
  1391  000994  0E44               	movlw	68
  1392  000996  0100               	movlb	0	; () banked
  1393  000998  6FBC               	movwf	(_ddata+7)& (0+255),b
  1394                           
  1395                           ; BSR set to: 0
  1396                           ;main.c: 62: ddata[8]=' ';
  1397  00099A  0E20               	movlw	32
  1398  00099C  0100               	movlb	0	; () banked
  1399  00099E  6FBD               	movwf	(_ddata+8)& (0+255),b
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;main.c: 63: ddata[9]=i;
  1403  0009A0  C03A  F0BE         	movff	_i,_ddata+9
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;main.c: 64: i++;
  1407  0009A4  2A3A               	incf	_i,f,c
  1408                           
  1409                           ; BSR set to: 0
  1410                           ;main.c: 65: gotoXy(2,2);
  1411  0009A6  0E02               	movlw	2
  1412  0009A8  6E23               	movwf	gotoXy@y,c
  1413  0009AA  0E02               	movlw	2
  1414  0009AC  ECCD  F008         	call	_gotoXy
  1415                           
  1416                           ;main.c: 66: NokiaStr(ddata,10);
  1417  0009B0  0EB5               	movlw	low _ddata
  1418  0009B2  6E23               	movwf	NokiaStr@str,c
  1419  0009B4  0E00               	movlw	high _ddata
  1420  0009B6  6E24               	movwf	NokiaStr@str+1,c
  1421  0009B8  0E0A               	movlw	10
  1422  0009BA  6E25               	movwf	NokiaStr@len,c
  1423  0009BC  ECF5  F004         	call	_NokiaStr	;wreg free
  1424                           
  1425                           ;main.c: 68: do { LATA6 = ~LATA6; } while(0);
  1426  0009C0  BC89               	btfsc	3977,6,c	;volatile
  1427  0009C2  D002               	goto	u2700
  1428  0009C4  8C89               	bsf	3977,6,c	;volatile
  1429  0009C6  D001               	goto	l3630
  1430  0009C8                     u2700:
  1431  0009C8  9C89               	bcf	3977,6,c	;volatile
  1432  0009CA                     l3630:
  1433  0009CA  B08B               	btfsc	3979,0,c	;volatile
  1434  0009CC  D002               	goto	u2720
  1435  0009CE  808B               	bsf	3979,0,c	;volatile
  1436  0009D0  D001               	goto	l3632
  1437  0009D2                     u2720:
  1438  0009D2  908B               	bcf	3979,0,c	;volatile
  1439  0009D4                     l3632:
  1440  0009D4  B28B               	btfsc	3979,1,c	;volatile
  1441  0009D6  D002               	goto	u2740
  1442  0009D8  828B               	bsf	3979,1,c	;volatile
  1443  0009DA  D001               	goto	l3634
  1444  0009DC                     u2740:
  1445  0009DC  928B               	bcf	3979,1,c	;volatile
  1446  0009DE                     l3634:
  1447  0009DE  B689               	btfsc	3977,3,c	;volatile
  1448  0009E0  D002               	goto	u2760
  1449  0009E2                     u2761:
  1450  0009E2  8689               	bsf	3977,3,c	;volatile
  1451  0009E4  D7B8               	goto	l3600
  1452  0009E6                     u2760:
  1453  0009E6  9689               	bcf	3977,3,c	;volatile
  1454  0009E8  D7B6               	goto	l3600
  1455  0009EA                     __end_of_main:
  1456                           	opt stack 0
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           intcon	equ	0xFF2
  1462                           postinc0	equ	0xFEE
  1463                           wreg	equ	0xFE8
  1464                           postdec1	equ	0xFE5
  1465                           fsr1l	equ	0xFE1
  1466                           
  1467 ;; *************** function _updateComms *****************
  1468 ;; Defined at:
  1469 ;;		line 14 in file "Communications.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1483 ;;      Params:         0       0       0       0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0
  1485 ;;      Temps:          0       0       0       0       0       0       0
  1486 ;;      Totals:         0       0       0       0       0       0       0
  1487 ;;Total ram usage:        0 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    8
  1490 ;; This function calls:
  1491 ;;		_Precharge
  1492 ;;		_SetCharger
  1493 ;;		_receiveData
  1494 ;;		_respondECU
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           	psect	text1
  1501  001212                     __ptext1:
  1502                           	opt stack 0
  1503  001212                     _updateComms:
  1504                           	opt stack 22
  1505                           
  1506                           ;Communications.c: 15: if (receiveData()) {
  1507                           
  1508                           ;incstack = 0
  1509  001212  EC58  F000         	call	_receiveData	;wreg free
  1510  001216  0900               	iorlw	0
  1511  001218  B4D8               	btfsc	status,2,c
  1512  00121A  0012               	return	
  1513                           
  1514                           ;Communications.c: 16: Precharge(receiveArray[1]);
  1515  00121C  0100               	movlb	0	; () banked
  1516  00121E  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1517  001220  EC47  F005         	call	_Precharge
  1518                           
  1519                           ;Communications.c: 17: SetCharger(1, receiveArray[2], receiveArray[3]);
  1520  001224  C064  F0C0         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1521  001228  C066  F0C1         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1522  00122C  0E01               	movlw	1
  1523  00122E  ECF0  F006         	call	_SetCharger
  1524                           
  1525                           ;Communications.c: 18: respondECU();
  1526  001232  EC57  F007         	call	_respondECU	;wreg free
  1527  001236  0012               	return	
  1528  001238                     __end_of_updateComms:
  1529                           	opt stack 0
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           intcon	equ	0xFF2
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postdec1	equ	0xFE5
  1538                           fsr1l	equ	0xFE1
  1539                           status	equ	0xFD8
  1540                           
  1541 ;; *************** function _respondECU *****************
  1542 ;; Defined at:
  1543 ;;		line 33 in file "Communications.c"
  1544 ;; Parameters:    Size  Location     Type
  1545 ;;		None
  1546 ;; Auto vars:     Size  Location     Type
  1547 ;;		None
  1548 ;; Return value:  Size  Location     Type
  1549 ;;                  2  274[None  ] int 
  1550 ;; Registers used:
  1551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1552 ;; Tracked objects:
  1553 ;;		On entry : 0/0
  1554 ;;		On exit  : 0/0
  1555 ;;		Unchanged: 0/0
  1556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1557 ;;      Params:         0       0       0       0       0       0       0
  1558 ;;      Locals:         0       0       0       0       0       0       0
  1559 ;;      Temps:          0       0       0       0       0       0       0
  1560 ;;      Totals:         0       0       0       0       0       0       0
  1561 ;;Total ram usage:        0 bytes
  1562 ;; Hardware stack levels used:    1
  1563 ;; Hardware stack levels required when called:    7
  1564 ;; This function calls:
  1565 ;;		_Delay
  1566 ;;		_ToSend
  1567 ;;		_sendData
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;;		_updateComms
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573                           
  1574                           	psect	text2
  1575  000EAE                     __ptext2:
  1576                           	opt stack 0
  1577  000EAE                     _respondECU:
  1578                           	opt stack 22
  1579                           
  1580                           ;Communications.c: 34: LATCbits.LATC5 = 1;
  1581                           
  1582                           ;incstack = 0
  1583  000EAE  8A8B               	bsf	3979,5,c	;volatile
  1584                           
  1585                           ;Communications.c: 35: ToSend(0, 1);
  1586  000EB0  0E00               	movlw	0
  1587  000EB2  0100               	movlb	0	; () banked
  1588  000EB4  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1589  000EB6  0E01               	movlw	1
  1590  000EB8  6FC2               	movwf	ToSend@what& (0+255),b
  1591  000EBA  0E00               	movlw	0
  1592  000EBC  EC3E  F009         	call	_ToSend
  1593                           
  1594                           ;Communications.c: 36: ToSend(1, 1);
  1595  000EC0  0E00               	movlw	0
  1596  000EC2  0100               	movlb	0	; () banked
  1597  000EC4  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1598  000EC6  0E01               	movlw	1
  1599  000EC8  6FC2               	movwf	ToSend@what& (0+255),b
  1600  000ECA  0E01               	movlw	1
  1601  000ECC  EC3E  F009         	call	_ToSend
  1602                           
  1603                           ;Communications.c: 37: Delay(5);
  1604  000ED0  0E05               	movlw	5
  1605  000ED2  6E1B               	movwf	Delay@wait,c
  1606  000ED4  0E00               	movlw	0
  1607  000ED6  6E1C               	movwf	Delay@wait+1,c
  1608  000ED8  0E00               	movlw	0
  1609  000EDA  6E1D               	movwf	Delay@wait+2,c
  1610  000EDC  0E00               	movlw	0
  1611  000EDE  6E1E               	movwf	Delay@wait+3,c
  1612  000EE0  ECA9  F007         	call	_Delay	;wreg free
  1613                           
  1614                           ;Communications.c: 39: sendData(6);
  1615  000EE4  0E06               	movlw	6
  1616  000EE6  ECB4  F006         	call	_sendData
  1617                           
  1618                           ;Communications.c: 40: Delay(3);
  1619  000EEA  0E03               	movlw	3
  1620  000EEC  6E1B               	movwf	Delay@wait,c
  1621  000EEE  0E00               	movlw	0
  1622  000EF0  6E1C               	movwf	Delay@wait+1,c
  1623  000EF2  0E00               	movlw	0
  1624  000EF4  6E1D               	movwf	Delay@wait+2,c
  1625  000EF6  0E00               	movlw	0
  1626  000EF8  6E1E               	movwf	Delay@wait+3,c
  1627  000EFA  ECA9  F007         	call	_Delay	;wreg free
  1628                           
  1629                           ;Communications.c: 41: LATCbits.LATC5 = 0;
  1630  000EFE  9A8B               	bcf	3979,5,c	;volatile
  1631  000F00  0012               	return		;funcret
  1632  000F02                     __end_of_respondECU:
  1633                           	opt stack 0
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           intcon	equ	0xFF2
  1639                           postinc0	equ	0xFEE
  1640                           wreg	equ	0xFE8
  1641                           postdec1	equ	0xFE5
  1642                           fsr1l	equ	0xFE1
  1643                           status	equ	0xFD8
  1644                           
  1645 ;; *************** function _sendData *****************
  1646 ;; Defined at:
  1647 ;;		line 53 in file "FastTransfer.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  whereToSend     1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  whereToSend     1    1[BANK0 ] unsigned char 
  1652 ;;  i               2    3[BANK0 ] int 
  1653 ;;  CS              1    2[BANK0 ] unsigned char 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1663 ;;      Params:         0       0       0       0       0       0       0
  1664 ;;      Locals:         0       4       0       0       0       0       0
  1665 ;;      Temps:          0       1       0       0       0       0       0
  1666 ;;      Totals:         0       5       0       0       0       0       0
  1667 ;;Total ram usage:        5 bytes
  1668 ;; Hardware stack levels used:    1
  1669 ;; Hardware stack levels required when called:    6
  1670 ;; This function calls:
  1671 ;;		_CRC8
  1672 ;;		_FastTransfer_buffer_flush
  1673 ;;		_crcBufS_put
  1674 ;; This function is called by:
  1675 ;;		_respondECU
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text3
  1680  000D68                     __ptext3:
  1681                           	opt stack 0
  1682  000D68                     _sendData:
  1683                           	opt stack 22
  1684                           
  1685                           ;incstack = 0
  1686                           ;sendData@whereToSend stored from wreg
  1687  000D68  0100               	movlb	0	; () banked
  1688  000D6A  6FC1               	movwf	sendData@whereToSend& (0+255),b
  1689                           
  1690                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1691  000D6C  C02D  F01B         	movff	_sendStructAddress,CRC8@data
  1692  000D70  C02E  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1693  000D74  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1694  000D78  ECCF  F007         	call	_CRC8	;wreg free
  1695  000D7C  0100               	movlb	0	; () banked
  1696  000D7E  6FC2               	movwf	sendData@CS& (0+255),b
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;FastTransfer.c: 66: int i;
  1700                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1701  000D80  0E00               	movlw	0
  1702  000D82  0100               	movlb	0	; () banked
  1703  000D84  6FC4               	movwf	(sendData@i+1)& (0+255),b
  1704  000D86  0E00               	movlw	0
  1705  000D88  6FC3               	movwf	sendData@i& (0+255),b
  1706  000D8A  D003               	goto	l3220
  1707  000D8C                     l3218:
  1708                           
  1709                           ; BSR set to: 0
  1710  000D8C  0100               	movlb	0	; () banked
  1711  000D8E  4BC3               	infsnz	sendData@i& (0+255),f,b
  1712  000D90  2BC4               	incf	(sendData@i+1)& (0+255),f,b
  1713  000D92                     l3220:
  1714                           
  1715                           ; BSR set to: 0
  1716  000D92  0101               	movlb	1	; () banked
  1717  000D94  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1718  000D96  0100               	movlb	0	; () banked
  1719  000D98  5DC3               	subwf	sendData@i& (0+255),w,b
  1720  000D9A  0100               	movlb	0	; () banked
  1721  000D9C  51C4               	movf	(sendData@i+1)& (0+255),w,b
  1722  000D9E  0A80               	xorlw	128
  1723  000DA0  0100               	movlb	0	; () banked
  1724  000DA2  6FC0               	movwf	??_sendData& (0+255),b
  1725  000DA4  0101               	movlb	1	; () banked
  1726  000DA6  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1727  000DA8  0A80               	xorlw	128
  1728  000DAA  0100               	movlb	0	; () banked
  1729  000DAC  59C0               	subwfb	??_sendData& (0+255),w,b
  1730  000DAE  A0D8               	btfss	status,0,c
  1731  000DB0  D7ED               	goto	l3218
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1735                           
  1736                           ; BSR set to: 0
  1737                           
  1738                           ;FastTransfer.c: 69: }
  1739                           ;FastTransfer.c: 72: serial_write(CS);
  1740  000DB2  0EA4               	movlw	low _crc_buffer
  1741  000DB4  6E1B               	movwf	crcBufS_put@_this,c
  1742  000DB6  0E00               	movlw	high _crc_buffer
  1743  000DB8  6E1C               	movwf	crcBufS_put@_this+1,c
  1744  000DBA  C0C1  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1745  000DBE  C0C2  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1746  000DC2  0E00               	movlw	0
  1747  000DC4  6E1F               	movwf	crcBufS_put@status,c
  1748  000DC6  EC62  F003         	call	_crcBufS_put	;wreg free
  1749                           
  1750                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1751  000DCA  0E00               	movlw	low _ring_buffer
  1752  000DCC  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1753  000DCE  0E01               	movlw	high _ring_buffer
  1754  000DD0  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1755  000DD2  0E00               	movlw	0
  1756  000DD4  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1757  000DD6  0E01               	movlw	1
  1758  000DD8  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1759  000DDA  EC26  F007         	call	_FastTransfer_buffer_flush	;wreg free
  1760  000DDE  0012               	return		;funcret
  1761  000DE0                     __end_of_sendData:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           intcon	equ	0xFF2
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _crcBufS_put *****************
  1775 ;; Defined at:
  1776 ;;		line 321 in file "FastTransfer.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1779 ;;		 -> crc_buffer(17), 
  1780 ;;  address         1   28[COMRAM] unsigned char 
  1781 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1782 ;;  status          1   30[COMRAM] unsigned char 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         5       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          2       0       0       0       0       0       0
  1797 ;;      Totals:         7       0       0       0       0       0       0
  1798 ;;Total ram usage:        7 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    4
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_sendData
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text4
  1809  0006C4                     __ptext4:
  1810                           	opt stack 0
  1811  0006C4                     _crcBufS_put:
  1812                           	opt stack 23
  1813                           
  1814                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1815                           
  1816                           ;incstack = 0
  1817  0006C4  EE20 F00F          	lfsr	2,15
  1818  0006C8  501B               	movf	crcBufS_put@_this,w,c
  1819  0006CA  26D9               	addwf	fsr2l,f,c
  1820  0006CC  501C               	movf	crcBufS_put@_this+1,w,c
  1821  0006CE  22DA               	addwfc	fsr2h,f,c
  1822  0006D0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1823  0006D4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1824  0006D8  5020               	movf	??_crcBufS_put,w,c
  1825  0006DA  241B               	addwf	crcBufS_put@_this,w,c
  1826  0006DC  6ED9               	movwf	fsr2l,c
  1827  0006DE  5021               	movf	??_crcBufS_put+1,w,c
  1828  0006E0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1829  0006E2  6EDA               	movwf	fsr2h,c
  1830  0006E4  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1831                           
  1832                           ;FastTransfer.c: 323: _this->head++;
  1833  0006E8  EE20 F00F          	lfsr	2,15
  1834  0006EC  501B               	movf	crcBufS_put@_this,w,c
  1835  0006EE  26D9               	addwf	fsr2l,f,c
  1836  0006F0  501C               	movf	crcBufS_put@_this+1,w,c
  1837  0006F2  22DA               	addwfc	fsr2h,f,c
  1838  0006F4  2ADE               	incf	postinc2,f,c
  1839  0006F6  0E00               	movlw	0
  1840  0006F8  22DD               	addwfc	postdec2,f,c
  1841                           
  1842                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1843  0006FA  EE20 F00F          	lfsr	2,15
  1844  0006FE  501B               	movf	crcBufS_put@_this,w,c
  1845  000700  26D9               	addwf	fsr2l,f,c
  1846  000702  501C               	movf	crcBufS_put@_this+1,w,c
  1847  000704  22DA               	addwfc	fsr2h,f,c
  1848  000706  CFDE F020          	movff	postinc2,??_crcBufS_put
  1849  00070A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1850  00070E  5020               	movf	??_crcBufS_put,w,c
  1851  000710  241B               	addwf	crcBufS_put@_this,w,c
  1852  000712  6ED9               	movwf	fsr2l,c
  1853  000714  5021               	movf	??_crcBufS_put+1,w,c
  1854  000716  201C               	addwfc	crcBufS_put@_this+1,w,c
  1855  000718  6EDA               	movwf	fsr2h,c
  1856  00071A  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1857                           
  1858                           ;FastTransfer.c: 325: _this->head++;
  1859  00071E  EE20 F00F          	lfsr	2,15
  1860  000722  501B               	movf	crcBufS_put@_this,w,c
  1861  000724  26D9               	addwf	fsr2l,f,c
  1862  000726  501C               	movf	crcBufS_put@_this+1,w,c
  1863  000728  22DA               	addwfc	fsr2h,f,c
  1864  00072A  2ADE               	incf	postinc2,f,c
  1865  00072C  0E00               	movlw	0
  1866  00072E  22DD               	addwfc	postdec2,f,c
  1867                           
  1868                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1869  000730  EE20 F00F          	lfsr	2,15
  1870  000734  501B               	movf	crcBufS_put@_this,w,c
  1871  000736  26D9               	addwf	fsr2l,f,c
  1872  000738  501C               	movf	crcBufS_put@_this+1,w,c
  1873  00073A  22DA               	addwfc	fsr2h,f,c
  1874  00073C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1875  000740  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1876  000744  5020               	movf	??_crcBufS_put,w,c
  1877  000746  241B               	addwf	crcBufS_put@_this,w,c
  1878  000748  6ED9               	movwf	fsr2l,c
  1879  00074A  5021               	movf	??_crcBufS_put+1,w,c
  1880  00074C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1881  00074E  6EDA               	movwf	fsr2h,c
  1882  000750  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1883                           
  1884                           ;FastTransfer.c: 327: _this->head++;
  1885  000754  EE20 F00F          	lfsr	2,15
  1886  000758  501B               	movf	crcBufS_put@_this,w,c
  1887  00075A  26D9               	addwf	fsr2l,f,c
  1888  00075C  501C               	movf	crcBufS_put@_this+1,w,c
  1889  00075E  22DA               	addwfc	fsr2h,f,c
  1890  000760  2ADE               	incf	postinc2,f,c
  1891  000762  0E00               	movlw	0
  1892  000764  22DD               	addwfc	postdec2,f,c
  1893                           
  1894                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1895  000766  EE20 F00F          	lfsr	2,15
  1896  00076A  501B               	movf	crcBufS_put@_this,w,c
  1897  00076C  26D9               	addwf	fsr2l,f,c
  1898  00076E  501C               	movf	crcBufS_put@_this+1,w,c
  1899  000770  22DA               	addwfc	fsr2h,f,c
  1900  000772  0E01               	movlw	1
  1901  000774  BEDB               	btfsc	plusw2,7,c
  1902  000776  0012               	return	
  1903  000778  0E01               	movlw	1
  1904  00077A  50DB               	movf	plusw2,w,c
  1905  00077C  E104               	bnz	u2130
  1906  00077E  0E0F               	movlw	15
  1907  000780  5CDE               	subwf	postinc2,w,c
  1908  000782  A0D8               	btfss	status,0,c
  1909  000784  0012               	return	
  1910  000786                     u2130:
  1911                           
  1912                           ;FastTransfer.c: 329: _this->head = 0;
  1913  000786  EE20 F00F          	lfsr	2,15
  1914  00078A  501B               	movf	crcBufS_put@_this,w,c
  1915  00078C  26D9               	addwf	fsr2l,f,c
  1916  00078E  501C               	movf	crcBufS_put@_this+1,w,c
  1917  000790  22DA               	addwfc	fsr2h,f,c
  1918  000792  0E00               	movlw	0
  1919  000794  6EDE               	movwf	postinc2,c
  1920  000796  0E00               	movlw	0
  1921  000798  6EDD               	movwf	postdec2,c
  1922  00079A  0012               	return	
  1923  00079C                     __end_of_crcBufS_put:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           intcon	equ	0xFF2
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1l	equ	0xFE1
  1934                           indf2	equ	0xFDF
  1935                           postinc2	equ	0xFDE
  1936                           postdec2	equ	0xFDD
  1937                           plusw2	equ	0xFDB
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _FastTransfer_buffer_flush *****************
  1943 ;; Defined at:
  1944 ;;		line 261 in file "FastTransfer.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1947 ;;		 -> ring_buffer(206), 
  1948 ;;  clearBuffer     2   36[COMRAM] const int 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      void 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1960 ;;      Params:         4       0       0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0
  1963 ;;      Totals:         4       0       0       0       0       0       0
  1964 ;;Total ram usage:        4 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    5
  1967 ;; This function calls:
  1968 ;;		_memset
  1969 ;; This function is called by:
  1970 ;;		_sendData
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           	psect	text5
  1975  000E4C                     __ptext5:
  1976                           	opt stack 0
  1977  000E4C                     _FastTransfer_buffer_flush:
  1978                           	opt stack 22
  1979                           
  1980                           ;FastTransfer.c: 262: _this->count = 0;
  1981                           
  1982                           ;incstack = 0
  1983  000E4C  EE20 F0CC          	lfsr	2,204
  1984  000E50  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1985  000E52  26D9               	addwf	fsr2l,f,c
  1986  000E54  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1987  000E56  22DA               	addwfc	fsr2h,f,c
  1988  000E58  0E00               	movlw	0
  1989  000E5A  6EDE               	movwf	postinc2,c
  1990  000E5C  0E00               	movlw	0
  1991  000E5E  6EDD               	movwf	postdec2,c
  1992                           
  1993                           ;FastTransfer.c: 263: _this->head = 0;
  1994  000E60  EE20 F0C8          	lfsr	2,200
  1995  000E64  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1996  000E66  26D9               	addwf	fsr2l,f,c
  1997  000E68  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1998  000E6A  22DA               	addwfc	fsr2h,f,c
  1999  000E6C  0E00               	movlw	0
  2000  000E6E  6EDE               	movwf	postinc2,c
  2001  000E70  0E00               	movlw	0
  2002  000E72  6EDD               	movwf	postdec2,c
  2003                           
  2004                           ;FastTransfer.c: 264: _this->tail = 0;
  2005  000E74  EE20 F0CA          	lfsr	2,202
  2006  000E78  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2007  000E7A  26D9               	addwf	fsr2l,f,c
  2008  000E7C  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2009  000E7E  22DA               	addwfc	fsr2h,f,c
  2010  000E80  0E00               	movlw	0
  2011  000E82  6EDE               	movwf	postinc2,c
  2012  000E84  0E00               	movlw	0
  2013  000E86  6EDD               	movwf	postdec2,c
  2014                           
  2015                           ;FastTransfer.c: 265: if (clearBuffer) {
  2016  000E88  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2017  000E8A  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2018  000E8C  B4D8               	btfsc	status,2,c
  2019  000E8E  0012               	return	
  2020                           
  2021                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2022  000E90  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2023  000E94  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2024  000E98  0E00               	movlw	0
  2025  000E9A  6E1E               	movwf	memset@c+1,c
  2026  000E9C  0E00               	movlw	0
  2027  000E9E  6E1D               	movwf	memset@c,c
  2028  000EA0  0E00               	movlw	0
  2029  000EA2  6E20               	movwf	memset@n+1,c
  2030  000EA4  0EC8               	movlw	200
  2031  000EA6  6E1F               	movwf	memset@n,c
  2032  000EA8  EC77  F008         	call	_memset	;wreg free
  2033  000EAC  0012               	return	
  2034  000EAE                     __end_of_FastTransfer_buffer_flush:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           intcon	equ	0xFF2
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           postdec1	equ	0xFE5
  2044                           fsr1l	equ	0xFE1
  2045                           indf2	equ	0xFDF
  2046                           postinc2	equ	0xFDE
  2047                           postdec2	equ	0xFDD
  2048                           plusw2	equ	0xFDB
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _memset *****************
  2054 ;; Defined at:
  2055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  p1              2   26[COMRAM] PTR void 
  2058 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2059 ;;  c               2   28[COMRAM] int 
  2060 ;;  n               2   30[COMRAM] unsigned int 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  p               2   32[COMRAM] PTR unsigned char 
  2063 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  2   26[COMRAM] PTR void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2073 ;;      Params:         6       0       0       0       0       0       0
  2074 ;;      Locals:         2       0       0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0
  2076 ;;      Totals:         8       0       0       0       0       0       0
  2077 ;;Total ram usage:        8 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    4
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_FastTransfer_buffer_flush
  2084 ;;		_UART_buff_init
  2085 ;;		_UART_buff_flush
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text6
  2090  0010EE                     __ptext6:
  2091                           	opt stack 0
  2092  0010EE                     _memset:
  2093                           	opt stack 22
  2094                           
  2095                           ;incstack = 0
  2096  0010EE  C01B  F021         	movff	memset@p1,memset@p
  2097  0010F2  C01C  F022         	movff	memset@p1+1,memset@p+1
  2098  0010F6  D008               	goto	l3106
  2099  0010F8                     l3102:
  2100  0010F8  C021  FFD9         	movff	memset@p,fsr2l
  2101  0010FC  C022  FFDA         	movff	memset@p+1,fsr2h
  2102  001100  C01D  FFDF         	movff	memset@c,indf2
  2103  001104  4A21               	infsnz	memset@p,f,c
  2104  001106  2A22               	incf	memset@p+1,f,c
  2105  001108                     l3106:
  2106  001108  061F               	decf	memset@n,f,c
  2107  00110A  A0D8               	btfss	status,0,c
  2108  00110C  0620               	decf	memset@n+1,f,c
  2109  00110E  281F               	incf	memset@n,w,c
  2110  001110  E1F3               	bnz	l3102
  2111  001112  2820               	incf	memset@n+1,w,c
  2112  001114  B4D8               	btfsc	status,2,c
  2113  001116  0012               	return	
  2114  001118  D7EF               	goto	l3102
  2115  00111A                     __end_of_memset:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           fsr1l	equ	0xFE1
  2126                           indf2	equ	0xFDF
  2127                           postinc2	equ	0xFDE
  2128                           postdec2	equ	0xFDD
  2129                           plusw2	equ	0xFDB
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _ToSend *****************
  2135 ;; Defined at:
  2136 ;;		line 216 in file "FastTransfer.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  where           1    wreg     unsigned char 
  2139 ;;  what            2    2[BANK0 ] unsigned int 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  where           1   37[COMRAM] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      void 
  2144 ;; Registers used:
  2145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2151 ;;      Params:         0       2       0       0       0       0       0
  2152 ;;      Locals:         1       0       0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0
  2154 ;;      Totals:         1       2       0       0       0       0       0
  2155 ;;Total ram usage:        3 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    6
  2158 ;; This function calls:
  2159 ;;		_FastTransfer_buffer_put
  2160 ;; This function is called by:
  2161 ;;		_respondECU
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text7
  2166  00127C                     __ptext7:
  2167                           	opt stack 0
  2168  00127C                     _ToSend:
  2169                           	opt stack 22
  2170                           
  2171                           ;incstack = 0
  2172                           ;ToSend@where stored from wreg
  2173  00127C  6E26               	movwf	ToSend@where,c
  2174                           
  2175                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2176  00127E  0E00               	movlw	low _ring_buffer
  2177  001280  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2178  001282  0E01               	movlw	high _ring_buffer
  2179  001284  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2180  001286  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2181  00128A  C0C2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2182  00128E  C0C3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2183  001292  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2184  001296  0012               	return		;funcret
  2185  001298                     __end_of_ToSend:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           intcon	equ	0xFF2
  2192                           postinc0	equ	0xFEE
  2193                           wreg	equ	0xFE8
  2194                           postdec1	equ	0xFE5
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           plusw2	equ	0xFDB
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _FastTransfer_buffer_put *****************
  2205 ;; Defined at:
  2206 ;;		line 223 in file "FastTransfer.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2209 ;;		 -> ring_buffer(206), 
  2210 ;;  towhere         1   34[COMRAM] unsigned char 
  2211 ;;  towhat          2   35[COMRAM] unsigned int 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;		None
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2223 ;;      Params:         5       0       0       0       0       0       0
  2224 ;;      Locals:         0       0       0       0       0       0       0
  2225 ;;      Temps:          0       2       0       0       0       0       0
  2226 ;;      Totals:         5       2       0       0       0       0       0
  2227 ;;Total ram usage:        7 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    5
  2230 ;; This function calls:
  2231 ;;		_FastTransfer_buffer_modulo_inc
  2232 ;; This function is called by:
  2233 ;;		_ToSend
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text8
  2238  000354                     __ptext8:
  2239                           	opt stack 0
  2240  000354                     _FastTransfer_buffer_put:
  2241                           	opt stack 22
  2242                           
  2243                           ;FastTransfer.c: 225: group.integer = towhat;
  2244                           
  2245                           ;incstack = 0
  2246  000354  C024  F029         	movff	FastTransfer_buffer_put@towhat,_group
  2247  000358  C025  F02A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2248                           
  2249                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2250  00035C  EE20 F0CC          	lfsr	2,204
  2251  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2252  000362  26D9               	addwf	fsr2l,f,c
  2253  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2254  000366  22DA               	addwfc	fsr2h,f,c
  2255  000368  0E01               	movlw	1
  2256  00036A  BEDB               	btfsc	plusw2,7,c
  2257  00036C  D007               	goto	l3152
  2258  00036E  0E01               	movlw	1
  2259  000370  50DB               	movf	plusw2,w,c
  2260  000372  E103               	bnz	u2151
  2261  000374  0EC5               	movlw	197
  2262  000376  5CDE               	subwf	postinc2,w,c
  2263  000378  B0D8               	btfsc	status,0,c
  2264  00037A                     u2151:
  2265  00037A  0012               	return	
  2266  00037C                     l3152:
  2267                           
  2268                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2269  00037C  EE20 F0C8          	lfsr	2,200
  2270  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2271  000382  26D9               	addwf	fsr2l,f,c
  2272  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2273  000386  22DA               	addwfc	fsr2h,f,c
  2274  000388  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2275  00038C  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2276  000390  0100               	movlb	0	; () banked
  2277  000392  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2278  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2279  000396  6ED9               	movwf	fsr2l,c
  2280  000398  0100               	movlb	0	; () banked
  2281  00039A  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2282  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2283  00039E  6EDA               	movwf	fsr2h,c
  2284  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2288  0003A4  EE20 F0C8          	lfsr	2,200
  2289  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2290  0003AA  26D9               	addwf	fsr2l,f,c
  2291  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2292  0003AE  22DA               	addwfc	fsr2h,f,c
  2293  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2294  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2295  0003B8  0E00               	movlw	0
  2296  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2297  0003BC  0EC8               	movlw	200
  2298  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2299  0003C0  ECA3  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2300  0003C4  EE20 F0C8          	lfsr	2,200
  2301  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2302  0003CA  26D9               	addwf	fsr2l,f,c
  2303  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2304  0003CE  22DA               	addwfc	fsr2h,f,c
  2305  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2306  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2307                           
  2308                           ;FastTransfer.c: 230: ++_this->count;
  2309  0003D8  EE20 F0CC          	lfsr	2,204
  2310  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2311  0003DE  26D9               	addwf	fsr2l,f,c
  2312  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2313  0003E2  22DA               	addwfc	fsr2h,f,c
  2314  0003E4  2ADE               	incf	postinc2,f,c
  2315  0003E6  0E00               	movlw	0
  2316  0003E8  22DD               	addwfc	postdec2,f,c
  2317                           
  2318                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2319  0003EA  EE20 F0C8          	lfsr	2,200
  2320  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2321  0003F0  26D9               	addwf	fsr2l,f,c
  2322  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2323  0003F4  22DA               	addwfc	fsr2h,f,c
  2324  0003F6  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2325  0003FA  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2326  0003FE  0100               	movlb	0	; () banked
  2327  000400  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2328  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2329  000404  6ED9               	movwf	fsr2l,c
  2330  000406  0100               	movlb	0	; () banked
  2331  000408  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2332  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2333  00040C  6EDA               	movwf	fsr2h,c
  2334  00040E  C029  FFDF         	movff	_group,indf2
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2338  000412  EE20 F0C8          	lfsr	2,200
  2339  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2340  000418  26D9               	addwf	fsr2l,f,c
  2341  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2342  00041C  22DA               	addwfc	fsr2h,f,c
  2343  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2344  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2345  000426  0E00               	movlw	0
  2346  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2347  00042A  0EC8               	movlw	200
  2348  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2349  00042E  ECA3  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2350  000432  EE20 F0C8          	lfsr	2,200
  2351  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2352  000438  26D9               	addwf	fsr2l,f,c
  2353  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2354  00043C  22DA               	addwfc	fsr2h,f,c
  2355  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2356  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2357                           
  2358                           ;FastTransfer.c: 233: ++_this->count;
  2359  000446  EE20 F0CC          	lfsr	2,204
  2360  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2361  00044C  26D9               	addwf	fsr2l,f,c
  2362  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2363  000450  22DA               	addwfc	fsr2h,f,c
  2364  000452  2ADE               	incf	postinc2,f,c
  2365  000454  0E00               	movlw	0
  2366  000456  22DD               	addwfc	postdec2,f,c
  2367                           
  2368                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2369  000458  EE20 F0C8          	lfsr	2,200
  2370  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2371  00045E  26D9               	addwf	fsr2l,f,c
  2372  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2373  000462  22DA               	addwfc	fsr2h,f,c
  2374  000464  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2375  000468  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2376  00046C  0100               	movlb	0	; () banked
  2377  00046E  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2378  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2379  000472  6ED9               	movwf	fsr2l,c
  2380  000474  0100               	movlb	0	; () banked
  2381  000476  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2382  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2383  00047A  6EDA               	movwf	fsr2h,c
  2384  00047C  C02A  FFDF         	movff	_group+1,indf2
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2388  000480  EE20 F0C8          	lfsr	2,200
  2389  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2390  000486  26D9               	addwf	fsr2l,f,c
  2391  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2392  00048A  22DA               	addwfc	fsr2h,f,c
  2393  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2394  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2395  000494  0E00               	movlw	0
  2396  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2397  000498  0EC8               	movlw	200
  2398  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2399  00049C  ECA3  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2400  0004A0  EE20 F0C8          	lfsr	2,200
  2401  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2402  0004A6  26D9               	addwf	fsr2l,f,c
  2403  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2404  0004AA  22DA               	addwfc	fsr2h,f,c
  2405  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2406  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2407                           
  2408                           ;FastTransfer.c: 236: ++_this->count;
  2409  0004B4  EE20 F0CC          	lfsr	2,204
  2410  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2411  0004BA  26D9               	addwf	fsr2l,f,c
  2412  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2413  0004BE  22DA               	addwfc	fsr2h,f,c
  2414  0004C0  2ADE               	incf	postinc2,f,c
  2415  0004C2  0E00               	movlw	0
  2416  0004C4  22DD               	addwfc	postdec2,f,c
  2417  0004C6  0012               	return	
  2418  0004C8                     __end_of_FastTransfer_buffer_put:
  2419                           	opt stack 0
  2420                           tblptru	equ	0xFF8
  2421                           tblptrh	equ	0xFF7
  2422                           tblptrl	equ	0xFF6
  2423                           tablat	equ	0xFF5
  2424                           intcon	equ	0xFF2
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           postdec1	equ	0xFE5
  2428                           fsr1l	equ	0xFE1
  2429                           indf2	equ	0xFDF
  2430                           postinc2	equ	0xFDE
  2431                           postdec2	equ	0xFDD
  2432                           plusw2	equ	0xFDB
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2438 ;; Defined at:
  2439 ;;		line 273 in file "FastTransfer.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  value           2   26[COMRAM] const unsigned int 
  2442 ;;  modulus         2   28[COMRAM] const unsigned int 
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;  my_value        2   30[COMRAM] unsigned int 
  2445 ;; Return value:  Size  Location     Type
  2446 ;;                  2   26[COMRAM] unsigned int 
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2454 ;;      Params:         4       0       0       0       0       0       0
  2455 ;;      Locals:         2       0       0       0       0       0       0
  2456 ;;      Temps:          0       0       0       0       0       0       0
  2457 ;;      Totals:         6       0       0       0       0       0       0
  2458 ;;Total ram usage:        6 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    4
  2461 ;; This function calls:
  2462 ;;		Nothing
  2463 ;; This function is called by:
  2464 ;;		_FastTransfer_buffer_put
  2465 ;;		_FastTransfer_buffer_get
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text9
  2470  001146                     __ptext9:
  2471                           	opt stack 0
  2472  001146                     _FastTransfer_buffer_modulo_inc:
  2473                           	opt stack 22
  2474                           
  2475                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2476                           
  2477                           ;incstack = 0
  2478  001146  0E01               	movlw	1
  2479  001148  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2480  00114A  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2481  00114C  0E00               	movlw	0
  2482  00114E  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2483  001150  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2484                           
  2485                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2486  001152  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2487  001154  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2488  001156  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2489  001158  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2490  00115A  A0D8               	btfss	status,0,c
  2491  00115C  D004               	goto	l2258
  2492                           
  2493                           ;FastTransfer.c: 276: my_value = 0;
  2494  00115E  0E00               	movlw	0
  2495  001160  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2496  001162  0E00               	movlw	0
  2497  001164  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2498  001166                     l2258:
  2499                           
  2500                           ;FastTransfer.c: 277: }
  2501                           ;FastTransfer.c: 278: return (my_value);
  2502  001166  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2503  00116A  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2504  00116E  0012               	return	
  2505  001170                     __end_of_FastTransfer_buffer_modulo_inc:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           intcon	equ	0xFF2
  2512                           postinc0	equ	0xFEE
  2513                           wreg	equ	0xFE8
  2514                           postdec1	equ	0xFE5
  2515                           fsr1l	equ	0xFE1
  2516                           indf2	equ	0xFDF
  2517                           postinc2	equ	0xFDE
  2518                           postdec2	equ	0xFDD
  2519                           plusw2	equ	0xFDB
  2520                           fsr2h	equ	0xFDA
  2521                           fsr2l	equ	0xFD9
  2522                           status	equ	0xFD8
  2523                           
  2524 ;; *************** function _receiveData *****************
  2525 ;; Defined at:
  2526 ;;		line 82 in file "FastTransfer.c"
  2527 ;; Parameters:    Size  Location     Type
  2528 ;;		None
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2531 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2532 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2533 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2534 ;;  u               2   21[BANK0 ] int 
  2535 ;;  r               2   23[BANK0 ] int 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      unsigned char 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2545 ;;      Params:         0       0       0       0       0       0       0
  2546 ;;      Locals:         0      12       0       0       0       0       0
  2547 ;;      Temps:          0       6       0       0       0       0       0
  2548 ;;      Totals:         0      18       0       0       0       0       0
  2549 ;;Total ram usage:       18 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    6
  2552 ;; This function calls:
  2553 ;;		_CRC8
  2554 ;;		_CRCcheck
  2555 ;; This function is called by:
  2556 ;;		_updateComms
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text10
  2561  0000B0                     __ptext10:
  2562                           	opt stack 0
  2563  0000B0                     _receiveData:
  2564                           	opt stack 23
  2565                           
  2566                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2567                           
  2568                           ;incstack = 0
  2569  0000B0  D020               	goto	l3338
  2570  0000B2                     l3328:
  2571                           
  2572                           ; BSR set to: 0
  2573  0000B2  0100               	movlb	0	; () banked
  2574  0000B4  4BD5               	infsnz	receiveData@u& (0+255),f,b
  2575  0000B6  2BD6               	incf	(receiveData@u+1)& (0+255),f,b
  2576                           
  2577                           ; BSR set to: 0
  2578                           
  2579                           ; BSR set to: 0
  2580  0000B8  5040               	movf	_rx_len,w,c
  2581  0000BA  0100               	movlb	0	; () banked
  2582  0000BC  6FC7               	movwf	??_receiveData& (0+255),b
  2583  0000BE  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2584  0000C0  0E01               	movlw	1
  2585  0000C2  0100               	movlb	0	; () banked
  2586  0000C4  27C7               	addwf	??_receiveData& (0+255),f,b
  2587  0000C6  0E00               	movlw	0
  2588  0000C8  23C8               	addwfc	(??_receiveData+1)& (0+255),f,b
  2589  0000CA  0100               	movlb	0	; () banked
  2590  0000CC  51D5               	movf	receiveData@u& (0+255),w,b
  2591  0000CE  0100               	movlb	0	; () banked
  2592  0000D0  5DC7               	subwf	??_receiveData& (0+255),w,b
  2593  0000D2  0100               	movlb	0	; () banked
  2594  0000D4  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2595  0000D6  0A80               	xorlw	128
  2596  0000D8  0100               	movlb	0	; () banked
  2597  0000DA  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2598  0000DC  0100               	movlb	0	; () banked
  2599  0000DE  51D6               	movf	(receiveData@u+1)& (0+255),w,b
  2600  0000E0  0A80               	xorlw	128
  2601  0000E2  0100               	movlb	0	; () banked
  2602  0000E4  59C9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2603  0000E6  B0D8               	btfsc	status,0,c
  2604  0000E8  D7E4               	goto	l3328
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;FastTransfer.c: 109: }
  2608                           ;FastTransfer.c: 110: rx_len = 0;
  2609                           
  2610                           ; BSR set to: 0
  2611  0000EA  0E00               	movlw	0
  2612  0000EC  6E40               	movwf	_rx_len,c
  2613                           
  2614                           ; BSR set to: 0
  2615                           ;FastTransfer.c: 111: return 0;
  2616  0000EE  0E00               	movlw	0
  2617                           
  2618                           ; BSR set to: 0
  2619  0000F0  0012               	return	
  2620  0000F2                     l3338:
  2621                           
  2622                           ;FastTransfer.c: 112: }
  2623                           ;FastTransfer.c: 114: }
  2624                           ;FastTransfer.c: 115: }
  2625                           ;FastTransfer.c: 116: }
  2626                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2627  0000F2  5040               	movf	_rx_len,w,c
  2628  0000F4  B4D8               	btfsc	status,2,c
  2629  0000F6  D12C               	goto	l3420
  2630                           
  2631                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2632  0000F8  503F               	movf	_rx_array_inx,w,c
  2633  0000FA  B4D8               	btfsc	status,2,c
  2634  0000FC                     l424:
  2635  0000FC  D7FF               	goto	l424
  2636                           
  2637                           ;FastTransfer.c: 135: }
  2638                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2639                           
  2640                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2641                           
  2642                           ;FastTransfer.c: 129: }
  2643                           ;FastTransfer.c: 130: }
  2644                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2645                           
  2646                           ;FastTransfer.c: 128: return 0;
  2647                           
  2648                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2649                           
  2650                           ;FastTransfer.c: 126: rx_len = 0;
  2651                           
  2652                           ;FastTransfer.c: 125: CRCcheck();
  2653                           
  2654                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2655  0000FE  5040               	movf	_rx_len,w,c
  2656  000100  0100               	movlb	0	; () banked
  2657  000102  6FC7               	movwf	??_receiveData& (0+255),b
  2658  000104  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2659  000106  0EFF               	movlw	255
  2660  000108  0100               	movlb	0	; () banked
  2661  00010A  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2662  00010C  0EFF               	movlw	255
  2663  00010E  0100               	movlb	0	; () banked
  2664  000110  6FCA               	movwf	(??_receiveData+3)& (0+255),b
  2665  000112  503F               	movf	_rx_array_inx,w,c
  2666  000114  0100               	movlb	0	; () banked
  2667  000116  6FCB               	movwf	(??_receiveData+4)& (0+255),b
  2668  000118  6BCC               	clrf	(??_receiveData+5)& (0+255),b
  2669  00011A  0100               	movlb	0	; () banked
  2670  00011C  51C9               	movf	(??_receiveData+2)& (0+255),w,b
  2671  00011E  0100               	movlb	0	; () banked
  2672  000120  27CB               	addwf	(??_receiveData+4)& (0+255),f,b
  2673  000122  0100               	movlb	0	; () banked
  2674  000124  51CA               	movf	(??_receiveData+3)& (0+255),w,b
  2675  000126  0100               	movlb	0	; () banked
  2676  000128  23CC               	addwfc	(??_receiveData+5)& (0+255),f,b
  2677  00012A  0100               	movlb	0	; () banked
  2678  00012C  51C7               	movf	??_receiveData& (0+255),w,b
  2679  00012E  0100               	movlb	0	; () banked
  2680  000130  19CB               	xorwf	(??_receiveData+4)& (0+255),w,b
  2681  000132  E105               	bnz	u2421
  2682  000134  0100               	movlb	0	; () banked
  2683  000136  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2684  000138  0100               	movlb	0	; () banked
  2685  00013A  19CC               	xorwf	(??_receiveData+5)& (0+255),w,b
  2686  00013C  A4D8               	btfss	status,2,c
  2687  00013E                     u2421:
  2688  00013E  D108               	goto	l3420
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2692  000140  0E00               	movlw	low _rx_buffer
  2693  000142  6E1B               	movwf	CRC8@data,c
  2694  000144  0E04               	movlw	high _rx_buffer
  2695  000146  6E1C               	movwf	CRC8@data+1,c
  2696  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2697  00014C  ECCF  F007         	call	_CRC8	;wreg free
  2698  000150  6E34               	movwf	_calc_CS,c
  2699                           
  2700                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2701  000152  0EFF               	movlw	255
  2702  000154  0100               	movlb	0	; () banked
  2703  000156  6FC7               	movwf	??_receiveData& (0+255),b
  2704  000158  0EFF               	movlw	255
  2705  00015A  0100               	movlb	0	; () banked
  2706  00015C  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2707  00015E  503F               	movf	_rx_array_inx,w,c
  2708  000160  0100               	movlb	0	; () banked
  2709  000162  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2710  000164  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2711  000166  0100               	movlb	0	; () banked
  2712  000168  51C7               	movf	??_receiveData& (0+255),w,b
  2713  00016A  0100               	movlb	0	; () banked
  2714  00016C  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2715  00016E  0100               	movlb	0	; () banked
  2716  000170  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2717  000172  0100               	movlb	0	; () banked
  2718  000174  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2719  000176  0E00               	movlw	low _rx_buffer
  2720  000178  0100               	movlb	0	; () banked
  2721  00017A  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2722  00017C  6ED9               	movwf	fsr2l,c
  2723  00017E  0E04               	movlw	high _rx_buffer
  2724  000180  0100               	movlb	0	; () banked
  2725  000182  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2726  000184  6EDA               	movwf	fsr2h,c
  2727  000186  5034               	movf	_calc_CS,w,c
  2728  000188  18DE               	xorwf	postinc2,w,c
  2729  00018A  A4D8               	btfss	status,2,c
  2730  00018C  D0A9               	goto	l3400
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;FastTransfer.c: 147: int r;
  2734                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2735  00018E  0E00               	movlw	0
  2736  000190  0100               	movlb	0	; () banked
  2737  000192  6FD8               	movwf	(receiveData@r+1)& (0+255),b
  2738  000194  0E00               	movlw	0
  2739  000196  6FD7               	movwf	receiveData@r& (0+255),b
  2740  000198  D05A               	goto	l3378
  2741  00019A                     l3368:
  2742                           
  2743                           ; BSR set to: 0
  2744                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2745  00019A  0E00               	movlw	low _rx_buffer
  2746  00019C  0100               	movlb	0	; () banked
  2747  00019E  25D7               	addwf	receiveData@r& (0+255),w,b
  2748  0001A0  6ED9               	movwf	fsr2l,c
  2749  0001A2  0E04               	movlw	high _rx_buffer
  2750  0001A4  0100               	movlb	0	; () banked
  2751  0001A6  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2752  0001A8  6EDA               	movwf	fsr2h,c
  2753  0001AA  503B               	movf	_maxDataAddress,w,c
  2754  0001AC  5CDE               	subwf	postinc2,w,c
  2755  0001AE  B0D8               	btfsc	status,0,c
  2756  0001B0  D041               	goto	l3374
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2760  0001B2  0E01               	movlw	1
  2761  0001B4  0100               	movlb	0	; () banked
  2762  0001B6  25D7               	addwf	receiveData@r& (0+255),w,b
  2763  0001B8  0100               	movlb	0	; () banked
  2764  0001BA  6FC7               	movwf	??_receiveData& (0+255),b
  2765  0001BC  0E00               	movlw	0
  2766  0001BE  0100               	movlb	0	; () banked
  2767  0001C0  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2768  0001C2  0100               	movlb	0	; () banked
  2769  0001C4  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2770  0001C6  0E00               	movlw	low _rx_buffer
  2771  0001C8  0100               	movlb	0	; () banked
  2772  0001CA  25C7               	addwf	??_receiveData& (0+255),w,b
  2773  0001CC  6ED9               	movwf	fsr2l,c
  2774  0001CE  0E04               	movlw	high _rx_buffer
  2775  0001D0  0100               	movlb	0	; () banked
  2776  0001D2  21C8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2777  0001D4  6EDA               	movwf	fsr2h,c
  2778  0001D6  50DF               	movf	indf2,w,c
  2779  0001D8  6E29               	movwf	_group,c
  2780                           
  2781                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2782  0001DA  0E02               	movlw	2
  2783  0001DC  0100               	movlb	0	; () banked
  2784  0001DE  25D7               	addwf	receiveData@r& (0+255),w,b
  2785  0001E0  0100               	movlb	0	; () banked
  2786  0001E2  6FC7               	movwf	??_receiveData& (0+255),b
  2787  0001E4  0E00               	movlw	0
  2788  0001E6  0100               	movlb	0	; () banked
  2789  0001E8  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2790  0001EA  0100               	movlb	0	; () banked
  2791  0001EC  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2792  0001EE  0E00               	movlw	low _rx_buffer
  2793  0001F0  0100               	movlb	0	; () banked
  2794  0001F2  25C7               	addwf	??_receiveData& (0+255),w,b
  2795  0001F4  6ED9               	movwf	fsr2l,c
  2796  0001F6  0E04               	movlw	high _rx_buffer
  2797  0001F8  0100               	movlb	0	; () banked
  2798  0001FA  21C8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2799  0001FC  6EDA               	movwf	fsr2h,c
  2800  0001FE  50DF               	movf	indf2,w,c
  2801  000200  6E2A               	movwf	_group+1,c
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2805  000202  0E00               	movlw	low _rx_buffer
  2806  000204  0100               	movlb	0	; () banked
  2807  000206  25D7               	addwf	receiveData@r& (0+255),w,b
  2808  000208  6ED9               	movwf	fsr2l,c
  2809  00020A  0E04               	movlw	high _rx_buffer
  2810  00020C  0100               	movlb	0	; () banked
  2811  00020E  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2812  000210  6EDA               	movwf	fsr2h,c
  2813  000212  50DF               	movf	indf2,w,c
  2814  000214  0100               	movlb	0	; () banked
  2815  000216  6FC7               	movwf	??_receiveData& (0+255),b
  2816  000218  0100               	movlb	0	; () banked
  2817  00021A  51C7               	movf	??_receiveData& (0+255),w,b
  2818  00021C  0D02               	mullw	2
  2819  00021E  50F3               	movf	prodl,w,c
  2820  000220  242B               	addwf	_receiveArrayAddress,w,c
  2821  000222  6ED9               	movwf	fsr2l,c
  2822  000224  50F4               	movf	prodh,w,c
  2823  000226  202C               	addwfc	_receiveArrayAddress+1,w,c
  2824  000228  6EDA               	movwf	fsr2h,c
  2825  00022A  C029  FFDE         	movff	_group,postinc2
  2826  00022E  C02A  FFDD         	movff	_group+1,postdec2
  2827                           
  2828                           ;FastTransfer.c: 153: } else {
  2829  000232  D003               	goto	l3376
  2830  000234                     l3374:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2834  000234  0100               	movlb	0	; () banked
  2835  000236  4B9E               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2836  000238  2B9F               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2837  00023A                     l3376:
  2838                           
  2839                           ; BSR set to: 0
  2840  00023A  0E03               	movlw	3
  2841  00023C  0100               	movlb	0	; () banked
  2842  00023E  25D7               	addwf	receiveData@r& (0+255),w,b
  2843  000240  0100               	movlb	0	; () banked
  2844  000242  6FD7               	movwf	receiveData@r& (0+255),b
  2845  000244  0E00               	movlw	0
  2846  000246  0100               	movlb	0	; () banked
  2847  000248  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2848  00024A  0100               	movlb	0	; () banked
  2849  00024C  6FD8               	movwf	(receiveData@r+1)& (0+255),b
  2850  00024E                     l3378:
  2851                           
  2852                           ; BSR set to: 0
  2853  00024E  5040               	movf	_rx_len,w,c
  2854  000250  0100               	movlb	0	; () banked
  2855  000252  6FC7               	movwf	??_receiveData& (0+255),b
  2856  000254  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2857  000256  0100               	movlb	0	; () banked
  2858  000258  51C7               	movf	??_receiveData& (0+255),w,b
  2859  00025A  0100               	movlb	0	; () banked
  2860  00025C  5DD7               	subwf	receiveData@r& (0+255),w,b
  2861  00025E  0100               	movlb	0	; () banked
  2862  000260  51D8               	movf	(receiveData@r+1)& (0+255),w,b
  2863  000262  0A80               	xorlw	128
  2864  000264  0100               	movlb	0	; () banked
  2865  000266  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2866  000268  0100               	movlb	0	; () banked
  2867  00026A  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2868  00026C  0A80               	xorlw	128
  2869  00026E  0100               	movlb	0	; () banked
  2870  000270  59C9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2871  000272  A0D8               	btfss	status,0,c
  2872  000274  D792               	goto	l3368
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;FastTransfer.c: 155: }
  2876                           ;FastTransfer.c: 156: }
  2877                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2878                           
  2879                           ; BSR set to: 0
  2880  000276  5033               	movf	_AKNAKsend,w,c
  2881  000278  B4D8               	btfsc	status,2,c
  2882  00027A  D02C               	goto	l3390
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;FastTransfer.c: 160: unsigned char holder[3];
  2886                           ;FastTransfer.c: 161: holder[0] = 255;
  2887  00027C  0100               	movlb	0	; () banked
  2888  00027E  69CF               	setf	receiveData@holder& (0+255),b
  2889                           
  2890                           ; BSR set to: 0
  2891                           ;FastTransfer.c: 162: holder[1] = 1;
  2892  000280  0E01               	movlw	1
  2893  000282  0100               	movlb	0	; () banked
  2894  000284  6FD0               	movwf	(receiveData@holder+1)& (0+255),b
  2895                           
  2896                           ; BSR set to: 0
  2897                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2898  000286  0EFF               	movlw	255
  2899  000288  0100               	movlb	0	; () banked
  2900  00028A  6FC7               	movwf	??_receiveData& (0+255),b
  2901  00028C  0EFF               	movlw	255
  2902  00028E  0100               	movlb	0	; () banked
  2903  000290  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2904  000292  503F               	movf	_rx_array_inx,w,c
  2905  000294  0100               	movlb	0	; () banked
  2906  000296  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2907  000298  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2908  00029A  0100               	movlb	0	; () banked
  2909  00029C  51C7               	movf	??_receiveData& (0+255),w,b
  2910  00029E  0100               	movlb	0	; () banked
  2911  0002A0  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2912  0002A2  0100               	movlb	0	; () banked
  2913  0002A4  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2914  0002A6  0100               	movlb	0	; () banked
  2915  0002A8  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2916  0002AA  0E00               	movlw	low _rx_buffer
  2917  0002AC  0100               	movlb	0	; () banked
  2918  0002AE  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2919  0002B0  6ED9               	movwf	fsr2l,c
  2920  0002B2  0E04               	movlw	high _rx_buffer
  2921  0002B4  0100               	movlb	0	; () banked
  2922  0002B6  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2923  0002B8  6EDA               	movwf	fsr2h,c
  2924  0002BA  50DF               	movf	indf2,w,c
  2925  0002BC  0100               	movlb	0	; () banked
  2926  0002BE  6FD1               	movwf	(receiveData@holder+2)& (0+255),b
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2930  0002C0  0ECF               	movlw	low receiveData@holder
  2931  0002C2  6E1B               	movwf	CRC8@data,c
  2932  0002C4  0E00               	movlw	high receiveData@holder
  2933  0002C6  6E1C               	movwf	CRC8@data+1,c
  2934  0002C8  0E03               	movlw	3
  2935  0002CA  6E1D               	movwf	CRC8@len,c
  2936  0002CC  ECCF  F007         	call	_CRC8	;wreg free
  2937  0002D0  0100               	movlb	0	; () banked
  2938  0002D2  6FCD               	movwf	receiveData@crcHolder& (0+255),b
  2939  0002D4                     l3390:
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;FastTransfer.c: 174: }
  2943                           ;FastTransfer.c: 178: rx_len = 0;
  2944  0002D4  0E00               	movlw	0
  2945  0002D6  6E40               	movwf	_rx_len,c
  2946                           
  2947                           ; BSR set to: 0
  2948                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2949  0002D8  0E00               	movlw	0
  2950  0002DA  6E3F               	movwf	_rx_array_inx,c
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;FastTransfer.c: 180: return 1;
  2954  0002DC  0E01               	movlw	1
  2955                           
  2956                           ; BSR set to: 0
  2957  0002DE  0012               	return	
  2958  0002E0                     l3400:
  2959                           
  2960                           ; BSR set to: 0
  2961                           ;FastTransfer.c: 182: crcErrorCounter++;
  2962  0002E0  0100               	movlb	0	; () banked
  2963  0002E2  4B9C               	infsnz	_crcErrorCounter& (0+255),f,b
  2964  0002E4  2B9D               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2968  0002E6  5033               	movf	_AKNAKsend,w,c
  2969  0002E8  B4D8               	btfsc	status,2,c
  2970  0002EA  D02C               	goto	l3412
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;FastTransfer.c: 185: unsigned char holder[3];
  2974                           ;FastTransfer.c: 186: holder[0] = 255;
  2975  0002EC  0100               	movlb	0	; () banked
  2976  0002EE  69D2               	setf	receiveData@holder_1421& (0+255),b
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;FastTransfer.c: 187: holder[1] = 2;
  2980  0002F0  0E02               	movlw	2
  2981  0002F2  0100               	movlb	0	; () banked
  2982  0002F4  6FD3               	movwf	(receiveData@holder_1421+1)& (0+255),b
  2983                           
  2984                           ; BSR set to: 0
  2985                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2986  0002F6  0EFF               	movlw	255
  2987  0002F8  0100               	movlb	0	; () banked
  2988  0002FA  6FC7               	movwf	??_receiveData& (0+255),b
  2989  0002FC  0EFF               	movlw	255
  2990  0002FE  0100               	movlb	0	; () banked
  2991  000300  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2992  000302  503F               	movf	_rx_array_inx,w,c
  2993  000304  0100               	movlb	0	; () banked
  2994  000306  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2995  000308  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2996  00030A  0100               	movlb	0	; () banked
  2997  00030C  51C7               	movf	??_receiveData& (0+255),w,b
  2998  00030E  0100               	movlb	0	; () banked
  2999  000310  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  3000  000312  0100               	movlb	0	; () banked
  3001  000314  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  3002  000316  0100               	movlb	0	; () banked
  3003  000318  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  3004  00031A  0E00               	movlw	low _rx_buffer
  3005  00031C  0100               	movlb	0	; () banked
  3006  00031E  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  3007  000320  6ED9               	movwf	fsr2l,c
  3008  000322  0E04               	movlw	high _rx_buffer
  3009  000324  0100               	movlb	0	; () banked
  3010  000326  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  3011  000328  6EDA               	movwf	fsr2h,c
  3012  00032A  50DF               	movf	indf2,w,c
  3013  00032C  0100               	movlb	0	; () banked
  3014  00032E  6FD4               	movwf	(receiveData@holder_1421+2)& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3018  000330  0ED2               	movlw	low receiveData@holder_1421
  3019  000332  6E1B               	movwf	CRC8@data,c
  3020  000334  0E00               	movlw	high receiveData@holder_1421
  3021  000336  6E1C               	movwf	CRC8@data+1,c
  3022  000338  0E03               	movlw	3
  3023  00033A  6E1D               	movwf	CRC8@len,c
  3024  00033C  ECCF  F007         	call	_CRC8	;wreg free
  3025  000340  0100               	movlb	0	; () banked
  3026  000342  6FCE               	movwf	receiveData@crcHolder_1422& (0+255),b
  3027  000344                     l3412:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;FastTransfer.c: 199: }
  3031                           ;FastTransfer.c: 202: rx_len = 0;
  3032  000344  0E00               	movlw	0
  3033  000346  6E40               	movwf	_rx_len,c
  3034                           
  3035                           ; BSR set to: 0
  3036                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3037  000348  0E00               	movlw	0
  3038  00034A  6E3F               	movwf	_rx_array_inx,c
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;FastTransfer.c: 204: return 0;
  3042  00034C  0E00               	movlw	0
  3043                           
  3044                           ; BSR set to: 0
  3045  00034E  0012               	return	
  3046  000350                     l3420:
  3047                           
  3048                           ;FastTransfer.c: 205: }
  3049                           ;FastTransfer.c: 206: }
  3050                           ;FastTransfer.c: 207: }
  3051                           ;FastTransfer.c: 210: return 0;
  3052  000350  0E00               	movlw	0
  3053  000352  0012               	return	
  3054  000354                     __end_of_receiveData:
  3055                           	opt stack 0
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           prodh	equ	0xFF4
  3061                           prodl	equ	0xFF3
  3062                           intcon	equ	0xFF2
  3063                           postinc0	equ	0xFEE
  3064                           wreg	equ	0xFE8
  3065                           postdec1	equ	0xFE5
  3066                           fsr1l	equ	0xFE1
  3067                           indf2	equ	0xFDF
  3068                           postinc2	equ	0xFDE
  3069                           postdec2	equ	0xFDD
  3070                           plusw2	equ	0xFDB
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function _CRCcheck *****************
  3076 ;; Defined at:
  3077 ;;		line 373 in file "FastTransfer.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  rt              2    5[BANK0 ] int 
  3082 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3083 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3084 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      void 
  3087 ;; Registers used:
  3088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3094 ;;      Params:         0       0       0       0       0       0       0
  3095 ;;      Locals:         0       7       0       0       0       0       0
  3096 ;;      Temps:          0       0       0       0       0       0       0
  3097 ;;      Totals:         0       7       0       0       0       0       0
  3098 ;;Total ram usage:        7 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; Hardware stack levels required when called:    5
  3101 ;; This function calls:
  3102 ;;		_CRC8
  3103 ;;		_crcBufS_get
  3104 ;;		_crcBufS_status_put
  3105 ;; This function is called by:
  3106 ;;		_receiveData
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text11
  3111  000B2C                     __ptext11:
  3112                           	opt stack 0
  3113  000B2C                     _CRCcheck:
  3114                           	opt stack 23
  3115  000B2C                     l500:
  3116  000B2C  D7FF               	goto	l500
  3117  000B2E                     l3234:
  3118                           
  3119                           ; BSR set to: 0
  3120  000B2E  0100               	movlb	0	; () banked
  3121  000B30  BFC6               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3122  000B32  D008               	goto	l3238
  3123  000B34  0100               	movlb	0	; () banked
  3124  000B36  51C6               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3125  000B38  E143               	bnz	l511
  3126  000B3A  0E05               	movlw	5
  3127  000B3C  0100               	movlb	0	; () banked
  3128  000B3E  5DC5               	subwf	CRCcheck@rt& (0+255),w,b
  3129  000B40  B0D8               	btfsc	status,0,c
  3130  000B42  0012               	return	
  3131  000B44                     l3238:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3135  000B44  0EA4               	movlw	low _crc_buffer
  3136  000B46  6E1B               	movwf	crcBufS_get@_this,c
  3137  000B48  0E00               	movlw	high _crc_buffer
  3138  000B4A  6E1C               	movwf	crcBufS_get@_this+1,c
  3139  000B4C  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3140  000B50  0E00               	movlw	0
  3141  000B52  6E1E               	movwf	crcBufS_get@space,c
  3142  000B54  ECF1  F002         	call	_crcBufS_get	;wreg free
  3143  000B58  183D               	xorwf	_returnAddress,w,c
  3144  000B5A  A4D8               	btfss	status,2,c
  3145  000B5C  D02D               	goto	l3252
  3146                           
  3147                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3148  000B5E  0EA4               	movlw	low _crc_buffer
  3149  000B60  6E1B               	movwf	crcBufS_get@_this,c
  3150  000B62  0E00               	movlw	high _crc_buffer
  3151  000B64  6E1C               	movwf	crcBufS_get@_this+1,c
  3152  000B66  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3153  000B6A  0E01               	movlw	1
  3154  000B6C  6E1E               	movwf	crcBufS_get@space,c
  3155  000B6E  ECF1  F002         	call	_crcBufS_get	;wreg free
  3156  000B72  0100               	movlb	0	; () banked
  3157  000B74  19C4               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3158  000B76  A4D8               	btfss	status,2,c
  3159  000B78  D01F               	goto	l3252
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3163  000B7A  0100               	movlb	0	; () banked
  3164  000B7C  05C3               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3165  000B7E  A4D8               	btfss	status,2,c
  3166  000B80  D00B               	goto	l3248
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3170  000B82  0EA4               	movlw	low _crc_buffer
  3171  000B84  6E1B               	movwf	crcBufS_status_put@_this,c
  3172  000B86  0E00               	movlw	high _crc_buffer
  3173  000B88  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3174  000B8A  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3175  000B8E  0E01               	movlw	1
  3176  000B90  6E1E               	movwf	crcBufS_status_put@status,c
  3177  000B92  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3178                           
  3179                           ;FastTransfer.c: 393: break;
  3180  000B96  0012               	return	
  3181  000B98                     l3248:
  3182  000B98  0E02               	movlw	2
  3183  000B9A  0100               	movlb	0	; () banked
  3184  000B9C  19C3               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3185  000B9E  A4D8               	btfss	status,2,c
  3186  000BA0  D00B               	goto	l3252
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3190  000BA2  0EA4               	movlw	low _crc_buffer
  3191  000BA4  6E1B               	movwf	crcBufS_status_put@_this,c
  3192  000BA6  0E00               	movlw	high _crc_buffer
  3193  000BA8  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3194  000BAA  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3195  000BAE  0E02               	movlw	2
  3196  000BB0  6E1E               	movwf	crcBufS_status_put@status,c
  3197  000BB2  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3198                           
  3199                           ;FastTransfer.c: 396: break;
  3200  000BB6  0012               	return	
  3201  000BB8                     l3252:
  3202  000BB8  0100               	movlb	0	; () banked
  3203  000BBA  4BC5               	infsnz	CRCcheck@rt& (0+255),f,b
  3204  000BBC  2BC6               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3205  000BBE  D7B7               	goto	l3234
  3206  000BC0                     l511:
  3207  000BC0  0012               	return		;funcret
  3208  000BC2                     __end_of_CRCcheck:
  3209                           	opt stack 0
  3210                           tblptru	equ	0xFF8
  3211                           tblptrh	equ	0xFF7
  3212                           tblptrl	equ	0xFF6
  3213                           tablat	equ	0xFF5
  3214                           prodh	equ	0xFF4
  3215                           prodl	equ	0xFF3
  3216                           intcon	equ	0xFF2
  3217                           postinc0	equ	0xFEE
  3218                           wreg	equ	0xFE8
  3219                           postdec1	equ	0xFE5
  3220                           fsr1l	equ	0xFE1
  3221                           indf2	equ	0xFDF
  3222                           postinc2	equ	0xFDE
  3223                           postdec2	equ	0xFDD
  3224                           plusw2	equ	0xFDB
  3225                           fsr2h	equ	0xFDA
  3226                           fsr2l	equ	0xFD9
  3227                           status	equ	0xFD8
  3228                           
  3229 ;; *************** function _crcBufS_status_put *****************
  3230 ;; Defined at:
  3231 ;;		line 336 in file "FastTransfer.c"
  3232 ;; Parameters:    Size  Location     Type
  3233 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3234 ;;		 -> crc_buffer(17), 
  3235 ;;  time            1   28[COMRAM] unsigned char 
  3236 ;;  status          1   29[COMRAM] unsigned char 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  wantedTime      2   34[COMRAM] int 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3248 ;;      Params:         4       0       0       0       0       0       0
  3249 ;;      Locals:         2       0       0       0       0       0       0
  3250 ;;      Temps:          4       0       0       0       0       0       0
  3251 ;;      Totals:        10       0       0       0       0       0       0
  3252 ;;Total ram usage:       10 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    4
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_CRCcheck
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text12
  3263  00079C                     __ptext12:
  3264                           	opt stack 0
  3265  00079C                     _crcBufS_status_put:
  3266                           	opt stack 23
  3267                           
  3268                           ;FastTransfer.c: 337: if (time >= 5) {
  3269                           
  3270                           ;incstack = 0
  3271  00079C  0E04               	movlw	4
  3272  00079E  641D               	cpfsgt	crcBufS_status_put@time,c
  3273  0007A0  D002               	goto	l3194
  3274                           
  3275                           ;FastTransfer.c: 338: time = 5 - 1;
  3276  0007A2  0E04               	movlw	4
  3277  0007A4  6E1D               	movwf	crcBufS_status_put@time,c
  3278  0007A6                     l3194:
  3279                           
  3280                           ;FastTransfer.c: 339: }
  3281                           ;FastTransfer.c: 340: time = time + 1;
  3282  0007A6  281D               	incf	crcBufS_status_put@time,w,c
  3283  0007A8  6E1D               	movwf	crcBufS_status_put@time,c
  3284                           
  3285                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3286  0007AA  501D               	movf	crcBufS_status_put@time,w,c
  3287  0007AC  0D03               	mullw	3
  3288  0007AE  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3289  0007B2  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3290                           
  3291                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3292  0007B6  EE20 F00F          	lfsr	2,15
  3293  0007BA  501B               	movf	crcBufS_status_put@_this,w,c
  3294  0007BC  26D9               	addwf	fsr2l,f,c
  3295  0007BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3296  0007C0  22DA               	addwfc	fsr2h,f,c
  3297  0007C2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3298  0007C4  5CDE               	subwf	postinc2,w,c
  3299  0007C6  50DE               	movf	postinc2,w,c
  3300  0007C8  0A80               	xorlw	128
  3301  0007CA  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3302  0007CC  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3303  0007CE  0A80               	xorlw	128
  3304  0007D0  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3305  0007D2  B0D8               	btfsc	status,0,c
  3306  0007D4  D02B               	goto	l3202
  3307                           
  3308                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3309  0007D6  EE20 F00F          	lfsr	2,15
  3310  0007DA  501B               	movf	crcBufS_status_put@_this,w,c
  3311  0007DC  26D9               	addwf	fsr2l,f,c
  3312  0007DE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3313  0007E0  22DA               	addwfc	fsr2h,f,c
  3314  0007E2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3315  0007E6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3316  0007EA  1E1F               	comf	??_crcBufS_status_put,f,c
  3317  0007EC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3318  0007EE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3319  0007F0  2A20               	incf	??_crcBufS_status_put+1,f,c
  3320  0007F2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3321  0007F4  261F               	addwf	??_crcBufS_status_put,f,c
  3322  0007F6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3323  0007F8  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3324  0007FA  1E1F               	comf	??_crcBufS_status_put,f,c
  3325  0007FC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3326  0007FE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3327  000800  2A20               	incf	??_crcBufS_status_put+1,f,c
  3328  000802  0E0F               	movlw	15
  3329  000804  241F               	addwf	??_crcBufS_status_put,w,c
  3330  000806  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3331  000808  0E00               	movlw	0
  3332  00080A  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3333  00080C  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3334                           
  3335                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3336  00080E  0E02               	movlw	2
  3337  000810  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3338  000812  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3339  000814  0E00               	movlw	0
  3340  000816  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3341  000818  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3342  00081A  501F               	movf	??_crcBufS_status_put,w,c
  3343  00081C  241B               	addwf	crcBufS_status_put@_this,w,c
  3344  00081E  6ED9               	movwf	fsr2l,c
  3345  000820  5020               	movf	??_crcBufS_status_put+1,w,c
  3346  000822  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3347  000824  6EDA               	movwf	fsr2h,c
  3348  000826  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3349                           
  3350                           ;FastTransfer.c: 345: } else {
  3351  00082A  0012               	return	
  3352  00082C                     l3202:
  3353                           
  3354                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3355  00082C  EE20 F00F          	lfsr	2,15
  3356  000830  501B               	movf	crcBufS_status_put@_this,w,c
  3357  000832  26D9               	addwf	fsr2l,f,c
  3358  000834  501C               	movf	crcBufS_status_put@_this+1,w,c
  3359  000836  22DA               	addwfc	fsr2h,f,c
  3360  000838  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3361  00083C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3362  000840  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3363  000844  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3364  000848  1E21               	comf	??_crcBufS_status_put+2,f,c
  3365  00084A  1E22               	comf	??_crcBufS_status_put+3,f,c
  3366  00084C  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3367  00084E  2A22               	incf	??_crcBufS_status_put+3,f,c
  3368  000850  501F               	movf	??_crcBufS_status_put,w,c
  3369  000852  2621               	addwf	??_crcBufS_status_put+2,f,c
  3370  000854  5020               	movf	??_crcBufS_status_put+1,w,c
  3371  000856  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3372  000858  0E02               	movlw	2
  3373  00085A  2621               	addwf	??_crcBufS_status_put+2,f,c
  3374  00085C  0E00               	movlw	0
  3375  00085E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3376  000860  5021               	movf	??_crcBufS_status_put+2,w,c
  3377  000862  241B               	addwf	crcBufS_status_put@_this,w,c
  3378  000864  6ED9               	movwf	fsr2l,c
  3379  000866  5022               	movf	??_crcBufS_status_put+3,w,c
  3380  000868  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3381  00086A  6EDA               	movwf	fsr2h,c
  3382  00086C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3383  000870  0012               	return	
  3384  000872                     __end_of_crcBufS_status_put:
  3385                           	opt stack 0
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           postinc0	equ	0xFEE
  3394                           wreg	equ	0xFE8
  3395                           postdec1	equ	0xFE5
  3396                           fsr1l	equ	0xFE1
  3397                           indf2	equ	0xFDF
  3398                           postinc2	equ	0xFDE
  3399                           postdec2	equ	0xFDD
  3400                           plusw2	equ	0xFDB
  3401                           fsr2h	equ	0xFDA
  3402                           fsr2l	equ	0xFD9
  3403                           status	equ	0xFD8
  3404                           
  3405 ;; *************** function _crcBufS_get *****************
  3406 ;; Defined at:
  3407 ;;		line 353 in file "FastTransfer.c"
  3408 ;; Parameters:    Size  Location     Type
  3409 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3410 ;;		 -> crc_buffer(17), 
  3411 ;;  time            1   28[COMRAM] unsigned char 
  3412 ;;  space           1   29[COMRAM] unsigned char 
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  wantedTime      2   36[COMRAM] int 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;                  1    wreg      unsigned char 
  3417 ;; Registers used:
  3418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3424 ;;      Params:         4       0       0       0       0       0       0
  3425 ;;      Locals:         2       0       0       0       0       0       0
  3426 ;;      Temps:          6       0       0       0       0       0       0
  3427 ;;      Totals:        12       0       0       0       0       0       0
  3428 ;;Total ram usage:       12 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    4
  3431 ;; This function calls:
  3432 ;;		Nothing
  3433 ;; This function is called by:
  3434 ;;		_CRCcheck
  3435 ;;		_AKNAK
  3436 ;; This function uses a non-reentrant model
  3437 ;;
  3438                           
  3439                           	psect	text13
  3440  0005E2                     __ptext13:
  3441                           	opt stack 0
  3442  0005E2                     _crcBufS_get:
  3443                           	opt stack 23
  3444                           
  3445                           ;FastTransfer.c: 354: if (time >= 5) {
  3446                           
  3447                           ;incstack = 0
  3448  0005E2  0E04               	movlw	4
  3449  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  3450  0005E6  D002               	goto	l3170
  3451                           
  3452                           ;FastTransfer.c: 355: time = 5 - 1;
  3453  0005E8  0E04               	movlw	4
  3454  0005EA  6E1D               	movwf	crcBufS_get@time,c
  3455  0005EC                     l3170:
  3456                           
  3457                           ;FastTransfer.c: 356: }
  3458                           ;FastTransfer.c: 357: if (space >= 3) {
  3459  0005EC  0E02               	movlw	2
  3460  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  3461  0005F0  D002               	goto	l3174
  3462                           
  3463                           ;FastTransfer.c: 358: space = 3 - 1;
  3464  0005F2  0E02               	movlw	2
  3465  0005F4  6E1E               	movwf	crcBufS_get@space,c
  3466  0005F6                     l3174:
  3467                           
  3468                           ;FastTransfer.c: 359: }
  3469                           ;FastTransfer.c: 360: time = time + 1;
  3470  0005F6  281D               	incf	crcBufS_get@time,w,c
  3471  0005F8  6E1D               	movwf	crcBufS_get@time,c
  3472                           
  3473                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3474  0005FA  501D               	movf	crcBufS_get@time,w,c
  3475  0005FC  0D03               	mullw	3
  3476  0005FE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3477  000602  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3478                           
  3479                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3480  000606  EE20 F00F          	lfsr	2,15
  3481  00060A  501B               	movf	crcBufS_get@_this,w,c
  3482  00060C  26D9               	addwf	fsr2l,f,c
  3483  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  3484  000610  22DA               	addwfc	fsr2h,f,c
  3485  000612  5025               	movf	crcBufS_get@wantedTime,w,c
  3486  000614  5CDE               	subwf	postinc2,w,c
  3487  000616  50DE               	movf	postinc2,w,c
  3488  000618  0A80               	xorlw	128
  3489  00061A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3490  00061C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3491  00061E  0A80               	xorlw	128
  3492  000620  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3493  000622  B0D8               	btfsc	status,0,c
  3494  000624  D02A               	goto	l3186
  3495                           
  3496                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3497  000626  EE20 F00F          	lfsr	2,15
  3498  00062A  501B               	movf	crcBufS_get@_this,w,c
  3499  00062C  26D9               	addwf	fsr2l,f,c
  3500  00062E  501C               	movf	crcBufS_get@_this+1,w,c
  3501  000630  22DA               	addwfc	fsr2h,f,c
  3502  000632  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3503  000636  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3504  00063A  1E1F               	comf	??_crcBufS_get,f,c
  3505  00063C  1E20               	comf	??_crcBufS_get+1,f,c
  3506  00063E  4A1F               	infsnz	??_crcBufS_get,f,c
  3507  000640  2A20               	incf	??_crcBufS_get+1,f,c
  3508  000642  5025               	movf	crcBufS_get@wantedTime,w,c
  3509  000644  261F               	addwf	??_crcBufS_get,f,c
  3510  000646  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3511  000648  2220               	addwfc	??_crcBufS_get+1,f,c
  3512  00064A  1E1F               	comf	??_crcBufS_get,f,c
  3513  00064C  1E20               	comf	??_crcBufS_get+1,f,c
  3514  00064E  4A1F               	infsnz	??_crcBufS_get,f,c
  3515  000650  2A20               	incf	??_crcBufS_get+1,f,c
  3516  000652  0E0F               	movlw	15
  3517  000654  241F               	addwf	??_crcBufS_get,w,c
  3518  000656  6E25               	movwf	crcBufS_get@wantedTime,c
  3519  000658  0E00               	movlw	0
  3520  00065A  2020               	addwfc	??_crcBufS_get+1,w,c
  3521  00065C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3522                           
  3523                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3524  00065E  501E               	movf	crcBufS_get@space,w,c
  3525  000660  2425               	addwf	crcBufS_get@wantedTime,w,c
  3526  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3527  000664  0E00               	movlw	0
  3528  000666  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3529  000668  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3530  00066A  501F               	movf	??_crcBufS_get,w,c
  3531  00066C  241B               	addwf	crcBufS_get@_this,w,c
  3532  00066E  6ED9               	movwf	fsr2l,c
  3533  000670  5020               	movf	??_crcBufS_get+1,w,c
  3534  000672  201C               	addwfc	crcBufS_get@_this+1,w,c
  3535  000674  6EDA               	movwf	fsr2h,c
  3536  000676  50DF               	movf	indf2,w,c
  3537                           
  3538                           ;FastTransfer.c: 365: } else {
  3539  000678  0012               	return	
  3540  00067A                     l3186:
  3541                           
  3542                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3543  00067A  EE20 F00F          	lfsr	2,15
  3544  00067E  501B               	movf	crcBufS_get@_this,w,c
  3545  000680  26D9               	addwf	fsr2l,f,c
  3546  000682  501C               	movf	crcBufS_get@_this+1,w,c
  3547  000684  22DA               	addwfc	fsr2h,f,c
  3548  000686  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3549  00068A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3550  00068E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3551  000692  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3552  000696  1E21               	comf	??_crcBufS_get+2,f,c
  3553  000698  1E22               	comf	??_crcBufS_get+3,f,c
  3554  00069A  4A21               	infsnz	??_crcBufS_get+2,f,c
  3555  00069C  2A22               	incf	??_crcBufS_get+3,f,c
  3556  00069E  501E               	movf	crcBufS_get@space,w,c
  3557  0006A0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3558  0006A2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3559  0006A4  5021               	movf	??_crcBufS_get+2,w,c
  3560  0006A6  2623               	addwf	??_crcBufS_get+4,f,c
  3561  0006A8  5022               	movf	??_crcBufS_get+3,w,c
  3562  0006AA  2224               	addwfc	??_crcBufS_get+5,f,c
  3563  0006AC  501F               	movf	??_crcBufS_get,w,c
  3564  0006AE  2623               	addwf	??_crcBufS_get+4,f,c
  3565  0006B0  5020               	movf	??_crcBufS_get+1,w,c
  3566  0006B2  2224               	addwfc	??_crcBufS_get+5,f,c
  3567  0006B4  5023               	movf	??_crcBufS_get+4,w,c
  3568  0006B6  241B               	addwf	crcBufS_get@_this,w,c
  3569  0006B8  6ED9               	movwf	fsr2l,c
  3570  0006BA  5024               	movf	??_crcBufS_get+5,w,c
  3571  0006BC  201C               	addwfc	crcBufS_get@_this+1,w,c
  3572  0006BE  6EDA               	movwf	fsr2h,c
  3573  0006C0  50DF               	movf	indf2,w,c
  3574  0006C2  0012               	return	
  3575  0006C4                     __end_of_crcBufS_get:
  3576                           	opt stack 0
  3577                           tblptru	equ	0xFF8
  3578                           tblptrh	equ	0xFF7
  3579                           tblptrl	equ	0xFF6
  3580                           tablat	equ	0xFF5
  3581                           prodh	equ	0xFF4
  3582                           prodl	equ	0xFF3
  3583                           intcon	equ	0xFF2
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           indf2	equ	0xFDF
  3589                           postinc2	equ	0xFDE
  3590                           postdec2	equ	0xFDD
  3591                           plusw2	equ	0xFDB
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596 ;; *************** function _CRC8 *****************
  3597 ;; Defined at:
  3598 ;;		line 34 in file "FastTransfer.c"
  3599 ;; Parameters:    Size  Location     Type
  3600 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3601 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1421(3), receiveData@holder(3), rx_buffer(200), 
  3602 ;;		 -> ring_buffer(206), NULL(0), 
  3603 ;;  len             1   28[COMRAM] unsigned char 
  3604 ;; Auto vars:     Size  Location     Type
  3605 ;;  sum             1   29[COMRAM] unsigned char 
  3606 ;;  tempI           1   31[COMRAM] unsigned char 
  3607 ;;  extract         1   30[COMRAM] unsigned char 
  3608 ;;  crc             1   32[COMRAM] unsigned char 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      unsigned char 
  3611 ;; Registers used:
  3612 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3618 ;;      Params:         3       0       0       0       0       0       0
  3619 ;;      Locals:         4       0       0       0       0       0       0
  3620 ;;      Temps:          0       0       0       0       0       0       0
  3621 ;;      Totals:         7       0       0       0       0       0       0
  3622 ;;Total ram usage:        7 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    4
  3625 ;; This function calls:
  3626 ;;		Nothing
  3627 ;; This function is called by:
  3628 ;;		_sendData
  3629 ;;		_receiveData
  3630 ;;		_CRCcheck
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text14
  3635  000F9E                     __ptext14:
  3636                           	opt stack 0
  3637  000F9E                     _CRC8:
  3638                           	opt stack 23
  3639                           
  3640                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3641                           
  3642                           ;incstack = 0
  3643  000F9E  0E00               	movlw	0
  3644  000FA0  6E21               	movwf	CRC8@crc,c
  3645                           
  3646                           ;FastTransfer.c: 36: while (len--) {
  3647  000FA2  D01C               	goto	l3132
  3648  000FA4                     l3116:
  3649                           
  3650                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3651  000FA4  C01B  FFD9         	movff	CRC8@data,fsr2l
  3652  000FA8  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3653  000FAC  50DF               	movf	indf2,w,c
  3654  000FAE  6E1F               	movwf	CRC8@extract,c
  3655  000FB0  4A1B               	infsnz	CRC8@data,f,c
  3656  000FB2  2A1C               	incf	CRC8@data+1,f,c
  3657                           
  3658                           ;FastTransfer.c: 38: unsigned char tempI;
  3659                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3660  000FB4  0E08               	movlw	8
  3661  000FB6  6E20               	movwf	CRC8@tempI,c
  3662  000FB8  D00E               	goto	l3130
  3663  000FBA                     l3122:
  3664                           
  3665                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3666  000FBA  5021               	movf	CRC8@crc,w,c
  3667  000FBC  181F               	xorwf	CRC8@extract,w,c
  3668  000FBE  0B01               	andlw	1
  3669  000FC0  6E1E               	movwf	CRC8@sum,c
  3670                           
  3671                           ;FastTransfer.c: 41: crc >>= 1;
  3672  000FC2  90D8               	bcf	status,0,c
  3673  000FC4  3221               	rrcf	CRC8@crc,f,c
  3674                           
  3675                           ;FastTransfer.c: 42: if (sum) {
  3676  000FC6  501E               	movf	CRC8@sum,w,c
  3677  000FC8  B4D8               	btfsc	status,2,c
  3678  000FCA  D002               	goto	l397
  3679                           
  3680                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3681  000FCC  0E8C               	movlw	140
  3682  000FCE  1A21               	xorwf	CRC8@crc,f,c
  3683  000FD0                     l397:
  3684                           
  3685                           ;FastTransfer.c: 44: }
  3686                           ;FastTransfer.c: 45: extract >>= 1;
  3687  000FD0  90D8               	bcf	status,0,c
  3688  000FD2  321F               	rrcf	CRC8@extract,f,c
  3689  000FD4  0620               	decf	CRC8@tempI,f,c
  3690  000FD6                     l3130:
  3691  000FD6  5020               	movf	CRC8@tempI,w,c
  3692  000FD8  A4D8               	btfss	status,2,c
  3693  000FDA  D7EF               	goto	l3122
  3694  000FDC                     l3132:
  3695  000FDC  061D               	decf	CRC8@len,f,c
  3696  000FDE  281D               	incf	CRC8@len,w,c
  3697  000FE0  A4D8               	btfss	status,2,c
  3698  000FE2  D7E0               	goto	l3116
  3699                           
  3700                           ;FastTransfer.c: 46: }
  3701                           ;FastTransfer.c: 47: }
  3702                           ;FastTransfer.c: 48: return crc;
  3703  000FE4  5021               	movf	CRC8@crc,w,c
  3704  000FE6  0012               	return	
  3705  000FE8                     __end_of_CRC8:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           postinc0	equ	0xFEE
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           fsr1l	equ	0xFE1
  3718                           indf2	equ	0xFDF
  3719                           postinc2	equ	0xFDE
  3720                           postdec2	equ	0xFDD
  3721                           plusw2	equ	0xFDB
  3722                           fsr2h	equ	0xFDA
  3723                           fsr2l	equ	0xFD9
  3724                           status	equ	0xFD8
  3725                           
  3726 ;; *************** function _SetCharger *****************
  3727 ;; Defined at:
  3728 ;;		line 58 in file "Functions.c"
  3729 ;; Parameters:    Size  Location     Type
  3730 ;;  mode            1    wreg     unsigned char 
  3731 ;;  Current         1    0[BANK0 ] unsigned char 
  3732 ;;  Voltage         1    1[BANK0 ] unsigned char 
  3733 ;; Auto vars:     Size  Location     Type
  3734 ;;  mode            1    2[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3744 ;;      Params:         0       2       0       0       0       0       0
  3745 ;;      Locals:         0       1       0       0       0       0       0
  3746 ;;      Temps:          0       0       0       0       0       0       0
  3747 ;;      Totals:         0       3       0       0       0       0       0
  3748 ;;Total ram usage:        3 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:    7
  3751 ;; This function calls:
  3752 ;;		_SetMux
  3753 ;;		_printf
  3754 ;; This function is called by:
  3755 ;;		_updateComms
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text15
  3760  000DE0                     __ptext15:
  3761                           	opt stack 0
  3762  000DE0                     _SetCharger:
  3763                           	opt stack 22
  3764                           
  3765                           ;incstack = 0
  3766                           ;SetCharger@mode stored from wreg
  3767  000DE0  0100               	movlb	0	; () banked
  3768  000DE2  6FC2               	movwf	SetCharger@mode& (0+255),b
  3769                           
  3770                           ;Functions.c: 59: if(mode == 1){
  3771  000DE4  0100               	movlb	0	; () banked
  3772  000DE6  05C2               	decf	SetCharger@mode& (0+255),w,b
  3773  000DE8  A4D8               	btfss	status,2,c
  3774  000DEA  D016               	goto	l3462
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;Functions.c: 61: SetMux(1);
  3778  000DEC  0E01               	movlw	1
  3779  000DEE  EC11  F008         	call	_SetMux
  3780                           
  3781                           ;Functions.c: 64: ChargerData[2] = 001;
  3782  000DF2  0E01               	movlw	1
  3783  000DF4  0100               	movlb	0	; () banked
  3784  000DF6  6FDB               	movwf	(_ChargerData+2)& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;Functions.c: 65: ChargerData[4] = 000;
  3788  000DF8  0E00               	movlw	0
  3789  000DFA  0100               	movlb	0	; () banked
  3790  000DFC  6FDD               	movwf	(_ChargerData+4)& (0+255),b
  3791                           
  3792                           ; BSR set to: 0
  3793                           ;Functions.c: 66: ChargerData[6] = 001;
  3794  000DFE  0E01               	movlw	1
  3795  000E00  0100               	movlb	0	; () banked
  3796  000E02  6FDF               	movwf	(_ChargerData+6)& (0+255),b
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;Functions.c: 68: printf("%s",ChargerData);
  3800  000E04  0EFB               	movlw	low STR_1
  3801  000E06  6E1D               	movwf	printf@f,c
  3802  000E08  0E7F               	movlw	high STR_1
  3803  000E0A  6E1E               	movwf	printf@f+1,c
  3804  000E0C  0ED9               	movlw	low _ChargerData
  3805  000E0E  6E1F               	movwf	?_printf+2,c
  3806  000E10  0E00               	movlw	high _ChargerData
  3807  000E12  6E20               	movwf	?_printf+3,c
  3808  000E14  EC39  F004         	call	_printf	;wreg free
  3809  000E18                     l3462:
  3810                           
  3811                           ;Functions.c: 69: }
  3812                           ;Functions.c: 70: if(mode == 2){
  3813  000E18  0E02               	movlw	2
  3814  000E1A  0100               	movlb	0	; () banked
  3815  000E1C  19C2               	xorwf	SetCharger@mode& (0+255),w,b
  3816  000E1E  A4D8               	btfss	status,2,c
  3817  000E20  0012               	return	
  3818                           
  3819                           ; BSR set to: 0
  3820                           ;Functions.c: 72: SetMux(1);
  3821  000E22  0E01               	movlw	1
  3822  000E24  EC11  F008         	call	_SetMux
  3823                           
  3824                           ;Functions.c: 74: ChargerData[2] = Current;
  3825  000E28  C0C0  F0DB         	movff	SetCharger@Current,_ChargerData+2
  3826                           
  3827                           ;Functions.c: 75: ChargerData[4] = Voltage;
  3828  000E2C  C0C1  F0DD         	movff	SetCharger@Voltage,_ChargerData+4
  3829                           
  3830                           ;Functions.c: 77: ChargerData[6] = (Current + Voltage)%1,000;
  3831  000E30  0E00               	movlw	0
  3832  000E32  0100               	movlb	0	; () banked
  3833  000E34  6FDF               	movwf	(_ChargerData+6)& (0+255),b
  3834                           
  3835                           ; BSR set to: 0
  3836                           ;Functions.c: 79: printf("%s",ChargerData);
  3837  000E36  0EFB               	movlw	low STR_1
  3838  000E38  6E1D               	movwf	printf@f,c
  3839  000E3A  0E7F               	movlw	high STR_1
  3840  000E3C  6E1E               	movwf	printf@f+1,c
  3841  000E3E  0ED9               	movlw	low _ChargerData
  3842  000E40  6E1F               	movwf	?_printf+2,c
  3843  000E42  0E00               	movlw	high _ChargerData
  3844  000E44  6E20               	movwf	?_printf+3,c
  3845  000E46  EC39  F004         	call	_printf	;wreg free
  3846  000E4A  0012               	return	
  3847  000E4C                     __end_of_SetCharger:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           postdec1	equ	0xFE5
  3859                           fsr1l	equ	0xFE1
  3860                           indf2	equ	0xFDF
  3861                           postinc2	equ	0xFDE
  3862                           postdec2	equ	0xFDD
  3863                           plusw2	equ	0xFDB
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _printf *****************
  3869 ;; Defined at:
  3870 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3873 ;;		 -> STR_2(3), STR_1(3), 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  tmpval          4    0        struct .
  3876 ;;  cp              2   36[COMRAM] PTR const unsigned char 
  3877 ;;		 -> STR_3(7), ChargerData(9), 
  3878 ;;  ap              2   33[COMRAM] PTR void [1]
  3879 ;;		 -> ?_printf(2), 
  3880 ;;  len             2    0        unsigned int 
  3881 ;;  val             2    0        unsigned int 
  3882 ;;  c               1   35[COMRAM] char 
  3883 ;;  flag            1   32[COMRAM] unsigned char 
  3884 ;;  prec            1    0        char 
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  2   28[COMRAM] int 
  3887 ;; Registers used:
  3888 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3894 ;;      Params:         4       0       0       0       0       0       0
  3895 ;;      Locals:         6       0       0       0       0       0       0
  3896 ;;      Temps:          0       0       0       0       0       0       0
  3897 ;;      Totals:        10       0       0       0       0       0       0
  3898 ;;Total ram usage:       10 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    6
  3901 ;; This function calls:
  3902 ;;		_putch
  3903 ;; This function is called by:
  3904 ;;		_SetCharger
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text16
  3909  000872                     __ptext16:
  3910                           	opt stack 0
  3911  000872                     _printf:
  3912                           	opt stack 22
  3913                           
  3914                           ;doprnt.c: 466: va_list ap;
  3915                           ;doprnt.c: 499: signed char c;
  3916                           ;doprnt.c: 506: signed char prec;
  3917                           ;doprnt.c: 508: unsigned char flag;
  3918                           ;doprnt.c: 523: union {
  3919                           ;doprnt.c: 524: unsigned long vd;
  3920                           ;doprnt.c: 525: double integ;
  3921                           ;doprnt.c: 526: } tmpval;
  3922                           ;doprnt.c: 528: unsigned int val;
  3923                           ;doprnt.c: 529: unsigned len;
  3924                           ;doprnt.c: 530: const char * cp;
  3925                           ;doprnt.c: 533: *ap = __va_start();
  3926                           
  3927                           ;incstack = 0
  3928  000872  0E1F               	movlw	low (?_printf+2)
  3929  000874  6E22               	movwf	printf@ap,c
  3930  000876  0E00               	movlw	high (?_printf+2)
  3931  000878  6E23               	movwf	printf@ap+1,c
  3932                           
  3933                           ;doprnt.c: 536: while(c = *f++) {
  3934  00087A  D058               	goto	l3290
  3935  00087C                     l3266:
  3936                           
  3937                           ;doprnt.c: 538: if(c != '%')
  3938  00087C  0E25               	movlw	37
  3939  00087E  1824               	xorwf	printf@c,w,c
  3940  000880  B4D8               	btfsc	status,2,c
  3941  000882  D004               	goto	l3270
  3942                           
  3943                           ;doprnt.c: 540: {
  3944                           ;doprnt.c: 541: (putch(c) );
  3945  000884  5024               	movf	printf@c,w,c
  3946  000886  EC97  F009         	call	_putch
  3947                           
  3948                           ;doprnt.c: 542: continue;
  3949  00088A  D050               	goto	l3290
  3950  00088C                     l3270:
  3951                           
  3952                           ;doprnt.c: 543: }
  3953                           ;doprnt.c: 548: flag = 0;
  3954  00088C  0E00               	movlw	0
  3955  00088E  6E21               	movwf	printf@flag,c
  3956                           
  3957                           ;doprnt.c: 635: switch(c = *f++) {
  3958  000890  D03D               	goto	l3288
  3959  000892                     l3272:
  3960                           
  3961                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3962  000892  C022  FFD9         	movff	printf@ap,fsr2l
  3963  000896  C023  FFDA         	movff	printf@ap+1,fsr2h
  3964  00089A  CFDE F025          	movff	postinc2,printf@cp
  3965  00089E  CFDD F026          	movff	postdec2,printf@cp+1
  3966  0008A2  0E02               	movlw	2
  3967  0008A4  2622               	addwf	printf@ap,f,c
  3968  0008A6  0E00               	movlw	0
  3969  0008A8  2223               	addwfc	printf@ap+1,f,c
  3970                           
  3971                           ;doprnt.c: 740: if(!cp)
  3972  0008AA  5025               	movf	printf@cp,w,c
  3973  0008AC  1026               	iorwf	printf@cp+1,w,c
  3974  0008AE  A4D8               	btfss	status,2,c
  3975  0008B0  D019               	goto	l3284
  3976                           
  3977                           ;doprnt.c: 741: cp = "(null)";
  3978  0008B2  0EF4               	movlw	low STR_3
  3979  0008B4  6E25               	movwf	printf@cp,c
  3980  0008B6  0E7F               	movlw	high STR_3
  3981  0008B8  6E26               	movwf	printf@cp+1,c
  3982                           
  3983                           ;doprnt.c: 777: while(*cp)
  3984  0008BA  D014               	goto	l3284
  3985  0008BC                     l3280:
  3986                           
  3987                           ;doprnt.c: 778: (putch(*cp++) );
  3988  0008BC  C025  FFF6         	movff	printf@cp,tblptrl
  3989  0008C0  C026  FFF7         	movff	printf@cp+1,tblptrh
  3990  0008C4  6AF8               	clrf	tblptru,c
  3991  0008C6  0E05               	movlw	(high __ramtop+-1)
  3992  0008C8  64F7               	cpfsgt	tblptrh,c
  3993  0008CA  D003               	bra	u2327
  3994  0008CC  0008               	tblrd		*
  3995  0008CE  50F5               	movf	tablat,w,c
  3996  0008D0  D005               	bra	u2320
  3997  0008D2                     u2327:
  3998  0008D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3999  0008D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  4000  0008DA  50EF               	movf	indf0,w,c
  4001  0008DC                     u2320:
  4002  0008DC  EC97  F009         	call	_putch
  4003  0008E0  4A25               	infsnz	printf@cp,f,c
  4004  0008E2  2A26               	incf	printf@cp+1,f,c
  4005  0008E4                     l3284:
  4006  0008E4  C025  FFF6         	movff	printf@cp,tblptrl
  4007  0008E8  C026  FFF7         	movff	printf@cp+1,tblptrh
  4008  0008EC  6AF8               	clrf	tblptru,c
  4009  0008EE  0E05               	movlw	(high __ramtop+-1)
  4010  0008F0  64F7               	cpfsgt	tblptrh,c
  4011  0008F2  D003               	bra	u2337
  4012  0008F4  0008               	tblrd		*
  4013  0008F6  50F5               	movf	tablat,w,c
  4014  0008F8  D005               	bra	u2330
  4015  0008FA                     u2337:
  4016  0008FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  4017  0008FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  4018  000902  50EF               	movf	indf0,w,c
  4019  000904                     u2330:
  4020  000904  0900               	iorlw	0
  4021  000906  B4D8               	btfsc	status,2,c
  4022  000908  D011               	goto	l3290
  4023  00090A  D7D8               	goto	l3280
  4024  00090C                     l3288:
  4025  00090C  C01D  FFF6         	movff	printf@f,tblptrl
  4026  000910  C01E  FFF7         	movff	printf@f+1,tblptrh
  4027  000914  4A1D               	infsnz	printf@f,f,c
  4028  000916  2A1E               	incf	printf@f+1,f,c
  4029  000918                     	if	0	;tblptru may be non-zero
  4030  000918                     	endif
  4031  000918                     	if	0	;tblptru may be non-zero
  4032  000918                     	endif
  4033  000918  0008               	tblrd		*
  4034  00091A  CFF5 F024          	movff	tablat,printf@c
  4035  00091E  5024               	movf	printf@c,w,c
  4036                           
  4037                           ; Switch size 1, requested type "space"
  4038                           ; Number of cases is 2, Range of values is 0 to 115
  4039                           ; switch strategies available:
  4040                           ; Name         Instructions Cycles
  4041                           ; simple_byte            7     4 (average)
  4042                           ;	Chosen strategy is simple_byte
  4043  000920  0A00               	xorlw	0	; case 0
  4044  000922  B4D8               	btfsc	status,2,c
  4045  000924  0012               	return	
  4046  000926  0A73               	xorlw	115	; case 115
  4047  000928  B4D8               	btfsc	status,2,c
  4048  00092A  D7B3               	goto	l3272
  4049  00092C                     l3290:
  4050  00092C  C01D  FFF6         	movff	printf@f,tblptrl
  4051  000930  C01E  FFF7         	movff	printf@f+1,tblptrh
  4052  000934  4A1D               	infsnz	printf@f,f,c
  4053  000936  2A1E               	incf	printf@f+1,f,c
  4054  000938                     	if	0	;tblptru may be non-zero
  4055  000938                     	endif
  4056  000938                     	if	0	;tblptru may be non-zero
  4057  000938                     	endif
  4058  000938  0008               	tblrd		*
  4059  00093A  CFF5 F024          	movff	tablat,printf@c
  4060  00093E  5024               	movf	printf@c,w,c
  4061  000940  B4D8               	btfsc	status,2,c
  4062  000942  0012               	return	
  4063  000944  D79B               	goto	l3266
  4064  000946                     __end_of_printf:
  4065                           	opt stack 0
  4066                           tblptru	equ	0xFF8
  4067                           tblptrh	equ	0xFF7
  4068                           tblptrl	equ	0xFF6
  4069                           tablat	equ	0xFF5
  4070                           prodh	equ	0xFF4
  4071                           prodl	equ	0xFF3
  4072                           intcon	equ	0xFF2
  4073                           indf0	equ	0xFEF
  4074                           postinc0	equ	0xFEE
  4075                           fsr0h	equ	0xFEA
  4076                           fsr0l	equ	0xFE9
  4077                           wreg	equ	0xFE8
  4078                           postdec1	equ	0xFE5
  4079                           fsr1l	equ	0xFE1
  4080                           indf2	equ	0xFDF
  4081                           postinc2	equ	0xFDE
  4082                           postdec2	equ	0xFDD
  4083                           plusw2	equ	0xFDB
  4084                           fsr2h	equ	0xFDA
  4085                           fsr2l	equ	0xFD9
  4086                           status	equ	0xFD8
  4087                           
  4088 ;; *************** function _putch *****************
  4089 ;; Defined at:
  4090 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  txData          1    wreg     unsigned char 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  txData          1   27[COMRAM] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;                  1    wreg      void 
  4097 ;; Registers used:
  4098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4104 ;;      Params:         0       0       0       0       0       0       0
  4105 ;;      Locals:         1       0       0       0       0       0       0
  4106 ;;      Temps:          0       0       0       0       0       0       0
  4107 ;;      Totals:         1       0       0       0       0       0       0
  4108 ;;Total ram usage:        1 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    5
  4111 ;; This function calls:
  4112 ;;		_EUSART2_Write
  4113 ;; This function is called by:
  4114 ;;		_printf
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           	psect	text17
  4119  00132E                     __ptext17:
  4120                           	opt stack 0
  4121  00132E                     _putch:
  4122                           	opt stack 22
  4123                           
  4124                           ;incstack = 0
  4125                           ;putch@txData stored from wreg
  4126  00132E  6E1C               	movwf	putch@txData,c
  4127                           
  4128                           ;eusart2.c: 152: EUSART2_Write(txData);
  4129  001330  501C               	movf	putch@txData,w,c
  4130  001332  ECF4  F007         	call	_EUSART2_Write
  4131  001336  0012               	return		;funcret
  4132  001338                     __end_of_putch:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           intcon	equ	0xFF2
  4141                           indf0	equ	0xFEF
  4142                           postinc0	equ	0xFEE
  4143                           fsr0h	equ	0xFEA
  4144                           fsr0l	equ	0xFE9
  4145                           wreg	equ	0xFE8
  4146                           postdec1	equ	0xFE5
  4147                           fsr1l	equ	0xFE1
  4148                           indf2	equ	0xFDF
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           plusw2	equ	0xFDB
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _EUSART2_Write *****************
  4157 ;; Defined at:
  4158 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  txData          1    wreg     unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  txData          1   26[COMRAM] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  1    wreg      void 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4172 ;;      Params:         0       0       0       0       0       0       0
  4173 ;;      Locals:         1       0       0       0       0       0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0
  4175 ;;      Totals:         1       0       0       0       0       0       0
  4176 ;;Total ram usage:        1 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    4
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_putch
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text18
  4187  000FE8                     __ptext18:
  4188                           	opt stack 0
  4189  000FE8                     _EUSART2_Write:
  4190                           	opt stack 22
  4191                           
  4192                           ;incstack = 0
  4193                           ;EUSART2_Write@txData stored from wreg
  4194  000FE8  6E1B               	movwf	EUSART2_Write@txData,c
  4195  000FEA                     l3084:
  4196  000FEA  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  4197  000FEC  B4D8               	btfsc	status,2,c
  4198  000FEE  D7FD               	goto	l3084
  4199                           
  4200                           ;eusart2.c: 132: }
  4201                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  4202  000FF0  B8A3               	btfsc	4003,4,c	;volatile
  4203  000FF2  D003               	goto	l85
  4204                           
  4205                           ;eusart2.c: 135: TXREG2 = txData;
  4206  000FF4  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4207                           
  4208                           ;eusart2.c: 136: } else {
  4209  000FF8  D012               	goto	l3098
  4210  000FFA                     l85:
  4211                           
  4212                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  4213  000FFA  98A3               	bcf	4003,4,c	;volatile
  4214                           
  4215                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  4216  000FFC  5038               	movf	_eusart2TxHead,w,c
  4217  000FFE  0D01               	mullw	1
  4218  001000  0E90               	movlw	low _eusart2TxBuffer
  4219  001002  24F3               	addwf	prodl,w,c
  4220  001004  6ED9               	movwf	fsr2l,c
  4221  001006  0E00               	movlw	high _eusart2TxBuffer
  4222  001008  20F4               	addwfc	prodh,w,c
  4223  00100A  6EDA               	movwf	fsr2h,c
  4224  00100C  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  4225  001010  2A38               	incf	_eusart2TxHead,f,c
  4226                           
  4227                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  4228  001012  0E07               	movlw	7
  4229  001014  6438               	cpfsgt	_eusart2TxHead,c
  4230  001016  D002               	goto	l3096
  4231                           
  4232                           ;eusart2.c: 140: eusart2TxHead = 0;
  4233  001018  0E00               	movlw	0
  4234  00101A  6E38               	movwf	_eusart2TxHead,c
  4235  00101C                     l3096:
  4236                           
  4237                           ;eusart2.c: 141: }
  4238                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  4239  00101C  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4240  00101E                     l3098:
  4241                           
  4242                           ;eusart2.c: 143: }
  4243                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  4244  00101E  88A3               	bsf	4003,4,c	;volatile
  4245  001020  0012               	return		;funcret
  4246  001022                     __end_of_EUSART2_Write:
  4247                           	opt stack 0
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           intcon	equ	0xFF2
  4255                           indf0	equ	0xFEF
  4256                           postinc0	equ	0xFEE
  4257                           fsr0h	equ	0xFEA
  4258                           fsr0l	equ	0xFE9
  4259                           wreg	equ	0xFE8
  4260                           postdec1	equ	0xFE5
  4261                           fsr1l	equ	0xFE1
  4262                           indf2	equ	0xFDF
  4263                           postinc2	equ	0xFDE
  4264                           postdec2	equ	0xFDD
  4265                           plusw2	equ	0xFDB
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function _SetMux *****************
  4271 ;; Defined at:
  4272 ;;		line 90 in file "Functions.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  channel         1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  channel         1   26[COMRAM] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  1    wreg      void 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4286 ;;      Params:         0       0       0       0       0       0       0
  4287 ;;      Locals:         1       0       0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0
  4289 ;;      Totals:         1       0       0       0       0       0       0
  4290 ;;Total ram usage:        1 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    4
  4293 ;; This function calls:
  4294 ;;		Nothing
  4295 ;; This function is called by:
  4296 ;;		_SetCharger
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           	psect	text19
  4301  001022                     __ptext19:
  4302                           	opt stack 0
  4303  001022                     _SetMux:
  4304                           	opt stack 24
  4305                           
  4306                           ;incstack = 0
  4307                           ;SetMux@channel stored from wreg
  4308  001022  6E1B               	movwf	SetMux@channel,c
  4309                           
  4310                           ;Functions.c: 91: switch (channel){
  4311  001024  D00C               	goto	l3262
  4312  001026                     l660:
  4313  001026  908A               	bcf	3978,0,c	;volatile
  4314                           
  4315                           ;Functions.c: 94: do { LATB1 = 0; } while(0);
  4316  001028  928A               	bcf	3978,1,c	;volatile
  4317                           
  4318                           ;Functions.c: 95: break;
  4319  00102A  0012               	return	
  4320  00102C                     l666:
  4321  00102C  808A               	bsf	3978,0,c	;volatile
  4322                           
  4323                           ;Functions.c: 98: do { LATB1 = 0; } while(0);
  4324  00102E  928A               	bcf	3978,1,c	;volatile
  4325                           
  4326                           ;Functions.c: 99: break;
  4327  001030  0012               	return	
  4328  001032                     l671:
  4329  001032  908A               	bcf	3978,0,c	;volatile
  4330                           
  4331                           ;Functions.c: 102: do { LATB1 = 1; } while(0);
  4332  001034  828A               	bsf	3978,1,c	;volatile
  4333                           
  4334                           ;Functions.c: 103: break;
  4335  001036  0012               	return	
  4336  001038                     l676:
  4337  001038  808A               	bsf	3978,0,c	;volatile
  4338                           
  4339                           ;Functions.c: 106: do { LATB1 = 1; } while(0);
  4340  00103A  828A               	bsf	3978,1,c	;volatile
  4341                           
  4342                           ;Functions.c: 111: }
  4343                           
  4344                           ;Functions.c: 110: break;
  4345                           
  4346                           ;Functions.c: 108: default:
  4347                           
  4348                           ;Functions.c: 107: break;
  4349  00103C  0012               	return	
  4350  00103E                     l3262:
  4351  00103E  501B               	movf	SetMux@channel,w,c
  4352                           
  4353                           ; Switch size 1, requested type "space"
  4354                           ; Number of cases is 4, Range of values is 1 to 4
  4355                           ; switch strategies available:
  4356                           ; Name         Instructions Cycles
  4357                           ; simple_byte           13     7 (average)
  4358                           ;	Chosen strategy is simple_byte
  4359  001040  0A01               	xorlw	1	; case 1
  4360  001042  B4D8               	btfsc	status,2,c
  4361  001044  D7F0               	goto	l660
  4362  001046  0A03               	xorlw	3	; case 2
  4363  001048  B4D8               	btfsc	status,2,c
  4364  00104A  D7F0               	goto	l666
  4365  00104C  0A01               	xorlw	1	; case 3
  4366  00104E  B4D8               	btfsc	status,2,c
  4367  001050  D7F0               	goto	l671
  4368  001052  0A07               	xorlw	7	; case 4
  4369  001054  A4D8               	btfss	status,2,c
  4370  001056  0012               	return	
  4371  001058  D7EF               	goto	l676
  4372  00105A                     __end_of_SetMux:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           indf0	equ	0xFEF
  4382                           postinc0	equ	0xFEE
  4383                           fsr0h	equ	0xFEA
  4384                           fsr0l	equ	0xFE9
  4385                           wreg	equ	0xFE8
  4386                           postdec1	equ	0xFE5
  4387                           fsr1l	equ	0xFE1
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           plusw2	equ	0xFDB
  4392                           fsr2h	equ	0xFDA
  4393                           fsr2l	equ	0xFD9
  4394                           status	equ	0xFD8
  4395                           
  4396 ;; *************** function _Precharge *****************
  4397 ;; Defined at:
  4398 ;;		line 25 in file "Functions.c"
  4399 ;; Parameters:    Size  Location     Type
  4400 ;;  OnOff           1    wreg     unsigned char 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  OnOff           1    0[BANK0 ] unsigned char 
  4403 ;;  i               2    3[BANK0 ] int 
  4404 ;;  i               2    1[BANK0 ] int 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      void 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4414 ;;      Params:         0       0       0       0       0       0       0
  4415 ;;      Locals:         0       5       0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0
  4417 ;;      Totals:         0       5       0       0       0       0       0
  4418 ;;Total ram usage:        5 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    5
  4421 ;; This function calls:
  4422 ;;		_Delay
  4423 ;; This function is called by:
  4424 ;;		_updateComms
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           	psect	text20
  4429  000A8E                     __ptext20:
  4430                           	opt stack 0
  4431  000A8E                     _Precharge:
  4432                           	opt stack 24
  4433                           
  4434                           ;incstack = 0
  4435                           ;Precharge@OnOff stored from wreg
  4436  000A8E  0100               	movlb	0	; () banked
  4437  000A90  6FC0               	movwf	Precharge@OnOff& (0+255),b
  4438                           
  4439                           ;Functions.c: 26: if(OnOff){
  4440  000A92  0100               	movlb	0	; () banked
  4441  000A94  51C0               	movf	Precharge@OnOff& (0+255),w,b
  4442  000A96  0100               	movlb	0	; () banked
  4443  000A98  B4D8               	btfsc	status,2,c
  4444  000A9A  D024               	goto	l638
  4445                           
  4446                           ; BSR set to: 0
  4447                           
  4448                           ;Functions.c: 27: do { LATC1 = 1; } while(0);
  4449  000A9C  828B               	bsf	3979,1,c	;volatile
  4450                           
  4451                           ; BSR set to: 0
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;Functions.c: 28: do { LATB3 = 1; } while(0);
  4455  000A9E  868A               	bsf	3978,3,c	;volatile
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;Functions.c: 29: for(int i = 0;i<5;i++){
  4459                           
  4460                           ; BSR set to: 0
  4461  000AA0  0E00               	movlw	0
  4462  000AA2  0100               	movlb	0	; () banked
  4463  000AA4  6FC2               	movwf	(Precharge@i+1)& (0+255),b
  4464  000AA6  0E00               	movlw	0
  4465  000AA8  6FC1               	movwf	Precharge@i& (0+255),b
  4466  000AAA                     l3428:
  4467                           
  4468                           ; BSR set to: 0
  4469  000AAA  0100               	movlb	0	; () banked
  4470  000AAC  BFC2               	btfsc	(Precharge@i+1)& (0+255),7,b
  4471  000AAE  D008               	goto	l3432
  4472  000AB0  0100               	movlb	0	; () banked
  4473  000AB2  51C2               	movf	(Precharge@i+1)& (0+255),w,b
  4474  000AB4  E113               	bnz	l631
  4475  000AB6  0E05               	movlw	5
  4476  000AB8  0100               	movlb	0	; () banked
  4477  000ABA  5DC1               	subwf	Precharge@i& (0+255),w,b
  4478  000ABC  B0D8               	btfsc	status,0,c
  4479  000ABE  D00E               	goto	l631
  4480  000AC0                     l3432:
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;Functions.c: 30: Delay(1000);
  4484  000AC0  0EE8               	movlw	232
  4485  000AC2  6E1B               	movwf	Delay@wait,c
  4486  000AC4  0E03               	movlw	3
  4487  000AC6  6E1C               	movwf	Delay@wait+1,c
  4488  000AC8  0E00               	movlw	0
  4489  000ACA  6E1D               	movwf	Delay@wait+2,c
  4490  000ACC  0E00               	movlw	0
  4491  000ACE  6E1E               	movwf	Delay@wait+3,c
  4492  000AD0  ECA9  F007         	call	_Delay	;wreg free
  4493  000AD4  0100               	movlb	0	; () banked
  4494  000AD6  4BC1               	infsnz	Precharge@i& (0+255),f,b
  4495  000AD8  2BC2               	incf	(Precharge@i+1)& (0+255),f,b
  4496  000ADA  D7E7               	goto	l3428
  4497  000ADC                     l631:
  4498                           
  4499                           ; BSR set to: 0
  4500  000ADC  888A               	bsf	3978,4,c	;volatile
  4501                           
  4502                           ; BSR set to: 0
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;Functions.c: 33: do { LATC0 = 1; } while(0);
  4506  000ADE  808B               	bsf	3979,0,c	;volatile
  4507                           
  4508                           ; BSR set to: 0
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;Functions.c: 34: do { LATB5 = 1; } while(0);
  4512  000AE0  8A8A               	bsf	3978,5,c	;volatile
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;Functions.c: 35: }
  4516  000AE2  0012               	return	
  4517  000AE4                     l638:
  4518                           
  4519                           ; BSR set to: 0
  4520  000AE4  988A               	bcf	3978,4,c	;volatile
  4521                           
  4522                           ; BSR set to: 0
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;Functions.c: 39: do { LATB3 = 0; } while(0);
  4526  000AE6  968A               	bcf	3978,3,c	;volatile
  4527                           
  4528                           ; BSR set to: 0
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;Functions.c: 40: do { LATC0 = 0; } while(0);
  4532  000AE8  908B               	bcf	3979,0,c	;volatile
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;Functions.c: 41: for(int i = 0;i<5;i++){
  4536                           
  4537                           ; BSR set to: 0
  4538  000AEA  0E00               	movlw	0
  4539  000AEC  0100               	movlb	0	; () banked
  4540  000AEE  6FC4               	movwf	(Precharge@i_1701+1)& (0+255),b
  4541  000AF0  0E00               	movlw	0
  4542  000AF2  6FC3               	movwf	Precharge@i_1701& (0+255),b
  4543  000AF4                     l3440:
  4544                           
  4545                           ; BSR set to: 0
  4546  000AF4  0100               	movlb	0	; () banked
  4547  000AF6  BFC4               	btfsc	(Precharge@i_1701+1)& (0+255),7,b
  4548  000AF8  D008               	goto	l3444
  4549  000AFA  0100               	movlb	0	; () banked
  4550  000AFC  51C4               	movf	(Precharge@i_1701+1)& (0+255),w,b
  4551  000AFE  E113               	bnz	l646
  4552  000B00  0E05               	movlw	5
  4553  000B02  0100               	movlb	0	; () banked
  4554  000B04  5DC3               	subwf	Precharge@i_1701& (0+255),w,b
  4555  000B06  B0D8               	btfsc	status,0,c
  4556  000B08  D00E               	goto	l646
  4557  000B0A                     l3444:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;Functions.c: 42: Delay(1000);
  4561  000B0A  0EE8               	movlw	232
  4562  000B0C  6E1B               	movwf	Delay@wait,c
  4563  000B0E  0E03               	movlw	3
  4564  000B10  6E1C               	movwf	Delay@wait+1,c
  4565  000B12  0E00               	movlw	0
  4566  000B14  6E1D               	movwf	Delay@wait+2,c
  4567  000B16  0E00               	movlw	0
  4568  000B18  6E1E               	movwf	Delay@wait+3,c
  4569  000B1A  ECA9  F007         	call	_Delay	;wreg free
  4570  000B1E  0100               	movlb	0	; () banked
  4571  000B20  4BC3               	infsnz	Precharge@i_1701& (0+255),f,b
  4572  000B22  2BC4               	incf	(Precharge@i_1701+1)& (0+255),f,b
  4573  000B24  D7E7               	goto	l3440
  4574  000B26                     l646:
  4575                           
  4576                           ; BSR set to: 0
  4577  000B26  928B               	bcf	3979,1,c	;volatile
  4578                           
  4579                           ; BSR set to: 0
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;Functions.c: 45: do { LATB5 = 0; } while(0);
  4583  000B28  9A8A               	bcf	3978,5,c	;volatile
  4584                           
  4585                           ; BSR set to: 0
  4586  000B2A  0012               	return	
  4587  000B2C                     __end_of_Precharge:
  4588                           	opt stack 0
  4589                           tblptru	equ	0xFF8
  4590                           tblptrh	equ	0xFF7
  4591                           tblptrl	equ	0xFF6
  4592                           tablat	equ	0xFF5
  4593                           prodh	equ	0xFF4
  4594                           prodl	equ	0xFF3
  4595                           intcon	equ	0xFF2
  4596                           indf0	equ	0xFEF
  4597                           postinc0	equ	0xFEE
  4598                           fsr0h	equ	0xFEA
  4599                           fsr0l	equ	0xFE9
  4600                           wreg	equ	0xFE8
  4601                           postdec1	equ	0xFE5
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           postinc2	equ	0xFDE
  4605                           postdec2	equ	0xFDD
  4606                           plusw2	equ	0xFDB
  4607                           fsr2h	equ	0xFDA
  4608                           fsr2l	equ	0xFD9
  4609                           status	equ	0xFD8
  4610                           
  4611 ;; *************** function _gotoXy *****************
  4612 ;; Defined at:
  4613 ;;		line 95 in file "NokiaLCD.c"
  4614 ;; Parameters:    Size  Location     Type
  4615 ;;  x               1    wreg     unsigned char 
  4616 ;;  y               1   34[COMRAM] unsigned char 
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;  x               1   35[COMRAM] unsigned char 
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  1    wreg      void 
  4621 ;; Registers used:
  4622 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4628 ;;      Params:         1       0       0       0       0       0       0
  4629 ;;      Locals:         1       0       0       0       0       0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0
  4631 ;;      Totals:         2       0       0       0       0       0       0
  4632 ;;Total ram usage:        2 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    6
  4635 ;; This function calls:
  4636 ;;		_LCDwrite
  4637 ;; This function is called by:
  4638 ;;		_main
  4639 ;; This function uses a non-reentrant model
  4640 ;;
  4641                           
  4642                           	psect	text21
  4643  00119A                     __ptext21:
  4644                           	opt stack 0
  4645  00119A                     _gotoXy:
  4646                           	opt stack 24
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;incstack = 0
  4650                           ;gotoXy@x stored from wreg
  4651  00119A  6E24               	movwf	gotoXy@x,c
  4652                           
  4653                           ;NokiaLCD.c: 96: y=y|0x40;
  4654  00119C  5023               	movf	gotoXy@y,w,c
  4655  00119E  0940               	iorlw	64
  4656  0011A0  6E23               	movwf	gotoXy@y,c
  4657                           
  4658                           ;NokiaLCD.c: 97: LCDwrite(0, y);
  4659  0011A2  C023  F021         	movff	gotoXy@y,LCDwrite@data
  4660  0011A6  0E00               	movlw	0
  4661  0011A8  EC4C  F009         	call	_LCDwrite
  4662                           
  4663                           ;NokiaLCD.c: 98: x=(x*6)|0x80;
  4664  0011AC  5024               	movf	gotoXy@x,w,c
  4665  0011AE  0D06               	mullw	6
  4666  0011B0  50F3               	movf	prodl,w,c
  4667  0011B2  0980               	iorlw	128
  4668  0011B4  6E24               	movwf	gotoXy@x,c
  4669                           
  4670                           ;NokiaLCD.c: 99: LCDwrite(0, x);
  4671  0011B6  C024  F021         	movff	gotoXy@x,LCDwrite@data
  4672  0011BA  0E00               	movlw	0
  4673  0011BC  EC4C  F009         	call	_LCDwrite
  4674  0011C0  0012               	return		;funcret
  4675  0011C2                     __end_of_gotoXy:
  4676                           	opt stack 0
  4677                           tblptru	equ	0xFF8
  4678                           tblptrh	equ	0xFF7
  4679                           tblptrl	equ	0xFF6
  4680                           tablat	equ	0xFF5
  4681                           prodh	equ	0xFF4
  4682                           prodl	equ	0xFF3
  4683                           intcon	equ	0xFF2
  4684                           indf0	equ	0xFEF
  4685                           postinc0	equ	0xFEE
  4686                           fsr0h	equ	0xFEA
  4687                           fsr0l	equ	0xFE9
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           postinc2	equ	0xFDE
  4693                           postdec2	equ	0xFDD
  4694                           plusw2	equ	0xFDB
  4695                           fsr2h	equ	0xFDA
  4696                           fsr2l	equ	0xFD9
  4697                           status	equ	0xFD8
  4698                           
  4699 ;; *************** function _SYSTEM_Initialize *****************
  4700 ;; Defined at:
  4701 ;;		line 112 in file "mcc_generated_files/mcc.c"
  4702 ;; Parameters:    Size  Location     Type
  4703 ;;		None
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;		None
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      void 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4715 ;;      Params:         0       0       0       0       0       0       0
  4716 ;;      Locals:         0       0       0       0       0       0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0
  4718 ;;      Totals:         0       0       0       0       0       0       0
  4719 ;;Total ram usage:        0 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    6
  4722 ;; This function calls:
  4723 ;;		_EUSART2_Initialize
  4724 ;;		_INTERRUPT_Initialize
  4725 ;;		_OSCILLATOR_Initialize
  4726 ;;		_PIN_MANAGER_Initialize
  4727 ;;		_TMR0_Initialize
  4728 ;; This function is called by:
  4729 ;;		_main
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           	psect	text22
  4734  0012CA                     __ptext22:
  4735                           	opt stack 0
  4736  0012CA                     _SYSTEM_Initialize:
  4737                           	opt stack 24
  4738                           
  4739                           ;mcc.c: 113: OSCILLATOR_Initialize();
  4740                           
  4741                           ;incstack = 0
  4742  0012CA  EC83  F009         	call	_OSCILLATOR_Initialize	;wreg free
  4743                           
  4744                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  4745  0012CE  EC81  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  4746                           
  4747                           ;mcc.c: 115: INTERRUPT_Initialize();
  4748  0012D2  EC91  F009         	call	_INTERRUPT_Initialize	;wreg free
  4749                           
  4750                           ;mcc.c: 117: EUSART2_Initialize();
  4751  0012D6  EC2D  F008         	call	_EUSART2_Initialize	;wreg free
  4752                           
  4753                           ;mcc.c: 118: TMR0_Initialize();
  4754  0012DA  EC59  F009         	call	_TMR0_Initialize	;wreg free
  4755  0012DE  0012               	return		;funcret
  4756  0012E0                     __end_of_SYSTEM_Initialize:
  4757                           	opt stack 0
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           intcon	equ	0xFF2
  4765                           indf0	equ	0xFEF
  4766                           postinc0	equ	0xFEE
  4767                           fsr0h	equ	0xFEA
  4768                           fsr0l	equ	0xFE9
  4769                           wreg	equ	0xFE8
  4770                           postdec1	equ	0xFE5
  4771                           fsr1l	equ	0xFE1
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           plusw2	equ	0xFDB
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _TMR0_Initialize *****************
  4781 ;; Defined at:
  4782 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;		None
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;		None
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  1    wreg      void 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4796 ;;      Params:         0       0       0       0       0       0       0
  4797 ;;      Locals:         0       0       0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0
  4799 ;;      Totals:         0       0       0       0       0       0       0
  4800 ;;Total ram usage:        0 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    5
  4803 ;; This function calls:
  4804 ;;		_TMR0_StartTimer
  4805 ;; This function is called by:
  4806 ;;		_SYSTEM_Initialize
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           	psect	text23
  4811  0012B2                     __ptext23:
  4812                           	opt stack 0
  4813  0012B2                     _TMR0_Initialize:
  4814                           	opt stack 24
  4815                           
  4816                           ;tmr0.c: 68: T0CON = 0x91;
  4817                           
  4818                           ;incstack = 0
  4819  0012B2  0E91               	movlw	145
  4820  0012B4  6ED5               	movwf	4053,c	;volatile
  4821                           
  4822                           ;tmr0.c: 71: TMR0H = 0x0A;
  4823  0012B6  0E0A               	movlw	10
  4824  0012B8  6ED7               	movwf	4055,c	;volatile
  4825                           
  4826                           ;tmr0.c: 74: TMR0L = 0xFF;
  4827  0012BA  68D6               	setf	4054,c	;volatile
  4828                           
  4829                           ;tmr0.c: 77: timer0ReloadVal16bit = 2815;
  4830  0012BC  0E0A               	movlw	10
  4831  0012BE  6E42               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4832  0012C0  6841               	setf	_timer0ReloadVal16bit,c	;volatile
  4833                           
  4834                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  4835  0012C2  94F2               	bcf	intcon,2,c	;volatile
  4836                           
  4837                           ;tmr0.c: 83: TMR0_StartTimer();
  4838  0012C4  ECA1  F009         	call	_TMR0_StartTimer	;wreg free
  4839  0012C8  0012               	return		;funcret
  4840  0012CA                     __end_of_TMR0_Initialize:
  4841                           	opt stack 0
  4842                           tblptru	equ	0xFF8
  4843                           tblptrh	equ	0xFF7
  4844                           tblptrl	equ	0xFF6
  4845                           tablat	equ	0xFF5
  4846                           prodh	equ	0xFF4
  4847                           prodl	equ	0xFF3
  4848                           intcon	equ	0xFF2
  4849                           indf0	equ	0xFEF
  4850                           postinc0	equ	0xFEE
  4851                           fsr0h	equ	0xFEA
  4852                           fsr0l	equ	0xFE9
  4853                           wreg	equ	0xFE8
  4854                           postdec1	equ	0xFE5
  4855                           fsr1l	equ	0xFE1
  4856                           indf2	equ	0xFDF
  4857                           postinc2	equ	0xFDE
  4858                           postdec2	equ	0xFDD
  4859                           plusw2	equ	0xFDB
  4860                           fsr2h	equ	0xFDA
  4861                           fsr2l	equ	0xFD9
  4862                           status	equ	0xFD8
  4863                           
  4864 ;; *************** function _TMR0_StartTimer *****************
  4865 ;; Defined at:
  4866 ;;		line 86 in file "mcc_generated_files/tmr0.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		None
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4880 ;;      Params:         0       0       0       0       0       0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    4
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_TMR0_Initialize
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           	psect	text24
  4895  001342                     __ptext24:
  4896                           	opt stack 0
  4897  001342                     _TMR0_StartTimer:
  4898                           	opt stack 24
  4899                           
  4900                           ;tmr0.c: 88: T0CONbits.TMR0ON = 1;
  4901                           
  4902                           ;incstack = 0
  4903  001342  8ED5               	bsf	4053,7,c	;volatile
  4904  001344  0012               	return		;funcret
  4905  001346                     __end_of_TMR0_StartTimer:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           indf0	equ	0xFEF
  4915                           postinc0	equ	0xFEE
  4916                           fsr0h	equ	0xFEA
  4917                           fsr0l	equ	0xFE9
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           plusw2	equ	0xFDB
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _PIN_MANAGER_Initialize *****************
  4930 ;; Defined at:
  4931 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;		None
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;		None
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      void 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4945 ;;      Params:         0       0       0       0       0       0       0
  4946 ;;      Locals:         0       0       0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0
  4948 ;;      Totals:         0       0       0       0       0       0       0
  4949 ;;Total ram usage:        0 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    4
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_SYSTEM_Initialize
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text25
  4960  000F02                     __ptext25:
  4961                           	opt stack 0
  4962  000F02                     _PIN_MANAGER_Initialize:
  4963                           	opt stack 25
  4964                           
  4965                           ;pin_manager.c: 51: LATB = 0x0;
  4966                           
  4967                           ;incstack = 0
  4968  000F02  0E00               	movlw	0
  4969  000F04  6E8A               	movwf	3978,c	;volatile
  4970                           
  4971                           ;pin_manager.c: 52: LATA = 0x0;
  4972  000F06  0E00               	movlw	0
  4973  000F08  6E89               	movwf	3977,c	;volatile
  4974                           
  4975                           ;pin_manager.c: 53: ANSELE = 0x7;
  4976  000F0A  0E07               	movlw	7
  4977  000F0C  010F               	movlb	15	; () banked
  4978  000F0E  6F3C               	movwf	60,b	;volatile
  4979                           
  4980                           ;pin_manager.c: 54: LATE = 0x0;
  4981  000F10  0E00               	movlw	0
  4982  000F12  6E8D               	movwf	3981,c	;volatile
  4983                           
  4984                           ;pin_manager.c: 55: LATD = 0x0;
  4985  000F14  0E00               	movlw	0
  4986  000F16  6E8C               	movwf	3980,c	;volatile
  4987                           
  4988                           ;pin_manager.c: 56: LATC = 0x0;
  4989  000F18  0E00               	movlw	0
  4990  000F1A  6E8B               	movwf	3979,c	;volatile
  4991                           
  4992                           ;pin_manager.c: 57: ANSELA = 0x2F;
  4993  000F1C  0E2F               	movlw	47
  4994  000F1E  010F               	movlb	15	; () banked
  4995  000F20  6F38               	movwf	56,b	;volatile
  4996                           
  4997                           ;pin_manager.c: 58: ANSELB = 0x3F;
  4998  000F22  0E3F               	movlw	63
  4999  000F24  010F               	movlb	15	; () banked
  5000  000F26  6F39               	movwf	57,b	;volatile
  5001                           
  5002                           ;pin_manager.c: 59: ANSELC = 0xCC;
  5003  000F28  0ECC               	movlw	204
  5004  000F2A  010F               	movlb	15	; () banked
  5005  000F2C  6F3A               	movwf	58,b	;volatile
  5006                           
  5007                           ;pin_manager.c: 60: ANSELD = 0x3F;
  5008  000F2E  0E3F               	movlw	63
  5009  000F30  010F               	movlb	15	; () banked
  5010  000F32  6F3B               	movwf	59,b	;volatile
  5011                           
  5012                           ;pin_manager.c: 61: WPUB = 0xFC;
  5013  000F34  0EFC               	movlw	252
  5014  000F36  6E61               	movwf	3937,c	;volatile
  5015                           
  5016                           ;pin_manager.c: 62: TRISD = 0xF2;
  5017  000F38  0EF2               	movlw	242
  5018  000F3A  6E95               	movwf	3989,c	;volatile
  5019                           
  5020                           ;pin_manager.c: 63: TRISE = 0x7;
  5021  000F3C  0E07               	movlw	7
  5022  000F3E  6E96               	movwf	3990,c	;volatile
  5023                           
  5024                           ;pin_manager.c: 64: TRISB = 0xC4;
  5025  000F40  0EC4               	movlw	196
  5026  000F42  6E93               	movwf	3987,c	;volatile
  5027                           
  5028                           ;pin_manager.c: 65: TRISC = 0xD4;
  5029  000F44  0ED4               	movlw	212
  5030  000F46  6E94               	movwf	3988,c	;volatile
  5031                           
  5032                           ;pin_manager.c: 66: TRISA = 0x37;
  5033  000F48  0E37               	movlw	55
  5034  000F4A  6E92               	movwf	3986,c	;volatile
  5035                           
  5036                           ; BSR set to: 15
  5037                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  5038  000F4C  9EF1               	bcf	intcon2,7,c	;volatile
  5039                           
  5040                           ; BSR set to: 15
  5041                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  5042  000F4E  96F2               	bcf	intcon,3,c	;volatile
  5043                           
  5044                           ; BSR set to: 15
  5045  000F50  0012               	return		;funcret
  5046  000F52                     __end_of_PIN_MANAGER_Initialize:
  5047                           	opt stack 0
  5048                           tblptru	equ	0xFF8
  5049                           tblptrh	equ	0xFF7
  5050                           tblptrl	equ	0xFF6
  5051                           tablat	equ	0xFF5
  5052                           prodh	equ	0xFF4
  5053                           prodl	equ	0xFF3
  5054                           intcon	equ	0xFF2
  5055                           intcon2	equ	0xFF1
  5056                           indf0	equ	0xFEF
  5057                           postinc0	equ	0xFEE
  5058                           fsr0h	equ	0xFEA
  5059                           fsr0l	equ	0xFE9
  5060                           wreg	equ	0xFE8
  5061                           postdec1	equ	0xFE5
  5062                           fsr1l	equ	0xFE1
  5063                           indf2	equ	0xFDF
  5064                           postinc2	equ	0xFDE
  5065                           postdec2	equ	0xFDD
  5066                           plusw2	equ	0xFDB
  5067                           fsr2h	equ	0xFDA
  5068                           fsr2l	equ	0xFD9
  5069                           status	equ	0xFD8
  5070                           
  5071 ;; *************** function _OSCILLATOR_Initialize *****************
  5072 ;; Defined at:
  5073 ;;		line 121 in file "mcc_generated_files/mcc.c"
  5074 ;; Parameters:    Size  Location     Type
  5075 ;;		None
  5076 ;; Auto vars:     Size  Location     Type
  5077 ;;		None
  5078 ;; Return value:  Size  Location     Type
  5079 ;;                  1    wreg      void 
  5080 ;; Registers used:
  5081 ;;		wreg, status,2
  5082 ;; Tracked objects:
  5083 ;;		On entry : 0/0
  5084 ;;		On exit  : 0/0
  5085 ;;		Unchanged: 0/0
  5086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5087 ;;      Params:         0       0       0       0       0       0       0
  5088 ;;      Locals:         0       0       0       0       0       0       0
  5089 ;;      Temps:          0       0       0       0       0       0       0
  5090 ;;      Totals:         0       0       0       0       0       0       0
  5091 ;;Total ram usage:        0 bytes
  5092 ;; Hardware stack levels used:    1
  5093 ;; Hardware stack levels required when called:    4
  5094 ;; This function calls:
  5095 ;;		Nothing
  5096 ;; This function is called by:
  5097 ;;		_SYSTEM_Initialize
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           	psect	text26
  5102  001306                     __ptext26:
  5103                           	opt stack 0
  5104  001306                     _OSCILLATOR_Initialize:
  5105                           	opt stack 25
  5106                           
  5107                           ;mcc.c: 123: OSCCON = 0x70;
  5108                           
  5109                           ; BSR set to: 15
  5110                           ;incstack = 0
  5111  001306  0E70               	movlw	112
  5112  001308  6ED3               	movwf	4051,c	;volatile
  5113                           
  5114                           ;mcc.c: 125: OSCCON2 = 0x04;
  5115  00130A  0E04               	movlw	4
  5116  00130C  6ED2               	movwf	4050,c	;volatile
  5117                           
  5118                           ;mcc.c: 127: OSCTUNE = 0x00;
  5119  00130E  0E00               	movlw	0
  5120  001310  6E9B               	movwf	3995,c	;volatile
  5121  001312  0012               	return		;funcret
  5122  001314                     __end_of_OSCILLATOR_Initialize:
  5123                           	opt stack 0
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           intcon	equ	0xFF2
  5131                           intcon2	equ	0xFF1
  5132                           indf0	equ	0xFEF
  5133                           postinc0	equ	0xFEE
  5134                           fsr0h	equ	0xFEA
  5135                           fsr0l	equ	0xFE9
  5136                           wreg	equ	0xFE8
  5137                           postdec1	equ	0xFE5
  5138                           fsr1l	equ	0xFE1
  5139                           indf2	equ	0xFDF
  5140                           postinc2	equ	0xFDE
  5141                           postdec2	equ	0xFDD
  5142                           plusw2	equ	0xFDB
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _INTERRUPT_Initialize *****************
  5148 ;; Defined at:
  5149 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;		None
  5152 ;; Auto vars:     Size  Location     Type
  5153 ;;		None
  5154 ;; Return value:  Size  Location     Type
  5155 ;;                  1    wreg      void 
  5156 ;; Registers used:
  5157 ;;		None
  5158 ;; Tracked objects:
  5159 ;;		On entry : 0/0
  5160 ;;		On exit  : 0/0
  5161 ;;		Unchanged: 0/0
  5162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5163 ;;      Params:         0       0       0       0       0       0       0
  5164 ;;      Locals:         0       0       0       0       0       0       0
  5165 ;;      Temps:          0       0       0       0       0       0       0
  5166 ;;      Totals:         0       0       0       0       0       0       0
  5167 ;;Total ram usage:        0 bytes
  5168 ;; Hardware stack levels used:    1
  5169 ;; Hardware stack levels required when called:    4
  5170 ;; This function calls:
  5171 ;;		Nothing
  5172 ;; This function is called by:
  5173 ;;		_SYSTEM_Initialize
  5174 ;; This function uses a non-reentrant model
  5175 ;;
  5176                           
  5177                           	psect	text27
  5178  001322                     __ptext27:
  5179                           	opt stack 0
  5180  001322                     _INTERRUPT_Initialize:
  5181                           	opt stack 25
  5182                           
  5183                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  5184                           
  5185                           ;incstack = 0
  5186  001322  9ED0               	bcf	4048,7,c	;volatile
  5187                           
  5188                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  5189  001324  9AA5               	bcf	4005,5,c	;volatile
  5190                           
  5191                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  5192  001326  98A5               	bcf	4005,4,c	;volatile
  5193                           
  5194                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  5195  001328  9A9F               	bcf	3999,5,c	;volatile
  5196                           
  5197                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  5198  00132A  989F               	bcf	3999,4,c	;volatile
  5199  00132C  0012               	return		;funcret
  5200  00132E                     __end_of_INTERRUPT_Initialize:
  5201                           	opt stack 0
  5202                           tblptru	equ	0xFF8
  5203                           tblptrh	equ	0xFF7
  5204                           tblptrl	equ	0xFF6
  5205                           tablat	equ	0xFF5
  5206                           prodh	equ	0xFF4
  5207                           prodl	equ	0xFF3
  5208                           intcon	equ	0xFF2
  5209                           intcon2	equ	0xFF1
  5210                           indf0	equ	0xFEF
  5211                           postinc0	equ	0xFEE
  5212                           fsr0h	equ	0xFEA
  5213                           fsr0l	equ	0xFE9
  5214                           wreg	equ	0xFE8
  5215                           postdec1	equ	0xFE5
  5216                           fsr1l	equ	0xFE1
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           plusw2	equ	0xFDB
  5221                           fsr2h	equ	0xFDA
  5222                           fsr2l	equ	0xFD9
  5223                           status	equ	0xFD8
  5224                           
  5225 ;; *************** function _EUSART2_Initialize *****************
  5226 ;; Defined at:
  5227 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  5228 ;; Parameters:    Size  Location     Type
  5229 ;;		None
  5230 ;; Auto vars:     Size  Location     Type
  5231 ;;		None
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, status,2
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5241 ;;      Params:         0       0       0       0       0       0       0
  5242 ;;      Locals:         0       0       0       0       0       0       0
  5243 ;;      Temps:          0       0       0       0       0       0       0
  5244 ;;      Totals:         0       0       0       0       0       0       0
  5245 ;;Total ram usage:        0 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    4
  5248 ;; This function calls:
  5249 ;;		Nothing
  5250 ;; This function is called by:
  5251 ;;		_SYSTEM_Initialize
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text28
  5256  00105A                     __ptext28:
  5257                           	opt stack 0
  5258  00105A                     _EUSART2_Initialize:
  5259                           	opt stack 25
  5260                           
  5261                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  5262                           
  5263                           ;incstack = 0
  5264  00105A  9AA3               	bcf	4003,5,c	;volatile
  5265                           
  5266                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  5267  00105C  98A3               	bcf	4003,4,c	;volatile
  5268                           
  5269                           ;eusart2.c: 84: BAUD2CON = 0x48;
  5270  00105E  0E48               	movlw	72
  5271  001060  6E70               	movwf	3952,c	;volatile
  5272                           
  5273                           ;eusart2.c: 87: RC2STA = 0x90;
  5274  001062  0E90               	movlw	144
  5275  001064  6E71               	movwf	3953,c	;volatile
  5276                           
  5277                           ;eusart2.c: 90: TX2STA = 0x26;
  5278  001066  0E26               	movlw	38
  5279  001068  6E72               	movwf	3954,c	;volatile
  5280                           
  5281                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  5282  00106A  0EA0               	movlw	160
  5283  00106C  6E75               	movwf	3957,c	;volatile
  5284                           
  5285                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  5286  00106E  0E01               	movlw	1
  5287  001070  6E76               	movwf	3958,c	;volatile
  5288                           
  5289                           ;eusart2.c: 100: eusart2TxHead = 0;
  5290  001072  0E00               	movlw	0
  5291  001074  6E38               	movwf	_eusart2TxHead,c
  5292                           
  5293                           ;eusart2.c: 101: eusart2TxTail = 0;
  5294  001076  0E00               	movlw	0
  5295  001078  6E39               	movwf	_eusart2TxTail,c
  5296                           
  5297                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  5298  00107A  0E08               	movlw	8
  5299  00107C  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5300                           
  5301                           ;eusart2.c: 104: eusart2RxHead = 0;
  5302  00107E  0E00               	movlw	0
  5303  001080  6E36               	movwf	_eusart2RxHead,c
  5304                           
  5305                           ;eusart2.c: 105: eusart2RxTail = 0;
  5306  001082  0E00               	movlw	0
  5307  001084  6E37               	movwf	_eusart2RxTail,c
  5308                           
  5309                           ;eusart2.c: 106: eusart2RxCount = 0;
  5310  001086  0E00               	movlw	0
  5311  001088  6E35               	movwf	_eusart2RxCount,c	;volatile
  5312                           
  5313                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  5314  00108A  8AA3               	bsf	4003,5,c	;volatile
  5315  00108C  0012               	return		;funcret
  5316  00108E                     __end_of_EUSART2_Initialize:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           intcon2	equ	0xFF1
  5326                           indf0	equ	0xFEF
  5327                           postinc0	equ	0xFEE
  5328                           fsr0h	equ	0xFEA
  5329                           fsr0l	equ	0xFE9
  5330                           wreg	equ	0xFE8
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           plusw2	equ	0xFDB
  5337                           fsr2h	equ	0xFDA
  5338                           fsr2l	equ	0xFD9
  5339                           status	equ	0xFD8
  5340                           
  5341 ;; *************** function _NokiaStr *****************
  5342 ;; Defined at:
  5343 ;;		line 109 in file "NokiaLCD.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;  str             2   34[COMRAM] PTR unsigned char 
  5346 ;;		 -> ddata(11), 
  5347 ;;  len             1   36[COMRAM] unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  i               2    3[BANK0 ] int 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5359 ;;      Params:         3       0       0       0       0       0       0
  5360 ;;      Locals:         0       2       0       0       0       0       0
  5361 ;;      Temps:          0       3       0       0       0       0       0
  5362 ;;      Totals:         3       5       0       0       0       0       0
  5363 ;;Total ram usage:        8 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    6
  5366 ;; This function calls:
  5367 ;;		_LCDwrite
  5368 ;;		___wmul
  5369 ;; This function is called by:
  5370 ;;		_main
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text29
  5375  0009EA                     __ptext29:
  5376                           	opt stack 0
  5377  0009EA                     _NokiaStr:
  5378                           	opt stack 24
  5379  0009EA                     l3530:
  5380                           
  5381                           ;NokiaLCD.c: 110: int i;
  5382                           ;NokiaLCD.c: 111: for(;len>0;len --){
  5383  0009EA  5025               	movf	NokiaStr@len,w,c
  5384  0009EC  B4D8               	btfsc	status,2,c
  5385  0009EE  0012               	return	
  5386                           
  5387                           ;NokiaLCD.c: 112: for(i=0;i<=4;i++){
  5388  0009F0  0E00               	movlw	0
  5389  0009F2  0100               	movlb	0	; () banked
  5390  0009F4  6FC4               	movwf	(NokiaStr@i+1)& (0+255),b
  5391  0009F6  0E00               	movlw	0
  5392  0009F8  6FC3               	movwf	NokiaStr@i& (0+255),b
  5393  0009FA                     l3536:
  5394                           
  5395                           ; BSR set to: 0
  5396  0009FA  0100               	movlb	0	; () banked
  5397  0009FC  BFC4               	btfsc	(NokiaStr@i+1)& (0+255),7,b
  5398  0009FE  D008               	goto	l3540
  5399  000A00  0100               	movlb	0	; () banked
  5400  000A02  51C4               	movf	(NokiaStr@i+1)& (0+255),w,b
  5401  000A04  E142               	bnz	l3550
  5402  000A06  0E05               	movlw	5
  5403  000A08  0100               	movlb	0	; () banked
  5404  000A0A  5DC3               	subwf	NokiaStr@i& (0+255),w,b
  5405  000A0C  B0D8               	btfsc	status,0,c
  5406  000A0E  D03D               	goto	l3550
  5407  000A10                     l3540:
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;NokiaLCD.c: 113: LCDwrite(1,(FONTLOOKUP[*str-32][i]));
  5411  000A10  C023  FFD9         	movff	NokiaStr@str,fsr2l
  5412  000A14  C024  FFDA         	movff	NokiaStr@str+1,fsr2h
  5413  000A18  50DF               	movf	indf2,w,c
  5414  000A1A  0100               	movlb	0	; () banked
  5415  000A1C  6FC0               	movwf	??_NokiaStr& (0+255),b
  5416  000A1E  0EE0               	movlw	224
  5417  000A20  0100               	movlb	0	; () banked
  5418  000A22  25C0               	addwf	??_NokiaStr& (0+255),w,b
  5419  000A24  6E1B               	movwf	___wmul@multiplier,c
  5420  000A26  6A1C               	clrf	___wmul@multiplier+1,c
  5421  000A28  0EFF               	movlw	255
  5422  000A2A  221C               	addwfc	___wmul@multiplier+1,f,c
  5423  000A2C  0E00               	movlw	0
  5424  000A2E  6E1E               	movwf	___wmul@multiplicand+1,c
  5425  000A30  0E05               	movlw	5
  5426  000A32  6E1D               	movwf	___wmul@multiplicand,c
  5427  000A34  EC1C  F009         	call	___wmul	;wreg free
  5428  000A38  0E2D               	movlw	low _FONTLOOKUP
  5429  000A3A  0100               	movlb	0	; () banked
  5430  000A3C  6FC1               	movwf	(??_NokiaStr+1)& (0+255),b
  5431  000A3E  0E7E               	movlw	high _FONTLOOKUP
  5432  000A40  0100               	movlb	0	; () banked
  5433  000A42  6FC2               	movwf	(??_NokiaStr+2)& (0+255),b
  5434  000A44  501B               	movf	?___wmul,w,c
  5435  000A46  0100               	movlb	0	; () banked
  5436  000A48  27C1               	addwf	(??_NokiaStr+1)& (0+255),f,b
  5437  000A4A  501C               	movf	?___wmul+1,w,c
  5438  000A4C  0100               	movlb	0	; () banked
  5439  000A4E  23C2               	addwfc	(??_NokiaStr+2)& (0+255),f,b
  5440  000A50  0100               	movlb	0	; () banked
  5441  000A52  51C3               	movf	NokiaStr@i& (0+255),w,b
  5442  000A54  0100               	movlb	0	; () banked
  5443  000A56  27C1               	addwf	(??_NokiaStr+1)& (0+255),f,b
  5444  000A58  0100               	movlb	0	; () banked
  5445  000A5A  51C4               	movf	(NokiaStr@i+1)& (0+255),w,b
  5446  000A5C  0100               	movlb	0	; () banked
  5447  000A5E  23C2               	addwfc	(??_NokiaStr+2)& (0+255),f,b
  5448  000A60  C0C1  FFF6         	movff	??_NokiaStr+1,tblptrl
  5449  000A64  C0C2  FFF7         	movff	??_NokiaStr+2,tblptrh
  5450  000A68                     	if	0	;tblptru may be non-zero
  5451  000A68                     	endif
  5452  000A68                     	if	0	;tblptru may be non-zero
  5453  000A68                     	endif
  5454  000A68  0008               	tblrd		*
  5455  000A6A  CFF5 F021          	movff	tablat,LCDwrite@data
  5456  000A6E  0E01               	movlw	1
  5457  000A70  EC4C  F009         	call	_LCDwrite
  5458                           
  5459                           ;NokiaLCD.c: 114: LCDwrite(1,(0x00));
  5460  000A74  0E00               	movlw	0
  5461  000A76  6E21               	movwf	LCDwrite@data,c
  5462  000A78  0E01               	movlw	1
  5463  000A7A  EC4C  F009         	call	_LCDwrite
  5464                           
  5465                           ;NokiaLCD.c: 115: str++;
  5466  000A7E  4A23               	infsnz	NokiaStr@str,f,c
  5467  000A80  2A24               	incf	NokiaStr@str+1,f,c
  5468  000A82  0100               	movlb	0	; () banked
  5469  000A84  4BC3               	infsnz	NokiaStr@i& (0+255),f,b
  5470  000A86  2BC4               	incf	(NokiaStr@i+1)& (0+255),f,b
  5471  000A88  D7B8               	goto	l3536
  5472  000A8A                     l3550:
  5473                           
  5474                           ; BSR set to: 0
  5475  000A8A  0625               	decf	NokiaStr@len,f,c
  5476  000A8C  D7AE               	goto	l3530
  5477  000A8E                     __end_of_NokiaStr:
  5478                           	opt stack 0
  5479                           tblptru	equ	0xFF8
  5480                           tblptrh	equ	0xFF7
  5481                           tblptrl	equ	0xFF6
  5482                           tablat	equ	0xFF5
  5483                           prodh	equ	0xFF4
  5484                           prodl	equ	0xFF3
  5485                           intcon	equ	0xFF2
  5486                           intcon2	equ	0xFF1
  5487                           indf0	equ	0xFEF
  5488                           postinc0	equ	0xFEE
  5489                           fsr0h	equ	0xFEA
  5490                           fsr0l	equ	0xFE9
  5491                           wreg	equ	0xFE8
  5492                           postdec1	equ	0xFE5
  5493                           fsr1l	equ	0xFE1
  5494                           indf2	equ	0xFDF
  5495                           postinc2	equ	0xFDE
  5496                           postdec2	equ	0xFDD
  5497                           plusw2	equ	0xFDB
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function ___wmul *****************
  5503 ;; Defined at:
  5504 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  multiplier      2   26[COMRAM] unsigned int 
  5507 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  product         2   30[COMRAM] unsigned int 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  2   26[COMRAM] unsigned int 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0, prodl, prodh
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5519 ;;      Params:         4       0       0       0       0       0       0
  5520 ;;      Locals:         2       0       0       0       0       0       0
  5521 ;;      Temps:          0       0       0       0       0       0       0
  5522 ;;      Totals:         6       0       0       0       0       0       0
  5523 ;;Total ram usage:        6 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    4
  5526 ;; This function calls:
  5527 ;;		Nothing
  5528 ;; This function is called by:
  5529 ;;		_NokiaStr
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           	psect	text30
  5534  001238                     __ptext30:
  5535                           	opt stack 0
  5536  001238                     ___wmul:
  5537                           	opt stack 25
  5538                           
  5539                           ;incstack = 0
  5540  001238  501B               	movf	___wmul@multiplier,w,c
  5541  00123A  021D               	mulwf	___wmul@multiplicand,c
  5542  00123C  CFF3 F01F          	movff	prodl,___wmul@product
  5543  001240  CFF4 F020          	movff	prodh,___wmul@product+1
  5544  001244  501B               	movf	___wmul@multiplier,w,c
  5545  001246  021E               	mulwf	___wmul@multiplicand+1,c
  5546  001248  50F3               	movf	prodl,w,c
  5547  00124A  2620               	addwf	___wmul@product+1,f,c
  5548  00124C  501C               	movf	___wmul@multiplier+1,w,c
  5549  00124E  021D               	mulwf	___wmul@multiplicand,c
  5550  001250  50F3               	movf	prodl,w,c
  5551  001252  2620               	addwf	___wmul@product+1,f,c
  5552  001254  C01F  F01B         	movff	___wmul@product,?___wmul
  5553  001258  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  5554  00125C  0012               	return	
  5555  00125E                     __end_of___wmul:
  5556                           	opt stack 0
  5557                           tblptru	equ	0xFF8
  5558                           tblptrh	equ	0xFF7
  5559                           tblptrl	equ	0xFF6
  5560                           tablat	equ	0xFF5
  5561                           prodh	equ	0xFF4
  5562                           prodl	equ	0xFF3
  5563                           intcon	equ	0xFF2
  5564                           intcon2	equ	0xFF1
  5565                           indf0	equ	0xFEF
  5566                           postinc0	equ	0xFEE
  5567                           fsr0h	equ	0xFEA
  5568                           fsr0l	equ	0xFE9
  5569                           wreg	equ	0xFE8
  5570                           postdec1	equ	0xFE5
  5571                           fsr1l	equ	0xFE1
  5572                           indf2	equ	0xFDF
  5573                           postinc2	equ	0xFDE
  5574                           postdec2	equ	0xFDD
  5575                           plusw2	equ	0xFDB
  5576                           fsr2h	equ	0xFDA
  5577                           fsr2l	equ	0xFD9
  5578                           status	equ	0xFD8
  5579                           
  5580 ;; *************** function _NokiaStart *****************
  5581 ;; Defined at:
  5582 ;;		line 24 in file "NokiaLCD.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;		None
  5585 ;; Auto vars:     Size  Location     Type
  5586 ;;		None
  5587 ;; Return value:  Size  Location     Type
  5588 ;;                  1    wreg      void 
  5589 ;; Registers used:
  5590 ;;		wreg, status,2, status,0, cstack
  5591 ;; Tracked objects:
  5592 ;;		On entry : 0/0
  5593 ;;		On exit  : 0/0
  5594 ;;		Unchanged: 0/0
  5595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5596 ;;      Params:         0       0       0       0       0       0       0
  5597 ;;      Locals:         0       0       0       0       0       0       0
  5598 ;;      Temps:          0       0       0       0       0       0       0
  5599 ;;      Totals:         0       0       0       0       0       0       0
  5600 ;;Total ram usage:        0 bytes
  5601 ;; Hardware stack levels used:    1
  5602 ;; Hardware stack levels required when called:    7
  5603 ;; This function calls:
  5604 ;;		_Delay
  5605 ;;		_LCDwrite
  5606 ;;		_SPI1_Initialize
  5607 ;;		_blackLcd
  5608 ;;		_clearLcd
  5609 ;; This function is called by:
  5610 ;;		_main
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text31
  5615  000C54                     __ptext31:
  5616                           	opt stack 0
  5617  000C54                     _NokiaStart:
  5618                           	opt stack 23
  5619                           
  5620                           ;NokiaLCD.c: 25: TRISBbits.TRISB6 = 0;
  5621                           
  5622                           ;incstack = 0
  5623  000C54  9C93               	bcf	3987,6,c	;volatile
  5624                           
  5625                           ;NokiaLCD.c: 26: do { TRISD0 = 0; } while(0);
  5626  000C56  9095               	bcf	3989,0,c	;volatile
  5627                           
  5628                           ;NokiaLCD.c: 27: do { TRISD3 = 0; } while(0);
  5629  000C58  9695               	bcf	3989,3,c	;volatile
  5630                           
  5631                           ;NokiaLCD.c: 28: do { TRISD2 = 0; } while(0);
  5632  000C5A  9495               	bcf	3989,2,c	;volatile
  5633                           
  5634                           ;NokiaLCD.c: 29: do { LATD0 = 1; } while(0);
  5635  000C5C  808C               	bsf	3980,0,c	;volatile
  5636                           
  5637                           ;NokiaLCD.c: 30: SPI1_Initialize();
  5638  000C5E  EC8A  F009         	call	_SPI1_Initialize	;wreg free
  5639                           
  5640                           ;NokiaLCD.c: 31: LATBbits.LATB6 = 1;
  5641  000C62  8C8A               	bsf	3978,6,c	;volatile
  5642                           
  5643                           ;NokiaLCD.c: 32: Delay(100);
  5644  000C64  0E64               	movlw	100
  5645  000C66  6E1B               	movwf	Delay@wait,c
  5646  000C68  0E00               	movlw	0
  5647  000C6A  6E1C               	movwf	Delay@wait+1,c
  5648  000C6C  0E00               	movlw	0
  5649  000C6E  6E1D               	movwf	Delay@wait+2,c
  5650  000C70  0E00               	movlw	0
  5651  000C72  6E1E               	movwf	Delay@wait+3,c
  5652  000C74  ECA9  F007         	call	_Delay	;wreg free
  5653                           
  5654                           ;NokiaLCD.c: 33: LATBbits.LATB6 = 0;
  5655  000C78  9C8A               	bcf	3978,6,c	;volatile
  5656                           
  5657                           ;NokiaLCD.c: 34: Delay(100);
  5658  000C7A  0E64               	movlw	100
  5659  000C7C  6E1B               	movwf	Delay@wait,c
  5660  000C7E  0E00               	movlw	0
  5661  000C80  6E1C               	movwf	Delay@wait+1,c
  5662  000C82  0E00               	movlw	0
  5663  000C84  6E1D               	movwf	Delay@wait+2,c
  5664  000C86  0E00               	movlw	0
  5665  000C88  6E1E               	movwf	Delay@wait+3,c
  5666  000C8A  ECA9  F007         	call	_Delay	;wreg free
  5667                           
  5668                           ;NokiaLCD.c: 35: LATBbits.LATB6 = 1;
  5669  000C8E  8C8A               	bsf	3978,6,c	;volatile
  5670                           
  5671                           ;NokiaLCD.c: 36: LCDwrite(0, 0x21);
  5672  000C90  0E21               	movlw	33
  5673  000C92  6E21               	movwf	LCDwrite@data,c
  5674  000C94  0E00               	movlw	0
  5675  000C96  EC4C  F009         	call	_LCDwrite
  5676                           
  5677                           ;NokiaLCD.c: 37: LCDwrite(0, 0xBF);
  5678  000C9A  0EBF               	movlw	191
  5679  000C9C  6E21               	movwf	LCDwrite@data,c
  5680  000C9E  0E00               	movlw	0
  5681  000CA0  EC4C  F009         	call	_LCDwrite
  5682                           
  5683                           ;NokiaLCD.c: 38: LCDwrite(0, 0x04);
  5684  000CA4  0E04               	movlw	4
  5685  000CA6  6E21               	movwf	LCDwrite@data,c
  5686  000CA8  0E00               	movlw	0
  5687  000CAA  EC4C  F009         	call	_LCDwrite
  5688                           
  5689                           ;NokiaLCD.c: 39: LCDwrite(0, 0x14);
  5690  000CAE  0E14               	movlw	20
  5691  000CB0  6E21               	movwf	LCDwrite@data,c
  5692  000CB2  0E00               	movlw	0
  5693  000CB4  EC4C  F009         	call	_LCDwrite
  5694                           
  5695                           ;NokiaLCD.c: 40: LCDwrite(0, 0x0C);
  5696  000CB8  0E0C               	movlw	12
  5697  000CBA  6E21               	movwf	LCDwrite@data,c
  5698  000CBC  0E00               	movlw	0
  5699  000CBE  EC4C  F009         	call	_LCDwrite
  5700                           
  5701                           ;NokiaLCD.c: 41: LCDwrite(0, 0x20);
  5702  000CC2  0E20               	movlw	32
  5703  000CC4  6E21               	movwf	LCDwrite@data,c
  5704  000CC6  0E00               	movlw	0
  5705  000CC8  EC4C  F009         	call	_LCDwrite
  5706                           
  5707                           ;NokiaLCD.c: 42: LCDwrite(0, 0x0C);
  5708  000CCC  0E0C               	movlw	12
  5709  000CCE  6E21               	movwf	LCDwrite@data,c
  5710  000CD0  0E00               	movlw	0
  5711  000CD2  EC4C  F009         	call	_LCDwrite
  5712                           
  5713                           ;NokiaLCD.c: 43: clearLcd();
  5714  000CD6  ECE1  F008         	call	_clearLcd	;wreg free
  5715                           
  5716                           ;NokiaLCD.c: 44: blackLcd();
  5717  000CDA  ECF5  F008         	call	_blackLcd	;wreg free
  5718  000CDE  0012               	return		;funcret
  5719  000CE0                     __end_of_NokiaStart:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           prodh	equ	0xFF4
  5726                           prodl	equ	0xFF3
  5727                           intcon	equ	0xFF2
  5728                           intcon2	equ	0xFF1
  5729                           indf0	equ	0xFEF
  5730                           postinc0	equ	0xFEE
  5731                           fsr0h	equ	0xFEA
  5732                           fsr0l	equ	0xFE9
  5733                           wreg	equ	0xFE8
  5734                           postdec1	equ	0xFE5
  5735                           fsr1l	equ	0xFE1
  5736                           indf2	equ	0xFDF
  5737                           postinc2	equ	0xFDE
  5738                           postdec2	equ	0xFDD
  5739                           plusw2	equ	0xFDB
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _clearLcd *****************
  5745 ;; Defined at:
  5746 ;;		line 66 in file "NokiaLCD.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;  res             2   34[COMRAM] int 
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		wreg, status,2, status,0, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5760 ;;      Params:         0       0       0       0       0       0       0
  5761 ;;      Locals:         2       0       0       0       0       0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0
  5763 ;;      Totals:         2       0       0       0       0       0       0
  5764 ;;Total ram usage:        2 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    6
  5767 ;; This function calls:
  5768 ;;		_LCDwrite
  5769 ;; This function is called by:
  5770 ;;		_NokiaStart
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text32
  5775  0011C2                     __ptext32:
  5776                           	opt stack 0
  5777  0011C2                     _clearLcd:
  5778                           	opt stack 23
  5779                           
  5780                           ;NokiaLCD.c: 67: int res;
  5781                           ;NokiaLCD.c: 68: for(res=0;res<504;res++){
  5782                           
  5783                           ;incstack = 0
  5784  0011C2  0E00               	movlw	0
  5785  0011C4  6E24               	movwf	clearLcd@res+1,c
  5786  0011C6  0E00               	movlw	0
  5787  0011C8  6E23               	movwf	clearLcd@res,c
  5788  0011CA                     l3476:
  5789  0011CA  BE24               	btfsc	clearLcd@res+1,7,c
  5790  0011CC  D006               	goto	l3480
  5791  0011CE  0EF8               	movlw	248
  5792  0011D0  5C23               	subwf	clearLcd@res,w,c
  5793  0011D2  0E01               	movlw	1
  5794  0011D4  5824               	subwfb	clearLcd@res+1,w,c
  5795  0011D6  B0D8               	btfsc	status,0,c
  5796  0011D8  0012               	return	
  5797  0011DA                     l3480:
  5798                           
  5799                           ;NokiaLCD.c: 69: LCDwrite(1, 0x00);
  5800  0011DA  0E00               	movlw	0
  5801  0011DC  6E21               	movwf	LCDwrite@data,c
  5802  0011DE  0E01               	movlw	1
  5803  0011E0  EC4C  F009         	call	_LCDwrite
  5804  0011E4  4A23               	infsnz	clearLcd@res,f,c
  5805  0011E6  2A24               	incf	clearLcd@res+1,f,c
  5806  0011E8  D7F0               	goto	l3476
  5807  0011EA                     __end_of_clearLcd:
  5808                           	opt stack 0
  5809                           tblptru	equ	0xFF8
  5810                           tblptrh	equ	0xFF7
  5811                           tblptrl	equ	0xFF6
  5812                           tablat	equ	0xFF5
  5813                           prodh	equ	0xFF4
  5814                           prodl	equ	0xFF3
  5815                           intcon	equ	0xFF2
  5816                           intcon2	equ	0xFF1
  5817                           indf0	equ	0xFEF
  5818                           postinc0	equ	0xFEE
  5819                           fsr0h	equ	0xFEA
  5820                           fsr0l	equ	0xFE9
  5821                           wreg	equ	0xFE8
  5822                           postdec1	equ	0xFE5
  5823                           fsr1l	equ	0xFE1
  5824                           indf2	equ	0xFDF
  5825                           postinc2	equ	0xFDE
  5826                           postdec2	equ	0xFDD
  5827                           plusw2	equ	0xFDB
  5828                           fsr2h	equ	0xFDA
  5829                           fsr2l	equ	0xFD9
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function _blackLcd *****************
  5833 ;; Defined at:
  5834 ;;		line 81 in file "NokiaLCD.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  res             2   34[COMRAM] int 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, status,2, status,0, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5848 ;;      Params:         0       0       0       0       0       0       0
  5849 ;;      Locals:         2       0       0       0       0       0       0
  5850 ;;      Temps:          0       0       0       0       0       0       0
  5851 ;;      Totals:         2       0       0       0       0       0       0
  5852 ;;Total ram usage:        2 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    6
  5855 ;; This function calls:
  5856 ;;		_LCDwrite
  5857 ;; This function is called by:
  5858 ;;		_NokiaStart
  5859 ;; This function uses a non-reentrant model
  5860 ;;
  5861                           
  5862                           	psect	text33
  5863  0011EA                     __ptext33:
  5864                           	opt stack 0
  5865  0011EA                     _blackLcd:
  5866                           	opt stack 23
  5867                           
  5868                           ;NokiaLCD.c: 82: int res;
  5869                           ;NokiaLCD.c: 83: for(res=0;res<504;res++){
  5870                           
  5871                           ;incstack = 0
  5872  0011EA  0E00               	movlw	0
  5873  0011EC  6E24               	movwf	blackLcd@res+1,c
  5874  0011EE  0E00               	movlw	0
  5875  0011F0  6E23               	movwf	blackLcd@res,c
  5876  0011F2                     l3488:
  5877  0011F2  BE24               	btfsc	blackLcd@res+1,7,c
  5878  0011F4  D006               	goto	l3492
  5879  0011F6  0EF8               	movlw	248
  5880  0011F8  5C23               	subwf	blackLcd@res,w,c
  5881  0011FA  0E01               	movlw	1
  5882  0011FC  5824               	subwfb	blackLcd@res+1,w,c
  5883  0011FE  B0D8               	btfsc	status,0,c
  5884  001200  0012               	return	
  5885  001202                     l3492:
  5886                           
  5887                           ;NokiaLCD.c: 84: LCDwrite(1, res);
  5888  001202  C023  F021         	movff	blackLcd@res,LCDwrite@data
  5889  001206  0E01               	movlw	1
  5890  001208  EC4C  F009         	call	_LCDwrite
  5891  00120C  4A23               	infsnz	blackLcd@res,f,c
  5892  00120E  2A24               	incf	blackLcd@res+1,f,c
  5893  001210  D7F0               	goto	l3488
  5894  001212                     __end_of_blackLcd:
  5895                           	opt stack 0
  5896                           tblptru	equ	0xFF8
  5897                           tblptrh	equ	0xFF7
  5898                           tblptrl	equ	0xFF6
  5899                           tablat	equ	0xFF5
  5900                           prodh	equ	0xFF4
  5901                           prodl	equ	0xFF3
  5902                           intcon	equ	0xFF2
  5903                           intcon2	equ	0xFF1
  5904                           indf0	equ	0xFEF
  5905                           postinc0	equ	0xFEE
  5906                           fsr0h	equ	0xFEA
  5907                           fsr0l	equ	0xFE9
  5908                           wreg	equ	0xFE8
  5909                           postdec1	equ	0xFE5
  5910                           fsr1l	equ	0xFE1
  5911                           indf2	equ	0xFDF
  5912                           postinc2	equ	0xFDE
  5913                           postdec2	equ	0xFDD
  5914                           plusw2	equ	0xFDB
  5915                           fsr2h	equ	0xFDA
  5916                           fsr2l	equ	0xFD9
  5917                           status	equ	0xFD8
  5918                           
  5919 ;; *************** function _LCDwrite *****************
  5920 ;; Defined at:
  5921 ;;		line 47 in file "NokiaLCD.c"
  5922 ;; Parameters:    Size  Location     Type
  5923 ;;  mode            1    wreg     unsigned char 
  5924 ;;  data            1   32[COMRAM] unsigned char 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;  mode            1   33[COMRAM] unsigned char 
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  1    wreg      void 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, cstack
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5936 ;;      Params:         1       0       0       0       0       0       0
  5937 ;;      Locals:         1       0       0       0       0       0       0
  5938 ;;      Temps:          0       0       0       0       0       0       0
  5939 ;;      Totals:         2       0       0       0       0       0       0
  5940 ;;Total ram usage:        2 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    5
  5943 ;; This function calls:
  5944 ;;		_SPI1_Exchange8bit
  5945 ;; This function is called by:
  5946 ;;		_NokiaStart
  5947 ;;		_clearLcd
  5948 ;;		_blackLcd
  5949 ;;		_gotoXy
  5950 ;;		_NokiaStr
  5951 ;; This function uses a non-reentrant model
  5952 ;;
  5953                           
  5954                           	psect	text34
  5955  001298                     __ptext34:
  5956                           	opt stack 0
  5957  001298                     _LCDwrite:
  5958                           	opt stack 24
  5959                           
  5960                           ;incstack = 0
  5961                           ;LCDwrite@mode stored from wreg
  5962  001298  6E22               	movwf	LCDwrite@mode,c
  5963                           
  5964                           ;NokiaLCD.c: 48: if(mode){
  5965  00129A  5022               	movf	LCDwrite@mode,w,c
  5966  00129C  B4D8               	btfsc	status,2,c
  5967  00129E  D002               	goto	l727
  5968                           
  5969                           ;NokiaLCD.c: 49: do { LATD3 = 0; } while(0);
  5970  0012A0  968C               	bcf	3980,3,c	;volatile
  5971                           
  5972                           ;NokiaLCD.c: 50: }
  5973  0012A2  D001               	goto	l729
  5974  0012A4                     l727:
  5975  0012A4  868C               	bsf	3980,3,c	;volatile
  5976  0012A6                     l729:
  5977  0012A6  908C               	bcf	3980,0,c	;volatile
  5978                           
  5979                           ;NokiaLCD.c: 55: SPI1_Exchange8bit(data);
  5980  0012A8  5021               	movf	LCDwrite@data,w,c
  5981  0012AA  EC7B  F009         	call	_SPI1_Exchange8bit
  5982                           
  5983                           ;NokiaLCD.c: 56: do { LATD0 = 1; } while(0);
  5984  0012AE  808C               	bsf	3980,0,c	;volatile
  5985  0012B0  0012               	return	
  5986  0012B2                     __end_of_LCDwrite:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           intcon	equ	0xFF2
  5995                           intcon2	equ	0xFF1
  5996                           indf0	equ	0xFEF
  5997                           postinc0	equ	0xFEE
  5998                           fsr0h	equ	0xFEA
  5999                           fsr0l	equ	0xFE9
  6000                           wreg	equ	0xFE8
  6001                           postdec1	equ	0xFE5
  6002                           fsr1l	equ	0xFE1
  6003                           indf2	equ	0xFDF
  6004                           postinc2	equ	0xFDE
  6005                           postdec2	equ	0xFDD
  6006                           plusw2	equ	0xFDB
  6007                           fsr2h	equ	0xFDA
  6008                           fsr2l	equ	0xFD9
  6009                           status	equ	0xFD8
  6010                           
  6011 ;; *************** function _SPI1_Exchange8bit *****************
  6012 ;; Defined at:
  6013 ;;		line 78 in file "mcc_generated_files/spi1.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  data            1    wreg     unsigned char 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  data            1   26[COMRAM] unsigned char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      unsigned char 
  6020 ;; Registers used:
  6021 ;;		wreg, status,2
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6027 ;;      Params:         0       0       0       0       0       0       0
  6028 ;;      Locals:         1       0       0       0       0       0       0
  6029 ;;      Temps:          0       0       0       0       0       0       0
  6030 ;;      Totals:         1       0       0       0       0       0       0
  6031 ;;Total ram usage:        1 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    4
  6034 ;; This function calls:
  6035 ;;		Nothing
  6036 ;; This function is called by:
  6037 ;;		_LCDwrite
  6038 ;;		_SPI1_Exchange8bitBuffer
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text35
  6043  0012F6                     __ptext35:
  6044                           	opt stack 0
  6045  0012F6                     _SPI1_Exchange8bit:
  6046                           	opt stack 24
  6047                           
  6048                           ;incstack = 0
  6049                           ;SPI1_Exchange8bit@data stored from wreg
  6050  0012F6  6E1B               	movwf	SPI1_Exchange8bit@data,c
  6051                           
  6052                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  6053  0012F8  9EC6               	bcf	4038,7,c	;volatile
  6054                           
  6055                           ;spi1.c: 83: SSP1BUF = data;
  6056  0012FA  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  6057  0012FE                     l223:
  6058  0012FE  A0C7               	btfss	4039,0,c	;volatile
  6059  001300  D7FE               	goto	l223
  6060                           
  6061                           ;spi1.c: 87: }
  6062                           ;spi1.c: 89: return (SSP1BUF);
  6063  001302  50C9               	movf	4041,w,c	;volatile
  6064  001304  0012               	return		;funcret
  6065  001306                     __end_of_SPI1_Exchange8bit:
  6066                           	opt stack 0
  6067                           tblptru	equ	0xFF8
  6068                           tblptrh	equ	0xFF7
  6069                           tblptrl	equ	0xFF6
  6070                           tablat	equ	0xFF5
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           intcon2	equ	0xFF1
  6075                           indf0	equ	0xFEF
  6076                           postinc0	equ	0xFEE
  6077                           fsr0h	equ	0xFEA
  6078                           fsr0l	equ	0xFE9
  6079                           wreg	equ	0xFE8
  6080                           postdec1	equ	0xFE5
  6081                           fsr1l	equ	0xFE1
  6082                           indf2	equ	0xFDF
  6083                           postinc2	equ	0xFDE
  6084                           postdec2	equ	0xFDD
  6085                           plusw2	equ	0xFDB
  6086                           fsr2h	equ	0xFDA
  6087                           fsr2l	equ	0xFD9
  6088                           status	equ	0xFD8
  6089                           
  6090 ;; *************** function _SPI1_Initialize *****************
  6091 ;; Defined at:
  6092 ;;		line 64 in file "mcc_generated_files/spi1.c"
  6093 ;; Parameters:    Size  Location     Type
  6094 ;;		None
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;                  1    wreg      void 
  6099 ;; Registers used:
  6100 ;;		wreg, status,2
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6106 ;;      Params:         0       0       0       0       0       0       0
  6107 ;;      Locals:         0       0       0       0       0       0       0
  6108 ;;      Temps:          0       0       0       0       0       0       0
  6109 ;;      Totals:         0       0       0       0       0       0       0
  6110 ;;Total ram usage:        0 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    4
  6113 ;; This function calls:
  6114 ;;		Nothing
  6115 ;; This function is called by:
  6116 ;;		_NokiaStart
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text36
  6121  001314                     __ptext36:
  6122                           	opt stack 0
  6123  001314                     _SPI1_Initialize:
  6124                           	opt stack 25
  6125                           
  6126                           ;spi1.c: 69: SSP1STAT = 0x80;
  6127                           
  6128                           ;incstack = 0
  6129  001314  0E80               	movlw	128
  6130  001316  6EC7               	movwf	4039,c	;volatile
  6131                           
  6132                           ;spi1.c: 72: SSP1CON1 = 0x30;
  6133  001318  0E30               	movlw	48
  6134  00131A  6EC6               	movwf	4038,c	;volatile
  6135                           
  6136                           ;spi1.c: 75: SSP1ADD = 0x00;
  6137  00131C  0E00               	movlw	0
  6138  00131E  6EC8               	movwf	4040,c	;volatile
  6139  001320  0012               	return		;funcret
  6140  001322                     __end_of_SPI1_Initialize:
  6141                           	opt stack 0
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           intcon2	equ	0xFF1
  6150                           indf0	equ	0xFEF
  6151                           postinc0	equ	0xFEE
  6152                           fsr0h	equ	0xFEA
  6153                           fsr0l	equ	0xFE9
  6154                           wreg	equ	0xFE8
  6155                           postdec1	equ	0xFE5
  6156                           fsr1l	equ	0xFE1
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           plusw2	equ	0xFDB
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _Delay *****************
  6166 ;; Defined at:
  6167 ;;		line 11 in file "Functions.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  wait            4   26[COMRAM] long 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  i               4   31[COMRAM] long 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      void 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6181 ;;      Params:         4       0       0       0       0       0       0
  6182 ;;      Locals:         4       0       0       0       0       0       0
  6183 ;;      Temps:          1       0       0       0       0       0       0
  6184 ;;      Totals:         9       0       0       0       0       0       0
  6185 ;;Total ram usage:        9 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    4
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;;		_respondECU
  6193 ;;		_Precharge
  6194 ;;		_NokiaStart
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text37
  6199  000F52                     __ptext37:
  6200                           	opt stack 0
  6201  000F52                     _Delay:
  6202                           	opt stack 24
  6203                           
  6204                           ;Functions.c: 12: long int i = 0;
  6205                           
  6206                           ;incstack = 0
  6207  000F52  0E00               	movlw	0
  6208  000F54  6E20               	movwf	Delay@i,c
  6209  000F56  0E00               	movlw	0
  6210  000F58  6E21               	movwf	Delay@i+1,c
  6211  000F5A  0E00               	movlw	0
  6212  000F5C  6E22               	movwf	Delay@i+2,c
  6213  000F5E  0E00               	movlw	0
  6214  000F60  6E23               	movwf	Delay@i+3,c
  6215                           
  6216                           ;Functions.c: 13: for (; wait > i; i++) {
  6217  000F62  D00E               	goto	l3210
  6218  000F64                     l3206:
  6219                           
  6220                           ;Functions.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  6221  000F64  0E06               	movlw	6
  6222  000F66  6E1F               	movwf	??_Delay& (0+255),c
  6223  000F68  0E30               	movlw	48
  6224  000F6A                     u2827:
  6225  000F6A  2EE8               	decfsz	wreg,f,c
  6226  000F6C  D7FE               	goto	u2827
  6227  000F6E  2E1F               	decfsz	??_Delay& (0+255),f,c
  6228  000F70  D7FC               	goto	u2827
  6229  000F72  D000               	nop2	
  6230  000F74  0E01               	movlw	1
  6231  000F76  2620               	addwf	Delay@i,f,c
  6232  000F78  0E00               	movlw	0
  6233  000F7A  2221               	addwfc	Delay@i+1,f,c
  6234  000F7C  2222               	addwfc	Delay@i+2,f,c
  6235  000F7E  2223               	addwfc	Delay@i+3,f,c
  6236  000F80                     l3210:
  6237  000F80  501B               	movf	Delay@wait,w,c
  6238  000F82  5C20               	subwf	Delay@i,w,c
  6239  000F84  501C               	movf	Delay@wait+1,w,c
  6240  000F86  5821               	subwfb	Delay@i+1,w,c
  6241  000F88  501D               	movf	Delay@wait+2,w,c
  6242  000F8A  5822               	subwfb	Delay@i+2,w,c
  6243  000F8C  5023               	movf	Delay@i+3,w,c
  6244  000F8E  0A80               	xorlw	128
  6245  000F90  6E1F               	movwf	??_Delay& (0+255),c
  6246  000F92  501E               	movf	Delay@wait+3,w,c
  6247  000F94  0A80               	xorlw	128
  6248  000F96  581F               	subwfb	??_Delay& (0+255),w,c
  6249  000F98  B0D8               	btfsc	status,0,c
  6250  000F9A  0012               	return	
  6251  000F9C  D7E3               	goto	l3206
  6252  000F9E                     __end_of_Delay:
  6253                           	opt stack 0
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           prodh	equ	0xFF4
  6259                           prodl	equ	0xFF3
  6260                           intcon	equ	0xFF2
  6261                           intcon2	equ	0xFF1
  6262                           indf0	equ	0xFEF
  6263                           postinc0	equ	0xFEE
  6264                           fsr0h	equ	0xFEA
  6265                           fsr0l	equ	0xFE9
  6266                           wreg	equ	0xFE8
  6267                           postdec1	equ	0xFE5
  6268                           fsr1l	equ	0xFE1
  6269                           indf2	equ	0xFDF
  6270                           postinc2	equ	0xFDE
  6271                           postdec2	equ	0xFDD
  6272                           plusw2	equ	0xFDB
  6273                           fsr2h	equ	0xFDA
  6274                           fsr2l	equ	0xFD9
  6275                           status	equ	0xFD8
  6276                           
  6277 ;; *************** function _INTERRUPT_InterruptManager *****************
  6278 ;; Defined at:
  6279 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;		None
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6293 ;;      Params:         0       0       0       0       0       0       0
  6294 ;;      Locals:         0       0       0       0       0       0       0
  6295 ;;      Temps:         14       0       0       0       0       0       0
  6296 ;;      Totals:        14       0       0       0       0       0       0
  6297 ;;Total ram usage:       14 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    3
  6300 ;; This function calls:
  6301 ;;		_EUSART1_Receive_ISR
  6302 ;;		_EUSART1_Transmit_ISR
  6303 ;;		_EUSART2_Receive_ISR
  6304 ;;		_EUSART2_Transmit_ISR
  6305 ;; This function is called by:
  6306 ;;		Interrupt level 2
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	intcode
  6311  000008                     __pintcode:
  6312                           	opt stack 0
  6313  000008                     _INTERRUPT_InterruptManager:
  6314                           	opt stack 22
  6315                           
  6316                           ;incstack = 0
  6317  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6318  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6319  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6320  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6321  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6322  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6323  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6324  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6325  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6326  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6327  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6328  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6329  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6330  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6331  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6332                           
  6333                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6334  000042  BAA3               	btfsc	4003,5,c	;volatile
  6335  000044  AAA4               	btfss	4004,5,c	;volatile
  6336  000046  D003               	goto	i2l175
  6337                           
  6338                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6339  000048  EC8D  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6340                           
  6341                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6342  00004C  D011               	goto	i2l183
  6343  00004E                     i2l175:
  6344  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6345  000050  A8A4               	btfss	4004,4,c	;volatile
  6346  000052  D003               	goto	i2l177
  6347                           
  6348                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6349  000054  EC60  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6350                           
  6351                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6352  000058  D00B               	goto	i2l183
  6353  00005A                     i2l177:
  6354  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6355  00005C  AA9E               	btfss	3998,5,c	;volatile
  6356  00005E  D003               	goto	i2l179
  6357                           
  6358                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6359  000060  EC2F  F009         	call	_EUSART1_Receive_ISR	;wreg free
  6360                           
  6361                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6362  000064  D005               	goto	i2l183
  6363  000066                     i2l179:
  6364  000066  B89D               	btfsc	3997,4,c	;volatile
  6365  000068  A89E               	btfss	3998,4,c	;volatile
  6366  00006A  D002               	goto	i2l183
  6367                           
  6368                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6369  00006C  EC47  F008         	call	_EUSART1_Transmit_ISR	;wreg free
  6370  000070                     i2l183:
  6371  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6372  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6373  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6374  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6375  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6376  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6377  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6378  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6379  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6380  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6381  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6382  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6383  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6384  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6385  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6386  0000AA  0011               	retfie		f
  6387  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6388                           	opt stack 0
  6389                           pclatu	equ	0xFFB
  6390                           pclath	equ	0xFFA
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           intcon2	equ	0xFF1
  6399                           indf0	equ	0xFEF
  6400                           postinc0	equ	0xFEE
  6401                           fsr0h	equ	0xFEA
  6402                           fsr0l	equ	0xFE9
  6403                           wreg	equ	0xFE8
  6404                           postdec1	equ	0xFE5
  6405                           fsr1h	equ	0xFE2
  6406                           fsr1l	equ	0xFE1
  6407                           indf2	equ	0xFDF
  6408                           postinc2	equ	0xFDE
  6409                           postdec2	equ	0xFDD
  6410                           plusw2	equ	0xFDB
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _EUSART2_Transmit_ISR *****************
  6416 ;; Defined at:
  6417 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;		None
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;		None
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6431 ;;      Params:         0       0       0       0       0       0       0
  6432 ;;      Locals:         0       0       0       0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0
  6434 ;;      Totals:         0       0       0       0       0       0       0
  6435 ;;Total ram usage:        0 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; This function calls:
  6438 ;;		Nothing
  6439 ;; This function is called by:
  6440 ;;		_INTERRUPT_InterruptManager
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           	psect	text39
  6445  0010C0                     __ptext39:
  6446                           	opt stack 0
  6447  0010C0                     _EUSART2_Transmit_ISR:
  6448                           	opt stack 24
  6449                           
  6450                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6451                           
  6452                           ;incstack = 0
  6453  0010C0  0E08               	movlw	8
  6454  0010C2  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  6455  0010C4  D012               	goto	i2l97
  6456                           
  6457                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  6458  0010C6  5039               	movf	_eusart2TxTail,w,c
  6459  0010C8  0D01               	mullw	1
  6460  0010CA  0E90               	movlw	low _eusart2TxBuffer
  6461  0010CC  24F3               	addwf	prodl,w,c
  6462  0010CE  6ED9               	movwf	fsr2l,c
  6463  0010D0  0E00               	movlw	high _eusart2TxBuffer
  6464  0010D2  20F4               	addwfc	prodh,w,c
  6465  0010D4  6EDA               	movwf	fsr2h,c
  6466  0010D6  50DF               	movf	indf2,w,c
  6467  0010D8  6E73               	movwf	3955,c	;volatile
  6468  0010DA  2A39               	incf	_eusart2TxTail,f,c
  6469                           
  6470                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  6471  0010DC  0E07               	movlw	7
  6472  0010DE  6439               	cpfsgt	_eusart2TxTail,c
  6473  0010E0  D002               	goto	i2l2762
  6474                           
  6475                           ;eusart2.c: 161: eusart2TxTail = 0;
  6476  0010E2  0E00               	movlw	0
  6477  0010E4  6E39               	movwf	_eusart2TxTail,c
  6478  0010E6                     i2l2762:
  6479                           
  6480                           ;eusart2.c: 162: }
  6481                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  6482  0010E6  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  6483                           
  6484                           ;eusart2.c: 164: } else {
  6485  0010E8  0012               	return	
  6486  0010EA                     i2l97:
  6487                           
  6488                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  6489  0010EA  98A3               	bcf	4003,4,c	;volatile
  6490  0010EC  0012               	return	
  6491  0010EE                     __end_of_EUSART2_Transmit_ISR:
  6492                           	opt stack 0
  6493                           pclatu	equ	0xFFB
  6494                           pclath	equ	0xFFA
  6495                           tblptru	equ	0xFF8
  6496                           tblptrh	equ	0xFF7
  6497                           tblptrl	equ	0xFF6
  6498                           tablat	equ	0xFF5
  6499                           prodh	equ	0xFF4
  6500                           prodl	equ	0xFF3
  6501                           intcon	equ	0xFF2
  6502                           intcon2	equ	0xFF1
  6503                           indf0	equ	0xFEF
  6504                           postinc0	equ	0xFEE
  6505                           fsr0h	equ	0xFEA
  6506                           fsr0l	equ	0xFE9
  6507                           wreg	equ	0xFE8
  6508                           postdec1	equ	0xFE5
  6509                           fsr1h	equ	0xFE2
  6510                           fsr1l	equ	0xFE1
  6511                           indf2	equ	0xFDF
  6512                           postinc2	equ	0xFDE
  6513                           postdec2	equ	0xFDD
  6514                           plusw2	equ	0xFDB
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _EUSART2_Receive_ISR *****************
  6520 ;; Defined at:
  6521 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;		None
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;		None
  6526 ;; Return value:  Size  Location     Type
  6527 ;;                  1    wreg      void 
  6528 ;; Registers used:
  6529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6535 ;;      Params:         0       0       0       0       0       0       0
  6536 ;;      Locals:         0       0       0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0
  6538 ;;      Totals:         0       0       0       0       0       0       0
  6539 ;;Total ram usage:        0 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; This function calls:
  6542 ;;		Nothing
  6543 ;; This function is called by:
  6544 ;;		_INTERRUPT_InterruptManager
  6545 ;; This function uses a non-reentrant model
  6546 ;;
  6547                           
  6548                           	psect	text40
  6549  00111A                     __ptext40:
  6550                           	opt stack 0
  6551  00111A                     _EUSART2_Receive_ISR:
  6552                           	opt stack 24
  6553                           
  6554                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  6555                           
  6556                           ;incstack = 0
  6557  00111A  A271               	btfss	3953,1,c	;volatile
  6558  00111C  D002               	goto	i2l2768
  6559                           
  6560                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  6561  00111E  9871               	bcf	3953,4,c	;volatile
  6562                           
  6563                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  6564  001120  8871               	bsf	3953,4,c	;volatile
  6565  001122                     i2l2768:
  6566                           
  6567                           ;eusart2.c: 175: }
  6568                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  6569  001122  5036               	movf	_eusart2RxHead,w,c
  6570  001124  0D01               	mullw	1
  6571  001126  0E88               	movlw	low _eusart2RxBuffer
  6572  001128  24F3               	addwf	prodl,w,c
  6573  00112A  6ED9               	movwf	fsr2l,c
  6574  00112C  0E00               	movlw	high _eusart2RxBuffer
  6575  00112E  20F4               	addwfc	prodh,w,c
  6576  001130  6EDA               	movwf	fsr2h,c
  6577  001132  CF74 FFDF          	movff	3956,indf2	;volatile
  6578  001136  2A36               	incf	_eusart2RxHead,f,c
  6579                           
  6580                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  6581  001138  0E07               	movlw	7
  6582  00113A  6436               	cpfsgt	_eusart2RxHead,c
  6583  00113C  D002               	goto	i2l2776
  6584                           
  6585                           ;eusart2.c: 180: eusart2RxHead = 0;
  6586  00113E  0E00               	movlw	0
  6587  001140  6E36               	movwf	_eusart2RxHead,c
  6588  001142                     i2l2776:
  6589                           
  6590                           ;eusart2.c: 181: }
  6591                           ;eusart2.c: 182: eusart2RxCount++;
  6592  001142  2A35               	incf	_eusart2RxCount,f,c	;volatile
  6593  001144  0012               	return		;funcret
  6594  001146                     __end_of_EUSART2_Receive_ISR:
  6595                           	opt stack 0
  6596                           pclatu	equ	0xFFB
  6597                           pclath	equ	0xFFA
  6598                           tblptru	equ	0xFF8
  6599                           tblptrh	equ	0xFF7
  6600                           tblptrl	equ	0xFF6
  6601                           tablat	equ	0xFF5
  6602                           prodh	equ	0xFF4
  6603                           prodl	equ	0xFF3
  6604                           intcon	equ	0xFF2
  6605                           intcon2	equ	0xFF1
  6606                           indf0	equ	0xFEF
  6607                           postinc0	equ	0xFEE
  6608                           fsr0h	equ	0xFEA
  6609                           fsr0l	equ	0xFE9
  6610                           wreg	equ	0xFE8
  6611                           postdec1	equ	0xFE5
  6612                           fsr1h	equ	0xFE2
  6613                           fsr1l	equ	0xFE1
  6614                           indf2	equ	0xFDF
  6615                           postinc2	equ	0xFDE
  6616                           postdec2	equ	0xFDD
  6617                           plusw2	equ	0xFDB
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           
  6622 ;; *************** function _EUSART1_Transmit_ISR *****************
  6623 ;; Defined at:
  6624 ;;		line 150 in file "UART.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;		None
  6627 ;; Auto vars:     Size  Location     Type
  6628 ;;		None
  6629 ;; Return value:  Size  Location     Type
  6630 ;;                  2  169[None  ] int 
  6631 ;; Registers used:
  6632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6633 ;; Tracked objects:
  6634 ;;		On entry : 0/0
  6635 ;;		On exit  : 0/0
  6636 ;;		Unchanged: 0/0
  6637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6638 ;;      Params:         0       0       0       0       0       0       0
  6639 ;;      Locals:         0       0       0       0       0       0       0
  6640 ;;      Temps:          0       0       0       0       0       0       0
  6641 ;;      Totals:         0       0       0       0       0       0       0
  6642 ;;Total ram usage:        0 bytes
  6643 ;; Hardware stack levels used:    1
  6644 ;; Hardware stack levels required when called:    2
  6645 ;; This function calls:
  6646 ;;		_UART_buff_get
  6647 ;;		_UART_buff_size
  6648 ;; This function is called by:
  6649 ;;		_INTERRUPT_InterruptManager
  6650 ;; This function uses a non-reentrant model
  6651 ;;
  6652                           
  6653                           	psect	text41
  6654  00108E                     __ptext41:
  6655                           	opt stack 0
  6656  00108E                     _EUSART1_Transmit_ISR:
  6657                           	opt stack 22
  6658                           
  6659                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6660                           
  6661                           ;incstack = 0
  6662  00108E  0E00               	movlw	low _output_buffer
  6663  001090  6E01               	movwf	UART_buff_size@_this,c
  6664  001092  0E03               	movlw	high _output_buffer
  6665  001094  6E02               	movwf	UART_buff_size@_this+1,c
  6666  001096  EC70  F009         	call	_UART_buff_size	;wreg free
  6667  00109A  BE02               	btfsc	?_UART_buff_size+1,7,c
  6668  00109C  D00D               	goto	i2l2788
  6669  00109E  5002               	movf	?_UART_buff_size+1,w,c
  6670  0010A0  E103               	bnz	i2u165_40
  6671  0010A2  0401               	decf	?_UART_buff_size,w,c
  6672  0010A4  A0D8               	btfss	status,0,c
  6673  0010A6  D008               	goto	i2l2788
  6674  0010A8                     i2u165_40:
  6675                           
  6676                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6677  0010A8  0E00               	movlw	low _output_buffer
  6678  0010AA  6E07               	movwf	UART_buff_get@_this,c
  6679  0010AC  0E03               	movlw	high _output_buffer
  6680  0010AE  6E08               	movwf	UART_buff_get@_this+1,c
  6681  0010B0  ECE1  F005         	call	_UART_buff_get	;wreg free
  6682  0010B4  6EAD               	movwf	4013,c	;volatile
  6683                           
  6684                           ;UART.c: 154: } else {
  6685  0010B6  0012               	return	
  6686  0010B8                     i2l2788:
  6687                           
  6688                           ;UART.c: 155: Transmit_stall = 1;
  6689  0010B8  0E01               	movlw	1
  6690  0010BA  6E44               	movwf	_Transmit_stall,c
  6691                           
  6692                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6693  0010BC  989D               	bcf	3997,4,c	;volatile
  6694  0010BE  0012               	return	
  6695  0010C0                     __end_of_EUSART1_Transmit_ISR:
  6696                           	opt stack 0
  6697                           pclatu	equ	0xFFB
  6698                           pclath	equ	0xFFA
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon2	equ	0xFF1
  6707                           indf0	equ	0xFEF
  6708                           postinc0	equ	0xFEE
  6709                           fsr0h	equ	0xFEA
  6710                           fsr0l	equ	0xFE9
  6711                           wreg	equ	0xFE8
  6712                           postdec1	equ	0xFE5
  6713                           fsr1h	equ	0xFE2
  6714                           fsr1l	equ	0xFE1
  6715                           indf2	equ	0xFDF
  6716                           postinc2	equ	0xFDE
  6717                           postdec2	equ	0xFDD
  6718                           plusw2	equ	0xFDB
  6719                           fsr2h	equ	0xFDA
  6720                           fsr2l	equ	0xFD9
  6721                           status	equ	0xFD8
  6722                           
  6723 ;; *************** function _UART_buff_size *****************
  6724 ;; Defined at:
  6725 ;;		line 102 in file "UART.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6728 ;;		 -> output_buffer(206), input_buffer(206), 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;		None
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  2    0[COMRAM] int 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6740 ;;      Params:         2       0       0       0       0       0       0
  6741 ;;      Locals:         0       0       0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0
  6743 ;;      Totals:         2       0       0       0       0       0       0
  6744 ;;Total ram usage:        2 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; This function calls:
  6747 ;;		Nothing
  6748 ;; This function is called by:
  6749 ;;		_EUSART1_Transmit_ISR
  6750 ;;		_Receive_available
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           	psect	text42
  6755  0012E0                     __ptext42:
  6756                           	opt stack 0
  6757  0012E0                     _UART_buff_size:
  6758                           	opt stack 23
  6759                           
  6760                           ;UART.c: 103: return (_this->count);
  6761                           
  6762                           ;incstack = 0
  6763  0012E0  EE20 F0CC          	lfsr	2,204
  6764  0012E4  5001               	movf	UART_buff_size@_this,w,c
  6765  0012E6  26D9               	addwf	fsr2l,f,c
  6766  0012E8  5002               	movf	UART_buff_size@_this+1,w,c
  6767  0012EA  22DA               	addwfc	fsr2h,f,c
  6768  0012EC  CFDE F001          	movff	postinc2,?_UART_buff_size
  6769  0012F0  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  6770  0012F4  0012               	return	
  6771  0012F6                     __end_of_UART_buff_size:
  6772                           	opt stack 0
  6773                           pclatu	equ	0xFFB
  6774                           pclath	equ	0xFFA
  6775                           tblptru	equ	0xFF8
  6776                           tblptrh	equ	0xFF7
  6777                           tblptrl	equ	0xFF6
  6778                           tablat	equ	0xFF5
  6779                           prodh	equ	0xFF4
  6780                           prodl	equ	0xFF3
  6781                           intcon	equ	0xFF2
  6782                           intcon2	equ	0xFF1
  6783                           indf0	equ	0xFEF
  6784                           postinc0	equ	0xFEE
  6785                           fsr0h	equ	0xFEA
  6786                           fsr0l	equ	0xFE9
  6787                           wreg	equ	0xFE8
  6788                           postdec1	equ	0xFE5
  6789                           fsr1h	equ	0xFE2
  6790                           fsr1l	equ	0xFE1
  6791                           indf2	equ	0xFDF
  6792                           postinc2	equ	0xFDE
  6793                           postdec2	equ	0xFDD
  6794                           plusw2	equ	0xFDB
  6795                           fsr2h	equ	0xFDA
  6796                           fsr2l	equ	0xFD9
  6797                           status	equ	0xFD8
  6798                           
  6799 ;; *************** function _UART_buff_get *****************
  6800 ;; Defined at:
  6801 ;;		line 81 in file "UART.c"
  6802 ;; Parameters:    Size  Location     Type
  6803 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6804 ;;		 -> output_buffer(206), input_buffer(206), 
  6805 ;; Auto vars:     Size  Location     Type
  6806 ;;  c               1   10[COMRAM] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  1    wreg      unsigned char 
  6809 ;; Registers used:
  6810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6811 ;; Tracked objects:
  6812 ;;		On entry : 0/0
  6813 ;;		On exit  : 0/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6816 ;;      Params:         2       0       0       0       0       0       0
  6817 ;;      Locals:         1       0       0       0       0       0       0
  6818 ;;      Temps:          2       0       0       0       0       0       0
  6819 ;;      Totals:         5       0       0       0       0       0       0
  6820 ;;Total ram usage:        5 bytes
  6821 ;; Hardware stack levels used:    1
  6822 ;; Hardware stack levels required when called:    1
  6823 ;; This function calls:
  6824 ;;		_UART_buff_modulo_inc
  6825 ;; This function is called by:
  6826 ;;		_EUSART1_Transmit_ISR
  6827 ;;		_Receive_get
  6828 ;;		_Send_put
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text43
  6833  000BC2                     __ptext43:
  6834                           	opt stack 0
  6835  000BC2                     _UART_buff_get:
  6836                           	opt stack 22
  6837                           
  6838                           ;UART.c: 82: unsigned char c;
  6839                           ;UART.c: 83: if (_this->count > 0) {
  6840                           
  6841                           ;incstack = 0
  6842  000BC2  EE20 F0CC          	lfsr	2,204
  6843  000BC6  5007               	movf	UART_buff_get@_this,w,c
  6844  000BC8  26D9               	addwf	fsr2l,f,c
  6845  000BCA  5008               	movf	UART_buff_get@_this+1,w,c
  6846  000BCC  22DA               	addwfc	fsr2h,f,c
  6847  000BCE  0E01               	movlw	1
  6848  000BD0  BEDB               	btfsc	plusw2,7,c
  6849  000BD2  D03C               	goto	i2l2694
  6850  000BD4  0E01               	movlw	1
  6851  000BD6  50DB               	movf	plusw2,w,c
  6852  000BD8  E103               	bnz	i2u153_40
  6853  000BDA  04DE               	decf	postinc2,w,c
  6854  000BDC  A0D8               	btfss	status,0,c
  6855  000BDE  D036               	goto	i2l2694
  6856  000BE0                     i2u153_40:
  6857                           
  6858                           ;UART.c: 84: c = _this->buf[_this->tail];
  6859  000BE0  EE20 F0CA          	lfsr	2,202
  6860  000BE4  5007               	movf	UART_buff_get@_this,w,c
  6861  000BE6  26D9               	addwf	fsr2l,f,c
  6862  000BE8  5008               	movf	UART_buff_get@_this+1,w,c
  6863  000BEA  22DA               	addwfc	fsr2h,f,c
  6864  000BEC  CFDE F009          	movff	postinc2,??_UART_buff_get
  6865  000BF0  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  6866  000BF4  5009               	movf	??_UART_buff_get,w,c
  6867  000BF6  2407               	addwf	UART_buff_get@_this,w,c
  6868  000BF8  6ED9               	movwf	fsr2l,c
  6869  000BFA  500A               	movf	??_UART_buff_get+1,w,c
  6870  000BFC  2008               	addwfc	UART_buff_get@_this+1,w,c
  6871  000BFE  6EDA               	movwf	fsr2h,c
  6872  000C00  50DF               	movf	indf2,w,c
  6873  000C02  6E0B               	movwf	UART_buff_get@c,c
  6874                           
  6875                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6876  000C04  EE20 F0CA          	lfsr	2,202
  6877  000C08  5007               	movf	UART_buff_get@_this,w,c
  6878  000C0A  26D9               	addwf	fsr2l,f,c
  6879  000C0C  5008               	movf	UART_buff_get@_this+1,w,c
  6880  000C0E  22DA               	addwfc	fsr2h,f,c
  6881  000C10  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6882  000C14  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6883  000C18  0E00               	movlw	0
  6884  000C1A  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6885  000C1C  0EC8               	movlw	200
  6886  000C1E  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6887  000C20  ECB8  F008         	call	_UART_buff_modulo_inc	;wreg free
  6888  000C24  EE20 F0CA          	lfsr	2,202
  6889  000C28  5007               	movf	UART_buff_get@_this,w,c
  6890  000C2A  26D9               	addwf	fsr2l,f,c
  6891  000C2C  5008               	movf	UART_buff_get@_this+1,w,c
  6892  000C2E  22DA               	addwfc	fsr2h,f,c
  6893  000C30  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6894  000C34  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6895                           
  6896                           ;UART.c: 86: --_this->count;
  6897  000C38  EE20 F0CC          	lfsr	2,204
  6898  000C3C  5007               	movf	UART_buff_get@_this,w,c
  6899  000C3E  26D9               	addwf	fsr2l,f,c
  6900  000C40  5008               	movf	UART_buff_get@_this+1,w,c
  6901  000C42  22DA               	addwfc	fsr2h,f,c
  6902  000C44  06DE               	decf	postinc2,f,c
  6903  000C46  0E00               	movlw	0
  6904  000C48  5ADD               	subwfb	postdec2,f,c
  6905                           
  6906                           ;UART.c: 87: } else {
  6907  000C4A  D002               	goto	i2l556
  6908  000C4C                     i2l2694:
  6909                           
  6910                           ;UART.c: 88: c = 0;
  6911  000C4C  0E00               	movlw	0
  6912  000C4E  6E0B               	movwf	UART_buff_get@c,c
  6913  000C50                     i2l556:
  6914                           
  6915                           ;UART.c: 89: }
  6916                           ;UART.c: 90: return (c);
  6917  000C50  500B               	movf	UART_buff_get@c,w,c
  6918  000C52  0012               	return	
  6919  000C54                     __end_of_UART_buff_get:
  6920                           	opt stack 0
  6921                           pclatu	equ	0xFFB
  6922                           pclath	equ	0xFFA
  6923                           tblptru	equ	0xFF8
  6924                           tblptrh	equ	0xFF7
  6925                           tblptrl	equ	0xFF6
  6926                           tablat	equ	0xFF5
  6927                           prodh	equ	0xFF4
  6928                           prodl	equ	0xFF3
  6929                           intcon	equ	0xFF2
  6930                           intcon2	equ	0xFF1
  6931                           indf0	equ	0xFEF
  6932                           postinc0	equ	0xFEE
  6933                           fsr0h	equ	0xFEA
  6934                           fsr0l	equ	0xFE9
  6935                           wreg	equ	0xFE8
  6936                           postdec1	equ	0xFE5
  6937                           fsr1h	equ	0xFE2
  6938                           fsr1l	equ	0xFE1
  6939                           indf2	equ	0xFDF
  6940                           postinc2	equ	0xFDE
  6941                           postdec2	equ	0xFDD
  6942                           plusw2	equ	0xFDB
  6943                           fsr2h	equ	0xFDA
  6944                           fsr2l	equ	0xFD9
  6945                           status	equ	0xFD8
  6946                           
  6947 ;; *************** function _EUSART1_Receive_ISR *****************
  6948 ;; Defined at:
  6949 ;;		line 139 in file "UART.c"
  6950 ;; Parameters:    Size  Location     Type
  6951 ;;		None
  6952 ;; Auto vars:     Size  Location     Type
  6953 ;;  data            1   11[COMRAM] unsigned char 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  2  167[None  ] int 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6963 ;;      Params:         0       0       0       0       0       0       0
  6964 ;;      Locals:         1       0       0       0       0       0       0
  6965 ;;      Temps:          0       0       0       0       0       0       0
  6966 ;;      Totals:         1       0       0       0       0       0       0
  6967 ;;Total ram usage:        1 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:    2
  6970 ;; This function calls:
  6971 ;;		_UART_buff_put
  6972 ;; This function is called by:
  6973 ;;		_INTERRUPT_InterruptManager
  6974 ;; This function uses a non-reentrant model
  6975 ;;
  6976                           
  6977                           	psect	text44
  6978  00125E                     __ptext44:
  6979                           	opt stack 0
  6980  00125E                     _EUSART1_Receive_ISR:
  6981                           	opt stack 22
  6982                           
  6983                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6984                           
  6985                           ;incstack = 0
  6986  00125E  A2AB               	btfss	4011,1,c	;volatile
  6987  001260  D002               	goto	i2l587
  6988                           
  6989                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6990  001262  98AB               	bcf	4011,4,c	;volatile
  6991                           
  6992                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6993  001264  88AB               	bsf	4011,4,c	;volatile
  6994  001266                     i2l587:
  6995                           
  6996                           ;UART.c: 145: }
  6997                           ;UART.c: 146: unsigned char data = RCREG1;
  6998  001266  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6999                           
  7000                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7001  00126A  0E00               	movlw	low _input_buffer
  7002  00126C  6E07               	movwf	UART_buff_put@_this,c
  7003  00126E  0E02               	movlw	high _input_buffer
  7004  001270  6E08               	movwf	UART_buff_put@_this+1,c
  7005  001272  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  7006  001276  EC64  F002         	call	_UART_buff_put	;wreg free
  7007  00127A  0012               	return		;funcret
  7008  00127C                     __end_of_EUSART1_Receive_ISR:
  7009                           	opt stack 0
  7010                           pclatu	equ	0xFFB
  7011                           pclath	equ	0xFFA
  7012                           tblptru	equ	0xFF8
  7013                           tblptrh	equ	0xFF7
  7014                           tblptrl	equ	0xFF6
  7015                           tablat	equ	0xFF5
  7016                           prodh	equ	0xFF4
  7017                           prodl	equ	0xFF3
  7018                           intcon	equ	0xFF2
  7019                           intcon2	equ	0xFF1
  7020                           indf0	equ	0xFEF
  7021                           postinc0	equ	0xFEE
  7022                           fsr0h	equ	0xFEA
  7023                           fsr0l	equ	0xFE9
  7024                           wreg	equ	0xFE8
  7025                           postdec1	equ	0xFE5
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           plusw2	equ	0xFDB
  7032                           fsr2h	equ	0xFDA
  7033                           fsr2l	equ	0xFD9
  7034                           status	equ	0xFD8
  7035                           
  7036 ;; *************** function _UART_buff_put *****************
  7037 ;; Defined at:
  7038 ;;		line 68 in file "UART.c"
  7039 ;; Parameters:    Size  Location     Type
  7040 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7041 ;;		 -> output_buffer(206), input_buffer(206), 
  7042 ;;  c               1    8[COMRAM] const unsigned char 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;		None
  7045 ;; Return value:  Size  Location     Type
  7046 ;;                  1    wreg      void 
  7047 ;; Registers used:
  7048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7054 ;;      Params:         3       0       0       0       0       0       0
  7055 ;;      Locals:         0       0       0       0       0       0       0
  7056 ;;      Temps:          2       0       0       0       0       0       0
  7057 ;;      Totals:         5       0       0       0       0       0       0
  7058 ;;Total ram usage:        5 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    1
  7061 ;; This function calls:
  7062 ;;		_UART_buff_modulo_inc
  7063 ;; This function is called by:
  7064 ;;		_EUSART1_Receive_ISR
  7065 ;;		_Send_put
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text45
  7070  0004C8                     __ptext45:
  7071                           	opt stack 0
  7072  0004C8                     _UART_buff_put:
  7073                           	opt stack 22
  7074                           
  7075                           ;UART.c: 69: if (_this->count < 200) {
  7076                           
  7077                           ;incstack = 0
  7078  0004C8  EE20 F0CC          	lfsr	2,204
  7079  0004CC  5007               	movf	UART_buff_put@_this,w,c
  7080  0004CE  26D9               	addwf	fsr2l,f,c
  7081  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  7082  0004D2  22DA               	addwfc	fsr2h,f,c
  7083  0004D4  0E01               	movlw	1
  7084  0004D6  BEDB               	btfsc	plusw2,7,c
  7085  0004D8  D007               	goto	i2l2674
  7086  0004DA  0E01               	movlw	1
  7087  0004DC  50DB               	movf	plusw2,w,c
  7088  0004DE  E13A               	bnz	i2l2680
  7089  0004E0  0EC8               	movlw	200
  7090  0004E2  5CDE               	subwf	postinc2,w,c
  7091  0004E4  B0D8               	btfsc	status,0,c
  7092  0004E6  D036               	goto	i2l2680
  7093  0004E8                     i2l2674:
  7094                           
  7095                           ;UART.c: 70: _this->buf[_this->head] = c;
  7096  0004E8  EE20 F0C8          	lfsr	2,200
  7097  0004EC  5007               	movf	UART_buff_put@_this,w,c
  7098  0004EE  26D9               	addwf	fsr2l,f,c
  7099  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  7100  0004F2  22DA               	addwfc	fsr2h,f,c
  7101  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7102  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7103  0004FC  500A               	movf	??_UART_buff_put,w,c
  7104  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  7105  000500  6ED9               	movwf	fsr2l,c
  7106  000502  500B               	movf	??_UART_buff_put+1,w,c
  7107  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  7108  000506  6EDA               	movwf	fsr2h,c
  7109  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  7110                           
  7111                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7112  00050C  EE20 F0C8          	lfsr	2,200
  7113  000510  5007               	movf	UART_buff_put@_this,w,c
  7114  000512  26D9               	addwf	fsr2l,f,c
  7115  000514  5008               	movf	UART_buff_put@_this+1,w,c
  7116  000516  22DA               	addwfc	fsr2h,f,c
  7117  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7118  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7119  000520  0E00               	movlw	0
  7120  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7121  000524  0EC8               	movlw	200
  7122  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7123  000528  ECB8  F008         	call	_UART_buff_modulo_inc	;wreg free
  7124  00052C  EE20 F0C8          	lfsr	2,200
  7125  000530  5007               	movf	UART_buff_put@_this,w,c
  7126  000532  26D9               	addwf	fsr2l,f,c
  7127  000534  5008               	movf	UART_buff_put@_this+1,w,c
  7128  000536  22DA               	addwfc	fsr2h,f,c
  7129  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7130  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7131                           
  7132                           ;UART.c: 72: ++_this->count;
  7133  000540  EE20 F0CC          	lfsr	2,204
  7134  000544  5007               	movf	UART_buff_put@_this,w,c
  7135  000546  26D9               	addwf	fsr2l,f,c
  7136  000548  5008               	movf	UART_buff_put@_this+1,w,c
  7137  00054A  22DA               	addwfc	fsr2h,f,c
  7138  00054C  2ADE               	incf	postinc2,f,c
  7139  00054E  0E00               	movlw	0
  7140  000550  22DD               	addwfc	postdec2,f,c
  7141                           
  7142                           ;UART.c: 73: } else {
  7143  000552  0012               	return	
  7144  000554                     i2l2680:
  7145                           
  7146                           ;UART.c: 74: _this->buf[_this->head] = c;
  7147  000554  EE20 F0C8          	lfsr	2,200
  7148  000558  5007               	movf	UART_buff_put@_this,w,c
  7149  00055A  26D9               	addwf	fsr2l,f,c
  7150  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  7151  00055E  22DA               	addwfc	fsr2h,f,c
  7152  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7153  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7154  000568  500A               	movf	??_UART_buff_put,w,c
  7155  00056A  2407               	addwf	UART_buff_put@_this,w,c
  7156  00056C  6ED9               	movwf	fsr2l,c
  7157  00056E  500B               	movf	??_UART_buff_put+1,w,c
  7158  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  7159  000572  6EDA               	movwf	fsr2h,c
  7160  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  7161                           
  7162                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7163  000578  EE20 F0C8          	lfsr	2,200
  7164  00057C  5007               	movf	UART_buff_put@_this,w,c
  7165  00057E  26D9               	addwf	fsr2l,f,c
  7166  000580  5008               	movf	UART_buff_put@_this+1,w,c
  7167  000582  22DA               	addwfc	fsr2h,f,c
  7168  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7169  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7170  00058C  0E00               	movlw	0
  7171  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7172  000590  0EC8               	movlw	200
  7173  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7174  000594  ECB8  F008         	call	_UART_buff_modulo_inc	;wreg free
  7175  000598  EE20 F0C8          	lfsr	2,200
  7176  00059C  5007               	movf	UART_buff_put@_this,w,c
  7177  00059E  26D9               	addwf	fsr2l,f,c
  7178  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  7179  0005A2  22DA               	addwfc	fsr2h,f,c
  7180  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7181  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7182                           
  7183                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7184  0005AC  EE20 F0CA          	lfsr	2,202
  7185  0005B0  5007               	movf	UART_buff_put@_this,w,c
  7186  0005B2  26D9               	addwf	fsr2l,f,c
  7187  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  7188  0005B6  22DA               	addwfc	fsr2h,f,c
  7189  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7190  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7191  0005C0  0E00               	movlw	0
  7192  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7193  0005C4  0EC8               	movlw	200
  7194  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7195  0005C8  ECB8  F008         	call	_UART_buff_modulo_inc	;wreg free
  7196  0005CC  EE20 F0CA          	lfsr	2,202
  7197  0005D0  5007               	movf	UART_buff_put@_this,w,c
  7198  0005D2  26D9               	addwf	fsr2l,f,c
  7199  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  7200  0005D6  22DA               	addwfc	fsr2h,f,c
  7201  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7202  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7203  0005E0  0012               	return	
  7204  0005E2                     __end_of_UART_buff_put:
  7205                           	opt stack 0
  7206                           pclatu	equ	0xFFB
  7207                           pclath	equ	0xFFA
  7208                           tblptru	equ	0xFF8
  7209                           tblptrh	equ	0xFF7
  7210                           tblptrl	equ	0xFF6
  7211                           tablat	equ	0xFF5
  7212                           prodh	equ	0xFF4
  7213                           prodl	equ	0xFF3
  7214                           intcon	equ	0xFF2
  7215                           intcon2	equ	0xFF1
  7216                           indf0	equ	0xFEF
  7217                           postinc0	equ	0xFEE
  7218                           fsr0h	equ	0xFEA
  7219                           fsr0l	equ	0xFE9
  7220                           wreg	equ	0xFE8
  7221                           postdec1	equ	0xFE5
  7222                           fsr1h	equ	0xFE2
  7223                           fsr1l	equ	0xFE1
  7224                           indf2	equ	0xFDF
  7225                           postinc2	equ	0xFDE
  7226                           postdec2	equ	0xFDD
  7227                           plusw2	equ	0xFDB
  7228                           fsr2h	equ	0xFDA
  7229                           fsr2l	equ	0xFD9
  7230                           status	equ	0xFD8
  7231                           
  7232 ;; *************** function _UART_buff_modulo_inc *****************
  7233 ;; Defined at:
  7234 ;;		line 106 in file "UART.c"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  value           2    0[COMRAM] const unsigned int 
  7237 ;;  modulus         2    2[COMRAM] const unsigned int 
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;  my_value        2    4[COMRAM] unsigned int 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  2    0[COMRAM] unsigned int 
  7242 ;; Registers used:
  7243 ;;		wreg, status,2, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7249 ;;      Params:         4       0       0       0       0       0       0
  7250 ;;      Locals:         2       0       0       0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0
  7252 ;;      Totals:         6       0       0       0       0       0       0
  7253 ;;Total ram usage:        6 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_UART_buff_put
  7259 ;;		_UART_buff_get
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           	psect	text46
  7264  001170                     __ptext46:
  7265                           	opt stack 0
  7266  001170                     _UART_buff_modulo_inc:
  7267                           	opt stack 22
  7268                           
  7269                           ;UART.c: 107: unsigned int my_value = value + 1;
  7270                           
  7271                           ;incstack = 0
  7272  001170  0E01               	movlw	1
  7273  001172  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7274  001174  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7275  001176  0E00               	movlw	0
  7276  001178  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7277  00117A  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7278                           
  7279                           ;UART.c: 108: if (my_value >= modulus) {
  7280  00117C  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7281  00117E  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7282  001180  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7283  001182  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7284  001184  A0D8               	btfss	status,0,c
  7285  001186  D004               	goto	i2l2426
  7286                           
  7287                           ;UART.c: 109: my_value = 0;
  7288  001188  0E00               	movlw	0
  7289  00118A  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7290  00118C  0E00               	movlw	0
  7291  00118E  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7292  001190                     i2l2426:
  7293                           
  7294                           ;UART.c: 110: }
  7295                           ;UART.c: 111: return (my_value);
  7296  001190  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7297  001194  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7298  001198  0012               	return	
  7299  00119A                     __end_of_UART_buff_modulo_inc:
  7300                           	opt stack 0
  7301                           pclatu	equ	0xFFB
  7302                           pclath	equ	0xFFA
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           intcon2	equ	0xFF1
  7311                           indf0	equ	0xFEF
  7312                           postinc0	equ	0xFEE
  7313                           fsr0h	equ	0xFEA
  7314                           fsr0l	equ	0xFE9
  7315                           wreg	equ	0xFE8
  7316                           postdec1	equ	0xFE5
  7317                           fsr1h	equ	0xFE2
  7318                           fsr1l	equ	0xFE1
  7319                           indf2	equ	0xFDF
  7320                           postinc2	equ	0xFDE
  7321                           postdec2	equ	0xFDD
  7322                           plusw2	equ	0xFDB
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           pclatu	equ	0xFFB
  7327                           pclath	equ	0xFFA
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           intcon	equ	0xFF2
  7335                           intcon2	equ	0xFF1
  7336                           indf0	equ	0xFEF
  7337                           postinc0	equ	0xFEE
  7338                           fsr0h	equ	0xFEA
  7339                           fsr0l	equ	0xFE9
  7340                           wreg	equ	0xFE8
  7341                           postdec1	equ	0xFE5
  7342                           fsr1h	equ	0xFE2
  7343                           fsr1l	equ	0xFE1
  7344                           indf2	equ	0xFDF
  7345                           postinc2	equ	0xFDE
  7346                           postdec2	equ	0xFDD
  7347                           plusw2	equ	0xFDB
  7348                           fsr2h	equ	0xFDA
  7349                           fsr2l	equ	0xFD9
  7350                           status	equ	0xFD8
  7351                           
  7352                           	psect	rparam
  7353  0000                     pclatu	equ	0xFFB
  7354                           pclath	equ	0xFFA
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           intcon2	equ	0xFF1
  7363                           indf0	equ	0xFEF
  7364                           postinc0	equ	0xFEE
  7365                           fsr0h	equ	0xFEA
  7366                           fsr0l	equ	0xFE9
  7367                           wreg	equ	0xFE8
  7368                           postdec1	equ	0xFE5
  7369                           fsr1h	equ	0xFE2
  7370                           fsr1l	equ	0xFE1
  7371                           indf2	equ	0xFDF
  7372                           postinc2	equ	0xFDE
  7373                           postdec2	equ	0xFDD
  7374                           plusw2	equ	0xFDB
  7375                           fsr2h	equ	0xFDA
  7376                           fsr2l	equ	0xFD9
  7377                           status	equ	0xFD8
  7378                           
  7379                           	psect	temp
  7380  000045                     btemp:
  7381                           	opt stack 0
  7382  000045                     	ds	1
  7383  0000                     int$flags	set	btemp
  7384                           pclatu	equ	0xFFB
  7385                           pclath	equ	0xFFA
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodh	equ	0xFF4
  7391                           prodl	equ	0xFF3
  7392                           intcon	equ	0xFF2
  7393                           intcon2	equ	0xFF1
  7394                           indf0	equ	0xFEF
  7395                           postinc0	equ	0xFEE
  7396                           fsr0h	equ	0xFEA
  7397                           fsr0l	equ	0xFE9
  7398                           wreg	equ	0xFE8
  7399                           postdec1	equ	0xFE5
  7400                           fsr1h	equ	0xFE2
  7401                           fsr1l	equ	0xFE1
  7402                           indf2	equ	0xFDF
  7403                           postinc2	equ	0xFDE
  7404                           postdec2	equ	0xFDD
  7405                           plusw2	equ	0xFDB
  7406                           fsr2h	equ	0xFDA
  7407                           fsr2l	equ	0xFD9
  7408                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    455
    Data        10
    BSS         940
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      68
    BANK0           160     25     130
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 11
		 -> ddata(BANK0[11]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1421(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _gotoXy->_LCDwrite
    _NokiaStr->_LCDwrite
    _NokiaStart->_blackLcd
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _blackLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   25090
                              _Delay
                         _NokiaStart
                           _NokiaStr
                  _SYSTEM_Initialize
                             _gotoXy
                         _respondECU
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12083
                          _Precharge
                         _SetCharger
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    5211
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                              0 BANK0      5     5      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1607
                                             37 COMRAM     1     1      0
                                              2 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     828
                                              0 BANK0      3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0     774
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _gotoXy                                               2     1      1    1301
                                             34 COMRAM     2     1      1
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStr                                             8     5      3    1832
                                             34 COMRAM     3     0      3
                                              0 BANK0      5     5      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    4056
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _blackLcd
                           _clearLcd
 ---------------------------------------------------------------------------------
 (2) _clearLcd                                             2     2      0    1162
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _blackLcd                                             2     2      0    1193
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1094
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     607
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _blackLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _NokiaStr
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     ___wmul
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _gotoXy
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _respondECU
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _sendData
       _CRC8
       _FastTransfer_buffer_flush
         _memset
       _crcBufS_put
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     19      82       4       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3F8       9        0.0%
DATA                 0      0     3F8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu May 05 01:23:08 2016

                      _SPI1_Exchange8bit 12F6        __end_of_FastTransfer_buffer_flush 0EAE  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l85 0FFA  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l223 12FE  
                                    l500 0B2C                                      l511 0BC0  
                                    l424 00FC                                      l631 0ADC  
                                    l660 1026                                      l397 0FD0  
                                    l646 0B26                                      l638 0AE4  
                                    l727 12A4                                      l671 1032  
                                    l729 12A6                                      l666 102C  
                                    l676 1038                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000                      ??_SPI1_Exchange8bit 001B  
   FastTransfer_buffer_flush@clearBuffer 0025                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_LVP$OFF 000000  
                                   l3102 10F8                                     l3210 0F80  
                                   l3122 0FBA                                     l3130 0FD6  
                                   l3202 082C                                     l3106 1108  
                                   l3116 0FA4                                     l3132 0FDC  
                                   l3220 0D92                                     l3206 0F64  
                                   l3400 02E0                                     l3152 037C  
                                   l3170 05EC                                     l3234 0B2E  
                                   l2258 1166                                     l3218 0D8C  
                                   l3084 0FEA                                     l3252 0BB8  
                                   l3412 0344                                     l3420 0350  
                                   l3262 103E                                     l3270 088C  
                                   l3174 05F6                                     l3238 0B44  
                                   l3440 0AF4                                     l3432 0AC0  
                                   l3096 101C                                     l3280 08BC  
                                   l3272 0892                                     l3248 0B98  
                                   l3328 00B2                                     l3600 0956  
                                   l3530 09EA                                     l3098 101E  
                                   l3266 087C                                     l3290 092C  
                                   l3186 067A                                     l3194 07A6  
                                   l3338 00F2                                     l3540 0A10  
                                   l3444 0B0A                                     l3428 0AAA  
                                   l3284 08E4                                     l3550 0A8A  
                                   l3462 0E18                                     l3390 02D4  
                                   l3374 0234                                     l3630 09CA  
                                   l3480 11DA                                     l3536 09FA  
                                   l3288 090C                                     l3376 023A  
                                   l3368 019A                                     l3632 09D4  
                                   l3378 024E                                     l3634 09DE  
                                   l3492 1202                                     l3476 11CA  
                                   l3488 11F2                     receiveData@crcHolder 00CD  
                                   STR_1 7FFB                                     STR_2 7FFB  
                                   STR_3 7FF4                                     _CRC8 0F9E  
                                   u2130 0786                                     _LATA 000F89  
                                   _LATB 000F8A                                     u2151 037A  
                                   _LATC 000F8B                                     u2320 08DC  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2330 0904                                     u2421 013E  
                                   u2327 08D2                                     u2337 08FA  
                                   u2700 09C8                                     u2720 09D2  
                                   u2740 09DC                                     u2760 09E6  
                                   u2761 09E2                                     u2827 0F6A  
                                   i2l97 10EA                                     _WPUB 000F61  
                  ??_EUSART2_Receive_ISR 0001                            _EUSART2_Write 0FE8  
                                   _main 0946                          _TMR0_StartTimer 1342  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 04C8  
                                   start 00AC                __end_of_SPI1_Exchange8bit 1306  
                          __CFG_IESO$OFF 000000             __end_of_EUSART2_Transmit_ISR 10EE  
                           ___param_bank 000010                                    ?_CRC8 001B  
                __end_of_TMR0_Initialize 12CA                         __end_of_CRCcheck 0BC2  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1314  
                     crcBufS_put@address 001D                                    ?_main 0001  
                                  _T0CON 000FD5                                    _LATB0 007C50  
                                  _LATB1 007C51                                    _LATA3 007C4B  
                                  _LATC0 007C58                                    _LATC1 007C59  
                                  _LATB3 007C53                                    _LATD0 007C60  
                                  _LATB4 007C54                                    _LATA6 007C4E  
                                  _LATB5 007C55                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l183 0070  
                                  i2l175 004E                         __end_of_LCDwrite 12B2  
                                  i2l177 005A                                    i2l179 0066  
                                  i2l556 0C50                                    i2l587 1266  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 0F52  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 00D9  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 108E  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _Start 0027  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 00B5  
                         __CFG_EBTRB$OFF 000000                                    _group 0029  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 132E  
                         ?_EUSART2_Write 0001                                    tablat 000FF5  
                   __size_of_crcBufS_get 00E2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0FE8                          CRCcheck@SentCRC 00C0  
                        __initialization 0CE0                             __end_of_main 09EA  
                             ToSend@what 00C2                                   ??_CRC8 001E  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0027  
                       __end_of_NokiaStr 0A8E                            __activetblptr 000002  
                          SetMux@channel 001B                        SetCharger@Current 00C0  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
                             _SetCharger 0DE0            FastTransfer_buffer_put@towhat 0024  
                __end_of_TMR0_StartTimer 1346               __end_of_EUSART2_Initialize 108E  
               _eusart2TxBufferRemaining 0043                               Precharge@i 00C1  
                      SetCharger@Voltage 00C1                                   _ANSELA 000F38  
                                 ?_putch 0001                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                               _NokiaStart 0C54  
                                 _RC1STA 000FAB                                   _RC2STA 000F71  
                                 Delay@i 0020                                   i2l2426 1190  
                         __CFG_WDTEN$OFF 000000                                   i2l2680 0554  
            UART_buff_modulo_inc@modulus 0003                                   i2l2674 04E8  
                                 i2l2762 10E6                                   i2l2694 0C4C  
                                 i2l2776 1142                                   i2l2768 1122  
                                 i2l2788 10B8                                   _RCREG1 000FAE  
                                 _RCREG2 000F74                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _SPBRG2 000F75  
                                 _TX1STA 000FAC                                   _TX2STA 000F72  
                                 _TRISA3 007C93                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                       __end_of_blackLcd 1212                                   _TXREG1 000FAD  
                                 _TXREG2 000F73                    SPI1_Exchange8bit@data 001B  
                       __end_of_clearLcd 11EA               __size_of_SPI1_Exchange8bit 0010  
                         __CFG_XINST$OFF 000000                                   _ToSend 127C  
                                 _SetMux 1022                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                            _output_buffer 0300  
                       crcBufS_get@space 001E                                   ___wmul 1238  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                       ?_TMR0_Initialize 0001                                   _gotoXy 119A  
                                 _memset 10EE                                   clear_0 0CE6  
                                 clear_1 0CF2                                   clear_2 0CFE  
                                 clear_3 0D0A                                   clear_4 0D16  
                                 clear_5 0D22                       __size_of_Precharge 009E  
                                 _printf 0872                                   _rx_len 0040  
                       __end_of_sendData 0DE0                             __pdataCOMRAM 0044  
                           __mediumconst 7E2C                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174                     _EUSART2_Transmit_ISR 10C0  
           __end_of_UART_buff_modulo_inc 119A                          ??_EUSART2_Write 001B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart2RxBuffer 0088  
                      _SYSTEM_Initialize 12CA                          _eusart2TxBuffer 0090  
                             __accesstop 0060                  __end_of__initialization 0D5A  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                              ?_LCDwrite 0021                            __end_of_Delay 0F9E  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 079C  
                           __pidataBANK0 1338                      ??_SYSTEM_Initialize 001B  
                       crcBufS_put@_this 001B   __end_of_FastTransfer_buffer_modulo_inc 1170  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1146  
                            NokiaStr@len 0025                        ??_SPI1_Initialize 001B  
                            NokiaStr@str 0023                            __end_of_putch 1338  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0026  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0C54                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05E2                                  ??_Delay 001F  
                            ?_SetCharger 00C0                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 127C                _FastTransfer_buffer_flush 0E4C  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 12E0                   receiveData@holder_1421 00D2  
                                ??_putch 001C                      _addressErrorCounter 0098  
                            ?_NokiaStart 0001                            _eusart2RxHead 0036  
                          _eusart2TxHead 0038                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                     __end_of_FONTLOOKUP 7FF4                            _eusart2RxTail 0037  
                          _eusart2TxTail 0039                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 0B2C                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 0023  
                             ??_LCDwrite 0022                     __size_of_receiveData 02A4  
                                ?_ToSend 00C2                                  ?_SetMux 0001  
                     __CFG_CCP2MX$PORTC1 000000                                  ?___wmul 001B  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_gotoXy 0023                                  ?_memset 001B  
                             _crc_buffer 00A4                                  ?_printf 001D  
                     UART_buff_put@_this 0007                                ?_blackLcd 0001  
                              ?_clearLcd 0001                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 1146             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP1ADD 000FC8                      sendData@whereToSend 00C1  
                    _receiveArrayAddress 002B                                  _SSP1BUF 000FC9  
                              ?_sendData 0001                        _alignErrorCounter 009A  
                             ??_NokiaStr 00C0                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 001C                          __size_of_SetMux 0038  
                    __size_of_SetCharger 006C                                _AKNAKsend 0033  
                   _UART_buff_modulo_inc 1170                          __size_of___wmul 0026  
                                _calc_CS 0034                                  __pcinit 0CE0  
                    __size_of_NokiaStart 008C                          __size_of_gotoXy 0028  
                        __size_of_memset 002C                                  __ramtop 0600  
                                __ptext0 0946                                  __ptext1 1212  
                                __ptext2 0EAE                                  __ptext3 0D68  
                                __ptext4 06C4                                  __ptext5 0E4C  
                                __ptext6 10EE                                  __ptext7 127C  
                                __ptext8 0354                                  __ptext9 1146  
                        __size_of_printf 00D4                                _T0CONbits 000FD5  
                  _OSCILLATOR_Initialize 1306                   ??_EUSART2_Transmit_ISR 0001  
                             ??_blackLcd 0023                  _FastTransfer_buffer_put 0354  
                  CRCcheck@calculatedCRC 00C1                 ??_PIN_MANAGER_Initialize 001B  
                             ??_clearLcd 0023             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0016                     end_of_initialization 0D5A  
                              Delay@wait 001B                                  gotoXy@x 0024  
                                gotoXy@y 0023                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7E2C                               ??_sendData 00C0  
                     _EUSART2_Initialize 105A                                  printf@c 0024  
                                printf@f 001D                    ?_UART_buff_modulo_inc 0001  
                   __size_of_updateComms 0026                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0EAE  
                    CRCcheck@arrayHolder 00C2                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 009E                               _rx_address 003E  
                           LCDwrite@data 0021                             LCDwrite@mode 0022  
                              _TRISBbits 000F93                     ??_EUSART2_Initialize 001B  
     __size_of_FastTransfer_buffer_flush 0062                          _SPI1_Initialize 1314  
                         _UART_buff_size 12E0                      __end_of_crcBufS_get 06C4  
                    __end_of_crcBufS_put 079C                        __size_of_CRCcheck 0096  
                        Precharge@i_1701 00C3                            _moduleAddress 003C  
                   _timer0ReloadVal16bit 0041                               CRCcheck@rt 00C5  
                         __end_of_ToSend 1298                           __end_of_SetMux 105A  
                      __size_of_LCDwrite 001A             __end_of_INTERRUPT_Initialize 132E  
                        _crcErrorCounter 009C                           __end_of___wmul 125E  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1346  
              ??_FastTransfer_buffer_put 00C0                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 11C2                           __end_of_memset 111A  
                      crcBufS_put@status 001F                           __end_of_printf 0946  
                           receiveData@r 00D7                             receiveData@u 00D5  
                           ??_SetCharger 0027                      start_initialization 0CE0  
               __size_of_TMR0_Initialize 0018          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 0025                                NokiaStr@i 00C3  
                            putch@txData 001C                             ??_NokiaStart 0025  
                  __end_of_EUSART2_Write 1022                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 12F6                           UART_buff_put@c 0009  
                              _Precharge 0A8E                                 ??_ToSend 0026  
                               ??_SetMux 001B                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_NokiaStr 00A4                       __end_of_SetCharger 0E4C  
                            ?_respondECU 0001                                 ??___wmul 001F  
                            __pdataBANK0 00D9                                 ??_gotoXy 0024  
                               ??_memset 0021                                 ??_printf 0021  
                     __end_of_NokiaStart 0CE0                           _eusart2RxCount 0035  
                            __pbssCOMRAM 0027            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00C0                        __size_of_blackLcd 0028  
                __end_of_SPI1_Initialize 1322                        __size_of_clearLcd 0028  
                            _crcBufS_get 05E2                              _crcBufS_put 06C4  
                    EUSART2_Write@txData 001B                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00C7  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00C2  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                               ?_Precharge 0001  
                 _PIN_MANAGER_Initialize 0F02                        __size_of_sendData 0078  
                              __pintcode 0008                            __pmediumconst 7E2C  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                    __size_of_respondECU 0054                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 1322                             _receiveArray 0060  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 002C  
                               _CRCcheck 0B2C                           ___wmul@product 001F  
                               _LATBbits 000F8A                                 _LATCbits 000F8B  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 1298  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u153_40 0BE0  
                               i2u165_40 10A8                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0354  
                               _SSP1CON1 000FC6                                 _SSP1STAT 000FC7  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0200  
                              _rx_buffer 0400                        ___wmul@multiplier 001B  
                             printf@flag 0021                            _UART_buff_get 0BC2  
                          _UART_buff_put 04C8                           Precharge@OnOff 00C0  
          __size_of_EUSART2_Transmit_ISR 002E                         ?_SPI1_Initialize 0001  
                         SetCharger@mode 00C2                              _INTCON2bits 000FF1  
                              copy_data0 0D3C                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002D                            ??_updateComms 0027  
                            blackLcd@res 0023                                 _NokiaStr 09EA  
                               __Hrparam 0000                              ??_Precharge 0024  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                      ??_TMR0_StartTimer 001B                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                               _blackLcd 11EA                                sendData@i 00C3  
                               _clearLcd 11C2                 crcBufS_status_put@status 001E  
                               __ptext10 00B0                                 __ptext11 0B2C  
                               __ptext20 0A8E                                 __ptext12 079C  
                               __ptext21 119A                                 __ptext13 05E2  
                               __ptext30 1238                                 __ptext22 12CA  
                               __ptext14 0F9E                                 __ptext31 0C54  
                               __ptext23 12B2                                 __ptext15 0DE0  
                               __ptext40 111A                                 __ptext32 11C2  
                               __ptext24 1342                                 __ptext16 0872  
                               __ptext41 108E                                 __ptext33 11EA  
                               __ptext25 0F02                                 __ptext17 132E  
                               __ptext42 12E0                                 __ptext34 1298  
                               __ptext26 1306                                 __ptext18 0FE8  
                               __ptext43 0BC2                                 __ptext35 12F6  
                               __ptext27 1322                                 __ptext19 1022  
                               __ptext44 125E                                 __ptext36 1314  
                               __ptext28 105A                                 __ptext45 04C8  
                               __ptext37 0F52                                 __ptext29 09EA  
                               __ptext46 1170                                 __ptext39 10C0  
                           _SSP1CON1bits 000FC6                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 003D                            __size_of_main 00A4  
                            _receiveData 00B0                           _Transmit_stall 0044  
                               _sendData 0D68                               _RC1STAbits 000FAB  
                             _RC2STAbits 000F71                              clearLcd@res 0023  
                             _FONTLOOKUP 7E2D                             ??_respondECU 0027  
                               int$flags 0045                             _serial_write 0031  
                    __end_of_updateComms 1238       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 125E                        receiveData@holder 00CF  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00A0  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0F02                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 10C0  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0023  
                            _serial_peek 00A2                              _serial_read 002F  
               ?_FastTransfer_buffer_put 0021                                 printf@ap 0022  
                               printf@cp 0025            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0009                          ??_UART_buff_put 000A  
                 __size_of_EUSART2_Write 003A                      _EUSART2_Receive_ISR 111A  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 12B2                receiveData@crcHolder_1422 00CE  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0872                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0F52         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 1212  
