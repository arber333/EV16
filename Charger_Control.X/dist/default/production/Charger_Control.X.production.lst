

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun May 15 10:42:27 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    74                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    75                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    76  0000                     
    77                           	psect	idataCOMRAM
    78  001452                     __pidataCOMRAM:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _Transmit_stall
    82  001452  01                 	db	1
    83                           
    84                           	psect	idataBANK0
    85  001440                     __pidataBANK0:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _ChargerData
    89  001440  4D                 	db	77
    90  001441  2C                 	db	44
    91  001442  00                 	db	0
    92  001443  2C                 	db	44
    93  001444  00                 	db	0
    94  001445  2C                 	db	44
    95  001446  00                 	db	0
    96  001447  2C                 	db	44
    97  001448  45                 	db	69
    98                           
    99                           	psect	mediumconst
   100  007DF4                     __pmediumconst:
   101                           	opt stack 0
   102  007DF4  00                 	db	0
   103  007DF5                     _FONTLOOKUP:
   104                           	opt stack 0
   105  007DF5  00                 	db	0
   106  007DF6  00                 	db	0
   107  007DF7  00                 	db	0
   108  007DF8  00                 	db	0
   109  007DF9  00                 	db	0
   110  007DFA  00                 	db	0
   111  007DFB  00                 	db	0
   112  007DFC  5F                 	db	95
   113  007DFD  00                 	db	0
   114  007DFE  00                 	db	0
   115  007DFF  00                 	db	0
   116  007E00  07                 	db	7
   117  007E01  00                 	db	0
   118  007E02  07                 	db	7
   119  007E03  00                 	db	0
   120  007E04  14                 	db	20
   121  007E05  7F                 	db	127
   122  007E06  14                 	db	20
   123  007E07  7F                 	db	127
   124  007E08  14                 	db	20
   125  007E09  24                 	db	36
   126  007E0A  2A                 	db	42
   127  007E0B  7F                 	db	127
   128  007E0C  2A                 	db	42
   129  007E0D  12                 	db	18
   130  007E0E  23                 	db	35
   131  007E0F  13                 	db	19
   132  007E10  08                 	db	8
   133  007E11  64                 	db	100
   134  007E12  62                 	db	98
   135  007E13  36                 	db	54
   136  007E14  49                 	db	73
   137  007E15  55                 	db	85
   138  007E16  22                 	db	34
   139  007E17  50                 	db	80
   140  007E18  00                 	db	0
   141  007E19  05                 	db	5
   142  007E1A  03                 	db	3
   143  007E1B  00                 	db	0
   144  007E1C  00                 	db	0
   145  007E1D  00                 	db	0
   146  007E1E  1C                 	db	28
   147  007E1F  22                 	db	34
   148  007E20  41                 	db	65
   149  007E21  00                 	db	0
   150  007E22  00                 	db	0
   151  007E23  41                 	db	65
   152  007E24  22                 	db	34
   153  007E25  1C                 	db	28
   154  007E26  00                 	db	0
   155  007E27  14                 	db	20
   156  007E28  08                 	db	8
   157  007E29  3E                 	db	62
   158  007E2A  08                 	db	8
   159  007E2B  14                 	db	20
   160  007E2C  08                 	db	8
   161  007E2D  08                 	db	8
   162  007E2E  3E                 	db	62
   163  007E2F  08                 	db	8
   164  007E30  08                 	db	8
   165  007E31  00                 	db	0
   166  007E32  50                 	db	80
   167  007E33  30                 	db	48
   168  007E34  00                 	db	0
   169  007E35  00                 	db	0
   170  007E36  08                 	db	8
   171  007E37  08                 	db	8
   172  007E38  08                 	db	8
   173  007E39  08                 	db	8
   174  007E3A  08                 	db	8
   175  007E3B  00                 	db	0
   176  007E3C  60                 	db	96
   177  007E3D  60                 	db	96
   178  007E3E  00                 	db	0
   179  007E3F  00                 	db	0
   180  007E40  20                 	db	32
   181  007E41  10                 	db	16
   182  007E42  08                 	db	8
   183  007E43  04                 	db	4
   184  007E44  02                 	db	2
   185  007E45  3E                 	db	62
   186  007E46  51                 	db	81
   187  007E47  49                 	db	73
   188  007E48  45                 	db	69
   189  007E49  3E                 	db	62
   190  007E4A  00                 	db	0
   191  007E4B  42                 	db	66
   192  007E4C  7F                 	db	127
   193  007E4D  40                 	db	64
   194  007E4E  00                 	db	0
   195  007E4F  42                 	db	66
   196  007E50  61                 	db	97
   197  007E51  51                 	db	81
   198  007E52  49                 	db	73
   199  007E53  46                 	db	70
   200  007E54  21                 	db	33
   201  007E55  41                 	db	65
   202  007E56  45                 	db	69
   203  007E57  4B                 	db	75
   204  007E58  31                 	db	49
   205  007E59  18                 	db	24
   206  007E5A  14                 	db	20
   207  007E5B  12                 	db	18
   208  007E5C  7F                 	db	127
   209  007E5D  10                 	db	16
   210  007E5E  27                 	db	39
   211  007E5F  45                 	db	69
   212  007E60  45                 	db	69
   213  007E61  45                 	db	69
   214  007E62  39                 	db	57
   215  007E63  3C                 	db	60
   216  007E64  4A                 	db	74
   217  007E65  49                 	db	73
   218  007E66  49                 	db	73
   219  007E67  30                 	db	48
   220  007E68  01                 	db	1
   221  007E69  71                 	db	113
   222  007E6A  09                 	db	9
   223  007E6B  05                 	db	5
   224  007E6C  03                 	db	3
   225  007E6D  36                 	db	54
   226  007E6E  49                 	db	73
   227  007E6F  49                 	db	73
   228  007E70  49                 	db	73
   229  007E71  36                 	db	54
   230  007E72  06                 	db	6
   231  007E73  49                 	db	73
   232  007E74  49                 	db	73
   233  007E75  29                 	db	41
   234  007E76  1E                 	db	30
   235  007E77  00                 	db	0
   236  007E78  36                 	db	54
   237  007E79  36                 	db	54
   238  007E7A  00                 	db	0
   239  007E7B  00                 	db	0
   240  007E7C  00                 	db	0
   241  007E7D  56                 	db	86
   242  007E7E  36                 	db	54
   243  007E7F  00                 	db	0
   244  007E80  00                 	db	0
   245  007E81  08                 	db	8
   246  007E82  14                 	db	20
   247  007E83  22                 	db	34
   248  007E84  41                 	db	65
   249  007E85  00                 	db	0
   250  007E86  14                 	db	20
   251  007E87  14                 	db	20
   252  007E88  14                 	db	20
   253  007E89  14                 	db	20
   254  007E8A  14                 	db	20
   255  007E8B  00                 	db	0
   256  007E8C  41                 	db	65
   257  007E8D  22                 	db	34
   258  007E8E  14                 	db	20
   259  007E8F  08                 	db	8
   260  007E90  02                 	db	2
   261  007E91  01                 	db	1
   262  007E92  51                 	db	81
   263  007E93  09                 	db	9
   264  007E94  06                 	db	6
   265  007E95  32                 	db	50
   266  007E96  49                 	db	73
   267  007E97  79                 	db	121
   268  007E98  41                 	db	65
   269  007E99  3E                 	db	62
   270  007E9A  7E                 	db	126
   271  007E9B  11                 	db	17
   272  007E9C  11                 	db	17
   273  007E9D  11                 	db	17
   274  007E9E  7E                 	db	126
   275  007E9F  7F                 	db	127
   276  007EA0  49                 	db	73
   277  007EA1  49                 	db	73
   278  007EA2  49                 	db	73
   279  007EA3  36                 	db	54
   280  007EA4  3E                 	db	62
   281  007EA5  41                 	db	65
   282  007EA6  41                 	db	65
   283  007EA7  41                 	db	65
   284  007EA8  22                 	db	34
   285  007EA9  7F                 	db	127
   286  007EAA  41                 	db	65
   287  007EAB  41                 	db	65
   288  007EAC  22                 	db	34
   289  007EAD  1C                 	db	28
   290  007EAE  7F                 	db	127
   291  007EAF  49                 	db	73
   292  007EB0  49                 	db	73
   293  007EB1  49                 	db	73
   294  007EB2  41                 	db	65
   295  007EB3  7F                 	db	127
   296  007EB4  09                 	db	9
   297  007EB5  09                 	db	9
   298  007EB6  09                 	db	9
   299  007EB7  01                 	db	1
   300  007EB8  3E                 	db	62
   301  007EB9  41                 	db	65
   302  007EBA  49                 	db	73
   303  007EBB  49                 	db	73
   304  007EBC  7A                 	db	122
   305  007EBD  7F                 	db	127
   306  007EBE  08                 	db	8
   307  007EBF  08                 	db	8
   308  007EC0  08                 	db	8
   309  007EC1  7F                 	db	127
   310  007EC2  00                 	db	0
   311  007EC3  41                 	db	65
   312  007EC4  7F                 	db	127
   313  007EC5  41                 	db	65
   314  007EC6  00                 	db	0
   315  007EC7  20                 	db	32
   316  007EC8  40                 	db	64
   317  007EC9  41                 	db	65
   318  007ECA  3F                 	db	63
   319  007ECB  01                 	db	1
   320  007ECC  7F                 	db	127
   321  007ECD  08                 	db	8
   322  007ECE  14                 	db	20
   323  007ECF  22                 	db	34
   324  007ED0  41                 	db	65
   325  007ED1  7F                 	db	127
   326  007ED2  40                 	db	64
   327  007ED3  40                 	db	64
   328  007ED4  40                 	db	64
   329  007ED5  40                 	db	64
   330  007ED6  7F                 	db	127
   331  007ED7  02                 	db	2
   332  007ED8  0C                 	db	12
   333  007ED9  02                 	db	2
   334  007EDA  7F                 	db	127
   335  007EDB  7F                 	db	127
   336  007EDC  04                 	db	4
   337  007EDD  08                 	db	8
   338  007EDE  10                 	db	16
   339  007EDF  7F                 	db	127
   340  007EE0  3E                 	db	62
   341  007EE1  41                 	db	65
   342  007EE2  41                 	db	65
   343  007EE3  41                 	db	65
   344  007EE4  3E                 	db	62
   345  007EE5  7F                 	db	127
   346  007EE6  09                 	db	9
   347  007EE7  09                 	db	9
   348  007EE8  09                 	db	9
   349  007EE9  06                 	db	6
   350  007EEA  3E                 	db	62
   351  007EEB  41                 	db	65
   352  007EEC  51                 	db	81
   353  007EED  21                 	db	33
   354  007EEE  5E                 	db	94
   355  007EEF  7F                 	db	127
   356  007EF0  09                 	db	9
   357  007EF1  19                 	db	25
   358  007EF2  29                 	db	41
   359  007EF3  46                 	db	70
   360  007EF4  46                 	db	70
   361  007EF5  49                 	db	73
   362  007EF6  49                 	db	73
   363  007EF7  49                 	db	73
   364  007EF8  31                 	db	49
   365  007EF9  01                 	db	1
   366  007EFA  01                 	db	1
   367  007EFB  7F                 	db	127
   368  007EFC  01                 	db	1
   369  007EFD  01                 	db	1
   370  007EFE  3F                 	db	63
   371  007EFF  40                 	db	64
   372  007F00  40                 	db	64
   373  007F01  40                 	db	64
   374  007F02  3F                 	db	63
   375  007F03  1F                 	db	31
   376  007F04  20                 	db	32
   377  007F05  40                 	db	64
   378  007F06  20                 	db	32
   379  007F07  1F                 	db	31
   380  007F08  3F                 	db	63
   381  007F09  40                 	db	64
   382  007F0A  38                 	db	56
   383  007F0B  40                 	db	64
   384  007F0C  3F                 	db	63
   385  007F0D  63                 	db	99
   386  007F0E  14                 	db	20
   387  007F0F  08                 	db	8
   388  007F10  14                 	db	20
   389  007F11  63                 	db	99
   390  007F12  07                 	db	7
   391  007F13  08                 	db	8
   392  007F14  70                 	db	112
   393  007F15  08                 	db	8
   394  007F16  07                 	db	7
   395  007F17  61                 	db	97
   396  007F18  51                 	db	81
   397  007F19  49                 	db	73
   398  007F1A  45                 	db	69
   399  007F1B  43                 	db	67
   400  007F1C  00                 	db	0
   401  007F1D  7F                 	db	127
   402  007F1E  41                 	db	65
   403  007F1F  41                 	db	65
   404  007F20  00                 	db	0
   405  007F21  02                 	db	2
   406  007F22  04                 	db	4
   407  007F23  08                 	db	8
   408  007F24  10                 	db	16
   409  007F25  20                 	db	32
   410  007F26  00                 	db	0
   411  007F27  41                 	db	65
   412  007F28  41                 	db	65
   413  007F29  7F                 	db	127
   414  007F2A  00                 	db	0
   415  007F2B  04                 	db	4
   416  007F2C  02                 	db	2
   417  007F2D  01                 	db	1
   418  007F2E  02                 	db	2
   419  007F2F  04                 	db	4
   420  007F30  40                 	db	64
   421  007F31  40                 	db	64
   422  007F32  40                 	db	64
   423  007F33  40                 	db	64
   424  007F34  40                 	db	64
   425  007F35  00                 	db	0
   426  007F36  01                 	db	1
   427  007F37  02                 	db	2
   428  007F38  04                 	db	4
   429  007F39  00                 	db	0
   430  007F3A  20                 	db	32
   431  007F3B  54                 	db	84
   432  007F3C  54                 	db	84
   433  007F3D  54                 	db	84
   434  007F3E  78                 	db	120
   435  007F3F  7F                 	db	127
   436  007F40  48                 	db	72
   437  007F41  44                 	db	68
   438  007F42  44                 	db	68
   439  007F43  38                 	db	56
   440  007F44  38                 	db	56
   441  007F45  44                 	db	68
   442  007F46  44                 	db	68
   443  007F47  44                 	db	68
   444  007F48  20                 	db	32
   445  007F49  38                 	db	56
   446  007F4A  44                 	db	68
   447  007F4B  44                 	db	68
   448  007F4C  48                 	db	72
   449  007F4D  7F                 	db	127
   450  007F4E  38                 	db	56
   451  007F4F  54                 	db	84
   452  007F50  54                 	db	84
   453  007F51  54                 	db	84
   454  007F52  18                 	db	24
   455  007F53  08                 	db	8
   456  007F54  7E                 	db	126
   457  007F55  09                 	db	9
   458  007F56  01                 	db	1
   459  007F57  02                 	db	2
   460  007F58  0C                 	db	12
   461  007F59  52                 	db	82
   462  007F5A  52                 	db	82
   463  007F5B  52                 	db	82
   464  007F5C  3E                 	db	62
   465  007F5D  7F                 	db	127
   466  007F5E  08                 	db	8
   467  007F5F  04                 	db	4
   468  007F60  04                 	db	4
   469  007F61  78                 	db	120
   470  007F62  00                 	db	0
   471  007F63  44                 	db	68
   472  007F64  7D                 	db	125
   473  007F65  40                 	db	64
   474  007F66  00                 	db	0
   475  007F67  20                 	db	32
   476  007F68  40                 	db	64
   477  007F69  44                 	db	68
   478  007F6A  3D                 	db	61
   479  007F6B  00                 	db	0
   480  007F6C  7F                 	db	127
   481  007F6D  10                 	db	16
   482  007F6E  28                 	db	40
   483  007F6F  44                 	db	68
   484  007F70  00                 	db	0
   485  007F71  00                 	db	0
   486  007F72  41                 	db	65
   487  007F73  7F                 	db	127
   488  007F74  40                 	db	64
   489  007F75  00                 	db	0
   490  007F76  7C                 	db	124
   491  007F77  04                 	db	4
   492  007F78  18                 	db	24
   493  007F79  04                 	db	4
   494  007F7A  78                 	db	120
   495  007F7B  7C                 	db	124
   496  007F7C  08                 	db	8
   497  007F7D  04                 	db	4
   498  007F7E  04                 	db	4
   499  007F7F  78                 	db	120
   500  007F80  38                 	db	56
   501  007F81  44                 	db	68
   502  007F82  44                 	db	68
   503  007F83  44                 	db	68
   504  007F84  38                 	db	56
   505  007F85  7C                 	db	124
   506  007F86  14                 	db	20
   507  007F87  14                 	db	20
   508  007F88  14                 	db	20
   509  007F89  08                 	db	8
   510  007F8A  08                 	db	8
   511  007F8B  14                 	db	20
   512  007F8C  14                 	db	20
   513  007F8D  18                 	db	24
   514  007F8E  7C                 	db	124
   515  007F8F  7C                 	db	124
   516  007F90  08                 	db	8
   517  007F91  04                 	db	4
   518  007F92  04                 	db	4
   519  007F93  08                 	db	8
   520  007F94  48                 	db	72
   521  007F95  54                 	db	84
   522  007F96  54                 	db	84
   523  007F97  54                 	db	84
   524  007F98  20                 	db	32
   525  007F99  04                 	db	4
   526  007F9A  3F                 	db	63
   527  007F9B  44                 	db	68
   528  007F9C  40                 	db	64
   529  007F9D  20                 	db	32
   530  007F9E  3C                 	db	60
   531  007F9F  40                 	db	64
   532  007FA0  40                 	db	64
   533  007FA1  20                 	db	32
   534  007FA2  7C                 	db	124
   535  007FA3  1C                 	db	28
   536  007FA4  20                 	db	32
   537  007FA5  40                 	db	64
   538  007FA6  20                 	db	32
   539  007FA7  1C                 	db	28
   540  007FA8  3C                 	db	60
   541  007FA9  40                 	db	64
   542  007FAA  30                 	db	48
   543  007FAB  40                 	db	64
   544  007FAC  3C                 	db	60
   545  007FAD  44                 	db	68
   546  007FAE  28                 	db	40
   547  007FAF  10                 	db	16
   548  007FB0  28                 	db	40
   549  007FB1  44                 	db	68
   550  007FB2  0C                 	db	12
   551  007FB3  50                 	db	80
   552  007FB4  50                 	db	80
   553  007FB5  50                 	db	80
   554  007FB6  3C                 	db	60
   555  007FB7  44                 	db	68
   556  007FB8  64                 	db	100
   557  007FB9  54                 	db	84
   558  007FBA  4C                 	db	76
   559  007FBB  44                 	db	68
   560  007FBC  00                 	db	0
   561  007FBD  08                 	db	8
   562  007FBE  36                 	db	54
   563  007FBF  41                 	db	65
   564  007FC0  00                 	db	0
   565  007FC1  00                 	db	0
   566  007FC2  00                 	db	0
   567  007FC3  7F                 	db	127
   568  007FC4  00                 	db	0
   569  007FC5  00                 	db	0
   570  007FC6  00                 	db	0
   571  007FC7  41                 	db	65
   572  007FC8  36                 	db	54
   573  007FC9  08                 	db	8
   574  007FCA  00                 	db	0
   575  007FCB  10                 	db	16
   576  007FCC  08                 	db	8
   577  007FCD  08                 	db	8
   578  007FCE  10                 	db	16
   579  007FCF  08                 	db	8
   580  007FD0  78                 	db	120
   581  007FD1  46                 	db	70
   582  007FD2  41                 	db	65
   583  007FD3  46                 	db	70
   584  007FD4  78                 	db	120
   585  007FD5                     __end_of_FONTLOOKUP:
   586                           	opt stack 0
   587  007FD5                     STR_3:
   588  007FD5  43                 	db	67	;'C'
   589  007FD6  68                 	db	104	;'h'
   590  007FD7  61                 	db	97	;'a'
   591  007FD8  72                 	db	114	;'r'
   592  007FD9  67                 	db	103	;'g'
   593  007FDA  65                 	db	101	;'e'
   594  007FDB  72                 	db	114	;'r'
   595  007FDC  20                 	db	32
   596  007FDD  43                 	db	67	;'C'
   597  007FDE  6F                 	db	111	;'o'
   598  007FDF  6E                 	db	110	;'n'
   599  007FE0  74                 	db	116	;'t'
   600  007FE1  72                 	db	114	;'r'
   601  007FE2  6F                 	db	111	;'o'
   602  007FE3  6C                 	db	108	;'l'
   603  007FE4  00                 	db	0
   604  007FE5                     STR_4:
   605  007FE5  57                 	db	87	;'W'
   606  007FE6  61                 	db	97	;'a'
   607  007FE7  69                 	db	105	;'i'
   608  007FE8  74                 	db	116	;'t'
   609  007FE9  69                 	db	105	;'i'
   610  007FEA  6E                 	db	110	;'n'
   611  007FEB  67                 	db	103	;'g'
   612  007FEC  20                 	db	32
   613  007FED  6F                 	db	111	;'o'
   614  007FEE  6E                 	db	110	;'n'
   615  007FEF  20                 	db	32
   616  007FF0  42                 	db	66	;'B'
   617  007FF1  4D                 	db	77	;'M'
   618  007FF2  4D                 	db	77	;'M'
   619  007FF3  00                 	db	0
   620  007FF4                     STR_5:
   621  007FF4  28                 	db	40
   622  007FF5  6E                 	db	110	;'n'
   623  007FF6  75                 	db	117	;'u'
   624  007FF7  6C                 	db	108	;'l'
   625  007FF8  6C                 	db	108	;'l'
   626  007FF9  29                 	db	41
   627  007FFA  00                 	db	0
   628  007FFB                     STR_1:
   629  007FFB  25                 	db	37
   630  007FFC  73                 	db	115	;'s'
   631  007FFD  00                 	db	0
   632  0000                     
   633                           ; #config settings
   634  007FFE  00                 	db	0	; dummy byte at the end
   635  0000                     
   636                           	psect	nvCOMRAM
   637  000041                     __pnvCOMRAM:
   638                           	opt stack 0
   639  000041                     _timer0ReloadVal16bit:
   640                           	opt stack 0
   641  000041                     	ds	2
   642  000043                     _eusart2TxBufferRemaining:
   643                           	opt stack 0
   644  000043                     	ds	1
   645  0000                     _ANSELA	set	3896
   646  0000                     _ANSELB	set	3897
   647  0000                     _ANSELC	set	3898
   648  0000                     _ANSELD	set	3899
   649  0000                     _ANSELE	set	3900
   650  0000                     _BAUD1CON	set	4024
   651  0000                     _BAUD2CON	set	3952
   652  0000                     _INTCON2bits	set	4081
   653  0000                     _INTCONbits	set	4082
   654  0000                     _IPR1bits	set	3999
   655  0000                     _IPR3bits	set	4005
   656  0000                     _LATA	set	3977
   657  0000                     _LATB	set	3978
   658  0000                     _LATBbits	set	3978
   659  0000                     _LATC	set	3979
   660  0000                     _LATCbits	set	3979
   661  0000                     _LATD	set	3980
   662  0000                     _LATE	set	3981
   663  0000                     _OSCCON	set	4051
   664  0000                     _OSCCON2	set	4050
   665  0000                     _OSCTUNE	set	3995
   666  0000                     _PIE1bits	set	3997
   667  0000                     _PIE3bits	set	4003
   668  0000                     _PIR1bits	set	3998
   669  0000                     _PIR3bits	set	4004
   670  0000                     _RC1STA	set	4011
   671  0000                     _RC1STAbits	set	4011
   672  0000                     _RC2STA	set	3953
   673  0000                     _RC2STAbits	set	3953
   674  0000                     _RCONbits	set	4048
   675  0000                     _RCREG1	set	4014
   676  0000                     _RCREG2	set	3956
   677  0000                     _SPBRG1	set	4015
   678  0000                     _SPBRG2	set	3957
   679  0000                     _SPBRGH1	set	4016
   680  0000                     _SPBRGH2	set	3958
   681  0000                     _SSP1ADD	set	4040
   682  0000                     _SSP1BUF	set	4041
   683  0000                     _SSP1CON1	set	4038
   684  0000                     _SSP1CON1bits	set	4038
   685  0000                     _SSP1STAT	set	4039
   686  0000                     _SSP1STATbits	set	4039
   687  0000                     _T0CON	set	4053
   688  0000                     _T0CONbits	set	4053
   689  0000                     _TMR0H	set	4055
   690  0000                     _TMR0L	set	4054
   691  0000                     _TRISA	set	3986
   692  0000                     _TRISB	set	3987
   693  0000                     _TRISBbits	set	3987
   694  0000                     _TRISC	set	3988
   695  0000                     _TRISD	set	3989
   696  0000                     _TRISE	set	3990
   697  0000                     _TX1STA	set	4012
   698  0000                     _TX2STA	set	3954
   699  0000                     _TXREG1	set	4013
   700  0000                     _TXREG2	set	3955
   701  0000                     _WPUB	set	3937
   702  0000                     _LATA3	set	31819
   703  0000                     _LATB0	set	31824
   704  0000                     _LATB1	set	31825
   705  0000                     _LATB3	set	31827
   706  0000                     _LATB4	set	31828
   707  0000                     _LATB5	set	31829
   708  0000                     _LATC0	set	31832
   709  0000                     _LATC1	set	31833
   710  0000                     _LATD0	set	31840
   711  0000                     _LATD3	set	31843
   712  0000                     _TRISD0	set	31912
   713  0000                     _TRISD2	set	31914
   714  0000                     _TRISD3	set	31915
   715                           
   716                           	psect	cinit
   717  000C5C                     __pcinit:
   718                           	opt stack 0
   719  000C5C                     start_initialization:
   720                           	opt stack 0
   721  000C5C                     __initialization:
   722                           	opt stack 0
   723                           
   724                           ; Clear objects allocated to BANK4 (200 bytes)
   725  000C5C  EE04  F000         	lfsr	0,__pbssBANK4
   726  000C60  0EC8               	movlw	200
   727  000C62                     clear_0:
   728  000C62  6AEE               	clrf	postinc0,c
   729  000C64  06E8               	decf	wreg,f,c
   730  000C66  E1FD               	bnz	clear_0
   731                           
   732                           ; Clear objects allocated to BANK3 (206 bytes)
   733  000C68  EE03  F000         	lfsr	0,__pbssBANK3
   734  000C6C  0ECE               	movlw	206
   735  000C6E                     clear_1:
   736  000C6E  6AEE               	clrf	postinc0,c
   737  000C70  06E8               	decf	wreg,f,c
   738  000C72  E1FD               	bnz	clear_1
   739                           
   740                           ; Clear objects allocated to BANK2 (206 bytes)
   741  000C74  EE02  F000         	lfsr	0,__pbssBANK2
   742  000C78  0ECE               	movlw	206
   743  000C7A                     clear_2:
   744  000C7A  6AEE               	clrf	postinc0,c
   745  000C7C  06E8               	decf	wreg,f,c
   746  000C7E  E1FD               	bnz	clear_2
   747                           
   748                           ; Clear objects allocated to BANK1 (206 bytes)
   749  000C80  EE01  F000         	lfsr	0,__pbssBANK1
   750  000C84  0ECE               	movlw	206
   751  000C86                     clear_3:
   752  000C86  6AEE               	clrf	postinc0,c
   753  000C88  06E8               	decf	wreg,f,c
   754  000C8A  E1FD               	bnz	clear_3
   755                           
   756                           ; Clear objects allocated to BANK0 (112 bytes)
   757  000C8C  EE00  F060         	lfsr	0,__pbssBANK0
   758  000C90  0E70               	movlw	112
   759  000C92                     clear_4:
   760  000C92  6AEE               	clrf	postinc0,c
   761  000C94  06E8               	decf	wreg,f,c
   762  000C96  E1FD               	bnz	clear_4
   763                           
   764                           ; Clear objects allocated to COMRAM (27 bytes)
   765  000C98  EE00  F026         	lfsr	0,__pbssCOMRAM
   766  000C9C  0E1B               	movlw	27
   767  000C9E                     clear_5:
   768  000C9E  6AEE               	clrf	postinc0,c
   769  000CA0  06E8               	decf	wreg,f,c
   770  000CA2  E1FD               	bnz	clear_5
   771                           
   772                           ; Initialize objects allocated to BANK0 (9 bytes)
   773                           ; load TBLPTR registers with __pidataBANK0
   774  000CA4  0E40               	movlw	low __pidataBANK0
   775  000CA6  6EF6               	movwf	tblptrl,c
   776  000CA8  0E14               	movlw	high __pidataBANK0
   777  000CAA  6EF7               	movwf	tblptrh,c
   778  000CAC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   779  000CAE  6EF8               	movwf	tblptru,c
   780  000CB0  EE00  F0EB         	lfsr	0,__pdataBANK0
   781  000CB4  EE10 F009          	lfsr	1,9
   782  000CB8                     copy_data0:
   783  000CB8  0009               	tblrd		*+
   784  000CBA  CFF5 FFEE          	movff	tablat,postinc0
   785  000CBE  50E5               	movf	postdec1,w,c
   786  000CC0  50E1               	movf	fsr1l,w,c
   787  000CC2  E1FA               	bnz	copy_data0
   788                           
   789                           ; Initialize objects allocated to COMRAM (1 bytes)
   790                           ; load TBLPTR registers with __pidataCOMRAM
   791  000CC4  0E52               	movlw	low __pidataCOMRAM
   792  000CC6  6EF6               	movwf	tblptrl,c
   793  000CC8  0E14               	movlw	high __pidataCOMRAM
   794  000CCA  6EF7               	movwf	tblptrh,c
   795  000CCC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   796  000CCE  6EF8               	movwf	tblptru,c
   797  000CD0  0009               	tblrd		*+	;fetch initializer
   798  000CD2  CFF5 F044          	movff	tablat,__pdataCOMRAM
   799  000CD6                     end_of_initialization:
   800                           	opt stack 0
   801  000CD6                     __end_of__initialization:
   802                           	opt stack 0
   803  000CD6  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   804  000CD8  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   805  000CDA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   806  000CDC  6EF8               	movwf	tblptru,c
   807  000CDE  0100               	movlb	0
   808  000CE0  EF01  F008         	goto	_main	;jump to C main() function
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	bssCOMRAM
   819  000026                     __pbssCOMRAM:
   820                           	opt stack 0
   821  000026                     _time:
   822                           	opt stack 0
   823  000026                     	ds	4
   824  00002A                     _Start:
   825                           	opt stack 0
   826  00002A                     	ds	2
   827  00002C                     _group:
   828                           	opt stack 0
   829  00002C                     	ds	2
   830  00002E                     _receiveArrayAddress:
   831                           	opt stack 0
   832  00002E                     	ds	2
   833  000030                     _sendStructAddress:
   834                           	opt stack 0
   835  000030                     	ds	2
   836  000032                     _AKNAKsend:
   837                           	opt stack 0
   838  000032                     	ds	1
   839  000033                     _PowerOn:
   840                           	opt stack 0
   841  000033                     	ds	1
   842  000034                     _calc_CS:
   843                           	opt stack 0
   844  000034                     	ds	1
   845  000035                     _eusart2RxCount:
   846                           	opt stack 0
   847  000035                     	ds	1
   848  000036                     _eusart2RxHead:
   849                           	opt stack 0
   850  000036                     	ds	1
   851  000037                     _eusart2RxTail:
   852                           	opt stack 0
   853  000037                     	ds	1
   854  000038                     _eusart2TxHead:
   855                           	opt stack 0
   856  000038                     	ds	1
   857  000039                     _eusart2TxTail:
   858                           	opt stack 0
   859  000039                     	ds	1
   860  00003A                     _i:
   861                           	opt stack 0
   862  00003A                     	ds	1
   863  00003B                     _maxDataAddress:
   864                           	opt stack 0
   865  00003B                     	ds	1
   866  00003C                     _moduleAddress:
   867                           	opt stack 0
   868  00003C                     	ds	1
   869  00003D                     _returnAddress:
   870                           	opt stack 0
   871  00003D                     	ds	1
   872  00003E                     _rx_address:
   873                           	opt stack 0
   874  00003E                     	ds	1
   875  00003F                     _rx_array_inx:
   876                           	opt stack 0
   877  00003F                     	ds	1
   878  000040                     _rx_len:
   879                           	opt stack 0
   880  000040                     	ds	1
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           postdec1	equ	0xFE5
   888                           fsr1l	equ	0xFE1
   889                           
   890                           	psect	dataCOMRAM
   891  000044                     __pdataCOMRAM:
   892                           	opt stack 0
   893  000044                     _Transmit_stall:
   894                           	opt stack 0
   895  000044                     	ds	1
   896                           tblptru	equ	0xFF8
   897                           tblptrh	equ	0xFF7
   898                           tblptrl	equ	0xFF6
   899                           tablat	equ	0xFF5
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           postdec1	equ	0xFE5
   903                           fsr1l	equ	0xFE1
   904                           
   905                           	psect	bssBANK0
   906  000060                     __pbssBANK0:
   907                           	opt stack 0
   908  000060                     _receiveArray:
   909                           	opt stack 0
   910  000060                     	ds	40
   911  000088                     _ddata:
   912                           	opt stack 0
   913  000088                     	ds	11
   914  000093                     _eusart2RxBuffer:
   915                           	opt stack 0
   916  000093                     	ds	8
   917  00009B                     _eusart2TxBuffer:
   918                           	opt stack 0
   919  00009B                     	ds	8
   920  0000A3                     _LEDtime:
   921                           	opt stack 0
   922  0000A3                     	ds	4
   923  0000A7                     _lastLEDTime:
   924                           	opt stack 0
   925  0000A7                     	ds	4
   926  0000AB                     _talkTime:
   927                           	opt stack 0
   928  0000AB                     	ds	4
   929  0000AF                     _addressErrorCounter:
   930                           	opt stack 0
   931  0000AF                     	ds	2
   932  0000B1                     _alignErrorCounter:
   933                           	opt stack 0
   934  0000B1                     	ds	2
   935  0000B3                     _crcErrorCounter:
   936                           	opt stack 0
   937  0000B3                     	ds	2
   938  0000B5                     _dataAdressErrorCounter:
   939                           	opt stack 0
   940  0000B5                     	ds	2
   941  0000B7                     _serial_available:
   942                           	opt stack 0
   943  0000B7                     	ds	2
   944  0000B9                     _serial_peek:
   945                           	opt stack 0
   946  0000B9                     	ds	2
   947  0000BB                     _serial_read:
   948                           	opt stack 0
   949  0000BB                     	ds	2
   950  0000BD                     _serial_write:
   951                           	opt stack 0
   952  0000BD                     	ds	2
   953  0000BF                     _crc_buffer:
   954                           	opt stack 0
   955  0000BF                     	ds	17
   956                           tblptru	equ	0xFF8
   957                           tblptrh	equ	0xFF7
   958                           tblptrl	equ	0xFF6
   959                           tablat	equ	0xFF5
   960                           postinc0	equ	0xFEE
   961                           wreg	equ	0xFE8
   962                           postdec1	equ	0xFE5
   963                           fsr1l	equ	0xFE1
   964                           
   965                           	psect	dataBANK0
   966  0000EB                     __pdataBANK0:
   967                           	opt stack 0
   968  0000EB                     _ChargerData:
   969                           	opt stack 0
   970  0000EB                     	ds	9
   971                           tblptru	equ	0xFF8
   972                           tblptrh	equ	0xFF7
   973                           tblptrl	equ	0xFF6
   974                           tablat	equ	0xFF5
   975                           postinc0	equ	0xFEE
   976                           wreg	equ	0xFE8
   977                           postdec1	equ	0xFE5
   978                           fsr1l	equ	0xFE1
   979                           
   980                           	psect	bssBANK1
   981  000100                     __pbssBANK1:
   982                           	opt stack 0
   983  000100                     _ring_buffer:
   984                           	opt stack 0
   985  000100                     	ds	206
   986                           tblptru	equ	0xFF8
   987                           tblptrh	equ	0xFF7
   988                           tblptrl	equ	0xFF6
   989                           tablat	equ	0xFF5
   990                           postinc0	equ	0xFEE
   991                           wreg	equ	0xFE8
   992                           postdec1	equ	0xFE5
   993                           fsr1l	equ	0xFE1
   994                           
   995                           	psect	bssBANK2
   996  000200                     __pbssBANK2:
   997                           	opt stack 0
   998  000200                     _input_buffer:
   999                           	opt stack 0
  1000  000200                     	ds	206
  1001                           tblptru	equ	0xFF8
  1002                           tblptrh	equ	0xFF7
  1003                           tblptrl	equ	0xFF6
  1004                           tablat	equ	0xFF5
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           postdec1	equ	0xFE5
  1008                           fsr1l	equ	0xFE1
  1009                           
  1010                           	psect	bssBANK3
  1011  000300                     __pbssBANK3:
  1012                           	opt stack 0
  1013  000300                     _output_buffer:
  1014                           	opt stack 0
  1015  000300                     	ds	206
  1016                           tblptru	equ	0xFF8
  1017                           tblptrh	equ	0xFF7
  1018                           tblptrl	equ	0xFF6
  1019                           tablat	equ	0xFF5
  1020                           postinc0	equ	0xFEE
  1021                           wreg	equ	0xFE8
  1022                           postdec1	equ	0xFE5
  1023                           fsr1l	equ	0xFE1
  1024                           
  1025                           	psect	bssBANK4
  1026  000400                     __pbssBANK4:
  1027                           	opt stack 0
  1028  000400                     _rx_buffer:
  1029                           	opt stack 0
  1030  000400                     	ds	200
  1031                           tblptru	equ	0xFF8
  1032                           tblptrh	equ	0xFF7
  1033                           tblptrl	equ	0xFF6
  1034                           tablat	equ	0xFF5
  1035                           postinc0	equ	0xFEE
  1036                           wreg	equ	0xFE8
  1037                           postdec1	equ	0xFE5
  1038                           fsr1l	equ	0xFE1
  1039                           
  1040                           	psect	cstackBANK0
  1041  0000D0                     __pcstackBANK0:
  1042                           	opt stack 0
  1043  0000D0                     ??_FastTransfer_buffer_put:
  1044  0000D0                     Precharge@OnOff:
  1045                           	opt stack 0
  1046  0000D0                     LcdCharacter@character:
  1047                           	opt stack 0
  1048  0000D0                     printf@flag:
  1049                           	opt stack 0
  1050  0000D0                     FastTransfer_buffer_flush@_this:
  1051                           	opt stack 0
  1052  0000D0                     crcBufS_get@wantedTime:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x0
  1056  0000D0                     	ds	1
  1057  0000D1                     Precharge@i:
  1058                           	opt stack 0
  1059  0000D1                     LcdCharacter@index:
  1060                           	opt stack 0
  1061  0000D1                     printf@ap:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x1
  1065  0000D1                     	ds	1
  1066  0000D2                     CRCcheck@SentCRC:
  1067                           	opt stack 0
  1068  0000D2                     ToSend@what:
  1069                           	opt stack 0
  1070  0000D2                     FastTransfer_buffer_flush@clearBuffer:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x2
  1074  0000D2                     	ds	1
  1075  0000D3                     CRCcheck@calculatedCRC:
  1076                           	opt stack 0
  1077  0000D3                     printf@c:
  1078                           	opt stack 0
  1079  0000D3                     Precharge@i_1779:
  1080                           	opt stack 0
  1081  0000D3                     NokiaStr@str:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x3
  1085  0000D3                     	ds	1
  1086  0000D4                     sendData@whereToSend:
  1087                           	opt stack 0
  1088  0000D4                     ToSend@where:
  1089                           	opt stack 0
  1090  0000D4                     printf@cp:
  1091                           	opt stack 0
  1092  0000D4                     CRCcheck@arrayHolder:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x4
  1096  0000D4                     	ds	1
  1097  0000D5                     sendData@CS:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x5
  1101  0000D5                     	ds	1
  1102  0000D6                     sendData@i:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x6
  1106  0000D6                     	ds	1
  1107  0000D7                     CRCcheck@rt:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x7
  1111  0000D7                     	ds	1
  1112  0000D8                     ??_respondChargerAsECU:
  1113                           
  1114                           ; 0 bytes @ 0x8
  1115  0000D8                     	ds	1
  1116  0000D9                     ??_receiveData:
  1117                           
  1118                           ; 0 bytes @ 0x9
  1119  0000D9                     	ds	6
  1120  0000DF                     receiveData@crcHolder:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0xF
  1124  0000DF                     	ds	1
  1125  0000E0                     receiveData@crcHolder_1496:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x10
  1129  0000E0                     	ds	1
  1130  0000E1                     receiveData@holder:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x11
  1134  0000E1                     	ds	3
  1135  0000E4                     receiveData@holder_1495:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x14
  1139  0000E4                     	ds	3
  1140  0000E7                     receiveData@u:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x17
  1144  0000E7                     	ds	2
  1145  0000E9                     receiveData@r:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x19
  1149  0000E9                     	ds	2
  1150                           tblptru	equ	0xFF8
  1151                           tblptrh	equ	0xFF7
  1152                           tblptrl	equ	0xFF6
  1153                           tablat	equ	0xFF5
  1154                           postinc0	equ	0xFEE
  1155                           wreg	equ	0xFE8
  1156                           postdec1	equ	0xFE5
  1157                           fsr1l	equ	0xFE1
  1158                           
  1159                           	psect	cstackCOMRAM
  1160  000001                     __pcstackCOMRAM:
  1161                           	opt stack 0
  1162  000001                     ?_UART_buff_modulo_inc:
  1163                           	opt stack 0
  1164  000001                     ?_UART_buff_size:
  1165                           	opt stack 0
  1166  000001                     UART_buff_size@_this:
  1167                           	opt stack 0
  1168  000001                     UART_buff_modulo_inc@value:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x0
  1172  000001                     	ds	2
  1173  000003                     UART_buff_modulo_inc@modulus:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x2
  1177  000003                     	ds	2
  1178  000005                     UART_buff_modulo_inc@my_value:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x4
  1182  000005                     	ds	2
  1183  000007                     UART_buff_put@_this:
  1184                           	opt stack 0
  1185  000007                     UART_buff_get@_this:
  1186                           	opt stack 0
  1187                           
  1188                           ; 2 bytes @ 0x6
  1189  000007                     	ds	2
  1190  000009                     ??_UART_buff_get:
  1191  000009                     UART_buff_put@c:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0x8
  1195  000009                     	ds	1
  1196  00000A                     ??_UART_buff_put:
  1197                           
  1198                           ; 0 bytes @ 0x9
  1199  00000A                     	ds	1
  1200  00000B                     UART_buff_get@c:
  1201                           	opt stack 0
  1202                           
  1203                           ; 1 bytes @ 0xA
  1204  00000B                     	ds	1
  1205  00000C                     EUSART1_Receive_ISR@data:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0xB
  1209  00000C                     	ds	1
  1210  00000D                     ??_INTERRUPT_InterruptManager:
  1211                           
  1212                           ; 0 bytes @ 0xC
  1213  00000D                     	ds	14
  1214  00001B                     ??_TMR0_Initialize:
  1215  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1216                           	opt stack 0
  1217  00001B                     ?_time_get:
  1218                           	opt stack 0
  1219  00001B                     ?___wmul:
  1220                           	opt stack 0
  1221  00001B                     EUSART2_Write@txData:
  1222                           	opt stack 0
  1223  00001B                     SPI1_Exchange8bit@data:
  1224                           	opt stack 0
  1225  00001B                     SetMux@channel:
  1226                           	opt stack 0
  1227  00001B                     time_Set@value:
  1228                           	opt stack 0
  1229  00001B                     CRC8@data:
  1230                           	opt stack 0
  1231  00001B                     FastTransfer_buffer_modulo_inc@value:
  1232                           	opt stack 0
  1233  00001B                     crcBufS_put@_this:
  1234                           	opt stack 0
  1235  00001B                     crcBufS_status_put@_this:
  1236                           	opt stack 0
  1237  00001B                     crcBufS_get@_this:
  1238                           	opt stack 0
  1239  00001B                     ___wmul@multiplier:
  1240                           	opt stack 0
  1241  00001B                     memset@p1:
  1242                           	opt stack 0
  1243  00001B                     Delay@wait:
  1244                           	opt stack 0
  1245                           
  1246                           ; 4 bytes @ 0x1A
  1247  00001B                     	ds	1
  1248  00001C                     putch@txData:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x1B
  1252  00001C                     	ds	1
  1253  00001D                     ?_printf:
  1254                           	opt stack 0
  1255  00001D                     time_get@WhatTime:
  1256                           	opt stack 0
  1257  00001D                     time_Set@WhatTime:
  1258                           	opt stack 0
  1259  00001D                     CRC8@len:
  1260                           	opt stack 0
  1261  00001D                     crcBufS_put@address:
  1262                           	opt stack 0
  1263  00001D                     crcBufS_status_put@time:
  1264                           	opt stack 0
  1265  00001D                     crcBufS_get@time:
  1266                           	opt stack 0
  1267  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1268                           	opt stack 0
  1269  00001D                     printf@f:
  1270                           	opt stack 0
  1271  00001D                     ___wmul@multiplicand:
  1272                           	opt stack 0
  1273  00001D                     memset@c:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x1C
  1277  00001D                     	ds	1
  1278  00001E                     CRC8@sum:
  1279                           	opt stack 0
  1280  00001E                     crcBufS_put@oldCRC:
  1281                           	opt stack 0
  1282  00001E                     crcBufS_status_put@status:
  1283                           	opt stack 0
  1284  00001E                     crcBufS_get@space:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x1D
  1288  00001E                     	ds	1
  1289  00001F                     ??_Delay:
  1290  00001F                     ??_crcBufS_get:
  1291  00001F                     ??_crcBufS_status_put:
  1292  00001F                     CRC8@extract:
  1293                           	opt stack 0
  1294  00001F                     crcBufS_put@status:
  1295                           	opt stack 0
  1296  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1297                           	opt stack 0
  1298  00001F                     ___wmul@product:
  1299                           	opt stack 0
  1300  00001F                     memset@n:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x1E
  1304  00001F                     	ds	1
  1305  000020                     ??_crcBufS_put:
  1306  000020                     CRC8@tempI:
  1307                           	opt stack 0
  1308  000020                     Delay@i:
  1309                           	opt stack 0
  1310                           
  1311                           ; 4 bytes @ 0x1F
  1312  000020                     	ds	1
  1313  000021                     CRC8@crc:
  1314                           	opt stack 0
  1315  000021                     SetCharger@Current:
  1316                           	opt stack 0
  1317  000021                     LCDwrite@data:
  1318                           	opt stack 0
  1319  000021                     FastTransfer_buffer_put@_this:
  1320                           	opt stack 0
  1321  000021                     memset@p:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x20
  1325  000021                     	ds	1
  1326  000022                     SetCharger@Voltage:
  1327                           	opt stack 0
  1328  000022                     LCDwrite@mode:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x21
  1332  000022                     	ds	1
  1333  000023                     ??_sendData:
  1334  000023                     ??_LcdCharacter:
  1335  000023                     FastTransfer_buffer_put@towhere:
  1336                           	opt stack 0
  1337  000023                     SetCharger@mode:
  1338                           	opt stack 0
  1339  000023                     gotoXy@y:
  1340                           	opt stack 0
  1341  000023                     crcBufS_status_put@wantedTime:
  1342                           	opt stack 0
  1343  000023                     clearLcd@res:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x22
  1347  000023                     	ds	1
  1348  000024                     gotoXy@x:
  1349                           	opt stack 0
  1350  000024                     FastTransfer_buffer_put@towhat:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x23
  1354  000024                     	ds	1
  1355  000025                     
  1356                           ; 0 bytes @ 0x24
  1357  000025                     	ds	1
  1358  000026                     tblptru	equ	0xFF8
  1359                           tblptrh	equ	0xFF7
  1360                           tblptrl	equ	0xFF6
  1361                           tablat	equ	0xFF5
  1362                           postinc0	equ	0xFEE
  1363                           wreg	equ	0xFE8
  1364                           postdec1	equ	0xFE5
  1365                           fsr1l	equ	0xFE1
  1366                           
  1367                           ; 0 bytes @ 0x25
  1368 ;;
  1369 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1370 ;;
  1371 ;; *************** function _main *****************
  1372 ;; Defined at:
  1373 ;;		line 16 in file "main.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;		None               void
  1380 ;; Registers used:
  1381 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : 0/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1387 ;;      Params:         0       0       0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0       0       0
  1390 ;;      Totals:         0       0       0       0       0       0       0
  1391 ;;Total ram usage:        0 bytes
  1392 ;; Hardware stack levels required when called:    9
  1393 ;; This function calls:
  1394 ;;		_Delay
  1395 ;;		_NokiaStart
  1396 ;;		_SYSTEM_Initialize
  1397 ;;		_SetBMM
  1398 ;;		_Splash
  1399 ;;		_clearLcd
  1400 ;;		_ledDebug
  1401 ;;		_updateComms
  1402 ;; This function is called by:
  1403 ;;		Startup code after reset
  1404 ;; This function uses a non-reentrant model
  1405 ;;
  1406                           
  1407                           	psect	text0
  1408  001002                     __ptext0:
  1409                           	opt stack 0
  1410  001002                     _main:
  1411                           	opt stack 22
  1412                           
  1413                           ;main.c: 18: SYSTEM_Initialize();
  1414                           
  1415                           ;incstack = 0
  1416  001002  ECE0  F009         	call	_SYSTEM_Initialize	;wreg free
  1417                           
  1418                           ;main.c: 37: (INTCONbits.GIE = 1);
  1419  001006  8EF2               	bsf	intcon,7,c	;volatile
  1420                           
  1421                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1422  001008  8CF2               	bsf	intcon,6,c	;volatile
  1423                           
  1424                           ;main.c: 47: NokiaStart();
  1425  00100A  EC56  F005         	call	_NokiaStart	;wreg free
  1426                           
  1427                           ;main.c: 48: Delay(100);
  1428  00100E  0E64               	movlw	100
  1429  001010  6E1B               	movwf	Delay@wait,c
  1430  001012  0E00               	movlw	0
  1431  001014  6E1C               	movwf	Delay@wait+1,c
  1432  001016  0E00               	movlw	0
  1433  001018  6E1D               	movwf	Delay@wait+2,c
  1434  00101A  0E00               	movlw	0
  1435  00101C  6E1E               	movwf	Delay@wait+3,c
  1436  00101E  ECB6  F007         	call	_Delay	;wreg free
  1437                           
  1438                           ;main.c: 50: clearLcd();
  1439  001022  EC6C  F009         	call	_clearLcd	;wreg free
  1440                           
  1441                           ;main.c: 51: Splash();
  1442  001026  EC59  F008         	call	_Splash	;wreg free
  1443  00102A                     l3615:
  1444  00102A  ECAF  F006         	call	_SetBMM	;wreg free
  1445  00102E  0900               	iorlw	0
  1446  001030  A4D8               	btfss	status,2,c
  1447  001032  D7FB               	goto	l3615
  1448                           
  1449                           ;main.c: 55: do { LATA3 = 1; } while(0);
  1450  001034  8689               	bsf	3977,3,c	;volatile
  1451  001036                     l3617:
  1452                           
  1453                           ;main.c: 57: updateComms();
  1454  001036  EC80  F009         	call	_updateComms	;wreg free
  1455                           
  1456                           ;main.c: 58: ledDebug();
  1457  00103A  ECA7  F008         	call	_ledDebug	;wreg free
  1458  00103E  D7FB               	goto	l3617
  1459  001040                     __end_of_main:
  1460                           	opt stack 0
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           intcon	equ	0xFF2
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           status	equ	0xFD8
  1471                           
  1472 ;; *************** function _updateComms *****************
  1473 ;; Defined at:
  1474 ;;		line 12 in file "Communications.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;		None               void
  1481 ;; Registers used:
  1482 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1488 ;;      Params:         0       0       0       0       0       0       0
  1489 ;;      Locals:         0       0       0       0       0       0       0
  1490 ;;      Temps:          0       0       0       0       0       0       0
  1491 ;;      Totals:         0       0       0       0       0       0       0
  1492 ;;Total ram usage:        0 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; Hardware stack levels required when called:    8
  1495 ;; This function calls:
  1496 ;;		_Precharge
  1497 ;;		_SetCharger
  1498 ;;		_receiveData
  1499 ;;		_respondChargerAsECU
  1500 ;; This function is called by:
  1501 ;;		_main
  1502 ;; This function uses a non-reentrant model
  1503 ;;
  1504                           
  1505                           	psect	text1
  1506  001300                     __ptext1:
  1507                           	opt stack 0
  1508  001300                     _updateComms:
  1509                           	opt stack 22
  1510                           
  1511                           ;Communications.c: 13: if (receiveData()) {
  1512                           
  1513                           ;incstack = 0
  1514  001300  EC58  F000         	call	_receiveData	;wreg free
  1515  001304  0900               	iorlw	0
  1516  001306  B4D8               	btfsc	status,2,c
  1517  001308  0012               	return	
  1518                           
  1519                           ;Communications.c: 14: Precharge(receiveArray[1]);
  1520  00130A  0100               	movlb	0	; () banked
  1521  00130C  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1522  00130E  ECB8  F004         	call	_Precharge
  1523                           
  1524                           ;Communications.c: 15: SetCharger(1, receiveArray[2], receiveArray[3]);
  1525  001312  C064  F021         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1526  001316  C066  F022         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1527  00131A  0E01               	movlw	1
  1528  00131C  EC5B  F007         	call	_SetCharger
  1529                           
  1530                           ;Communications.c: 16: respondChargerAsECU();
  1531  001320  ECEB  F006         	call	_respondChargerAsECU	;wreg free
  1532  001324  0012               	return	
  1533  001326                     __end_of_updateComms:
  1534                           	opt stack 0
  1535                           tblptru	equ	0xFF8
  1536                           tblptrh	equ	0xFF7
  1537                           tblptrl	equ	0xFF6
  1538                           tablat	equ	0xFF5
  1539                           intcon	equ	0xFF2
  1540                           postinc0	equ	0xFEE
  1541                           wreg	equ	0xFE8
  1542                           postdec1	equ	0xFE5
  1543                           fsr1l	equ	0xFE1
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function _respondChargerAsECU *****************
  1547 ;; Defined at:
  1548 ;;		line 38 in file "Communications.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;		None               void
  1555 ;; Registers used:
  1556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1562 ;;      Params:         0       0       0       0       0       0       0
  1563 ;;      Locals:         0       0       0       0       0       0       0
  1564 ;;      Temps:          0       1       0       0       0       0       0
  1565 ;;      Totals:         0       1       0       0       0       0       0
  1566 ;;Total ram usage:        1 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    7
  1569 ;; This function calls:
  1570 ;;		_Delay
  1571 ;;		_GetPowerState
  1572 ;;		_ToSend
  1573 ;;		_sendData
  1574 ;; This function is called by:
  1575 ;;		_updateComms
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text2
  1580  000DD6                     __ptext2:
  1581                           	opt stack 0
  1582  000DD6                     _respondChargerAsECU:
  1583                           	opt stack 22
  1584                           
  1585                           ;Communications.c: 39: LATCbits.LATC5 = 1;
  1586                           
  1587                           ;incstack = 0
  1588  000DD6  8A8B               	bsf	3979,5,c	;volatile
  1589                           
  1590                           ;Communications.c: 40: ToSend(0, 7);
  1591  000DD8  0E00               	movlw	0
  1592  000DDA  0100               	movlb	0	; () banked
  1593  000DDC  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1594  000DDE  0E07               	movlw	7
  1595  000DE0  6FD2               	movwf	ToSend@what& (0+255),b
  1596  000DE2  0E00               	movlw	0
  1597  000DE4  ECB5  F009         	call	_ToSend
  1598                           
  1599                           ;Communications.c: 41: ToSend(2, GetPowerState());
  1600  000DE8  EC25  F00A         	call	_GetPowerState	;wreg free
  1601  000DEC  0100               	movlb	0	; () banked
  1602  000DEE  6FD8               	movwf	??_respondChargerAsECU& (0+255),b
  1603  000DF0  0100               	movlb	0	; () banked
  1604  000DF2  51D8               	movf	??_respondChargerAsECU& (0+255),w,b
  1605  000DF4  0100               	movlb	0	; () banked
  1606  000DF6  6FD2               	movwf	ToSend@what& (0+255),b
  1607  000DF8  6BD3               	clrf	(ToSend@what+1)& (0+255),b
  1608  000DFA  0E02               	movlw	2
  1609  000DFC  ECB5  F009         	call	_ToSend
  1610                           
  1611                           ;Communications.c: 42: ToSend(3, GetPowerState());
  1612  000E00  EC25  F00A         	call	_GetPowerState	;wreg free
  1613  000E04  0100               	movlb	0	; () banked
  1614  000E06  6FD8               	movwf	??_respondChargerAsECU& (0+255),b
  1615  000E08  0100               	movlb	0	; () banked
  1616  000E0A  51D8               	movf	??_respondChargerAsECU& (0+255),w,b
  1617  000E0C  0100               	movlb	0	; () banked
  1618  000E0E  6FD2               	movwf	ToSend@what& (0+255),b
  1619  000E10  6BD3               	clrf	(ToSend@what+1)& (0+255),b
  1620  000E12  0E03               	movlw	3
  1621  000E14  ECB5  F009         	call	_ToSend
  1622                           
  1623                           ;Communications.c: 43: Delay(5);
  1624  000E18  0E05               	movlw	5
  1625  000E1A  6E1B               	movwf	Delay@wait,c
  1626  000E1C  0E00               	movlw	0
  1627  000E1E  6E1C               	movwf	Delay@wait+1,c
  1628  000E20  0E00               	movlw	0
  1629  000E22  6E1D               	movwf	Delay@wait+2,c
  1630  000E24  0E00               	movlw	0
  1631  000E26  6E1E               	movwf	Delay@wait+3,c
  1632  000E28  ECB6  F007         	call	_Delay	;wreg free
  1633                           
  1634                           ;Communications.c: 44: sendData(6);
  1635  000E2C  0E06               	movlw	6
  1636  000E2E  EC72  F006         	call	_sendData
  1637                           
  1638                           ;Communications.c: 45: Delay(3);
  1639  000E32  0E03               	movlw	3
  1640  000E34  6E1B               	movwf	Delay@wait,c
  1641  000E36  0E00               	movlw	0
  1642  000E38  6E1C               	movwf	Delay@wait+1,c
  1643  000E3A  0E00               	movlw	0
  1644  000E3C  6E1D               	movwf	Delay@wait+2,c
  1645  000E3E  0E00               	movlw	0
  1646  000E40  6E1E               	movwf	Delay@wait+3,c
  1647  000E42  ECB6  F007         	call	_Delay	;wreg free
  1648                           
  1649                           ;Communications.c: 46: LATCbits.LATC5 = 0;
  1650  000E46  9A8B               	bcf	3979,5,c	;volatile
  1651  000E48  0012               	return		;funcret
  1652  000E4A                     __end_of_respondChargerAsECU:
  1653                           	opt stack 0
  1654                           tblptru	equ	0xFF8
  1655                           tblptrh	equ	0xFF7
  1656                           tblptrl	equ	0xFF6
  1657                           tablat	equ	0xFF5
  1658                           intcon	equ	0xFF2
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1l	equ	0xFE1
  1663                           status	equ	0xFD8
  1664                           
  1665 ;; *************** function _GetPowerState *****************
  1666 ;; Defined at:
  1667 ;;		line 134 in file "Functions.c"
  1668 ;; Parameters:    Size  Location     Type
  1669 ;;		None
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;		None
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      unsigned char 
  1674 ;; Registers used:
  1675 ;;		wreg, status,2
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1681 ;;      Params:         0       0       0       0       0       0       0
  1682 ;;      Locals:         0       0       0       0       0       0       0
  1683 ;;      Temps:          0       0       0       0       0       0       0
  1684 ;;      Totals:         0       0       0       0       0       0       0
  1685 ;;Total ram usage:        0 bytes
  1686 ;; Hardware stack levels used:    1
  1687 ;; Hardware stack levels required when called:    4
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_respondChargerAsECU
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           	psect	text3
  1696  00144A                     __ptext3:
  1697                           	opt stack 0
  1698  00144A                     _GetPowerState:
  1699                           	opt stack 24
  1700                           
  1701                           ;Functions.c: 135: return PowerOn;
  1702                           
  1703                           ;incstack = 0
  1704  00144A  5033               	movf	_PowerOn,w,c
  1705  00144C  0012               	return	
  1706  00144E                     __end_of_GetPowerState:
  1707                           	opt stack 0
  1708                           tblptru	equ	0xFF8
  1709                           tblptrh	equ	0xFF7
  1710                           tblptrl	equ	0xFF6
  1711                           tablat	equ	0xFF5
  1712                           intcon	equ	0xFF2
  1713                           postinc0	equ	0xFEE
  1714                           wreg	equ	0xFE8
  1715                           postdec1	equ	0xFE5
  1716                           fsr1l	equ	0xFE1
  1717                           status	equ	0xFD8
  1718                           
  1719 ;; *************** function _SetCharger *****************
  1720 ;; Defined at:
  1721 ;;		line 64 in file "Functions.c"
  1722 ;; Parameters:    Size  Location     Type
  1723 ;;  mode            1    wreg     unsigned char 
  1724 ;;  Current         1   32[COMRAM] unsigned char 
  1725 ;;  Voltage         1   33[COMRAM] unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;  mode            1   34[COMRAM] unsigned char 
  1728 ;; Return value:  Size  Location     Type
  1729 ;;		None               void
  1730 ;; Registers used:
  1731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1737 ;;      Params:         2       0       0       0       0       0       0
  1738 ;;      Locals:         1       0       0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0       0       0
  1740 ;;      Totals:         3       0       0       0       0       0       0
  1741 ;;Total ram usage:        3 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    7
  1744 ;; This function calls:
  1745 ;;		_SetMux
  1746 ;;		_printf
  1747 ;; This function is called by:
  1748 ;;		_updateComms
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752                           	psect	text4
  1753  000EB6                     __ptext4:
  1754                           	opt stack 0
  1755  000EB6                     _SetCharger:
  1756                           	opt stack 22
  1757                           
  1758                           ;incstack = 0
  1759                           ;SetCharger@mode stored from wreg
  1760  000EB6  6E23               	movwf	SetCharger@mode,c
  1761                           
  1762                           ;Functions.c: 65: if(mode == 1){
  1763  000EB8  0423               	decf	SetCharger@mode,w,c
  1764  000EBA  A4D8               	btfss	status,2,c
  1765  000EBC  D016               	goto	l3491
  1766                           
  1767                           ;Functions.c: 67: SetMux(1);
  1768  000EBE  0E01               	movlw	1
  1769  000EC0  EC3D  F008         	call	_SetMux
  1770                           
  1771                           ;Functions.c: 70: ChargerData[2] = 001;
  1772  000EC4  0E01               	movlw	1
  1773  000EC6  0100               	movlb	0	; () banked
  1774  000EC8  6FED               	movwf	(_ChargerData+2)& (0+255),b
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;Functions.c: 71: ChargerData[4] = 000;
  1778  000ECA  0E00               	movlw	0
  1779  000ECC  0100               	movlb	0	; () banked
  1780  000ECE  6FEF               	movwf	(_ChargerData+4)& (0+255),b
  1781                           
  1782                           ; BSR set to: 0
  1783                           ;Functions.c: 72: ChargerData[6] = 001;
  1784  000ED0  0E01               	movlw	1
  1785  000ED2  0100               	movlb	0	; () banked
  1786  000ED4  6FF1               	movwf	(_ChargerData+6)& (0+255),b
  1787                           
  1788                           ; BSR set to: 0
  1789                           ;Functions.c: 74: printf("%s",ChargerData);
  1790  000ED6  0EFB               	movlw	low STR_1
  1791  000ED8  6E1D               	movwf	printf@f,c
  1792  000EDA  0E7F               	movlw	high STR_1
  1793  000EDC  6E1E               	movwf	printf@f+1,c
  1794  000EDE  0EEB               	movlw	low _ChargerData
  1795  000EE0  6E1F               	movwf	?_printf+2,c
  1796  000EE2  0E00               	movlw	high _ChargerData
  1797  000EE4  6E20               	movwf	?_printf+3,c
  1798  000EE6  EC6A  F003         	call	_printf	;wreg free
  1799  000EEA                     l3491:
  1800                           
  1801                           ;Functions.c: 75: }
  1802                           ;Functions.c: 76: if(mode == 2){
  1803  000EEA  0E02               	movlw	2
  1804  000EEC  1823               	xorwf	SetCharger@mode,w,c
  1805  000EEE  A4D8               	btfss	status,2,c
  1806  000EF0  0012               	return	
  1807                           
  1808                           ;Functions.c: 78: SetMux(1);
  1809  000EF2  0E01               	movlw	1
  1810  000EF4  EC3D  F008         	call	_SetMux
  1811                           
  1812                           ;Functions.c: 80: ChargerData[2] = Current;
  1813  000EF8  C021  F0ED         	movff	SetCharger@Current,_ChargerData+2
  1814                           
  1815                           ;Functions.c: 81: ChargerData[4] = Voltage;
  1816  000EFC  C022  F0EF         	movff	SetCharger@Voltage,_ChargerData+4
  1817                           
  1818                           ;Functions.c: 83: ChargerData[6] = (Current + Voltage)%1,000;
  1819  000F00  0E00               	movlw	0
  1820  000F02  0100               	movlb	0	; () banked
  1821  000F04  6FF1               	movwf	(_ChargerData+6)& (0+255),b
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;Functions.c: 85: printf("%s",ChargerData);
  1825  000F06  0EFB               	movlw	low STR_1
  1826  000F08  6E1D               	movwf	printf@f,c
  1827  000F0A  0E7F               	movlw	high STR_1
  1828  000F0C  6E1E               	movwf	printf@f+1,c
  1829  000F0E  0EEB               	movlw	low _ChargerData
  1830  000F10  6E1F               	movwf	?_printf+2,c
  1831  000F12  0E00               	movlw	high _ChargerData
  1832  000F14  6E20               	movwf	?_printf+3,c
  1833  000F16  EC6A  F003         	call	_printf	;wreg free
  1834  000F1A  0012               	return	
  1835  000F1C                     __end_of_SetCharger:
  1836                           	opt stack 0
  1837                           tblptru	equ	0xFF8
  1838                           tblptrh	equ	0xFF7
  1839                           tblptrl	equ	0xFF6
  1840                           tablat	equ	0xFF5
  1841                           intcon	equ	0xFF2
  1842                           postinc0	equ	0xFEE
  1843                           wreg	equ	0xFE8
  1844                           postdec1	equ	0xFE5
  1845                           fsr1l	equ	0xFE1
  1846                           status	equ	0xFD8
  1847                           
  1848 ;; *************** function _printf *****************
  1849 ;; Defined at:
  1850 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  f               2   28[COMRAM] PTR const unsigned char 
  1853 ;;		 -> STR_2(3), STR_1(3), 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  tmpval          4    0        struct .
  1856 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  1857 ;;		 -> STR_5(7), ChargerData(9), 
  1858 ;;  ap              2    1[BANK0 ] PTR void [1]
  1859 ;;		 -> ?_printf(2), 
  1860 ;;  len             2    0        unsigned int 
  1861 ;;  val             2    0        unsigned int 
  1862 ;;  c               1    3[BANK0 ] char 
  1863 ;;  flag            1    0[BANK0 ] unsigned char 
  1864 ;;  prec            1    0        char 
  1865 ;; Return value:  Size  Location     Type
  1866 ;;                  2   28[COMRAM] int 
  1867 ;; Registers used:
  1868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1869 ;; Tracked objects:
  1870 ;;		On entry : 0/0
  1871 ;;		On exit  : 0/0
  1872 ;;		Unchanged: 0/0
  1873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1874 ;;      Params:         4       0       0       0       0       0       0
  1875 ;;      Locals:         0       6       0       0       0       0       0
  1876 ;;      Temps:          0       0       0       0       0       0       0
  1877 ;;      Totals:         4       6       0       0       0       0       0
  1878 ;;Total ram usage:       10 bytes
  1879 ;; Hardware stack levels used:    1
  1880 ;; Hardware stack levels required when called:    6
  1881 ;; This function calls:
  1882 ;;		_putch
  1883 ;; This function is called by:
  1884 ;;		_SetCharger
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text5
  1889  0006D4                     __ptext5:
  1890                           	opt stack 0
  1891  0006D4                     _printf:
  1892                           	opt stack 22
  1893                           
  1894                           ;doprnt.c: 466: va_list ap;
  1895                           ;doprnt.c: 499: signed char c;
  1896                           ;doprnt.c: 506: signed char prec;
  1897                           ;doprnt.c: 508: unsigned char flag;
  1898                           ;doprnt.c: 523: union {
  1899                           ;doprnt.c: 524: unsigned long vd;
  1900                           ;doprnt.c: 525: double integ;
  1901                           ;doprnt.c: 526: } tmpval;
  1902                           ;doprnt.c: 528: unsigned int val;
  1903                           ;doprnt.c: 529: unsigned len;
  1904                           ;doprnt.c: 530: const char * cp;
  1905                           ;doprnt.c: 533: *ap = __va_start();
  1906                           
  1907                           ;incstack = 0
  1908  0006D4  0E1F               	movlw	low (?_printf+2)
  1909  0006D6  0100               	movlb	0	; () banked
  1910  0006D8  6FD1               	movwf	printf@ap& (0+255),b
  1911  0006DA  0E00               	movlw	high (?_printf+2)
  1912  0006DC  0100               	movlb	0	; () banked
  1913  0006DE  6FD2               	movwf	(printf@ap+1)& (0+255),b
  1914                           
  1915                           ;doprnt.c: 536: while(c = *f++) {
  1916  0006E0  D062               	goto	l3303
  1917  0006E2                     l3279:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;doprnt.c: 538: if(c != '%')
  1921  0006E2  0E25               	movlw	37
  1922  0006E4  0100               	movlb	0	; () banked
  1923  0006E6  19D3               	xorwf	printf@c& (0+255),w,b
  1924  0006E8  B4D8               	btfsc	status,2,c
  1925  0006EA  D005               	goto	l3283
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;doprnt.c: 540: {
  1929                           ;doprnt.c: 541: (putch(c) );
  1930  0006EC  0100               	movlb	0	; () banked
  1931  0006EE  51D3               	movf	printf@c& (0+255),w,b
  1932  0006F0  EC1B  F00A         	call	_putch
  1933                           
  1934                           ;doprnt.c: 542: continue;
  1935  0006F4  D058               	goto	l3303
  1936  0006F6                     l3283:
  1937                           
  1938                           ;doprnt.c: 543: }
  1939                           ;doprnt.c: 548: flag = 0;
  1940  0006F6  0E00               	movlw	0
  1941  0006F8  0100               	movlb	0	; () banked
  1942  0006FA  6FD0               	movwf	printf@flag& (0+255),b
  1943                           
  1944                           ;doprnt.c: 635: switch(c = *f++) {
  1945  0006FC  D043               	goto	l3301
  1946  0006FE                     l3285:
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1950  0006FE  C0D1  FFD9         	movff	printf@ap,fsr2l
  1951  000702  C0D2  FFDA         	movff	printf@ap+1,fsr2h
  1952  000706  CFDE F0D4          	movff	postinc2,printf@cp
  1953  00070A  CFDD F0D5          	movff	postdec2,printf@cp+1
  1954                           
  1955                           ; BSR set to: 0
  1956  00070E  0E02               	movlw	2
  1957  000710  0100               	movlb	0	; () banked
  1958  000712  27D1               	addwf	printf@ap& (0+255),f,b
  1959  000714  0E00               	movlw	0
  1960  000716  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;doprnt.c: 740: if(!cp)
  1964  000718  0100               	movlb	0	; () banked
  1965  00071A  51D4               	movf	printf@cp& (0+255),w,b
  1966  00071C  0100               	movlb	0	; () banked
  1967  00071E  11D5               	iorwf	(printf@cp+1)& (0+255),w,b
  1968  000720  A4D8               	btfss	status,2,c
  1969  000722  D01C               	goto	l3297
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;doprnt.c: 741: cp = "(null)";
  1973  000724  0EF4               	movlw	low STR_5
  1974  000726  0100               	movlb	0	; () banked
  1975  000728  6FD4               	movwf	printf@cp& (0+255),b
  1976  00072A  0E7F               	movlw	high STR_5
  1977  00072C  0100               	movlb	0	; () banked
  1978  00072E  6FD5               	movwf	(printf@cp+1)& (0+255),b
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;doprnt.c: 777: while(*cp)
  1982  000730  D015               	goto	l3297
  1983  000732                     l3293:
  1984                           
  1985                           ;doprnt.c: 778: (putch(*cp++) );
  1986  000732  C0D4  FFF6         	movff	printf@cp,tblptrl
  1987  000736  C0D5  FFF7         	movff	printf@cp+1,tblptrh
  1988  00073A  6AF8               	clrf	tblptru,c
  1989  00073C  0E05               	movlw	(high __ramtop+-1)
  1990  00073E  64F7               	cpfsgt	tblptrh,c
  1991  000740  D003               	bra	u2237
  1992  000742  0008               	tblrd		*
  1993  000744  50F5               	movf	tablat,w,c
  1994  000746  D005               	bra	u2230
  1995  000748                     u2237:
  1996  000748  CFF6 FFE9          	movff	tblptrl,fsr0l
  1997  00074C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1998  000750  50EF               	movf	indf0,w,c
  1999  000752                     u2230:
  2000  000752  EC1B  F00A         	call	_putch
  2001  000756  0100               	movlb	0	; () banked
  2002  000758  4BD4               	infsnz	printf@cp& (0+255),f,b
  2003  00075A  2BD5               	incf	(printf@cp+1)& (0+255),f,b
  2004  00075C                     l3297:
  2005                           
  2006                           ; BSR set to: 0
  2007  00075C  C0D4  FFF6         	movff	printf@cp,tblptrl
  2008  000760  C0D5  FFF7         	movff	printf@cp+1,tblptrh
  2009  000764  6AF8               	clrf	tblptru,c
  2010  000766  0E05               	movlw	(high __ramtop+-1)
  2011  000768  64F7               	cpfsgt	tblptrh,c
  2012  00076A  D003               	bra	u2247
  2013  00076C  0008               	tblrd		*
  2014  00076E  50F5               	movf	tablat,w,c
  2015  000770  D005               	bra	u2240
  2016  000772                     u2247:
  2017  000772  CFF6 FFE9          	movff	tblptrl,fsr0l
  2018  000776  CFF7 FFEA          	movff	tblptrh,fsr0h
  2019  00077A  50EF               	movf	indf0,w,c
  2020  00077C                     u2240:
  2021  00077C  0900               	iorlw	0
  2022  00077E  B4D8               	btfsc	status,2,c
  2023  000780  D012               	goto	l3303
  2024  000782  D7D7               	goto	l3293
  2025  000784                     l3301:
  2026  000784  C01D  FFF6         	movff	printf@f,tblptrl
  2027  000788  C01E  FFF7         	movff	printf@f+1,tblptrh
  2028  00078C  4A1D               	infsnz	printf@f,f,c
  2029  00078E  2A1E               	incf	printf@f+1,f,c
  2030  000790                     	if	0	;tblptru may be non-zero
  2031  000790                     	endif
  2032  000790                     	if	0	;tblptru may be non-zero
  2033  000790                     	endif
  2034  000790  0008               	tblrd		*
  2035  000792  CFF5 F0D3          	movff	tablat,printf@c
  2036  000796  0100               	movlb	0	; () banked
  2037  000798  51D3               	movf	printf@c& (0+255),w,b
  2038                           
  2039                           ; Switch size 1, requested type "space"
  2040                           ; Number of cases is 2, Range of values is 0 to 115
  2041                           ; switch strategies available:
  2042                           ; Name         Instructions Cycles
  2043                           ; simple_byte            7     4 (average)
  2044                           ;	Chosen strategy is simple_byte
  2045  00079A  0A00               	xorlw	0	; case 0
  2046  00079C  B4D8               	btfsc	status,2,c
  2047  00079E  0012               	return	
  2048  0007A0  0A73               	xorlw	115	; case 115
  2049  0007A2  B4D8               	btfsc	status,2,c
  2050  0007A4  D7AC               	goto	l3285
  2051  0007A6                     l3303:
  2052  0007A6  C01D  FFF6         	movff	printf@f,tblptrl
  2053  0007AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  2054  0007AE  4A1D               	infsnz	printf@f,f,c
  2055  0007B0  2A1E               	incf	printf@f+1,f,c
  2056  0007B2                     	if	0	;tblptru may be non-zero
  2057  0007B2                     	endif
  2058  0007B2                     	if	0	;tblptru may be non-zero
  2059  0007B2                     	endif
  2060  0007B2  0008               	tblrd		*
  2061  0007B4  CFF5 F0D3          	movff	tablat,printf@c
  2062  0007B8  0100               	movlb	0	; () banked
  2063  0007BA  51D3               	movf	printf@c& (0+255),w,b
  2064  0007BC  B4D8               	btfsc	status,2,c
  2065  0007BE  0012               	return	
  2066  0007C0  D790               	goto	l3279
  2067  0007C2                     __end_of_printf:
  2068                           	opt stack 0
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           intcon	equ	0xFF2
  2074                           indf0	equ	0xFEF
  2075                           postinc0	equ	0xFEE
  2076                           fsr0h	equ	0xFEA
  2077                           fsr0l	equ	0xFE9
  2078                           wreg	equ	0xFE8
  2079                           postdec1	equ	0xFE5
  2080                           fsr1l	equ	0xFE1
  2081                           postinc2	equ	0xFDE
  2082                           postdec2	equ	0xFDD
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _putch *****************
  2088 ;; Defined at:
  2089 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  txData          1    wreg     unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  txData          1   27[COMRAM] unsigned char 
  2094 ;; Return value:  Size  Location     Type
  2095 ;;		None               void
  2096 ;; Registers used:
  2097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2103 ;;      Params:         0       0       0       0       0       0       0
  2104 ;;      Locals:         1       0       0       0       0       0       0
  2105 ;;      Temps:          0       0       0       0       0       0       0
  2106 ;;      Totals:         1       0       0       0       0       0       0
  2107 ;;Total ram usage:        1 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    5
  2110 ;; This function calls:
  2111 ;;		_EUSART2_Write
  2112 ;; This function is called by:
  2113 ;;		_printf
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text6
  2118  001436                     __ptext6:
  2119                           	opt stack 0
  2120  001436                     _putch:
  2121                           	opt stack 22
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;incstack = 0
  2125                           ;putch@txData stored from wreg
  2126  001436  6E1C               	movwf	putch@txData,c
  2127                           
  2128                           ;eusart2.c: 152: EUSART2_Write(txData);
  2129  001438  501C               	movf	putch@txData,w,c
  2130  00143A  EC20  F008         	call	_EUSART2_Write
  2131  00143E  0012               	return		;funcret
  2132  001440                     __end_of_putch:
  2133                           	opt stack 0
  2134                           tblptru	equ	0xFF8
  2135                           tblptrh	equ	0xFF7
  2136                           tblptrl	equ	0xFF6
  2137                           tablat	equ	0xFF5
  2138                           intcon	equ	0xFF2
  2139                           indf0	equ	0xFEF
  2140                           postinc0	equ	0xFEE
  2141                           fsr0h	equ	0xFEA
  2142                           fsr0l	equ	0xFE9
  2143                           wreg	equ	0xFE8
  2144                           postdec1	equ	0xFE5
  2145                           fsr1l	equ	0xFE1
  2146                           postinc2	equ	0xFDE
  2147                           postdec2	equ	0xFDD
  2148                           fsr2h	equ	0xFDA
  2149                           fsr2l	equ	0xFD9
  2150                           status	equ	0xFD8
  2151                           
  2152 ;; *************** function _EUSART2_Write *****************
  2153 ;; Defined at:
  2154 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  2155 ;; Parameters:    Size  Location     Type
  2156 ;;  txData          1    wreg     unsigned char 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;  txData          1   26[COMRAM] unsigned char 
  2159 ;; Return value:  Size  Location     Type
  2160 ;;		None               void
  2161 ;; Registers used:
  2162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2163 ;; Tracked objects:
  2164 ;;		On entry : 0/0
  2165 ;;		On exit  : 0/0
  2166 ;;		Unchanged: 0/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2168 ;;      Params:         0       0       0       0       0       0       0
  2169 ;;      Locals:         1       0       0       0       0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0
  2171 ;;      Totals:         1       0       0       0       0       0       0
  2172 ;;Total ram usage:        1 bytes
  2173 ;; Hardware stack levels used:    1
  2174 ;; Hardware stack levels required when called:    4
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_putch
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text7
  2183  001040                     __ptext7:
  2184                           	opt stack 0
  2185  001040                     _EUSART2_Write:
  2186                           	opt stack 22
  2187                           
  2188                           ;incstack = 0
  2189                           ;EUSART2_Write@txData stored from wreg
  2190  001040  6E1B               	movwf	EUSART2_Write@txData,c
  2191  001042                     l3083:
  2192  001042  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  2193  001044  B4D8               	btfsc	status,2,c
  2194  001046  D7FD               	goto	l3083
  2195                           
  2196                           ;eusart2.c: 132: }
  2197                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  2198  001048  B8A3               	btfsc	4003,4,c	;volatile
  2199  00104A  D003               	goto	l50
  2200                           
  2201                           ;eusart2.c: 135: TXREG2 = txData;
  2202  00104C  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  2203                           
  2204                           ;eusart2.c: 136: } else {
  2205  001050  D012               	goto	l3097
  2206  001052                     l50:
  2207                           
  2208                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  2209  001052  98A3               	bcf	4003,4,c	;volatile
  2210                           
  2211                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  2212  001054  5038               	movf	_eusart2TxHead,w,c
  2213  001056  0D01               	mullw	1
  2214  001058  0E9B               	movlw	low _eusart2TxBuffer
  2215  00105A  24F3               	addwf	prodl,w,c
  2216  00105C  6ED9               	movwf	fsr2l,c
  2217  00105E  0E00               	movlw	high _eusart2TxBuffer
  2218  001060  20F4               	addwfc	prodh,w,c
  2219  001062  6EDA               	movwf	fsr2h,c
  2220  001064  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  2221  001068  2A38               	incf	_eusart2TxHead,f,c
  2222                           
  2223                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  2224  00106A  0E07               	movlw	7
  2225  00106C  6438               	cpfsgt	_eusart2TxHead,c
  2226  00106E  D002               	goto	l3095
  2227                           
  2228                           ;eusart2.c: 140: eusart2TxHead = 0;
  2229  001070  0E00               	movlw	0
  2230  001072  6E38               	movwf	_eusart2TxHead,c
  2231  001074                     l3095:
  2232                           
  2233                           ;eusart2.c: 141: }
  2234                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  2235  001074  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  2236  001076                     l3097:
  2237                           
  2238                           ;eusart2.c: 143: }
  2239                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  2240  001076  88A3               	bsf	4003,4,c	;volatile
  2241  001078  0012               	return		;funcret
  2242  00107A                     __end_of_EUSART2_Write:
  2243                           	opt stack 0
  2244                           tblptru	equ	0xFF8
  2245                           tblptrh	equ	0xFF7
  2246                           tblptrl	equ	0xFF6
  2247                           tablat	equ	0xFF5
  2248                           prodh	equ	0xFF4
  2249                           prodl	equ	0xFF3
  2250                           intcon	equ	0xFF2
  2251                           indf0	equ	0xFEF
  2252                           postinc0	equ	0xFEE
  2253                           fsr0h	equ	0xFEA
  2254                           fsr0l	equ	0xFE9
  2255                           wreg	equ	0xFE8
  2256                           postdec1	equ	0xFE5
  2257                           fsr1l	equ	0xFE1
  2258                           indf2	equ	0xFDF
  2259                           postinc2	equ	0xFDE
  2260                           postdec2	equ	0xFDD
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _SetMux *****************
  2266 ;; Defined at:
  2267 ;;		line 96 in file "Functions.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;  channel         1    wreg     unsigned char 
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;  channel         1   26[COMRAM] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;		None               void
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2281 ;;      Params:         0       0       0       0       0       0       0
  2282 ;;      Locals:         1       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0
  2284 ;;      Totals:         1       0       0       0       0       0       0
  2285 ;;Total ram usage:        1 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    4
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_SetCharger
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           	psect	text8
  2296  00107A                     __ptext8:
  2297                           	opt stack 0
  2298  00107A                     _SetMux:
  2299                           	opt stack 24
  2300                           
  2301                           ;incstack = 0
  2302                           ;SetMux@channel stored from wreg
  2303  00107A  6E1B               	movwf	SetMux@channel,c
  2304                           
  2305                           ;Functions.c: 97: switch (channel){
  2306  00107C  D00C               	goto	l2497
  2307  00107E                     l681:
  2308  00107E  908A               	bcf	3978,0,c	;volatile
  2309                           
  2310                           ;Functions.c: 100: do { LATB1 = 0; } while(0);
  2311  001080  928A               	bcf	3978,1,c	;volatile
  2312                           
  2313                           ;Functions.c: 101: break;
  2314  001082  0012               	return	
  2315  001084                     l687:
  2316  001084  808A               	bsf	3978,0,c	;volatile
  2317                           
  2318                           ;Functions.c: 104: do { LATB1 = 0; } while(0);
  2319  001086  928A               	bcf	3978,1,c	;volatile
  2320                           
  2321                           ;Functions.c: 105: break;
  2322  001088  0012               	return	
  2323  00108A                     l692:
  2324  00108A  908A               	bcf	3978,0,c	;volatile
  2325                           
  2326                           ;Functions.c: 108: do { LATB1 = 1; } while(0);
  2327  00108C  828A               	bsf	3978,1,c	;volatile
  2328                           
  2329                           ;Functions.c: 109: break;
  2330  00108E  0012               	return	
  2331  001090                     l697:
  2332  001090  808A               	bsf	3978,0,c	;volatile
  2333                           
  2334                           ;Functions.c: 112: do { LATB1 = 1; } while(0);
  2335  001092  828A               	bsf	3978,1,c	;volatile
  2336                           
  2337                           ;Functions.c: 117: }
  2338                           
  2339                           ;Functions.c: 116: break;
  2340                           
  2341                           ;Functions.c: 114: default:
  2342                           
  2343                           ;Functions.c: 113: break;
  2344  001094  0012               	return	
  2345  001096                     l2497:
  2346  001096  501B               	movf	SetMux@channel,w,c
  2347                           
  2348                           ; Switch size 1, requested type "space"
  2349                           ; Number of cases is 4, Range of values is 1 to 4
  2350                           ; switch strategies available:
  2351                           ; Name         Instructions Cycles
  2352                           ; simple_byte           13     7 (average)
  2353                           ;	Chosen strategy is simple_byte
  2354  001098  0A01               	xorlw	1	; case 1
  2355  00109A  B4D8               	btfsc	status,2,c
  2356  00109C  D7F0               	goto	l681
  2357  00109E  0A03               	xorlw	3	; case 2
  2358  0010A0  B4D8               	btfsc	status,2,c
  2359  0010A2  D7F0               	goto	l687
  2360  0010A4  0A01               	xorlw	1	; case 3
  2361  0010A6  B4D8               	btfsc	status,2,c
  2362  0010A8  D7F0               	goto	l692
  2363  0010AA  0A07               	xorlw	7	; case 4
  2364  0010AC  A4D8               	btfss	status,2,c
  2365  0010AE  0012               	return	
  2366  0010B0  D7EF               	goto	l697
  2367  0010B2                     __end_of_SetMux:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           indf0	equ	0xFEF
  2377                           postinc0	equ	0xFEE
  2378                           fsr0h	equ	0xFEA
  2379                           fsr0l	equ	0xFE9
  2380                           wreg	equ	0xFE8
  2381                           postdec1	equ	0xFE5
  2382                           fsr1l	equ	0xFE1
  2383                           indf2	equ	0xFDF
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           fsr2h	equ	0xFDA
  2387                           fsr2l	equ	0xFD9
  2388                           status	equ	0xFD8
  2389                           
  2390 ;; *************** function _Precharge *****************
  2391 ;; Defined at:
  2392 ;;		line 29 in file "Functions.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;  OnOff           1    wreg     unsigned char 
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;  OnOff           1    0[BANK0 ] unsigned char 
  2397 ;;  i               2    3[BANK0 ] int 
  2398 ;;  i               2    1[BANK0 ] int 
  2399 ;; Return value:  Size  Location     Type
  2400 ;;		None               void
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2408 ;;      Params:         0       0       0       0       0       0       0
  2409 ;;      Locals:         0       5       0       0       0       0       0
  2410 ;;      Temps:          0       0       0       0       0       0       0
  2411 ;;      Totals:         0       5       0       0       0       0       0
  2412 ;;Total ram usage:        5 bytes
  2413 ;; Hardware stack levels used:    1
  2414 ;; Hardware stack levels required when called:    5
  2415 ;; This function calls:
  2416 ;;		_Delay
  2417 ;; This function is called by:
  2418 ;;		_updateComms
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422                           	psect	text9
  2423  000970                     __ptext9:
  2424                           	opt stack 0
  2425  000970                     _Precharge:
  2426                           	opt stack 24
  2427                           
  2428                           ;incstack = 0
  2429                           ;Precharge@OnOff stored from wreg
  2430  000970  0100               	movlb	0	; () banked
  2431  000972  6FD0               	movwf	Precharge@OnOff& (0+255),b
  2432                           
  2433                           ;Functions.c: 30: if(OnOff){
  2434  000974  0100               	movlb	0	; () banked
  2435  000976  51D0               	movf	Precharge@OnOff& (0+255),w,b
  2436  000978  0100               	movlb	0	; () banked
  2437  00097A  B4D8               	btfsc	status,2,c
  2438  00097C  D026               	goto	l659
  2439                           
  2440                           ; BSR set to: 0
  2441                           
  2442                           ;Functions.c: 31: do { LATC1 = 1; } while(0);
  2443  00097E  828B               	bsf	3979,1,c	;volatile
  2444                           
  2445                           ; BSR set to: 0
  2446                           
  2447                           ; BSR set to: 0
  2448                           ;Functions.c: 32: do { LATB3 = 1; } while(0);
  2449  000980  868A               	bsf	3978,3,c	;volatile
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;Functions.c: 33: for(int i = 0;i<5;i++){
  2453                           
  2454                           ; BSR set to: 0
  2455  000982  0E00               	movlw	0
  2456  000984  0100               	movlb	0	; () banked
  2457  000986  6FD2               	movwf	(Precharge@i+1)& (0+255),b
  2458  000988  0E00               	movlw	0
  2459  00098A  6FD1               	movwf	Precharge@i& (0+255),b
  2460  00098C                     l3453:
  2461                           
  2462                           ; BSR set to: 0
  2463  00098C  0100               	movlb	0	; () banked
  2464  00098E  BFD2               	btfsc	(Precharge@i+1)& (0+255),7,b
  2465  000990  D008               	goto	l3457
  2466  000992  0100               	movlb	0	; () banked
  2467  000994  51D2               	movf	(Precharge@i+1)& (0+255),w,b
  2468  000996  E113               	bnz	l652
  2469  000998  0E05               	movlw	5
  2470  00099A  0100               	movlb	0	; () banked
  2471  00099C  5DD1               	subwf	Precharge@i& (0+255),w,b
  2472  00099E  B0D8               	btfsc	status,0,c
  2473  0009A0  D00E               	goto	l652
  2474  0009A2                     l3457:
  2475                           
  2476                           ; BSR set to: 0
  2477                           ;Functions.c: 34: Delay(1000);
  2478  0009A2  0EE8               	movlw	232
  2479  0009A4  6E1B               	movwf	Delay@wait,c
  2480  0009A6  0E03               	movlw	3
  2481  0009A8  6E1C               	movwf	Delay@wait+1,c
  2482  0009AA  0E00               	movlw	0
  2483  0009AC  6E1D               	movwf	Delay@wait+2,c
  2484  0009AE  0E00               	movlw	0
  2485  0009B0  6E1E               	movwf	Delay@wait+3,c
  2486  0009B2  ECB6  F007         	call	_Delay	;wreg free
  2487  0009B6  0100               	movlb	0	; () banked
  2488  0009B8  4BD1               	infsnz	Precharge@i& (0+255),f,b
  2489  0009BA  2BD2               	incf	(Precharge@i+1)& (0+255),f,b
  2490  0009BC  D7E7               	goto	l3453
  2491  0009BE                     l652:
  2492                           
  2493                           ; BSR set to: 0
  2494  0009BE  888A               	bsf	3978,4,c	;volatile
  2495                           
  2496                           ; BSR set to: 0
  2497                           
  2498                           ; BSR set to: 0
  2499                           ;Functions.c: 37: do { LATC0 = 1; } while(0);
  2500  0009C0  808B               	bsf	3979,0,c	;volatile
  2501                           
  2502                           ; BSR set to: 0
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;Functions.c: 38: do { LATB5 = 1; } while(0);
  2506  0009C2  8A8A               	bsf	3978,5,c	;volatile
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;Functions.c: 39: PowerOn = 0;
  2510                           
  2511                           ; BSR set to: 0
  2512  0009C4  0E00               	movlw	0
  2513  0009C6  6E33               	movwf	_PowerOn,c
  2514                           
  2515                           ;Functions.c: 40: }
  2516  0009C8  0012               	return	
  2517  0009CA                     l659:
  2518                           
  2519                           ; BSR set to: 0
  2520  0009CA  988A               	bcf	3978,4,c	;volatile
  2521                           
  2522                           ; BSR set to: 0
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;Functions.c: 44: do { LATB3 = 0; } while(0);
  2526  0009CC  968A               	bcf	3978,3,c	;volatile
  2527                           
  2528                           ; BSR set to: 0
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;Functions.c: 45: do { LATC0 = 0; } while(0);
  2532  0009CE  908B               	bcf	3979,0,c	;volatile
  2533                           
  2534                           ; BSR set to: 0
  2535                           ;Functions.c: 46: for(int i = 0;i<5;i++){
  2536                           
  2537                           ; BSR set to: 0
  2538  0009D0  0E00               	movlw	0
  2539  0009D2  0100               	movlb	0	; () banked
  2540  0009D4  6FD4               	movwf	(Precharge@i_1779+1)& (0+255),b
  2541  0009D6  0E00               	movlw	0
  2542  0009D8  6FD3               	movwf	Precharge@i_1779& (0+255),b
  2543  0009DA                     l3467:
  2544                           
  2545                           ; BSR set to: 0
  2546  0009DA  0100               	movlb	0	; () banked
  2547  0009DC  BFD4               	btfsc	(Precharge@i_1779+1)& (0+255),7,b
  2548  0009DE  D008               	goto	l3471
  2549  0009E0  0100               	movlb	0	; () banked
  2550  0009E2  51D4               	movf	(Precharge@i_1779+1)& (0+255),w,b
  2551  0009E4  E113               	bnz	l667
  2552  0009E6  0E05               	movlw	5
  2553  0009E8  0100               	movlb	0	; () banked
  2554  0009EA  5DD3               	subwf	Precharge@i_1779& (0+255),w,b
  2555  0009EC  B0D8               	btfsc	status,0,c
  2556  0009EE  D00E               	goto	l667
  2557  0009F0                     l3471:
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;Functions.c: 47: Delay(1000);
  2561  0009F0  0EE8               	movlw	232
  2562  0009F2  6E1B               	movwf	Delay@wait,c
  2563  0009F4  0E03               	movlw	3
  2564  0009F6  6E1C               	movwf	Delay@wait+1,c
  2565  0009F8  0E00               	movlw	0
  2566  0009FA  6E1D               	movwf	Delay@wait+2,c
  2567  0009FC  0E00               	movlw	0
  2568  0009FE  6E1E               	movwf	Delay@wait+3,c
  2569  000A00  ECB6  F007         	call	_Delay	;wreg free
  2570  000A04  0100               	movlb	0	; () banked
  2571  000A06  4BD3               	infsnz	Precharge@i_1779& (0+255),f,b
  2572  000A08  2BD4               	incf	(Precharge@i_1779+1)& (0+255),f,b
  2573  000A0A  D7E7               	goto	l3467
  2574  000A0C                     l667:
  2575                           
  2576                           ; BSR set to: 0
  2577  000A0C  928B               	bcf	3979,1,c	;volatile
  2578                           
  2579                           ; BSR set to: 0
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;Functions.c: 50: do { LATB5 = 0; } while(0);
  2583  000A0E  9A8A               	bcf	3978,5,c	;volatile
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;Functions.c: 51: PowerOn = 1;
  2587                           
  2588                           ; BSR set to: 0
  2589  000A10  0E01               	movlw	1
  2590  000A12  6E33               	movwf	_PowerOn,c
  2591  000A14  0012               	return	
  2592  000A16                     __end_of_Precharge:
  2593                           	opt stack 0
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           indf0	equ	0xFEF
  2602                           postinc0	equ	0xFEE
  2603                           fsr0h	equ	0xFEA
  2604                           fsr0l	equ	0xFE9
  2605                           wreg	equ	0xFE8
  2606                           postdec1	equ	0xFE5
  2607                           fsr1l	equ	0xFE1
  2608                           indf2	equ	0xFDF
  2609                           postinc2	equ	0xFDE
  2610                           postdec2	equ	0xFDD
  2611                           fsr2h	equ	0xFDA
  2612                           fsr2l	equ	0xFD9
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _ledDebug *****************
  2616 ;; Defined at:
  2617 ;;		line 127 in file "Functions.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;		None
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;		None               void
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2631 ;;      Params:         0       0       0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0
  2634 ;;      Totals:         0       0       0       0       0       0       0
  2635 ;;Total ram usage:        0 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    5
  2638 ;; This function calls:
  2639 ;;		_time_Set
  2640 ;;		_time_get
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           	psect	text10
  2647  00114E                     __ptext10:
  2648                           	opt stack 0
  2649  00114E                     _ledDebug:
  2650                           	opt stack 25
  2651                           
  2652                           ;Functions.c: 128: if (time_get(1) > 500) {
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;incstack = 0
  2656  00114E  0E01               	movlw	1
  2657  001150  ECF6  F009         	call	_time_get
  2658  001154  BE1C               	btfsc	?_time_get+1,7,c
  2659  001156  0012               	return	
  2660  001158  0EF5               	movlw	245
  2661  00115A  5C1B               	subwf	?_time_get,w,c
  2662  00115C  0E01               	movlw	1
  2663  00115E  581C               	subwfb	?_time_get+1,w,c
  2664  001160  A0D8               	btfss	status,0,c
  2665  001162  0012               	return	
  2666                           
  2667                           ;Functions.c: 129: do { LATA3 = ~LATA3; } while(0);
  2668  001164  B689               	btfsc	3977,3,c	;volatile
  2669  001166  D002               	goto	u1690
  2670  001168  8689               	bsf	3977,3,c	;volatile
  2671  00116A  D001               	goto	l2903
  2672  00116C                     u1690:
  2673  00116C  9689               	bcf	3977,3,c	;volatile
  2674  00116E                     l2903:
  2675                           
  2676                           ;Functions.c: 130: time_Set(1, 0);
  2677  00116E  0E00               	movlw	0
  2678  001170  6E1C               	movwf	time_Set@value+1,c
  2679  001172  0E00               	movlw	0
  2680  001174  6E1B               	movwf	time_Set@value,c
  2681  001176  0E01               	movlw	1
  2682  001178  ECA6  F009         	call	_time_Set
  2683  00117C  0012               	return	
  2684  00117E                     __end_of_ledDebug:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           prodh	equ	0xFF4
  2691                           prodl	equ	0xFF3
  2692                           intcon	equ	0xFF2
  2693                           indf0	equ	0xFEF
  2694                           postinc0	equ	0xFEE
  2695                           fsr0h	equ	0xFEA
  2696                           fsr0l	equ	0xFE9
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           postdec2	equ	0xFDD
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _time_get *****************
  2708 ;; Defined at:
  2709 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  WhatTime        1    wreg     unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  WhatTime        1   28[COMRAM] unsigned char 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  2   26[COMRAM] int 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2723 ;;      Params:         2       0       0       0       0       0       0
  2724 ;;      Locals:         1       0       0       0       0       0       0
  2725 ;;      Temps:          0       0       0       0       0       0       0
  2726 ;;      Totals:         3       0       0       0       0       0       0
  2727 ;;Total ram usage:        3 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    4
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_ledDebug
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736                           
  2737                           	psect	text11
  2738  0013EC                     __ptext11:
  2739                           	opt stack 0
  2740  0013EC                     _time_get:
  2741                           	opt stack 25
  2742                           
  2743                           ;incstack = 0
  2744                           ;time_get@WhatTime stored from wreg
  2745  0013EC  6E1D               	movwf	time_get@WhatTime,c
  2746                           
  2747                           ;tmr0.c: 157: if(WhatTime == 1){
  2748  0013EE  041D               	decf	time_get@WhatTime,w,c
  2749  0013F0  A4D8               	btfss	status,2,c
  2750  0013F2  0012               	return	
  2751                           
  2752                           ;tmr0.c: 158: return LEDtime;
  2753  0013F4  C0A3  F01B         	movff	_LEDtime,?_time_get
  2754  0013F8  C0A4  F01C         	movff	_LEDtime+1,?_time_get+1
  2755  0013FC  0012               	return	
  2756  0013FE                     __end_of_time_get:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           prodh	equ	0xFF4
  2763                           prodl	equ	0xFF3
  2764                           intcon	equ	0xFF2
  2765                           indf0	equ	0xFEF
  2766                           postinc0	equ	0xFEE
  2767                           fsr0h	equ	0xFEA
  2768                           fsr0l	equ	0xFE9
  2769                           wreg	equ	0xFE8
  2770                           postdec1	equ	0xFE5
  2771                           fsr1l	equ	0xFE1
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _time_Set *****************
  2780 ;; Defined at:
  2781 ;;		line 162 in file "mcc_generated_files/tmr0.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  WhatTime        1    wreg     unsigned char 
  2784 ;;  value           2   26[COMRAM] int 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  WhatTime        1   28[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;		None               void
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2796 ;;      Params:         2       0       0       0       0       0       0
  2797 ;;      Locals:         1       0       0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0
  2799 ;;      Totals:         3       0       0       0       0       0       0
  2800 ;;Total ram usage:        3 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    4
  2803 ;; This function calls:
  2804 ;;		Nothing
  2805 ;; This function is called by:
  2806 ;;		_ledDebug
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text12
  2811  00134C                     __ptext12:
  2812                           	opt stack 0
  2813  00134C                     _time_Set:
  2814                           	opt stack 25
  2815                           
  2816                           ;incstack = 0
  2817                           ;time_Set@WhatTime stored from wreg
  2818  00134C  6E1D               	movwf	time_Set@WhatTime,c
  2819                           
  2820                           ;tmr0.c: 163: if(WhatTime == 1){
  2821  00134E  041D               	decf	time_Set@WhatTime,w,c
  2822  001350  A4D8               	btfss	status,2,c
  2823  001352  0012               	return	
  2824                           
  2825                           ;tmr0.c: 164: LEDtime = value;
  2826  001354  C01B  F0A3         	movff	time_Set@value,_LEDtime
  2827  001358  C01C  F0A4         	movff	time_Set@value+1,_LEDtime+1
  2828  00135C  0100               	movlb	0	; () banked
  2829  00135E  0E00               	movlw	0
  2830  001360  BFA4               	btfsc	(_LEDtime+1)& (0+255),7,b
  2831  001362  0EFF               	movlw	-1
  2832  001364  6FA5               	movwf	(_LEDtime+2)& (0+255),b
  2833  001366  6FA6               	movwf	(_LEDtime+3)& (0+255),b
  2834  001368  0012               	return	
  2835  00136A                     __end_of_time_Set:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           prodh	equ	0xFF4
  2842                           prodl	equ	0xFF3
  2843                           intcon	equ	0xFF2
  2844                           indf0	equ	0xFEF
  2845                           postinc0	equ	0xFEE
  2846                           fsr0h	equ	0xFEA
  2847                           fsr0l	equ	0xFE9
  2848                           wreg	equ	0xFE8
  2849                           postdec1	equ	0xFE5
  2850                           fsr1l	equ	0xFE1
  2851                           indf2	equ	0xFDF
  2852                           postinc2	equ	0xFDE
  2853                           postdec2	equ	0xFDD
  2854                           fsr2h	equ	0xFDA
  2855                           fsr2l	equ	0xFD9
  2856                           status	equ	0xFD8
  2857                           
  2858 ;; *************** function _Splash *****************
  2859 ;; Defined at:
  2860 ;;		line 143 in file "NokiaLCD.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2869 ;; Tracked objects:
  2870 ;;		On entry : 0/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2874 ;;      Params:         0       0       0       0       0       0       0
  2875 ;;      Locals:         0       0       0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0       0       0
  2877 ;;      Totals:         0       0       0       0       0       0       0
  2878 ;;Total ram usage:        0 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:    8
  2881 ;; This function calls:
  2882 ;;		_NokiaStr
  2883 ;;		_gotoXy
  2884 ;; This function is called by:
  2885 ;;		_main
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888                           
  2889                           	psect	text13
  2890  0010B2                     __ptext13:
  2891                           	opt stack 0
  2892  0010B2                     _Splash:
  2893                           	opt stack 22
  2894                           
  2895                           ;NokiaLCD.c: 144: gotoXy(0,2);
  2896                           
  2897                           ;incstack = 0
  2898  0010B2  0E02               	movlw	2
  2899  0010B4  6E23               	movwf	gotoXy@y,c
  2900  0010B6  0E00               	movlw	0
  2901  0010B8  EC58  F009         	call	_gotoXy
  2902                           
  2903                           ;NokiaLCD.c: 145: NokiaStr("Charger Control");
  2904  0010BC  0ED5               	movlw	low STR_3
  2905  0010BE  0100               	movlb	0	; () banked
  2906  0010C0  6FD3               	movwf	NokiaStr@str& (0+255),b
  2907  0010C2  0E7F               	movlw	high STR_3
  2908  0010C4  0100               	movlb	0	; () banked
  2909  0010C6  6FD4               	movwf	(NokiaStr@str+1)& (0+255),b
  2910  0010C8  ECD6  F008         	call	_NokiaStr	;wreg free
  2911                           
  2912                           ;NokiaLCD.c: 146: gotoXy(1,4);
  2913  0010CC  0E04               	movlw	4
  2914  0010CE  6E23               	movwf	gotoXy@y,c
  2915  0010D0  0E01               	movlw	1
  2916  0010D2  EC58  F009         	call	_gotoXy
  2917                           
  2918                           ;NokiaLCD.c: 147: NokiaStr("Waiting on BMM");
  2919  0010D6  0EE5               	movlw	low STR_4
  2920  0010D8  0100               	movlb	0	; () banked
  2921  0010DA  6FD3               	movwf	NokiaStr@str& (0+255),b
  2922  0010DC  0E7F               	movlw	high STR_4
  2923  0010DE  0100               	movlb	0	; () banked
  2924  0010E0  6FD4               	movwf	(NokiaStr@str+1)& (0+255),b
  2925  0010E2  ECD6  F008         	call	_NokiaStr	;wreg free
  2926  0010E6  0012               	return		;funcret
  2927  0010E8                     __end_of_Splash:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           indf0	equ	0xFEF
  2937                           postinc0	equ	0xFEE
  2938                           fsr0h	equ	0xFEA
  2939                           fsr0l	equ	0xFE9
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           fsr1l	equ	0xFE1
  2943                           indf2	equ	0xFDF
  2944                           postinc2	equ	0xFDE
  2945                           postdec2	equ	0xFDD
  2946                           fsr2h	equ	0xFDA
  2947                           fsr2l	equ	0xFD9
  2948                           status	equ	0xFD8
  2949                           
  2950 ;; *************** function _gotoXy *****************
  2951 ;; Defined at:
  2952 ;;		line 97 in file "NokiaLCD.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  x               1    wreg     unsigned char 
  2955 ;;  y               1   34[COMRAM] unsigned char 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  x               1   35[COMRAM] unsigned char 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;		None               void
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2967 ;;      Params:         1       0       0       0       0       0       0
  2968 ;;      Locals:         1       0       0       0       0       0       0
  2969 ;;      Temps:          0       0       0       0       0       0       0
  2970 ;;      Totals:         2       0       0       0       0       0       0
  2971 ;;Total ram usage:        2 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    6
  2974 ;; This function calls:
  2975 ;;		_LCDwrite
  2976 ;; This function is called by:
  2977 ;;		_Splash
  2978 ;; This function uses a non-reentrant model
  2979 ;;
  2980                           
  2981                           	psect	text14
  2982  0012B0                     __ptext14:
  2983                           	opt stack 0
  2984  0012B0                     _gotoXy:
  2985                           	opt stack 23
  2986                           
  2987                           ;incstack = 0
  2988                           ;gotoXy@x stored from wreg
  2989  0012B0  6E24               	movwf	gotoXy@x,c
  2990                           
  2991                           ;NokiaLCD.c: 98: y=y|0x40;
  2992  0012B2  5023               	movf	gotoXy@y,w,c
  2993  0012B4  0940               	iorlw	64
  2994  0012B6  6E23               	movwf	gotoXy@y,c
  2995                           
  2996                           ;NokiaLCD.c: 99: LCDwrite(1, y);
  2997  0012B8  C023  F021         	movff	gotoXy@y,LCDwrite@data
  2998  0012BC  0E01               	movlw	1
  2999  0012BE  ECD3  F009         	call	_LCDwrite
  3000                           
  3001                           ;NokiaLCD.c: 100: x=(x*6)|0x80;
  3002  0012C2  5024               	movf	gotoXy@x,w,c
  3003  0012C4  0D06               	mullw	6
  3004  0012C6  50F3               	movf	prodl,w,c
  3005  0012C8  0980               	iorlw	128
  3006  0012CA  6E24               	movwf	gotoXy@x,c
  3007                           
  3008                           ;NokiaLCD.c: 101: LCDwrite(1, x);
  3009  0012CC  C024  F021         	movff	gotoXy@x,LCDwrite@data
  3010  0012D0  0E01               	movlw	1
  3011  0012D2  ECD3  F009         	call	_LCDwrite
  3012  0012D6  0012               	return		;funcret
  3013  0012D8                     __end_of_gotoXy:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           intcon	equ	0xFF2
  3022                           indf0	equ	0xFEF
  3023                           postinc0	equ	0xFEE
  3024                           fsr0h	equ	0xFEA
  3025                           fsr0l	equ	0xFE9
  3026                           wreg	equ	0xFE8
  3027                           postdec1	equ	0xFE5
  3028                           fsr1l	equ	0xFE1
  3029                           indf2	equ	0xFDF
  3030                           postinc2	equ	0xFDE
  3031                           postdec2	equ	0xFDD
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _NokiaStr *****************
  3037 ;; Defined at:
  3038 ;;		line 128 in file "NokiaLCD.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  str             2    3[BANK0 ] PTR unsigned char 
  3041 ;;		 -> STR_4(15), STR_3(16), 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;		None               void
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3053 ;;      Params:         0       2       0       0       0       0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0
  3056 ;;      Totals:         0       2       0       0       0       0       0
  3057 ;;Total ram usage:        2 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    7
  3060 ;; This function calls:
  3061 ;;		_LcdCharacter
  3062 ;; This function is called by:
  3063 ;;		_Splash
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           	psect	text15
  3068  0011AC                     __ptext15:
  3069                           	opt stack 0
  3070  0011AC                     _NokiaStr:
  3071                           	opt stack 22
  3072                           
  3073                           ;NokiaLCD.c: 129: while (*str)
  3074                           
  3075                           ;incstack = 0
  3076  0011AC  D00B               	goto	l3527
  3077  0011AE                     l3523:
  3078                           
  3079                           ;NokiaLCD.c: 130: {
  3080                           ;NokiaLCD.c: 131: LcdCharacter(*str++);
  3081  0011AE  C0D3  FFF6         	movff	NokiaStr@str,tblptrl
  3082  0011B2  C0D4  FFF7         	movff	NokiaStr@str+1,tblptrh
  3083  0011B6                     	if	0	;tblptru may be non-zero
  3084  0011B6                     	endif
  3085  0011B6                     	if	0	;tblptru may be non-zero
  3086  0011B6                     	endif
  3087  0011B6  0008               	tblrd		*
  3088  0011B8  50F5               	movf	tablat,w,c
  3089  0011BA  ECE8  F005         	call	_LcdCharacter
  3090  0011BE  0100               	movlb	0	; () banked
  3091  0011C0  4BD3               	infsnz	NokiaStr@str& (0+255),f,b
  3092  0011C2  2BD4               	incf	(NokiaStr@str+1)& (0+255),f,b
  3093  0011C4                     l3527:
  3094  0011C4  C0D3  FFF6         	movff	NokiaStr@str,tblptrl
  3095  0011C8  C0D4  FFF7         	movff	NokiaStr@str+1,tblptrh
  3096  0011CC                     	if	0	;tblptru may be non-zero
  3097  0011CC                     	endif
  3098  0011CC                     	if	0	;tblptru may be non-zero
  3099  0011CC                     	endif
  3100  0011CC  0008               	tblrd		*
  3101  0011CE  50F5               	movf	tablat,w,c
  3102  0011D0  0900               	iorlw	0
  3103  0011D2  B4D8               	btfsc	status,2,c
  3104  0011D4  0012               	return	
  3105  0011D6  D7EB               	goto	l3523
  3106  0011D8                     __end_of_NokiaStr:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           prodh	equ	0xFF4
  3113                           prodl	equ	0xFF3
  3114                           intcon	equ	0xFF2
  3115                           indf0	equ	0xFEF
  3116                           postinc0	equ	0xFEE
  3117                           fsr0h	equ	0xFEA
  3118                           fsr0l	equ	0xFE9
  3119                           wreg	equ	0xFE8
  3120                           postdec1	equ	0xFE5
  3121                           fsr1l	equ	0xFE1
  3122                           indf2	equ	0xFDF
  3123                           postinc2	equ	0xFDE
  3124                           postdec2	equ	0xFDD
  3125                           fsr2h	equ	0xFDA
  3126                           fsr2l	equ	0xFD9
  3127                           status	equ	0xFD8
  3128                           
  3129 ;; *************** function _LcdCharacter *****************
  3130 ;; Defined at:
  3131 ;;		line 111 in file "NokiaLCD.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  character       1    wreg     unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  character       1    0[BANK0 ] unsigned char 
  3136 ;;  index           2    1[BANK0 ] int 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;		None               void
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3146 ;;      Params:         0       0       0       0       0       0       0
  3147 ;;      Locals:         0       3       0       0       0       0       0
  3148 ;;      Temps:          2       0       0       0       0       0       0
  3149 ;;      Totals:         2       3       0       0       0       0       0
  3150 ;;Total ram usage:        5 bytes
  3151 ;; Hardware stack levels used:    1
  3152 ;; Hardware stack levels required when called:    6
  3153 ;; This function calls:
  3154 ;;		_LCDwrite
  3155 ;;		___wmul
  3156 ;; This function is called by:
  3157 ;;		_NokiaStr
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text16
  3162  000BD0                     __ptext16:
  3163                           	opt stack 0
  3164  000BD0                     _LcdCharacter:
  3165                           	opt stack 22
  3166                           
  3167                           ;incstack = 0
  3168                           ;LcdCharacter@character stored from wreg
  3169  000BD0  0100               	movlb	0	; () banked
  3170  000BD2  6FD0               	movwf	LcdCharacter@character& (0+255),b
  3171                           
  3172                           ;NokiaLCD.c: 113: LCDwrite(0, 0x00);
  3173  000BD4  0E00               	movlw	0
  3174  000BD6  6E21               	movwf	LCDwrite@data,c
  3175  000BD8  0E00               	movlw	0
  3176  000BDA  ECD3  F009         	call	_LCDwrite
  3177                           
  3178                           ;NokiaLCD.c: 114: for (int index = 0; index < 5; index++)
  3179  000BDE  0E00               	movlw	0
  3180  000BE0  0100               	movlb	0	; () banked
  3181  000BE2  6FD2               	movwf	(LcdCharacter@index+1)& (0+255),b
  3182  000BE4  0E00               	movlw	0
  3183  000BE6  6FD1               	movwf	LcdCharacter@index& (0+255),b
  3184  000BE8                     l3309:
  3185                           
  3186                           ; BSR set to: 0
  3187  000BE8  0100               	movlb	0	; () banked
  3188  000BEA  BFD2               	btfsc	(LcdCharacter@index+1)& (0+255),7,b
  3189  000BEC  D008               	goto	l3313
  3190  000BEE  0100               	movlb	0	; () banked
  3191  000BF0  51D2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  3192  000BF2  E12E               	bnz	l3319
  3193  000BF4  0E05               	movlw	5
  3194  000BF6  0100               	movlb	0	; () banked
  3195  000BF8  5DD1               	subwf	LcdCharacter@index& (0+255),w,b
  3196  000BFA  B0D8               	btfsc	status,0,c
  3197  000BFC  D029               	goto	l3319
  3198  000BFE                     l3313:
  3199                           
  3200                           ; BSR set to: 0
  3201                           ;NokiaLCD.c: 115: {
  3202                           ;NokiaLCD.c: 116: LCDwrite(0, FONTLOOKUP[character - 0x20][index]);
  3203  000BFE  0EE0               	movlw	224
  3204  000C00  0100               	movlb	0	; () banked
  3205  000C02  25D0               	addwf	LcdCharacter@character& (0+255),w,b
  3206  000C04  6E1B               	movwf	___wmul@multiplier,c
  3207  000C06  6A1C               	clrf	___wmul@multiplier+1,c
  3208  000C08  0EFF               	movlw	255
  3209  000C0A  221C               	addwfc	___wmul@multiplier+1,f,c
  3210  000C0C  0E00               	movlw	0
  3211  000C0E  6E1E               	movwf	___wmul@multiplicand+1,c
  3212  000C10  0E05               	movlw	5
  3213  000C12  6E1D               	movwf	___wmul@multiplicand,c
  3214  000C14  EC93  F009         	call	___wmul	;wreg free
  3215  000C18  0EF5               	movlw	low _FONTLOOKUP
  3216  000C1A  6E23               	movwf	??_LcdCharacter& (0+255),c
  3217  000C1C  0E7D               	movlw	high _FONTLOOKUP
  3218  000C1E  6E24               	movwf	(??_LcdCharacter+1)& (0+255),c
  3219  000C20  501B               	movf	?___wmul,w,c
  3220  000C22  2623               	addwf	??_LcdCharacter,f,c
  3221  000C24  501C               	movf	?___wmul+1,w,c
  3222  000C26  2224               	addwfc	??_LcdCharacter+1,f,c
  3223  000C28  0100               	movlb	0	; () banked
  3224  000C2A  51D1               	movf	LcdCharacter@index& (0+255),w,b
  3225  000C2C  2623               	addwf	??_LcdCharacter,f,c
  3226  000C2E  0100               	movlb	0	; () banked
  3227  000C30  51D2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  3228  000C32  2224               	addwfc	??_LcdCharacter+1,f,c
  3229  000C34  C023  FFF6         	movff	??_LcdCharacter,tblptrl
  3230  000C38  C024  FFF7         	movff	??_LcdCharacter+1,tblptrh
  3231  000C3C                     	if	0	;tblptru may be non-zero
  3232  000C3C                     	endif
  3233  000C3C                     	if	0	;tblptru may be non-zero
  3234  000C3C                     	endif
  3235  000C3C  0008               	tblrd		*
  3236  000C3E  CFF5 F021          	movff	tablat,LCDwrite@data
  3237  000C42  0E00               	movlw	0
  3238  000C44  ECD3  F009         	call	_LCDwrite
  3239  000C48  0100               	movlb	0	; () banked
  3240  000C4A  4BD1               	infsnz	LcdCharacter@index& (0+255),f,b
  3241  000C4C  2BD2               	incf	(LcdCharacter@index+1)& (0+255),f,b
  3242  000C4E  D7CC               	goto	l3309
  3243  000C50                     l3319:
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;NokiaLCD.c: 117: }
  3247                           ;NokiaLCD.c: 118: LCDwrite(0, 0x00);
  3248  000C50  0E00               	movlw	0
  3249  000C52  6E21               	movwf	LCDwrite@data,c
  3250  000C54  0E00               	movlw	0
  3251  000C56  ECD3  F009         	call	_LCDwrite
  3252  000C5A  0012               	return		;funcret
  3253  000C5C                     __end_of_LcdCharacter:
  3254                           	opt stack 0
  3255                           tblptru	equ	0xFF8
  3256                           tblptrh	equ	0xFF7
  3257                           tblptrl	equ	0xFF6
  3258                           tablat	equ	0xFF5
  3259                           prodh	equ	0xFF4
  3260                           prodl	equ	0xFF3
  3261                           intcon	equ	0xFF2
  3262                           indf0	equ	0xFEF
  3263                           postinc0	equ	0xFEE
  3264                           fsr0h	equ	0xFEA
  3265                           fsr0l	equ	0xFE9
  3266                           wreg	equ	0xFE8
  3267                           postdec1	equ	0xFE5
  3268                           fsr1l	equ	0xFE1
  3269                           indf2	equ	0xFDF
  3270                           postinc2	equ	0xFDE
  3271                           postdec2	equ	0xFDD
  3272                           fsr2h	equ	0xFDA
  3273                           fsr2l	equ	0xFD9
  3274                           status	equ	0xFD8
  3275                           
  3276 ;; *************** function ___wmul *****************
  3277 ;; Defined at:
  3278 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  multiplier      2   26[COMRAM] unsigned int 
  3281 ;;  multiplicand    2   28[COMRAM] unsigned int 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  product         2   30[COMRAM] unsigned int 
  3284 ;; Return value:  Size  Location     Type
  3285 ;;                  2   26[COMRAM] unsigned int 
  3286 ;; Registers used:
  3287 ;;		wreg, status,2, status,0, prodl, prodh
  3288 ;; Tracked objects:
  3289 ;;		On entry : 0/0
  3290 ;;		On exit  : 0/0
  3291 ;;		Unchanged: 0/0
  3292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3293 ;;      Params:         4       0       0       0       0       0       0
  3294 ;;      Locals:         2       0       0       0       0       0       0
  3295 ;;      Temps:          0       0       0       0       0       0       0
  3296 ;;      Totals:         6       0       0       0       0       0       0
  3297 ;;Total ram usage:        6 bytes
  3298 ;; Hardware stack levels used:    1
  3299 ;; Hardware stack levels required when called:    4
  3300 ;; This function calls:
  3301 ;;		Nothing
  3302 ;; This function is called by:
  3303 ;;		_LcdCharacter
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           	psect	text17
  3308  001326                     __ptext17:
  3309                           	opt stack 0
  3310  001326                     ___wmul:
  3311                           	opt stack 23
  3312                           
  3313                           ;incstack = 0
  3314  001326  501B               	movf	___wmul@multiplier,w,c
  3315  001328  021D               	mulwf	___wmul@multiplicand,c
  3316  00132A  CFF3 F01F          	movff	prodl,___wmul@product
  3317  00132E  CFF4 F020          	movff	prodh,___wmul@product+1
  3318  001332  501B               	movf	___wmul@multiplier,w,c
  3319  001334  021E               	mulwf	___wmul@multiplicand+1,c
  3320  001336  50F3               	movf	prodl,w,c
  3321  001338  2620               	addwf	___wmul@product+1,f,c
  3322  00133A  501C               	movf	___wmul@multiplier+1,w,c
  3323  00133C  021D               	mulwf	___wmul@multiplicand,c
  3324  00133E  50F3               	movf	prodl,w,c
  3325  001340  2620               	addwf	___wmul@product+1,f,c
  3326  001342  C01F  F01B         	movff	___wmul@product,?___wmul
  3327  001346  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  3328  00134A  0012               	return	
  3329  00134C                     __end_of___wmul:
  3330                           	opt stack 0
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           prodh	equ	0xFF4
  3336                           prodl	equ	0xFF3
  3337                           intcon	equ	0xFF2
  3338                           indf0	equ	0xFEF
  3339                           postinc0	equ	0xFEE
  3340                           fsr0h	equ	0xFEA
  3341                           fsr0l	equ	0xFE9
  3342                           wreg	equ	0xFE8
  3343                           postdec1	equ	0xFE5
  3344                           fsr1l	equ	0xFE1
  3345                           indf2	equ	0xFDF
  3346                           postinc2	equ	0xFDE
  3347                           postdec2	equ	0xFDD
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _SetBMM *****************
  3353 ;; Defined at:
  3354 ;;		line 56 in file "Communications.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      unsigned char 
  3361 ;; Registers used:
  3362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3368 ;;      Params:         0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    7
  3375 ;; This function calls:
  3376 ;;		_Delay
  3377 ;;		_ToSend
  3378 ;;		_receiveData
  3379 ;;		_sendData
  3380 ;; This function is called by:
  3381 ;;		_main
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text18
  3386  000D5E                     __ptext18:
  3387                           	opt stack 0
  3388  000D5E                     _SetBMM:
  3389                           	opt stack 23
  3390                           
  3391                           ;Communications.c: 57: LATCbits.LATC5 = 1;
  3392                           
  3393                           ;incstack = 0
  3394  000D5E  8A8B               	bsf	3979,5,c	;volatile
  3395                           
  3396                           ;Communications.c: 58: ToSend(0, 1);
  3397  000D60  0E00               	movlw	0
  3398  000D62  0100               	movlb	0	; () banked
  3399  000D64  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  3400  000D66  0E01               	movlw	1
  3401  000D68  6FD2               	movwf	ToSend@what& (0+255),b
  3402  000D6A  0E00               	movlw	0
  3403  000D6C  ECB5  F009         	call	_ToSend
  3404                           
  3405                           ;Communications.c: 59: ToSend(1, 1);
  3406  000D70  0E00               	movlw	0
  3407  000D72  0100               	movlb	0	; () banked
  3408  000D74  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  3409  000D76  0E01               	movlw	1
  3410  000D78  6FD2               	movwf	ToSend@what& (0+255),b
  3411  000D7A  0E01               	movlw	1
  3412  000D7C  ECB5  F009         	call	_ToSend
  3413                           
  3414                           ;Communications.c: 60: Delay(5);
  3415  000D80  0E05               	movlw	5
  3416  000D82  6E1B               	movwf	Delay@wait,c
  3417  000D84  0E00               	movlw	0
  3418  000D86  6E1C               	movwf	Delay@wait+1,c
  3419  000D88  0E00               	movlw	0
  3420  000D8A  6E1D               	movwf	Delay@wait+2,c
  3421  000D8C  0E00               	movlw	0
  3422  000D8E  6E1E               	movwf	Delay@wait+3,c
  3423  000D90  ECB6  F007         	call	_Delay	;wreg free
  3424                           
  3425                           ;Communications.c: 61: sendData(6);
  3426  000D94  0E06               	movlw	6
  3427  000D96  EC72  F006         	call	_sendData
  3428                           
  3429                           ;Communications.c: 62: Delay(3);
  3430  000D9A  0E03               	movlw	3
  3431  000D9C  6E1B               	movwf	Delay@wait,c
  3432  000D9E  0E00               	movlw	0
  3433  000DA0  6E1C               	movwf	Delay@wait+1,c
  3434  000DA2  0E00               	movlw	0
  3435  000DA4  6E1D               	movwf	Delay@wait+2,c
  3436  000DA6  0E00               	movlw	0
  3437  000DA8  6E1E               	movwf	Delay@wait+3,c
  3438  000DAA  ECB6  F007         	call	_Delay	;wreg free
  3439                           
  3440                           ;Communications.c: 63: LATCbits.LATC5 = 0;
  3441  000DAE  9A8B               	bcf	3979,5,c	;volatile
  3442                           
  3443                           ;Communications.c: 64: Delay(100);
  3444  000DB0  0E64               	movlw	100
  3445  000DB2  6E1B               	movwf	Delay@wait,c
  3446  000DB4  0E00               	movlw	0
  3447  000DB6  6E1C               	movwf	Delay@wait+1,c
  3448  000DB8  0E00               	movlw	0
  3449  000DBA  6E1D               	movwf	Delay@wait+2,c
  3450  000DBC  0E00               	movlw	0
  3451  000DBE  6E1E               	movwf	Delay@wait+3,c
  3452  000DC0  ECB6  F007         	call	_Delay	;wreg free
  3453                           
  3454                           ;Communications.c: 65: if (receiveData()){
  3455  000DC4  EC58  F000         	call	_receiveData	;wreg free
  3456  000DC8  0900               	iorlw	0
  3457  000DCA  B4D8               	btfsc	status,2,c
  3458  000DCC  D002               	goto	l3569
  3459                           
  3460                           ;Communications.c: 66: return 0;
  3461  000DCE  0E00               	movlw	0
  3462                           
  3463                           ;Communications.c: 67: }
  3464  000DD0  0012               	return	
  3465  000DD2                     l3569:
  3466                           
  3467                           ;Communications.c: 68: else return 1;
  3468  000DD2  0E01               	movlw	1
  3469  000DD4  0012               	return	
  3470  000DD6                     __end_of_SetBMM:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           prodh	equ	0xFF4
  3477                           prodl	equ	0xFF3
  3478                           intcon	equ	0xFF2
  3479                           indf0	equ	0xFEF
  3480                           postinc0	equ	0xFEE
  3481                           fsr0h	equ	0xFEA
  3482                           fsr0l	equ	0xFE9
  3483                           wreg	equ	0xFE8
  3484                           postdec1	equ	0xFE5
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _sendData *****************
  3494 ;; Defined at:
  3495 ;;		line 53 in file "FastTransfer.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;  whereToSend     1    wreg     unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  whereToSend     1    4[BANK0 ] unsigned char 
  3500 ;;  i               2    6[BANK0 ] int 
  3501 ;;  CS              1    5[BANK0 ] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;		None               void
  3504 ;; Registers used:
  3505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         0       0       0       0       0       0       0
  3512 ;;      Locals:         0       4       0       0       0       0       0
  3513 ;;      Temps:          1       0       0       0       0       0       0
  3514 ;;      Totals:         1       4       0       0       0       0       0
  3515 ;;Total ram usage:        5 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    6
  3518 ;; This function calls:
  3519 ;;		_CRC8
  3520 ;;		_FastTransfer_buffer_flush
  3521 ;;		_crcBufS_put
  3522 ;; This function is called by:
  3523 ;;		_respondChargerAsECU
  3524 ;;		_SetBMM
  3525 ;; This function uses a non-reentrant model
  3526 ;;
  3527                           
  3528                           	psect	text19
  3529  000CE4                     __ptext19:
  3530                           	opt stack 0
  3531  000CE4                     _sendData:
  3532                           	opt stack 22
  3533                           
  3534                           ;incstack = 0
  3535                           ;sendData@whereToSend stored from wreg
  3536  000CE4  0100               	movlb	0	; () banked
  3537  000CE6  6FD4               	movwf	sendData@whereToSend& (0+255),b
  3538                           
  3539                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  3540  000CE8  C030  F01B         	movff	_sendStructAddress,CRC8@data
  3541  000CEC  C031  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  3542  000CF0  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  3543  000CF4  ECDC  F007         	call	_CRC8	;wreg free
  3544  000CF8  0100               	movlb	0	; () banked
  3545  000CFA  6FD5               	movwf	sendData@CS& (0+255),b
  3546                           
  3547                           ; BSR set to: 0
  3548                           ;FastTransfer.c: 66: int i;
  3549                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  3550  000CFC  0E00               	movlw	0
  3551  000CFE  0100               	movlb	0	; () banked
  3552  000D00  6FD7               	movwf	(sendData@i+1)& (0+255),b
  3553  000D02  0E00               	movlw	0
  3554  000D04  6FD6               	movwf	sendData@i& (0+255),b
  3555  000D06  D003               	goto	l3239
  3556  000D08                     l3237:
  3557  000D08  0100               	movlb	0	; () banked
  3558  000D0A  4BD6               	infsnz	sendData@i& (0+255),f,b
  3559  000D0C  2BD7               	incf	(sendData@i+1)& (0+255),f,b
  3560  000D0E                     l3239:
  3561                           
  3562                           ; BSR set to: 0
  3563  000D0E  0101               	movlb	1	; () banked
  3564  000D10  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  3565  000D12  0100               	movlb	0	; () banked
  3566  000D14  5DD6               	subwf	sendData@i& (0+255),w,b
  3567  000D16  0100               	movlb	0	; () banked
  3568  000D18  51D7               	movf	(sendData@i+1)& (0+255),w,b
  3569  000D1A  0A80               	xorlw	128
  3570  000D1C  6E23               	movwf	??_sendData& (0+255),c
  3571  000D1E  0101               	movlb	1	; () banked
  3572  000D20  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  3573  000D22  0A80               	xorlw	128
  3574  000D24  5823               	subwfb	??_sendData& (0+255),w,c
  3575  000D26  A0D8               	btfss	status,0,c
  3576  000D28  D7EF               	goto	l3237
  3577                           
  3578                           ; BSR set to: 1
  3579                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  3580                           
  3581                           ; BSR set to: 1
  3582                           
  3583                           ;FastTransfer.c: 69: }
  3584                           ;FastTransfer.c: 72: serial_write(CS);
  3585  000D2A  0EBF               	movlw	low _crc_buffer
  3586  000D2C  6E1B               	movwf	crcBufS_put@_this,c
  3587  000D2E  0E00               	movlw	high _crc_buffer
  3588  000D30  6E1C               	movwf	crcBufS_put@_this+1,c
  3589  000D32  C0D4  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  3590  000D36  C0D5  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  3591  000D3A  0E00               	movlw	0
  3592  000D3C  6E1F               	movwf	crcBufS_put@status,c
  3593  000D3E  ECE1  F003         	call	_crcBufS_put	;wreg free
  3594                           
  3595                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  3596  000D42  0E00               	movlw	low _ring_buffer
  3597  000D44  0100               	movlb	0	; () banked
  3598  000D46  6FD0               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  3599  000D48  0E01               	movlw	high _ring_buffer
  3600  000D4A  0100               	movlb	0	; () banked
  3601  000D4C  6FD1               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  3602  000D4E  0E00               	movlw	0
  3603  000D50  0100               	movlb	0	; () banked
  3604  000D52  6FD3               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  3605  000D54  0E01               	movlw	1
  3606  000D56  6FD2               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  3607  000D58  EC25  F007         	call	_FastTransfer_buffer_flush	;wreg free
  3608  000D5C  0012               	return		;funcret
  3609  000D5E                     __end_of_sendData:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           indf0	equ	0xFEF
  3619                           postinc0	equ	0xFEE
  3620                           fsr0h	equ	0xFEA
  3621                           fsr0l	equ	0xFE9
  3622                           wreg	equ	0xFE8
  3623                           postdec1	equ	0xFE5
  3624                           fsr1l	equ	0xFE1
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _crcBufS_put *****************
  3633 ;; Defined at:
  3634 ;;		line 321 in file "FastTransfer.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3637 ;;		 -> crc_buffer(17), 
  3638 ;;  address         1   28[COMRAM] unsigned char 
  3639 ;;  oldCRC          1   29[COMRAM] unsigned char 
  3640 ;;  status          1   30[COMRAM] unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;		None               void
  3645 ;; Registers used:
  3646 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3652 ;;      Params:         5       0       0       0       0       0       0
  3653 ;;      Locals:         0       0       0       0       0       0       0
  3654 ;;      Temps:          2       0       0       0       0       0       0
  3655 ;;      Totals:         7       0       0       0       0       0       0
  3656 ;;Total ram usage:        7 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    4
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_sendData
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text20
  3667  0007C2                     __ptext20:
  3668                           	opt stack 0
  3669  0007C2                     _crcBufS_put:
  3670                           	opt stack 23
  3671                           
  3672                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  3673                           
  3674                           ;incstack = 0
  3675  0007C2  EE20 F00F          	lfsr	2,15
  3676  0007C6  501B               	movf	crcBufS_put@_this,w,c
  3677  0007C8  26D9               	addwf	fsr2l,f,c
  3678  0007CA  501C               	movf	crcBufS_put@_this+1,w,c
  3679  0007CC  22DA               	addwfc	fsr2h,f,c
  3680  0007CE  CFDE F020          	movff	postinc2,??_crcBufS_put
  3681  0007D2  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  3682  0007D6  5020               	movf	??_crcBufS_put,w,c
  3683  0007D8  241B               	addwf	crcBufS_put@_this,w,c
  3684  0007DA  6ED9               	movwf	fsr2l,c
  3685  0007DC  5021               	movf	??_crcBufS_put+1,w,c
  3686  0007DE  201C               	addwfc	crcBufS_put@_this+1,w,c
  3687  0007E0  6EDA               	movwf	fsr2h,c
  3688  0007E2  C01D  FFDF         	movff	crcBufS_put@address,indf2
  3689                           
  3690                           ;FastTransfer.c: 323: _this->head++;
  3691  0007E6  EE20 F00F          	lfsr	2,15
  3692  0007EA  501B               	movf	crcBufS_put@_this,w,c
  3693  0007EC  26D9               	addwf	fsr2l,f,c
  3694  0007EE  501C               	movf	crcBufS_put@_this+1,w,c
  3695  0007F0  22DA               	addwfc	fsr2h,f,c
  3696  0007F2  2ADE               	incf	postinc2,f,c
  3697  0007F4  0E00               	movlw	0
  3698  0007F6  22DD               	addwfc	postdec2,f,c
  3699                           
  3700                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  3701  0007F8  EE20 F00F          	lfsr	2,15
  3702  0007FC  501B               	movf	crcBufS_put@_this,w,c
  3703  0007FE  26D9               	addwf	fsr2l,f,c
  3704  000800  501C               	movf	crcBufS_put@_this+1,w,c
  3705  000802  22DA               	addwfc	fsr2h,f,c
  3706  000804  CFDE F020          	movff	postinc2,??_crcBufS_put
  3707  000808  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  3708  00080C  5020               	movf	??_crcBufS_put,w,c
  3709  00080E  241B               	addwf	crcBufS_put@_this,w,c
  3710  000810  6ED9               	movwf	fsr2l,c
  3711  000812  5021               	movf	??_crcBufS_put+1,w,c
  3712  000814  201C               	addwfc	crcBufS_put@_this+1,w,c
  3713  000816  6EDA               	movwf	fsr2h,c
  3714  000818  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  3715                           
  3716                           ;FastTransfer.c: 325: _this->head++;
  3717  00081C  EE20 F00F          	lfsr	2,15
  3718  000820  501B               	movf	crcBufS_put@_this,w,c
  3719  000822  26D9               	addwf	fsr2l,f,c
  3720  000824  501C               	movf	crcBufS_put@_this+1,w,c
  3721  000826  22DA               	addwfc	fsr2h,f,c
  3722  000828  2ADE               	incf	postinc2,f,c
  3723  00082A  0E00               	movlw	0
  3724  00082C  22DD               	addwfc	postdec2,f,c
  3725                           
  3726                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  3727  00082E  EE20 F00F          	lfsr	2,15
  3728  000832  501B               	movf	crcBufS_put@_this,w,c
  3729  000834  26D9               	addwf	fsr2l,f,c
  3730  000836  501C               	movf	crcBufS_put@_this+1,w,c
  3731  000838  22DA               	addwfc	fsr2h,f,c
  3732  00083A  CFDE F020          	movff	postinc2,??_crcBufS_put
  3733  00083E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  3734  000842  5020               	movf	??_crcBufS_put,w,c
  3735  000844  241B               	addwf	crcBufS_put@_this,w,c
  3736  000846  6ED9               	movwf	fsr2l,c
  3737  000848  5021               	movf	??_crcBufS_put+1,w,c
  3738  00084A  201C               	addwfc	crcBufS_put@_this+1,w,c
  3739  00084C  6EDA               	movwf	fsr2h,c
  3740  00084E  C01F  FFDF         	movff	crcBufS_put@status,indf2
  3741                           
  3742                           ;FastTransfer.c: 327: _this->head++;
  3743  000852  EE20 F00F          	lfsr	2,15
  3744  000856  501B               	movf	crcBufS_put@_this,w,c
  3745  000858  26D9               	addwf	fsr2l,f,c
  3746  00085A  501C               	movf	crcBufS_put@_this+1,w,c
  3747  00085C  22DA               	addwfc	fsr2h,f,c
  3748  00085E  2ADE               	incf	postinc2,f,c
  3749  000860  0E00               	movlw	0
  3750  000862  22DD               	addwfc	postdec2,f,c
  3751                           
  3752                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  3753  000864  EE20 F00F          	lfsr	2,15
  3754  000868  501B               	movf	crcBufS_put@_this,w,c
  3755  00086A  26D9               	addwf	fsr2l,f,c
  3756  00086C  501C               	movf	crcBufS_put@_this+1,w,c
  3757  00086E  22DA               	addwfc	fsr2h,f,c
  3758  000870  0E01               	movlw	1
  3759  000872  BEDB               	btfsc	plusw2,7,c
  3760  000874  0012               	return	
  3761  000876  0E01               	movlw	1
  3762  000878  50DB               	movf	plusw2,w,c
  3763  00087A  E104               	bnz	u2030
  3764  00087C  0E0F               	movlw	15
  3765  00087E  5CDE               	subwf	postinc2,w,c
  3766  000880  A0D8               	btfss	status,0,c
  3767  000882  0012               	return	
  3768  000884                     u2030:
  3769                           
  3770                           ;FastTransfer.c: 329: _this->head = 0;
  3771  000884  EE20 F00F          	lfsr	2,15
  3772  000888  501B               	movf	crcBufS_put@_this,w,c
  3773  00088A  26D9               	addwf	fsr2l,f,c
  3774  00088C  501C               	movf	crcBufS_put@_this+1,w,c
  3775  00088E  22DA               	addwfc	fsr2h,f,c
  3776  000890  0E00               	movlw	0
  3777  000892  6EDE               	movwf	postinc2,c
  3778  000894  0E00               	movlw	0
  3779  000896  6EDD               	movwf	postdec2,c
  3780  000898  0012               	return	
  3781  00089A                     __end_of_crcBufS_put:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           prodh	equ	0xFF4
  3788                           prodl	equ	0xFF3
  3789                           intcon	equ	0xFF2
  3790                           indf0	equ	0xFEF
  3791                           postinc0	equ	0xFEE
  3792                           fsr0h	equ	0xFEA
  3793                           fsr0l	equ	0xFE9
  3794                           wreg	equ	0xFE8
  3795                           postdec1	equ	0xFE5
  3796                           fsr1l	equ	0xFE1
  3797                           indf2	equ	0xFDF
  3798                           postinc2	equ	0xFDE
  3799                           postdec2	equ	0xFDD
  3800                           plusw2	equ	0xFDB
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _FastTransfer_buffer_flush *****************
  3806 ;; Defined at:
  3807 ;;		line 261 in file "FastTransfer.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  3810 ;;		 -> ring_buffer(206), 
  3811 ;;  clearBuffer     2    2[BANK0 ] const int 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;		None               void
  3816 ;; Registers used:
  3817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3823 ;;      Params:         0       4       0       0       0       0       0
  3824 ;;      Locals:         0       0       0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0
  3826 ;;      Totals:         0       4       0       0       0       0       0
  3827 ;;Total ram usage:        4 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    5
  3830 ;; This function calls:
  3831 ;;		_memset
  3832 ;; This function is called by:
  3833 ;;		_sendData
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text21
  3838  000E4A                     __ptext21:
  3839                           	opt stack 0
  3840  000E4A                     _FastTransfer_buffer_flush:
  3841                           	opt stack 22
  3842                           
  3843                           ;FastTransfer.c: 262: _this->count = 0;
  3844                           
  3845                           ;incstack = 0
  3846  000E4A  0100               	movlb	0	; () banked
  3847  000E4C  EE20 F0CC          	lfsr	2,204
  3848  000E50  51D0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  3849  000E52  26D9               	addwf	fsr2l,f,c
  3850  000E54  51D1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  3851  000E56  22DA               	addwfc	fsr2h,f,c
  3852  000E58  0E00               	movlw	0
  3853  000E5A  6EDE               	movwf	postinc2,c
  3854  000E5C  0E00               	movlw	0
  3855  000E5E  6EDD               	movwf	postdec2,c
  3856                           
  3857                           ;FastTransfer.c: 263: _this->head = 0;
  3858  000E60  0100               	movlb	0	; () banked
  3859  000E62  EE20 F0C8          	lfsr	2,200
  3860  000E66  51D0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  3861  000E68  26D9               	addwf	fsr2l,f,c
  3862  000E6A  51D1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  3863  000E6C  22DA               	addwfc	fsr2h,f,c
  3864  000E6E  0E00               	movlw	0
  3865  000E70  6EDE               	movwf	postinc2,c
  3866  000E72  0E00               	movlw	0
  3867  000E74  6EDD               	movwf	postdec2,c
  3868                           
  3869                           ;FastTransfer.c: 264: _this->tail = 0;
  3870  000E76  0100               	movlb	0	; () banked
  3871  000E78  EE20 F0CA          	lfsr	2,202
  3872  000E7C  51D0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  3873  000E7E  26D9               	addwf	fsr2l,f,c
  3874  000E80  51D1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  3875  000E82  22DA               	addwfc	fsr2h,f,c
  3876  000E84  0E00               	movlw	0
  3877  000E86  6EDE               	movwf	postinc2,c
  3878  000E88  0E00               	movlw	0
  3879  000E8A  6EDD               	movwf	postdec2,c
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;FastTransfer.c: 265: if (clearBuffer) {
  3883  000E8C  0100               	movlb	0	; () banked
  3884  000E8E  51D2               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  3885  000E90  0100               	movlb	0	; () banked
  3886  000E92  11D3               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  3887  000E94  B4D8               	btfsc	status,2,c
  3888  000E96  0012               	return	
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  3892  000E98  C0D0  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  3893  000E9C  C0D1  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  3894  000EA0  0E00               	movlw	0
  3895  000EA2  6E1E               	movwf	memset@c+1,c
  3896  000EA4  0E00               	movlw	0
  3897  000EA6  6E1D               	movwf	memset@c,c
  3898  000EA8  0E00               	movlw	0
  3899  000EAA  6E20               	movwf	memset@n+1,c
  3900  000EAC  0EC8               	movlw	200
  3901  000EAE  6E1F               	movwf	memset@n,c
  3902  000EB0  ECEC  F008         	call	_memset	;wreg free
  3903  000EB4  0012               	return	
  3904  000EB6                     __end_of_FastTransfer_buffer_flush:
  3905                           	opt stack 0
  3906                           tblptru	equ	0xFF8
  3907                           tblptrh	equ	0xFF7
  3908                           tblptrl	equ	0xFF6
  3909                           tablat	equ	0xFF5
  3910                           prodh	equ	0xFF4
  3911                           prodl	equ	0xFF3
  3912                           intcon	equ	0xFF2
  3913                           indf0	equ	0xFEF
  3914                           postinc0	equ	0xFEE
  3915                           fsr0h	equ	0xFEA
  3916                           fsr0l	equ	0xFE9
  3917                           wreg	equ	0xFE8
  3918                           postdec1	equ	0xFE5
  3919                           fsr1l	equ	0xFE1
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           postdec2	equ	0xFDD
  3923                           plusw2	equ	0xFDB
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _memset *****************
  3929 ;; Defined at:
  3930 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  p1              2   26[COMRAM] PTR void 
  3933 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  3934 ;;  c               2   28[COMRAM] int 
  3935 ;;  n               2   30[COMRAM] unsigned int 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  p               2   32[COMRAM] PTR unsigned char 
  3938 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  3939 ;; Return value:  Size  Location     Type
  3940 ;;                  2   26[COMRAM] PTR void 
  3941 ;; Registers used:
  3942 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3943 ;; Tracked objects:
  3944 ;;		On entry : 0/0
  3945 ;;		On exit  : 0/0
  3946 ;;		Unchanged: 0/0
  3947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3948 ;;      Params:         6       0       0       0       0       0       0
  3949 ;;      Locals:         2       0       0       0       0       0       0
  3950 ;;      Temps:          0       0       0       0       0       0       0
  3951 ;;      Totals:         8       0       0       0       0       0       0
  3952 ;;Total ram usage:        8 bytes
  3953 ;; Hardware stack levels used:    1
  3954 ;; Hardware stack levels required when called:    4
  3955 ;; This function calls:
  3956 ;;		Nothing
  3957 ;; This function is called by:
  3958 ;;		_FastTransfer_buffer_flush
  3959 ;;		_UART_buff_init
  3960 ;;		_UART_buff_flush
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text22
  3965  0011D8                     __ptext22:
  3966                           	opt stack 0
  3967  0011D8                     _memset:
  3968                           	opt stack 22
  3969                           
  3970                           ;incstack = 0
  3971  0011D8  C01B  F021         	movff	memset@p1,memset@p
  3972  0011DC  C01C  F022         	movff	memset@p1+1,memset@p+1
  3973  0011E0  D008               	goto	l3117
  3974  0011E2                     l3113:
  3975  0011E2  C021  FFD9         	movff	memset@p,fsr2l
  3976  0011E6  C022  FFDA         	movff	memset@p+1,fsr2h
  3977  0011EA  C01D  FFDF         	movff	memset@c,indf2
  3978  0011EE  4A21               	infsnz	memset@p,f,c
  3979  0011F0  2A22               	incf	memset@p+1,f,c
  3980  0011F2                     l3117:
  3981  0011F2  061F               	decf	memset@n,f,c
  3982  0011F4  A0D8               	btfss	status,0,c
  3983  0011F6  0620               	decf	memset@n+1,f,c
  3984  0011F8  281F               	incf	memset@n,w,c
  3985  0011FA  E1F3               	bnz	l3113
  3986  0011FC  2820               	incf	memset@n+1,w,c
  3987  0011FE  B4D8               	btfsc	status,2,c
  3988  001200  0012               	return	
  3989  001202  D7EF               	goto	l3113
  3990  001204                     __end_of_memset:
  3991                           	opt stack 0
  3992                           tblptru	equ	0xFF8
  3993                           tblptrh	equ	0xFF7
  3994                           tblptrl	equ	0xFF6
  3995                           tablat	equ	0xFF5
  3996                           prodh	equ	0xFF4
  3997                           prodl	equ	0xFF3
  3998                           intcon	equ	0xFF2
  3999                           indf0	equ	0xFEF
  4000                           postinc0	equ	0xFEE
  4001                           fsr0h	equ	0xFEA
  4002                           fsr0l	equ	0xFE9
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1l	equ	0xFE1
  4006                           indf2	equ	0xFDF
  4007                           postinc2	equ	0xFDE
  4008                           postdec2	equ	0xFDD
  4009                           plusw2	equ	0xFDB
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function _receiveData *****************
  4015 ;; Defined at:
  4016 ;;		line 82 in file "FastTransfer.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;		None
  4019 ;; Auto vars:     Size  Location     Type
  4020 ;;  holder          3   20[BANK0 ] unsigned char [3]
  4021 ;;  crcHolder       1   16[BANK0 ] unsigned char 
  4022 ;;  holder          3   17[BANK0 ] unsigned char [3]
  4023 ;;  crcHolder       1   15[BANK0 ] unsigned char 
  4024 ;;  u               2   23[BANK0 ] int 
  4025 ;;  r               2   25[BANK0 ] int 
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      unsigned char 
  4028 ;; Registers used:
  4029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4035 ;;      Params:         0       0       0       0       0       0       0
  4036 ;;      Locals:         0      12       0       0       0       0       0
  4037 ;;      Temps:          0       6       0       0       0       0       0
  4038 ;;      Totals:         0      18       0       0       0       0       0
  4039 ;;Total ram usage:       18 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; Hardware stack levels required when called:    6
  4042 ;; This function calls:
  4043 ;;		_CRC8
  4044 ;;		_CRCcheck
  4045 ;; This function is called by:
  4046 ;;		_updateComms
  4047 ;;		_SetBMM
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text23
  4052  0000B0                     __ptext23:
  4053                           	opt stack 0
  4054  0000B0                     _receiveData:
  4055                           	opt stack 23
  4056                           
  4057                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  4058                           
  4059                           ;incstack = 0
  4060  0000B0  D020               	goto	l3363
  4061  0000B2                     l3353:
  4062                           
  4063                           ; BSR set to: 0
  4064  0000B2  0100               	movlb	0	; () banked
  4065  0000B4  4BE7               	infsnz	receiveData@u& (0+255),f,b
  4066  0000B6  2BE8               	incf	(receiveData@u+1)& (0+255),f,b
  4067                           
  4068                           ; BSR set to: 0
  4069                           
  4070                           ; BSR set to: 0
  4071  0000B8  5040               	movf	_rx_len,w,c
  4072  0000BA  0100               	movlb	0	; () banked
  4073  0000BC  6FD9               	movwf	??_receiveData& (0+255),b
  4074  0000BE  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  4075  0000C0  0E01               	movlw	1
  4076  0000C2  0100               	movlb	0	; () banked
  4077  0000C4  27D9               	addwf	??_receiveData& (0+255),f,b
  4078  0000C6  0E00               	movlw	0
  4079  0000C8  23DA               	addwfc	(??_receiveData+1)& (0+255),f,b
  4080  0000CA  0100               	movlb	0	; () banked
  4081  0000CC  51E7               	movf	receiveData@u& (0+255),w,b
  4082  0000CE  0100               	movlb	0	; () banked
  4083  0000D0  5DD9               	subwf	??_receiveData& (0+255),w,b
  4084  0000D2  0100               	movlb	0	; () banked
  4085  0000D4  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  4086  0000D6  0A80               	xorlw	128
  4087  0000D8  0100               	movlb	0	; () banked
  4088  0000DA  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  4089  0000DC  0100               	movlb	0	; () banked
  4090  0000DE  51E8               	movf	(receiveData@u+1)& (0+255),w,b
  4091  0000E0  0A80               	xorlw	128
  4092  0000E2  0100               	movlb	0	; () banked
  4093  0000E4  59DB               	subwfb	(??_receiveData+2)& (0+255),w,b
  4094  0000E6  B0D8               	btfsc	status,0,c
  4095  0000E8  D7E4               	goto	l3353
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;FastTransfer.c: 109: }
  4099                           ;FastTransfer.c: 110: rx_len = 0;
  4100                           
  4101                           ; BSR set to: 0
  4102  0000EA  0E00               	movlw	0
  4103  0000EC  6E40               	movwf	_rx_len,c
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;FastTransfer.c: 111: return 0;
  4107  0000EE  0E00               	movlw	0
  4108                           
  4109                           ; BSR set to: 0
  4110  0000F0  0012               	return	
  4111  0000F2                     l3363:
  4112                           
  4113                           ;FastTransfer.c: 112: }
  4114                           ;FastTransfer.c: 114: }
  4115                           ;FastTransfer.c: 115: }
  4116                           ;FastTransfer.c: 116: }
  4117                           ;FastTransfer.c: 119: if (rx_len != 0) {
  4118  0000F2  5040               	movf	_rx_len,w,c
  4119  0000F4  B4D8               	btfsc	status,2,c
  4120  0000F6  D12C               	goto	l3445
  4121                           
  4122                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  4123  0000F8  503F               	movf	_rx_array_inx,w,c
  4124  0000FA  B4D8               	btfsc	status,2,c
  4125  0000FC                     l436:
  4126  0000FC  D7FF               	goto	l436
  4127                           
  4128                           ;FastTransfer.c: 135: }
  4129                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  4130                           
  4131                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  4132                           
  4133                           ;FastTransfer.c: 129: }
  4134                           ;FastTransfer.c: 130: }
  4135                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  4136                           
  4137                           ;FastTransfer.c: 128: return 0;
  4138                           
  4139                           ;FastTransfer.c: 127: rx_array_inx = 0;
  4140                           
  4141                           ;FastTransfer.c: 126: rx_len = 0;
  4142                           
  4143                           ;FastTransfer.c: 125: CRCcheck();
  4144                           
  4145                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  4146  0000FE  5040               	movf	_rx_len,w,c
  4147  000100  0100               	movlb	0	; () banked
  4148  000102  6FD9               	movwf	??_receiveData& (0+255),b
  4149  000104  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  4150  000106  0EFF               	movlw	255
  4151  000108  0100               	movlb	0	; () banked
  4152  00010A  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  4153  00010C  0EFF               	movlw	255
  4154  00010E  0100               	movlb	0	; () banked
  4155  000110  6FDC               	movwf	(??_receiveData+3)& (0+255),b
  4156  000112  503F               	movf	_rx_array_inx,w,c
  4157  000114  0100               	movlb	0	; () banked
  4158  000116  6FDD               	movwf	(??_receiveData+4)& (0+255),b
  4159  000118  6BDE               	clrf	(??_receiveData+5)& (0+255),b
  4160  00011A  0100               	movlb	0	; () banked
  4161  00011C  51DB               	movf	(??_receiveData+2)& (0+255),w,b
  4162  00011E  0100               	movlb	0	; () banked
  4163  000120  27DD               	addwf	(??_receiveData+4)& (0+255),f,b
  4164  000122  0100               	movlb	0	; () banked
  4165  000124  51DC               	movf	(??_receiveData+3)& (0+255),w,b
  4166  000126  0100               	movlb	0	; () banked
  4167  000128  23DE               	addwfc	(??_receiveData+5)& (0+255),f,b
  4168  00012A  0100               	movlb	0	; () banked
  4169  00012C  51D9               	movf	??_receiveData& (0+255),w,b
  4170  00012E  0100               	movlb	0	; () banked
  4171  000130  19DD               	xorwf	(??_receiveData+4)& (0+255),w,b
  4172  000132  E105               	bnz	u2361
  4173  000134  0100               	movlb	0	; () banked
  4174  000136  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  4175  000138  0100               	movlb	0	; () banked
  4176  00013A  19DE               	xorwf	(??_receiveData+5)& (0+255),w,b
  4177  00013C  A4D8               	btfss	status,2,c
  4178  00013E                     u2361:
  4179  00013E  D108               	goto	l3445
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  4183  000140  0E00               	movlw	low _rx_buffer
  4184  000142  6E1B               	movwf	CRC8@data,c
  4185  000144  0E04               	movlw	high _rx_buffer
  4186  000146  6E1C               	movwf	CRC8@data+1,c
  4187  000148  C040  F01D         	movff	_rx_len,CRC8@len
  4188  00014C  ECDC  F007         	call	_CRC8	;wreg free
  4189  000150  6E34               	movwf	_calc_CS,c
  4190                           
  4191                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  4192  000152  0EFF               	movlw	255
  4193  000154  0100               	movlb	0	; () banked
  4194  000156  6FD9               	movwf	??_receiveData& (0+255),b
  4195  000158  0EFF               	movlw	255
  4196  00015A  0100               	movlb	0	; () banked
  4197  00015C  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  4198  00015E  503F               	movf	_rx_array_inx,w,c
  4199  000160  0100               	movlb	0	; () banked
  4200  000162  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  4201  000164  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  4202  000166  0100               	movlb	0	; () banked
  4203  000168  51D9               	movf	??_receiveData& (0+255),w,b
  4204  00016A  0100               	movlb	0	; () banked
  4205  00016C  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  4206  00016E  0100               	movlb	0	; () banked
  4207  000170  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  4208  000172  0100               	movlb	0	; () banked
  4209  000174  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4210  000176  0E00               	movlw	low _rx_buffer
  4211  000178  0100               	movlb	0	; () banked
  4212  00017A  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  4213  00017C  6ED9               	movwf	fsr2l,c
  4214  00017E  0E04               	movlw	high _rx_buffer
  4215  000180  0100               	movlb	0	; () banked
  4216  000182  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4217  000184  6EDA               	movwf	fsr2h,c
  4218  000186  5034               	movf	_calc_CS,w,c
  4219  000188  18DE               	xorwf	postinc2,w,c
  4220  00018A  A4D8               	btfss	status,2,c
  4221  00018C  D0A9               	goto	l3425
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;FastTransfer.c: 147: int r;
  4225                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  4226  00018E  0E00               	movlw	0
  4227  000190  0100               	movlb	0	; () banked
  4228  000192  6FEA               	movwf	(receiveData@r+1)& (0+255),b
  4229  000194  0E00               	movlw	0
  4230  000196  6FE9               	movwf	receiveData@r& (0+255),b
  4231  000198  D05A               	goto	l3403
  4232  00019A                     l3393:
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  4236  00019A  0E00               	movlw	low _rx_buffer
  4237  00019C  0100               	movlb	0	; () banked
  4238  00019E  25E9               	addwf	receiveData@r& (0+255),w,b
  4239  0001A0  6ED9               	movwf	fsr2l,c
  4240  0001A2  0E04               	movlw	high _rx_buffer
  4241  0001A4  0100               	movlb	0	; () banked
  4242  0001A6  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  4243  0001A8  6EDA               	movwf	fsr2h,c
  4244  0001AA  503B               	movf	_maxDataAddress,w,c
  4245  0001AC  5CDE               	subwf	postinc2,w,c
  4246  0001AE  B0D8               	btfsc	status,0,c
  4247  0001B0  D041               	goto	l3399
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  4251  0001B2  0E01               	movlw	1
  4252  0001B4  0100               	movlb	0	; () banked
  4253  0001B6  25E9               	addwf	receiveData@r& (0+255),w,b
  4254  0001B8  0100               	movlb	0	; () banked
  4255  0001BA  6FD9               	movwf	??_receiveData& (0+255),b
  4256  0001BC  0E00               	movlw	0
  4257  0001BE  0100               	movlb	0	; () banked
  4258  0001C0  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  4259  0001C2  0100               	movlb	0	; () banked
  4260  0001C4  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  4261  0001C6  0E00               	movlw	low _rx_buffer
  4262  0001C8  0100               	movlb	0	; () banked
  4263  0001CA  25D9               	addwf	??_receiveData& (0+255),w,b
  4264  0001CC  6ED9               	movwf	fsr2l,c
  4265  0001CE  0E04               	movlw	high _rx_buffer
  4266  0001D0  0100               	movlb	0	; () banked
  4267  0001D2  21DA               	addwfc	(??_receiveData+1)& (0+255),w,b
  4268  0001D4  6EDA               	movwf	fsr2h,c
  4269  0001D6  50DF               	movf	indf2,w,c
  4270  0001D8  6E2C               	movwf	_group,c
  4271                           
  4272                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  4273  0001DA  0E02               	movlw	2
  4274  0001DC  0100               	movlb	0	; () banked
  4275  0001DE  25E9               	addwf	receiveData@r& (0+255),w,b
  4276  0001E0  0100               	movlb	0	; () banked
  4277  0001E2  6FD9               	movwf	??_receiveData& (0+255),b
  4278  0001E4  0E00               	movlw	0
  4279  0001E6  0100               	movlb	0	; () banked
  4280  0001E8  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  4281  0001EA  0100               	movlb	0	; () banked
  4282  0001EC  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  4283  0001EE  0E00               	movlw	low _rx_buffer
  4284  0001F0  0100               	movlb	0	; () banked
  4285  0001F2  25D9               	addwf	??_receiveData& (0+255),w,b
  4286  0001F4  6ED9               	movwf	fsr2l,c
  4287  0001F6  0E04               	movlw	high _rx_buffer
  4288  0001F8  0100               	movlb	0	; () banked
  4289  0001FA  21DA               	addwfc	(??_receiveData+1)& (0+255),w,b
  4290  0001FC  6EDA               	movwf	fsr2h,c
  4291  0001FE  50DF               	movf	indf2,w,c
  4292  000200  6E2D               	movwf	_group+1,c
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  4296  000202  0E00               	movlw	low _rx_buffer
  4297  000204  0100               	movlb	0	; () banked
  4298  000206  25E9               	addwf	receiveData@r& (0+255),w,b
  4299  000208  6ED9               	movwf	fsr2l,c
  4300  00020A  0E04               	movlw	high _rx_buffer
  4301  00020C  0100               	movlb	0	; () banked
  4302  00020E  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  4303  000210  6EDA               	movwf	fsr2h,c
  4304  000212  50DF               	movf	indf2,w,c
  4305  000214  0100               	movlb	0	; () banked
  4306  000216  6FD9               	movwf	??_receiveData& (0+255),b
  4307  000218  0100               	movlb	0	; () banked
  4308  00021A  51D9               	movf	??_receiveData& (0+255),w,b
  4309  00021C  0D02               	mullw	2
  4310  00021E  50F3               	movf	prodl,w,c
  4311  000220  242E               	addwf	_receiveArrayAddress,w,c
  4312  000222  6ED9               	movwf	fsr2l,c
  4313  000224  50F4               	movf	prodh,w,c
  4314  000226  202F               	addwfc	_receiveArrayAddress+1,w,c
  4315  000228  6EDA               	movwf	fsr2h,c
  4316  00022A  C02C  FFDE         	movff	_group,postinc2
  4317  00022E  C02D  FFDD         	movff	_group+1,postdec2
  4318                           
  4319                           ;FastTransfer.c: 153: } else {
  4320  000232  D003               	goto	l3401
  4321  000234                     l3399:
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  4325  000234  0100               	movlb	0	; () banked
  4326  000236  4BB5               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  4327  000238  2BB6               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  4328  00023A                     l3401:
  4329                           
  4330                           ; BSR set to: 0
  4331  00023A  0E03               	movlw	3
  4332  00023C  0100               	movlb	0	; () banked
  4333  00023E  25E9               	addwf	receiveData@r& (0+255),w,b
  4334  000240  0100               	movlb	0	; () banked
  4335  000242  6FE9               	movwf	receiveData@r& (0+255),b
  4336  000244  0E00               	movlw	0
  4337  000246  0100               	movlb	0	; () banked
  4338  000248  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  4339  00024A  0100               	movlb	0	; () banked
  4340  00024C  6FEA               	movwf	(receiveData@r+1)& (0+255),b
  4341  00024E                     l3403:
  4342                           
  4343                           ; BSR set to: 0
  4344  00024E  5040               	movf	_rx_len,w,c
  4345  000250  0100               	movlb	0	; () banked
  4346  000252  6FD9               	movwf	??_receiveData& (0+255),b
  4347  000254  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  4348  000256  0100               	movlb	0	; () banked
  4349  000258  51D9               	movf	??_receiveData& (0+255),w,b
  4350  00025A  0100               	movlb	0	; () banked
  4351  00025C  5DE9               	subwf	receiveData@r& (0+255),w,b
  4352  00025E  0100               	movlb	0	; () banked
  4353  000260  51EA               	movf	(receiveData@r+1)& (0+255),w,b
  4354  000262  0A80               	xorlw	128
  4355  000264  0100               	movlb	0	; () banked
  4356  000266  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  4357  000268  0100               	movlb	0	; () banked
  4358  00026A  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  4359  00026C  0A80               	xorlw	128
  4360  00026E  0100               	movlb	0	; () banked
  4361  000270  59DB               	subwfb	(??_receiveData+2)& (0+255),w,b
  4362  000272  A0D8               	btfss	status,0,c
  4363  000274  D792               	goto	l3393
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;FastTransfer.c: 155: }
  4367                           ;FastTransfer.c: 156: }
  4368                           ;FastTransfer.c: 159: if (AKNAKsend) {
  4369                           
  4370                           ; BSR set to: 0
  4371  000276  5032               	movf	_AKNAKsend,w,c
  4372  000278  B4D8               	btfsc	status,2,c
  4373  00027A  D02C               	goto	l3415
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;FastTransfer.c: 160: unsigned char holder[3];
  4377                           ;FastTransfer.c: 161: holder[0] = 255;
  4378  00027C  0100               	movlb	0	; () banked
  4379  00027E  69E1               	setf	receiveData@holder& (0+255),b
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;FastTransfer.c: 162: holder[1] = 1;
  4383  000280  0E01               	movlw	1
  4384  000282  0100               	movlb	0	; () banked
  4385  000284  6FE2               	movwf	(receiveData@holder+1)& (0+255),b
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  4389  000286  0EFF               	movlw	255
  4390  000288  0100               	movlb	0	; () banked
  4391  00028A  6FD9               	movwf	??_receiveData& (0+255),b
  4392  00028C  0EFF               	movlw	255
  4393  00028E  0100               	movlb	0	; () banked
  4394  000290  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  4395  000292  503F               	movf	_rx_array_inx,w,c
  4396  000294  0100               	movlb	0	; () banked
  4397  000296  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  4398  000298  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  4399  00029A  0100               	movlb	0	; () banked
  4400  00029C  51D9               	movf	??_receiveData& (0+255),w,b
  4401  00029E  0100               	movlb	0	; () banked
  4402  0002A0  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  4403  0002A2  0100               	movlb	0	; () banked
  4404  0002A4  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  4405  0002A6  0100               	movlb	0	; () banked
  4406  0002A8  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4407  0002AA  0E00               	movlw	low _rx_buffer
  4408  0002AC  0100               	movlb	0	; () banked
  4409  0002AE  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  4410  0002B0  6ED9               	movwf	fsr2l,c
  4411  0002B2  0E04               	movlw	high _rx_buffer
  4412  0002B4  0100               	movlb	0	; () banked
  4413  0002B6  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4414  0002B8  6EDA               	movwf	fsr2h,c
  4415  0002BA  50DF               	movf	indf2,w,c
  4416  0002BC  0100               	movlb	0	; () banked
  4417  0002BE  6FE3               	movwf	(receiveData@holder+2)& (0+255),b
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;FastTransfer.c: 173: serial_write(crcHolder);
  4421  0002C0  0EE1               	movlw	low receiveData@holder
  4422  0002C2  6E1B               	movwf	CRC8@data,c
  4423  0002C4  0E00               	movlw	high receiveData@holder
  4424  0002C6  6E1C               	movwf	CRC8@data+1,c
  4425  0002C8  0E03               	movlw	3
  4426  0002CA  6E1D               	movwf	CRC8@len,c
  4427  0002CC  ECDC  F007         	call	_CRC8	;wreg free
  4428  0002D0  0100               	movlb	0	; () banked
  4429  0002D2  6FDF               	movwf	receiveData@crcHolder& (0+255),b
  4430  0002D4                     l3415:
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;FastTransfer.c: 174: }
  4434                           ;FastTransfer.c: 178: rx_len = 0;
  4435  0002D4  0E00               	movlw	0
  4436  0002D6  6E40               	movwf	_rx_len,c
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;FastTransfer.c: 179: rx_array_inx = 0;
  4440  0002D8  0E00               	movlw	0
  4441  0002DA  6E3F               	movwf	_rx_array_inx,c
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;FastTransfer.c: 180: return 1;
  4445  0002DC  0E01               	movlw	1
  4446                           
  4447                           ; BSR set to: 0
  4448  0002DE  0012               	return	
  4449  0002E0                     l3425:
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;FastTransfer.c: 182: crcErrorCounter++;
  4453  0002E0  0100               	movlb	0	; () banked
  4454  0002E2  4BB3               	infsnz	_crcErrorCounter& (0+255),f,b
  4455  0002E4  2BB4               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;FastTransfer.c: 184: if (AKNAKsend) {
  4459  0002E6  5032               	movf	_AKNAKsend,w,c
  4460  0002E8  B4D8               	btfsc	status,2,c
  4461  0002EA  D02C               	goto	l3437
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;FastTransfer.c: 185: unsigned char holder[3];
  4465                           ;FastTransfer.c: 186: holder[0] = 255;
  4466  0002EC  0100               	movlb	0	; () banked
  4467  0002EE  69E4               	setf	receiveData@holder_1495& (0+255),b
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;FastTransfer.c: 187: holder[1] = 2;
  4471  0002F0  0E02               	movlw	2
  4472  0002F2  0100               	movlb	0	; () banked
  4473  0002F4  6FE5               	movwf	(receiveData@holder_1495+1)& (0+255),b
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  4477  0002F6  0EFF               	movlw	255
  4478  0002F8  0100               	movlb	0	; () banked
  4479  0002FA  6FD9               	movwf	??_receiveData& (0+255),b
  4480  0002FC  0EFF               	movlw	255
  4481  0002FE  0100               	movlb	0	; () banked
  4482  000300  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  4483  000302  503F               	movf	_rx_array_inx,w,c
  4484  000304  0100               	movlb	0	; () banked
  4485  000306  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  4486  000308  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  4487  00030A  0100               	movlb	0	; () banked
  4488  00030C  51D9               	movf	??_receiveData& (0+255),w,b
  4489  00030E  0100               	movlb	0	; () banked
  4490  000310  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  4491  000312  0100               	movlb	0	; () banked
  4492  000314  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  4493  000316  0100               	movlb	0	; () banked
  4494  000318  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  4495  00031A  0E00               	movlw	low _rx_buffer
  4496  00031C  0100               	movlb	0	; () banked
  4497  00031E  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  4498  000320  6ED9               	movwf	fsr2l,c
  4499  000322  0E04               	movlw	high _rx_buffer
  4500  000324  0100               	movlb	0	; () banked
  4501  000326  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  4502  000328  6EDA               	movwf	fsr2h,c
  4503  00032A  50DF               	movf	indf2,w,c
  4504  00032C  0100               	movlb	0	; () banked
  4505  00032E  6FE6               	movwf	(receiveData@holder_1495+2)& (0+255),b
  4506                           
  4507                           ; BSR set to: 0
  4508                           ;FastTransfer.c: 198: serial_write(crcHolder);
  4509  000330  0EE4               	movlw	low receiveData@holder_1495
  4510  000332  6E1B               	movwf	CRC8@data,c
  4511  000334  0E00               	movlw	high receiveData@holder_1495
  4512  000336  6E1C               	movwf	CRC8@data+1,c
  4513  000338  0E03               	movlw	3
  4514  00033A  6E1D               	movwf	CRC8@len,c
  4515  00033C  ECDC  F007         	call	_CRC8	;wreg free
  4516  000340  0100               	movlb	0	; () banked
  4517  000342  6FE0               	movwf	receiveData@crcHolder_1496& (0+255),b
  4518  000344                     l3437:
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;FastTransfer.c: 199: }
  4522                           ;FastTransfer.c: 202: rx_len = 0;
  4523  000344  0E00               	movlw	0
  4524  000346  6E40               	movwf	_rx_len,c
  4525                           
  4526                           ; BSR set to: 0
  4527                           ;FastTransfer.c: 203: rx_array_inx = 0;
  4528  000348  0E00               	movlw	0
  4529  00034A  6E3F               	movwf	_rx_array_inx,c
  4530                           
  4531                           ; BSR set to: 0
  4532                           ;FastTransfer.c: 204: return 0;
  4533  00034C  0E00               	movlw	0
  4534                           
  4535                           ; BSR set to: 0
  4536  00034E  0012               	return	
  4537  000350                     l3445:
  4538                           
  4539                           ;FastTransfer.c: 205: }
  4540                           ;FastTransfer.c: 206: }
  4541                           ;FastTransfer.c: 207: }
  4542                           ;FastTransfer.c: 210: return 0;
  4543  000350  0E00               	movlw	0
  4544  000352  0012               	return	
  4545  000354                     __end_of_receiveData:
  4546                           	opt stack 0
  4547                           tblptru	equ	0xFF8
  4548                           tblptrh	equ	0xFF7
  4549                           tblptrl	equ	0xFF6
  4550                           tablat	equ	0xFF5
  4551                           prodh	equ	0xFF4
  4552                           prodl	equ	0xFF3
  4553                           intcon	equ	0xFF2
  4554                           indf0	equ	0xFEF
  4555                           postinc0	equ	0xFEE
  4556                           fsr0h	equ	0xFEA
  4557                           fsr0l	equ	0xFE9
  4558                           wreg	equ	0xFE8
  4559                           postdec1	equ	0xFE5
  4560                           fsr1l	equ	0xFE1
  4561                           indf2	equ	0xFDF
  4562                           postinc2	equ	0xFDE
  4563                           postdec2	equ	0xFDD
  4564                           plusw2	equ	0xFDB
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           
  4569 ;; *************** function _CRCcheck *****************
  4570 ;; Defined at:
  4571 ;;		line 373 in file "FastTransfer.c"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;  rt              2    7[BANK0 ] int 
  4576 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  4577 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  4578 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  4579 ;; Return value:  Size  Location     Type
  4580 ;;		None               void
  4581 ;; Registers used:
  4582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4583 ;; Tracked objects:
  4584 ;;		On entry : 0/0
  4585 ;;		On exit  : 0/0
  4586 ;;		Unchanged: 0/0
  4587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4588 ;;      Params:         0       0       0       0       0       0       0
  4589 ;;      Locals:         0       7       0       0       0       0       0
  4590 ;;      Temps:          0       0       0       0       0       0       0
  4591 ;;      Totals:         0       7       0       0       0       0       0
  4592 ;;Total ram usage:        7 bytes
  4593 ;; Hardware stack levels used:    1
  4594 ;; Hardware stack levels required when called:    5
  4595 ;; This function calls:
  4596 ;;		_CRC8
  4597 ;;		_crcBufS_get
  4598 ;;		_crcBufS_status_put
  4599 ;; This function is called by:
  4600 ;;		_receiveData
  4601 ;; This function uses a non-reentrant model
  4602 ;;
  4603                           
  4604                           	psect	text24
  4605  000A16                     __ptext24:
  4606                           	opt stack 0
  4607  000A16                     _CRCcheck:
  4608                           	opt stack 23
  4609  000A16                     l512:
  4610  000A16  D7FF               	goto	l512
  4611  000A18                     l3253:
  4612                           
  4613                           ; BSR set to: 0
  4614  000A18  0100               	movlb	0	; () banked
  4615  000A1A  BFD8               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4616  000A1C  D008               	goto	l3257
  4617  000A1E  0100               	movlb	0	; () banked
  4618  000A20  51D8               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4619  000A22  E143               	bnz	l524
  4620  000A24  0E05               	movlw	5
  4621  000A26  0100               	movlb	0	; () banked
  4622  000A28  5DD7               	subwf	CRCcheck@rt& (0+255),w,b
  4623  000A2A  B0D8               	btfsc	status,0,c
  4624  000A2C  0012               	return	
  4625  000A2E                     l3257:
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4629  000A2E  0EBF               	movlw	low _crc_buffer
  4630  000A30  6E1B               	movwf	crcBufS_get@_this,c
  4631  000A32  0E00               	movlw	high _crc_buffer
  4632  000A34  6E1C               	movwf	crcBufS_get@_this+1,c
  4633  000A36  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4634  000A3A  0E00               	movlw	0
  4635  000A3C  6E1E               	movwf	crcBufS_get@space,c
  4636  000A3E  ECF1  F002         	call	_crcBufS_get	;wreg free
  4637  000A42  183D               	xorwf	_returnAddress,w,c
  4638  000A44  A4D8               	btfss	status,2,c
  4639  000A46  D02D               	goto	l3271
  4640                           
  4641                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4642  000A48  0EBF               	movlw	low _crc_buffer
  4643  000A4A  6E1B               	movwf	crcBufS_get@_this,c
  4644  000A4C  0E00               	movlw	high _crc_buffer
  4645  000A4E  6E1C               	movwf	crcBufS_get@_this+1,c
  4646  000A50  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4647  000A54  0E01               	movlw	1
  4648  000A56  6E1E               	movwf	crcBufS_get@space,c
  4649  000A58  ECF1  F002         	call	_crcBufS_get	;wreg free
  4650  000A5C  0100               	movlb	0	; () banked
  4651  000A5E  19D6               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4652  000A60  A4D8               	btfss	status,2,c
  4653  000A62  D01F               	goto	l3271
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4657  000A64  0100               	movlb	0	; () banked
  4658  000A66  05D5               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4659  000A68  A4D8               	btfss	status,2,c
  4660  000A6A  D00B               	goto	l3267
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4664  000A6C  0EBF               	movlw	low _crc_buffer
  4665  000A6E  6E1B               	movwf	crcBufS_status_put@_this,c
  4666  000A70  0E00               	movlw	high _crc_buffer
  4667  000A72  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4668  000A74  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4669  000A78  0E01               	movlw	1
  4670  000A7A  6E1E               	movwf	crcBufS_status_put@status,c
  4671  000A7C  EC4D  F004         	call	_crcBufS_status_put	;wreg free
  4672                           
  4673                           ;FastTransfer.c: 393: break;
  4674  000A80  0012               	return	
  4675  000A82                     l3267:
  4676  000A82  0E02               	movlw	2
  4677  000A84  0100               	movlb	0	; () banked
  4678  000A86  19D5               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4679  000A88  A4D8               	btfss	status,2,c
  4680  000A8A  D00B               	goto	l3271
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4684  000A8C  0EBF               	movlw	low _crc_buffer
  4685  000A8E  6E1B               	movwf	crcBufS_status_put@_this,c
  4686  000A90  0E00               	movlw	high _crc_buffer
  4687  000A92  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4688  000A94  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4689  000A98  0E02               	movlw	2
  4690  000A9A  6E1E               	movwf	crcBufS_status_put@status,c
  4691  000A9C  EC4D  F004         	call	_crcBufS_status_put	;wreg free
  4692                           
  4693                           ;FastTransfer.c: 396: break;
  4694  000AA0  0012               	return	
  4695  000AA2                     l3271:
  4696  000AA2  0100               	movlb	0	; () banked
  4697  000AA4  4BD7               	infsnz	CRCcheck@rt& (0+255),f,b
  4698  000AA6  2BD8               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4699  000AA8  D7B7               	goto	l3253
  4700  000AAA                     l524:
  4701  000AAA  0012               	return		;funcret
  4702  000AAC                     __end_of_CRCcheck:
  4703                           	opt stack 0
  4704                           tblptru	equ	0xFF8
  4705                           tblptrh	equ	0xFF7
  4706                           tblptrl	equ	0xFF6
  4707                           tablat	equ	0xFF5
  4708                           prodh	equ	0xFF4
  4709                           prodl	equ	0xFF3
  4710                           intcon	equ	0xFF2
  4711                           indf0	equ	0xFEF
  4712                           postinc0	equ	0xFEE
  4713                           fsr0h	equ	0xFEA
  4714                           fsr0l	equ	0xFE9
  4715                           wreg	equ	0xFE8
  4716                           postdec1	equ	0xFE5
  4717                           fsr1l	equ	0xFE1
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           plusw2	equ	0xFDB
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _crcBufS_status_put *****************
  4727 ;; Defined at:
  4728 ;;		line 336 in file "FastTransfer.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4731 ;;		 -> crc_buffer(17), 
  4732 ;;  time            1   28[COMRAM] unsigned char 
  4733 ;;  status          1   29[COMRAM] unsigned char 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  wantedTime      2   34[COMRAM] int 
  4736 ;; Return value:  Size  Location     Type
  4737 ;;		None               void
  4738 ;; Registers used:
  4739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4740 ;; Tracked objects:
  4741 ;;		On entry : 0/0
  4742 ;;		On exit  : 0/0
  4743 ;;		Unchanged: 0/0
  4744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4745 ;;      Params:         4       0       0       0       0       0       0
  4746 ;;      Locals:         2       0       0       0       0       0       0
  4747 ;;      Temps:          4       0       0       0       0       0       0
  4748 ;;      Totals:        10       0       0       0       0       0       0
  4749 ;;Total ram usage:       10 bytes
  4750 ;; Hardware stack levels used:    1
  4751 ;; Hardware stack levels required when called:    4
  4752 ;; This function calls:
  4753 ;;		Nothing
  4754 ;; This function is called by:
  4755 ;;		_CRCcheck
  4756 ;; This function uses a non-reentrant model
  4757 ;;
  4758                           
  4759                           	psect	text25
  4760  00089A                     __ptext25:
  4761                           	opt stack 0
  4762  00089A                     _crcBufS_status_put:
  4763                           	opt stack 23
  4764                           
  4765                           ;FastTransfer.c: 337: if (time >= 5) {
  4766                           
  4767                           ;incstack = 0
  4768  00089A  0E04               	movlw	4
  4769  00089C  641D               	cpfsgt	crcBufS_status_put@time,c
  4770  00089E  D002               	goto	l3201
  4771                           
  4772                           ;FastTransfer.c: 338: time = 5 - 1;
  4773  0008A0  0E04               	movlw	4
  4774  0008A2  6E1D               	movwf	crcBufS_status_put@time,c
  4775  0008A4                     l3201:
  4776                           
  4777                           ;FastTransfer.c: 339: }
  4778                           ;FastTransfer.c: 340: time = time + 1;
  4779  0008A4  281D               	incf	crcBufS_status_put@time,w,c
  4780  0008A6  6E1D               	movwf	crcBufS_status_put@time,c
  4781                           
  4782                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4783  0008A8  501D               	movf	crcBufS_status_put@time,w,c
  4784  0008AA  0D03               	mullw	3
  4785  0008AC  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4786  0008B0  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4787                           
  4788                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4789  0008B4  EE20 F00F          	lfsr	2,15
  4790  0008B8  501B               	movf	crcBufS_status_put@_this,w,c
  4791  0008BA  26D9               	addwf	fsr2l,f,c
  4792  0008BC  501C               	movf	crcBufS_status_put@_this+1,w,c
  4793  0008BE  22DA               	addwfc	fsr2h,f,c
  4794  0008C0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4795  0008C2  5CDE               	subwf	postinc2,w,c
  4796  0008C4  50DE               	movf	postinc2,w,c
  4797  0008C6  0A80               	xorlw	128
  4798  0008C8  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4799  0008CA  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4800  0008CC  0A80               	xorlw	128
  4801  0008CE  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4802  0008D0  B0D8               	btfsc	status,0,c
  4803  0008D2  D02B               	goto	l3209
  4804                           
  4805                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4806  0008D4  EE20 F00F          	lfsr	2,15
  4807  0008D8  501B               	movf	crcBufS_status_put@_this,w,c
  4808  0008DA  26D9               	addwf	fsr2l,f,c
  4809  0008DC  501C               	movf	crcBufS_status_put@_this+1,w,c
  4810  0008DE  22DA               	addwfc	fsr2h,f,c
  4811  0008E0  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4812  0008E4  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4813  0008E8  1E1F               	comf	??_crcBufS_status_put,f,c
  4814  0008EA  1E20               	comf	??_crcBufS_status_put+1,f,c
  4815  0008EC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4816  0008EE  2A20               	incf	??_crcBufS_status_put+1,f,c
  4817  0008F0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4818  0008F2  261F               	addwf	??_crcBufS_status_put,f,c
  4819  0008F4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4820  0008F6  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4821  0008F8  1E1F               	comf	??_crcBufS_status_put,f,c
  4822  0008FA  1E20               	comf	??_crcBufS_status_put+1,f,c
  4823  0008FC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4824  0008FE  2A20               	incf	??_crcBufS_status_put+1,f,c
  4825  000900  0E0F               	movlw	15
  4826  000902  241F               	addwf	??_crcBufS_status_put,w,c
  4827  000904  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4828  000906  0E00               	movlw	0
  4829  000908  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4830  00090A  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4831                           
  4832                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4833  00090C  0E02               	movlw	2
  4834  00090E  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4835  000910  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4836  000912  0E00               	movlw	0
  4837  000914  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4838  000916  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4839  000918  501F               	movf	??_crcBufS_status_put,w,c
  4840  00091A  241B               	addwf	crcBufS_status_put@_this,w,c
  4841  00091C  6ED9               	movwf	fsr2l,c
  4842  00091E  5020               	movf	??_crcBufS_status_put+1,w,c
  4843  000920  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4844  000922  6EDA               	movwf	fsr2h,c
  4845  000924  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4846                           
  4847                           ;FastTransfer.c: 345: } else {
  4848  000928  0012               	return	
  4849  00092A                     l3209:
  4850                           
  4851                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4852  00092A  EE20 F00F          	lfsr	2,15
  4853  00092E  501B               	movf	crcBufS_status_put@_this,w,c
  4854  000930  26D9               	addwf	fsr2l,f,c
  4855  000932  501C               	movf	crcBufS_status_put@_this+1,w,c
  4856  000934  22DA               	addwfc	fsr2h,f,c
  4857  000936  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4858  00093A  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4859  00093E  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4860  000942  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4861  000946  1E21               	comf	??_crcBufS_status_put+2,f,c
  4862  000948  1E22               	comf	??_crcBufS_status_put+3,f,c
  4863  00094A  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4864  00094C  2A22               	incf	??_crcBufS_status_put+3,f,c
  4865  00094E  501F               	movf	??_crcBufS_status_put,w,c
  4866  000950  2621               	addwf	??_crcBufS_status_put+2,f,c
  4867  000952  5020               	movf	??_crcBufS_status_put+1,w,c
  4868  000954  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4869  000956  0E02               	movlw	2
  4870  000958  2621               	addwf	??_crcBufS_status_put+2,f,c
  4871  00095A  0E00               	movlw	0
  4872  00095C  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4873  00095E  5021               	movf	??_crcBufS_status_put+2,w,c
  4874  000960  241B               	addwf	crcBufS_status_put@_this,w,c
  4875  000962  6ED9               	movwf	fsr2l,c
  4876  000964  5022               	movf	??_crcBufS_status_put+3,w,c
  4877  000966  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4878  000968  6EDA               	movwf	fsr2h,c
  4879  00096A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4880  00096E  0012               	return	
  4881  000970                     __end_of_crcBufS_status_put:
  4882                           	opt stack 0
  4883                           tblptru	equ	0xFF8
  4884                           tblptrh	equ	0xFF7
  4885                           tblptrl	equ	0xFF6
  4886                           tablat	equ	0xFF5
  4887                           prodh	equ	0xFF4
  4888                           prodl	equ	0xFF3
  4889                           intcon	equ	0xFF2
  4890                           indf0	equ	0xFEF
  4891                           postinc0	equ	0xFEE
  4892                           fsr0h	equ	0xFEA
  4893                           fsr0l	equ	0xFE9
  4894                           wreg	equ	0xFE8
  4895                           postdec1	equ	0xFE5
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           plusw2	equ	0xFDB
  4901                           fsr2h	equ	0xFDA
  4902                           fsr2l	equ	0xFD9
  4903                           status	equ	0xFD8
  4904                           
  4905 ;; *************** function _crcBufS_get *****************
  4906 ;; Defined at:
  4907 ;;		line 353 in file "FastTransfer.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4910 ;;		 -> crc_buffer(17), 
  4911 ;;  time            1   28[COMRAM] unsigned char 
  4912 ;;  space           1   29[COMRAM] unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  wantedTime      2    0[BANK0 ] int 
  4915 ;; Return value:  Size  Location     Type
  4916 ;;                  1    wreg      unsigned char 
  4917 ;; Registers used:
  4918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4919 ;; Tracked objects:
  4920 ;;		On entry : 0/0
  4921 ;;		On exit  : 0/0
  4922 ;;		Unchanged: 0/0
  4923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4924 ;;      Params:         4       0       0       0       0       0       0
  4925 ;;      Locals:         0       2       0       0       0       0       0
  4926 ;;      Temps:          6       0       0       0       0       0       0
  4927 ;;      Totals:        10       2       0       0       0       0       0
  4928 ;;Total ram usage:       12 bytes
  4929 ;; Hardware stack levels used:    1
  4930 ;; Hardware stack levels required when called:    4
  4931 ;; This function calls:
  4932 ;;		Nothing
  4933 ;; This function is called by:
  4934 ;;		_CRCcheck
  4935 ;;		_AKNAK
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text26
  4940  0005E2                     __ptext26:
  4941                           	opt stack 0
  4942  0005E2                     _crcBufS_get:
  4943                           	opt stack 23
  4944                           
  4945                           ;FastTransfer.c: 354: if (time >= 5) {
  4946                           
  4947                           ;incstack = 0
  4948  0005E2  0E04               	movlw	4
  4949  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  4950  0005E6  D002               	goto	l3177
  4951                           
  4952                           ;FastTransfer.c: 355: time = 5 - 1;
  4953  0005E8  0E04               	movlw	4
  4954  0005EA  6E1D               	movwf	crcBufS_get@time,c
  4955  0005EC                     l3177:
  4956                           
  4957                           ;FastTransfer.c: 356: }
  4958                           ;FastTransfer.c: 357: if (space >= 3) {
  4959  0005EC  0E02               	movlw	2
  4960  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  4961  0005F0  D002               	goto	l3181
  4962                           
  4963                           ;FastTransfer.c: 358: space = 3 - 1;
  4964  0005F2  0E02               	movlw	2
  4965  0005F4  6E1E               	movwf	crcBufS_get@space,c
  4966  0005F6                     l3181:
  4967                           
  4968                           ;FastTransfer.c: 359: }
  4969                           ;FastTransfer.c: 360: time = time + 1;
  4970  0005F6  281D               	incf	crcBufS_get@time,w,c
  4971  0005F8  6E1D               	movwf	crcBufS_get@time,c
  4972                           
  4973                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4974  0005FA  501D               	movf	crcBufS_get@time,w,c
  4975  0005FC  0D03               	mullw	3
  4976  0005FE  CFF3 F0D0          	movff	prodl,crcBufS_get@wantedTime
  4977  000602  CFF4 F0D1          	movff	prodh,crcBufS_get@wantedTime+1
  4978                           
  4979                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4980  000606  EE20 F00F          	lfsr	2,15
  4981  00060A  501B               	movf	crcBufS_get@_this,w,c
  4982  00060C  26D9               	addwf	fsr2l,f,c
  4983  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  4984  000610  22DA               	addwfc	fsr2h,f,c
  4985  000612  0100               	movlb	0	; () banked
  4986  000614  51D0               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4987  000616  5CDE               	subwf	postinc2,w,c
  4988  000618  50DE               	movf	postinc2,w,c
  4989  00061A  0A80               	xorlw	128
  4990  00061C  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4991  00061E  0100               	movlb	0	; () banked
  4992  000620  51D1               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4993  000622  0A80               	xorlw	128
  4994  000624  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4995  000626  B0D8               	btfsc	status,0,c
  4996  000628  D030               	goto	l3193
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  5000  00062A  EE20 F00F          	lfsr	2,15
  5001  00062E  501B               	movf	crcBufS_get@_this,w,c
  5002  000630  26D9               	addwf	fsr2l,f,c
  5003  000632  501C               	movf	crcBufS_get@_this+1,w,c
  5004  000634  22DA               	addwfc	fsr2h,f,c
  5005  000636  CFDE F01F          	movff	postinc2,??_crcBufS_get
  5006  00063A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  5007  00063E  1E1F               	comf	??_crcBufS_get,f,c
  5008  000640  1E20               	comf	??_crcBufS_get+1,f,c
  5009  000642  4A1F               	infsnz	??_crcBufS_get,f,c
  5010  000644  2A20               	incf	??_crcBufS_get+1,f,c
  5011  000646  0100               	movlb	0	; () banked
  5012  000648  51D0               	movf	crcBufS_get@wantedTime& (0+255),w,b
  5013  00064A  261F               	addwf	??_crcBufS_get,f,c
  5014  00064C  0100               	movlb	0	; () banked
  5015  00064E  51D1               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  5016  000650  2220               	addwfc	??_crcBufS_get+1,f,c
  5017  000652  1E1F               	comf	??_crcBufS_get,f,c
  5018  000654  1E20               	comf	??_crcBufS_get+1,f,c
  5019  000656  4A1F               	infsnz	??_crcBufS_get,f,c
  5020  000658  2A20               	incf	??_crcBufS_get+1,f,c
  5021  00065A  0E0F               	movlw	15
  5022  00065C  241F               	addwf	??_crcBufS_get,w,c
  5023  00065E  0100               	movlb	0	; () banked
  5024  000660  6FD0               	movwf	crcBufS_get@wantedTime& (0+255),b
  5025  000662  0E00               	movlw	0
  5026  000664  2020               	addwfc	??_crcBufS_get+1,w,c
  5027  000666  0100               	movlb	0	; () banked
  5028  000668  6FD1               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  5029                           
  5030                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  5031  00066A  501E               	movf	crcBufS_get@space,w,c
  5032  00066C  0100               	movlb	0	; () banked
  5033  00066E  25D0               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  5034  000670  6E1F               	movwf	??_crcBufS_get& (0+255),c
  5035  000672  0E00               	movlw	0
  5036  000674  0100               	movlb	0	; () banked
  5037  000676  21D1               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  5038  000678  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  5039  00067A  501F               	movf	??_crcBufS_get,w,c
  5040  00067C  241B               	addwf	crcBufS_get@_this,w,c
  5041  00067E  6ED9               	movwf	fsr2l,c
  5042  000680  5020               	movf	??_crcBufS_get+1,w,c
  5043  000682  201C               	addwfc	crcBufS_get@_this+1,w,c
  5044  000684  6EDA               	movwf	fsr2h,c
  5045  000686  50DF               	movf	indf2,w,c
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;FastTransfer.c: 365: } else {
  5049                           
  5050                           ; BSR set to: 0
  5051  000688  0012               	return	
  5052  00068A                     l3193:
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  5056  00068A  EE20 F00F          	lfsr	2,15
  5057  00068E  501B               	movf	crcBufS_get@_this,w,c
  5058  000690  26D9               	addwf	fsr2l,f,c
  5059  000692  501C               	movf	crcBufS_get@_this+1,w,c
  5060  000694  22DA               	addwfc	fsr2h,f,c
  5061  000696  CFDE F01F          	movff	postinc2,??_crcBufS_get
  5062  00069A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  5063  00069E  C0D0  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  5064  0006A2  C0D1  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  5065  0006A6  1E21               	comf	??_crcBufS_get+2,f,c
  5066  0006A8  1E22               	comf	??_crcBufS_get+3,f,c
  5067  0006AA  4A21               	infsnz	??_crcBufS_get+2,f,c
  5068  0006AC  2A22               	incf	??_crcBufS_get+3,f,c
  5069  0006AE  501E               	movf	crcBufS_get@space,w,c
  5070  0006B0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  5071  0006B2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  5072  0006B4  5021               	movf	??_crcBufS_get+2,w,c
  5073  0006B6  2623               	addwf	??_crcBufS_get+4,f,c
  5074  0006B8  5022               	movf	??_crcBufS_get+3,w,c
  5075  0006BA  2224               	addwfc	??_crcBufS_get+5,f,c
  5076  0006BC  501F               	movf	??_crcBufS_get,w,c
  5077  0006BE  2623               	addwf	??_crcBufS_get+4,f,c
  5078  0006C0  5020               	movf	??_crcBufS_get+1,w,c
  5079  0006C2  2224               	addwfc	??_crcBufS_get+5,f,c
  5080  0006C4  5023               	movf	??_crcBufS_get+4,w,c
  5081  0006C6  241B               	addwf	crcBufS_get@_this,w,c
  5082  0006C8  6ED9               	movwf	fsr2l,c
  5083  0006CA  5024               	movf	??_crcBufS_get+5,w,c
  5084  0006CC  201C               	addwfc	crcBufS_get@_this+1,w,c
  5085  0006CE  6EDA               	movwf	fsr2h,c
  5086  0006D0  50DF               	movf	indf2,w,c
  5087                           
  5088                           ; BSR set to: 0
  5089  0006D2  0012               	return	
  5090  0006D4                     __end_of_crcBufS_get:
  5091                           	opt stack 0
  5092                           tblptru	equ	0xFF8
  5093                           tblptrh	equ	0xFF7
  5094                           tblptrl	equ	0xFF6
  5095                           tablat	equ	0xFF5
  5096                           prodh	equ	0xFF4
  5097                           prodl	equ	0xFF3
  5098                           intcon	equ	0xFF2
  5099                           indf0	equ	0xFEF
  5100                           postinc0	equ	0xFEE
  5101                           fsr0h	equ	0xFEA
  5102                           fsr0l	equ	0xFE9
  5103                           wreg	equ	0xFE8
  5104                           postdec1	equ	0xFE5
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           plusw2	equ	0xFDB
  5110                           fsr2h	equ	0xFDA
  5111                           fsr2l	equ	0xFD9
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _CRC8 *****************
  5115 ;; Defined at:
  5116 ;;		line 34 in file "FastTransfer.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5119 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1495(3), receiveData@holder(3), rx_buffer(200), 
  5120 ;;		 -> ring_buffer(206), NULL(0), 
  5121 ;;  len             1   28[COMRAM] unsigned char 
  5122 ;; Auto vars:     Size  Location     Type
  5123 ;;  sum             1   29[COMRAM] unsigned char 
  5124 ;;  tempI           1   31[COMRAM] unsigned char 
  5125 ;;  extract         1   30[COMRAM] unsigned char 
  5126 ;;  crc             1   32[COMRAM] unsigned char 
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      unsigned char 
  5129 ;; Registers used:
  5130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5136 ;;      Params:         3       0       0       0       0       0       0
  5137 ;;      Locals:         4       0       0       0       0       0       0
  5138 ;;      Temps:          0       0       0       0       0       0       0
  5139 ;;      Totals:         7       0       0       0       0       0       0
  5140 ;;Total ram usage:        7 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    4
  5143 ;; This function calls:
  5144 ;;		Nothing
  5145 ;; This function is called by:
  5146 ;;		_sendData
  5147 ;;		_receiveData
  5148 ;;		_CRCcheck
  5149 ;; This function uses a non-reentrant model
  5150 ;;
  5151                           
  5152                           	psect	text27
  5153  000FB8                     __ptext27:
  5154                           	opt stack 0
  5155  000FB8                     _CRC8:
  5156                           	opt stack 23
  5157                           
  5158                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;incstack = 0
  5162  000FB8  0E00               	movlw	0
  5163  000FBA  6E21               	movwf	CRC8@crc,c
  5164                           
  5165                           ;FastTransfer.c: 36: while (len--) {
  5166  000FBC  D01C               	goto	l3139
  5167  000FBE                     l3123:
  5168                           
  5169                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5170  000FBE  C01B  FFD9         	movff	CRC8@data,fsr2l
  5171  000FC2  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5172  000FC6  50DF               	movf	indf2,w,c
  5173  000FC8  6E1F               	movwf	CRC8@extract,c
  5174  000FCA  4A1B               	infsnz	CRC8@data,f,c
  5175  000FCC  2A1C               	incf	CRC8@data+1,f,c
  5176                           
  5177                           ;FastTransfer.c: 38: unsigned char tempI;
  5178                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5179  000FCE  0E08               	movlw	8
  5180  000FD0  6E20               	movwf	CRC8@tempI,c
  5181  000FD2  D00E               	goto	l3137
  5182  000FD4                     l3129:
  5183                           
  5184                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5185  000FD4  5021               	movf	CRC8@crc,w,c
  5186  000FD6  181F               	xorwf	CRC8@extract,w,c
  5187  000FD8  0B01               	andlw	1
  5188  000FDA  6E1E               	movwf	CRC8@sum,c
  5189                           
  5190                           ;FastTransfer.c: 41: crc >>= 1;
  5191  000FDC  90D8               	bcf	status,0,c
  5192  000FDE  3221               	rrcf	CRC8@crc,f,c
  5193                           
  5194                           ;FastTransfer.c: 42: if (sum) {
  5195  000FE0  501E               	movf	CRC8@sum,w,c
  5196  000FE2  B4D8               	btfsc	status,2,c
  5197  000FE4  D002               	goto	l410
  5198                           
  5199                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5200  000FE6  0E8C               	movlw	140
  5201  000FE8  1A21               	xorwf	CRC8@crc,f,c
  5202  000FEA                     l410:
  5203                           
  5204                           ;FastTransfer.c: 44: }
  5205                           ;FastTransfer.c: 45: extract >>= 1;
  5206  000FEA  90D8               	bcf	status,0,c
  5207  000FEC  321F               	rrcf	CRC8@extract,f,c
  5208  000FEE  0620               	decf	CRC8@tempI,f,c
  5209  000FF0                     l3137:
  5210  000FF0  5020               	movf	CRC8@tempI,w,c
  5211  000FF2  A4D8               	btfss	status,2,c
  5212  000FF4  D7EF               	goto	l3129
  5213  000FF6                     l3139:
  5214  000FF6  061D               	decf	CRC8@len,f,c
  5215  000FF8  281D               	incf	CRC8@len,w,c
  5216  000FFA  A4D8               	btfss	status,2,c
  5217  000FFC  D7E0               	goto	l3123
  5218                           
  5219                           ;FastTransfer.c: 46: }
  5220                           ;FastTransfer.c: 47: }
  5221                           ;FastTransfer.c: 48: return crc;
  5222  000FFE  5021               	movf	CRC8@crc,w,c
  5223  001000  0012               	return	
  5224  001002                     __end_of_CRC8:
  5225                           	opt stack 0
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           prodh	equ	0xFF4
  5231                           prodl	equ	0xFF3
  5232                           intcon	equ	0xFF2
  5233                           indf0	equ	0xFEF
  5234                           postinc0	equ	0xFEE
  5235                           fsr0h	equ	0xFEA
  5236                           fsr0l	equ	0xFE9
  5237                           wreg	equ	0xFE8
  5238                           postdec1	equ	0xFE5
  5239                           fsr1l	equ	0xFE1
  5240                           indf2	equ	0xFDF
  5241                           postinc2	equ	0xFDE
  5242                           postdec2	equ	0xFDD
  5243                           plusw2	equ	0xFDB
  5244                           fsr2h	equ	0xFDA
  5245                           fsr2l	equ	0xFD9
  5246                           status	equ	0xFD8
  5247                           
  5248 ;; *************** function _ToSend *****************
  5249 ;; Defined at:
  5250 ;;		line 216 in file "FastTransfer.c"
  5251 ;; Parameters:    Size  Location     Type
  5252 ;;  where           1    wreg     unsigned char 
  5253 ;;  what            2    2[BANK0 ] unsigned int 
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;  where           1    4[BANK0 ] unsigned char 
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5265 ;;      Params:         0       2       0       0       0       0       0
  5266 ;;      Locals:         0       1       0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0
  5268 ;;      Totals:         0       3       0       0       0       0       0
  5269 ;;Total ram usage:        3 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    6
  5272 ;; This function calls:
  5273 ;;		_FastTransfer_buffer_put
  5274 ;; This function is called by:
  5275 ;;		_respondChargerAsECU
  5276 ;;		_SetBMM
  5277 ;; This function uses a non-reentrant model
  5278 ;;
  5279                           
  5280                           	psect	text28
  5281  00136A                     __ptext28:
  5282                           	opt stack 0
  5283  00136A                     _ToSend:
  5284                           	opt stack 22
  5285                           
  5286                           ;incstack = 0
  5287                           ;ToSend@where stored from wreg
  5288  00136A  0100               	movlb	0	; () banked
  5289  00136C  6FD4               	movwf	ToSend@where& (0+255),b
  5290                           
  5291                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5292  00136E  0E00               	movlw	low _ring_buffer
  5293  001370  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5294  001372  0E01               	movlw	high _ring_buffer
  5295  001374  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5296  001376  C0D4  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5297  00137A  C0D2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5298  00137E  C0D3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5299  001382  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  5300  001386  0012               	return		;funcret
  5301  001388                     __end_of_ToSend:
  5302                           	opt stack 0
  5303                           tblptru	equ	0xFF8
  5304                           tblptrh	equ	0xFF7
  5305                           tblptrl	equ	0xFF6
  5306                           tablat	equ	0xFF5
  5307                           prodh	equ	0xFF4
  5308                           prodl	equ	0xFF3
  5309                           intcon	equ	0xFF2
  5310                           indf0	equ	0xFEF
  5311                           postinc0	equ	0xFEE
  5312                           fsr0h	equ	0xFEA
  5313                           fsr0l	equ	0xFE9
  5314                           wreg	equ	0xFE8
  5315                           postdec1	equ	0xFE5
  5316                           fsr1l	equ	0xFE1
  5317                           indf2	equ	0xFDF
  5318                           postinc2	equ	0xFDE
  5319                           postdec2	equ	0xFDD
  5320                           plusw2	equ	0xFDB
  5321                           fsr2h	equ	0xFDA
  5322                           fsr2l	equ	0xFD9
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _FastTransfer_buffer_put *****************
  5326 ;; Defined at:
  5327 ;;		line 223 in file "FastTransfer.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5330 ;;		 -> ring_buffer(206), 
  5331 ;;  towhere         1   34[COMRAM] unsigned char 
  5332 ;;  towhat          2   35[COMRAM] unsigned int 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;		None               void
  5337 ;; Registers used:
  5338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5344 ;;      Params:         5       0       0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0
  5346 ;;      Temps:          0       2       0       0       0       0       0
  5347 ;;      Totals:         5       2       0       0       0       0       0
  5348 ;;Total ram usage:        7 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    5
  5351 ;; This function calls:
  5352 ;;		_FastTransfer_buffer_modulo_inc
  5353 ;; This function is called by:
  5354 ;;		_ToSend
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text29
  5359  000354                     __ptext29:
  5360                           	opt stack 0
  5361  000354                     _FastTransfer_buffer_put:
  5362                           	opt stack 22
  5363                           
  5364                           ;FastTransfer.c: 225: group.integer = towhat;
  5365                           
  5366                           ;incstack = 0
  5367  000354  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  5368  000358  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5369                           
  5370                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5371  00035C  EE20 F0CC          	lfsr	2,204
  5372  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5373  000362  26D9               	addwf	fsr2l,f,c
  5374  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5375  000366  22DA               	addwfc	fsr2h,f,c
  5376  000368  0E01               	movlw	1
  5377  00036A  BEDB               	btfsc	plusw2,7,c
  5378  00036C  D007               	goto	l3159
  5379  00036E  0E01               	movlw	1
  5380  000370  50DB               	movf	plusw2,w,c
  5381  000372  E103               	bnz	u2051
  5382  000374  0EC5               	movlw	197
  5383  000376  5CDE               	subwf	postinc2,w,c
  5384  000378  B0D8               	btfsc	status,0,c
  5385  00037A                     u2051:
  5386  00037A  0012               	return	
  5387  00037C                     l3159:
  5388                           
  5389                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5390  00037C  EE20 F0C8          	lfsr	2,200
  5391  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5392  000382  26D9               	addwf	fsr2l,f,c
  5393  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5394  000386  22DA               	addwfc	fsr2h,f,c
  5395  000388  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  5396  00038C  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  5397  000390  0100               	movlb	0	; () banked
  5398  000392  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5399  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5400  000396  6ED9               	movwf	fsr2l,c
  5401  000398  0100               	movlb	0	; () banked
  5402  00039A  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5403  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5404  00039E  6EDA               	movwf	fsr2h,c
  5405  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5409  0003A4  EE20 F0C8          	lfsr	2,200
  5410  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5411  0003AA  26D9               	addwf	fsr2l,f,c
  5412  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5413  0003AE  22DA               	addwfc	fsr2h,f,c
  5414  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5415  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5416  0003B8  0E00               	movlw	0
  5417  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5418  0003BC  0EC8               	movlw	200
  5419  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5420  0003C0  EC2E  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5421  0003C4  EE20 F0C8          	lfsr	2,200
  5422  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5423  0003CA  26D9               	addwf	fsr2l,f,c
  5424  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5425  0003CE  22DA               	addwfc	fsr2h,f,c
  5426  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5427  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5428                           
  5429                           ;FastTransfer.c: 230: ++_this->count;
  5430  0003D8  EE20 F0CC          	lfsr	2,204
  5431  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5432  0003DE  26D9               	addwf	fsr2l,f,c
  5433  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5434  0003E2  22DA               	addwfc	fsr2h,f,c
  5435  0003E4  2ADE               	incf	postinc2,f,c
  5436  0003E6  0E00               	movlw	0
  5437  0003E8  22DD               	addwfc	postdec2,f,c
  5438                           
  5439                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5440  0003EA  EE20 F0C8          	lfsr	2,200
  5441  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5442  0003F0  26D9               	addwf	fsr2l,f,c
  5443  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5444  0003F4  22DA               	addwfc	fsr2h,f,c
  5445  0003F6  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  5446  0003FA  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  5447  0003FE  0100               	movlb	0	; () banked
  5448  000400  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5449  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5450  000404  6ED9               	movwf	fsr2l,c
  5451  000406  0100               	movlb	0	; () banked
  5452  000408  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5453  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5454  00040C  6EDA               	movwf	fsr2h,c
  5455  00040E  C02C  FFDF         	movff	_group,indf2
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5459  000412  EE20 F0C8          	lfsr	2,200
  5460  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5461  000418  26D9               	addwf	fsr2l,f,c
  5462  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5463  00041C  22DA               	addwfc	fsr2h,f,c
  5464  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5465  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5466  000426  0E00               	movlw	0
  5467  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5468  00042A  0EC8               	movlw	200
  5469  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5470  00042E  EC2E  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5471  000432  EE20 F0C8          	lfsr	2,200
  5472  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5473  000438  26D9               	addwf	fsr2l,f,c
  5474  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5475  00043C  22DA               	addwfc	fsr2h,f,c
  5476  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5477  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5478                           
  5479                           ;FastTransfer.c: 233: ++_this->count;
  5480  000446  EE20 F0CC          	lfsr	2,204
  5481  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5482  00044C  26D9               	addwf	fsr2l,f,c
  5483  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5484  000450  22DA               	addwfc	fsr2h,f,c
  5485  000452  2ADE               	incf	postinc2,f,c
  5486  000454  0E00               	movlw	0
  5487  000456  22DD               	addwfc	postdec2,f,c
  5488                           
  5489                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5490  000458  EE20 F0C8          	lfsr	2,200
  5491  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5492  00045E  26D9               	addwf	fsr2l,f,c
  5493  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5494  000462  22DA               	addwfc	fsr2h,f,c
  5495  000464  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  5496  000468  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  5497  00046C  0100               	movlb	0	; () banked
  5498  00046E  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5499  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5500  000472  6ED9               	movwf	fsr2l,c
  5501  000474  0100               	movlb	0	; () banked
  5502  000476  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5503  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5504  00047A  6EDA               	movwf	fsr2h,c
  5505  00047C  C02D  FFDF         	movff	_group+1,indf2
  5506                           
  5507                           ; BSR set to: 0
  5508                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5509  000480  EE20 F0C8          	lfsr	2,200
  5510  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5511  000486  26D9               	addwf	fsr2l,f,c
  5512  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5513  00048A  22DA               	addwfc	fsr2h,f,c
  5514  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5515  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5516  000494  0E00               	movlw	0
  5517  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5518  000498  0EC8               	movlw	200
  5519  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5520  00049C  EC2E  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5521  0004A0  EE20 F0C8          	lfsr	2,200
  5522  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5523  0004A6  26D9               	addwf	fsr2l,f,c
  5524  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5525  0004AA  22DA               	addwfc	fsr2h,f,c
  5526  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5527  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5528                           
  5529                           ;FastTransfer.c: 236: ++_this->count;
  5530  0004B4  EE20 F0CC          	lfsr	2,204
  5531  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5532  0004BA  26D9               	addwf	fsr2l,f,c
  5533  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5534  0004BE  22DA               	addwfc	fsr2h,f,c
  5535  0004C0  2ADE               	incf	postinc2,f,c
  5536  0004C2  0E00               	movlw	0
  5537  0004C4  22DD               	addwfc	postdec2,f,c
  5538  0004C6  0012               	return	
  5539  0004C8                     __end_of_FastTransfer_buffer_put:
  5540                           	opt stack 0
  5541                           tblptru	equ	0xFF8
  5542                           tblptrh	equ	0xFF7
  5543                           tblptrl	equ	0xFF6
  5544                           tablat	equ	0xFF5
  5545                           prodh	equ	0xFF4
  5546                           prodl	equ	0xFF3
  5547                           intcon	equ	0xFF2
  5548                           indf0	equ	0xFEF
  5549                           postinc0	equ	0xFEE
  5550                           fsr0h	equ	0xFEA
  5551                           fsr0l	equ	0xFE9
  5552                           wreg	equ	0xFE8
  5553                           postdec1	equ	0xFE5
  5554                           fsr1l	equ	0xFE1
  5555                           indf2	equ	0xFDF
  5556                           postinc2	equ	0xFDE
  5557                           postdec2	equ	0xFDD
  5558                           plusw2	equ	0xFDB
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5564 ;; Defined at:
  5565 ;;		line 273 in file "FastTransfer.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;  value           2   26[COMRAM] const unsigned int 
  5568 ;;  modulus         2   28[COMRAM] const unsigned int 
  5569 ;; Auto vars:     Size  Location     Type
  5570 ;;  my_value        2   30[COMRAM] unsigned int 
  5571 ;; Return value:  Size  Location     Type
  5572 ;;                  2   26[COMRAM] unsigned int 
  5573 ;; Registers used:
  5574 ;;		wreg, status,2, status,0
  5575 ;; Tracked objects:
  5576 ;;		On entry : 0/0
  5577 ;;		On exit  : 0/0
  5578 ;;		Unchanged: 0/0
  5579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5580 ;;      Params:         4       0       0       0       0       0       0
  5581 ;;      Locals:         2       0       0       0       0       0       0
  5582 ;;      Temps:          0       0       0       0       0       0       0
  5583 ;;      Totals:         6       0       0       0       0       0       0
  5584 ;;Total ram usage:        6 bytes
  5585 ;; Hardware stack levels used:    1
  5586 ;; Hardware stack levels required when called:    4
  5587 ;; This function calls:
  5588 ;;		Nothing
  5589 ;; This function is called by:
  5590 ;;		_FastTransfer_buffer_put
  5591 ;;		_FastTransfer_buffer_get
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           	psect	text30
  5596  00125C                     __ptext30:
  5597                           	opt stack 0
  5598  00125C                     _FastTransfer_buffer_modulo_inc:
  5599                           	opt stack 22
  5600                           
  5601                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5602                           
  5603                           ;incstack = 0
  5604  00125C  0E01               	movlw	1
  5605  00125E  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5606  001260  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5607  001262  0E00               	movlw	0
  5608  001264  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5609  001266  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5610                           
  5611                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5612  001268  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5613  00126A  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5614  00126C  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5615  00126E  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5616  001270  A0D8               	btfss	status,0,c
  5617  001272  D004               	goto	l3107
  5618                           
  5619                           ;FastTransfer.c: 276: my_value = 0;
  5620  001274  0E00               	movlw	0
  5621  001276  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5622  001278  0E00               	movlw	0
  5623  00127A  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5624  00127C                     l3107:
  5625                           
  5626                           ;FastTransfer.c: 277: }
  5627                           ;FastTransfer.c: 278: return (my_value);
  5628  00127C  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5629  001280  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5630  001284  0012               	return	
  5631  001286                     __end_of_FastTransfer_buffer_modulo_inc:
  5632                           	opt stack 0
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodh	equ	0xFF4
  5638                           prodl	equ	0xFF3
  5639                           intcon	equ	0xFF2
  5640                           indf0	equ	0xFEF
  5641                           postinc0	equ	0xFEE
  5642                           fsr0h	equ	0xFEA
  5643                           fsr0l	equ	0xFE9
  5644                           wreg	equ	0xFE8
  5645                           postdec1	equ	0xFE5
  5646                           fsr1l	equ	0xFE1
  5647                           indf2	equ	0xFDF
  5648                           postinc2	equ	0xFDE
  5649                           postdec2	equ	0xFDD
  5650                           plusw2	equ	0xFDB
  5651                           fsr2h	equ	0xFDA
  5652                           fsr2l	equ	0xFD9
  5653                           status	equ	0xFD8
  5654                           
  5655 ;; *************** function _SYSTEM_Initialize *****************
  5656 ;; Defined at:
  5657 ;;		line 112 in file "mcc_generated_files/mcc.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;		None
  5660 ;; Auto vars:     Size  Location     Type
  5661 ;;		None
  5662 ;; Return value:  Size  Location     Type
  5663 ;;		None               void
  5664 ;; Registers used:
  5665 ;;		wreg, status,2, status,0, cstack
  5666 ;; Tracked objects:
  5667 ;;		On entry : 0/0
  5668 ;;		On exit  : 0/0
  5669 ;;		Unchanged: 0/0
  5670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5671 ;;      Params:         0       0       0       0       0       0       0
  5672 ;;      Locals:         0       0       0       0       0       0       0
  5673 ;;      Temps:          0       0       0       0       0       0       0
  5674 ;;      Totals:         0       0       0       0       0       0       0
  5675 ;;Total ram usage:        0 bytes
  5676 ;; Hardware stack levels used:    1
  5677 ;; Hardware stack levels required when called:    6
  5678 ;; This function calls:
  5679 ;;		_EUSART2_Initialize
  5680 ;;		_INTERRUPT_Initialize
  5681 ;;		_OSCILLATOR_Initialize
  5682 ;;		_PIN_MANAGER_Initialize
  5683 ;;		_TMR0_Initialize
  5684 ;; This function is called by:
  5685 ;;		_main
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           	psect	text31
  5690  0013C0                     __ptext31:
  5691                           	opt stack 0
  5692  0013C0                     _SYSTEM_Initialize:
  5693                           	opt stack 24
  5694                           
  5695                           ;mcc.c: 113: OSCILLATOR_Initialize();
  5696                           
  5697                           ;incstack = 0
  5698  0013C0  EC07  F00A         	call	_OSCILLATOR_Initialize	;wreg free
  5699                           
  5700                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  5701  0013C4  EC8E  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  5702                           
  5703                           ;mcc.c: 115: INTERRUPT_Initialize();
  5704  0013C8  EC15  F00A         	call	_INTERRUPT_Initialize	;wreg free
  5705                           
  5706                           ;mcc.c: 117: EUSART2_Initialize();
  5707  0013CC  EC74  F008         	call	_EUSART2_Initialize	;wreg free
  5708                           
  5709                           ;mcc.c: 118: TMR0_Initialize();
  5710  0013D0  EC02  F009         	call	_TMR0_Initialize	;wreg free
  5711  0013D4  0012               	return		;funcret
  5712  0013D6                     __end_of_SYSTEM_Initialize:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           prodh	equ	0xFF4
  5719                           prodl	equ	0xFF3
  5720                           intcon	equ	0xFF2
  5721                           indf0	equ	0xFEF
  5722                           postinc0	equ	0xFEE
  5723                           fsr0h	equ	0xFEA
  5724                           fsr0l	equ	0xFE9
  5725                           wreg	equ	0xFE8
  5726                           postdec1	equ	0xFE5
  5727                           fsr1l	equ	0xFE1
  5728                           indf2	equ	0xFDF
  5729                           postinc2	equ	0xFDE
  5730                           postdec2	equ	0xFDD
  5731                           plusw2	equ	0xFDB
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _TMR0_Initialize *****************
  5737 ;; Defined at:
  5738 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;		None
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;		None
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  2  158[None  ] int 
  5745 ;; Registers used:
  5746 ;;		wreg, status,2, status,0, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5752 ;;      Params:         0       0       0       0       0       0       0
  5753 ;;      Locals:         0       0       0       0       0       0       0
  5754 ;;      Temps:          2       0       0       0       0       0       0
  5755 ;;      Totals:         2       0       0       0       0       0       0
  5756 ;;Total ram usage:        2 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:    5
  5759 ;; This function calls:
  5760 ;;		_TMR0_StartTimer
  5761 ;; This function is called by:
  5762 ;;		_SYSTEM_Initialize
  5763 ;; This function uses a non-reentrant model
  5764 ;;
  5765                           
  5766                           	psect	text32
  5767  001204                     __ptext32:
  5768                           	opt stack 0
  5769  001204                     _TMR0_Initialize:
  5770                           	opt stack 24
  5771                           
  5772                           ;tmr0.c: 74: T0CON = 0x98;
  5773                           
  5774                           ;incstack = 0
  5775  001204  0E98               	movlw	152
  5776  001206  6ED5               	movwf	4053,c	;volatile
  5777                           
  5778                           ;tmr0.c: 77: TMR0H = 0xF0;
  5779  001208  0EF0               	movlw	240
  5780  00120A  6ED7               	movwf	4055,c	;volatile
  5781                           
  5782                           ;tmr0.c: 80: TMR0L = 0x5F;
  5783  00120C  0E5F               	movlw	95
  5784  00120E  6ED6               	movwf	4054,c	;volatile
  5785                           
  5786                           ;tmr0.c: 83: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  5787  001210  50D6               	movf	4054,w,c	;volatile
  5788  001212  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  5789  001216  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  5790  001218  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  5791  00121C  6A1B               	clrf	??_TMR0_Initialize,c
  5792  00121E  101B               	iorwf	??_TMR0_Initialize,w,c
  5793  001220  6E41               	movwf	_timer0ReloadVal16bit,c
  5794  001222  501C               	movf	??_TMR0_Initialize+1,w,c
  5795  001224  6E42               	movwf	_timer0ReloadVal16bit+1,c
  5796                           
  5797                           ;tmr0.c: 86: INTCONbits.TMR0IF = 0;
  5798  001226  94F2               	bcf	intcon,2,c	;volatile
  5799                           
  5800                           ;tmr0.c: 89: INTCONbits.TMR0IE = 1;
  5801  001228  8AF2               	bsf	intcon,5,c	;volatile
  5802                           
  5803                           ;tmr0.c: 92: TMR0_StartTimer();
  5804  00122A  EC27  F00A         	call	_TMR0_StartTimer	;wreg free
  5805  00122E  0012               	return		;funcret
  5806  001230                     __end_of_TMR0_Initialize:
  5807                           	opt stack 0
  5808                           tblptru	equ	0xFF8
  5809                           tblptrh	equ	0xFF7
  5810                           tblptrl	equ	0xFF6
  5811                           tablat	equ	0xFF5
  5812                           prodh	equ	0xFF4
  5813                           prodl	equ	0xFF3
  5814                           intcon	equ	0xFF2
  5815                           indf0	equ	0xFEF
  5816                           postinc0	equ	0xFEE
  5817                           fsr0h	equ	0xFEA
  5818                           fsr0l	equ	0xFE9
  5819                           wreg	equ	0xFE8
  5820                           postdec1	equ	0xFE5
  5821                           fsr1l	equ	0xFE1
  5822                           indf2	equ	0xFDF
  5823                           postinc2	equ	0xFDE
  5824                           postdec2	equ	0xFDD
  5825                           plusw2	equ	0xFDB
  5826                           fsr2h	equ	0xFDA
  5827                           fsr2l	equ	0xFD9
  5828                           status	equ	0xFD8
  5829                           
  5830 ;; *************** function _TMR0_StartTimer *****************
  5831 ;; Defined at:
  5832 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  5833 ;; Parameters:    Size  Location     Type
  5834 ;;		None
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;		None
  5837 ;; Return value:  Size  Location     Type
  5838 ;;		None               void
  5839 ;; Registers used:
  5840 ;;		None
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5846 ;;      Params:         0       0       0       0       0       0       0
  5847 ;;      Locals:         0       0       0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0
  5849 ;;      Totals:         0       0       0       0       0       0       0
  5850 ;;Total ram usage:        0 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; Hardware stack levels required when called:    4
  5853 ;; This function calls:
  5854 ;;		Nothing
  5855 ;; This function is called by:
  5856 ;;		_TMR0_Initialize
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text33
  5861  00144E                     __ptext33:
  5862                           	opt stack 0
  5863  00144E                     _TMR0_StartTimer:
  5864                           	opt stack 24
  5865                           
  5866                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
  5867                           
  5868                           ;incstack = 0
  5869  00144E  8ED5               	bsf	4053,7,c	;volatile
  5870  001450  0012               	return		;funcret
  5871  001452                     __end_of_TMR0_StartTimer:
  5872                           	opt stack 0
  5873                           tblptru	equ	0xFF8
  5874                           tblptrh	equ	0xFF7
  5875                           tblptrl	equ	0xFF6
  5876                           tablat	equ	0xFF5
  5877                           prodh	equ	0xFF4
  5878                           prodl	equ	0xFF3
  5879                           intcon	equ	0xFF2
  5880                           indf0	equ	0xFEF
  5881                           postinc0	equ	0xFEE
  5882                           fsr0h	equ	0xFEA
  5883                           fsr0l	equ	0xFE9
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1l	equ	0xFE1
  5887                           indf2	equ	0xFDF
  5888                           postinc2	equ	0xFDE
  5889                           postdec2	equ	0xFDD
  5890                           plusw2	equ	0xFDB
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function _PIN_MANAGER_Initialize *****************
  5896 ;; Defined at:
  5897 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;		None
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;		None               void
  5904 ;; Registers used:
  5905 ;;		wreg, status,2
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5911 ;;      Params:         0       0       0       0       0       0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0
  5914 ;;      Totals:         0       0       0       0       0       0       0
  5915 ;;Total ram usage:        0 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    4
  5918 ;; This function calls:
  5919 ;;		Nothing
  5920 ;; This function is called by:
  5921 ;;		_SYSTEM_Initialize
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text34
  5926  000F1C                     __ptext34:
  5927                           	opt stack 0
  5928  000F1C                     _PIN_MANAGER_Initialize:
  5929                           	opt stack 25
  5930                           
  5931                           ;pin_manager.c: 51: LATB = 0x0;
  5932                           
  5933                           ;incstack = 0
  5934  000F1C  0E00               	movlw	0
  5935  000F1E  6E8A               	movwf	3978,c	;volatile
  5936                           
  5937                           ;pin_manager.c: 52: LATA = 0x0;
  5938  000F20  0E00               	movlw	0
  5939  000F22  6E89               	movwf	3977,c	;volatile
  5940                           
  5941                           ;pin_manager.c: 53: ANSELE = 0x7;
  5942  000F24  0E07               	movlw	7
  5943  000F26  010F               	movlb	15	; () banked
  5944  000F28  6F3C               	movwf	60,b	;volatile
  5945                           
  5946                           ;pin_manager.c: 54: LATE = 0x0;
  5947  000F2A  0E00               	movlw	0
  5948  000F2C  6E8D               	movwf	3981,c	;volatile
  5949                           
  5950                           ;pin_manager.c: 55: LATD = 0x0;
  5951  000F2E  0E00               	movlw	0
  5952  000F30  6E8C               	movwf	3980,c	;volatile
  5953                           
  5954                           ;pin_manager.c: 56: LATC = 0x0;
  5955  000F32  0E00               	movlw	0
  5956  000F34  6E8B               	movwf	3979,c	;volatile
  5957                           
  5958                           ;pin_manager.c: 57: ANSELA = 0x2F;
  5959  000F36  0E2F               	movlw	47
  5960  000F38  010F               	movlb	15	; () banked
  5961  000F3A  6F38               	movwf	56,b	;volatile
  5962                           
  5963                           ;pin_manager.c: 58: ANSELB = 0x3F;
  5964  000F3C  0E3F               	movlw	63
  5965  000F3E  010F               	movlb	15	; () banked
  5966  000F40  6F39               	movwf	57,b	;volatile
  5967                           
  5968                           ;pin_manager.c: 59: ANSELC = 0xEC;
  5969  000F42  0EEC               	movlw	236
  5970  000F44  010F               	movlb	15	; () banked
  5971  000F46  6F3A               	movwf	58,b	;volatile
  5972                           
  5973                           ;pin_manager.c: 60: ANSELD = 0x3F;
  5974  000F48  0E3F               	movlw	63
  5975  000F4A  010F               	movlb	15	; () banked
  5976  000F4C  6F3B               	movwf	59,b	;volatile
  5977                           
  5978                           ;pin_manager.c: 61: WPUB = 0xFC;
  5979  000F4E  0EFC               	movlw	252
  5980  000F50  6E61               	movwf	3937,c	;volatile
  5981                           
  5982                           ;pin_manager.c: 62: TRISD = 0xF2;
  5983  000F52  0EF2               	movlw	242
  5984  000F54  6E95               	movwf	3989,c	;volatile
  5985                           
  5986                           ;pin_manager.c: 63: TRISE = 0x7;
  5987  000F56  0E07               	movlw	7
  5988  000F58  6E96               	movwf	3990,c	;volatile
  5989                           
  5990                           ;pin_manager.c: 64: TRISB = 0xC4;
  5991  000F5A  0EC4               	movlw	196
  5992  000F5C  6E93               	movwf	3987,c	;volatile
  5993                           
  5994                           ;pin_manager.c: 65: TRISC = 0xD4;
  5995  000F5E  0ED4               	movlw	212
  5996  000F60  6E94               	movwf	3988,c	;volatile
  5997                           
  5998                           ;pin_manager.c: 66: TRISA = 0x37;
  5999  000F62  0E37               	movlw	55
  6000  000F64  6E92               	movwf	3986,c	;volatile
  6001                           
  6002                           ; BSR set to: 15
  6003                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  6004  000F66  9EF1               	bcf	intcon2,7,c	;volatile
  6005                           
  6006                           ; BSR set to: 15
  6007                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  6008  000F68  96F2               	bcf	intcon,3,c	;volatile
  6009                           
  6010                           ; BSR set to: 15
  6011  000F6A  0012               	return		;funcret
  6012  000F6C                     __end_of_PIN_MANAGER_Initialize:
  6013                           	opt stack 0
  6014                           tblptru	equ	0xFF8
  6015                           tblptrh	equ	0xFF7
  6016                           tblptrl	equ	0xFF6
  6017                           tablat	equ	0xFF5
  6018                           prodh	equ	0xFF4
  6019                           prodl	equ	0xFF3
  6020                           intcon	equ	0xFF2
  6021                           intcon2	equ	0xFF1
  6022                           indf0	equ	0xFEF
  6023                           postinc0	equ	0xFEE
  6024                           fsr0h	equ	0xFEA
  6025                           fsr0l	equ	0xFE9
  6026                           wreg	equ	0xFE8
  6027                           postdec1	equ	0xFE5
  6028                           fsr1l	equ	0xFE1
  6029                           indf2	equ	0xFDF
  6030                           postinc2	equ	0xFDE
  6031                           postdec2	equ	0xFDD
  6032                           plusw2	equ	0xFDB
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _OSCILLATOR_Initialize *****************
  6038 ;; Defined at:
  6039 ;;		line 121 in file "mcc_generated_files/mcc.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;		None
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;		None
  6044 ;; Return value:  Size  Location     Type
  6045 ;;		None               void
  6046 ;; Registers used:
  6047 ;;		wreg, status,2
  6048 ;; Tracked objects:
  6049 ;;		On entry : 0/0
  6050 ;;		On exit  : 0/0
  6051 ;;		Unchanged: 0/0
  6052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6053 ;;      Params:         0       0       0       0       0       0       0
  6054 ;;      Locals:         0       0       0       0       0       0       0
  6055 ;;      Temps:          0       0       0       0       0       0       0
  6056 ;;      Totals:         0       0       0       0       0       0       0
  6057 ;;Total ram usage:        0 bytes
  6058 ;; Hardware stack levels used:    1
  6059 ;; Hardware stack levels required when called:    4
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_SYSTEM_Initialize
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text35
  6068  00140E                     __ptext35:
  6069                           	opt stack 0
  6070  00140E                     _OSCILLATOR_Initialize:
  6071                           	opt stack 25
  6072                           
  6073                           ;mcc.c: 123: OSCCON = 0x70;
  6074                           
  6075                           ; BSR set to: 15
  6076                           ;incstack = 0
  6077  00140E  0E70               	movlw	112
  6078  001410  6ED3               	movwf	4051,c	;volatile
  6079                           
  6080                           ;mcc.c: 125: OSCCON2 = 0x04;
  6081  001412  0E04               	movlw	4
  6082  001414  6ED2               	movwf	4050,c	;volatile
  6083                           
  6084                           ;mcc.c: 127: OSCTUNE = 0x00;
  6085  001416  0E00               	movlw	0
  6086  001418  6E9B               	movwf	3995,c	;volatile
  6087  00141A  0012               	return		;funcret
  6088  00141C                     __end_of_OSCILLATOR_Initialize:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           intcon2	equ	0xFF1
  6098                           indf0	equ	0xFEF
  6099                           postinc0	equ	0xFEE
  6100                           fsr0h	equ	0xFEA
  6101                           fsr0l	equ	0xFE9
  6102                           wreg	equ	0xFE8
  6103                           postdec1	equ	0xFE5
  6104                           fsr1l	equ	0xFE1
  6105                           indf2	equ	0xFDF
  6106                           postinc2	equ	0xFDE
  6107                           postdec2	equ	0xFDD
  6108                           plusw2	equ	0xFDB
  6109                           fsr2h	equ	0xFDA
  6110                           fsr2l	equ	0xFD9
  6111                           status	equ	0xFD8
  6112                           
  6113 ;; *************** function _INTERRUPT_Initialize *****************
  6114 ;; Defined at:
  6115 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6116 ;; Parameters:    Size  Location     Type
  6117 ;;		None
  6118 ;; Auto vars:     Size  Location     Type
  6119 ;;		None
  6120 ;; Return value:  Size  Location     Type
  6121 ;;		None               void
  6122 ;; Registers used:
  6123 ;;		None
  6124 ;; Tracked objects:
  6125 ;;		On entry : 0/0
  6126 ;;		On exit  : 0/0
  6127 ;;		Unchanged: 0/0
  6128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6129 ;;      Params:         0       0       0       0       0       0       0
  6130 ;;      Locals:         0       0       0       0       0       0       0
  6131 ;;      Temps:          0       0       0       0       0       0       0
  6132 ;;      Totals:         0       0       0       0       0       0       0
  6133 ;;Total ram usage:        0 bytes
  6134 ;; Hardware stack levels used:    1
  6135 ;; Hardware stack levels required when called:    4
  6136 ;; This function calls:
  6137 ;;		Nothing
  6138 ;; This function is called by:
  6139 ;;		_SYSTEM_Initialize
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           	psect	text36
  6144  00142A                     __ptext36:
  6145                           	opt stack 0
  6146  00142A                     _INTERRUPT_Initialize:
  6147                           	opt stack 25
  6148                           
  6149                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6150                           
  6151                           ;incstack = 0
  6152  00142A  9ED0               	bcf	4048,7,c	;volatile
  6153                           
  6154                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  6155  00142C  9AA5               	bcf	4005,5,c	;volatile
  6156                           
  6157                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  6158  00142E  98A5               	bcf	4005,4,c	;volatile
  6159                           
  6160                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  6161  001430  9A9F               	bcf	3999,5,c	;volatile
  6162                           
  6163                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  6164  001432  989F               	bcf	3999,4,c	;volatile
  6165  001434  0012               	return		;funcret
  6166  001436                     __end_of_INTERRUPT_Initialize:
  6167                           	opt stack 0
  6168                           tblptru	equ	0xFF8
  6169                           tblptrh	equ	0xFF7
  6170                           tblptrl	equ	0xFF6
  6171                           tablat	equ	0xFF5
  6172                           prodh	equ	0xFF4
  6173                           prodl	equ	0xFF3
  6174                           intcon	equ	0xFF2
  6175                           intcon2	equ	0xFF1
  6176                           indf0	equ	0xFEF
  6177                           postinc0	equ	0xFEE
  6178                           fsr0h	equ	0xFEA
  6179                           fsr0l	equ	0xFE9
  6180                           wreg	equ	0xFE8
  6181                           postdec1	equ	0xFE5
  6182                           fsr1l	equ	0xFE1
  6183                           indf2	equ	0xFDF
  6184                           postinc2	equ	0xFDE
  6185                           postdec2	equ	0xFDD
  6186                           plusw2	equ	0xFDB
  6187                           fsr2h	equ	0xFDA
  6188                           fsr2l	equ	0xFD9
  6189                           status	equ	0xFD8
  6190                           
  6191 ;; *************** function _EUSART2_Initialize *****************
  6192 ;; Defined at:
  6193 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;		None
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;		None               void
  6200 ;; Registers used:
  6201 ;;		wreg, status,2
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6207 ;;      Params:         0       0       0       0       0       0       0
  6208 ;;      Locals:         0       0       0       0       0       0       0
  6209 ;;      Temps:          0       0       0       0       0       0       0
  6210 ;;      Totals:         0       0       0       0       0       0       0
  6211 ;;Total ram usage:        0 bytes
  6212 ;; Hardware stack levels used:    1
  6213 ;; Hardware stack levels required when called:    4
  6214 ;; This function calls:
  6215 ;;		Nothing
  6216 ;; This function is called by:
  6217 ;;		_SYSTEM_Initialize
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221                           	psect	text37
  6222  0010E8                     __ptext37:
  6223                           	opt stack 0
  6224  0010E8                     _EUSART2_Initialize:
  6225                           	opt stack 25
  6226                           
  6227                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  6228                           
  6229                           ;incstack = 0
  6230  0010E8  9AA3               	bcf	4003,5,c	;volatile
  6231                           
  6232                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  6233  0010EA  98A3               	bcf	4003,4,c	;volatile
  6234                           
  6235                           ;eusart2.c: 84: BAUD2CON = 0x48;
  6236  0010EC  0E48               	movlw	72
  6237  0010EE  6E70               	movwf	3952,c	;volatile
  6238                           
  6239                           ;eusart2.c: 87: RC2STA = 0x90;
  6240  0010F0  0E90               	movlw	144
  6241  0010F2  6E71               	movwf	3953,c	;volatile
  6242                           
  6243                           ;eusart2.c: 90: TX2STA = 0x26;
  6244  0010F4  0E26               	movlw	38
  6245  0010F6  6E72               	movwf	3954,c	;volatile
  6246                           
  6247                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  6248  0010F8  0EA0               	movlw	160
  6249  0010FA  6E75               	movwf	3957,c	;volatile
  6250                           
  6251                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  6252  0010FC  0E01               	movlw	1
  6253  0010FE  6E76               	movwf	3958,c	;volatile
  6254                           
  6255                           ;eusart2.c: 100: eusart2TxHead = 0;
  6256  001100  0E00               	movlw	0
  6257  001102  6E38               	movwf	_eusart2TxHead,c
  6258                           
  6259                           ;eusart2.c: 101: eusart2TxTail = 0;
  6260  001104  0E00               	movlw	0
  6261  001106  6E39               	movwf	_eusart2TxTail,c
  6262                           
  6263                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  6264  001108  0E08               	movlw	8
  6265  00110A  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  6266                           
  6267                           ;eusart2.c: 104: eusart2RxHead = 0;
  6268  00110C  0E00               	movlw	0
  6269  00110E  6E36               	movwf	_eusart2RxHead,c
  6270                           
  6271                           ;eusart2.c: 105: eusart2RxTail = 0;
  6272  001110  0E00               	movlw	0
  6273  001112  6E37               	movwf	_eusart2RxTail,c
  6274                           
  6275                           ;eusart2.c: 106: eusart2RxCount = 0;
  6276  001114  0E00               	movlw	0
  6277  001116  6E35               	movwf	_eusart2RxCount,c	;volatile
  6278                           
  6279                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  6280  001118  8AA3               	bsf	4003,5,c	;volatile
  6281  00111A  0012               	return		;funcret
  6282  00111C                     __end_of_EUSART2_Initialize:
  6283                           	opt stack 0
  6284                           tblptru	equ	0xFF8
  6285                           tblptrh	equ	0xFF7
  6286                           tblptrl	equ	0xFF6
  6287                           tablat	equ	0xFF5
  6288                           prodh	equ	0xFF4
  6289                           prodl	equ	0xFF3
  6290                           intcon	equ	0xFF2
  6291                           intcon2	equ	0xFF1
  6292                           indf0	equ	0xFEF
  6293                           postinc0	equ	0xFEE
  6294                           fsr0h	equ	0xFEA
  6295                           fsr0l	equ	0xFE9
  6296                           wreg	equ	0xFE8
  6297                           postdec1	equ	0xFE5
  6298                           fsr1l	equ	0xFE1
  6299                           indf2	equ	0xFDF
  6300                           postinc2	equ	0xFDE
  6301                           postdec2	equ	0xFDD
  6302                           plusw2	equ	0xFDB
  6303                           fsr2h	equ	0xFDA
  6304                           fsr2l	equ	0xFD9
  6305                           status	equ	0xFD8
  6306                           
  6307 ;; *************** function _NokiaStart *****************
  6308 ;; Defined at:
  6309 ;;		line 25 in file "NokiaLCD.c"
  6310 ;; Parameters:    Size  Location     Type
  6311 ;;		None
  6312 ;; Auto vars:     Size  Location     Type
  6313 ;;		None
  6314 ;; Return value:  Size  Location     Type
  6315 ;;		None               void
  6316 ;; Registers used:
  6317 ;;		wreg, status,2, status,0, cstack
  6318 ;; Tracked objects:
  6319 ;;		On entry : 0/0
  6320 ;;		On exit  : 0/0
  6321 ;;		Unchanged: 0/0
  6322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6323 ;;      Params:         0       0       0       0       0       0       0
  6324 ;;      Locals:         0       0       0       0       0       0       0
  6325 ;;      Temps:          0       0       0       0       0       0       0
  6326 ;;      Totals:         0       0       0       0       0       0       0
  6327 ;;Total ram usage:        0 bytes
  6328 ;; Hardware stack levels used:    1
  6329 ;; Hardware stack levels required when called:    7
  6330 ;; This function calls:
  6331 ;;		_Delay
  6332 ;;		_LCDwrite
  6333 ;;		_SPI1_Initialize
  6334 ;;		_clearLcd
  6335 ;; This function is called by:
  6336 ;;		_main
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           	psect	text38
  6341  000AAC                     __ptext38:
  6342                           	opt stack 0
  6343  000AAC                     _NokiaStart:
  6344                           	opt stack 23
  6345                           
  6346                           ;NokiaLCD.c: 26: TRISBbits.TRISB6 = 0;
  6347                           
  6348                           ;incstack = 0
  6349  000AAC  9C93               	bcf	3987,6,c	;volatile
  6350                           
  6351                           ;NokiaLCD.c: 27: do { TRISD0 = 0; } while(0);
  6352  000AAE  9095               	bcf	3989,0,c	;volatile
  6353                           
  6354                           ;NokiaLCD.c: 28: do { TRISD3 = 0; } while(0);
  6355  000AB0  9695               	bcf	3989,3,c	;volatile
  6356                           
  6357                           ;NokiaLCD.c: 29: do { TRISD2 = 0; } while(0);
  6358  000AB2  9495               	bcf	3989,2,c	;volatile
  6359                           
  6360                           ;NokiaLCD.c: 30: do { LATD0 = 1; } while(0);
  6361  000AB4  808C               	bsf	3980,0,c	;volatile
  6362                           
  6363                           ;NokiaLCD.c: 31: SPI1_Initialize();
  6364  000AB6  EC0E  F00A         	call	_SPI1_Initialize	;wreg free
  6365                           
  6366                           ;NokiaLCD.c: 32: LATBbits.LATB6 = 1;
  6367  000ABA  8C8A               	bsf	3978,6,c	;volatile
  6368                           
  6369                           ;NokiaLCD.c: 33: Delay(100);
  6370  000ABC  0E64               	movlw	100
  6371  000ABE  6E1B               	movwf	Delay@wait,c
  6372  000AC0  0E00               	movlw	0
  6373  000AC2  6E1C               	movwf	Delay@wait+1,c
  6374  000AC4  0E00               	movlw	0
  6375  000AC6  6E1D               	movwf	Delay@wait+2,c
  6376  000AC8  0E00               	movlw	0
  6377  000ACA  6E1E               	movwf	Delay@wait+3,c
  6378  000ACC  ECB6  F007         	call	_Delay	;wreg free
  6379                           
  6380                           ;NokiaLCD.c: 34: LATBbits.LATB6 = 0;
  6381  000AD0  9C8A               	bcf	3978,6,c	;volatile
  6382                           
  6383                           ;NokiaLCD.c: 35: Delay(100);
  6384  000AD2  0E64               	movlw	100
  6385  000AD4  6E1B               	movwf	Delay@wait,c
  6386  000AD6  0E00               	movlw	0
  6387  000AD8  6E1C               	movwf	Delay@wait+1,c
  6388  000ADA  0E00               	movlw	0
  6389  000ADC  6E1D               	movwf	Delay@wait+2,c
  6390  000ADE  0E00               	movlw	0
  6391  000AE0  6E1E               	movwf	Delay@wait+3,c
  6392  000AE2  ECB6  F007         	call	_Delay	;wreg free
  6393                           
  6394                           ;NokiaLCD.c: 36: LATBbits.LATB6 = 1;
  6395  000AE6  8C8A               	bsf	3978,6,c	;volatile
  6396                           
  6397                           ;NokiaLCD.c: 37: LCDwrite(1, 0x21);
  6398  000AE8  0E21               	movlw	33
  6399  000AEA  6E21               	movwf	LCDwrite@data,c
  6400  000AEC  0E01               	movlw	1
  6401  000AEE  ECD3  F009         	call	_LCDwrite
  6402                           
  6403                           ;NokiaLCD.c: 38: LCDwrite(1, 0xC8);
  6404  000AF2  0EC8               	movlw	200
  6405  000AF4  6E21               	movwf	LCDwrite@data,c
  6406  000AF6  0E01               	movlw	1
  6407  000AF8  ECD3  F009         	call	_LCDwrite
  6408                           
  6409                           ;NokiaLCD.c: 39: LCDwrite(1, 0x04 | !!((66-2) & (1u << 6)));
  6410  000AFC  0E05               	movlw	5
  6411  000AFE  6E21               	movwf	LCDwrite@data,c
  6412  000B00  0E01               	movlw	1
  6413  000B02  ECD3  F009         	call	_LCDwrite
  6414                           
  6415                           ;NokiaLCD.c: 40: LCDwrite(1, 0x40 | ((66-2) & ((1u << 6) - 1)));
  6416  000B06  0E40               	movlw	64
  6417  000B08  6E21               	movwf	LCDwrite@data,c
  6418  000B0A  0E01               	movlw	1
  6419  000B0C  ECD3  F009         	call	_LCDwrite
  6420                           
  6421                           ;NokiaLCD.c: 42: LCDwrite(1, 0x14);
  6422  000B10  0E14               	movlw	20
  6423  000B12  6E21               	movwf	LCDwrite@data,c
  6424  000B14  0E01               	movlw	1
  6425  000B16  ECD3  F009         	call	_LCDwrite
  6426                           
  6427                           ;NokiaLCD.c: 43: LCDwrite(1, 0x20);
  6428  000B1A  0E20               	movlw	32
  6429  000B1C  6E21               	movwf	LCDwrite@data,c
  6430  000B1E  0E01               	movlw	1
  6431  000B20  ECD3  F009         	call	_LCDwrite
  6432                           
  6433                           ;NokiaLCD.c: 44: LCDwrite(1, 0x08);
  6434  000B24  0E08               	movlw	8
  6435  000B26  6E21               	movwf	LCDwrite@data,c
  6436  000B28  0E01               	movlw	1
  6437  000B2A  ECD3  F009         	call	_LCDwrite
  6438                           
  6439                           ;NokiaLCD.c: 45: LCDwrite(1, 0x0C);
  6440  000B2E  0E0C               	movlw	12
  6441  000B30  6E21               	movwf	LCDwrite@data,c
  6442  000B32  0E01               	movlw	1
  6443  000B34  ECD3  F009         	call	_LCDwrite
  6444                           
  6445                           ;NokiaLCD.c: 46: clearLcd();
  6446  000B38  EC6C  F009         	call	_clearLcd	;wreg free
  6447  000B3C  0012               	return		;funcret
  6448  000B3E                     __end_of_NokiaStart:
  6449                           	opt stack 0
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           intcon2	equ	0xFF1
  6458                           indf0	equ	0xFEF
  6459                           postinc0	equ	0xFEE
  6460                           fsr0h	equ	0xFEA
  6461                           fsr0l	equ	0xFE9
  6462                           wreg	equ	0xFE8
  6463                           postdec1	equ	0xFE5
  6464                           fsr1l	equ	0xFE1
  6465                           indf2	equ	0xFDF
  6466                           postinc2	equ	0xFDE
  6467                           postdec2	equ	0xFDD
  6468                           plusw2	equ	0xFDB
  6469                           fsr2h	equ	0xFDA
  6470                           fsr2l	equ	0xFD9
  6471                           status	equ	0xFD8
  6472                           
  6473 ;; *************** function _clearLcd *****************
  6474 ;; Defined at:
  6475 ;;		line 68 in file "NokiaLCD.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  res             2   34[COMRAM] int 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;		None               void
  6482 ;; Registers used:
  6483 ;;		wreg, status,2, status,0, cstack
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6489 ;;      Params:         0       0       0       0       0       0       0
  6490 ;;      Locals:         2       0       0       0       0       0       0
  6491 ;;      Temps:          0       0       0       0       0       0       0
  6492 ;;      Totals:         2       0       0       0       0       0       0
  6493 ;;Total ram usage:        2 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    6
  6496 ;; This function calls:
  6497 ;;		_LCDwrite
  6498 ;; This function is called by:
  6499 ;;		_main
  6500 ;;		_NokiaStart
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           	psect	text39
  6505  0012D8                     __ptext39:
  6506                           	opt stack 0
  6507  0012D8                     _clearLcd:
  6508                           	opt stack 24
  6509                           
  6510                           ;NokiaLCD.c: 69: int res;
  6511                           ;NokiaLCD.c: 70: for(res=0;res<504;res++){
  6512                           
  6513                           ;incstack = 0
  6514  0012D8  0E00               	movlw	0
  6515  0012DA  6E24               	movwf	clearLcd@res+1,c
  6516  0012DC  0E00               	movlw	0
  6517  0012DE  6E23               	movwf	clearLcd@res,c
  6518  0012E0                     l3323:
  6519  0012E0  BE24               	btfsc	clearLcd@res+1,7,c
  6520  0012E2  D006               	goto	l3327
  6521  0012E4  0EF8               	movlw	248
  6522  0012E6  5C23               	subwf	clearLcd@res,w,c
  6523  0012E8  0E01               	movlw	1
  6524  0012EA  5824               	subwfb	clearLcd@res+1,w,c
  6525  0012EC  B0D8               	btfsc	status,0,c
  6526  0012EE  0012               	return	
  6527  0012F0                     l3327:
  6528                           
  6529                           ;NokiaLCD.c: 71: LCDwrite(0, 0x00);
  6530  0012F0  0E00               	movlw	0
  6531  0012F2  6E21               	movwf	LCDwrite@data,c
  6532  0012F4  0E00               	movlw	0
  6533  0012F6  ECD3  F009         	call	_LCDwrite
  6534  0012FA  4A23               	infsnz	clearLcd@res,f,c
  6535  0012FC  2A24               	incf	clearLcd@res+1,f,c
  6536  0012FE  D7F0               	goto	l3323
  6537  001300                     __end_of_clearLcd:
  6538                           	opt stack 0
  6539                           tblptru	equ	0xFF8
  6540                           tblptrh	equ	0xFF7
  6541                           tblptrl	equ	0xFF6
  6542                           tablat	equ	0xFF5
  6543                           prodh	equ	0xFF4
  6544                           prodl	equ	0xFF3
  6545                           intcon	equ	0xFF2
  6546                           intcon2	equ	0xFF1
  6547                           indf0	equ	0xFEF
  6548                           postinc0	equ	0xFEE
  6549                           fsr0h	equ	0xFEA
  6550                           fsr0l	equ	0xFE9
  6551                           wreg	equ	0xFE8
  6552                           postdec1	equ	0xFE5
  6553                           fsr1l	equ	0xFE1
  6554                           indf2	equ	0xFDF
  6555                           postinc2	equ	0xFDE
  6556                           postdec2	equ	0xFDD
  6557                           plusw2	equ	0xFDB
  6558                           fsr2h	equ	0xFDA
  6559                           fsr2l	equ	0xFD9
  6560                           status	equ	0xFD8
  6561                           
  6562 ;; *************** function _LCDwrite *****************
  6563 ;; Defined at:
  6564 ;;		line 49 in file "NokiaLCD.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  mode            1    wreg     unsigned char 
  6567 ;;  data            1   32[COMRAM] unsigned char 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  mode            1   33[COMRAM] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;		None               void
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, cstack
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6579 ;;      Params:         1       0       0       0       0       0       0
  6580 ;;      Locals:         1       0       0       0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0
  6582 ;;      Totals:         2       0       0       0       0       0       0
  6583 ;;Total ram usage:        2 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    5
  6586 ;; This function calls:
  6587 ;;		_SPI1_Exchange8bit
  6588 ;; This function is called by:
  6589 ;;		_NokiaStart
  6590 ;;		_clearLcd
  6591 ;;		_gotoXy
  6592 ;;		_LcdCharacter
  6593 ;;		_blackLcd
  6594 ;; This function uses a non-reentrant model
  6595 ;;
  6596                           
  6597                           	psect	text40
  6598  0013A6                     __ptext40:
  6599                           	opt stack 0
  6600  0013A6                     _LCDwrite:
  6601                           	opt stack 24
  6602                           
  6603                           ;incstack = 0
  6604                           ;LCDwrite@mode stored from wreg
  6605  0013A6  6E22               	movwf	LCDwrite@mode,c
  6606                           
  6607                           ;NokiaLCD.c: 50: if(mode){
  6608  0013A8  5022               	movf	LCDwrite@mode,w,c
  6609  0013AA  B4D8               	btfsc	status,2,c
  6610  0013AC  D002               	goto	l755
  6611                           
  6612                           ;NokiaLCD.c: 51: do { LATD3 = 0; } while(0);
  6613  0013AE  968C               	bcf	3980,3,c	;volatile
  6614                           
  6615                           ;NokiaLCD.c: 52: }
  6616  0013B0  D001               	goto	l757
  6617  0013B2                     l755:
  6618  0013B2  868C               	bsf	3980,3,c	;volatile
  6619  0013B4                     l757:
  6620  0013B4  908C               	bcf	3980,0,c	;volatile
  6621                           
  6622                           ;NokiaLCD.c: 57: SPI1_Exchange8bit(data);
  6623  0013B6  5021               	movf	LCDwrite@data,w,c
  6624  0013B8  ECFF  F009         	call	_SPI1_Exchange8bit
  6625                           
  6626                           ;NokiaLCD.c: 58: do { LATD0 = 1; } while(0);
  6627  0013BC  808C               	bsf	3980,0,c	;volatile
  6628  0013BE  0012               	return	
  6629  0013C0                     __end_of_LCDwrite:
  6630                           	opt stack 0
  6631                           tblptru	equ	0xFF8
  6632                           tblptrh	equ	0xFF7
  6633                           tblptrl	equ	0xFF6
  6634                           tablat	equ	0xFF5
  6635                           prodh	equ	0xFF4
  6636                           prodl	equ	0xFF3
  6637                           intcon	equ	0xFF2
  6638                           intcon2	equ	0xFF1
  6639                           indf0	equ	0xFEF
  6640                           postinc0	equ	0xFEE
  6641                           fsr0h	equ	0xFEA
  6642                           fsr0l	equ	0xFE9
  6643                           wreg	equ	0xFE8
  6644                           postdec1	equ	0xFE5
  6645                           fsr1l	equ	0xFE1
  6646                           indf2	equ	0xFDF
  6647                           postinc2	equ	0xFDE
  6648                           postdec2	equ	0xFDD
  6649                           plusw2	equ	0xFDB
  6650                           fsr2h	equ	0xFDA
  6651                           fsr2l	equ	0xFD9
  6652                           status	equ	0xFD8
  6653                           
  6654 ;; *************** function _SPI1_Exchange8bit *****************
  6655 ;; Defined at:
  6656 ;;		line 78 in file "mcc_generated_files/spi1.c"
  6657 ;; Parameters:    Size  Location     Type
  6658 ;;  data            1    wreg     unsigned char 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  data            1   26[COMRAM] unsigned char 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  1    wreg      unsigned char 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         0       0       0       0       0       0       0
  6671 ;;      Locals:         1       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:         1       0       0       0       0       0       0
  6674 ;;Total ram usage:        1 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    4
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_LCDwrite
  6681 ;;		_SPI1_Exchange8bitBuffer
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           	psect	text41
  6686  0013FE                     __ptext41:
  6687                           	opt stack 0
  6688  0013FE                     _SPI1_Exchange8bit:
  6689                           	opt stack 24
  6690                           
  6691                           ;incstack = 0
  6692                           ;SPI1_Exchange8bit@data stored from wreg
  6693  0013FE  6E1B               	movwf	SPI1_Exchange8bit@data,c
  6694                           
  6695                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  6696  001400  9EC6               	bcf	4038,7,c	;volatile
  6697                           
  6698                           ;spi1.c: 83: SSP1BUF = data;
  6699  001402  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  6700  001406                     l188:
  6701  001406  A0C7               	btfss	4039,0,c	;volatile
  6702  001408  D7FE               	goto	l188
  6703                           
  6704                           ;spi1.c: 87: }
  6705                           ;spi1.c: 89: return (SSP1BUF);
  6706  00140A  50C9               	movf	4041,w,c	;volatile
  6707  00140C  0012               	return		;funcret
  6708  00140E                     __end_of_SPI1_Exchange8bit:
  6709                           	opt stack 0
  6710                           tblptru	equ	0xFF8
  6711                           tblptrh	equ	0xFF7
  6712                           tblptrl	equ	0xFF6
  6713                           tablat	equ	0xFF5
  6714                           prodh	equ	0xFF4
  6715                           prodl	equ	0xFF3
  6716                           intcon	equ	0xFF2
  6717                           intcon2	equ	0xFF1
  6718                           indf0	equ	0xFEF
  6719                           postinc0	equ	0xFEE
  6720                           fsr0h	equ	0xFEA
  6721                           fsr0l	equ	0xFE9
  6722                           wreg	equ	0xFE8
  6723                           postdec1	equ	0xFE5
  6724                           fsr1l	equ	0xFE1
  6725                           indf2	equ	0xFDF
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           plusw2	equ	0xFDB
  6729                           fsr2h	equ	0xFDA
  6730                           fsr2l	equ	0xFD9
  6731                           status	equ	0xFD8
  6732                           
  6733 ;; *************** function _SPI1_Initialize *****************
  6734 ;; Defined at:
  6735 ;;		line 64 in file "mcc_generated_files/spi1.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;		None
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;		None
  6740 ;; Return value:  Size  Location     Type
  6741 ;;		None               void
  6742 ;; Registers used:
  6743 ;;		wreg, status,2
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6749 ;;      Params:         0       0       0       0       0       0       0
  6750 ;;      Locals:         0       0       0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0
  6752 ;;      Totals:         0       0       0       0       0       0       0
  6753 ;;Total ram usage:        0 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    4
  6756 ;; This function calls:
  6757 ;;		Nothing
  6758 ;; This function is called by:
  6759 ;;		_NokiaStart
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text42
  6764  00141C                     __ptext42:
  6765                           	opt stack 0
  6766  00141C                     _SPI1_Initialize:
  6767                           	opt stack 25
  6768                           
  6769                           ;spi1.c: 69: SSP1STAT = 0x80;
  6770                           
  6771                           ;incstack = 0
  6772  00141C  0E80               	movlw	128
  6773  00141E  6EC7               	movwf	4039,c	;volatile
  6774                           
  6775                           ;spi1.c: 72: SSP1CON1 = 0x30;
  6776  001420  0E30               	movlw	48
  6777  001422  6EC6               	movwf	4038,c	;volatile
  6778                           
  6779                           ;spi1.c: 75: SSP1ADD = 0x00;
  6780  001424  0E00               	movlw	0
  6781  001426  6EC8               	movwf	4040,c	;volatile
  6782  001428  0012               	return		;funcret
  6783  00142A                     __end_of_SPI1_Initialize:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           intcon2	equ	0xFF1
  6793                           indf0	equ	0xFEF
  6794                           postinc0	equ	0xFEE
  6795                           fsr0h	equ	0xFEA
  6796                           fsr0l	equ	0xFE9
  6797                           wreg	equ	0xFE8
  6798                           postdec1	equ	0xFE5
  6799                           fsr1l	equ	0xFE1
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _Delay *****************
  6809 ;; Defined at:
  6810 ;;		line 15 in file "Functions.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  wait            4   26[COMRAM] long 
  6813 ;; Auto vars:     Size  Location     Type
  6814 ;;  i               4   31[COMRAM] long 
  6815 ;; Return value:  Size  Location     Type
  6816 ;;		None               void
  6817 ;; Registers used:
  6818 ;;		wreg, status,2, status,0
  6819 ;; Tracked objects:
  6820 ;;		On entry : 0/0
  6821 ;;		On exit  : 0/0
  6822 ;;		Unchanged: 0/0
  6823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6824 ;;      Params:         4       0       0       0       0       0       0
  6825 ;;      Locals:         4       0       0       0       0       0       0
  6826 ;;      Temps:          1       0       0       0       0       0       0
  6827 ;;      Totals:         9       0       0       0       0       0       0
  6828 ;;Total ram usage:        9 bytes
  6829 ;; Hardware stack levels used:    1
  6830 ;; Hardware stack levels required when called:    4
  6831 ;; This function calls:
  6832 ;;		Nothing
  6833 ;; This function is called by:
  6834 ;;		_main
  6835 ;;		_respondChargerAsECU
  6836 ;;		_SetBMM
  6837 ;;		_Precharge
  6838 ;;		_NokiaStart
  6839 ;; This function uses a non-reentrant model
  6840 ;;
  6841                           
  6842                           	psect	text43
  6843  000F6C                     __ptext43:
  6844                           	opt stack 0
  6845  000F6C                     _Delay:
  6846                           	opt stack 24
  6847                           
  6848                           ;Functions.c: 16: long int i = 0;
  6849                           
  6850                           ;incstack = 0
  6851  000F6C  0E00               	movlw	0
  6852  000F6E  6E20               	movwf	Delay@i,c
  6853  000F70  0E00               	movlw	0
  6854  000F72  6E21               	movwf	Delay@i+1,c
  6855  000F74  0E00               	movlw	0
  6856  000F76  6E22               	movwf	Delay@i+2,c
  6857  000F78  0E00               	movlw	0
  6858  000F7A  6E23               	movwf	Delay@i+3,c
  6859                           
  6860                           ;Functions.c: 17: for (; wait > i; i++) {
  6861  000F7C  D00E               	goto	l3229
  6862  000F7E                     l3225:
  6863                           
  6864                           ;Functions.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  6865  000F7E  0E06               	movlw	6
  6866  000F80  6E1F               	movwf	??_Delay& (0+255),c
  6867  000F82  0E30               	movlw	48
  6868  000F84                     u2667:
  6869  000F84  2EE8               	decfsz	wreg,f,c
  6870  000F86  D7FE               	goto	u2667
  6871  000F88  2E1F               	decfsz	??_Delay& (0+255),f,c
  6872  000F8A  D7FC               	goto	u2667
  6873  000F8C  D000               	nop2	
  6874  000F8E  0E01               	movlw	1
  6875  000F90  2620               	addwf	Delay@i,f,c
  6876  000F92  0E00               	movlw	0
  6877  000F94  2221               	addwfc	Delay@i+1,f,c
  6878  000F96  2222               	addwfc	Delay@i+2,f,c
  6879  000F98  2223               	addwfc	Delay@i+3,f,c
  6880  000F9A                     l3229:
  6881  000F9A  501B               	movf	Delay@wait,w,c
  6882  000F9C  5C20               	subwf	Delay@i,w,c
  6883  000F9E  501C               	movf	Delay@wait+1,w,c
  6884  000FA0  5821               	subwfb	Delay@i+1,w,c
  6885  000FA2  501D               	movf	Delay@wait+2,w,c
  6886  000FA4  5822               	subwfb	Delay@i+2,w,c
  6887  000FA6  5023               	movf	Delay@i+3,w,c
  6888  000FA8  0A80               	xorlw	128
  6889  000FAA  6E1F               	movwf	??_Delay& (0+255),c
  6890  000FAC  501E               	movf	Delay@wait+3,w,c
  6891  000FAE  0A80               	xorlw	128
  6892  000FB0  581F               	subwfb	??_Delay& (0+255),w,c
  6893  000FB2  B0D8               	btfsc	status,0,c
  6894  000FB4  0012               	return	
  6895  000FB6  D7E3               	goto	l3225
  6896  000FB8                     __end_of_Delay:
  6897                           	opt stack 0
  6898                           tblptru	equ	0xFF8
  6899                           tblptrh	equ	0xFF7
  6900                           tblptrl	equ	0xFF6
  6901                           tablat	equ	0xFF5
  6902                           prodh	equ	0xFF4
  6903                           prodl	equ	0xFF3
  6904                           intcon	equ	0xFF2
  6905                           intcon2	equ	0xFF1
  6906                           indf0	equ	0xFEF
  6907                           postinc0	equ	0xFEE
  6908                           fsr0h	equ	0xFEA
  6909                           fsr0l	equ	0xFE9
  6910                           wreg	equ	0xFE8
  6911                           postdec1	equ	0xFE5
  6912                           fsr1l	equ	0xFE1
  6913                           indf2	equ	0xFDF
  6914                           postinc2	equ	0xFDE
  6915                           postdec2	equ	0xFDD
  6916                           plusw2	equ	0xFDB
  6917                           fsr2h	equ	0xFDA
  6918                           fsr2l	equ	0xFD9
  6919                           status	equ	0xFD8
  6920                           
  6921 ;; *************** function _INTERRUPT_InterruptManager *****************
  6922 ;; Defined at:
  6923 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6924 ;; Parameters:    Size  Location     Type
  6925 ;;		None
  6926 ;; Auto vars:     Size  Location     Type
  6927 ;;		None
  6928 ;; Return value:  Size  Location     Type
  6929 ;;		None               void
  6930 ;; Registers used:
  6931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6932 ;; Tracked objects:
  6933 ;;		On entry : 0/0
  6934 ;;		On exit  : 0/0
  6935 ;;		Unchanged: 0/0
  6936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6937 ;;      Params:         0       0       0       0       0       0       0
  6938 ;;      Locals:         0       0       0       0       0       0       0
  6939 ;;      Temps:         14       0       0       0       0       0       0
  6940 ;;      Totals:        14       0       0       0       0       0       0
  6941 ;;Total ram usage:       14 bytes
  6942 ;; Hardware stack levels used:    1
  6943 ;; Hardware stack levels required when called:    3
  6944 ;; This function calls:
  6945 ;;		_EUSART1_Receive_ISR
  6946 ;;		_EUSART1_Transmit_ISR
  6947 ;;		_EUSART2_Receive_ISR
  6948 ;;		_EUSART2_Transmit_ISR
  6949 ;; This function is called by:
  6950 ;;		Interrupt level 2
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	intcode
  6955  000008                     __pintcode:
  6956                           	opt stack 0
  6957  000008                     _INTERRUPT_InterruptManager:
  6958                           	opt stack 22
  6959                           
  6960                           ;incstack = 0
  6961  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6962  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6963  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6964  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6965  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6966  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6967  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6968  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6969  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6970  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6971  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6972  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6973  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6974  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6975  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6976                           
  6977                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6978  000042  BAA3               	btfsc	4003,5,c	;volatile
  6979  000044  AAA4               	btfss	4004,5,c	;volatile
  6980  000046  D003               	goto	i2l140
  6981                           
  6982                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6983  000048  EC18  F009         	call	_EUSART2_Receive_ISR	;wreg free
  6984                           
  6985                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6986  00004C  D011               	goto	i2l148
  6987  00004E                     i2l140:
  6988  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6989  000050  A8A4               	btfss	4004,4,c	;volatile
  6990  000052  D003               	goto	i2l142
  6991                           
  6992                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6993  000054  ECBF  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6994                           
  6995                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6996  000058  D00B               	goto	i2l148
  6997  00005A                     i2l142:
  6998  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6999  00005C  AA9E               	btfss	3998,5,c	;volatile
  7000  00005E  D003               	goto	i2l144
  7001                           
  7002                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  7003  000060  ECC4  F009         	call	_EUSART1_Receive_ISR	;wreg free
  7004                           
  7005                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  7006  000064  D005               	goto	i2l148
  7007  000066                     i2l144:
  7008  000066  B89D               	btfsc	3997,4,c	;volatile
  7009  000068  A89E               	btfss	3998,4,c	;volatile
  7010  00006A  D002               	goto	i2l148
  7011                           
  7012                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  7013  00006C  EC8E  F008         	call	_EUSART1_Transmit_ISR	;wreg free
  7014  000070                     i2l148:
  7015  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7016  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7017  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7018  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7019  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7020  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7021  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7022  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7023  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7024  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7025  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7026  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7027  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7028  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7029  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7030  0000AA  0011               	retfie		f
  7031  0000AC                     __end_of_INTERRUPT_InterruptManager:
  7032                           	opt stack 0
  7033                           pclatu	equ	0xFFB
  7034                           pclath	equ	0xFFA
  7035                           tblptru	equ	0xFF8
  7036                           tblptrh	equ	0xFF7
  7037                           tblptrl	equ	0xFF6
  7038                           tablat	equ	0xFF5
  7039                           prodh	equ	0xFF4
  7040                           prodl	equ	0xFF3
  7041                           intcon	equ	0xFF2
  7042                           intcon2	equ	0xFF1
  7043                           indf0	equ	0xFEF
  7044                           postinc0	equ	0xFEE
  7045                           fsr0h	equ	0xFEA
  7046                           fsr0l	equ	0xFE9
  7047                           wreg	equ	0xFE8
  7048                           postdec1	equ	0xFE5
  7049                           fsr1h	equ	0xFE2
  7050                           fsr1l	equ	0xFE1
  7051                           indf2	equ	0xFDF
  7052                           postinc2	equ	0xFDE
  7053                           postdec2	equ	0xFDD
  7054                           plusw2	equ	0xFDB
  7055                           fsr2h	equ	0xFDA
  7056                           fsr2l	equ	0xFD9
  7057                           status	equ	0xFD8
  7058                           
  7059 ;; *************** function _EUSART2_Transmit_ISR *****************
  7060 ;; Defined at:
  7061 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;		None
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;		None
  7066 ;; Return value:  Size  Location     Type
  7067 ;;		None               void
  7068 ;; Registers used:
  7069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7070 ;; Tracked objects:
  7071 ;;		On entry : 0/0
  7072 ;;		On exit  : 0/0
  7073 ;;		Unchanged: 0/0
  7074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7075 ;;      Params:         0       0       0       0       0       0       0
  7076 ;;      Locals:         0       0       0       0       0       0       0
  7077 ;;      Temps:          0       0       0       0       0       0       0
  7078 ;;      Totals:         0       0       0       0       0       0       0
  7079 ;;Total ram usage:        0 bytes
  7080 ;; Hardware stack levels used:    1
  7081 ;; This function calls:
  7082 ;;		Nothing
  7083 ;; This function is called by:
  7084 ;;		_INTERRUPT_InterruptManager
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           	psect	text45
  7089  00117E                     __ptext45:
  7090                           	opt stack 0
  7091  00117E                     _EUSART2_Transmit_ISR:
  7092                           	opt stack 24
  7093                           
  7094                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  7095                           
  7096                           ;incstack = 0
  7097  00117E  0E08               	movlw	8
  7098  001180  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  7099  001182  D012               	goto	i2l62
  7100                           
  7101                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  7102  001184  5039               	movf	_eusart2TxTail,w,c
  7103  001186  0D01               	mullw	1
  7104  001188  0E9B               	movlw	low _eusart2TxBuffer
  7105  00118A  24F3               	addwf	prodl,w,c
  7106  00118C  6ED9               	movwf	fsr2l,c
  7107  00118E  0E00               	movlw	high _eusart2TxBuffer
  7108  001190  20F4               	addwfc	prodh,w,c
  7109  001192  6EDA               	movwf	fsr2h,c
  7110  001194  50DF               	movf	indf2,w,c
  7111  001196  6E73               	movwf	3955,c	;volatile
  7112  001198  2A39               	incf	_eusart2TxTail,f,c
  7113                           
  7114                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  7115  00119A  0E07               	movlw	7
  7116  00119C  6439               	cpfsgt	_eusart2TxTail,c
  7117  00119E  D002               	goto	i2l2819
  7118                           
  7119                           ;eusart2.c: 161: eusart2TxTail = 0;
  7120  0011A0  0E00               	movlw	0
  7121  0011A2  6E39               	movwf	_eusart2TxTail,c
  7122  0011A4                     i2l2819:
  7123                           
  7124                           ;eusart2.c: 162: }
  7125                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  7126  0011A4  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  7127                           
  7128                           ;eusart2.c: 164: } else {
  7129  0011A6  0012               	return	
  7130  0011A8                     i2l62:
  7131                           
  7132                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  7133  0011A8  98A3               	bcf	4003,4,c	;volatile
  7134  0011AA  0012               	return	
  7135  0011AC                     __end_of_EUSART2_Transmit_ISR:
  7136                           	opt stack 0
  7137                           pclatu	equ	0xFFB
  7138                           pclath	equ	0xFFA
  7139                           tblptru	equ	0xFF8
  7140                           tblptrh	equ	0xFF7
  7141                           tblptrl	equ	0xFF6
  7142                           tablat	equ	0xFF5
  7143                           prodh	equ	0xFF4
  7144                           prodl	equ	0xFF3
  7145                           intcon	equ	0xFF2
  7146                           intcon2	equ	0xFF1
  7147                           indf0	equ	0xFEF
  7148                           postinc0	equ	0xFEE
  7149                           fsr0h	equ	0xFEA
  7150                           fsr0l	equ	0xFE9
  7151                           wreg	equ	0xFE8
  7152                           postdec1	equ	0xFE5
  7153                           fsr1h	equ	0xFE2
  7154                           fsr1l	equ	0xFE1
  7155                           indf2	equ	0xFDF
  7156                           postinc2	equ	0xFDE
  7157                           postdec2	equ	0xFDD
  7158                           plusw2	equ	0xFDB
  7159                           fsr2h	equ	0xFDA
  7160                           fsr2l	equ	0xFD9
  7161                           status	equ	0xFD8
  7162                           
  7163 ;; *************** function _EUSART2_Receive_ISR *****************
  7164 ;; Defined at:
  7165 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  7166 ;; Parameters:    Size  Location     Type
  7167 ;;		None
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;		None
  7170 ;; Return value:  Size  Location     Type
  7171 ;;		None               void
  7172 ;; Registers used:
  7173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7179 ;;      Params:         0       0       0       0       0       0       0
  7180 ;;      Locals:         0       0       0       0       0       0       0
  7181 ;;      Temps:          0       0       0       0       0       0       0
  7182 ;;      Totals:         0       0       0       0       0       0       0
  7183 ;;Total ram usage:        0 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; This function calls:
  7186 ;;		Nothing
  7187 ;; This function is called by:
  7188 ;;		_INTERRUPT_InterruptManager
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           	psect	text46
  7193  001230                     __ptext46:
  7194                           	opt stack 0
  7195  001230                     _EUSART2_Receive_ISR:
  7196                           	opt stack 24
  7197                           
  7198                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  7199                           
  7200                           ;incstack = 0
  7201  001230  A271               	btfss	3953,1,c	;volatile
  7202  001232  D002               	goto	i2l2825
  7203                           
  7204                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  7205  001234  9871               	bcf	3953,4,c	;volatile
  7206                           
  7207                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  7208  001236  8871               	bsf	3953,4,c	;volatile
  7209  001238                     i2l2825:
  7210                           
  7211                           ;eusart2.c: 175: }
  7212                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  7213  001238  5036               	movf	_eusart2RxHead,w,c
  7214  00123A  0D01               	mullw	1
  7215  00123C  0E93               	movlw	low _eusart2RxBuffer
  7216  00123E  24F3               	addwf	prodl,w,c
  7217  001240  6ED9               	movwf	fsr2l,c
  7218  001242  0E00               	movlw	high _eusart2RxBuffer
  7219  001244  20F4               	addwfc	prodh,w,c
  7220  001246  6EDA               	movwf	fsr2h,c
  7221  001248  CF74 FFDF          	movff	3956,indf2	;volatile
  7222  00124C  2A36               	incf	_eusart2RxHead,f,c
  7223                           
  7224                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  7225  00124E  0E07               	movlw	7
  7226  001250  6436               	cpfsgt	_eusart2RxHead,c
  7227  001252  D002               	goto	i2l2833
  7228                           
  7229                           ;eusart2.c: 180: eusart2RxHead = 0;
  7230  001254  0E00               	movlw	0
  7231  001256  6E36               	movwf	_eusart2RxHead,c
  7232  001258                     i2l2833:
  7233                           
  7234                           ;eusart2.c: 181: }
  7235                           ;eusart2.c: 182: eusart2RxCount++;
  7236  001258  2A35               	incf	_eusart2RxCount,f,c	;volatile
  7237  00125A  0012               	return		;funcret
  7238  00125C                     __end_of_EUSART2_Receive_ISR:
  7239                           	opt stack 0
  7240                           pclatu	equ	0xFFB
  7241                           pclath	equ	0xFFA
  7242                           tblptru	equ	0xFF8
  7243                           tblptrh	equ	0xFF7
  7244                           tblptrl	equ	0xFF6
  7245                           tablat	equ	0xFF5
  7246                           prodh	equ	0xFF4
  7247                           prodl	equ	0xFF3
  7248                           intcon	equ	0xFF2
  7249                           intcon2	equ	0xFF1
  7250                           indf0	equ	0xFEF
  7251                           postinc0	equ	0xFEE
  7252                           fsr0h	equ	0xFEA
  7253                           fsr0l	equ	0xFE9
  7254                           wreg	equ	0xFE8
  7255                           postdec1	equ	0xFE5
  7256                           fsr1h	equ	0xFE2
  7257                           fsr1l	equ	0xFE1
  7258                           indf2	equ	0xFDF
  7259                           postinc2	equ	0xFDE
  7260                           postdec2	equ	0xFDD
  7261                           plusw2	equ	0xFDB
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266 ;; *************** function _EUSART1_Transmit_ISR *****************
  7267 ;; Defined at:
  7268 ;;		line 150 in file "UART.c"
  7269 ;; Parameters:    Size  Location     Type
  7270 ;;		None
  7271 ;; Auto vars:     Size  Location     Type
  7272 ;;		None
  7273 ;; Return value:  Size  Location     Type
  7274 ;;                  2  134[None  ] int 
  7275 ;; Registers used:
  7276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7277 ;; Tracked objects:
  7278 ;;		On entry : 0/0
  7279 ;;		On exit  : 0/0
  7280 ;;		Unchanged: 0/0
  7281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7282 ;;      Params:         0       0       0       0       0       0       0
  7283 ;;      Locals:         0       0       0       0       0       0       0
  7284 ;;      Temps:          0       0       0       0       0       0       0
  7285 ;;      Totals:         0       0       0       0       0       0       0
  7286 ;;Total ram usage:        0 bytes
  7287 ;; Hardware stack levels used:    1
  7288 ;; Hardware stack levels required when called:    2
  7289 ;; This function calls:
  7290 ;;		_UART_buff_get
  7291 ;;		_UART_buff_size
  7292 ;; This function is called by:
  7293 ;;		_INTERRUPT_InterruptManager
  7294 ;; This function uses a non-reentrant model
  7295 ;;
  7296                           
  7297                           	psect	text47
  7298  00111C                     __ptext47:
  7299                           	opt stack 0
  7300  00111C                     _EUSART1_Transmit_ISR:
  7301                           	opt stack 22
  7302                           
  7303                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7304                           
  7305                           ;incstack = 0
  7306  00111C  0E00               	movlw	low _output_buffer
  7307  00111E  6E01               	movwf	UART_buff_size@_this,c
  7308  001120  0E03               	movlw	high _output_buffer
  7309  001122  6E02               	movwf	UART_buff_size@_this+1,c
  7310  001124  ECEB  F009         	call	_UART_buff_size	;wreg free
  7311  001128  BE02               	btfsc	?_UART_buff_size+1,7,c
  7312  00112A  D00D               	goto	i2l2845
  7313  00112C  5002               	movf	?_UART_buff_size+1,w,c
  7314  00112E  E103               	bnz	i2u165_40
  7315  001130  0401               	decf	?_UART_buff_size,w,c
  7316  001132  A0D8               	btfss	status,0,c
  7317  001134  D008               	goto	i2l2845
  7318  001136                     i2u165_40:
  7319                           
  7320                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7321  001136  0E00               	movlw	low _output_buffer
  7322  001138  6E07               	movwf	UART_buff_get@_this,c
  7323  00113A  0E03               	movlw	high _output_buffer
  7324  00113C  6E08               	movwf	UART_buff_get@_this+1,c
  7325  00113E  EC9F  F005         	call	_UART_buff_get	;wreg free
  7326  001142  6EAD               	movwf	4013,c	;volatile
  7327                           
  7328                           ;UART.c: 154: } else {
  7329  001144  0012               	return	
  7330  001146                     i2l2845:
  7331                           
  7332                           ;UART.c: 155: Transmit_stall = 1;
  7333  001146  0E01               	movlw	1
  7334  001148  6E44               	movwf	_Transmit_stall,c
  7335                           
  7336                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7337  00114A  989D               	bcf	3997,4,c	;volatile
  7338  00114C  0012               	return	
  7339  00114E                     __end_of_EUSART1_Transmit_ISR:
  7340                           	opt stack 0
  7341                           pclatu	equ	0xFFB
  7342                           pclath	equ	0xFFA
  7343                           tblptru	equ	0xFF8
  7344                           tblptrh	equ	0xFF7
  7345                           tblptrl	equ	0xFF6
  7346                           tablat	equ	0xFF5
  7347                           prodh	equ	0xFF4
  7348                           prodl	equ	0xFF3
  7349                           intcon	equ	0xFF2
  7350                           intcon2	equ	0xFF1
  7351                           indf0	equ	0xFEF
  7352                           postinc0	equ	0xFEE
  7353                           fsr0h	equ	0xFEA
  7354                           fsr0l	equ	0xFE9
  7355                           wreg	equ	0xFE8
  7356                           postdec1	equ	0xFE5
  7357                           fsr1h	equ	0xFE2
  7358                           fsr1l	equ	0xFE1
  7359                           indf2	equ	0xFDF
  7360                           postinc2	equ	0xFDE
  7361                           postdec2	equ	0xFDD
  7362                           plusw2	equ	0xFDB
  7363                           fsr2h	equ	0xFDA
  7364                           fsr2l	equ	0xFD9
  7365                           status	equ	0xFD8
  7366                           
  7367 ;; *************** function _UART_buff_size *****************
  7368 ;; Defined at:
  7369 ;;		line 102 in file "UART.c"
  7370 ;; Parameters:    Size  Location     Type
  7371 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7372 ;;		 -> output_buffer(206), input_buffer(206), 
  7373 ;; Auto vars:     Size  Location     Type
  7374 ;;		None
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  2    0[COMRAM] int 
  7377 ;; Registers used:
  7378 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7379 ;; Tracked objects:
  7380 ;;		On entry : 0/0
  7381 ;;		On exit  : 0/0
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7384 ;;      Params:         2       0       0       0       0       0       0
  7385 ;;      Locals:         0       0       0       0       0       0       0
  7386 ;;      Temps:          0       0       0       0       0       0       0
  7387 ;;      Totals:         2       0       0       0       0       0       0
  7388 ;;Total ram usage:        2 bytes
  7389 ;; Hardware stack levels used:    1
  7390 ;; This function calls:
  7391 ;;		Nothing
  7392 ;; This function is called by:
  7393 ;;		_EUSART1_Transmit_ISR
  7394 ;;		_Receive_available
  7395 ;; This function uses a non-reentrant model
  7396 ;;
  7397                           
  7398                           	psect	text48
  7399  0013D6                     __ptext48:
  7400                           	opt stack 0
  7401  0013D6                     _UART_buff_size:
  7402                           	opt stack 23
  7403                           
  7404                           ;UART.c: 103: return (_this->count);
  7405                           
  7406                           ;incstack = 0
  7407  0013D6  EE20 F0CC          	lfsr	2,204
  7408  0013DA  5001               	movf	UART_buff_size@_this,w,c
  7409  0013DC  26D9               	addwf	fsr2l,f,c
  7410  0013DE  5002               	movf	UART_buff_size@_this+1,w,c
  7411  0013E0  22DA               	addwfc	fsr2h,f,c
  7412  0013E2  CFDE F001          	movff	postinc2,?_UART_buff_size
  7413  0013E6  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  7414  0013EA  0012               	return	
  7415  0013EC                     __end_of_UART_buff_size:
  7416                           	opt stack 0
  7417                           pclatu	equ	0xFFB
  7418                           pclath	equ	0xFFA
  7419                           tblptru	equ	0xFF8
  7420                           tblptrh	equ	0xFF7
  7421                           tblptrl	equ	0xFF6
  7422                           tablat	equ	0xFF5
  7423                           prodh	equ	0xFF4
  7424                           prodl	equ	0xFF3
  7425                           intcon	equ	0xFF2
  7426                           intcon2	equ	0xFF1
  7427                           indf0	equ	0xFEF
  7428                           postinc0	equ	0xFEE
  7429                           fsr0h	equ	0xFEA
  7430                           fsr0l	equ	0xFE9
  7431                           wreg	equ	0xFE8
  7432                           postdec1	equ	0xFE5
  7433                           fsr1h	equ	0xFE2
  7434                           fsr1l	equ	0xFE1
  7435                           indf2	equ	0xFDF
  7436                           postinc2	equ	0xFDE
  7437                           postdec2	equ	0xFDD
  7438                           plusw2	equ	0xFDB
  7439                           fsr2h	equ	0xFDA
  7440                           fsr2l	equ	0xFD9
  7441                           status	equ	0xFD8
  7442                           
  7443 ;; *************** function _UART_buff_get *****************
  7444 ;; Defined at:
  7445 ;;		line 81 in file "UART.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7448 ;;		 -> output_buffer(206), input_buffer(206), 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  c               1   10[COMRAM] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      unsigned char 
  7453 ;; Registers used:
  7454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7460 ;;      Params:         2       0       0       0       0       0       0
  7461 ;;      Locals:         1       0       0       0       0       0       0
  7462 ;;      Temps:          2       0       0       0       0       0       0
  7463 ;;      Totals:         5       0       0       0       0       0       0
  7464 ;;Total ram usage:        5 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    1
  7467 ;; This function calls:
  7468 ;;		_UART_buff_modulo_inc
  7469 ;; This function is called by:
  7470 ;;		_EUSART1_Transmit_ISR
  7471 ;;		_Receive_get
  7472 ;;		_Send_put
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           	psect	text49
  7477  000B3E                     __ptext49:
  7478                           	opt stack 0
  7479  000B3E                     _UART_buff_get:
  7480                           	opt stack 22
  7481                           
  7482                           ;UART.c: 82: unsigned char c;
  7483                           ;UART.c: 83: if (_this->count > 0) {
  7484                           
  7485                           ;incstack = 0
  7486  000B3E  EE20 F0CC          	lfsr	2,204
  7487  000B42  5007               	movf	UART_buff_get@_this,w,c
  7488  000B44  26D9               	addwf	fsr2l,f,c
  7489  000B46  5008               	movf	UART_buff_get@_this+1,w,c
  7490  000B48  22DA               	addwfc	fsr2h,f,c
  7491  000B4A  0E01               	movlw	1
  7492  000B4C  BEDB               	btfsc	plusw2,7,c
  7493  000B4E  D03C               	goto	i2l2765
  7494  000B50  0E01               	movlw	1
  7495  000B52  50DB               	movf	plusw2,w,c
  7496  000B54  E103               	bnz	i2u156_40
  7497  000B56  04DE               	decf	postinc2,w,c
  7498  000B58  A0D8               	btfss	status,0,c
  7499  000B5A  D036               	goto	i2l2765
  7500  000B5C                     i2u156_40:
  7501                           
  7502                           ;UART.c: 84: c = _this->buf[_this->tail];
  7503  000B5C  EE20 F0CA          	lfsr	2,202
  7504  000B60  5007               	movf	UART_buff_get@_this,w,c
  7505  000B62  26D9               	addwf	fsr2l,f,c
  7506  000B64  5008               	movf	UART_buff_get@_this+1,w,c
  7507  000B66  22DA               	addwfc	fsr2h,f,c
  7508  000B68  CFDE F009          	movff	postinc2,??_UART_buff_get
  7509  000B6C  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  7510  000B70  5009               	movf	??_UART_buff_get,w,c
  7511  000B72  2407               	addwf	UART_buff_get@_this,w,c
  7512  000B74  6ED9               	movwf	fsr2l,c
  7513  000B76  500A               	movf	??_UART_buff_get+1,w,c
  7514  000B78  2008               	addwfc	UART_buff_get@_this+1,w,c
  7515  000B7A  6EDA               	movwf	fsr2h,c
  7516  000B7C  50DF               	movf	indf2,w,c
  7517  000B7E  6E0B               	movwf	UART_buff_get@c,c
  7518                           
  7519                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7520  000B80  EE20 F0CA          	lfsr	2,202
  7521  000B84  5007               	movf	UART_buff_get@_this,w,c
  7522  000B86  26D9               	addwf	fsr2l,f,c
  7523  000B88  5008               	movf	UART_buff_get@_this+1,w,c
  7524  000B8A  22DA               	addwfc	fsr2h,f,c
  7525  000B8C  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7526  000B90  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7527  000B94  0E00               	movlw	0
  7528  000B96  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7529  000B98  0EC8               	movlw	200
  7530  000B9A  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7531  000B9C  EC43  F009         	call	_UART_buff_modulo_inc	;wreg free
  7532  000BA0  EE20 F0CA          	lfsr	2,202
  7533  000BA4  5007               	movf	UART_buff_get@_this,w,c
  7534  000BA6  26D9               	addwf	fsr2l,f,c
  7535  000BA8  5008               	movf	UART_buff_get@_this+1,w,c
  7536  000BAA  22DA               	addwfc	fsr2h,f,c
  7537  000BAC  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7538  000BB0  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7539                           
  7540                           ;UART.c: 86: --_this->count;
  7541  000BB4  EE20 F0CC          	lfsr	2,204
  7542  000BB8  5007               	movf	UART_buff_get@_this,w,c
  7543  000BBA  26D9               	addwf	fsr2l,f,c
  7544  000BBC  5008               	movf	UART_buff_get@_this+1,w,c
  7545  000BBE  22DA               	addwfc	fsr2h,f,c
  7546  000BC0  06DE               	decf	postinc2,f,c
  7547  000BC2  0E00               	movlw	0
  7548  000BC4  5ADD               	subwfb	postdec2,f,c
  7549                           
  7550                           ;UART.c: 87: } else {
  7551  000BC6  D002               	goto	i2l569
  7552  000BC8                     i2l2765:
  7553                           
  7554                           ;UART.c: 88: c = 0;
  7555  000BC8  0E00               	movlw	0
  7556  000BCA  6E0B               	movwf	UART_buff_get@c,c
  7557  000BCC                     i2l569:
  7558                           
  7559                           ;UART.c: 89: }
  7560                           ;UART.c: 90: return (c);
  7561  000BCC  500B               	movf	UART_buff_get@c,w,c
  7562  000BCE  0012               	return	
  7563  000BD0                     __end_of_UART_buff_get:
  7564                           	opt stack 0
  7565                           pclatu	equ	0xFFB
  7566                           pclath	equ	0xFFA
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           prodh	equ	0xFF4
  7572                           prodl	equ	0xFF3
  7573                           intcon	equ	0xFF2
  7574                           intcon2	equ	0xFF1
  7575                           indf0	equ	0xFEF
  7576                           postinc0	equ	0xFEE
  7577                           fsr0h	equ	0xFEA
  7578                           fsr0l	equ	0xFE9
  7579                           wreg	equ	0xFE8
  7580                           postdec1	equ	0xFE5
  7581                           fsr1h	equ	0xFE2
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           plusw2	equ	0xFDB
  7587                           fsr2h	equ	0xFDA
  7588                           fsr2l	equ	0xFD9
  7589                           status	equ	0xFD8
  7590                           
  7591 ;; *************** function _EUSART1_Receive_ISR *****************
  7592 ;; Defined at:
  7593 ;;		line 139 in file "UART.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;		None
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  data            1   11[COMRAM] unsigned char 
  7598 ;; Return value:  Size  Location     Type
  7599 ;;                  2  132[None  ] int 
  7600 ;; Registers used:
  7601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7602 ;; Tracked objects:
  7603 ;;		On entry : 0/0
  7604 ;;		On exit  : 0/0
  7605 ;;		Unchanged: 0/0
  7606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7607 ;;      Params:         0       0       0       0       0       0       0
  7608 ;;      Locals:         1       0       0       0       0       0       0
  7609 ;;      Temps:          0       0       0       0       0       0       0
  7610 ;;      Totals:         1       0       0       0       0       0       0
  7611 ;;Total ram usage:        1 bytes
  7612 ;; Hardware stack levels used:    1
  7613 ;; Hardware stack levels required when called:    2
  7614 ;; This function calls:
  7615 ;;		_UART_buff_put
  7616 ;; This function is called by:
  7617 ;;		_INTERRUPT_InterruptManager
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           	psect	text50
  7622  001388                     __ptext50:
  7623                           	opt stack 0
  7624  001388                     _EUSART1_Receive_ISR:
  7625                           	opt stack 22
  7626                           
  7627                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  7628                           
  7629                           ;incstack = 0
  7630  001388  A2AB               	btfss	4011,1,c	;volatile
  7631  00138A  D002               	goto	i2l600
  7632                           
  7633                           ;UART.c: 143: RC1STAbits.CREN = 0;
  7634  00138C  98AB               	bcf	4011,4,c	;volatile
  7635                           
  7636                           ;UART.c: 144: RC1STAbits.CREN = 1;
  7637  00138E  88AB               	bsf	4011,4,c	;volatile
  7638  001390                     i2l600:
  7639                           
  7640                           ;UART.c: 145: }
  7641                           ;UART.c: 146: unsigned char data = RCREG1;
  7642  001390  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  7643                           
  7644                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7645  001394  0E00               	movlw	low _input_buffer
  7646  001396  6E07               	movwf	UART_buff_put@_this,c
  7647  001398  0E02               	movlw	high _input_buffer
  7648  00139A  6E08               	movwf	UART_buff_put@_this+1,c
  7649  00139C  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  7650  0013A0  EC64  F002         	call	_UART_buff_put	;wreg free
  7651  0013A4  0012               	return		;funcret
  7652  0013A6                     __end_of_EUSART1_Receive_ISR:
  7653                           	opt stack 0
  7654                           pclatu	equ	0xFFB
  7655                           pclath	equ	0xFFA
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           intcon2	equ	0xFF1
  7664                           indf0	equ	0xFEF
  7665                           postinc0	equ	0xFEE
  7666                           fsr0h	equ	0xFEA
  7667                           fsr0l	equ	0xFE9
  7668                           wreg	equ	0xFE8
  7669                           postdec1	equ	0xFE5
  7670                           fsr1h	equ	0xFE2
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           plusw2	equ	0xFDB
  7676                           fsr2h	equ	0xFDA
  7677                           fsr2l	equ	0xFD9
  7678                           status	equ	0xFD8
  7679                           
  7680 ;; *************** function _UART_buff_put *****************
  7681 ;; Defined at:
  7682 ;;		line 68 in file "UART.c"
  7683 ;; Parameters:    Size  Location     Type
  7684 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7685 ;;		 -> output_buffer(206), input_buffer(206), 
  7686 ;;  c               1    8[COMRAM] const unsigned char 
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;		None               void
  7691 ;; Registers used:
  7692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7698 ;;      Params:         3       0       0       0       0       0       0
  7699 ;;      Locals:         0       0       0       0       0       0       0
  7700 ;;      Temps:          2       0       0       0       0       0       0
  7701 ;;      Totals:         5       0       0       0       0       0       0
  7702 ;;Total ram usage:        5 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    1
  7705 ;; This function calls:
  7706 ;;		_UART_buff_modulo_inc
  7707 ;; This function is called by:
  7708 ;;		_EUSART1_Receive_ISR
  7709 ;;		_Send_put
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text51
  7714  0004C8                     __ptext51:
  7715                           	opt stack 0
  7716  0004C8                     _UART_buff_put:
  7717                           	opt stack 22
  7718                           
  7719                           ;UART.c: 69: if (_this->count < 200) {
  7720                           
  7721                           ;incstack = 0
  7722  0004C8  EE20 F0CC          	lfsr	2,204
  7723  0004CC  5007               	movf	UART_buff_put@_this,w,c
  7724  0004CE  26D9               	addwf	fsr2l,f,c
  7725  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  7726  0004D2  22DA               	addwfc	fsr2h,f,c
  7727  0004D4  0E01               	movlw	1
  7728  0004D6  BEDB               	btfsc	plusw2,7,c
  7729  0004D8  D007               	goto	i2l2745
  7730  0004DA  0E01               	movlw	1
  7731  0004DC  50DB               	movf	plusw2,w,c
  7732  0004DE  E13A               	bnz	i2l2751
  7733  0004E0  0EC8               	movlw	200
  7734  0004E2  5CDE               	subwf	postinc2,w,c
  7735  0004E4  B0D8               	btfsc	status,0,c
  7736  0004E6  D036               	goto	i2l2751
  7737  0004E8                     i2l2745:
  7738                           
  7739                           ;UART.c: 70: _this->buf[_this->head] = c;
  7740  0004E8  EE20 F0C8          	lfsr	2,200
  7741  0004EC  5007               	movf	UART_buff_put@_this,w,c
  7742  0004EE  26D9               	addwf	fsr2l,f,c
  7743  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  7744  0004F2  22DA               	addwfc	fsr2h,f,c
  7745  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7746  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7747  0004FC  500A               	movf	??_UART_buff_put,w,c
  7748  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  7749  000500  6ED9               	movwf	fsr2l,c
  7750  000502  500B               	movf	??_UART_buff_put+1,w,c
  7751  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  7752  000506  6EDA               	movwf	fsr2h,c
  7753  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  7754                           
  7755                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7756  00050C  EE20 F0C8          	lfsr	2,200
  7757  000510  5007               	movf	UART_buff_put@_this,w,c
  7758  000512  26D9               	addwf	fsr2l,f,c
  7759  000514  5008               	movf	UART_buff_put@_this+1,w,c
  7760  000516  22DA               	addwfc	fsr2h,f,c
  7761  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7762  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7763  000520  0E00               	movlw	0
  7764  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7765  000524  0EC8               	movlw	200
  7766  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7767  000528  EC43  F009         	call	_UART_buff_modulo_inc	;wreg free
  7768  00052C  EE20 F0C8          	lfsr	2,200
  7769  000530  5007               	movf	UART_buff_put@_this,w,c
  7770  000532  26D9               	addwf	fsr2l,f,c
  7771  000534  5008               	movf	UART_buff_put@_this+1,w,c
  7772  000536  22DA               	addwfc	fsr2h,f,c
  7773  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7774  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7775                           
  7776                           ;UART.c: 72: ++_this->count;
  7777  000540  EE20 F0CC          	lfsr	2,204
  7778  000544  5007               	movf	UART_buff_put@_this,w,c
  7779  000546  26D9               	addwf	fsr2l,f,c
  7780  000548  5008               	movf	UART_buff_put@_this+1,w,c
  7781  00054A  22DA               	addwfc	fsr2h,f,c
  7782  00054C  2ADE               	incf	postinc2,f,c
  7783  00054E  0E00               	movlw	0
  7784  000550  22DD               	addwfc	postdec2,f,c
  7785                           
  7786                           ;UART.c: 73: } else {
  7787  000552  0012               	return	
  7788  000554                     i2l2751:
  7789                           
  7790                           ;UART.c: 74: _this->buf[_this->head] = c;
  7791  000554  EE20 F0C8          	lfsr	2,200
  7792  000558  5007               	movf	UART_buff_put@_this,w,c
  7793  00055A  26D9               	addwf	fsr2l,f,c
  7794  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  7795  00055E  22DA               	addwfc	fsr2h,f,c
  7796  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7797  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7798  000568  500A               	movf	??_UART_buff_put,w,c
  7799  00056A  2407               	addwf	UART_buff_put@_this,w,c
  7800  00056C  6ED9               	movwf	fsr2l,c
  7801  00056E  500B               	movf	??_UART_buff_put+1,w,c
  7802  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  7803  000572  6EDA               	movwf	fsr2h,c
  7804  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  7805                           
  7806                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7807  000578  EE20 F0C8          	lfsr	2,200
  7808  00057C  5007               	movf	UART_buff_put@_this,w,c
  7809  00057E  26D9               	addwf	fsr2l,f,c
  7810  000580  5008               	movf	UART_buff_put@_this+1,w,c
  7811  000582  22DA               	addwfc	fsr2h,f,c
  7812  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7813  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7814  00058C  0E00               	movlw	0
  7815  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7816  000590  0EC8               	movlw	200
  7817  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7818  000594  EC43  F009         	call	_UART_buff_modulo_inc	;wreg free
  7819  000598  EE20 F0C8          	lfsr	2,200
  7820  00059C  5007               	movf	UART_buff_put@_this,w,c
  7821  00059E  26D9               	addwf	fsr2l,f,c
  7822  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  7823  0005A2  22DA               	addwfc	fsr2h,f,c
  7824  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7825  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7826                           
  7827                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7828  0005AC  EE20 F0CA          	lfsr	2,202
  7829  0005B0  5007               	movf	UART_buff_put@_this,w,c
  7830  0005B2  26D9               	addwf	fsr2l,f,c
  7831  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  7832  0005B6  22DA               	addwfc	fsr2h,f,c
  7833  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7834  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7835  0005C0  0E00               	movlw	0
  7836  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7837  0005C4  0EC8               	movlw	200
  7838  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7839  0005C8  EC43  F009         	call	_UART_buff_modulo_inc	;wreg free
  7840  0005CC  EE20 F0CA          	lfsr	2,202
  7841  0005D0  5007               	movf	UART_buff_put@_this,w,c
  7842  0005D2  26D9               	addwf	fsr2l,f,c
  7843  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  7844  0005D6  22DA               	addwfc	fsr2h,f,c
  7845  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7846  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7847  0005E0  0012               	return	
  7848  0005E2                     __end_of_UART_buff_put:
  7849                           	opt stack 0
  7850                           pclatu	equ	0xFFB
  7851                           pclath	equ	0xFFA
  7852                           tblptru	equ	0xFF8
  7853                           tblptrh	equ	0xFF7
  7854                           tblptrl	equ	0xFF6
  7855                           tablat	equ	0xFF5
  7856                           prodh	equ	0xFF4
  7857                           prodl	equ	0xFF3
  7858                           intcon	equ	0xFF2
  7859                           intcon2	equ	0xFF1
  7860                           indf0	equ	0xFEF
  7861                           postinc0	equ	0xFEE
  7862                           fsr0h	equ	0xFEA
  7863                           fsr0l	equ	0xFE9
  7864                           wreg	equ	0xFE8
  7865                           postdec1	equ	0xFE5
  7866                           fsr1h	equ	0xFE2
  7867                           fsr1l	equ	0xFE1
  7868                           indf2	equ	0xFDF
  7869                           postinc2	equ	0xFDE
  7870                           postdec2	equ	0xFDD
  7871                           plusw2	equ	0xFDB
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function _UART_buff_modulo_inc *****************
  7877 ;; Defined at:
  7878 ;;		line 106 in file "UART.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  value           2    0[COMRAM] const unsigned int 
  7881 ;;  modulus         2    2[COMRAM] const unsigned int 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;  my_value        2    4[COMRAM] unsigned int 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  2    0[COMRAM] unsigned int 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7893 ;;      Params:         4       0       0       0       0       0       0
  7894 ;;      Locals:         2       0       0       0       0       0       0
  7895 ;;      Temps:          0       0       0       0       0       0       0
  7896 ;;      Totals:         6       0       0       0       0       0       0
  7897 ;;Total ram usage:        6 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; This function calls:
  7900 ;;		Nothing
  7901 ;; This function is called by:
  7902 ;;		_UART_buff_put
  7903 ;;		_UART_buff_get
  7904 ;; This function uses a non-reentrant model
  7905 ;;
  7906                           
  7907                           	psect	text52
  7908  001286                     __ptext52:
  7909                           	opt stack 0
  7910  001286                     _UART_buff_modulo_inc:
  7911                           	opt stack 22
  7912                           
  7913                           ;UART.c: 107: unsigned int my_value = value + 1;
  7914                           
  7915                           ;incstack = 0
  7916  001286  0E01               	movlw	1
  7917  001288  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7918  00128A  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7919  00128C  0E00               	movlw	0
  7920  00128E  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7921  001290  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7922                           
  7923                           ;UART.c: 108: if (my_value >= modulus) {
  7924  001292  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7925  001294  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7926  001296  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7927  001298  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7928  00129A  A0D8               	btfss	status,0,c
  7929  00129C  D004               	goto	i2l2489
  7930                           
  7931                           ;UART.c: 109: my_value = 0;
  7932  00129E  0E00               	movlw	0
  7933  0012A0  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7934  0012A2  0E00               	movlw	0
  7935  0012A4  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7936  0012A6                     i2l2489:
  7937                           
  7938                           ;UART.c: 110: }
  7939                           ;UART.c: 111: return (my_value);
  7940  0012A6  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7941  0012AA  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7942  0012AE  0012               	return	
  7943  0012B0                     __end_of_UART_buff_modulo_inc:
  7944                           	opt stack 0
  7945                           pclatu	equ	0xFFB
  7946                           pclath	equ	0xFFA
  7947                           tblptru	equ	0xFF8
  7948                           tblptrh	equ	0xFF7
  7949                           tblptrl	equ	0xFF6
  7950                           tablat	equ	0xFF5
  7951                           prodh	equ	0xFF4
  7952                           prodl	equ	0xFF3
  7953                           intcon	equ	0xFF2
  7954                           intcon2	equ	0xFF1
  7955                           indf0	equ	0xFEF
  7956                           postinc0	equ	0xFEE
  7957                           fsr0h	equ	0xFEA
  7958                           fsr0l	equ	0xFE9
  7959                           wreg	equ	0xFE8
  7960                           postdec1	equ	0xFE5
  7961                           fsr1h	equ	0xFE2
  7962                           fsr1l	equ	0xFE1
  7963                           indf2	equ	0xFDF
  7964                           postinc2	equ	0xFDE
  7965                           postdec2	equ	0xFDD
  7966                           plusw2	equ	0xFDB
  7967                           fsr2h	equ	0xFDA
  7968                           fsr2l	equ	0xFD9
  7969                           status	equ	0xFD8
  7970                           pclatu	equ	0xFFB
  7971                           pclath	equ	0xFFA
  7972                           tblptru	equ	0xFF8
  7973                           tblptrh	equ	0xFF7
  7974                           tblptrl	equ	0xFF6
  7975                           tablat	equ	0xFF5
  7976                           prodh	equ	0xFF4
  7977                           prodl	equ	0xFF3
  7978                           intcon	equ	0xFF2
  7979                           intcon2	equ	0xFF1
  7980                           indf0	equ	0xFEF
  7981                           postinc0	equ	0xFEE
  7982                           fsr0h	equ	0xFEA
  7983                           fsr0l	equ	0xFE9
  7984                           wreg	equ	0xFE8
  7985                           postdec1	equ	0xFE5
  7986                           fsr1h	equ	0xFE2
  7987                           fsr1l	equ	0xFE1
  7988                           indf2	equ	0xFDF
  7989                           postinc2	equ	0xFDE
  7990                           postdec2	equ	0xFDD
  7991                           plusw2	equ	0xFDB
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996                           	psect	rparam
  7997  0000                     pclatu	equ	0xFFB
  7998                           pclath	equ	0xFFA
  7999                           tblptru	equ	0xFF8
  8000                           tblptrh	equ	0xFF7
  8001                           tblptrl	equ	0xFF6
  8002                           tablat	equ	0xFF5
  8003                           prodh	equ	0xFF4
  8004                           prodl	equ	0xFF3
  8005                           intcon	equ	0xFF2
  8006                           intcon2	equ	0xFF1
  8007                           indf0	equ	0xFEF
  8008                           postinc0	equ	0xFEE
  8009                           fsr0h	equ	0xFEA
  8010                           fsr0l	equ	0xFE9
  8011                           wreg	equ	0xFE8
  8012                           postdec1	equ	0xFE5
  8013                           fsr1h	equ	0xFE2
  8014                           fsr1l	equ	0xFE1
  8015                           indf2	equ	0xFDF
  8016                           postinc2	equ	0xFDE
  8017                           postdec2	equ	0xFDD
  8018                           plusw2	equ	0xFDB
  8019                           fsr2h	equ	0xFDA
  8020                           fsr2l	equ	0xFD9
  8021                           status	equ	0xFD8
  8022                           
  8023                           	psect	temp
  8024  000045                     btemp:
  8025                           	opt stack 0
  8026  000045                     	ds	1
  8027  0000                     int$flags	set	btemp
  8028                           pclatu	equ	0xFFB
  8029                           pclath	equ	0xFFA
  8030                           tblptru	equ	0xFF8
  8031                           tblptrh	equ	0xFF7
  8032                           tblptrl	equ	0xFF6
  8033                           tablat	equ	0xFF5
  8034                           prodh	equ	0xFF4
  8035                           prodl	equ	0xFF3
  8036                           intcon	equ	0xFF2
  8037                           intcon2	equ	0xFF1
  8038                           indf0	equ	0xFEF
  8039                           postinc0	equ	0xFEE
  8040                           fsr0h	equ	0xFEA
  8041                           fsr0l	equ	0xFE9
  8042                           wreg	equ	0xFE8
  8043                           postdec1	equ	0xFE5
  8044                           fsr1h	equ	0xFE2
  8045                           fsr1l	equ	0xFE1
  8046                           indf2	equ	0xFDF
  8047                           postinc2	equ	0xFDE
  8048                           postdec2	equ	0xFDD
  8049                           plusw2	equ	0xFDB
  8050                           fsr2h	equ	0xFDA
  8051                           fsr2l	equ	0xFD9
  8052                           status	equ	0xFD8


Data Sizes:
    Strings     41
    Constant    480
    Data        10
    BSS         957
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     148
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[15]), STR_3(CODE[16]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1495(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _ledDebug->_time_Set
    _ledDebug->_time_get
    _Splash->_gotoXy
    _gotoXy->_LCDwrite
    _NokiaStr->_LcdCharacter
    _LcdCharacter->_LCDwrite
    _FastTransfer_buffer_flush->_memset
    _CRCcheck->_crcBufS_get
    _CRCcheck->_crcBufS_status_put
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _SYSTEM_Initialize->_TMR0_Initialize
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondChargerAsECU->_sendData
    _SetCharger->_printf
    _Splash->_NokiaStr
    _NokiaStr->_LcdCharacter
    _SetBMM->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ToSend->_FastTransfer_buffer_put

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   33154
                              _Delay
                         _NokiaStart
                  _SYSTEM_Initialize
                             _SetBMM
                             _Splash
                           _clearLcd
                           _ledDebug
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12911
                          _Precharge
                         _SetCharger
                        _receiveData
                _respondChargerAsECU
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  1     1      0    5817
                                              8 BANK0      1     1      0
                              _Delay
                      _GetPowerState
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _GetPowerState                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     819
                                             32 COMRAM     3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0    1005
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0     130
                           _time_Set
                           _time_get
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Splash                                               0     0      0    3497
                           _NokiaStr
                             _gotoXy
 ---------------------------------------------------------------------------------
 (2) _gotoXy                                               2     1      1    1523
                                             34 COMRAM     2     1      1
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _NokiaStr                                             2     0      2    1974
                                              3 BANK0      2     0      2
                       _LcdCharacter
 ---------------------------------------------------------------------------------
 (3) _LcdCharacter                                         5     5      0    1755
                                             34 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SetBMM                                               0     0      0   11087
                              _Delay
                             _ToSend
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                             34 COMRAM     1     1      0
                                              4 BANK0      4     4      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              9 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              2 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1982
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                      _GetPowerState (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    3384
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0    1307
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1239
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     838
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _SetBMM
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
       _GetPowerState (ARG)
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _sendData
       _CRC8
       _FastTransfer_buffer_flush
         _memset
       _crcBufS_put
   _Splash
     _NokiaStr
       _LcdCharacter
         _LCDwrite
           _SPI1_Exchange8bit
           ___wmul (ARG)
         ___wmul
     _gotoXy
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _clearLcd
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _ledDebug
     _time_Set
     _time_get
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondChargerAsECU
       _Delay
       _GetPowerState
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetPowerState (ARG)
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      94       4       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     40A       9        0.0%
DATA                 0      0     40A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun May 15 10:42:27 2016

                      _SPI1_Exchange8bit 13FE        __end_of_FastTransfer_buffer_flush 0EB6  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l50 1052  
                   __end_of_LcdCharacter 0C5C                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l410 0FEA                                      l512 0A16  
                                    l188 1406                                      l524 0AAA  
                                    l436 00FC                                      l652 09BE  
                                    l681 107E                                      l755 13B2  
                                    l667 0A0C                                      l659 09CA  
                                    l692 108A                                      l757 13B4  
                                    l687 1084                                      l697 1090  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                    ??_SPI1_Exchange8bit 001B     FastTransfer_buffer_flush@clearBuffer 00D2  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_LVP$OFF 000000  
                                   l3201 08A4                                     l3113 11E2  
                                   l3107 127C                                     l3123 0FBE  
                                   l3117 11F2                                     l3301 0784  
                                   l3303 07A6                                     l3225 0F7E  
                                   l3129 0FD4                                     l3137 0FF0  
                                   l3209 092A                                     l3401 023A  
                                   l3313 0BFE                                     l3323 12E0  
                                   l3139 0FF6                                     l3403 024E  
                                   l3083 1042                                     l3229 0F9A  
                                   l3181 05F6                                     l3253 0A18  
                                   l3237 0D08                                     l3309 0BE8  
                                   l3327 12F0                                     l3159 037C  
                                   l3271 0AA2                                     l3415 02D4  
                                   l3239 0D0E                                     l3319 0C50  
                                   l3095 1074                                     l3193 068A  
                                   l3177 05EC                                     l3257 0A2E  
                                   l3425 02E0                                     l3353 00B2  
                                   l3097 1076                                     l3267 0A82  
                                   l3363 00F2                                     l3523 11AE  
                                   l3283 06F6                                     l3437 0344  
                                   l3445 0350                                     l3453 098C  
                                   l3293 0732                                     l3285 06FE  
                                   l3527 11C4                                     l2903 116E  
                                   l3471 09F0                                     l3279 06E2  
                                   l3615 102A                                     l3393 019A  
                                   l3457 09A2                                     l2497 1096  
                                   l3297 075C                                     l3617 1036  
                                   l3467 09DA                                     l3491 0EEA  
                                   l3399 0234                                     l3569 0DD2  
                   receiveData@crcHolder 00DF                                     STR_1 7FFB  
                                   STR_2 7FFB                                     STR_3 7FD5  
                                   STR_4 7FE5                                     STR_5 7FF4  
                                   _CRC8 0FB8                                     u2030 0884  
                                   u2051 037A                                     _LATA 000F89  
                                   u2230 0752                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u2240 077C  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2237 0748                                     u2247 0772  
                                   u2361 013E                                     u1690 116C  
                                   u2667 0F84                                     i2l62 11A8  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART2_Write 1040                                     _main 1002  
                  ??_respondChargerAsECU 00D8                          _TMR0_StartTimer 144E  
                                   _time 0026                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04C8                                     start 00AC  
              __end_of_SPI1_Exchange8bit 140E                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 11AC                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 1230  
                       __end_of_CRCcheck 0AAC           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 141C                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l140 004E  
                                  i2l142 005A                                    i2l144 0066  
                                  i2l148 0070                         __end_of_LCDwrite 13C0  
                                  i2l600 1390                                    i2l569 0BCC  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 0F6C  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 00EB  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 111C  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _Start 002A  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 0088  
                         __CFG_EBTRB$OFF 000000                                    _group 002C  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 1436  
                         ?_EUSART2_Write 0001                                    tablat 000FF5  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 1002                          CRCcheck@SentCRC 00D2  
                        __initialization 0C5C                             __end_of_main 1040  
                             ToSend@what 00D2                                   ??_CRC8 001E  
                      LcdCharacter@index 00D1              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0026                         __end_of_NokiaStr 11D8  
                          __activetblptr 000002                            SetMux@channel 001B  
                      SetCharger@Current 0021                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001                               _SetCharger 0EB6  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 1452  
             __end_of_EUSART2_Initialize 111C                 _eusart2TxBufferRemaining 0043  
                             Precharge@i 00D1                        SetCharger@Voltage 0022  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 0AAC                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   Delay@i 0020  
                         __CFG_WDTEN$OFF 000000                                   i2l2751 0554  
                                 i2l2489 12A6                                   i2l2745 04E8  
                                 i2l2833 1258                                   i2l2825 1238  
            UART_buff_modulo_inc@modulus 0003                                   i2l2819 11A4  
                                 i2l2765 0BC8                                   i2l2845 1146  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                  SPI1_Exchange8bit@data 001B                         __end_of_clearLcd 1300  
             __size_of_SPI1_Exchange8bit 0010                         __end_of_ledDebug 117E  
                                 _SetBMM 0D5E                           __CFG_XINST$OFF 000000  
                  __size_of_LcdCharacter 008C                                   _ToSend 136A  
                                 _SetMux 107A                         crcBufS_get@_this 001B  
                  __end_of_GetPowerState 144E              ??_FastTransfer_buffer_flush 0023  
                                 _Splash 10B2                            _output_buffer 0300  
                       crcBufS_get@space 001E                                   ___wmul 1326  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                       ?_TMR0_Initialize 0001                                   _gotoXy 12B0  
                                 _memset 11D8                                   clear_0 0C62  
                                 clear_1 0C6E                                   clear_2 0C7A  
                                 clear_3 0C86                                   clear_4 0C92  
                                 clear_5 0C9E                       __size_of_Precharge 00A6  
                                 _printf 06D4                                   _rx_len 0040  
                       __end_of_sendData 0D5E                             __pdataCOMRAM 0044  
                       __end_of_time_Set 136A                         __end_of_time_get 13FE  
                           __mediumconst 7DF4                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174                     _EUSART2_Transmit_ISR 117E  
           __end_of_UART_buff_modulo_inc 12B0                          ??_EUSART2_Write 001B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart2RxBuffer 0093  
                           _LcdCharacter 0BD0                        _SYSTEM_Initialize 13C0  
                        _eusart2TxBuffer 009B                               __accesstop 0060  
                __end_of__initialization 0CD6                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                           ?_updateComms 0001                                ?_LCDwrite 0021  
                          __end_of_Delay 0FB8                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 089A                             __pidataBANK0 1440  
                    ??_SYSTEM_Initialize 001D                         crcBufS_put@_this 001B  
 __end_of_FastTransfer_buffer_modulo_inc 1286  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 125C                        ??_SPI1_Initialize 001B  
                            NokiaStr@str 00D3                            __end_of_putch 1440  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00D4  
                  LcdCharacter@character 00D0                       UART_buff_get@_this 0007  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 0BD0  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 05E2  
                                ??_Delay 001F                              ?_SetCharger 0021  
                  ?_EUSART2_Transmit_ISR 0001              __end_of_EUSART1_Receive_ISR 13A6  
              _FastTransfer_buffer_flush 0E4A                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                       ?_TMR0_StartTimer 0001                __end_of_SYSTEM_Initialize 13D6  
                 receiveData@holder_1495 00E4                                  ??_putch 001C  
                    _addressErrorCounter 00AF                              ?_NokiaStart 0001  
                          _eusart2RxHead 0036                            _eusart2TxHead 0038  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FD5  
                          _eusart2RxTail 0037                            _eusart2TxTail 0039  
                        __CFG_PLLCFG$OFF 000000                        __end_of_Precharge 0A16  
                             ??_CRCcheck 0025                     ??_crcBufS_status_put 001F  
                             __pnvCOMRAM 0041                  __size_of_UART_buff_size 0016  
                              ?_NokiaStr 00D3                                  ?_SetBMM 0001  
                             ??_LCDwrite 0022                     __size_of_receiveData 02A4  
                                ?_ToSend 00D2                                  ?_SetMux 0001  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Splash 0001  
                                ?___wmul 001B                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_gotoXy 0023  
                                ?_memset 001B                               _crc_buffer 00BF  
                                ?_printf 001D                         time_Set@WhatTime 001D  
                     UART_buff_put@_this 0007                                ?_clearLcd 0001  
                                _LEDtime 00A3                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 125C             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                              ?_ledDebug 0001                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00D4                      _receiveArrayAddress 002E  
                                _SSP1BUF 000FC9              __end_of_respondChargerAsECU 0E4A  
                              ?_sendData 0001                        _alignErrorCounter 00B1  
                             ??_NokiaStr 0025                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_SetBMM 0078                                ?_time_Set 001B  
                        __size_of_ToSend 001E                          __size_of_SetMux 0038  
                    __size_of_SetCharger 0066                                ?_time_get 001B  
                                _PowerOn 0033                                _AKNAKsend 0032  
                        __size_of_Splash 0036                     _UART_buff_modulo_inc 1286  
                        __size_of___wmul 0026                                  _calc_CS 0034  
                                __pcinit 0C5C                      __size_of_NokiaStart 0092  
                        __size_of_gotoXy 0028                          __size_of_memset 002C  
                                __ramtop 0600                                  __ptext0 1002  
                                __ptext1 1300                                  __ptext2 0DD6  
                                __ptext3 144A                                  __ptext4 0EB6  
                                __ptext5 06D4                                  __ptext6 1436  
                                __ptext7 1040                                  __ptext8 107A  
                                __ptext9 0970                          __size_of_printf 00EE  
                              _T0CONbits 000FD5                    _OSCILLATOR_Initialize 140E  
                 ??_EUSART2_Transmit_ISR 0001                  _FastTransfer_buffer_put 0354  
                  CRCcheck@calculatedCRC 00D3                 ??_PIN_MANAGER_Initialize 001B  
                             ??_clearLcd 0023             crcBufS_status_put@wantedTime 0023  
                             ??_ledDebug 001E                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0016  
                   end_of_initialization 0CD6                                Delay@wait 001B  
                                gotoXy@x 0024                                  gotoXy@y 0023  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7DF4  
                             ??_sendData 0023                       _EUSART2_Initialize 10E8  
                             ??_time_Set 001D                               ??_time_get 001D  
                                printf@c 00D3                                  printf@f 001D  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 0026  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                    CRCcheck@arrayHolder 00D4                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 00B5                               _rx_address 003E  
                           LCDwrite@data 0021                             LCDwrite@mode 0022  
                              _TRISBbits 000F93                     ??_EUSART2_Initialize 001B  
     __size_of_FastTransfer_buffer_flush 006C                          _SPI1_Initialize 141C  
                         _UART_buff_size 13D6                      __end_of_crcBufS_get 06D4  
                    __end_of_crcBufS_put 089A                        __size_of_CRCcheck 0096  
                        Precharge@i_1779 00D3                            _moduleAddress 003C  
                   _timer0ReloadVal16bit 0041                           __end_of_SetBMM 0DD6  
                             CRCcheck@rt 00D7                           __end_of_ToSend 1388  
                         __end_of_SetMux 10B2                        __size_of_LCDwrite 001A  
           __end_of_INTERRUPT_Initialize 1436                           __end_of_Splash 10E8  
                        _crcErrorCounter 00B3                           __end_of___wmul 134C  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1452  
              ??_FastTransfer_buffer_put 00D0                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 12D8                           __end_of_memset 1204  
                      crcBufS_put@status 001F                           __end_of_printf 07C2  
                           receiveData@r 00E9                             receiveData@u 00E7  
                           ??_SetCharger 0023                      start_initialization 0C5C  
               __size_of_TMR0_Initialize 002C          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 00D0                   __size_of_GetPowerState 0004  
                            putch@txData 001C                             ??_NokiaStart 0025  
                  __end_of_EUSART2_Write 107A                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 13EC                           UART_buff_put@c 0009  
                               ??_SetBMM 0026                                _Precharge 0970  
                               ??_ToSend 0026                                 ??_SetMux 001B  
                 ??_UART_buff_modulo_inc 0005                                 CRC8@data 001B  
                               ??_Splash 0025                          crcBufS_get@time 001D  
                      __size_of_NokiaStr 002C                       __end_of_SetCharger 0F1C  
                               ??___wmul 001F                              __pdataBANK0 00EB  
                               ??_gotoXy 0024                                 ??_memset 0021  
                               ??_printf 0021                       __end_of_NokiaStart 0B3E  
                         _eusart2RxCount 0035                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00D0  
                __end_of_SPI1_Initialize 142A                        __size_of_clearLcd 0028  
                            _crcBufS_get 05E2                              _crcBufS_put 07C2  
                    EUSART2_Write@txData 001B                        __size_of_ledDebug 0030  
                        ?_UART_buff_size 0001             __size_of_EUSART1_Receive_ISR 001E  
                          ??_receiveData 00D9              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00D5                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                             ?_Precharge 0001                   _PIN_MANAGER_Initialize 0F1C  
                      __size_of_sendData 007A                                __pintcode 0008  
                          __pmediumconst 7DF4                            _GetPowerState 144A  
                      __size_of_time_Set 001E                        __size_of_time_get 0012  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 142A  
                           _receiveArray 0060                        ??_TMR0_Initialize 001B  
           __size_of_EUSART2_Receive_ISR 002C                                 _CRCcheck 0A16  
                         ___wmul@product 001F                                 _LATBbits 000F8A  
                               _LATCbits 000F8B                      UART_buff_size@_this 0001  
           __size_of_respondChargerAsECU 0074                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 13A6  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u156_40 0B5C  
                               i2u165_40 1136                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                           ?_GetPowerState 0001  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0354                                 _SSP1CON1 000FC6  
                               _SSP1STAT 000FC7           FastTransfer_buffer_flush@_this 00D0  
                           _input_buffer 0200                                _rx_buffer 0400  
                      ___wmul@multiplier 001B                              _lastLEDTime 00A7  
                             printf@flag 00D0                            _UART_buff_get 0B3E  
                          _UART_buff_put 04C8                           Precharge@OnOff 00D0  
          __size_of_EUSART2_Transmit_ISR 002E                         ?_SPI1_Initialize 0001  
                         SetCharger@mode 0023                              _INTCON2bits 000FF1  
                              copy_data0 0CB8                    ?_INTERRUPT_Initialize 0001  
                          ?_LcdCharacter 0001                        _sendStructAddress 0030  
                          ??_updateComms 0026                                 _NokiaStr 11AC  
                               __Hrparam 0000                              ??_Precharge 0024  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                          time_Set@value 001B                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                         ?_UART_buff_get 0007                           ?_UART_buff_put 0007  
                            CRC8@extract 001F                                sendData@i 00D6  
                               _clearLcd 12D8                                 _ledDebug 114E  
               crcBufS_status_put@status 001E                                 __ptext10 114E  
                               __ptext11 13EC                                 __ptext20 07C2  
                               __ptext12 134C                                 __ptext21 0E4A  
                               __ptext13 10B2                                 __ptext30 125C  
                               __ptext22 11D8                                 __ptext14 12B0  
                               __ptext31 13C0                                 __ptext23 00B0  
                               __ptext15 11AC                                 __ptext40 13A6  
                               __ptext32 1204                                 __ptext24 0A16  
                               __ptext16 0BD0                                 __ptext41 13FE  
                               __ptext33 144E                                 __ptext25 089A  
                               __ptext17 1326                                 __ptext50 1388  
                               __ptext42 141C                                 __ptext34 0F1C  
                               __ptext26 05E2                                 __ptext18 0D5E  
                               __ptext51 04C8                                 __ptext43 0F6C  
                               __ptext35 140E                                 __ptext27 0FB8  
                               __ptext19 0CE4                                 __ptext52 1286  
                               __ptext36 142A                                 __ptext28 136A  
                               __ptext45 117E                                 __ptext37 10E8  
                               __ptext29 0354                                 __ptext46 1230  
                               __ptext38 0AAC                                 __ptext47 111C  
                               __ptext39 12D8                                 __ptext48 13D6  
                               __ptext49 0B3E                             _SSP1CON1bits 000FC6  
                         ??_LcdCharacter 0023                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 003D                            __size_of_main 003E  
                            _receiveData 00B0                           _Transmit_stall 0044  
                               _sendData 0CE4                                 _talkTime 00AB  
                        ??_GetPowerState 001B                               _RC1STAbits 000FAB  
                               _time_Set 134C                               _RC2STAbits 000F71  
                            clearLcd@res 0023                                 _time_get 13EC  
                             _FONTLOOKUP 7DF5                                 int$flags 0045  
                           _serial_write 00BD                      __end_of_updateComms 1326  
     __end_of_INTERRUPT_InterruptManager 00AC               _INTERRUPT_InterruptManager 0008  
                           _SSP1STATbits 000FC7                      _EUSART1_Receive_ISR 1388  
                      receiveData@holder 00E1                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 0001                         ??_UART_buff_size 0003  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 00B7                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 114E  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 00D0  
                            _serial_peek 00B9                              _serial_read 00BB  
               ?_FastTransfer_buffer_put 0021                                 printf@ap 00D1  
                               printf@cp 00D4            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0009                          ??_UART_buff_put 000A  
                 __size_of_EUSART2_Write 003A                      _EUSART2_Receive_ISR 1230  
  FastTransfer_buffer_modulo_inc@modulus 001D                      _respondChargerAsECU 0DD6  
                 crcBufS_status_put@time 001D                          _TMR0_Initialize 1204  
              receiveData@crcHolder_1496 00E0                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003B               __end_of_crcBufS_status_put 0970  
                  ??_EUSART1_Receive_ISR 000C           __end_of_PIN_MANAGER_Initialize 0F6C  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                   ?_EUSART2_Receive_ISR 0001                        __CFG_FOSC$INTIO67 000000  
                   ?_respondChargerAsECU 0001                              _updateComms 1300  
