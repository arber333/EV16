

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Thu Apr 21 23:04:49 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000FFC                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for _Transmit_stall
    66  000FFC  01                 	db	1
    67                           
    68                           	psect	mediumconst
    69  007E36                     __pmediumconst:
    70                           	opt stack 0
    71  007E36  00                 	db	0
    72  007E37                     _FONTLOOKUP:
    73                           	opt stack 0
    74  007E37  00                 	db	0
    75  007E38  00                 	db	0
    76  007E39  00                 	db	0
    77  007E3A  00                 	db	0
    78  007E3B  00                 	db	0
    79  007E3C  00                 	db	0
    80  007E3D  00                 	db	0
    81  007E3E  2F                 	db	47
    82  007E3F  00                 	db	0
    83  007E40  00                 	db	0
    84  007E41  00                 	db	0
    85  007E42  07                 	db	7
    86  007E43  00                 	db	0
    87  007E44  07                 	db	7
    88  007E45  00                 	db	0
    89  007E46  14                 	db	20
    90  007E47  7F                 	db	127
    91  007E48  14                 	db	20
    92  007E49  7F                 	db	127
    93  007E4A  14                 	db	20
    94  007E4B  24                 	db	36
    95  007E4C  2A                 	db	42
    96  007E4D  7F                 	db	127
    97  007E4E  2A                 	db	42
    98  007E4F  12                 	db	18
    99  007E50  C4                 	db	196
   100  007E51  C8                 	db	200
   101  007E52  10                 	db	16
   102  007E53  26                 	db	38
   103  007E54  46                 	db	70
   104  007E55  36                 	db	54
   105  007E56  49                 	db	73
   106  007E57  55                 	db	85
   107  007E58  22                 	db	34
   108  007E59  50                 	db	80
   109  007E5A  00                 	db	0
   110  007E5B  05                 	db	5
   111  007E5C  03                 	db	3
   112  007E5D  00                 	db	0
   113  007E5E  00                 	db	0
   114  007E5F  00                 	db	0
   115  007E60  1C                 	db	28
   116  007E61  22                 	db	34
   117  007E62  41                 	db	65
   118  007E63  00                 	db	0
   119  007E64  00                 	db	0
   120  007E65  41                 	db	65
   121  007E66  22                 	db	34
   122  007E67  1C                 	db	28
   123  007E68  00                 	db	0
   124  007E69  14                 	db	20
   125  007E6A  08                 	db	8
   126  007E6B  3E                 	db	62
   127  007E6C  08                 	db	8
   128  007E6D  14                 	db	20
   129  007E6E  08                 	db	8
   130  007E6F  08                 	db	8
   131  007E70  3E                 	db	62
   132  007E71  08                 	db	8
   133  007E72  08                 	db	8
   134  007E73  00                 	db	0
   135  007E74  00                 	db	0
   136  007E75  50                 	db	80
   137  007E76  30                 	db	48
   138  007E77  00                 	db	0
   139  007E78  10                 	db	16
   140  007E79  10                 	db	16
   141  007E7A  10                 	db	16
   142  007E7B  10                 	db	16
   143  007E7C  10                 	db	16
   144  007E7D  00                 	db	0
   145  007E7E  60                 	db	96
   146  007E7F  60                 	db	96
   147  007E80  00                 	db	0
   148  007E81  00                 	db	0
   149  007E82  20                 	db	32
   150  007E83  10                 	db	16
   151  007E84  08                 	db	8
   152  007E85  04                 	db	4
   153  007E86  02                 	db	2
   154  007E87  3E                 	db	62
   155  007E88  51                 	db	81
   156  007E89  49                 	db	73
   157  007E8A  45                 	db	69
   158  007E8B  3E                 	db	62
   159  007E8C  00                 	db	0
   160  007E8D  42                 	db	66
   161  007E8E  7F                 	db	127
   162  007E8F  40                 	db	64
   163  007E90  00                 	db	0
   164  007E91  42                 	db	66
   165  007E92  61                 	db	97
   166  007E93  51                 	db	81
   167  007E94  49                 	db	73
   168  007E95  46                 	db	70
   169  007E96  21                 	db	33
   170  007E97  41                 	db	65
   171  007E98  45                 	db	69
   172  007E99  4B                 	db	75
   173  007E9A  31                 	db	49
   174  007E9B  18                 	db	24
   175  007E9C  14                 	db	20
   176  007E9D  12                 	db	18
   177  007E9E  7F                 	db	127
   178  007E9F  10                 	db	16
   179  007EA0  27                 	db	39
   180  007EA1  45                 	db	69
   181  007EA2  45                 	db	69
   182  007EA3  45                 	db	69
   183  007EA4  39                 	db	57
   184  007EA5  3C                 	db	60
   185  007EA6  4A                 	db	74
   186  007EA7  49                 	db	73
   187  007EA8  49                 	db	73
   188  007EA9  30                 	db	48
   189  007EAA  01                 	db	1
   190  007EAB  71                 	db	113
   191  007EAC  09                 	db	9
   192  007EAD  05                 	db	5
   193  007EAE  03                 	db	3
   194  007EAF  36                 	db	54
   195  007EB0  49                 	db	73
   196  007EB1  49                 	db	73
   197  007EB2  49                 	db	73
   198  007EB3  36                 	db	54
   199  007EB4  06                 	db	6
   200  007EB5  49                 	db	73
   201  007EB6  49                 	db	73
   202  007EB7  29                 	db	41
   203  007EB8  1E                 	db	30
   204  007EB9  00                 	db	0
   205  007EBA  36                 	db	54
   206  007EBB  36                 	db	54
   207  007EBC  00                 	db	0
   208  007EBD  00                 	db	0
   209  007EBE  00                 	db	0
   210  007EBF  56                 	db	86
   211  007EC0  36                 	db	54
   212  007EC1  00                 	db	0
   213  007EC2  00                 	db	0
   214  007EC3  08                 	db	8
   215  007EC4  14                 	db	20
   216  007EC5  22                 	db	34
   217  007EC6  41                 	db	65
   218  007EC7  00                 	db	0
   219  007EC8  14                 	db	20
   220  007EC9  14                 	db	20
   221  007ECA  14                 	db	20
   222  007ECB  14                 	db	20
   223  007ECC  14                 	db	20
   224  007ECD  00                 	db	0
   225  007ECE  41                 	db	65
   226  007ECF  22                 	db	34
   227  007ED0  14                 	db	20
   228  007ED1  08                 	db	8
   229  007ED2  02                 	db	2
   230  007ED3  01                 	db	1
   231  007ED4  51                 	db	81
   232  007ED5  09                 	db	9
   233  007ED6  06                 	db	6
   234  007ED7  32                 	db	50
   235  007ED8  49                 	db	73
   236  007ED9  59                 	db	89
   237  007EDA  51                 	db	81
   238  007EDB  3E                 	db	62
   239  007EDC  7E                 	db	126
   240  007EDD  11                 	db	17
   241  007EDE  11                 	db	17
   242  007EDF  11                 	db	17
   243  007EE0  7E                 	db	126
   244  007EE1  7F                 	db	127
   245  007EE2  49                 	db	73
   246  007EE3  49                 	db	73
   247  007EE4  49                 	db	73
   248  007EE5  36                 	db	54
   249  007EE6  3E                 	db	62
   250  007EE7  41                 	db	65
   251  007EE8  41                 	db	65
   252  007EE9  41                 	db	65
   253  007EEA  22                 	db	34
   254  007EEB  7F                 	db	127
   255  007EEC  41                 	db	65
   256  007EED  41                 	db	65
   257  007EEE  22                 	db	34
   258  007EEF  1C                 	db	28
   259  007EF0  7F                 	db	127
   260  007EF1  49                 	db	73
   261  007EF2  49                 	db	73
   262  007EF3  49                 	db	73
   263  007EF4  41                 	db	65
   264  007EF5  7F                 	db	127
   265  007EF6  09                 	db	9
   266  007EF7  09                 	db	9
   267  007EF8  09                 	db	9
   268  007EF9  01                 	db	1
   269  007EFA  3E                 	db	62
   270  007EFB  41                 	db	65
   271  007EFC  49                 	db	73
   272  007EFD  49                 	db	73
   273  007EFE  7A                 	db	122
   274  007EFF  7F                 	db	127
   275  007F00  08                 	db	8
   276  007F01  08                 	db	8
   277  007F02  08                 	db	8
   278  007F03  7F                 	db	127
   279  007F04  00                 	db	0
   280  007F05  41                 	db	65
   281  007F06  7F                 	db	127
   282  007F07  41                 	db	65
   283  007F08  00                 	db	0
   284  007F09  20                 	db	32
   285  007F0A  40                 	db	64
   286  007F0B  41                 	db	65
   287  007F0C  3F                 	db	63
   288  007F0D  01                 	db	1
   289  007F0E  7F                 	db	127
   290  007F0F  08                 	db	8
   291  007F10  14                 	db	20
   292  007F11  22                 	db	34
   293  007F12  41                 	db	65
   294  007F13  7F                 	db	127
   295  007F14  40                 	db	64
   296  007F15  40                 	db	64
   297  007F16  40                 	db	64
   298  007F17  40                 	db	64
   299  007F18  7F                 	db	127
   300  007F19  02                 	db	2
   301  007F1A  0C                 	db	12
   302  007F1B  02                 	db	2
   303  007F1C  7F                 	db	127
   304  007F1D  7F                 	db	127
   305  007F1E  04                 	db	4
   306  007F1F  08                 	db	8
   307  007F20  10                 	db	16
   308  007F21  7F                 	db	127
   309  007F22  3E                 	db	62
   310  007F23  41                 	db	65
   311  007F24  41                 	db	65
   312  007F25  41                 	db	65
   313  007F26  3E                 	db	62
   314  007F27  7F                 	db	127
   315  007F28  09                 	db	9
   316  007F29  09                 	db	9
   317  007F2A  09                 	db	9
   318  007F2B  06                 	db	6
   319  007F2C  3E                 	db	62
   320  007F2D  41                 	db	65
   321  007F2E  51                 	db	81
   322  007F2F  21                 	db	33
   323  007F30  5E                 	db	94
   324  007F31  7F                 	db	127
   325  007F32  09                 	db	9
   326  007F33  19                 	db	25
   327  007F34  29                 	db	41
   328  007F35  46                 	db	70
   329  007F36  46                 	db	70
   330  007F37  49                 	db	73
   331  007F38  49                 	db	73
   332  007F39  49                 	db	73
   333  007F3A  31                 	db	49
   334  007F3B  01                 	db	1
   335  007F3C  01                 	db	1
   336  007F3D  7F                 	db	127
   337  007F3E  01                 	db	1
   338  007F3F  01                 	db	1
   339  007F40  3F                 	db	63
   340  007F41  40                 	db	64
   341  007F42  40                 	db	64
   342  007F43  40                 	db	64
   343  007F44  3F                 	db	63
   344  007F45  1F                 	db	31
   345  007F46  20                 	db	32
   346  007F47  40                 	db	64
   347  007F48  20                 	db	32
   348  007F49  1F                 	db	31
   349  007F4A  3F                 	db	63
   350  007F4B  40                 	db	64
   351  007F4C  38                 	db	56
   352  007F4D  40                 	db	64
   353  007F4E  3F                 	db	63
   354  007F4F  63                 	db	99
   355  007F50  14                 	db	20
   356  007F51  08                 	db	8
   357  007F52  14                 	db	20
   358  007F53  63                 	db	99
   359  007F54  07                 	db	7
   360  007F55  08                 	db	8
   361  007F56  70                 	db	112
   362  007F57  08                 	db	8
   363  007F58  07                 	db	7
   364  007F59  61                 	db	97
   365  007F5A  51                 	db	81
   366  007F5B  49                 	db	73
   367  007F5C  45                 	db	69
   368  007F5D  43                 	db	67
   369  007F5E  00                 	db	0
   370  007F5F  7F                 	db	127
   371  007F60  41                 	db	65
   372  007F61  41                 	db	65
   373  007F62  00                 	db	0
   374  007F63  55                 	db	85
   375  007F64  2A                 	db	42
   376  007F65  55                 	db	85
   377  007F66  2A                 	db	42
   378  007F67  55                 	db	85
   379  007F68  00                 	db	0
   380  007F69  41                 	db	65
   381  007F6A  41                 	db	65
   382  007F6B  7F                 	db	127
   383  007F6C  00                 	db	0
   384  007F6D  04                 	db	4
   385  007F6E  02                 	db	2
   386  007F6F  01                 	db	1
   387  007F70  02                 	db	2
   388  007F71  04                 	db	4
   389  007F72  40                 	db	64
   390  007F73  40                 	db	64
   391  007F74  40                 	db	64
   392  007F75  40                 	db	64
   393  007F76  40                 	db	64
   394  007F77  00                 	db	0
   395  007F78  01                 	db	1
   396  007F79  02                 	db	2
   397  007F7A  04                 	db	4
   398  007F7B  00                 	db	0
   399  007F7C  20                 	db	32
   400  007F7D  54                 	db	84
   401  007F7E  54                 	db	84
   402  007F7F  54                 	db	84
   403  007F80  78                 	db	120
   404  007F81  7F                 	db	127
   405  007F82  48                 	db	72
   406  007F83  44                 	db	68
   407  007F84  44                 	db	68
   408  007F85  38                 	db	56
   409  007F86  38                 	db	56
   410  007F87  44                 	db	68
   411  007F88  44                 	db	68
   412  007F89  44                 	db	68
   413  007F8A  20                 	db	32
   414  007F8B  38                 	db	56
   415  007F8C  44                 	db	68
   416  007F8D  44                 	db	68
   417  007F8E  48                 	db	72
   418  007F8F  7F                 	db	127
   419  007F90  38                 	db	56
   420  007F91  54                 	db	84
   421  007F92  54                 	db	84
   422  007F93  54                 	db	84
   423  007F94  18                 	db	24
   424  007F95  08                 	db	8
   425  007F96  7E                 	db	126
   426  007F97  09                 	db	9
   427  007F98  01                 	db	1
   428  007F99  02                 	db	2
   429  007F9A  0C                 	db	12
   430  007F9B  52                 	db	82
   431  007F9C  52                 	db	82
   432  007F9D  52                 	db	82
   433  007F9E  3E                 	db	62
   434  007F9F  7F                 	db	127
   435  007FA0  08                 	db	8
   436  007FA1  04                 	db	4
   437  007FA2  04                 	db	4
   438  007FA3  78                 	db	120
   439  007FA4  00                 	db	0
   440  007FA5  44                 	db	68
   441  007FA6  7D                 	db	125
   442  007FA7  40                 	db	64
   443  007FA8  00                 	db	0
   444  007FA9  20                 	db	32
   445  007FAA  40                 	db	64
   446  007FAB  44                 	db	68
   447  007FAC  3D                 	db	61
   448  007FAD  00                 	db	0
   449  007FAE  7F                 	db	127
   450  007FAF  10                 	db	16
   451  007FB0  28                 	db	40
   452  007FB1  44                 	db	68
   453  007FB2  00                 	db	0
   454  007FB3  00                 	db	0
   455  007FB4  41                 	db	65
   456  007FB5  7F                 	db	127
   457  007FB6  40                 	db	64
   458  007FB7  00                 	db	0
   459  007FB8  7C                 	db	124
   460  007FB9  04                 	db	4
   461  007FBA  18                 	db	24
   462  007FBB  04                 	db	4
   463  007FBC  78                 	db	120
   464  007FBD  7C                 	db	124
   465  007FBE  08                 	db	8
   466  007FBF  04                 	db	4
   467  007FC0  04                 	db	4
   468  007FC1  78                 	db	120
   469  007FC2  38                 	db	56
   470  007FC3  44                 	db	68
   471  007FC4  44                 	db	68
   472  007FC5  44                 	db	68
   473  007FC6  38                 	db	56
   474  007FC7  7C                 	db	124
   475  007FC8  14                 	db	20
   476  007FC9  14                 	db	20
   477  007FCA  14                 	db	20
   478  007FCB  08                 	db	8
   479  007FCC  08                 	db	8
   480  007FCD  14                 	db	20
   481  007FCE  14                 	db	20
   482  007FCF  18                 	db	24
   483  007FD0  7C                 	db	124
   484  007FD1  7C                 	db	124
   485  007FD2  08                 	db	8
   486  007FD3  04                 	db	4
   487  007FD4  04                 	db	4
   488  007FD5  08                 	db	8
   489  007FD6  48                 	db	72
   490  007FD7  54                 	db	84
   491  007FD8  54                 	db	84
   492  007FD9  54                 	db	84
   493  007FDA  20                 	db	32
   494  007FDB  04                 	db	4
   495  007FDC  3F                 	db	63
   496  007FDD  44                 	db	68
   497  007FDE  40                 	db	64
   498  007FDF  20                 	db	32
   499  007FE0  3C                 	db	60
   500  007FE1  40                 	db	64
   501  007FE2  40                 	db	64
   502  007FE3  20                 	db	32
   503  007FE4  7C                 	db	124
   504  007FE5  1C                 	db	28
   505  007FE6  20                 	db	32
   506  007FE7  40                 	db	64
   507  007FE8  20                 	db	32
   508  007FE9  1C                 	db	28
   509  007FEA  3C                 	db	60
   510  007FEB  40                 	db	64
   511  007FEC  30                 	db	48
   512  007FED  40                 	db	64
   513  007FEE  3C                 	db	60
   514  007FEF  44                 	db	68
   515  007FF0  28                 	db	40
   516  007FF1  10                 	db	16
   517  007FF2  28                 	db	40
   518  007FF3  44                 	db	68
   519  007FF4  0C                 	db	12
   520  007FF5  50                 	db	80
   521  007FF6  50                 	db	80
   522  007FF7  50                 	db	80
   523  007FF8  3C                 	db	60
   524  007FF9  44                 	db	68
   525  007FFA  64                 	db	100
   526  007FFB  54                 	db	84
   527  007FFC  4C                 	db	76
   528  007FFD  44                 	db	68
   529  007FFE                     __end_of_FONTLOOKUP:
   530                           	opt stack 0
   531  007FFE  00                 	db	0	; dummy byte at the end
   532  0000                     
   533                           	psect	nvCOMRAM
   534  000041                     __pnvCOMRAM:
   535                           	opt stack 0
   536  000041                     _timer0ReloadVal16bit:
   537                           	opt stack 0
   538  000041                     	ds	2
   539  000043                     _eusart2TxBufferRemaining:
   540                           	opt stack 0
   541  000043                     	ds	1
   542  0000                     _ANSELA	set	3896
   543  0000                     _ANSELB	set	3897
   544  0000                     _ANSELC	set	3898
   545  0000                     _ANSELD	set	3899
   546  0000                     _ANSELE	set	3900
   547  0000                     _BAUD1CON	set	4024
   548  0000                     _BAUD2CON	set	3952
   549  0000                     _INTCON2bits	set	4081
   550  0000                     _INTCONbits	set	4082
   551  0000                     _IPR1bits	set	3999
   552  0000                     _IPR3bits	set	4005
   553  0000                     _LATA	set	3977
   554  0000                     _LATB	set	3978
   555  0000                     _LATC	set	3979
   556  0000                     _LATCbits	set	3979
   557  0000                     _LATD	set	3980
   558  0000                     _LATE	set	3981
   559  0000                     _OSCCON	set	4051
   560  0000                     _OSCCON2	set	4050
   561  0000                     _OSCTUNE	set	3995
   562  0000                     _PIE1bits	set	3997
   563  0000                     _PIE3bits	set	4003
   564  0000                     _PIR1bits	set	3998
   565  0000                     _PIR3bits	set	4004
   566  0000                     _RC1STA	set	4011
   567  0000                     _RC1STAbits	set	4011
   568  0000                     _RC2STA	set	3953
   569  0000                     _RC2STAbits	set	3953
   570  0000                     _RCONbits	set	4048
   571  0000                     _RCREG1	set	4014
   572  0000                     _RCREG2	set	3956
   573  0000                     _SPBRG1	set	4015
   574  0000                     _SPBRG2	set	3957
   575  0000                     _SPBRGH1	set	4016
   576  0000                     _SPBRGH2	set	3958
   577  0000                     _SSP2ADD	set	3950
   578  0000                     _SSP2BUF	set	3951
   579  0000                     _SSP2CON1	set	3948
   580  0000                     _SSP2CON1bits	set	3948
   581  0000                     _SSP2STAT	set	3949
   582  0000                     _SSP2STATbits	set	3949
   583  0000                     _T0CON	set	4053
   584  0000                     _T0CONbits	set	4053
   585  0000                     _TMR0H	set	4055
   586  0000                     _TMR0L	set	4054
   587  0000                     _TRISA	set	3986
   588  0000                     _TRISB	set	3987
   589  0000                     _TRISC	set	3988
   590  0000                     _TRISD	set	3989
   591  0000                     _TRISE	set	3990
   592  0000                     _TX1STA	set	4012
   593  0000                     _TX2STA	set	3954
   594  0000                     _TXREG1	set	4013
   595  0000                     _TXREG2	set	3955
   596  0000                     _WPUB	set	3937
   597  0000                     _LATD0	set	31840
   598  0000                     _LATD3	set	31843
   599                           
   600                           ; #config settings
   601  0000                     
   602                           	psect	cinit
   603  000B1A                     __pcinit:
   604                           	opt stack 0
   605  000B1A                     start_initialization:
   606                           	opt stack 0
   607  000B1A                     __initialization:
   608                           	opt stack 0
   609                           
   610                           ; Clear objects allocated to BANK4 (200 bytes)
   611  000B1A  EE04  F000         	lfsr	0,__pbssBANK4
   612  000B1E  0EC8               	movlw	200
   613  000B20                     clear_0:
   614  000B20  6AEE               	clrf	postinc0,c
   615  000B22  06E8               	decf	wreg,f,c
   616  000B24  E1FD               	bnz	clear_0
   617                           
   618                           ; Clear objects allocated to BANK3 (206 bytes)
   619  000B26  EE03  F000         	lfsr	0,__pbssBANK3
   620  000B2A  0ECE               	movlw	206
   621  000B2C                     clear_1:
   622  000B2C  6AEE               	clrf	postinc0,c
   623  000B2E  06E8               	decf	wreg,f,c
   624  000B30  E1FD               	bnz	clear_1
   625                           
   626                           ; Clear objects allocated to BANK2 (206 bytes)
   627  000B32  EE02  F000         	lfsr	0,__pbssBANK2
   628  000B36  0ECE               	movlw	206
   629  000B38                     clear_2:
   630  000B38  6AEE               	clrf	postinc0,c
   631  000B3A  06E8               	decf	wreg,f,c
   632  000B3C  E1FD               	bnz	clear_2
   633                           
   634                           ; Clear objects allocated to BANK1 (206 bytes)
   635  000B3E  EE01  F000         	lfsr	0,__pbssBANK1
   636  000B42  0ECE               	movlw	206
   637  000B44                     clear_3:
   638  000B44  6AEE               	clrf	postinc0,c
   639  000B46  06E8               	decf	wreg,f,c
   640  000B48  E1FD               	bnz	clear_3
   641                           
   642                           ; Clear objects allocated to BANK0 (98 bytes)
   643  000B4A  EE00  F060         	lfsr	0,__pbssBANK0
   644  000B4E  0E62               	movlw	98
   645  000B50                     clear_4:
   646  000B50  6AEE               	clrf	postinc0,c
   647  000B52  06E8               	decf	wreg,f,c
   648  000B54  E1FD               	bnz	clear_4
   649                           
   650                           ; Clear objects allocated to COMRAM (26 bytes)
   651  000B56  EE00  F027         	lfsr	0,__pbssCOMRAM
   652  000B5A  0E1A               	movlw	26
   653  000B5C                     clear_5:
   654  000B5C  6AEE               	clrf	postinc0,c
   655  000B5E  06E8               	decf	wreg,f,c
   656  000B60  E1FD               	bnz	clear_5
   657                           
   658                           ; Initialize objects allocated to COMRAM (1 bytes)
   659                           ; load TBLPTR registers with __pidataCOMRAM
   660  000B62  0EFC               	movlw	low __pidataCOMRAM
   661  000B64  6EF6               	movwf	tblptrl,c
   662  000B66  0E0F               	movlw	high __pidataCOMRAM
   663  000B68  6EF7               	movwf	tblptrh,c
   664  000B6A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   665  000B6C  6EF8               	movwf	tblptru,c
   666  000B6E  0009               	tblrd		*+	;fetch initializer
   667  000B70  CFF5 F044          	movff	tablat,__pdataCOMRAM
   668  000B74                     end_of_initialization:
   669                           	opt stack 0
   670  000B74                     __end_of__initialization:
   671                           	opt stack 0
   672  000B74  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   673  000B76  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   674  000B78  0E00               	movlw	low (__Lmediumconst shr (0+16))
   675  000B7A  6EF8               	movwf	tblptru,c
   676  000B7C  0100               	movlb	0
   677  000B7E  EF14  F005         	goto	_main	;jump to C main() function
   678                           tblptru	equ	0xFF8
   679                           tblptrh	equ	0xFF7
   680                           tblptrl	equ	0xFF6
   681                           tablat	equ	0xFF5
   682                           postinc0	equ	0xFEE
   683                           wreg	equ	0xFE8
   684                           
   685                           	psect	bssCOMRAM
   686  000027                     __pbssCOMRAM:
   687                           	opt stack 0
   688  000027                     _Start:
   689                           	opt stack 0
   690  000027                     	ds	2
   691  000029                     _group:
   692                           	opt stack 0
   693  000029                     	ds	2
   694  00002B                     _receiveArrayAddress:
   695                           	opt stack 0
   696  00002B                     	ds	2
   697  00002D                     _sendStructAddress:
   698                           	opt stack 0
   699  00002D                     	ds	2
   700  00002F                     _serial_write:
   701                           	opt stack 0
   702  00002F                     	ds	2
   703  000031                     updateComms@previousPowerState:
   704                           	opt stack 0
   705  000031                     	ds	2
   706  000033                     _AKNAKsend:
   707                           	opt stack 0
   708  000033                     	ds	1
   709  000034                     _calc_CS:
   710                           	opt stack 0
   711  000034                     	ds	1
   712  000035                     _eusart2RxCount:
   713                           	opt stack 0
   714  000035                     	ds	1
   715  000036                     _eusart2RxHead:
   716                           	opt stack 0
   717  000036                     	ds	1
   718  000037                     _eusart2RxTail:
   719                           	opt stack 0
   720  000037                     	ds	1
   721  000038                     _eusart2TxHead:
   722                           	opt stack 0
   723  000038                     	ds	1
   724  000039                     _eusart2TxTail:
   725                           	opt stack 0
   726  000039                     	ds	1
   727  00003A                     _i:
   728                           	opt stack 0
   729  00003A                     	ds	1
   730  00003B                     _maxDataAddress:
   731                           	opt stack 0
   732  00003B                     	ds	1
   733  00003C                     _moduleAddress:
   734                           	opt stack 0
   735  00003C                     	ds	1
   736  00003D                     _returnAddress:
   737                           	opt stack 0
   738  00003D                     	ds	1
   739  00003E                     _rx_address:
   740                           	opt stack 0
   741  00003E                     	ds	1
   742  00003F                     _rx_array_inx:
   743                           	opt stack 0
   744  00003F                     	ds	1
   745  000040                     _rx_len:
   746                           	opt stack 0
   747  000040                     	ds	1
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           
   755                           	psect	dataCOMRAM
   756  000044                     __pdataCOMRAM:
   757                           	opt stack 0
   758  000044                     _Transmit_stall:
   759                           	opt stack 0
   760  000044                     	ds	1
   761                           tblptru	equ	0xFF8
   762                           tblptrh	equ	0xFF7
   763                           tblptrl	equ	0xFF6
   764                           tablat	equ	0xFF5
   765                           postinc0	equ	0xFEE
   766                           wreg	equ	0xFE8
   767                           
   768                           	psect	bssBANK0
   769  000060                     __pbssBANK0:
   770                           	opt stack 0
   771  000060                     _receiveArray:
   772                           	opt stack 0
   773  000060                     	ds	40
   774  000088                     _eusart2RxBuffer:
   775                           	opt stack 0
   776  000088                     	ds	8
   777  000090                     _eusart2TxBuffer:
   778                           	opt stack 0
   779  000090                     	ds	8
   780  000098                     _addressErrorCounter:
   781                           	opt stack 0
   782  000098                     	ds	2
   783  00009A                     _alignErrorCounter:
   784                           	opt stack 0
   785  00009A                     	ds	2
   786  00009C                     _crcErrorCounter:
   787                           	opt stack 0
   788  00009C                     	ds	2
   789  00009E                     _dataAdressErrorCounter:
   790                           	opt stack 0
   791  00009E                     	ds	2
   792  0000A0                     _serial_available:
   793                           	opt stack 0
   794  0000A0                     	ds	2
   795  0000A2                     _serial_peek:
   796                           	opt stack 0
   797  0000A2                     	ds	2
   798  0000A4                     _serial_read:
   799                           	opt stack 0
   800  0000A4                     	ds	2
   801  0000A6                     _crc_buffer:
   802                           	opt stack 0
   803  0000A6                     	ds	17
   804  0000B7                     _ddata:
   805                           	opt stack 0
   806  0000B7                     	ds	11
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           
   814                           	psect	bssBANK1
   815  000100                     __pbssBANK1:
   816                           	opt stack 0
   817  000100                     _ring_buffer:
   818                           	opt stack 0
   819  000100                     	ds	206
   820                           tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           postinc0	equ	0xFEE
   825                           wreg	equ	0xFE8
   826                           
   827                           	psect	bssBANK2
   828  000200                     __pbssBANK2:
   829                           	opt stack 0
   830  000200                     _input_buffer:
   831                           	opt stack 0
   832  000200                     	ds	206
   833                           tblptru	equ	0xFF8
   834                           tblptrh	equ	0xFF7
   835                           tblptrl	equ	0xFF6
   836                           tablat	equ	0xFF5
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           
   840                           	psect	bssBANK3
   841  000300                     __pbssBANK3:
   842                           	opt stack 0
   843  000300                     _output_buffer:
   844                           	opt stack 0
   845  000300                     	ds	206
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           
   853                           	psect	bssBANK4
   854  000400                     __pbssBANK4:
   855                           	opt stack 0
   856  000400                     _rx_buffer:
   857                           	opt stack 0
   858  000400                     	ds	200
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           
   866                           	psect	cstackBANK0
   867  0000C2                     __pcstackBANK0:
   868                           	opt stack 0
   869  0000C2                     ??_sendData:
   870  0000C2                     ??_FastTransfer_buffer_put:
   871  0000C2                     CRCcheck@SentCRC:
   872                           	opt stack 0
   873  0000C2                     NokiaStr@i:
   874                           	opt stack 0
   875                           
   876                           ; 2 bytes @ 0x0
   877  0000C2                     	ds	1
   878  0000C3                     sendData@whereToSend:
   879                           	opt stack 0
   880  0000C3                     CRCcheck@calculatedCRC:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x1
   884  0000C3                     	ds	1
   885  0000C4                     sendData@CS:
   886                           	opt stack 0
   887  0000C4                     ToSend@what:
   888                           	opt stack 0
   889  0000C4                     CRCcheck@arrayHolder:
   890                           	opt stack 0
   891                           
   892                           ; 3 bytes @ 0x2
   893  0000C4                     	ds	1
   894  0000C5                     sendData@i:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x3
   898  0000C5                     	ds	2
   899  0000C7                     CRCcheck@rt:
   900                           	opt stack 0
   901                           
   902                           ; 2 bytes @ 0x5
   903  0000C7                     	ds	2
   904  0000C9                     ??_receiveData:
   905                           
   906                           ; 1 bytes @ 0x7
   907  0000C9                     	ds	6
   908  0000CF                     receiveData@crcHolder:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0xD
   912  0000CF                     	ds	1
   913  0000D0                     receiveData@crcHolder_1409:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0xE
   917  0000D0                     	ds	1
   918  0000D1                     receiveData@holder:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0xF
   922  0000D1                     	ds	3
   923  0000D4                     receiveData@holder_1408:
   924                           	opt stack 0
   925                           
   926                           ; 3 bytes @ 0x12
   927  0000D4                     	ds	3
   928  0000D7                     receiveData@u:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x15
   932  0000D7                     	ds	2
   933  0000D9                     receiveData@r:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x17
   937  0000D9                     	ds	2
   938                           tblptru	equ	0xFF8
   939                           tblptrh	equ	0xFF7
   940                           tblptrl	equ	0xFF6
   941                           tablat	equ	0xFF5
   942                           postinc0	equ	0xFEE
   943                           wreg	equ	0xFE8
   944                           
   945                           	psect	cstackCOMRAM
   946  000001                     __pcstackCOMRAM:
   947                           	opt stack 0
   948  000001                     ?_UART_buff_modulo_inc:
   949                           	opt stack 0
   950  000001                     ?_UART_buff_size:
   951                           	opt stack 0
   952  000001                     UART_buff_size@_this:
   953                           	opt stack 0
   954  000001                     UART_buff_modulo_inc@value:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x0
   958  000001                     	ds	2
   959  000003                     UART_buff_modulo_inc@modulus:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x2
   963  000003                     	ds	2
   964  000005                     UART_buff_modulo_inc@my_value:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x4
   968  000005                     	ds	2
   969  000007                     UART_buff_put@_this:
   970                           	opt stack 0
   971  000007                     UART_buff_get@_this:
   972                           	opt stack 0
   973                           
   974                           ; 2 bytes @ 0x6
   975  000007                     	ds	2
   976  000009                     ??_UART_buff_get:
   977  000009                     UART_buff_put@c:
   978                           	opt stack 0
   979                           
   980                           ; 1 bytes @ 0x8
   981  000009                     	ds	1
   982  00000A                     ??_UART_buff_put:
   983                           
   984                           ; 1 bytes @ 0x9
   985  00000A                     	ds	1
   986  00000B                     UART_buff_get@c:
   987                           	opt stack 0
   988                           
   989                           ; 1 bytes @ 0xA
   990  00000B                     	ds	1
   991  00000C                     EUSART1_Receive_ISR@data:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0xB
   995  00000C                     	ds	1
   996  00000D                     ??_INTERRUPT_InterruptManager:
   997                           
   998                           ; 1 bytes @ 0xC
   999  00000D                     	ds	14
  1000  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1001                           	opt stack 0
  1002  00001B                     ?___wmul:
  1003                           	opt stack 0
  1004  00001B                     SPI2_Exchange8bit@data:
  1005                           	opt stack 0
  1006  00001B                     CRC8@data:
  1007                           	opt stack 0
  1008  00001B                     FastTransfer_buffer_modulo_inc@value:
  1009                           	opt stack 0
  1010  00001B                     crcBufS_put@_this:
  1011                           	opt stack 0
  1012  00001B                     crcBufS_status_put@_this:
  1013                           	opt stack 0
  1014  00001B                     crcBufS_get@_this:
  1015                           	opt stack 0
  1016  00001B                     ___wmul@multiplier:
  1017                           	opt stack 0
  1018  00001B                     memset@p1:
  1019                           	opt stack 0
  1020  00001B                     Delay@wait:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x1A
  1024  00001B                     	ds	1
  1025  00001C                     gotoXy@y:
  1026                           	opt stack 0
  1027  00001C                     clearLcd@res:
  1028                           	opt stack 0
  1029  00001C                     blackLcd@res:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x1B
  1033  00001C                     	ds	1
  1034  00001D                     CRC8@len:
  1035                           	opt stack 0
  1036  00001D                     crcBufS_put@address:
  1037                           	opt stack 0
  1038  00001D                     crcBufS_status_put@time:
  1039                           	opt stack 0
  1040  00001D                     crcBufS_get@time:
  1041                           	opt stack 0
  1042  00001D                     gotoXy@x:
  1043                           	opt stack 0
  1044  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1045                           	opt stack 0
  1046  00001D                     ___wmul@multiplicand:
  1047                           	opt stack 0
  1048  00001D                     memset@c:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x1C
  1052  00001D                     	ds	1
  1053  00001E                     CRC8@sum:
  1054                           	opt stack 0
  1055  00001E                     crcBufS_put@oldCRC:
  1056                           	opt stack 0
  1057  00001E                     crcBufS_status_put@status:
  1058                           	opt stack 0
  1059  00001E                     crcBufS_get@space:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x1D
  1063  00001E                     	ds	1
  1064  00001F                     ??_Delay:
  1065  00001F                     ??_crcBufS_get:
  1066  00001F                     ??_crcBufS_status_put:
  1067  00001F                     CRC8@extract:
  1068                           	opt stack 0
  1069  00001F                     crcBufS_put@status:
  1070                           	opt stack 0
  1071  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1072                           	opt stack 0
  1073  00001F                     ___wmul@product:
  1074                           	opt stack 0
  1075  00001F                     memset@n:
  1076                           	opt stack 0
  1077                           
  1078                           ; 2 bytes @ 0x1E
  1079  00001F                     	ds	1
  1080  000020                     ??_crcBufS_put:
  1081  000020                     CRC8@tempI:
  1082                           	opt stack 0
  1083  000020                     Delay@i:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x1F
  1087  000020                     	ds	1
  1088  000021                     CRC8@crc:
  1089                           	opt stack 0
  1090  000021                     FastTransfer_buffer_put@_this:
  1091                           	opt stack 0
  1092  000021                     NokiaStr@str:
  1093                           	opt stack 0
  1094  000021                     memset@p:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x20
  1098  000021                     	ds	2
  1099  000023                     FastTransfer_buffer_put@towhere:
  1100                           	opt stack 0
  1101  000023                     NokiaStr@len:
  1102                           	opt stack 0
  1103  000023                     FastTransfer_buffer_flush@_this:
  1104                           	opt stack 0
  1105  000023                     crcBufS_status_put@wantedTime:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0x22
  1109  000023                     	ds	1
  1110  000024                     ??_NokiaStr:
  1111  000024                     FastTransfer_buffer_put@towhat:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x23
  1115  000024                     	ds	1
  1116  000025                     FastTransfer_buffer_flush@clearBuffer:
  1117                           	opt stack 0
  1118  000025                     crcBufS_get@wantedTime:
  1119                           	opt stack 0
  1120                           
  1121                           ; 2 bytes @ 0x24
  1122  000025                     	ds	1
  1123  000026                     ToSend@where:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x25
  1127  000026                     	ds	1
  1128  000027                     tblptru	equ	0xFF8
  1129                           tblptrh	equ	0xFF7
  1130                           tblptrl	equ	0xFF6
  1131                           tablat	equ	0xFF5
  1132                           postinc0	equ	0xFEE
  1133                           wreg	equ	0xFE8
  1134                           
  1135                           ; 1 bytes @ 0x26
  1136 ;;
  1137 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1138 ;;
  1139 ;; *************** function _main *****************
  1140 ;; Defined at:
  1141 ;;		line 16 in file "main.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;		None
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;		None
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  1    wreg      void 
  1148 ;; Registers used:
  1149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1155 ;;      Params:         0       0       0       0       0       0       0
  1156 ;;      Locals:         0       0       0       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0       0       0
  1158 ;;      Totals:         0       0       0       0       0       0       0
  1159 ;;Total ram usage:        0 bytes
  1160 ;; Hardware stack levels required when called:    9
  1161 ;; This function calls:
  1162 ;;		_Delay
  1163 ;;		_NokiaStart
  1164 ;;		_NokiaStr
  1165 ;;		_SYSTEM_Initialize
  1166 ;;		_clearLcd
  1167 ;;		_gotoXy
  1168 ;;		_updateComms
  1169 ;; This function is called by:
  1170 ;;		Startup code after reset
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text0
  1175  000A28                     __ptext0:
  1176                           	opt stack 0
  1177  000A28                     _main:
  1178                           	opt stack 22
  1179                           
  1180                           ;main.c: 18: SYSTEM_Initialize();
  1181                           
  1182                           ;incstack = 0
  1183  000A28  ECD1  F007         	call	_SYSTEM_Initialize	;wreg free
  1184                           
  1185                           ;main.c: 37: (INTCONbits.GIE = 1);
  1186  000A2C  8EF2               	bsf	intcon,7,c	;volatile
  1187                           
  1188                           ;main.c: 47: NokiaStart();
  1189  000A2E  ECA7  F006         	call	_NokiaStart	;wreg free
  1190  000A32                     l3086:
  1191                           
  1192                           ;main.c: 50: Delay(1000);
  1193  000A32  0EE8               	movlw	232
  1194  000A34  6E1B               	movwf	Delay@wait,c
  1195  000A36  0E03               	movlw	3
  1196  000A38  6E1C               	movwf	Delay@wait+1,c
  1197  000A3A  0E00               	movlw	0
  1198  000A3C  6E1D               	movwf	Delay@wait+2,c
  1199  000A3E  0E00               	movlw	0
  1200  000A40  6E1E               	movwf	Delay@wait+3,c
  1201  000A42  EC1C  F006         	call	_Delay	;wreg free
  1202                           
  1203                           ;main.c: 51: clearLcd();
  1204  000A46  EC5B  F007         	call	_clearLcd	;wreg free
  1205                           
  1206                           ;main.c: 52: ddata[0]='T';
  1207  000A4A  0E54               	movlw	84
  1208  000A4C  0100               	movlb	0	; () banked
  1209  000A4E  6FB7               	movwf	_ddata& (0+255),b
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;main.c: 53: ddata[1]='E';
  1213  000A50  0E45               	movlw	69
  1214  000A52  0100               	movlb	0	; () banked
  1215  000A54  6FB8               	movwf	(_ddata+1)& (0+255),b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;main.c: 54: ddata[2]='S';
  1219  000A56  0E53               	movlw	83
  1220  000A58  0100               	movlb	0	; () banked
  1221  000A5A  6FB9               	movwf	(_ddata+2)& (0+255),b
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;main.c: 55: ddata[3]='T';
  1225  000A5C  0E54               	movlw	84
  1226  000A5E  0100               	movlb	0	; () banked
  1227  000A60  6FBA               	movwf	(_ddata+3)& (0+255),b
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;main.c: 56: ddata[4]=' ';
  1231  000A62  0E20               	movlw	32
  1232  000A64  0100               	movlb	0	; () banked
  1233  000A66  6FBB               	movwf	(_ddata+4)& (0+255),b
  1234                           
  1235                           ; BSR set to: 0
  1236                           ;main.c: 57: ddata[5]='L';
  1237  000A68  0E4C               	movlw	76
  1238  000A6A  0100               	movlb	0	; () banked
  1239  000A6C  6FBC               	movwf	(_ddata+5)& (0+255),b
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 58: ddata[6]='C';
  1243  000A6E  0E43               	movlw	67
  1244  000A70  0100               	movlb	0	; () banked
  1245  000A72  6FBD               	movwf	(_ddata+6)& (0+255),b
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 59: ddata[7]='D';
  1249  000A74  0E44               	movlw	68
  1250  000A76  0100               	movlb	0	; () banked
  1251  000A78  6FBE               	movwf	(_ddata+7)& (0+255),b
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;main.c: 60: ddata[8]=' ';
  1255  000A7A  0E20               	movlw	32
  1256  000A7C  0100               	movlb	0	; () banked
  1257  000A7E  6FBF               	movwf	(_ddata+8)& (0+255),b
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;main.c: 61: ddata[9]=i;
  1261  000A80  C03A  F0C0         	movff	_i,_ddata+9
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 62: i++;
  1265  000A84  2A3A               	incf	_i,f,c
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;main.c: 63: gotoXy(2,2);
  1269  000A86  0E02               	movlw	2
  1270  000A88  6E1C               	movwf	gotoXy@y,c
  1271  000A8A  0E02               	movlw	2
  1272  000A8C  EC96  F007         	call	_gotoXy
  1273                           
  1274                           ;main.c: 64: NokiaStr(ddata,10);
  1275  000A90  0EB7               	movlw	low _ddata
  1276  000A92  6E21               	movwf	NokiaStr@str,c
  1277  000A94  0E00               	movlw	high _ddata
  1278  000A96  6E22               	movwf	NokiaStr@str+1,c
  1279  000A98  0E0A               	movlw	10
  1280  000A9A  6E23               	movwf	NokiaStr@len,c
  1281  000A9C  ECCD  F004         	call	_NokiaStr	;wreg free
  1282  000AA0  D7C8               	goto	l3086
  1283  000AA2                     __end_of_main:
  1284                           	opt stack 0
  1285                           tblptru	equ	0xFF8
  1286                           tblptrh	equ	0xFF7
  1287                           tblptrl	equ	0xFF6
  1288                           tablat	equ	0xFF5
  1289                           intcon	equ	0xFF2
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           
  1293 ;; *************** function _updateComms *****************
  1294 ;; Defined at:
  1295 ;;		line 19 in file "Communications.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;		None
  1298 ;; Auto vars:     Size  Location     Type
  1299 ;;		None
  1300 ;; Return value:  Size  Location     Type
  1301 ;;                  1    wreg      void 
  1302 ;; Registers used:
  1303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1304 ;; Tracked objects:
  1305 ;;		On entry : 0/0
  1306 ;;		On exit  : 0/0
  1307 ;;		Unchanged: 0/0
  1308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1309 ;;      Params:         0       0       0       0       0       0       0
  1310 ;;      Locals:         0       0       0       0       0       0       0
  1311 ;;      Temps:          0       0       0       0       0       0       0
  1312 ;;      Totals:         0       0       0       0       0       0       0
  1313 ;;Total ram usage:        0 bytes
  1314 ;; Hardware stack levels used:    1
  1315 ;; Hardware stack levels required when called:    8
  1316 ;; This function calls:
  1317 ;;		_receiveData
  1318 ;;		_respondECU
  1319 ;; This function is called by:
  1320 ;;		_main
  1321 ;; This function uses a non-reentrant model
  1322 ;;
  1323                           
  1324                           	psect	text1
  1325  000E38                     __ptext1:
  1326                           	opt stack 0
  1327  000E38                     _updateComms:
  1328                           	opt stack 22
  1329                           
  1330                           ;Communications.c: 20: if (receiveData()) {
  1331                           
  1332                           ;incstack = 0
  1333  000E38  EC58  F000         	call	_receiveData	;wreg free
  1334  000E3C  0900               	iorlw	0
  1335  000E3E  B4D8               	btfsc	status,2,c
  1336  000E40  0012               	return	
  1337                           
  1338                           ;Communications.c: 21: static int previousPowerState;
  1339                           ;Communications.c: 22: if (previousPowerState != receiveArray[1]) {
  1340  000E42  5031               	movf	updateComms@previousPowerState,w,c
  1341  000E44  0100               	movlb	0	; () banked
  1342  000E46  1962               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
  1343  000E48  E105               	bnz	u2040
  1344  000E4A  5032               	movf	updateComms@previousPowerState+1,w,c
  1345  000E4C  0100               	movlb	0	; () banked
  1346  000E4E  1963               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
  1347  000E50  B4D8               	btfsc	status,2,c
  1348  000E52  D004               	goto	l3052
  1349  000E54                     u2040:
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;Communications.c: 23: previousPowerState = receiveArray[1];
  1353  000E54  C062  F031         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
  1354  000E58  C063  F032         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
  1355  000E5C                     l3052:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;Communications.c: 25: }
  1359                           ;Communications.c: 26: respondECU();
  1360  000E5C  ECF2  F005         	call	_respondECU	;wreg free
  1361  000E60  0012               	return	
  1362  000E62                     __end_of_updateComms:
  1363                           	opt stack 0
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           intcon	equ	0xFF2
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           status	equ	0xFD8
  1372                           
  1373 ;; *************** function _respondECU *****************
  1374 ;; Defined at:
  1375 ;;		line 31 in file "Communications.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         0       0       0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0
  1392 ;;      Totals:         0       0       0       0       0       0       0
  1393 ;;Total ram usage:        0 bytes
  1394 ;; Hardware stack levels used:    1
  1395 ;; Hardware stack levels required when called:    7
  1396 ;; This function calls:
  1397 ;;		_Delay
  1398 ;;		_ToSend
  1399 ;;		_sendData
  1400 ;; This function is called by:
  1401 ;;		_updateComms
  1402 ;; This function uses a non-reentrant model
  1403 ;;
  1404                           
  1405                           	psect	text2
  1406  000BE4                     __ptext2:
  1407                           	opt stack 0
  1408  000BE4                     _respondECU:
  1409                           	opt stack 22
  1410                           
  1411                           ;Communications.c: 32: LATCbits.LATC5 = 1;
  1412                           
  1413                           ;incstack = 0
  1414  000BE4  8A8B               	bsf	3979,5,c	;volatile
  1415                           
  1416                           ;Communications.c: 33: ToSend(0, 5);
  1417  000BE6  0E00               	movlw	0
  1418  000BE8  0100               	movlb	0	; () banked
  1419  000BEA  6FC5               	movwf	(ToSend@what+1)& (0+255),b
  1420  000BEC  0E05               	movlw	5
  1421  000BEE  6FC4               	movwf	ToSend@what& (0+255),b
  1422  000BF0  0E00               	movlw	0
  1423  000BF2  ECB7  F007         	call	_ToSend
  1424                           
  1425                           ;Communications.c: 34: ToSend(9, 5);
  1426  000BF6  0E00               	movlw	0
  1427  000BF8  0100               	movlb	0	; () banked
  1428  000BFA  6FC5               	movwf	(ToSend@what+1)& (0+255),b
  1429  000BFC  0E05               	movlw	5
  1430  000BFE  6FC4               	movwf	ToSend@what& (0+255),b
  1431  000C00  0E09               	movlw	9
  1432  000C02  ECB7  F007         	call	_ToSend
  1433                           
  1434                           ;Communications.c: 35: Delay(5);
  1435  000C06  0E05               	movlw	5
  1436  000C08  6E1B               	movwf	Delay@wait,c
  1437  000C0A  0E00               	movlw	0
  1438  000C0C  6E1C               	movwf	Delay@wait+1,c
  1439  000C0E  0E00               	movlw	0
  1440  000C10  6E1D               	movwf	Delay@wait+2,c
  1441  000C12  0E00               	movlw	0
  1442  000C14  6E1E               	movwf	Delay@wait+3,c
  1443  000C16  EC1C  F006         	call	_Delay	;wreg free
  1444                           
  1445                           ;Communications.c: 37: sendData(1);
  1446  000C1A  0E01               	movlw	1
  1447  000C1C  EC51  F005         	call	_sendData
  1448                           
  1449                           ;Communications.c: 38: Delay(3);
  1450  000C20  0E03               	movlw	3
  1451  000C22  6E1B               	movwf	Delay@wait,c
  1452  000C24  0E00               	movlw	0
  1453  000C26  6E1C               	movwf	Delay@wait+1,c
  1454  000C28  0E00               	movlw	0
  1455  000C2A  6E1D               	movwf	Delay@wait+2,c
  1456  000C2C  0E00               	movlw	0
  1457  000C2E  6E1E               	movwf	Delay@wait+3,c
  1458  000C30  EC1C  F006         	call	_Delay	;wreg free
  1459                           
  1460                           ;Communications.c: 39: LATCbits.LATC5 = 0;
  1461  000C34  9A8B               	bcf	3979,5,c	;volatile
  1462  000C36  0012               	return		;funcret
  1463  000C38                     __end_of_respondECU:
  1464                           	opt stack 0
  1465                           tblptru	equ	0xFF8
  1466                           tblptrh	equ	0xFF7
  1467                           tblptrl	equ	0xFF6
  1468                           tablat	equ	0xFF5
  1469                           intcon	equ	0xFF2
  1470                           postinc0	equ	0xFEE
  1471                           wreg	equ	0xFE8
  1472                           status	equ	0xFD8
  1473                           
  1474 ;; *************** function _sendData *****************
  1475 ;; Defined at:
  1476 ;;		line 53 in file "FastTransfer.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;  whereToSend     1    wreg     unsigned char 
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  whereToSend     1    1[BANK0 ] unsigned char 
  1481 ;;  i               2    3[BANK0 ] int 
  1482 ;;  CS              1    2[BANK0 ] unsigned char 
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1492 ;;      Params:         0       0       0       0       0       0       0
  1493 ;;      Locals:         0       4       0       0       0       0       0
  1494 ;;      Temps:          0       1       0       0       0       0       0
  1495 ;;      Totals:         0       5       0       0       0       0       0
  1496 ;;Total ram usage:        5 bytes
  1497 ;; Hardware stack levels used:    1
  1498 ;; Hardware stack levels required when called:    6
  1499 ;; This function calls:
  1500 ;;		_CRC8
  1501 ;;		_FastTransfer_buffer_flush
  1502 ;;		_crcBufS_put
  1503 ;; This function is called by:
  1504 ;;		_respondECU
  1505 ;; This function uses a non-reentrant model
  1506 ;;
  1507                           
  1508                           	psect	text3
  1509  000AA2                     __ptext3:
  1510                           	opt stack 0
  1511  000AA2                     _sendData:
  1512                           	opt stack 22
  1513                           
  1514                           ;incstack = 0
  1515                           ;sendData@whereToSend stored from wreg
  1516  000AA2  0100               	movlb	0	; () banked
  1517  000AA4  6FC3               	movwf	sendData@whereToSend& (0+255),b
  1518                           
  1519                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1520  000AA6  C02D  F01B         	movff	_sendStructAddress,CRC8@data
  1521  000AAA  C02E  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1522  000AAE  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1523  000AB2  EC68  F006         	call	_CRC8	;wreg free
  1524  000AB6  0100               	movlb	0	; () banked
  1525  000AB8  6FC4               	movwf	sendData@CS& (0+255),b
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;FastTransfer.c: 66: int i;
  1529                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1530  000ABA  0E00               	movlw	0
  1531  000ABC  0100               	movlb	0	; () banked
  1532  000ABE  6FC6               	movwf	(sendData@i+1)& (0+255),b
  1533  000AC0  0E00               	movlw	0
  1534  000AC2  6FC5               	movwf	sendData@i& (0+255),b
  1535  000AC4  D003               	goto	l2812
  1536  000AC6                     l2810:
  1537                           
  1538                           ; BSR set to: 0
  1539  000AC6  0100               	movlb	0	; () banked
  1540  000AC8  4BC5               	infsnz	sendData@i& (0+255),f,b
  1541  000ACA  2BC6               	incf	(sendData@i+1)& (0+255),f,b
  1542  000ACC                     l2812:
  1543                           
  1544                           ; BSR set to: 0
  1545  000ACC  0101               	movlb	1	; () banked
  1546  000ACE  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1547  000AD0  0100               	movlb	0	; () banked
  1548  000AD2  5DC5               	subwf	sendData@i& (0+255),w,b
  1549  000AD4  0100               	movlb	0	; () banked
  1550  000AD6  51C6               	movf	(sendData@i+1)& (0+255),w,b
  1551  000AD8  0A80               	xorlw	128
  1552  000ADA  0100               	movlb	0	; () banked
  1553  000ADC  6FC2               	movwf	??_sendData& (0+255),b
  1554  000ADE  0101               	movlb	1	; () banked
  1555  000AE0  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1556  000AE2  0A80               	xorlw	128
  1557  000AE4  0100               	movlb	0	; () banked
  1558  000AE6  59C2               	subwfb	??_sendData& (0+255),w,b
  1559  000AE8  A0D8               	btfss	status,0,c
  1560  000AEA  D7ED               	goto	l2810
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1564                           
  1565                           ; BSR set to: 0
  1566                           
  1567                           ;FastTransfer.c: 69: }
  1568                           ;FastTransfer.c: 72: serial_write(CS);
  1569  000AEC  0EA6               	movlw	low _crc_buffer
  1570  000AEE  6E1B               	movwf	crcBufS_put@_this,c
  1571  000AF0  0E00               	movlw	high _crc_buffer
  1572  000AF2  6E1C               	movwf	crcBufS_put@_this+1,c
  1573  000AF4  C0C3  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1574  000AF8  C0C4  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1575  000AFC  0E00               	movlw	0
  1576  000AFE  6E1F               	movwf	crcBufS_put@status,c
  1577  000B00  EC62  F003         	call	_crcBufS_put	;wreg free
  1578                           
  1579                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1580  000B04  0E00               	movlw	low _ring_buffer
  1581  000B06  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1582  000B08  0E01               	movlw	high _ring_buffer
  1583  000B0A  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1584  000B0C  0E00               	movlw	0
  1585  000B0E  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1586  000B10  0E01               	movlw	1
  1587  000B12  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1588  000B14  ECC1  F005         	call	_FastTransfer_buffer_flush	;wreg free
  1589  000B18  0012               	return		;funcret
  1590  000B1A                     __end_of_sendData:
  1591                           	opt stack 0
  1592                           tblptru	equ	0xFF8
  1593                           tblptrh	equ	0xFF7
  1594                           tblptrl	equ	0xFF6
  1595                           tablat	equ	0xFF5
  1596                           intcon	equ	0xFF2
  1597                           postinc0	equ	0xFEE
  1598                           wreg	equ	0xFE8
  1599                           status	equ	0xFD8
  1600                           
  1601 ;; *************** function _crcBufS_put *****************
  1602 ;; Defined at:
  1603 ;;		line 321 in file "FastTransfer.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1606 ;;		 -> crc_buffer(17), 
  1607 ;;  address         1   28[COMRAM] unsigned char 
  1608 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1609 ;;  status          1   30[COMRAM] unsigned char 
  1610 ;; Auto vars:     Size  Location     Type
  1611 ;;		None
  1612 ;; Return value:  Size  Location     Type
  1613 ;;                  1    wreg      void 
  1614 ;; Registers used:
  1615 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1616 ;; Tracked objects:
  1617 ;;		On entry : 0/0
  1618 ;;		On exit  : 0/0
  1619 ;;		Unchanged: 0/0
  1620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1621 ;;      Params:         5       0       0       0       0       0       0
  1622 ;;      Locals:         0       0       0       0       0       0       0
  1623 ;;      Temps:          2       0       0       0       0       0       0
  1624 ;;      Totals:         7       0       0       0       0       0       0
  1625 ;;Total ram usage:        7 bytes
  1626 ;; Hardware stack levels used:    1
  1627 ;; Hardware stack levels required when called:    4
  1628 ;; This function calls:
  1629 ;;		Nothing
  1630 ;; This function is called by:
  1631 ;;		_sendData
  1632 ;; This function uses a non-reentrant model
  1633 ;;
  1634                           
  1635                           	psect	text4
  1636  0006C4                     __ptext4:
  1637                           	opt stack 0
  1638  0006C4                     _crcBufS_put:
  1639                           	opt stack 23
  1640                           
  1641                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1642                           
  1643                           ;incstack = 0
  1644  0006C4  EE20 F00F          	lfsr	2,15
  1645  0006C8  501B               	movf	crcBufS_put@_this,w,c
  1646  0006CA  26D9               	addwf	fsr2l,f,c
  1647  0006CC  501C               	movf	crcBufS_put@_this+1,w,c
  1648  0006CE  22DA               	addwfc	fsr2h,f,c
  1649  0006D0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1650  0006D4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1651  0006D8  5020               	movf	??_crcBufS_put,w,c
  1652  0006DA  241B               	addwf	crcBufS_put@_this,w,c
  1653  0006DC  6ED9               	movwf	fsr2l,c
  1654  0006DE  5021               	movf	??_crcBufS_put+1,w,c
  1655  0006E0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1656  0006E2  6EDA               	movwf	fsr2h,c
  1657  0006E4  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1658                           
  1659                           ;FastTransfer.c: 323: _this->head++;
  1660  0006E8  EE20 F00F          	lfsr	2,15
  1661  0006EC  501B               	movf	crcBufS_put@_this,w,c
  1662  0006EE  26D9               	addwf	fsr2l,f,c
  1663  0006F0  501C               	movf	crcBufS_put@_this+1,w,c
  1664  0006F2  22DA               	addwfc	fsr2h,f,c
  1665  0006F4  2ADE               	incf	postinc2,f,c
  1666  0006F6  0E00               	movlw	0
  1667  0006F8  22DD               	addwfc	postdec2,f,c
  1668                           
  1669                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1670  0006FA  EE20 F00F          	lfsr	2,15
  1671  0006FE  501B               	movf	crcBufS_put@_this,w,c
  1672  000700  26D9               	addwf	fsr2l,f,c
  1673  000702  501C               	movf	crcBufS_put@_this+1,w,c
  1674  000704  22DA               	addwfc	fsr2h,f,c
  1675  000706  CFDE F020          	movff	postinc2,??_crcBufS_put
  1676  00070A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1677  00070E  5020               	movf	??_crcBufS_put,w,c
  1678  000710  241B               	addwf	crcBufS_put@_this,w,c
  1679  000712  6ED9               	movwf	fsr2l,c
  1680  000714  5021               	movf	??_crcBufS_put+1,w,c
  1681  000716  201C               	addwfc	crcBufS_put@_this+1,w,c
  1682  000718  6EDA               	movwf	fsr2h,c
  1683  00071A  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1684                           
  1685                           ;FastTransfer.c: 325: _this->head++;
  1686  00071E  EE20 F00F          	lfsr	2,15
  1687  000722  501B               	movf	crcBufS_put@_this,w,c
  1688  000724  26D9               	addwf	fsr2l,f,c
  1689  000726  501C               	movf	crcBufS_put@_this+1,w,c
  1690  000728  22DA               	addwfc	fsr2h,f,c
  1691  00072A  2ADE               	incf	postinc2,f,c
  1692  00072C  0E00               	movlw	0
  1693  00072E  22DD               	addwfc	postdec2,f,c
  1694                           
  1695                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1696  000730  EE20 F00F          	lfsr	2,15
  1697  000734  501B               	movf	crcBufS_put@_this,w,c
  1698  000736  26D9               	addwf	fsr2l,f,c
  1699  000738  501C               	movf	crcBufS_put@_this+1,w,c
  1700  00073A  22DA               	addwfc	fsr2h,f,c
  1701  00073C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1702  000740  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1703  000744  5020               	movf	??_crcBufS_put,w,c
  1704  000746  241B               	addwf	crcBufS_put@_this,w,c
  1705  000748  6ED9               	movwf	fsr2l,c
  1706  00074A  5021               	movf	??_crcBufS_put+1,w,c
  1707  00074C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1708  00074E  6EDA               	movwf	fsr2h,c
  1709  000750  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1710                           
  1711                           ;FastTransfer.c: 327: _this->head++;
  1712  000754  EE20 F00F          	lfsr	2,15
  1713  000758  501B               	movf	crcBufS_put@_this,w,c
  1714  00075A  26D9               	addwf	fsr2l,f,c
  1715  00075C  501C               	movf	crcBufS_put@_this+1,w,c
  1716  00075E  22DA               	addwfc	fsr2h,f,c
  1717  000760  2ADE               	incf	postinc2,f,c
  1718  000762  0E00               	movlw	0
  1719  000764  22DD               	addwfc	postdec2,f,c
  1720                           
  1721                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1722  000766  EE20 F00F          	lfsr	2,15
  1723  00076A  501B               	movf	crcBufS_put@_this,w,c
  1724  00076C  26D9               	addwf	fsr2l,f,c
  1725  00076E  501C               	movf	crcBufS_put@_this+1,w,c
  1726  000770  22DA               	addwfc	fsr2h,f,c
  1727  000772  0E01               	movlw	1
  1728  000774  BEDB               	btfsc	plusw2,7,c
  1729  000776  0012               	return	
  1730  000778  0E01               	movlw	1
  1731  00077A  50DB               	movf	plusw2,w,c
  1732  00077C  E104               	bnz	u1670
  1733  00077E  0E0F               	movlw	15
  1734  000780  5CDE               	subwf	postinc2,w,c
  1735  000782  A0D8               	btfss	status,0,c
  1736  000784  0012               	return	
  1737  000786                     u1670:
  1738                           
  1739                           ;FastTransfer.c: 329: _this->head = 0;
  1740  000786  EE20 F00F          	lfsr	2,15
  1741  00078A  501B               	movf	crcBufS_put@_this,w,c
  1742  00078C  26D9               	addwf	fsr2l,f,c
  1743  00078E  501C               	movf	crcBufS_put@_this+1,w,c
  1744  000790  22DA               	addwfc	fsr2h,f,c
  1745  000792  0E00               	movlw	0
  1746  000794  6EDE               	movwf	postinc2,c
  1747  000796  0E00               	movlw	0
  1748  000798  6EDD               	movwf	postdec2,c
  1749  00079A  0012               	return	
  1750  00079C                     __end_of_crcBufS_put:
  1751                           	opt stack 0
  1752                           tblptru	equ	0xFF8
  1753                           tblptrh	equ	0xFF7
  1754                           tblptrl	equ	0xFF6
  1755                           tablat	equ	0xFF5
  1756                           intcon	equ	0xFF2
  1757                           postinc0	equ	0xFEE
  1758                           wreg	equ	0xFE8
  1759                           indf2	equ	0xFDF
  1760                           postinc2	equ	0xFDE
  1761                           postdec2	equ	0xFDD
  1762                           plusw2	equ	0xFDB
  1763                           fsr2h	equ	0xFDA
  1764                           fsr2l	equ	0xFD9
  1765                           status	equ	0xFD8
  1766                           
  1767 ;; *************** function _FastTransfer_buffer_flush *****************
  1768 ;; Defined at:
  1769 ;;		line 261 in file "FastTransfer.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1772 ;;		 -> ring_buffer(206), 
  1773 ;;  clearBuffer     2   36[COMRAM] const int 
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;		None
  1776 ;; Return value:  Size  Location     Type
  1777 ;;                  1    wreg      void 
  1778 ;; Registers used:
  1779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1780 ;; Tracked objects:
  1781 ;;		On entry : 0/0
  1782 ;;		On exit  : 0/0
  1783 ;;		Unchanged: 0/0
  1784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1785 ;;      Params:         4       0       0       0       0       0       0
  1786 ;;      Locals:         0       0       0       0       0       0       0
  1787 ;;      Temps:          0       0       0       0       0       0       0
  1788 ;;      Totals:         4       0       0       0       0       0       0
  1789 ;;Total ram usage:        4 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    5
  1792 ;; This function calls:
  1793 ;;		_memset
  1794 ;; This function is called by:
  1795 ;;		_sendData
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798                           
  1799                           	psect	text5
  1800  000B82                     __ptext5:
  1801                           	opt stack 0
  1802  000B82                     _FastTransfer_buffer_flush:
  1803                           	opt stack 22
  1804                           
  1805                           ;FastTransfer.c: 262: _this->count = 0;
  1806                           
  1807                           ;incstack = 0
  1808  000B82  EE20 F0CC          	lfsr	2,204
  1809  000B86  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1810  000B88  26D9               	addwf	fsr2l,f,c
  1811  000B8A  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1812  000B8C  22DA               	addwfc	fsr2h,f,c
  1813  000B8E  0E00               	movlw	0
  1814  000B90  6EDE               	movwf	postinc2,c
  1815  000B92  0E00               	movlw	0
  1816  000B94  6EDD               	movwf	postdec2,c
  1817                           
  1818                           ;FastTransfer.c: 263: _this->head = 0;
  1819  000B96  EE20 F0C8          	lfsr	2,200
  1820  000B9A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1821  000B9C  26D9               	addwf	fsr2l,f,c
  1822  000B9E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1823  000BA0  22DA               	addwfc	fsr2h,f,c
  1824  000BA2  0E00               	movlw	0
  1825  000BA4  6EDE               	movwf	postinc2,c
  1826  000BA6  0E00               	movlw	0
  1827  000BA8  6EDD               	movwf	postdec2,c
  1828                           
  1829                           ;FastTransfer.c: 264: _this->tail = 0;
  1830  000BAA  EE20 F0CA          	lfsr	2,202
  1831  000BAE  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1832  000BB0  26D9               	addwf	fsr2l,f,c
  1833  000BB2  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1834  000BB4  22DA               	addwfc	fsr2h,f,c
  1835  000BB6  0E00               	movlw	0
  1836  000BB8  6EDE               	movwf	postinc2,c
  1837  000BBA  0E00               	movlw	0
  1838  000BBC  6EDD               	movwf	postdec2,c
  1839                           
  1840                           ;FastTransfer.c: 265: if (clearBuffer) {
  1841  000BBE  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1842  000BC0  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1843  000BC2  B4D8               	btfsc	status,2,c
  1844  000BC4  0012               	return	
  1845                           
  1846                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1847  000BC6  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1848  000BCA  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1849  000BCE  0E00               	movlw	0
  1850  000BD0  6E1E               	movwf	memset@c+1,c
  1851  000BD2  0E00               	movlw	0
  1852  000BD4  6E1D               	movwf	memset@c,c
  1853  000BD6  0E00               	movlw	0
  1854  000BD8  6E20               	movwf	memset@n+1,c
  1855  000BDA  0EC8               	movlw	200
  1856  000BDC  6E1F               	movwf	memset@n,c
  1857  000BDE  ECF0  F006         	call	_memset	;wreg free
  1858  000BE2  0012               	return	
  1859  000BE4                     __end_of_FastTransfer_buffer_flush:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           intcon	equ	0xFF2
  1866                           postinc0	equ	0xFEE
  1867                           wreg	equ	0xFE8
  1868                           indf2	equ	0xFDF
  1869                           postinc2	equ	0xFDE
  1870                           postdec2	equ	0xFDD
  1871                           plusw2	equ	0xFDB
  1872                           fsr2h	equ	0xFDA
  1873                           fsr2l	equ	0xFD9
  1874                           status	equ	0xFD8
  1875                           
  1876 ;; *************** function _memset *****************
  1877 ;; Defined at:
  1878 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;  p1              2   26[COMRAM] PTR void 
  1881 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1882 ;;  c               2   28[COMRAM] int 
  1883 ;;  n               2   30[COMRAM] unsigned int 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  p               2   32[COMRAM] PTR unsigned char 
  1886 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1887 ;; Return value:  Size  Location     Type
  1888 ;;                  2   26[COMRAM] PTR void 
  1889 ;; Registers used:
  1890 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1891 ;; Tracked objects:
  1892 ;;		On entry : 0/0
  1893 ;;		On exit  : 0/0
  1894 ;;		Unchanged: 0/0
  1895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1896 ;;      Params:         6       0       0       0       0       0       0
  1897 ;;      Locals:         2       0       0       0       0       0       0
  1898 ;;      Temps:          0       0       0       0       0       0       0
  1899 ;;      Totals:         8       0       0       0       0       0       0
  1900 ;;Total ram usage:        8 bytes
  1901 ;; Hardware stack levels used:    1
  1902 ;; Hardware stack levels required when called:    4
  1903 ;; This function calls:
  1904 ;;		Nothing
  1905 ;; This function is called by:
  1906 ;;		_FastTransfer_buffer_flush
  1907 ;;		_UART_buff_init
  1908 ;;		_UART_buff_flush
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           	psect	text6
  1913  000DE0                     __ptext6:
  1914                           	opt stack 0
  1915  000DE0                     _memset:
  1916                           	opt stack 22
  1917                           
  1918                           ;incstack = 0
  1919  000DE0  C01B  F021         	movff	memset@p1,memset@p
  1920  000DE4  C01C  F022         	movff	memset@p1+1,memset@p+1
  1921  000DE8  D008               	goto	l2708
  1922  000DEA                     l2704:
  1923  000DEA  C021  FFD9         	movff	memset@p,fsr2l
  1924  000DEE  C022  FFDA         	movff	memset@p+1,fsr2h
  1925  000DF2  C01D  FFDF         	movff	memset@c,indf2
  1926  000DF6  4A21               	infsnz	memset@p,f,c
  1927  000DF8  2A22               	incf	memset@p+1,f,c
  1928  000DFA                     l2708:
  1929  000DFA  061F               	decf	memset@n,f,c
  1930  000DFC  A0D8               	btfss	status,0,c
  1931  000DFE  0620               	decf	memset@n+1,f,c
  1932  000E00  281F               	incf	memset@n,w,c
  1933  000E02  E1F3               	bnz	l2704
  1934  000E04  2820               	incf	memset@n+1,w,c
  1935  000E06  B4D8               	btfsc	status,2,c
  1936  000E08  0012               	return	
  1937  000E0A  D7EF               	goto	l2704
  1938  000E0C                     __end_of_memset:
  1939                           	opt stack 0
  1940                           tblptru	equ	0xFF8
  1941                           tblptrh	equ	0xFF7
  1942                           tblptrl	equ	0xFF6
  1943                           tablat	equ	0xFF5
  1944                           intcon	equ	0xFF2
  1945                           postinc0	equ	0xFEE
  1946                           wreg	equ	0xFE8
  1947                           indf2	equ	0xFDF
  1948                           postinc2	equ	0xFDE
  1949                           postdec2	equ	0xFDD
  1950                           plusw2	equ	0xFDB
  1951                           fsr2h	equ	0xFDA
  1952                           fsr2l	equ	0xFD9
  1953                           status	equ	0xFD8
  1954                           
  1955 ;; *************** function _ToSend *****************
  1956 ;; Defined at:
  1957 ;;		line 216 in file "FastTransfer.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;  where           1    wreg     unsigned char 
  1960 ;;  what            2    2[BANK0 ] unsigned int 
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;  where           1   37[COMRAM] unsigned char 
  1963 ;; Return value:  Size  Location     Type
  1964 ;;                  1    wreg      void 
  1965 ;; Registers used:
  1966 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 0/0
  1969 ;;		On exit  : 0/0
  1970 ;;		Unchanged: 0/0
  1971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1972 ;;      Params:         0       2       0       0       0       0       0
  1973 ;;      Locals:         1       0       0       0       0       0       0
  1974 ;;      Temps:          0       0       0       0       0       0       0
  1975 ;;      Totals:         1       2       0       0       0       0       0
  1976 ;;Total ram usage:        3 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    6
  1979 ;; This function calls:
  1980 ;;		_FastTransfer_buffer_put
  1981 ;; This function is called by:
  1982 ;;		_respondECU
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text7
  1987  000F6E                     __ptext7:
  1988                           	opt stack 0
  1989  000F6E                     _ToSend:
  1990                           	opt stack 22
  1991                           
  1992                           ;incstack = 0
  1993                           ;ToSend@where stored from wreg
  1994  000F6E  6E26               	movwf	ToSend@where,c
  1995                           
  1996                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1997  000F70  0E00               	movlw	low _ring_buffer
  1998  000F72  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1999  000F74  0E01               	movlw	high _ring_buffer
  2000  000F76  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2001  000F78  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2002  000F7C  C0C4  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2003  000F80  C0C5  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2004  000F84  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2005  000F88  0012               	return		;funcret
  2006  000F8A                     __end_of_ToSend:
  2007                           	opt stack 0
  2008                           tblptru	equ	0xFF8
  2009                           tblptrh	equ	0xFF7
  2010                           tblptrl	equ	0xFF6
  2011                           tablat	equ	0xFF5
  2012                           intcon	equ	0xFF2
  2013                           postinc0	equ	0xFEE
  2014                           wreg	equ	0xFE8
  2015                           indf2	equ	0xFDF
  2016                           postinc2	equ	0xFDE
  2017                           postdec2	equ	0xFDD
  2018                           plusw2	equ	0xFDB
  2019                           fsr2h	equ	0xFDA
  2020                           fsr2l	equ	0xFD9
  2021                           status	equ	0xFD8
  2022                           
  2023 ;; *************** function _FastTransfer_buffer_put *****************
  2024 ;; Defined at:
  2025 ;;		line 223 in file "FastTransfer.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2028 ;;		 -> ring_buffer(206), 
  2029 ;;  towhere         1   34[COMRAM] unsigned char 
  2030 ;;  towhat          2   35[COMRAM] unsigned int 
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;                  1    wreg      void 
  2035 ;; Registers used:
  2036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 0/0
  2040 ;;		Unchanged: 0/0
  2041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2042 ;;      Params:         5       0       0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0       0       0
  2044 ;;      Temps:          0       2       0       0       0       0       0
  2045 ;;      Totals:         5       2       0       0       0       0       0
  2046 ;;Total ram usage:        7 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    5
  2049 ;; This function calls:
  2050 ;;		_FastTransfer_buffer_modulo_inc
  2051 ;; This function is called by:
  2052 ;;		_ToSend
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text8
  2057  000354                     __ptext8:
  2058                           	opt stack 0
  2059  000354                     _FastTransfer_buffer_put:
  2060                           	opt stack 22
  2061                           
  2062                           ;FastTransfer.c: 225: group.integer = towhat;
  2063                           
  2064                           ;incstack = 0
  2065  000354  C024  F029         	movff	FastTransfer_buffer_put@towhat,_group
  2066  000358  C025  F02A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2067                           
  2068                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2069  00035C  EE20 F0CC          	lfsr	2,204
  2070  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2071  000362  26D9               	addwf	fsr2l,f,c
  2072  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2073  000366  22DA               	addwfc	fsr2h,f,c
  2074  000368  0E01               	movlw	1
  2075  00036A  BEDB               	btfsc	plusw2,7,c
  2076  00036C  D007               	goto	l2748
  2077  00036E  0E01               	movlw	1
  2078  000370  50DB               	movf	plusw2,w,c
  2079  000372  E103               	bnz	u1691
  2080  000374  0EC5               	movlw	197
  2081  000376  5CDE               	subwf	postinc2,w,c
  2082  000378  B0D8               	btfsc	status,0,c
  2083  00037A                     u1691:
  2084  00037A  0012               	return	
  2085  00037C                     l2748:
  2086                           
  2087                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2088  00037C  EE20 F0C8          	lfsr	2,200
  2089  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2090  000382  26D9               	addwf	fsr2l,f,c
  2091  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2092  000386  22DA               	addwfc	fsr2h,f,c
  2093  000388  CFDE F0C2          	movff	postinc2,??_FastTransfer_buffer_put
  2094  00038C  CFDD F0C3          	movff	postdec2,??_FastTransfer_buffer_put+1
  2095  000390  0100               	movlb	0	; () banked
  2096  000392  51C2               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2097  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2098  000396  6ED9               	movwf	fsr2l,c
  2099  000398  0100               	movlb	0	; () banked
  2100  00039A  51C3               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2101  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2102  00039E  6EDA               	movwf	fsr2h,c
  2103  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2104                           
  2105                           ; BSR set to: 0
  2106                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2107  0003A4  EE20 F0C8          	lfsr	2,200
  2108  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2109  0003AA  26D9               	addwf	fsr2l,f,c
  2110  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2111  0003AE  22DA               	addwfc	fsr2h,f,c
  2112  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2113  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2114  0003B8  0E00               	movlw	0
  2115  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2116  0003BC  0EC8               	movlw	200
  2117  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2118  0003C0  EC31  F007         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2119  0003C4  EE20 F0C8          	lfsr	2,200
  2120  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2121  0003CA  26D9               	addwf	fsr2l,f,c
  2122  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2123  0003CE  22DA               	addwfc	fsr2h,f,c
  2124  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2125  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2126                           
  2127                           ;FastTransfer.c: 230: ++_this->count;
  2128  0003D8  EE20 F0CC          	lfsr	2,204
  2129  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2130  0003DE  26D9               	addwf	fsr2l,f,c
  2131  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2132  0003E2  22DA               	addwfc	fsr2h,f,c
  2133  0003E4  2ADE               	incf	postinc2,f,c
  2134  0003E6  0E00               	movlw	0
  2135  0003E8  22DD               	addwfc	postdec2,f,c
  2136                           
  2137                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2138  0003EA  EE20 F0C8          	lfsr	2,200
  2139  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2140  0003F0  26D9               	addwf	fsr2l,f,c
  2141  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2142  0003F4  22DA               	addwfc	fsr2h,f,c
  2143  0003F6  CFDE F0C2          	movff	postinc2,??_FastTransfer_buffer_put
  2144  0003FA  CFDD F0C3          	movff	postdec2,??_FastTransfer_buffer_put+1
  2145  0003FE  0100               	movlb	0	; () banked
  2146  000400  51C2               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2147  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2148  000404  6ED9               	movwf	fsr2l,c
  2149  000406  0100               	movlb	0	; () banked
  2150  000408  51C3               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2151  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2152  00040C  6EDA               	movwf	fsr2h,c
  2153  00040E  C029  FFDF         	movff	_group,indf2
  2154                           
  2155                           ; BSR set to: 0
  2156                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2157  000412  EE20 F0C8          	lfsr	2,200
  2158  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2159  000418  26D9               	addwf	fsr2l,f,c
  2160  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2161  00041C  22DA               	addwfc	fsr2h,f,c
  2162  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2163  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2164  000426  0E00               	movlw	0
  2165  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2166  00042A  0EC8               	movlw	200
  2167  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2168  00042E  EC31  F007         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2169  000432  EE20 F0C8          	lfsr	2,200
  2170  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2171  000438  26D9               	addwf	fsr2l,f,c
  2172  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2173  00043C  22DA               	addwfc	fsr2h,f,c
  2174  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2175  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2176                           
  2177                           ;FastTransfer.c: 233: ++_this->count;
  2178  000446  EE20 F0CC          	lfsr	2,204
  2179  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2180  00044C  26D9               	addwf	fsr2l,f,c
  2181  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2182  000450  22DA               	addwfc	fsr2h,f,c
  2183  000452  2ADE               	incf	postinc2,f,c
  2184  000454  0E00               	movlw	0
  2185  000456  22DD               	addwfc	postdec2,f,c
  2186                           
  2187                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2188  000458  EE20 F0C8          	lfsr	2,200
  2189  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2190  00045E  26D9               	addwf	fsr2l,f,c
  2191  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2192  000462  22DA               	addwfc	fsr2h,f,c
  2193  000464  CFDE F0C2          	movff	postinc2,??_FastTransfer_buffer_put
  2194  000468  CFDD F0C3          	movff	postdec2,??_FastTransfer_buffer_put+1
  2195  00046C  0100               	movlb	0	; () banked
  2196  00046E  51C2               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2197  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2198  000472  6ED9               	movwf	fsr2l,c
  2199  000474  0100               	movlb	0	; () banked
  2200  000476  51C3               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2201  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2202  00047A  6EDA               	movwf	fsr2h,c
  2203  00047C  C02A  FFDF         	movff	_group+1,indf2
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2207  000480  EE20 F0C8          	lfsr	2,200
  2208  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2209  000486  26D9               	addwf	fsr2l,f,c
  2210  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2211  00048A  22DA               	addwfc	fsr2h,f,c
  2212  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2213  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2214  000494  0E00               	movlw	0
  2215  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2216  000498  0EC8               	movlw	200
  2217  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2218  00049C  EC31  F007         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2219  0004A0  EE20 F0C8          	lfsr	2,200
  2220  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2221  0004A6  26D9               	addwf	fsr2l,f,c
  2222  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2223  0004AA  22DA               	addwfc	fsr2h,f,c
  2224  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2225  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2226                           
  2227                           ;FastTransfer.c: 236: ++_this->count;
  2228  0004B4  EE20 F0CC          	lfsr	2,204
  2229  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2230  0004BA  26D9               	addwf	fsr2l,f,c
  2231  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2232  0004BE  22DA               	addwfc	fsr2h,f,c
  2233  0004C0  2ADE               	incf	postinc2,f,c
  2234  0004C2  0E00               	movlw	0
  2235  0004C4  22DD               	addwfc	postdec2,f,c
  2236  0004C6  0012               	return	
  2237  0004C8                     __end_of_FastTransfer_buffer_put:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           intcon	equ	0xFF2
  2244                           postinc0	equ	0xFEE
  2245                           wreg	equ	0xFE8
  2246                           indf2	equ	0xFDF
  2247                           postinc2	equ	0xFDE
  2248                           postdec2	equ	0xFDD
  2249                           plusw2	equ	0xFDB
  2250                           fsr2h	equ	0xFDA
  2251                           fsr2l	equ	0xFD9
  2252                           status	equ	0xFD8
  2253                           
  2254 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2255 ;; Defined at:
  2256 ;;		line 273 in file "FastTransfer.c"
  2257 ;; Parameters:    Size  Location     Type
  2258 ;;  value           2   26[COMRAM] const unsigned int 
  2259 ;;  modulus         2   28[COMRAM] const unsigned int 
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;  my_value        2   30[COMRAM] unsigned int 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  2   26[COMRAM] unsigned int 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, status,0
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2271 ;;      Params:         4       0       0       0       0       0       0
  2272 ;;      Locals:         2       0       0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0
  2274 ;;      Totals:         6       0       0       0       0       0       0
  2275 ;;Total ram usage:        6 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    4
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_FastTransfer_buffer_put
  2282 ;;		_FastTransfer_buffer_get
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text9
  2287  000E62                     __ptext9:
  2288                           	opt stack 0
  2289  000E62                     _FastTransfer_buffer_modulo_inc:
  2290                           	opt stack 22
  2291                           
  2292                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2293                           
  2294                           ;incstack = 0
  2295  000E62  0E01               	movlw	1
  2296  000E64  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2297  000E66  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2298  000E68  0E00               	movlw	0
  2299  000E6A  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2300  000E6C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2301                           
  2302                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2303  000E6E  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2304  000E70  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2305  000E72  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2306  000E74  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2307  000E76  A0D8               	btfss	status,0,c
  2308  000E78  D004               	goto	l1976
  2309                           
  2310                           ;FastTransfer.c: 276: my_value = 0;
  2311  000E7A  0E00               	movlw	0
  2312  000E7C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2313  000E7E  0E00               	movlw	0
  2314  000E80  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2315  000E82                     l1976:
  2316                           
  2317                           ;FastTransfer.c: 277: }
  2318                           ;FastTransfer.c: 278: return (my_value);
  2319  000E82  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2320  000E86  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2321  000E8A  0012               	return	
  2322  000E8C                     __end_of_FastTransfer_buffer_modulo_inc:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           intcon	equ	0xFF2
  2329                           postinc0	equ	0xFEE
  2330                           wreg	equ	0xFE8
  2331                           indf2	equ	0xFDF
  2332                           postinc2	equ	0xFDE
  2333                           postdec2	equ	0xFDD
  2334                           plusw2	equ	0xFDB
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _Delay *****************
  2340 ;; Defined at:
  2341 ;;		line 9 in file "Functions.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  wait            4   26[COMRAM] long 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  i               4   31[COMRAM] long 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, status,2, status,0
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2355 ;;      Params:         4       0       0       0       0       0       0
  2356 ;;      Locals:         4       0       0       0       0       0       0
  2357 ;;      Temps:          1       0       0       0       0       0       0
  2358 ;;      Totals:         9       0       0       0       0       0       0
  2359 ;;Total ram usage:        9 bytes
  2360 ;; Hardware stack levels used:    1
  2361 ;; Hardware stack levels required when called:    4
  2362 ;; This function calls:
  2363 ;;		Nothing
  2364 ;; This function is called by:
  2365 ;;		_main
  2366 ;;		_respondECU
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text10
  2371  000C38                     __ptext10:
  2372                           	opt stack 0
  2373  000C38                     _Delay:
  2374                           	opt stack 24
  2375                           
  2376                           ;Functions.c: 10: long int i = 0;
  2377                           
  2378                           ;incstack = 0
  2379  000C38  0E00               	movlw	0
  2380  000C3A  6E20               	movwf	Delay@i,c
  2381  000C3C  0E00               	movlw	0
  2382  000C3E  6E21               	movwf	Delay@i+1,c
  2383  000C40  0E00               	movlw	0
  2384  000C42  6E22               	movwf	Delay@i+2,c
  2385  000C44  0E00               	movlw	0
  2386  000C46  6E23               	movwf	Delay@i+3,c
  2387                           
  2388                           ;Functions.c: 11: for (; wait > i; i++) {
  2389  000C48  D00E               	goto	l2090
  2390  000C4A                     l2086:
  2391                           
  2392                           ;Functions.c: 12: _delay((unsigned long)((1)*(16000000/4000.0)));
  2393  000C4A  0E06               	movlw	6
  2394  000C4C  6E1F               	movwf	??_Delay& (0+255),c
  2395  000C4E  0E30               	movlw	48
  2396  000C50                     u2157:
  2397  000C50  2EE8               	decfsz	wreg,f,c
  2398  000C52  D7FE               	goto	u2157
  2399  000C54  2E1F               	decfsz	??_Delay& (0+255),f,c
  2400  000C56  D7FC               	goto	u2157
  2401  000C58  D000               	nop2	
  2402  000C5A  0E01               	movlw	1
  2403  000C5C  2620               	addwf	Delay@i,f,c
  2404  000C5E  0E00               	movlw	0
  2405  000C60  2221               	addwfc	Delay@i+1,f,c
  2406  000C62  2222               	addwfc	Delay@i+2,f,c
  2407  000C64  2223               	addwfc	Delay@i+3,f,c
  2408  000C66                     l2090:
  2409  000C66  501B               	movf	Delay@wait,w,c
  2410  000C68  5C20               	subwf	Delay@i,w,c
  2411  000C6A  501C               	movf	Delay@wait+1,w,c
  2412  000C6C  5821               	subwfb	Delay@i+1,w,c
  2413  000C6E  501D               	movf	Delay@wait+2,w,c
  2414  000C70  5822               	subwfb	Delay@i+2,w,c
  2415  000C72  5023               	movf	Delay@i+3,w,c
  2416  000C74  0A80               	xorlw	128
  2417  000C76  6E1F               	movwf	??_Delay& (0+255),c
  2418  000C78  501E               	movf	Delay@wait+3,w,c
  2419  000C7A  0A80               	xorlw	128
  2420  000C7C  581F               	subwfb	??_Delay& (0+255),w,c
  2421  000C7E  B0D8               	btfsc	status,0,c
  2422  000C80  0012               	return	
  2423  000C82  D7E3               	goto	l2086
  2424  000C84                     __end_of_Delay:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           intcon	equ	0xFF2
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           indf2	equ	0xFDF
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           plusw2	equ	0xFDB
  2437                           fsr2h	equ	0xFDA
  2438                           fsr2l	equ	0xFD9
  2439                           status	equ	0xFD8
  2440                           
  2441 ;; *************** function _receiveData *****************
  2442 ;; Defined at:
  2443 ;;		line 82 in file "FastTransfer.c"
  2444 ;; Parameters:    Size  Location     Type
  2445 ;;		None
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2448 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2449 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2450 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2451 ;;  u               2   21[BANK0 ] int 
  2452 ;;  r               2   23[BANK0 ] int 
  2453 ;; Return value:  Size  Location     Type
  2454 ;;                  1    wreg      unsigned char 
  2455 ;; Registers used:
  2456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2457 ;; Tracked objects:
  2458 ;;		On entry : 0/0
  2459 ;;		On exit  : 0/0
  2460 ;;		Unchanged: 0/0
  2461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2462 ;;      Params:         0       0       0       0       0       0       0
  2463 ;;      Locals:         0      12       0       0       0       0       0
  2464 ;;      Temps:          0       6       0       0       0       0       0
  2465 ;;      Totals:         0      18       0       0       0       0       0
  2466 ;;Total ram usage:       18 bytes
  2467 ;; Hardware stack levels used:    1
  2468 ;; Hardware stack levels required when called:    6
  2469 ;; This function calls:
  2470 ;;		_CRC8
  2471 ;;		_CRCcheck
  2472 ;; This function is called by:
  2473 ;;		_updateComms
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text11
  2478  0000B0                     __ptext11:
  2479                           	opt stack 0
  2480  0000B0                     _receiveData:
  2481                           	opt stack 23
  2482                           
  2483                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2484                           
  2485                           ;incstack = 0
  2486  0000B0  D020               	goto	l2892
  2487  0000B2                     l2882:
  2488                           
  2489                           ; BSR set to: 0
  2490  0000B2  0100               	movlb	0	; () banked
  2491  0000B4  4BD7               	infsnz	receiveData@u& (0+255),f,b
  2492  0000B6  2BD8               	incf	(receiveData@u+1)& (0+255),f,b
  2493                           
  2494                           ; BSR set to: 0
  2495                           
  2496                           ; BSR set to: 0
  2497  0000B8  5040               	movf	_rx_len,w,c
  2498  0000BA  0100               	movlb	0	; () banked
  2499  0000BC  6FC9               	movwf	??_receiveData& (0+255),b
  2500  0000BE  6BCA               	clrf	(??_receiveData+1)& (0+255),b
  2501  0000C0  0E01               	movlw	1
  2502  0000C2  0100               	movlb	0	; () banked
  2503  0000C4  27C9               	addwf	??_receiveData& (0+255),f,b
  2504  0000C6  0E00               	movlw	0
  2505  0000C8  23CA               	addwfc	(??_receiveData+1)& (0+255),f,b
  2506  0000CA  0100               	movlb	0	; () banked
  2507  0000CC  51D7               	movf	receiveData@u& (0+255),w,b
  2508  0000CE  0100               	movlb	0	; () banked
  2509  0000D0  5DC9               	subwf	??_receiveData& (0+255),w,b
  2510  0000D2  0100               	movlb	0	; () banked
  2511  0000D4  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2512  0000D6  0A80               	xorlw	128
  2513  0000D8  0100               	movlb	0	; () banked
  2514  0000DA  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2515  0000DC  0100               	movlb	0	; () banked
  2516  0000DE  51D8               	movf	(receiveData@u+1)& (0+255),w,b
  2517  0000E0  0A80               	xorlw	128
  2518  0000E2  0100               	movlb	0	; () banked
  2519  0000E4  59CB               	subwfb	(??_receiveData+2)& (0+255),w,b
  2520  0000E6  B0D8               	btfsc	status,0,c
  2521  0000E8  D7E4               	goto	l2882
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;FastTransfer.c: 109: }
  2525                           ;FastTransfer.c: 110: rx_len = 0;
  2526                           
  2527                           ; BSR set to: 0
  2528  0000EA  0E00               	movlw	0
  2529  0000EC  6E40               	movwf	_rx_len,c
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;FastTransfer.c: 111: return 0;
  2533  0000EE  0E00               	movlw	0
  2534                           
  2535                           ; BSR set to: 0
  2536  0000F0  0012               	return	
  2537  0000F2                     l2892:
  2538                           
  2539                           ;FastTransfer.c: 112: }
  2540                           ;FastTransfer.c: 114: }
  2541                           ;FastTransfer.c: 115: }
  2542                           ;FastTransfer.c: 116: }
  2543                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2544  0000F2  5040               	movf	_rx_len,w,c
  2545  0000F4  B4D8               	btfsc	status,2,c
  2546  0000F6  D12C               	goto	l2974
  2547                           
  2548                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2549  0000F8  503F               	movf	_rx_array_inx,w,c
  2550  0000FA  B4D8               	btfsc	status,2,c
  2551  0000FC                     l396:
  2552  0000FC  D7FF               	goto	l396
  2553                           
  2554                           ;FastTransfer.c: 135: }
  2555                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2556                           
  2557                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2558                           
  2559                           ;FastTransfer.c: 129: }
  2560                           ;FastTransfer.c: 130: }
  2561                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2562                           
  2563                           ;FastTransfer.c: 128: return 0;
  2564                           
  2565                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2566                           
  2567                           ;FastTransfer.c: 126: rx_len = 0;
  2568                           
  2569                           ;FastTransfer.c: 125: CRCcheck();
  2570                           
  2571                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2572  0000FE  5040               	movf	_rx_len,w,c
  2573  000100  0100               	movlb	0	; () banked
  2574  000102  6FC9               	movwf	??_receiveData& (0+255),b
  2575  000104  6BCA               	clrf	(??_receiveData+1)& (0+255),b
  2576  000106  0EFF               	movlw	255
  2577  000108  0100               	movlb	0	; () banked
  2578  00010A  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2579  00010C  0EFF               	movlw	255
  2580  00010E  0100               	movlb	0	; () banked
  2581  000110  6FCC               	movwf	(??_receiveData+3)& (0+255),b
  2582  000112  503F               	movf	_rx_array_inx,w,c
  2583  000114  0100               	movlb	0	; () banked
  2584  000116  6FCD               	movwf	(??_receiveData+4)& (0+255),b
  2585  000118  6BCE               	clrf	(??_receiveData+5)& (0+255),b
  2586  00011A  0100               	movlb	0	; () banked
  2587  00011C  51CB               	movf	(??_receiveData+2)& (0+255),w,b
  2588  00011E  0100               	movlb	0	; () banked
  2589  000120  27CD               	addwf	(??_receiveData+4)& (0+255),f,b
  2590  000122  0100               	movlb	0	; () banked
  2591  000124  51CC               	movf	(??_receiveData+3)& (0+255),w,b
  2592  000126  0100               	movlb	0	; () banked
  2593  000128  23CE               	addwfc	(??_receiveData+5)& (0+255),f,b
  2594  00012A  0100               	movlb	0	; () banked
  2595  00012C  51C9               	movf	??_receiveData& (0+255),w,b
  2596  00012E  0100               	movlb	0	; () banked
  2597  000130  19CD               	xorwf	(??_receiveData+4)& (0+255),w,b
  2598  000132  E105               	bnz	u1911
  2599  000134  0100               	movlb	0	; () banked
  2600  000136  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2601  000138  0100               	movlb	0	; () banked
  2602  00013A  19CE               	xorwf	(??_receiveData+5)& (0+255),w,b
  2603  00013C  A4D8               	btfss	status,2,c
  2604  00013E                     u1911:
  2605  00013E  D108               	goto	l2974
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2609  000140  0E00               	movlw	low _rx_buffer
  2610  000142  6E1B               	movwf	CRC8@data,c
  2611  000144  0E04               	movlw	high _rx_buffer
  2612  000146  6E1C               	movwf	CRC8@data+1,c
  2613  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2614  00014C  EC68  F006         	call	_CRC8	;wreg free
  2615  000150  6E34               	movwf	_calc_CS,c
  2616                           
  2617                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2618  000152  0EFF               	movlw	255
  2619  000154  0100               	movlb	0	; () banked
  2620  000156  6FC9               	movwf	??_receiveData& (0+255),b
  2621  000158  0EFF               	movlw	255
  2622  00015A  0100               	movlb	0	; () banked
  2623  00015C  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2624  00015E  503F               	movf	_rx_array_inx,w,c
  2625  000160  0100               	movlb	0	; () banked
  2626  000162  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2627  000164  6BCC               	clrf	(??_receiveData+3)& (0+255),b
  2628  000166  0100               	movlb	0	; () banked
  2629  000168  51C9               	movf	??_receiveData& (0+255),w,b
  2630  00016A  0100               	movlb	0	; () banked
  2631  00016C  27CB               	addwf	(??_receiveData+2)& (0+255),f,b
  2632  00016E  0100               	movlb	0	; () banked
  2633  000170  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2634  000172  0100               	movlb	0	; () banked
  2635  000174  23CC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2636  000176  0E00               	movlw	low _rx_buffer
  2637  000178  0100               	movlb	0	; () banked
  2638  00017A  25CB               	addwf	(??_receiveData+2)& (0+255),w,b
  2639  00017C  6ED9               	movwf	fsr2l,c
  2640  00017E  0E04               	movlw	high _rx_buffer
  2641  000180  0100               	movlb	0	; () banked
  2642  000182  21CC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2643  000184  6EDA               	movwf	fsr2h,c
  2644  000186  5034               	movf	_calc_CS,w,c
  2645  000188  18DE               	xorwf	postinc2,w,c
  2646  00018A  A4D8               	btfss	status,2,c
  2647  00018C  D0A9               	goto	l2954
  2648                           
  2649                           ; BSR set to: 0
  2650                           ;FastTransfer.c: 147: int r;
  2651                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2652  00018E  0E00               	movlw	0
  2653  000190  0100               	movlb	0	; () banked
  2654  000192  6FDA               	movwf	(receiveData@r+1)& (0+255),b
  2655  000194  0E00               	movlw	0
  2656  000196  6FD9               	movwf	receiveData@r& (0+255),b
  2657  000198  D05A               	goto	l2932
  2658  00019A                     l2922:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2662  00019A  0E00               	movlw	low _rx_buffer
  2663  00019C  0100               	movlb	0	; () banked
  2664  00019E  25D9               	addwf	receiveData@r& (0+255),w,b
  2665  0001A0  6ED9               	movwf	fsr2l,c
  2666  0001A2  0E04               	movlw	high _rx_buffer
  2667  0001A4  0100               	movlb	0	; () banked
  2668  0001A6  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2669  0001A8  6EDA               	movwf	fsr2h,c
  2670  0001AA  503B               	movf	_maxDataAddress,w,c
  2671  0001AC  5CDE               	subwf	postinc2,w,c
  2672  0001AE  B0D8               	btfsc	status,0,c
  2673  0001B0  D041               	goto	l2928
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2677  0001B2  0E01               	movlw	1
  2678  0001B4  0100               	movlb	0	; () banked
  2679  0001B6  25D9               	addwf	receiveData@r& (0+255),w,b
  2680  0001B8  0100               	movlb	0	; () banked
  2681  0001BA  6FC9               	movwf	??_receiveData& (0+255),b
  2682  0001BC  0E00               	movlw	0
  2683  0001BE  0100               	movlb	0	; () banked
  2684  0001C0  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2685  0001C2  0100               	movlb	0	; () banked
  2686  0001C4  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2687  0001C6  0E00               	movlw	low _rx_buffer
  2688  0001C8  0100               	movlb	0	; () banked
  2689  0001CA  25C9               	addwf	??_receiveData& (0+255),w,b
  2690  0001CC  6ED9               	movwf	fsr2l,c
  2691  0001CE  0E04               	movlw	high _rx_buffer
  2692  0001D0  0100               	movlb	0	; () banked
  2693  0001D2  21CA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2694  0001D4  6EDA               	movwf	fsr2h,c
  2695  0001D6  50DF               	movf	indf2,w,c
  2696  0001D8  6E29               	movwf	_group,c
  2697                           
  2698                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2699  0001DA  0E02               	movlw	2
  2700  0001DC  0100               	movlb	0	; () banked
  2701  0001DE  25D9               	addwf	receiveData@r& (0+255),w,b
  2702  0001E0  0100               	movlb	0	; () banked
  2703  0001E2  6FC9               	movwf	??_receiveData& (0+255),b
  2704  0001E4  0E00               	movlw	0
  2705  0001E6  0100               	movlb	0	; () banked
  2706  0001E8  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2707  0001EA  0100               	movlb	0	; () banked
  2708  0001EC  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2709  0001EE  0E00               	movlw	low _rx_buffer
  2710  0001F0  0100               	movlb	0	; () banked
  2711  0001F2  25C9               	addwf	??_receiveData& (0+255),w,b
  2712  0001F4  6ED9               	movwf	fsr2l,c
  2713  0001F6  0E04               	movlw	high _rx_buffer
  2714  0001F8  0100               	movlb	0	; () banked
  2715  0001FA  21CA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2716  0001FC  6EDA               	movwf	fsr2h,c
  2717  0001FE  50DF               	movf	indf2,w,c
  2718  000200  6E2A               	movwf	_group+1,c
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2722  000202  0E00               	movlw	low _rx_buffer
  2723  000204  0100               	movlb	0	; () banked
  2724  000206  25D9               	addwf	receiveData@r& (0+255),w,b
  2725  000208  6ED9               	movwf	fsr2l,c
  2726  00020A  0E04               	movlw	high _rx_buffer
  2727  00020C  0100               	movlb	0	; () banked
  2728  00020E  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2729  000210  6EDA               	movwf	fsr2h,c
  2730  000212  50DF               	movf	indf2,w,c
  2731  000214  0100               	movlb	0	; () banked
  2732  000216  6FC9               	movwf	??_receiveData& (0+255),b
  2733  000218  0100               	movlb	0	; () banked
  2734  00021A  51C9               	movf	??_receiveData& (0+255),w,b
  2735  00021C  0D02               	mullw	2
  2736  00021E  50F3               	movf	prodl,w,c
  2737  000220  242B               	addwf	_receiveArrayAddress,w,c
  2738  000222  6ED9               	movwf	fsr2l,c
  2739  000224  50F4               	movf	prodh,w,c
  2740  000226  202C               	addwfc	_receiveArrayAddress+1,w,c
  2741  000228  6EDA               	movwf	fsr2h,c
  2742  00022A  C029  FFDE         	movff	_group,postinc2
  2743  00022E  C02A  FFDD         	movff	_group+1,postdec2
  2744                           
  2745                           ;FastTransfer.c: 153: } else {
  2746  000232  D003               	goto	l2930
  2747  000234                     l2928:
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2751  000234  0100               	movlb	0	; () banked
  2752  000236  4B9E               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2753  000238  2B9F               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2754  00023A                     l2930:
  2755                           
  2756                           ; BSR set to: 0
  2757  00023A  0E03               	movlw	3
  2758  00023C  0100               	movlb	0	; () banked
  2759  00023E  25D9               	addwf	receiveData@r& (0+255),w,b
  2760  000240  0100               	movlb	0	; () banked
  2761  000242  6FD9               	movwf	receiveData@r& (0+255),b
  2762  000244  0E00               	movlw	0
  2763  000246  0100               	movlb	0	; () banked
  2764  000248  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2765  00024A  0100               	movlb	0	; () banked
  2766  00024C  6FDA               	movwf	(receiveData@r+1)& (0+255),b
  2767  00024E                     l2932:
  2768                           
  2769                           ; BSR set to: 0
  2770  00024E  5040               	movf	_rx_len,w,c
  2771  000250  0100               	movlb	0	; () banked
  2772  000252  6FC9               	movwf	??_receiveData& (0+255),b
  2773  000254  6BCA               	clrf	(??_receiveData+1)& (0+255),b
  2774  000256  0100               	movlb	0	; () banked
  2775  000258  51C9               	movf	??_receiveData& (0+255),w,b
  2776  00025A  0100               	movlb	0	; () banked
  2777  00025C  5DD9               	subwf	receiveData@r& (0+255),w,b
  2778  00025E  0100               	movlb	0	; () banked
  2779  000260  51DA               	movf	(receiveData@r+1)& (0+255),w,b
  2780  000262  0A80               	xorlw	128
  2781  000264  0100               	movlb	0	; () banked
  2782  000266  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2783  000268  0100               	movlb	0	; () banked
  2784  00026A  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2785  00026C  0A80               	xorlw	128
  2786  00026E  0100               	movlb	0	; () banked
  2787  000270  59CB               	subwfb	(??_receiveData+2)& (0+255),w,b
  2788  000272  A0D8               	btfss	status,0,c
  2789  000274  D792               	goto	l2922
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;FastTransfer.c: 155: }
  2793                           ;FastTransfer.c: 156: }
  2794                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2795                           
  2796                           ; BSR set to: 0
  2797  000276  5033               	movf	_AKNAKsend,w,c
  2798  000278  B4D8               	btfsc	status,2,c
  2799  00027A  D02C               	goto	l2944
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;FastTransfer.c: 160: unsigned char holder[3];
  2803                           ;FastTransfer.c: 161: holder[0] = 255;
  2804  00027C  0100               	movlb	0	; () banked
  2805  00027E  69D1               	setf	receiveData@holder& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;FastTransfer.c: 162: holder[1] = 1;
  2809  000280  0E01               	movlw	1
  2810  000282  0100               	movlb	0	; () banked
  2811  000284  6FD2               	movwf	(receiveData@holder+1)& (0+255),b
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2815  000286  0EFF               	movlw	255
  2816  000288  0100               	movlb	0	; () banked
  2817  00028A  6FC9               	movwf	??_receiveData& (0+255),b
  2818  00028C  0EFF               	movlw	255
  2819  00028E  0100               	movlb	0	; () banked
  2820  000290  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2821  000292  503F               	movf	_rx_array_inx,w,c
  2822  000294  0100               	movlb	0	; () banked
  2823  000296  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2824  000298  6BCC               	clrf	(??_receiveData+3)& (0+255),b
  2825  00029A  0100               	movlb	0	; () banked
  2826  00029C  51C9               	movf	??_receiveData& (0+255),w,b
  2827  00029E  0100               	movlb	0	; () banked
  2828  0002A0  27CB               	addwf	(??_receiveData+2)& (0+255),f,b
  2829  0002A2  0100               	movlb	0	; () banked
  2830  0002A4  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2831  0002A6  0100               	movlb	0	; () banked
  2832  0002A8  23CC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2833  0002AA  0E00               	movlw	low _rx_buffer
  2834  0002AC  0100               	movlb	0	; () banked
  2835  0002AE  25CB               	addwf	(??_receiveData+2)& (0+255),w,b
  2836  0002B0  6ED9               	movwf	fsr2l,c
  2837  0002B2  0E04               	movlw	high _rx_buffer
  2838  0002B4  0100               	movlb	0	; () banked
  2839  0002B6  21CC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2840  0002B8  6EDA               	movwf	fsr2h,c
  2841  0002BA  50DF               	movf	indf2,w,c
  2842  0002BC  0100               	movlb	0	; () banked
  2843  0002BE  6FD3               	movwf	(receiveData@holder+2)& (0+255),b
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2847  0002C0  0ED1               	movlw	low receiveData@holder
  2848  0002C2  6E1B               	movwf	CRC8@data,c
  2849  0002C4  0E00               	movlw	high receiveData@holder
  2850  0002C6  6E1C               	movwf	CRC8@data+1,c
  2851  0002C8  0E03               	movlw	3
  2852  0002CA  6E1D               	movwf	CRC8@len,c
  2853  0002CC  EC68  F006         	call	_CRC8	;wreg free
  2854  0002D0  0100               	movlb	0	; () banked
  2855  0002D2  6FCF               	movwf	receiveData@crcHolder& (0+255),b
  2856  0002D4                     l2944:
  2857                           
  2858                           ; BSR set to: 0
  2859                           ;FastTransfer.c: 174: }
  2860                           ;FastTransfer.c: 178: rx_len = 0;
  2861  0002D4  0E00               	movlw	0
  2862  0002D6  6E40               	movwf	_rx_len,c
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2866  0002D8  0E00               	movlw	0
  2867  0002DA  6E3F               	movwf	_rx_array_inx,c
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;FastTransfer.c: 180: return 1;
  2871  0002DC  0E01               	movlw	1
  2872                           
  2873                           ; BSR set to: 0
  2874  0002DE  0012               	return	
  2875  0002E0                     l2954:
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;FastTransfer.c: 182: crcErrorCounter++;
  2879  0002E0  0100               	movlb	0	; () banked
  2880  0002E2  4B9C               	infsnz	_crcErrorCounter& (0+255),f,b
  2881  0002E4  2B9D               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2885  0002E6  5033               	movf	_AKNAKsend,w,c
  2886  0002E8  B4D8               	btfsc	status,2,c
  2887  0002EA  D02C               	goto	l2966
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;FastTransfer.c: 185: unsigned char holder[3];
  2891                           ;FastTransfer.c: 186: holder[0] = 255;
  2892  0002EC  0100               	movlb	0	; () banked
  2893  0002EE  69D4               	setf	receiveData@holder_1408& (0+255),b
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;FastTransfer.c: 187: holder[1] = 2;
  2897  0002F0  0E02               	movlw	2
  2898  0002F2  0100               	movlb	0	; () banked
  2899  0002F4  6FD5               	movwf	(receiveData@holder_1408+1)& (0+255),b
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2903  0002F6  0EFF               	movlw	255
  2904  0002F8  0100               	movlb	0	; () banked
  2905  0002FA  6FC9               	movwf	??_receiveData& (0+255),b
  2906  0002FC  0EFF               	movlw	255
  2907  0002FE  0100               	movlb	0	; () banked
  2908  000300  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2909  000302  503F               	movf	_rx_array_inx,w,c
  2910  000304  0100               	movlb	0	; () banked
  2911  000306  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2912  000308  6BCC               	clrf	(??_receiveData+3)& (0+255),b
  2913  00030A  0100               	movlb	0	; () banked
  2914  00030C  51C9               	movf	??_receiveData& (0+255),w,b
  2915  00030E  0100               	movlb	0	; () banked
  2916  000310  27CB               	addwf	(??_receiveData+2)& (0+255),f,b
  2917  000312  0100               	movlb	0	; () banked
  2918  000314  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2919  000316  0100               	movlb	0	; () banked
  2920  000318  23CC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2921  00031A  0E00               	movlw	low _rx_buffer
  2922  00031C  0100               	movlb	0	; () banked
  2923  00031E  25CB               	addwf	(??_receiveData+2)& (0+255),w,b
  2924  000320  6ED9               	movwf	fsr2l,c
  2925  000322  0E04               	movlw	high _rx_buffer
  2926  000324  0100               	movlb	0	; () banked
  2927  000326  21CC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2928  000328  6EDA               	movwf	fsr2h,c
  2929  00032A  50DF               	movf	indf2,w,c
  2930  00032C  0100               	movlb	0	; () banked
  2931  00032E  6FD6               	movwf	(receiveData@holder_1408+2)& (0+255),b
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;FastTransfer.c: 198: serial_write(crcHolder);
  2935  000330  0ED4               	movlw	low receiveData@holder_1408
  2936  000332  6E1B               	movwf	CRC8@data,c
  2937  000334  0E00               	movlw	high receiveData@holder_1408
  2938  000336  6E1C               	movwf	CRC8@data+1,c
  2939  000338  0E03               	movlw	3
  2940  00033A  6E1D               	movwf	CRC8@len,c
  2941  00033C  EC68  F006         	call	_CRC8	;wreg free
  2942  000340  0100               	movlb	0	; () banked
  2943  000342  6FD0               	movwf	receiveData@crcHolder_1409& (0+255),b
  2944  000344                     l2966:
  2945                           
  2946                           ; BSR set to: 0
  2947                           ;FastTransfer.c: 199: }
  2948                           ;FastTransfer.c: 202: rx_len = 0;
  2949  000344  0E00               	movlw	0
  2950  000346  6E40               	movwf	_rx_len,c
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;FastTransfer.c: 203: rx_array_inx = 0;
  2954  000348  0E00               	movlw	0
  2955  00034A  6E3F               	movwf	_rx_array_inx,c
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;FastTransfer.c: 204: return 0;
  2959  00034C  0E00               	movlw	0
  2960                           
  2961                           ; BSR set to: 0
  2962  00034E  0012               	return	
  2963  000350                     l2974:
  2964                           
  2965                           ;FastTransfer.c: 205: }
  2966                           ;FastTransfer.c: 206: }
  2967                           ;FastTransfer.c: 207: }
  2968                           ;FastTransfer.c: 210: return 0;
  2969  000350  0E00               	movlw	0
  2970  000352  0012               	return	
  2971  000354                     __end_of_receiveData:
  2972                           	opt stack 0
  2973                           tblptru	equ	0xFF8
  2974                           tblptrh	equ	0xFF7
  2975                           tblptrl	equ	0xFF6
  2976                           tablat	equ	0xFF5
  2977                           prodh	equ	0xFF4
  2978                           prodl	equ	0xFF3
  2979                           intcon	equ	0xFF2
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           plusw2	equ	0xFDB
  2986                           fsr2h	equ	0xFDA
  2987                           fsr2l	equ	0xFD9
  2988                           status	equ	0xFD8
  2989                           
  2990 ;; *************** function _CRCcheck *****************
  2991 ;; Defined at:
  2992 ;;		line 373 in file "FastTransfer.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;		None
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  rt              2    5[BANK0 ] int 
  2997 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  2998 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  2999 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3000 ;; Return value:  Size  Location     Type
  3001 ;;                  1    wreg      void 
  3002 ;; Registers used:
  3003 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3004 ;; Tracked objects:
  3005 ;;		On entry : 0/0
  3006 ;;		On exit  : 0/0
  3007 ;;		Unchanged: 0/0
  3008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3009 ;;      Params:         0       0       0       0       0       0       0
  3010 ;;      Locals:         0       7       0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0       0       0
  3012 ;;      Totals:         0       7       0       0       0       0       0
  3013 ;;Total ram usage:        7 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    5
  3016 ;; This function calls:
  3017 ;;		_CRC8
  3018 ;;		_crcBufS_get
  3019 ;;		_crcBufS_status_put
  3020 ;; This function is called by:
  3021 ;;		_receiveData
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text12
  3026  000872                     __ptext12:
  3027                           	opt stack 0
  3028  000872                     _CRCcheck:
  3029                           	opt stack 23
  3030  000872                     l472:
  3031  000872  D7FF               	goto	l472
  3032  000874                     l2826:
  3033                           
  3034                           ; BSR set to: 0
  3035  000874  0100               	movlb	0	; () banked
  3036  000876  BFC8               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3037  000878  D008               	goto	l2830
  3038  00087A  0100               	movlb	0	; () banked
  3039  00087C  51C8               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3040  00087E  E143               	bnz	l483
  3041  000880  0E05               	movlw	5
  3042  000882  0100               	movlb	0	; () banked
  3043  000884  5DC7               	subwf	CRCcheck@rt& (0+255),w,b
  3044  000886  B0D8               	btfsc	status,0,c
  3045  000888  0012               	return	
  3046  00088A                     l2830:
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3050  00088A  0EA6               	movlw	low _crc_buffer
  3051  00088C  6E1B               	movwf	crcBufS_get@_this,c
  3052  00088E  0E00               	movlw	high _crc_buffer
  3053  000890  6E1C               	movwf	crcBufS_get@_this+1,c
  3054  000892  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3055  000896  0E00               	movlw	0
  3056  000898  6E1E               	movwf	crcBufS_get@space,c
  3057  00089A  ECF1  F002         	call	_crcBufS_get	;wreg free
  3058  00089E  183D               	xorwf	_returnAddress,w,c
  3059  0008A0  A4D8               	btfss	status,2,c
  3060  0008A2  D02D               	goto	l2844
  3061                           
  3062                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3063  0008A4  0EA6               	movlw	low _crc_buffer
  3064  0008A6  6E1B               	movwf	crcBufS_get@_this,c
  3065  0008A8  0E00               	movlw	high _crc_buffer
  3066  0008AA  6E1C               	movwf	crcBufS_get@_this+1,c
  3067  0008AC  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3068  0008B0  0E01               	movlw	1
  3069  0008B2  6E1E               	movwf	crcBufS_get@space,c
  3070  0008B4  ECF1  F002         	call	_crcBufS_get	;wreg free
  3071  0008B8  0100               	movlb	0	; () banked
  3072  0008BA  19C6               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3073  0008BC  A4D8               	btfss	status,2,c
  3074  0008BE  D01F               	goto	l2844
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3078  0008C0  0100               	movlb	0	; () banked
  3079  0008C2  05C5               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3080  0008C4  A4D8               	btfss	status,2,c
  3081  0008C6  D00B               	goto	l2840
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3085  0008C8  0EA6               	movlw	low _crc_buffer
  3086  0008CA  6E1B               	movwf	crcBufS_status_put@_this,c
  3087  0008CC  0E00               	movlw	high _crc_buffer
  3088  0008CE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3089  0008D0  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3090  0008D4  0E01               	movlw	1
  3091  0008D6  6E1E               	movwf	crcBufS_status_put@status,c
  3092  0008D8  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3093                           
  3094                           ;FastTransfer.c: 393: break;
  3095  0008DC  0012               	return	
  3096  0008DE                     l2840:
  3097  0008DE  0E02               	movlw	2
  3098  0008E0  0100               	movlb	0	; () banked
  3099  0008E2  19C5               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3100  0008E4  A4D8               	btfss	status,2,c
  3101  0008E6  D00B               	goto	l2844
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3105  0008E8  0EA6               	movlw	low _crc_buffer
  3106  0008EA  6E1B               	movwf	crcBufS_status_put@_this,c
  3107  0008EC  0E00               	movlw	high _crc_buffer
  3108  0008EE  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3109  0008F0  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3110  0008F4  0E02               	movlw	2
  3111  0008F6  6E1E               	movwf	crcBufS_status_put@status,c
  3112  0008F8  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3113                           
  3114                           ;FastTransfer.c: 396: break;
  3115  0008FC  0012               	return	
  3116  0008FE                     l2844:
  3117  0008FE  0100               	movlb	0	; () banked
  3118  000900  4BC7               	infsnz	CRCcheck@rt& (0+255),f,b
  3119  000902  2BC8               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3120  000904  D7B7               	goto	l2826
  3121  000906                     l483:
  3122  000906  0012               	return		;funcret
  3123  000908                     __end_of_CRCcheck:
  3124                           	opt stack 0
  3125                           tblptru	equ	0xFF8
  3126                           tblptrh	equ	0xFF7
  3127                           tblptrl	equ	0xFF6
  3128                           tablat	equ	0xFF5
  3129                           prodh	equ	0xFF4
  3130                           prodl	equ	0xFF3
  3131                           intcon	equ	0xFF2
  3132                           postinc0	equ	0xFEE
  3133                           wreg	equ	0xFE8
  3134                           indf2	equ	0xFDF
  3135                           postinc2	equ	0xFDE
  3136                           postdec2	equ	0xFDD
  3137                           plusw2	equ	0xFDB
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _crcBufS_status_put *****************
  3143 ;; Defined at:
  3144 ;;		line 336 in file "FastTransfer.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3147 ;;		 -> crc_buffer(17), 
  3148 ;;  time            1   28[COMRAM] unsigned char 
  3149 ;;  status          1   29[COMRAM] unsigned char 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  wantedTime      2   34[COMRAM] int 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3161 ;;      Params:         4       0       0       0       0       0       0
  3162 ;;      Locals:         2       0       0       0       0       0       0
  3163 ;;      Temps:          4       0       0       0       0       0       0
  3164 ;;      Totals:        10       0       0       0       0       0       0
  3165 ;;Total ram usage:       10 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    4
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_CRCcheck
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text13
  3176  00079C                     __ptext13:
  3177                           	opt stack 0
  3178  00079C                     _crcBufS_status_put:
  3179                           	opt stack 23
  3180                           
  3181                           ;FastTransfer.c: 337: if (time >= 5) {
  3182                           
  3183                           ;incstack = 0
  3184  00079C  0E04               	movlw	4
  3185  00079E  641D               	cpfsgt	crcBufS_status_put@time,c
  3186  0007A0  D002               	goto	l2790
  3187                           
  3188                           ;FastTransfer.c: 338: time = 5 - 1;
  3189  0007A2  0E04               	movlw	4
  3190  0007A4  6E1D               	movwf	crcBufS_status_put@time,c
  3191  0007A6                     l2790:
  3192                           
  3193                           ;FastTransfer.c: 339: }
  3194                           ;FastTransfer.c: 340: time = time + 1;
  3195  0007A6  281D               	incf	crcBufS_status_put@time,w,c
  3196  0007A8  6E1D               	movwf	crcBufS_status_put@time,c
  3197                           
  3198                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3199  0007AA  501D               	movf	crcBufS_status_put@time,w,c
  3200  0007AC  0D03               	mullw	3
  3201  0007AE  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3202  0007B2  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3203                           
  3204                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3205  0007B6  EE20 F00F          	lfsr	2,15
  3206  0007BA  501B               	movf	crcBufS_status_put@_this,w,c
  3207  0007BC  26D9               	addwf	fsr2l,f,c
  3208  0007BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3209  0007C0  22DA               	addwfc	fsr2h,f,c
  3210  0007C2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3211  0007C4  5CDE               	subwf	postinc2,w,c
  3212  0007C6  50DE               	movf	postinc2,w,c
  3213  0007C8  0A80               	xorlw	128
  3214  0007CA  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3215  0007CC  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3216  0007CE  0A80               	xorlw	128
  3217  0007D0  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3218  0007D2  B0D8               	btfsc	status,0,c
  3219  0007D4  D02B               	goto	l2798
  3220                           
  3221                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3222  0007D6  EE20 F00F          	lfsr	2,15
  3223  0007DA  501B               	movf	crcBufS_status_put@_this,w,c
  3224  0007DC  26D9               	addwf	fsr2l,f,c
  3225  0007DE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3226  0007E0  22DA               	addwfc	fsr2h,f,c
  3227  0007E2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3228  0007E6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3229  0007EA  1E1F               	comf	??_crcBufS_status_put,f,c
  3230  0007EC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3231  0007EE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3232  0007F0  2A20               	incf	??_crcBufS_status_put+1,f,c
  3233  0007F2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3234  0007F4  261F               	addwf	??_crcBufS_status_put,f,c
  3235  0007F6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3236  0007F8  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3237  0007FA  1E1F               	comf	??_crcBufS_status_put,f,c
  3238  0007FC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3239  0007FE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3240  000800  2A20               	incf	??_crcBufS_status_put+1,f,c
  3241  000802  0E0F               	movlw	15
  3242  000804  241F               	addwf	??_crcBufS_status_put,w,c
  3243  000806  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3244  000808  0E00               	movlw	0
  3245  00080A  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3246  00080C  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3247                           
  3248                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3249  00080E  0E02               	movlw	2
  3250  000810  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3251  000812  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3252  000814  0E00               	movlw	0
  3253  000816  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3254  000818  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3255  00081A  501F               	movf	??_crcBufS_status_put,w,c
  3256  00081C  241B               	addwf	crcBufS_status_put@_this,w,c
  3257  00081E  6ED9               	movwf	fsr2l,c
  3258  000820  5020               	movf	??_crcBufS_status_put+1,w,c
  3259  000822  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3260  000824  6EDA               	movwf	fsr2h,c
  3261  000826  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3262                           
  3263                           ;FastTransfer.c: 345: } else {
  3264  00082A  0012               	return	
  3265  00082C                     l2798:
  3266                           
  3267                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3268  00082C  EE20 F00F          	lfsr	2,15
  3269  000830  501B               	movf	crcBufS_status_put@_this,w,c
  3270  000832  26D9               	addwf	fsr2l,f,c
  3271  000834  501C               	movf	crcBufS_status_put@_this+1,w,c
  3272  000836  22DA               	addwfc	fsr2h,f,c
  3273  000838  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3274  00083C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3275  000840  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3276  000844  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3277  000848  1E21               	comf	??_crcBufS_status_put+2,f,c
  3278  00084A  1E22               	comf	??_crcBufS_status_put+3,f,c
  3279  00084C  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3280  00084E  2A22               	incf	??_crcBufS_status_put+3,f,c
  3281  000850  501F               	movf	??_crcBufS_status_put,w,c
  3282  000852  2621               	addwf	??_crcBufS_status_put+2,f,c
  3283  000854  5020               	movf	??_crcBufS_status_put+1,w,c
  3284  000856  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3285  000858  0E02               	movlw	2
  3286  00085A  2621               	addwf	??_crcBufS_status_put+2,f,c
  3287  00085C  0E00               	movlw	0
  3288  00085E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3289  000860  5021               	movf	??_crcBufS_status_put+2,w,c
  3290  000862  241B               	addwf	crcBufS_status_put@_this,w,c
  3291  000864  6ED9               	movwf	fsr2l,c
  3292  000866  5022               	movf	??_crcBufS_status_put+3,w,c
  3293  000868  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3294  00086A  6EDA               	movwf	fsr2h,c
  3295  00086C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3296  000870  0012               	return	
  3297  000872                     __end_of_crcBufS_status_put:
  3298                           	opt stack 0
  3299                           tblptru	equ	0xFF8
  3300                           tblptrh	equ	0xFF7
  3301                           tblptrl	equ	0xFF6
  3302                           tablat	equ	0xFF5
  3303                           prodh	equ	0xFF4
  3304                           prodl	equ	0xFF3
  3305                           intcon	equ	0xFF2
  3306                           postinc0	equ	0xFEE
  3307                           wreg	equ	0xFE8
  3308                           indf2	equ	0xFDF
  3309                           postinc2	equ	0xFDE
  3310                           postdec2	equ	0xFDD
  3311                           plusw2	equ	0xFDB
  3312                           fsr2h	equ	0xFDA
  3313                           fsr2l	equ	0xFD9
  3314                           status	equ	0xFD8
  3315                           
  3316 ;; *************** function _crcBufS_get *****************
  3317 ;; Defined at:
  3318 ;;		line 353 in file "FastTransfer.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3321 ;;		 -> crc_buffer(17), 
  3322 ;;  time            1   28[COMRAM] unsigned char 
  3323 ;;  space           1   29[COMRAM] unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  wantedTime      2   36[COMRAM] int 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  1    wreg      unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3335 ;;      Params:         4       0       0       0       0       0       0
  3336 ;;      Locals:         2       0       0       0       0       0       0
  3337 ;;      Temps:          6       0       0       0       0       0       0
  3338 ;;      Totals:        12       0       0       0       0       0       0
  3339 ;;Total ram usage:       12 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    4
  3342 ;; This function calls:
  3343 ;;		Nothing
  3344 ;; This function is called by:
  3345 ;;		_CRCcheck
  3346 ;;		_AKNAK
  3347 ;; This function uses a non-reentrant model
  3348 ;;
  3349                           
  3350                           	psect	text14
  3351  0005E2                     __ptext14:
  3352                           	opt stack 0
  3353  0005E2                     _crcBufS_get:
  3354                           	opt stack 23
  3355                           
  3356                           ;FastTransfer.c: 354: if (time >= 5) {
  3357                           
  3358                           ;incstack = 0
  3359  0005E2  0E04               	movlw	4
  3360  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  3361  0005E6  D002               	goto	l2766
  3362                           
  3363                           ;FastTransfer.c: 355: time = 5 - 1;
  3364  0005E8  0E04               	movlw	4
  3365  0005EA  6E1D               	movwf	crcBufS_get@time,c
  3366  0005EC                     l2766:
  3367                           
  3368                           ;FastTransfer.c: 356: }
  3369                           ;FastTransfer.c: 357: if (space >= 3) {
  3370  0005EC  0E02               	movlw	2
  3371  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  3372  0005F0  D002               	goto	l2770
  3373                           
  3374                           ;FastTransfer.c: 358: space = 3 - 1;
  3375  0005F2  0E02               	movlw	2
  3376  0005F4  6E1E               	movwf	crcBufS_get@space,c
  3377  0005F6                     l2770:
  3378                           
  3379                           ;FastTransfer.c: 359: }
  3380                           ;FastTransfer.c: 360: time = time + 1;
  3381  0005F6  281D               	incf	crcBufS_get@time,w,c
  3382  0005F8  6E1D               	movwf	crcBufS_get@time,c
  3383                           
  3384                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3385  0005FA  501D               	movf	crcBufS_get@time,w,c
  3386  0005FC  0D03               	mullw	3
  3387  0005FE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3388  000602  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3389                           
  3390                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3391  000606  EE20 F00F          	lfsr	2,15
  3392  00060A  501B               	movf	crcBufS_get@_this,w,c
  3393  00060C  26D9               	addwf	fsr2l,f,c
  3394  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  3395  000610  22DA               	addwfc	fsr2h,f,c
  3396  000612  5025               	movf	crcBufS_get@wantedTime,w,c
  3397  000614  5CDE               	subwf	postinc2,w,c
  3398  000616  50DE               	movf	postinc2,w,c
  3399  000618  0A80               	xorlw	128
  3400  00061A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3401  00061C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3402  00061E  0A80               	xorlw	128
  3403  000620  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3404  000622  B0D8               	btfsc	status,0,c
  3405  000624  D02A               	goto	l2782
  3406                           
  3407                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3408  000626  EE20 F00F          	lfsr	2,15
  3409  00062A  501B               	movf	crcBufS_get@_this,w,c
  3410  00062C  26D9               	addwf	fsr2l,f,c
  3411  00062E  501C               	movf	crcBufS_get@_this+1,w,c
  3412  000630  22DA               	addwfc	fsr2h,f,c
  3413  000632  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3414  000636  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3415  00063A  1E1F               	comf	??_crcBufS_get,f,c
  3416  00063C  1E20               	comf	??_crcBufS_get+1,f,c
  3417  00063E  4A1F               	infsnz	??_crcBufS_get,f,c
  3418  000640  2A20               	incf	??_crcBufS_get+1,f,c
  3419  000642  5025               	movf	crcBufS_get@wantedTime,w,c
  3420  000644  261F               	addwf	??_crcBufS_get,f,c
  3421  000646  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3422  000648  2220               	addwfc	??_crcBufS_get+1,f,c
  3423  00064A  1E1F               	comf	??_crcBufS_get,f,c
  3424  00064C  1E20               	comf	??_crcBufS_get+1,f,c
  3425  00064E  4A1F               	infsnz	??_crcBufS_get,f,c
  3426  000650  2A20               	incf	??_crcBufS_get+1,f,c
  3427  000652  0E0F               	movlw	15
  3428  000654  241F               	addwf	??_crcBufS_get,w,c
  3429  000656  6E25               	movwf	crcBufS_get@wantedTime,c
  3430  000658  0E00               	movlw	0
  3431  00065A  2020               	addwfc	??_crcBufS_get+1,w,c
  3432  00065C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3433                           
  3434                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3435  00065E  501E               	movf	crcBufS_get@space,w,c
  3436  000660  2425               	addwf	crcBufS_get@wantedTime,w,c
  3437  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3438  000664  0E00               	movlw	0
  3439  000666  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3440  000668  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3441  00066A  501F               	movf	??_crcBufS_get,w,c
  3442  00066C  241B               	addwf	crcBufS_get@_this,w,c
  3443  00066E  6ED9               	movwf	fsr2l,c
  3444  000670  5020               	movf	??_crcBufS_get+1,w,c
  3445  000672  201C               	addwfc	crcBufS_get@_this+1,w,c
  3446  000674  6EDA               	movwf	fsr2h,c
  3447  000676  50DF               	movf	indf2,w,c
  3448                           
  3449                           ;FastTransfer.c: 365: } else {
  3450  000678  0012               	return	
  3451  00067A                     l2782:
  3452                           
  3453                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3454  00067A  EE20 F00F          	lfsr	2,15
  3455  00067E  501B               	movf	crcBufS_get@_this,w,c
  3456  000680  26D9               	addwf	fsr2l,f,c
  3457  000682  501C               	movf	crcBufS_get@_this+1,w,c
  3458  000684  22DA               	addwfc	fsr2h,f,c
  3459  000686  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3460  00068A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3461  00068E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3462  000692  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3463  000696  1E21               	comf	??_crcBufS_get+2,f,c
  3464  000698  1E22               	comf	??_crcBufS_get+3,f,c
  3465  00069A  4A21               	infsnz	??_crcBufS_get+2,f,c
  3466  00069C  2A22               	incf	??_crcBufS_get+3,f,c
  3467  00069E  501E               	movf	crcBufS_get@space,w,c
  3468  0006A0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3469  0006A2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3470  0006A4  5021               	movf	??_crcBufS_get+2,w,c
  3471  0006A6  2623               	addwf	??_crcBufS_get+4,f,c
  3472  0006A8  5022               	movf	??_crcBufS_get+3,w,c
  3473  0006AA  2224               	addwfc	??_crcBufS_get+5,f,c
  3474  0006AC  501F               	movf	??_crcBufS_get,w,c
  3475  0006AE  2623               	addwf	??_crcBufS_get+4,f,c
  3476  0006B0  5020               	movf	??_crcBufS_get+1,w,c
  3477  0006B2  2224               	addwfc	??_crcBufS_get+5,f,c
  3478  0006B4  5023               	movf	??_crcBufS_get+4,w,c
  3479  0006B6  241B               	addwf	crcBufS_get@_this,w,c
  3480  0006B8  6ED9               	movwf	fsr2l,c
  3481  0006BA  5024               	movf	??_crcBufS_get+5,w,c
  3482  0006BC  201C               	addwfc	crcBufS_get@_this+1,w,c
  3483  0006BE  6EDA               	movwf	fsr2h,c
  3484  0006C0  50DF               	movf	indf2,w,c
  3485  0006C2  0012               	return	
  3486  0006C4                     __end_of_crcBufS_get:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           indf2	equ	0xFDF
  3498                           postinc2	equ	0xFDE
  3499                           postdec2	equ	0xFDD
  3500                           plusw2	equ	0xFDB
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _CRC8 *****************
  3506 ;; Defined at:
  3507 ;;		line 34 in file "FastTransfer.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3510 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1408(3), receiveData@holder(3), rx_buffer(200), 
  3511 ;;		 -> ring_buffer(206), NULL(0), 
  3512 ;;  len             1   28[COMRAM] unsigned char 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  sum             1   29[COMRAM] unsigned char 
  3515 ;;  tempI           1   31[COMRAM] unsigned char 
  3516 ;;  extract         1   30[COMRAM] unsigned char 
  3517 ;;  crc             1   32[COMRAM] unsigned char 
  3518 ;; Return value:  Size  Location     Type
  3519 ;;                  1    wreg      unsigned char 
  3520 ;; Registers used:
  3521 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3522 ;; Tracked objects:
  3523 ;;		On entry : 0/0
  3524 ;;		On exit  : 0/0
  3525 ;;		Unchanged: 0/0
  3526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3527 ;;      Params:         3       0       0       0       0       0       0
  3528 ;;      Locals:         4       0       0       0       0       0       0
  3529 ;;      Temps:          0       0       0       0       0       0       0
  3530 ;;      Totals:         7       0       0       0       0       0       0
  3531 ;;Total ram usage:        7 bytes
  3532 ;; Hardware stack levels used:    1
  3533 ;; Hardware stack levels required when called:    4
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_sendData
  3538 ;;		_receiveData
  3539 ;;		_CRCcheck
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text15
  3544  000CD0                     __ptext15:
  3545                           	opt stack 0
  3546  000CD0                     _CRC8:
  3547                           	opt stack 23
  3548                           
  3549                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3550                           
  3551                           ;incstack = 0
  3552  000CD0  0E00               	movlw	0
  3553  000CD2  6E21               	movwf	CRC8@crc,c
  3554                           
  3555                           ;FastTransfer.c: 36: while (len--) {
  3556  000CD4  D01C               	goto	l2728
  3557  000CD6                     l2712:
  3558                           
  3559                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3560  000CD6  C01B  FFD9         	movff	CRC8@data,fsr2l
  3561  000CDA  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3562  000CDE  50DF               	movf	indf2,w,c
  3563  000CE0  6E1F               	movwf	CRC8@extract,c
  3564  000CE2  4A1B               	infsnz	CRC8@data,f,c
  3565  000CE4  2A1C               	incf	CRC8@data+1,f,c
  3566                           
  3567                           ;FastTransfer.c: 38: unsigned char tempI;
  3568                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3569  000CE6  0E08               	movlw	8
  3570  000CE8  6E20               	movwf	CRC8@tempI,c
  3571  000CEA  D00E               	goto	l2726
  3572  000CEC                     l2718:
  3573                           
  3574                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3575  000CEC  5021               	movf	CRC8@crc,w,c
  3576  000CEE  181F               	xorwf	CRC8@extract,w,c
  3577  000CF0  0B01               	andlw	1
  3578  000CF2  6E1E               	movwf	CRC8@sum,c
  3579                           
  3580                           ;FastTransfer.c: 41: crc >>= 1;
  3581  000CF4  90D8               	bcf	status,0,c
  3582  000CF6  3221               	rrcf	CRC8@crc,f,c
  3583                           
  3584                           ;FastTransfer.c: 42: if (sum) {
  3585  000CF8  501E               	movf	CRC8@sum,w,c
  3586  000CFA  B4D8               	btfsc	status,2,c
  3587  000CFC  D002               	goto	l369
  3588                           
  3589                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3590  000CFE  0E8C               	movlw	140
  3591  000D00  1A21               	xorwf	CRC8@crc,f,c
  3592  000D02                     l369:
  3593                           
  3594                           ;FastTransfer.c: 44: }
  3595                           ;FastTransfer.c: 45: extract >>= 1;
  3596  000D02  90D8               	bcf	status,0,c
  3597  000D04  321F               	rrcf	CRC8@extract,f,c
  3598  000D06  0620               	decf	CRC8@tempI,f,c
  3599  000D08                     l2726:
  3600  000D08  5020               	movf	CRC8@tempI,w,c
  3601  000D0A  A4D8               	btfss	status,2,c
  3602  000D0C  D7EF               	goto	l2718
  3603  000D0E                     l2728:
  3604  000D0E  061D               	decf	CRC8@len,f,c
  3605  000D10  281D               	incf	CRC8@len,w,c
  3606  000D12  A4D8               	btfss	status,2,c
  3607  000D14  D7E0               	goto	l2712
  3608                           
  3609                           ;FastTransfer.c: 46: }
  3610                           ;FastTransfer.c: 47: }
  3611                           ;FastTransfer.c: 48: return crc;
  3612  000D16  5021               	movf	CRC8@crc,w,c
  3613  000D18  0012               	return	
  3614  000D1A                     __end_of_CRC8:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           prodh	equ	0xFF4
  3621                           prodl	equ	0xFF3
  3622                           intcon	equ	0xFF2
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           plusw2	equ	0xFDB
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           
  3633 ;; *************** function _gotoXy *****************
  3634 ;; Defined at:
  3635 ;;		line 37 in file "NokiaLCD.c"
  3636 ;; Parameters:    Size  Location     Type
  3637 ;;  x               1    wreg     unsigned char 
  3638 ;;  y               1   27[COMRAM] unsigned char 
  3639 ;; Auto vars:     Size  Location     Type
  3640 ;;  x               1   28[COMRAM] unsigned char 
  3641 ;; Return value:  Size  Location     Type
  3642 ;;                  1    wreg      void 
  3643 ;; Registers used:
  3644 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3645 ;; Tracked objects:
  3646 ;;		On entry : 0/0
  3647 ;;		On exit  : 0/0
  3648 ;;		Unchanged: 0/0
  3649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3650 ;;      Params:         1       0       0       0       0       0       0
  3651 ;;      Locals:         1       0       0       0       0       0       0
  3652 ;;      Temps:          0       0       0       0       0       0       0
  3653 ;;      Totals:         2       0       0       0       0       0       0
  3654 ;;Total ram usage:        2 bytes
  3655 ;; Hardware stack levels used:    1
  3656 ;; Hardware stack levels required when called:    5
  3657 ;; This function calls:
  3658 ;;		_SPI2_Exchange8bit
  3659 ;; This function is called by:
  3660 ;;		_main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           	psect	text16
  3665  000F2C                     __ptext16:
  3666                           	opt stack 0
  3667  000F2C                     _gotoXy:
  3668                           	opt stack 25
  3669                           
  3670                           ;incstack = 0
  3671                           ;gotoXy@x stored from wreg
  3672  000F2C  6E1D               	movwf	gotoXy@x,c
  3673                           
  3674                           ;NokiaLCD.c: 38: do { LATD3 = 0; } while(0);
  3675  000F2E  968C               	bcf	3980,3,c	;volatile
  3676                           
  3677                           ;NokiaLCD.c: 39: y=y|0x40;
  3678  000F30  501C               	movf	gotoXy@y,w,c
  3679  000F32  0940               	iorlw	64
  3680  000F34  6E1C               	movwf	gotoXy@y,c
  3681                           
  3682                           ;NokiaLCD.c: 40: SPI2_Exchange8bit(y);
  3683  000F36  501C               	movf	gotoXy@y,w,c
  3684  000F38  ECE7  F007         	call	_SPI2_Exchange8bit
  3685                           
  3686                           ;NokiaLCD.c: 41: x=(x*6)|0x80;
  3687  000F3C  501D               	movf	gotoXy@x,w,c
  3688  000F3E  0D06               	mullw	6
  3689  000F40  50F3               	movf	prodl,w,c
  3690  000F42  0980               	iorlw	128
  3691  000F44  6E1D               	movwf	gotoXy@x,c
  3692                           
  3693                           ;NokiaLCD.c: 42: SPI2_Exchange8bit(x);
  3694  000F46  501D               	movf	gotoXy@x,w,c
  3695  000F48  ECE7  F007         	call	_SPI2_Exchange8bit
  3696                           
  3697                           ;NokiaLCD.c: 43: do { LATD3 = 1; } while(0);
  3698  000F4C  868C               	bsf	3980,3,c	;volatile
  3699  000F4E  0012               	return	
  3700  000F50                     __end_of_gotoXy:
  3701                           	opt stack 0
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           prodh	equ	0xFF4
  3707                           prodl	equ	0xFF3
  3708                           intcon	equ	0xFF2
  3709                           postinc0	equ	0xFEE
  3710                           wreg	equ	0xFE8
  3711                           indf2	equ	0xFDF
  3712                           postinc2	equ	0xFDE
  3713                           postdec2	equ	0xFDD
  3714                           plusw2	equ	0xFDB
  3715                           fsr2h	equ	0xFDA
  3716                           fsr2l	equ	0xFD9
  3717                           status	equ	0xFD8
  3718                           
  3719 ;; *************** function _SYSTEM_Initialize *****************
  3720 ;; Defined at:
  3721 ;;		line 112 in file "mcc_generated_files/mcc.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;		None
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;		None
  3726 ;; Return value:  Size  Location     Type
  3727 ;;                  1    wreg      void 
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3735 ;;      Params:         0       0       0       0       0       0       0
  3736 ;;      Locals:         0       0       0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0
  3738 ;;      Totals:         0       0       0       0       0       0       0
  3739 ;;Total ram usage:        0 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    6
  3742 ;; This function calls:
  3743 ;;		_EUSART2_Initialize
  3744 ;;		_INTERRUPT_Initialize
  3745 ;;		_OSCILLATOR_Initialize
  3746 ;;		_PIN_MANAGER_Initialize
  3747 ;;		_TMR0_Initialize
  3748 ;; This function is called by:
  3749 ;;		_main
  3750 ;; This function uses a non-reentrant model
  3751 ;;
  3752                           
  3753                           	psect	text17
  3754  000FA2                     __ptext17:
  3755                           	opt stack 0
  3756  000FA2                     _SYSTEM_Initialize:
  3757                           	opt stack 24
  3758                           
  3759                           ;mcc.c: 113: OSCILLATOR_Initialize();
  3760                           
  3761                           ;incstack = 0
  3762  000FA2  ECEF  F007         	call	_OSCILLATOR_Initialize	;wreg free
  3763                           
  3764                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  3765  000FA6  EC42  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  3766                           
  3767                           ;mcc.c: 115: INTERRUPT_Initialize();
  3768  000FAA  ECF6  F007         	call	_INTERRUPT_Initialize	;wreg free
  3769                           
  3770                           ;mcc.c: 117: EUSART2_Initialize();
  3771  000FAE  EC8D  F006         	call	_EUSART2_Initialize	;wreg free
  3772                           
  3773                           ;mcc.c: 118: TMR0_Initialize();
  3774  000FB2  ECC5  F007         	call	_TMR0_Initialize	;wreg free
  3775  000FB6  0012               	return		;funcret
  3776  000FB8                     __end_of_SYSTEM_Initialize:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           prodh	equ	0xFF4
  3783                           prodl	equ	0xFF3
  3784                           intcon	equ	0xFF2
  3785                           postinc0	equ	0xFEE
  3786                           wreg	equ	0xFE8
  3787                           indf2	equ	0xFDF
  3788                           postinc2	equ	0xFDE
  3789                           postdec2	equ	0xFDD
  3790                           plusw2	equ	0xFDB
  3791                           fsr2h	equ	0xFDA
  3792                           fsr2l	equ	0xFD9
  3793                           status	equ	0xFD8
  3794                           
  3795 ;; *************** function _TMR0_Initialize *****************
  3796 ;; Defined at:
  3797 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  3798 ;; Parameters:    Size  Location     Type
  3799 ;;		None
  3800 ;; Auto vars:     Size  Location     Type
  3801 ;;		None
  3802 ;; Return value:  Size  Location     Type
  3803 ;;                  1    wreg      void 
  3804 ;; Registers used:
  3805 ;;		wreg, status,2, cstack
  3806 ;; Tracked objects:
  3807 ;;		On entry : 0/0
  3808 ;;		On exit  : 0/0
  3809 ;;		Unchanged: 0/0
  3810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3811 ;;      Params:         0       0       0       0       0       0       0
  3812 ;;      Locals:         0       0       0       0       0       0       0
  3813 ;;      Temps:          0       0       0       0       0       0       0
  3814 ;;      Totals:         0       0       0       0       0       0       0
  3815 ;;Total ram usage:        0 bytes
  3816 ;; Hardware stack levels used:    1
  3817 ;; Hardware stack levels required when called:    5
  3818 ;; This function calls:
  3819 ;;		_TMR0_StartTimer
  3820 ;; This function is called by:
  3821 ;;		_SYSTEM_Initialize
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           	psect	text18
  3826  000F8A                     __ptext18:
  3827                           	opt stack 0
  3828  000F8A                     _TMR0_Initialize:
  3829                           	opt stack 24
  3830                           
  3831                           ;tmr0.c: 68: T0CON = 0x91;
  3832                           
  3833                           ;incstack = 0
  3834  000F8A  0E91               	movlw	145
  3835  000F8C  6ED5               	movwf	4053,c	;volatile
  3836                           
  3837                           ;tmr0.c: 71: TMR0H = 0x0A;
  3838  000F8E  0E0A               	movlw	10
  3839  000F90  6ED7               	movwf	4055,c	;volatile
  3840                           
  3841                           ;tmr0.c: 74: TMR0L = 0xFF;
  3842  000F92  68D6               	setf	4054,c	;volatile
  3843                           
  3844                           ;tmr0.c: 77: timer0ReloadVal16bit = 2815;
  3845  000F94  0E0A               	movlw	10
  3846  000F96  6E42               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  3847  000F98  6841               	setf	_timer0ReloadVal16bit,c	;volatile
  3848                           
  3849                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  3850  000F9A  94F2               	bcf	intcon,2,c	;volatile
  3851                           
  3852                           ;tmr0.c: 83: TMR0_StartTimer();
  3853  000F9C  ECFC  F007         	call	_TMR0_StartTimer	;wreg free
  3854  000FA0  0012               	return		;funcret
  3855  000FA2                     __end_of_TMR0_Initialize:
  3856                           	opt stack 0
  3857                           tblptru	equ	0xFF8
  3858                           tblptrh	equ	0xFF7
  3859                           tblptrl	equ	0xFF6
  3860                           tablat	equ	0xFF5
  3861                           prodh	equ	0xFF4
  3862                           prodl	equ	0xFF3
  3863                           intcon	equ	0xFF2
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           postdec2	equ	0xFDD
  3869                           plusw2	equ	0xFDB
  3870                           fsr2h	equ	0xFDA
  3871                           fsr2l	equ	0xFD9
  3872                           status	equ	0xFD8
  3873                           
  3874 ;; *************** function _TMR0_StartTimer *****************
  3875 ;; Defined at:
  3876 ;;		line 86 in file "mcc_generated_files/tmr0.c"
  3877 ;; Parameters:    Size  Location     Type
  3878 ;;		None
  3879 ;; Auto vars:     Size  Location     Type
  3880 ;;		None
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		None
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3890 ;;      Params:         0       0       0       0       0       0       0
  3891 ;;      Locals:         0       0       0       0       0       0       0
  3892 ;;      Temps:          0       0       0       0       0       0       0
  3893 ;;      Totals:         0       0       0       0       0       0       0
  3894 ;;Total ram usage:        0 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    4
  3897 ;; This function calls:
  3898 ;;		Nothing
  3899 ;; This function is called by:
  3900 ;;		_TMR0_Initialize
  3901 ;; This function uses a non-reentrant model
  3902 ;;
  3903                           
  3904                           	psect	text19
  3905  000FF8                     __ptext19:
  3906                           	opt stack 0
  3907  000FF8                     _TMR0_StartTimer:
  3908                           	opt stack 24
  3909                           
  3910                           ;tmr0.c: 88: T0CONbits.TMR0ON = 1;
  3911                           
  3912                           ;incstack = 0
  3913  000FF8  8ED5               	bsf	4053,7,c	;volatile
  3914  000FFA  0012               	return		;funcret
  3915  000FFC                     __end_of_TMR0_StartTimer:
  3916                           	opt stack 0
  3917                           tblptru	equ	0xFF8
  3918                           tblptrh	equ	0xFF7
  3919                           tblptrl	equ	0xFF6
  3920                           tablat	equ	0xFF5
  3921                           prodh	equ	0xFF4
  3922                           prodl	equ	0xFF3
  3923                           intcon	equ	0xFF2
  3924                           postinc0	equ	0xFEE
  3925                           wreg	equ	0xFE8
  3926                           indf2	equ	0xFDF
  3927                           postinc2	equ	0xFDE
  3928                           postdec2	equ	0xFDD
  3929                           plusw2	equ	0xFDB
  3930                           fsr2h	equ	0xFDA
  3931                           fsr2l	equ	0xFD9
  3932                           status	equ	0xFD8
  3933                           
  3934 ;; *************** function _PIN_MANAGER_Initialize *****************
  3935 ;; Defined at:
  3936 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3950 ;;      Params:         0       0       0       0       0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0
  3953 ;;      Totals:         0       0       0       0       0       0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    4
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_SYSTEM_Initialize
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text20
  3965  000C84                     __ptext20:
  3966                           	opt stack 0
  3967  000C84                     _PIN_MANAGER_Initialize:
  3968                           	opt stack 25
  3969                           
  3970                           ;pin_manager.c: 51: LATA = 0x00;
  3971                           
  3972                           ;incstack = 0
  3973  000C84  0E00               	movlw	0
  3974  000C86  6E89               	movwf	3977,c	;volatile
  3975                           
  3976                           ;pin_manager.c: 52: TRISA = 0x07;
  3977  000C88  0E07               	movlw	7
  3978  000C8A  6E92               	movwf	3986,c	;volatile
  3979                           
  3980                           ;pin_manager.c: 53: ANSELA = 0x07;
  3981  000C8C  0E07               	movlw	7
  3982  000C8E  010F               	movlb	15	; () banked
  3983  000C90  6F38               	movwf	56,b	;volatile
  3984                           
  3985                           ;pin_manager.c: 55: LATB = 0x00;
  3986  000C92  0E00               	movlw	0
  3987  000C94  6E8A               	movwf	3978,c	;volatile
  3988                           
  3989                           ;pin_manager.c: 56: TRISB = 0xE7;
  3990  000C96  0EE7               	movlw	231
  3991  000C98  6E93               	movwf	3987,c	;volatile
  3992                           
  3993                           ;pin_manager.c: 57: ANSELB = 0x27;
  3994  000C9A  0E27               	movlw	39
  3995  000C9C  010F               	movlb	15	; () banked
  3996  000C9E  6F39               	movwf	57,b	;volatile
  3997                           
  3998                           ;pin_manager.c: 58: WPUB = 0x00;
  3999  000CA0  0E00               	movlw	0
  4000  000CA2  6E61               	movwf	3937,c	;volatile
  4001                           
  4002                           ;pin_manager.c: 60: LATC = 0x00;
  4003  000CA4  0E00               	movlw	0
  4004  000CA6  6E8B               	movwf	3979,c	;volatile
  4005                           
  4006                           ;pin_manager.c: 61: TRISC = 0xDC;
  4007  000CA8  0EDC               	movlw	220
  4008  000CAA  6E94               	movwf	3988,c	;volatile
  4009                           
  4010                           ;pin_manager.c: 62: ANSELC = 0x14;
  4011  000CAC  0E14               	movlw	20
  4012  000CAE  010F               	movlb	15	; () banked
  4013  000CB0  6F3A               	movwf	58,b	;volatile
  4014                           
  4015                           ;pin_manager.c: 64: LATD = 0x00;
  4016  000CB2  0E00               	movlw	0
  4017  000CB4  6E8C               	movwf	3980,c	;volatile
  4018                           
  4019                           ; BSR set to: 15
  4020                           ;pin_manager.c: 65: TRISD = 0xFF;
  4021  000CB6  6895               	setf	3989,c	;volatile
  4022                           
  4023                           ;pin_manager.c: 66: ANSELD = 0x3F;
  4024  000CB8  0E3F               	movlw	63
  4025  000CBA  010F               	movlb	15	; () banked
  4026  000CBC  6F3B               	movwf	59,b	;volatile
  4027                           
  4028                           ;pin_manager.c: 68: LATE = 0x00;
  4029  000CBE  0E00               	movlw	0
  4030  000CC0  6E8D               	movwf	3981,c	;volatile
  4031                           
  4032                           ;pin_manager.c: 69: TRISE = 0x07;
  4033  000CC2  0E07               	movlw	7
  4034  000CC4  6E96               	movwf	3990,c	;volatile
  4035                           
  4036                           ;pin_manager.c: 70: ANSELE = 0x07;
  4037  000CC6  0E07               	movlw	7
  4038  000CC8  010F               	movlb	15	; () banked
  4039  000CCA  6F3C               	movwf	60,b	;volatile
  4040                           
  4041                           ; BSR set to: 15
  4042                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x01;
  4043  000CCC  8EF1               	bsf	intcon2,7,c	;volatile
  4044                           
  4045                           ; BSR set to: 15
  4046  000CCE  0012               	return		;funcret
  4047  000CD0                     __end_of_PIN_MANAGER_Initialize:
  4048                           	opt stack 0
  4049                           tblptru	equ	0xFF8
  4050                           tblptrh	equ	0xFF7
  4051                           tblptrl	equ	0xFF6
  4052                           tablat	equ	0xFF5
  4053                           prodh	equ	0xFF4
  4054                           prodl	equ	0xFF3
  4055                           intcon	equ	0xFF2
  4056                           intcon2	equ	0xFF1
  4057                           postinc0	equ	0xFEE
  4058                           wreg	equ	0xFE8
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           plusw2	equ	0xFDB
  4063                           fsr2h	equ	0xFDA
  4064                           fsr2l	equ	0xFD9
  4065                           status	equ	0xFD8
  4066                           
  4067 ;; *************** function _OSCILLATOR_Initialize *****************
  4068 ;; Defined at:
  4069 ;;		line 121 in file "mcc_generated_files/mcc.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		wreg, status,2
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4083 ;;      Params:         0       0       0       0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0
  4086 ;;      Totals:         0       0       0       0       0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; Hardware stack levels required when called:    4
  4090 ;; This function calls:
  4091 ;;		Nothing
  4092 ;; This function is called by:
  4093 ;;		_SYSTEM_Initialize
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           	psect	text21
  4098  000FDE                     __ptext21:
  4099                           	opt stack 0
  4100  000FDE                     _OSCILLATOR_Initialize:
  4101                           	opt stack 25
  4102                           
  4103                           ;mcc.c: 123: OSCCON = 0x70;
  4104                           
  4105                           ; BSR set to: 15
  4106                           ;incstack = 0
  4107  000FDE  0E70               	movlw	112
  4108  000FE0  6ED3               	movwf	4051,c	;volatile
  4109                           
  4110                           ;mcc.c: 125: OSCCON2 = 0x04;
  4111  000FE2  0E04               	movlw	4
  4112  000FE4  6ED2               	movwf	4050,c	;volatile
  4113                           
  4114                           ;mcc.c: 127: OSCTUNE = 0x00;
  4115  000FE6  0E00               	movlw	0
  4116  000FE8  6E9B               	movwf	3995,c	;volatile
  4117  000FEA  0012               	return		;funcret
  4118  000FEC                     __end_of_OSCILLATOR_Initialize:
  4119                           	opt stack 0
  4120                           tblptru	equ	0xFF8
  4121                           tblptrh	equ	0xFF7
  4122                           tblptrl	equ	0xFF6
  4123                           tablat	equ	0xFF5
  4124                           prodh	equ	0xFF4
  4125                           prodl	equ	0xFF3
  4126                           intcon	equ	0xFF2
  4127                           intcon2	equ	0xFF1
  4128                           postinc0	equ	0xFEE
  4129                           wreg	equ	0xFE8
  4130                           indf2	equ	0xFDF
  4131                           postinc2	equ	0xFDE
  4132                           postdec2	equ	0xFDD
  4133                           plusw2	equ	0xFDB
  4134                           fsr2h	equ	0xFDA
  4135                           fsr2l	equ	0xFD9
  4136                           status	equ	0xFD8
  4137                           
  4138 ;; *************** function _INTERRUPT_Initialize *****************
  4139 ;; Defined at:
  4140 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  1    wreg      void 
  4147 ;; Registers used:
  4148 ;;		None
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4154 ;;      Params:         0       0       0       0       0       0       0
  4155 ;;      Locals:         0       0       0       0       0       0       0
  4156 ;;      Temps:          0       0       0       0       0       0       0
  4157 ;;      Totals:         0       0       0       0       0       0       0
  4158 ;;Total ram usage:        0 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    4
  4161 ;; This function calls:
  4162 ;;		Nothing
  4163 ;; This function is called by:
  4164 ;;		_SYSTEM_Initialize
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text22
  4169  000FEC                     __ptext22:
  4170                           	opt stack 0
  4171  000FEC                     _INTERRUPT_Initialize:
  4172                           	opt stack 25
  4173                           
  4174                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  4175                           
  4176                           ;incstack = 0
  4177  000FEC  9ED0               	bcf	4048,7,c	;volatile
  4178                           
  4179                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  4180  000FEE  9AA5               	bcf	4005,5,c	;volatile
  4181                           
  4182                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  4183  000FF0  98A5               	bcf	4005,4,c	;volatile
  4184                           
  4185                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  4186  000FF2  9A9F               	bcf	3999,5,c	;volatile
  4187                           
  4188                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  4189  000FF4  989F               	bcf	3999,4,c	;volatile
  4190  000FF6  0012               	return		;funcret
  4191  000FF8                     __end_of_INTERRUPT_Initialize:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           intcon	equ	0xFF2
  4200                           intcon2	equ	0xFF1
  4201                           postinc0	equ	0xFEE
  4202                           wreg	equ	0xFE8
  4203                           indf2	equ	0xFDF
  4204                           postinc2	equ	0xFDE
  4205                           postdec2	equ	0xFDD
  4206                           plusw2	equ	0xFDB
  4207                           fsr2h	equ	0xFDA
  4208                           fsr2l	equ	0xFD9
  4209                           status	equ	0xFD8
  4210                           
  4211 ;; *************** function _EUSART2_Initialize *****************
  4212 ;; Defined at:
  4213 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  4214 ;; Parameters:    Size  Location     Type
  4215 ;;		None
  4216 ;; Auto vars:     Size  Location     Type
  4217 ;;		None
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      void 
  4220 ;; Registers used:
  4221 ;;		wreg, status,2
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4227 ;;      Params:         0       0       0       0       0       0       0
  4228 ;;      Locals:         0       0       0       0       0       0       0
  4229 ;;      Temps:          0       0       0       0       0       0       0
  4230 ;;      Totals:         0       0       0       0       0       0       0
  4231 ;;Total ram usage:        0 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    4
  4234 ;; This function calls:
  4235 ;;		Nothing
  4236 ;; This function is called by:
  4237 ;;		_SYSTEM_Initialize
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text23
  4242  000D1A                     __ptext23:
  4243                           	opt stack 0
  4244  000D1A                     _EUSART2_Initialize:
  4245                           	opt stack 25
  4246                           
  4247                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  4248                           
  4249                           ;incstack = 0
  4250  000D1A  9AA3               	bcf	4003,5,c	;volatile
  4251                           
  4252                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  4253  000D1C  98A3               	bcf	4003,4,c	;volatile
  4254                           
  4255                           ;eusart2.c: 84: BAUD2CON = 0x48;
  4256  000D1E  0E48               	movlw	72
  4257  000D20  6E70               	movwf	3952,c	;volatile
  4258                           
  4259                           ;eusart2.c: 87: RC2STA = 0x90;
  4260  000D22  0E90               	movlw	144
  4261  000D24  6E71               	movwf	3953,c	;volatile
  4262                           
  4263                           ;eusart2.c: 90: TX2STA = 0x26;
  4264  000D26  0E26               	movlw	38
  4265  000D28  6E72               	movwf	3954,c	;volatile
  4266                           
  4267                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  4268  000D2A  0EA0               	movlw	160
  4269  000D2C  6E75               	movwf	3957,c	;volatile
  4270                           
  4271                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  4272  000D2E  0E01               	movlw	1
  4273  000D30  6E76               	movwf	3958,c	;volatile
  4274                           
  4275                           ;eusart2.c: 100: eusart2TxHead = 0;
  4276  000D32  0E00               	movlw	0
  4277  000D34  6E38               	movwf	_eusart2TxHead,c
  4278                           
  4279                           ;eusart2.c: 101: eusart2TxTail = 0;
  4280  000D36  0E00               	movlw	0
  4281  000D38  6E39               	movwf	_eusart2TxTail,c
  4282                           
  4283                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  4284  000D3A  0E08               	movlw	8
  4285  000D3C  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  4286                           
  4287                           ;eusart2.c: 104: eusart2RxHead = 0;
  4288  000D3E  0E00               	movlw	0
  4289  000D40  6E36               	movwf	_eusart2RxHead,c
  4290                           
  4291                           ;eusart2.c: 105: eusart2RxTail = 0;
  4292  000D42  0E00               	movlw	0
  4293  000D44  6E37               	movwf	_eusart2RxTail,c
  4294                           
  4295                           ;eusart2.c: 106: eusart2RxCount = 0;
  4296  000D46  0E00               	movlw	0
  4297  000D48  6E35               	movwf	_eusart2RxCount,c	;volatile
  4298                           
  4299                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  4300  000D4A  8AA3               	bsf	4003,5,c	;volatile
  4301  000D4C  0012               	return		;funcret
  4302  000D4E                     __end_of_EUSART2_Initialize:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           intcon2	equ	0xFF1
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           plusw2	equ	0xFDB
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function _NokiaStr *****************
  4323 ;; Defined at:
  4324 ;;		line 46 in file "NokiaLCD.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;  str             2   32[COMRAM] PTR unsigned char 
  4327 ;;		 -> ddata(11), 
  4328 ;;  len             1   34[COMRAM] unsigned char 
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;  i               2    0[BANK0 ] int 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4340 ;;      Params:         3       0       0       0       0       0       0
  4341 ;;      Locals:         0       2       0       0       0       0       0
  4342 ;;      Temps:          3       0       0       0       0       0       0
  4343 ;;      Totals:         6       2       0       0       0       0       0
  4344 ;;Total ram usage:        8 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    5
  4347 ;; This function calls:
  4348 ;;		_SPI2_Exchange8bit
  4349 ;;		___wmul
  4350 ;; This function is called by:
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text24
  4356  00099A                     __ptext24:
  4357                           	opt stack 0
  4358  00099A                     _NokiaStr:
  4359                           	opt stack 25
  4360                           
  4361                           ;incstack = 0
  4362                           ;NokiaLCD.c: 47: int i;
  4363                           ;NokiaLCD.c: 48: do { LATD3 = 1; } while(0);
  4364  00099A  868C               	bsf	3980,3,c	;volatile
  4365  00099C                     l3022:
  4366                           
  4367                           ;NokiaLCD.c: 49: for(;len>0;len --){
  4368  00099C  5023               	movf	NokiaStr@len,w,c
  4369  00099E  B4D8               	btfsc	status,2,c
  4370  0009A0  0012               	return	
  4371                           
  4372                           ;NokiaLCD.c: 50: for(i=0;i<=4;i++){
  4373  0009A2  0E00               	movlw	0
  4374  0009A4  0100               	movlb	0	; () banked
  4375  0009A6  6FC3               	movwf	(NokiaStr@i+1)& (0+255),b
  4376  0009A8  0E00               	movlw	0
  4377  0009AA  6FC2               	movwf	NokiaStr@i& (0+255),b
  4378  0009AC                     l3028:
  4379                           
  4380                           ; BSR set to: 0
  4381  0009AC  0100               	movlb	0	; () banked
  4382  0009AE  BFC3               	btfsc	(NokiaStr@i+1)& (0+255),7,b
  4383  0009B0  D008               	goto	l3032
  4384  0009B2  0100               	movlb	0	; () banked
  4385  0009B4  51C3               	movf	(NokiaStr@i+1)& (0+255),w,b
  4386  0009B6  E136               	bnz	l3042
  4387  0009B8  0E05               	movlw	5
  4388  0009BA  0100               	movlb	0	; () banked
  4389  0009BC  5DC2               	subwf	NokiaStr@i& (0+255),w,b
  4390  0009BE  B0D8               	btfsc	status,0,c
  4391  0009C0  D031               	goto	l3042
  4392  0009C2                     l3032:
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;NokiaLCD.c: 51: SPI2_Exchange8bit(FONTLOOKUP[*str-32][i]);
  4396  0009C2  C021  FFD9         	movff	NokiaStr@str,fsr2l
  4397  0009C6  C022  FFDA         	movff	NokiaStr@str+1,fsr2h
  4398  0009CA  50DF               	movf	indf2,w,c
  4399  0009CC  6E24               	movwf	??_NokiaStr& (0+255),c
  4400  0009CE  0EE0               	movlw	224
  4401  0009D0  2424               	addwf	??_NokiaStr,w,c
  4402  0009D2  6E1B               	movwf	___wmul@multiplier,c
  4403  0009D4  6A1C               	clrf	___wmul@multiplier+1,c
  4404  0009D6  0EFF               	movlw	255
  4405  0009D8  221C               	addwfc	___wmul@multiplier+1,f,c
  4406  0009DA  0E00               	movlw	0
  4407  0009DC  6E1E               	movwf	___wmul@multiplicand+1,c
  4408  0009DE  0E05               	movlw	5
  4409  0009E0  6E1D               	movwf	___wmul@multiplicand,c
  4410  0009E2  EC83  F007         	call	___wmul	;wreg free
  4411  0009E6  0E37               	movlw	low _FONTLOOKUP
  4412  0009E8  6E25               	movwf	(??_NokiaStr+1)& (0+255),c
  4413  0009EA  0E7E               	movlw	high _FONTLOOKUP
  4414  0009EC  6E26               	movwf	(??_NokiaStr+2)& (0+255),c
  4415  0009EE  501B               	movf	?___wmul,w,c
  4416  0009F0  2625               	addwf	??_NokiaStr+1,f,c
  4417  0009F2  501C               	movf	?___wmul+1,w,c
  4418  0009F4  2226               	addwfc	??_NokiaStr+2,f,c
  4419  0009F6  0100               	movlb	0	; () banked
  4420  0009F8  51C2               	movf	NokiaStr@i& (0+255),w,b
  4421  0009FA  2625               	addwf	??_NokiaStr+1,f,c
  4422  0009FC  0100               	movlb	0	; () banked
  4423  0009FE  51C3               	movf	(NokiaStr@i+1)& (0+255),w,b
  4424  000A00  2226               	addwfc	??_NokiaStr+2,f,c
  4425  000A02  C025  FFF6         	movff	??_NokiaStr+1,tblptrl
  4426  000A06  C026  FFF7         	movff	??_NokiaStr+2,tblptrh
  4427  000A0A                     	if	0	;tblptru may be non-zero
  4428  000A0A                     	endif
  4429  000A0A                     	if	0	;tblptru may be non-zero
  4430  000A0A                     	endif
  4431  000A0A  0008               	tblrd		*
  4432  000A0C  50F5               	movf	tablat,w,c
  4433  000A0E  ECE7  F007         	call	_SPI2_Exchange8bit
  4434                           
  4435                           ;NokiaLCD.c: 52: SPI2_Exchange8bit(0x00);
  4436  000A12  0E00               	movlw	0
  4437  000A14  ECE7  F007         	call	_SPI2_Exchange8bit
  4438                           
  4439                           ;NokiaLCD.c: 53: str++;
  4440  000A18  4A21               	infsnz	NokiaStr@str,f,c
  4441  000A1A  2A22               	incf	NokiaStr@str+1,f,c
  4442  000A1C  0100               	movlb	0	; () banked
  4443  000A1E  4BC2               	infsnz	NokiaStr@i& (0+255),f,b
  4444  000A20  2BC3               	incf	(NokiaStr@i+1)& (0+255),f,b
  4445  000A22  D7C4               	goto	l3028
  4446  000A24                     l3042:
  4447                           
  4448                           ; BSR set to: 0
  4449  000A24  0623               	decf	NokiaStr@len,f,c
  4450  000A26  D7BA               	goto	l3022
  4451  000A28                     __end_of_NokiaStr:
  4452                           	opt stack 0
  4453                           tblptru	equ	0xFF8
  4454                           tblptrh	equ	0xFF7
  4455                           tblptrl	equ	0xFF6
  4456                           tablat	equ	0xFF5
  4457                           prodh	equ	0xFF4
  4458                           prodl	equ	0xFF3
  4459                           intcon	equ	0xFF2
  4460                           intcon2	equ	0xFF1
  4461                           postinc0	equ	0xFEE
  4462                           wreg	equ	0xFE8
  4463                           indf2	equ	0xFDF
  4464                           postinc2	equ	0xFDE
  4465                           postdec2	equ	0xFDD
  4466                           plusw2	equ	0xFDB
  4467                           fsr2h	equ	0xFDA
  4468                           fsr2l	equ	0xFD9
  4469                           status	equ	0xFD8
  4470                           
  4471 ;; *************** function ___wmul *****************
  4472 ;; Defined at:
  4473 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;  multiplier      2   26[COMRAM] unsigned int 
  4476 ;;  multiplicand    2   28[COMRAM] unsigned int 
  4477 ;; Auto vars:     Size  Location     Type
  4478 ;;  product         2   30[COMRAM] unsigned int 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  2   26[COMRAM] unsigned int 
  4481 ;; Registers used:
  4482 ;;		wreg, status,2, status,0, prodl, prodh
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4488 ;;      Params:         4       0       0       0       0       0       0
  4489 ;;      Locals:         2       0       0       0       0       0       0
  4490 ;;      Temps:          0       0       0       0       0       0       0
  4491 ;;      Totals:         6       0       0       0       0       0       0
  4492 ;;Total ram usage:        6 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:    4
  4495 ;; This function calls:
  4496 ;;		Nothing
  4497 ;; This function is called by:
  4498 ;;		_NokiaStr
  4499 ;; This function uses a non-reentrant model
  4500 ;;
  4501                           
  4502                           	psect	text25
  4503  000F06                     __ptext25:
  4504                           	opt stack 0
  4505  000F06                     ___wmul:
  4506                           	opt stack 25
  4507                           
  4508                           ;incstack = 0
  4509  000F06  501B               	movf	___wmul@multiplier,w,c
  4510  000F08  021D               	mulwf	___wmul@multiplicand,c
  4511  000F0A  CFF3 F01F          	movff	prodl,___wmul@product
  4512  000F0E  CFF4 F020          	movff	prodh,___wmul@product+1
  4513  000F12  501B               	movf	___wmul@multiplier,w,c
  4514  000F14  021E               	mulwf	___wmul@multiplicand+1,c
  4515  000F16  50F3               	movf	prodl,w,c
  4516  000F18  2620               	addwf	___wmul@product+1,f,c
  4517  000F1A  501C               	movf	___wmul@multiplier+1,w,c
  4518  000F1C  021D               	mulwf	___wmul@multiplicand,c
  4519  000F1E  50F3               	movf	prodl,w,c
  4520  000F20  2620               	addwf	___wmul@product+1,f,c
  4521  000F22  C01F  F01B         	movff	___wmul@product,?___wmul
  4522  000F26  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  4523  000F2A  0012               	return	
  4524  000F2C                     __end_of___wmul:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           intcon2	equ	0xFF1
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           indf2	equ	0xFDF
  4537                           postinc2	equ	0xFDE
  4538                           postdec2	equ	0xFDD
  4539                           plusw2	equ	0xFDB
  4540                           fsr2h	equ	0xFDA
  4541                           fsr2l	equ	0xFD9
  4542                           status	equ	0xFD8
  4543                           
  4544 ;; *************** function _NokiaStart *****************
  4545 ;; Defined at:
  4546 ;;		line 6 in file "NokiaLCD.c"
  4547 ;; Parameters:    Size  Location     Type
  4548 ;;		None
  4549 ;; Auto vars:     Size  Location     Type
  4550 ;;		None
  4551 ;; Return value:  Size  Location     Type
  4552 ;;                  1    wreg      void 
  4553 ;; Registers used:
  4554 ;;		wreg, status,2, status,0, cstack
  4555 ;; Tracked objects:
  4556 ;;		On entry : 0/0
  4557 ;;		On exit  : 0/0
  4558 ;;		Unchanged: 0/0
  4559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4560 ;;      Params:         0       0       0       0       0       0       0
  4561 ;;      Locals:         0       0       0       0       0       0       0
  4562 ;;      Temps:          0       0       0       0       0       0       0
  4563 ;;      Totals:         0       0       0       0       0       0       0
  4564 ;;Total ram usage:        0 bytes
  4565 ;; Hardware stack levels used:    1
  4566 ;; Hardware stack levels required when called:    6
  4567 ;; This function calls:
  4568 ;;		_SPI2_Exchange8bit
  4569 ;;		_blackLcd
  4570 ;;		_clearLcd
  4571 ;; This function is called by:
  4572 ;;		_main
  4573 ;; This function uses a non-reentrant model
  4574 ;;
  4575                           
  4576                           	psect	text26
  4577  000D4E                     __ptext26:
  4578                           	opt stack 0
  4579  000D4E                     _NokiaStart:
  4580                           	opt stack 24
  4581                           
  4582                           ;incstack = 0
  4583                           ;NokiaLCD.c: 7: do { LATD3 = 0; } while(0);
  4584  000D4E  968C               	bcf	3980,3,c	;volatile
  4585                           
  4586                           ;NokiaLCD.c: 8: do { LATD0 = 0; } while(0);
  4587  000D50  908C               	bcf	3980,0,c	;volatile
  4588                           
  4589                           ;NokiaLCD.c: 9: SPI2_Exchange8bit(0x21);
  4590  000D52  0E21               	movlw	33
  4591  000D54  ECE7  F007         	call	_SPI2_Exchange8bit
  4592                           
  4593                           ;NokiaLCD.c: 10: SPI2_Exchange8bit(0xC8);
  4594  000D58  0EC8               	movlw	200
  4595  000D5A  ECE7  F007         	call	_SPI2_Exchange8bit
  4596                           
  4597                           ;NokiaLCD.c: 11: SPI2_Exchange8bit(0x06);
  4598  000D5E  0E06               	movlw	6
  4599  000D60  ECE7  F007         	call	_SPI2_Exchange8bit
  4600                           
  4601                           ;NokiaLCD.c: 12: SPI2_Exchange8bit(0x13);
  4602  000D64  0E13               	movlw	19
  4603  000D66  ECE7  F007         	call	_SPI2_Exchange8bit
  4604                           
  4605                           ;NokiaLCD.c: 13: SPI2_Exchange8bit(0x20);
  4606  000D6A  0E20               	movlw	32
  4607  000D6C  ECE7  F007         	call	_SPI2_Exchange8bit
  4608                           
  4609                           ;NokiaLCD.c: 14: SPI2_Exchange8bit(0x0C);
  4610  000D70  0E0C               	movlw	12
  4611  000D72  ECE7  F007         	call	_SPI2_Exchange8bit
  4612                           
  4613                           ;NokiaLCD.c: 15: clearLcd();
  4614  000D76  EC5B  F007         	call	_clearLcd	;wreg free
  4615                           
  4616                           ;NokiaLCD.c: 16: blackLcd();
  4617  000D7A  EC6F  F007         	call	_blackLcd	;wreg free
  4618  000D7E  0012               	return		;funcret
  4619  000D80                     __end_of_NokiaStart:
  4620                           	opt stack 0
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           intcon2	equ	0xFF1
  4629                           postinc0	equ	0xFEE
  4630                           wreg	equ	0xFE8
  4631                           indf2	equ	0xFDF
  4632                           postinc2	equ	0xFDE
  4633                           postdec2	equ	0xFDD
  4634                           plusw2	equ	0xFDB
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function _clearLcd *****************
  4640 ;; Defined at:
  4641 ;;		line 20 in file "NokiaLCD.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;		None
  4644 ;; Auto vars:     Size  Location     Type
  4645 ;;  res             2   27[COMRAM] int 
  4646 ;; Return value:  Size  Location     Type
  4647 ;;                  1    wreg      void 
  4648 ;; Registers used:
  4649 ;;		wreg, status,2, status,0, cstack
  4650 ;; Tracked objects:
  4651 ;;		On entry : 0/0
  4652 ;;		On exit  : 0/0
  4653 ;;		Unchanged: 0/0
  4654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4655 ;;      Params:         0       0       0       0       0       0       0
  4656 ;;      Locals:         2       0       0       0       0       0       0
  4657 ;;      Temps:          0       0       0       0       0       0       0
  4658 ;;      Totals:         2       0       0       0       0       0       0
  4659 ;;Total ram usage:        2 bytes
  4660 ;; Hardware stack levels used:    1
  4661 ;; Hardware stack levels required when called:    5
  4662 ;; This function calls:
  4663 ;;		_SPI2_Exchange8bit
  4664 ;; This function is called by:
  4665 ;;		_main
  4666 ;;		_NokiaStart
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text27
  4671  000EB6                     __ptext27:
  4672                           	opt stack 0
  4673  000EB6                     _clearLcd:
  4674                           	opt stack 25
  4675                           
  4676                           ;incstack = 0
  4677                           ;NokiaLCD.c: 21: int res;
  4678                           ;NokiaLCD.c: 22: do { LATD0 = 0; } while(0);
  4679  000EB6  908C               	bcf	3980,0,c	;volatile
  4680                           
  4681                           ;NokiaLCD.c: 23: do { LATD3 = 1; } while(0);
  4682  000EB8  868C               	bsf	3980,3,c	;volatile
  4683                           
  4684                           ;NokiaLCD.c: 24: for(res=0;res<504;res++){
  4685  000EBA  0E00               	movlw	0
  4686  000EBC  6E1D               	movwf	clearLcd@res+1,c
  4687  000EBE  0E00               	movlw	0
  4688  000EC0  6E1C               	movwf	clearLcd@res,c
  4689  000EC2                     l2852:
  4690  000EC2  BE1D               	btfsc	clearLcd@res+1,7,c
  4691  000EC4  D006               	goto	l2856
  4692  000EC6  0EF8               	movlw	248
  4693  000EC8  5C1C               	subwf	clearLcd@res,w,c
  4694  000ECA  0E01               	movlw	1
  4695  000ECC  581D               	subwfb	clearLcd@res+1,w,c
  4696  000ECE  B0D8               	btfsc	status,0,c
  4697  000ED0  0012               	return	
  4698  000ED2                     l2856:
  4699                           
  4700                           ;NokiaLCD.c: 25: SPI2_Exchange8bit(0x00);
  4701  000ED2  0E00               	movlw	0
  4702  000ED4  ECE7  F007         	call	_SPI2_Exchange8bit
  4703  000ED8  4A1C               	infsnz	clearLcd@res,f,c
  4704  000EDA  2A1D               	incf	clearLcd@res+1,f,c
  4705  000EDC  D7F2               	goto	l2852
  4706  000EDE                     __end_of_clearLcd:
  4707                           	opt stack 0
  4708                           tblptru	equ	0xFF8
  4709                           tblptrh	equ	0xFF7
  4710                           tblptrl	equ	0xFF6
  4711                           tablat	equ	0xFF5
  4712                           prodh	equ	0xFF4
  4713                           prodl	equ	0xFF3
  4714                           intcon	equ	0xFF2
  4715                           intcon2	equ	0xFF1
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           plusw2	equ	0xFDB
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _blackLcd *****************
  4727 ;; Defined at:
  4728 ;;		line 28 in file "NokiaLCD.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  res             2   27[COMRAM] int 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, status,2, status,0, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4742 ;;      Params:         0       0       0       0       0       0       0
  4743 ;;      Locals:         2       0       0       0       0       0       0
  4744 ;;      Temps:          0       0       0       0       0       0       0
  4745 ;;      Totals:         2       0       0       0       0       0       0
  4746 ;;Total ram usage:        2 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:    5
  4749 ;; This function calls:
  4750 ;;		_SPI2_Exchange8bit
  4751 ;; This function is called by:
  4752 ;;		_NokiaStart
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text28
  4757  000EDE                     __ptext28:
  4758                           	opt stack 0
  4759  000EDE                     _blackLcd:
  4760                           	opt stack 24
  4761                           
  4762                           ;incstack = 0
  4763                           ;NokiaLCD.c: 29: int res;
  4764                           ;NokiaLCD.c: 30: do { LATD0 = 0; } while(0);
  4765  000EDE  908C               	bcf	3980,0,c	;volatile
  4766                           
  4767                           ;NokiaLCD.c: 31: do { LATD3 = 1; } while(0);
  4768  000EE0  868C               	bsf	3980,3,c	;volatile
  4769                           
  4770                           ;NokiaLCD.c: 32: for(res=0;res<504;res++){
  4771  000EE2  0E00               	movlw	0
  4772  000EE4  6E1D               	movwf	blackLcd@res+1,c
  4773  000EE6  0E00               	movlw	0
  4774  000EE8  6E1C               	movwf	blackLcd@res,c
  4775  000EEA                     l2990:
  4776  000EEA  BE1D               	btfsc	blackLcd@res+1,7,c
  4777  000EEC  D006               	goto	l2994
  4778  000EEE  0EF8               	movlw	248
  4779  000EF0  5C1C               	subwf	blackLcd@res,w,c
  4780  000EF2  0E01               	movlw	1
  4781  000EF4  581D               	subwfb	blackLcd@res+1,w,c
  4782  000EF6  B0D8               	btfsc	status,0,c
  4783  000EF8  0012               	return	
  4784  000EFA                     l2994:
  4785                           
  4786                           ;NokiaLCD.c: 33: SPI2_Exchange8bit(0xFF);
  4787  000EFA  0EFF               	movlw	255
  4788  000EFC  ECE7  F007         	call	_SPI2_Exchange8bit
  4789  000F00  4A1C               	infsnz	blackLcd@res,f,c
  4790  000F02  2A1D               	incf	blackLcd@res+1,f,c
  4791  000F04  D7F2               	goto	l2990
  4792  000F06                     __end_of_blackLcd:
  4793                           	opt stack 0
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           intcon2	equ	0xFF1
  4802                           postinc0	equ	0xFEE
  4803                           wreg	equ	0xFE8
  4804                           indf2	equ	0xFDF
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           plusw2	equ	0xFDB
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _SPI2_Exchange8bit *****************
  4813 ;; Defined at:
  4814 ;;		line 78 in file "mcc_generated_files/spi2.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  data            1    wreg     unsigned char 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  data            1   26[COMRAM] unsigned char 
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      unsigned char 
  4821 ;; Registers used:
  4822 ;;		wreg, status,2
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4828 ;;      Params:         0       0       0       0       0       0       0
  4829 ;;      Locals:         1       0       0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0
  4831 ;;      Totals:         1       0       0       0       0       0       0
  4832 ;;Total ram usage:        1 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    4
  4835 ;; This function calls:
  4836 ;;		Nothing
  4837 ;; This function is called by:
  4838 ;;		_NokiaStart
  4839 ;;		_clearLcd
  4840 ;;		_blackLcd
  4841 ;;		_gotoXy
  4842 ;;		_NokiaStr
  4843 ;;		_SPI2_Exchange8bitBuffer
  4844 ;; This function uses a non-reentrant model
  4845 ;;
  4846                           
  4847                           	psect	text29
  4848  000FCE                     __ptext29:
  4849                           	opt stack 0
  4850  000FCE                     _SPI2_Exchange8bit:
  4851                           	opt stack 25
  4852                           
  4853                           ;incstack = 0
  4854                           ;SPI2_Exchange8bit@data stored from wreg
  4855  000FCE  6E1B               	movwf	SPI2_Exchange8bit@data,c
  4856                           
  4857                           ;spi2.c: 81: SSP2CON1bits.WCOL = 0;
  4858  000FD0  9E6C               	bcf	3948,7,c	;volatile
  4859                           
  4860                           ;spi2.c: 83: SSP2BUF = data;
  4861  000FD2  C01B  FF6F         	movff	SPI2_Exchange8bit@data,3951	;volatile
  4862  000FD6                     l218:
  4863  000FD6  A06D               	btfss	3949,0,c	;volatile
  4864  000FD8  D7FE               	goto	l218
  4865                           
  4866                           ;spi2.c: 87: }
  4867                           ;spi2.c: 89: return (SSP2BUF);
  4868  000FDA  506F               	movf	3951,w,c	;volatile
  4869  000FDC  0012               	return		;funcret
  4870  000FDE                     __end_of_SPI2_Exchange8bit:
  4871                           	opt stack 0
  4872                           tblptru	equ	0xFF8
  4873                           tblptrh	equ	0xFF7
  4874                           tblptrl	equ	0xFF6
  4875                           tablat	equ	0xFF5
  4876                           prodh	equ	0xFF4
  4877                           prodl	equ	0xFF3
  4878                           intcon	equ	0xFF2
  4879                           intcon2	equ	0xFF1
  4880                           postinc0	equ	0xFEE
  4881                           wreg	equ	0xFE8
  4882                           indf2	equ	0xFDF
  4883                           postinc2	equ	0xFDE
  4884                           postdec2	equ	0xFDD
  4885                           plusw2	equ	0xFDB
  4886                           fsr2h	equ	0xFDA
  4887                           fsr2l	equ	0xFD9
  4888                           status	equ	0xFD8
  4889                           
  4890 ;; *************** function _INTERRUPT_InterruptManager *****************
  4891 ;; Defined at:
  4892 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  4893 ;; Parameters:    Size  Location     Type
  4894 ;;		None
  4895 ;; Auto vars:     Size  Location     Type
  4896 ;;		None
  4897 ;; Return value:  Size  Location     Type
  4898 ;;                  1    wreg      void 
  4899 ;; Registers used:
  4900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4901 ;; Tracked objects:
  4902 ;;		On entry : 0/0
  4903 ;;		On exit  : 0/0
  4904 ;;		Unchanged: 0/0
  4905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4906 ;;      Params:         0       0       0       0       0       0       0
  4907 ;;      Locals:         0       0       0       0       0       0       0
  4908 ;;      Temps:         14       0       0       0       0       0       0
  4909 ;;      Totals:        14       0       0       0       0       0       0
  4910 ;;Total ram usage:       14 bytes
  4911 ;; Hardware stack levels used:    1
  4912 ;; Hardware stack levels required when called:    3
  4913 ;; This function calls:
  4914 ;;		_EUSART1_Receive_ISR
  4915 ;;		_EUSART1_Transmit_ISR
  4916 ;;		_EUSART2_Receive_ISR
  4917 ;;		_EUSART2_Transmit_ISR
  4918 ;; This function is called by:
  4919 ;;		Interrupt level 2
  4920 ;; This function uses a non-reentrant model
  4921 ;;
  4922                           
  4923                           	psect	intcode
  4924  000008                     __pintcode:
  4925                           	opt stack 0
  4926  000008                     _INTERRUPT_InterruptManager:
  4927                           	opt stack 22
  4928                           
  4929                           ;incstack = 0
  4930  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4931  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  4932  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4933  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4934  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4935  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4936  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4937  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4938  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4939  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4940  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4941  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4942  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4943  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4944  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4945                           
  4946                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  4947  000042  BAA3               	btfsc	4003,5,c	;volatile
  4948  000044  AAA4               	btfss	4004,5,c	;volatile
  4949  000046  D003               	goto	i2l170
  4950                           
  4951                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  4952  000048  EC06  F007         	call	_EUSART2_Receive_ISR	;wreg free
  4953                           
  4954                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  4955  00004C  D011               	goto	i2l178
  4956  00004E                     i2l170:
  4957  00004E  B8A3               	btfsc	4003,4,c	;volatile
  4958  000050  A8A4               	btfss	4004,4,c	;volatile
  4959  000052  D003               	goto	i2l172
  4960                           
  4961                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  4962  000054  ECD9  F006         	call	_EUSART2_Transmit_ISR	;wreg free
  4963                           
  4964                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  4965  000058  D00B               	goto	i2l178
  4966  00005A                     i2l172:
  4967  00005A  BA9D               	btfsc	3997,5,c	;volatile
  4968  00005C  AA9E               	btfss	3998,5,c	;volatile
  4969  00005E  D003               	goto	i2l174
  4970                           
  4971                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  4972  000060  ECA8  F007         	call	_EUSART1_Receive_ISR	;wreg free
  4973                           
  4974                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  4975  000064  D005               	goto	i2l178
  4976  000066                     i2l174:
  4977  000066  B89D               	btfsc	3997,4,c	;volatile
  4978  000068  A89E               	btfss	3998,4,c	;volatile
  4979  00006A  D002               	goto	i2l178
  4980                           
  4981                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  4982  00006C  ECC0  F006         	call	_EUSART1_Transmit_ISR	;wreg free
  4983  000070                     i2l178:
  4984  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4985  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4986  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4987  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4988  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4989  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4990  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4991  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4992  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4993  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4994  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4995  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4996  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4997  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4998  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4999  0000AA  0011               	retfie		f
  5000  0000AC                     __end_of_INTERRUPT_InterruptManager:
  5001                           	opt stack 0
  5002                           pclatu	equ	0xFFB
  5003                           pclath	equ	0xFFA
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           intcon2	equ	0xFF1
  5012                           postinc0	equ	0xFEE
  5013                           fsr0h	equ	0xFEA
  5014                           fsr0l	equ	0xFE9
  5015                           wreg	equ	0xFE8
  5016                           fsr1h	equ	0xFE2
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _EUSART2_Transmit_ISR *****************
  5027 ;; Defined at:
  5028 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5042 ;;      Params:         0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_INTERRUPT_InterruptManager
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text31
  5056  000DB2                     __ptext31:
  5057                           	opt stack 0
  5058  000DB2                     _EUSART2_Transmit_ISR:
  5059                           	opt stack 24
  5060                           
  5061                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  5062                           
  5063                           ;incstack = 0
  5064  000DB2  0E08               	movlw	8
  5065  000DB4  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  5066  000DB6  D012               	goto	i2l97
  5067                           
  5068                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  5069  000DB8  5039               	movf	_eusart2TxTail,w,c
  5070  000DBA  0D01               	mullw	1
  5071  000DBC  0E90               	movlw	low _eusart2TxBuffer
  5072  000DBE  24F3               	addwf	prodl,w,c
  5073  000DC0  6ED9               	movwf	fsr2l,c
  5074  000DC2  0E00               	movlw	high _eusart2TxBuffer
  5075  000DC4  20F4               	addwfc	prodh,w,c
  5076  000DC6  6EDA               	movwf	fsr2h,c
  5077  000DC8  50DF               	movf	indf2,w,c
  5078  000DCA  6E73               	movwf	3955,c	;volatile
  5079  000DCC  2A39               	incf	_eusart2TxTail,f,c
  5080                           
  5081                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  5082  000DCE  0E07               	movlw	7
  5083  000DD0  6439               	cpfsgt	_eusart2TxTail,c
  5084  000DD2  D002               	goto	i2l2404
  5085                           
  5086                           ;eusart2.c: 161: eusart2TxTail = 0;
  5087  000DD4  0E00               	movlw	0
  5088  000DD6  6E39               	movwf	_eusart2TxTail,c
  5089  000DD8                     i2l2404:
  5090                           
  5091                           ;eusart2.c: 162: }
  5092                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  5093  000DD8  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  5094                           
  5095                           ;eusart2.c: 164: } else {
  5096  000DDA  0012               	return	
  5097  000DDC                     i2l97:
  5098                           
  5099                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  5100  000DDC  98A3               	bcf	4003,4,c	;volatile
  5101  000DDE  0012               	return	
  5102  000DE0                     __end_of_EUSART2_Transmit_ISR:
  5103                           	opt stack 0
  5104                           pclatu	equ	0xFFB
  5105                           pclath	equ	0xFFA
  5106                           tblptru	equ	0xFF8
  5107                           tblptrh	equ	0xFF7
  5108                           tblptrl	equ	0xFF6
  5109                           tablat	equ	0xFF5
  5110                           prodh	equ	0xFF4
  5111                           prodl	equ	0xFF3
  5112                           intcon	equ	0xFF2
  5113                           intcon2	equ	0xFF1
  5114                           postinc0	equ	0xFEE
  5115                           fsr0h	equ	0xFEA
  5116                           fsr0l	equ	0xFE9
  5117                           wreg	equ	0xFE8
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           plusw2	equ	0xFDB
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function _EUSART2_Receive_ISR *****************
  5129 ;; Defined at:
  5130 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;                  1    wreg      void 
  5137 ;; Registers used:
  5138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5144 ;;      Params:         0       0       0       0       0       0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0
  5146 ;;      Temps:          0       0       0       0       0       0       0
  5147 ;;      Totals:         0       0       0       0       0       0       0
  5148 ;;Total ram usage:        0 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; This function calls:
  5151 ;;		Nothing
  5152 ;; This function is called by:
  5153 ;;		_INTERRUPT_InterruptManager
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text32
  5158  000E0C                     __ptext32:
  5159                           	opt stack 0
  5160  000E0C                     _EUSART2_Receive_ISR:
  5161                           	opt stack 24
  5162                           
  5163                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  5164                           
  5165                           ;incstack = 0
  5166  000E0C  A271               	btfss	3953,1,c	;volatile
  5167  000E0E  D002               	goto	i2l2410
  5168                           
  5169                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  5170  000E10  9871               	bcf	3953,4,c	;volatile
  5171                           
  5172                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  5173  000E12  8871               	bsf	3953,4,c	;volatile
  5174  000E14                     i2l2410:
  5175                           
  5176                           ;eusart2.c: 175: }
  5177                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  5178  000E14  5036               	movf	_eusart2RxHead,w,c
  5179  000E16  0D01               	mullw	1
  5180  000E18  0E88               	movlw	low _eusart2RxBuffer
  5181  000E1A  24F3               	addwf	prodl,w,c
  5182  000E1C  6ED9               	movwf	fsr2l,c
  5183  000E1E  0E00               	movlw	high _eusart2RxBuffer
  5184  000E20  20F4               	addwfc	prodh,w,c
  5185  000E22  6EDA               	movwf	fsr2h,c
  5186  000E24  CF74 FFDF          	movff	3956,indf2	;volatile
  5187  000E28  2A36               	incf	_eusart2RxHead,f,c
  5188                           
  5189                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  5190  000E2A  0E07               	movlw	7
  5191  000E2C  6436               	cpfsgt	_eusart2RxHead,c
  5192  000E2E  D002               	goto	i2l2418
  5193                           
  5194                           ;eusart2.c: 180: eusart2RxHead = 0;
  5195  000E30  0E00               	movlw	0
  5196  000E32  6E36               	movwf	_eusart2RxHead,c
  5197  000E34                     i2l2418:
  5198                           
  5199                           ;eusart2.c: 181: }
  5200                           ;eusart2.c: 182: eusart2RxCount++;
  5201  000E34  2A35               	incf	_eusart2RxCount,f,c	;volatile
  5202  000E36  0012               	return		;funcret
  5203  000E38                     __end_of_EUSART2_Receive_ISR:
  5204                           	opt stack 0
  5205                           pclatu	equ	0xFFB
  5206                           pclath	equ	0xFFA
  5207                           tblptru	equ	0xFF8
  5208                           tblptrh	equ	0xFF7
  5209                           tblptrl	equ	0xFF6
  5210                           tablat	equ	0xFF5
  5211                           prodh	equ	0xFF4
  5212                           prodl	equ	0xFF3
  5213                           intcon	equ	0xFF2
  5214                           intcon2	equ	0xFF1
  5215                           postinc0	equ	0xFEE
  5216                           fsr0h	equ	0xFEA
  5217                           fsr0l	equ	0xFE9
  5218                           wreg	equ	0xFE8
  5219                           fsr1h	equ	0xFE2
  5220                           fsr1l	equ	0xFE1
  5221                           indf2	equ	0xFDF
  5222                           postinc2	equ	0xFDE
  5223                           postdec2	equ	0xFDD
  5224                           plusw2	equ	0xFDB
  5225                           fsr2h	equ	0xFDA
  5226                           fsr2l	equ	0xFD9
  5227                           status	equ	0xFD8
  5228                           
  5229 ;; *************** function _EUSART1_Transmit_ISR *****************
  5230 ;; Defined at:
  5231 ;;		line 150 in file "UART.c"
  5232 ;; Parameters:    Size  Location     Type
  5233 ;;		None
  5234 ;; Auto vars:     Size  Location     Type
  5235 ;;		None
  5236 ;; Return value:  Size  Location     Type
  5237 ;;                  1    wreg      void 
  5238 ;; Registers used:
  5239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5240 ;; Tracked objects:
  5241 ;;		On entry : 0/0
  5242 ;;		On exit  : 0/0
  5243 ;;		Unchanged: 0/0
  5244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5245 ;;      Params:         0       0       0       0       0       0       0
  5246 ;;      Locals:         0       0       0       0       0       0       0
  5247 ;;      Temps:          0       0       0       0       0       0       0
  5248 ;;      Totals:         0       0       0       0       0       0       0
  5249 ;;Total ram usage:        0 bytes
  5250 ;; Hardware stack levels used:    1
  5251 ;; Hardware stack levels required when called:    2
  5252 ;; This function calls:
  5253 ;;		_UART_buff_get
  5254 ;;		_UART_buff_size
  5255 ;; This function is called by:
  5256 ;;		_INTERRUPT_InterruptManager
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	text33
  5261  000D80                     __ptext33:
  5262                           	opt stack 0
  5263  000D80                     _EUSART1_Transmit_ISR:
  5264                           	opt stack 22
  5265                           
  5266                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  5267                           
  5268                           ;incstack = 0
  5269  000D80  0E00               	movlw	low _output_buffer
  5270  000D82  6E01               	movwf	UART_buff_size@_this,c
  5271  000D84  0E03               	movlw	high _output_buffer
  5272  000D86  6E02               	movwf	UART_buff_size@_this+1,c
  5273  000D88  ECDC  F007         	call	_UART_buff_size	;wreg free
  5274  000D8C  BE02               	btfsc	?_UART_buff_size+1,7,c
  5275  000D8E  D00D               	goto	i2l2430
  5276  000D90  5002               	movf	?_UART_buff_size+1,w,c
  5277  000D92  E103               	bnz	i2u130_40
  5278  000D94  0401               	decf	?_UART_buff_size,w,c
  5279  000D96  A0D8               	btfss	status,0,c
  5280  000D98  D008               	goto	i2l2430
  5281  000D9A                     i2u130_40:
  5282                           
  5283                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  5284  000D9A  0E00               	movlw	low _output_buffer
  5285  000D9C  6E07               	movwf	UART_buff_get@_this,c
  5286  000D9E  0E03               	movlw	high _output_buffer
  5287  000DA0  6E08               	movwf	UART_buff_get@_this+1,c
  5288  000DA2  EC84  F004         	call	_UART_buff_get	;wreg free
  5289  000DA6  6EAD               	movwf	4013,c	;volatile
  5290                           
  5291                           ;UART.c: 154: } else {
  5292  000DA8  0012               	return	
  5293  000DAA                     i2l2430:
  5294                           
  5295                           ;UART.c: 155: Transmit_stall = 1;
  5296  000DAA  0E01               	movlw	1
  5297  000DAC  6E44               	movwf	_Transmit_stall,c
  5298                           
  5299                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  5300  000DAE  989D               	bcf	3997,4,c	;volatile
  5301  000DB0  0012               	return	
  5302  000DB2                     __end_of_EUSART1_Transmit_ISR:
  5303                           	opt stack 0
  5304                           pclatu	equ	0xFFB
  5305                           pclath	equ	0xFFA
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon2	equ	0xFF1
  5314                           postinc0	equ	0xFEE
  5315                           fsr0h	equ	0xFEA
  5316                           fsr0l	equ	0xFE9
  5317                           wreg	equ	0xFE8
  5318                           fsr1h	equ	0xFE2
  5319                           fsr1l	equ	0xFE1
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           plusw2	equ	0xFDB
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function _UART_buff_size *****************
  5329 ;; Defined at:
  5330 ;;		line 102 in file "UART.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  5333 ;;		 -> output_buffer(206), input_buffer(206), 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;		None
  5336 ;; Return value:  Size  Location     Type
  5337 ;;                  2    0[COMRAM] int 
  5338 ;; Registers used:
  5339 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5345 ;;      Params:         2       0       0       0       0       0       0
  5346 ;;      Locals:         0       0       0       0       0       0       0
  5347 ;;      Temps:          0       0       0       0       0       0       0
  5348 ;;      Totals:         2       0       0       0       0       0       0
  5349 ;;Total ram usage:        2 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_EUSART1_Transmit_ISR
  5355 ;;		_Receive_available
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text34
  5360  000FB8                     __ptext34:
  5361                           	opt stack 0
  5362  000FB8                     _UART_buff_size:
  5363                           	opt stack 23
  5364                           
  5365                           ;UART.c: 103: return (_this->count);
  5366                           
  5367                           ;incstack = 0
  5368  000FB8  EE20 F0CC          	lfsr	2,204
  5369  000FBC  5001               	movf	UART_buff_size@_this,w,c
  5370  000FBE  26D9               	addwf	fsr2l,f,c
  5371  000FC0  5002               	movf	UART_buff_size@_this+1,w,c
  5372  000FC2  22DA               	addwfc	fsr2h,f,c
  5373  000FC4  CFDE F001          	movff	postinc2,?_UART_buff_size
  5374  000FC8  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  5375  000FCC  0012               	return	
  5376  000FCE                     __end_of_UART_buff_size:
  5377                           	opt stack 0
  5378                           pclatu	equ	0xFFB
  5379                           pclath	equ	0xFFA
  5380                           tblptru	equ	0xFF8
  5381                           tblptrh	equ	0xFF7
  5382                           tblptrl	equ	0xFF6
  5383                           tablat	equ	0xFF5
  5384                           prodh	equ	0xFF4
  5385                           prodl	equ	0xFF3
  5386                           intcon	equ	0xFF2
  5387                           intcon2	equ	0xFF1
  5388                           postinc0	equ	0xFEE
  5389                           fsr0h	equ	0xFEA
  5390                           fsr0l	equ	0xFE9
  5391                           wreg	equ	0xFE8
  5392                           fsr1h	equ	0xFE2
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           plusw2	equ	0xFDB
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _UART_buff_get *****************
  5403 ;; Defined at:
  5404 ;;		line 81 in file "UART.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5407 ;;		 -> output_buffer(206), input_buffer(206), 
  5408 ;; Auto vars:     Size  Location     Type
  5409 ;;  c               1   10[COMRAM] unsigned char 
  5410 ;; Return value:  Size  Location     Type
  5411 ;;                  1    wreg      unsigned char 
  5412 ;; Registers used:
  5413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5414 ;; Tracked objects:
  5415 ;;		On entry : 0/0
  5416 ;;		On exit  : 0/0
  5417 ;;		Unchanged: 0/0
  5418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5419 ;;      Params:         2       0       0       0       0       0       0
  5420 ;;      Locals:         1       0       0       0       0       0       0
  5421 ;;      Temps:          2       0       0       0       0       0       0
  5422 ;;      Totals:         5       0       0       0       0       0       0
  5423 ;;Total ram usage:        5 bytes
  5424 ;; Hardware stack levels used:    1
  5425 ;; Hardware stack levels required when called:    1
  5426 ;; This function calls:
  5427 ;;		_UART_buff_modulo_inc
  5428 ;; This function is called by:
  5429 ;;		_EUSART1_Transmit_ISR
  5430 ;;		_Receive_get
  5431 ;;		_Send_put
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text35
  5436  000908                     __ptext35:
  5437                           	opt stack 0
  5438  000908                     _UART_buff_get:
  5439                           	opt stack 22
  5440                           
  5441                           ;UART.c: 82: unsigned char c;
  5442                           ;UART.c: 83: if (_this->count > 0) {
  5443                           
  5444                           ;incstack = 0
  5445  000908  EE20 F0CC          	lfsr	2,204
  5446  00090C  5007               	movf	UART_buff_get@_this,w,c
  5447  00090E  26D9               	addwf	fsr2l,f,c
  5448  000910  5008               	movf	UART_buff_get@_this+1,w,c
  5449  000912  22DA               	addwfc	fsr2h,f,c
  5450  000914  0E01               	movlw	1
  5451  000916  BEDB               	btfsc	plusw2,7,c
  5452  000918  D03C               	goto	i2l2330
  5453  00091A  0E01               	movlw	1
  5454  00091C  50DB               	movf	plusw2,w,c
  5455  00091E  E103               	bnz	i2u117_40
  5456  000920  04DE               	decf	postinc2,w,c
  5457  000922  A0D8               	btfss	status,0,c
  5458  000924  D036               	goto	i2l2330
  5459  000926                     i2u117_40:
  5460                           
  5461                           ;UART.c: 84: c = _this->buf[_this->tail];
  5462  000926  EE20 F0CA          	lfsr	2,202
  5463  00092A  5007               	movf	UART_buff_get@_this,w,c
  5464  00092C  26D9               	addwf	fsr2l,f,c
  5465  00092E  5008               	movf	UART_buff_get@_this+1,w,c
  5466  000930  22DA               	addwfc	fsr2h,f,c
  5467  000932  CFDE F009          	movff	postinc2,??_UART_buff_get
  5468  000936  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  5469  00093A  5009               	movf	??_UART_buff_get,w,c
  5470  00093C  2407               	addwf	UART_buff_get@_this,w,c
  5471  00093E  6ED9               	movwf	fsr2l,c
  5472  000940  500A               	movf	??_UART_buff_get+1,w,c
  5473  000942  2008               	addwfc	UART_buff_get@_this+1,w,c
  5474  000944  6EDA               	movwf	fsr2h,c
  5475  000946  50DF               	movf	indf2,w,c
  5476  000948  6E0B               	movwf	UART_buff_get@c,c
  5477                           
  5478                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5479  00094A  EE20 F0CA          	lfsr	2,202
  5480  00094E  5007               	movf	UART_buff_get@_this,w,c
  5481  000950  26D9               	addwf	fsr2l,f,c
  5482  000952  5008               	movf	UART_buff_get@_this+1,w,c
  5483  000954  22DA               	addwfc	fsr2h,f,c
  5484  000956  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  5485  00095A  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  5486  00095E  0E00               	movlw	0
  5487  000960  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  5488  000962  0EC8               	movlw	200
  5489  000964  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  5490  000966  EC46  F007         	call	_UART_buff_modulo_inc	;wreg free
  5491  00096A  EE20 F0CA          	lfsr	2,202
  5492  00096E  5007               	movf	UART_buff_get@_this,w,c
  5493  000970  26D9               	addwf	fsr2l,f,c
  5494  000972  5008               	movf	UART_buff_get@_this+1,w,c
  5495  000974  22DA               	addwfc	fsr2h,f,c
  5496  000976  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5497  00097A  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5498                           
  5499                           ;UART.c: 86: --_this->count;
  5500  00097E  EE20 F0CC          	lfsr	2,204
  5501  000982  5007               	movf	UART_buff_get@_this,w,c
  5502  000984  26D9               	addwf	fsr2l,f,c
  5503  000986  5008               	movf	UART_buff_get@_this+1,w,c
  5504  000988  22DA               	addwfc	fsr2h,f,c
  5505  00098A  06DE               	decf	postinc2,f,c
  5506  00098C  0E00               	movlw	0
  5507  00098E  5ADD               	subwfb	postdec2,f,c
  5508                           
  5509                           ;UART.c: 87: } else {
  5510  000990  D002               	goto	i2l528
  5511  000992                     i2l2330:
  5512                           
  5513                           ;UART.c: 88: c = 0;
  5514  000992  0E00               	movlw	0
  5515  000994  6E0B               	movwf	UART_buff_get@c,c
  5516  000996                     i2l528:
  5517                           
  5518                           ;UART.c: 89: }
  5519                           ;UART.c: 90: return (c);
  5520  000996  500B               	movf	UART_buff_get@c,w,c
  5521  000998  0012               	return	
  5522  00099A                     __end_of_UART_buff_get:
  5523                           	opt stack 0
  5524                           pclatu	equ	0xFFB
  5525                           pclath	equ	0xFFA
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           intcon	equ	0xFF2
  5533                           intcon2	equ	0xFF1
  5534                           postinc0	equ	0xFEE
  5535                           fsr0h	equ	0xFEA
  5536                           fsr0l	equ	0xFE9
  5537                           wreg	equ	0xFE8
  5538                           fsr1h	equ	0xFE2
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           plusw2	equ	0xFDB
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _EUSART1_Receive_ISR *****************
  5549 ;; Defined at:
  5550 ;;		line 139 in file "UART.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  data            1   11[COMRAM] unsigned char 
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5564 ;;      Params:         0       0       0       0       0       0       0
  5565 ;;      Locals:         1       0       0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0
  5567 ;;      Totals:         1       0       0       0       0       0       0
  5568 ;;Total ram usage:        1 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    2
  5571 ;; This function calls:
  5572 ;;		_UART_buff_put
  5573 ;; This function is called by:
  5574 ;;		_INTERRUPT_InterruptManager
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text36
  5579  000F50                     __ptext36:
  5580                           	opt stack 0
  5581  000F50                     _EUSART1_Receive_ISR:
  5582                           	opt stack 22
  5583                           
  5584                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  5585                           
  5586                           ;incstack = 0
  5587  000F50  A2AB               	btfss	4011,1,c	;volatile
  5588  000F52  D002               	goto	i2l559
  5589                           
  5590                           ;UART.c: 143: RC1STAbits.CREN = 0;
  5591  000F54  98AB               	bcf	4011,4,c	;volatile
  5592                           
  5593                           ;UART.c: 144: RC1STAbits.CREN = 1;
  5594  000F56  88AB               	bsf	4011,4,c	;volatile
  5595  000F58                     i2l559:
  5596                           
  5597                           ;UART.c: 145: }
  5598                           ;UART.c: 146: unsigned char data = RCREG1;
  5599  000F58  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  5600                           
  5601                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  5602  000F5C  0E00               	movlw	low _input_buffer
  5603  000F5E  6E07               	movwf	UART_buff_put@_this,c
  5604  000F60  0E02               	movlw	high _input_buffer
  5605  000F62  6E08               	movwf	UART_buff_put@_this+1,c
  5606  000F64  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  5607  000F68  EC64  F002         	call	_UART_buff_put	;wreg free
  5608  000F6C  0012               	return		;funcret
  5609  000F6E                     __end_of_EUSART1_Receive_ISR:
  5610                           	opt stack 0
  5611                           pclatu	equ	0xFFB
  5612                           pclath	equ	0xFFA
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           intcon	equ	0xFF2
  5620                           intcon2	equ	0xFF1
  5621                           postinc0	equ	0xFEE
  5622                           fsr0h	equ	0xFEA
  5623                           fsr0l	equ	0xFE9
  5624                           wreg	equ	0xFE8
  5625                           fsr1h	equ	0xFE2
  5626                           fsr1l	equ	0xFE1
  5627                           indf2	equ	0xFDF
  5628                           postinc2	equ	0xFDE
  5629                           postdec2	equ	0xFDD
  5630                           plusw2	equ	0xFDB
  5631                           fsr2h	equ	0xFDA
  5632                           fsr2l	equ	0xFD9
  5633                           status	equ	0xFD8
  5634                           
  5635 ;; *************** function _UART_buff_put *****************
  5636 ;; Defined at:
  5637 ;;		line 68 in file "UART.c"
  5638 ;; Parameters:    Size  Location     Type
  5639 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  5640 ;;		 -> output_buffer(206), input_buffer(206), 
  5641 ;;  c               1    8[COMRAM] const unsigned char 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;		None
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      void 
  5646 ;; Registers used:
  5647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5653 ;;      Params:         3       0       0       0       0       0       0
  5654 ;;      Locals:         0       0       0       0       0       0       0
  5655 ;;      Temps:          2       0       0       0       0       0       0
  5656 ;;      Totals:         5       0       0       0       0       0       0
  5657 ;;Total ram usage:        5 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    1
  5660 ;; This function calls:
  5661 ;;		_UART_buff_modulo_inc
  5662 ;; This function is called by:
  5663 ;;		_EUSART1_Receive_ISR
  5664 ;;		_Send_put
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           	psect	text37
  5669  0004C8                     __ptext37:
  5670                           	opt stack 0
  5671  0004C8                     _UART_buff_put:
  5672                           	opt stack 22
  5673                           
  5674                           ;UART.c: 69: if (_this->count < 200) {
  5675                           
  5676                           ;incstack = 0
  5677  0004C8  EE20 F0CC          	lfsr	2,204
  5678  0004CC  5007               	movf	UART_buff_put@_this,w,c
  5679  0004CE  26D9               	addwf	fsr2l,f,c
  5680  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  5681  0004D2  22DA               	addwfc	fsr2h,f,c
  5682  0004D4  0E01               	movlw	1
  5683  0004D6  BEDB               	btfsc	plusw2,7,c
  5684  0004D8  D007               	goto	i2l2310
  5685  0004DA  0E01               	movlw	1
  5686  0004DC  50DB               	movf	plusw2,w,c
  5687  0004DE  E13A               	bnz	i2l2316
  5688  0004E0  0EC8               	movlw	200
  5689  0004E2  5CDE               	subwf	postinc2,w,c
  5690  0004E4  B0D8               	btfsc	status,0,c
  5691  0004E6  D036               	goto	i2l2316
  5692  0004E8                     i2l2310:
  5693                           
  5694                           ;UART.c: 70: _this->buf[_this->head] = c;
  5695  0004E8  EE20 F0C8          	lfsr	2,200
  5696  0004EC  5007               	movf	UART_buff_put@_this,w,c
  5697  0004EE  26D9               	addwf	fsr2l,f,c
  5698  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  5699  0004F2  22DA               	addwfc	fsr2h,f,c
  5700  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  5701  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  5702  0004FC  500A               	movf	??_UART_buff_put,w,c
  5703  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  5704  000500  6ED9               	movwf	fsr2l,c
  5705  000502  500B               	movf	??_UART_buff_put+1,w,c
  5706  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  5707  000506  6EDA               	movwf	fsr2h,c
  5708  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  5709                           
  5710                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5711  00050C  EE20 F0C8          	lfsr	2,200
  5712  000510  5007               	movf	UART_buff_put@_this,w,c
  5713  000512  26D9               	addwf	fsr2l,f,c
  5714  000514  5008               	movf	UART_buff_put@_this+1,w,c
  5715  000516  22DA               	addwfc	fsr2h,f,c
  5716  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  5717  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  5718  000520  0E00               	movlw	0
  5719  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  5720  000524  0EC8               	movlw	200
  5721  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  5722  000528  EC46  F007         	call	_UART_buff_modulo_inc	;wreg free
  5723  00052C  EE20 F0C8          	lfsr	2,200
  5724  000530  5007               	movf	UART_buff_put@_this,w,c
  5725  000532  26D9               	addwf	fsr2l,f,c
  5726  000534  5008               	movf	UART_buff_put@_this+1,w,c
  5727  000536  22DA               	addwfc	fsr2h,f,c
  5728  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5729  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5730                           
  5731                           ;UART.c: 72: ++_this->count;
  5732  000540  EE20 F0CC          	lfsr	2,204
  5733  000544  5007               	movf	UART_buff_put@_this,w,c
  5734  000546  26D9               	addwf	fsr2l,f,c
  5735  000548  5008               	movf	UART_buff_put@_this+1,w,c
  5736  00054A  22DA               	addwfc	fsr2h,f,c
  5737  00054C  2ADE               	incf	postinc2,f,c
  5738  00054E  0E00               	movlw	0
  5739  000550  22DD               	addwfc	postdec2,f,c
  5740                           
  5741                           ;UART.c: 73: } else {
  5742  000552  0012               	return	
  5743  000554                     i2l2316:
  5744                           
  5745                           ;UART.c: 74: _this->buf[_this->head] = c;
  5746  000554  EE20 F0C8          	lfsr	2,200
  5747  000558  5007               	movf	UART_buff_put@_this,w,c
  5748  00055A  26D9               	addwf	fsr2l,f,c
  5749  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  5750  00055E  22DA               	addwfc	fsr2h,f,c
  5751  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  5752  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  5753  000568  500A               	movf	??_UART_buff_put,w,c
  5754  00056A  2407               	addwf	UART_buff_put@_this,w,c
  5755  00056C  6ED9               	movwf	fsr2l,c
  5756  00056E  500B               	movf	??_UART_buff_put+1,w,c
  5757  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  5758  000572  6EDA               	movwf	fsr2h,c
  5759  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  5760                           
  5761                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  5762  000578  EE20 F0C8          	lfsr	2,200
  5763  00057C  5007               	movf	UART_buff_put@_this,w,c
  5764  00057E  26D9               	addwf	fsr2l,f,c
  5765  000580  5008               	movf	UART_buff_put@_this+1,w,c
  5766  000582  22DA               	addwfc	fsr2h,f,c
  5767  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  5768  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  5769  00058C  0E00               	movlw	0
  5770  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  5771  000590  0EC8               	movlw	200
  5772  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  5773  000594  EC46  F007         	call	_UART_buff_modulo_inc	;wreg free
  5774  000598  EE20 F0C8          	lfsr	2,200
  5775  00059C  5007               	movf	UART_buff_put@_this,w,c
  5776  00059E  26D9               	addwf	fsr2l,f,c
  5777  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  5778  0005A2  22DA               	addwfc	fsr2h,f,c
  5779  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5780  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5781                           
  5782                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5783  0005AC  EE20 F0CA          	lfsr	2,202
  5784  0005B0  5007               	movf	UART_buff_put@_this,w,c
  5785  0005B2  26D9               	addwf	fsr2l,f,c
  5786  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  5787  0005B6  22DA               	addwfc	fsr2h,f,c
  5788  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  5789  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  5790  0005C0  0E00               	movlw	0
  5791  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  5792  0005C4  0EC8               	movlw	200
  5793  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  5794  0005C8  EC46  F007         	call	_UART_buff_modulo_inc	;wreg free
  5795  0005CC  EE20 F0CA          	lfsr	2,202
  5796  0005D0  5007               	movf	UART_buff_put@_this,w,c
  5797  0005D2  26D9               	addwf	fsr2l,f,c
  5798  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  5799  0005D6  22DA               	addwfc	fsr2h,f,c
  5800  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5801  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5802  0005E0  0012               	return	
  5803  0005E2                     __end_of_UART_buff_put:
  5804                           	opt stack 0
  5805                           pclatu	equ	0xFFB
  5806                           pclath	equ	0xFFA
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodh	equ	0xFF4
  5812                           prodl	equ	0xFF3
  5813                           intcon	equ	0xFF2
  5814                           intcon2	equ	0xFF1
  5815                           postinc0	equ	0xFEE
  5816                           fsr0h	equ	0xFEA
  5817                           fsr0l	equ	0xFE9
  5818                           wreg	equ	0xFE8
  5819                           fsr1h	equ	0xFE2
  5820                           fsr1l	equ	0xFE1
  5821                           indf2	equ	0xFDF
  5822                           postinc2	equ	0xFDE
  5823                           postdec2	equ	0xFDD
  5824                           plusw2	equ	0xFDB
  5825                           fsr2h	equ	0xFDA
  5826                           fsr2l	equ	0xFD9
  5827                           status	equ	0xFD8
  5828                           
  5829 ;; *************** function _UART_buff_modulo_inc *****************
  5830 ;; Defined at:
  5831 ;;		line 106 in file "UART.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  value           2    0[COMRAM] const unsigned int 
  5834 ;;  modulus         2    2[COMRAM] const unsigned int 
  5835 ;; Auto vars:     Size  Location     Type
  5836 ;;  my_value        2    4[COMRAM] unsigned int 
  5837 ;; Return value:  Size  Location     Type
  5838 ;;                  2    0[COMRAM] unsigned int 
  5839 ;; Registers used:
  5840 ;;		wreg, status,2, status,0
  5841 ;; Tracked objects:
  5842 ;;		On entry : 0/0
  5843 ;;		On exit  : 0/0
  5844 ;;		Unchanged: 0/0
  5845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5846 ;;      Params:         4       0       0       0       0       0       0
  5847 ;;      Locals:         2       0       0       0       0       0       0
  5848 ;;      Temps:          0       0       0       0       0       0       0
  5849 ;;      Totals:         6       0       0       0       0       0       0
  5850 ;;Total ram usage:        6 bytes
  5851 ;; Hardware stack levels used:    1
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_UART_buff_put
  5856 ;;		_UART_buff_get
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           	psect	text38
  5861  000E8C                     __ptext38:
  5862                           	opt stack 0
  5863  000E8C                     _UART_buff_modulo_inc:
  5864                           	opt stack 22
  5865                           
  5866                           ;UART.c: 107: unsigned int my_value = value + 1;
  5867                           
  5868                           ;incstack = 0
  5869  000E8C  0E01               	movlw	1
  5870  000E8E  2401               	addwf	UART_buff_modulo_inc@value,w,c
  5871  000E90  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  5872  000E92  0E00               	movlw	0
  5873  000E94  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  5874  000E96  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  5875                           
  5876                           ;UART.c: 108: if (my_value >= modulus) {
  5877  000E98  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  5878  000E9A  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  5879  000E9C  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  5880  000E9E  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  5881  000EA0  A0D8               	btfss	status,0,c
  5882  000EA2  D004               	goto	i2l2142
  5883                           
  5884                           ;UART.c: 109: my_value = 0;
  5885  000EA4  0E00               	movlw	0
  5886  000EA6  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  5887  000EA8  0E00               	movlw	0
  5888  000EAA  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  5889  000EAC                     i2l2142:
  5890                           
  5891                           ;UART.c: 110: }
  5892                           ;UART.c: 111: return (my_value);
  5893  000EAC  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  5894  000EB0  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  5895  000EB4  0012               	return	
  5896  000EB6                     __end_of_UART_buff_modulo_inc:
  5897                           	opt stack 0
  5898                           pclatu	equ	0xFFB
  5899                           pclath	equ	0xFFA
  5900                           tblptru	equ	0xFF8
  5901                           tblptrh	equ	0xFF7
  5902                           tblptrl	equ	0xFF6
  5903                           tablat	equ	0xFF5
  5904                           prodh	equ	0xFF4
  5905                           prodl	equ	0xFF3
  5906                           intcon	equ	0xFF2
  5907                           intcon2	equ	0xFF1
  5908                           postinc0	equ	0xFEE
  5909                           fsr0h	equ	0xFEA
  5910                           fsr0l	equ	0xFE9
  5911                           wreg	equ	0xFE8
  5912                           fsr1h	equ	0xFE2
  5913                           fsr1l	equ	0xFE1
  5914                           indf2	equ	0xFDF
  5915                           postinc2	equ	0xFDE
  5916                           postdec2	equ	0xFDD
  5917                           plusw2	equ	0xFDB
  5918                           fsr2h	equ	0xFDA
  5919                           fsr2l	equ	0xFD9
  5920                           status	equ	0xFD8
  5921                           pclatu	equ	0xFFB
  5922                           pclath	equ	0xFFA
  5923                           tblptru	equ	0xFF8
  5924                           tblptrh	equ	0xFF7
  5925                           tblptrl	equ	0xFF6
  5926                           tablat	equ	0xFF5
  5927                           prodh	equ	0xFF4
  5928                           prodl	equ	0xFF3
  5929                           intcon	equ	0xFF2
  5930                           intcon2	equ	0xFF1
  5931                           postinc0	equ	0xFEE
  5932                           fsr0h	equ	0xFEA
  5933                           fsr0l	equ	0xFE9
  5934                           wreg	equ	0xFE8
  5935                           fsr1h	equ	0xFE2
  5936                           fsr1l	equ	0xFE1
  5937                           indf2	equ	0xFDF
  5938                           postinc2	equ	0xFDE
  5939                           postdec2	equ	0xFDD
  5940                           plusw2	equ	0xFDB
  5941                           fsr2h	equ	0xFDA
  5942                           fsr2l	equ	0xFD9
  5943                           status	equ	0xFD8
  5944                           
  5945                           	psect	rparam
  5946  0000                     pclatu	equ	0xFFB
  5947                           pclath	equ	0xFFA
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           intcon	equ	0xFF2
  5955                           intcon2	equ	0xFF1
  5956                           postinc0	equ	0xFEE
  5957                           fsr0h	equ	0xFEA
  5958                           fsr0l	equ	0xFE9
  5959                           wreg	equ	0xFE8
  5960                           fsr1h	equ	0xFE2
  5961                           fsr1l	equ	0xFE1
  5962                           indf2	equ	0xFDF
  5963                           postinc2	equ	0xFDE
  5964                           postdec2	equ	0xFDD
  5965                           plusw2	equ	0xFDB
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970                           	psect	temp
  5971  000045                     btemp:
  5972                           	opt stack 0
  5973  000045                     	ds	1
  5974  0000                     int$flags	set	btemp
  5975                           pclatu	equ	0xFFB
  5976                           pclath	equ	0xFFA
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           intcon	equ	0xFF2
  5984                           intcon2	equ	0xFF1
  5985                           postinc0	equ	0xFEE
  5986                           fsr0h	equ	0xFEA
  5987                           fsr0l	equ	0xFE9
  5988                           wreg	equ	0xFE8
  5989                           fsr1h	equ	0xFE2
  5990                           fsr1l	equ	0xFE1
  5991                           indf2	equ	0xFDF
  5992                           postinc2	equ	0xFDE
  5993                           postdec2	equ	0xFDD
  5994                           plusw2	equ	0xFDB
  5995                           fsr2h	equ	0xFDA
  5996                           fsr2l	equ	0xFD9
  5997                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    455
    Data        1
    BSS         942
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      68
    BANK0           160     25     123
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 11
		 -> ddata(BANK0[11]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1408(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_NokiaStr
    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _gotoXy->_SPI2_Exchange8bit
    _NokiaStr->___wmul
    _NokiaStart->_blackLcd
    _NokiaStart->_clearLcd
    _clearLcd->_SPI2_Exchange8bit
    _blackLcd->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11685
                              _Delay
                         _NokiaStart
                           _NokiaStr
                  _SYSTEM_Initialize
                           _clearLcd
                             _gotoXy
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   10112
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    4842
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                              0 BANK0      5     5      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1607
                                             37 COMRAM     1     1      0
                                              2 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     238
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (1) _gotoXy                                               2     1      1     238
                                             27 COMRAM     2     1      1
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStr                                             8     5      3     769
                                             32 COMRAM     6     3      3
                                              0 BANK0      2     2      0
                  _SPI2_Exchange8bit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0     229
                  _SPI2_Exchange8bit
                           _blackLcd
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0      99
                                             27 COMRAM     2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _blackLcd                                             2     2      0      99
                                             27 COMRAM     2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _SPI2_Exchange8bit                                    1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _SPI2_Exchange8bit
     _blackLcd
       _SPI2_Exchange8bit
     _clearLcd
       _SPI2_Exchange8bit
   _NokiaStr
     _SPI2_Exchange8bit
     ___wmul
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _clearLcd
     _SPI2_Exchange8bit
   _gotoXy
     _SPI2_Exchange8bit
   _updateComms
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     19      7B       4       76.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3F1       9        0.0%
DATA                 0      0     3F1      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Thu Apr 21 23:04:49 2016

      __end_of_FastTransfer_buffer_flush 0BE4                                        _i 003A  
                           _rx_array_inx 003F                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l218 0FD6                                      l472 0872  
                                    l369 0D02                                      l483 0906  
                                    l396 00FC                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                                     l3022 099C  
                                   l3032 09C2                                     l3042 0A24  
                                   l2090 0C66                                     l3028 09AC  
                                   l3052 0E5C                                     l2086 0C4A  
                                   l3086 0A32                                     l2712 0CD6  
                                   l2704 0DEA                                     l2810 0AC6  
                                   l2708 0DFA                                     l2812 0ACC  
                                   l2718 0CEC                                     l2726 0D08  
                                   l2830 088A                                     l2728 0D0E  
                                   l2840 08DE                                     l2770 05F6  
                                   l2826 0874                                     l2930 023A  
                                   l2922 019A                                     l2852 0EC2  
                                   l2844 08FE                                     l2932 024E  
                                   l2748 037C                                     l2782 067A  
                                   l2766 05EC                                     l2790 07A6  
                                   l2856 0ED2                                     l2944 02D4  
                                   l2928 0234                                     l1976 0E82  
                                   l2954 02E0                                     l2882 00B2  
                                   l2892 00F2                                     l2990 0EEA  
                                   l2798 082C                                     l2966 0344  
                                   l2974 0350                     receiveData@crcHolder 00CF  
                                   l2994 0EFA                                     _CRC8 0CD0  
                                   u2040 0E54                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2157 0C50                                     u1670 0786  
                                   u1911 013E                                     u1691 037A  
                                   i2l97 0DDC                                     _WPUB 000F61  
                  ??_EUSART2_Receive_ISR 0001                                     _main 0A28  
                        _TMR0_StartTimer 0FF8                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     fsr1l 000FE1  
                                   indf2 000FDF                                     fsr2l 000FD9  
                                   btemp 0045                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 04C8  
                                   start 00AC                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 0DE0                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 0FA2  
                       __end_of_CRCcheck 0908           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 0FEC                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATD0 007C60                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l170 004E  
                                  i2l172 005A                                    i2l174 0066  
                                  i2l178 0070                                    i2l528 0996  
                                  i2l559 0F58                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 0C38                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 0D80  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _Start 0027  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 00B7  
                         __CFG_EBTRB$OFF 000000                                    _group 0029  
                     __CFG_MCLRE$EXTMCLR 000000                                    tablat 000FF5  
                   __size_of_crcBufS_get 00E2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 0D1A  
                        CRCcheck@SentCRC 00C2                          __initialization 0B1A  
                      _SPI2_Exchange8bit 0FCE                             __end_of_main 0AA2  
                             ToSend@what 00C4                                   ??_CRC8 001E  
                     ?_SPI2_Exchange8bit 0001              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0027                         __end_of_NokiaStr 0A28  
                          __activetblptr 000002                      ??_SPI2_Exchange8bit 001B  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 0FFC  
             __end_of_EUSART2_Initialize 0D4E                 _eusart2TxBufferRemaining 0043  
                                 _ANSELA 000F38                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                               _NokiaStart 0D4E  
                                 _RC1STA 000FAB                                   _RC2STA 000F71  
                                 i2l2142 0EAC                                   i2l2310 04E8  
                                 i2l2330 0992                                   i2l2410 0E14  
                                 i2l2316 0554                                   i2l2404 0DD8  
                                 Delay@i 0020                                   i2l2430 0DAA  
                                 i2l2418 0E34                           __CFG_WDTEN$OFF 000000  
            UART_buff_modulo_inc@modulus 0003                                   _RCREG1 000FAE  
                                 _RCREG2 000F74                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _SPBRG2 000F75  
                                 _TX1STA 000FAC                                   _TX2STA 000F72  
                       __end_of_blackLcd 0F06                                   _TXREG1 000FAD  
                                 _TXREG2 000F73                         __end_of_clearLcd 0EDE  
              __end_of_SPI2_Exchange8bit 0FDE                           __CFG_XINST$OFF 000000  
                                 _ToSend 0F6E                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                            _output_buffer 0300  
                       crcBufS_get@space 001E                                   ___wmul 0F06  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                       ?_TMR0_Initialize 0001                                   _gotoXy 0F2C  
                                 _memset 0DE0                                   clear_0 0B20  
                                 clear_1 0B2C                                   clear_2 0B38  
                                 clear_3 0B44                                   clear_4 0B50  
                                 clear_5 0B5C                                   _rx_len 0040  
                       __end_of_sendData 0B1A                             __pdataCOMRAM 0044  
                           __mediumconst 7E36                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174                     _EUSART2_Transmit_ISR 0DB2  
           __end_of_UART_buff_modulo_inc 0EB6            __size_of_INTERRUPT_Initialize 000C  
                        _eusart2RxBuffer 0088                        _SYSTEM_Initialize 0FA2  
                        _eusart2TxBuffer 0090                               __accesstop 0060  
                __end_of__initialization 0B74                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                           ?_updateComms 0001                            __end_of_Delay 0C84  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 079C  
                    ??_SYSTEM_Initialize 001B                         crcBufS_put@_this 001B  
 __end_of_FastTransfer_buffer_modulo_inc 0E8C  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 0E62                              NokiaStr@len 0023  
                            NokiaStr@str 0021             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0026                       UART_buff_get@_this 0007  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 099A  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 05E2  
                                ??_Delay 001F                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 0F6E                _FastTransfer_buffer_flush 0B82  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 0FB8                   receiveData@holder_1408 00D4  
                    _addressErrorCounter 0098                              ?_NokiaStart 0001  
                          _eusart2RxHead 0036                            _eusart2TxHead 0038  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FFE  
                          _eusart2RxTail 0037                            _eusart2TxTail 0039  
                        __CFG_PLLCFG$OFF 000000                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 0021  
             __size_of_SPI2_Exchange8bit 0010                     __size_of_receiveData 02A4  
                                ?_ToSend 00C4                       __CFG_CCP2MX$PORTC1 000000  
                                ?___wmul 001B                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_gotoXy 001C  
                                ?_memset 001B                               _crc_buffer 00A6  
                     UART_buff_put@_this 0007                                ?_blackLcd 0001  
                              ?_clearLcd 0001                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 0E38             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP2ADD 000F6E                      sendData@whereToSend 00C3  
                    _receiveArrayAddress 002B                                  _SSP2BUF 000F6F  
                              ?_sendData 0001                        _alignErrorCounter 009A  
                             ??_NokiaStr 0024                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 001C                                _AKNAKsend 0033  
                   _UART_buff_modulo_inc 0E8C                          __size_of___wmul 0026  
                                _calc_CS 0034                                  __pcinit 0B1A  
                    __size_of_NokiaStart 0032                          __size_of_gotoXy 0024  
                        __size_of_memset 002C                                  __ramtop 0600  
                                __ptext0 0A28                                  __ptext1 0E38  
                                __ptext2 0BE4                                  __ptext3 0AA2  
                                __ptext4 06C4                                  __ptext5 0B82  
                                __ptext6 0DE0                                  __ptext7 0F6E  
                                __ptext8 0354                                  __ptext9 0E62  
                              _T0CONbits 000FD5                    _OSCILLATOR_Initialize 0FDE  
                 ??_EUSART2_Transmit_ISR 0001                               ??_blackLcd 001C  
                _FastTransfer_buffer_put 0354                    CRCcheck@calculatedCRC 00C3  
               ??_PIN_MANAGER_Initialize 001B                               ??_clearLcd 001C  
           crcBufS_status_put@wantedTime 0023                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0016  
                   end_of_initialization 0B74                                Delay@wait 001B  
                                gotoXy@x 001D                                  gotoXy@y 001C  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7E36  
                             ??_sendData 00C2                       _EUSART2_Initialize 0D1A  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 002A  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0BE4  
                    CRCcheck@arrayHolder 00C4                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 009E                               _rx_address 003E  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 0062  
                         _UART_buff_size 0FB8                      __end_of_crcBufS_get 06C4  
                  SPI2_Exchange8bit@data 001B                      __end_of_crcBufS_put 079C  
                      __size_of_CRCcheck 0096                            _moduleAddress 003C  
                   _timer0ReloadVal16bit 0041                               CRCcheck@rt 00C7  
                         __end_of_ToSend 0F8A             __end_of_INTERRUPT_Initialize 0FF8  
                        _crcErrorCounter 009C                           __end_of___wmul 0F2C  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 0FFC  
              ??_FastTransfer_buffer_put 00C2                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 0F50                           __end_of_memset 0E0C  
                      crcBufS_put@status 001F                             receiveData@r 00D9  
                           receiveData@u 00D7                      start_initialization 0B1A  
               __size_of_TMR0_Initialize 0018          __size_of_PIN_MANAGER_Initialize 004C  
                  crcBufS_get@wantedTime 0025                                NokiaStr@i 00C2  
                           ??_NokiaStart 001E                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 0FCE                           UART_buff_put@c 0009  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_NokiaStr 008E                              ?_respondECU 0001  
                               ??___wmul 001F                                 ??_gotoXy 001D  
                               ??_memset 0021                       __end_of_NokiaStart 0D80  
                         _eusart2RxCount 0035                              __pbssCOMRAM 0027  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00C2  
                      __size_of_blackLcd 0028                        __size_of_clearLcd 0028  
                            _crcBufS_get 05E2                              _crcBufS_put 06C4  
                        ?_UART_buff_size 0001             __size_of_EUSART1_Receive_ISR 001E  
                          ??_receiveData 00C9              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00C4                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                 _PIN_MANAGER_Initialize 0C84                        __size_of_sendData 0078  
                              __pintcode 0008                            __pmediumconst 7E36  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                    __size_of_respondECU 0054                     _INTERRUPT_Initialize 0FEC  
                           _receiveArray 0060                        ??_TMR0_Initialize 001B  
           __size_of_EUSART2_Receive_ISR 002C                                 _CRCcheck 0872  
                         ___wmul@product 001F                                 _LATCbits 000F8B  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 i2u130_40 0D9A  
                               i2u117_40 0926      __size_of_INTERRUPT_InterruptManager 00A4  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0354                                 _SSP2CON1 000F6C  
                               _SSP2STAT 000F6D           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0200                                _rx_buffer 0400  
                      ___wmul@multiplier 001B                            _UART_buff_get 0908  
                          _UART_buff_put 04C8            __size_of_EUSART2_Transmit_ISR 002E  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002D                            ??_updateComms 0027  
                            blackLcd@res 001C                                 _NokiaStr 099A  
                               __Hrparam 0000                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                         ?_UART_buff_get 0007                           ?_UART_buff_put 0007  
                            CRC8@extract 001F                                 _blackLcd 0EDE  
                              sendData@i 00C5                                 _clearLcd 0EB6  
               crcBufS_status_put@status 001E                                 __ptext10 0C38  
                               __ptext11 00B0                                 __ptext20 0C84  
                               __ptext12 0872                                 __ptext21 0FDE  
                               __ptext13 079C                                 __ptext22 0FEC  
                               __ptext14 05E2                                 __ptext31 0DB2  
                               __ptext23 0D1A                                 __ptext15 0CD0  
                               __ptext32 0E0C                                 __ptext24 099A  
                               __ptext16 0F2C                                 __ptext33 0D80  
                               __ptext25 0F06                                 __ptext17 0FA2  
                               __ptext34 0FB8                                 __ptext26 0D4E  
                               __ptext18 0F8A                                 __ptext35 0908  
                               __ptext27 0EB6                                 __ptext19 0FF8  
                               __ptext36 0F50                                 __ptext28 0EDE  
                               __ptext37 04C8                                 __ptext29 0FCE  
                               __ptext38 0E8C                             _SSP2CON1bits 000F6C  
                          __size_of_CRC8 004A                  EUSART1_Receive_ISR@data 000C  
            __size_of_EUSART2_Initialize 0034                            _returnAddress 003D  
                          __size_of_main 007A                              _receiveData 00B0  
                         _Transmit_stall 0044                                 _sendData 0AA2  
                             _RC1STAbits 000FAB                               _RC2STAbits 000F71  
                            clearLcd@res 001C                               _FONTLOOKUP 7E37  
                           ??_respondECU 0027                                 int$flags 0045  
                           _serial_write 002F                      __end_of_updateComms 0E62  
     __end_of_INTERRUPT_InterruptManager 00AC               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 0F50                             _SSP2STATbits 000F6D  
                      receiveData@holder 00D1                               _INTCONbits 000FF2  
              UART_buff_modulo_inc@value 0001                         ??_UART_buff_size 0003  
                 ??_INTERRUPT_Initialize 001B                                 memset@p1 001B  
                       _serial_available 00A0                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 0C38  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                  ?_PIN_MANAGER_Initialize 0001  
           __end_of_EUSART1_Transmit_ISR 0DB2                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 0023                              _serial_peek 00A2  
                            _serial_read 00A4                 ?_FastTransfer_buffer_put 0021  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0009  
                        ??_UART_buff_put 000A                      _EUSART2_Receive_ISR 0E0C  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 0F8A                receiveData@crcHolder_1409 00D0  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0872                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0CD0         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B            updateComms@previousPowerState 0031  
                   ?_EUSART2_Receive_ISR 0001                        __CFG_FOSC$INTIO67 000000  
                            _updateComms 0E38  
