

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu May 05 18:48:46 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0012DC                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _Transmit_stall
    76  0012DC  01                 	db	1
    77                           
    78                           	psect	idataBANK0
    79  0012CE                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _ChargerData
    83  0012CE  4D                 	db	77
    84  0012CF  2C                 	db	44
    85  0012D0  00                 	db	0
    86  0012D1  2C                 	db	44
    87  0012D2  00                 	db	0
    88  0012D3  2C                 	db	44
    89  0012D4  00                 	db	0
    90  0012D5  2C                 	db	44
    91  0012D6  45                 	db	69
    92                           
    93                           	psect	mediumconst
    94  007E06                     __pmediumconst:
    95                           	opt stack 0
    96  007E06  00                 	db	0
    97  007E07                     _FONTLOOKUP:
    98                           	opt stack 0
    99  007E07  00                 	db	0
   100  007E08  00                 	db	0
   101  007E09  00                 	db	0
   102  007E0A  00                 	db	0
   103  007E0B  00                 	db	0
   104  007E0C  00                 	db	0
   105  007E0D  00                 	db	0
   106  007E0E  5F                 	db	95
   107  007E0F  00                 	db	0
   108  007E10  00                 	db	0
   109  007E11  00                 	db	0
   110  007E12  07                 	db	7
   111  007E13  00                 	db	0
   112  007E14  07                 	db	7
   113  007E15  00                 	db	0
   114  007E16  14                 	db	20
   115  007E17  7F                 	db	127
   116  007E18  14                 	db	20
   117  007E19  7F                 	db	127
   118  007E1A  14                 	db	20
   119  007E1B  24                 	db	36
   120  007E1C  2A                 	db	42
   121  007E1D  7F                 	db	127
   122  007E1E  2A                 	db	42
   123  007E1F  12                 	db	18
   124  007E20  23                 	db	35
   125  007E21  13                 	db	19
   126  007E22  08                 	db	8
   127  007E23  64                 	db	100
   128  007E24  62                 	db	98
   129  007E25  36                 	db	54
   130  007E26  49                 	db	73
   131  007E27  55                 	db	85
   132  007E28  22                 	db	34
   133  007E29  50                 	db	80
   134  007E2A  00                 	db	0
   135  007E2B  05                 	db	5
   136  007E2C  03                 	db	3
   137  007E2D  00                 	db	0
   138  007E2E  00                 	db	0
   139  007E2F  00                 	db	0
   140  007E30  1C                 	db	28
   141  007E31  22                 	db	34
   142  007E32  41                 	db	65
   143  007E33  00                 	db	0
   144  007E34  00                 	db	0
   145  007E35  41                 	db	65
   146  007E36  22                 	db	34
   147  007E37  1C                 	db	28
   148  007E38  00                 	db	0
   149  007E39  14                 	db	20
   150  007E3A  08                 	db	8
   151  007E3B  3E                 	db	62
   152  007E3C  08                 	db	8
   153  007E3D  14                 	db	20
   154  007E3E  08                 	db	8
   155  007E3F  08                 	db	8
   156  007E40  3E                 	db	62
   157  007E41  08                 	db	8
   158  007E42  08                 	db	8
   159  007E43  00                 	db	0
   160  007E44  50                 	db	80
   161  007E45  30                 	db	48
   162  007E46  00                 	db	0
   163  007E47  00                 	db	0
   164  007E48  08                 	db	8
   165  007E49  08                 	db	8
   166  007E4A  08                 	db	8
   167  007E4B  08                 	db	8
   168  007E4C  08                 	db	8
   169  007E4D  00                 	db	0
   170  007E4E  60                 	db	96
   171  007E4F  60                 	db	96
   172  007E50  00                 	db	0
   173  007E51  00                 	db	0
   174  007E52  20                 	db	32
   175  007E53  10                 	db	16
   176  007E54  08                 	db	8
   177  007E55  04                 	db	4
   178  007E56  02                 	db	2
   179  007E57  3E                 	db	62
   180  007E58  51                 	db	81
   181  007E59  49                 	db	73
   182  007E5A  45                 	db	69
   183  007E5B  3E                 	db	62
   184  007E5C  00                 	db	0
   185  007E5D  42                 	db	66
   186  007E5E  7F                 	db	127
   187  007E5F  40                 	db	64
   188  007E60  00                 	db	0
   189  007E61  42                 	db	66
   190  007E62  61                 	db	97
   191  007E63  51                 	db	81
   192  007E64  49                 	db	73
   193  007E65  46                 	db	70
   194  007E66  21                 	db	33
   195  007E67  41                 	db	65
   196  007E68  45                 	db	69
   197  007E69  4B                 	db	75
   198  007E6A  31                 	db	49
   199  007E6B  18                 	db	24
   200  007E6C  14                 	db	20
   201  007E6D  12                 	db	18
   202  007E6E  7F                 	db	127
   203  007E6F  10                 	db	16
   204  007E70  27                 	db	39
   205  007E71  45                 	db	69
   206  007E72  45                 	db	69
   207  007E73  45                 	db	69
   208  007E74  39                 	db	57
   209  007E75  3C                 	db	60
   210  007E76  4A                 	db	74
   211  007E77  49                 	db	73
   212  007E78  49                 	db	73
   213  007E79  30                 	db	48
   214  007E7A  01                 	db	1
   215  007E7B  71                 	db	113
   216  007E7C  09                 	db	9
   217  007E7D  05                 	db	5
   218  007E7E  03                 	db	3
   219  007E7F  36                 	db	54
   220  007E80  49                 	db	73
   221  007E81  49                 	db	73
   222  007E82  49                 	db	73
   223  007E83  36                 	db	54
   224  007E84  06                 	db	6
   225  007E85  49                 	db	73
   226  007E86  49                 	db	73
   227  007E87  29                 	db	41
   228  007E88  1E                 	db	30
   229  007E89  00                 	db	0
   230  007E8A  36                 	db	54
   231  007E8B  36                 	db	54
   232  007E8C  00                 	db	0
   233  007E8D  00                 	db	0
   234  007E8E  00                 	db	0
   235  007E8F  56                 	db	86
   236  007E90  36                 	db	54
   237  007E91  00                 	db	0
   238  007E92  00                 	db	0
   239  007E93  08                 	db	8
   240  007E94  14                 	db	20
   241  007E95  22                 	db	34
   242  007E96  41                 	db	65
   243  007E97  00                 	db	0
   244  007E98  14                 	db	20
   245  007E99  14                 	db	20
   246  007E9A  14                 	db	20
   247  007E9B  14                 	db	20
   248  007E9C  14                 	db	20
   249  007E9D  00                 	db	0
   250  007E9E  41                 	db	65
   251  007E9F  22                 	db	34
   252  007EA0  14                 	db	20
   253  007EA1  08                 	db	8
   254  007EA2  02                 	db	2
   255  007EA3  01                 	db	1
   256  007EA4  51                 	db	81
   257  007EA5  09                 	db	9
   258  007EA6  06                 	db	6
   259  007EA7  32                 	db	50
   260  007EA8  49                 	db	73
   261  007EA9  79                 	db	121
   262  007EAA  41                 	db	65
   263  007EAB  3E                 	db	62
   264  007EAC  7E                 	db	126
   265  007EAD  11                 	db	17
   266  007EAE  11                 	db	17
   267  007EAF  11                 	db	17
   268  007EB0  7E                 	db	126
   269  007EB1  7F                 	db	127
   270  007EB2  49                 	db	73
   271  007EB3  49                 	db	73
   272  007EB4  49                 	db	73
   273  007EB5  36                 	db	54
   274  007EB6  3E                 	db	62
   275  007EB7  41                 	db	65
   276  007EB8  41                 	db	65
   277  007EB9  41                 	db	65
   278  007EBA  22                 	db	34
   279  007EBB  7F                 	db	127
   280  007EBC  41                 	db	65
   281  007EBD  41                 	db	65
   282  007EBE  22                 	db	34
   283  007EBF  1C                 	db	28
   284  007EC0  7F                 	db	127
   285  007EC1  49                 	db	73
   286  007EC2  49                 	db	73
   287  007EC3  49                 	db	73
   288  007EC4  41                 	db	65
   289  007EC5  7F                 	db	127
   290  007EC6  09                 	db	9
   291  007EC7  09                 	db	9
   292  007EC8  09                 	db	9
   293  007EC9  01                 	db	1
   294  007ECA  3E                 	db	62
   295  007ECB  41                 	db	65
   296  007ECC  49                 	db	73
   297  007ECD  49                 	db	73
   298  007ECE  7A                 	db	122
   299  007ECF  7F                 	db	127
   300  007ED0  08                 	db	8
   301  007ED1  08                 	db	8
   302  007ED2  08                 	db	8
   303  007ED3  7F                 	db	127
   304  007ED4  00                 	db	0
   305  007ED5  41                 	db	65
   306  007ED6  7F                 	db	127
   307  007ED7  41                 	db	65
   308  007ED8  00                 	db	0
   309  007ED9  20                 	db	32
   310  007EDA  40                 	db	64
   311  007EDB  41                 	db	65
   312  007EDC  3F                 	db	63
   313  007EDD  01                 	db	1
   314  007EDE  7F                 	db	127
   315  007EDF  08                 	db	8
   316  007EE0  14                 	db	20
   317  007EE1  22                 	db	34
   318  007EE2  41                 	db	65
   319  007EE3  7F                 	db	127
   320  007EE4  40                 	db	64
   321  007EE5  40                 	db	64
   322  007EE6  40                 	db	64
   323  007EE7  40                 	db	64
   324  007EE8  7F                 	db	127
   325  007EE9  02                 	db	2
   326  007EEA  0C                 	db	12
   327  007EEB  02                 	db	2
   328  007EEC  7F                 	db	127
   329  007EED  7F                 	db	127
   330  007EEE  04                 	db	4
   331  007EEF  08                 	db	8
   332  007EF0  10                 	db	16
   333  007EF1  7F                 	db	127
   334  007EF2  3E                 	db	62
   335  007EF3  41                 	db	65
   336  007EF4  41                 	db	65
   337  007EF5  41                 	db	65
   338  007EF6  3E                 	db	62
   339  007EF7  7F                 	db	127
   340  007EF8  09                 	db	9
   341  007EF9  09                 	db	9
   342  007EFA  09                 	db	9
   343  007EFB  06                 	db	6
   344  007EFC  3E                 	db	62
   345  007EFD  41                 	db	65
   346  007EFE  51                 	db	81
   347  007EFF  21                 	db	33
   348  007F00  5E                 	db	94
   349  007F01  7F                 	db	127
   350  007F02  09                 	db	9
   351  007F03  19                 	db	25
   352  007F04  29                 	db	41
   353  007F05  46                 	db	70
   354  007F06  46                 	db	70
   355  007F07  49                 	db	73
   356  007F08  49                 	db	73
   357  007F09  49                 	db	73
   358  007F0A  31                 	db	49
   359  007F0B  01                 	db	1
   360  007F0C  01                 	db	1
   361  007F0D  7F                 	db	127
   362  007F0E  01                 	db	1
   363  007F0F  01                 	db	1
   364  007F10  3F                 	db	63
   365  007F11  40                 	db	64
   366  007F12  40                 	db	64
   367  007F13  40                 	db	64
   368  007F14  3F                 	db	63
   369  007F15  1F                 	db	31
   370  007F16  20                 	db	32
   371  007F17  40                 	db	64
   372  007F18  20                 	db	32
   373  007F19  1F                 	db	31
   374  007F1A  3F                 	db	63
   375  007F1B  40                 	db	64
   376  007F1C  38                 	db	56
   377  007F1D  40                 	db	64
   378  007F1E  3F                 	db	63
   379  007F1F  63                 	db	99
   380  007F20  14                 	db	20
   381  007F21  08                 	db	8
   382  007F22  14                 	db	20
   383  007F23  63                 	db	99
   384  007F24  07                 	db	7
   385  007F25  08                 	db	8
   386  007F26  70                 	db	112
   387  007F27  08                 	db	8
   388  007F28  07                 	db	7
   389  007F29  61                 	db	97
   390  007F2A  51                 	db	81
   391  007F2B  49                 	db	73
   392  007F2C  45                 	db	69
   393  007F2D  43                 	db	67
   394  007F2E  00                 	db	0
   395  007F2F  7F                 	db	127
   396  007F30  41                 	db	65
   397  007F31  41                 	db	65
   398  007F32  00                 	db	0
   399  007F33  02                 	db	2
   400  007F34  04                 	db	4
   401  007F35  08                 	db	8
   402  007F36  10                 	db	16
   403  007F37  20                 	db	32
   404  007F38  00                 	db	0
   405  007F39  41                 	db	65
   406  007F3A  41                 	db	65
   407  007F3B  7F                 	db	127
   408  007F3C  00                 	db	0
   409  007F3D  04                 	db	4
   410  007F3E  02                 	db	2
   411  007F3F  01                 	db	1
   412  007F40  02                 	db	2
   413  007F41  04                 	db	4
   414  007F42  40                 	db	64
   415  007F43  40                 	db	64
   416  007F44  40                 	db	64
   417  007F45  40                 	db	64
   418  007F46  40                 	db	64
   419  007F47  00                 	db	0
   420  007F48  01                 	db	1
   421  007F49  02                 	db	2
   422  007F4A  04                 	db	4
   423  007F4B  00                 	db	0
   424  007F4C  20                 	db	32
   425  007F4D  54                 	db	84
   426  007F4E  54                 	db	84
   427  007F4F  54                 	db	84
   428  007F50  78                 	db	120
   429  007F51  7F                 	db	127
   430  007F52  48                 	db	72
   431  007F53  44                 	db	68
   432  007F54  44                 	db	68
   433  007F55  38                 	db	56
   434  007F56  38                 	db	56
   435  007F57  44                 	db	68
   436  007F58  44                 	db	68
   437  007F59  44                 	db	68
   438  007F5A  20                 	db	32
   439  007F5B  38                 	db	56
   440  007F5C  44                 	db	68
   441  007F5D  44                 	db	68
   442  007F5E  48                 	db	72
   443  007F5F  7F                 	db	127
   444  007F60  38                 	db	56
   445  007F61  54                 	db	84
   446  007F62  54                 	db	84
   447  007F63  54                 	db	84
   448  007F64  18                 	db	24
   449  007F65  08                 	db	8
   450  007F66  7E                 	db	126
   451  007F67  09                 	db	9
   452  007F68  01                 	db	1
   453  007F69  02                 	db	2
   454  007F6A  0C                 	db	12
   455  007F6B  52                 	db	82
   456  007F6C  52                 	db	82
   457  007F6D  52                 	db	82
   458  007F6E  3E                 	db	62
   459  007F6F  7F                 	db	127
   460  007F70  08                 	db	8
   461  007F71  04                 	db	4
   462  007F72  04                 	db	4
   463  007F73  78                 	db	120
   464  007F74  00                 	db	0
   465  007F75  44                 	db	68
   466  007F76  7D                 	db	125
   467  007F77  40                 	db	64
   468  007F78  00                 	db	0
   469  007F79  20                 	db	32
   470  007F7A  40                 	db	64
   471  007F7B  44                 	db	68
   472  007F7C  3D                 	db	61
   473  007F7D  00                 	db	0
   474  007F7E  7F                 	db	127
   475  007F7F  10                 	db	16
   476  007F80  28                 	db	40
   477  007F81  44                 	db	68
   478  007F82  00                 	db	0
   479  007F83  00                 	db	0
   480  007F84  41                 	db	65
   481  007F85  7F                 	db	127
   482  007F86  40                 	db	64
   483  007F87  00                 	db	0
   484  007F88  7C                 	db	124
   485  007F89  04                 	db	4
   486  007F8A  18                 	db	24
   487  007F8B  04                 	db	4
   488  007F8C  78                 	db	120
   489  007F8D  7C                 	db	124
   490  007F8E  08                 	db	8
   491  007F8F  04                 	db	4
   492  007F90  04                 	db	4
   493  007F91  78                 	db	120
   494  007F92  38                 	db	56
   495  007F93  44                 	db	68
   496  007F94  44                 	db	68
   497  007F95  44                 	db	68
   498  007F96  38                 	db	56
   499  007F97  7C                 	db	124
   500  007F98  14                 	db	20
   501  007F99  14                 	db	20
   502  007F9A  14                 	db	20
   503  007F9B  08                 	db	8
   504  007F9C  08                 	db	8
   505  007F9D  14                 	db	20
   506  007F9E  14                 	db	20
   507  007F9F  18                 	db	24
   508  007FA0  7C                 	db	124
   509  007FA1  7C                 	db	124
   510  007FA2  08                 	db	8
   511  007FA3  04                 	db	4
   512  007FA4  04                 	db	4
   513  007FA5  08                 	db	8
   514  007FA6  48                 	db	72
   515  007FA7  54                 	db	84
   516  007FA8  54                 	db	84
   517  007FA9  54                 	db	84
   518  007FAA  20                 	db	32
   519  007FAB  04                 	db	4
   520  007FAC  3F                 	db	63
   521  007FAD  44                 	db	68
   522  007FAE  40                 	db	64
   523  007FAF  20                 	db	32
   524  007FB0  3C                 	db	60
   525  007FB1  40                 	db	64
   526  007FB2  40                 	db	64
   527  007FB3  20                 	db	32
   528  007FB4  7C                 	db	124
   529  007FB5  1C                 	db	28
   530  007FB6  20                 	db	32
   531  007FB7  40                 	db	64
   532  007FB8  20                 	db	32
   533  007FB9  1C                 	db	28
   534  007FBA  3C                 	db	60
   535  007FBB  40                 	db	64
   536  007FBC  30                 	db	48
   537  007FBD  40                 	db	64
   538  007FBE  3C                 	db	60
   539  007FBF  44                 	db	68
   540  007FC0  28                 	db	40
   541  007FC1  10                 	db	16
   542  007FC2  28                 	db	40
   543  007FC3  44                 	db	68
   544  007FC4  0C                 	db	12
   545  007FC5  50                 	db	80
   546  007FC6  50                 	db	80
   547  007FC7  50                 	db	80
   548  007FC8  3C                 	db	60
   549  007FC9  44                 	db	68
   550  007FCA  64                 	db	100
   551  007FCB  54                 	db	84
   552  007FCC  4C                 	db	76
   553  007FCD  44                 	db	68
   554  007FCE  00                 	db	0
   555  007FCF  08                 	db	8
   556  007FD0  36                 	db	54
   557  007FD1  41                 	db	65
   558  007FD2  00                 	db	0
   559  007FD3  00                 	db	0
   560  007FD4  00                 	db	0
   561  007FD5  7F                 	db	127
   562  007FD6  00                 	db	0
   563  007FD7  00                 	db	0
   564  007FD8  00                 	db	0
   565  007FD9  41                 	db	65
   566  007FDA  36                 	db	54
   567  007FDB  08                 	db	8
   568  007FDC  00                 	db	0
   569  007FDD  10                 	db	16
   570  007FDE  08                 	db	8
   571  007FDF  08                 	db	8
   572  007FE0  10                 	db	16
   573  007FE1  08                 	db	8
   574  007FE2  78                 	db	120
   575  007FE3  46                 	db	70
   576  007FE4  41                 	db	65
   577  007FE5  46                 	db	70
   578  007FE6  78                 	db	120
   579  007FE7                     __end_of_FONTLOOKUP:
   580                           	opt stack 0
   581  007FE7                     STR_1:
   582  007FE7  48                 	db	72	;'H'
   583  007FE8  65                 	db	101	;'e'
   584  007FE9  6C                 	db	108	;'l'
   585  007FEA  6C                 	db	108	;'l'
   586  007FEB  6F                 	db	111	;'o'
   587  007FEC  20                 	db	32
   588  007FED  57                 	db	87	;'W'
   589  007FEE  6F                 	db	111	;'o'
   590  007FEF  72                 	db	114	;'r'
   591  007FF0  6C                 	db	108	;'l'
   592  007FF1  64                 	db	100	;'d'
   593  007FF2  21                 	db	33
   594  007FF3  00                 	db	0
   595  007FF4                     STR_4:
   596  007FF4  28                 	db	40
   597  007FF5  6E                 	db	110	;'n'
   598  007FF6  75                 	db	117	;'u'
   599  007FF7  6C                 	db	108	;'l'
   600  007FF8  6C                 	db	108	;'l'
   601  007FF9  29                 	db	41
   602  007FFA  00                 	db	0
   603  007FFB                     STR_2:
   604  007FFB  25                 	db	37
   605  007FFC  73                 	db	115	;'s'
   606  007FFD  00                 	db	0
   607  0000                     
   608                           ; #config settings
   609  007FFE  00                 	db	0	; dummy byte at the end
   610  0000                     
   611                           	psect	nvCOMRAM
   612  000041                     __pnvCOMRAM:
   613                           	opt stack 0
   614  000041                     _timer0ReloadVal16bit:
   615                           	opt stack 0
   616  000041                     	ds	2
   617  000043                     _eusart2TxBufferRemaining:
   618                           	opt stack 0
   619  000043                     	ds	1
   620  0000                     _ANSELA	set	3896
   621  0000                     _ANSELB	set	3897
   622  0000                     _ANSELC	set	3898
   623  0000                     _ANSELD	set	3899
   624  0000                     _ANSELE	set	3900
   625  0000                     _BAUD1CON	set	4024
   626  0000                     _BAUD2CON	set	3952
   627  0000                     _INTCON2bits	set	4081
   628  0000                     _INTCONbits	set	4082
   629  0000                     _IPR1bits	set	3999
   630  0000                     _IPR3bits	set	4005
   631  0000                     _LATA	set	3977
   632  0000                     _LATB	set	3978
   633  0000                     _LATBbits	set	3978
   634  0000                     _LATC	set	3979
   635  0000                     _LATCbits	set	3979
   636  0000                     _LATD	set	3980
   637  0000                     _LATE	set	3981
   638  0000                     _OSCCON	set	4051
   639  0000                     _OSCCON2	set	4050
   640  0000                     _OSCTUNE	set	3995
   641  0000                     _PIE1bits	set	3997
   642  0000                     _PIE3bits	set	4003
   643  0000                     _PIR1bits	set	3998
   644  0000                     _PIR3bits	set	4004
   645  0000                     _RC1STA	set	4011
   646  0000                     _RC1STAbits	set	4011
   647  0000                     _RC2STA	set	3953
   648  0000                     _RC2STAbits	set	3953
   649  0000                     _RCONbits	set	4048
   650  0000                     _RCREG1	set	4014
   651  0000                     _RCREG2	set	3956
   652  0000                     _SPBRG1	set	4015
   653  0000                     _SPBRG2	set	3957
   654  0000                     _SPBRGH1	set	4016
   655  0000                     _SPBRGH2	set	3958
   656  0000                     _SSP1ADD	set	4040
   657  0000                     _SSP1BUF	set	4041
   658  0000                     _SSP1CON1	set	4038
   659  0000                     _SSP1CON1bits	set	4038
   660  0000                     _SSP1STAT	set	4039
   661  0000                     _SSP1STATbits	set	4039
   662  0000                     _T0CON	set	4053
   663  0000                     _T0CONbits	set	4053
   664  0000                     _TMR0H	set	4055
   665  0000                     _TMR0L	set	4054
   666  0000                     _TRISA	set	3986
   667  0000                     _TRISB	set	3987
   668  0000                     _TRISBbits	set	3987
   669  0000                     _TRISC	set	3988
   670  0000                     _TRISD	set	3989
   671  0000                     _TRISE	set	3990
   672  0000                     _TX1STA	set	4012
   673  0000                     _TX2STA	set	3954
   674  0000                     _TXREG1	set	4013
   675  0000                     _TXREG2	set	3955
   676  0000                     _WPUB	set	3937
   677  0000                     _LATA3	set	31819
   678  0000                     _LATA6	set	31822
   679  0000                     _LATB0	set	31824
   680  0000                     _LATB1	set	31825
   681  0000                     _LATB3	set	31827
   682  0000                     _LATB4	set	31828
   683  0000                     _LATB5	set	31829
   684  0000                     _LATC0	set	31832
   685  0000                     _LATC1	set	31833
   686  0000                     _LATD0	set	31840
   687  0000                     _LATD3	set	31843
   688  0000                     _TRISA3	set	31891
   689  0000                     _TRISD0	set	31912
   690  0000                     _TRISD2	set	31914
   691  0000                     _TRISD3	set	31915
   692                           
   693                           	psect	cinit
   694  000B98                     __pcinit:
   695                           	opt stack 0
   696  000B98                     start_initialization:
   697                           	opt stack 0
   698  000B98                     __initialization:
   699                           	opt stack 0
   700                           
   701                           ; Clear objects allocated to BANK4 (200 bytes)
   702  000B98  EE04  F000         	lfsr	0,__pbssBANK4
   703  000B9C  0EC8               	movlw	200
   704  000B9E                     clear_0:
   705  000B9E  6AEE               	clrf	postinc0,c
   706  000BA0  06E8               	decf	wreg,f,c
   707  000BA2  E1FD               	bnz	clear_0
   708                           
   709                           ; Clear objects allocated to BANK3 (206 bytes)
   710  000BA4  EE03  F000         	lfsr	0,__pbssBANK3
   711  000BA8  0ECE               	movlw	206
   712  000BAA                     clear_1:
   713  000BAA  6AEE               	clrf	postinc0,c
   714  000BAC  06E8               	decf	wreg,f,c
   715  000BAE  E1FD               	bnz	clear_1
   716                           
   717                           ; Clear objects allocated to BANK2 (206 bytes)
   718  000BB0  EE02  F000         	lfsr	0,__pbssBANK2
   719  000BB4  0ECE               	movlw	206
   720  000BB6                     clear_2:
   721  000BB6  6AEE               	clrf	postinc0,c
   722  000BB8  06E8               	decf	wreg,f,c
   723  000BBA  E1FD               	bnz	clear_2
   724                           
   725                           ; Clear objects allocated to BANK1 (206 bytes)
   726  000BBC  EE01  F000         	lfsr	0,__pbssBANK1
   727  000BC0  0ECE               	movlw	206
   728  000BC2                     clear_3:
   729  000BC2  6AEE               	clrf	postinc0,c
   730  000BC4  06E8               	decf	wreg,f,c
   731  000BC6  E1FD               	bnz	clear_3
   732                           
   733                           ; Clear objects allocated to BANK0 (96 bytes)
   734  000BC8  EE00  F060         	lfsr	0,__pbssBANK0
   735  000BCC  0E60               	movlw	96
   736  000BCE                     clear_4:
   737  000BCE  6AEE               	clrf	postinc0,c
   738  000BD0  06E8               	decf	wreg,f,c
   739  000BD2  E1FD               	bnz	clear_4
   740                           
   741                           ; Clear objects allocated to COMRAM (26 bytes)
   742  000BD4  EE00  F027         	lfsr	0,__pbssCOMRAM
   743  000BD8  0E1A               	movlw	26
   744  000BDA                     clear_5:
   745  000BDA  6AEE               	clrf	postinc0,c
   746  000BDC  06E8               	decf	wreg,f,c
   747  000BDE  E1FD               	bnz	clear_5
   748                           
   749                           ; Initialize objects allocated to BANK0 (9 bytes)
   750                           ; load TBLPTR registers with __pidataBANK0
   751  000BE0  0ECE               	movlw	low __pidataBANK0
   752  000BE2  6EF6               	movwf	tblptrl,c
   753  000BE4  0E12               	movlw	high __pidataBANK0
   754  000BE6  6EF7               	movwf	tblptrh,c
   755  000BE8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   756  000BEA  6EF8               	movwf	tblptru,c
   757  000BEC  EE00  F0D9         	lfsr	0,__pdataBANK0
   758  000BF0  EE10 F009          	lfsr	1,9
   759  000BF4                     copy_data0:
   760  000BF4  0009               	tblrd		*+
   761  000BF6  CFF5 FFEE          	movff	tablat,postinc0
   762  000BFA  50E5               	movf	postdec1,w,c
   763  000BFC  50E1               	movf	fsr1l,w,c
   764  000BFE  E1FA               	bnz	copy_data0
   765                           
   766                           ; Initialize objects allocated to COMRAM (1 bytes)
   767                           ; load TBLPTR registers with __pidataCOMRAM
   768  000C00  0EDC               	movlw	low __pidataCOMRAM
   769  000C02  6EF6               	movwf	tblptrl,c
   770  000C04  0E12               	movlw	high __pidataCOMRAM
   771  000C06  6EF7               	movwf	tblptrh,c
   772  000C08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   773  000C0A  6EF8               	movwf	tblptru,c
   774  000C0C  0009               	tblrd		*+	;fetch initializer
   775  000C0E  CFF5 F044          	movff	tablat,__pdataCOMRAM
   776  000C12                     end_of_initialization:
   777                           	opt stack 0
   778  000C12                     __end_of__initialization:
   779                           	opt stack 0
   780  000C12  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   781  000C14  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   782  000C16  0E00               	movlw	low (__Lmediumconst shr (0+16))
   783  000C18  6EF8               	movwf	tblptru,c
   784  000C1A  0100               	movlb	0
   785  000C1C  EFF4  F006         	goto	_main	;jump to C main() function
   786                           tblptru	equ	0xFF8
   787                           tblptrh	equ	0xFF7
   788                           tblptrl	equ	0xFF6
   789                           tablat	equ	0xFF5
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           postdec1	equ	0xFE5
   793                           fsr1l	equ	0xFE1
   794                           
   795                           	psect	bssCOMRAM
   796  000027                     __pbssCOMRAM:
   797                           	opt stack 0
   798  000027                     _Start:
   799                           	opt stack 0
   800  000027                     	ds	2
   801  000029                     _group:
   802                           	opt stack 0
   803  000029                     	ds	2
   804  00002B                     _receiveArrayAddress:
   805                           	opt stack 0
   806  00002B                     	ds	2
   807  00002D                     _sendStructAddress:
   808                           	opt stack 0
   809  00002D                     	ds	2
   810  00002F                     _serial_read:
   811                           	opt stack 0
   812  00002F                     	ds	2
   813  000031                     _serial_write:
   814                           	opt stack 0
   815  000031                     	ds	2
   816  000033                     _AKNAKsend:
   817                           	opt stack 0
   818  000033                     	ds	1
   819  000034                     _calc_CS:
   820                           	opt stack 0
   821  000034                     	ds	1
   822  000035                     _eusart2RxCount:
   823                           	opt stack 0
   824  000035                     	ds	1
   825  000036                     _eusart2RxHead:
   826                           	opt stack 0
   827  000036                     	ds	1
   828  000037                     _eusart2RxTail:
   829                           	opt stack 0
   830  000037                     	ds	1
   831  000038                     _eusart2TxHead:
   832                           	opt stack 0
   833  000038                     	ds	1
   834  000039                     _eusart2TxTail:
   835                           	opt stack 0
   836  000039                     	ds	1
   837  00003A                     _i:
   838                           	opt stack 0
   839  00003A                     	ds	1
   840  00003B                     _maxDataAddress:
   841                           	opt stack 0
   842  00003B                     	ds	1
   843  00003C                     _moduleAddress:
   844                           	opt stack 0
   845  00003C                     	ds	1
   846  00003D                     _returnAddress:
   847                           	opt stack 0
   848  00003D                     	ds	1
   849  00003E                     _rx_address:
   850                           	opt stack 0
   851  00003E                     	ds	1
   852  00003F                     _rx_array_inx:
   853                           	opt stack 0
   854  00003F                     	ds	1
   855  000040                     _rx_len:
   856                           	opt stack 0
   857  000040                     	ds	1
   858                           tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           postdec1	equ	0xFE5
   865                           fsr1l	equ	0xFE1
   866                           
   867                           	psect	dataCOMRAM
   868  000044                     __pdataCOMRAM:
   869                           	opt stack 0
   870  000044                     _Transmit_stall:
   871                           	opt stack 0
   872  000044                     	ds	1
   873                           tblptru	equ	0xFF8
   874                           tblptrh	equ	0xFF7
   875                           tblptrl	equ	0xFF6
   876                           tablat	equ	0xFF5
   877                           postinc0	equ	0xFEE
   878                           wreg	equ	0xFE8
   879                           postdec1	equ	0xFE5
   880                           fsr1l	equ	0xFE1
   881                           
   882                           	psect	bssBANK0
   883  000060                     __pbssBANK0:
   884                           	opt stack 0
   885  000060                     _receiveArray:
   886                           	opt stack 0
   887  000060                     	ds	40
   888  000088                     _ddata:
   889                           	opt stack 0
   890  000088                     	ds	11
   891  000093                     _eusart2RxBuffer:
   892                           	opt stack 0
   893  000093                     	ds	8
   894  00009B                     _eusart2TxBuffer:
   895                           	opt stack 0
   896  00009B                     	ds	8
   897  0000A3                     _addressErrorCounter:
   898                           	opt stack 0
   899  0000A3                     	ds	2
   900  0000A5                     _alignErrorCounter:
   901                           	opt stack 0
   902  0000A5                     	ds	2
   903  0000A7                     _crcErrorCounter:
   904                           	opt stack 0
   905  0000A7                     	ds	2
   906  0000A9                     _dataAdressErrorCounter:
   907                           	opt stack 0
   908  0000A9                     	ds	2
   909  0000AB                     _serial_available:
   910                           	opt stack 0
   911  0000AB                     	ds	2
   912  0000AD                     _serial_peek:
   913                           	opt stack 0
   914  0000AD                     	ds	2
   915  0000AF                     _crc_buffer:
   916                           	opt stack 0
   917  0000AF                     	ds	17
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1l	equ	0xFE1
   926                           
   927                           	psect	dataBANK0
   928  0000D9                     __pdataBANK0:
   929                           	opt stack 0
   930  0000D9                     _ChargerData:
   931                           	opt stack 0
   932  0000D9                     	ds	9
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           
   942                           	psect	bssBANK1
   943  000100                     __pbssBANK1:
   944                           	opt stack 0
   945  000100                     _ring_buffer:
   946                           	opt stack 0
   947  000100                     	ds	206
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           postdec1	equ	0xFE5
   955                           fsr1l	equ	0xFE1
   956                           
   957                           	psect	bssBANK2
   958  000200                     __pbssBANK2:
   959                           	opt stack 0
   960  000200                     _input_buffer:
   961                           	opt stack 0
   962  000200                     	ds	206
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	bssBANK3
   973  000300                     __pbssBANK3:
   974                           	opt stack 0
   975  000300                     _output_buffer:
   976                           	opt stack 0
   977  000300                     	ds	206
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	bssBANK4
   988  000400                     __pbssBANK4:
   989                           	opt stack 0
   990  000400                     _rx_buffer:
   991                           	opt stack 0
   992  000400                     	ds	200
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           postinc0	equ	0xFEE
   998                           wreg	equ	0xFE8
   999                           postdec1	equ	0xFE5
  1000                           fsr1l	equ	0xFE1
  1001                           
  1002                           	psect	cstackBANK0
  1003  0000C0                     __pcstackBANK0:
  1004                           	opt stack 0
  1005  0000C0                     ??_sendData:
  1006  0000C0                     ??_FastTransfer_buffer_put:
  1007  0000C0                     CRCcheck@SentCRC:
  1008                           	opt stack 0
  1009  0000C0                     Precharge@OnOff:
  1010                           	opt stack 0
  1011  0000C0                     SetCharger@Current:
  1012                           	opt stack 0
  1013  0000C0                     LcdCharacter@character:
  1014                           	opt stack 0
  1015                           
  1016                           ; 1 bytes @ 0x0
  1017  0000C0                     	ds	1
  1018  0000C1                     sendData@whereToSend:
  1019                           	opt stack 0
  1020  0000C1                     CRCcheck@calculatedCRC:
  1021                           	opt stack 0
  1022  0000C1                     SetCharger@Voltage:
  1023                           	opt stack 0
  1024  0000C1                     Precharge@i:
  1025                           	opt stack 0
  1026  0000C1                     LcdCharacter@index:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x1
  1030  0000C1                     	ds	1
  1031  0000C2                     sendData@CS:
  1032                           	opt stack 0
  1033  0000C2                     SetCharger@mode:
  1034                           	opt stack 0
  1035  0000C2                     ToSend@what:
  1036                           	opt stack 0
  1037  0000C2                     CRCcheck@arrayHolder:
  1038                           	opt stack 0
  1039                           
  1040                           ; 3 bytes @ 0x2
  1041  0000C2                     	ds	1
  1042  0000C3                     sendData@i:
  1043                           	opt stack 0
  1044  0000C3                     Precharge@i_1753:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x3
  1048  0000C3                     	ds	2
  1049  0000C5                     CRCcheck@rt:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x5
  1053  0000C5                     	ds	2
  1054  0000C7                     ??_receiveData:
  1055                           
  1056                           ; 0 bytes @ 0x7
  1057  0000C7                     	ds	6
  1058  0000CD                     receiveData@crcHolder:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0xD
  1062  0000CD                     	ds	1
  1063  0000CE                     receiveData@crcHolder_1474:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0xE
  1067  0000CE                     	ds	1
  1068  0000CF                     receiveData@holder:
  1069                           	opt stack 0
  1070                           
  1071                           ; 3 bytes @ 0xF
  1072  0000CF                     	ds	3
  1073  0000D2                     receiveData@holder_1473:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x12
  1077  0000D2                     	ds	3
  1078  0000D5                     receiveData@u:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x15
  1082  0000D5                     	ds	2
  1083  0000D7                     receiveData@r:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x17
  1087  0000D7                     	ds	2
  1088                           tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           postinc0	equ	0xFEE
  1093                           wreg	equ	0xFE8
  1094                           postdec1	equ	0xFE5
  1095                           fsr1l	equ	0xFE1
  1096                           
  1097                           	psect	cstackCOMRAM
  1098  000001                     __pcstackCOMRAM:
  1099                           	opt stack 0
  1100  000001                     ?_UART_buff_modulo_inc:
  1101                           	opt stack 0
  1102  000001                     ?_UART_buff_size:
  1103                           	opt stack 0
  1104  000001                     UART_buff_size@_this:
  1105                           	opt stack 0
  1106  000001                     UART_buff_modulo_inc@value:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x0
  1110  000001                     	ds	2
  1111  000003                     UART_buff_modulo_inc@modulus:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x2
  1115  000003                     	ds	2
  1116  000005                     UART_buff_modulo_inc@my_value:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x4
  1120  000005                     	ds	2
  1121  000007                     UART_buff_put@_this:
  1122                           	opt stack 0
  1123  000007                     UART_buff_get@_this:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x6
  1127  000007                     	ds	2
  1128  000009                     ??_UART_buff_get:
  1129  000009                     UART_buff_put@c:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0x8
  1133  000009                     	ds	1
  1134  00000A                     ??_UART_buff_put:
  1135                           
  1136                           ; 0 bytes @ 0x9
  1137  00000A                     	ds	1
  1138  00000B                     UART_buff_get@c:
  1139                           	opt stack 0
  1140                           
  1141                           ; 1 bytes @ 0xA
  1142  00000B                     	ds	1
  1143  00000C                     EUSART1_Receive_ISR@data:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0xB
  1147  00000C                     	ds	1
  1148  00000D                     ??_INTERRUPT_InterruptManager:
  1149                           
  1150                           ; 0 bytes @ 0xC
  1151  00000D                     	ds	14
  1152  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1153                           	opt stack 0
  1154  00001B                     ?___wmul:
  1155                           	opt stack 0
  1156  00001B                     EUSART2_Write@txData:
  1157                           	opt stack 0
  1158  00001B                     SPI1_Exchange8bit@data:
  1159                           	opt stack 0
  1160  00001B                     SetMux@channel:
  1161                           	opt stack 0
  1162  00001B                     CRC8@data:
  1163                           	opt stack 0
  1164  00001B                     FastTransfer_buffer_modulo_inc@value:
  1165                           	opt stack 0
  1166  00001B                     crcBufS_put@_this:
  1167                           	opt stack 0
  1168  00001B                     crcBufS_status_put@_this:
  1169                           	opt stack 0
  1170  00001B                     crcBufS_get@_this:
  1171                           	opt stack 0
  1172  00001B                     ___wmul@multiplier:
  1173                           	opt stack 0
  1174  00001B                     memset@p1:
  1175                           	opt stack 0
  1176  00001B                     Delay@wait:
  1177                           	opt stack 0
  1178                           
  1179                           ; 4 bytes @ 0x1A
  1180  00001B                     	ds	1
  1181  00001C                     putch@txData:
  1182                           	opt stack 0
  1183                           
  1184                           ; 1 bytes @ 0x1B
  1185  00001C                     	ds	1
  1186  00001D                     ?_printf:
  1187                           	opt stack 0
  1188  00001D                     CRC8@len:
  1189                           	opt stack 0
  1190  00001D                     crcBufS_put@address:
  1191                           	opt stack 0
  1192  00001D                     crcBufS_status_put@time:
  1193                           	opt stack 0
  1194  00001D                     crcBufS_get@time:
  1195                           	opt stack 0
  1196  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1197                           	opt stack 0
  1198  00001D                     printf@f:
  1199                           	opt stack 0
  1200  00001D                     ___wmul@multiplicand:
  1201                           	opt stack 0
  1202  00001D                     memset@c:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x1C
  1206  00001D                     	ds	1
  1207  00001E                     CRC8@sum:
  1208                           	opt stack 0
  1209  00001E                     crcBufS_put@oldCRC:
  1210                           	opt stack 0
  1211  00001E                     crcBufS_status_put@status:
  1212                           	opt stack 0
  1213  00001E                     crcBufS_get@space:
  1214                           	opt stack 0
  1215                           
  1216                           ; 1 bytes @ 0x1D
  1217  00001E                     	ds	1
  1218  00001F                     ??_Delay:
  1219  00001F                     ??_crcBufS_get:
  1220  00001F                     ??_crcBufS_status_put:
  1221  00001F                     CRC8@extract:
  1222                           	opt stack 0
  1223  00001F                     crcBufS_put@status:
  1224                           	opt stack 0
  1225  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1226                           	opt stack 0
  1227  00001F                     ___wmul@product:
  1228                           	opt stack 0
  1229  00001F                     memset@n:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x1E
  1233  00001F                     	ds	1
  1234  000020                     ??_crcBufS_put:
  1235  000020                     CRC8@tempI:
  1236                           	opt stack 0
  1237  000020                     Delay@i:
  1238                           	opt stack 0
  1239                           
  1240                           ; 4 bytes @ 0x1F
  1241  000020                     	ds	1
  1242  000021                     CRC8@crc:
  1243                           	opt stack 0
  1244  000021                     LCDwrite@data:
  1245                           	opt stack 0
  1246  000021                     printf@flag:
  1247                           	opt stack 0
  1248  000021                     FastTransfer_buffer_put@_this:
  1249                           	opt stack 0
  1250  000021                     memset@p:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x20
  1254  000021                     	ds	1
  1255  000022                     LCDwrite@mode:
  1256                           	opt stack 0
  1257  000022                     printf@ap:
  1258                           	opt stack 0
  1259                           
  1260                           ; 2 bytes @ 0x21
  1261  000022                     	ds	1
  1262  000023                     ??_LcdCharacter:
  1263  000023                     FastTransfer_buffer_put@towhere:
  1264                           	opt stack 0
  1265  000023                     FastTransfer_buffer_flush@_this:
  1266                           	opt stack 0
  1267  000023                     crcBufS_status_put@wantedTime:
  1268                           	opt stack 0
  1269  000023                     clearLcd@res:
  1270                           	opt stack 0
  1271  000023                     blackLcd@res:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x22
  1275  000023                     	ds	1
  1276  000024                     printf@c:
  1277                           	opt stack 0
  1278  000024                     FastTransfer_buffer_put@towhat:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x23
  1282  000024                     	ds	1
  1283  000025                     FastTransfer_buffer_flush@clearBuffer:
  1284                           	opt stack 0
  1285  000025                     crcBufS_get@wantedTime:
  1286                           	opt stack 0
  1287  000025                     NokiaStr@str:
  1288                           	opt stack 0
  1289  000025                     printf@cp:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x24
  1293  000025                     	ds	1
  1294  000026                     ToSend@where:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x25
  1298  000026                     	ds	1
  1299  000027                     tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           postdec1	equ	0xFE5
  1306                           fsr1l	equ	0xFE1
  1307                           
  1308                           ; 0 bytes @ 0x26
  1309 ;;
  1310 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1311 ;;
  1312 ;; *************** function _main *****************
  1313 ;; Defined at:
  1314 ;;		line 16 in file "main.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;		None               void
  1321 ;; Registers used:
  1322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1328 ;;      Params:         0       0       0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels required when called:    9
  1334 ;; This function calls:
  1335 ;;		_Delay
  1336 ;;		_NokiaStart
  1337 ;;		_NokiaStr
  1338 ;;		_SYSTEM_Initialize
  1339 ;;		_respondECU
  1340 ;;		_updateComms
  1341 ;; This function is called by:
  1342 ;;		Startup code after reset
  1343 ;; This function uses a non-reentrant model
  1344 ;;
  1345                           
  1346                           	psect	text0
  1347  000DE8                     __ptext0:
  1348                           	opt stack 0
  1349  000DE8                     _main:
  1350                           	opt stack 22
  1351                           
  1352                           ;main.c: 18: SYSTEM_Initialize();
  1353                           
  1354                           ;incstack = 0
  1355  000DE8  EC30  F009         	call	_SYSTEM_Initialize	;wreg free
  1356                           
  1357                           ;main.c: 37: (INTCONbits.GIE = 1);
  1358  000DEC  8EF2               	bsf	intcon,7,c	;volatile
  1359                           
  1360                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1361  000DEE  8CF2               	bsf	intcon,6,c	;volatile
  1362                           
  1363                           ;main.c: 47: NokiaStart();
  1364  000DF0  EC10  F006         	call	_NokiaStart	;wreg free
  1365                           
  1366                           ;main.c: 48: do { TRISA3 = 0; } while(0);
  1367  000DF4  9692               	bcf	3986,3,c	;volatile
  1368  000DF6  D021               	goto	u2661
  1369  000DF8                     l3480:
  1370                           
  1371                           ;main.c: 52: Delay(1000);
  1372  000DF8  0EE8               	movlw	232
  1373  000DFA  6E1B               	movwf	Delay@wait,c
  1374  000DFC  0E03               	movlw	3
  1375  000DFE  6E1C               	movwf	Delay@wait+1,c
  1376  000E00  0E00               	movlw	0
  1377  000E02  6E1D               	movwf	Delay@wait+2,c
  1378  000E04  0E00               	movlw	0
  1379  000E06  6E1E               	movwf	Delay@wait+3,c
  1380  000E08  EC73  F007         	call	_Delay	;wreg free
  1381                           
  1382                           ;main.c: 54: NokiaStr("Hello World!");
  1383  000E0C  0EE7               	movlw	low STR_1
  1384  000E0E  6E25               	movwf	NokiaStr@str,c
  1385  000E10  0E7F               	movlw	high STR_1
  1386  000E12  6E26               	movwf	NokiaStr@str+1,c
  1387  000E14  EC82  F008         	call	_NokiaStr	;wreg free
  1388                           
  1389                           ;main.c: 56: do { LATA6 = ~LATA6; } while(0);
  1390  000E18  BC89               	btfsc	3977,6,c	;volatile
  1391  000E1A  D002               	goto	u2600
  1392  000E1C  8C89               	bsf	3977,6,c	;volatile
  1393  000E1E  D001               	goto	l3486
  1394  000E20                     u2600:
  1395  000E20  9C89               	bcf	3977,6,c	;volatile
  1396  000E22                     l3486:
  1397  000E22  B08B               	btfsc	3979,0,c	;volatile
  1398  000E24  D002               	goto	u2620
  1399  000E26  808B               	bsf	3979,0,c	;volatile
  1400  000E28  D001               	goto	l3488
  1401  000E2A                     u2620:
  1402  000E2A  908B               	bcf	3979,0,c	;volatile
  1403  000E2C                     l3488:
  1404  000E2C  B28B               	btfsc	3979,1,c	;volatile
  1405  000E2E  D002               	goto	u2640
  1406  000E30  828B               	bsf	3979,1,c	;volatile
  1407  000E32  D001               	goto	l3490
  1408  000E34                     u2640:
  1409  000E34  928B               	bcf	3979,1,c	;volatile
  1410  000E36                     l3490:
  1411  000E36  B689               	btfsc	3977,3,c	;volatile
  1412  000E38  D002               	goto	u2660
  1413  000E3A                     u2661:
  1414  000E3A  8689               	bsf	3977,3,c	;volatile
  1415  000E3C  D7DD               	goto	l3480
  1416  000E3E                     u2660:
  1417  000E3E  9689               	bcf	3977,3,c	;volatile
  1418  000E40  D7DB               	goto	l3480
  1419  000E42                     __end_of_main:
  1420                           	opt stack 0
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           intcon	equ	0xFF2
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           postdec1	equ	0xFE5
  1429                           fsr1l	equ	0xFE1
  1430                           
  1431 ;; *************** function _updateComms *****************
  1432 ;; Defined at:
  1433 ;;		line 14 in file "Communications.c"
  1434 ;; Parameters:    Size  Location     Type
  1435 ;;		None
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;		None
  1438 ;; Return value:  Size  Location     Type
  1439 ;;		None               void
  1440 ;; Registers used:
  1441 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1447 ;;      Params:         0       0       0       0       0       0       0
  1448 ;;      Locals:         0       0       0       0       0       0       0
  1449 ;;      Temps:          0       0       0       0       0       0       0
  1450 ;;      Totals:         0       0       0       0       0       0       0
  1451 ;;Total ram usage:        0 bytes
  1452 ;; Hardware stack levels used:    1
  1453 ;; Hardware stack levels required when called:    8
  1454 ;; This function calls:
  1455 ;;		_Precharge
  1456 ;;		_SetCharger
  1457 ;;		_receiveData
  1458 ;;		_respondECU
  1459 ;; This function is called by:
  1460 ;;		_main
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           	psect	text1
  1465  0011A8                     __ptext1:
  1466                           	opt stack 0
  1467  0011A8                     _updateComms:
  1468                           	opt stack 22
  1469                           
  1470                           ;Communications.c: 15: if (receiveData()) {
  1471                           
  1472                           ;incstack = 0
  1473  0011A8  EC58  F000         	call	_receiveData	;wreg free
  1474  0011AC  0900               	iorlw	0
  1475  0011AE  B4D8               	btfsc	status,2,c
  1476  0011B0  0012               	return	
  1477                           
  1478                           ;Communications.c: 16: Precharge(receiveArray[1]);
  1479  0011B2  0100               	movlb	0	; () banked
  1480  0011B4  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1481  0011B6  ECA3  F004         	call	_Precharge
  1482                           
  1483                           ;Communications.c: 17: SetCharger(1, receiveArray[2], receiveArray[3]);
  1484  0011BA  C064  F0C0         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1485  0011BE  C066  F0C1         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1486  0011C2  0E01               	movlw	1
  1487  0011C4  EC8D  F006         	call	_SetCharger
  1488                           
  1489                           ;Communications.c: 18: respondECU();
  1490  0011C8  EC21  F007         	call	_respondECU	;wreg free
  1491  0011CC  0012               	return	
  1492  0011CE                     __end_of_updateComms:
  1493                           	opt stack 0
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           intcon	equ	0xFF2
  1499                           postinc0	equ	0xFEE
  1500                           wreg	equ	0xFE8
  1501                           postdec1	equ	0xFE5
  1502                           fsr1l	equ	0xFE1
  1503                           status	equ	0xFD8
  1504                           
  1505 ;; *************** function _respondECU *****************
  1506 ;; Defined at:
  1507 ;;		line 33 in file "Communications.c"
  1508 ;; Parameters:    Size  Location     Type
  1509 ;;		None
  1510 ;; Auto vars:     Size  Location     Type
  1511 ;;		None
  1512 ;; Return value:  Size  Location     Type
  1513 ;;                  2  272[None  ] int 
  1514 ;; Registers used:
  1515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1516 ;; Tracked objects:
  1517 ;;		On entry : 0/0
  1518 ;;		On exit  : 0/0
  1519 ;;		Unchanged: 0/0
  1520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1521 ;;      Params:         0       0       0       0       0       0       0
  1522 ;;      Locals:         0       0       0       0       0       0       0
  1523 ;;      Temps:          0       0       0       0       0       0       0
  1524 ;;      Totals:         0       0       0       0       0       0       0
  1525 ;;Total ram usage:        0 bytes
  1526 ;; Hardware stack levels used:    1
  1527 ;; Hardware stack levels required when called:    7
  1528 ;; This function calls:
  1529 ;;		_Delay
  1530 ;;		_ToSend
  1531 ;;		_sendData
  1532 ;; This function is called by:
  1533 ;;		_main
  1534 ;;		_updateComms
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           	psect	text2
  1539  000E42                     __ptext2:
  1540                           	opt stack 0
  1541  000E42                     _respondECU:
  1542                           	opt stack 22
  1543                           
  1544                           ;Communications.c: 34: LATCbits.LATC5 = 1;
  1545                           
  1546                           ;incstack = 0
  1547  000E42  8A8B               	bsf	3979,5,c	;volatile
  1548                           
  1549                           ;Communications.c: 35: ToSend(0, 1);
  1550  000E44  0E00               	movlw	0
  1551  000E46  0100               	movlb	0	; () banked
  1552  000E48  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1553  000E4A  0E01               	movlw	1
  1554  000E4C  6FC2               	movwf	ToSend@what& (0+255),b
  1555  000E4E  0E00               	movlw	0
  1556  000E50  EC09  F009         	call	_ToSend
  1557                           
  1558                           ;Communications.c: 36: ToSend(1, 1);
  1559  000E54  0E00               	movlw	0
  1560  000E56  0100               	movlb	0	; () banked
  1561  000E58  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1562  000E5A  0E01               	movlw	1
  1563  000E5C  6FC2               	movwf	ToSend@what& (0+255),b
  1564  000E5E  0E01               	movlw	1
  1565  000E60  EC09  F009         	call	_ToSend
  1566                           
  1567                           ;Communications.c: 37: Delay(5);
  1568  000E64  0E05               	movlw	5
  1569  000E66  6E1B               	movwf	Delay@wait,c
  1570  000E68  0E00               	movlw	0
  1571  000E6A  6E1C               	movwf	Delay@wait+1,c
  1572  000E6C  0E00               	movlw	0
  1573  000E6E  6E1D               	movwf	Delay@wait+2,c
  1574  000E70  0E00               	movlw	0
  1575  000E72  6E1E               	movwf	Delay@wait+3,c
  1576  000E74  EC73  F007         	call	_Delay	;wreg free
  1577                           
  1578                           ;Communications.c: 39: sendData(6);
  1579  000E78  0E06               	movlw	6
  1580  000E7A  EC51  F006         	call	_sendData
  1581                           
  1582                           ;Communications.c: 40: Delay(3);
  1583  000E7E  0E03               	movlw	3
  1584  000E80  6E1B               	movwf	Delay@wait,c
  1585  000E82  0E00               	movlw	0
  1586  000E84  6E1C               	movwf	Delay@wait+1,c
  1587  000E86  0E00               	movlw	0
  1588  000E88  6E1D               	movwf	Delay@wait+2,c
  1589  000E8A  0E00               	movlw	0
  1590  000E8C  6E1E               	movwf	Delay@wait+3,c
  1591  000E8E  EC73  F007         	call	_Delay	;wreg free
  1592                           
  1593                           ;Communications.c: 41: LATCbits.LATC5 = 0;
  1594  000E92  9A8B               	bcf	3979,5,c	;volatile
  1595  000E94  0012               	return		;funcret
  1596  000E96                     __end_of_respondECU:
  1597                           	opt stack 0
  1598                           tblptru	equ	0xFF8
  1599                           tblptrh	equ	0xFF7
  1600                           tblptrl	equ	0xFF6
  1601                           tablat	equ	0xFF5
  1602                           intcon	equ	0xFF2
  1603                           postinc0	equ	0xFEE
  1604                           wreg	equ	0xFE8
  1605                           postdec1	equ	0xFE5
  1606                           fsr1l	equ	0xFE1
  1607                           status	equ	0xFD8
  1608                           
  1609 ;; *************** function _sendData *****************
  1610 ;; Defined at:
  1611 ;;		line 53 in file "FastTransfer.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  whereToSend     1    wreg     unsigned char 
  1614 ;; Auto vars:     Size  Location     Type
  1615 ;;  whereToSend     1    1[BANK0 ] unsigned char 
  1616 ;;  i               2    3[BANK0 ] int 
  1617 ;;  CS              1    2[BANK0 ] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1627 ;;      Params:         0       0       0       0       0       0       0
  1628 ;;      Locals:         0       4       0       0       0       0       0
  1629 ;;      Temps:          0       1       0       0       0       0       0
  1630 ;;      Totals:         0       5       0       0       0       0       0
  1631 ;;Total ram usage:        5 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    6
  1634 ;; This function calls:
  1635 ;;		_CRC8
  1636 ;;		_FastTransfer_buffer_flush
  1637 ;;		_crcBufS_put
  1638 ;; This function is called by:
  1639 ;;		_respondECU
  1640 ;; This function uses a non-reentrant model
  1641 ;;
  1642                           
  1643                           	psect	text3
  1644  000CA2                     __ptext3:
  1645                           	opt stack 0
  1646  000CA2                     _sendData:
  1647                           	opt stack 22
  1648                           
  1649                           ;incstack = 0
  1650                           ;sendData@whereToSend stored from wreg
  1651  000CA2  0100               	movlb	0	; () banked
  1652  000CA4  6FC1               	movwf	sendData@whereToSend& (0+255),b
  1653                           
  1654                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1655  000CA6  C02D  F01B         	movff	_sendStructAddress,CRC8@data
  1656  000CAA  C02E  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1657  000CAE  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1658  000CB2  EC99  F007         	call	_CRC8	;wreg free
  1659  000CB6  0100               	movlb	0	; () banked
  1660  000CB8  6FC2               	movwf	sendData@CS& (0+255),b
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;FastTransfer.c: 66: int i;
  1664                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1665  000CBA  0E00               	movlw	0
  1666  000CBC  0100               	movlb	0	; () banked
  1667  000CBE  6FC4               	movwf	(sendData@i+1)& (0+255),b
  1668  000CC0  0E00               	movlw	0
  1669  000CC2  6FC3               	movwf	sendData@i& (0+255),b
  1670  000CC4  D003               	goto	l3108
  1671  000CC6                     l3106:
  1672                           
  1673                           ; BSR set to: 0
  1674  000CC6  0100               	movlb	0	; () banked
  1675  000CC8  4BC3               	infsnz	sendData@i& (0+255),f,b
  1676  000CCA  2BC4               	incf	(sendData@i+1)& (0+255),f,b
  1677  000CCC                     l3108:
  1678                           
  1679                           ; BSR set to: 0
  1680  000CCC  0101               	movlb	1	; () banked
  1681  000CCE  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1682  000CD0  0100               	movlb	0	; () banked
  1683  000CD2  5DC3               	subwf	sendData@i& (0+255),w,b
  1684  000CD4  0100               	movlb	0	; () banked
  1685  000CD6  51C4               	movf	(sendData@i+1)& (0+255),w,b
  1686  000CD8  0A80               	xorlw	128
  1687  000CDA  0100               	movlb	0	; () banked
  1688  000CDC  6FC0               	movwf	??_sendData& (0+255),b
  1689  000CDE  0101               	movlb	1	; () banked
  1690  000CE0  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1691  000CE2  0A80               	xorlw	128
  1692  000CE4  0100               	movlb	0	; () banked
  1693  000CE6  59C0               	subwfb	??_sendData& (0+255),w,b
  1694  000CE8  A0D8               	btfss	status,0,c
  1695  000CEA  D7ED               	goto	l3106
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1699                           
  1700                           ; BSR set to: 0
  1701                           
  1702                           ;FastTransfer.c: 69: }
  1703                           ;FastTransfer.c: 72: serial_write(CS);
  1704  000CEC  0EAF               	movlw	low _crc_buffer
  1705  000CEE  6E1B               	movwf	crcBufS_put@_this,c
  1706  000CF0  0E00               	movlw	high _crc_buffer
  1707  000CF2  6E1C               	movwf	crcBufS_put@_this+1,c
  1708  000CF4  C0C1  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1709  000CF8  C0C2  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1710  000CFC  0E00               	movlw	0
  1711  000CFE  6E1F               	movwf	crcBufS_put@status,c
  1712  000D00  EC62  F003         	call	_crcBufS_put	;wreg free
  1713                           
  1714                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1715  000D04  0E00               	movlw	low _ring_buffer
  1716  000D06  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1717  000D08  0E01               	movlw	high _ring_buffer
  1718  000D0A  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1719  000D0C  0E00               	movlw	0
  1720  000D0E  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1721  000D10  0E01               	movlw	1
  1722  000D12  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1723  000D14  ECC3  F006         	call	_FastTransfer_buffer_flush	;wreg free
  1724  000D18  0012               	return		;funcret
  1725  000D1A                     __end_of_sendData:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           intcon	equ	0xFF2
  1732                           postinc0	equ	0xFEE
  1733                           wreg	equ	0xFE8
  1734                           postdec1	equ	0xFE5
  1735                           fsr1l	equ	0xFE1
  1736                           status	equ	0xFD8
  1737                           
  1738 ;; *************** function _crcBufS_put *****************
  1739 ;; Defined at:
  1740 ;;		line 321 in file "FastTransfer.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1743 ;;		 -> crc_buffer(17), 
  1744 ;;  address         1   28[COMRAM] unsigned char 
  1745 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1746 ;;  status          1   30[COMRAM] unsigned char 
  1747 ;; Auto vars:     Size  Location     Type
  1748 ;;		None
  1749 ;; Return value:  Size  Location     Type
  1750 ;;		None               void
  1751 ;; Registers used:
  1752 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1753 ;; Tracked objects:
  1754 ;;		On entry : 0/0
  1755 ;;		On exit  : 0/0
  1756 ;;		Unchanged: 0/0
  1757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1758 ;;      Params:         5       0       0       0       0       0       0
  1759 ;;      Locals:         0       0       0       0       0       0       0
  1760 ;;      Temps:          2       0       0       0       0       0       0
  1761 ;;      Totals:         7       0       0       0       0       0       0
  1762 ;;Total ram usage:        7 bytes
  1763 ;; Hardware stack levels used:    1
  1764 ;; Hardware stack levels required when called:    4
  1765 ;; This function calls:
  1766 ;;		Nothing
  1767 ;; This function is called by:
  1768 ;;		_sendData
  1769 ;; This function uses a non-reentrant model
  1770 ;;
  1771                           
  1772                           	psect	text4
  1773  0006C4                     __ptext4:
  1774                           	opt stack 0
  1775  0006C4                     _crcBufS_put:
  1776                           	opt stack 23
  1777                           
  1778                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1779                           
  1780                           ;incstack = 0
  1781  0006C4  EE20 F00F          	lfsr	2,15
  1782  0006C8  501B               	movf	crcBufS_put@_this,w,c
  1783  0006CA  26D9               	addwf	fsr2l,f,c
  1784  0006CC  501C               	movf	crcBufS_put@_this+1,w,c
  1785  0006CE  22DA               	addwfc	fsr2h,f,c
  1786  0006D0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1787  0006D4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1788  0006D8  5020               	movf	??_crcBufS_put,w,c
  1789  0006DA  241B               	addwf	crcBufS_put@_this,w,c
  1790  0006DC  6ED9               	movwf	fsr2l,c
  1791  0006DE  5021               	movf	??_crcBufS_put+1,w,c
  1792  0006E0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1793  0006E2  6EDA               	movwf	fsr2h,c
  1794  0006E4  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1795                           
  1796                           ;FastTransfer.c: 323: _this->head++;
  1797  0006E8  EE20 F00F          	lfsr	2,15
  1798  0006EC  501B               	movf	crcBufS_put@_this,w,c
  1799  0006EE  26D9               	addwf	fsr2l,f,c
  1800  0006F0  501C               	movf	crcBufS_put@_this+1,w,c
  1801  0006F2  22DA               	addwfc	fsr2h,f,c
  1802  0006F4  2ADE               	incf	postinc2,f,c
  1803  0006F6  0E00               	movlw	0
  1804  0006F8  22DD               	addwfc	postdec2,f,c
  1805                           
  1806                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1807  0006FA  EE20 F00F          	lfsr	2,15
  1808  0006FE  501B               	movf	crcBufS_put@_this,w,c
  1809  000700  26D9               	addwf	fsr2l,f,c
  1810  000702  501C               	movf	crcBufS_put@_this+1,w,c
  1811  000704  22DA               	addwfc	fsr2h,f,c
  1812  000706  CFDE F020          	movff	postinc2,??_crcBufS_put
  1813  00070A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1814  00070E  5020               	movf	??_crcBufS_put,w,c
  1815  000710  241B               	addwf	crcBufS_put@_this,w,c
  1816  000712  6ED9               	movwf	fsr2l,c
  1817  000714  5021               	movf	??_crcBufS_put+1,w,c
  1818  000716  201C               	addwfc	crcBufS_put@_this+1,w,c
  1819  000718  6EDA               	movwf	fsr2h,c
  1820  00071A  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1821                           
  1822                           ;FastTransfer.c: 325: _this->head++;
  1823  00071E  EE20 F00F          	lfsr	2,15
  1824  000722  501B               	movf	crcBufS_put@_this,w,c
  1825  000724  26D9               	addwf	fsr2l,f,c
  1826  000726  501C               	movf	crcBufS_put@_this+1,w,c
  1827  000728  22DA               	addwfc	fsr2h,f,c
  1828  00072A  2ADE               	incf	postinc2,f,c
  1829  00072C  0E00               	movlw	0
  1830  00072E  22DD               	addwfc	postdec2,f,c
  1831                           
  1832                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1833  000730  EE20 F00F          	lfsr	2,15
  1834  000734  501B               	movf	crcBufS_put@_this,w,c
  1835  000736  26D9               	addwf	fsr2l,f,c
  1836  000738  501C               	movf	crcBufS_put@_this+1,w,c
  1837  00073A  22DA               	addwfc	fsr2h,f,c
  1838  00073C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1839  000740  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1840  000744  5020               	movf	??_crcBufS_put,w,c
  1841  000746  241B               	addwf	crcBufS_put@_this,w,c
  1842  000748  6ED9               	movwf	fsr2l,c
  1843  00074A  5021               	movf	??_crcBufS_put+1,w,c
  1844  00074C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1845  00074E  6EDA               	movwf	fsr2h,c
  1846  000750  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1847                           
  1848                           ;FastTransfer.c: 327: _this->head++;
  1849  000754  EE20 F00F          	lfsr	2,15
  1850  000758  501B               	movf	crcBufS_put@_this,w,c
  1851  00075A  26D9               	addwf	fsr2l,f,c
  1852  00075C  501C               	movf	crcBufS_put@_this+1,w,c
  1853  00075E  22DA               	addwfc	fsr2h,f,c
  1854  000760  2ADE               	incf	postinc2,f,c
  1855  000762  0E00               	movlw	0
  1856  000764  22DD               	addwfc	postdec2,f,c
  1857                           
  1858                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1859  000766  EE20 F00F          	lfsr	2,15
  1860  00076A  501B               	movf	crcBufS_put@_this,w,c
  1861  00076C  26D9               	addwf	fsr2l,f,c
  1862  00076E  501C               	movf	crcBufS_put@_this+1,w,c
  1863  000770  22DA               	addwfc	fsr2h,f,c
  1864  000772  0E01               	movlw	1
  1865  000774  BEDB               	btfsc	plusw2,7,c
  1866  000776  0012               	return	
  1867  000778  0E01               	movlw	1
  1868  00077A  50DB               	movf	plusw2,w,c
  1869  00077C  E104               	bnz	u2040
  1870  00077E  0E0F               	movlw	15
  1871  000780  5CDE               	subwf	postinc2,w,c
  1872  000782  A0D8               	btfss	status,0,c
  1873  000784  0012               	return	
  1874  000786                     u2040:
  1875                           
  1876                           ;FastTransfer.c: 329: _this->head = 0;
  1877  000786  EE20 F00F          	lfsr	2,15
  1878  00078A  501B               	movf	crcBufS_put@_this,w,c
  1879  00078C  26D9               	addwf	fsr2l,f,c
  1880  00078E  501C               	movf	crcBufS_put@_this+1,w,c
  1881  000790  22DA               	addwfc	fsr2h,f,c
  1882  000792  0E00               	movlw	0
  1883  000794  6EDE               	movwf	postinc2,c
  1884  000796  0E00               	movlw	0
  1885  000798  6EDD               	movwf	postdec2,c
  1886  00079A  0012               	return	
  1887  00079C                     __end_of_crcBufS_put:
  1888                           	opt stack 0
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           intcon	equ	0xFF2
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           postdec1	equ	0xFE5
  1897                           fsr1l	equ	0xFE1
  1898                           indf2	equ	0xFDF
  1899                           postinc2	equ	0xFDE
  1900                           postdec2	equ	0xFDD
  1901                           plusw2	equ	0xFDB
  1902                           fsr2h	equ	0xFDA
  1903                           fsr2l	equ	0xFD9
  1904                           status	equ	0xFD8
  1905                           
  1906 ;; *************** function _FastTransfer_buffer_flush *****************
  1907 ;; Defined at:
  1908 ;;		line 261 in file "FastTransfer.c"
  1909 ;; Parameters:    Size  Location     Type
  1910 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1911 ;;		 -> ring_buffer(206), 
  1912 ;;  clearBuffer     2   36[COMRAM] const int 
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;		None
  1915 ;; Return value:  Size  Location     Type
  1916 ;;		None               void
  1917 ;; Registers used:
  1918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1924 ;;      Params:         4       0       0       0       0       0       0
  1925 ;;      Locals:         0       0       0       0       0       0       0
  1926 ;;      Temps:          0       0       0       0       0       0       0
  1927 ;;      Totals:         4       0       0       0       0       0       0
  1928 ;;Total ram usage:        4 bytes
  1929 ;; Hardware stack levels used:    1
  1930 ;; Hardware stack levels required when called:    5
  1931 ;; This function calls:
  1932 ;;		_memset
  1933 ;; This function is called by:
  1934 ;;		_sendData
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938                           	psect	text5
  1939  000D86                     __ptext5:
  1940                           	opt stack 0
  1941  000D86                     _FastTransfer_buffer_flush:
  1942                           	opt stack 22
  1943                           
  1944                           ;FastTransfer.c: 262: _this->count = 0;
  1945                           
  1946                           ;incstack = 0
  1947  000D86  EE20 F0CC          	lfsr	2,204
  1948  000D8A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1949  000D8C  26D9               	addwf	fsr2l,f,c
  1950  000D8E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1951  000D90  22DA               	addwfc	fsr2h,f,c
  1952  000D92  0E00               	movlw	0
  1953  000D94  6EDE               	movwf	postinc2,c
  1954  000D96  0E00               	movlw	0
  1955  000D98  6EDD               	movwf	postdec2,c
  1956                           
  1957                           ;FastTransfer.c: 263: _this->head = 0;
  1958  000D9A  EE20 F0C8          	lfsr	2,200
  1959  000D9E  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1960  000DA0  26D9               	addwf	fsr2l,f,c
  1961  000DA2  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1962  000DA4  22DA               	addwfc	fsr2h,f,c
  1963  000DA6  0E00               	movlw	0
  1964  000DA8  6EDE               	movwf	postinc2,c
  1965  000DAA  0E00               	movlw	0
  1966  000DAC  6EDD               	movwf	postdec2,c
  1967                           
  1968                           ;FastTransfer.c: 264: _this->tail = 0;
  1969  000DAE  EE20 F0CA          	lfsr	2,202
  1970  000DB2  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1971  000DB4  26D9               	addwf	fsr2l,f,c
  1972  000DB6  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1973  000DB8  22DA               	addwfc	fsr2h,f,c
  1974  000DBA  0E00               	movlw	0
  1975  000DBC  6EDE               	movwf	postinc2,c
  1976  000DBE  0E00               	movlw	0
  1977  000DC0  6EDD               	movwf	postdec2,c
  1978                           
  1979                           ;FastTransfer.c: 265: if (clearBuffer) {
  1980  000DC2  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1981  000DC4  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1982  000DC6  B4D8               	btfsc	status,2,c
  1983  000DC8  0012               	return	
  1984                           
  1985                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1986  000DCA  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1987  000DCE  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1988  000DD2  0E00               	movlw	0
  1989  000DD4  6E1E               	movwf	memset@c+1,c
  1990  000DD6  0E00               	movlw	0
  1991  000DD8  6E1D               	movwf	memset@c,c
  1992  000DDA  0E00               	movlw	0
  1993  000DDC  6E20               	movwf	memset@n+1,c
  1994  000DDE  0EC8               	movlw	200
  1995  000DE0  6E1F               	movwf	memset@n,c
  1996  000DE2  EC41  F008         	call	_memset	;wreg free
  1997  000DE6  0012               	return	
  1998  000DE8                     __end_of_FastTransfer_buffer_flush:
  1999                           	opt stack 0
  2000                           tblptru	equ	0xFF8
  2001                           tblptrh	equ	0xFF7
  2002                           tblptrl	equ	0xFF6
  2003                           tablat	equ	0xFF5
  2004                           intcon	equ	0xFF2
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           indf2	equ	0xFDF
  2010                           postinc2	equ	0xFDE
  2011                           postdec2	equ	0xFDD
  2012                           plusw2	equ	0xFDB
  2013                           fsr2h	equ	0xFDA
  2014                           fsr2l	equ	0xFD9
  2015                           status	equ	0xFD8
  2016                           
  2017 ;; *************** function _memset *****************
  2018 ;; Defined at:
  2019 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  p1              2   26[COMRAM] PTR void 
  2022 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2023 ;;  c               2   28[COMRAM] int 
  2024 ;;  n               2   30[COMRAM] unsigned int 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;  p               2   32[COMRAM] PTR unsigned char 
  2027 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  2   26[COMRAM] PTR void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2037 ;;      Params:         6       0       0       0       0       0       0
  2038 ;;      Locals:         2       0       0       0       0       0       0
  2039 ;;      Temps:          0       0       0       0       0       0       0
  2040 ;;      Totals:         8       0       0       0       0       0       0
  2041 ;;Total ram usage:        8 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    4
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_FastTransfer_buffer_flush
  2048 ;;		_UART_buff_init
  2049 ;;		_UART_buff_flush
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053                           	psect	text6
  2054  001082                     __ptext6:
  2055                           	opt stack 0
  2056  001082                     _memset:
  2057                           	opt stack 22
  2058                           
  2059                           ;incstack = 0
  2060  001082  C01B  F021         	movff	memset@p1,memset@p
  2061  001086  C01C  F022         	movff	memset@p1+1,memset@p+1
  2062  00108A  D008               	goto	l2994
  2063  00108C                     l2990:
  2064  00108C  C021  FFD9         	movff	memset@p,fsr2l
  2065  001090  C022  FFDA         	movff	memset@p+1,fsr2h
  2066  001094  C01D  FFDF         	movff	memset@c,indf2
  2067  001098  4A21               	infsnz	memset@p,f,c
  2068  00109A  2A22               	incf	memset@p+1,f,c
  2069  00109C                     l2994:
  2070  00109C  061F               	decf	memset@n,f,c
  2071  00109E  A0D8               	btfss	status,0,c
  2072  0010A0  0620               	decf	memset@n+1,f,c
  2073  0010A2  281F               	incf	memset@n,w,c
  2074  0010A4  E1F3               	bnz	l2990
  2075  0010A6  2820               	incf	memset@n+1,w,c
  2076  0010A8  B4D8               	btfsc	status,2,c
  2077  0010AA  0012               	return	
  2078  0010AC  D7EF               	goto	l2990
  2079  0010AE                     __end_of_memset:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           intcon	equ	0xFF2
  2086                           postinc0	equ	0xFEE
  2087                           wreg	equ	0xFE8
  2088                           postdec1	equ	0xFE5
  2089                           fsr1l	equ	0xFE1
  2090                           indf2	equ	0xFDF
  2091                           postinc2	equ	0xFDE
  2092                           postdec2	equ	0xFDD
  2093                           plusw2	equ	0xFDB
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _ToSend *****************
  2099 ;; Defined at:
  2100 ;;		line 216 in file "FastTransfer.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  where           1    wreg     unsigned char 
  2103 ;;  what            2    2[BANK0 ] unsigned int 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  where           1   37[COMRAM] unsigned char 
  2106 ;; Return value:  Size  Location     Type
  2107 ;;		None               void
  2108 ;; Registers used:
  2109 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2110 ;; Tracked objects:
  2111 ;;		On entry : 0/0
  2112 ;;		On exit  : 0/0
  2113 ;;		Unchanged: 0/0
  2114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2115 ;;      Params:         0       2       0       0       0       0       0
  2116 ;;      Locals:         1       0       0       0       0       0       0
  2117 ;;      Temps:          0       0       0       0       0       0       0
  2118 ;;      Totals:         1       2       0       0       0       0       0
  2119 ;;Total ram usage:        3 bytes
  2120 ;; Hardware stack levels used:    1
  2121 ;; Hardware stack levels required when called:    6
  2122 ;; This function calls:
  2123 ;;		_FastTransfer_buffer_put
  2124 ;; This function is called by:
  2125 ;;		_respondECU
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text7
  2130  001212                     __ptext7:
  2131                           	opt stack 0
  2132  001212                     _ToSend:
  2133                           	opt stack 22
  2134                           
  2135                           ;incstack = 0
  2136                           ;ToSend@where stored from wreg
  2137  001212  6E26               	movwf	ToSend@where,c
  2138                           
  2139                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2140  001214  0E00               	movlw	low _ring_buffer
  2141  001216  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2142  001218  0E01               	movlw	high _ring_buffer
  2143  00121A  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2144  00121C  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2145  001220  C0C2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2146  001224  C0C3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2147  001228  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2148  00122C  0012               	return		;funcret
  2149  00122E                     __end_of_ToSend:
  2150                           	opt stack 0
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           intcon	equ	0xFF2
  2156                           postinc0	equ	0xFEE
  2157                           wreg	equ	0xFE8
  2158                           postdec1	equ	0xFE5
  2159                           fsr1l	equ	0xFE1
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           plusw2	equ	0xFDB
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function _FastTransfer_buffer_put *****************
  2169 ;; Defined at:
  2170 ;;		line 223 in file "FastTransfer.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2173 ;;		 -> ring_buffer(206), 
  2174 ;;  towhere         1   34[COMRAM] unsigned char 
  2175 ;;  towhat          2   35[COMRAM] unsigned int 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;		None               void
  2180 ;; Registers used:
  2181 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2187 ;;      Params:         5       0       0       0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0       0       0
  2189 ;;      Temps:          0       2       0       0       0       0       0
  2190 ;;      Totals:         5       2       0       0       0       0       0
  2191 ;;Total ram usage:        7 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    5
  2194 ;; This function calls:
  2195 ;;		_FastTransfer_buffer_modulo_inc
  2196 ;; This function is called by:
  2197 ;;		_ToSend
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text8
  2202  000354                     __ptext8:
  2203                           	opt stack 0
  2204  000354                     _FastTransfer_buffer_put:
  2205                           	opt stack 22
  2206                           
  2207                           ;FastTransfer.c: 225: group.integer = towhat;
  2208                           
  2209                           ;incstack = 0
  2210  000354  C024  F029         	movff	FastTransfer_buffer_put@towhat,_group
  2211  000358  C025  F02A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2212                           
  2213                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2214  00035C  EE20 F0CC          	lfsr	2,204
  2215  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2216  000362  26D9               	addwf	fsr2l,f,c
  2217  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2218  000366  22DA               	addwfc	fsr2h,f,c
  2219  000368  0E01               	movlw	1
  2220  00036A  BEDB               	btfsc	plusw2,7,c
  2221  00036C  D007               	goto	l3040
  2222  00036E  0E01               	movlw	1
  2223  000370  50DB               	movf	plusw2,w,c
  2224  000372  E103               	bnz	u2061
  2225  000374  0EC5               	movlw	197
  2226  000376  5CDE               	subwf	postinc2,w,c
  2227  000378  B0D8               	btfsc	status,0,c
  2228  00037A                     u2061:
  2229  00037A  0012               	return	
  2230  00037C                     l3040:
  2231                           
  2232                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2233  00037C  EE20 F0C8          	lfsr	2,200
  2234  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2235  000382  26D9               	addwf	fsr2l,f,c
  2236  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2237  000386  22DA               	addwfc	fsr2h,f,c
  2238  000388  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2239  00038C  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2240  000390  0100               	movlb	0	; () banked
  2241  000392  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2242  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2243  000396  6ED9               	movwf	fsr2l,c
  2244  000398  0100               	movlb	0	; () banked
  2245  00039A  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2246  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2247  00039E  6EDA               	movwf	fsr2h,c
  2248  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2252  0003A4  EE20 F0C8          	lfsr	2,200
  2253  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2254  0003AA  26D9               	addwf	fsr2l,f,c
  2255  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2256  0003AE  22DA               	addwfc	fsr2h,f,c
  2257  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2258  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2259  0003B8  0E00               	movlw	0
  2260  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2261  0003BC  0EC8               	movlw	200
  2262  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2263  0003C0  EC6D  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2264  0003C4  EE20 F0C8          	lfsr	2,200
  2265  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2266  0003CA  26D9               	addwf	fsr2l,f,c
  2267  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2268  0003CE  22DA               	addwfc	fsr2h,f,c
  2269  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2270  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2271                           
  2272                           ;FastTransfer.c: 230: ++_this->count;
  2273  0003D8  EE20 F0CC          	lfsr	2,204
  2274  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2275  0003DE  26D9               	addwf	fsr2l,f,c
  2276  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2277  0003E2  22DA               	addwfc	fsr2h,f,c
  2278  0003E4  2ADE               	incf	postinc2,f,c
  2279  0003E6  0E00               	movlw	0
  2280  0003E8  22DD               	addwfc	postdec2,f,c
  2281                           
  2282                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2283  0003EA  EE20 F0C8          	lfsr	2,200
  2284  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2285  0003F0  26D9               	addwf	fsr2l,f,c
  2286  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2287  0003F4  22DA               	addwfc	fsr2h,f,c
  2288  0003F6  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2289  0003FA  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2290  0003FE  0100               	movlb	0	; () banked
  2291  000400  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2292  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2293  000404  6ED9               	movwf	fsr2l,c
  2294  000406  0100               	movlb	0	; () banked
  2295  000408  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2296  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2297  00040C  6EDA               	movwf	fsr2h,c
  2298  00040E  C029  FFDF         	movff	_group,indf2
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2302  000412  EE20 F0C8          	lfsr	2,200
  2303  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2304  000418  26D9               	addwf	fsr2l,f,c
  2305  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2306  00041C  22DA               	addwfc	fsr2h,f,c
  2307  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2308  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2309  000426  0E00               	movlw	0
  2310  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2311  00042A  0EC8               	movlw	200
  2312  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2313  00042E  EC6D  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2314  000432  EE20 F0C8          	lfsr	2,200
  2315  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2316  000438  26D9               	addwf	fsr2l,f,c
  2317  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2318  00043C  22DA               	addwfc	fsr2h,f,c
  2319  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2320  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2321                           
  2322                           ;FastTransfer.c: 233: ++_this->count;
  2323  000446  EE20 F0CC          	lfsr	2,204
  2324  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2325  00044C  26D9               	addwf	fsr2l,f,c
  2326  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2327  000450  22DA               	addwfc	fsr2h,f,c
  2328  000452  2ADE               	incf	postinc2,f,c
  2329  000454  0E00               	movlw	0
  2330  000456  22DD               	addwfc	postdec2,f,c
  2331                           
  2332                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2333  000458  EE20 F0C8          	lfsr	2,200
  2334  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2335  00045E  26D9               	addwf	fsr2l,f,c
  2336  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2337  000462  22DA               	addwfc	fsr2h,f,c
  2338  000464  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2339  000468  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2340  00046C  0100               	movlb	0	; () banked
  2341  00046E  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2342  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2343  000472  6ED9               	movwf	fsr2l,c
  2344  000474  0100               	movlb	0	; () banked
  2345  000476  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2346  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2347  00047A  6EDA               	movwf	fsr2h,c
  2348  00047C  C02A  FFDF         	movff	_group+1,indf2
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2352  000480  EE20 F0C8          	lfsr	2,200
  2353  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2354  000486  26D9               	addwf	fsr2l,f,c
  2355  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2356  00048A  22DA               	addwfc	fsr2h,f,c
  2357  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2358  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2359  000494  0E00               	movlw	0
  2360  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2361  000498  0EC8               	movlw	200
  2362  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2363  00049C  EC6D  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2364  0004A0  EE20 F0C8          	lfsr	2,200
  2365  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2366  0004A6  26D9               	addwf	fsr2l,f,c
  2367  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2368  0004AA  22DA               	addwfc	fsr2h,f,c
  2369  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2370  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2371                           
  2372                           ;FastTransfer.c: 236: ++_this->count;
  2373  0004B4  EE20 F0CC          	lfsr	2,204
  2374  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2375  0004BA  26D9               	addwf	fsr2l,f,c
  2376  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2377  0004BE  22DA               	addwfc	fsr2h,f,c
  2378  0004C0  2ADE               	incf	postinc2,f,c
  2379  0004C2  0E00               	movlw	0
  2380  0004C4  22DD               	addwfc	postdec2,f,c
  2381  0004C6  0012               	return	
  2382  0004C8                     __end_of_FastTransfer_buffer_put:
  2383                           	opt stack 0
  2384                           tblptru	equ	0xFF8
  2385                           tblptrh	equ	0xFF7
  2386                           tblptrl	equ	0xFF6
  2387                           tablat	equ	0xFF5
  2388                           intcon	equ	0xFF2
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           postdec1	equ	0xFE5
  2392                           fsr1l	equ	0xFE1
  2393                           indf2	equ	0xFDF
  2394                           postinc2	equ	0xFDE
  2395                           postdec2	equ	0xFDD
  2396                           plusw2	equ	0xFDB
  2397                           fsr2h	equ	0xFDA
  2398                           fsr2l	equ	0xFD9
  2399                           status	equ	0xFD8
  2400                           
  2401 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2402 ;; Defined at:
  2403 ;;		line 273 in file "FastTransfer.c"
  2404 ;; Parameters:    Size  Location     Type
  2405 ;;  value           2   26[COMRAM] const unsigned int 
  2406 ;;  modulus         2   28[COMRAM] const unsigned int 
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;  my_value        2   30[COMRAM] unsigned int 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  2   26[COMRAM] unsigned int 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2418 ;;      Params:         4       0       0       0       0       0       0
  2419 ;;      Locals:         2       0       0       0       0       0       0
  2420 ;;      Temps:          0       0       0       0       0       0       0
  2421 ;;      Totals:         6       0       0       0       0       0       0
  2422 ;;Total ram usage:        6 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    4
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_FastTransfer_buffer_put
  2429 ;;		_FastTransfer_buffer_get
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text9
  2434  0010DA                     __ptext9:
  2435                           	opt stack 0
  2436  0010DA                     _FastTransfer_buffer_modulo_inc:
  2437                           	opt stack 22
  2438                           
  2439                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2440                           
  2441                           ;incstack = 0
  2442  0010DA  0E01               	movlw	1
  2443  0010DC  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2444  0010DE  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2445  0010E0  0E00               	movlw	0
  2446  0010E2  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2447  0010E4  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2448                           
  2449                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2450  0010E6  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2451  0010E8  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2452  0010EA  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2453  0010EC  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2454  0010EE  A0D8               	btfss	status,0,c
  2455  0010F0  D004               	goto	l2236
  2456                           
  2457                           ;FastTransfer.c: 276: my_value = 0;
  2458  0010F2  0E00               	movlw	0
  2459  0010F4  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2460  0010F6  0E00               	movlw	0
  2461  0010F8  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2462  0010FA                     l2236:
  2463                           
  2464                           ;FastTransfer.c: 277: }
  2465                           ;FastTransfer.c: 278: return (my_value);
  2466  0010FA  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2467  0010FE  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2468  001102  0012               	return	
  2469  001104                     __end_of_FastTransfer_buffer_modulo_inc:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           intcon	equ	0xFF2
  2476                           postinc0	equ	0xFEE
  2477                           wreg	equ	0xFE8
  2478                           postdec1	equ	0xFE5
  2479                           fsr1l	equ	0xFE1
  2480                           indf2	equ	0xFDF
  2481                           postinc2	equ	0xFDE
  2482                           postdec2	equ	0xFDD
  2483                           plusw2	equ	0xFDB
  2484                           fsr2h	equ	0xFDA
  2485                           fsr2l	equ	0xFD9
  2486                           status	equ	0xFD8
  2487                           
  2488 ;; *************** function _receiveData *****************
  2489 ;; Defined at:
  2490 ;;		line 82 in file "FastTransfer.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2495 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2496 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2497 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2498 ;;  u               2   21[BANK0 ] int 
  2499 ;;  r               2   23[BANK0 ] int 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      unsigned char 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2509 ;;      Params:         0       0       0       0       0       0       0
  2510 ;;      Locals:         0      12       0       0       0       0       0
  2511 ;;      Temps:          0       6       0       0       0       0       0
  2512 ;;      Totals:         0      18       0       0       0       0       0
  2513 ;;Total ram usage:       18 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    6
  2516 ;; This function calls:
  2517 ;;		_CRC8
  2518 ;;		_CRCcheck
  2519 ;; This function is called by:
  2520 ;;		_updateComms
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text10
  2525  0000B0                     __ptext10:
  2526                           	opt stack 0
  2527  0000B0                     _receiveData:
  2528                           	opt stack 23
  2529                           
  2530                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2531                           
  2532                           ;incstack = 0
  2533  0000B0  D020               	goto	l3232
  2534  0000B2                     l3222:
  2535                           
  2536                           ; BSR set to: 0
  2537  0000B2  0100               	movlb	0	; () banked
  2538  0000B4  4BD5               	infsnz	receiveData@u& (0+255),f,b
  2539  0000B6  2BD6               	incf	(receiveData@u+1)& (0+255),f,b
  2540                           
  2541                           ; BSR set to: 0
  2542                           
  2543                           ; BSR set to: 0
  2544  0000B8  5040               	movf	_rx_len,w,c
  2545  0000BA  0100               	movlb	0	; () banked
  2546  0000BC  6FC7               	movwf	??_receiveData& (0+255),b
  2547  0000BE  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2548  0000C0  0E01               	movlw	1
  2549  0000C2  0100               	movlb	0	; () banked
  2550  0000C4  27C7               	addwf	??_receiveData& (0+255),f,b
  2551  0000C6  0E00               	movlw	0
  2552  0000C8  23C8               	addwfc	(??_receiveData+1)& (0+255),f,b
  2553  0000CA  0100               	movlb	0	; () banked
  2554  0000CC  51D5               	movf	receiveData@u& (0+255),w,b
  2555  0000CE  0100               	movlb	0	; () banked
  2556  0000D0  5DC7               	subwf	??_receiveData& (0+255),w,b
  2557  0000D2  0100               	movlb	0	; () banked
  2558  0000D4  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2559  0000D6  0A80               	xorlw	128
  2560  0000D8  0100               	movlb	0	; () banked
  2561  0000DA  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2562  0000DC  0100               	movlb	0	; () banked
  2563  0000DE  51D6               	movf	(receiveData@u+1)& (0+255),w,b
  2564  0000E0  0A80               	xorlw	128
  2565  0000E2  0100               	movlb	0	; () banked
  2566  0000E4  59C9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2567  0000E6  B0D8               	btfsc	status,0,c
  2568  0000E8  D7E4               	goto	l3222
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;FastTransfer.c: 109: }
  2572                           ;FastTransfer.c: 110: rx_len = 0;
  2573                           
  2574                           ; BSR set to: 0
  2575  0000EA  0E00               	movlw	0
  2576  0000EC  6E40               	movwf	_rx_len,c
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;FastTransfer.c: 111: return 0;
  2580  0000EE  0E00               	movlw	0
  2581                           
  2582                           ; BSR set to: 0
  2583  0000F0  0012               	return	
  2584  0000F2                     l3232:
  2585                           
  2586                           ;FastTransfer.c: 112: }
  2587                           ;FastTransfer.c: 114: }
  2588                           ;FastTransfer.c: 115: }
  2589                           ;FastTransfer.c: 116: }
  2590                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2591  0000F2  5040               	movf	_rx_len,w,c
  2592  0000F4  B4D8               	btfsc	status,2,c
  2593  0000F6  D12C               	goto	l3314
  2594                           
  2595                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2596  0000F8  503F               	movf	_rx_array_inx,w,c
  2597  0000FA  B4D8               	btfsc	status,2,c
  2598  0000FC                     l421:
  2599  0000FC  D7FF               	goto	l421
  2600                           
  2601                           ;FastTransfer.c: 135: }
  2602                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2603                           
  2604                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2605                           
  2606                           ;FastTransfer.c: 129: }
  2607                           ;FastTransfer.c: 130: }
  2608                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2609                           
  2610                           ;FastTransfer.c: 128: return 0;
  2611                           
  2612                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2613                           
  2614                           ;FastTransfer.c: 126: rx_len = 0;
  2615                           
  2616                           ;FastTransfer.c: 125: CRCcheck();
  2617                           
  2618                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2619  0000FE  5040               	movf	_rx_len,w,c
  2620  000100  0100               	movlb	0	; () banked
  2621  000102  6FC7               	movwf	??_receiveData& (0+255),b
  2622  000104  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2623  000106  0EFF               	movlw	255
  2624  000108  0100               	movlb	0	; () banked
  2625  00010A  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2626  00010C  0EFF               	movlw	255
  2627  00010E  0100               	movlb	0	; () banked
  2628  000110  6FCA               	movwf	(??_receiveData+3)& (0+255),b
  2629  000112  503F               	movf	_rx_array_inx,w,c
  2630  000114  0100               	movlb	0	; () banked
  2631  000116  6FCB               	movwf	(??_receiveData+4)& (0+255),b
  2632  000118  6BCC               	clrf	(??_receiveData+5)& (0+255),b
  2633  00011A  0100               	movlb	0	; () banked
  2634  00011C  51C9               	movf	(??_receiveData+2)& (0+255),w,b
  2635  00011E  0100               	movlb	0	; () banked
  2636  000120  27CB               	addwf	(??_receiveData+4)& (0+255),f,b
  2637  000122  0100               	movlb	0	; () banked
  2638  000124  51CA               	movf	(??_receiveData+3)& (0+255),w,b
  2639  000126  0100               	movlb	0	; () banked
  2640  000128  23CC               	addwfc	(??_receiveData+5)& (0+255),f,b
  2641  00012A  0100               	movlb	0	; () banked
  2642  00012C  51C7               	movf	??_receiveData& (0+255),w,b
  2643  00012E  0100               	movlb	0	; () banked
  2644  000130  19CB               	xorwf	(??_receiveData+4)& (0+255),w,b
  2645  000132  E105               	bnz	u2331
  2646  000134  0100               	movlb	0	; () banked
  2647  000136  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2648  000138  0100               	movlb	0	; () banked
  2649  00013A  19CC               	xorwf	(??_receiveData+5)& (0+255),w,b
  2650  00013C  A4D8               	btfss	status,2,c
  2651  00013E                     u2331:
  2652  00013E  D108               	goto	l3314
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2656  000140  0E00               	movlw	low _rx_buffer
  2657  000142  6E1B               	movwf	CRC8@data,c
  2658  000144  0E04               	movlw	high _rx_buffer
  2659  000146  6E1C               	movwf	CRC8@data+1,c
  2660  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2661  00014C  EC99  F007         	call	_CRC8	;wreg free
  2662  000150  6E34               	movwf	_calc_CS,c
  2663                           
  2664                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2665  000152  0EFF               	movlw	255
  2666  000154  0100               	movlb	0	; () banked
  2667  000156  6FC7               	movwf	??_receiveData& (0+255),b
  2668  000158  0EFF               	movlw	255
  2669  00015A  0100               	movlb	0	; () banked
  2670  00015C  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2671  00015E  503F               	movf	_rx_array_inx,w,c
  2672  000160  0100               	movlb	0	; () banked
  2673  000162  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2674  000164  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2675  000166  0100               	movlb	0	; () banked
  2676  000168  51C7               	movf	??_receiveData& (0+255),w,b
  2677  00016A  0100               	movlb	0	; () banked
  2678  00016C  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2679  00016E  0100               	movlb	0	; () banked
  2680  000170  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2681  000172  0100               	movlb	0	; () banked
  2682  000174  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2683  000176  0E00               	movlw	low _rx_buffer
  2684  000178  0100               	movlb	0	; () banked
  2685  00017A  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2686  00017C  6ED9               	movwf	fsr2l,c
  2687  00017E  0E04               	movlw	high _rx_buffer
  2688  000180  0100               	movlb	0	; () banked
  2689  000182  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2690  000184  6EDA               	movwf	fsr2h,c
  2691  000186  5034               	movf	_calc_CS,w,c
  2692  000188  18DE               	xorwf	postinc2,w,c
  2693  00018A  A4D8               	btfss	status,2,c
  2694  00018C  D0A9               	goto	l3294
  2695                           
  2696                           ; BSR set to: 0
  2697                           ;FastTransfer.c: 147: int r;
  2698                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2699  00018E  0E00               	movlw	0
  2700  000190  0100               	movlb	0	; () banked
  2701  000192  6FD8               	movwf	(receiveData@r+1)& (0+255),b
  2702  000194  0E00               	movlw	0
  2703  000196  6FD7               	movwf	receiveData@r& (0+255),b
  2704  000198  D05A               	goto	l3272
  2705  00019A                     l3262:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2709  00019A  0E00               	movlw	low _rx_buffer
  2710  00019C  0100               	movlb	0	; () banked
  2711  00019E  25D7               	addwf	receiveData@r& (0+255),w,b
  2712  0001A0  6ED9               	movwf	fsr2l,c
  2713  0001A2  0E04               	movlw	high _rx_buffer
  2714  0001A4  0100               	movlb	0	; () banked
  2715  0001A6  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2716  0001A8  6EDA               	movwf	fsr2h,c
  2717  0001AA  503B               	movf	_maxDataAddress,w,c
  2718  0001AC  5CDE               	subwf	postinc2,w,c
  2719  0001AE  B0D8               	btfsc	status,0,c
  2720  0001B0  D041               	goto	l3268
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2724  0001B2  0E01               	movlw	1
  2725  0001B4  0100               	movlb	0	; () banked
  2726  0001B6  25D7               	addwf	receiveData@r& (0+255),w,b
  2727  0001B8  0100               	movlb	0	; () banked
  2728  0001BA  6FC7               	movwf	??_receiveData& (0+255),b
  2729  0001BC  0E00               	movlw	0
  2730  0001BE  0100               	movlb	0	; () banked
  2731  0001C0  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2732  0001C2  0100               	movlb	0	; () banked
  2733  0001C4  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2734  0001C6  0E00               	movlw	low _rx_buffer
  2735  0001C8  0100               	movlb	0	; () banked
  2736  0001CA  25C7               	addwf	??_receiveData& (0+255),w,b
  2737  0001CC  6ED9               	movwf	fsr2l,c
  2738  0001CE  0E04               	movlw	high _rx_buffer
  2739  0001D0  0100               	movlb	0	; () banked
  2740  0001D2  21C8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2741  0001D4  6EDA               	movwf	fsr2h,c
  2742  0001D6  50DF               	movf	indf2,w,c
  2743  0001D8  6E29               	movwf	_group,c
  2744                           
  2745                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2746  0001DA  0E02               	movlw	2
  2747  0001DC  0100               	movlb	0	; () banked
  2748  0001DE  25D7               	addwf	receiveData@r& (0+255),w,b
  2749  0001E0  0100               	movlb	0	; () banked
  2750  0001E2  6FC7               	movwf	??_receiveData& (0+255),b
  2751  0001E4  0E00               	movlw	0
  2752  0001E6  0100               	movlb	0	; () banked
  2753  0001E8  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2754  0001EA  0100               	movlb	0	; () banked
  2755  0001EC  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2756  0001EE  0E00               	movlw	low _rx_buffer
  2757  0001F0  0100               	movlb	0	; () banked
  2758  0001F2  25C7               	addwf	??_receiveData& (0+255),w,b
  2759  0001F4  6ED9               	movwf	fsr2l,c
  2760  0001F6  0E04               	movlw	high _rx_buffer
  2761  0001F8  0100               	movlb	0	; () banked
  2762  0001FA  21C8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2763  0001FC  6EDA               	movwf	fsr2h,c
  2764  0001FE  50DF               	movf	indf2,w,c
  2765  000200  6E2A               	movwf	_group+1,c
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2769  000202  0E00               	movlw	low _rx_buffer
  2770  000204  0100               	movlb	0	; () banked
  2771  000206  25D7               	addwf	receiveData@r& (0+255),w,b
  2772  000208  6ED9               	movwf	fsr2l,c
  2773  00020A  0E04               	movlw	high _rx_buffer
  2774  00020C  0100               	movlb	0	; () banked
  2775  00020E  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2776  000210  6EDA               	movwf	fsr2h,c
  2777  000212  50DF               	movf	indf2,w,c
  2778  000214  0100               	movlb	0	; () banked
  2779  000216  6FC7               	movwf	??_receiveData& (0+255),b
  2780  000218  0100               	movlb	0	; () banked
  2781  00021A  51C7               	movf	??_receiveData& (0+255),w,b
  2782  00021C  0D02               	mullw	2
  2783  00021E  50F3               	movf	prodl,w,c
  2784  000220  242B               	addwf	_receiveArrayAddress,w,c
  2785  000222  6ED9               	movwf	fsr2l,c
  2786  000224  50F4               	movf	prodh,w,c
  2787  000226  202C               	addwfc	_receiveArrayAddress+1,w,c
  2788  000228  6EDA               	movwf	fsr2h,c
  2789  00022A  C029  FFDE         	movff	_group,postinc2
  2790  00022E  C02A  FFDD         	movff	_group+1,postdec2
  2791                           
  2792                           ;FastTransfer.c: 153: } else {
  2793  000232  D003               	goto	l3270
  2794  000234                     l3268:
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2798  000234  0100               	movlb	0	; () banked
  2799  000236  4BA9               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2800  000238  2BAA               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2801  00023A                     l3270:
  2802                           
  2803                           ; BSR set to: 0
  2804  00023A  0E03               	movlw	3
  2805  00023C  0100               	movlb	0	; () banked
  2806  00023E  25D7               	addwf	receiveData@r& (0+255),w,b
  2807  000240  0100               	movlb	0	; () banked
  2808  000242  6FD7               	movwf	receiveData@r& (0+255),b
  2809  000244  0E00               	movlw	0
  2810  000246  0100               	movlb	0	; () banked
  2811  000248  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2812  00024A  0100               	movlb	0	; () banked
  2813  00024C  6FD8               	movwf	(receiveData@r+1)& (0+255),b
  2814  00024E                     l3272:
  2815                           
  2816                           ; BSR set to: 0
  2817  00024E  5040               	movf	_rx_len,w,c
  2818  000250  0100               	movlb	0	; () banked
  2819  000252  6FC7               	movwf	??_receiveData& (0+255),b
  2820  000254  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2821  000256  0100               	movlb	0	; () banked
  2822  000258  51C7               	movf	??_receiveData& (0+255),w,b
  2823  00025A  0100               	movlb	0	; () banked
  2824  00025C  5DD7               	subwf	receiveData@r& (0+255),w,b
  2825  00025E  0100               	movlb	0	; () banked
  2826  000260  51D8               	movf	(receiveData@r+1)& (0+255),w,b
  2827  000262  0A80               	xorlw	128
  2828  000264  0100               	movlb	0	; () banked
  2829  000266  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2830  000268  0100               	movlb	0	; () banked
  2831  00026A  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2832  00026C  0A80               	xorlw	128
  2833  00026E  0100               	movlb	0	; () banked
  2834  000270  59C9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2835  000272  A0D8               	btfss	status,0,c
  2836  000274  D792               	goto	l3262
  2837                           
  2838                           ; BSR set to: 0
  2839                           ;FastTransfer.c: 155: }
  2840                           ;FastTransfer.c: 156: }
  2841                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2842                           
  2843                           ; BSR set to: 0
  2844  000276  5033               	movf	_AKNAKsend,w,c
  2845  000278  B4D8               	btfsc	status,2,c
  2846  00027A  D02C               	goto	l3284
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;FastTransfer.c: 160: unsigned char holder[3];
  2850                           ;FastTransfer.c: 161: holder[0] = 255;
  2851  00027C  0100               	movlb	0	; () banked
  2852  00027E  69CF               	setf	receiveData@holder& (0+255),b
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;FastTransfer.c: 162: holder[1] = 1;
  2856  000280  0E01               	movlw	1
  2857  000282  0100               	movlb	0	; () banked
  2858  000284  6FD0               	movwf	(receiveData@holder+1)& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2862  000286  0EFF               	movlw	255
  2863  000288  0100               	movlb	0	; () banked
  2864  00028A  6FC7               	movwf	??_receiveData& (0+255),b
  2865  00028C  0EFF               	movlw	255
  2866  00028E  0100               	movlb	0	; () banked
  2867  000290  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2868  000292  503F               	movf	_rx_array_inx,w,c
  2869  000294  0100               	movlb	0	; () banked
  2870  000296  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2871  000298  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2872  00029A  0100               	movlb	0	; () banked
  2873  00029C  51C7               	movf	??_receiveData& (0+255),w,b
  2874  00029E  0100               	movlb	0	; () banked
  2875  0002A0  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2876  0002A2  0100               	movlb	0	; () banked
  2877  0002A4  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2878  0002A6  0100               	movlb	0	; () banked
  2879  0002A8  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2880  0002AA  0E00               	movlw	low _rx_buffer
  2881  0002AC  0100               	movlb	0	; () banked
  2882  0002AE  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2883  0002B0  6ED9               	movwf	fsr2l,c
  2884  0002B2  0E04               	movlw	high _rx_buffer
  2885  0002B4  0100               	movlb	0	; () banked
  2886  0002B6  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2887  0002B8  6EDA               	movwf	fsr2h,c
  2888  0002BA  50DF               	movf	indf2,w,c
  2889  0002BC  0100               	movlb	0	; () banked
  2890  0002BE  6FD1               	movwf	(receiveData@holder+2)& (0+255),b
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2894  0002C0  0ECF               	movlw	low receiveData@holder
  2895  0002C2  6E1B               	movwf	CRC8@data,c
  2896  0002C4  0E00               	movlw	high receiveData@holder
  2897  0002C6  6E1C               	movwf	CRC8@data+1,c
  2898  0002C8  0E03               	movlw	3
  2899  0002CA  6E1D               	movwf	CRC8@len,c
  2900  0002CC  EC99  F007         	call	_CRC8	;wreg free
  2901  0002D0  0100               	movlb	0	; () banked
  2902  0002D2  6FCD               	movwf	receiveData@crcHolder& (0+255),b
  2903  0002D4                     l3284:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;FastTransfer.c: 174: }
  2907                           ;FastTransfer.c: 178: rx_len = 0;
  2908  0002D4  0E00               	movlw	0
  2909  0002D6  6E40               	movwf	_rx_len,c
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2913  0002D8  0E00               	movlw	0
  2914  0002DA  6E3F               	movwf	_rx_array_inx,c
  2915                           
  2916                           ; BSR set to: 0
  2917                           ;FastTransfer.c: 180: return 1;
  2918  0002DC  0E01               	movlw	1
  2919                           
  2920                           ; BSR set to: 0
  2921  0002DE  0012               	return	
  2922  0002E0                     l3294:
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;FastTransfer.c: 182: crcErrorCounter++;
  2926  0002E0  0100               	movlb	0	; () banked
  2927  0002E2  4BA7               	infsnz	_crcErrorCounter& (0+255),f,b
  2928  0002E4  2BA8               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2932  0002E6  5033               	movf	_AKNAKsend,w,c
  2933  0002E8  B4D8               	btfsc	status,2,c
  2934  0002EA  D02C               	goto	l3306
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;FastTransfer.c: 185: unsigned char holder[3];
  2938                           ;FastTransfer.c: 186: holder[0] = 255;
  2939  0002EC  0100               	movlb	0	; () banked
  2940  0002EE  69D2               	setf	receiveData@holder_1473& (0+255),b
  2941                           
  2942                           ; BSR set to: 0
  2943                           ;FastTransfer.c: 187: holder[1] = 2;
  2944  0002F0  0E02               	movlw	2
  2945  0002F2  0100               	movlb	0	; () banked
  2946  0002F4  6FD3               	movwf	(receiveData@holder_1473+1)& (0+255),b
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2950  0002F6  0EFF               	movlw	255
  2951  0002F8  0100               	movlb	0	; () banked
  2952  0002FA  6FC7               	movwf	??_receiveData& (0+255),b
  2953  0002FC  0EFF               	movlw	255
  2954  0002FE  0100               	movlb	0	; () banked
  2955  000300  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2956  000302  503F               	movf	_rx_array_inx,w,c
  2957  000304  0100               	movlb	0	; () banked
  2958  000306  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2959  000308  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2960  00030A  0100               	movlb	0	; () banked
  2961  00030C  51C7               	movf	??_receiveData& (0+255),w,b
  2962  00030E  0100               	movlb	0	; () banked
  2963  000310  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2964  000312  0100               	movlb	0	; () banked
  2965  000314  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2966  000316  0100               	movlb	0	; () banked
  2967  000318  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2968  00031A  0E00               	movlw	low _rx_buffer
  2969  00031C  0100               	movlb	0	; () banked
  2970  00031E  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2971  000320  6ED9               	movwf	fsr2l,c
  2972  000322  0E04               	movlw	high _rx_buffer
  2973  000324  0100               	movlb	0	; () banked
  2974  000326  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2975  000328  6EDA               	movwf	fsr2h,c
  2976  00032A  50DF               	movf	indf2,w,c
  2977  00032C  0100               	movlb	0	; () banked
  2978  00032E  6FD4               	movwf	(receiveData@holder_1473+2)& (0+255),b
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;FastTransfer.c: 198: serial_write(crcHolder);
  2982  000330  0ED2               	movlw	low receiveData@holder_1473
  2983  000332  6E1B               	movwf	CRC8@data,c
  2984  000334  0E00               	movlw	high receiveData@holder_1473
  2985  000336  6E1C               	movwf	CRC8@data+1,c
  2986  000338  0E03               	movlw	3
  2987  00033A  6E1D               	movwf	CRC8@len,c
  2988  00033C  EC99  F007         	call	_CRC8	;wreg free
  2989  000340  0100               	movlb	0	; () banked
  2990  000342  6FCE               	movwf	receiveData@crcHolder_1474& (0+255),b
  2991  000344                     l3306:
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;FastTransfer.c: 199: }
  2995                           ;FastTransfer.c: 202: rx_len = 0;
  2996  000344  0E00               	movlw	0
  2997  000346  6E40               	movwf	_rx_len,c
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3001  000348  0E00               	movlw	0
  3002  00034A  6E3F               	movwf	_rx_array_inx,c
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;FastTransfer.c: 204: return 0;
  3006  00034C  0E00               	movlw	0
  3007                           
  3008                           ; BSR set to: 0
  3009  00034E  0012               	return	
  3010  000350                     l3314:
  3011                           
  3012                           ;FastTransfer.c: 205: }
  3013                           ;FastTransfer.c: 206: }
  3014                           ;FastTransfer.c: 207: }
  3015                           ;FastTransfer.c: 210: return 0;
  3016  000350  0E00               	movlw	0
  3017  000352  0012               	return	
  3018  000354                     __end_of_receiveData:
  3019                           	opt stack 0
  3020                           tblptru	equ	0xFF8
  3021                           tblptrh	equ	0xFF7
  3022                           tblptrl	equ	0xFF6
  3023                           tablat	equ	0xFF5
  3024                           prodh	equ	0xFF4
  3025                           prodl	equ	0xFF3
  3026                           intcon	equ	0xFF2
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1l	equ	0xFE1
  3031                           indf2	equ	0xFDF
  3032                           postinc2	equ	0xFDE
  3033                           postdec2	equ	0xFDD
  3034                           plusw2	equ	0xFDB
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _CRCcheck *****************
  3040 ;; Defined at:
  3041 ;;		line 373 in file "FastTransfer.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  rt              2    5[BANK0 ] int 
  3046 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3047 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3048 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;		None               void
  3051 ;; Registers used:
  3052 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3058 ;;      Params:         0       0       0       0       0       0       0
  3059 ;;      Locals:         0       7       0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0
  3061 ;;      Totals:         0       7       0       0       0       0       0
  3062 ;;Total ram usage:        7 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    5
  3065 ;; This function calls:
  3066 ;;		_CRC8
  3067 ;;		_crcBufS_get
  3068 ;;		_crcBufS_status_put
  3069 ;; This function is called by:
  3070 ;;		_receiveData
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text11
  3075  0009E4                     __ptext11:
  3076                           	opt stack 0
  3077  0009E4                     _CRCcheck:
  3078                           	opt stack 23
  3079  0009E4                     l497:
  3080  0009E4  D7FF               	goto	l497
  3081  0009E6                     l3122:
  3082                           
  3083                           ; BSR set to: 0
  3084  0009E6  0100               	movlb	0	; () banked
  3085  0009E8  BFC6               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3086  0009EA  D008               	goto	l3126
  3087  0009EC  0100               	movlb	0	; () banked
  3088  0009EE  51C6               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3089  0009F0  E143               	bnz	l509
  3090  0009F2  0E05               	movlw	5
  3091  0009F4  0100               	movlb	0	; () banked
  3092  0009F6  5DC5               	subwf	CRCcheck@rt& (0+255),w,b
  3093  0009F8  B0D8               	btfsc	status,0,c
  3094  0009FA  0012               	return	
  3095  0009FC                     l3126:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3099  0009FC  0EAF               	movlw	low _crc_buffer
  3100  0009FE  6E1B               	movwf	crcBufS_get@_this,c
  3101  000A00  0E00               	movlw	high _crc_buffer
  3102  000A02  6E1C               	movwf	crcBufS_get@_this+1,c
  3103  000A04  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3104  000A08  0E00               	movlw	0
  3105  000A0A  6E1E               	movwf	crcBufS_get@space,c
  3106  000A0C  ECF1  F002         	call	_crcBufS_get	;wreg free
  3107  000A10  183D               	xorwf	_returnAddress,w,c
  3108  000A12  A4D8               	btfss	status,2,c
  3109  000A14  D02D               	goto	l3140
  3110                           
  3111                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3112  000A16  0EAF               	movlw	low _crc_buffer
  3113  000A18  6E1B               	movwf	crcBufS_get@_this,c
  3114  000A1A  0E00               	movlw	high _crc_buffer
  3115  000A1C  6E1C               	movwf	crcBufS_get@_this+1,c
  3116  000A1E  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3117  000A22  0E01               	movlw	1
  3118  000A24  6E1E               	movwf	crcBufS_get@space,c
  3119  000A26  ECF1  F002         	call	_crcBufS_get	;wreg free
  3120  000A2A  0100               	movlb	0	; () banked
  3121  000A2C  19C4               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3122  000A2E  A4D8               	btfss	status,2,c
  3123  000A30  D01F               	goto	l3140
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3127  000A32  0100               	movlb	0	; () banked
  3128  000A34  05C3               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3129  000A36  A4D8               	btfss	status,2,c
  3130  000A38  D00B               	goto	l3136
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3134  000A3A  0EAF               	movlw	low _crc_buffer
  3135  000A3C  6E1B               	movwf	crcBufS_status_put@_this,c
  3136  000A3E  0E00               	movlw	high _crc_buffer
  3137  000A40  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3138  000A42  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3139  000A46  0E01               	movlw	1
  3140  000A48  6E1E               	movwf	crcBufS_status_put@status,c
  3141  000A4A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3142                           
  3143                           ;FastTransfer.c: 393: break;
  3144  000A4E  0012               	return	
  3145  000A50                     l3136:
  3146  000A50  0E02               	movlw	2
  3147  000A52  0100               	movlb	0	; () banked
  3148  000A54  19C3               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3149  000A56  A4D8               	btfss	status,2,c
  3150  000A58  D00B               	goto	l3140
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3154  000A5A  0EAF               	movlw	low _crc_buffer
  3155  000A5C  6E1B               	movwf	crcBufS_status_put@_this,c
  3156  000A5E  0E00               	movlw	high _crc_buffer
  3157  000A60  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3158  000A62  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3159  000A66  0E02               	movlw	2
  3160  000A68  6E1E               	movwf	crcBufS_status_put@status,c
  3161  000A6A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3162                           
  3163                           ;FastTransfer.c: 396: break;
  3164  000A6E  0012               	return	
  3165  000A70                     l3140:
  3166  000A70  0100               	movlb	0	; () banked
  3167  000A72  4BC5               	infsnz	CRCcheck@rt& (0+255),f,b
  3168  000A74  2BC6               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3169  000A76  D7B7               	goto	l3122
  3170  000A78                     l509:
  3171  000A78  0012               	return		;funcret
  3172  000A7A                     __end_of_CRCcheck:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           prodh	equ	0xFF4
  3179                           prodl	equ	0xFF3
  3180                           intcon	equ	0xFF2
  3181                           postinc0	equ	0xFEE
  3182                           wreg	equ	0xFE8
  3183                           postdec1	equ	0xFE5
  3184                           fsr1l	equ	0xFE1
  3185                           indf2	equ	0xFDF
  3186                           postinc2	equ	0xFDE
  3187                           postdec2	equ	0xFDD
  3188                           plusw2	equ	0xFDB
  3189                           fsr2h	equ	0xFDA
  3190                           fsr2l	equ	0xFD9
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function _crcBufS_status_put *****************
  3194 ;; Defined at:
  3195 ;;		line 336 in file "FastTransfer.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3198 ;;		 -> crc_buffer(17), 
  3199 ;;  time            1   28[COMRAM] unsigned char 
  3200 ;;  status          1   29[COMRAM] unsigned char 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  wantedTime      2   34[COMRAM] int 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;		None               void
  3205 ;; Registers used:
  3206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3212 ;;      Params:         4       0       0       0       0       0       0
  3213 ;;      Locals:         2       0       0       0       0       0       0
  3214 ;;      Temps:          4       0       0       0       0       0       0
  3215 ;;      Totals:        10       0       0       0       0       0       0
  3216 ;;Total ram usage:       10 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    4
  3219 ;; This function calls:
  3220 ;;		Nothing
  3221 ;; This function is called by:
  3222 ;;		_CRCcheck
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text12
  3227  00079C                     __ptext12:
  3228                           	opt stack 0
  3229  00079C                     _crcBufS_status_put:
  3230                           	opt stack 23
  3231                           
  3232                           ;FastTransfer.c: 337: if (time >= 5) {
  3233                           
  3234                           ;incstack = 0
  3235  00079C  0E04               	movlw	4
  3236  00079E  641D               	cpfsgt	crcBufS_status_put@time,c
  3237  0007A0  D002               	goto	l3082
  3238                           
  3239                           ;FastTransfer.c: 338: time = 5 - 1;
  3240  0007A2  0E04               	movlw	4
  3241  0007A4  6E1D               	movwf	crcBufS_status_put@time,c
  3242  0007A6                     l3082:
  3243                           
  3244                           ;FastTransfer.c: 339: }
  3245                           ;FastTransfer.c: 340: time = time + 1;
  3246  0007A6  281D               	incf	crcBufS_status_put@time,w,c
  3247  0007A8  6E1D               	movwf	crcBufS_status_put@time,c
  3248                           
  3249                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3250  0007AA  501D               	movf	crcBufS_status_put@time,w,c
  3251  0007AC  0D03               	mullw	3
  3252  0007AE  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3253  0007B2  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3254                           
  3255                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3256  0007B6  EE20 F00F          	lfsr	2,15
  3257  0007BA  501B               	movf	crcBufS_status_put@_this,w,c
  3258  0007BC  26D9               	addwf	fsr2l,f,c
  3259  0007BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3260  0007C0  22DA               	addwfc	fsr2h,f,c
  3261  0007C2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3262  0007C4  5CDE               	subwf	postinc2,w,c
  3263  0007C6  50DE               	movf	postinc2,w,c
  3264  0007C8  0A80               	xorlw	128
  3265  0007CA  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3266  0007CC  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3267  0007CE  0A80               	xorlw	128
  3268  0007D0  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3269  0007D2  B0D8               	btfsc	status,0,c
  3270  0007D4  D02B               	goto	l3090
  3271                           
  3272                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3273  0007D6  EE20 F00F          	lfsr	2,15
  3274  0007DA  501B               	movf	crcBufS_status_put@_this,w,c
  3275  0007DC  26D9               	addwf	fsr2l,f,c
  3276  0007DE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3277  0007E0  22DA               	addwfc	fsr2h,f,c
  3278  0007E2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3279  0007E6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3280  0007EA  1E1F               	comf	??_crcBufS_status_put,f,c
  3281  0007EC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3282  0007EE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3283  0007F0  2A20               	incf	??_crcBufS_status_put+1,f,c
  3284  0007F2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3285  0007F4  261F               	addwf	??_crcBufS_status_put,f,c
  3286  0007F6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3287  0007F8  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3288  0007FA  1E1F               	comf	??_crcBufS_status_put,f,c
  3289  0007FC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3290  0007FE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3291  000800  2A20               	incf	??_crcBufS_status_put+1,f,c
  3292  000802  0E0F               	movlw	15
  3293  000804  241F               	addwf	??_crcBufS_status_put,w,c
  3294  000806  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3295  000808  0E00               	movlw	0
  3296  00080A  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3297  00080C  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3298                           
  3299                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3300  00080E  0E02               	movlw	2
  3301  000810  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3302  000812  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3303  000814  0E00               	movlw	0
  3304  000816  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3305  000818  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3306  00081A  501F               	movf	??_crcBufS_status_put,w,c
  3307  00081C  241B               	addwf	crcBufS_status_put@_this,w,c
  3308  00081E  6ED9               	movwf	fsr2l,c
  3309  000820  5020               	movf	??_crcBufS_status_put+1,w,c
  3310  000822  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3311  000824  6EDA               	movwf	fsr2h,c
  3312  000826  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3313                           
  3314                           ;FastTransfer.c: 345: } else {
  3315  00082A  0012               	return	
  3316  00082C                     l3090:
  3317                           
  3318                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3319  00082C  EE20 F00F          	lfsr	2,15
  3320  000830  501B               	movf	crcBufS_status_put@_this,w,c
  3321  000832  26D9               	addwf	fsr2l,f,c
  3322  000834  501C               	movf	crcBufS_status_put@_this+1,w,c
  3323  000836  22DA               	addwfc	fsr2h,f,c
  3324  000838  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3325  00083C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3326  000840  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3327  000844  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3328  000848  1E21               	comf	??_crcBufS_status_put+2,f,c
  3329  00084A  1E22               	comf	??_crcBufS_status_put+3,f,c
  3330  00084C  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3331  00084E  2A22               	incf	??_crcBufS_status_put+3,f,c
  3332  000850  501F               	movf	??_crcBufS_status_put,w,c
  3333  000852  2621               	addwf	??_crcBufS_status_put+2,f,c
  3334  000854  5020               	movf	??_crcBufS_status_put+1,w,c
  3335  000856  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3336  000858  0E02               	movlw	2
  3337  00085A  2621               	addwf	??_crcBufS_status_put+2,f,c
  3338  00085C  0E00               	movlw	0
  3339  00085E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3340  000860  5021               	movf	??_crcBufS_status_put+2,w,c
  3341  000862  241B               	addwf	crcBufS_status_put@_this,w,c
  3342  000864  6ED9               	movwf	fsr2l,c
  3343  000866  5022               	movf	??_crcBufS_status_put+3,w,c
  3344  000868  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3345  00086A  6EDA               	movwf	fsr2h,c
  3346  00086C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3347  000870  0012               	return	
  3348  000872                     __end_of_crcBufS_status_put:
  3349                           	opt stack 0
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           intcon	equ	0xFF2
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1l	equ	0xFE1
  3361                           indf2	equ	0xFDF
  3362                           postinc2	equ	0xFDE
  3363                           postdec2	equ	0xFDD
  3364                           plusw2	equ	0xFDB
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _crcBufS_get *****************
  3370 ;; Defined at:
  3371 ;;		line 353 in file "FastTransfer.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3374 ;;		 -> crc_buffer(17), 
  3375 ;;  time            1   28[COMRAM] unsigned char 
  3376 ;;  space           1   29[COMRAM] unsigned char 
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;  wantedTime      2   36[COMRAM] int 
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      unsigned char 
  3381 ;; Registers used:
  3382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3388 ;;      Params:         4       0       0       0       0       0       0
  3389 ;;      Locals:         2       0       0       0       0       0       0
  3390 ;;      Temps:          6       0       0       0       0       0       0
  3391 ;;      Totals:        12       0       0       0       0       0       0
  3392 ;;Total ram usage:       12 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    4
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_CRCcheck
  3399 ;;		_AKNAK
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text13
  3404  0005E2                     __ptext13:
  3405                           	opt stack 0
  3406  0005E2                     _crcBufS_get:
  3407                           	opt stack 23
  3408                           
  3409                           ;FastTransfer.c: 354: if (time >= 5) {
  3410                           
  3411                           ;incstack = 0
  3412  0005E2  0E04               	movlw	4
  3413  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  3414  0005E6  D002               	goto	l3058
  3415                           
  3416                           ;FastTransfer.c: 355: time = 5 - 1;
  3417  0005E8  0E04               	movlw	4
  3418  0005EA  6E1D               	movwf	crcBufS_get@time,c
  3419  0005EC                     l3058:
  3420                           
  3421                           ;FastTransfer.c: 356: }
  3422                           ;FastTransfer.c: 357: if (space >= 3) {
  3423  0005EC  0E02               	movlw	2
  3424  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  3425  0005F0  D002               	goto	l3062
  3426                           
  3427                           ;FastTransfer.c: 358: space = 3 - 1;
  3428  0005F2  0E02               	movlw	2
  3429  0005F4  6E1E               	movwf	crcBufS_get@space,c
  3430  0005F6                     l3062:
  3431                           
  3432                           ;FastTransfer.c: 359: }
  3433                           ;FastTransfer.c: 360: time = time + 1;
  3434  0005F6  281D               	incf	crcBufS_get@time,w,c
  3435  0005F8  6E1D               	movwf	crcBufS_get@time,c
  3436                           
  3437                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3438  0005FA  501D               	movf	crcBufS_get@time,w,c
  3439  0005FC  0D03               	mullw	3
  3440  0005FE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3441  000602  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3442                           
  3443                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3444  000606  EE20 F00F          	lfsr	2,15
  3445  00060A  501B               	movf	crcBufS_get@_this,w,c
  3446  00060C  26D9               	addwf	fsr2l,f,c
  3447  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  3448  000610  22DA               	addwfc	fsr2h,f,c
  3449  000612  5025               	movf	crcBufS_get@wantedTime,w,c
  3450  000614  5CDE               	subwf	postinc2,w,c
  3451  000616  50DE               	movf	postinc2,w,c
  3452  000618  0A80               	xorlw	128
  3453  00061A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3454  00061C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3455  00061E  0A80               	xorlw	128
  3456  000620  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3457  000622  B0D8               	btfsc	status,0,c
  3458  000624  D02A               	goto	l3074
  3459                           
  3460                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3461  000626  EE20 F00F          	lfsr	2,15
  3462  00062A  501B               	movf	crcBufS_get@_this,w,c
  3463  00062C  26D9               	addwf	fsr2l,f,c
  3464  00062E  501C               	movf	crcBufS_get@_this+1,w,c
  3465  000630  22DA               	addwfc	fsr2h,f,c
  3466  000632  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3467  000636  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3468  00063A  1E1F               	comf	??_crcBufS_get,f,c
  3469  00063C  1E20               	comf	??_crcBufS_get+1,f,c
  3470  00063E  4A1F               	infsnz	??_crcBufS_get,f,c
  3471  000640  2A20               	incf	??_crcBufS_get+1,f,c
  3472  000642  5025               	movf	crcBufS_get@wantedTime,w,c
  3473  000644  261F               	addwf	??_crcBufS_get,f,c
  3474  000646  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3475  000648  2220               	addwfc	??_crcBufS_get+1,f,c
  3476  00064A  1E1F               	comf	??_crcBufS_get,f,c
  3477  00064C  1E20               	comf	??_crcBufS_get+1,f,c
  3478  00064E  4A1F               	infsnz	??_crcBufS_get,f,c
  3479  000650  2A20               	incf	??_crcBufS_get+1,f,c
  3480  000652  0E0F               	movlw	15
  3481  000654  241F               	addwf	??_crcBufS_get,w,c
  3482  000656  6E25               	movwf	crcBufS_get@wantedTime,c
  3483  000658  0E00               	movlw	0
  3484  00065A  2020               	addwfc	??_crcBufS_get+1,w,c
  3485  00065C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3486                           
  3487                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3488  00065E  501E               	movf	crcBufS_get@space,w,c
  3489  000660  2425               	addwf	crcBufS_get@wantedTime,w,c
  3490  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3491  000664  0E00               	movlw	0
  3492  000666  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3493  000668  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3494  00066A  501F               	movf	??_crcBufS_get,w,c
  3495  00066C  241B               	addwf	crcBufS_get@_this,w,c
  3496  00066E  6ED9               	movwf	fsr2l,c
  3497  000670  5020               	movf	??_crcBufS_get+1,w,c
  3498  000672  201C               	addwfc	crcBufS_get@_this+1,w,c
  3499  000674  6EDA               	movwf	fsr2h,c
  3500  000676  50DF               	movf	indf2,w,c
  3501                           
  3502                           ;FastTransfer.c: 365: } else {
  3503  000678  0012               	return	
  3504  00067A                     l3074:
  3505                           
  3506                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3507  00067A  EE20 F00F          	lfsr	2,15
  3508  00067E  501B               	movf	crcBufS_get@_this,w,c
  3509  000680  26D9               	addwf	fsr2l,f,c
  3510  000682  501C               	movf	crcBufS_get@_this+1,w,c
  3511  000684  22DA               	addwfc	fsr2h,f,c
  3512  000686  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3513  00068A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3514  00068E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3515  000692  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3516  000696  1E21               	comf	??_crcBufS_get+2,f,c
  3517  000698  1E22               	comf	??_crcBufS_get+3,f,c
  3518  00069A  4A21               	infsnz	??_crcBufS_get+2,f,c
  3519  00069C  2A22               	incf	??_crcBufS_get+3,f,c
  3520  00069E  501E               	movf	crcBufS_get@space,w,c
  3521  0006A0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3522  0006A2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3523  0006A4  5021               	movf	??_crcBufS_get+2,w,c
  3524  0006A6  2623               	addwf	??_crcBufS_get+4,f,c
  3525  0006A8  5022               	movf	??_crcBufS_get+3,w,c
  3526  0006AA  2224               	addwfc	??_crcBufS_get+5,f,c
  3527  0006AC  501F               	movf	??_crcBufS_get,w,c
  3528  0006AE  2623               	addwf	??_crcBufS_get+4,f,c
  3529  0006B0  5020               	movf	??_crcBufS_get+1,w,c
  3530  0006B2  2224               	addwfc	??_crcBufS_get+5,f,c
  3531  0006B4  5023               	movf	??_crcBufS_get+4,w,c
  3532  0006B6  241B               	addwf	crcBufS_get@_this,w,c
  3533  0006B8  6ED9               	movwf	fsr2l,c
  3534  0006BA  5024               	movf	??_crcBufS_get+5,w,c
  3535  0006BC  201C               	addwfc	crcBufS_get@_this+1,w,c
  3536  0006BE  6EDA               	movwf	fsr2h,c
  3537  0006C0  50DF               	movf	indf2,w,c
  3538  0006C2  0012               	return	
  3539  0006C4                     __end_of_crcBufS_get:
  3540                           	opt stack 0
  3541                           tblptru	equ	0xFF8
  3542                           tblptrh	equ	0xFF7
  3543                           tblptrl	equ	0xFF6
  3544                           tablat	equ	0xFF5
  3545                           prodh	equ	0xFF4
  3546                           prodl	equ	0xFF3
  3547                           intcon	equ	0xFF2
  3548                           postinc0	equ	0xFEE
  3549                           wreg	equ	0xFE8
  3550                           postdec1	equ	0xFE5
  3551                           fsr1l	equ	0xFE1
  3552                           indf2	equ	0xFDF
  3553                           postinc2	equ	0xFDE
  3554                           postdec2	equ	0xFDD
  3555                           plusw2	equ	0xFDB
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560 ;; *************** function _CRC8 *****************
  3561 ;; Defined at:
  3562 ;;		line 34 in file "FastTransfer.c"
  3563 ;; Parameters:    Size  Location     Type
  3564 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3565 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1473(3), receiveData@holder(3), rx_buffer(200), 
  3566 ;;		 -> ring_buffer(206), NULL(0), 
  3567 ;;  len             1   28[COMRAM] unsigned char 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  sum             1   29[COMRAM] unsigned char 
  3570 ;;  tempI           1   31[COMRAM] unsigned char 
  3571 ;;  extract         1   30[COMRAM] unsigned char 
  3572 ;;  crc             1   32[COMRAM] unsigned char 
  3573 ;; Return value:  Size  Location     Type
  3574 ;;                  1    wreg      unsigned char 
  3575 ;; Registers used:
  3576 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3577 ;; Tracked objects:
  3578 ;;		On entry : 0/0
  3579 ;;		On exit  : 0/0
  3580 ;;		Unchanged: 0/0
  3581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3582 ;;      Params:         3       0       0       0       0       0       0
  3583 ;;      Locals:         4       0       0       0       0       0       0
  3584 ;;      Temps:          0       0       0       0       0       0       0
  3585 ;;      Totals:         7       0       0       0       0       0       0
  3586 ;;Total ram usage:        7 bytes
  3587 ;; Hardware stack levels used:    1
  3588 ;; Hardware stack levels required when called:    4
  3589 ;; This function calls:
  3590 ;;		Nothing
  3591 ;; This function is called by:
  3592 ;;		_sendData
  3593 ;;		_receiveData
  3594 ;;		_CRCcheck
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text14
  3599  000F32                     __ptext14:
  3600                           	opt stack 0
  3601  000F32                     _CRC8:
  3602                           	opt stack 23
  3603                           
  3604                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3605                           
  3606                           ;incstack = 0
  3607  000F32  0E00               	movlw	0
  3608  000F34  6E21               	movwf	CRC8@crc,c
  3609                           
  3610                           ;FastTransfer.c: 36: while (len--) {
  3611  000F36  D01C               	goto	l3020
  3612  000F38                     l3004:
  3613                           
  3614                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3615  000F38  C01B  FFD9         	movff	CRC8@data,fsr2l
  3616  000F3C  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3617  000F40  50DF               	movf	indf2,w,c
  3618  000F42  6E1F               	movwf	CRC8@extract,c
  3619  000F44  4A1B               	infsnz	CRC8@data,f,c
  3620  000F46  2A1C               	incf	CRC8@data+1,f,c
  3621                           
  3622                           ;FastTransfer.c: 38: unsigned char tempI;
  3623                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3624  000F48  0E08               	movlw	8
  3625  000F4A  6E20               	movwf	CRC8@tempI,c
  3626  000F4C  D00E               	goto	l3018
  3627  000F4E                     l3010:
  3628                           
  3629                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3630  000F4E  5021               	movf	CRC8@crc,w,c
  3631  000F50  181F               	xorwf	CRC8@extract,w,c
  3632  000F52  0B01               	andlw	1
  3633  000F54  6E1E               	movwf	CRC8@sum,c
  3634                           
  3635                           ;FastTransfer.c: 41: crc >>= 1;
  3636  000F56  90D8               	bcf	status,0,c
  3637  000F58  3221               	rrcf	CRC8@crc,f,c
  3638                           
  3639                           ;FastTransfer.c: 42: if (sum) {
  3640  000F5A  501E               	movf	CRC8@sum,w,c
  3641  000F5C  B4D8               	btfsc	status,2,c
  3642  000F5E  D002               	goto	l395
  3643                           
  3644                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3645  000F60  0E8C               	movlw	140
  3646  000F62  1A21               	xorwf	CRC8@crc,f,c
  3647  000F64                     l395:
  3648                           
  3649                           ;FastTransfer.c: 44: }
  3650                           ;FastTransfer.c: 45: extract >>= 1;
  3651  000F64  90D8               	bcf	status,0,c
  3652  000F66  321F               	rrcf	CRC8@extract,f,c
  3653  000F68  0620               	decf	CRC8@tempI,f,c
  3654  000F6A                     l3018:
  3655  000F6A  5020               	movf	CRC8@tempI,w,c
  3656  000F6C  A4D8               	btfss	status,2,c
  3657  000F6E  D7EF               	goto	l3010
  3658  000F70                     l3020:
  3659  000F70  061D               	decf	CRC8@len,f,c
  3660  000F72  281D               	incf	CRC8@len,w,c
  3661  000F74  A4D8               	btfss	status,2,c
  3662  000F76  D7E0               	goto	l3004
  3663                           
  3664                           ;FastTransfer.c: 46: }
  3665                           ;FastTransfer.c: 47: }
  3666                           ;FastTransfer.c: 48: return crc;
  3667  000F78  5021               	movf	CRC8@crc,w,c
  3668  000F7A  0012               	return	
  3669  000F7C                     __end_of_CRC8:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodh	equ	0xFF4
  3676                           prodl	equ	0xFF3
  3677                           intcon	equ	0xFF2
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           postinc2	equ	0xFDE
  3684                           postdec2	equ	0xFDD
  3685                           plusw2	equ	0xFDB
  3686                           fsr2h	equ	0xFDA
  3687                           fsr2l	equ	0xFD9
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _SetCharger *****************
  3691 ;; Defined at:
  3692 ;;		line 58 in file "Functions.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  mode            1    wreg     unsigned char 
  3695 ;;  Current         1    0[BANK0 ] unsigned char 
  3696 ;;  Voltage         1    1[BANK0 ] unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  mode            1    2[BANK0 ] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;		None               void
  3701 ;; Registers used:
  3702 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3708 ;;      Params:         0       2       0       0       0       0       0
  3709 ;;      Locals:         0       1       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0
  3711 ;;      Totals:         0       3       0       0       0       0       0
  3712 ;;Total ram usage:        3 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    7
  3715 ;; This function calls:
  3716 ;;		_SetMux
  3717 ;;		_printf
  3718 ;; This function is called by:
  3719 ;;		_updateComms
  3720 ;; This function uses a non-reentrant model
  3721 ;;
  3722                           
  3723                           	psect	text15
  3724  000D1A                     __ptext15:
  3725                           	opt stack 0
  3726  000D1A                     _SetCharger:
  3727                           	opt stack 22
  3728                           
  3729                           ;incstack = 0
  3730                           ;SetCharger@mode stored from wreg
  3731  000D1A  0100               	movlb	0	; () banked
  3732  000D1C  6FC2               	movwf	SetCharger@mode& (0+255),b
  3733                           
  3734                           ;Functions.c: 59: if(mode == 1){
  3735  000D1E  0100               	movlb	0	; () banked
  3736  000D20  05C2               	decf	SetCharger@mode& (0+255),w,b
  3737  000D22  A4D8               	btfss	status,2,c
  3738  000D24  D016               	goto	l3356
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;Functions.c: 61: SetMux(1);
  3742  000D26  0E01               	movlw	1
  3743  000D28  ECDB  F007         	call	_SetMux
  3744                           
  3745                           ;Functions.c: 64: ChargerData[2] = 001;
  3746  000D2C  0E01               	movlw	1
  3747  000D2E  0100               	movlb	0	; () banked
  3748  000D30  6FDB               	movwf	(_ChargerData+2)& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;Functions.c: 65: ChargerData[4] = 000;
  3752  000D32  0E00               	movlw	0
  3753  000D34  0100               	movlb	0	; () banked
  3754  000D36  6FDD               	movwf	(_ChargerData+4)& (0+255),b
  3755                           
  3756                           ; BSR set to: 0
  3757                           ;Functions.c: 66: ChargerData[6] = 001;
  3758  000D38  0E01               	movlw	1
  3759  000D3A  0100               	movlb	0	; () banked
  3760  000D3C  6FDF               	movwf	(_ChargerData+6)& (0+255),b
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;Functions.c: 68: printf("%s",ChargerData);
  3764  000D3E  0EFB               	movlw	low STR_2
  3765  000D40  6E1D               	movwf	printf@f,c
  3766  000D42  0E7F               	movlw	high STR_2
  3767  000D44  6E1E               	movwf	printf@f+1,c
  3768  000D46  0ED9               	movlw	low _ChargerData
  3769  000D48  6E1F               	movwf	?_printf+2,c
  3770  000D4A  0E00               	movlw	high _ChargerData
  3771  000D4C  6E20               	movwf	?_printf+3,c
  3772  000D4E  EC39  F004         	call	_printf	;wreg free
  3773  000D52                     l3356:
  3774                           
  3775                           ;Functions.c: 69: }
  3776                           ;Functions.c: 70: if(mode == 2){
  3777  000D52  0E02               	movlw	2
  3778  000D54  0100               	movlb	0	; () banked
  3779  000D56  19C2               	xorwf	SetCharger@mode& (0+255),w,b
  3780  000D58  A4D8               	btfss	status,2,c
  3781  000D5A  0012               	return	
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;Functions.c: 72: SetMux(1);
  3785  000D5C  0E01               	movlw	1
  3786  000D5E  ECDB  F007         	call	_SetMux
  3787                           
  3788                           ;Functions.c: 74: ChargerData[2] = Current;
  3789  000D62  C0C0  F0DB         	movff	SetCharger@Current,_ChargerData+2
  3790                           
  3791                           ;Functions.c: 75: ChargerData[4] = Voltage;
  3792  000D66  C0C1  F0DD         	movff	SetCharger@Voltage,_ChargerData+4
  3793                           
  3794                           ;Functions.c: 77: ChargerData[6] = (Current + Voltage)%1,000;
  3795  000D6A  0E00               	movlw	0
  3796  000D6C  0100               	movlb	0	; () banked
  3797  000D6E  6FDF               	movwf	(_ChargerData+6)& (0+255),b
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;Functions.c: 79: printf("%s",ChargerData);
  3801  000D70  0EFB               	movlw	low STR_2
  3802  000D72  6E1D               	movwf	printf@f,c
  3803  000D74  0E7F               	movlw	high STR_2
  3804  000D76  6E1E               	movwf	printf@f+1,c
  3805  000D78  0ED9               	movlw	low _ChargerData
  3806  000D7A  6E1F               	movwf	?_printf+2,c
  3807  000D7C  0E00               	movlw	high _ChargerData
  3808  000D7E  6E20               	movwf	?_printf+3,c
  3809  000D80  EC39  F004         	call	_printf	;wreg free
  3810  000D84  0012               	return	
  3811  000D86                     __end_of_SetCharger:
  3812                           	opt stack 0
  3813                           tblptru	equ	0xFF8
  3814                           tblptrh	equ	0xFF7
  3815                           tblptrl	equ	0xFF6
  3816                           tablat	equ	0xFF5
  3817                           prodh	equ	0xFF4
  3818                           prodl	equ	0xFF3
  3819                           intcon	equ	0xFF2
  3820                           postinc0	equ	0xFEE
  3821                           wreg	equ	0xFE8
  3822                           postdec1	equ	0xFE5
  3823                           fsr1l	equ	0xFE1
  3824                           indf2	equ	0xFDF
  3825                           postinc2	equ	0xFDE
  3826                           postdec2	equ	0xFDD
  3827                           plusw2	equ	0xFDB
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function _printf *****************
  3833 ;; Defined at:
  3834 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3837 ;;		 -> STR_3(3), STR_2(3), 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  tmpval          4    0        struct .
  3840 ;;  cp              2   36[COMRAM] PTR const unsigned char 
  3841 ;;		 -> STR_4(7), ChargerData(9), 
  3842 ;;  ap              2   33[COMRAM] PTR void [1]
  3843 ;;		 -> ?_printf(2), 
  3844 ;;  len             2    0        unsigned int 
  3845 ;;  val             2    0        unsigned int 
  3846 ;;  c               1   35[COMRAM] char 
  3847 ;;  flag            1   32[COMRAM] unsigned char 
  3848 ;;  prec            1    0        char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  2   28[COMRAM] int 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3858 ;;      Params:         4       0       0       0       0       0       0
  3859 ;;      Locals:         6       0       0       0       0       0       0
  3860 ;;      Temps:          0       0       0       0       0       0       0
  3861 ;;      Totals:        10       0       0       0       0       0       0
  3862 ;;Total ram usage:       10 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    6
  3865 ;; This function calls:
  3866 ;;		_putch
  3867 ;; This function is called by:
  3868 ;;		_SetCharger
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text16
  3873  000872                     __ptext16:
  3874                           	opt stack 0
  3875  000872                     _printf:
  3876                           	opt stack 22
  3877                           
  3878                           ;doprnt.c: 466: va_list ap;
  3879                           ;doprnt.c: 499: signed char c;
  3880                           ;doprnt.c: 506: signed char prec;
  3881                           ;doprnt.c: 508: unsigned char flag;
  3882                           ;doprnt.c: 523: union {
  3883                           ;doprnt.c: 524: unsigned long vd;
  3884                           ;doprnt.c: 525: double integ;
  3885                           ;doprnt.c: 526: } tmpval;
  3886                           ;doprnt.c: 528: unsigned int val;
  3887                           ;doprnt.c: 529: unsigned len;
  3888                           ;doprnt.c: 530: const char * cp;
  3889                           ;doprnt.c: 533: *ap = __va_start();
  3890                           
  3891                           ;incstack = 0
  3892  000872  0E1F               	movlw	low (?_printf+2)
  3893  000874  6E22               	movwf	printf@ap,c
  3894  000876  0E00               	movlw	high (?_printf+2)
  3895  000878  6E23               	movwf	printf@ap+1,c
  3896                           
  3897                           ;doprnt.c: 536: while(c = *f++) {
  3898  00087A  D058               	goto	l3178
  3899  00087C                     l3154:
  3900                           
  3901                           ;doprnt.c: 538: if(c != '%')
  3902  00087C  0E25               	movlw	37
  3903  00087E  1824               	xorwf	printf@c,w,c
  3904  000880  B4D8               	btfsc	status,2,c
  3905  000882  D004               	goto	l3158
  3906                           
  3907                           ;doprnt.c: 540: {
  3908                           ;doprnt.c: 541: (putch(c) );
  3909  000884  5024               	movf	printf@c,w,c
  3910  000886  EC62  F009         	call	_putch
  3911                           
  3912                           ;doprnt.c: 542: continue;
  3913  00088A  D050               	goto	l3178
  3914  00088C                     l3158:
  3915                           
  3916                           ;doprnt.c: 543: }
  3917                           ;doprnt.c: 548: flag = 0;
  3918  00088C  0E00               	movlw	0
  3919  00088E  6E21               	movwf	printf@flag,c
  3920                           
  3921                           ;doprnt.c: 635: switch(c = *f++) {
  3922  000890  D03D               	goto	l3176
  3923  000892                     l3160:
  3924                           
  3925                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3926  000892  C022  FFD9         	movff	printf@ap,fsr2l
  3927  000896  C023  FFDA         	movff	printf@ap+1,fsr2h
  3928  00089A  CFDE F025          	movff	postinc2,printf@cp
  3929  00089E  CFDD F026          	movff	postdec2,printf@cp+1
  3930  0008A2  0E02               	movlw	2
  3931  0008A4  2622               	addwf	printf@ap,f,c
  3932  0008A6  0E00               	movlw	0
  3933  0008A8  2223               	addwfc	printf@ap+1,f,c
  3934                           
  3935                           ;doprnt.c: 740: if(!cp)
  3936  0008AA  5025               	movf	printf@cp,w,c
  3937  0008AC  1026               	iorwf	printf@cp+1,w,c
  3938  0008AE  A4D8               	btfss	status,2,c
  3939  0008B0  D019               	goto	l3172
  3940                           
  3941                           ;doprnt.c: 741: cp = "(null)";
  3942  0008B2  0EF4               	movlw	low STR_4
  3943  0008B4  6E25               	movwf	printf@cp,c
  3944  0008B6  0E7F               	movlw	high STR_4
  3945  0008B8  6E26               	movwf	printf@cp+1,c
  3946                           
  3947                           ;doprnt.c: 777: while(*cp)
  3948  0008BA  D014               	goto	l3172
  3949  0008BC                     l3168:
  3950                           
  3951                           ;doprnt.c: 778: (putch(*cp++) );
  3952  0008BC  C025  FFF6         	movff	printf@cp,tblptrl
  3953  0008C0  C026  FFF7         	movff	printf@cp+1,tblptrh
  3954  0008C4  6AF8               	clrf	tblptru,c
  3955  0008C6  0E05               	movlw	(high __ramtop+-1)
  3956  0008C8  64F7               	cpfsgt	tblptrh,c
  3957  0008CA  D003               	bra	u2237
  3958  0008CC  0008               	tblrd		*
  3959  0008CE  50F5               	movf	tablat,w,c
  3960  0008D0  D005               	bra	u2230
  3961  0008D2                     u2237:
  3962  0008D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3963  0008D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3964  0008DA  50EF               	movf	indf0,w,c
  3965  0008DC                     u2230:
  3966  0008DC  EC62  F009         	call	_putch
  3967  0008E0  4A25               	infsnz	printf@cp,f,c
  3968  0008E2  2A26               	incf	printf@cp+1,f,c
  3969  0008E4                     l3172:
  3970  0008E4  C025  FFF6         	movff	printf@cp,tblptrl
  3971  0008E8  C026  FFF7         	movff	printf@cp+1,tblptrh
  3972  0008EC  6AF8               	clrf	tblptru,c
  3973  0008EE  0E05               	movlw	(high __ramtop+-1)
  3974  0008F0  64F7               	cpfsgt	tblptrh,c
  3975  0008F2  D003               	bra	u2247
  3976  0008F4  0008               	tblrd		*
  3977  0008F6  50F5               	movf	tablat,w,c
  3978  0008F8  D005               	bra	u2240
  3979  0008FA                     u2247:
  3980  0008FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  3981  0008FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  3982  000902  50EF               	movf	indf0,w,c
  3983  000904                     u2240:
  3984  000904  0900               	iorlw	0
  3985  000906  B4D8               	btfsc	status,2,c
  3986  000908  D011               	goto	l3178
  3987  00090A  D7D8               	goto	l3168
  3988  00090C                     l3176:
  3989  00090C  C01D  FFF6         	movff	printf@f,tblptrl
  3990  000910  C01E  FFF7         	movff	printf@f+1,tblptrh
  3991  000914  4A1D               	infsnz	printf@f,f,c
  3992  000916  2A1E               	incf	printf@f+1,f,c
  3993  000918                     	if	0	;tblptru may be non-zero
  3994  000918                     	endif
  3995  000918                     	if	0	;tblptru may be non-zero
  3996  000918                     	endif
  3997  000918  0008               	tblrd		*
  3998  00091A  CFF5 F024          	movff	tablat,printf@c
  3999  00091E  5024               	movf	printf@c,w,c
  4000                           
  4001                           ; Switch size 1, requested type "space"
  4002                           ; Number of cases is 2, Range of values is 0 to 115
  4003                           ; switch strategies available:
  4004                           ; Name         Instructions Cycles
  4005                           ; simple_byte            7     4 (average)
  4006                           ;	Chosen strategy is simple_byte
  4007  000920  0A00               	xorlw	0	; case 0
  4008  000922  B4D8               	btfsc	status,2,c
  4009  000924  0012               	return	
  4010  000926  0A73               	xorlw	115	; case 115
  4011  000928  B4D8               	btfsc	status,2,c
  4012  00092A  D7B3               	goto	l3160
  4013  00092C                     l3178:
  4014  00092C  C01D  FFF6         	movff	printf@f,tblptrl
  4015  000930  C01E  FFF7         	movff	printf@f+1,tblptrh
  4016  000934  4A1D               	infsnz	printf@f,f,c
  4017  000936  2A1E               	incf	printf@f+1,f,c
  4018  000938                     	if	0	;tblptru may be non-zero
  4019  000938                     	endif
  4020  000938                     	if	0	;tblptru may be non-zero
  4021  000938                     	endif
  4022  000938  0008               	tblrd		*
  4023  00093A  CFF5 F024          	movff	tablat,printf@c
  4024  00093E  5024               	movf	printf@c,w,c
  4025  000940  B4D8               	btfsc	status,2,c
  4026  000942  0012               	return	
  4027  000944  D79B               	goto	l3154
  4028  000946                     __end_of_printf:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           intcon	equ	0xFF2
  4037                           indf0	equ	0xFEF
  4038                           postinc0	equ	0xFEE
  4039                           fsr0h	equ	0xFEA
  4040                           fsr0l	equ	0xFE9
  4041                           wreg	equ	0xFE8
  4042                           postdec1	equ	0xFE5
  4043                           fsr1l	equ	0xFE1
  4044                           indf2	equ	0xFDF
  4045                           postinc2	equ	0xFDE
  4046                           postdec2	equ	0xFDD
  4047                           plusw2	equ	0xFDB
  4048                           fsr2h	equ	0xFDA
  4049                           fsr2l	equ	0xFD9
  4050                           status	equ	0xFD8
  4051                           
  4052 ;; *************** function _putch *****************
  4053 ;; Defined at:
  4054 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  txData          1    wreg     unsigned char 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  txData          1   27[COMRAM] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;		None               void
  4061 ;; Registers used:
  4062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4068 ;;      Params:         0       0       0       0       0       0       0
  4069 ;;      Locals:         1       0       0       0       0       0       0
  4070 ;;      Temps:          0       0       0       0       0       0       0
  4071 ;;      Totals:         1       0       0       0       0       0       0
  4072 ;;Total ram usage:        1 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    5
  4075 ;; This function calls:
  4076 ;;		_EUSART2_Write
  4077 ;; This function is called by:
  4078 ;;		_printf
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           	psect	text17
  4083  0012C4                     __ptext17:
  4084                           	opt stack 0
  4085  0012C4                     _putch:
  4086                           	opt stack 22
  4087                           
  4088                           ;incstack = 0
  4089                           ;putch@txData stored from wreg
  4090  0012C4  6E1C               	movwf	putch@txData,c
  4091                           
  4092                           ;eusart2.c: 152: EUSART2_Write(txData);
  4093  0012C6  501C               	movf	putch@txData,w,c
  4094  0012C8  ECBE  F007         	call	_EUSART2_Write
  4095  0012CC  0012               	return		;funcret
  4096  0012CE                     __end_of_putch:
  4097                           	opt stack 0
  4098                           tblptru	equ	0xFF8
  4099                           tblptrh	equ	0xFF7
  4100                           tblptrl	equ	0xFF6
  4101                           tablat	equ	0xFF5
  4102                           prodh	equ	0xFF4
  4103                           prodl	equ	0xFF3
  4104                           intcon	equ	0xFF2
  4105                           indf0	equ	0xFEF
  4106                           postinc0	equ	0xFEE
  4107                           fsr0h	equ	0xFEA
  4108                           fsr0l	equ	0xFE9
  4109                           wreg	equ	0xFE8
  4110                           postdec1	equ	0xFE5
  4111                           fsr1l	equ	0xFE1
  4112                           indf2	equ	0xFDF
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           plusw2	equ	0xFDB
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _EUSART2_Write *****************
  4121 ;; Defined at:
  4122 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  txData          1    wreg     unsigned char 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  txData          1   26[COMRAM] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;		None               void
  4129 ;; Registers used:
  4130 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4136 ;;      Params:         0       0       0       0       0       0       0
  4137 ;;      Locals:         1       0       0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0
  4139 ;;      Totals:         1       0       0       0       0       0       0
  4140 ;;Total ram usage:        1 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    4
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		_putch
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text18
  4151  000F7C                     __ptext18:
  4152                           	opt stack 0
  4153  000F7C                     _EUSART2_Write:
  4154                           	opt stack 22
  4155                           
  4156                           ;incstack = 0
  4157                           ;EUSART2_Write@txData stored from wreg
  4158  000F7C  6E1B               	movwf	EUSART2_Write@txData,c
  4159  000F7E                     l2972:
  4160  000F7E  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  4161  000F80  B4D8               	btfsc	status,2,c
  4162  000F82  D7FD               	goto	l2972
  4163                           
  4164                           ;eusart2.c: 132: }
  4165                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  4166  000F84  B8A3               	btfsc	4003,4,c	;volatile
  4167  000F86  D003               	goto	l85
  4168                           
  4169                           ;eusart2.c: 135: TXREG2 = txData;
  4170  000F88  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4171                           
  4172                           ;eusart2.c: 136: } else {
  4173  000F8C  D012               	goto	l2986
  4174  000F8E                     l85:
  4175                           
  4176                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  4177  000F8E  98A3               	bcf	4003,4,c	;volatile
  4178                           
  4179                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  4180  000F90  5038               	movf	_eusart2TxHead,w,c
  4181  000F92  0D01               	mullw	1
  4182  000F94  0E9B               	movlw	low _eusart2TxBuffer
  4183  000F96  24F3               	addwf	prodl,w,c
  4184  000F98  6ED9               	movwf	fsr2l,c
  4185  000F9A  0E00               	movlw	high _eusart2TxBuffer
  4186  000F9C  20F4               	addwfc	prodh,w,c
  4187  000F9E  6EDA               	movwf	fsr2h,c
  4188  000FA0  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  4189  000FA4  2A38               	incf	_eusart2TxHead,f,c
  4190                           
  4191                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  4192  000FA6  0E07               	movlw	7
  4193  000FA8  6438               	cpfsgt	_eusart2TxHead,c
  4194  000FAA  D002               	goto	l2984
  4195                           
  4196                           ;eusart2.c: 140: eusart2TxHead = 0;
  4197  000FAC  0E00               	movlw	0
  4198  000FAE  6E38               	movwf	_eusart2TxHead,c
  4199  000FB0                     l2984:
  4200                           
  4201                           ;eusart2.c: 141: }
  4202                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  4203  000FB0  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4204  000FB2                     l2986:
  4205                           
  4206                           ;eusart2.c: 143: }
  4207                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  4208  000FB2  88A3               	bsf	4003,4,c	;volatile
  4209  000FB4  0012               	return		;funcret
  4210  000FB6                     __end_of_EUSART2_Write:
  4211                           	opt stack 0
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           intcon	equ	0xFF2
  4219                           indf0	equ	0xFEF
  4220                           postinc0	equ	0xFEE
  4221                           fsr0h	equ	0xFEA
  4222                           fsr0l	equ	0xFE9
  4223                           wreg	equ	0xFE8
  4224                           postdec1	equ	0xFE5
  4225                           fsr1l	equ	0xFE1
  4226                           indf2	equ	0xFDF
  4227                           postinc2	equ	0xFDE
  4228                           postdec2	equ	0xFDD
  4229                           plusw2	equ	0xFDB
  4230                           fsr2h	equ	0xFDA
  4231                           fsr2l	equ	0xFD9
  4232                           status	equ	0xFD8
  4233                           
  4234 ;; *************** function _SetMux *****************
  4235 ;; Defined at:
  4236 ;;		line 90 in file "Functions.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;  channel         1    wreg     unsigned char 
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  channel         1   26[COMRAM] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;		None               void
  4243 ;; Registers used:
  4244 ;;		wreg, status,2, status,0
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4250 ;;      Params:         0       0       0       0       0       0       0
  4251 ;;      Locals:         1       0       0       0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0       0       0
  4253 ;;      Totals:         1       0       0       0       0       0       0
  4254 ;;Total ram usage:        1 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; Hardware stack levels required when called:    4
  4257 ;; This function calls:
  4258 ;;		Nothing
  4259 ;; This function is called by:
  4260 ;;		_SetCharger
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text19
  4265  000FB6                     __ptext19:
  4266                           	opt stack 0
  4267  000FB6                     _SetMux:
  4268                           	opt stack 24
  4269                           
  4270                           ;incstack = 0
  4271                           ;SetMux@channel stored from wreg
  4272  000FB6  6E1B               	movwf	SetMux@channel,c
  4273                           
  4274                           ;Functions.c: 91: switch (channel){
  4275  000FB8  D00C               	goto	l3150
  4276  000FBA                     l658:
  4277  000FBA  908A               	bcf	3978,0,c	;volatile
  4278                           
  4279                           ;Functions.c: 94: do { LATB1 = 0; } while(0);
  4280  000FBC  928A               	bcf	3978,1,c	;volatile
  4281                           
  4282                           ;Functions.c: 95: break;
  4283  000FBE  0012               	return	
  4284  000FC0                     l664:
  4285  000FC0  808A               	bsf	3978,0,c	;volatile
  4286                           
  4287                           ;Functions.c: 98: do { LATB1 = 0; } while(0);
  4288  000FC2  928A               	bcf	3978,1,c	;volatile
  4289                           
  4290                           ;Functions.c: 99: break;
  4291  000FC4  0012               	return	
  4292  000FC6                     l669:
  4293  000FC6  908A               	bcf	3978,0,c	;volatile
  4294                           
  4295                           ;Functions.c: 102: do { LATB1 = 1; } while(0);
  4296  000FC8  828A               	bsf	3978,1,c	;volatile
  4297                           
  4298                           ;Functions.c: 103: break;
  4299  000FCA  0012               	return	
  4300  000FCC                     l674:
  4301  000FCC  808A               	bsf	3978,0,c	;volatile
  4302                           
  4303                           ;Functions.c: 106: do { LATB1 = 1; } while(0);
  4304  000FCE  828A               	bsf	3978,1,c	;volatile
  4305                           
  4306                           ;Functions.c: 111: }
  4307                           
  4308                           ;Functions.c: 110: break;
  4309                           
  4310                           ;Functions.c: 108: default:
  4311                           
  4312                           ;Functions.c: 107: break;
  4313  000FD0  0012               	return	
  4314  000FD2                     l3150:
  4315  000FD2  501B               	movf	SetMux@channel,w,c
  4316                           
  4317                           ; Switch size 1, requested type "space"
  4318                           ; Number of cases is 4, Range of values is 1 to 4
  4319                           ; switch strategies available:
  4320                           ; Name         Instructions Cycles
  4321                           ; simple_byte           13     7 (average)
  4322                           ;	Chosen strategy is simple_byte
  4323  000FD4  0A01               	xorlw	1	; case 1
  4324  000FD6  B4D8               	btfsc	status,2,c
  4325  000FD8  D7F0               	goto	l658
  4326  000FDA  0A03               	xorlw	3	; case 2
  4327  000FDC  B4D8               	btfsc	status,2,c
  4328  000FDE  D7F0               	goto	l664
  4329  000FE0  0A01               	xorlw	1	; case 3
  4330  000FE2  B4D8               	btfsc	status,2,c
  4331  000FE4  D7F0               	goto	l669
  4332  000FE6  0A07               	xorlw	7	; case 4
  4333  000FE8  A4D8               	btfss	status,2,c
  4334  000FEA  0012               	return	
  4335  000FEC  D7EF               	goto	l674
  4336  000FEE                     __end_of_SetMux:
  4337                           	opt stack 0
  4338                           tblptru	equ	0xFF8
  4339                           tblptrh	equ	0xFF7
  4340                           tblptrl	equ	0xFF6
  4341                           tablat	equ	0xFF5
  4342                           prodh	equ	0xFF4
  4343                           prodl	equ	0xFF3
  4344                           intcon	equ	0xFF2
  4345                           indf0	equ	0xFEF
  4346                           postinc0	equ	0xFEE
  4347                           fsr0h	equ	0xFEA
  4348                           fsr0l	equ	0xFE9
  4349                           wreg	equ	0xFE8
  4350                           postdec1	equ	0xFE5
  4351                           fsr1l	equ	0xFE1
  4352                           indf2	equ	0xFDF
  4353                           postinc2	equ	0xFDE
  4354                           postdec2	equ	0xFDD
  4355                           plusw2	equ	0xFDB
  4356                           fsr2h	equ	0xFDA
  4357                           fsr2l	equ	0xFD9
  4358                           status	equ	0xFD8
  4359                           
  4360 ;; *************** function _Precharge *****************
  4361 ;; Defined at:
  4362 ;;		line 25 in file "Functions.c"
  4363 ;; Parameters:    Size  Location     Type
  4364 ;;  OnOff           1    wreg     unsigned char 
  4365 ;; Auto vars:     Size  Location     Type
  4366 ;;  OnOff           1    0[BANK0 ] unsigned char 
  4367 ;;  i               2    3[BANK0 ] int 
  4368 ;;  i               2    1[BANK0 ] int 
  4369 ;; Return value:  Size  Location     Type
  4370 ;;		None               void
  4371 ;; Registers used:
  4372 ;;		wreg, status,2, status,0, cstack
  4373 ;; Tracked objects:
  4374 ;;		On entry : 0/0
  4375 ;;		On exit  : 0/0
  4376 ;;		Unchanged: 0/0
  4377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4378 ;;      Params:         0       0       0       0       0       0       0
  4379 ;;      Locals:         0       5       0       0       0       0       0
  4380 ;;      Temps:          0       0       0       0       0       0       0
  4381 ;;      Totals:         0       5       0       0       0       0       0
  4382 ;;Total ram usage:        5 bytes
  4383 ;; Hardware stack levels used:    1
  4384 ;; Hardware stack levels required when called:    5
  4385 ;; This function calls:
  4386 ;;		_Delay
  4387 ;; This function is called by:
  4388 ;;		_updateComms
  4389 ;; This function uses a non-reentrant model
  4390 ;;
  4391                           
  4392                           	psect	text20
  4393  000946                     __ptext20:
  4394                           	opt stack 0
  4395  000946                     _Precharge:
  4396                           	opt stack 24
  4397                           
  4398                           ;incstack = 0
  4399                           ;Precharge@OnOff stored from wreg
  4400  000946  0100               	movlb	0	; () banked
  4401  000948  6FC0               	movwf	Precharge@OnOff& (0+255),b
  4402                           
  4403                           ;Functions.c: 26: if(OnOff){
  4404  00094A  0100               	movlb	0	; () banked
  4405  00094C  51C0               	movf	Precharge@OnOff& (0+255),w,b
  4406  00094E  0100               	movlb	0	; () banked
  4407  000950  B4D8               	btfsc	status,2,c
  4408  000952  D024               	goto	l636
  4409                           
  4410                           ; BSR set to: 0
  4411                           
  4412                           ;Functions.c: 27: do { LATC1 = 1; } while(0);
  4413  000954  828B               	bsf	3979,1,c	;volatile
  4414                           
  4415                           ; BSR set to: 0
  4416                           
  4417                           ; BSR set to: 0
  4418                           ;Functions.c: 28: do { LATB3 = 1; } while(0);
  4419  000956  868A               	bsf	3978,3,c	;volatile
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;Functions.c: 29: for(int i = 0;i<5;i++){
  4423                           
  4424                           ; BSR set to: 0
  4425  000958  0E00               	movlw	0
  4426  00095A  0100               	movlb	0	; () banked
  4427  00095C  6FC2               	movwf	(Precharge@i+1)& (0+255),b
  4428  00095E  0E00               	movlw	0
  4429  000960  6FC1               	movwf	Precharge@i& (0+255),b
  4430  000962                     l3322:
  4431                           
  4432                           ; BSR set to: 0
  4433  000962  0100               	movlb	0	; () banked
  4434  000964  BFC2               	btfsc	(Precharge@i+1)& (0+255),7,b
  4435  000966  D008               	goto	l3326
  4436  000968  0100               	movlb	0	; () banked
  4437  00096A  51C2               	movf	(Precharge@i+1)& (0+255),w,b
  4438  00096C  E113               	bnz	l629
  4439  00096E  0E05               	movlw	5
  4440  000970  0100               	movlb	0	; () banked
  4441  000972  5DC1               	subwf	Precharge@i& (0+255),w,b
  4442  000974  B0D8               	btfsc	status,0,c
  4443  000976  D00E               	goto	l629
  4444  000978                     l3326:
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;Functions.c: 30: Delay(1000);
  4448  000978  0EE8               	movlw	232
  4449  00097A  6E1B               	movwf	Delay@wait,c
  4450  00097C  0E03               	movlw	3
  4451  00097E  6E1C               	movwf	Delay@wait+1,c
  4452  000980  0E00               	movlw	0
  4453  000982  6E1D               	movwf	Delay@wait+2,c
  4454  000984  0E00               	movlw	0
  4455  000986  6E1E               	movwf	Delay@wait+3,c
  4456  000988  EC73  F007         	call	_Delay	;wreg free
  4457  00098C  0100               	movlb	0	; () banked
  4458  00098E  4BC1               	infsnz	Precharge@i& (0+255),f,b
  4459  000990  2BC2               	incf	(Precharge@i+1)& (0+255),f,b
  4460  000992  D7E7               	goto	l3322
  4461  000994                     l629:
  4462                           
  4463                           ; BSR set to: 0
  4464  000994  888A               	bsf	3978,4,c	;volatile
  4465                           
  4466                           ; BSR set to: 0
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;Functions.c: 33: do { LATC0 = 1; } while(0);
  4470  000996  808B               	bsf	3979,0,c	;volatile
  4471                           
  4472                           ; BSR set to: 0
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;Functions.c: 34: do { LATB5 = 1; } while(0);
  4476  000998  8A8A               	bsf	3978,5,c	;volatile
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;Functions.c: 35: }
  4480  00099A  0012               	return	
  4481  00099C                     l636:
  4482                           
  4483                           ; BSR set to: 0
  4484  00099C  988A               	bcf	3978,4,c	;volatile
  4485                           
  4486                           ; BSR set to: 0
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;Functions.c: 39: do { LATB3 = 0; } while(0);
  4490  00099E  968A               	bcf	3978,3,c	;volatile
  4491                           
  4492                           ; BSR set to: 0
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;Functions.c: 40: do { LATC0 = 0; } while(0);
  4496  0009A0  908B               	bcf	3979,0,c	;volatile
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;Functions.c: 41: for(int i = 0;i<5;i++){
  4500                           
  4501                           ; BSR set to: 0
  4502  0009A2  0E00               	movlw	0
  4503  0009A4  0100               	movlb	0	; () banked
  4504  0009A6  6FC4               	movwf	(Precharge@i_1753+1)& (0+255),b
  4505  0009A8  0E00               	movlw	0
  4506  0009AA  6FC3               	movwf	Precharge@i_1753& (0+255),b
  4507  0009AC                     l3334:
  4508                           
  4509                           ; BSR set to: 0
  4510  0009AC  0100               	movlb	0	; () banked
  4511  0009AE  BFC4               	btfsc	(Precharge@i_1753+1)& (0+255),7,b
  4512  0009B0  D008               	goto	l3338
  4513  0009B2  0100               	movlb	0	; () banked
  4514  0009B4  51C4               	movf	(Precharge@i_1753+1)& (0+255),w,b
  4515  0009B6  E113               	bnz	l644
  4516  0009B8  0E05               	movlw	5
  4517  0009BA  0100               	movlb	0	; () banked
  4518  0009BC  5DC3               	subwf	Precharge@i_1753& (0+255),w,b
  4519  0009BE  B0D8               	btfsc	status,0,c
  4520  0009C0  D00E               	goto	l644
  4521  0009C2                     l3338:
  4522                           
  4523                           ; BSR set to: 0
  4524                           ;Functions.c: 42: Delay(1000);
  4525  0009C2  0EE8               	movlw	232
  4526  0009C4  6E1B               	movwf	Delay@wait,c
  4527  0009C6  0E03               	movlw	3
  4528  0009C8  6E1C               	movwf	Delay@wait+1,c
  4529  0009CA  0E00               	movlw	0
  4530  0009CC  6E1D               	movwf	Delay@wait+2,c
  4531  0009CE  0E00               	movlw	0
  4532  0009D0  6E1E               	movwf	Delay@wait+3,c
  4533  0009D2  EC73  F007         	call	_Delay	;wreg free
  4534  0009D6  0100               	movlb	0	; () banked
  4535  0009D8  4BC3               	infsnz	Precharge@i_1753& (0+255),f,b
  4536  0009DA  2BC4               	incf	(Precharge@i_1753+1)& (0+255),f,b
  4537  0009DC  D7E7               	goto	l3334
  4538  0009DE                     l644:
  4539                           
  4540                           ; BSR set to: 0
  4541  0009DE  928B               	bcf	3979,1,c	;volatile
  4542                           
  4543                           ; BSR set to: 0
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;Functions.c: 45: do { LATB5 = 0; } while(0);
  4547  0009E0  9A8A               	bcf	3978,5,c	;volatile
  4548                           
  4549                           ; BSR set to: 0
  4550  0009E2  0012               	return	
  4551  0009E4                     __end_of_Precharge:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           indf0	equ	0xFEF
  4561                           postinc0	equ	0xFEE
  4562                           fsr0h	equ	0xFEA
  4563                           fsr0l	equ	0xFE9
  4564                           wreg	equ	0xFE8
  4565                           postdec1	equ	0xFE5
  4566                           fsr1l	equ	0xFE1
  4567                           indf2	equ	0xFDF
  4568                           postinc2	equ	0xFDE
  4569                           postdec2	equ	0xFDD
  4570                           plusw2	equ	0xFDB
  4571                           fsr2h	equ	0xFDA
  4572                           fsr2l	equ	0xFD9
  4573                           status	equ	0xFD8
  4574                           
  4575 ;; *************** function _SYSTEM_Initialize *****************
  4576 ;; Defined at:
  4577 ;;		line 112 in file "mcc_generated_files/mcc.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;		None               void
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4591 ;;      Params:         0       0       0       0       0       0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0
  4594 ;;      Totals:         0       0       0       0       0       0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    6
  4598 ;; This function calls:
  4599 ;;		_EUSART2_Initialize
  4600 ;;		_INTERRUPT_Initialize
  4601 ;;		_OSCILLATOR_Initialize
  4602 ;;		_PIN_MANAGER_Initialize
  4603 ;;		_TMR0_Initialize
  4604 ;; This function is called by:
  4605 ;;		_main
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text21
  4610  001260                     __ptext21:
  4611                           	opt stack 0
  4612  001260                     _SYSTEM_Initialize:
  4613                           	opt stack 24
  4614                           
  4615                           ;mcc.c: 113: OSCILLATOR_Initialize();
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;incstack = 0
  4619  001260  EC4E  F009         	call	_OSCILLATOR_Initialize	;wreg free
  4620                           
  4621                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  4622  001264  EC4B  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  4623                           
  4624                           ;mcc.c: 115: INTERRUPT_Initialize();
  4625  001268  EC5C  F009         	call	_INTERRUPT_Initialize	;wreg free
  4626                           
  4627                           ;mcc.c: 117: EUSART2_Initialize();
  4628  00126C  ECF7  F007         	call	_EUSART2_Initialize	;wreg free
  4629                           
  4630                           ;mcc.c: 118: TMR0_Initialize();
  4631  001270  EC24  F009         	call	_TMR0_Initialize	;wreg free
  4632  001274  0012               	return		;funcret
  4633  001276                     __end_of_SYSTEM_Initialize:
  4634                           	opt stack 0
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           intcon	equ	0xFF2
  4642                           indf0	equ	0xFEF
  4643                           postinc0	equ	0xFEE
  4644                           fsr0h	equ	0xFEA
  4645                           fsr0l	equ	0xFE9
  4646                           wreg	equ	0xFE8
  4647                           postdec1	equ	0xFE5
  4648                           fsr1l	equ	0xFE1
  4649                           indf2	equ	0xFDF
  4650                           postinc2	equ	0xFDE
  4651                           postdec2	equ	0xFDD
  4652                           plusw2	equ	0xFDB
  4653                           fsr2h	equ	0xFDA
  4654                           fsr2l	equ	0xFD9
  4655                           status	equ	0xFD8
  4656                           
  4657 ;; *************** function _TMR0_Initialize *****************
  4658 ;; Defined at:
  4659 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;		None
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;		None               void
  4666 ;; Registers used:
  4667 ;;		wreg, status,2, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4673 ;;      Params:         0       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0
  4675 ;;      Temps:          0       0       0       0       0       0       0
  4676 ;;      Totals:         0       0       0       0       0       0       0
  4677 ;;Total ram usage:        0 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    5
  4680 ;; This function calls:
  4681 ;;		_TMR0_StartTimer
  4682 ;; This function is called by:
  4683 ;;		_SYSTEM_Initialize
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           	psect	text22
  4688  001248                     __ptext22:
  4689                           	opt stack 0
  4690  001248                     _TMR0_Initialize:
  4691                           	opt stack 24
  4692                           
  4693                           ;tmr0.c: 68: T0CON = 0x91;
  4694                           
  4695                           ;incstack = 0
  4696  001248  0E91               	movlw	145
  4697  00124A  6ED5               	movwf	4053,c	;volatile
  4698                           
  4699                           ;tmr0.c: 71: TMR0H = 0x0A;
  4700  00124C  0E0A               	movlw	10
  4701  00124E  6ED7               	movwf	4055,c	;volatile
  4702                           
  4703                           ;tmr0.c: 74: TMR0L = 0xFF;
  4704  001250  68D6               	setf	4054,c	;volatile
  4705                           
  4706                           ;tmr0.c: 77: timer0ReloadVal16bit = 2815;
  4707  001252  0E0A               	movlw	10
  4708  001254  6E42               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4709  001256  6841               	setf	_timer0ReloadVal16bit,c	;volatile
  4710                           
  4711                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  4712  001258  94F2               	bcf	intcon,2,c	;volatile
  4713                           
  4714                           ;tmr0.c: 83: TMR0_StartTimer();
  4715  00125A  EC6C  F009         	call	_TMR0_StartTimer	;wreg free
  4716  00125E  0012               	return		;funcret
  4717  001260                     __end_of_TMR0_Initialize:
  4718                           	opt stack 0
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           intcon	equ	0xFF2
  4726                           indf0	equ	0xFEF
  4727                           postinc0	equ	0xFEE
  4728                           fsr0h	equ	0xFEA
  4729                           fsr0l	equ	0xFE9
  4730                           wreg	equ	0xFE8
  4731                           postdec1	equ	0xFE5
  4732                           fsr1l	equ	0xFE1
  4733                           indf2	equ	0xFDF
  4734                           postinc2	equ	0xFDE
  4735                           postdec2	equ	0xFDD
  4736                           plusw2	equ	0xFDB
  4737                           fsr2h	equ	0xFDA
  4738                           fsr2l	equ	0xFD9
  4739                           status	equ	0xFD8
  4740                           
  4741 ;; *************** function _TMR0_StartTimer *****************
  4742 ;; Defined at:
  4743 ;;		line 86 in file "mcc_generated_files/tmr0.c"
  4744 ;; Parameters:    Size  Location     Type
  4745 ;;		None
  4746 ;; Auto vars:     Size  Location     Type
  4747 ;;		None
  4748 ;; Return value:  Size  Location     Type
  4749 ;;		None               void
  4750 ;; Registers used:
  4751 ;;		None
  4752 ;; Tracked objects:
  4753 ;;		On entry : 0/0
  4754 ;;		On exit  : 0/0
  4755 ;;		Unchanged: 0/0
  4756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4757 ;;      Params:         0       0       0       0       0       0       0
  4758 ;;      Locals:         0       0       0       0       0       0       0
  4759 ;;      Temps:          0       0       0       0       0       0       0
  4760 ;;      Totals:         0       0       0       0       0       0       0
  4761 ;;Total ram usage:        0 bytes
  4762 ;; Hardware stack levels used:    1
  4763 ;; Hardware stack levels required when called:    4
  4764 ;; This function calls:
  4765 ;;		Nothing
  4766 ;; This function is called by:
  4767 ;;		_TMR0_Initialize
  4768 ;; This function uses a non-reentrant model
  4769 ;;
  4770                           
  4771                           	psect	text23
  4772  0012D8                     __ptext23:
  4773                           	opt stack 0
  4774  0012D8                     _TMR0_StartTimer:
  4775                           	opt stack 24
  4776                           
  4777                           ;tmr0.c: 88: T0CONbits.TMR0ON = 1;
  4778                           
  4779                           ;incstack = 0
  4780  0012D8  8ED5               	bsf	4053,7,c	;volatile
  4781  0012DA  0012               	return		;funcret
  4782  0012DC                     __end_of_TMR0_StartTimer:
  4783                           	opt stack 0
  4784                           tblptru	equ	0xFF8
  4785                           tblptrh	equ	0xFF7
  4786                           tblptrl	equ	0xFF6
  4787                           tablat	equ	0xFF5
  4788                           prodh	equ	0xFF4
  4789                           prodl	equ	0xFF3
  4790                           intcon	equ	0xFF2
  4791                           indf0	equ	0xFEF
  4792                           postinc0	equ	0xFEE
  4793                           fsr0h	equ	0xFEA
  4794                           fsr0l	equ	0xFE9
  4795                           wreg	equ	0xFE8
  4796                           postdec1	equ	0xFE5
  4797                           fsr1l	equ	0xFE1
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           plusw2	equ	0xFDB
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function _PIN_MANAGER_Initialize *****************
  4807 ;; Defined at:
  4808 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4822 ;;      Params:         0       0       0       0       0       0       0
  4823 ;;      Locals:         0       0       0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0
  4825 ;;      Totals:         0       0       0       0       0       0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    4
  4829 ;; This function calls:
  4830 ;;		Nothing
  4831 ;; This function is called by:
  4832 ;;		_SYSTEM_Initialize
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text24
  4837  000E96                     __ptext24:
  4838                           	opt stack 0
  4839  000E96                     _PIN_MANAGER_Initialize:
  4840                           	opt stack 25
  4841                           
  4842                           ;pin_manager.c: 51: LATB = 0x0;
  4843                           
  4844                           ;incstack = 0
  4845  000E96  0E00               	movlw	0
  4846  000E98  6E8A               	movwf	3978,c	;volatile
  4847                           
  4848                           ;pin_manager.c: 52: LATA = 0x0;
  4849  000E9A  0E00               	movlw	0
  4850  000E9C  6E89               	movwf	3977,c	;volatile
  4851                           
  4852                           ;pin_manager.c: 53: ANSELE = 0x7;
  4853  000E9E  0E07               	movlw	7
  4854  000EA0  010F               	movlb	15	; () banked
  4855  000EA2  6F3C               	movwf	60,b	;volatile
  4856                           
  4857                           ;pin_manager.c: 54: LATE = 0x0;
  4858  000EA4  0E00               	movlw	0
  4859  000EA6  6E8D               	movwf	3981,c	;volatile
  4860                           
  4861                           ;pin_manager.c: 55: LATD = 0x0;
  4862  000EA8  0E00               	movlw	0
  4863  000EAA  6E8C               	movwf	3980,c	;volatile
  4864                           
  4865                           ;pin_manager.c: 56: LATC = 0x0;
  4866  000EAC  0E00               	movlw	0
  4867  000EAE  6E8B               	movwf	3979,c	;volatile
  4868                           
  4869                           ;pin_manager.c: 57: ANSELA = 0x2F;
  4870  000EB0  0E2F               	movlw	47
  4871  000EB2  010F               	movlb	15	; () banked
  4872  000EB4  6F38               	movwf	56,b	;volatile
  4873                           
  4874                           ;pin_manager.c: 58: ANSELB = 0x3F;
  4875  000EB6  0E3F               	movlw	63
  4876  000EB8  010F               	movlb	15	; () banked
  4877  000EBA  6F39               	movwf	57,b	;volatile
  4878                           
  4879                           ;pin_manager.c: 59: ANSELC = 0xCC;
  4880  000EBC  0ECC               	movlw	204
  4881  000EBE  010F               	movlb	15	; () banked
  4882  000EC0  6F3A               	movwf	58,b	;volatile
  4883                           
  4884                           ;pin_manager.c: 60: ANSELD = 0x3F;
  4885  000EC2  0E3F               	movlw	63
  4886  000EC4  010F               	movlb	15	; () banked
  4887  000EC6  6F3B               	movwf	59,b	;volatile
  4888                           
  4889                           ;pin_manager.c: 61: WPUB = 0xFC;
  4890  000EC8  0EFC               	movlw	252
  4891  000ECA  6E61               	movwf	3937,c	;volatile
  4892                           
  4893                           ;pin_manager.c: 62: TRISD = 0xF2;
  4894  000ECC  0EF2               	movlw	242
  4895  000ECE  6E95               	movwf	3989,c	;volatile
  4896                           
  4897                           ;pin_manager.c: 63: TRISE = 0x7;
  4898  000ED0  0E07               	movlw	7
  4899  000ED2  6E96               	movwf	3990,c	;volatile
  4900                           
  4901                           ;pin_manager.c: 64: TRISB = 0xC4;
  4902  000ED4  0EC4               	movlw	196
  4903  000ED6  6E93               	movwf	3987,c	;volatile
  4904                           
  4905                           ;pin_manager.c: 65: TRISC = 0xD4;
  4906  000ED8  0ED4               	movlw	212
  4907  000EDA  6E94               	movwf	3988,c	;volatile
  4908                           
  4909                           ;pin_manager.c: 66: TRISA = 0x37;
  4910  000EDC  0E37               	movlw	55
  4911  000EDE  6E92               	movwf	3986,c	;volatile
  4912                           
  4913                           ; BSR set to: 15
  4914                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  4915  000EE0  9EF1               	bcf	intcon2,7,c	;volatile
  4916                           
  4917                           ; BSR set to: 15
  4918                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  4919  000EE2  96F2               	bcf	intcon,3,c	;volatile
  4920                           
  4921                           ; BSR set to: 15
  4922  000EE4  0012               	return		;funcret
  4923  000EE6                     __end_of_PIN_MANAGER_Initialize:
  4924                           	opt stack 0
  4925                           tblptru	equ	0xFF8
  4926                           tblptrh	equ	0xFF7
  4927                           tblptrl	equ	0xFF6
  4928                           tablat	equ	0xFF5
  4929                           prodh	equ	0xFF4
  4930                           prodl	equ	0xFF3
  4931                           intcon	equ	0xFF2
  4932                           intcon2	equ	0xFF1
  4933                           indf0	equ	0xFEF
  4934                           postinc0	equ	0xFEE
  4935                           fsr0h	equ	0xFEA
  4936                           fsr0l	equ	0xFE9
  4937                           wreg	equ	0xFE8
  4938                           postdec1	equ	0xFE5
  4939                           fsr1l	equ	0xFE1
  4940                           indf2	equ	0xFDF
  4941                           postinc2	equ	0xFDE
  4942                           postdec2	equ	0xFDD
  4943                           plusw2	equ	0xFDB
  4944                           fsr2h	equ	0xFDA
  4945                           fsr2l	equ	0xFD9
  4946                           status	equ	0xFD8
  4947                           
  4948 ;; *************** function _OSCILLATOR_Initialize *****************
  4949 ;; Defined at:
  4950 ;;		line 121 in file "mcc_generated_files/mcc.c"
  4951 ;; Parameters:    Size  Location     Type
  4952 ;;		None
  4953 ;; Auto vars:     Size  Location     Type
  4954 ;;		None
  4955 ;; Return value:  Size  Location     Type
  4956 ;;		None               void
  4957 ;; Registers used:
  4958 ;;		wreg, status,2
  4959 ;; Tracked objects:
  4960 ;;		On entry : 0/0
  4961 ;;		On exit  : 0/0
  4962 ;;		Unchanged: 0/0
  4963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4964 ;;      Params:         0       0       0       0       0       0       0
  4965 ;;      Locals:         0       0       0       0       0       0       0
  4966 ;;      Temps:          0       0       0       0       0       0       0
  4967 ;;      Totals:         0       0       0       0       0       0       0
  4968 ;;Total ram usage:        0 bytes
  4969 ;; Hardware stack levels used:    1
  4970 ;; Hardware stack levels required when called:    4
  4971 ;; This function calls:
  4972 ;;		Nothing
  4973 ;; This function is called by:
  4974 ;;		_SYSTEM_Initialize
  4975 ;; This function uses a non-reentrant model
  4976 ;;
  4977                           
  4978                           	psect	text25
  4979  00129C                     __ptext25:
  4980                           	opt stack 0
  4981  00129C                     _OSCILLATOR_Initialize:
  4982                           	opt stack 25
  4983                           
  4984                           ;mcc.c: 123: OSCCON = 0x70;
  4985                           
  4986                           ; BSR set to: 15
  4987                           ;incstack = 0
  4988  00129C  0E70               	movlw	112
  4989  00129E  6ED3               	movwf	4051,c	;volatile
  4990                           
  4991                           ;mcc.c: 125: OSCCON2 = 0x04;
  4992  0012A0  0E04               	movlw	4
  4993  0012A2  6ED2               	movwf	4050,c	;volatile
  4994                           
  4995                           ;mcc.c: 127: OSCTUNE = 0x00;
  4996  0012A4  0E00               	movlw	0
  4997  0012A6  6E9B               	movwf	3995,c	;volatile
  4998  0012A8  0012               	return		;funcret
  4999  0012AA                     __end_of_OSCILLATOR_Initialize:
  5000                           	opt stack 0
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           intcon2	equ	0xFF1
  5009                           indf0	equ	0xFEF
  5010                           postinc0	equ	0xFEE
  5011                           fsr0h	equ	0xFEA
  5012                           fsr0l	equ	0xFE9
  5013                           wreg	equ	0xFE8
  5014                           postdec1	equ	0xFE5
  5015                           fsr1l	equ	0xFE1
  5016                           indf2	equ	0xFDF
  5017                           postinc2	equ	0xFDE
  5018                           postdec2	equ	0xFDD
  5019                           plusw2	equ	0xFDB
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function _INTERRUPT_Initialize *****************
  5025 ;; Defined at:
  5026 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;		None
  5031 ;; Return value:  Size  Location     Type
  5032 ;;		None               void
  5033 ;; Registers used:
  5034 ;;		None
  5035 ;; Tracked objects:
  5036 ;;		On entry : 0/0
  5037 ;;		On exit  : 0/0
  5038 ;;		Unchanged: 0/0
  5039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5040 ;;      Params:         0       0       0       0       0       0       0
  5041 ;;      Locals:         0       0       0       0       0       0       0
  5042 ;;      Temps:          0       0       0       0       0       0       0
  5043 ;;      Totals:         0       0       0       0       0       0       0
  5044 ;;Total ram usage:        0 bytes
  5045 ;; Hardware stack levels used:    1
  5046 ;; Hardware stack levels required when called:    4
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_SYSTEM_Initialize
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text26
  5055  0012B8                     __ptext26:
  5056                           	opt stack 0
  5057  0012B8                     _INTERRUPT_Initialize:
  5058                           	opt stack 25
  5059                           
  5060                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  5061                           
  5062                           ;incstack = 0
  5063  0012B8  9ED0               	bcf	4048,7,c	;volatile
  5064                           
  5065                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  5066  0012BA  9AA5               	bcf	4005,5,c	;volatile
  5067                           
  5068                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  5069  0012BC  98A5               	bcf	4005,4,c	;volatile
  5070                           
  5071                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  5072  0012BE  9A9F               	bcf	3999,5,c	;volatile
  5073                           
  5074                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  5075  0012C0  989F               	bcf	3999,4,c	;volatile
  5076  0012C2  0012               	return		;funcret
  5077  0012C4                     __end_of_INTERRUPT_Initialize:
  5078                           	opt stack 0
  5079                           tblptru	equ	0xFF8
  5080                           tblptrh	equ	0xFF7
  5081                           tblptrl	equ	0xFF6
  5082                           tablat	equ	0xFF5
  5083                           prodh	equ	0xFF4
  5084                           prodl	equ	0xFF3
  5085                           intcon	equ	0xFF2
  5086                           intcon2	equ	0xFF1
  5087                           indf0	equ	0xFEF
  5088                           postinc0	equ	0xFEE
  5089                           fsr0h	equ	0xFEA
  5090                           fsr0l	equ	0xFE9
  5091                           wreg	equ	0xFE8
  5092                           postdec1	equ	0xFE5
  5093                           fsr1l	equ	0xFE1
  5094                           indf2	equ	0xFDF
  5095                           postinc2	equ	0xFDE
  5096                           postdec2	equ	0xFDD
  5097                           plusw2	equ	0xFDB
  5098                           fsr2h	equ	0xFDA
  5099                           fsr2l	equ	0xFD9
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _EUSART2_Initialize *****************
  5103 ;; Defined at:
  5104 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;		None               void
  5111 ;; Registers used:
  5112 ;;		wreg, status,2
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5118 ;;      Params:         0       0       0       0       0       0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0
  5121 ;;      Totals:         0       0       0       0       0       0       0
  5122 ;;Total ram usage:        0 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    4
  5125 ;; This function calls:
  5126 ;;		Nothing
  5127 ;; This function is called by:
  5128 ;;		_SYSTEM_Initialize
  5129 ;; This function uses a non-reentrant model
  5130 ;;
  5131                           
  5132                           	psect	text27
  5133  000FEE                     __ptext27:
  5134                           	opt stack 0
  5135  000FEE                     _EUSART2_Initialize:
  5136                           	opt stack 25
  5137                           
  5138                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  5139                           
  5140                           ;incstack = 0
  5141  000FEE  9AA3               	bcf	4003,5,c	;volatile
  5142                           
  5143                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  5144  000FF0  98A3               	bcf	4003,4,c	;volatile
  5145                           
  5146                           ;eusart2.c: 84: BAUD2CON = 0x48;
  5147  000FF2  0E48               	movlw	72
  5148  000FF4  6E70               	movwf	3952,c	;volatile
  5149                           
  5150                           ;eusart2.c: 87: RC2STA = 0x90;
  5151  000FF6  0E90               	movlw	144
  5152  000FF8  6E71               	movwf	3953,c	;volatile
  5153                           
  5154                           ;eusart2.c: 90: TX2STA = 0x26;
  5155  000FFA  0E26               	movlw	38
  5156  000FFC  6E72               	movwf	3954,c	;volatile
  5157                           
  5158                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  5159  000FFE  0EA0               	movlw	160
  5160  001000  6E75               	movwf	3957,c	;volatile
  5161                           
  5162                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  5163  001002  0E01               	movlw	1
  5164  001004  6E76               	movwf	3958,c	;volatile
  5165                           
  5166                           ;eusart2.c: 100: eusart2TxHead = 0;
  5167  001006  0E00               	movlw	0
  5168  001008  6E38               	movwf	_eusart2TxHead,c
  5169                           
  5170                           ;eusart2.c: 101: eusart2TxTail = 0;
  5171  00100A  0E00               	movlw	0
  5172  00100C  6E39               	movwf	_eusart2TxTail,c
  5173                           
  5174                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  5175  00100E  0E08               	movlw	8
  5176  001010  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5177                           
  5178                           ;eusart2.c: 104: eusart2RxHead = 0;
  5179  001012  0E00               	movlw	0
  5180  001014  6E36               	movwf	_eusart2RxHead,c
  5181                           
  5182                           ;eusart2.c: 105: eusart2RxTail = 0;
  5183  001016  0E00               	movlw	0
  5184  001018  6E37               	movwf	_eusart2RxTail,c
  5185                           
  5186                           ;eusart2.c: 106: eusart2RxCount = 0;
  5187  00101A  0E00               	movlw	0
  5188  00101C  6E35               	movwf	_eusart2RxCount,c	;volatile
  5189                           
  5190                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  5191  00101E  8AA3               	bsf	4003,5,c	;volatile
  5192  001020  0012               	return		;funcret
  5193  001022                     __end_of_EUSART2_Initialize:
  5194                           	opt stack 0
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           intcon2	equ	0xFF1
  5203                           indf0	equ	0xFEF
  5204                           postinc0	equ	0xFEE
  5205                           fsr0h	equ	0xFEA
  5206                           fsr0l	equ	0xFE9
  5207                           wreg	equ	0xFE8
  5208                           postdec1	equ	0xFE5
  5209                           fsr1l	equ	0xFE1
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           postdec2	equ	0xFDD
  5213                           plusw2	equ	0xFDB
  5214                           fsr2h	equ	0xFDA
  5215                           fsr2l	equ	0xFD9
  5216                           status	equ	0xFD8
  5217                           
  5218 ;; *************** function _NokiaStr *****************
  5219 ;; Defined at:
  5220 ;;		line 125 in file "NokiaLCD.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  str             2   36[COMRAM] PTR unsigned char 
  5223 ;;		 -> STR_1(13), 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;		None
  5226 ;; Return value:  Size  Location     Type
  5227 ;;		None               void
  5228 ;; Registers used:
  5229 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5235 ;;      Params:         2       0       0       0       0       0       0
  5236 ;;      Locals:         0       0       0       0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0
  5238 ;;      Totals:         2       0       0       0       0       0       0
  5239 ;;Total ram usage:        2 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    7
  5242 ;; This function calls:
  5243 ;;		_LcdCharacter
  5244 ;; This function is called by:
  5245 ;;		_main
  5246 ;; This function uses a non-reentrant model
  5247 ;;
  5248                           
  5249                           	psect	text28
  5250  001104                     __ptext28:
  5251                           	opt stack 0
  5252  001104                     _NokiaStr:
  5253                           	opt stack 23
  5254                           
  5255                           ;NokiaLCD.c: 126: while (*str)
  5256                           
  5257                           ;incstack = 0
  5258  001104  D00A               	goto	l3432
  5259  001106                     l3428:
  5260                           
  5261                           ;NokiaLCD.c: 127: {
  5262                           ;NokiaLCD.c: 128: LcdCharacter(*str++);
  5263  001106  C025  FFF6         	movff	NokiaStr@str,tblptrl
  5264  00110A  C026  FFF7         	movff	NokiaStr@str+1,tblptrh
  5265  00110E                     	if	0	;tblptru may be non-zero
  5266  00110E                     	endif
  5267  00110E                     	if	0	;tblptru may be non-zero
  5268  00110E                     	endif
  5269  00110E  0008               	tblrd		*
  5270  001110  50F5               	movf	tablat,w,c
  5271  001112  EC86  F005         	call	_LcdCharacter
  5272  001116  4A25               	infsnz	NokiaStr@str,f,c
  5273  001118  2A26               	incf	NokiaStr@str+1,f,c
  5274  00111A                     l3432:
  5275  00111A  C025  FFF6         	movff	NokiaStr@str,tblptrl
  5276  00111E  C026  FFF7         	movff	NokiaStr@str+1,tblptrh
  5277  001122                     	if	0	;tblptru may be non-zero
  5278  001122                     	endif
  5279  001122                     	if	0	;tblptru may be non-zero
  5280  001122                     	endif
  5281  001122  0008               	tblrd		*
  5282  001124  50F5               	movf	tablat,w,c
  5283  001126  0900               	iorlw	0
  5284  001128  B4D8               	btfsc	status,2,c
  5285  00112A  0012               	return	
  5286  00112C  D7EC               	goto	l3428
  5287  00112E                     __end_of_NokiaStr:
  5288                           	opt stack 0
  5289                           tblptru	equ	0xFF8
  5290                           tblptrh	equ	0xFF7
  5291                           tblptrl	equ	0xFF6
  5292                           tablat	equ	0xFF5
  5293                           prodh	equ	0xFF4
  5294                           prodl	equ	0xFF3
  5295                           intcon	equ	0xFF2
  5296                           intcon2	equ	0xFF1
  5297                           indf0	equ	0xFEF
  5298                           postinc0	equ	0xFEE
  5299                           fsr0h	equ	0xFEA
  5300                           fsr0l	equ	0xFE9
  5301                           wreg	equ	0xFE8
  5302                           postdec1	equ	0xFE5
  5303                           fsr1l	equ	0xFE1
  5304                           indf2	equ	0xFDF
  5305                           postinc2	equ	0xFDE
  5306                           postdec2	equ	0xFDD
  5307                           plusw2	equ	0xFDB
  5308                           fsr2h	equ	0xFDA
  5309                           fsr2l	equ	0xFD9
  5310                           status	equ	0xFD8
  5311                           
  5312 ;; *************** function _LcdCharacter *****************
  5313 ;; Defined at:
  5314 ;;		line 108 in file "NokiaLCD.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;  character       1    wreg     unsigned char 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  character       1    0[BANK0 ] unsigned char 
  5319 ;;  index           2    1[BANK0 ] int 
  5320 ;; Return value:  Size  Location     Type
  5321 ;;		None               void
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5329 ;;      Params:         0       0       0       0       0       0       0
  5330 ;;      Locals:         0       3       0       0       0       0       0
  5331 ;;      Temps:          2       0       0       0       0       0       0
  5332 ;;      Totals:         2       3       0       0       0       0       0
  5333 ;;Total ram usage:        5 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    6
  5336 ;; This function calls:
  5337 ;;		_LCDwrite
  5338 ;;		___wmul
  5339 ;; This function is called by:
  5340 ;;		_NokiaStr
  5341 ;; This function uses a non-reentrant model
  5342 ;;
  5343                           
  5344                           	psect	text29
  5345  000B0C                     __ptext29:
  5346                           	opt stack 0
  5347  000B0C                     _LcdCharacter:
  5348                           	opt stack 23
  5349                           
  5350                           ;incstack = 0
  5351                           ;LcdCharacter@character stored from wreg
  5352  000B0C  0100               	movlb	0	; () banked
  5353  000B0E  6FC0               	movwf	LcdCharacter@character& (0+255),b
  5354                           
  5355                           ;NokiaLCD.c: 110: LCDwrite(0, 0x00);
  5356  000B10  0E00               	movlw	0
  5357  000B12  6E21               	movwf	LCDwrite@data,c
  5358  000B14  0E00               	movlw	0
  5359  000B16  EC17  F009         	call	_LCDwrite
  5360                           
  5361                           ;NokiaLCD.c: 111: for (int index = 0; index < 5; index++)
  5362  000B1A  0E00               	movlw	0
  5363  000B1C  0100               	movlb	0	; () banked
  5364  000B1E  6FC2               	movwf	(LcdCharacter@index+1)& (0+255),b
  5365  000B20  0E00               	movlw	0
  5366  000B22  6FC1               	movwf	LcdCharacter@index& (0+255),b
  5367  000B24                     l3396:
  5368                           
  5369                           ; BSR set to: 0
  5370  000B24  0100               	movlb	0	; () banked
  5371  000B26  BFC2               	btfsc	(LcdCharacter@index+1)& (0+255),7,b
  5372  000B28  D008               	goto	l3400
  5373  000B2A  0100               	movlb	0	; () banked
  5374  000B2C  51C2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  5375  000B2E  E12E               	bnz	l3406
  5376  000B30  0E05               	movlw	5
  5377  000B32  0100               	movlb	0	; () banked
  5378  000B34  5DC1               	subwf	LcdCharacter@index& (0+255),w,b
  5379  000B36  B0D8               	btfsc	status,0,c
  5380  000B38  D029               	goto	l3406
  5381  000B3A                     l3400:
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;NokiaLCD.c: 112: {
  5385                           ;NokiaLCD.c: 113: LCDwrite(0, FONTLOOKUP[character - 0x20][index]);
  5386  000B3A  0EE0               	movlw	224
  5387  000B3C  0100               	movlb	0	; () banked
  5388  000B3E  25C0               	addwf	LcdCharacter@character& (0+255),w,b
  5389  000B40  6E1B               	movwf	___wmul@multiplier,c
  5390  000B42  6A1C               	clrf	___wmul@multiplier+1,c
  5391  000B44  0EFF               	movlw	255
  5392  000B46  221C               	addwfc	___wmul@multiplier+1,f,c
  5393  000B48  0E00               	movlw	0
  5394  000B4A  6E1E               	movwf	___wmul@multiplicand+1,c
  5395  000B4C  0E05               	movlw	5
  5396  000B4E  6E1D               	movwf	___wmul@multiplicand,c
  5397  000B50  ECE7  F008         	call	___wmul	;wreg free
  5398  000B54  0E07               	movlw	low _FONTLOOKUP
  5399  000B56  6E23               	movwf	??_LcdCharacter& (0+255),c
  5400  000B58  0E7E               	movlw	high _FONTLOOKUP
  5401  000B5A  6E24               	movwf	(??_LcdCharacter+1)& (0+255),c
  5402  000B5C  501B               	movf	?___wmul,w,c
  5403  000B5E  2623               	addwf	??_LcdCharacter,f,c
  5404  000B60  501C               	movf	?___wmul+1,w,c
  5405  000B62  2224               	addwfc	??_LcdCharacter+1,f,c
  5406  000B64  0100               	movlb	0	; () banked
  5407  000B66  51C1               	movf	LcdCharacter@index& (0+255),w,b
  5408  000B68  2623               	addwf	??_LcdCharacter,f,c
  5409  000B6A  0100               	movlb	0	; () banked
  5410  000B6C  51C2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  5411  000B6E  2224               	addwfc	??_LcdCharacter+1,f,c
  5412  000B70  C023  FFF6         	movff	??_LcdCharacter,tblptrl
  5413  000B74  C024  FFF7         	movff	??_LcdCharacter+1,tblptrh
  5414  000B78                     	if	0	;tblptru may be non-zero
  5415  000B78                     	endif
  5416  000B78                     	if	0	;tblptru may be non-zero
  5417  000B78                     	endif
  5418  000B78  0008               	tblrd		*
  5419  000B7A  CFF5 F021          	movff	tablat,LCDwrite@data
  5420  000B7E  0E00               	movlw	0
  5421  000B80  EC17  F009         	call	_LCDwrite
  5422  000B84  0100               	movlb	0	; () banked
  5423  000B86  4BC1               	infsnz	LcdCharacter@index& (0+255),f,b
  5424  000B88  2BC2               	incf	(LcdCharacter@index+1)& (0+255),f,b
  5425  000B8A  D7CC               	goto	l3396
  5426  000B8C                     l3406:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;NokiaLCD.c: 114: }
  5430                           ;NokiaLCD.c: 115: LCDwrite(0, 0x00);
  5431  000B8C  0E00               	movlw	0
  5432  000B8E  6E21               	movwf	LCDwrite@data,c
  5433  000B90  0E00               	movlw	0
  5434  000B92  EC17  F009         	call	_LCDwrite
  5435  000B96  0012               	return		;funcret
  5436  000B98                     __end_of_LcdCharacter:
  5437                           	opt stack 0
  5438                           tblptru	equ	0xFF8
  5439                           tblptrh	equ	0xFF7
  5440                           tblptrl	equ	0xFF6
  5441                           tablat	equ	0xFF5
  5442                           prodh	equ	0xFF4
  5443                           prodl	equ	0xFF3
  5444                           intcon	equ	0xFF2
  5445                           intcon2	equ	0xFF1
  5446                           indf0	equ	0xFEF
  5447                           postinc0	equ	0xFEE
  5448                           fsr0h	equ	0xFEA
  5449                           fsr0l	equ	0xFE9
  5450                           wreg	equ	0xFE8
  5451                           postdec1	equ	0xFE5
  5452                           fsr1l	equ	0xFE1
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           postdec2	equ	0xFDD
  5456                           plusw2	equ	0xFDB
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function ___wmul *****************
  5462 ;; Defined at:
  5463 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  multiplier      2   26[COMRAM] unsigned int 
  5466 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  product         2   30[COMRAM] unsigned int 
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  2   26[COMRAM] unsigned int 
  5471 ;; Registers used:
  5472 ;;		wreg, status,2, status,0, prodl, prodh
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5478 ;;      Params:         4       0       0       0       0       0       0
  5479 ;;      Locals:         2       0       0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0
  5481 ;;      Totals:         6       0       0       0       0       0       0
  5482 ;;Total ram usage:        6 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:    4
  5485 ;; This function calls:
  5486 ;;		Nothing
  5487 ;; This function is called by:
  5488 ;;		_LcdCharacter
  5489 ;; This function uses a non-reentrant model
  5490 ;;
  5491                           
  5492                           	psect	text30
  5493  0011CE                     __ptext30:
  5494                           	opt stack 0
  5495  0011CE                     ___wmul:
  5496                           	opt stack 24
  5497                           
  5498                           ;incstack = 0
  5499  0011CE  501B               	movf	___wmul@multiplier,w,c
  5500  0011D0  021D               	mulwf	___wmul@multiplicand,c
  5501  0011D2  CFF3 F01F          	movff	prodl,___wmul@product
  5502  0011D6  CFF4 F020          	movff	prodh,___wmul@product+1
  5503  0011DA  501B               	movf	___wmul@multiplier,w,c
  5504  0011DC  021E               	mulwf	___wmul@multiplicand+1,c
  5505  0011DE  50F3               	movf	prodl,w,c
  5506  0011E0  2620               	addwf	___wmul@product+1,f,c
  5507  0011E2  501C               	movf	___wmul@multiplier+1,w,c
  5508  0011E4  021D               	mulwf	___wmul@multiplicand,c
  5509  0011E6  50F3               	movf	prodl,w,c
  5510  0011E8  2620               	addwf	___wmul@product+1,f,c
  5511  0011EA  C01F  F01B         	movff	___wmul@product,?___wmul
  5512  0011EE  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  5513  0011F2  0012               	return	
  5514  0011F4                     __end_of___wmul:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           intcon2	equ	0xFF1
  5524                           indf0	equ	0xFEF
  5525                           postinc0	equ	0xFEE
  5526                           fsr0h	equ	0xFEA
  5527                           fsr0l	equ	0xFE9
  5528                           wreg	equ	0xFE8
  5529                           postdec1	equ	0xFE5
  5530                           fsr1l	equ	0xFE1
  5531                           indf2	equ	0xFDF
  5532                           postinc2	equ	0xFDE
  5533                           postdec2	equ	0xFDD
  5534                           plusw2	equ	0xFDB
  5535                           fsr2h	equ	0xFDA
  5536                           fsr2l	equ	0xFD9
  5537                           status	equ	0xFD8
  5538                           
  5539 ;; *************** function _NokiaStart *****************
  5540 ;; Defined at:
  5541 ;;		line 24 in file "NokiaLCD.c"
  5542 ;; Parameters:    Size  Location     Type
  5543 ;;		None
  5544 ;; Auto vars:     Size  Location     Type
  5545 ;;		None
  5546 ;; Return value:  Size  Location     Type
  5547 ;;		None               void
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0, cstack
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5555 ;;      Params:         0       0       0       0       0       0       0
  5556 ;;      Locals:         0       0       0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0
  5558 ;;      Totals:         0       0       0       0       0       0       0
  5559 ;;Total ram usage:        0 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    7
  5562 ;; This function calls:
  5563 ;;		_Delay
  5564 ;;		_LCDwrite
  5565 ;;		_SPI1_Initialize
  5566 ;;		_blackLcd
  5567 ;;		_clearLcd
  5568 ;; This function is called by:
  5569 ;;		_main
  5570 ;; This function uses a non-reentrant model
  5571 ;;
  5572                           
  5573                           	psect	text31
  5574  000C20                     __ptext31:
  5575                           	opt stack 0
  5576  000C20                     _NokiaStart:
  5577                           	opt stack 23
  5578                           
  5579                           ;NokiaLCD.c: 25: TRISBbits.TRISB6 = 0;
  5580                           
  5581                           ;incstack = 0
  5582  000C20  9C93               	bcf	3987,6,c	;volatile
  5583                           
  5584                           ;NokiaLCD.c: 26: do { TRISD0 = 0; } while(0);
  5585  000C22  9095               	bcf	3989,0,c	;volatile
  5586                           
  5587                           ;NokiaLCD.c: 27: do { TRISD3 = 0; } while(0);
  5588  000C24  9695               	bcf	3989,3,c	;volatile
  5589                           
  5590                           ;NokiaLCD.c: 28: do { TRISD2 = 0; } while(0);
  5591  000C26  9495               	bcf	3989,2,c	;volatile
  5592                           
  5593                           ;NokiaLCD.c: 29: do { LATD0 = 1; } while(0);
  5594  000C28  808C               	bsf	3980,0,c	;volatile
  5595                           
  5596                           ;NokiaLCD.c: 30: SPI1_Initialize();
  5597  000C2A  EC55  F009         	call	_SPI1_Initialize	;wreg free
  5598                           
  5599                           ;NokiaLCD.c: 31: LATBbits.LATB6 = 1;
  5600  000C2E  8C8A               	bsf	3978,6,c	;volatile
  5601                           
  5602                           ;NokiaLCD.c: 32: Delay(100);
  5603  000C30  0E64               	movlw	100
  5604  000C32  6E1B               	movwf	Delay@wait,c
  5605  000C34  0E00               	movlw	0
  5606  000C36  6E1C               	movwf	Delay@wait+1,c
  5607  000C38  0E00               	movlw	0
  5608  000C3A  6E1D               	movwf	Delay@wait+2,c
  5609  000C3C  0E00               	movlw	0
  5610  000C3E  6E1E               	movwf	Delay@wait+3,c
  5611  000C40  EC73  F007         	call	_Delay	;wreg free
  5612                           
  5613                           ;NokiaLCD.c: 33: LATBbits.LATB6 = 0;
  5614  000C44  9C8A               	bcf	3978,6,c	;volatile
  5615                           
  5616                           ;NokiaLCD.c: 34: Delay(100);
  5617  000C46  0E64               	movlw	100
  5618  000C48  6E1B               	movwf	Delay@wait,c
  5619  000C4A  0E00               	movlw	0
  5620  000C4C  6E1C               	movwf	Delay@wait+1,c
  5621  000C4E  0E00               	movlw	0
  5622  000C50  6E1D               	movwf	Delay@wait+2,c
  5623  000C52  0E00               	movlw	0
  5624  000C54  6E1E               	movwf	Delay@wait+3,c
  5625  000C56  EC73  F007         	call	_Delay	;wreg free
  5626                           
  5627                           ;NokiaLCD.c: 35: LATBbits.LATB6 = 1;
  5628  000C5A  8C8A               	bsf	3978,6,c	;volatile
  5629                           
  5630                           ;NokiaLCD.c: 36: LCDwrite(1, 0x21);
  5631  000C5C  0E21               	movlw	33
  5632  000C5E  6E21               	movwf	LCDwrite@data,c
  5633  000C60  0E01               	movlw	1
  5634  000C62  EC17  F009         	call	_LCDwrite
  5635                           
  5636                           ;NokiaLCD.c: 37: LCDwrite(1, 0xB1);
  5637  000C66  0EB1               	movlw	177
  5638  000C68  6E21               	movwf	LCDwrite@data,c
  5639  000C6A  0E01               	movlw	1
  5640  000C6C  EC17  F009         	call	_LCDwrite
  5641                           
  5642                           ;NokiaLCD.c: 38: LCDwrite(1, 0x04);
  5643  000C70  0E04               	movlw	4
  5644  000C72  6E21               	movwf	LCDwrite@data,c
  5645  000C74  0E01               	movlw	1
  5646  000C76  EC17  F009         	call	_LCDwrite
  5647                           
  5648                           ;NokiaLCD.c: 39: LCDwrite(1, 0x14);
  5649  000C7A  0E14               	movlw	20
  5650  000C7C  6E21               	movwf	LCDwrite@data,c
  5651  000C7E  0E01               	movlw	1
  5652  000C80  EC17  F009         	call	_LCDwrite
  5653                           
  5654                           ;NokiaLCD.c: 40: LCDwrite(1, 0x20);
  5655  000C84  0E20               	movlw	32
  5656  000C86  6E21               	movwf	LCDwrite@data,c
  5657  000C88  0E01               	movlw	1
  5658  000C8A  EC17  F009         	call	_LCDwrite
  5659                           
  5660                           ;NokiaLCD.c: 41: LCDwrite(1, 0x0C);
  5661  000C8E  0E0C               	movlw	12
  5662  000C90  6E21               	movwf	LCDwrite@data,c
  5663  000C92  0E01               	movlw	1
  5664  000C94  EC17  F009         	call	_LCDwrite
  5665                           
  5666                           ;NokiaLCD.c: 42: clearLcd();
  5667  000C98  ECAC  F008         	call	_clearLcd	;wreg free
  5668                           
  5669                           ;NokiaLCD.c: 43: blackLcd();
  5670  000C9C  ECC0  F008         	call	_blackLcd	;wreg free
  5671  000CA0  0012               	return		;funcret
  5672  000CA2                     __end_of_NokiaStart:
  5673                           	opt stack 0
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           intcon	equ	0xFF2
  5681                           intcon2	equ	0xFF1
  5682                           indf0	equ	0xFEF
  5683                           postinc0	equ	0xFEE
  5684                           fsr0h	equ	0xFEA
  5685                           fsr0l	equ	0xFE9
  5686                           wreg	equ	0xFE8
  5687                           postdec1	equ	0xFE5
  5688                           fsr1l	equ	0xFE1
  5689                           indf2	equ	0xFDF
  5690                           postinc2	equ	0xFDE
  5691                           postdec2	equ	0xFDD
  5692                           plusw2	equ	0xFDB
  5693                           fsr2h	equ	0xFDA
  5694                           fsr2l	equ	0xFD9
  5695                           status	equ	0xFD8
  5696                           
  5697 ;; *************** function _clearLcd *****************
  5698 ;; Defined at:
  5699 ;;		line 65 in file "NokiaLCD.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;		None
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;  res             2   34[COMRAM] int 
  5704 ;; Return value:  Size  Location     Type
  5705 ;;		None               void
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5713 ;;      Params:         0       0       0       0       0       0       0
  5714 ;;      Locals:         2       0       0       0       0       0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0
  5716 ;;      Totals:         2       0       0       0       0       0       0
  5717 ;;Total ram usage:        2 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    6
  5720 ;; This function calls:
  5721 ;;		_LCDwrite
  5722 ;; This function is called by:
  5723 ;;		_NokiaStart
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           	psect	text32
  5728  001158                     __ptext32:
  5729                           	opt stack 0
  5730  001158                     _clearLcd:
  5731                           	opt stack 23
  5732                           
  5733                           ;NokiaLCD.c: 66: int res;
  5734                           ;NokiaLCD.c: 67: for(res=0;res<504;res++){
  5735                           
  5736                           ;incstack = 0
  5737  001158  0E00               	movlw	0
  5738  00115A  6E24               	movwf	clearLcd@res+1,c
  5739  00115C  0E00               	movlw	0
  5740  00115E  6E23               	movwf	clearLcd@res,c
  5741  001160                     l3370:
  5742  001160  BE24               	btfsc	clearLcd@res+1,7,c
  5743  001162  D006               	goto	l3374
  5744  001164  0EF8               	movlw	248
  5745  001166  5C23               	subwf	clearLcd@res,w,c
  5746  001168  0E01               	movlw	1
  5747  00116A  5824               	subwfb	clearLcd@res+1,w,c
  5748  00116C  B0D8               	btfsc	status,0,c
  5749  00116E  0012               	return	
  5750  001170                     l3374:
  5751                           
  5752                           ;NokiaLCD.c: 68: LCDwrite(0, 0x00);
  5753  001170  0E00               	movlw	0
  5754  001172  6E21               	movwf	LCDwrite@data,c
  5755  001174  0E00               	movlw	0
  5756  001176  EC17  F009         	call	_LCDwrite
  5757  00117A  4A23               	infsnz	clearLcd@res,f,c
  5758  00117C  2A24               	incf	clearLcd@res+1,f,c
  5759  00117E  D7F0               	goto	l3370
  5760  001180                     __end_of_clearLcd:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           indf0	equ	0xFEF
  5771                           postinc0	equ	0xFEE
  5772                           fsr0h	equ	0xFEA
  5773                           fsr0l	equ	0xFE9
  5774                           wreg	equ	0xFE8
  5775                           postdec1	equ	0xFE5
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           plusw2	equ	0xFDB
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _blackLcd *****************
  5786 ;; Defined at:
  5787 ;;		line 80 in file "NokiaLCD.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  res             2   34[COMRAM] int 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;		None               void
  5794 ;; Registers used:
  5795 ;;		wreg, status,2, status,0, cstack
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5801 ;;      Params:         0       0       0       0       0       0       0
  5802 ;;      Locals:         2       0       0       0       0       0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0
  5804 ;;      Totals:         2       0       0       0       0       0       0
  5805 ;;Total ram usage:        2 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    6
  5808 ;; This function calls:
  5809 ;;		_LCDwrite
  5810 ;; This function is called by:
  5811 ;;		_NokiaStart
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text33
  5816  001180                     __ptext33:
  5817                           	opt stack 0
  5818  001180                     _blackLcd:
  5819                           	opt stack 23
  5820                           
  5821                           ;NokiaLCD.c: 81: int res;
  5822                           ;NokiaLCD.c: 82: for(res=0;res<504;res++){
  5823                           
  5824                           ;incstack = 0
  5825  001180  0E00               	movlw	0
  5826  001182  6E24               	movwf	blackLcd@res+1,c
  5827  001184  0E00               	movlw	0
  5828  001186  6E23               	movwf	blackLcd@res,c
  5829  001188                     l3382:
  5830  001188  BE24               	btfsc	blackLcd@res+1,7,c
  5831  00118A  D006               	goto	l3386
  5832  00118C  0EF8               	movlw	248
  5833  00118E  5C23               	subwf	blackLcd@res,w,c
  5834  001190  0E01               	movlw	1
  5835  001192  5824               	subwfb	blackLcd@res+1,w,c
  5836  001194  B0D8               	btfsc	status,0,c
  5837  001196  0012               	return	
  5838  001198                     l3386:
  5839                           
  5840                           ;NokiaLCD.c: 83: LCDwrite(0, res);
  5841  001198  C023  F021         	movff	blackLcd@res,LCDwrite@data
  5842  00119C  0E00               	movlw	0
  5843  00119E  EC17  F009         	call	_LCDwrite
  5844  0011A2  4A23               	infsnz	blackLcd@res,f,c
  5845  0011A4  2A24               	incf	blackLcd@res+1,f,c
  5846  0011A6  D7F0               	goto	l3382
  5847  0011A8                     __end_of_blackLcd:
  5848                           	opt stack 0
  5849                           tblptru	equ	0xFF8
  5850                           tblptrh	equ	0xFF7
  5851                           tblptrl	equ	0xFF6
  5852                           tablat	equ	0xFF5
  5853                           prodh	equ	0xFF4
  5854                           prodl	equ	0xFF3
  5855                           intcon	equ	0xFF2
  5856                           intcon2	equ	0xFF1
  5857                           indf0	equ	0xFEF
  5858                           postinc0	equ	0xFEE
  5859                           fsr0h	equ	0xFEA
  5860                           fsr0l	equ	0xFE9
  5861                           wreg	equ	0xFE8
  5862                           postdec1	equ	0xFE5
  5863                           fsr1l	equ	0xFE1
  5864                           indf2	equ	0xFDF
  5865                           postinc2	equ	0xFDE
  5866                           postdec2	equ	0xFDD
  5867                           plusw2	equ	0xFDB
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function _LCDwrite *****************
  5873 ;; Defined at:
  5874 ;;		line 46 in file "NokiaLCD.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;  mode            1    wreg     unsigned char 
  5877 ;;  data            1   32[COMRAM] unsigned char 
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  mode            1   33[COMRAM] unsigned char 
  5880 ;; Return value:  Size  Location     Type
  5881 ;;		None               void
  5882 ;; Registers used:
  5883 ;;		wreg, status,2, cstack
  5884 ;; Tracked objects:
  5885 ;;		On entry : 0/0
  5886 ;;		On exit  : 0/0
  5887 ;;		Unchanged: 0/0
  5888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5889 ;;      Params:         1       0       0       0       0       0       0
  5890 ;;      Locals:         1       0       0       0       0       0       0
  5891 ;;      Temps:          0       0       0       0       0       0       0
  5892 ;;      Totals:         2       0       0       0       0       0       0
  5893 ;;Total ram usage:        2 bytes
  5894 ;; Hardware stack levels used:    1
  5895 ;; Hardware stack levels required when called:    5
  5896 ;; This function calls:
  5897 ;;		_SPI1_Exchange8bit
  5898 ;; This function is called by:
  5899 ;;		_NokiaStart
  5900 ;;		_clearLcd
  5901 ;;		_blackLcd
  5902 ;;		_LcdCharacter
  5903 ;;		_gotoXy
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text34
  5908  00122E                     __ptext34:
  5909                           	opt stack 0
  5910  00122E                     _LCDwrite:
  5911                           	opt stack 23
  5912                           
  5913                           ;incstack = 0
  5914                           ;LCDwrite@mode stored from wreg
  5915  00122E  6E22               	movwf	LCDwrite@mode,c
  5916                           
  5917                           ;NokiaLCD.c: 47: if(mode){
  5918  001230  5022               	movf	LCDwrite@mode,w,c
  5919  001232  B4D8               	btfsc	status,2,c
  5920  001234  D002               	goto	l725
  5921                           
  5922                           ;NokiaLCD.c: 48: do { LATD3 = 0; } while(0);
  5923  001236  968C               	bcf	3980,3,c	;volatile
  5924                           
  5925                           ;NokiaLCD.c: 49: }
  5926  001238  D001               	goto	l727
  5927  00123A                     l725:
  5928  00123A  868C               	bsf	3980,3,c	;volatile
  5929  00123C                     l727:
  5930  00123C  908C               	bcf	3980,0,c	;volatile
  5931                           
  5932                           ;NokiaLCD.c: 54: SPI1_Exchange8bit(data);
  5933  00123E  5021               	movf	LCDwrite@data,w,c
  5934  001240  EC46  F009         	call	_SPI1_Exchange8bit
  5935                           
  5936                           ;NokiaLCD.c: 55: do { LATD0 = 1; } while(0);
  5937  001244  808C               	bsf	3980,0,c	;volatile
  5938  001246  0012               	return	
  5939  001248                     __end_of_LCDwrite:
  5940                           	opt stack 0
  5941                           tblptru	equ	0xFF8
  5942                           tblptrh	equ	0xFF7
  5943                           tblptrl	equ	0xFF6
  5944                           tablat	equ	0xFF5
  5945                           prodh	equ	0xFF4
  5946                           prodl	equ	0xFF3
  5947                           intcon	equ	0xFF2
  5948                           intcon2	equ	0xFF1
  5949                           indf0	equ	0xFEF
  5950                           postinc0	equ	0xFEE
  5951                           fsr0h	equ	0xFEA
  5952                           fsr0l	equ	0xFE9
  5953                           wreg	equ	0xFE8
  5954                           postdec1	equ	0xFE5
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           plusw2	equ	0xFDB
  5960                           fsr2h	equ	0xFDA
  5961                           fsr2l	equ	0xFD9
  5962                           status	equ	0xFD8
  5963                           
  5964 ;; *************** function _SPI1_Exchange8bit *****************
  5965 ;; Defined at:
  5966 ;;		line 78 in file "mcc_generated_files/spi1.c"
  5967 ;; Parameters:    Size  Location     Type
  5968 ;;  data            1    wreg     unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  data            1   26[COMRAM] unsigned char 
  5971 ;; Return value:  Size  Location     Type
  5972 ;;                  1    wreg      unsigned char 
  5973 ;; Registers used:
  5974 ;;		wreg, status,2
  5975 ;; Tracked objects:
  5976 ;;		On entry : 0/0
  5977 ;;		On exit  : 0/0
  5978 ;;		Unchanged: 0/0
  5979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5980 ;;      Params:         0       0       0       0       0       0       0
  5981 ;;      Locals:         1       0       0       0       0       0       0
  5982 ;;      Temps:          0       0       0       0       0       0       0
  5983 ;;      Totals:         1       0       0       0       0       0       0
  5984 ;;Total ram usage:        1 bytes
  5985 ;; Hardware stack levels used:    1
  5986 ;; Hardware stack levels required when called:    4
  5987 ;; This function calls:
  5988 ;;		Nothing
  5989 ;; This function is called by:
  5990 ;;		_LCDwrite
  5991 ;;		_SPI1_Exchange8bitBuffer
  5992 ;; This function uses a non-reentrant model
  5993 ;;
  5994                           
  5995                           	psect	text35
  5996  00128C                     __ptext35:
  5997                           	opt stack 0
  5998  00128C                     _SPI1_Exchange8bit:
  5999                           	opt stack 23
  6000                           
  6001                           ;incstack = 0
  6002                           ;SPI1_Exchange8bit@data stored from wreg
  6003  00128C  6E1B               	movwf	SPI1_Exchange8bit@data,c
  6004                           
  6005                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  6006  00128E  9EC6               	bcf	4038,7,c	;volatile
  6007                           
  6008                           ;spi1.c: 83: SSP1BUF = data;
  6009  001290  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  6010  001294                     l223:
  6011  001294  A0C7               	btfss	4039,0,c	;volatile
  6012  001296  D7FE               	goto	l223
  6013                           
  6014                           ;spi1.c: 87: }
  6015                           ;spi1.c: 89: return (SSP1BUF);
  6016  001298  50C9               	movf	4041,w,c	;volatile
  6017  00129A  0012               	return		;funcret
  6018  00129C                     __end_of_SPI1_Exchange8bit:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodh	equ	0xFF4
  6025                           prodl	equ	0xFF3
  6026                           intcon	equ	0xFF2
  6027                           intcon2	equ	0xFF1
  6028                           indf0	equ	0xFEF
  6029                           postinc0	equ	0xFEE
  6030                           fsr0h	equ	0xFEA
  6031                           fsr0l	equ	0xFE9
  6032                           wreg	equ	0xFE8
  6033                           postdec1	equ	0xFE5
  6034                           fsr1l	equ	0xFE1
  6035                           indf2	equ	0xFDF
  6036                           postinc2	equ	0xFDE
  6037                           postdec2	equ	0xFDD
  6038                           plusw2	equ	0xFDB
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _SPI1_Initialize *****************
  6044 ;; Defined at:
  6045 ;;		line 64 in file "mcc_generated_files/spi1.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;		None               void
  6052 ;; Registers used:
  6053 ;;		wreg, status,2
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6059 ;;      Params:         0       0       0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0
  6061 ;;      Temps:          0       0       0       0       0       0       0
  6062 ;;      Totals:         0       0       0       0       0       0       0
  6063 ;;Total ram usage:        0 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    4
  6066 ;; This function calls:
  6067 ;;		Nothing
  6068 ;; This function is called by:
  6069 ;;		_NokiaStart
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text36
  6074  0012AA                     __ptext36:
  6075                           	opt stack 0
  6076  0012AA                     _SPI1_Initialize:
  6077                           	opt stack 25
  6078                           
  6079                           ;spi1.c: 69: SSP1STAT = 0x80;
  6080                           
  6081                           ;incstack = 0
  6082  0012AA  0E80               	movlw	128
  6083  0012AC  6EC7               	movwf	4039,c	;volatile
  6084                           
  6085                           ;spi1.c: 72: SSP1CON1 = 0x30;
  6086  0012AE  0E30               	movlw	48
  6087  0012B0  6EC6               	movwf	4038,c	;volatile
  6088                           
  6089                           ;spi1.c: 75: SSP1ADD = 0x00;
  6090  0012B2  0E00               	movlw	0
  6091  0012B4  6EC8               	movwf	4040,c	;volatile
  6092  0012B6  0012               	return		;funcret
  6093  0012B8                     __end_of_SPI1_Initialize:
  6094                           	opt stack 0
  6095                           tblptru	equ	0xFF8
  6096                           tblptrh	equ	0xFF7
  6097                           tblptrl	equ	0xFF6
  6098                           tablat	equ	0xFF5
  6099                           prodh	equ	0xFF4
  6100                           prodl	equ	0xFF3
  6101                           intcon	equ	0xFF2
  6102                           intcon2	equ	0xFF1
  6103                           indf0	equ	0xFEF
  6104                           postinc0	equ	0xFEE
  6105                           fsr0h	equ	0xFEA
  6106                           fsr0l	equ	0xFE9
  6107                           wreg	equ	0xFE8
  6108                           postdec1	equ	0xFE5
  6109                           fsr1l	equ	0xFE1
  6110                           indf2	equ	0xFDF
  6111                           postinc2	equ	0xFDE
  6112                           postdec2	equ	0xFDD
  6113                           plusw2	equ	0xFDB
  6114                           fsr2h	equ	0xFDA
  6115                           fsr2l	equ	0xFD9
  6116                           status	equ	0xFD8
  6117                           
  6118 ;; *************** function _Delay *****************
  6119 ;; Defined at:
  6120 ;;		line 11 in file "Functions.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  wait            4   26[COMRAM] long 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  i               4   31[COMRAM] long 
  6125 ;; Return value:  Size  Location     Type
  6126 ;;		None               void
  6127 ;; Registers used:
  6128 ;;		wreg, status,2, status,0
  6129 ;; Tracked objects:
  6130 ;;		On entry : 0/0
  6131 ;;		On exit  : 0/0
  6132 ;;		Unchanged: 0/0
  6133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6134 ;;      Params:         4       0       0       0       0       0       0
  6135 ;;      Locals:         4       0       0       0       0       0       0
  6136 ;;      Temps:          1       0       0       0       0       0       0
  6137 ;;      Totals:         9       0       0       0       0       0       0
  6138 ;;Total ram usage:        9 bytes
  6139 ;; Hardware stack levels used:    1
  6140 ;; Hardware stack levels required when called:    4
  6141 ;; This function calls:
  6142 ;;		Nothing
  6143 ;; This function is called by:
  6144 ;;		_main
  6145 ;;		_respondECU
  6146 ;;		_Precharge
  6147 ;;		_NokiaStart
  6148 ;; This function uses a non-reentrant model
  6149 ;;
  6150                           
  6151                           	psect	text37
  6152  000EE6                     __ptext37:
  6153                           	opt stack 0
  6154  000EE6                     _Delay:
  6155                           	opt stack 24
  6156                           
  6157                           ;Functions.c: 12: long int i = 0;
  6158                           
  6159                           ;incstack = 0
  6160  000EE6  0E00               	movlw	0
  6161  000EE8  6E20               	movwf	Delay@i,c
  6162  000EEA  0E00               	movlw	0
  6163  000EEC  6E21               	movwf	Delay@i+1,c
  6164  000EEE  0E00               	movlw	0
  6165  000EF0  6E22               	movwf	Delay@i+2,c
  6166  000EF2  0E00               	movlw	0
  6167  000EF4  6E23               	movwf	Delay@i+3,c
  6168                           
  6169                           ;Functions.c: 13: for (; wait > i; i++) {
  6170  000EF6  D00E               	goto	l3098
  6171  000EF8                     l3094:
  6172                           
  6173                           ;Functions.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  6174  000EF8  0E06               	movlw	6
  6175  000EFA  6E1F               	movwf	??_Delay& (0+255),c
  6176  000EFC  0E30               	movlw	48
  6177  000EFE                     u2727:
  6178  000EFE  2EE8               	decfsz	wreg,f,c
  6179  000F00  D7FE               	goto	u2727
  6180  000F02  2E1F               	decfsz	??_Delay& (0+255),f,c
  6181  000F04  D7FC               	goto	u2727
  6182  000F06  D000               	nop2	
  6183  000F08  0E01               	movlw	1
  6184  000F0A  2620               	addwf	Delay@i,f,c
  6185  000F0C  0E00               	movlw	0
  6186  000F0E  2221               	addwfc	Delay@i+1,f,c
  6187  000F10  2222               	addwfc	Delay@i+2,f,c
  6188  000F12  2223               	addwfc	Delay@i+3,f,c
  6189  000F14                     l3098:
  6190  000F14  501B               	movf	Delay@wait,w,c
  6191  000F16  5C20               	subwf	Delay@i,w,c
  6192  000F18  501C               	movf	Delay@wait+1,w,c
  6193  000F1A  5821               	subwfb	Delay@i+1,w,c
  6194  000F1C  501D               	movf	Delay@wait+2,w,c
  6195  000F1E  5822               	subwfb	Delay@i+2,w,c
  6196  000F20  5023               	movf	Delay@i+3,w,c
  6197  000F22  0A80               	xorlw	128
  6198  000F24  6E1F               	movwf	??_Delay& (0+255),c
  6199  000F26  501E               	movf	Delay@wait+3,w,c
  6200  000F28  0A80               	xorlw	128
  6201  000F2A  581F               	subwfb	??_Delay& (0+255),w,c
  6202  000F2C  B0D8               	btfsc	status,0,c
  6203  000F2E  0012               	return	
  6204  000F30  D7E3               	goto	l3094
  6205  000F32                     __end_of_Delay:
  6206                           	opt stack 0
  6207                           tblptru	equ	0xFF8
  6208                           tblptrh	equ	0xFF7
  6209                           tblptrl	equ	0xFF6
  6210                           tablat	equ	0xFF5
  6211                           prodh	equ	0xFF4
  6212                           prodl	equ	0xFF3
  6213                           intcon	equ	0xFF2
  6214                           intcon2	equ	0xFF1
  6215                           indf0	equ	0xFEF
  6216                           postinc0	equ	0xFEE
  6217                           fsr0h	equ	0xFEA
  6218                           fsr0l	equ	0xFE9
  6219                           wreg	equ	0xFE8
  6220                           postdec1	equ	0xFE5
  6221                           fsr1l	equ	0xFE1
  6222                           indf2	equ	0xFDF
  6223                           postinc2	equ	0xFDE
  6224                           postdec2	equ	0xFDD
  6225                           plusw2	equ	0xFDB
  6226                           fsr2h	equ	0xFDA
  6227                           fsr2l	equ	0xFD9
  6228                           status	equ	0xFD8
  6229                           
  6230 ;; *************** function _INTERRUPT_InterruptManager *****************
  6231 ;; Defined at:
  6232 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6233 ;; Parameters:    Size  Location     Type
  6234 ;;		None
  6235 ;; Auto vars:     Size  Location     Type
  6236 ;;		None
  6237 ;; Return value:  Size  Location     Type
  6238 ;;		None               void
  6239 ;; Registers used:
  6240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6241 ;; Tracked objects:
  6242 ;;		On entry : 0/0
  6243 ;;		On exit  : 0/0
  6244 ;;		Unchanged: 0/0
  6245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6246 ;;      Params:         0       0       0       0       0       0       0
  6247 ;;      Locals:         0       0       0       0       0       0       0
  6248 ;;      Temps:         14       0       0       0       0       0       0
  6249 ;;      Totals:        14       0       0       0       0       0       0
  6250 ;;Total ram usage:       14 bytes
  6251 ;; Hardware stack levels used:    1
  6252 ;; Hardware stack levels required when called:    3
  6253 ;; This function calls:
  6254 ;;		_EUSART1_Receive_ISR
  6255 ;;		_EUSART1_Transmit_ISR
  6256 ;;		_EUSART2_Receive_ISR
  6257 ;;		_EUSART2_Transmit_ISR
  6258 ;; This function is called by:
  6259 ;;		Interrupt level 2
  6260 ;; This function uses a non-reentrant model
  6261 ;;
  6262                           
  6263                           	psect	intcode
  6264  000008                     __pintcode:
  6265                           	opt stack 0
  6266  000008                     _INTERRUPT_InterruptManager:
  6267                           	opt stack 22
  6268                           
  6269                           ;incstack = 0
  6270  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6271  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6272  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6273  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6274  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6275  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6276  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6277  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6278  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6279  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6280  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6281  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6282  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6283  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6284  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6285                           
  6286                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6287  000042  BAA3               	btfsc	4003,5,c	;volatile
  6288  000044  AAA4               	btfss	4004,5,c	;volatile
  6289  000046  D003               	goto	i2l175
  6290                           
  6291                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6292  000048  EC57  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6293                           
  6294                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6295  00004C  D011               	goto	i2l183
  6296  00004E                     i2l175:
  6297  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6298  000050  A8A4               	btfss	4004,4,c	;volatile
  6299  000052  D003               	goto	i2l177
  6300                           
  6301                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6302  000054  EC2A  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6303                           
  6304                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6305  000058  D00B               	goto	i2l183
  6306  00005A                     i2l177:
  6307  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6308  00005C  AA9E               	btfss	3998,5,c	;volatile
  6309  00005E  D003               	goto	i2l179
  6310                           
  6311                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6312  000060  ECFA  F008         	call	_EUSART1_Receive_ISR	;wreg free
  6313                           
  6314                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6315  000064  D005               	goto	i2l183
  6316  000066                     i2l179:
  6317  000066  B89D               	btfsc	3997,4,c	;volatile
  6318  000068  A89E               	btfss	3998,4,c	;volatile
  6319  00006A  D002               	goto	i2l183
  6320                           
  6321                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6322  00006C  EC11  F008         	call	_EUSART1_Transmit_ISR	;wreg free
  6323  000070                     i2l183:
  6324  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6325  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6326  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6327  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6328  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6329  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6330  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6331  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6332  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6333  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6334  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6335  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6336  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6337  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6338  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6339  0000AA  0011               	retfie		f
  6340  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6341                           	opt stack 0
  6342                           pclatu	equ	0xFFB
  6343                           pclath	equ	0xFFA
  6344                           tblptru	equ	0xFF8
  6345                           tblptrh	equ	0xFF7
  6346                           tblptrl	equ	0xFF6
  6347                           tablat	equ	0xFF5
  6348                           prodh	equ	0xFF4
  6349                           prodl	equ	0xFF3
  6350                           intcon	equ	0xFF2
  6351                           intcon2	equ	0xFF1
  6352                           indf0	equ	0xFEF
  6353                           postinc0	equ	0xFEE
  6354                           fsr0h	equ	0xFEA
  6355                           fsr0l	equ	0xFE9
  6356                           wreg	equ	0xFE8
  6357                           postdec1	equ	0xFE5
  6358                           fsr1h	equ	0xFE2
  6359                           fsr1l	equ	0xFE1
  6360                           indf2	equ	0xFDF
  6361                           postinc2	equ	0xFDE
  6362                           postdec2	equ	0xFDD
  6363                           plusw2	equ	0xFDB
  6364                           fsr2h	equ	0xFDA
  6365                           fsr2l	equ	0xFD9
  6366                           status	equ	0xFD8
  6367                           
  6368 ;; *************** function _EUSART2_Transmit_ISR *****************
  6369 ;; Defined at:
  6370 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6371 ;; Parameters:    Size  Location     Type
  6372 ;;		None
  6373 ;; Auto vars:     Size  Location     Type
  6374 ;;		None
  6375 ;; Return value:  Size  Location     Type
  6376 ;;		None               void
  6377 ;; Registers used:
  6378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6379 ;; Tracked objects:
  6380 ;;		On entry : 0/0
  6381 ;;		On exit  : 0/0
  6382 ;;		Unchanged: 0/0
  6383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6384 ;;      Params:         0       0       0       0       0       0       0
  6385 ;;      Locals:         0       0       0       0       0       0       0
  6386 ;;      Temps:          0       0       0       0       0       0       0
  6387 ;;      Totals:         0       0       0       0       0       0       0
  6388 ;;Total ram usage:        0 bytes
  6389 ;; Hardware stack levels used:    1
  6390 ;; This function calls:
  6391 ;;		Nothing
  6392 ;; This function is called by:
  6393 ;;		_INTERRUPT_InterruptManager
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           	psect	text39
  6398  001054                     __ptext39:
  6399                           	opt stack 0
  6400  001054                     _EUSART2_Transmit_ISR:
  6401                           	opt stack 24
  6402                           
  6403                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6404                           
  6405                           ;incstack = 0
  6406  001054  0E08               	movlw	8
  6407  001056  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  6408  001058  D012               	goto	i2l97
  6409                           
  6410                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  6411  00105A  5039               	movf	_eusart2TxTail,w,c
  6412  00105C  0D01               	mullw	1
  6413  00105E  0E9B               	movlw	low _eusart2TxBuffer
  6414  001060  24F3               	addwf	prodl,w,c
  6415  001062  6ED9               	movwf	fsr2l,c
  6416  001064  0E00               	movlw	high _eusart2TxBuffer
  6417  001066  20F4               	addwfc	prodh,w,c
  6418  001068  6EDA               	movwf	fsr2h,c
  6419  00106A  50DF               	movf	indf2,w,c
  6420  00106C  6E73               	movwf	3955,c	;volatile
  6421  00106E  2A39               	incf	_eusart2TxTail,f,c
  6422                           
  6423                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  6424  001070  0E07               	movlw	7
  6425  001072  6439               	cpfsgt	_eusart2TxTail,c
  6426  001074  D002               	goto	i2l2724
  6427                           
  6428                           ;eusart2.c: 161: eusart2TxTail = 0;
  6429  001076  0E00               	movlw	0
  6430  001078  6E39               	movwf	_eusart2TxTail,c
  6431  00107A                     i2l2724:
  6432                           
  6433                           ;eusart2.c: 162: }
  6434                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  6435  00107A  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  6436                           
  6437                           ;eusart2.c: 164: } else {
  6438  00107C  0012               	return	
  6439  00107E                     i2l97:
  6440                           
  6441                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  6442  00107E  98A3               	bcf	4003,4,c	;volatile
  6443  001080  0012               	return	
  6444  001082                     __end_of_EUSART2_Transmit_ISR:
  6445                           	opt stack 0
  6446                           pclatu	equ	0xFFB
  6447                           pclath	equ	0xFFA
  6448                           tblptru	equ	0xFF8
  6449                           tblptrh	equ	0xFF7
  6450                           tblptrl	equ	0xFF6
  6451                           tablat	equ	0xFF5
  6452                           prodh	equ	0xFF4
  6453                           prodl	equ	0xFF3
  6454                           intcon	equ	0xFF2
  6455                           intcon2	equ	0xFF1
  6456                           indf0	equ	0xFEF
  6457                           postinc0	equ	0xFEE
  6458                           fsr0h	equ	0xFEA
  6459                           fsr0l	equ	0xFE9
  6460                           wreg	equ	0xFE8
  6461                           postdec1	equ	0xFE5
  6462                           fsr1h	equ	0xFE2
  6463                           fsr1l	equ	0xFE1
  6464                           indf2	equ	0xFDF
  6465                           postinc2	equ	0xFDE
  6466                           postdec2	equ	0xFDD
  6467                           plusw2	equ	0xFDB
  6468                           fsr2h	equ	0xFDA
  6469                           fsr2l	equ	0xFD9
  6470                           status	equ	0xFD8
  6471                           
  6472 ;; *************** function _EUSART2_Receive_ISR *****************
  6473 ;; Defined at:
  6474 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6488 ;;      Params:         0       0       0       0       0       0       0
  6489 ;;      Locals:         0       0       0       0       0       0       0
  6490 ;;      Temps:          0       0       0       0       0       0       0
  6491 ;;      Totals:         0       0       0       0       0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; This function calls:
  6495 ;;		Nothing
  6496 ;; This function is called by:
  6497 ;;		_INTERRUPT_InterruptManager
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text40
  6502  0010AE                     __ptext40:
  6503                           	opt stack 0
  6504  0010AE                     _EUSART2_Receive_ISR:
  6505                           	opt stack 24
  6506                           
  6507                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  6508                           
  6509                           ;incstack = 0
  6510  0010AE  A271               	btfss	3953,1,c	;volatile
  6511  0010B0  D002               	goto	i2l2730
  6512                           
  6513                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  6514  0010B2  9871               	bcf	3953,4,c	;volatile
  6515                           
  6516                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  6517  0010B4  8871               	bsf	3953,4,c	;volatile
  6518  0010B6                     i2l2730:
  6519                           
  6520                           ;eusart2.c: 175: }
  6521                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  6522  0010B6  5036               	movf	_eusart2RxHead,w,c
  6523  0010B8  0D01               	mullw	1
  6524  0010BA  0E93               	movlw	low _eusart2RxBuffer
  6525  0010BC  24F3               	addwf	prodl,w,c
  6526  0010BE  6ED9               	movwf	fsr2l,c
  6527  0010C0  0E00               	movlw	high _eusart2RxBuffer
  6528  0010C2  20F4               	addwfc	prodh,w,c
  6529  0010C4  6EDA               	movwf	fsr2h,c
  6530  0010C6  CF74 FFDF          	movff	3956,indf2	;volatile
  6531  0010CA  2A36               	incf	_eusart2RxHead,f,c
  6532                           
  6533                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  6534  0010CC  0E07               	movlw	7
  6535  0010CE  6436               	cpfsgt	_eusart2RxHead,c
  6536  0010D0  D002               	goto	i2l2738
  6537                           
  6538                           ;eusart2.c: 180: eusart2RxHead = 0;
  6539  0010D2  0E00               	movlw	0
  6540  0010D4  6E36               	movwf	_eusart2RxHead,c
  6541  0010D6                     i2l2738:
  6542                           
  6543                           ;eusart2.c: 181: }
  6544                           ;eusart2.c: 182: eusart2RxCount++;
  6545  0010D6  2A35               	incf	_eusart2RxCount,f,c	;volatile
  6546  0010D8  0012               	return		;funcret
  6547  0010DA                     __end_of_EUSART2_Receive_ISR:
  6548                           	opt stack 0
  6549                           pclatu	equ	0xFFB
  6550                           pclath	equ	0xFFA
  6551                           tblptru	equ	0xFF8
  6552                           tblptrh	equ	0xFF7
  6553                           tblptrl	equ	0xFF6
  6554                           tablat	equ	0xFF5
  6555                           prodh	equ	0xFF4
  6556                           prodl	equ	0xFF3
  6557                           intcon	equ	0xFF2
  6558                           intcon2	equ	0xFF1
  6559                           indf0	equ	0xFEF
  6560                           postinc0	equ	0xFEE
  6561                           fsr0h	equ	0xFEA
  6562                           fsr0l	equ	0xFE9
  6563                           wreg	equ	0xFE8
  6564                           postdec1	equ	0xFE5
  6565                           fsr1h	equ	0xFE2
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           postdec2	equ	0xFDD
  6570                           plusw2	equ	0xFDB
  6571                           fsr2h	equ	0xFDA
  6572                           fsr2l	equ	0xFD9
  6573                           status	equ	0xFD8
  6574                           
  6575 ;; *************** function _EUSART1_Transmit_ISR *****************
  6576 ;; Defined at:
  6577 ;;		line 150 in file "UART.c"
  6578 ;; Parameters:    Size  Location     Type
  6579 ;;		None
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  2  169[None  ] int 
  6584 ;; Registers used:
  6585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : 0/0
  6588 ;;		On exit  : 0/0
  6589 ;;		Unchanged: 0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6591 ;;      Params:         0       0       0       0       0       0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0
  6594 ;;      Totals:         0       0       0       0       0       0       0
  6595 ;;Total ram usage:        0 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    2
  6598 ;; This function calls:
  6599 ;;		_UART_buff_get
  6600 ;;		_UART_buff_size
  6601 ;; This function is called by:
  6602 ;;		_INTERRUPT_InterruptManager
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text41
  6607  001022                     __ptext41:
  6608                           	opt stack 0
  6609  001022                     _EUSART1_Transmit_ISR:
  6610                           	opt stack 22
  6611                           
  6612                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6613                           
  6614                           ;incstack = 0
  6615  001022  0E00               	movlw	low _output_buffer
  6616  001024  6E01               	movwf	UART_buff_size@_this,c
  6617  001026  0E03               	movlw	high _output_buffer
  6618  001028  6E02               	movwf	UART_buff_size@_this+1,c
  6619  00102A  EC3B  F009         	call	_UART_buff_size	;wreg free
  6620  00102E  BE02               	btfsc	?_UART_buff_size+1,7,c
  6621  001030  D00D               	goto	i2l2750
  6622  001032  5002               	movf	?_UART_buff_size+1,w,c
  6623  001034  E103               	bnz	i2u165_40
  6624  001036  0401               	decf	?_UART_buff_size,w,c
  6625  001038  A0D8               	btfss	status,0,c
  6626  00103A  D008               	goto	i2l2750
  6627  00103C                     i2u165_40:
  6628                           
  6629                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6630  00103C  0E00               	movlw	low _output_buffer
  6631  00103E  6E07               	movwf	UART_buff_get@_this,c
  6632  001040  0E03               	movlw	high _output_buffer
  6633  001042  6E08               	movwf	UART_buff_get@_this+1,c
  6634  001044  EC3D  F005         	call	_UART_buff_get	;wreg free
  6635  001048  6EAD               	movwf	4013,c	;volatile
  6636                           
  6637                           ;UART.c: 154: } else {
  6638  00104A  0012               	return	
  6639  00104C                     i2l2750:
  6640                           
  6641                           ;UART.c: 155: Transmit_stall = 1;
  6642  00104C  0E01               	movlw	1
  6643  00104E  6E44               	movwf	_Transmit_stall,c
  6644                           
  6645                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6646  001050  989D               	bcf	3997,4,c	;volatile
  6647  001052  0012               	return	
  6648  001054                     __end_of_EUSART1_Transmit_ISR:
  6649                           	opt stack 0
  6650                           pclatu	equ	0xFFB
  6651                           pclath	equ	0xFFA
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           intcon	equ	0xFF2
  6659                           intcon2	equ	0xFF1
  6660                           indf0	equ	0xFEF
  6661                           postinc0	equ	0xFEE
  6662                           fsr0h	equ	0xFEA
  6663                           fsr0l	equ	0xFE9
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           fsr1h	equ	0xFE2
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           plusw2	equ	0xFDB
  6672                           fsr2h	equ	0xFDA
  6673                           fsr2l	equ	0xFD9
  6674                           status	equ	0xFD8
  6675                           
  6676 ;; *************** function _UART_buff_size *****************
  6677 ;; Defined at:
  6678 ;;		line 102 in file "UART.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6681 ;;		 -> output_buffer(206), input_buffer(206), 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;		None
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  2    0[COMRAM] int 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6693 ;;      Params:         2       0       0       0       0       0       0
  6694 ;;      Locals:         0       0       0       0       0       0       0
  6695 ;;      Temps:          0       0       0       0       0       0       0
  6696 ;;      Totals:         2       0       0       0       0       0       0
  6697 ;;Total ram usage:        2 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_EUSART1_Transmit_ISR
  6703 ;;		_Receive_available
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text42
  6708  001276                     __ptext42:
  6709                           	opt stack 0
  6710  001276                     _UART_buff_size:
  6711                           	opt stack 23
  6712                           
  6713                           ;UART.c: 103: return (_this->count);
  6714                           
  6715                           ;incstack = 0
  6716  001276  EE20 F0CC          	lfsr	2,204
  6717  00127A  5001               	movf	UART_buff_size@_this,w,c
  6718  00127C  26D9               	addwf	fsr2l,f,c
  6719  00127E  5002               	movf	UART_buff_size@_this+1,w,c
  6720  001280  22DA               	addwfc	fsr2h,f,c
  6721  001282  CFDE F001          	movff	postinc2,?_UART_buff_size
  6722  001286  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  6723  00128A  0012               	return	
  6724  00128C                     __end_of_UART_buff_size:
  6725                           	opt stack 0
  6726                           pclatu	equ	0xFFB
  6727                           pclath	equ	0xFFA
  6728                           tblptru	equ	0xFF8
  6729                           tblptrh	equ	0xFF7
  6730                           tblptrl	equ	0xFF6
  6731                           tablat	equ	0xFF5
  6732                           prodh	equ	0xFF4
  6733                           prodl	equ	0xFF3
  6734                           intcon	equ	0xFF2
  6735                           intcon2	equ	0xFF1
  6736                           indf0	equ	0xFEF
  6737                           postinc0	equ	0xFEE
  6738                           fsr0h	equ	0xFEA
  6739                           fsr0l	equ	0xFE9
  6740                           wreg	equ	0xFE8
  6741                           postdec1	equ	0xFE5
  6742                           fsr1h	equ	0xFE2
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           postinc2	equ	0xFDE
  6746                           postdec2	equ	0xFDD
  6747                           plusw2	equ	0xFDB
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function _UART_buff_get *****************
  6753 ;; Defined at:
  6754 ;;		line 81 in file "UART.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6757 ;;		 -> output_buffer(206), input_buffer(206), 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  c               1   10[COMRAM] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  1    wreg      unsigned char 
  6762 ;; Registers used:
  6763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6764 ;; Tracked objects:
  6765 ;;		On entry : 0/0
  6766 ;;		On exit  : 0/0
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6769 ;;      Params:         2       0       0       0       0       0       0
  6770 ;;      Locals:         1       0       0       0       0       0       0
  6771 ;;      Temps:          2       0       0       0       0       0       0
  6772 ;;      Totals:         5       0       0       0       0       0       0
  6773 ;;Total ram usage:        5 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    1
  6776 ;; This function calls:
  6777 ;;		_UART_buff_modulo_inc
  6778 ;; This function is called by:
  6779 ;;		_EUSART1_Transmit_ISR
  6780 ;;		_Receive_get
  6781 ;;		_Send_put
  6782 ;; This function uses a non-reentrant model
  6783 ;;
  6784                           
  6785                           	psect	text43
  6786  000A7A                     __ptext43:
  6787                           	opt stack 0
  6788  000A7A                     _UART_buff_get:
  6789                           	opt stack 22
  6790                           
  6791                           ;UART.c: 82: unsigned char c;
  6792                           ;UART.c: 83: if (_this->count > 0) {
  6793                           
  6794                           ;incstack = 0
  6795  000A7A  EE20 F0CC          	lfsr	2,204
  6796  000A7E  5007               	movf	UART_buff_get@_this,w,c
  6797  000A80  26D9               	addwf	fsr2l,f,c
  6798  000A82  5008               	movf	UART_buff_get@_this+1,w,c
  6799  000A84  22DA               	addwfc	fsr2h,f,c
  6800  000A86  0E01               	movlw	1
  6801  000A88  BEDB               	btfsc	plusw2,7,c
  6802  000A8A  D03C               	goto	i2l2646
  6803  000A8C  0E01               	movlw	1
  6804  000A8E  50DB               	movf	plusw2,w,c
  6805  000A90  E103               	bnz	i2u151_40
  6806  000A92  04DE               	decf	postinc2,w,c
  6807  000A94  A0D8               	btfss	status,0,c
  6808  000A96  D036               	goto	i2l2646
  6809  000A98                     i2u151_40:
  6810                           
  6811                           ;UART.c: 84: c = _this->buf[_this->tail];
  6812  000A98  EE20 F0CA          	lfsr	2,202
  6813  000A9C  5007               	movf	UART_buff_get@_this,w,c
  6814  000A9E  26D9               	addwf	fsr2l,f,c
  6815  000AA0  5008               	movf	UART_buff_get@_this+1,w,c
  6816  000AA2  22DA               	addwfc	fsr2h,f,c
  6817  000AA4  CFDE F009          	movff	postinc2,??_UART_buff_get
  6818  000AA8  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  6819  000AAC  5009               	movf	??_UART_buff_get,w,c
  6820  000AAE  2407               	addwf	UART_buff_get@_this,w,c
  6821  000AB0  6ED9               	movwf	fsr2l,c
  6822  000AB2  500A               	movf	??_UART_buff_get+1,w,c
  6823  000AB4  2008               	addwfc	UART_buff_get@_this+1,w,c
  6824  000AB6  6EDA               	movwf	fsr2h,c
  6825  000AB8  50DF               	movf	indf2,w,c
  6826  000ABA  6E0B               	movwf	UART_buff_get@c,c
  6827                           
  6828                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6829  000ABC  EE20 F0CA          	lfsr	2,202
  6830  000AC0  5007               	movf	UART_buff_get@_this,w,c
  6831  000AC2  26D9               	addwf	fsr2l,f,c
  6832  000AC4  5008               	movf	UART_buff_get@_this+1,w,c
  6833  000AC6  22DA               	addwfc	fsr2h,f,c
  6834  000AC8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6835  000ACC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6836  000AD0  0E00               	movlw	0
  6837  000AD2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6838  000AD4  0EC8               	movlw	200
  6839  000AD6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6840  000AD8  EC97  F008         	call	_UART_buff_modulo_inc	;wreg free
  6841  000ADC  EE20 F0CA          	lfsr	2,202
  6842  000AE0  5007               	movf	UART_buff_get@_this,w,c
  6843  000AE2  26D9               	addwf	fsr2l,f,c
  6844  000AE4  5008               	movf	UART_buff_get@_this+1,w,c
  6845  000AE6  22DA               	addwfc	fsr2h,f,c
  6846  000AE8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6847  000AEC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6848                           
  6849                           ;UART.c: 86: --_this->count;
  6850  000AF0  EE20 F0CC          	lfsr	2,204
  6851  000AF4  5007               	movf	UART_buff_get@_this,w,c
  6852  000AF6  26D9               	addwf	fsr2l,f,c
  6853  000AF8  5008               	movf	UART_buff_get@_this+1,w,c
  6854  000AFA  22DA               	addwfc	fsr2h,f,c
  6855  000AFC  06DE               	decf	postinc2,f,c
  6856  000AFE  0E00               	movlw	0
  6857  000B00  5ADD               	subwfb	postdec2,f,c
  6858                           
  6859                           ;UART.c: 87: } else {
  6860  000B02  D002               	goto	i2l554
  6861  000B04                     i2l2646:
  6862                           
  6863                           ;UART.c: 88: c = 0;
  6864  000B04  0E00               	movlw	0
  6865  000B06  6E0B               	movwf	UART_buff_get@c,c
  6866  000B08                     i2l554:
  6867                           
  6868                           ;UART.c: 89: }
  6869                           ;UART.c: 90: return (c);
  6870  000B08  500B               	movf	UART_buff_get@c,w,c
  6871  000B0A  0012               	return	
  6872  000B0C                     __end_of_UART_buff_get:
  6873                           	opt stack 0
  6874                           pclatu	equ	0xFFB
  6875                           pclath	equ	0xFFA
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           intcon	equ	0xFF2
  6883                           intcon2	equ	0xFF1
  6884                           indf0	equ	0xFEF
  6885                           postinc0	equ	0xFEE
  6886                           fsr0h	equ	0xFEA
  6887                           fsr0l	equ	0xFE9
  6888                           wreg	equ	0xFE8
  6889                           postdec1	equ	0xFE5
  6890                           fsr1h	equ	0xFE2
  6891                           fsr1l	equ	0xFE1
  6892                           indf2	equ	0xFDF
  6893                           postinc2	equ	0xFDE
  6894                           postdec2	equ	0xFDD
  6895                           plusw2	equ	0xFDB
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function _EUSART1_Receive_ISR *****************
  6901 ;; Defined at:
  6902 ;;		line 139 in file "UART.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;  data            1   11[COMRAM] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  2  167[None  ] int 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6916 ;;      Params:         0       0       0       0       0       0       0
  6917 ;;      Locals:         1       0       0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0
  6919 ;;      Totals:         1       0       0       0       0       0       0
  6920 ;;Total ram usage:        1 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    2
  6923 ;; This function calls:
  6924 ;;		_UART_buff_put
  6925 ;; This function is called by:
  6926 ;;		_INTERRUPT_InterruptManager
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           	psect	text44
  6931  0011F4                     __ptext44:
  6932                           	opt stack 0
  6933  0011F4                     _EUSART1_Receive_ISR:
  6934                           	opt stack 22
  6935                           
  6936                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6937                           
  6938                           ;incstack = 0
  6939  0011F4  A2AB               	btfss	4011,1,c	;volatile
  6940  0011F6  D002               	goto	i2l585
  6941                           
  6942                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6943  0011F8  98AB               	bcf	4011,4,c	;volatile
  6944                           
  6945                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6946  0011FA  88AB               	bsf	4011,4,c	;volatile
  6947  0011FC                     i2l585:
  6948                           
  6949                           ;UART.c: 145: }
  6950                           ;UART.c: 146: unsigned char data = RCREG1;
  6951  0011FC  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6952                           
  6953                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6954  001200  0E00               	movlw	low _input_buffer
  6955  001202  6E07               	movwf	UART_buff_put@_this,c
  6956  001204  0E02               	movlw	high _input_buffer
  6957  001206  6E08               	movwf	UART_buff_put@_this+1,c
  6958  001208  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  6959  00120C  EC64  F002         	call	_UART_buff_put	;wreg free
  6960  001210  0012               	return		;funcret
  6961  001212                     __end_of_EUSART1_Receive_ISR:
  6962                           	opt stack 0
  6963                           pclatu	equ	0xFFB
  6964                           pclath	equ	0xFFA
  6965                           tblptru	equ	0xFF8
  6966                           tblptrh	equ	0xFF7
  6967                           tblptrl	equ	0xFF6
  6968                           tablat	equ	0xFF5
  6969                           prodh	equ	0xFF4
  6970                           prodl	equ	0xFF3
  6971                           intcon	equ	0xFF2
  6972                           intcon2	equ	0xFF1
  6973                           indf0	equ	0xFEF
  6974                           postinc0	equ	0xFEE
  6975                           fsr0h	equ	0xFEA
  6976                           fsr0l	equ	0xFE9
  6977                           wreg	equ	0xFE8
  6978                           postdec1	equ	0xFE5
  6979                           fsr1h	equ	0xFE2
  6980                           fsr1l	equ	0xFE1
  6981                           indf2	equ	0xFDF
  6982                           postinc2	equ	0xFDE
  6983                           postdec2	equ	0xFDD
  6984                           plusw2	equ	0xFDB
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _UART_buff_put *****************
  6990 ;; Defined at:
  6991 ;;		line 68 in file "UART.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6994 ;;		 -> output_buffer(206), input_buffer(206), 
  6995 ;;  c               1    8[COMRAM] const unsigned char 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;		None               void
  7000 ;; Registers used:
  7001 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7007 ;;      Params:         3       0       0       0       0       0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0
  7009 ;;      Temps:          2       0       0       0       0       0       0
  7010 ;;      Totals:         5       0       0       0       0       0       0
  7011 ;;Total ram usage:        5 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    1
  7014 ;; This function calls:
  7015 ;;		_UART_buff_modulo_inc
  7016 ;; This function is called by:
  7017 ;;		_EUSART1_Receive_ISR
  7018 ;;		_Send_put
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           	psect	text45
  7023  0004C8                     __ptext45:
  7024                           	opt stack 0
  7025  0004C8                     _UART_buff_put:
  7026                           	opt stack 22
  7027                           
  7028                           ;UART.c: 69: if (_this->count < 200) {
  7029                           
  7030                           ;incstack = 0
  7031  0004C8  EE20 F0CC          	lfsr	2,204
  7032  0004CC  5007               	movf	UART_buff_put@_this,w,c
  7033  0004CE  26D9               	addwf	fsr2l,f,c
  7034  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  7035  0004D2  22DA               	addwfc	fsr2h,f,c
  7036  0004D4  0E01               	movlw	1
  7037  0004D6  BEDB               	btfsc	plusw2,7,c
  7038  0004D8  D007               	goto	i2l2626
  7039  0004DA  0E01               	movlw	1
  7040  0004DC  50DB               	movf	plusw2,w,c
  7041  0004DE  E13A               	bnz	i2l2632
  7042  0004E0  0EC8               	movlw	200
  7043  0004E2  5CDE               	subwf	postinc2,w,c
  7044  0004E4  B0D8               	btfsc	status,0,c
  7045  0004E6  D036               	goto	i2l2632
  7046  0004E8                     i2l2626:
  7047                           
  7048                           ;UART.c: 70: _this->buf[_this->head] = c;
  7049  0004E8  EE20 F0C8          	lfsr	2,200
  7050  0004EC  5007               	movf	UART_buff_put@_this,w,c
  7051  0004EE  26D9               	addwf	fsr2l,f,c
  7052  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  7053  0004F2  22DA               	addwfc	fsr2h,f,c
  7054  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7055  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7056  0004FC  500A               	movf	??_UART_buff_put,w,c
  7057  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  7058  000500  6ED9               	movwf	fsr2l,c
  7059  000502  500B               	movf	??_UART_buff_put+1,w,c
  7060  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  7061  000506  6EDA               	movwf	fsr2h,c
  7062  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  7063                           
  7064                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7065  00050C  EE20 F0C8          	lfsr	2,200
  7066  000510  5007               	movf	UART_buff_put@_this,w,c
  7067  000512  26D9               	addwf	fsr2l,f,c
  7068  000514  5008               	movf	UART_buff_put@_this+1,w,c
  7069  000516  22DA               	addwfc	fsr2h,f,c
  7070  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7071  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7072  000520  0E00               	movlw	0
  7073  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7074  000524  0EC8               	movlw	200
  7075  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7076  000528  EC97  F008         	call	_UART_buff_modulo_inc	;wreg free
  7077  00052C  EE20 F0C8          	lfsr	2,200
  7078  000530  5007               	movf	UART_buff_put@_this,w,c
  7079  000532  26D9               	addwf	fsr2l,f,c
  7080  000534  5008               	movf	UART_buff_put@_this+1,w,c
  7081  000536  22DA               	addwfc	fsr2h,f,c
  7082  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7083  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7084                           
  7085                           ;UART.c: 72: ++_this->count;
  7086  000540  EE20 F0CC          	lfsr	2,204
  7087  000544  5007               	movf	UART_buff_put@_this,w,c
  7088  000546  26D9               	addwf	fsr2l,f,c
  7089  000548  5008               	movf	UART_buff_put@_this+1,w,c
  7090  00054A  22DA               	addwfc	fsr2h,f,c
  7091  00054C  2ADE               	incf	postinc2,f,c
  7092  00054E  0E00               	movlw	0
  7093  000550  22DD               	addwfc	postdec2,f,c
  7094                           
  7095                           ;UART.c: 73: } else {
  7096  000552  0012               	return	
  7097  000554                     i2l2632:
  7098                           
  7099                           ;UART.c: 74: _this->buf[_this->head] = c;
  7100  000554  EE20 F0C8          	lfsr	2,200
  7101  000558  5007               	movf	UART_buff_put@_this,w,c
  7102  00055A  26D9               	addwf	fsr2l,f,c
  7103  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  7104  00055E  22DA               	addwfc	fsr2h,f,c
  7105  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7106  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7107  000568  500A               	movf	??_UART_buff_put,w,c
  7108  00056A  2407               	addwf	UART_buff_put@_this,w,c
  7109  00056C  6ED9               	movwf	fsr2l,c
  7110  00056E  500B               	movf	??_UART_buff_put+1,w,c
  7111  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  7112  000572  6EDA               	movwf	fsr2h,c
  7113  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  7114                           
  7115                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7116  000578  EE20 F0C8          	lfsr	2,200
  7117  00057C  5007               	movf	UART_buff_put@_this,w,c
  7118  00057E  26D9               	addwf	fsr2l,f,c
  7119  000580  5008               	movf	UART_buff_put@_this+1,w,c
  7120  000582  22DA               	addwfc	fsr2h,f,c
  7121  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7122  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7123  00058C  0E00               	movlw	0
  7124  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7125  000590  0EC8               	movlw	200
  7126  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7127  000594  EC97  F008         	call	_UART_buff_modulo_inc	;wreg free
  7128  000598  EE20 F0C8          	lfsr	2,200
  7129  00059C  5007               	movf	UART_buff_put@_this,w,c
  7130  00059E  26D9               	addwf	fsr2l,f,c
  7131  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  7132  0005A2  22DA               	addwfc	fsr2h,f,c
  7133  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7134  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7135                           
  7136                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7137  0005AC  EE20 F0CA          	lfsr	2,202
  7138  0005B0  5007               	movf	UART_buff_put@_this,w,c
  7139  0005B2  26D9               	addwf	fsr2l,f,c
  7140  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  7141  0005B6  22DA               	addwfc	fsr2h,f,c
  7142  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7143  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7144  0005C0  0E00               	movlw	0
  7145  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7146  0005C4  0EC8               	movlw	200
  7147  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7148  0005C8  EC97  F008         	call	_UART_buff_modulo_inc	;wreg free
  7149  0005CC  EE20 F0CA          	lfsr	2,202
  7150  0005D0  5007               	movf	UART_buff_put@_this,w,c
  7151  0005D2  26D9               	addwf	fsr2l,f,c
  7152  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  7153  0005D6  22DA               	addwfc	fsr2h,f,c
  7154  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7155  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7156  0005E0  0012               	return	
  7157  0005E2                     __end_of_UART_buff_put:
  7158                           	opt stack 0
  7159                           pclatu	equ	0xFFB
  7160                           pclath	equ	0xFFA
  7161                           tblptru	equ	0xFF8
  7162                           tblptrh	equ	0xFF7
  7163                           tblptrl	equ	0xFF6
  7164                           tablat	equ	0xFF5
  7165                           prodh	equ	0xFF4
  7166                           prodl	equ	0xFF3
  7167                           intcon	equ	0xFF2
  7168                           intcon2	equ	0xFF1
  7169                           indf0	equ	0xFEF
  7170                           postinc0	equ	0xFEE
  7171                           fsr0h	equ	0xFEA
  7172                           fsr0l	equ	0xFE9
  7173                           wreg	equ	0xFE8
  7174                           postdec1	equ	0xFE5
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _UART_buff_modulo_inc *****************
  7186 ;; Defined at:
  7187 ;;		line 106 in file "UART.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  value           2    0[COMRAM] const unsigned int 
  7190 ;;  modulus         2    2[COMRAM] const unsigned int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  my_value        2    4[COMRAM] unsigned int 
  7193 ;; Return value:  Size  Location     Type
  7194 ;;                  2    0[COMRAM] unsigned int 
  7195 ;; Registers used:
  7196 ;;		wreg, status,2, status,0
  7197 ;; Tracked objects:
  7198 ;;		On entry : 0/0
  7199 ;;		On exit  : 0/0
  7200 ;;		Unchanged: 0/0
  7201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7202 ;;      Params:         4       0       0       0       0       0       0
  7203 ;;      Locals:         2       0       0       0       0       0       0
  7204 ;;      Temps:          0       0       0       0       0       0       0
  7205 ;;      Totals:         6       0       0       0       0       0       0
  7206 ;;Total ram usage:        6 bytes
  7207 ;; Hardware stack levels used:    1
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		_UART_buff_put
  7212 ;;		_UART_buff_get
  7213 ;; This function uses a non-reentrant model
  7214 ;;
  7215                           
  7216                           	psect	text46
  7217  00112E                     __ptext46:
  7218                           	opt stack 0
  7219  00112E                     _UART_buff_modulo_inc:
  7220                           	opt stack 22
  7221                           
  7222                           ;UART.c: 107: unsigned int my_value = value + 1;
  7223                           
  7224                           ;incstack = 0
  7225  00112E  0E01               	movlw	1
  7226  001130  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7227  001132  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7228  001134  0E00               	movlw	0
  7229  001136  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7230  001138  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7231                           
  7232                           ;UART.c: 108: if (my_value >= modulus) {
  7233  00113A  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7234  00113C  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7235  00113E  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7236  001140  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7237  001142  A0D8               	btfss	status,0,c
  7238  001144  D004               	goto	i2l2398
  7239                           
  7240                           ;UART.c: 109: my_value = 0;
  7241  001146  0E00               	movlw	0
  7242  001148  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7243  00114A  0E00               	movlw	0
  7244  00114C  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7245  00114E                     i2l2398:
  7246                           
  7247                           ;UART.c: 110: }
  7248                           ;UART.c: 111: return (my_value);
  7249  00114E  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7250  001152  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7251  001156  0012               	return	
  7252  001158                     __end_of_UART_buff_modulo_inc:
  7253                           	opt stack 0
  7254                           pclatu	equ	0xFFB
  7255                           pclath	equ	0xFFA
  7256                           tblptru	equ	0xFF8
  7257                           tblptrh	equ	0xFF7
  7258                           tblptrl	equ	0xFF6
  7259                           tablat	equ	0xFF5
  7260                           prodh	equ	0xFF4
  7261                           prodl	equ	0xFF3
  7262                           intcon	equ	0xFF2
  7263                           intcon2	equ	0xFF1
  7264                           indf0	equ	0xFEF
  7265                           postinc0	equ	0xFEE
  7266                           fsr0h	equ	0xFEA
  7267                           fsr0l	equ	0xFE9
  7268                           wreg	equ	0xFE8
  7269                           postdec1	equ	0xFE5
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           plusw2	equ	0xFDB
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           pclatu	equ	0xFFB
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           intcon	equ	0xFF2
  7288                           intcon2	equ	0xFF1
  7289                           indf0	equ	0xFEF
  7290                           postinc0	equ	0xFEE
  7291                           fsr0h	equ	0xFEA
  7292                           fsr0l	equ	0xFE9
  7293                           wreg	equ	0xFE8
  7294                           postdec1	equ	0xFE5
  7295                           fsr1h	equ	0xFE2
  7296                           fsr1l	equ	0xFE1
  7297                           indf2	equ	0xFDF
  7298                           postinc2	equ	0xFDE
  7299                           postdec2	equ	0xFDD
  7300                           plusw2	equ	0xFDB
  7301                           fsr2h	equ	0xFDA
  7302                           fsr2l	equ	0xFD9
  7303                           status	equ	0xFD8
  7304                           
  7305                           	psect	rparam
  7306  0000                     pclatu	equ	0xFFB
  7307                           pclath	equ	0xFFA
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           intcon	equ	0xFF2
  7315                           intcon2	equ	0xFF1
  7316                           indf0	equ	0xFEF
  7317                           postinc0	equ	0xFEE
  7318                           fsr0h	equ	0xFEA
  7319                           fsr0l	equ	0xFE9
  7320                           wreg	equ	0xFE8
  7321                           postdec1	equ	0xFE5
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           plusw2	equ	0xFDB
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332                           	psect	temp
  7333  000045                     btemp:
  7334                           	opt stack 0
  7335  000045                     	ds	1
  7336  0000                     int$flags	set	btemp
  7337                           pclatu	equ	0xFFB
  7338                           pclath	equ	0xFFA
  7339                           tblptru	equ	0xFF8
  7340                           tblptrh	equ	0xFF7
  7341                           tblptrl	equ	0xFF6
  7342                           tablat	equ	0xFF5
  7343                           prodh	equ	0xFF4
  7344                           prodl	equ	0xFF3
  7345                           intcon	equ	0xFF2
  7346                           intcon2	equ	0xFF1
  7347                           indf0	equ	0xFEF
  7348                           postinc0	equ	0xFEE
  7349                           fsr0h	equ	0xFEA
  7350                           fsr0l	equ	0xFE9
  7351                           wreg	equ	0xFE8
  7352                           postdec1	equ	0xFE5
  7353                           fsr1h	equ	0xFE2
  7354                           fsr1l	equ	0xFE1
  7355                           indf2	equ	0xFDF
  7356                           postinc2	equ	0xFDE
  7357                           postdec2	equ	0xFDD
  7358                           plusw2	equ	0xFDB
  7359                           fsr2h	equ	0xFDA
  7360                           fsr2l	equ	0xFD9
  7361                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    480
    Data        10
    BSS         940
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      68
    BANK0           160     25     130
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_4(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1473(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_NokiaStr
    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _NokiaStr->_LcdCharacter
    _LcdCharacter->_LCDwrite
    _NokiaStart->_blackLcd
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _blackLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _NokiaStr->_LcdCharacter

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   23673
                              _Delay
                         _NokiaStart
                           _NokiaStr
                  _SYSTEM_Initialize
                         _respondECU
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12083
                          _Precharge
                         _SetCharger
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    5211
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                              0 BANK0      5     5      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1607
                                             37 COMRAM     1     1      0
                                              2 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     828
                                              0 BANK0      3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0     774
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStr                                             2     0      2    1743
                                             36 COMRAM     2     0      2
                       _LcdCharacter
 ---------------------------------------------------------------------------------
 (2) _LcdCharacter                                         5     5      0    1601
                                             34 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    4029
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _blackLcd
                           _clearLcd
 ---------------------------------------------------------------------------------
 (2) _clearLcd                                             2     2      0    1153
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _blackLcd                                             2     2      0    1184
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (3) _LCDwrite                                             2     1      1    1085
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _SPI1_Exchange8bit                                    1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     607
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _blackLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _NokiaStr
     _LcdCharacter
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
       ___wmul
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _respondECU
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _sendData
       _CRC8
       _FastTransfer_buffer_flush
         _memset
       _crcBufS_put
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     19      82       4       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3F8       9        0.0%
DATA                 0      0     3F8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu May 05 18:48:46 2016

                      _SPI1_Exchange8bit 128C        __end_of_FastTransfer_buffer_flush 0DE8  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l85 0F8E  
                   __end_of_LcdCharacter 0B98                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l223 1294                                      l421 00FC  
                                    l509 0A78                                      l395 0F64  
                                    l644 09DE                                      l636 099C  
                                    l725 123A                                      l629 0994  
                                    l727 123C                                      l664 0FC0  
                                    l497 09E4                                      l674 0FCC  
                                    l658 0FBA                                      l669 0FC6  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                    ??_SPI1_Exchange8bit 001B     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                                     l3010 0F4E  
                                   l3004 0F38                                     l3020 0F70  
                                   l3040 037C                                     l3018 0F6A  
                                   l3122 09E6                                     l3106 0CC6  
                                   l3140 0A70                                     l2236 10FA  
                                   l3108 0CCC                                     l3150 0FD2  
                                   l3062 05F6                                     l3126 09FC  
                                   l3222 00B2                                     l3400 0B3A  
                                   l3160 0892                                     l3136 0A50  
                                   l3232 00F2                                     l3322 0962  
                                   l3154 087C                                     l3074 067A  
                                   l3058 05EC                                     l3090 082C  
                                   l3082 07A6                                     l3306 0344  
                                   l3314 0350                                     l3172 08E4  
                                   l3094 0EF8                                     l3406 0B8C  
                                   l3334 09AC                                     l3326 0978  
                                   l3158 088C                                     l3270 023A  
                                   l3262 019A                                     l3432 111A  
                                   l3168 08BC                                     l3176 090C  
                                   l3272 024E                                     l3098 0F14  
                                   l3370 1160                                     l3338 09C2  
                                   l3178 092C                                     l3428 1106  
                                   l3356 0D52                                     l3284 02D4  
                                   l3268 0234                                     l3382 1188  
                                   l3374 1170                                     l3294 02E0  
                                   l3480 0DF8                                     l3386 1198  
                                   l3490 0E36                                     l3396 0B24  
                                   l3486 0E22                                     l3488 0E2C  
                                   l2972 0F7E                                     l2990 108C  
                                   l2984 0FB0                     receiveData@crcHolder 00CD  
                                   l2986 0FB2                                     l2994 109C  
                                   STR_1 7FE7                                     STR_2 7FFB  
                                   STR_3 7FFB                                     STR_4 7FF4  
                                   _CRC8 0F32                                     u2040 0786  
                                   u2061 037A                                     _LATA 000F89  
                                   u2230 08DC                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u2240 0904  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2331 013E                                     u2237 08D2  
                                   u2247 08FA                                     u2600 0E20  
                                   u2620 0E2A                                     u2640 0E34  
                                   u2660 0E3E                                     u2661 0E3A  
                                   u2727 0EFE                                     i2l97 107E  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART2_Write 0F7C                                     _main 0DE8  
                        _TMR0_StartTimer 12D8                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04C8                                     start 00AC  
              __end_of_SPI1_Exchange8bit 129C                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 1082                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 1260  
                       __end_of_CRCcheck 0A7A           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 12AA                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATA6 007C4E                                    _LATB5 007C55  
                                  _LATD3 007C63                           __CFG_DEBUG$OFF 000000  
                                  i2l183 0070                                    i2l175 004E  
                       __end_of_LCDwrite 1248                                    i2l177 005A  
                                  i2l179 0066                                    i2l554 0B08  
                                  i2l585 11FC                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 0EE6                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                            _ChargerData 00D9                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1022                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                                  _Start 0027                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _ddata 0088                           __CFG_EBTRB$OFF 000000  
                                  _group 0029                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 12C4                           ?_EUSART2_Write 0001  
                                  tablat 000FF5                     __size_of_crcBufS_get 00E2  
                                  plusw2 000FDB                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                 __size_of_SPI1_Initialize 000E  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 0F7C  
                        CRCcheck@SentCRC 00C0                          __initialization 0B98  
                           __end_of_main 0E42                               ToSend@what 00C2  
                                 ??_CRC8 001E                        LcdCharacter@index 00C1  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0027  
                       __end_of_NokiaStr 112E                            __activetblptr 000002  
                          SetMux@channel 001B                        SetCharger@Current 00C0  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
                             _SetCharger 0D1A            FastTransfer_buffer_put@towhat 0024  
                __end_of_TMR0_StartTimer 12DC               __end_of_EUSART2_Initialize 1022  
               _eusart2TxBufferRemaining 0043                               Precharge@i 00C1  
                      SetCharger@Voltage 00C1                                   _ANSELA 000F38  
                                 ?_putch 0001                                   _ANSELB 000F39  
                                 _ANSELC 000F3A                                   _ANSELD 000F3B  
                                 _ANSELE 000F3C                               _NokiaStart 0C20  
                                 _RC1STA 000FAB                                   _RC2STA 000F71  
                                 Delay@i 0020                           __CFG_WDTEN$OFF 000000  
                                 i2l2632 0554                                   i2l2626 04E8  
                                 i2l2730 10B6                                   i2l2724 107A  
                                 i2l2398 114E                                   i2l2646 0B04  
                                 i2l2750 104C              UART_buff_modulo_inc@modulus 0003  
                                 i2l2738 10D6                                   _RCREG1 000FAE  
                                 _RCREG2 000F74                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _SPBRG2 000F75  
                                 _TX1STA 000FAC                                   _TX2STA 000F72  
                                 _TRISA3 007C93                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                       __end_of_blackLcd 11A8                                   _TXREG1 000FAD  
                                 _TXREG2 000F73                    SPI1_Exchange8bit@data 001B  
                       __end_of_clearLcd 1180               __size_of_SPI1_Exchange8bit 0010  
                         __CFG_XINST$OFF 000000                    __size_of_LcdCharacter 008C  
                                 _ToSend 1212                                   _SetMux 0FB6  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0027  
                          _output_buffer 0300                         crcBufS_get@space 001E  
                                 ___wmul 11CE                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 1082                                   clear_0 0B9E  
                                 clear_1 0BAA                                   clear_2 0BB6  
                                 clear_3 0BC2                                   clear_4 0BCE  
                                 clear_5 0BDA                       __size_of_Precharge 009E  
                                 _printf 0872                                   _rx_len 0040  
                       __end_of_sendData 0D1A                             __pdataCOMRAM 0044  
                           __mediumconst 7E06                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174                     _EUSART2_Transmit_ISR 1054  
           __end_of_UART_buff_modulo_inc 1158                          ??_EUSART2_Write 001B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart2RxBuffer 0093  
                           _LcdCharacter 0B0C                        _SYSTEM_Initialize 1260  
                        _eusart2TxBuffer 009B                               __accesstop 0060  
                __end_of__initialization 0C12                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                           ?_updateComms 0001                                ?_LCDwrite 0021  
                          __end_of_Delay 0F32                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 079C                             __pidataBANK0 12CE  
                    ??_SYSTEM_Initialize 001B                         crcBufS_put@_this 001B  
 __end_of_FastTransfer_buffer_modulo_inc 1104  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 10DA                        ??_SPI1_Initialize 001B  
                            NokiaStr@str 0025                            __end_of_putch 12CE  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0026  
                  LcdCharacter@character 00C0                       UART_buff_get@_this 0007  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 0B0C  
                 ??_EUSART1_Transmit_ISR 000C                    __end_of_UART_buff_put 05E2  
                                ??_Delay 001F                              ?_SetCharger 00C0  
                  ?_EUSART2_Transmit_ISR 0001              __end_of_EUSART1_Receive_ISR 1212  
              _FastTransfer_buffer_flush 0D86                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                       ?_TMR0_StartTimer 0001                __end_of_SYSTEM_Initialize 1276  
                 receiveData@holder_1473 00D2                                  ??_putch 001C  
                    _addressErrorCounter 00A3                              ?_NokiaStart 0001  
                          _eusart2RxHead 0036                            _eusart2TxHead 0038  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FE7  
                          _eusart2RxTail 0037                            _eusart2TxTail 0039  
                        __CFG_PLLCFG$OFF 000000                        __end_of_Precharge 09E4  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
                             __pnvCOMRAM 0041                  __size_of_UART_buff_size 0016  
                              ?_NokiaStr 0025                               ??_LCDwrite 0022  
                   __size_of_receiveData 02A4                                  ?_ToSend 00C2  
                                ?_SetMux 0001                       __CFG_CCP2MX$PORTC1 000000  
                                ?___wmul 001B                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_memset 001B  
                             _crc_buffer 00AF                                  ?_printf 001D  
                     UART_buff_put@_this 0007                                ?_blackLcd 0001  
                              ?_clearLcd 0001                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 10DA             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP1ADD 000FC8                      sendData@whereToSend 00C1  
                    _receiveArrayAddress 002B                                  _SSP1BUF 000FC9  
                              ?_sendData 0001                        _alignErrorCounter 00A5  
                             ??_NokiaStr 0027                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 001C                          __size_of_SetMux 0038  
                    __size_of_SetCharger 006C                                _AKNAKsend 0033  
                   _UART_buff_modulo_inc 112E                          __size_of___wmul 0026  
                                _calc_CS 0034                                  __pcinit 0B98  
                    __size_of_NokiaStart 0082                          __size_of_memset 002C  
                                __ramtop 0600                                  __ptext0 0DE8  
                                __ptext1 11A8                                  __ptext2 0E42  
                                __ptext3 0CA2                                  __ptext4 06C4  
                                __ptext5 0D86                                  __ptext6 1082  
                                __ptext7 1212                                  __ptext8 0354  
                                __ptext9 10DA                          __size_of_printf 00D4  
                              _T0CONbits 000FD5                    _OSCILLATOR_Initialize 129C  
                 ??_EUSART2_Transmit_ISR 0001                               ??_blackLcd 0023  
                _FastTransfer_buffer_put 0354                    CRCcheck@calculatedCRC 00C1  
               ??_PIN_MANAGER_Initialize 001B                               ??_clearLcd 0023  
           crcBufS_status_put@wantedTime 0023                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0016  
                   end_of_initialization 0C12                                Delay@wait 001B  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7E06  
                             ??_sendData 00C0                       _EUSART2_Initialize 0FEE  
                                printf@c 0024                                  printf@f 001D  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 0026  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                             _respondECU 0E42                      CRCcheck@arrayHolder 00C2  
                    ?_EUSART2_Initialize 0001                   _dataAdressErrorCounter 00A9  
                             _rx_address 003E                             LCDwrite@data 0021  
                           LCDwrite@mode 0022                                _TRISBbits 000F93  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 0062  
                        _SPI1_Initialize 12AA                           _UART_buff_size 1276  
                    __end_of_crcBufS_get 06C4                      __end_of_crcBufS_put 079C  
                      __size_of_CRCcheck 0096                          Precharge@i_1753 00C3  
                          _moduleAddress 003C                     _timer0ReloadVal16bit 0041  
                             CRCcheck@rt 00C5                           __end_of_ToSend 122E  
                         __end_of_SetMux 0FEE                        __size_of_LCDwrite 001A  
           __end_of_INTERRUPT_Initialize 12C4                          _crcErrorCounter 00A7  
                         __end_of___wmul 11F4                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 12DC                ??_FastTransfer_buffer_put 00C0  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 10AE  
                      crcBufS_put@status 001F                           __end_of_printf 0946  
                           receiveData@r 00D7                             receiveData@u 00D5  
                           ??_SetCharger 0027                      start_initialization 0B98  
               __size_of_TMR0_Initialize 0018          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 0025                              putch@txData 001C  
                           ??_NokiaStart 0025                    __end_of_EUSART2_Write 0FB6  
                         UART_buff_get@c 000B                   __end_of_UART_buff_size 128C  
                         UART_buff_put@c 0009                                _Precharge 0946  
                               ??_ToSend 0026                                 ??_SetMux 001B  
                 ??_UART_buff_modulo_inc 0005                                 CRC8@data 001B  
                        crcBufS_get@time 001D                        __size_of_NokiaStr 002A  
                     __end_of_SetCharger 0D86                              ?_respondECU 0001  
                               ??___wmul 001F                              __pdataBANK0 00D9  
                               ??_memset 0021                                 ??_printf 0021  
                     __end_of_NokiaStart 0CA2                           _eusart2RxCount 0035  
                            __pbssCOMRAM 0027            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00C0                        __size_of_blackLcd 0028  
                __end_of_SPI1_Initialize 12B8                        __size_of_clearLcd 0028  
                            _crcBufS_get 05E2                              _crcBufS_put 06C4  
                    EUSART2_Write@txData 001B                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00C7  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00C2  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                               ?_Precharge 0001  
                 _PIN_MANAGER_Initialize 0E96                        __size_of_sendData 0078  
                              __pintcode 0008                            __pmediumconst 7E06  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                    __size_of_respondECU 0054                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 12B8                             _receiveArray 0060  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 002C  
                               _CRCcheck 09E4                           ___wmul@product 001F  
                               _LATBbits 000F8A                                 _LATCbits 000F8B  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 122E  
                               i2u151_40 0A98      __size_of_INTERRUPT_InterruptManager 00A4  
                               i2u165_40 103C                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0354  
                               _SSP1CON1 000FC6                                 _SSP1STAT 000FC7  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0200  
                              _rx_buffer 0400                        ___wmul@multiplier 001B  
                             printf@flag 0021                            _UART_buff_get 0A7A  
                          _UART_buff_put 04C8                           Precharge@OnOff 00C0  
          __size_of_EUSART2_Transmit_ISR 002E                         ?_SPI1_Initialize 0001  
                         SetCharger@mode 00C2                              _INTCON2bits 000FF1  
                              copy_data0 0BF4                    ?_INTERRUPT_Initialize 0001  
                          ?_LcdCharacter 0001                        _sendStructAddress 002D  
                          ??_updateComms 0027                              blackLcd@res 0023  
                               _NokiaStr 1104                                 __Hrparam 0000  
                            ??_Precharge 0024                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                         ?_UART_buff_get 0007                           ?_UART_buff_put 0007  
                            CRC8@extract 001F                                 _blackLcd 1180  
                              sendData@i 00C3                                 _clearLcd 1158  
               crcBufS_status_put@status 001E                                 __ptext10 00B0  
                               __ptext11 09E4                                 __ptext20 0946  
                               __ptext12 079C                                 __ptext21 1260  
                               __ptext13 05E2                                 __ptext30 11CE  
                               __ptext22 1248                                 __ptext14 0F32  
                               __ptext31 0C20                                 __ptext23 12D8  
                               __ptext15 0D1A                                 __ptext40 10AE  
                               __ptext32 1158                                 __ptext24 0E96  
                               __ptext16 0872                                 __ptext41 1022  
                               __ptext33 1180                                 __ptext25 129C  
                               __ptext17 12C4                                 __ptext42 1276  
                               __ptext34 122E                                 __ptext26 12B8  
                               __ptext18 0F7C                                 __ptext43 0A7A  
                               __ptext35 128C                                 __ptext27 0FEE  
                               __ptext19 0FB6                                 __ptext44 11F4  
                               __ptext36 12AA                                 __ptext28 1104  
                               __ptext45 04C8                                 __ptext37 0EE6  
                               __ptext29 0B0C                                 __ptext46 112E  
                               __ptext39 1054                             _SSP1CON1bits 000FC6  
                         ??_LcdCharacter 0023                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 003D                            __size_of_main 005A  
                            _receiveData 00B0                           _Transmit_stall 0044  
                               _sendData 0CA2                               _RC1STAbits 000FAB  
                             _RC2STAbits 000F71                              clearLcd@res 0023  
                             _FONTLOOKUP 7E07                             ??_respondECU 0027  
                               int$flags 0045                             _serial_write 0031  
                    __end_of_updateComms 11CE       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 11F4                        receiveData@holder 00CF  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00AB  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0E96                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 1054  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0023  
                            _serial_peek 00AD                              _serial_read 002F  
               ?_FastTransfer_buffer_put 0021                                 printf@ap 0022  
                               printf@cp 0025            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0009                          ??_UART_buff_put 000A  
                 __size_of_EUSART2_Write 003A                      _EUSART2_Receive_ISR 10AE  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1248                receiveData@crcHolder_1474 00CE  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0872                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0EE6         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 11A8  
