

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu Jun 16 07:14:33 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  0013FA                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _Transmit_stall
    81  0013FA  01                 	db	1
    82                           
    83                           	psect	idataBANK0
    84  0013E8                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _ChargerData
    88  0013E8  4D                 	db	77
    89  0013E9  2C                 	db	44
    90  0013EA  00                 	db	0
    91  0013EB  2C                 	db	44
    92  0013EC  00                 	db	0
    93  0013ED  2C                 	db	44
    94  0013EE  00                 	db	0
    95  0013EF  2C                 	db	44
    96  0013F0  45                 	db	69
    97                           
    98                           	psect	mediumconst
    99  007DF4                     __pmediumconst:
   100                           	opt stack 0
   101  007DF4  00                 	db	0
   102  007DF5                     _FONTLOOKUP:
   103                           	opt stack 0
   104  007DF5  00                 	db	0
   105  007DF6  00                 	db	0
   106  007DF7  00                 	db	0
   107  007DF8  00                 	db	0
   108  007DF9  00                 	db	0
   109  007DFA  00                 	db	0
   110  007DFB  00                 	db	0
   111  007DFC  5F                 	db	95
   112  007DFD  00                 	db	0
   113  007DFE  00                 	db	0
   114  007DFF  00                 	db	0
   115  007E00  07                 	db	7
   116  007E01  00                 	db	0
   117  007E02  07                 	db	7
   118  007E03  00                 	db	0
   119  007E04  14                 	db	20
   120  007E05  7F                 	db	127
   121  007E06  14                 	db	20
   122  007E07  7F                 	db	127
   123  007E08  14                 	db	20
   124  007E09  24                 	db	36
   125  007E0A  2A                 	db	42
   126  007E0B  7F                 	db	127
   127  007E0C  2A                 	db	42
   128  007E0D  12                 	db	18
   129  007E0E  23                 	db	35
   130  007E0F  13                 	db	19
   131  007E10  08                 	db	8
   132  007E11  64                 	db	100
   133  007E12  62                 	db	98
   134  007E13  36                 	db	54
   135  007E14  49                 	db	73
   136  007E15  55                 	db	85
   137  007E16  22                 	db	34
   138  007E17  50                 	db	80
   139  007E18  00                 	db	0
   140  007E19  05                 	db	5
   141  007E1A  03                 	db	3
   142  007E1B  00                 	db	0
   143  007E1C  00                 	db	0
   144  007E1D  00                 	db	0
   145  007E1E  1C                 	db	28
   146  007E1F  22                 	db	34
   147  007E20  41                 	db	65
   148  007E21  00                 	db	0
   149  007E22  00                 	db	0
   150  007E23  41                 	db	65
   151  007E24  22                 	db	34
   152  007E25  1C                 	db	28
   153  007E26  00                 	db	0
   154  007E27  14                 	db	20
   155  007E28  08                 	db	8
   156  007E29  3E                 	db	62
   157  007E2A  08                 	db	8
   158  007E2B  14                 	db	20
   159  007E2C  08                 	db	8
   160  007E2D  08                 	db	8
   161  007E2E  3E                 	db	62
   162  007E2F  08                 	db	8
   163  007E30  08                 	db	8
   164  007E31  00                 	db	0
   165  007E32  50                 	db	80
   166  007E33  30                 	db	48
   167  007E34  00                 	db	0
   168  007E35  00                 	db	0
   169  007E36  08                 	db	8
   170  007E37  08                 	db	8
   171  007E38  08                 	db	8
   172  007E39  08                 	db	8
   173  007E3A  08                 	db	8
   174  007E3B  00                 	db	0
   175  007E3C  60                 	db	96
   176  007E3D  60                 	db	96
   177  007E3E  00                 	db	0
   178  007E3F  00                 	db	0
   179  007E40  20                 	db	32
   180  007E41  10                 	db	16
   181  007E42  08                 	db	8
   182  007E43  04                 	db	4
   183  007E44  02                 	db	2
   184  007E45  3E                 	db	62
   185  007E46  51                 	db	81
   186  007E47  49                 	db	73
   187  007E48  45                 	db	69
   188  007E49  3E                 	db	62
   189  007E4A  00                 	db	0
   190  007E4B  42                 	db	66
   191  007E4C  7F                 	db	127
   192  007E4D  40                 	db	64
   193  007E4E  00                 	db	0
   194  007E4F  42                 	db	66
   195  007E50  61                 	db	97
   196  007E51  51                 	db	81
   197  007E52  49                 	db	73
   198  007E53  46                 	db	70
   199  007E54  21                 	db	33
   200  007E55  41                 	db	65
   201  007E56  45                 	db	69
   202  007E57  4B                 	db	75
   203  007E58  31                 	db	49
   204  007E59  18                 	db	24
   205  007E5A  14                 	db	20
   206  007E5B  12                 	db	18
   207  007E5C  7F                 	db	127
   208  007E5D  10                 	db	16
   209  007E5E  27                 	db	39
   210  007E5F  45                 	db	69
   211  007E60  45                 	db	69
   212  007E61  45                 	db	69
   213  007E62  39                 	db	57
   214  007E63  3C                 	db	60
   215  007E64  4A                 	db	74
   216  007E65  49                 	db	73
   217  007E66  49                 	db	73
   218  007E67  30                 	db	48
   219  007E68  01                 	db	1
   220  007E69  71                 	db	113
   221  007E6A  09                 	db	9
   222  007E6B  05                 	db	5
   223  007E6C  03                 	db	3
   224  007E6D  36                 	db	54
   225  007E6E  49                 	db	73
   226  007E6F  49                 	db	73
   227  007E70  49                 	db	73
   228  007E71  36                 	db	54
   229  007E72  06                 	db	6
   230  007E73  49                 	db	73
   231  007E74  49                 	db	73
   232  007E75  29                 	db	41
   233  007E76  1E                 	db	30
   234  007E77  00                 	db	0
   235  007E78  36                 	db	54
   236  007E79  36                 	db	54
   237  007E7A  00                 	db	0
   238  007E7B  00                 	db	0
   239  007E7C  00                 	db	0
   240  007E7D  56                 	db	86
   241  007E7E  36                 	db	54
   242  007E7F  00                 	db	0
   243  007E80  00                 	db	0
   244  007E81  08                 	db	8
   245  007E82  14                 	db	20
   246  007E83  22                 	db	34
   247  007E84  41                 	db	65
   248  007E85  00                 	db	0
   249  007E86  14                 	db	20
   250  007E87  14                 	db	20
   251  007E88  14                 	db	20
   252  007E89  14                 	db	20
   253  007E8A  14                 	db	20
   254  007E8B  00                 	db	0
   255  007E8C  41                 	db	65
   256  007E8D  22                 	db	34
   257  007E8E  14                 	db	20
   258  007E8F  08                 	db	8
   259  007E90  02                 	db	2
   260  007E91  01                 	db	1
   261  007E92  51                 	db	81
   262  007E93  09                 	db	9
   263  007E94  06                 	db	6
   264  007E95  32                 	db	50
   265  007E96  49                 	db	73
   266  007E97  79                 	db	121
   267  007E98  41                 	db	65
   268  007E99  3E                 	db	62
   269  007E9A  7E                 	db	126
   270  007E9B  11                 	db	17
   271  007E9C  11                 	db	17
   272  007E9D  11                 	db	17
   273  007E9E  7E                 	db	126
   274  007E9F  7F                 	db	127
   275  007EA0  49                 	db	73
   276  007EA1  49                 	db	73
   277  007EA2  49                 	db	73
   278  007EA3  36                 	db	54
   279  007EA4  3E                 	db	62
   280  007EA5  41                 	db	65
   281  007EA6  41                 	db	65
   282  007EA7  41                 	db	65
   283  007EA8  22                 	db	34
   284  007EA9  7F                 	db	127
   285  007EAA  41                 	db	65
   286  007EAB  41                 	db	65
   287  007EAC  22                 	db	34
   288  007EAD  1C                 	db	28
   289  007EAE  7F                 	db	127
   290  007EAF  49                 	db	73
   291  007EB0  49                 	db	73
   292  007EB1  49                 	db	73
   293  007EB2  41                 	db	65
   294  007EB3  7F                 	db	127
   295  007EB4  09                 	db	9
   296  007EB5  09                 	db	9
   297  007EB6  09                 	db	9
   298  007EB7  01                 	db	1
   299  007EB8  3E                 	db	62
   300  007EB9  41                 	db	65
   301  007EBA  49                 	db	73
   302  007EBB  49                 	db	73
   303  007EBC  7A                 	db	122
   304  007EBD  7F                 	db	127
   305  007EBE  08                 	db	8
   306  007EBF  08                 	db	8
   307  007EC0  08                 	db	8
   308  007EC1  7F                 	db	127
   309  007EC2  00                 	db	0
   310  007EC3  41                 	db	65
   311  007EC4  7F                 	db	127
   312  007EC5  41                 	db	65
   313  007EC6  00                 	db	0
   314  007EC7  20                 	db	32
   315  007EC8  40                 	db	64
   316  007EC9  41                 	db	65
   317  007ECA  3F                 	db	63
   318  007ECB  01                 	db	1
   319  007ECC  7F                 	db	127
   320  007ECD  08                 	db	8
   321  007ECE  14                 	db	20
   322  007ECF  22                 	db	34
   323  007ED0  41                 	db	65
   324  007ED1  7F                 	db	127
   325  007ED2  40                 	db	64
   326  007ED3  40                 	db	64
   327  007ED4  40                 	db	64
   328  007ED5  40                 	db	64
   329  007ED6  7F                 	db	127
   330  007ED7  02                 	db	2
   331  007ED8  0C                 	db	12
   332  007ED9  02                 	db	2
   333  007EDA  7F                 	db	127
   334  007EDB  7F                 	db	127
   335  007EDC  04                 	db	4
   336  007EDD  08                 	db	8
   337  007EDE  10                 	db	16
   338  007EDF  7F                 	db	127
   339  007EE0  3E                 	db	62
   340  007EE1  41                 	db	65
   341  007EE2  41                 	db	65
   342  007EE3  41                 	db	65
   343  007EE4  3E                 	db	62
   344  007EE5  7F                 	db	127
   345  007EE6  09                 	db	9
   346  007EE7  09                 	db	9
   347  007EE8  09                 	db	9
   348  007EE9  06                 	db	6
   349  007EEA  3E                 	db	62
   350  007EEB  41                 	db	65
   351  007EEC  51                 	db	81
   352  007EED  21                 	db	33
   353  007EEE  5E                 	db	94
   354  007EEF  7F                 	db	127
   355  007EF0  09                 	db	9
   356  007EF1  19                 	db	25
   357  007EF2  29                 	db	41
   358  007EF3  46                 	db	70
   359  007EF4  46                 	db	70
   360  007EF5  49                 	db	73
   361  007EF6  49                 	db	73
   362  007EF7  49                 	db	73
   363  007EF8  31                 	db	49
   364  007EF9  01                 	db	1
   365  007EFA  01                 	db	1
   366  007EFB  7F                 	db	127
   367  007EFC  01                 	db	1
   368  007EFD  01                 	db	1
   369  007EFE  3F                 	db	63
   370  007EFF  40                 	db	64
   371  007F00  40                 	db	64
   372  007F01  40                 	db	64
   373  007F02  3F                 	db	63
   374  007F03  1F                 	db	31
   375  007F04  20                 	db	32
   376  007F05  40                 	db	64
   377  007F06  20                 	db	32
   378  007F07  1F                 	db	31
   379  007F08  3F                 	db	63
   380  007F09  40                 	db	64
   381  007F0A  38                 	db	56
   382  007F0B  40                 	db	64
   383  007F0C  3F                 	db	63
   384  007F0D  63                 	db	99
   385  007F0E  14                 	db	20
   386  007F0F  08                 	db	8
   387  007F10  14                 	db	20
   388  007F11  63                 	db	99
   389  007F12  07                 	db	7
   390  007F13  08                 	db	8
   391  007F14  70                 	db	112
   392  007F15  08                 	db	8
   393  007F16  07                 	db	7
   394  007F17  61                 	db	97
   395  007F18  51                 	db	81
   396  007F19  49                 	db	73
   397  007F1A  45                 	db	69
   398  007F1B  43                 	db	67
   399  007F1C  00                 	db	0
   400  007F1D  7F                 	db	127
   401  007F1E  41                 	db	65
   402  007F1F  41                 	db	65
   403  007F20  00                 	db	0
   404  007F21  02                 	db	2
   405  007F22  04                 	db	4
   406  007F23  08                 	db	8
   407  007F24  10                 	db	16
   408  007F25  20                 	db	32
   409  007F26  00                 	db	0
   410  007F27  41                 	db	65
   411  007F28  41                 	db	65
   412  007F29  7F                 	db	127
   413  007F2A  00                 	db	0
   414  007F2B  04                 	db	4
   415  007F2C  02                 	db	2
   416  007F2D  01                 	db	1
   417  007F2E  02                 	db	2
   418  007F2F  04                 	db	4
   419  007F30  40                 	db	64
   420  007F31  40                 	db	64
   421  007F32  40                 	db	64
   422  007F33  40                 	db	64
   423  007F34  40                 	db	64
   424  007F35  00                 	db	0
   425  007F36  01                 	db	1
   426  007F37  02                 	db	2
   427  007F38  04                 	db	4
   428  007F39  00                 	db	0
   429  007F3A  20                 	db	32
   430  007F3B  54                 	db	84
   431  007F3C  54                 	db	84
   432  007F3D  54                 	db	84
   433  007F3E  78                 	db	120
   434  007F3F  7F                 	db	127
   435  007F40  48                 	db	72
   436  007F41  44                 	db	68
   437  007F42  44                 	db	68
   438  007F43  38                 	db	56
   439  007F44  38                 	db	56
   440  007F45  44                 	db	68
   441  007F46  44                 	db	68
   442  007F47  44                 	db	68
   443  007F48  20                 	db	32
   444  007F49  38                 	db	56
   445  007F4A  44                 	db	68
   446  007F4B  44                 	db	68
   447  007F4C  48                 	db	72
   448  007F4D  7F                 	db	127
   449  007F4E  38                 	db	56
   450  007F4F  54                 	db	84
   451  007F50  54                 	db	84
   452  007F51  54                 	db	84
   453  007F52  18                 	db	24
   454  007F53  08                 	db	8
   455  007F54  7E                 	db	126
   456  007F55  09                 	db	9
   457  007F56  01                 	db	1
   458  007F57  02                 	db	2
   459  007F58  0C                 	db	12
   460  007F59  52                 	db	82
   461  007F5A  52                 	db	82
   462  007F5B  52                 	db	82
   463  007F5C  3E                 	db	62
   464  007F5D  7F                 	db	127
   465  007F5E  08                 	db	8
   466  007F5F  04                 	db	4
   467  007F60  04                 	db	4
   468  007F61  78                 	db	120
   469  007F62  00                 	db	0
   470  007F63  44                 	db	68
   471  007F64  7D                 	db	125
   472  007F65  40                 	db	64
   473  007F66  00                 	db	0
   474  007F67  20                 	db	32
   475  007F68  40                 	db	64
   476  007F69  44                 	db	68
   477  007F6A  3D                 	db	61
   478  007F6B  00                 	db	0
   479  007F6C  7F                 	db	127
   480  007F6D  10                 	db	16
   481  007F6E  28                 	db	40
   482  007F6F  44                 	db	68
   483  007F70  00                 	db	0
   484  007F71  00                 	db	0
   485  007F72  41                 	db	65
   486  007F73  7F                 	db	127
   487  007F74  40                 	db	64
   488  007F75  00                 	db	0
   489  007F76  7C                 	db	124
   490  007F77  04                 	db	4
   491  007F78  18                 	db	24
   492  007F79  04                 	db	4
   493  007F7A  78                 	db	120
   494  007F7B  7C                 	db	124
   495  007F7C  08                 	db	8
   496  007F7D  04                 	db	4
   497  007F7E  04                 	db	4
   498  007F7F  78                 	db	120
   499  007F80  38                 	db	56
   500  007F81  44                 	db	68
   501  007F82  44                 	db	68
   502  007F83  44                 	db	68
   503  007F84  38                 	db	56
   504  007F85  7C                 	db	124
   505  007F86  14                 	db	20
   506  007F87  14                 	db	20
   507  007F88  14                 	db	20
   508  007F89  08                 	db	8
   509  007F8A  08                 	db	8
   510  007F8B  14                 	db	20
   511  007F8C  14                 	db	20
   512  007F8D  18                 	db	24
   513  007F8E  7C                 	db	124
   514  007F8F  7C                 	db	124
   515  007F90  08                 	db	8
   516  007F91  04                 	db	4
   517  007F92  04                 	db	4
   518  007F93  08                 	db	8
   519  007F94  48                 	db	72
   520  007F95  54                 	db	84
   521  007F96  54                 	db	84
   522  007F97  54                 	db	84
   523  007F98  20                 	db	32
   524  007F99  04                 	db	4
   525  007F9A  3F                 	db	63
   526  007F9B  44                 	db	68
   527  007F9C  40                 	db	64
   528  007F9D  20                 	db	32
   529  007F9E  3C                 	db	60
   530  007F9F  40                 	db	64
   531  007FA0  40                 	db	64
   532  007FA1  20                 	db	32
   533  007FA2  7C                 	db	124
   534  007FA3  1C                 	db	28
   535  007FA4  20                 	db	32
   536  007FA5  40                 	db	64
   537  007FA6  20                 	db	32
   538  007FA7  1C                 	db	28
   539  007FA8  3C                 	db	60
   540  007FA9  40                 	db	64
   541  007FAA  30                 	db	48
   542  007FAB  40                 	db	64
   543  007FAC  3C                 	db	60
   544  007FAD  44                 	db	68
   545  007FAE  28                 	db	40
   546  007FAF  10                 	db	16
   547  007FB0  28                 	db	40
   548  007FB1  44                 	db	68
   549  007FB2  0C                 	db	12
   550  007FB3  50                 	db	80
   551  007FB4  50                 	db	80
   552  007FB5  50                 	db	80
   553  007FB6  3C                 	db	60
   554  007FB7  44                 	db	68
   555  007FB8  64                 	db	100
   556  007FB9  54                 	db	84
   557  007FBA  4C                 	db	76
   558  007FBB  44                 	db	68
   559  007FBC  00                 	db	0
   560  007FBD  08                 	db	8
   561  007FBE  36                 	db	54
   562  007FBF  41                 	db	65
   563  007FC0  00                 	db	0
   564  007FC1  00                 	db	0
   565  007FC2  00                 	db	0
   566  007FC3  7F                 	db	127
   567  007FC4  00                 	db	0
   568  007FC5  00                 	db	0
   569  007FC6  00                 	db	0
   570  007FC7  41                 	db	65
   571  007FC8  36                 	db	54
   572  007FC9  08                 	db	8
   573  007FCA  00                 	db	0
   574  007FCB  10                 	db	16
   575  007FCC  08                 	db	8
   576  007FCD  08                 	db	8
   577  007FCE  10                 	db	16
   578  007FCF  08                 	db	8
   579  007FD0  78                 	db	120
   580  007FD1  46                 	db	70
   581  007FD2  41                 	db	65
   582  007FD3  46                 	db	70
   583  007FD4  78                 	db	120
   584  007FD5                     __end_of_FONTLOOKUP:
   585                           	opt stack 0
   586  007FD5                     STR_3:
   587  007FD5  43                 	db	67	;'C'
   588  007FD6  68                 	db	104	;'h'
   589  007FD7  61                 	db	97	;'a'
   590  007FD8  72                 	db	114	;'r'
   591  007FD9  67                 	db	103	;'g'
   592  007FDA  65                 	db	101	;'e'
   593  007FDB  72                 	db	114	;'r'
   594  007FDC  20                 	db	32
   595  007FDD  43                 	db	67	;'C'
   596  007FDE  6F                 	db	111	;'o'
   597  007FDF  6E                 	db	110	;'n'
   598  007FE0  74                 	db	116	;'t'
   599  007FE1  72                 	db	114	;'r'
   600  007FE2  6F                 	db	111	;'o'
   601  007FE3  6C                 	db	108	;'l'
   602  007FE4  00                 	db	0
   603  007FE5                     STR_4:
   604  007FE5  57                 	db	87	;'W'
   605  007FE6  61                 	db	97	;'a'
   606  007FE7  69                 	db	105	;'i'
   607  007FE8  74                 	db	116	;'t'
   608  007FE9  69                 	db	105	;'i'
   609  007FEA  6E                 	db	110	;'n'
   610  007FEB  67                 	db	103	;'g'
   611  007FEC  20                 	db	32
   612  007FED  6F                 	db	111	;'o'
   613  007FEE  6E                 	db	110	;'n'
   614  007FEF  20                 	db	32
   615  007FF0  42                 	db	66	;'B'
   616  007FF1  4D                 	db	77	;'M'
   617  007FF2  4D                 	db	77	;'M'
   618  007FF3  00                 	db	0
   619  007FF4                     STR_5:
   620  007FF4  28                 	db	40
   621  007FF5  6E                 	db	110	;'n'
   622  007FF6  75                 	db	117	;'u'
   623  007FF7  6C                 	db	108	;'l'
   624  007FF8  6C                 	db	108	;'l'
   625  007FF9  29                 	db	41
   626  007FFA  00                 	db	0
   627  007FFB                     STR_1:
   628  007FFB  25                 	db	37
   629  007FFC  73                 	db	115	;'s'
   630  007FFD  00                 	db	0
   631  0000                     
   632                           ; #config settings
   633  007FFE  00                 	db	0	; dummy byte at the end
   634  0000                     
   635                           	psect	nvCOMRAM
   636  000041                     __pnvCOMRAM:
   637                           	opt stack 0
   638  000041                     _timer0ReloadVal16bit:
   639                           	opt stack 0
   640  000041                     	ds	2
   641  000043                     _eusart2TxBufferRemaining:
   642                           	opt stack 0
   643  000043                     	ds	1
   644  0000                     _ANSELA	set	3896
   645  0000                     _ANSELB	set	3897
   646  0000                     _ANSELC	set	3898
   647  0000                     _ANSELD	set	3899
   648  0000                     _ANSELE	set	3900
   649  0000                     _BAUD1CON	set	4024
   650  0000                     _BAUD2CON	set	3952
   651  0000                     _INTCON2bits	set	4081
   652  0000                     _INTCONbits	set	4082
   653  0000                     _IPR1bits	set	3999
   654  0000                     _IPR3bits	set	4005
   655  0000                     _LATA	set	3977
   656  0000                     _LATAbits	set	3977
   657  0000                     _LATB	set	3978
   658  0000                     _LATBbits	set	3978
   659  0000                     _LATC	set	3979
   660  0000                     _LATCbits	set	3979
   661  0000                     _LATD	set	3980
   662  0000                     _LATE	set	3981
   663  0000                     _OSCCON	set	4051
   664  0000                     _OSCCON2	set	4050
   665  0000                     _OSCTUNE	set	3995
   666  0000                     _PIE1bits	set	3997
   667  0000                     _PIE3bits	set	4003
   668  0000                     _PIR1bits	set	3998
   669  0000                     _PIR3bits	set	4004
   670  0000                     _RC1STA	set	4011
   671  0000                     _RC1STAbits	set	4011
   672  0000                     _RC2STA	set	3953
   673  0000                     _RC2STAbits	set	3953
   674  0000                     _RCONbits	set	4048
   675  0000                     _RCREG1	set	4014
   676  0000                     _RCREG2	set	3956
   677  0000                     _SPBRG1	set	4015
   678  0000                     _SPBRG2	set	3957
   679  0000                     _SPBRGH1	set	4016
   680  0000                     _SPBRGH2	set	3958
   681  0000                     _SSP1ADD	set	4040
   682  0000                     _SSP1BUF	set	4041
   683  0000                     _SSP1CON1	set	4038
   684  0000                     _SSP1CON1bits	set	4038
   685  0000                     _SSP1STAT	set	4039
   686  0000                     _SSP1STATbits	set	4039
   687  0000                     _T0CON	set	4053
   688  0000                     _T0CONbits	set	4053
   689  0000                     _TMR0H	set	4055
   690  0000                     _TMR0L	set	4054
   691  0000                     _TRISA	set	3986
   692  0000                     _TRISAbits	set	3986
   693  0000                     _TRISB	set	3987
   694  0000                     _TRISBbits	set	3987
   695  0000                     _TRISC	set	3988
   696  0000                     _TRISCbits	set	3988
   697  0000                     _TRISD	set	3989
   698  0000                     _TRISE	set	3990
   699  0000                     _TX1STA	set	4012
   700  0000                     _TX2STA	set	3954
   701  0000                     _TXREG1	set	4013
   702  0000                     _TXREG2	set	3955
   703  0000                     _WPUB	set	3937
   704  0000                     _LATA3	set	31819
   705  0000                     _LATB0	set	31824
   706  0000                     _LATB1	set	31825
   707  0000                     _LATB3	set	31827
   708  0000                     _LATB4	set	31828
   709  0000                     _LATB5	set	31829
   710  0000                     _LATC0	set	31832
   711  0000                     _LATC1	set	31833
   712  0000                     _LATD0	set	31840
   713  0000                     _LATD3	set	31843
   714  0000                     _TRISD0	set	31912
   715  0000                     _TRISD2	set	31914
   716  0000                     _TRISD3	set	31915
   717                           
   718                           	psect	cinit
   719  000C5C                     __pcinit:
   720                           	opt stack 0
   721  000C5C                     start_initialization:
   722                           	opt stack 0
   723  000C5C                     __initialization:
   724                           	opt stack 0
   725                           
   726                           ; Clear objects allocated to BANK4 (200 bytes)
   727  000C5C  EE04  F000         	lfsr	0,__pbssBANK4
   728  000C60  0EC8               	movlw	200
   729  000C62                     clear_0:
   730  000C62  6AEE               	clrf	postinc0,c
   731  000C64  06E8               	decf	wreg,f,c
   732  000C66  E1FD               	bnz	clear_0
   733                           
   734                           ; Clear objects allocated to BANK3 (206 bytes)
   735  000C68  EE03  F000         	lfsr	0,__pbssBANK3
   736  000C6C  0ECE               	movlw	206
   737  000C6E                     clear_1:
   738  000C6E  6AEE               	clrf	postinc0,c
   739  000C70  06E8               	decf	wreg,f,c
   740  000C72  E1FD               	bnz	clear_1
   741                           
   742                           ; Clear objects allocated to BANK2 (206 bytes)
   743  000C74  EE02  F000         	lfsr	0,__pbssBANK2
   744  000C78  0ECE               	movlw	206
   745  000C7A                     clear_2:
   746  000C7A  6AEE               	clrf	postinc0,c
   747  000C7C  06E8               	decf	wreg,f,c
   748  000C7E  E1FD               	bnz	clear_2
   749                           
   750                           ; Clear objects allocated to BANK1 (206 bytes)
   751  000C80  EE01  F000         	lfsr	0,__pbssBANK1
   752  000C84  0ECE               	movlw	206
   753  000C86                     clear_3:
   754  000C86  6AEE               	clrf	postinc0,c
   755  000C88  06E8               	decf	wreg,f,c
   756  000C8A  E1FD               	bnz	clear_3
   757                           
   758                           ; Clear objects allocated to BANK0 (112 bytes)
   759  000C8C  EE00  F060         	lfsr	0,__pbssBANK0
   760  000C90  0E70               	movlw	112
   761  000C92                     clear_4:
   762  000C92  6AEE               	clrf	postinc0,c
   763  000C94  06E8               	decf	wreg,f,c
   764  000C96  E1FD               	bnz	clear_4
   765                           
   766                           ; Clear objects allocated to COMRAM (27 bytes)
   767  000C98  EE00  F026         	lfsr	0,__pbssCOMRAM
   768  000C9C  0E1B               	movlw	27
   769  000C9E                     clear_5:
   770  000C9E  6AEE               	clrf	postinc0,c
   771  000CA0  06E8               	decf	wreg,f,c
   772  000CA2  E1FD               	bnz	clear_5
   773                           
   774                           ; Initialize objects allocated to BANK0 (9 bytes)
   775                           ; load TBLPTR registers with __pidataBANK0
   776  000CA4  0EE8               	movlw	low __pidataBANK0
   777  000CA6  6EF6               	movwf	tblptrl,c
   778  000CA8  0E13               	movlw	high __pidataBANK0
   779  000CAA  6EF7               	movwf	tblptrh,c
   780  000CAC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   781  000CAE  6EF8               	movwf	tblptru,c
   782  000CB0  EE00  F0EB         	lfsr	0,__pdataBANK0
   783  000CB4  EE10 F009          	lfsr	1,9
   784  000CB8                     copy_data0:
   785  000CB8  0009               	tblrd		*+
   786  000CBA  CFF5 FFEE          	movff	tablat,postinc0
   787  000CBE  50E5               	movf	postdec1,w,c
   788  000CC0  50E1               	movf	fsr1l,w,c
   789  000CC2  E1FA               	bnz	copy_data0
   790                           
   791                           ; Initialize objects allocated to COMRAM (1 bytes)
   792                           ; load TBLPTR registers with __pidataCOMRAM
   793  000CC4  0EFA               	movlw	low __pidataCOMRAM
   794  000CC6  6EF6               	movwf	tblptrl,c
   795  000CC8  0E13               	movlw	high __pidataCOMRAM
   796  000CCA  6EF7               	movwf	tblptrh,c
   797  000CCC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   798  000CCE  6EF8               	movwf	tblptru,c
   799  000CD0  0009               	tblrd		*+	;fetch initializer
   800  000CD2  CFF5 F044          	movff	tablat,__pdataCOMRAM
   801  000CD6                     end_of_initialization:
   802                           	opt stack 0
   803  000CD6                     __end_of__initialization:
   804                           	opt stack 0
   805  000CD6  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   806  000CD8  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   807  000CDA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   808  000CDC  6EF8               	movwf	tblptru,c
   809  000CDE  0100               	movlb	0
   810  000CE0  EF52  F007         	goto	_main	;jump to C main() function
   811                           tblptru	equ	0xFF8
   812                           tblptrh	equ	0xFF7
   813                           tblptrl	equ	0xFF6
   814                           tablat	equ	0xFF5
   815                           postinc0	equ	0xFEE
   816                           wreg	equ	0xFE8
   817                           postdec1	equ	0xFE5
   818                           fsr1l	equ	0xFE1
   819                           
   820                           	psect	bssCOMRAM
   821  000026                     __pbssCOMRAM:
   822                           	opt stack 0
   823  000026                     _time:
   824                           	opt stack 0
   825  000026                     	ds	4
   826  00002A                     _Start:
   827                           	opt stack 0
   828  00002A                     	ds	2
   829  00002C                     _group:
   830                           	opt stack 0
   831  00002C                     	ds	2
   832  00002E                     _receiveArrayAddress:
   833                           	opt stack 0
   834  00002E                     	ds	2
   835  000030                     _sendStructAddress:
   836                           	opt stack 0
   837  000030                     	ds	2
   838  000032                     _AKNAKsend:
   839                           	opt stack 0
   840  000032                     	ds	1
   841  000033                     _PowerOn:
   842                           	opt stack 0
   843  000033                     	ds	1
   844  000034                     _calc_CS:
   845                           	opt stack 0
   846  000034                     	ds	1
   847  000035                     _eusart2RxCount:
   848                           	opt stack 0
   849  000035                     	ds	1
   850  000036                     _eusart2RxHead:
   851                           	opt stack 0
   852  000036                     	ds	1
   853  000037                     _eusart2RxTail:
   854                           	opt stack 0
   855  000037                     	ds	1
   856  000038                     _eusart2TxHead:
   857                           	opt stack 0
   858  000038                     	ds	1
   859  000039                     _eusart2TxTail:
   860                           	opt stack 0
   861  000039                     	ds	1
   862  00003A                     _i:
   863                           	opt stack 0
   864  00003A                     	ds	1
   865  00003B                     _maxDataAddress:
   866                           	opt stack 0
   867  00003B                     	ds	1
   868  00003C                     _moduleAddress:
   869                           	opt stack 0
   870  00003C                     	ds	1
   871  00003D                     _returnAddress:
   872                           	opt stack 0
   873  00003D                     	ds	1
   874  00003E                     _rx_address:
   875                           	opt stack 0
   876  00003E                     	ds	1
   877  00003F                     _rx_array_inx:
   878                           	opt stack 0
   879  00003F                     	ds	1
   880  000040                     _rx_len:
   881                           	opt stack 0
   882  000040                     	ds	1
   883                           tblptru	equ	0xFF8
   884                           tblptrh	equ	0xFF7
   885                           tblptrl	equ	0xFF6
   886                           tablat	equ	0xFF5
   887                           postinc0	equ	0xFEE
   888                           wreg	equ	0xFE8
   889                           postdec1	equ	0xFE5
   890                           fsr1l	equ	0xFE1
   891                           
   892                           	psect	dataCOMRAM
   893  000044                     __pdataCOMRAM:
   894                           	opt stack 0
   895  000044                     _Transmit_stall:
   896                           	opt stack 0
   897  000044                     	ds	1
   898                           tblptru	equ	0xFF8
   899                           tblptrh	equ	0xFF7
   900                           tblptrl	equ	0xFF6
   901                           tablat	equ	0xFF5
   902                           postinc0	equ	0xFEE
   903                           wreg	equ	0xFE8
   904                           postdec1	equ	0xFE5
   905                           fsr1l	equ	0xFE1
   906                           
   907                           	psect	bssBANK0
   908  000060                     __pbssBANK0:
   909                           	opt stack 0
   910  000060                     _receiveArray:
   911                           	opt stack 0
   912  000060                     	ds	40
   913  000088                     _ddata:
   914                           	opt stack 0
   915  000088                     	ds	11
   916  000093                     _eusart2RxBuffer:
   917                           	opt stack 0
   918  000093                     	ds	8
   919  00009B                     _eusart2TxBuffer:
   920                           	opt stack 0
   921  00009B                     	ds	8
   922  0000A3                     _LEDtime:
   923                           	opt stack 0
   924  0000A3                     	ds	4
   925  0000A7                     _lastLEDTime:
   926                           	opt stack 0
   927  0000A7                     	ds	4
   928  0000AB                     _talkTime:
   929                           	opt stack 0
   930  0000AB                     	ds	4
   931  0000AF                     _addressErrorCounter:
   932                           	opt stack 0
   933  0000AF                     	ds	2
   934  0000B1                     _alignErrorCounter:
   935                           	opt stack 0
   936  0000B1                     	ds	2
   937  0000B3                     _crcErrorCounter:
   938                           	opt stack 0
   939  0000B3                     	ds	2
   940  0000B5                     _dataAdressErrorCounter:
   941                           	opt stack 0
   942  0000B5                     	ds	2
   943  0000B7                     _serial_available:
   944                           	opt stack 0
   945  0000B7                     	ds	2
   946  0000B9                     _serial_peek:
   947                           	opt stack 0
   948  0000B9                     	ds	2
   949  0000BB                     _serial_read:
   950                           	opt stack 0
   951  0000BB                     	ds	2
   952  0000BD                     _serial_write:
   953                           	opt stack 0
   954  0000BD                     	ds	2
   955  0000BF                     _crc_buffer:
   956                           	opt stack 0
   957  0000BF                     	ds	17
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1l	equ	0xFE1
   966                           
   967                           	psect	dataBANK0
   968  0000EB                     __pdataBANK0:
   969                           	opt stack 0
   970  0000EB                     _ChargerData:
   971                           	opt stack 0
   972  0000EB                     	ds	9
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           
   982                           	psect	bssBANK1
   983  000100                     __pbssBANK1:
   984                           	opt stack 0
   985  000100                     _ring_buffer:
   986                           	opt stack 0
   987  000100                     	ds	206
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           
   997                           	psect	bssBANK2
   998  000200                     __pbssBANK2:
   999                           	opt stack 0
  1000  000200                     _input_buffer:
  1001                           	opt stack 0
  1002  000200                     	ds	206
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           postdec1	equ	0xFE5
  1010                           fsr1l	equ	0xFE1
  1011                           
  1012                           	psect	bssBANK3
  1013  000300                     __pbssBANK3:
  1014                           	opt stack 0
  1015  000300                     _output_buffer:
  1016                           	opt stack 0
  1017  000300                     	ds	206
  1018                           tblptru	equ	0xFF8
  1019                           tblptrh	equ	0xFF7
  1020                           tblptrl	equ	0xFF6
  1021                           tablat	equ	0xFF5
  1022                           postinc0	equ	0xFEE
  1023                           wreg	equ	0xFE8
  1024                           postdec1	equ	0xFE5
  1025                           fsr1l	equ	0xFE1
  1026                           
  1027                           	psect	bssBANK4
  1028  000400                     __pbssBANK4:
  1029                           	opt stack 0
  1030  000400                     _rx_buffer:
  1031                           	opt stack 0
  1032  000400                     	ds	200
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           fsr1l	equ	0xFE1
  1041                           
  1042                           	psect	cstackBANK0
  1043  0000D0                     __pcstackBANK0:
  1044                           	opt stack 0
  1045  0000D0                     ??_FastTransfer_buffer_put:
  1046  0000D0                     Precharge@OnOff:
  1047                           	opt stack 0
  1048  0000D0                     LcdCharacter@character:
  1049                           	opt stack 0
  1050  0000D0                     printf@flag:
  1051                           	opt stack 0
  1052  0000D0                     FastTransfer_buffer_flush@_this:
  1053                           	opt stack 0
  1054  0000D0                     crcBufS_get@wantedTime:
  1055                           	opt stack 0
  1056                           
  1057                           ; 2 bytes @ 0x0
  1058  0000D0                     	ds	1
  1059  0000D1                     Precharge@i:
  1060                           	opt stack 0
  1061  0000D1                     LcdCharacter@index:
  1062                           	opt stack 0
  1063  0000D1                     printf@ap:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x1
  1067  0000D1                     	ds	1
  1068  0000D2                     CRCcheck@SentCRC:
  1069                           	opt stack 0
  1070  0000D2                     ToSend@what:
  1071                           	opt stack 0
  1072  0000D2                     FastTransfer_buffer_flush@clearBuffer:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x2
  1076  0000D2                     	ds	1
  1077  0000D3                     CRCcheck@calculatedCRC:
  1078                           	opt stack 0
  1079  0000D3                     printf@c:
  1080                           	opt stack 0
  1081  0000D3                     Precharge@i_2130:
  1082                           	opt stack 0
  1083  0000D3                     NokiaStr@str:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x3
  1087  0000D3                     	ds	1
  1088  0000D4                     sendData@whereToSend:
  1089                           	opt stack 0
  1090  0000D4                     ToSend@where:
  1091                           	opt stack 0
  1092  0000D4                     printf@cp:
  1093                           	opt stack 0
  1094  0000D4                     CRCcheck@arrayHolder:
  1095                           	opt stack 0
  1096                           
  1097                           ; 3 bytes @ 0x4
  1098  0000D4                     	ds	1
  1099  0000D5                     sendData@CS:
  1100                           	opt stack 0
  1101                           
  1102                           ; 1 bytes @ 0x5
  1103  0000D5                     	ds	1
  1104  0000D6                     sendData@i:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x6
  1108  0000D6                     	ds	1
  1109  0000D7                     CRCcheck@rt:
  1110                           	opt stack 0
  1111                           
  1112                           ; 2 bytes @ 0x7
  1113  0000D7                     	ds	1
  1114  0000D8                     ??_respondChargerAsECU:
  1115                           
  1116                           ; 0 bytes @ 0x8
  1117  0000D8                     	ds	1
  1118  0000D9                     ??_receiveData:
  1119                           
  1120                           ; 0 bytes @ 0x9
  1121  0000D9                     	ds	6
  1122  0000DF                     receiveData@crcHolder:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0xF
  1126  0000DF                     	ds	1
  1127  0000E0                     receiveData@crcHolder_1847:
  1128                           	opt stack 0
  1129                           
  1130                           ; 1 bytes @ 0x10
  1131  0000E0                     	ds	1
  1132  0000E1                     receiveData@holder:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x11
  1136  0000E1                     	ds	3
  1137  0000E4                     receiveData@holder_1846:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x14
  1141  0000E4                     	ds	3
  1142  0000E7                     receiveData@u:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x17
  1146  0000E7                     	ds	2
  1147  0000E9                     receiveData@r:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x19
  1151  0000E9                     	ds	2
  1152                           tblptru	equ	0xFF8
  1153                           tblptrh	equ	0xFF7
  1154                           tblptrl	equ	0xFF6
  1155                           tablat	equ	0xFF5
  1156                           postinc0	equ	0xFEE
  1157                           wreg	equ	0xFE8
  1158                           postdec1	equ	0xFE5
  1159                           fsr1l	equ	0xFE1
  1160                           
  1161                           	psect	cstackCOMRAM
  1162  000001                     __pcstackCOMRAM:
  1163                           	opt stack 0
  1164  000001                     ?_UART_buff_modulo_inc:
  1165                           	opt stack 0
  1166  000001                     ?_UART_buff_size:
  1167                           	opt stack 0
  1168  000001                     UART_buff_size@_this:
  1169                           	opt stack 0
  1170  000001                     UART_buff_modulo_inc@value:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x0
  1174  000001                     	ds	2
  1175  000003                     UART_buff_modulo_inc@modulus:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x2
  1179  000003                     	ds	2
  1180  000005                     UART_buff_modulo_inc@my_value:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x4
  1184  000005                     	ds	2
  1185  000007                     UART_buff_put@_this:
  1186                           	opt stack 0
  1187  000007                     UART_buff_get@_this:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x6
  1191  000007                     	ds	2
  1192  000009                     ??_UART_buff_get:
  1193  000009                     UART_buff_put@c:
  1194                           	opt stack 0
  1195                           
  1196                           ; 1 bytes @ 0x8
  1197  000009                     	ds	1
  1198  00000A                     ??_UART_buff_put:
  1199                           
  1200                           ; 0 bytes @ 0x9
  1201  00000A                     	ds	1
  1202  00000B                     UART_buff_get@c:
  1203                           	opt stack 0
  1204                           
  1205                           ; 1 bytes @ 0xA
  1206  00000B                     	ds	1
  1207  00000C                     EUSART1_Receive_ISR@data:
  1208                           	opt stack 0
  1209                           
  1210                           ; 1 bytes @ 0xB
  1211  00000C                     	ds	1
  1212  00000D                     ??_INTERRUPT_InterruptManager:
  1213                           
  1214                           ; 0 bytes @ 0xC
  1215  00000D                     	ds	14
  1216  00001B                     ??_TMR0_Initialize:
  1217  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1218                           	opt stack 0
  1219  00001B                     ?_time_get:
  1220                           	opt stack 0
  1221  00001B                     ?___wmul:
  1222                           	opt stack 0
  1223  00001B                     EUSART2_Write@txData:
  1224                           	opt stack 0
  1225  00001B                     SPI1_Exchange8bit@data:
  1226                           	opt stack 0
  1227  00001B                     SetMux@channel:
  1228                           	opt stack 0
  1229  00001B                     time_Set@value:
  1230                           	opt stack 0
  1231  00001B                     CRC8@data:
  1232                           	opt stack 0
  1233  00001B                     FastTransfer_buffer_modulo_inc@value:
  1234                           	opt stack 0
  1235  00001B                     crcBufS_put@_this:
  1236                           	opt stack 0
  1237  00001B                     crcBufS_status_put@_this:
  1238                           	opt stack 0
  1239  00001B                     crcBufS_get@_this:
  1240                           	opt stack 0
  1241  00001B                     ___wmul@multiplier:
  1242                           	opt stack 0
  1243  00001B                     memset@p1:
  1244                           	opt stack 0
  1245  00001B                     Delay@wait:
  1246                           	opt stack 0
  1247                           
  1248                           ; 4 bytes @ 0x1A
  1249  00001B                     	ds	1
  1250  00001C                     putch@txData:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x1B
  1254  00001C                     	ds	1
  1255  00001D                     ?_printf:
  1256                           	opt stack 0
  1257  00001D                     time_get@WhatTime:
  1258                           	opt stack 0
  1259  00001D                     time_Set@WhatTime:
  1260                           	opt stack 0
  1261  00001D                     CRC8@len:
  1262                           	opt stack 0
  1263  00001D                     crcBufS_put@address:
  1264                           	opt stack 0
  1265  00001D                     crcBufS_status_put@time:
  1266                           	opt stack 0
  1267  00001D                     crcBufS_get@time:
  1268                           	opt stack 0
  1269  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1270                           	opt stack 0
  1271  00001D                     printf@f:
  1272                           	opt stack 0
  1273  00001D                     ___wmul@multiplicand:
  1274                           	opt stack 0
  1275  00001D                     memset@c:
  1276                           	opt stack 0
  1277                           
  1278                           ; 2 bytes @ 0x1C
  1279  00001D                     	ds	1
  1280  00001E                     CRC8@sum:
  1281                           	opt stack 0
  1282  00001E                     crcBufS_put@oldCRC:
  1283                           	opt stack 0
  1284  00001E                     crcBufS_status_put@status:
  1285                           	opt stack 0
  1286  00001E                     crcBufS_get@space:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x1D
  1290  00001E                     	ds	1
  1291  00001F                     ??_Delay:
  1292  00001F                     ??_crcBufS_get:
  1293  00001F                     ??_crcBufS_status_put:
  1294  00001F                     CRC8@extract:
  1295                           	opt stack 0
  1296  00001F                     crcBufS_put@status:
  1297                           	opt stack 0
  1298  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1299                           	opt stack 0
  1300  00001F                     ___wmul@product:
  1301                           	opt stack 0
  1302  00001F                     memset@n:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x1E
  1306  00001F                     	ds	1
  1307  000020                     ??_crcBufS_put:
  1308  000020                     CRC8@tempI:
  1309                           	opt stack 0
  1310  000020                     Delay@i:
  1311                           	opt stack 0
  1312                           
  1313                           ; 4 bytes @ 0x1F
  1314  000020                     	ds	1
  1315  000021                     CRC8@crc:
  1316                           	opt stack 0
  1317  000021                     SetCharger@Current:
  1318                           	opt stack 0
  1319  000021                     LCDwrite@data:
  1320                           	opt stack 0
  1321  000021                     FastTransfer_buffer_put@_this:
  1322                           	opt stack 0
  1323  000021                     memset@p:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x20
  1327  000021                     	ds	1
  1328  000022                     SetCharger@Voltage:
  1329                           	opt stack 0
  1330  000022                     LCDwrite@mode:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x21
  1334  000022                     	ds	1
  1335  000023                     ??_sendData:
  1336  000023                     ??_LcdCharacter:
  1337  000023                     FastTransfer_buffer_put@towhere:
  1338                           	opt stack 0
  1339  000023                     SetCharger@mode:
  1340                           	opt stack 0
  1341  000023                     gotoXy@y:
  1342                           	opt stack 0
  1343  000023                     crcBufS_status_put@wantedTime:
  1344                           	opt stack 0
  1345  000023                     clearLcd@res:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x22
  1349  000023                     	ds	1
  1350  000024                     gotoXy@x:
  1351                           	opt stack 0
  1352  000024                     FastTransfer_buffer_put@towhat:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x23
  1356  000024                     	ds	1
  1357  000025                     
  1358                           ; 0 bytes @ 0x24
  1359  000025                     	ds	1
  1360  000026                     tblptru	equ	0xFF8
  1361                           tblptrh	equ	0xFF7
  1362                           tblptrl	equ	0xFF6
  1363                           tablat	equ	0xFF5
  1364                           postinc0	equ	0xFEE
  1365                           wreg	equ	0xFE8
  1366                           postdec1	equ	0xFE5
  1367                           fsr1l	equ	0xFE1
  1368                           
  1369                           ; 0 bytes @ 0x25
  1370 ;;
  1371 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1372 ;;
  1373 ;; *************** function _main *****************
  1374 ;; Defined at:
  1375 ;;		line 16 in file "main.c"
  1376 ;; Parameters:    Size  Location     Type
  1377 ;;		None
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;		None
  1380 ;; Return value:  Size  Location     Type
  1381 ;;		None               void
  1382 ;; Registers used:
  1383 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1389 ;;      Params:         0       0       0       0       0       0       0
  1390 ;;      Locals:         0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0
  1392 ;;      Totals:         0       0       0       0       0       0       0
  1393 ;;Total ram usage:        0 bytes
  1394 ;; Hardware stack levels required when called:    9
  1395 ;; This function calls:
  1396 ;;		_Delay
  1397 ;;		_NokiaStart
  1398 ;;		_SYSTEM_Initialize
  1399 ;;		_Splash
  1400 ;;		_clearLcd
  1401 ;;		_ledDebug
  1402 ;;		_updateComms
  1403 ;; This function is called by:
  1404 ;;		Startup code after reset
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text0
  1409  000EA4                     __ptext0:
  1410                           	opt stack 0
  1411  000EA4                     _main:
  1412                           	opt stack 22
  1413                           
  1414                           ;main.c: 18: SYSTEM_Initialize();
  1415                           
  1416                           ;incstack = 0
  1417  000EA4  ECB4  F009         	call	_SYSTEM_Initialize	;wreg free
  1418                           
  1419                           ;main.c: 37: (INTCONbits.GIE = 1);
  1420  000EA8  8EF2               	bsf	intcon,7,c	;volatile
  1421                           
  1422                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1423  000EAA  8CF2               	bsf	intcon,6,c	;volatile
  1424                           
  1425                           ;main.c: 47: ANSELC = 0;
  1426  000EAC  0E00               	movlw	0
  1427  000EAE  010F               	movlb	15	; () banked
  1428  000EB0  6F3A               	movwf	58,b	;volatile
  1429                           
  1430                           ; BSR set to: 15
  1431                           ;main.c: 48: ANSELA = 0;
  1432  000EB2  0E00               	movlw	0
  1433  000EB4  010F               	movlb	15	; () banked
  1434  000EB6  6F38               	movwf	56,b	;volatile
  1435                           
  1436                           ; BSR set to: 15
  1437                           ;main.c: 49: TRISCbits.TRISC0=0;
  1438  000EB8  9094               	bcf	3988,0,c	;volatile
  1439                           
  1440                           ; BSR set to: 15
  1441                           ;main.c: 50: TRISCbits.TRISC1=0;
  1442  000EBA  9294               	bcf	3988,1,c	;volatile
  1443                           
  1444                           ; BSR set to: 15
  1445                           ;main.c: 51: TRISCbits.TRISC2=0;
  1446  000EBC  9494               	bcf	3988,2,c	;volatile
  1447                           
  1448                           ; BSR set to: 15
  1449                           ;main.c: 52: TRISAbits.TRISA6=0;
  1450  000EBE  9C92               	bcf	3986,6,c	;volatile
  1451                           
  1452                           ; BSR set to: 15
  1453                           ;main.c: 53: TRISAbits.TRISA7=0;
  1454  000EC0  9E92               	bcf	3986,7,c	;volatile
  1455                           
  1456                           ; BSR set to: 15
  1457                           ;main.c: 54: TRISBbits.TRISB3=0;
  1458  000EC2  9693               	bcf	3987,3,c	;volatile
  1459                           
  1460                           ; BSR set to: 15
  1461                           ;main.c: 55: TRISBbits.TRISB4=0;
  1462  000EC4  9893               	bcf	3987,4,c	;volatile
  1463                           
  1464                           ; BSR set to: 15
  1465                           ;main.c: 56: TRISBbits.TRISB5=0;
  1466  000EC6  9A93               	bcf	3987,5,c	;volatile
  1467                           
  1468                           ; BSR set to: 15
  1469                           ;main.c: 58: LATBbits.LATB3=0;
  1470  000EC8  968A               	bcf	3978,3,c	;volatile
  1471                           
  1472                           ; BSR set to: 15
  1473                           ;main.c: 59: LATBbits.LATB5=0;
  1474  000ECA  9A8A               	bcf	3978,5,c	;volatile
  1475                           
  1476                           ; BSR set to: 15
  1477                           ;main.c: 60: LATBbits.LATB4=0;
  1478  000ECC  988A               	bcf	3978,4,c	;volatile
  1479                           
  1480                           ; BSR set to: 15
  1481                           ;main.c: 62: LATCbits.LATC1=1;
  1482  000ECE  828B               	bsf	3979,1,c	;volatile
  1483                           
  1484                           ; BSR set to: 15
  1485                           ;main.c: 63: LATCbits.LATC2=0;
  1486  000ED0  948B               	bcf	3979,2,c	;volatile
  1487                           
  1488                           ; BSR set to: 15
  1489                           ;main.c: 64: LATAbits.LATA6=1;
  1490  000ED2  8C89               	bsf	3977,6,c	;volatile
  1491                           
  1492                           ; BSR set to: 15
  1493                           ;main.c: 65: LATCbits.LATC0=1;
  1494  000ED4  808B               	bsf	3979,0,c	;volatile
  1495                           
  1496                           ;main.c: 69: NokiaStart();
  1497  000ED6  EC56  F005         	call	_NokiaStart	;wreg free
  1498                           
  1499                           ;main.c: 70: Delay(100);
  1500  000EDA  0E64               	movlw	100
  1501  000EDC  6E1B               	movwf	Delay@wait,c
  1502  000EDE  0E00               	movlw	0
  1503  000EE0  6E1C               	movwf	Delay@wait+1,c
  1504  000EE2  0E00               	movlw	0
  1505  000EE4  6E1D               	movwf	Delay@wait+2,c
  1506  000EE6  0E00               	movlw	0
  1507  000EE8  6E1E               	movwf	Delay@wait+3,c
  1508  000EEA  ECA9  F007         	call	_Delay	;wreg free
  1509                           
  1510                           ;main.c: 72: clearLcd();
  1511  000EEE  EC40  F009         	call	_clearLcd	;wreg free
  1512                           
  1513                           ;main.c: 73: Splash();
  1514  000EF2  EC2D  F008         	call	_Splash	;wreg free
  1515                           
  1516                           ;main.c: 77: do { LATA3 = 1; } while(0);
  1517  000EF6  8689               	bsf	3977,3,c	;volatile
  1518  000EF8                     l3696:
  1519                           
  1520                           ;main.c: 79: updateComms();
  1521  000EF8  EC54  F009         	call	_updateComms	;wreg free
  1522                           
  1523                           ;main.c: 80: ledDebug();
  1524  000EFC  EC7B  F008         	call	_ledDebug	;wreg free
  1525  000F00  D7FB               	goto	l3696
  1526  000F02                     __end_of_main:
  1527                           	opt stack 0
  1528                           tblptru	equ	0xFF8
  1529                           tblptrh	equ	0xFF7
  1530                           tblptrl	equ	0xFF6
  1531                           tablat	equ	0xFF5
  1532                           intcon	equ	0xFF2
  1533                           postinc0	equ	0xFEE
  1534                           wreg	equ	0xFE8
  1535                           postdec1	equ	0xFE5
  1536                           fsr1l	equ	0xFE1
  1537                           
  1538 ;; *************** function _updateComms *****************
  1539 ;; Defined at:
  1540 ;;		line 12 in file "Communications.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;		None
  1545 ;; Return value:  Size  Location     Type
  1546 ;;		None               void
  1547 ;; Registers used:
  1548 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1554 ;;      Params:         0       0       0       0       0       0       0
  1555 ;;      Locals:         0       0       0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0
  1557 ;;      Totals:         0       0       0       0       0       0       0
  1558 ;;Total ram usage:        0 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    8
  1561 ;; This function calls:
  1562 ;;		_Precharge
  1563 ;;		_SetCharger
  1564 ;;		_receiveData
  1565 ;;		_respondChargerAsECU
  1566 ;; This function is called by:
  1567 ;;		_main
  1568 ;; This function uses a non-reentrant model
  1569 ;;
  1570                           
  1571                           	psect	text1
  1572  0012A8                     __ptext1:
  1573                           	opt stack 0
  1574  0012A8                     _updateComms:
  1575                           	opt stack 22
  1576                           
  1577                           ;Communications.c: 13: if (receiveData()) {
  1578                           
  1579                           ;incstack = 0
  1580  0012A8  EC58  F000         	call	_receiveData	;wreg free
  1581  0012AC  0900               	iorlw	0
  1582  0012AE  B4D8               	btfsc	status,2,c
  1583  0012B0  0012               	return	
  1584                           
  1585                           ;Communications.c: 14: Precharge(receiveArray[1]);
  1586  0012B2  0100               	movlb	0	; () banked
  1587  0012B4  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1588  0012B6  ECB8  F004         	call	_Precharge
  1589                           
  1590                           ;Communications.c: 15: SetCharger(1, receiveArray[2], receiveArray[3]);
  1591  0012BA  C064  F021         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1592  0012BE  C066  F022         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1593  0012C2  0E01               	movlw	1
  1594  0012C4  EC1F  F007         	call	_SetCharger
  1595                           
  1596                           ;Communications.c: 16: respondChargerAsECU();
  1597  0012C8  ECAF  F006         	call	_respondChargerAsECU	;wreg free
  1598  0012CC  0012               	return	
  1599  0012CE                     __end_of_updateComms:
  1600                           	opt stack 0
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           intcon	equ	0xFF2
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postdec1	equ	0xFE5
  1609                           fsr1l	equ	0xFE1
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _respondChargerAsECU *****************
  1613 ;; Defined at:
  1614 ;;		line 38 in file "Communications.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;		None               void
  1621 ;; Registers used:
  1622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1628 ;;      Params:         0       0       0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0       0       0
  1630 ;;      Temps:          0       1       0       0       0       0       0
  1631 ;;      Totals:         0       1       0       0       0       0       0
  1632 ;;Total ram usage:        1 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    7
  1635 ;; This function calls:
  1636 ;;		_Delay
  1637 ;;		_GetPowerState
  1638 ;;		_ToSend
  1639 ;;		_sendData
  1640 ;; This function is called by:
  1641 ;;		_updateComms
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text2
  1646  000D5E                     __ptext2:
  1647                           	opt stack 0
  1648  000D5E                     _respondChargerAsECU:
  1649                           	opt stack 22
  1650                           
  1651                           ;Communications.c: 39: LATCbits.LATC5 = 1;
  1652                           
  1653                           ;incstack = 0
  1654  000D5E  8A8B               	bsf	3979,5,c	;volatile
  1655                           
  1656                           ;Communications.c: 40: ToSend(0, 7);
  1657  000D60  0E00               	movlw	0
  1658  000D62  0100               	movlb	0	; () banked
  1659  000D64  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1660  000D66  0E07               	movlw	7
  1661  000D68  6FD2               	movwf	ToSend@what& (0+255),b
  1662  000D6A  0E00               	movlw	0
  1663  000D6C  EC7A  F009         	call	_ToSend
  1664                           
  1665                           ;Communications.c: 41: ToSend(2, GetPowerState());
  1666  000D70  ECF9  F009         	call	_GetPowerState	;wreg free
  1667  000D74  0100               	movlb	0	; () banked
  1668  000D76  6FD8               	movwf	??_respondChargerAsECU& (0+255),b
  1669  000D78  0100               	movlb	0	; () banked
  1670  000D7A  51D8               	movf	??_respondChargerAsECU& (0+255),w,b
  1671  000D7C  0100               	movlb	0	; () banked
  1672  000D7E  6FD2               	movwf	ToSend@what& (0+255),b
  1673  000D80  6BD3               	clrf	(ToSend@what+1)& (0+255),b
  1674  000D82  0E02               	movlw	2
  1675  000D84  EC7A  F009         	call	_ToSend
  1676                           
  1677                           ;Communications.c: 42: ToSend(3, GetPowerState());
  1678  000D88  ECF9  F009         	call	_GetPowerState	;wreg free
  1679  000D8C  0100               	movlb	0	; () banked
  1680  000D8E  6FD8               	movwf	??_respondChargerAsECU& (0+255),b
  1681  000D90  0100               	movlb	0	; () banked
  1682  000D92  51D8               	movf	??_respondChargerAsECU& (0+255),w,b
  1683  000D94  0100               	movlb	0	; () banked
  1684  000D96  6FD2               	movwf	ToSend@what& (0+255),b
  1685  000D98  6BD3               	clrf	(ToSend@what+1)& (0+255),b
  1686  000D9A  0E03               	movlw	3
  1687  000D9C  EC7A  F009         	call	_ToSend
  1688                           
  1689                           ;Communications.c: 43: Delay(5);
  1690  000DA0  0E05               	movlw	5
  1691  000DA2  6E1B               	movwf	Delay@wait,c
  1692  000DA4  0E00               	movlw	0
  1693  000DA6  6E1C               	movwf	Delay@wait+1,c
  1694  000DA8  0E00               	movlw	0
  1695  000DAA  6E1D               	movwf	Delay@wait+2,c
  1696  000DAC  0E00               	movlw	0
  1697  000DAE  6E1E               	movwf	Delay@wait+3,c
  1698  000DB0  ECA9  F007         	call	_Delay	;wreg free
  1699                           
  1700                           ;Communications.c: 44: sendData(6);
  1701  000DB4  0E06               	movlw	6
  1702  000DB6  EC72  F006         	call	_sendData
  1703                           
  1704                           ;Communications.c: 45: Delay(3);
  1705  000DBA  0E03               	movlw	3
  1706  000DBC  6E1B               	movwf	Delay@wait,c
  1707  000DBE  0E00               	movlw	0
  1708  000DC0  6E1C               	movwf	Delay@wait+1,c
  1709  000DC2  0E00               	movlw	0
  1710  000DC4  6E1D               	movwf	Delay@wait+2,c
  1711  000DC6  0E00               	movlw	0
  1712  000DC8  6E1E               	movwf	Delay@wait+3,c
  1713  000DCA  ECA9  F007         	call	_Delay	;wreg free
  1714                           
  1715                           ;Communications.c: 46: LATCbits.LATC5 = 0;
  1716  000DCE  9A8B               	bcf	3979,5,c	;volatile
  1717  000DD0  0012               	return		;funcret
  1718  000DD2                     __end_of_respondChargerAsECU:
  1719                           	opt stack 0
  1720                           tblptru	equ	0xFF8
  1721                           tblptrh	equ	0xFF7
  1722                           tblptrl	equ	0xFF6
  1723                           tablat	equ	0xFF5
  1724                           intcon	equ	0xFF2
  1725                           postinc0	equ	0xFEE
  1726                           wreg	equ	0xFE8
  1727                           postdec1	equ	0xFE5
  1728                           fsr1l	equ	0xFE1
  1729                           status	equ	0xFD8
  1730                           
  1731 ;; *************** function _sendData *****************
  1732 ;; Defined at:
  1733 ;;		line 53 in file "FastTransfer.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  whereToSend     1    wreg     unsigned char 
  1736 ;; Auto vars:     Size  Location     Type
  1737 ;;  whereToSend     1    4[BANK0 ] unsigned char 
  1738 ;;  i               2    6[BANK0 ] int 
  1739 ;;  CS              1    5[BANK0 ] unsigned char 
  1740 ;; Return value:  Size  Location     Type
  1741 ;;		None               void
  1742 ;; Registers used:
  1743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1744 ;; Tracked objects:
  1745 ;;		On entry : 0/0
  1746 ;;		On exit  : 0/0
  1747 ;;		Unchanged: 0/0
  1748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1749 ;;      Params:         0       0       0       0       0       0       0
  1750 ;;      Locals:         0       4       0       0       0       0       0
  1751 ;;      Temps:          1       0       0       0       0       0       0
  1752 ;;      Totals:         1       4       0       0       0       0       0
  1753 ;;Total ram usage:        5 bytes
  1754 ;; Hardware stack levels used:    1
  1755 ;; Hardware stack levels required when called:    6
  1756 ;; This function calls:
  1757 ;;		_CRC8
  1758 ;;		_FastTransfer_buffer_flush
  1759 ;;		_crcBufS_put
  1760 ;; This function is called by:
  1761 ;;		_respondChargerAsECU
  1762 ;;		_SetBMM
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text3
  1767  000CE4                     __ptext3:
  1768                           	opt stack 0
  1769  000CE4                     _sendData:
  1770                           	opt stack 22
  1771                           
  1772                           ;incstack = 0
  1773                           ;sendData@whereToSend stored from wreg
  1774  000CE4  0100               	movlb	0	; () banked
  1775  000CE6  6FD4               	movwf	sendData@whereToSend& (0+255),b
  1776                           
  1777                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1778  000CE8  C030  F01B         	movff	_sendStructAddress,CRC8@data
  1779  000CEC  C031  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1780  000CF0  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1781  000CF4  ECCF  F007         	call	_CRC8	;wreg free
  1782  000CF8  0100               	movlb	0	; () banked
  1783  000CFA  6FD5               	movwf	sendData@CS& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;FastTransfer.c: 66: int i;
  1787                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1788  000CFC  0E00               	movlw	0
  1789  000CFE  0100               	movlb	0	; () banked
  1790  000D00  6FD7               	movwf	(sendData@i+1)& (0+255),b
  1791  000D02  0E00               	movlw	0
  1792  000D04  6FD6               	movwf	sendData@i& (0+255),b
  1793  000D06  D003               	goto	l3306
  1794  000D08                     l3304:
  1795  000D08  0100               	movlb	0	; () banked
  1796  000D0A  4BD6               	infsnz	sendData@i& (0+255),f,b
  1797  000D0C  2BD7               	incf	(sendData@i+1)& (0+255),f,b
  1798  000D0E                     l3306:
  1799                           
  1800                           ; BSR set to: 0
  1801  000D0E  0101               	movlb	1	; () banked
  1802  000D10  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1803  000D12  0100               	movlb	0	; () banked
  1804  000D14  5DD6               	subwf	sendData@i& (0+255),w,b
  1805  000D16  0100               	movlb	0	; () banked
  1806  000D18  51D7               	movf	(sendData@i+1)& (0+255),w,b
  1807  000D1A  0A80               	xorlw	128
  1808  000D1C  6E23               	movwf	??_sendData& (0+255),c
  1809  000D1E  0101               	movlb	1	; () banked
  1810  000D20  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1811  000D22  0A80               	xorlw	128
  1812  000D24  5823               	subwfb	??_sendData& (0+255),w,c
  1813  000D26  A0D8               	btfss	status,0,c
  1814  000D28  D7EF               	goto	l3304
  1815                           
  1816                           ; BSR set to: 1
  1817                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1818                           
  1819                           ; BSR set to: 1
  1820                           
  1821                           ;FastTransfer.c: 69: }
  1822                           ;FastTransfer.c: 72: serial_write(CS);
  1823  000D2A  0EBF               	movlw	low _crc_buffer
  1824  000D2C  6E1B               	movwf	crcBufS_put@_this,c
  1825  000D2E  0E00               	movlw	high _crc_buffer
  1826  000D30  6E1C               	movwf	crcBufS_put@_this+1,c
  1827  000D32  C0D4  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1828  000D36  C0D5  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1829  000D3A  0E00               	movlw	0
  1830  000D3C  6E1F               	movwf	crcBufS_put@status,c
  1831  000D3E  ECE1  F003         	call	_crcBufS_put	;wreg free
  1832                           
  1833                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1834  000D42  0E00               	movlw	low _ring_buffer
  1835  000D44  0100               	movlb	0	; () banked
  1836  000D46  6FD0               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  1837  000D48  0E01               	movlw	high _ring_buffer
  1838  000D4A  0100               	movlb	0	; () banked
  1839  000D4C  6FD1               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  1840  000D4E  0E00               	movlw	0
  1841  000D50  0100               	movlb	0	; () banked
  1842  000D52  6FD3               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  1843  000D54  0E01               	movlw	1
  1844  000D56  6FD2               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  1845  000D58  ECE9  F006         	call	_FastTransfer_buffer_flush	;wreg free
  1846  000D5C  0012               	return		;funcret
  1847  000D5E                     __end_of_sendData:
  1848                           	opt stack 0
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           intcon	equ	0xFF2
  1854                           postinc0	equ	0xFEE
  1855                           wreg	equ	0xFE8
  1856                           postdec1	equ	0xFE5
  1857                           fsr1l	equ	0xFE1
  1858                           status	equ	0xFD8
  1859                           
  1860 ;; *************** function _crcBufS_put *****************
  1861 ;; Defined at:
  1862 ;;		line 321 in file "FastTransfer.c"
  1863 ;; Parameters:    Size  Location     Type
  1864 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1865 ;;		 -> crc_buffer(17), 
  1866 ;;  address         1   28[COMRAM] unsigned char 
  1867 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1868 ;;  status          1   30[COMRAM] unsigned char 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;		None
  1871 ;; Return value:  Size  Location     Type
  1872 ;;		None               void
  1873 ;; Registers used:
  1874 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1880 ;;      Params:         5       0       0       0       0       0       0
  1881 ;;      Locals:         0       0       0       0       0       0       0
  1882 ;;      Temps:          2       0       0       0       0       0       0
  1883 ;;      Totals:         7       0       0       0       0       0       0
  1884 ;;Total ram usage:        7 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    4
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_sendData
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text4
  1895  0007C2                     __ptext4:
  1896                           	opt stack 0
  1897  0007C2                     _crcBufS_put:
  1898                           	opt stack 23
  1899                           
  1900                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1901                           
  1902                           ;incstack = 0
  1903  0007C2  EE20 F00F          	lfsr	2,15
  1904  0007C6  501B               	movf	crcBufS_put@_this,w,c
  1905  0007C8  26D9               	addwf	fsr2l,f,c
  1906  0007CA  501C               	movf	crcBufS_put@_this+1,w,c
  1907  0007CC  22DA               	addwfc	fsr2h,f,c
  1908  0007CE  CFDE F020          	movff	postinc2,??_crcBufS_put
  1909  0007D2  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1910  0007D6  5020               	movf	??_crcBufS_put,w,c
  1911  0007D8  241B               	addwf	crcBufS_put@_this,w,c
  1912  0007DA  6ED9               	movwf	fsr2l,c
  1913  0007DC  5021               	movf	??_crcBufS_put+1,w,c
  1914  0007DE  201C               	addwfc	crcBufS_put@_this+1,w,c
  1915  0007E0  6EDA               	movwf	fsr2h,c
  1916  0007E2  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1917                           
  1918                           ;FastTransfer.c: 323: _this->head++;
  1919  0007E6  EE20 F00F          	lfsr	2,15
  1920  0007EA  501B               	movf	crcBufS_put@_this,w,c
  1921  0007EC  26D9               	addwf	fsr2l,f,c
  1922  0007EE  501C               	movf	crcBufS_put@_this+1,w,c
  1923  0007F0  22DA               	addwfc	fsr2h,f,c
  1924  0007F2  2ADE               	incf	postinc2,f,c
  1925  0007F4  0E00               	movlw	0
  1926  0007F6  22DD               	addwfc	postdec2,f,c
  1927                           
  1928                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1929  0007F8  EE20 F00F          	lfsr	2,15
  1930  0007FC  501B               	movf	crcBufS_put@_this,w,c
  1931  0007FE  26D9               	addwf	fsr2l,f,c
  1932  000800  501C               	movf	crcBufS_put@_this+1,w,c
  1933  000802  22DA               	addwfc	fsr2h,f,c
  1934  000804  CFDE F020          	movff	postinc2,??_crcBufS_put
  1935  000808  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1936  00080C  5020               	movf	??_crcBufS_put,w,c
  1937  00080E  241B               	addwf	crcBufS_put@_this,w,c
  1938  000810  6ED9               	movwf	fsr2l,c
  1939  000812  5021               	movf	??_crcBufS_put+1,w,c
  1940  000814  201C               	addwfc	crcBufS_put@_this+1,w,c
  1941  000816  6EDA               	movwf	fsr2h,c
  1942  000818  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1943                           
  1944                           ;FastTransfer.c: 325: _this->head++;
  1945  00081C  EE20 F00F          	lfsr	2,15
  1946  000820  501B               	movf	crcBufS_put@_this,w,c
  1947  000822  26D9               	addwf	fsr2l,f,c
  1948  000824  501C               	movf	crcBufS_put@_this+1,w,c
  1949  000826  22DA               	addwfc	fsr2h,f,c
  1950  000828  2ADE               	incf	postinc2,f,c
  1951  00082A  0E00               	movlw	0
  1952  00082C  22DD               	addwfc	postdec2,f,c
  1953                           
  1954                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1955  00082E  EE20 F00F          	lfsr	2,15
  1956  000832  501B               	movf	crcBufS_put@_this,w,c
  1957  000834  26D9               	addwf	fsr2l,f,c
  1958  000836  501C               	movf	crcBufS_put@_this+1,w,c
  1959  000838  22DA               	addwfc	fsr2h,f,c
  1960  00083A  CFDE F020          	movff	postinc2,??_crcBufS_put
  1961  00083E  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1962  000842  5020               	movf	??_crcBufS_put,w,c
  1963  000844  241B               	addwf	crcBufS_put@_this,w,c
  1964  000846  6ED9               	movwf	fsr2l,c
  1965  000848  5021               	movf	??_crcBufS_put+1,w,c
  1966  00084A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1967  00084C  6EDA               	movwf	fsr2h,c
  1968  00084E  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1969                           
  1970                           ;FastTransfer.c: 327: _this->head++;
  1971  000852  EE20 F00F          	lfsr	2,15
  1972  000856  501B               	movf	crcBufS_put@_this,w,c
  1973  000858  26D9               	addwf	fsr2l,f,c
  1974  00085A  501C               	movf	crcBufS_put@_this+1,w,c
  1975  00085C  22DA               	addwfc	fsr2h,f,c
  1976  00085E  2ADE               	incf	postinc2,f,c
  1977  000860  0E00               	movlw	0
  1978  000862  22DD               	addwfc	postdec2,f,c
  1979                           
  1980                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1981  000864  EE20 F00F          	lfsr	2,15
  1982  000868  501B               	movf	crcBufS_put@_this,w,c
  1983  00086A  26D9               	addwf	fsr2l,f,c
  1984  00086C  501C               	movf	crcBufS_put@_this+1,w,c
  1985  00086E  22DA               	addwfc	fsr2h,f,c
  1986  000870  0E01               	movlw	1
  1987  000872  BEDB               	btfsc	plusw2,7,c
  1988  000874  0012               	return	
  1989  000876  0E01               	movlw	1
  1990  000878  50DB               	movf	plusw2,w,c
  1991  00087A  E104               	bnz	u1990
  1992  00087C  0E0F               	movlw	15
  1993  00087E  5CDE               	subwf	postinc2,w,c
  1994  000880  A0D8               	btfss	status,0,c
  1995  000882  0012               	return	
  1996  000884                     u1990:
  1997                           
  1998                           ;FastTransfer.c: 329: _this->head = 0;
  1999  000884  EE20 F00F          	lfsr	2,15
  2000  000888  501B               	movf	crcBufS_put@_this,w,c
  2001  00088A  26D9               	addwf	fsr2l,f,c
  2002  00088C  501C               	movf	crcBufS_put@_this+1,w,c
  2003  00088E  22DA               	addwfc	fsr2h,f,c
  2004  000890  0E00               	movlw	0
  2005  000892  6EDE               	movwf	postinc2,c
  2006  000894  0E00               	movlw	0
  2007  000896  6EDD               	movwf	postdec2,c
  2008  000898  0012               	return	
  2009  00089A                     __end_of_crcBufS_put:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           tblptrh	equ	0xFF7
  2013                           tblptrl	equ	0xFF6
  2014                           tablat	equ	0xFF5
  2015                           intcon	equ	0xFF2
  2016                           postinc0	equ	0xFEE
  2017                           wreg	equ	0xFE8
  2018                           postdec1	equ	0xFE5
  2019                           fsr1l	equ	0xFE1
  2020                           indf2	equ	0xFDF
  2021                           postinc2	equ	0xFDE
  2022                           postdec2	equ	0xFDD
  2023                           plusw2	equ	0xFDB
  2024                           fsr2h	equ	0xFDA
  2025                           fsr2l	equ	0xFD9
  2026                           status	equ	0xFD8
  2027                           
  2028 ;; *************** function _FastTransfer_buffer_flush *****************
  2029 ;; Defined at:
  2030 ;;		line 261 in file "FastTransfer.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  2033 ;;		 -> ring_buffer(206), 
  2034 ;;  clearBuffer     2    2[BANK0 ] const int 
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;		None
  2037 ;; Return value:  Size  Location     Type
  2038 ;;		None               void
  2039 ;; Registers used:
  2040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2046 ;;      Params:         0       4       0       0       0       0       0
  2047 ;;      Locals:         0       0       0       0       0       0       0
  2048 ;;      Temps:          0       0       0       0       0       0       0
  2049 ;;      Totals:         0       4       0       0       0       0       0
  2050 ;;Total ram usage:        4 bytes
  2051 ;; Hardware stack levels used:    1
  2052 ;; Hardware stack levels required when called:    5
  2053 ;; This function calls:
  2054 ;;		_memset
  2055 ;; This function is called by:
  2056 ;;		_sendData
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059                           
  2060                           	psect	text5
  2061  000DD2                     __ptext5:
  2062                           	opt stack 0
  2063  000DD2                     _FastTransfer_buffer_flush:
  2064                           	opt stack 22
  2065                           
  2066                           ;FastTransfer.c: 262: _this->count = 0;
  2067                           
  2068                           ;incstack = 0
  2069  000DD2  0100               	movlb	0	; () banked
  2070  000DD4  EE20 F0CC          	lfsr	2,204
  2071  000DD8  51D0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2072  000DDA  26D9               	addwf	fsr2l,f,c
  2073  000DDC  51D1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2074  000DDE  22DA               	addwfc	fsr2h,f,c
  2075  000DE0  0E00               	movlw	0
  2076  000DE2  6EDE               	movwf	postinc2,c
  2077  000DE4  0E00               	movlw	0
  2078  000DE6  6EDD               	movwf	postdec2,c
  2079                           
  2080                           ;FastTransfer.c: 263: _this->head = 0;
  2081  000DE8  0100               	movlb	0	; () banked
  2082  000DEA  EE20 F0C8          	lfsr	2,200
  2083  000DEE  51D0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2084  000DF0  26D9               	addwf	fsr2l,f,c
  2085  000DF2  51D1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2086  000DF4  22DA               	addwfc	fsr2h,f,c
  2087  000DF6  0E00               	movlw	0
  2088  000DF8  6EDE               	movwf	postinc2,c
  2089  000DFA  0E00               	movlw	0
  2090  000DFC  6EDD               	movwf	postdec2,c
  2091                           
  2092                           ;FastTransfer.c: 264: _this->tail = 0;
  2093  000DFE  0100               	movlb	0	; () banked
  2094  000E00  EE20 F0CA          	lfsr	2,202
  2095  000E04  51D0               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2096  000E06  26D9               	addwf	fsr2l,f,c
  2097  000E08  51D1               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2098  000E0A  22DA               	addwfc	fsr2h,f,c
  2099  000E0C  0E00               	movlw	0
  2100  000E0E  6EDE               	movwf	postinc2,c
  2101  000E10  0E00               	movlw	0
  2102  000E12  6EDD               	movwf	postdec2,c
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;FastTransfer.c: 265: if (clearBuffer) {
  2106  000E14  0100               	movlb	0	; () banked
  2107  000E16  51D2               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  2108  000E18  0100               	movlb	0	; () banked
  2109  000E1A  11D3               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  2110  000E1C  B4D8               	btfsc	status,2,c
  2111  000E1E  0012               	return	
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2115  000E20  C0D0  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2116  000E24  C0D1  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2117  000E28  0E00               	movlw	0
  2118  000E2A  6E1E               	movwf	memset@c+1,c
  2119  000E2C  0E00               	movlw	0
  2120  000E2E  6E1D               	movwf	memset@c,c
  2121  000E30  0E00               	movlw	0
  2122  000E32  6E20               	movwf	memset@n+1,c
  2123  000E34  0EC8               	movlw	200
  2124  000E36  6E1F               	movwf	memset@n,c
  2125  000E38  ECAA  F008         	call	_memset	;wreg free
  2126  000E3C  0012               	return	
  2127  000E3E                     __end_of_FastTransfer_buffer_flush:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           intcon	equ	0xFF2
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           postdec1	equ	0xFE5
  2137                           fsr1l	equ	0xFE1
  2138                           indf2	equ	0xFDF
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           plusw2	equ	0xFDB
  2142                           fsr2h	equ	0xFDA
  2143                           fsr2l	equ	0xFD9
  2144                           status	equ	0xFD8
  2145                           
  2146 ;; *************** function _memset *****************
  2147 ;; Defined at:
  2148 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  p1              2   26[COMRAM] PTR void 
  2151 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2152 ;;  c               2   28[COMRAM] int 
  2153 ;;  n               2   30[COMRAM] unsigned int 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;  p               2   32[COMRAM] PTR unsigned char 
  2156 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  2   26[COMRAM] PTR void 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2166 ;;      Params:         6       0       0       0       0       0       0
  2167 ;;      Locals:         2       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0
  2169 ;;      Totals:         8       0       0       0       0       0       0
  2170 ;;Total ram usage:        8 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    4
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_FastTransfer_buffer_flush
  2177 ;;		_UART_buff_init
  2178 ;;		_UART_buff_flush
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text6
  2183  001154                     __ptext6:
  2184                           	opt stack 0
  2185  001154                     _memset:
  2186                           	opt stack 22
  2187                           
  2188                           ;incstack = 0
  2189  001154  C01B  F021         	movff	memset@p1,memset@p
  2190  001158  C01C  F022         	movff	memset@p1+1,memset@p+1
  2191  00115C  D008               	goto	l3184
  2192  00115E                     l3180:
  2193  00115E  C021  FFD9         	movff	memset@p,fsr2l
  2194  001162  C022  FFDA         	movff	memset@p+1,fsr2h
  2195  001166  C01D  FFDF         	movff	memset@c,indf2
  2196  00116A  4A21               	infsnz	memset@p,f,c
  2197  00116C  2A22               	incf	memset@p+1,f,c
  2198  00116E                     l3184:
  2199  00116E  061F               	decf	memset@n,f,c
  2200  001170  A0D8               	btfss	status,0,c
  2201  001172  0620               	decf	memset@n+1,f,c
  2202  001174  281F               	incf	memset@n,w,c
  2203  001176  E1F3               	bnz	l3180
  2204  001178  2820               	incf	memset@n+1,w,c
  2205  00117A  B4D8               	btfsc	status,2,c
  2206  00117C  0012               	return	
  2207  00117E  D7EF               	goto	l3180
  2208  001180                     __end_of_memset:
  2209                           	opt stack 0
  2210                           tblptru	equ	0xFF8
  2211                           tblptrh	equ	0xFF7
  2212                           tblptrl	equ	0xFF6
  2213                           tablat	equ	0xFF5
  2214                           intcon	equ	0xFF2
  2215                           postinc0	equ	0xFEE
  2216                           wreg	equ	0xFE8
  2217                           postdec1	equ	0xFE5
  2218                           fsr1l	equ	0xFE1
  2219                           indf2	equ	0xFDF
  2220                           postinc2	equ	0xFDE
  2221                           postdec2	equ	0xFDD
  2222                           plusw2	equ	0xFDB
  2223                           fsr2h	equ	0xFDA
  2224                           fsr2l	equ	0xFD9
  2225                           status	equ	0xFD8
  2226                           
  2227 ;; *************** function _ToSend *****************
  2228 ;; Defined at:
  2229 ;;		line 216 in file "FastTransfer.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  where           1    wreg     unsigned char 
  2232 ;;  what            2    2[BANK0 ] unsigned int 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  where           1    4[BANK0 ] unsigned char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;		None               void
  2237 ;; Registers used:
  2238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2244 ;;      Params:         0       2       0       0       0       0       0
  2245 ;;      Locals:         0       1       0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0
  2247 ;;      Totals:         0       3       0       0       0       0       0
  2248 ;;Total ram usage:        3 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    6
  2251 ;; This function calls:
  2252 ;;		_FastTransfer_buffer_put
  2253 ;; This function is called by:
  2254 ;;		_respondChargerAsECU
  2255 ;;		_SetBMM
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           	psect	text7
  2260  0012F4                     __ptext7:
  2261                           	opt stack 0
  2262  0012F4                     _ToSend:
  2263                           	opt stack 22
  2264                           
  2265                           ;incstack = 0
  2266                           ;ToSend@where stored from wreg
  2267  0012F4  0100               	movlb	0	; () banked
  2268  0012F6  6FD4               	movwf	ToSend@where& (0+255),b
  2269                           
  2270                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2271  0012F8  0E00               	movlw	low _ring_buffer
  2272  0012FA  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2273  0012FC  0E01               	movlw	high _ring_buffer
  2274  0012FE  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2275  001300  C0D4  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2276  001304  C0D2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2277  001308  C0D3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2278  00130C  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2279  001310  0012               	return		;funcret
  2280  001312                     __end_of_ToSend:
  2281                           	opt stack 0
  2282                           tblptru	equ	0xFF8
  2283                           tblptrh	equ	0xFF7
  2284                           tblptrl	equ	0xFF6
  2285                           tablat	equ	0xFF5
  2286                           intcon	equ	0xFF2
  2287                           postinc0	equ	0xFEE
  2288                           wreg	equ	0xFE8
  2289                           postdec1	equ	0xFE5
  2290                           fsr1l	equ	0xFE1
  2291                           indf2	equ	0xFDF
  2292                           postinc2	equ	0xFDE
  2293                           postdec2	equ	0xFDD
  2294                           plusw2	equ	0xFDB
  2295                           fsr2h	equ	0xFDA
  2296                           fsr2l	equ	0xFD9
  2297                           status	equ	0xFD8
  2298                           
  2299 ;; *************** function _FastTransfer_buffer_put *****************
  2300 ;; Defined at:
  2301 ;;		line 223 in file "FastTransfer.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2304 ;;		 -> ring_buffer(206), 
  2305 ;;  towhere         1   34[COMRAM] unsigned char 
  2306 ;;  towhat          2   35[COMRAM] unsigned int 
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;		None               void
  2311 ;; Registers used:
  2312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2313 ;; Tracked objects:
  2314 ;;		On entry : 0/0
  2315 ;;		On exit  : 0/0
  2316 ;;		Unchanged: 0/0
  2317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2318 ;;      Params:         5       0       0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0       0       0
  2320 ;;      Temps:          0       2       0       0       0       0       0
  2321 ;;      Totals:         5       2       0       0       0       0       0
  2322 ;;Total ram usage:        7 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    5
  2325 ;; This function calls:
  2326 ;;		_FastTransfer_buffer_modulo_inc
  2327 ;; This function is called by:
  2328 ;;		_ToSend
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331                           
  2332                           	psect	text8
  2333  000354                     __ptext8:
  2334                           	opt stack 0
  2335  000354                     _FastTransfer_buffer_put:
  2336                           	opt stack 22
  2337                           
  2338                           ;FastTransfer.c: 225: group.integer = towhat;
  2339                           
  2340                           ;incstack = 0
  2341  000354  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  2342  000358  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2343                           
  2344                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2345  00035C  EE20 F0CC          	lfsr	2,204
  2346  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2347  000362  26D9               	addwf	fsr2l,f,c
  2348  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2349  000366  22DA               	addwfc	fsr2h,f,c
  2350  000368  0E01               	movlw	1
  2351  00036A  BEDB               	btfsc	plusw2,7,c
  2352  00036C  D007               	goto	l3226
  2353  00036E  0E01               	movlw	1
  2354  000370  50DB               	movf	plusw2,w,c
  2355  000372  E103               	bnz	u2011
  2356  000374  0EC5               	movlw	197
  2357  000376  5CDE               	subwf	postinc2,w,c
  2358  000378  B0D8               	btfsc	status,0,c
  2359  00037A                     u2011:
  2360  00037A  0012               	return	
  2361  00037C                     l3226:
  2362                           
  2363                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2364  00037C  EE20 F0C8          	lfsr	2,200
  2365  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2366  000382  26D9               	addwf	fsr2l,f,c
  2367  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2368  000386  22DA               	addwfc	fsr2h,f,c
  2369  000388  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  2370  00038C  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2371  000390  0100               	movlb	0	; () banked
  2372  000392  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2373  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2374  000396  6ED9               	movwf	fsr2l,c
  2375  000398  0100               	movlb	0	; () banked
  2376  00039A  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2377  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2378  00039E  6EDA               	movwf	fsr2h,c
  2379  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2383  0003A4  EE20 F0C8          	lfsr	2,200
  2384  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2385  0003AA  26D9               	addwf	fsr2l,f,c
  2386  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2387  0003AE  22DA               	addwfc	fsr2h,f,c
  2388  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2389  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2390  0003B8  0E00               	movlw	0
  2391  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2392  0003BC  0EC8               	movlw	200
  2393  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2394  0003C0  EC02  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2395  0003C4  EE20 F0C8          	lfsr	2,200
  2396  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2397  0003CA  26D9               	addwf	fsr2l,f,c
  2398  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2399  0003CE  22DA               	addwfc	fsr2h,f,c
  2400  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2401  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2402                           
  2403                           ;FastTransfer.c: 230: ++_this->count;
  2404  0003D8  EE20 F0CC          	lfsr	2,204
  2405  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2406  0003DE  26D9               	addwf	fsr2l,f,c
  2407  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2408  0003E2  22DA               	addwfc	fsr2h,f,c
  2409  0003E4  2ADE               	incf	postinc2,f,c
  2410  0003E6  0E00               	movlw	0
  2411  0003E8  22DD               	addwfc	postdec2,f,c
  2412                           
  2413                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2414  0003EA  EE20 F0C8          	lfsr	2,200
  2415  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2416  0003F0  26D9               	addwf	fsr2l,f,c
  2417  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2418  0003F4  22DA               	addwfc	fsr2h,f,c
  2419  0003F6  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  2420  0003FA  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2421  0003FE  0100               	movlb	0	; () banked
  2422  000400  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2423  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2424  000404  6ED9               	movwf	fsr2l,c
  2425  000406  0100               	movlb	0	; () banked
  2426  000408  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2427  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2428  00040C  6EDA               	movwf	fsr2h,c
  2429  00040E  C02C  FFDF         	movff	_group,indf2
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2433  000412  EE20 F0C8          	lfsr	2,200
  2434  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2435  000418  26D9               	addwf	fsr2l,f,c
  2436  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2437  00041C  22DA               	addwfc	fsr2h,f,c
  2438  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2439  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2440  000426  0E00               	movlw	0
  2441  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2442  00042A  0EC8               	movlw	200
  2443  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2444  00042E  EC02  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2445  000432  EE20 F0C8          	lfsr	2,200
  2446  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2447  000438  26D9               	addwf	fsr2l,f,c
  2448  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2449  00043C  22DA               	addwfc	fsr2h,f,c
  2450  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2451  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2452                           
  2453                           ;FastTransfer.c: 233: ++_this->count;
  2454  000446  EE20 F0CC          	lfsr	2,204
  2455  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2456  00044C  26D9               	addwf	fsr2l,f,c
  2457  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2458  000450  22DA               	addwfc	fsr2h,f,c
  2459  000452  2ADE               	incf	postinc2,f,c
  2460  000454  0E00               	movlw	0
  2461  000456  22DD               	addwfc	postdec2,f,c
  2462                           
  2463                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2464  000458  EE20 F0C8          	lfsr	2,200
  2465  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2466  00045E  26D9               	addwf	fsr2l,f,c
  2467  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2468  000462  22DA               	addwfc	fsr2h,f,c
  2469  000464  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  2470  000468  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2471  00046C  0100               	movlb	0	; () banked
  2472  00046E  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2473  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2474  000472  6ED9               	movwf	fsr2l,c
  2475  000474  0100               	movlb	0	; () banked
  2476  000476  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2477  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2478  00047A  6EDA               	movwf	fsr2h,c
  2479  00047C  C02D  FFDF         	movff	_group+1,indf2
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2483  000480  EE20 F0C8          	lfsr	2,200
  2484  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2485  000486  26D9               	addwf	fsr2l,f,c
  2486  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2487  00048A  22DA               	addwfc	fsr2h,f,c
  2488  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2489  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2490  000494  0E00               	movlw	0
  2491  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2492  000498  0EC8               	movlw	200
  2493  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2494  00049C  EC02  F009         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2495  0004A0  EE20 F0C8          	lfsr	2,200
  2496  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2497  0004A6  26D9               	addwf	fsr2l,f,c
  2498  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2499  0004AA  22DA               	addwfc	fsr2h,f,c
  2500  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2501  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2502                           
  2503                           ;FastTransfer.c: 236: ++_this->count;
  2504  0004B4  EE20 F0CC          	lfsr	2,204
  2505  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2506  0004BA  26D9               	addwf	fsr2l,f,c
  2507  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2508  0004BE  22DA               	addwfc	fsr2h,f,c
  2509  0004C0  2ADE               	incf	postinc2,f,c
  2510  0004C2  0E00               	movlw	0
  2511  0004C4  22DD               	addwfc	postdec2,f,c
  2512  0004C6  0012               	return	
  2513  0004C8                     __end_of_FastTransfer_buffer_put:
  2514                           	opt stack 0
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           intcon	equ	0xFF2
  2520                           postinc0	equ	0xFEE
  2521                           wreg	equ	0xFE8
  2522                           postdec1	equ	0xFE5
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           postinc2	equ	0xFDE
  2526                           postdec2	equ	0xFDD
  2527                           plusw2	equ	0xFDB
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2533 ;; Defined at:
  2534 ;;		line 273 in file "FastTransfer.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  value           2   26[COMRAM] const unsigned int 
  2537 ;;  modulus         2   28[COMRAM] const unsigned int 
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;  my_value        2   30[COMRAM] unsigned int 
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  2   26[COMRAM] unsigned int 
  2542 ;; Registers used:
  2543 ;;		wreg, status,2, status,0
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2549 ;;      Params:         4       0       0       0       0       0       0
  2550 ;;      Locals:         2       0       0       0       0       0       0
  2551 ;;      Temps:          0       0       0       0       0       0       0
  2552 ;;      Totals:         6       0       0       0       0       0       0
  2553 ;;Total ram usage:        6 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    4
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_FastTransfer_buffer_put
  2560 ;;		_FastTransfer_buffer_get
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text9
  2565  001204                     __ptext9:
  2566                           	opt stack 0
  2567  001204                     _FastTransfer_buffer_modulo_inc:
  2568                           	opt stack 22
  2569                           
  2570                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2571                           
  2572                           ;incstack = 0
  2573  001204  0E01               	movlw	1
  2574  001206  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2575  001208  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2576  00120A  0E00               	movlw	0
  2577  00120C  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2578  00120E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2579                           
  2580                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2581  001210  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2582  001212  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2583  001214  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2584  001216  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2585  001218  A0D8               	btfss	status,0,c
  2586  00121A  D004               	goto	l3174
  2587                           
  2588                           ;FastTransfer.c: 276: my_value = 0;
  2589  00121C  0E00               	movlw	0
  2590  00121E  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2591  001220  0E00               	movlw	0
  2592  001222  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2593  001224                     l3174:
  2594                           
  2595                           ;FastTransfer.c: 277: }
  2596                           ;FastTransfer.c: 278: return (my_value);
  2597  001224  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2598  001228  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2599  00122C  0012               	return	
  2600  00122E                     __end_of_FastTransfer_buffer_modulo_inc:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           intcon	equ	0xFF2
  2607                           postinc0	equ	0xFEE
  2608                           wreg	equ	0xFE8
  2609                           postdec1	equ	0xFE5
  2610                           fsr1l	equ	0xFE1
  2611                           indf2	equ	0xFDF
  2612                           postinc2	equ	0xFDE
  2613                           postdec2	equ	0xFDD
  2614                           plusw2	equ	0xFDB
  2615                           fsr2h	equ	0xFDA
  2616                           fsr2l	equ	0xFD9
  2617                           status	equ	0xFD8
  2618                           
  2619 ;; *************** function _GetPowerState *****************
  2620 ;; Defined at:
  2621 ;;		line 134 in file "Functions.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;		None
  2624 ;; Auto vars:     Size  Location     Type
  2625 ;;		None
  2626 ;; Return value:  Size  Location     Type
  2627 ;;                  1    wreg      unsigned char 
  2628 ;; Registers used:
  2629 ;;		wreg, status,2
  2630 ;; Tracked objects:
  2631 ;;		On entry : 0/0
  2632 ;;		On exit  : 0/0
  2633 ;;		Unchanged: 0/0
  2634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2635 ;;      Params:         0       0       0       0       0       0       0
  2636 ;;      Locals:         0       0       0       0       0       0       0
  2637 ;;      Temps:          0       0       0       0       0       0       0
  2638 ;;      Totals:         0       0       0       0       0       0       0
  2639 ;;Total ram usage:        0 bytes
  2640 ;; Hardware stack levels used:    1
  2641 ;; Hardware stack levels required when called:    4
  2642 ;; This function calls:
  2643 ;;		Nothing
  2644 ;; This function is called by:
  2645 ;;		_respondChargerAsECU
  2646 ;; This function uses a non-reentrant model
  2647 ;;
  2648                           
  2649                           	psect	text10
  2650  0013F2                     __ptext10:
  2651                           	opt stack 0
  2652  0013F2                     _GetPowerState:
  2653                           	opt stack 24
  2654                           
  2655                           ;Functions.c: 135: return PowerOn;
  2656                           
  2657                           ;incstack = 0
  2658  0013F2  5033               	movf	_PowerOn,w,c
  2659  0013F4  0012               	return	
  2660  0013F6                     __end_of_GetPowerState:
  2661                           	opt stack 0
  2662                           tblptru	equ	0xFF8
  2663                           tblptrh	equ	0xFF7
  2664                           tblptrl	equ	0xFF6
  2665                           tablat	equ	0xFF5
  2666                           intcon	equ	0xFF2
  2667                           postinc0	equ	0xFEE
  2668                           wreg	equ	0xFE8
  2669                           postdec1	equ	0xFE5
  2670                           fsr1l	equ	0xFE1
  2671                           indf2	equ	0xFDF
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           plusw2	equ	0xFDB
  2675                           fsr2h	equ	0xFDA
  2676                           fsr2l	equ	0xFD9
  2677                           status	equ	0xFD8
  2678                           
  2679 ;; *************** function _receiveData *****************
  2680 ;; Defined at:
  2681 ;;		line 82 in file "FastTransfer.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  holder          3   20[BANK0 ] unsigned char [3]
  2686 ;;  crcHolder       1   16[BANK0 ] unsigned char 
  2687 ;;  holder          3   17[BANK0 ] unsigned char [3]
  2688 ;;  crcHolder       1   15[BANK0 ] unsigned char 
  2689 ;;  u               2   23[BANK0 ] int 
  2690 ;;  r               2   25[BANK0 ] int 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      unsigned char 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2700 ;;      Params:         0       0       0       0       0       0       0
  2701 ;;      Locals:         0      12       0       0       0       0       0
  2702 ;;      Temps:          0       6       0       0       0       0       0
  2703 ;;      Totals:         0      18       0       0       0       0       0
  2704 ;;Total ram usage:       18 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    6
  2707 ;; This function calls:
  2708 ;;		_CRC8
  2709 ;;		_CRCcheck
  2710 ;; This function is called by:
  2711 ;;		_updateComms
  2712 ;;		_SetBMM
  2713 ;; This function uses a non-reentrant model
  2714 ;;
  2715                           
  2716                           	psect	text11
  2717  0000B0                     __ptext11:
  2718                           	opt stack 0
  2719  0000B0                     _receiveData:
  2720                           	opt stack 23
  2721                           
  2722                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2723                           
  2724                           ;incstack = 0
  2725  0000B0  D020               	goto	l3430
  2726  0000B2                     l3420:
  2727                           
  2728                           ; BSR set to: 0
  2729  0000B2  0100               	movlb	0	; () banked
  2730  0000B4  4BE7               	infsnz	receiveData@u& (0+255),f,b
  2731  0000B6  2BE8               	incf	(receiveData@u+1)& (0+255),f,b
  2732                           
  2733                           ; BSR set to: 0
  2734                           
  2735                           ; BSR set to: 0
  2736  0000B8  5040               	movf	_rx_len,w,c
  2737  0000BA  0100               	movlb	0	; () banked
  2738  0000BC  6FD9               	movwf	??_receiveData& (0+255),b
  2739  0000BE  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  2740  0000C0  0E01               	movlw	1
  2741  0000C2  0100               	movlb	0	; () banked
  2742  0000C4  27D9               	addwf	??_receiveData& (0+255),f,b
  2743  0000C6  0E00               	movlw	0
  2744  0000C8  23DA               	addwfc	(??_receiveData+1)& (0+255),f,b
  2745  0000CA  0100               	movlb	0	; () banked
  2746  0000CC  51E7               	movf	receiveData@u& (0+255),w,b
  2747  0000CE  0100               	movlb	0	; () banked
  2748  0000D0  5DD9               	subwf	??_receiveData& (0+255),w,b
  2749  0000D2  0100               	movlb	0	; () banked
  2750  0000D4  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  2751  0000D6  0A80               	xorlw	128
  2752  0000D8  0100               	movlb	0	; () banked
  2753  0000DA  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  2754  0000DC  0100               	movlb	0	; () banked
  2755  0000DE  51E8               	movf	(receiveData@u+1)& (0+255),w,b
  2756  0000E0  0A80               	xorlw	128
  2757  0000E2  0100               	movlb	0	; () banked
  2758  0000E4  59DB               	subwfb	(??_receiveData+2)& (0+255),w,b
  2759  0000E6  B0D8               	btfsc	status,0,c
  2760  0000E8  D7E4               	goto	l3420
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;FastTransfer.c: 109: }
  2764                           ;FastTransfer.c: 110: rx_len = 0;
  2765                           
  2766                           ; BSR set to: 0
  2767  0000EA  0E00               	movlw	0
  2768  0000EC  6E40               	movwf	_rx_len,c
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;FastTransfer.c: 111: return 0;
  2772  0000EE  0E00               	movlw	0
  2773                           
  2774                           ; BSR set to: 0
  2775  0000F0  0012               	return	
  2776  0000F2                     l3430:
  2777                           
  2778                           ;FastTransfer.c: 112: }
  2779                           ;FastTransfer.c: 114: }
  2780                           ;FastTransfer.c: 115: }
  2781                           ;FastTransfer.c: 116: }
  2782                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2783  0000F2  5040               	movf	_rx_len,w,c
  2784  0000F4  B4D8               	btfsc	status,2,c
  2785  0000F6  D12C               	goto	l3512
  2786                           
  2787                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2788  0000F8  503F               	movf	_rx_array_inx,w,c
  2789  0000FA  B4D8               	btfsc	status,2,c
  2790  0000FC                     l447:
  2791  0000FC  D7FF               	goto	l447
  2792                           
  2793                           ;FastTransfer.c: 135: }
  2794                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2795                           
  2796                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2797                           
  2798                           ;FastTransfer.c: 129: }
  2799                           ;FastTransfer.c: 130: }
  2800                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2801                           
  2802                           ;FastTransfer.c: 128: return 0;
  2803                           
  2804                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2805                           
  2806                           ;FastTransfer.c: 126: rx_len = 0;
  2807                           
  2808                           ;FastTransfer.c: 125: CRCcheck();
  2809                           
  2810                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2811  0000FE  5040               	movf	_rx_len,w,c
  2812  000100  0100               	movlb	0	; () banked
  2813  000102  6FD9               	movwf	??_receiveData& (0+255),b
  2814  000104  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  2815  000106  0EFF               	movlw	255
  2816  000108  0100               	movlb	0	; () banked
  2817  00010A  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  2818  00010C  0EFF               	movlw	255
  2819  00010E  0100               	movlb	0	; () banked
  2820  000110  6FDC               	movwf	(??_receiveData+3)& (0+255),b
  2821  000112  503F               	movf	_rx_array_inx,w,c
  2822  000114  0100               	movlb	0	; () banked
  2823  000116  6FDD               	movwf	(??_receiveData+4)& (0+255),b
  2824  000118  6BDE               	clrf	(??_receiveData+5)& (0+255),b
  2825  00011A  0100               	movlb	0	; () banked
  2826  00011C  51DB               	movf	(??_receiveData+2)& (0+255),w,b
  2827  00011E  0100               	movlb	0	; () banked
  2828  000120  27DD               	addwf	(??_receiveData+4)& (0+255),f,b
  2829  000122  0100               	movlb	0	; () banked
  2830  000124  51DC               	movf	(??_receiveData+3)& (0+255),w,b
  2831  000126  0100               	movlb	0	; () banked
  2832  000128  23DE               	addwfc	(??_receiveData+5)& (0+255),f,b
  2833  00012A  0100               	movlb	0	; () banked
  2834  00012C  51D9               	movf	??_receiveData& (0+255),w,b
  2835  00012E  0100               	movlb	0	; () banked
  2836  000130  19DD               	xorwf	(??_receiveData+4)& (0+255),w,b
  2837  000132  E105               	bnz	u2321
  2838  000134  0100               	movlb	0	; () banked
  2839  000136  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  2840  000138  0100               	movlb	0	; () banked
  2841  00013A  19DE               	xorwf	(??_receiveData+5)& (0+255),w,b
  2842  00013C  A4D8               	btfss	status,2,c
  2843  00013E                     u2321:
  2844  00013E  D108               	goto	l3512
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2848  000140  0E00               	movlw	low _rx_buffer
  2849  000142  6E1B               	movwf	CRC8@data,c
  2850  000144  0E04               	movlw	high _rx_buffer
  2851  000146  6E1C               	movwf	CRC8@data+1,c
  2852  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2853  00014C  ECCF  F007         	call	_CRC8	;wreg free
  2854  000150  6E34               	movwf	_calc_CS,c
  2855                           
  2856                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2857  000152  0EFF               	movlw	255
  2858  000154  0100               	movlb	0	; () banked
  2859  000156  6FD9               	movwf	??_receiveData& (0+255),b
  2860  000158  0EFF               	movlw	255
  2861  00015A  0100               	movlb	0	; () banked
  2862  00015C  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  2863  00015E  503F               	movf	_rx_array_inx,w,c
  2864  000160  0100               	movlb	0	; () banked
  2865  000162  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  2866  000164  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  2867  000166  0100               	movlb	0	; () banked
  2868  000168  51D9               	movf	??_receiveData& (0+255),w,b
  2869  00016A  0100               	movlb	0	; () banked
  2870  00016C  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  2871  00016E  0100               	movlb	0	; () banked
  2872  000170  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  2873  000172  0100               	movlb	0	; () banked
  2874  000174  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2875  000176  0E00               	movlw	low _rx_buffer
  2876  000178  0100               	movlb	0	; () banked
  2877  00017A  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  2878  00017C  6ED9               	movwf	fsr2l,c
  2879  00017E  0E04               	movlw	high _rx_buffer
  2880  000180  0100               	movlb	0	; () banked
  2881  000182  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2882  000184  6EDA               	movwf	fsr2h,c
  2883  000186  5034               	movf	_calc_CS,w,c
  2884  000188  18DE               	xorwf	postinc2,w,c
  2885  00018A  A4D8               	btfss	status,2,c
  2886  00018C  D0A9               	goto	l3492
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;FastTransfer.c: 147: int r;
  2890                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2891  00018E  0E00               	movlw	0
  2892  000190  0100               	movlb	0	; () banked
  2893  000192  6FEA               	movwf	(receiveData@r+1)& (0+255),b
  2894  000194  0E00               	movlw	0
  2895  000196  6FE9               	movwf	receiveData@r& (0+255),b
  2896  000198  D05A               	goto	l3470
  2897  00019A                     l3460:
  2898                           
  2899                           ; BSR set to: 0
  2900                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2901  00019A  0E00               	movlw	low _rx_buffer
  2902  00019C  0100               	movlb	0	; () banked
  2903  00019E  25E9               	addwf	receiveData@r& (0+255),w,b
  2904  0001A0  6ED9               	movwf	fsr2l,c
  2905  0001A2  0E04               	movlw	high _rx_buffer
  2906  0001A4  0100               	movlb	0	; () banked
  2907  0001A6  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2908  0001A8  6EDA               	movwf	fsr2h,c
  2909  0001AA  503B               	movf	_maxDataAddress,w,c
  2910  0001AC  5CDE               	subwf	postinc2,w,c
  2911  0001AE  B0D8               	btfsc	status,0,c
  2912  0001B0  D041               	goto	l3466
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2916  0001B2  0E01               	movlw	1
  2917  0001B4  0100               	movlb	0	; () banked
  2918  0001B6  25E9               	addwf	receiveData@r& (0+255),w,b
  2919  0001B8  0100               	movlb	0	; () banked
  2920  0001BA  6FD9               	movwf	??_receiveData& (0+255),b
  2921  0001BC  0E00               	movlw	0
  2922  0001BE  0100               	movlb	0	; () banked
  2923  0001C0  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2924  0001C2  0100               	movlb	0	; () banked
  2925  0001C4  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  2926  0001C6  0E00               	movlw	low _rx_buffer
  2927  0001C8  0100               	movlb	0	; () banked
  2928  0001CA  25D9               	addwf	??_receiveData& (0+255),w,b
  2929  0001CC  6ED9               	movwf	fsr2l,c
  2930  0001CE  0E04               	movlw	high _rx_buffer
  2931  0001D0  0100               	movlb	0	; () banked
  2932  0001D2  21DA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2933  0001D4  6EDA               	movwf	fsr2h,c
  2934  0001D6  50DF               	movf	indf2,w,c
  2935  0001D8  6E2C               	movwf	_group,c
  2936                           
  2937                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2938  0001DA  0E02               	movlw	2
  2939  0001DC  0100               	movlb	0	; () banked
  2940  0001DE  25E9               	addwf	receiveData@r& (0+255),w,b
  2941  0001E0  0100               	movlb	0	; () banked
  2942  0001E2  6FD9               	movwf	??_receiveData& (0+255),b
  2943  0001E4  0E00               	movlw	0
  2944  0001E6  0100               	movlb	0	; () banked
  2945  0001E8  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2946  0001EA  0100               	movlb	0	; () banked
  2947  0001EC  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  2948  0001EE  0E00               	movlw	low _rx_buffer
  2949  0001F0  0100               	movlb	0	; () banked
  2950  0001F2  25D9               	addwf	??_receiveData& (0+255),w,b
  2951  0001F4  6ED9               	movwf	fsr2l,c
  2952  0001F6  0E04               	movlw	high _rx_buffer
  2953  0001F8  0100               	movlb	0	; () banked
  2954  0001FA  21DA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2955  0001FC  6EDA               	movwf	fsr2h,c
  2956  0001FE  50DF               	movf	indf2,w,c
  2957  000200  6E2D               	movwf	_group+1,c
  2958                           
  2959                           ; BSR set to: 0
  2960                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2961  000202  0E00               	movlw	low _rx_buffer
  2962  000204  0100               	movlb	0	; () banked
  2963  000206  25E9               	addwf	receiveData@r& (0+255),w,b
  2964  000208  6ED9               	movwf	fsr2l,c
  2965  00020A  0E04               	movlw	high _rx_buffer
  2966  00020C  0100               	movlb	0	; () banked
  2967  00020E  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2968  000210  6EDA               	movwf	fsr2h,c
  2969  000212  50DF               	movf	indf2,w,c
  2970  000214  0100               	movlb	0	; () banked
  2971  000216  6FD9               	movwf	??_receiveData& (0+255),b
  2972  000218  0100               	movlb	0	; () banked
  2973  00021A  51D9               	movf	??_receiveData& (0+255),w,b
  2974  00021C  0D02               	mullw	2
  2975  00021E  50F3               	movf	prodl,w,c
  2976  000220  242E               	addwf	_receiveArrayAddress,w,c
  2977  000222  6ED9               	movwf	fsr2l,c
  2978  000224  50F4               	movf	prodh,w,c
  2979  000226  202F               	addwfc	_receiveArrayAddress+1,w,c
  2980  000228  6EDA               	movwf	fsr2h,c
  2981  00022A  C02C  FFDE         	movff	_group,postinc2
  2982  00022E  C02D  FFDD         	movff	_group+1,postdec2
  2983                           
  2984                           ;FastTransfer.c: 153: } else {
  2985  000232  D003               	goto	l3468
  2986  000234                     l3466:
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2990  000234  0100               	movlb	0	; () banked
  2991  000236  4BB5               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2992  000238  2BB6               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2993  00023A                     l3468:
  2994                           
  2995                           ; BSR set to: 0
  2996  00023A  0E03               	movlw	3
  2997  00023C  0100               	movlb	0	; () banked
  2998  00023E  25E9               	addwf	receiveData@r& (0+255),w,b
  2999  000240  0100               	movlb	0	; () banked
  3000  000242  6FE9               	movwf	receiveData@r& (0+255),b
  3001  000244  0E00               	movlw	0
  3002  000246  0100               	movlb	0	; () banked
  3003  000248  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  3004  00024A  0100               	movlb	0	; () banked
  3005  00024C  6FEA               	movwf	(receiveData@r+1)& (0+255),b
  3006  00024E                     l3470:
  3007                           
  3008                           ; BSR set to: 0
  3009  00024E  5040               	movf	_rx_len,w,c
  3010  000250  0100               	movlb	0	; () banked
  3011  000252  6FD9               	movwf	??_receiveData& (0+255),b
  3012  000254  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  3013  000256  0100               	movlb	0	; () banked
  3014  000258  51D9               	movf	??_receiveData& (0+255),w,b
  3015  00025A  0100               	movlb	0	; () banked
  3016  00025C  5DE9               	subwf	receiveData@r& (0+255),w,b
  3017  00025E  0100               	movlb	0	; () banked
  3018  000260  51EA               	movf	(receiveData@r+1)& (0+255),w,b
  3019  000262  0A80               	xorlw	128
  3020  000264  0100               	movlb	0	; () banked
  3021  000266  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  3022  000268  0100               	movlb	0	; () banked
  3023  00026A  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  3024  00026C  0A80               	xorlw	128
  3025  00026E  0100               	movlb	0	; () banked
  3026  000270  59DB               	subwfb	(??_receiveData+2)& (0+255),w,b
  3027  000272  A0D8               	btfss	status,0,c
  3028  000274  D792               	goto	l3460
  3029                           
  3030                           ; BSR set to: 0
  3031                           ;FastTransfer.c: 155: }
  3032                           ;FastTransfer.c: 156: }
  3033                           ;FastTransfer.c: 159: if (AKNAKsend) {
  3034                           
  3035                           ; BSR set to: 0
  3036  000276  5032               	movf	_AKNAKsend,w,c
  3037  000278  B4D8               	btfsc	status,2,c
  3038  00027A  D02C               	goto	l3482
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;FastTransfer.c: 160: unsigned char holder[3];
  3042                           ;FastTransfer.c: 161: holder[0] = 255;
  3043  00027C  0100               	movlb	0	; () banked
  3044  00027E  69E1               	setf	receiveData@holder& (0+255),b
  3045                           
  3046                           ; BSR set to: 0
  3047                           ;FastTransfer.c: 162: holder[1] = 1;
  3048  000280  0E01               	movlw	1
  3049  000282  0100               	movlb	0	; () banked
  3050  000284  6FE2               	movwf	(receiveData@holder+1)& (0+255),b
  3051                           
  3052                           ; BSR set to: 0
  3053                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  3054  000286  0EFF               	movlw	255
  3055  000288  0100               	movlb	0	; () banked
  3056  00028A  6FD9               	movwf	??_receiveData& (0+255),b
  3057  00028C  0EFF               	movlw	255
  3058  00028E  0100               	movlb	0	; () banked
  3059  000290  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  3060  000292  503F               	movf	_rx_array_inx,w,c
  3061  000294  0100               	movlb	0	; () banked
  3062  000296  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  3063  000298  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  3064  00029A  0100               	movlb	0	; () banked
  3065  00029C  51D9               	movf	??_receiveData& (0+255),w,b
  3066  00029E  0100               	movlb	0	; () banked
  3067  0002A0  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  3068  0002A2  0100               	movlb	0	; () banked
  3069  0002A4  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  3070  0002A6  0100               	movlb	0	; () banked
  3071  0002A8  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  3072  0002AA  0E00               	movlw	low _rx_buffer
  3073  0002AC  0100               	movlb	0	; () banked
  3074  0002AE  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  3075  0002B0  6ED9               	movwf	fsr2l,c
  3076  0002B2  0E04               	movlw	high _rx_buffer
  3077  0002B4  0100               	movlb	0	; () banked
  3078  0002B6  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  3079  0002B8  6EDA               	movwf	fsr2h,c
  3080  0002BA  50DF               	movf	indf2,w,c
  3081  0002BC  0100               	movlb	0	; () banked
  3082  0002BE  6FE3               	movwf	(receiveData@holder+2)& (0+255),b
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3086  0002C0  0EE1               	movlw	low receiveData@holder
  3087  0002C2  6E1B               	movwf	CRC8@data,c
  3088  0002C4  0E00               	movlw	high receiveData@holder
  3089  0002C6  6E1C               	movwf	CRC8@data+1,c
  3090  0002C8  0E03               	movlw	3
  3091  0002CA  6E1D               	movwf	CRC8@len,c
  3092  0002CC  ECCF  F007         	call	_CRC8	;wreg free
  3093  0002D0  0100               	movlb	0	; () banked
  3094  0002D2  6FDF               	movwf	receiveData@crcHolder& (0+255),b
  3095  0002D4                     l3482:
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;FastTransfer.c: 174: }
  3099                           ;FastTransfer.c: 178: rx_len = 0;
  3100  0002D4  0E00               	movlw	0
  3101  0002D6  6E40               	movwf	_rx_len,c
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3105  0002D8  0E00               	movlw	0
  3106  0002DA  6E3F               	movwf	_rx_array_inx,c
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;FastTransfer.c: 180: return 1;
  3110  0002DC  0E01               	movlw	1
  3111                           
  3112                           ; BSR set to: 0
  3113  0002DE  0012               	return	
  3114  0002E0                     l3492:
  3115                           
  3116                           ; BSR set to: 0
  3117                           ;FastTransfer.c: 182: crcErrorCounter++;
  3118  0002E0  0100               	movlb	0	; () banked
  3119  0002E2  4BB3               	infsnz	_crcErrorCounter& (0+255),f,b
  3120  0002E4  2BB4               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3121                           
  3122                           ; BSR set to: 0
  3123                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3124  0002E6  5032               	movf	_AKNAKsend,w,c
  3125  0002E8  B4D8               	btfsc	status,2,c
  3126  0002EA  D02C               	goto	l3504
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;FastTransfer.c: 185: unsigned char holder[3];
  3130                           ;FastTransfer.c: 186: holder[0] = 255;
  3131  0002EC  0100               	movlb	0	; () banked
  3132  0002EE  69E4               	setf	receiveData@holder_1846& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;FastTransfer.c: 187: holder[1] = 2;
  3136  0002F0  0E02               	movlw	2
  3137  0002F2  0100               	movlb	0	; () banked
  3138  0002F4  6FE5               	movwf	(receiveData@holder_1846+1)& (0+255),b
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3142  0002F6  0EFF               	movlw	255
  3143  0002F8  0100               	movlb	0	; () banked
  3144  0002FA  6FD9               	movwf	??_receiveData& (0+255),b
  3145  0002FC  0EFF               	movlw	255
  3146  0002FE  0100               	movlb	0	; () banked
  3147  000300  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  3148  000302  503F               	movf	_rx_array_inx,w,c
  3149  000304  0100               	movlb	0	; () banked
  3150  000306  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  3151  000308  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  3152  00030A  0100               	movlb	0	; () banked
  3153  00030C  51D9               	movf	??_receiveData& (0+255),w,b
  3154  00030E  0100               	movlb	0	; () banked
  3155  000310  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  3156  000312  0100               	movlb	0	; () banked
  3157  000314  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  3158  000316  0100               	movlb	0	; () banked
  3159  000318  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  3160  00031A  0E00               	movlw	low _rx_buffer
  3161  00031C  0100               	movlb	0	; () banked
  3162  00031E  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  3163  000320  6ED9               	movwf	fsr2l,c
  3164  000322  0E04               	movlw	high _rx_buffer
  3165  000324  0100               	movlb	0	; () banked
  3166  000326  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  3167  000328  6EDA               	movwf	fsr2h,c
  3168  00032A  50DF               	movf	indf2,w,c
  3169  00032C  0100               	movlb	0	; () banked
  3170  00032E  6FE6               	movwf	(receiveData@holder_1846+2)& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3174  000330  0EE4               	movlw	low receiveData@holder_1846
  3175  000332  6E1B               	movwf	CRC8@data,c
  3176  000334  0E00               	movlw	high receiveData@holder_1846
  3177  000336  6E1C               	movwf	CRC8@data+1,c
  3178  000338  0E03               	movlw	3
  3179  00033A  6E1D               	movwf	CRC8@len,c
  3180  00033C  ECCF  F007         	call	_CRC8	;wreg free
  3181  000340  0100               	movlb	0	; () banked
  3182  000342  6FE0               	movwf	receiveData@crcHolder_1847& (0+255),b
  3183  000344                     l3504:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;FastTransfer.c: 199: }
  3187                           ;FastTransfer.c: 202: rx_len = 0;
  3188  000344  0E00               	movlw	0
  3189  000346  6E40               	movwf	_rx_len,c
  3190                           
  3191                           ; BSR set to: 0
  3192                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3193  000348  0E00               	movlw	0
  3194  00034A  6E3F               	movwf	_rx_array_inx,c
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;FastTransfer.c: 204: return 0;
  3198  00034C  0E00               	movlw	0
  3199                           
  3200                           ; BSR set to: 0
  3201  00034E  0012               	return	
  3202  000350                     l3512:
  3203                           
  3204                           ;FastTransfer.c: 205: }
  3205                           ;FastTransfer.c: 206: }
  3206                           ;FastTransfer.c: 207: }
  3207                           ;FastTransfer.c: 210: return 0;
  3208  000350  0E00               	movlw	0
  3209  000352  0012               	return	
  3210  000354                     __end_of_receiveData:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           intcon	equ	0xFF2
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           postdec1	equ	0xFE5
  3222                           fsr1l	equ	0xFE1
  3223                           indf2	equ	0xFDF
  3224                           postinc2	equ	0xFDE
  3225                           postdec2	equ	0xFDD
  3226                           plusw2	equ	0xFDB
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function _CRCcheck *****************
  3232 ;; Defined at:
  3233 ;;		line 373 in file "FastTransfer.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;		None
  3236 ;; Auto vars:     Size  Location     Type
  3237 ;;  rt              2    7[BANK0 ] int 
  3238 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  3239 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  3240 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  3241 ;; Return value:  Size  Location     Type
  3242 ;;		None               void
  3243 ;; Registers used:
  3244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3250 ;;      Params:         0       0       0       0       0       0       0
  3251 ;;      Locals:         0       7       0       0       0       0       0
  3252 ;;      Temps:          0       0       0       0       0       0       0
  3253 ;;      Totals:         0       7       0       0       0       0       0
  3254 ;;Total ram usage:        7 bytes
  3255 ;; Hardware stack levels used:    1
  3256 ;; Hardware stack levels required when called:    5
  3257 ;; This function calls:
  3258 ;;		_CRC8
  3259 ;;		_crcBufS_get
  3260 ;;		_crcBufS_status_put
  3261 ;; This function is called by:
  3262 ;;		_receiveData
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text12
  3267  000A16                     __ptext12:
  3268                           	opt stack 0
  3269  000A16                     _CRCcheck:
  3270                           	opt stack 23
  3271  000A16                     l523:
  3272  000A16  D7FF               	goto	l523
  3273  000A18                     l3320:
  3274                           
  3275                           ; BSR set to: 0
  3276  000A18  0100               	movlb	0	; () banked
  3277  000A1A  BFD8               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3278  000A1C  D008               	goto	l3324
  3279  000A1E  0100               	movlb	0	; () banked
  3280  000A20  51D8               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3281  000A22  E143               	bnz	l535
  3282  000A24  0E05               	movlw	5
  3283  000A26  0100               	movlb	0	; () banked
  3284  000A28  5DD7               	subwf	CRCcheck@rt& (0+255),w,b
  3285  000A2A  B0D8               	btfsc	status,0,c
  3286  000A2C  0012               	return	
  3287  000A2E                     l3324:
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3291  000A2E  0EBF               	movlw	low _crc_buffer
  3292  000A30  6E1B               	movwf	crcBufS_get@_this,c
  3293  000A32  0E00               	movlw	high _crc_buffer
  3294  000A34  6E1C               	movwf	crcBufS_get@_this+1,c
  3295  000A36  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3296  000A3A  0E00               	movlw	0
  3297  000A3C  6E1E               	movwf	crcBufS_get@space,c
  3298  000A3E  ECF1  F002         	call	_crcBufS_get	;wreg free
  3299  000A42  183D               	xorwf	_returnAddress,w,c
  3300  000A44  A4D8               	btfss	status,2,c
  3301  000A46  D02D               	goto	l3338
  3302                           
  3303                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3304  000A48  0EBF               	movlw	low _crc_buffer
  3305  000A4A  6E1B               	movwf	crcBufS_get@_this,c
  3306  000A4C  0E00               	movlw	high _crc_buffer
  3307  000A4E  6E1C               	movwf	crcBufS_get@_this+1,c
  3308  000A50  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3309  000A54  0E01               	movlw	1
  3310  000A56  6E1E               	movwf	crcBufS_get@space,c
  3311  000A58  ECF1  F002         	call	_crcBufS_get	;wreg free
  3312  000A5C  0100               	movlb	0	; () banked
  3313  000A5E  19D6               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3314  000A60  A4D8               	btfss	status,2,c
  3315  000A62  D01F               	goto	l3338
  3316                           
  3317                           ; BSR set to: 0
  3318                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3319  000A64  0100               	movlb	0	; () banked
  3320  000A66  05D5               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3321  000A68  A4D8               	btfss	status,2,c
  3322  000A6A  D00B               	goto	l3334
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3326  000A6C  0EBF               	movlw	low _crc_buffer
  3327  000A6E  6E1B               	movwf	crcBufS_status_put@_this,c
  3328  000A70  0E00               	movlw	high _crc_buffer
  3329  000A72  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3330  000A74  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3331  000A78  0E01               	movlw	1
  3332  000A7A  6E1E               	movwf	crcBufS_status_put@status,c
  3333  000A7C  EC4D  F004         	call	_crcBufS_status_put	;wreg free
  3334                           
  3335                           ;FastTransfer.c: 393: break;
  3336  000A80  0012               	return	
  3337  000A82                     l3334:
  3338  000A82  0E02               	movlw	2
  3339  000A84  0100               	movlb	0	; () banked
  3340  000A86  19D5               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3341  000A88  A4D8               	btfss	status,2,c
  3342  000A8A  D00B               	goto	l3338
  3343                           
  3344                           ; BSR set to: 0
  3345                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3346  000A8C  0EBF               	movlw	low _crc_buffer
  3347  000A8E  6E1B               	movwf	crcBufS_status_put@_this,c
  3348  000A90  0E00               	movlw	high _crc_buffer
  3349  000A92  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3350  000A94  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3351  000A98  0E02               	movlw	2
  3352  000A9A  6E1E               	movwf	crcBufS_status_put@status,c
  3353  000A9C  EC4D  F004         	call	_crcBufS_status_put	;wreg free
  3354                           
  3355                           ;FastTransfer.c: 396: break;
  3356  000AA0  0012               	return	
  3357  000AA2                     l3338:
  3358  000AA2  0100               	movlb	0	; () banked
  3359  000AA4  4BD7               	infsnz	CRCcheck@rt& (0+255),f,b
  3360  000AA6  2BD8               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3361  000AA8  D7B7               	goto	l3320
  3362  000AAA                     l535:
  3363  000AAA  0012               	return		;funcret
  3364  000AAC                     __end_of_CRCcheck:
  3365                           	opt stack 0
  3366                           tblptru	equ	0xFF8
  3367                           tblptrh	equ	0xFF7
  3368                           tblptrl	equ	0xFF6
  3369                           tablat	equ	0xFF5
  3370                           prodh	equ	0xFF4
  3371                           prodl	equ	0xFF3
  3372                           intcon	equ	0xFF2
  3373                           postinc0	equ	0xFEE
  3374                           wreg	equ	0xFE8
  3375                           postdec1	equ	0xFE5
  3376                           fsr1l	equ	0xFE1
  3377                           indf2	equ	0xFDF
  3378                           postinc2	equ	0xFDE
  3379                           postdec2	equ	0xFDD
  3380                           plusw2	equ	0xFDB
  3381                           fsr2h	equ	0xFDA
  3382                           fsr2l	equ	0xFD9
  3383                           status	equ	0xFD8
  3384                           
  3385 ;; *************** function _crcBufS_status_put *****************
  3386 ;; Defined at:
  3387 ;;		line 336 in file "FastTransfer.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3390 ;;		 -> crc_buffer(17), 
  3391 ;;  time            1   28[COMRAM] unsigned char 
  3392 ;;  status          1   29[COMRAM] unsigned char 
  3393 ;; Auto vars:     Size  Location     Type
  3394 ;;  wantedTime      2   34[COMRAM] int 
  3395 ;; Return value:  Size  Location     Type
  3396 ;;		None               void
  3397 ;; Registers used:
  3398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3399 ;; Tracked objects:
  3400 ;;		On entry : 0/0
  3401 ;;		On exit  : 0/0
  3402 ;;		Unchanged: 0/0
  3403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3404 ;;      Params:         4       0       0       0       0       0       0
  3405 ;;      Locals:         2       0       0       0       0       0       0
  3406 ;;      Temps:          4       0       0       0       0       0       0
  3407 ;;      Totals:        10       0       0       0       0       0       0
  3408 ;;Total ram usage:       10 bytes
  3409 ;; Hardware stack levels used:    1
  3410 ;; Hardware stack levels required when called:    4
  3411 ;; This function calls:
  3412 ;;		Nothing
  3413 ;; This function is called by:
  3414 ;;		_CRCcheck
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text13
  3419  00089A                     __ptext13:
  3420                           	opt stack 0
  3421  00089A                     _crcBufS_status_put:
  3422                           	opt stack 23
  3423                           
  3424                           ;FastTransfer.c: 337: if (time >= 5) {
  3425                           
  3426                           ;incstack = 0
  3427  00089A  0E04               	movlw	4
  3428  00089C  641D               	cpfsgt	crcBufS_status_put@time,c
  3429  00089E  D002               	goto	l3268
  3430                           
  3431                           ;FastTransfer.c: 338: time = 5 - 1;
  3432  0008A0  0E04               	movlw	4
  3433  0008A2  6E1D               	movwf	crcBufS_status_put@time,c
  3434  0008A4                     l3268:
  3435                           
  3436                           ;FastTransfer.c: 339: }
  3437                           ;FastTransfer.c: 340: time = time + 1;
  3438  0008A4  281D               	incf	crcBufS_status_put@time,w,c
  3439  0008A6  6E1D               	movwf	crcBufS_status_put@time,c
  3440                           
  3441                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3442  0008A8  501D               	movf	crcBufS_status_put@time,w,c
  3443  0008AA  0D03               	mullw	3
  3444  0008AC  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3445  0008B0  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3446                           
  3447                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3448  0008B4  EE20 F00F          	lfsr	2,15
  3449  0008B8  501B               	movf	crcBufS_status_put@_this,w,c
  3450  0008BA  26D9               	addwf	fsr2l,f,c
  3451  0008BC  501C               	movf	crcBufS_status_put@_this+1,w,c
  3452  0008BE  22DA               	addwfc	fsr2h,f,c
  3453  0008C0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3454  0008C2  5CDE               	subwf	postinc2,w,c
  3455  0008C4  50DE               	movf	postinc2,w,c
  3456  0008C6  0A80               	xorlw	128
  3457  0008C8  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3458  0008CA  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3459  0008CC  0A80               	xorlw	128
  3460  0008CE  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3461  0008D0  B0D8               	btfsc	status,0,c
  3462  0008D2  D02B               	goto	l3276
  3463                           
  3464                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3465  0008D4  EE20 F00F          	lfsr	2,15
  3466  0008D8  501B               	movf	crcBufS_status_put@_this,w,c
  3467  0008DA  26D9               	addwf	fsr2l,f,c
  3468  0008DC  501C               	movf	crcBufS_status_put@_this+1,w,c
  3469  0008DE  22DA               	addwfc	fsr2h,f,c
  3470  0008E0  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3471  0008E4  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3472  0008E8  1E1F               	comf	??_crcBufS_status_put,f,c
  3473  0008EA  1E20               	comf	??_crcBufS_status_put+1,f,c
  3474  0008EC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3475  0008EE  2A20               	incf	??_crcBufS_status_put+1,f,c
  3476  0008F0  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3477  0008F2  261F               	addwf	??_crcBufS_status_put,f,c
  3478  0008F4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3479  0008F6  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3480  0008F8  1E1F               	comf	??_crcBufS_status_put,f,c
  3481  0008FA  1E20               	comf	??_crcBufS_status_put+1,f,c
  3482  0008FC  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3483  0008FE  2A20               	incf	??_crcBufS_status_put+1,f,c
  3484  000900  0E0F               	movlw	15
  3485  000902  241F               	addwf	??_crcBufS_status_put,w,c
  3486  000904  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3487  000906  0E00               	movlw	0
  3488  000908  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3489  00090A  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3490                           
  3491                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3492  00090C  0E02               	movlw	2
  3493  00090E  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3494  000910  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3495  000912  0E00               	movlw	0
  3496  000914  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3497  000916  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3498  000918  501F               	movf	??_crcBufS_status_put,w,c
  3499  00091A  241B               	addwf	crcBufS_status_put@_this,w,c
  3500  00091C  6ED9               	movwf	fsr2l,c
  3501  00091E  5020               	movf	??_crcBufS_status_put+1,w,c
  3502  000920  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3503  000922  6EDA               	movwf	fsr2h,c
  3504  000924  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3505                           
  3506                           ;FastTransfer.c: 345: } else {
  3507  000928  0012               	return	
  3508  00092A                     l3276:
  3509                           
  3510                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3511  00092A  EE20 F00F          	lfsr	2,15
  3512  00092E  501B               	movf	crcBufS_status_put@_this,w,c
  3513  000930  26D9               	addwf	fsr2l,f,c
  3514  000932  501C               	movf	crcBufS_status_put@_this+1,w,c
  3515  000934  22DA               	addwfc	fsr2h,f,c
  3516  000936  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3517  00093A  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3518  00093E  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3519  000942  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3520  000946  1E21               	comf	??_crcBufS_status_put+2,f,c
  3521  000948  1E22               	comf	??_crcBufS_status_put+3,f,c
  3522  00094A  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3523  00094C  2A22               	incf	??_crcBufS_status_put+3,f,c
  3524  00094E  501F               	movf	??_crcBufS_status_put,w,c
  3525  000950  2621               	addwf	??_crcBufS_status_put+2,f,c
  3526  000952  5020               	movf	??_crcBufS_status_put+1,w,c
  3527  000954  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3528  000956  0E02               	movlw	2
  3529  000958  2621               	addwf	??_crcBufS_status_put+2,f,c
  3530  00095A  0E00               	movlw	0
  3531  00095C  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3532  00095E  5021               	movf	??_crcBufS_status_put+2,w,c
  3533  000960  241B               	addwf	crcBufS_status_put@_this,w,c
  3534  000962  6ED9               	movwf	fsr2l,c
  3535  000964  5022               	movf	??_crcBufS_status_put+3,w,c
  3536  000966  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3537  000968  6EDA               	movwf	fsr2h,c
  3538  00096A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3539  00096E  0012               	return	
  3540  000970                     __end_of_crcBufS_status_put:
  3541                           	opt stack 0
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           prodh	equ	0xFF4
  3547                           prodl	equ	0xFF3
  3548                           intcon	equ	0xFF2
  3549                           postinc0	equ	0xFEE
  3550                           wreg	equ	0xFE8
  3551                           postdec1	equ	0xFE5
  3552                           fsr1l	equ	0xFE1
  3553                           indf2	equ	0xFDF
  3554                           postinc2	equ	0xFDE
  3555                           postdec2	equ	0xFDD
  3556                           plusw2	equ	0xFDB
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function _crcBufS_get *****************
  3562 ;; Defined at:
  3563 ;;		line 353 in file "FastTransfer.c"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3566 ;;		 -> crc_buffer(17), 
  3567 ;;  time            1   28[COMRAM] unsigned char 
  3568 ;;  space           1   29[COMRAM] unsigned char 
  3569 ;; Auto vars:     Size  Location     Type
  3570 ;;  wantedTime      2    0[BANK0 ] int 
  3571 ;; Return value:  Size  Location     Type
  3572 ;;                  1    wreg      unsigned char 
  3573 ;; Registers used:
  3574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3575 ;; Tracked objects:
  3576 ;;		On entry : 0/0
  3577 ;;		On exit  : 0/0
  3578 ;;		Unchanged: 0/0
  3579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3580 ;;      Params:         4       0       0       0       0       0       0
  3581 ;;      Locals:         0       2       0       0       0       0       0
  3582 ;;      Temps:          6       0       0       0       0       0       0
  3583 ;;      Totals:        10       2       0       0       0       0       0
  3584 ;;Total ram usage:       12 bytes
  3585 ;; Hardware stack levels used:    1
  3586 ;; Hardware stack levels required when called:    4
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_CRCcheck
  3591 ;;		_AKNAK
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text14
  3596  0005E2                     __ptext14:
  3597                           	opt stack 0
  3598  0005E2                     _crcBufS_get:
  3599                           	opt stack 23
  3600                           
  3601                           ;FastTransfer.c: 354: if (time >= 5) {
  3602                           
  3603                           ;incstack = 0
  3604  0005E2  0E04               	movlw	4
  3605  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  3606  0005E6  D002               	goto	l3244
  3607                           
  3608                           ;FastTransfer.c: 355: time = 5 - 1;
  3609  0005E8  0E04               	movlw	4
  3610  0005EA  6E1D               	movwf	crcBufS_get@time,c
  3611  0005EC                     l3244:
  3612                           
  3613                           ;FastTransfer.c: 356: }
  3614                           ;FastTransfer.c: 357: if (space >= 3) {
  3615  0005EC  0E02               	movlw	2
  3616  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  3617  0005F0  D002               	goto	l3248
  3618                           
  3619                           ;FastTransfer.c: 358: space = 3 - 1;
  3620  0005F2  0E02               	movlw	2
  3621  0005F4  6E1E               	movwf	crcBufS_get@space,c
  3622  0005F6                     l3248:
  3623                           
  3624                           ;FastTransfer.c: 359: }
  3625                           ;FastTransfer.c: 360: time = time + 1;
  3626  0005F6  281D               	incf	crcBufS_get@time,w,c
  3627  0005F8  6E1D               	movwf	crcBufS_get@time,c
  3628                           
  3629                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3630  0005FA  501D               	movf	crcBufS_get@time,w,c
  3631  0005FC  0D03               	mullw	3
  3632  0005FE  CFF3 F0D0          	movff	prodl,crcBufS_get@wantedTime
  3633  000602  CFF4 F0D1          	movff	prodh,crcBufS_get@wantedTime+1
  3634                           
  3635                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3636  000606  EE20 F00F          	lfsr	2,15
  3637  00060A  501B               	movf	crcBufS_get@_this,w,c
  3638  00060C  26D9               	addwf	fsr2l,f,c
  3639  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  3640  000610  22DA               	addwfc	fsr2h,f,c
  3641  000612  0100               	movlb	0	; () banked
  3642  000614  51D0               	movf	crcBufS_get@wantedTime& (0+255),w,b
  3643  000616  5CDE               	subwf	postinc2,w,c
  3644  000618  50DE               	movf	postinc2,w,c
  3645  00061A  0A80               	xorlw	128
  3646  00061C  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3647  00061E  0100               	movlb	0	; () banked
  3648  000620  51D1               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  3649  000622  0A80               	xorlw	128
  3650  000624  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3651  000626  B0D8               	btfsc	status,0,c
  3652  000628  D030               	goto	l3260
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3656  00062A  EE20 F00F          	lfsr	2,15
  3657  00062E  501B               	movf	crcBufS_get@_this,w,c
  3658  000630  26D9               	addwf	fsr2l,f,c
  3659  000632  501C               	movf	crcBufS_get@_this+1,w,c
  3660  000634  22DA               	addwfc	fsr2h,f,c
  3661  000636  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3662  00063A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3663  00063E  1E1F               	comf	??_crcBufS_get,f,c
  3664  000640  1E20               	comf	??_crcBufS_get+1,f,c
  3665  000642  4A1F               	infsnz	??_crcBufS_get,f,c
  3666  000644  2A20               	incf	??_crcBufS_get+1,f,c
  3667  000646  0100               	movlb	0	; () banked
  3668  000648  51D0               	movf	crcBufS_get@wantedTime& (0+255),w,b
  3669  00064A  261F               	addwf	??_crcBufS_get,f,c
  3670  00064C  0100               	movlb	0	; () banked
  3671  00064E  51D1               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  3672  000650  2220               	addwfc	??_crcBufS_get+1,f,c
  3673  000652  1E1F               	comf	??_crcBufS_get,f,c
  3674  000654  1E20               	comf	??_crcBufS_get+1,f,c
  3675  000656  4A1F               	infsnz	??_crcBufS_get,f,c
  3676  000658  2A20               	incf	??_crcBufS_get+1,f,c
  3677  00065A  0E0F               	movlw	15
  3678  00065C  241F               	addwf	??_crcBufS_get,w,c
  3679  00065E  0100               	movlb	0	; () banked
  3680  000660  6FD0               	movwf	crcBufS_get@wantedTime& (0+255),b
  3681  000662  0E00               	movlw	0
  3682  000664  2020               	addwfc	??_crcBufS_get+1,w,c
  3683  000666  0100               	movlb	0	; () banked
  3684  000668  6FD1               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  3685                           
  3686                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3687  00066A  501E               	movf	crcBufS_get@space,w,c
  3688  00066C  0100               	movlb	0	; () banked
  3689  00066E  25D0               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  3690  000670  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3691  000672  0E00               	movlw	0
  3692  000674  0100               	movlb	0	; () banked
  3693  000676  21D1               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  3694  000678  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3695  00067A  501F               	movf	??_crcBufS_get,w,c
  3696  00067C  241B               	addwf	crcBufS_get@_this,w,c
  3697  00067E  6ED9               	movwf	fsr2l,c
  3698  000680  5020               	movf	??_crcBufS_get+1,w,c
  3699  000682  201C               	addwfc	crcBufS_get@_this+1,w,c
  3700  000684  6EDA               	movwf	fsr2h,c
  3701  000686  50DF               	movf	indf2,w,c
  3702                           
  3703                           ; BSR set to: 0
  3704                           ;FastTransfer.c: 365: } else {
  3705                           
  3706                           ; BSR set to: 0
  3707  000688  0012               	return	
  3708  00068A                     l3260:
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3712  00068A  EE20 F00F          	lfsr	2,15
  3713  00068E  501B               	movf	crcBufS_get@_this,w,c
  3714  000690  26D9               	addwf	fsr2l,f,c
  3715  000692  501C               	movf	crcBufS_get@_this+1,w,c
  3716  000694  22DA               	addwfc	fsr2h,f,c
  3717  000696  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3718  00069A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3719  00069E  C0D0  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3720  0006A2  C0D1  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3721  0006A6  1E21               	comf	??_crcBufS_get+2,f,c
  3722  0006A8  1E22               	comf	??_crcBufS_get+3,f,c
  3723  0006AA  4A21               	infsnz	??_crcBufS_get+2,f,c
  3724  0006AC  2A22               	incf	??_crcBufS_get+3,f,c
  3725  0006AE  501E               	movf	crcBufS_get@space,w,c
  3726  0006B0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3727  0006B2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3728  0006B4  5021               	movf	??_crcBufS_get+2,w,c
  3729  0006B6  2623               	addwf	??_crcBufS_get+4,f,c
  3730  0006B8  5022               	movf	??_crcBufS_get+3,w,c
  3731  0006BA  2224               	addwfc	??_crcBufS_get+5,f,c
  3732  0006BC  501F               	movf	??_crcBufS_get,w,c
  3733  0006BE  2623               	addwf	??_crcBufS_get+4,f,c
  3734  0006C0  5020               	movf	??_crcBufS_get+1,w,c
  3735  0006C2  2224               	addwfc	??_crcBufS_get+5,f,c
  3736  0006C4  5023               	movf	??_crcBufS_get+4,w,c
  3737  0006C6  241B               	addwf	crcBufS_get@_this,w,c
  3738  0006C8  6ED9               	movwf	fsr2l,c
  3739  0006CA  5024               	movf	??_crcBufS_get+5,w,c
  3740  0006CC  201C               	addwfc	crcBufS_get@_this+1,w,c
  3741  0006CE  6EDA               	movwf	fsr2h,c
  3742  0006D0  50DF               	movf	indf2,w,c
  3743                           
  3744                           ; BSR set to: 0
  3745  0006D2  0012               	return	
  3746  0006D4                     __end_of_crcBufS_get:
  3747                           	opt stack 0
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           prodh	equ	0xFF4
  3753                           prodl	equ	0xFF3
  3754                           intcon	equ	0xFF2
  3755                           postinc0	equ	0xFEE
  3756                           wreg	equ	0xFE8
  3757                           postdec1	equ	0xFE5
  3758                           fsr1l	equ	0xFE1
  3759                           indf2	equ	0xFDF
  3760                           postinc2	equ	0xFDE
  3761                           postdec2	equ	0xFDD
  3762                           plusw2	equ	0xFDB
  3763                           fsr2h	equ	0xFDA
  3764                           fsr2l	equ	0xFD9
  3765                           status	equ	0xFD8
  3766                           
  3767 ;; *************** function _CRC8 *****************
  3768 ;; Defined at:
  3769 ;;		line 34 in file "FastTransfer.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3772 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1846(3), receiveData@holder(3), rx_buffer(200), 
  3773 ;;		 -> ring_buffer(206), NULL(0), 
  3774 ;;  len             1   28[COMRAM] unsigned char 
  3775 ;; Auto vars:     Size  Location     Type
  3776 ;;  sum             1   29[COMRAM] unsigned char 
  3777 ;;  tempI           1   31[COMRAM] unsigned char 
  3778 ;;  extract         1   30[COMRAM] unsigned char 
  3779 ;;  crc             1   32[COMRAM] unsigned char 
  3780 ;; Return value:  Size  Location     Type
  3781 ;;                  1    wreg      unsigned char 
  3782 ;; Registers used:
  3783 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3784 ;; Tracked objects:
  3785 ;;		On entry : 0/0
  3786 ;;		On exit  : 0/0
  3787 ;;		Unchanged: 0/0
  3788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3789 ;;      Params:         3       0       0       0       0       0       0
  3790 ;;      Locals:         4       0       0       0       0       0       0
  3791 ;;      Temps:          0       0       0       0       0       0       0
  3792 ;;      Totals:         7       0       0       0       0       0       0
  3793 ;;Total ram usage:        7 bytes
  3794 ;; Hardware stack levels used:    1
  3795 ;; Hardware stack levels required when called:    4
  3796 ;; This function calls:
  3797 ;;		Nothing
  3798 ;; This function is called by:
  3799 ;;		_sendData
  3800 ;;		_receiveData
  3801 ;;		_CRCcheck
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           	psect	text15
  3806  000F9E                     __ptext15:
  3807                           	opt stack 0
  3808  000F9E                     _CRC8:
  3809                           	opt stack 23
  3810                           
  3811                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;incstack = 0
  3815  000F9E  0E00               	movlw	0
  3816  000FA0  6E21               	movwf	CRC8@crc,c
  3817                           
  3818                           ;FastTransfer.c: 36: while (len--) {
  3819  000FA2  D01C               	goto	l3206
  3820  000FA4                     l3190:
  3821                           
  3822                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3823  000FA4  C01B  FFD9         	movff	CRC8@data,fsr2l
  3824  000FA8  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3825  000FAC  50DF               	movf	indf2,w,c
  3826  000FAE  6E1F               	movwf	CRC8@extract,c
  3827  000FB0  4A1B               	infsnz	CRC8@data,f,c
  3828  000FB2  2A1C               	incf	CRC8@data+1,f,c
  3829                           
  3830                           ;FastTransfer.c: 38: unsigned char tempI;
  3831                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3832  000FB4  0E08               	movlw	8
  3833  000FB6  6E20               	movwf	CRC8@tempI,c
  3834  000FB8  D00E               	goto	l3204
  3835  000FBA                     l3196:
  3836                           
  3837                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3838  000FBA  5021               	movf	CRC8@crc,w,c
  3839  000FBC  181F               	xorwf	CRC8@extract,w,c
  3840  000FBE  0B01               	andlw	1
  3841  000FC0  6E1E               	movwf	CRC8@sum,c
  3842                           
  3843                           ;FastTransfer.c: 41: crc >>= 1;
  3844  000FC2  90D8               	bcf	status,0,c
  3845  000FC4  3221               	rrcf	CRC8@crc,f,c
  3846                           
  3847                           ;FastTransfer.c: 42: if (sum) {
  3848  000FC6  501E               	movf	CRC8@sum,w,c
  3849  000FC8  B4D8               	btfsc	status,2,c
  3850  000FCA  D002               	goto	l421
  3851                           
  3852                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3853  000FCC  0E8C               	movlw	140
  3854  000FCE  1A21               	xorwf	CRC8@crc,f,c
  3855  000FD0                     l421:
  3856                           
  3857                           ;FastTransfer.c: 44: }
  3858                           ;FastTransfer.c: 45: extract >>= 1;
  3859  000FD0  90D8               	bcf	status,0,c
  3860  000FD2  321F               	rrcf	CRC8@extract,f,c
  3861  000FD4  0620               	decf	CRC8@tempI,f,c
  3862  000FD6                     l3204:
  3863  000FD6  5020               	movf	CRC8@tempI,w,c
  3864  000FD8  A4D8               	btfss	status,2,c
  3865  000FDA  D7EF               	goto	l3196
  3866  000FDC                     l3206:
  3867  000FDC  061D               	decf	CRC8@len,f,c
  3868  000FDE  281D               	incf	CRC8@len,w,c
  3869  000FE0  A4D8               	btfss	status,2,c
  3870  000FE2  D7E0               	goto	l3190
  3871                           
  3872                           ;FastTransfer.c: 46: }
  3873                           ;FastTransfer.c: 47: }
  3874                           ;FastTransfer.c: 48: return crc;
  3875  000FE4  5021               	movf	CRC8@crc,w,c
  3876  000FE6  0012               	return	
  3877  000FE8                     __end_of_CRC8:
  3878                           	opt stack 0
  3879                           tblptru	equ	0xFF8
  3880                           tblptrh	equ	0xFF7
  3881                           tblptrl	equ	0xFF6
  3882                           tablat	equ	0xFF5
  3883                           prodh	equ	0xFF4
  3884                           prodl	equ	0xFF3
  3885                           intcon	equ	0xFF2
  3886                           postinc0	equ	0xFEE
  3887                           wreg	equ	0xFE8
  3888                           postdec1	equ	0xFE5
  3889                           fsr1l	equ	0xFE1
  3890                           indf2	equ	0xFDF
  3891                           postinc2	equ	0xFDE
  3892                           postdec2	equ	0xFDD
  3893                           plusw2	equ	0xFDB
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _SetCharger *****************
  3899 ;; Defined at:
  3900 ;;		line 64 in file "Functions.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  mode            1    wreg     unsigned char 
  3903 ;;  Current         1   32[COMRAM] unsigned char 
  3904 ;;  Voltage         1   33[COMRAM] unsigned char 
  3905 ;; Auto vars:     Size  Location     Type
  3906 ;;  mode            1   34[COMRAM] unsigned char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;		None               void
  3909 ;; Registers used:
  3910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3916 ;;      Params:         2       0       0       0       0       0       0
  3917 ;;      Locals:         1       0       0       0       0       0       0
  3918 ;;      Temps:          0       0       0       0       0       0       0
  3919 ;;      Totals:         3       0       0       0       0       0       0
  3920 ;;Total ram usage:        3 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    7
  3923 ;; This function calls:
  3924 ;;		_SetMux
  3925 ;;		_printf
  3926 ;; This function is called by:
  3927 ;;		_updateComms
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text16
  3932  000E3E                     __ptext16:
  3933                           	opt stack 0
  3934  000E3E                     _SetCharger:
  3935                           	opt stack 22
  3936                           
  3937                           ;incstack = 0
  3938                           ;SetCharger@mode stored from wreg
  3939  000E3E  6E23               	movwf	SetCharger@mode,c
  3940                           
  3941                           ;Functions.c: 65: if(mode == 1){
  3942  000E40  0423               	decf	SetCharger@mode,w,c
  3943  000E42  A4D8               	btfss	status,2,c
  3944  000E44  D016               	goto	l3558
  3945                           
  3946                           ;Functions.c: 67: SetMux(1);
  3947  000E46  0E01               	movlw	1
  3948  000E48  EC11  F008         	call	_SetMux
  3949                           
  3950                           ;Functions.c: 70: ChargerData[2] = 001;
  3951  000E4C  0E01               	movlw	1
  3952  000E4E  0100               	movlb	0	; () banked
  3953  000E50  6FED               	movwf	(_ChargerData+2)& (0+255),b
  3954                           
  3955                           ; BSR set to: 0
  3956                           ;Functions.c: 71: ChargerData[4] = 000;
  3957  000E52  0E00               	movlw	0
  3958  000E54  0100               	movlb	0	; () banked
  3959  000E56  6FEF               	movwf	(_ChargerData+4)& (0+255),b
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;Functions.c: 72: ChargerData[6] = 001;
  3963  000E58  0E01               	movlw	1
  3964  000E5A  0100               	movlb	0	; () banked
  3965  000E5C  6FF1               	movwf	(_ChargerData+6)& (0+255),b
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;Functions.c: 74: printf("%s",ChargerData);
  3969  000E5E  0EFB               	movlw	low STR_1
  3970  000E60  6E1D               	movwf	printf@f,c
  3971  000E62  0E7F               	movlw	high STR_1
  3972  000E64  6E1E               	movwf	printf@f+1,c
  3973  000E66  0EEB               	movlw	low _ChargerData
  3974  000E68  6E1F               	movwf	?_printf+2,c
  3975  000E6A  0E00               	movlw	high _ChargerData
  3976  000E6C  6E20               	movwf	?_printf+3,c
  3977  000E6E  EC6A  F003         	call	_printf	;wreg free
  3978  000E72                     l3558:
  3979                           
  3980                           ;Functions.c: 75: }
  3981                           ;Functions.c: 76: if(mode == 2){
  3982  000E72  0E02               	movlw	2
  3983  000E74  1823               	xorwf	SetCharger@mode,w,c
  3984  000E76  A4D8               	btfss	status,2,c
  3985  000E78  0012               	return	
  3986                           
  3987                           ;Functions.c: 78: SetMux(1);
  3988  000E7A  0E01               	movlw	1
  3989  000E7C  EC11  F008         	call	_SetMux
  3990                           
  3991                           ;Functions.c: 80: ChargerData[2] = Current;
  3992  000E80  C021  F0ED         	movff	SetCharger@Current,_ChargerData+2
  3993                           
  3994                           ;Functions.c: 81: ChargerData[4] = Voltage;
  3995  000E84  C022  F0EF         	movff	SetCharger@Voltage,_ChargerData+4
  3996                           
  3997                           ;Functions.c: 83: ChargerData[6] = (Current + Voltage)%1,000;
  3998  000E88  0E00               	movlw	0
  3999  000E8A  0100               	movlb	0	; () banked
  4000  000E8C  6FF1               	movwf	(_ChargerData+6)& (0+255),b
  4001                           
  4002                           ; BSR set to: 0
  4003                           ;Functions.c: 85: printf("%s",ChargerData);
  4004  000E8E  0EFB               	movlw	low STR_1
  4005  000E90  6E1D               	movwf	printf@f,c
  4006  000E92  0E7F               	movlw	high STR_1
  4007  000E94  6E1E               	movwf	printf@f+1,c
  4008  000E96  0EEB               	movlw	low _ChargerData
  4009  000E98  6E1F               	movwf	?_printf+2,c
  4010  000E9A  0E00               	movlw	high _ChargerData
  4011  000E9C  6E20               	movwf	?_printf+3,c
  4012  000E9E  EC6A  F003         	call	_printf	;wreg free
  4013  000EA2  0012               	return	
  4014  000EA4                     __end_of_SetCharger:
  4015                           	opt stack 0
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           prodh	equ	0xFF4
  4021                           prodl	equ	0xFF3
  4022                           intcon	equ	0xFF2
  4023                           postinc0	equ	0xFEE
  4024                           wreg	equ	0xFE8
  4025                           postdec1	equ	0xFE5
  4026                           fsr1l	equ	0xFE1
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           plusw2	equ	0xFDB
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _printf *****************
  4036 ;; Defined at:
  4037 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  f               2   28[COMRAM] PTR const unsigned char 
  4040 ;;		 -> STR_2(3), STR_1(3), 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  tmpval          4    0        struct .
  4043 ;;  cp              2    4[BANK0 ] PTR const unsigned char 
  4044 ;;		 -> STR_5(7), ChargerData(9), 
  4045 ;;  ap              2    1[BANK0 ] PTR void [1]
  4046 ;;		 -> ?_printf(2), 
  4047 ;;  len             2    0        unsigned int 
  4048 ;;  val             2    0        unsigned int 
  4049 ;;  c               1    3[BANK0 ] char 
  4050 ;;  flag            1    0[BANK0 ] unsigned char 
  4051 ;;  prec            1    0        char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  2   28[COMRAM] int 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4061 ;;      Params:         4       0       0       0       0       0       0
  4062 ;;      Locals:         0       6       0       0       0       0       0
  4063 ;;      Temps:          0       0       0       0       0       0       0
  4064 ;;      Totals:         4       6       0       0       0       0       0
  4065 ;;Total ram usage:       10 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:    6
  4068 ;; This function calls:
  4069 ;;		_putch
  4070 ;; This function is called by:
  4071 ;;		_SetCharger
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text17
  4076  0006D4                     __ptext17:
  4077                           	opt stack 0
  4078  0006D4                     _printf:
  4079                           	opt stack 22
  4080                           
  4081                           ;doprnt.c: 466: va_list ap;
  4082                           ;doprnt.c: 499: signed char c;
  4083                           ;doprnt.c: 506: signed char prec;
  4084                           ;doprnt.c: 508: unsigned char flag;
  4085                           ;doprnt.c: 523: union {
  4086                           ;doprnt.c: 524: unsigned long vd;
  4087                           ;doprnt.c: 525: double integ;
  4088                           ;doprnt.c: 526: } tmpval;
  4089                           ;doprnt.c: 528: unsigned int val;
  4090                           ;doprnt.c: 529: unsigned len;
  4091                           ;doprnt.c: 530: const char * cp;
  4092                           ;doprnt.c: 533: *ap = __va_start();
  4093                           
  4094                           ;incstack = 0
  4095  0006D4  0E1F               	movlw	low (?_printf+2)
  4096  0006D6  0100               	movlb	0	; () banked
  4097  0006D8  6FD1               	movwf	printf@ap& (0+255),b
  4098  0006DA  0E00               	movlw	high (?_printf+2)
  4099  0006DC  0100               	movlb	0	; () banked
  4100  0006DE  6FD2               	movwf	(printf@ap+1)& (0+255),b
  4101                           
  4102                           ;doprnt.c: 536: while(c = *f++) {
  4103  0006E0  D062               	goto	l3370
  4104  0006E2                     l3346:
  4105                           
  4106                           ; BSR set to: 0
  4107                           ;doprnt.c: 538: if(c != '%')
  4108  0006E2  0E25               	movlw	37
  4109  0006E4  0100               	movlb	0	; () banked
  4110  0006E6  19D3               	xorwf	printf@c& (0+255),w,b
  4111  0006E8  B4D8               	btfsc	status,2,c
  4112  0006EA  D005               	goto	l3350
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;doprnt.c: 540: {
  4116                           ;doprnt.c: 541: (putch(c) );
  4117  0006EC  0100               	movlb	0	; () banked
  4118  0006EE  51D3               	movf	printf@c& (0+255),w,b
  4119  0006F0  ECEF  F009         	call	_putch
  4120                           
  4121                           ;doprnt.c: 542: continue;
  4122  0006F4  D058               	goto	l3370
  4123  0006F6                     l3350:
  4124                           
  4125                           ;doprnt.c: 543: }
  4126                           ;doprnt.c: 548: flag = 0;
  4127  0006F6  0E00               	movlw	0
  4128  0006F8  0100               	movlb	0	; () banked
  4129  0006FA  6FD0               	movwf	printf@flag& (0+255),b
  4130                           
  4131                           ;doprnt.c: 635: switch(c = *f++) {
  4132  0006FC  D043               	goto	l3368
  4133  0006FE                     l3352:
  4134                           
  4135                           ; BSR set to: 0
  4136                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4137  0006FE  C0D1  FFD9         	movff	printf@ap,fsr2l
  4138  000702  C0D2  FFDA         	movff	printf@ap+1,fsr2h
  4139  000706  CFDE F0D4          	movff	postinc2,printf@cp
  4140  00070A  CFDD F0D5          	movff	postdec2,printf@cp+1
  4141                           
  4142                           ; BSR set to: 0
  4143  00070E  0E02               	movlw	2
  4144  000710  0100               	movlb	0	; () banked
  4145  000712  27D1               	addwf	printf@ap& (0+255),f,b
  4146  000714  0E00               	movlw	0
  4147  000716  23D2               	addwfc	(printf@ap+1)& (0+255),f,b
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;doprnt.c: 740: if(!cp)
  4151  000718  0100               	movlb	0	; () banked
  4152  00071A  51D4               	movf	printf@cp& (0+255),w,b
  4153  00071C  0100               	movlb	0	; () banked
  4154  00071E  11D5               	iorwf	(printf@cp+1)& (0+255),w,b
  4155  000720  A4D8               	btfss	status,2,c
  4156  000722  D01C               	goto	l3364
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;doprnt.c: 741: cp = "(null)";
  4160  000724  0EF4               	movlw	low STR_5
  4161  000726  0100               	movlb	0	; () banked
  4162  000728  6FD4               	movwf	printf@cp& (0+255),b
  4163  00072A  0E7F               	movlw	high STR_5
  4164  00072C  0100               	movlb	0	; () banked
  4165  00072E  6FD5               	movwf	(printf@cp+1)& (0+255),b
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;doprnt.c: 777: while(*cp)
  4169  000730  D015               	goto	l3364
  4170  000732                     l3360:
  4171                           
  4172                           ;doprnt.c: 778: (putch(*cp++) );
  4173  000732  C0D4  FFF6         	movff	printf@cp,tblptrl
  4174  000736  C0D5  FFF7         	movff	printf@cp+1,tblptrh
  4175  00073A  6AF8               	clrf	tblptru,c
  4176  00073C  0E05               	movlw	(high __ramtop+-1)
  4177  00073E  64F7               	cpfsgt	tblptrh,c
  4178  000740  D003               	bra	u2197
  4179  000742  0008               	tblrd		*
  4180  000744  50F5               	movf	tablat,w,c
  4181  000746  D005               	bra	u2190
  4182  000748                     u2197:
  4183  000748  CFF6 FFE9          	movff	tblptrl,fsr0l
  4184  00074C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4185  000750  50EF               	movf	indf0,w,c
  4186  000752                     u2190:
  4187  000752  ECEF  F009         	call	_putch
  4188  000756  0100               	movlb	0	; () banked
  4189  000758  4BD4               	infsnz	printf@cp& (0+255),f,b
  4190  00075A  2BD5               	incf	(printf@cp+1)& (0+255),f,b
  4191  00075C                     l3364:
  4192                           
  4193                           ; BSR set to: 0
  4194  00075C  C0D4  FFF6         	movff	printf@cp,tblptrl
  4195  000760  C0D5  FFF7         	movff	printf@cp+1,tblptrh
  4196  000764  6AF8               	clrf	tblptru,c
  4197  000766  0E05               	movlw	(high __ramtop+-1)
  4198  000768  64F7               	cpfsgt	tblptrh,c
  4199  00076A  D003               	bra	u2207
  4200  00076C  0008               	tblrd		*
  4201  00076E  50F5               	movf	tablat,w,c
  4202  000770  D005               	bra	u2200
  4203  000772                     u2207:
  4204  000772  CFF6 FFE9          	movff	tblptrl,fsr0l
  4205  000776  CFF7 FFEA          	movff	tblptrh,fsr0h
  4206  00077A  50EF               	movf	indf0,w,c
  4207  00077C                     u2200:
  4208  00077C  0900               	iorlw	0
  4209  00077E  B4D8               	btfsc	status,2,c
  4210  000780  D012               	goto	l3370
  4211  000782  D7D7               	goto	l3360
  4212  000784                     l3368:
  4213  000784  C01D  FFF6         	movff	printf@f,tblptrl
  4214  000788  C01E  FFF7         	movff	printf@f+1,tblptrh
  4215  00078C  4A1D               	infsnz	printf@f,f,c
  4216  00078E  2A1E               	incf	printf@f+1,f,c
  4217  000790                     	if	0	;tblptru may be non-zero
  4218  000790                     	endif
  4219  000790                     	if	0	;tblptru may be non-zero
  4220  000790                     	endif
  4221  000790  0008               	tblrd		*
  4222  000792  CFF5 F0D3          	movff	tablat,printf@c
  4223  000796  0100               	movlb	0	; () banked
  4224  000798  51D3               	movf	printf@c& (0+255),w,b
  4225                           
  4226                           ; Switch size 1, requested type "space"
  4227                           ; Number of cases is 2, Range of values is 0 to 115
  4228                           ; switch strategies available:
  4229                           ; Name         Instructions Cycles
  4230                           ; simple_byte            7     4 (average)
  4231                           ;	Chosen strategy is simple_byte
  4232  00079A  0A00               	xorlw	0	; case 0
  4233  00079C  B4D8               	btfsc	status,2,c
  4234  00079E  0012               	return	
  4235  0007A0  0A73               	xorlw	115	; case 115
  4236  0007A2  B4D8               	btfsc	status,2,c
  4237  0007A4  D7AC               	goto	l3352
  4238  0007A6                     l3370:
  4239  0007A6  C01D  FFF6         	movff	printf@f,tblptrl
  4240  0007AA  C01E  FFF7         	movff	printf@f+1,tblptrh
  4241  0007AE  4A1D               	infsnz	printf@f,f,c
  4242  0007B0  2A1E               	incf	printf@f+1,f,c
  4243  0007B2                     	if	0	;tblptru may be non-zero
  4244  0007B2                     	endif
  4245  0007B2                     	if	0	;tblptru may be non-zero
  4246  0007B2                     	endif
  4247  0007B2  0008               	tblrd		*
  4248  0007B4  CFF5 F0D3          	movff	tablat,printf@c
  4249  0007B8  0100               	movlb	0	; () banked
  4250  0007BA  51D3               	movf	printf@c& (0+255),w,b
  4251  0007BC  B4D8               	btfsc	status,2,c
  4252  0007BE  0012               	return	
  4253  0007C0  D790               	goto	l3346
  4254  0007C2                     __end_of_printf:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           intcon	equ	0xFF2
  4263                           indf0	equ	0xFEF
  4264                           postinc0	equ	0xFEE
  4265                           fsr0h	equ	0xFEA
  4266                           fsr0l	equ	0xFE9
  4267                           wreg	equ	0xFE8
  4268                           postdec1	equ	0xFE5
  4269                           fsr1l	equ	0xFE1
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           plusw2	equ	0xFDB
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           
  4278 ;; *************** function _putch *****************
  4279 ;; Defined at:
  4280 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  4281 ;; Parameters:    Size  Location     Type
  4282 ;;  txData          1    wreg     unsigned char 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;  txData          1   27[COMRAM] unsigned char 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;		None               void
  4287 ;; Registers used:
  4288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4294 ;;      Params:         0       0       0       0       0       0       0
  4295 ;;      Locals:         1       0       0       0       0       0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0
  4297 ;;      Totals:         1       0       0       0       0       0       0
  4298 ;;Total ram usage:        1 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    5
  4301 ;; This function calls:
  4302 ;;		_EUSART2_Write
  4303 ;; This function is called by:
  4304 ;;		_printf
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text18
  4309  0013DE                     __ptext18:
  4310                           	opt stack 0
  4311  0013DE                     _putch:
  4312                           	opt stack 22
  4313                           
  4314                           ; BSR set to: 0
  4315                           ;incstack = 0
  4316                           ;putch@txData stored from wreg
  4317  0013DE  6E1C               	movwf	putch@txData,c
  4318                           
  4319                           ;eusart2.c: 152: EUSART2_Write(txData);
  4320  0013E0  501C               	movf	putch@txData,w,c
  4321  0013E2  ECF4  F007         	call	_EUSART2_Write
  4322  0013E6  0012               	return		;funcret
  4323  0013E8                     __end_of_putch:
  4324                           	opt stack 0
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           intcon	equ	0xFF2
  4332                           indf0	equ	0xFEF
  4333                           postinc0	equ	0xFEE
  4334                           fsr0h	equ	0xFEA
  4335                           fsr0l	equ	0xFE9
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           plusw2	equ	0xFDB
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _EUSART2_Write *****************
  4348 ;; Defined at:
  4349 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  txData          1    wreg     unsigned char 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  txData          1   26[COMRAM] unsigned char 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;		None               void
  4356 ;; Registers used:
  4357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4363 ;;      Params:         0       0       0       0       0       0       0
  4364 ;;      Locals:         1       0       0       0       0       0       0
  4365 ;;      Temps:          0       0       0       0       0       0       0
  4366 ;;      Totals:         1       0       0       0       0       0       0
  4367 ;;Total ram usage:        1 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    4
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_putch
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text19
  4378  000FE8                     __ptext19:
  4379                           	opt stack 0
  4380  000FE8                     _EUSART2_Write:
  4381                           	opt stack 22
  4382                           
  4383                           ;incstack = 0
  4384                           ;EUSART2_Write@txData stored from wreg
  4385  000FE8  6E1B               	movwf	EUSART2_Write@txData,c
  4386  000FEA                     l3150:
  4387  000FEA  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  4388  000FEC  B4D8               	btfsc	status,2,c
  4389  000FEE  D7FD               	goto	l3150
  4390                           
  4391                           ;eusart2.c: 132: }
  4392                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  4393  000FF0  B8A3               	btfsc	4003,4,c	;volatile
  4394  000FF2  D003               	goto	l50
  4395                           
  4396                           ;eusart2.c: 135: TXREG2 = txData;
  4397  000FF4  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4398                           
  4399                           ;eusart2.c: 136: } else {
  4400  000FF8  D012               	goto	l3164
  4401  000FFA                     l50:
  4402                           
  4403                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  4404  000FFA  98A3               	bcf	4003,4,c	;volatile
  4405                           
  4406                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  4407  000FFC  5038               	movf	_eusart2TxHead,w,c
  4408  000FFE  0D01               	mullw	1
  4409  001000  0E9B               	movlw	low _eusart2TxBuffer
  4410  001002  24F3               	addwf	prodl,w,c
  4411  001004  6ED9               	movwf	fsr2l,c
  4412  001006  0E00               	movlw	high _eusart2TxBuffer
  4413  001008  20F4               	addwfc	prodh,w,c
  4414  00100A  6EDA               	movwf	fsr2h,c
  4415  00100C  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  4416  001010  2A38               	incf	_eusart2TxHead,f,c
  4417                           
  4418                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  4419  001012  0E07               	movlw	7
  4420  001014  6438               	cpfsgt	_eusart2TxHead,c
  4421  001016  D002               	goto	l3162
  4422                           
  4423                           ;eusart2.c: 140: eusart2TxHead = 0;
  4424  001018  0E00               	movlw	0
  4425  00101A  6E38               	movwf	_eusart2TxHead,c
  4426  00101C                     l3162:
  4427                           
  4428                           ;eusart2.c: 141: }
  4429                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  4430  00101C  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4431  00101E                     l3164:
  4432                           
  4433                           ;eusart2.c: 143: }
  4434                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  4435  00101E  88A3               	bsf	4003,4,c	;volatile
  4436  001020  0012               	return		;funcret
  4437  001022                     __end_of_EUSART2_Write:
  4438                           	opt stack 0
  4439                           tblptru	equ	0xFF8
  4440                           tblptrh	equ	0xFF7
  4441                           tblptrl	equ	0xFF6
  4442                           tablat	equ	0xFF5
  4443                           prodh	equ	0xFF4
  4444                           prodl	equ	0xFF3
  4445                           intcon	equ	0xFF2
  4446                           indf0	equ	0xFEF
  4447                           postinc0	equ	0xFEE
  4448                           fsr0h	equ	0xFEA
  4449                           fsr0l	equ	0xFE9
  4450                           wreg	equ	0xFE8
  4451                           postdec1	equ	0xFE5
  4452                           fsr1l	equ	0xFE1
  4453                           indf2	equ	0xFDF
  4454                           postinc2	equ	0xFDE
  4455                           postdec2	equ	0xFDD
  4456                           plusw2	equ	0xFDB
  4457                           fsr2h	equ	0xFDA
  4458                           fsr2l	equ	0xFD9
  4459                           status	equ	0xFD8
  4460                           
  4461 ;; *************** function _SetMux *****************
  4462 ;; Defined at:
  4463 ;;		line 96 in file "Functions.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  channel         1    wreg     unsigned char 
  4466 ;; Auto vars:     Size  Location     Type
  4467 ;;  channel         1   26[COMRAM] unsigned char 
  4468 ;; Return value:  Size  Location     Type
  4469 ;;		None               void
  4470 ;; Registers used:
  4471 ;;		wreg, status,2, status,0
  4472 ;; Tracked objects:
  4473 ;;		On entry : 0/0
  4474 ;;		On exit  : 0/0
  4475 ;;		Unchanged: 0/0
  4476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4477 ;;      Params:         0       0       0       0       0       0       0
  4478 ;;      Locals:         1       0       0       0       0       0       0
  4479 ;;      Temps:          0       0       0       0       0       0       0
  4480 ;;      Totals:         1       0       0       0       0       0       0
  4481 ;;Total ram usage:        1 bytes
  4482 ;; Hardware stack levels used:    1
  4483 ;; Hardware stack levels required when called:    4
  4484 ;; This function calls:
  4485 ;;		Nothing
  4486 ;; This function is called by:
  4487 ;;		_SetCharger
  4488 ;; This function uses a non-reentrant model
  4489 ;;
  4490                           
  4491                           	psect	text20
  4492  001022                     __ptext20:
  4493                           	opt stack 0
  4494  001022                     _SetMux:
  4495                           	opt stack 24
  4496                           
  4497                           ;incstack = 0
  4498                           ;SetMux@channel stored from wreg
  4499  001022  6E1B               	movwf	SetMux@channel,c
  4500                           
  4501                           ;Functions.c: 97: switch (channel){
  4502  001024  D00C               	goto	l2536
  4503  001026                     l692:
  4504  001026  908A               	bcf	3978,0,c	;volatile
  4505                           
  4506                           ;Functions.c: 100: do { LATB1 = 0; } while(0);
  4507  001028  928A               	bcf	3978,1,c	;volatile
  4508                           
  4509                           ;Functions.c: 101: break;
  4510  00102A  0012               	return	
  4511  00102C                     l698:
  4512  00102C  808A               	bsf	3978,0,c	;volatile
  4513                           
  4514                           ;Functions.c: 104: do { LATB1 = 0; } while(0);
  4515  00102E  928A               	bcf	3978,1,c	;volatile
  4516                           
  4517                           ;Functions.c: 105: break;
  4518  001030  0012               	return	
  4519  001032                     l703:
  4520  001032  908A               	bcf	3978,0,c	;volatile
  4521                           
  4522                           ;Functions.c: 108: do { LATB1 = 1; } while(0);
  4523  001034  828A               	bsf	3978,1,c	;volatile
  4524                           
  4525                           ;Functions.c: 109: break;
  4526  001036  0012               	return	
  4527  001038                     l708:
  4528  001038  808A               	bsf	3978,0,c	;volatile
  4529                           
  4530                           ;Functions.c: 112: do { LATB1 = 1; } while(0);
  4531  00103A  828A               	bsf	3978,1,c	;volatile
  4532                           
  4533                           ;Functions.c: 117: }
  4534                           
  4535                           ;Functions.c: 116: break;
  4536                           
  4537                           ;Functions.c: 114: default:
  4538                           
  4539                           ;Functions.c: 113: break;
  4540  00103C  0012               	return	
  4541  00103E                     l2536:
  4542  00103E  501B               	movf	SetMux@channel,w,c
  4543                           
  4544                           ; Switch size 1, requested type "space"
  4545                           ; Number of cases is 4, Range of values is 1 to 4
  4546                           ; switch strategies available:
  4547                           ; Name         Instructions Cycles
  4548                           ; simple_byte           13     7 (average)
  4549                           ;	Chosen strategy is simple_byte
  4550  001040  0A01               	xorlw	1	; case 1
  4551  001042  B4D8               	btfsc	status,2,c
  4552  001044  D7F0               	goto	l692
  4553  001046  0A03               	xorlw	3	; case 2
  4554  001048  B4D8               	btfsc	status,2,c
  4555  00104A  D7F0               	goto	l698
  4556  00104C  0A01               	xorlw	1	; case 3
  4557  00104E  B4D8               	btfsc	status,2,c
  4558  001050  D7F0               	goto	l703
  4559  001052  0A07               	xorlw	7	; case 4
  4560  001054  A4D8               	btfss	status,2,c
  4561  001056  0012               	return	
  4562  001058  D7EF               	goto	l708
  4563  00105A                     __end_of_SetMux:
  4564                           	opt stack 0
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           indf0	equ	0xFEF
  4573                           postinc0	equ	0xFEE
  4574                           fsr0h	equ	0xFEA
  4575                           fsr0l	equ	0xFE9
  4576                           wreg	equ	0xFE8
  4577                           postdec1	equ	0xFE5
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           postinc2	equ	0xFDE
  4581                           postdec2	equ	0xFDD
  4582                           plusw2	equ	0xFDB
  4583                           fsr2h	equ	0xFDA
  4584                           fsr2l	equ	0xFD9
  4585                           status	equ	0xFD8
  4586                           
  4587 ;; *************** function _Precharge *****************
  4588 ;; Defined at:
  4589 ;;		line 29 in file "Functions.c"
  4590 ;; Parameters:    Size  Location     Type
  4591 ;;  OnOff           1    wreg     unsigned char 
  4592 ;; Auto vars:     Size  Location     Type
  4593 ;;  OnOff           1    0[BANK0 ] unsigned char 
  4594 ;;  i               2    3[BANK0 ] int 
  4595 ;;  i               2    1[BANK0 ] int 
  4596 ;; Return value:  Size  Location     Type
  4597 ;;		None               void
  4598 ;; Registers used:
  4599 ;;		wreg, status,2, status,0, cstack
  4600 ;; Tracked objects:
  4601 ;;		On entry : 0/0
  4602 ;;		On exit  : 0/0
  4603 ;;		Unchanged: 0/0
  4604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4605 ;;      Params:         0       0       0       0       0       0       0
  4606 ;;      Locals:         0       5       0       0       0       0       0
  4607 ;;      Temps:          0       0       0       0       0       0       0
  4608 ;;      Totals:         0       5       0       0       0       0       0
  4609 ;;Total ram usage:        5 bytes
  4610 ;; Hardware stack levels used:    1
  4611 ;; Hardware stack levels required when called:    5
  4612 ;; This function calls:
  4613 ;;		_Delay
  4614 ;; This function is called by:
  4615 ;;		_updateComms
  4616 ;; This function uses a non-reentrant model
  4617 ;;
  4618                           
  4619                           	psect	text21
  4620  000970                     __ptext21:
  4621                           	opt stack 0
  4622  000970                     _Precharge:
  4623                           	opt stack 24
  4624                           
  4625                           ;incstack = 0
  4626                           ;Precharge@OnOff stored from wreg
  4627  000970  0100               	movlb	0	; () banked
  4628  000972  6FD0               	movwf	Precharge@OnOff& (0+255),b
  4629                           
  4630                           ;Functions.c: 30: if(OnOff){
  4631  000974  0100               	movlb	0	; () banked
  4632  000976  51D0               	movf	Precharge@OnOff& (0+255),w,b
  4633  000978  0100               	movlb	0	; () banked
  4634  00097A  B4D8               	btfsc	status,2,c
  4635  00097C  D026               	goto	l670
  4636                           
  4637                           ; BSR set to: 0
  4638                           
  4639                           ;Functions.c: 31: do { LATC1 = 1; } while(0);
  4640  00097E  828B               	bsf	3979,1,c	;volatile
  4641                           
  4642                           ; BSR set to: 0
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;Functions.c: 32: do { LATB3 = 1; } while(0);
  4646  000980  868A               	bsf	3978,3,c	;volatile
  4647                           
  4648                           ; BSR set to: 0
  4649                           ;Functions.c: 33: for(int i = 0;i<5;i++){
  4650                           
  4651                           ; BSR set to: 0
  4652  000982  0E00               	movlw	0
  4653  000984  0100               	movlb	0	; () banked
  4654  000986  6FD2               	movwf	(Precharge@i+1)& (0+255),b
  4655  000988  0E00               	movlw	0
  4656  00098A  6FD1               	movwf	Precharge@i& (0+255),b
  4657  00098C                     l3520:
  4658                           
  4659                           ; BSR set to: 0
  4660  00098C  0100               	movlb	0	; () banked
  4661  00098E  BFD2               	btfsc	(Precharge@i+1)& (0+255),7,b
  4662  000990  D008               	goto	l3524
  4663  000992  0100               	movlb	0	; () banked
  4664  000994  51D2               	movf	(Precharge@i+1)& (0+255),w,b
  4665  000996  E113               	bnz	l663
  4666  000998  0E05               	movlw	5
  4667  00099A  0100               	movlb	0	; () banked
  4668  00099C  5DD1               	subwf	Precharge@i& (0+255),w,b
  4669  00099E  B0D8               	btfsc	status,0,c
  4670  0009A0  D00E               	goto	l663
  4671  0009A2                     l3524:
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;Functions.c: 34: Delay(1000);
  4675  0009A2  0EE8               	movlw	232
  4676  0009A4  6E1B               	movwf	Delay@wait,c
  4677  0009A6  0E03               	movlw	3
  4678  0009A8  6E1C               	movwf	Delay@wait+1,c
  4679  0009AA  0E00               	movlw	0
  4680  0009AC  6E1D               	movwf	Delay@wait+2,c
  4681  0009AE  0E00               	movlw	0
  4682  0009B0  6E1E               	movwf	Delay@wait+3,c
  4683  0009B2  ECA9  F007         	call	_Delay	;wreg free
  4684  0009B6  0100               	movlb	0	; () banked
  4685  0009B8  4BD1               	infsnz	Precharge@i& (0+255),f,b
  4686  0009BA  2BD2               	incf	(Precharge@i+1)& (0+255),f,b
  4687  0009BC  D7E7               	goto	l3520
  4688  0009BE                     l663:
  4689                           
  4690                           ; BSR set to: 0
  4691  0009BE  888A               	bsf	3978,4,c	;volatile
  4692                           
  4693                           ; BSR set to: 0
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;Functions.c: 37: do { LATC0 = 1; } while(0);
  4697  0009C0  808B               	bsf	3979,0,c	;volatile
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;Functions.c: 38: do { LATB5 = 1; } while(0);
  4703  0009C2  8A8A               	bsf	3978,5,c	;volatile
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;Functions.c: 39: PowerOn = 0;
  4707                           
  4708                           ; BSR set to: 0
  4709  0009C4  0E00               	movlw	0
  4710  0009C6  6E33               	movwf	_PowerOn,c
  4711                           
  4712                           ;Functions.c: 40: }
  4713  0009C8  0012               	return	
  4714  0009CA                     l670:
  4715                           
  4716                           ; BSR set to: 0
  4717  0009CA  988A               	bcf	3978,4,c	;volatile
  4718                           
  4719                           ; BSR set to: 0
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;Functions.c: 44: do { LATB3 = 0; } while(0);
  4723  0009CC  968A               	bcf	3978,3,c	;volatile
  4724                           
  4725                           ; BSR set to: 0
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;Functions.c: 45: do { LATC0 = 0; } while(0);
  4729  0009CE  908B               	bcf	3979,0,c	;volatile
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;Functions.c: 46: for(int i = 0;i<5;i++){
  4733                           
  4734                           ; BSR set to: 0
  4735  0009D0  0E00               	movlw	0
  4736  0009D2  0100               	movlb	0	; () banked
  4737  0009D4  6FD4               	movwf	(Precharge@i_2130+1)& (0+255),b
  4738  0009D6  0E00               	movlw	0
  4739  0009D8  6FD3               	movwf	Precharge@i_2130& (0+255),b
  4740  0009DA                     l3534:
  4741                           
  4742                           ; BSR set to: 0
  4743  0009DA  0100               	movlb	0	; () banked
  4744  0009DC  BFD4               	btfsc	(Precharge@i_2130+1)& (0+255),7,b
  4745  0009DE  D008               	goto	l3538
  4746  0009E0  0100               	movlb	0	; () banked
  4747  0009E2  51D4               	movf	(Precharge@i_2130+1)& (0+255),w,b
  4748  0009E4  E113               	bnz	l678
  4749  0009E6  0E05               	movlw	5
  4750  0009E8  0100               	movlb	0	; () banked
  4751  0009EA  5DD3               	subwf	Precharge@i_2130& (0+255),w,b
  4752  0009EC  B0D8               	btfsc	status,0,c
  4753  0009EE  D00E               	goto	l678
  4754  0009F0                     l3538:
  4755                           
  4756                           ; BSR set to: 0
  4757                           ;Functions.c: 47: Delay(1000);
  4758  0009F0  0EE8               	movlw	232
  4759  0009F2  6E1B               	movwf	Delay@wait,c
  4760  0009F4  0E03               	movlw	3
  4761  0009F6  6E1C               	movwf	Delay@wait+1,c
  4762  0009F8  0E00               	movlw	0
  4763  0009FA  6E1D               	movwf	Delay@wait+2,c
  4764  0009FC  0E00               	movlw	0
  4765  0009FE  6E1E               	movwf	Delay@wait+3,c
  4766  000A00  ECA9  F007         	call	_Delay	;wreg free
  4767  000A04  0100               	movlb	0	; () banked
  4768  000A06  4BD3               	infsnz	Precharge@i_2130& (0+255),f,b
  4769  000A08  2BD4               	incf	(Precharge@i_2130+1)& (0+255),f,b
  4770  000A0A  D7E7               	goto	l3534
  4771  000A0C                     l678:
  4772                           
  4773                           ; BSR set to: 0
  4774  000A0C  928B               	bcf	3979,1,c	;volatile
  4775                           
  4776                           ; BSR set to: 0
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;Functions.c: 50: do { LATB5 = 0; } while(0);
  4780  000A0E  9A8A               	bcf	3978,5,c	;volatile
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;Functions.c: 51: PowerOn = 1;
  4784                           
  4785                           ; BSR set to: 0
  4786  000A10  0E01               	movlw	1
  4787  000A12  6E33               	movwf	_PowerOn,c
  4788  000A14  0012               	return	
  4789  000A16                     __end_of_Precharge:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           intcon	equ	0xFF2
  4798                           indf0	equ	0xFEF
  4799                           postinc0	equ	0xFEE
  4800                           fsr0h	equ	0xFEA
  4801                           fsr0l	equ	0xFE9
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1l	equ	0xFE1
  4805                           indf2	equ	0xFDF
  4806                           postinc2	equ	0xFDE
  4807                           postdec2	equ	0xFDD
  4808                           plusw2	equ	0xFDB
  4809                           fsr2h	equ	0xFDA
  4810                           fsr2l	equ	0xFD9
  4811                           status	equ	0xFD8
  4812                           
  4813 ;; *************** function _ledDebug *****************
  4814 ;; Defined at:
  4815 ;;		line 127 in file "Functions.c"
  4816 ;; Parameters:    Size  Location     Type
  4817 ;;		None
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;		None
  4820 ;; Return value:  Size  Location     Type
  4821 ;;		None               void
  4822 ;; Registers used:
  4823 ;;		wreg, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4829 ;;      Params:         0       0       0       0       0       0       0
  4830 ;;      Locals:         0       0       0       0       0       0       0
  4831 ;;      Temps:          0       0       0       0       0       0       0
  4832 ;;      Totals:         0       0       0       0       0       0       0
  4833 ;;Total ram usage:        0 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    5
  4836 ;; This function calls:
  4837 ;;		_time_Set
  4838 ;;		_time_get
  4839 ;; This function is called by:
  4840 ;;		_main
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           	psect	text22
  4845  0010F6                     __ptext22:
  4846                           	opt stack 0
  4847  0010F6                     _ledDebug:
  4848                           	opt stack 25
  4849                           
  4850                           ;Functions.c: 128: if (time_get(1) > 500) {
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;incstack = 0
  4854  0010F6  0E01               	movlw	1
  4855  0010F8  ECCA  F009         	call	_time_get
  4856  0010FC  BE1C               	btfsc	?_time_get+1,7,c
  4857  0010FE  0012               	return	
  4858  001100  0EF5               	movlw	245
  4859  001102  5C1B               	subwf	?_time_get,w,c
  4860  001104  0E01               	movlw	1
  4861  001106  581C               	subwfb	?_time_get+1,w,c
  4862  001108  A0D8               	btfss	status,0,c
  4863  00110A  0012               	return	
  4864                           
  4865                           ;Functions.c: 129: do { LATA3 = ~LATA3; } while(0);
  4866  00110C  B689               	btfsc	3977,3,c	;volatile
  4867  00110E  D002               	goto	u1660
  4868  001110  8689               	bsf	3977,3,c	;volatile
  4869  001112  D001               	goto	l2920
  4870  001114                     u1660:
  4871  001114  9689               	bcf	3977,3,c	;volatile
  4872  001116                     l2920:
  4873                           
  4874                           ;Functions.c: 130: time_Set(1, 0);
  4875  001116  0E00               	movlw	0
  4876  001118  6E1C               	movwf	time_Set@value+1,c
  4877  00111A  0E00               	movlw	0
  4878  00111C  6E1B               	movwf	time_Set@value,c
  4879  00111E  0E01               	movlw	1
  4880  001120  EC89  F009         	call	_time_Set
  4881  001124  0012               	return	
  4882  001126                     __end_of_ledDebug:
  4883                           	opt stack 0
  4884                           tblptru	equ	0xFF8
  4885                           tblptrh	equ	0xFF7
  4886                           tblptrl	equ	0xFF6
  4887                           tablat	equ	0xFF5
  4888                           prodh	equ	0xFF4
  4889                           prodl	equ	0xFF3
  4890                           intcon	equ	0xFF2
  4891                           indf0	equ	0xFEF
  4892                           postinc0	equ	0xFEE
  4893                           fsr0h	equ	0xFEA
  4894                           fsr0l	equ	0xFE9
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1l	equ	0xFE1
  4898                           indf2	equ	0xFDF
  4899                           postinc2	equ	0xFDE
  4900                           postdec2	equ	0xFDD
  4901                           plusw2	equ	0xFDB
  4902                           fsr2h	equ	0xFDA
  4903                           fsr2l	equ	0xFD9
  4904                           status	equ	0xFD8
  4905                           
  4906 ;; *************** function _time_get *****************
  4907 ;; Defined at:
  4908 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  WhatTime        1    wreg     unsigned char 
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  WhatTime        1   28[COMRAM] unsigned char 
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  2   26[COMRAM] int 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, status,0
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4922 ;;      Params:         2       0       0       0       0       0       0
  4923 ;;      Locals:         1       0       0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0
  4925 ;;      Totals:         3       0       0       0       0       0       0
  4926 ;;Total ram usage:        3 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    4
  4929 ;; This function calls:
  4930 ;;		Nothing
  4931 ;; This function is called by:
  4932 ;;		_ledDebug
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text23
  4937  001394                     __ptext23:
  4938                           	opt stack 0
  4939  001394                     _time_get:
  4940                           	opt stack 25
  4941                           
  4942                           ;incstack = 0
  4943                           ;time_get@WhatTime stored from wreg
  4944  001394  6E1D               	movwf	time_get@WhatTime,c
  4945                           
  4946                           ;tmr0.c: 157: if(WhatTime == 1){
  4947  001396  041D               	decf	time_get@WhatTime,w,c
  4948  001398  A4D8               	btfss	status,2,c
  4949  00139A  0012               	return	
  4950                           
  4951                           ;tmr0.c: 158: return LEDtime;
  4952  00139C  C0A3  F01B         	movff	_LEDtime,?_time_get
  4953  0013A0  C0A4  F01C         	movff	_LEDtime+1,?_time_get+1
  4954  0013A4  0012               	return	
  4955  0013A6                     __end_of_time_get:
  4956                           	opt stack 0
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           indf0	equ	0xFEF
  4965                           postinc0	equ	0xFEE
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           plusw2	equ	0xFDB
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _time_Set *****************
  4980 ;; Defined at:
  4981 ;;		line 162 in file "mcc_generated_files/tmr0.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;  WhatTime        1    wreg     unsigned char 
  4984 ;;  value           2   26[COMRAM] int 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  WhatTime        1   28[COMRAM] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;		None               void
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4996 ;;      Params:         2       0       0       0       0       0       0
  4997 ;;      Locals:         1       0       0       0       0       0       0
  4998 ;;      Temps:          0       0       0       0       0       0       0
  4999 ;;      Totals:         3       0       0       0       0       0       0
  5000 ;;Total ram usage:        3 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    4
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_ledDebug
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text24
  5011  001312                     __ptext24:
  5012                           	opt stack 0
  5013  001312                     _time_Set:
  5014                           	opt stack 25
  5015                           
  5016                           ;incstack = 0
  5017                           ;time_Set@WhatTime stored from wreg
  5018  001312  6E1D               	movwf	time_Set@WhatTime,c
  5019                           
  5020                           ;tmr0.c: 163: if(WhatTime == 1){
  5021  001314  041D               	decf	time_Set@WhatTime,w,c
  5022  001316  A4D8               	btfss	status,2,c
  5023  001318  0012               	return	
  5024                           
  5025                           ;tmr0.c: 164: LEDtime = value;
  5026  00131A  C01B  F0A3         	movff	time_Set@value,_LEDtime
  5027  00131E  C01C  F0A4         	movff	time_Set@value+1,_LEDtime+1
  5028  001322  0100               	movlb	0	; () banked
  5029  001324  0E00               	movlw	0
  5030  001326  BFA4               	btfsc	(_LEDtime+1)& (0+255),7,b
  5031  001328  0EFF               	movlw	-1
  5032  00132A  6FA5               	movwf	(_LEDtime+2)& (0+255),b
  5033  00132C  6FA6               	movwf	(_LEDtime+3)& (0+255),b
  5034  00132E  0012               	return	
  5035  001330                     __end_of_time_Set:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           intcon	equ	0xFF2
  5044                           indf0	equ	0xFEF
  5045                           postinc0	equ	0xFEE
  5046                           fsr0h	equ	0xFEA
  5047                           fsr0l	equ	0xFE9
  5048                           wreg	equ	0xFE8
  5049                           postdec1	equ	0xFE5
  5050                           fsr1l	equ	0xFE1
  5051                           indf2	equ	0xFDF
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           plusw2	equ	0xFDB
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _Splash *****************
  5060 ;; Defined at:
  5061 ;;		line 143 in file "NokiaLCD.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;		None
  5064 ;; Auto vars:     Size  Location     Type
  5065 ;;		None
  5066 ;; Return value:  Size  Location     Type
  5067 ;;		None               void
  5068 ;; Registers used:
  5069 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5070 ;; Tracked objects:
  5071 ;;		On entry : 0/0
  5072 ;;		On exit  : 0/0
  5073 ;;		Unchanged: 0/0
  5074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5075 ;;      Params:         0       0       0       0       0       0       0
  5076 ;;      Locals:         0       0       0       0       0       0       0
  5077 ;;      Temps:          0       0       0       0       0       0       0
  5078 ;;      Totals:         0       0       0       0       0       0       0
  5079 ;;Total ram usage:        0 bytes
  5080 ;; Hardware stack levels used:    1
  5081 ;; Hardware stack levels required when called:    8
  5082 ;; This function calls:
  5083 ;;		_NokiaStr
  5084 ;;		_gotoXy
  5085 ;; This function is called by:
  5086 ;;		_main
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text25
  5091  00105A                     __ptext25:
  5092                           	opt stack 0
  5093  00105A                     _Splash:
  5094                           	opt stack 22
  5095                           
  5096                           ;NokiaLCD.c: 144: gotoXy(0,2);
  5097                           
  5098                           ;incstack = 0
  5099  00105A  0E02               	movlw	2
  5100  00105C  6E23               	movwf	gotoXy@y,c
  5101  00105E  0E00               	movlw	0
  5102  001060  EC2C  F009         	call	_gotoXy
  5103                           
  5104                           ;NokiaLCD.c: 145: NokiaStr("Charger Control");
  5105  001064  0ED5               	movlw	low STR_3
  5106  001066  0100               	movlb	0	; () banked
  5107  001068  6FD3               	movwf	NokiaStr@str& (0+255),b
  5108  00106A  0E7F               	movlw	high STR_3
  5109  00106C  0100               	movlb	0	; () banked
  5110  00106E  6FD4               	movwf	(NokiaStr@str+1)& (0+255),b
  5111  001070  ECC0  F008         	call	_NokiaStr	;wreg free
  5112                           
  5113                           ;NokiaLCD.c: 146: gotoXy(1,4);
  5114  001074  0E04               	movlw	4
  5115  001076  6E23               	movwf	gotoXy@y,c
  5116  001078  0E01               	movlw	1
  5117  00107A  EC2C  F009         	call	_gotoXy
  5118                           
  5119                           ;NokiaLCD.c: 147: NokiaStr("Waiting on BMM");
  5120  00107E  0EE5               	movlw	low STR_4
  5121  001080  0100               	movlb	0	; () banked
  5122  001082  6FD3               	movwf	NokiaStr@str& (0+255),b
  5123  001084  0E7F               	movlw	high STR_4
  5124  001086  0100               	movlb	0	; () banked
  5125  001088  6FD4               	movwf	(NokiaStr@str+1)& (0+255),b
  5126  00108A  ECC0  F008         	call	_NokiaStr	;wreg free
  5127  00108E  0012               	return		;funcret
  5128  001090                     __end_of_Splash:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           indf0	equ	0xFEF
  5138                           postinc0	equ	0xFEE
  5139                           fsr0h	equ	0xFEA
  5140                           fsr0l	equ	0xFE9
  5141                           wreg	equ	0xFE8
  5142                           postdec1	equ	0xFE5
  5143                           fsr1l	equ	0xFE1
  5144                           indf2	equ	0xFDF
  5145                           postinc2	equ	0xFDE
  5146                           postdec2	equ	0xFDD
  5147                           plusw2	equ	0xFDB
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function _gotoXy *****************
  5153 ;; Defined at:
  5154 ;;		line 97 in file "NokiaLCD.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  x               1    wreg     unsigned char 
  5157 ;;  y               1   34[COMRAM] unsigned char 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  x               1   35[COMRAM] unsigned char 
  5160 ;; Return value:  Size  Location     Type
  5161 ;;		None               void
  5162 ;; Registers used:
  5163 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5164 ;; Tracked objects:
  5165 ;;		On entry : 0/0
  5166 ;;		On exit  : 0/0
  5167 ;;		Unchanged: 0/0
  5168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5169 ;;      Params:         1       0       0       0       0       0       0
  5170 ;;      Locals:         1       0       0       0       0       0       0
  5171 ;;      Temps:          0       0       0       0       0       0       0
  5172 ;;      Totals:         2       0       0       0       0       0       0
  5173 ;;Total ram usage:        2 bytes
  5174 ;; Hardware stack levels used:    1
  5175 ;; Hardware stack levels required when called:    6
  5176 ;; This function calls:
  5177 ;;		_LCDwrite
  5178 ;; This function is called by:
  5179 ;;		_Splash
  5180 ;; This function uses a non-reentrant model
  5181 ;;
  5182                           
  5183                           	psect	text26
  5184  001258                     __ptext26:
  5185                           	opt stack 0
  5186  001258                     _gotoXy:
  5187                           	opt stack 23
  5188                           
  5189                           ;incstack = 0
  5190                           ;gotoXy@x stored from wreg
  5191  001258  6E24               	movwf	gotoXy@x,c
  5192                           
  5193                           ;NokiaLCD.c: 98: y=y|0x40;
  5194  00125A  5023               	movf	gotoXy@y,w,c
  5195  00125C  0940               	iorlw	64
  5196  00125E  6E23               	movwf	gotoXy@y,c
  5197                           
  5198                           ;NokiaLCD.c: 99: LCDwrite(1, y);
  5199  001260  C023  F021         	movff	gotoXy@y,LCDwrite@data
  5200  001264  0E01               	movlw	1
  5201  001266  ECA7  F009         	call	_LCDwrite
  5202                           
  5203                           ;NokiaLCD.c: 100: x=(x*6)|0x80;
  5204  00126A  5024               	movf	gotoXy@x,w,c
  5205  00126C  0D06               	mullw	6
  5206  00126E  50F3               	movf	prodl,w,c
  5207  001270  0980               	iorlw	128
  5208  001272  6E24               	movwf	gotoXy@x,c
  5209                           
  5210                           ;NokiaLCD.c: 101: LCDwrite(1, x);
  5211  001274  C024  F021         	movff	gotoXy@x,LCDwrite@data
  5212  001278  0E01               	movlw	1
  5213  00127A  ECA7  F009         	call	_LCDwrite
  5214  00127E  0012               	return		;funcret
  5215  001280                     __end_of_gotoXy:
  5216                           	opt stack 0
  5217                           tblptru	equ	0xFF8
  5218                           tblptrh	equ	0xFF7
  5219                           tblptrl	equ	0xFF6
  5220                           tablat	equ	0xFF5
  5221                           prodh	equ	0xFF4
  5222                           prodl	equ	0xFF3
  5223                           intcon	equ	0xFF2
  5224                           indf0	equ	0xFEF
  5225                           postinc0	equ	0xFEE
  5226                           fsr0h	equ	0xFEA
  5227                           fsr0l	equ	0xFE9
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           fsr1l	equ	0xFE1
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           plusw2	equ	0xFDB
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _NokiaStr *****************
  5240 ;; Defined at:
  5241 ;;		line 128 in file "NokiaLCD.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;  str             2    3[BANK0 ] PTR unsigned char 
  5244 ;;		 -> STR_4(15), STR_3(16), 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;		None
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5256 ;;      Params:         0       2       0       0       0       0       0
  5257 ;;      Locals:         0       0       0       0       0       0       0
  5258 ;;      Temps:          0       0       0       0       0       0       0
  5259 ;;      Totals:         0       2       0       0       0       0       0
  5260 ;;Total ram usage:        2 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    7
  5263 ;; This function calls:
  5264 ;;		_LcdCharacter
  5265 ;; This function is called by:
  5266 ;;		_Splash
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text27
  5271  001180                     __ptext27:
  5272                           	opt stack 0
  5273  001180                     _NokiaStr:
  5274                           	opt stack 22
  5275                           
  5276                           ;NokiaLCD.c: 129: while (*str)
  5277                           
  5278                           ;incstack = 0
  5279  001180  D00B               	goto	l3594
  5280  001182                     l3590:
  5281                           
  5282                           ;NokiaLCD.c: 130: {
  5283                           ;NokiaLCD.c: 131: LcdCharacter(*str++);
  5284  001182  C0D3  FFF6         	movff	NokiaStr@str,tblptrl
  5285  001186  C0D4  FFF7         	movff	NokiaStr@str+1,tblptrh
  5286  00118A                     	if	0	;tblptru may be non-zero
  5287  00118A                     	endif
  5288  00118A                     	if	0	;tblptru may be non-zero
  5289  00118A                     	endif
  5290  00118A  0008               	tblrd		*
  5291  00118C  50F5               	movf	tablat,w,c
  5292  00118E  ECE8  F005         	call	_LcdCharacter
  5293  001192  0100               	movlb	0	; () banked
  5294  001194  4BD3               	infsnz	NokiaStr@str& (0+255),f,b
  5295  001196  2BD4               	incf	(NokiaStr@str+1)& (0+255),f,b
  5296  001198                     l3594:
  5297  001198  C0D3  FFF6         	movff	NokiaStr@str,tblptrl
  5298  00119C  C0D4  FFF7         	movff	NokiaStr@str+1,tblptrh
  5299  0011A0                     	if	0	;tblptru may be non-zero
  5300  0011A0                     	endif
  5301  0011A0                     	if	0	;tblptru may be non-zero
  5302  0011A0                     	endif
  5303  0011A0  0008               	tblrd		*
  5304  0011A2  50F5               	movf	tablat,w,c
  5305  0011A4  0900               	iorlw	0
  5306  0011A6  B4D8               	btfsc	status,2,c
  5307  0011A8  0012               	return	
  5308  0011AA  D7EB               	goto	l3590
  5309  0011AC                     __end_of_NokiaStr:
  5310                           	opt stack 0
  5311                           tblptru	equ	0xFF8
  5312                           tblptrh	equ	0xFF7
  5313                           tblptrl	equ	0xFF6
  5314                           tablat	equ	0xFF5
  5315                           prodh	equ	0xFF4
  5316                           prodl	equ	0xFF3
  5317                           intcon	equ	0xFF2
  5318                           indf0	equ	0xFEF
  5319                           postinc0	equ	0xFEE
  5320                           fsr0h	equ	0xFEA
  5321                           fsr0l	equ	0xFE9
  5322                           wreg	equ	0xFE8
  5323                           postdec1	equ	0xFE5
  5324                           fsr1l	equ	0xFE1
  5325                           indf2	equ	0xFDF
  5326                           postinc2	equ	0xFDE
  5327                           postdec2	equ	0xFDD
  5328                           plusw2	equ	0xFDB
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333 ;; *************** function _LcdCharacter *****************
  5334 ;; Defined at:
  5335 ;;		line 111 in file "NokiaLCD.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  character       1    wreg     unsigned char 
  5338 ;; Auto vars:     Size  Location     Type
  5339 ;;  character       1    0[BANK0 ] unsigned char 
  5340 ;;  index           2    1[BANK0 ] int 
  5341 ;; Return value:  Size  Location     Type
  5342 ;;		None               void
  5343 ;; Registers used:
  5344 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5345 ;; Tracked objects:
  5346 ;;		On entry : 0/0
  5347 ;;		On exit  : 0/0
  5348 ;;		Unchanged: 0/0
  5349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5350 ;;      Params:         0       0       0       0       0       0       0
  5351 ;;      Locals:         0       3       0       0       0       0       0
  5352 ;;      Temps:          2       0       0       0       0       0       0
  5353 ;;      Totals:         2       3       0       0       0       0       0
  5354 ;;Total ram usage:        5 bytes
  5355 ;; Hardware stack levels used:    1
  5356 ;; Hardware stack levels required when called:    6
  5357 ;; This function calls:
  5358 ;;		_LCDwrite
  5359 ;;		___wmul
  5360 ;; This function is called by:
  5361 ;;		_NokiaStr
  5362 ;; This function uses a non-reentrant model
  5363 ;;
  5364                           
  5365                           	psect	text28
  5366  000BD0                     __ptext28:
  5367                           	opt stack 0
  5368  000BD0                     _LcdCharacter:
  5369                           	opt stack 22
  5370                           
  5371                           ;incstack = 0
  5372                           ;LcdCharacter@character stored from wreg
  5373  000BD0  0100               	movlb	0	; () banked
  5374  000BD2  6FD0               	movwf	LcdCharacter@character& (0+255),b
  5375                           
  5376                           ;NokiaLCD.c: 113: LCDwrite(0, 0x00);
  5377  000BD4  0E00               	movlw	0
  5378  000BD6  6E21               	movwf	LCDwrite@data,c
  5379  000BD8  0E00               	movlw	0
  5380  000BDA  ECA7  F009         	call	_LCDwrite
  5381                           
  5382                           ;NokiaLCD.c: 114: for (int index = 0; index < 5; index++)
  5383  000BDE  0E00               	movlw	0
  5384  000BE0  0100               	movlb	0	; () banked
  5385  000BE2  6FD2               	movwf	(LcdCharacter@index+1)& (0+255),b
  5386  000BE4  0E00               	movlw	0
  5387  000BE6  6FD1               	movwf	LcdCharacter@index& (0+255),b
  5388  000BE8                     l3376:
  5389                           
  5390                           ; BSR set to: 0
  5391  000BE8  0100               	movlb	0	; () banked
  5392  000BEA  BFD2               	btfsc	(LcdCharacter@index+1)& (0+255),7,b
  5393  000BEC  D008               	goto	l3380
  5394  000BEE  0100               	movlb	0	; () banked
  5395  000BF0  51D2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  5396  000BF2  E12E               	bnz	l3386
  5397  000BF4  0E05               	movlw	5
  5398  000BF6  0100               	movlb	0	; () banked
  5399  000BF8  5DD1               	subwf	LcdCharacter@index& (0+255),w,b
  5400  000BFA  B0D8               	btfsc	status,0,c
  5401  000BFC  D029               	goto	l3386
  5402  000BFE                     l3380:
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;NokiaLCD.c: 115: {
  5406                           ;NokiaLCD.c: 116: LCDwrite(0, FONTLOOKUP[character - 0x20][index]);
  5407  000BFE  0EE0               	movlw	224
  5408  000C00  0100               	movlb	0	; () banked
  5409  000C02  25D0               	addwf	LcdCharacter@character& (0+255),w,b
  5410  000C04  6E1B               	movwf	___wmul@multiplier,c
  5411  000C06  6A1C               	clrf	___wmul@multiplier+1,c
  5412  000C08  0EFF               	movlw	255
  5413  000C0A  221C               	addwfc	___wmul@multiplier+1,f,c
  5414  000C0C  0E00               	movlw	0
  5415  000C0E  6E1E               	movwf	___wmul@multiplicand+1,c
  5416  000C10  0E05               	movlw	5
  5417  000C12  6E1D               	movwf	___wmul@multiplicand,c
  5418  000C14  EC67  F009         	call	___wmul	;wreg free
  5419  000C18  0EF5               	movlw	low _FONTLOOKUP
  5420  000C1A  6E23               	movwf	??_LcdCharacter& (0+255),c
  5421  000C1C  0E7D               	movlw	high _FONTLOOKUP
  5422  000C1E  6E24               	movwf	(??_LcdCharacter+1)& (0+255),c
  5423  000C20  501B               	movf	?___wmul,w,c
  5424  000C22  2623               	addwf	??_LcdCharacter,f,c
  5425  000C24  501C               	movf	?___wmul+1,w,c
  5426  000C26  2224               	addwfc	??_LcdCharacter+1,f,c
  5427  000C28  0100               	movlb	0	; () banked
  5428  000C2A  51D1               	movf	LcdCharacter@index& (0+255),w,b
  5429  000C2C  2623               	addwf	??_LcdCharacter,f,c
  5430  000C2E  0100               	movlb	0	; () banked
  5431  000C30  51D2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  5432  000C32  2224               	addwfc	??_LcdCharacter+1,f,c
  5433  000C34  C023  FFF6         	movff	??_LcdCharacter,tblptrl
  5434  000C38  C024  FFF7         	movff	??_LcdCharacter+1,tblptrh
  5435  000C3C                     	if	0	;tblptru may be non-zero
  5436  000C3C                     	endif
  5437  000C3C                     	if	0	;tblptru may be non-zero
  5438  000C3C                     	endif
  5439  000C3C  0008               	tblrd		*
  5440  000C3E  CFF5 F021          	movff	tablat,LCDwrite@data
  5441  000C42  0E00               	movlw	0
  5442  000C44  ECA7  F009         	call	_LCDwrite
  5443  000C48  0100               	movlb	0	; () banked
  5444  000C4A  4BD1               	infsnz	LcdCharacter@index& (0+255),f,b
  5445  000C4C  2BD2               	incf	(LcdCharacter@index+1)& (0+255),f,b
  5446  000C4E  D7CC               	goto	l3376
  5447  000C50                     l3386:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;NokiaLCD.c: 117: }
  5451                           ;NokiaLCD.c: 118: LCDwrite(0, 0x00);
  5452  000C50  0E00               	movlw	0
  5453  000C52  6E21               	movwf	LCDwrite@data,c
  5454  000C54  0E00               	movlw	0
  5455  000C56  ECA7  F009         	call	_LCDwrite
  5456  000C5A  0012               	return		;funcret
  5457  000C5C                     __end_of_LcdCharacter:
  5458                           	opt stack 0
  5459                           tblptru	equ	0xFF8
  5460                           tblptrh	equ	0xFF7
  5461                           tblptrl	equ	0xFF6
  5462                           tablat	equ	0xFF5
  5463                           prodh	equ	0xFF4
  5464                           prodl	equ	0xFF3
  5465                           intcon	equ	0xFF2
  5466                           indf0	equ	0xFEF
  5467                           postinc0	equ	0xFEE
  5468                           fsr0h	equ	0xFEA
  5469                           fsr0l	equ	0xFE9
  5470                           wreg	equ	0xFE8
  5471                           postdec1	equ	0xFE5
  5472                           fsr1l	equ	0xFE1
  5473                           indf2	equ	0xFDF
  5474                           postinc2	equ	0xFDE
  5475                           postdec2	equ	0xFDD
  5476                           plusw2	equ	0xFDB
  5477                           fsr2h	equ	0xFDA
  5478                           fsr2l	equ	0xFD9
  5479                           status	equ	0xFD8
  5480                           
  5481 ;; *************** function ___wmul *****************
  5482 ;; Defined at:
  5483 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5484 ;; Parameters:    Size  Location     Type
  5485 ;;  multiplier      2   26[COMRAM] unsigned int 
  5486 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;  product         2   30[COMRAM] unsigned int 
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  2   26[COMRAM] unsigned int 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0, prodl, prodh
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5498 ;;      Params:         4       0       0       0       0       0       0
  5499 ;;      Locals:         2       0       0       0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0       0       0
  5501 ;;      Totals:         6       0       0       0       0       0       0
  5502 ;;Total ram usage:        6 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    4
  5505 ;; This function calls:
  5506 ;;		Nothing
  5507 ;; This function is called by:
  5508 ;;		_LcdCharacter
  5509 ;; This function uses a non-reentrant model
  5510 ;;
  5511                           
  5512                           	psect	text29
  5513  0012CE                     __ptext29:
  5514                           	opt stack 0
  5515  0012CE                     ___wmul:
  5516                           	opt stack 23
  5517                           
  5518                           ;incstack = 0
  5519  0012CE  501B               	movf	___wmul@multiplier,w,c
  5520  0012D0  021D               	mulwf	___wmul@multiplicand,c
  5521  0012D2  CFF3 F01F          	movff	prodl,___wmul@product
  5522  0012D6  CFF4 F020          	movff	prodh,___wmul@product+1
  5523  0012DA  501B               	movf	___wmul@multiplier,w,c
  5524  0012DC  021E               	mulwf	___wmul@multiplicand+1,c
  5525  0012DE  50F3               	movf	prodl,w,c
  5526  0012E0  2620               	addwf	___wmul@product+1,f,c
  5527  0012E2  501C               	movf	___wmul@multiplier+1,w,c
  5528  0012E4  021D               	mulwf	___wmul@multiplicand,c
  5529  0012E6  50F3               	movf	prodl,w,c
  5530  0012E8  2620               	addwf	___wmul@product+1,f,c
  5531  0012EA  C01F  F01B         	movff	___wmul@product,?___wmul
  5532  0012EE  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  5533  0012F2  0012               	return	
  5534  0012F4                     __end_of___wmul:
  5535                           	opt stack 0
  5536                           tblptru	equ	0xFF8
  5537                           tblptrh	equ	0xFF7
  5538                           tblptrl	equ	0xFF6
  5539                           tablat	equ	0xFF5
  5540                           prodh	equ	0xFF4
  5541                           prodl	equ	0xFF3
  5542                           intcon	equ	0xFF2
  5543                           indf0	equ	0xFEF
  5544                           postinc0	equ	0xFEE
  5545                           fsr0h	equ	0xFEA
  5546                           fsr0l	equ	0xFE9
  5547                           wreg	equ	0xFE8
  5548                           postdec1	equ	0xFE5
  5549                           fsr1l	equ	0xFE1
  5550                           indf2	equ	0xFDF
  5551                           postinc2	equ	0xFDE
  5552                           postdec2	equ	0xFDD
  5553                           plusw2	equ	0xFDB
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _SYSTEM_Initialize *****************
  5559 ;; Defined at:
  5560 ;;		line 112 in file "mcc_generated_files/mcc.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5574 ;;      Params:         0       0       0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0
  5577 ;;      Totals:         0       0       0       0       0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    6
  5581 ;; This function calls:
  5582 ;;		_EUSART2_Initialize
  5583 ;;		_INTERRUPT_Initialize
  5584 ;;		_OSCILLATOR_Initialize
  5585 ;;		_PIN_MANAGER_Initialize
  5586 ;;		_TMR0_Initialize
  5587 ;; This function is called by:
  5588 ;;		_main
  5589 ;; This function uses a non-reentrant model
  5590 ;;
  5591                           
  5592                           	psect	text30
  5593  001368                     __ptext30:
  5594                           	opt stack 0
  5595  001368                     _SYSTEM_Initialize:
  5596                           	opt stack 24
  5597                           
  5598                           ;mcc.c: 113: OSCILLATOR_Initialize();
  5599                           
  5600                           ;incstack = 0
  5601  001368  ECDB  F009         	call	_OSCILLATOR_Initialize	;wreg free
  5602                           
  5603                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  5604  00136C  EC81  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  5605                           
  5606                           ;mcc.c: 115: INTERRUPT_Initialize();
  5607  001370  ECE9  F009         	call	_INTERRUPT_Initialize	;wreg free
  5608                           
  5609                           ;mcc.c: 117: EUSART2_Initialize();
  5610  001374  EC48  F008         	call	_EUSART2_Initialize	;wreg free
  5611                           
  5612                           ;mcc.c: 118: TMR0_Initialize();
  5613  001378  ECD6  F008         	call	_TMR0_Initialize	;wreg free
  5614  00137C  0012               	return		;funcret
  5615  00137E                     __end_of_SYSTEM_Initialize:
  5616                           	opt stack 0
  5617                           tblptru	equ	0xFF8
  5618                           tblptrh	equ	0xFF7
  5619                           tblptrl	equ	0xFF6
  5620                           tablat	equ	0xFF5
  5621                           prodh	equ	0xFF4
  5622                           prodl	equ	0xFF3
  5623                           intcon	equ	0xFF2
  5624                           indf0	equ	0xFEF
  5625                           postinc0	equ	0xFEE
  5626                           fsr0h	equ	0xFEA
  5627                           fsr0l	equ	0xFE9
  5628                           wreg	equ	0xFE8
  5629                           postdec1	equ	0xFE5
  5630                           fsr1l	equ	0xFE1
  5631                           indf2	equ	0xFDF
  5632                           postinc2	equ	0xFDE
  5633                           postdec2	equ	0xFDD
  5634                           plusw2	equ	0xFDB
  5635                           fsr2h	equ	0xFDA
  5636                           fsr2l	equ	0xFD9
  5637                           status	equ	0xFD8
  5638                           
  5639 ;; *************** function _TMR0_Initialize *****************
  5640 ;; Defined at:
  5641 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  5642 ;; Parameters:    Size  Location     Type
  5643 ;;		None
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;		None
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  2  158[None  ] int 
  5648 ;; Registers used:
  5649 ;;		wreg, status,2, status,0, cstack
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5655 ;;      Params:         0       0       0       0       0       0       0
  5656 ;;      Locals:         0       0       0       0       0       0       0
  5657 ;;      Temps:          2       0       0       0       0       0       0
  5658 ;;      Totals:         2       0       0       0       0       0       0
  5659 ;;Total ram usage:        2 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    5
  5662 ;; This function calls:
  5663 ;;		_TMR0_StartTimer
  5664 ;; This function is called by:
  5665 ;;		_SYSTEM_Initialize
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           	psect	text31
  5670  0011AC                     __ptext31:
  5671                           	opt stack 0
  5672  0011AC                     _TMR0_Initialize:
  5673                           	opt stack 24
  5674                           
  5675                           ;tmr0.c: 74: T0CON = 0x98;
  5676                           
  5677                           ;incstack = 0
  5678  0011AC  0E98               	movlw	152
  5679  0011AE  6ED5               	movwf	4053,c	;volatile
  5680                           
  5681                           ;tmr0.c: 77: TMR0H = 0xF0;
  5682  0011B0  0EF0               	movlw	240
  5683  0011B2  6ED7               	movwf	4055,c	;volatile
  5684                           
  5685                           ;tmr0.c: 80: TMR0L = 0x5F;
  5686  0011B4  0E5F               	movlw	95
  5687  0011B6  6ED6               	movwf	4054,c	;volatile
  5688                           
  5689                           ;tmr0.c: 83: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  5690  0011B8  50D6               	movf	4054,w,c	;volatile
  5691  0011BA  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  5692  0011BE  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  5693  0011C0  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  5694  0011C4  6A1B               	clrf	??_TMR0_Initialize,c
  5695  0011C6  101B               	iorwf	??_TMR0_Initialize,w,c
  5696  0011C8  6E41               	movwf	_timer0ReloadVal16bit,c
  5697  0011CA  501C               	movf	??_TMR0_Initialize+1,w,c
  5698  0011CC  6E42               	movwf	_timer0ReloadVal16bit+1,c
  5699                           
  5700                           ;tmr0.c: 86: INTCONbits.TMR0IF = 0;
  5701  0011CE  94F2               	bcf	intcon,2,c	;volatile
  5702                           
  5703                           ;tmr0.c: 89: INTCONbits.TMR0IE = 1;
  5704  0011D0  8AF2               	bsf	intcon,5,c	;volatile
  5705                           
  5706                           ;tmr0.c: 92: TMR0_StartTimer();
  5707  0011D2  ECFB  F009         	call	_TMR0_StartTimer	;wreg free
  5708  0011D6  0012               	return		;funcret
  5709  0011D8                     __end_of_TMR0_Initialize:
  5710                           	opt stack 0
  5711                           tblptru	equ	0xFF8
  5712                           tblptrh	equ	0xFF7
  5713                           tblptrl	equ	0xFF6
  5714                           tablat	equ	0xFF5
  5715                           prodh	equ	0xFF4
  5716                           prodl	equ	0xFF3
  5717                           intcon	equ	0xFF2
  5718                           indf0	equ	0xFEF
  5719                           postinc0	equ	0xFEE
  5720                           fsr0h	equ	0xFEA
  5721                           fsr0l	equ	0xFE9
  5722                           wreg	equ	0xFE8
  5723                           postdec1	equ	0xFE5
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           plusw2	equ	0xFDB
  5729                           fsr2h	equ	0xFDA
  5730                           fsr2l	equ	0xFD9
  5731                           status	equ	0xFD8
  5732                           
  5733 ;; *************** function _TMR0_StartTimer *****************
  5734 ;; Defined at:
  5735 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;		None
  5738 ;; Auto vars:     Size  Location     Type
  5739 ;;		None
  5740 ;; Return value:  Size  Location     Type
  5741 ;;		None               void
  5742 ;; Registers used:
  5743 ;;		None
  5744 ;; Tracked objects:
  5745 ;;		On entry : 0/0
  5746 ;;		On exit  : 0/0
  5747 ;;		Unchanged: 0/0
  5748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5749 ;;      Params:         0       0       0       0       0       0       0
  5750 ;;      Locals:         0       0       0       0       0       0       0
  5751 ;;      Temps:          0       0       0       0       0       0       0
  5752 ;;      Totals:         0       0       0       0       0       0       0
  5753 ;;Total ram usage:        0 bytes
  5754 ;; Hardware stack levels used:    1
  5755 ;; Hardware stack levels required when called:    4
  5756 ;; This function calls:
  5757 ;;		Nothing
  5758 ;; This function is called by:
  5759 ;;		_TMR0_Initialize
  5760 ;; This function uses a non-reentrant model
  5761 ;;
  5762                           
  5763                           	psect	text32
  5764  0013F6                     __ptext32:
  5765                           	opt stack 0
  5766  0013F6                     _TMR0_StartTimer:
  5767                           	opt stack 24
  5768                           
  5769                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
  5770                           
  5771                           ;incstack = 0
  5772  0013F6  8ED5               	bsf	4053,7,c	;volatile
  5773  0013F8  0012               	return		;funcret
  5774  0013FA                     __end_of_TMR0_StartTimer:
  5775                           	opt stack 0
  5776                           tblptru	equ	0xFF8
  5777                           tblptrh	equ	0xFF7
  5778                           tblptrl	equ	0xFF6
  5779                           tablat	equ	0xFF5
  5780                           prodh	equ	0xFF4
  5781                           prodl	equ	0xFF3
  5782                           intcon	equ	0xFF2
  5783                           indf0	equ	0xFEF
  5784                           postinc0	equ	0xFEE
  5785                           fsr0h	equ	0xFEA
  5786                           fsr0l	equ	0xFE9
  5787                           wreg	equ	0xFE8
  5788                           postdec1	equ	0xFE5
  5789                           fsr1l	equ	0xFE1
  5790                           indf2	equ	0xFDF
  5791                           postinc2	equ	0xFDE
  5792                           postdec2	equ	0xFDD
  5793                           plusw2	equ	0xFDB
  5794                           fsr2h	equ	0xFDA
  5795                           fsr2l	equ	0xFD9
  5796                           status	equ	0xFD8
  5797                           
  5798 ;; *************** function _PIN_MANAGER_Initialize *****************
  5799 ;; Defined at:
  5800 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5801 ;; Parameters:    Size  Location     Type
  5802 ;;		None
  5803 ;; Auto vars:     Size  Location     Type
  5804 ;;		None
  5805 ;; Return value:  Size  Location     Type
  5806 ;;		None               void
  5807 ;; Registers used:
  5808 ;;		wreg, status,2
  5809 ;; Tracked objects:
  5810 ;;		On entry : 0/0
  5811 ;;		On exit  : 0/0
  5812 ;;		Unchanged: 0/0
  5813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5814 ;;      Params:         0       0       0       0       0       0       0
  5815 ;;      Locals:         0       0       0       0       0       0       0
  5816 ;;      Temps:          0       0       0       0       0       0       0
  5817 ;;      Totals:         0       0       0       0       0       0       0
  5818 ;;Total ram usage:        0 bytes
  5819 ;; Hardware stack levels used:    1
  5820 ;; Hardware stack levels required when called:    4
  5821 ;; This function calls:
  5822 ;;		Nothing
  5823 ;; This function is called by:
  5824 ;;		_SYSTEM_Initialize
  5825 ;; This function uses a non-reentrant model
  5826 ;;
  5827                           
  5828                           	psect	text33
  5829  000F02                     __ptext33:
  5830                           	opt stack 0
  5831  000F02                     _PIN_MANAGER_Initialize:
  5832                           	opt stack 25
  5833                           
  5834                           ;pin_manager.c: 51: LATB = 0x0;
  5835                           
  5836                           ;incstack = 0
  5837  000F02  0E00               	movlw	0
  5838  000F04  6E8A               	movwf	3978,c	;volatile
  5839                           
  5840                           ;pin_manager.c: 52: LATA = 0x0;
  5841  000F06  0E00               	movlw	0
  5842  000F08  6E89               	movwf	3977,c	;volatile
  5843                           
  5844                           ;pin_manager.c: 53: ANSELE = 0x7;
  5845  000F0A  0E07               	movlw	7
  5846  000F0C  010F               	movlb	15	; () banked
  5847  000F0E  6F3C               	movwf	60,b	;volatile
  5848                           
  5849                           ;pin_manager.c: 54: LATE = 0x0;
  5850  000F10  0E00               	movlw	0
  5851  000F12  6E8D               	movwf	3981,c	;volatile
  5852                           
  5853                           ;pin_manager.c: 55: LATD = 0x0;
  5854  000F14  0E00               	movlw	0
  5855  000F16  6E8C               	movwf	3980,c	;volatile
  5856                           
  5857                           ;pin_manager.c: 56: LATC = 0x0;
  5858  000F18  0E00               	movlw	0
  5859  000F1A  6E8B               	movwf	3979,c	;volatile
  5860                           
  5861                           ;pin_manager.c: 57: ANSELA = 0x2F;
  5862  000F1C  0E2F               	movlw	47
  5863  000F1E  010F               	movlb	15	; () banked
  5864  000F20  6F38               	movwf	56,b	;volatile
  5865                           
  5866                           ;pin_manager.c: 58: ANSELB = 0x3F;
  5867  000F22  0E3F               	movlw	63
  5868  000F24  010F               	movlb	15	; () banked
  5869  000F26  6F39               	movwf	57,b	;volatile
  5870                           
  5871                           ;pin_manager.c: 59: ANSELC = 0xEC;
  5872  000F28  0EEC               	movlw	236
  5873  000F2A  010F               	movlb	15	; () banked
  5874  000F2C  6F3A               	movwf	58,b	;volatile
  5875                           
  5876                           ;pin_manager.c: 60: ANSELD = 0x3F;
  5877  000F2E  0E3F               	movlw	63
  5878  000F30  010F               	movlb	15	; () banked
  5879  000F32  6F3B               	movwf	59,b	;volatile
  5880                           
  5881                           ;pin_manager.c: 61: WPUB = 0xFC;
  5882  000F34  0EFC               	movlw	252
  5883  000F36  6E61               	movwf	3937,c	;volatile
  5884                           
  5885                           ;pin_manager.c: 62: TRISD = 0xF2;
  5886  000F38  0EF2               	movlw	242
  5887  000F3A  6E95               	movwf	3989,c	;volatile
  5888                           
  5889                           ;pin_manager.c: 63: TRISE = 0x7;
  5890  000F3C  0E07               	movlw	7
  5891  000F3E  6E96               	movwf	3990,c	;volatile
  5892                           
  5893                           ;pin_manager.c: 64: TRISB = 0xC4;
  5894  000F40  0EC4               	movlw	196
  5895  000F42  6E93               	movwf	3987,c	;volatile
  5896                           
  5897                           ;pin_manager.c: 65: TRISC = 0xD4;
  5898  000F44  0ED4               	movlw	212
  5899  000F46  6E94               	movwf	3988,c	;volatile
  5900                           
  5901                           ;pin_manager.c: 66: TRISA = 0x37;
  5902  000F48  0E37               	movlw	55
  5903  000F4A  6E92               	movwf	3986,c	;volatile
  5904                           
  5905                           ; BSR set to: 15
  5906                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  5907  000F4C  9EF1               	bcf	intcon2,7,c	;volatile
  5908                           
  5909                           ; BSR set to: 15
  5910                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  5911  000F4E  96F2               	bcf	intcon,3,c	;volatile
  5912                           
  5913                           ; BSR set to: 15
  5914  000F50  0012               	return		;funcret
  5915  000F52                     __end_of_PIN_MANAGER_Initialize:
  5916                           	opt stack 0
  5917                           tblptru	equ	0xFF8
  5918                           tblptrh	equ	0xFF7
  5919                           tblptrl	equ	0xFF6
  5920                           tablat	equ	0xFF5
  5921                           prodh	equ	0xFF4
  5922                           prodl	equ	0xFF3
  5923                           intcon	equ	0xFF2
  5924                           intcon2	equ	0xFF1
  5925                           indf0	equ	0xFEF
  5926                           postinc0	equ	0xFEE
  5927                           fsr0h	equ	0xFEA
  5928                           fsr0l	equ	0xFE9
  5929                           wreg	equ	0xFE8
  5930                           postdec1	equ	0xFE5
  5931                           fsr1l	equ	0xFE1
  5932                           indf2	equ	0xFDF
  5933                           postinc2	equ	0xFDE
  5934                           postdec2	equ	0xFDD
  5935                           plusw2	equ	0xFDB
  5936                           fsr2h	equ	0xFDA
  5937                           fsr2l	equ	0xFD9
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _OSCILLATOR_Initialize *****************
  5941 ;; Defined at:
  5942 ;;		line 121 in file "mcc_generated_files/mcc.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, status,2
  5951 ;; Tracked objects:
  5952 ;;		On entry : 0/0
  5953 ;;		On exit  : 0/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5956 ;;      Params:         0       0       0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0       0       0
  5959 ;;      Totals:         0       0       0       0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:    4
  5963 ;; This function calls:
  5964 ;;		Nothing
  5965 ;; This function is called by:
  5966 ;;		_SYSTEM_Initialize
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text34
  5971  0013B6                     __ptext34:
  5972                           	opt stack 0
  5973  0013B6                     _OSCILLATOR_Initialize:
  5974                           	opt stack 25
  5975                           
  5976                           ;mcc.c: 123: OSCCON = 0x70;
  5977                           
  5978                           ; BSR set to: 15
  5979                           ;incstack = 0
  5980  0013B6  0E70               	movlw	112
  5981  0013B8  6ED3               	movwf	4051,c	;volatile
  5982                           
  5983                           ;mcc.c: 125: OSCCON2 = 0x04;
  5984  0013BA  0E04               	movlw	4
  5985  0013BC  6ED2               	movwf	4050,c	;volatile
  5986                           
  5987                           ;mcc.c: 127: OSCTUNE = 0x00;
  5988  0013BE  0E00               	movlw	0
  5989  0013C0  6E9B               	movwf	3995,c	;volatile
  5990  0013C2  0012               	return		;funcret
  5991  0013C4                     __end_of_OSCILLATOR_Initialize:
  5992                           	opt stack 0
  5993                           tblptru	equ	0xFF8
  5994                           tblptrh	equ	0xFF7
  5995                           tblptrl	equ	0xFF6
  5996                           tablat	equ	0xFF5
  5997                           prodh	equ	0xFF4
  5998                           prodl	equ	0xFF3
  5999                           intcon	equ	0xFF2
  6000                           intcon2	equ	0xFF1
  6001                           indf0	equ	0xFEF
  6002                           postinc0	equ	0xFEE
  6003                           fsr0h	equ	0xFEA
  6004                           fsr0l	equ	0xFE9
  6005                           wreg	equ	0xFE8
  6006                           postdec1	equ	0xFE5
  6007                           fsr1l	equ	0xFE1
  6008                           indf2	equ	0xFDF
  6009                           postinc2	equ	0xFDE
  6010                           postdec2	equ	0xFDD
  6011                           plusw2	equ	0xFDB
  6012                           fsr2h	equ	0xFDA
  6013                           fsr2l	equ	0xFD9
  6014                           status	equ	0xFD8
  6015                           
  6016 ;; *************** function _INTERRUPT_Initialize *****************
  6017 ;; Defined at:
  6018 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6019 ;; Parameters:    Size  Location     Type
  6020 ;;		None
  6021 ;; Auto vars:     Size  Location     Type
  6022 ;;		None
  6023 ;; Return value:  Size  Location     Type
  6024 ;;		None               void
  6025 ;; Registers used:
  6026 ;;		None
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6032 ;;      Params:         0       0       0       0       0       0       0
  6033 ;;      Locals:         0       0       0       0       0       0       0
  6034 ;;      Temps:          0       0       0       0       0       0       0
  6035 ;;      Totals:         0       0       0       0       0       0       0
  6036 ;;Total ram usage:        0 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    4
  6039 ;; This function calls:
  6040 ;;		Nothing
  6041 ;; This function is called by:
  6042 ;;		_SYSTEM_Initialize
  6043 ;; This function uses a non-reentrant model
  6044 ;;
  6045                           
  6046                           	psect	text35
  6047  0013D2                     __ptext35:
  6048                           	opt stack 0
  6049  0013D2                     _INTERRUPT_Initialize:
  6050                           	opt stack 25
  6051                           
  6052                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6053                           
  6054                           ;incstack = 0
  6055  0013D2  9ED0               	bcf	4048,7,c	;volatile
  6056                           
  6057                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  6058  0013D4  9AA5               	bcf	4005,5,c	;volatile
  6059                           
  6060                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  6061  0013D6  98A5               	bcf	4005,4,c	;volatile
  6062                           
  6063                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  6064  0013D8  9A9F               	bcf	3999,5,c	;volatile
  6065                           
  6066                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  6067  0013DA  989F               	bcf	3999,4,c	;volatile
  6068  0013DC  0012               	return		;funcret
  6069  0013DE                     __end_of_INTERRUPT_Initialize:
  6070                           	opt stack 0
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon2	equ	0xFF1
  6079                           indf0	equ	0xFEF
  6080                           postinc0	equ	0xFEE
  6081                           fsr0h	equ	0xFEA
  6082                           fsr0l	equ	0xFE9
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           plusw2	equ	0xFDB
  6090                           fsr2h	equ	0xFDA
  6091                           fsr2l	equ	0xFD9
  6092                           status	equ	0xFD8
  6093                           
  6094 ;; *************** function _EUSART2_Initialize *****************
  6095 ;; Defined at:
  6096 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;		None
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;		None
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg, status,2
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6110 ;;      Params:         0       0       0       0       0       0       0
  6111 ;;      Locals:         0       0       0       0       0       0       0
  6112 ;;      Temps:          0       0       0       0       0       0       0
  6113 ;;      Totals:         0       0       0       0       0       0       0
  6114 ;;Total ram usage:        0 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    4
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_SYSTEM_Initialize
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           	psect	text36
  6125  001090                     __ptext36:
  6126                           	opt stack 0
  6127  001090                     _EUSART2_Initialize:
  6128                           	opt stack 25
  6129                           
  6130                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  6131                           
  6132                           ;incstack = 0
  6133  001090  9AA3               	bcf	4003,5,c	;volatile
  6134                           
  6135                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  6136  001092  98A3               	bcf	4003,4,c	;volatile
  6137                           
  6138                           ;eusart2.c: 84: BAUD2CON = 0x48;
  6139  001094  0E48               	movlw	72
  6140  001096  6E70               	movwf	3952,c	;volatile
  6141                           
  6142                           ;eusart2.c: 87: RC2STA = 0x90;
  6143  001098  0E90               	movlw	144
  6144  00109A  6E71               	movwf	3953,c	;volatile
  6145                           
  6146                           ;eusart2.c: 90: TX2STA = 0x26;
  6147  00109C  0E26               	movlw	38
  6148  00109E  6E72               	movwf	3954,c	;volatile
  6149                           
  6150                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  6151  0010A0  0EA0               	movlw	160
  6152  0010A2  6E75               	movwf	3957,c	;volatile
  6153                           
  6154                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  6155  0010A4  0E01               	movlw	1
  6156  0010A6  6E76               	movwf	3958,c	;volatile
  6157                           
  6158                           ;eusart2.c: 100: eusart2TxHead = 0;
  6159  0010A8  0E00               	movlw	0
  6160  0010AA  6E38               	movwf	_eusart2TxHead,c
  6161                           
  6162                           ;eusart2.c: 101: eusart2TxTail = 0;
  6163  0010AC  0E00               	movlw	0
  6164  0010AE  6E39               	movwf	_eusart2TxTail,c
  6165                           
  6166                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  6167  0010B0  0E08               	movlw	8
  6168  0010B2  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  6169                           
  6170                           ;eusart2.c: 104: eusart2RxHead = 0;
  6171  0010B4  0E00               	movlw	0
  6172  0010B6  6E36               	movwf	_eusart2RxHead,c
  6173                           
  6174                           ;eusart2.c: 105: eusart2RxTail = 0;
  6175  0010B8  0E00               	movlw	0
  6176  0010BA  6E37               	movwf	_eusart2RxTail,c
  6177                           
  6178                           ;eusart2.c: 106: eusart2RxCount = 0;
  6179  0010BC  0E00               	movlw	0
  6180  0010BE  6E35               	movwf	_eusart2RxCount,c	;volatile
  6181                           
  6182                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  6183  0010C0  8AA3               	bsf	4003,5,c	;volatile
  6184  0010C2  0012               	return		;funcret
  6185  0010C4                     __end_of_EUSART2_Initialize:
  6186                           	opt stack 0
  6187                           tblptru	equ	0xFF8
  6188                           tblptrh	equ	0xFF7
  6189                           tblptrl	equ	0xFF6
  6190                           tablat	equ	0xFF5
  6191                           prodh	equ	0xFF4
  6192                           prodl	equ	0xFF3
  6193                           intcon	equ	0xFF2
  6194                           intcon2	equ	0xFF1
  6195                           indf0	equ	0xFEF
  6196                           postinc0	equ	0xFEE
  6197                           fsr0h	equ	0xFEA
  6198                           fsr0l	equ	0xFE9
  6199                           wreg	equ	0xFE8
  6200                           postdec1	equ	0xFE5
  6201                           fsr1l	equ	0xFE1
  6202                           indf2	equ	0xFDF
  6203                           postinc2	equ	0xFDE
  6204                           postdec2	equ	0xFDD
  6205                           plusw2	equ	0xFDB
  6206                           fsr2h	equ	0xFDA
  6207                           fsr2l	equ	0xFD9
  6208                           status	equ	0xFD8
  6209                           
  6210 ;; *************** function _NokiaStart *****************
  6211 ;; Defined at:
  6212 ;;		line 25 in file "NokiaLCD.c"
  6213 ;; Parameters:    Size  Location     Type
  6214 ;;		None
  6215 ;; Auto vars:     Size  Location     Type
  6216 ;;		None
  6217 ;; Return value:  Size  Location     Type
  6218 ;;		None               void
  6219 ;; Registers used:
  6220 ;;		wreg, status,2, status,0, cstack
  6221 ;; Tracked objects:
  6222 ;;		On entry : 0/0
  6223 ;;		On exit  : 0/0
  6224 ;;		Unchanged: 0/0
  6225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6226 ;;      Params:         0       0       0       0       0       0       0
  6227 ;;      Locals:         0       0       0       0       0       0       0
  6228 ;;      Temps:          0       0       0       0       0       0       0
  6229 ;;      Totals:         0       0       0       0       0       0       0
  6230 ;;Total ram usage:        0 bytes
  6231 ;; Hardware stack levels used:    1
  6232 ;; Hardware stack levels required when called:    7
  6233 ;; This function calls:
  6234 ;;		_Delay
  6235 ;;		_LCDwrite
  6236 ;;		_SPI1_Initialize
  6237 ;;		_clearLcd
  6238 ;; This function is called by:
  6239 ;;		_main
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           	psect	text37
  6244  000AAC                     __ptext37:
  6245                           	opt stack 0
  6246  000AAC                     _NokiaStart:
  6247                           	opt stack 23
  6248                           
  6249                           ;NokiaLCD.c: 26: TRISBbits.TRISB6 = 0;
  6250                           
  6251                           ;incstack = 0
  6252  000AAC  9C93               	bcf	3987,6,c	;volatile
  6253                           
  6254                           ;NokiaLCD.c: 27: do { TRISD0 = 0; } while(0);
  6255  000AAE  9095               	bcf	3989,0,c	;volatile
  6256                           
  6257                           ;NokiaLCD.c: 28: do { TRISD3 = 0; } while(0);
  6258  000AB0  9695               	bcf	3989,3,c	;volatile
  6259                           
  6260                           ;NokiaLCD.c: 29: do { TRISD2 = 0; } while(0);
  6261  000AB2  9495               	bcf	3989,2,c	;volatile
  6262                           
  6263                           ;NokiaLCD.c: 30: do { LATD0 = 1; } while(0);
  6264  000AB4  808C               	bsf	3980,0,c	;volatile
  6265                           
  6266                           ;NokiaLCD.c: 31: SPI1_Initialize();
  6267  000AB6  ECE2  F009         	call	_SPI1_Initialize	;wreg free
  6268                           
  6269                           ;NokiaLCD.c: 32: LATBbits.LATB6 = 1;
  6270  000ABA  8C8A               	bsf	3978,6,c	;volatile
  6271                           
  6272                           ;NokiaLCD.c: 33: Delay(100);
  6273  000ABC  0E64               	movlw	100
  6274  000ABE  6E1B               	movwf	Delay@wait,c
  6275  000AC0  0E00               	movlw	0
  6276  000AC2  6E1C               	movwf	Delay@wait+1,c
  6277  000AC4  0E00               	movlw	0
  6278  000AC6  6E1D               	movwf	Delay@wait+2,c
  6279  000AC8  0E00               	movlw	0
  6280  000ACA  6E1E               	movwf	Delay@wait+3,c
  6281  000ACC  ECA9  F007         	call	_Delay	;wreg free
  6282                           
  6283                           ;NokiaLCD.c: 34: LATBbits.LATB6 = 0;
  6284  000AD0  9C8A               	bcf	3978,6,c	;volatile
  6285                           
  6286                           ;NokiaLCD.c: 35: Delay(100);
  6287  000AD2  0E64               	movlw	100
  6288  000AD4  6E1B               	movwf	Delay@wait,c
  6289  000AD6  0E00               	movlw	0
  6290  000AD8  6E1C               	movwf	Delay@wait+1,c
  6291  000ADA  0E00               	movlw	0
  6292  000ADC  6E1D               	movwf	Delay@wait+2,c
  6293  000ADE  0E00               	movlw	0
  6294  000AE0  6E1E               	movwf	Delay@wait+3,c
  6295  000AE2  ECA9  F007         	call	_Delay	;wreg free
  6296                           
  6297                           ;NokiaLCD.c: 36: LATBbits.LATB6 = 1;
  6298  000AE6  8C8A               	bsf	3978,6,c	;volatile
  6299                           
  6300                           ;NokiaLCD.c: 37: LCDwrite(1, 0x21);
  6301  000AE8  0E21               	movlw	33
  6302  000AEA  6E21               	movwf	LCDwrite@data,c
  6303  000AEC  0E01               	movlw	1
  6304  000AEE  ECA7  F009         	call	_LCDwrite
  6305                           
  6306                           ;NokiaLCD.c: 38: LCDwrite(1, 0xC8);
  6307  000AF2  0EC8               	movlw	200
  6308  000AF4  6E21               	movwf	LCDwrite@data,c
  6309  000AF6  0E01               	movlw	1
  6310  000AF8  ECA7  F009         	call	_LCDwrite
  6311                           
  6312                           ;NokiaLCD.c: 39: LCDwrite(1, 0x04 | !!((66-2) & (1u << 6)));
  6313  000AFC  0E05               	movlw	5
  6314  000AFE  6E21               	movwf	LCDwrite@data,c
  6315  000B00  0E01               	movlw	1
  6316  000B02  ECA7  F009         	call	_LCDwrite
  6317                           
  6318                           ;NokiaLCD.c: 40: LCDwrite(1, 0x40 | ((66-2) & ((1u << 6) - 1)));
  6319  000B06  0E40               	movlw	64
  6320  000B08  6E21               	movwf	LCDwrite@data,c
  6321  000B0A  0E01               	movlw	1
  6322  000B0C  ECA7  F009         	call	_LCDwrite
  6323                           
  6324                           ;NokiaLCD.c: 42: LCDwrite(1, 0x14);
  6325  000B10  0E14               	movlw	20
  6326  000B12  6E21               	movwf	LCDwrite@data,c
  6327  000B14  0E01               	movlw	1
  6328  000B16  ECA7  F009         	call	_LCDwrite
  6329                           
  6330                           ;NokiaLCD.c: 43: LCDwrite(1, 0x20);
  6331  000B1A  0E20               	movlw	32
  6332  000B1C  6E21               	movwf	LCDwrite@data,c
  6333  000B1E  0E01               	movlw	1
  6334  000B20  ECA7  F009         	call	_LCDwrite
  6335                           
  6336                           ;NokiaLCD.c: 44: LCDwrite(1, 0x08);
  6337  000B24  0E08               	movlw	8
  6338  000B26  6E21               	movwf	LCDwrite@data,c
  6339  000B28  0E01               	movlw	1
  6340  000B2A  ECA7  F009         	call	_LCDwrite
  6341                           
  6342                           ;NokiaLCD.c: 45: LCDwrite(1, 0x0C);
  6343  000B2E  0E0C               	movlw	12
  6344  000B30  6E21               	movwf	LCDwrite@data,c
  6345  000B32  0E01               	movlw	1
  6346  000B34  ECA7  F009         	call	_LCDwrite
  6347                           
  6348                           ;NokiaLCD.c: 46: clearLcd();
  6349  000B38  EC40  F009         	call	_clearLcd	;wreg free
  6350  000B3C  0012               	return		;funcret
  6351  000B3E                     __end_of_NokiaStart:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           intcon2	equ	0xFF1
  6361                           indf0	equ	0xFEF
  6362                           postinc0	equ	0xFEE
  6363                           fsr0h	equ	0xFEA
  6364                           fsr0l	equ	0xFE9
  6365                           wreg	equ	0xFE8
  6366                           postdec1	equ	0xFE5
  6367                           fsr1l	equ	0xFE1
  6368                           indf2	equ	0xFDF
  6369                           postinc2	equ	0xFDE
  6370                           postdec2	equ	0xFDD
  6371                           plusw2	equ	0xFDB
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _clearLcd *****************
  6377 ;; Defined at:
  6378 ;;		line 68 in file "NokiaLCD.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  res             2   34[COMRAM] int 
  6383 ;; Return value:  Size  Location     Type
  6384 ;;		None               void
  6385 ;; Registers used:
  6386 ;;		wreg, status,2, status,0, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6392 ;;      Params:         0       0       0       0       0       0       0
  6393 ;;      Locals:         2       0       0       0       0       0       0
  6394 ;;      Temps:          0       0       0       0       0       0       0
  6395 ;;      Totals:         2       0       0       0       0       0       0
  6396 ;;Total ram usage:        2 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    6
  6399 ;; This function calls:
  6400 ;;		_LCDwrite
  6401 ;; This function is called by:
  6402 ;;		_main
  6403 ;;		_NokiaStart
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text38
  6408  001280                     __ptext38:
  6409                           	opt stack 0
  6410  001280                     _clearLcd:
  6411                           	opt stack 24
  6412                           
  6413                           ;NokiaLCD.c: 69: int res;
  6414                           ;NokiaLCD.c: 70: for(res=0;res<504;res++){
  6415                           
  6416                           ;incstack = 0
  6417  001280  0E00               	movlw	0
  6418  001282  6E24               	movwf	clearLcd@res+1,c
  6419  001284  0E00               	movlw	0
  6420  001286  6E23               	movwf	clearLcd@res,c
  6421  001288                     l3390:
  6422  001288  BE24               	btfsc	clearLcd@res+1,7,c
  6423  00128A  D006               	goto	l3394
  6424  00128C  0EF8               	movlw	248
  6425  00128E  5C23               	subwf	clearLcd@res,w,c
  6426  001290  0E01               	movlw	1
  6427  001292  5824               	subwfb	clearLcd@res+1,w,c
  6428  001294  B0D8               	btfsc	status,0,c
  6429  001296  0012               	return	
  6430  001298                     l3394:
  6431                           
  6432                           ;NokiaLCD.c: 71: LCDwrite(0, 0x00);
  6433  001298  0E00               	movlw	0
  6434  00129A  6E21               	movwf	LCDwrite@data,c
  6435  00129C  0E00               	movlw	0
  6436  00129E  ECA7  F009         	call	_LCDwrite
  6437  0012A2  4A23               	infsnz	clearLcd@res,f,c
  6438  0012A4  2A24               	incf	clearLcd@res+1,f,c
  6439  0012A6  D7F0               	goto	l3390
  6440  0012A8                     __end_of_clearLcd:
  6441                           	opt stack 0
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           intcon	equ	0xFF2
  6449                           intcon2	equ	0xFF1
  6450                           indf0	equ	0xFEF
  6451                           postinc0	equ	0xFEE
  6452                           fsr0h	equ	0xFEA
  6453                           fsr0l	equ	0xFE9
  6454                           wreg	equ	0xFE8
  6455                           postdec1	equ	0xFE5
  6456                           fsr1l	equ	0xFE1
  6457                           indf2	equ	0xFDF
  6458                           postinc2	equ	0xFDE
  6459                           postdec2	equ	0xFDD
  6460                           plusw2	equ	0xFDB
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _LCDwrite *****************
  6466 ;; Defined at:
  6467 ;;		line 49 in file "NokiaLCD.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  mode            1    wreg     unsigned char 
  6470 ;;  data            1   32[COMRAM] unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  mode            1   33[COMRAM] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6482 ;;      Params:         1       0       0       0       0       0       0
  6483 ;;      Locals:         1       0       0       0       0       0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0
  6485 ;;      Totals:         2       0       0       0       0       0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    5
  6489 ;; This function calls:
  6490 ;;		_SPI1_Exchange8bit
  6491 ;; This function is called by:
  6492 ;;		_NokiaStart
  6493 ;;		_clearLcd
  6494 ;;		_gotoXy
  6495 ;;		_LcdCharacter
  6496 ;;		_blackLcd
  6497 ;; This function uses a non-reentrant model
  6498 ;;
  6499                           
  6500                           	psect	text39
  6501  00134E                     __ptext39:
  6502                           	opt stack 0
  6503  00134E                     _LCDwrite:
  6504                           	opt stack 24
  6505                           
  6506                           ;incstack = 0
  6507                           ;LCDwrite@mode stored from wreg
  6508  00134E  6E22               	movwf	LCDwrite@mode,c
  6509                           
  6510                           ;NokiaLCD.c: 50: if(mode){
  6511  001350  5022               	movf	LCDwrite@mode,w,c
  6512  001352  B4D8               	btfsc	status,2,c
  6513  001354  D002               	goto	l766
  6514                           
  6515                           ;NokiaLCD.c: 51: do { LATD3 = 0; } while(0);
  6516  001356  968C               	bcf	3980,3,c	;volatile
  6517                           
  6518                           ;NokiaLCD.c: 52: }
  6519  001358  D001               	goto	l768
  6520  00135A                     l766:
  6521  00135A  868C               	bsf	3980,3,c	;volatile
  6522  00135C                     l768:
  6523  00135C  908C               	bcf	3980,0,c	;volatile
  6524                           
  6525                           ;NokiaLCD.c: 57: SPI1_Exchange8bit(data);
  6526  00135E  5021               	movf	LCDwrite@data,w,c
  6527  001360  ECD3  F009         	call	_SPI1_Exchange8bit
  6528                           
  6529                           ;NokiaLCD.c: 58: do { LATD0 = 1; } while(0);
  6530  001364  808C               	bsf	3980,0,c	;volatile
  6531  001366  0012               	return	
  6532  001368                     __end_of_LCDwrite:
  6533                           	opt stack 0
  6534                           tblptru	equ	0xFF8
  6535                           tblptrh	equ	0xFF7
  6536                           tblptrl	equ	0xFF6
  6537                           tablat	equ	0xFF5
  6538                           prodh	equ	0xFF4
  6539                           prodl	equ	0xFF3
  6540                           intcon	equ	0xFF2
  6541                           intcon2	equ	0xFF1
  6542                           indf0	equ	0xFEF
  6543                           postinc0	equ	0xFEE
  6544                           fsr0h	equ	0xFEA
  6545                           fsr0l	equ	0xFE9
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1l	equ	0xFE1
  6549                           indf2	equ	0xFDF
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           plusw2	equ	0xFDB
  6553                           fsr2h	equ	0xFDA
  6554                           fsr2l	equ	0xFD9
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _SPI1_Exchange8bit *****************
  6558 ;; Defined at:
  6559 ;;		line 78 in file "mcc_generated_files/spi1.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  data            1    wreg     unsigned char 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  data            1   26[COMRAM] unsigned char 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  1    wreg      unsigned char 
  6566 ;; Registers used:
  6567 ;;		wreg, status,2
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6573 ;;      Params:         0       0       0       0       0       0       0
  6574 ;;      Locals:         1       0       0       0       0       0       0
  6575 ;;      Temps:          0       0       0       0       0       0       0
  6576 ;;      Totals:         1       0       0       0       0       0       0
  6577 ;;Total ram usage:        1 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    4
  6580 ;; This function calls:
  6581 ;;		Nothing
  6582 ;; This function is called by:
  6583 ;;		_LCDwrite
  6584 ;;		_SPI1_Exchange8bitBuffer
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           	psect	text40
  6589  0013A6                     __ptext40:
  6590                           	opt stack 0
  6591  0013A6                     _SPI1_Exchange8bit:
  6592                           	opt stack 24
  6593                           
  6594                           ;incstack = 0
  6595                           ;SPI1_Exchange8bit@data stored from wreg
  6596  0013A6  6E1B               	movwf	SPI1_Exchange8bit@data,c
  6597                           
  6598                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  6599  0013A8  9EC6               	bcf	4038,7,c	;volatile
  6600                           
  6601                           ;spi1.c: 83: SSP1BUF = data;
  6602  0013AA  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  6603  0013AE                     l188:
  6604  0013AE  A0C7               	btfss	4039,0,c	;volatile
  6605  0013B0  D7FE               	goto	l188
  6606                           
  6607                           ;spi1.c: 87: }
  6608                           ;spi1.c: 89: return (SSP1BUF);
  6609  0013B2  50C9               	movf	4041,w,c	;volatile
  6610  0013B4  0012               	return		;funcret
  6611  0013B6                     __end_of_SPI1_Exchange8bit:
  6612                           	opt stack 0
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodh	equ	0xFF4
  6618                           prodl	equ	0xFF3
  6619                           intcon	equ	0xFF2
  6620                           intcon2	equ	0xFF1
  6621                           indf0	equ	0xFEF
  6622                           postinc0	equ	0xFEE
  6623                           fsr0h	equ	0xFEA
  6624                           fsr0l	equ	0xFE9
  6625                           wreg	equ	0xFE8
  6626                           postdec1	equ	0xFE5
  6627                           fsr1l	equ	0xFE1
  6628                           indf2	equ	0xFDF
  6629                           postinc2	equ	0xFDE
  6630                           postdec2	equ	0xFDD
  6631                           plusw2	equ	0xFDB
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _SPI1_Initialize *****************
  6637 ;; Defined at:
  6638 ;;		line 64 in file "mcc_generated_files/spi1.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;		None               void
  6645 ;; Registers used:
  6646 ;;		wreg, status,2
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6652 ;;      Params:         0       0       0       0       0       0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       0       0       0       0       0
  6655 ;;      Totals:         0       0       0       0       0       0       0
  6656 ;;Total ram usage:        0 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    4
  6659 ;; This function calls:
  6660 ;;		Nothing
  6661 ;; This function is called by:
  6662 ;;		_NokiaStart
  6663 ;; This function uses a non-reentrant model
  6664 ;;
  6665                           
  6666                           	psect	text41
  6667  0013C4                     __ptext41:
  6668                           	opt stack 0
  6669  0013C4                     _SPI1_Initialize:
  6670                           	opt stack 25
  6671                           
  6672                           ;spi1.c: 69: SSP1STAT = 0x80;
  6673                           
  6674                           ;incstack = 0
  6675  0013C4  0E80               	movlw	128
  6676  0013C6  6EC7               	movwf	4039,c	;volatile
  6677                           
  6678                           ;spi1.c: 72: SSP1CON1 = 0x30;
  6679  0013C8  0E30               	movlw	48
  6680  0013CA  6EC6               	movwf	4038,c	;volatile
  6681                           
  6682                           ;spi1.c: 75: SSP1ADD = 0x00;
  6683  0013CC  0E00               	movlw	0
  6684  0013CE  6EC8               	movwf	4040,c	;volatile
  6685  0013D0  0012               	return		;funcret
  6686  0013D2                     __end_of_SPI1_Initialize:
  6687                           	opt stack 0
  6688                           tblptru	equ	0xFF8
  6689                           tblptrh	equ	0xFF7
  6690                           tblptrl	equ	0xFF6
  6691                           tablat	equ	0xFF5
  6692                           prodh	equ	0xFF4
  6693                           prodl	equ	0xFF3
  6694                           intcon	equ	0xFF2
  6695                           intcon2	equ	0xFF1
  6696                           indf0	equ	0xFEF
  6697                           postinc0	equ	0xFEE
  6698                           fsr0h	equ	0xFEA
  6699                           fsr0l	equ	0xFE9
  6700                           wreg	equ	0xFE8
  6701                           postdec1	equ	0xFE5
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           postinc2	equ	0xFDE
  6705                           postdec2	equ	0xFDD
  6706                           plusw2	equ	0xFDB
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function _Delay *****************
  6712 ;; Defined at:
  6713 ;;		line 15 in file "Functions.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  wait            4   26[COMRAM] long 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  i               4   31[COMRAM] long 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;		None               void
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6727 ;;      Params:         4       0       0       0       0       0       0
  6728 ;;      Locals:         4       0       0       0       0       0       0
  6729 ;;      Temps:          1       0       0       0       0       0       0
  6730 ;;      Totals:         9       0       0       0       0       0       0
  6731 ;;Total ram usage:        9 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    4
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_main
  6738 ;;		_respondChargerAsECU
  6739 ;;		_Precharge
  6740 ;;		_NokiaStart
  6741 ;;		_SetBMM
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text42
  6746  000F52                     __ptext42:
  6747                           	opt stack 0
  6748  000F52                     _Delay:
  6749                           	opt stack 24
  6750                           
  6751                           ;Functions.c: 16: long int i = 0;
  6752                           
  6753                           ;incstack = 0
  6754  000F52  0E00               	movlw	0
  6755  000F54  6E20               	movwf	Delay@i,c
  6756  000F56  0E00               	movlw	0
  6757  000F58  6E21               	movwf	Delay@i+1,c
  6758  000F5A  0E00               	movlw	0
  6759  000F5C  6E22               	movwf	Delay@i+2,c
  6760  000F5E  0E00               	movlw	0
  6761  000F60  6E23               	movwf	Delay@i+3,c
  6762                           
  6763                           ;Functions.c: 17: for (; wait > i; i++) {
  6764  000F62  D00E               	goto	l3296
  6765  000F64                     l3292:
  6766                           
  6767                           ;Functions.c: 18: _delay((unsigned long)((1)*(16000000/4000.0)));
  6768  000F64  0E06               	movlw	6
  6769  000F66  6E1F               	movwf	??_Delay& (0+255),c
  6770  000F68  0E30               	movlw	48
  6771  000F6A                     u2607:
  6772  000F6A  2EE8               	decfsz	wreg,f,c
  6773  000F6C  D7FE               	goto	u2607
  6774  000F6E  2E1F               	decfsz	??_Delay& (0+255),f,c
  6775  000F70  D7FC               	goto	u2607
  6776  000F72  D000               	nop2	
  6777  000F74  0E01               	movlw	1
  6778  000F76  2620               	addwf	Delay@i,f,c
  6779  000F78  0E00               	movlw	0
  6780  000F7A  2221               	addwfc	Delay@i+1,f,c
  6781  000F7C  2222               	addwfc	Delay@i+2,f,c
  6782  000F7E  2223               	addwfc	Delay@i+3,f,c
  6783  000F80                     l3296:
  6784  000F80  501B               	movf	Delay@wait,w,c
  6785  000F82  5C20               	subwf	Delay@i,w,c
  6786  000F84  501C               	movf	Delay@wait+1,w,c
  6787  000F86  5821               	subwfb	Delay@i+1,w,c
  6788  000F88  501D               	movf	Delay@wait+2,w,c
  6789  000F8A  5822               	subwfb	Delay@i+2,w,c
  6790  000F8C  5023               	movf	Delay@i+3,w,c
  6791  000F8E  0A80               	xorlw	128
  6792  000F90  6E1F               	movwf	??_Delay& (0+255),c
  6793  000F92  501E               	movf	Delay@wait+3,w,c
  6794  000F94  0A80               	xorlw	128
  6795  000F96  581F               	subwfb	??_Delay& (0+255),w,c
  6796  000F98  B0D8               	btfsc	status,0,c
  6797  000F9A  0012               	return	
  6798  000F9C  D7E3               	goto	l3292
  6799  000F9E                     __end_of_Delay:
  6800                           	opt stack 0
  6801                           tblptru	equ	0xFF8
  6802                           tblptrh	equ	0xFF7
  6803                           tblptrl	equ	0xFF6
  6804                           tablat	equ	0xFF5
  6805                           prodh	equ	0xFF4
  6806                           prodl	equ	0xFF3
  6807                           intcon	equ	0xFF2
  6808                           intcon2	equ	0xFF1
  6809                           indf0	equ	0xFEF
  6810                           postinc0	equ	0xFEE
  6811                           fsr0h	equ	0xFEA
  6812                           fsr0l	equ	0xFE9
  6813                           wreg	equ	0xFE8
  6814                           postdec1	equ	0xFE5
  6815                           fsr1l	equ	0xFE1
  6816                           indf2	equ	0xFDF
  6817                           postinc2	equ	0xFDE
  6818                           postdec2	equ	0xFDD
  6819                           plusw2	equ	0xFDB
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _INTERRUPT_InterruptManager *****************
  6825 ;; Defined at:
  6826 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;		None
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;		None
  6831 ;; Return value:  Size  Location     Type
  6832 ;;		None               void
  6833 ;; Registers used:
  6834 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6840 ;;      Params:         0       0       0       0       0       0       0
  6841 ;;      Locals:         0       0       0       0       0       0       0
  6842 ;;      Temps:         14       0       0       0       0       0       0
  6843 ;;      Totals:        14       0       0       0       0       0       0
  6844 ;;Total ram usage:       14 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    3
  6847 ;; This function calls:
  6848 ;;		_EUSART1_Receive_ISR
  6849 ;;		_EUSART1_Transmit_ISR
  6850 ;;		_EUSART2_Receive_ISR
  6851 ;;		_EUSART2_Transmit_ISR
  6852 ;; This function is called by:
  6853 ;;		Interrupt level 2
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	intcode
  6858  000008                     __pintcode:
  6859                           	opt stack 0
  6860  000008                     _INTERRUPT_InterruptManager:
  6861                           	opt stack 22
  6862                           
  6863                           ;incstack = 0
  6864  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6865  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6866  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6867  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6868  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6869  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6870  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6871  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6872  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6873  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6874  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6875  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6876  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6877  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6878  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6879                           
  6880                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6881  000042  BAA3               	btfsc	4003,5,c	;volatile
  6882  000044  AAA4               	btfss	4004,5,c	;volatile
  6883  000046  D003               	goto	i2l140
  6884                           
  6885                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6886  000048  ECEC  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6887                           
  6888                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6889  00004C  D011               	goto	i2l148
  6890  00004E                     i2l140:
  6891  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6892  000050  A8A4               	btfss	4004,4,c	;volatile
  6893  000052  D003               	goto	i2l142
  6894                           
  6895                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6896  000054  EC93  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6897                           
  6898                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6899  000058  D00B               	goto	i2l148
  6900  00005A                     i2l142:
  6901  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6902  00005C  AA9E               	btfss	3998,5,c	;volatile
  6903  00005E  D003               	goto	i2l144
  6904                           
  6905                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6906  000060  EC98  F009         	call	_EUSART1_Receive_ISR	;wreg free
  6907                           
  6908                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6909  000064  D005               	goto	i2l148
  6910  000066                     i2l144:
  6911  000066  B89D               	btfsc	3997,4,c	;volatile
  6912  000068  A89E               	btfss	3998,4,c	;volatile
  6913  00006A  D002               	goto	i2l148
  6914                           
  6915                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6916  00006C  EC62  F008         	call	_EUSART1_Transmit_ISR	;wreg free
  6917  000070                     i2l148:
  6918  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6919  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6920  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6921  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6922  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6923  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6924  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6925  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6926  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6927  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6928  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6929  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6930  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6931  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6932  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6933  0000AA  0011               	retfie		f
  6934  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6935                           	opt stack 0
  6936                           pclatu	equ	0xFFB
  6937                           pclath	equ	0xFFA
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           intcon	equ	0xFF2
  6945                           intcon2	equ	0xFF1
  6946                           indf0	equ	0xFEF
  6947                           postinc0	equ	0xFEE
  6948                           fsr0h	equ	0xFEA
  6949                           fsr0l	equ	0xFE9
  6950                           wreg	equ	0xFE8
  6951                           postdec1	equ	0xFE5
  6952                           fsr1h	equ	0xFE2
  6953                           fsr1l	equ	0xFE1
  6954                           indf2	equ	0xFDF
  6955                           postinc2	equ	0xFDE
  6956                           postdec2	equ	0xFDD
  6957                           plusw2	equ	0xFDB
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function _EUSART2_Transmit_ISR *****************
  6963 ;; Defined at:
  6964 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;		None
  6969 ;; Return value:  Size  Location     Type
  6970 ;;		None               void
  6971 ;; Registers used:
  6972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6978 ;;      Params:         0       0       0       0       0       0       0
  6979 ;;      Locals:         0       0       0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0
  6981 ;;      Totals:         0       0       0       0       0       0       0
  6982 ;;Total ram usage:        0 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_INTERRUPT_InterruptManager
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text44
  6992  001126                     __ptext44:
  6993                           	opt stack 0
  6994  001126                     _EUSART2_Transmit_ISR:
  6995                           	opt stack 24
  6996                           
  6997                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6998                           
  6999                           ;incstack = 0
  7000  001126  0E08               	movlw	8
  7001  001128  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  7002  00112A  D012               	goto	i2l62
  7003                           
  7004                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  7005  00112C  5039               	movf	_eusart2TxTail,w,c
  7006  00112E  0D01               	mullw	1
  7007  001130  0E9B               	movlw	low _eusart2TxBuffer
  7008  001132  24F3               	addwf	prodl,w,c
  7009  001134  6ED9               	movwf	fsr2l,c
  7010  001136  0E00               	movlw	high _eusart2TxBuffer
  7011  001138  20F4               	addwfc	prodh,w,c
  7012  00113A  6EDA               	movwf	fsr2h,c
  7013  00113C  50DF               	movf	indf2,w,c
  7014  00113E  6E73               	movwf	3955,c	;volatile
  7015  001140  2A39               	incf	_eusart2TxTail,f,c
  7016                           
  7017                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  7018  001142  0E07               	movlw	7
  7019  001144  6439               	cpfsgt	_eusart2TxTail,c
  7020  001146  D002               	goto	i2l2858
  7021                           
  7022                           ;eusart2.c: 161: eusart2TxTail = 0;
  7023  001148  0E00               	movlw	0
  7024  00114A  6E39               	movwf	_eusart2TxTail,c
  7025  00114C                     i2l2858:
  7026                           
  7027                           ;eusart2.c: 162: }
  7028                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  7029  00114C  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  7030                           
  7031                           ;eusart2.c: 164: } else {
  7032  00114E  0012               	return	
  7033  001150                     i2l62:
  7034                           
  7035                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  7036  001150  98A3               	bcf	4003,4,c	;volatile
  7037  001152  0012               	return	
  7038  001154                     __end_of_EUSART2_Transmit_ISR:
  7039                           	opt stack 0
  7040                           pclatu	equ	0xFFB
  7041                           pclath	equ	0xFFA
  7042                           tblptru	equ	0xFF8
  7043                           tblptrh	equ	0xFF7
  7044                           tblptrl	equ	0xFF6
  7045                           tablat	equ	0xFF5
  7046                           prodh	equ	0xFF4
  7047                           prodl	equ	0xFF3
  7048                           intcon	equ	0xFF2
  7049                           intcon2	equ	0xFF1
  7050                           indf0	equ	0xFEF
  7051                           postinc0	equ	0xFEE
  7052                           fsr0h	equ	0xFEA
  7053                           fsr0l	equ	0xFE9
  7054                           wreg	equ	0xFE8
  7055                           postdec1	equ	0xFE5
  7056                           fsr1h	equ	0xFE2
  7057                           fsr1l	equ	0xFE1
  7058                           indf2	equ	0xFDF
  7059                           postinc2	equ	0xFDE
  7060                           postdec2	equ	0xFDD
  7061                           plusw2	equ	0xFDB
  7062                           fsr2h	equ	0xFDA
  7063                           fsr2l	equ	0xFD9
  7064                           status	equ	0xFD8
  7065                           
  7066 ;; *************** function _EUSART2_Receive_ISR *****************
  7067 ;; Defined at:
  7068 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  7069 ;; Parameters:    Size  Location     Type
  7070 ;;		None
  7071 ;; Auto vars:     Size  Location     Type
  7072 ;;		None
  7073 ;; Return value:  Size  Location     Type
  7074 ;;		None               void
  7075 ;; Registers used:
  7076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7082 ;;      Params:         0       0       0       0       0       0       0
  7083 ;;      Locals:         0       0       0       0       0       0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0
  7085 ;;      Totals:         0       0       0       0       0       0       0
  7086 ;;Total ram usage:        0 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; This function calls:
  7089 ;;		Nothing
  7090 ;; This function is called by:
  7091 ;;		_INTERRUPT_InterruptManager
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text45
  7096  0011D8                     __ptext45:
  7097                           	opt stack 0
  7098  0011D8                     _EUSART2_Receive_ISR:
  7099                           	opt stack 24
  7100                           
  7101                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  7102                           
  7103                           ;incstack = 0
  7104  0011D8  A271               	btfss	3953,1,c	;volatile
  7105  0011DA  D002               	goto	i2l2864
  7106                           
  7107                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  7108  0011DC  9871               	bcf	3953,4,c	;volatile
  7109                           
  7110                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  7111  0011DE  8871               	bsf	3953,4,c	;volatile
  7112  0011E0                     i2l2864:
  7113                           
  7114                           ;eusart2.c: 175: }
  7115                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  7116  0011E0  5036               	movf	_eusart2RxHead,w,c
  7117  0011E2  0D01               	mullw	1
  7118  0011E4  0E93               	movlw	low _eusart2RxBuffer
  7119  0011E6  24F3               	addwf	prodl,w,c
  7120  0011E8  6ED9               	movwf	fsr2l,c
  7121  0011EA  0E00               	movlw	high _eusart2RxBuffer
  7122  0011EC  20F4               	addwfc	prodh,w,c
  7123  0011EE  6EDA               	movwf	fsr2h,c
  7124  0011F0  CF74 FFDF          	movff	3956,indf2	;volatile
  7125  0011F4  2A36               	incf	_eusart2RxHead,f,c
  7126                           
  7127                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  7128  0011F6  0E07               	movlw	7
  7129  0011F8  6436               	cpfsgt	_eusart2RxHead,c
  7130  0011FA  D002               	goto	i2l2872
  7131                           
  7132                           ;eusart2.c: 180: eusart2RxHead = 0;
  7133  0011FC  0E00               	movlw	0
  7134  0011FE  6E36               	movwf	_eusart2RxHead,c
  7135  001200                     i2l2872:
  7136                           
  7137                           ;eusart2.c: 181: }
  7138                           ;eusart2.c: 182: eusart2RxCount++;
  7139  001200  2A35               	incf	_eusart2RxCount,f,c	;volatile
  7140  001202  0012               	return		;funcret
  7141  001204                     __end_of_EUSART2_Receive_ISR:
  7142                           	opt stack 0
  7143                           pclatu	equ	0xFFB
  7144                           pclath	equ	0xFFA
  7145                           tblptru	equ	0xFF8
  7146                           tblptrh	equ	0xFF7
  7147                           tblptrl	equ	0xFF6
  7148                           tablat	equ	0xFF5
  7149                           prodh	equ	0xFF4
  7150                           prodl	equ	0xFF3
  7151                           intcon	equ	0xFF2
  7152                           intcon2	equ	0xFF1
  7153                           indf0	equ	0xFEF
  7154                           postinc0	equ	0xFEE
  7155                           fsr0h	equ	0xFEA
  7156                           fsr0l	equ	0xFE9
  7157                           wreg	equ	0xFE8
  7158                           postdec1	equ	0xFE5
  7159                           fsr1h	equ	0xFE2
  7160                           fsr1l	equ	0xFE1
  7161                           indf2	equ	0xFDF
  7162                           postinc2	equ	0xFDE
  7163                           postdec2	equ	0xFDD
  7164                           plusw2	equ	0xFDB
  7165                           fsr2h	equ	0xFDA
  7166                           fsr2l	equ	0xFD9
  7167                           status	equ	0xFD8
  7168                           
  7169 ;; *************** function _EUSART1_Transmit_ISR *****************
  7170 ;; Defined at:
  7171 ;;		line 150 in file "UART.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;                  2  134[None  ] int 
  7178 ;; Registers used:
  7179 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7185 ;;      Params:         0       0       0       0       0       0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0
  7187 ;;      Temps:          0       0       0       0       0       0       0
  7188 ;;      Totals:         0       0       0       0       0       0       0
  7189 ;;Total ram usage:        0 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    2
  7192 ;; This function calls:
  7193 ;;		_UART_buff_get
  7194 ;;		_UART_buff_size
  7195 ;; This function is called by:
  7196 ;;		_INTERRUPT_InterruptManager
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           	psect	text46
  7201  0010C4                     __ptext46:
  7202                           	opt stack 0
  7203  0010C4                     _EUSART1_Transmit_ISR:
  7204                           	opt stack 22
  7205                           
  7206                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7207                           
  7208                           ;incstack = 0
  7209  0010C4  0E00               	movlw	low _output_buffer
  7210  0010C6  6E01               	movwf	UART_buff_size@_this,c
  7211  0010C8  0E03               	movlw	high _output_buffer
  7212  0010CA  6E02               	movwf	UART_buff_size@_this+1,c
  7213  0010CC  ECBF  F009         	call	_UART_buff_size	;wreg free
  7214  0010D0  BE02               	btfsc	?_UART_buff_size+1,7,c
  7215  0010D2  D00D               	goto	i2l2884
  7216  0010D4  5002               	movf	?_UART_buff_size+1,w,c
  7217  0010D6  E103               	bnz	i2u163_40
  7218  0010D8  0401               	decf	?_UART_buff_size,w,c
  7219  0010DA  A0D8               	btfss	status,0,c
  7220  0010DC  D008               	goto	i2l2884
  7221  0010DE                     i2u163_40:
  7222                           
  7223                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7224  0010DE  0E00               	movlw	low _output_buffer
  7225  0010E0  6E07               	movwf	UART_buff_get@_this,c
  7226  0010E2  0E03               	movlw	high _output_buffer
  7227  0010E4  6E08               	movwf	UART_buff_get@_this+1,c
  7228  0010E6  EC9F  F005         	call	_UART_buff_get	;wreg free
  7229  0010EA  6EAD               	movwf	4013,c	;volatile
  7230                           
  7231                           ;UART.c: 154: } else {
  7232  0010EC  0012               	return	
  7233  0010EE                     i2l2884:
  7234                           
  7235                           ;UART.c: 155: Transmit_stall = 1;
  7236  0010EE  0E01               	movlw	1
  7237  0010F0  6E44               	movwf	_Transmit_stall,c
  7238                           
  7239                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7240  0010F2  989D               	bcf	3997,4,c	;volatile
  7241  0010F4  0012               	return	
  7242  0010F6                     __end_of_EUSART1_Transmit_ISR:
  7243                           	opt stack 0
  7244                           pclatu	equ	0xFFB
  7245                           pclath	equ	0xFFA
  7246                           tblptru	equ	0xFF8
  7247                           tblptrh	equ	0xFF7
  7248                           tblptrl	equ	0xFF6
  7249                           tablat	equ	0xFF5
  7250                           prodh	equ	0xFF4
  7251                           prodl	equ	0xFF3
  7252                           intcon	equ	0xFF2
  7253                           intcon2	equ	0xFF1
  7254                           indf0	equ	0xFEF
  7255                           postinc0	equ	0xFEE
  7256                           fsr0h	equ	0xFEA
  7257                           fsr0l	equ	0xFE9
  7258                           wreg	equ	0xFE8
  7259                           postdec1	equ	0xFE5
  7260                           fsr1h	equ	0xFE2
  7261                           fsr1l	equ	0xFE1
  7262                           indf2	equ	0xFDF
  7263                           postinc2	equ	0xFDE
  7264                           postdec2	equ	0xFDD
  7265                           plusw2	equ	0xFDB
  7266                           fsr2h	equ	0xFDA
  7267                           fsr2l	equ	0xFD9
  7268                           status	equ	0xFD8
  7269                           
  7270 ;; *************** function _UART_buff_size *****************
  7271 ;; Defined at:
  7272 ;;		line 102 in file "UART.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7275 ;;		 -> output_buffer(206), input_buffer(206), 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;		None
  7278 ;; Return value:  Size  Location     Type
  7279 ;;                  2    0[COMRAM] int 
  7280 ;; Registers used:
  7281 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7287 ;;      Params:         2       0       0       0       0       0       0
  7288 ;;      Locals:         0       0       0       0       0       0       0
  7289 ;;      Temps:          0       0       0       0       0       0       0
  7290 ;;      Totals:         2       0       0       0       0       0       0
  7291 ;;Total ram usage:        2 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; This function calls:
  7294 ;;		Nothing
  7295 ;; This function is called by:
  7296 ;;		_EUSART1_Transmit_ISR
  7297 ;;		_Receive_available
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           	psect	text47
  7302  00137E                     __ptext47:
  7303                           	opt stack 0
  7304  00137E                     _UART_buff_size:
  7305                           	opt stack 23
  7306                           
  7307                           ;UART.c: 103: return (_this->count);
  7308                           
  7309                           ;incstack = 0
  7310  00137E  EE20 F0CC          	lfsr	2,204
  7311  001382  5001               	movf	UART_buff_size@_this,w,c
  7312  001384  26D9               	addwf	fsr2l,f,c
  7313  001386  5002               	movf	UART_buff_size@_this+1,w,c
  7314  001388  22DA               	addwfc	fsr2h,f,c
  7315  00138A  CFDE F001          	movff	postinc2,?_UART_buff_size
  7316  00138E  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  7317  001392  0012               	return	
  7318  001394                     __end_of_UART_buff_size:
  7319                           	opt stack 0
  7320                           pclatu	equ	0xFFB
  7321                           pclath	equ	0xFFA
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           intcon2	equ	0xFF1
  7330                           indf0	equ	0xFEF
  7331                           postinc0	equ	0xFEE
  7332                           fsr0h	equ	0xFEA
  7333                           fsr0l	equ	0xFE9
  7334                           wreg	equ	0xFE8
  7335                           postdec1	equ	0xFE5
  7336                           fsr1h	equ	0xFE2
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           plusw2	equ	0xFDB
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function _UART_buff_get *****************
  7347 ;; Defined at:
  7348 ;;		line 81 in file "UART.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7351 ;;		 -> output_buffer(206), input_buffer(206), 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  c               1   10[COMRAM] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7363 ;;      Params:         2       0       0       0       0       0       0
  7364 ;;      Locals:         1       0       0       0       0       0       0
  7365 ;;      Temps:          2       0       0       0       0       0       0
  7366 ;;      Totals:         5       0       0       0       0       0       0
  7367 ;;Total ram usage:        5 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    1
  7370 ;; This function calls:
  7371 ;;		_UART_buff_modulo_inc
  7372 ;; This function is called by:
  7373 ;;		_EUSART1_Transmit_ISR
  7374 ;;		_Receive_get
  7375 ;;		_Send_put
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           	psect	text48
  7380  000B3E                     __ptext48:
  7381                           	opt stack 0
  7382  000B3E                     _UART_buff_get:
  7383                           	opt stack 22
  7384                           
  7385                           ;UART.c: 82: unsigned char c;
  7386                           ;UART.c: 83: if (_this->count > 0) {
  7387                           
  7388                           ;incstack = 0
  7389  000B3E  EE20 F0CC          	lfsr	2,204
  7390  000B42  5007               	movf	UART_buff_get@_this,w,c
  7391  000B44  26D9               	addwf	fsr2l,f,c
  7392  000B46  5008               	movf	UART_buff_get@_this+1,w,c
  7393  000B48  22DA               	addwfc	fsr2h,f,c
  7394  000B4A  0E01               	movlw	1
  7395  000B4C  BEDB               	btfsc	plusw2,7,c
  7396  000B4E  D03C               	goto	i2l2804
  7397  000B50  0E01               	movlw	1
  7398  000B52  50DB               	movf	plusw2,w,c
  7399  000B54  E103               	bnz	i2u154_40
  7400  000B56  04DE               	decf	postinc2,w,c
  7401  000B58  A0D8               	btfss	status,0,c
  7402  000B5A  D036               	goto	i2l2804
  7403  000B5C                     i2u154_40:
  7404                           
  7405                           ;UART.c: 84: c = _this->buf[_this->tail];
  7406  000B5C  EE20 F0CA          	lfsr	2,202
  7407  000B60  5007               	movf	UART_buff_get@_this,w,c
  7408  000B62  26D9               	addwf	fsr2l,f,c
  7409  000B64  5008               	movf	UART_buff_get@_this+1,w,c
  7410  000B66  22DA               	addwfc	fsr2h,f,c
  7411  000B68  CFDE F009          	movff	postinc2,??_UART_buff_get
  7412  000B6C  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  7413  000B70  5009               	movf	??_UART_buff_get,w,c
  7414  000B72  2407               	addwf	UART_buff_get@_this,w,c
  7415  000B74  6ED9               	movwf	fsr2l,c
  7416  000B76  500A               	movf	??_UART_buff_get+1,w,c
  7417  000B78  2008               	addwfc	UART_buff_get@_this+1,w,c
  7418  000B7A  6EDA               	movwf	fsr2h,c
  7419  000B7C  50DF               	movf	indf2,w,c
  7420  000B7E  6E0B               	movwf	UART_buff_get@c,c
  7421                           
  7422                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7423  000B80  EE20 F0CA          	lfsr	2,202
  7424  000B84  5007               	movf	UART_buff_get@_this,w,c
  7425  000B86  26D9               	addwf	fsr2l,f,c
  7426  000B88  5008               	movf	UART_buff_get@_this+1,w,c
  7427  000B8A  22DA               	addwfc	fsr2h,f,c
  7428  000B8C  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7429  000B90  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7430  000B94  0E00               	movlw	0
  7431  000B96  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7432  000B98  0EC8               	movlw	200
  7433  000B9A  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7434  000B9C  EC17  F009         	call	_UART_buff_modulo_inc	;wreg free
  7435  000BA0  EE20 F0CA          	lfsr	2,202
  7436  000BA4  5007               	movf	UART_buff_get@_this,w,c
  7437  000BA6  26D9               	addwf	fsr2l,f,c
  7438  000BA8  5008               	movf	UART_buff_get@_this+1,w,c
  7439  000BAA  22DA               	addwfc	fsr2h,f,c
  7440  000BAC  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7441  000BB0  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7442                           
  7443                           ;UART.c: 86: --_this->count;
  7444  000BB4  EE20 F0CC          	lfsr	2,204
  7445  000BB8  5007               	movf	UART_buff_get@_this,w,c
  7446  000BBA  26D9               	addwf	fsr2l,f,c
  7447  000BBC  5008               	movf	UART_buff_get@_this+1,w,c
  7448  000BBE  22DA               	addwfc	fsr2h,f,c
  7449  000BC0  06DE               	decf	postinc2,f,c
  7450  000BC2  0E00               	movlw	0
  7451  000BC4  5ADD               	subwfb	postdec2,f,c
  7452                           
  7453                           ;UART.c: 87: } else {
  7454  000BC6  D002               	goto	i2l580
  7455  000BC8                     i2l2804:
  7456                           
  7457                           ;UART.c: 88: c = 0;
  7458  000BC8  0E00               	movlw	0
  7459  000BCA  6E0B               	movwf	UART_buff_get@c,c
  7460  000BCC                     i2l580:
  7461                           
  7462                           ;UART.c: 89: }
  7463                           ;UART.c: 90: return (c);
  7464  000BCC  500B               	movf	UART_buff_get@c,w,c
  7465  000BCE  0012               	return	
  7466  000BD0                     __end_of_UART_buff_get:
  7467                           	opt stack 0
  7468                           pclatu	equ	0xFFB
  7469                           pclath	equ	0xFFA
  7470                           tblptru	equ	0xFF8
  7471                           tblptrh	equ	0xFF7
  7472                           tblptrl	equ	0xFF6
  7473                           tablat	equ	0xFF5
  7474                           prodh	equ	0xFF4
  7475                           prodl	equ	0xFF3
  7476                           intcon	equ	0xFF2
  7477                           intcon2	equ	0xFF1
  7478                           indf0	equ	0xFEF
  7479                           postinc0	equ	0xFEE
  7480                           fsr0h	equ	0xFEA
  7481                           fsr0l	equ	0xFE9
  7482                           wreg	equ	0xFE8
  7483                           postdec1	equ	0xFE5
  7484                           fsr1h	equ	0xFE2
  7485                           fsr1l	equ	0xFE1
  7486                           indf2	equ	0xFDF
  7487                           postinc2	equ	0xFDE
  7488                           postdec2	equ	0xFDD
  7489                           plusw2	equ	0xFDB
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494 ;; *************** function _EUSART1_Receive_ISR *****************
  7495 ;; Defined at:
  7496 ;;		line 139 in file "UART.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;		None
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;  data            1   11[COMRAM] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  2  132[None  ] int 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7510 ;;      Params:         0       0       0       0       0       0       0
  7511 ;;      Locals:         1       0       0       0       0       0       0
  7512 ;;      Temps:          0       0       0       0       0       0       0
  7513 ;;      Totals:         1       0       0       0       0       0       0
  7514 ;;Total ram usage:        1 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    2
  7517 ;; This function calls:
  7518 ;;		_UART_buff_put
  7519 ;; This function is called by:
  7520 ;;		_INTERRUPT_InterruptManager
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           	psect	text49
  7525  001330                     __ptext49:
  7526                           	opt stack 0
  7527  001330                     _EUSART1_Receive_ISR:
  7528                           	opt stack 22
  7529                           
  7530                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  7531                           
  7532                           ;incstack = 0
  7533  001330  A2AB               	btfss	4011,1,c	;volatile
  7534  001332  D002               	goto	i2l611
  7535                           
  7536                           ;UART.c: 143: RC1STAbits.CREN = 0;
  7537  001334  98AB               	bcf	4011,4,c	;volatile
  7538                           
  7539                           ;UART.c: 144: RC1STAbits.CREN = 1;
  7540  001336  88AB               	bsf	4011,4,c	;volatile
  7541  001338                     i2l611:
  7542                           
  7543                           ;UART.c: 145: }
  7544                           ;UART.c: 146: unsigned char data = RCREG1;
  7545  001338  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  7546                           
  7547                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7548  00133C  0E00               	movlw	low _input_buffer
  7549  00133E  6E07               	movwf	UART_buff_put@_this,c
  7550  001340  0E02               	movlw	high _input_buffer
  7551  001342  6E08               	movwf	UART_buff_put@_this+1,c
  7552  001344  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  7553  001348  EC64  F002         	call	_UART_buff_put	;wreg free
  7554  00134C  0012               	return		;funcret
  7555  00134E                     __end_of_EUSART1_Receive_ISR:
  7556                           	opt stack 0
  7557                           pclatu	equ	0xFFB
  7558                           pclath	equ	0xFFA
  7559                           tblptru	equ	0xFF8
  7560                           tblptrh	equ	0xFF7
  7561                           tblptrl	equ	0xFF6
  7562                           tablat	equ	0xFF5
  7563                           prodh	equ	0xFF4
  7564                           prodl	equ	0xFF3
  7565                           intcon	equ	0xFF2
  7566                           intcon2	equ	0xFF1
  7567                           indf0	equ	0xFEF
  7568                           postinc0	equ	0xFEE
  7569                           fsr0h	equ	0xFEA
  7570                           fsr0l	equ	0xFE9
  7571                           wreg	equ	0xFE8
  7572                           postdec1	equ	0xFE5
  7573                           fsr1h	equ	0xFE2
  7574                           fsr1l	equ	0xFE1
  7575                           indf2	equ	0xFDF
  7576                           postinc2	equ	0xFDE
  7577                           postdec2	equ	0xFDD
  7578                           plusw2	equ	0xFDB
  7579                           fsr2h	equ	0xFDA
  7580                           fsr2l	equ	0xFD9
  7581                           status	equ	0xFD8
  7582                           
  7583 ;; *************** function _UART_buff_put *****************
  7584 ;; Defined at:
  7585 ;;		line 68 in file "UART.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7588 ;;		 -> output_buffer(206), input_buffer(206), 
  7589 ;;  c               1    8[COMRAM] const unsigned char 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;		None
  7592 ;; Return value:  Size  Location     Type
  7593 ;;		None               void
  7594 ;; Registers used:
  7595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7601 ;;      Params:         3       0       0       0       0       0       0
  7602 ;;      Locals:         0       0       0       0       0       0       0
  7603 ;;      Temps:          2       0       0       0       0       0       0
  7604 ;;      Totals:         5       0       0       0       0       0       0
  7605 ;;Total ram usage:        5 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    1
  7608 ;; This function calls:
  7609 ;;		_UART_buff_modulo_inc
  7610 ;; This function is called by:
  7611 ;;		_EUSART1_Receive_ISR
  7612 ;;		_Send_put
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text50
  7617  0004C8                     __ptext50:
  7618                           	opt stack 0
  7619  0004C8                     _UART_buff_put:
  7620                           	opt stack 22
  7621                           
  7622                           ;UART.c: 69: if (_this->count < 200) {
  7623                           
  7624                           ;incstack = 0
  7625  0004C8  EE20 F0CC          	lfsr	2,204
  7626  0004CC  5007               	movf	UART_buff_put@_this,w,c
  7627  0004CE  26D9               	addwf	fsr2l,f,c
  7628  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  7629  0004D2  22DA               	addwfc	fsr2h,f,c
  7630  0004D4  0E01               	movlw	1
  7631  0004D6  BEDB               	btfsc	plusw2,7,c
  7632  0004D8  D007               	goto	i2l2784
  7633  0004DA  0E01               	movlw	1
  7634  0004DC  50DB               	movf	plusw2,w,c
  7635  0004DE  E13A               	bnz	i2l2790
  7636  0004E0  0EC8               	movlw	200
  7637  0004E2  5CDE               	subwf	postinc2,w,c
  7638  0004E4  B0D8               	btfsc	status,0,c
  7639  0004E6  D036               	goto	i2l2790
  7640  0004E8                     i2l2784:
  7641                           
  7642                           ;UART.c: 70: _this->buf[_this->head] = c;
  7643  0004E8  EE20 F0C8          	lfsr	2,200
  7644  0004EC  5007               	movf	UART_buff_put@_this,w,c
  7645  0004EE  26D9               	addwf	fsr2l,f,c
  7646  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  7647  0004F2  22DA               	addwfc	fsr2h,f,c
  7648  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7649  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7650  0004FC  500A               	movf	??_UART_buff_put,w,c
  7651  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  7652  000500  6ED9               	movwf	fsr2l,c
  7653  000502  500B               	movf	??_UART_buff_put+1,w,c
  7654  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  7655  000506  6EDA               	movwf	fsr2h,c
  7656  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  7657                           
  7658                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7659  00050C  EE20 F0C8          	lfsr	2,200
  7660  000510  5007               	movf	UART_buff_put@_this,w,c
  7661  000512  26D9               	addwf	fsr2l,f,c
  7662  000514  5008               	movf	UART_buff_put@_this+1,w,c
  7663  000516  22DA               	addwfc	fsr2h,f,c
  7664  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7665  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7666  000520  0E00               	movlw	0
  7667  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7668  000524  0EC8               	movlw	200
  7669  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7670  000528  EC17  F009         	call	_UART_buff_modulo_inc	;wreg free
  7671  00052C  EE20 F0C8          	lfsr	2,200
  7672  000530  5007               	movf	UART_buff_put@_this,w,c
  7673  000532  26D9               	addwf	fsr2l,f,c
  7674  000534  5008               	movf	UART_buff_put@_this+1,w,c
  7675  000536  22DA               	addwfc	fsr2h,f,c
  7676  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7677  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7678                           
  7679                           ;UART.c: 72: ++_this->count;
  7680  000540  EE20 F0CC          	lfsr	2,204
  7681  000544  5007               	movf	UART_buff_put@_this,w,c
  7682  000546  26D9               	addwf	fsr2l,f,c
  7683  000548  5008               	movf	UART_buff_put@_this+1,w,c
  7684  00054A  22DA               	addwfc	fsr2h,f,c
  7685  00054C  2ADE               	incf	postinc2,f,c
  7686  00054E  0E00               	movlw	0
  7687  000550  22DD               	addwfc	postdec2,f,c
  7688                           
  7689                           ;UART.c: 73: } else {
  7690  000552  0012               	return	
  7691  000554                     i2l2790:
  7692                           
  7693                           ;UART.c: 74: _this->buf[_this->head] = c;
  7694  000554  EE20 F0C8          	lfsr	2,200
  7695  000558  5007               	movf	UART_buff_put@_this,w,c
  7696  00055A  26D9               	addwf	fsr2l,f,c
  7697  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  7698  00055E  22DA               	addwfc	fsr2h,f,c
  7699  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7700  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7701  000568  500A               	movf	??_UART_buff_put,w,c
  7702  00056A  2407               	addwf	UART_buff_put@_this,w,c
  7703  00056C  6ED9               	movwf	fsr2l,c
  7704  00056E  500B               	movf	??_UART_buff_put+1,w,c
  7705  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  7706  000572  6EDA               	movwf	fsr2h,c
  7707  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  7708                           
  7709                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7710  000578  EE20 F0C8          	lfsr	2,200
  7711  00057C  5007               	movf	UART_buff_put@_this,w,c
  7712  00057E  26D9               	addwf	fsr2l,f,c
  7713  000580  5008               	movf	UART_buff_put@_this+1,w,c
  7714  000582  22DA               	addwfc	fsr2h,f,c
  7715  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7716  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7717  00058C  0E00               	movlw	0
  7718  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7719  000590  0EC8               	movlw	200
  7720  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7721  000594  EC17  F009         	call	_UART_buff_modulo_inc	;wreg free
  7722  000598  EE20 F0C8          	lfsr	2,200
  7723  00059C  5007               	movf	UART_buff_put@_this,w,c
  7724  00059E  26D9               	addwf	fsr2l,f,c
  7725  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  7726  0005A2  22DA               	addwfc	fsr2h,f,c
  7727  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7728  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7729                           
  7730                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7731  0005AC  EE20 F0CA          	lfsr	2,202
  7732  0005B0  5007               	movf	UART_buff_put@_this,w,c
  7733  0005B2  26D9               	addwf	fsr2l,f,c
  7734  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  7735  0005B6  22DA               	addwfc	fsr2h,f,c
  7736  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7737  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7738  0005C0  0E00               	movlw	0
  7739  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7740  0005C4  0EC8               	movlw	200
  7741  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7742  0005C8  EC17  F009         	call	_UART_buff_modulo_inc	;wreg free
  7743  0005CC  EE20 F0CA          	lfsr	2,202
  7744  0005D0  5007               	movf	UART_buff_put@_this,w,c
  7745  0005D2  26D9               	addwf	fsr2l,f,c
  7746  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  7747  0005D6  22DA               	addwfc	fsr2h,f,c
  7748  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7749  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7750  0005E0  0012               	return	
  7751  0005E2                     __end_of_UART_buff_put:
  7752                           	opt stack 0
  7753                           pclatu	equ	0xFFB
  7754                           pclath	equ	0xFFA
  7755                           tblptru	equ	0xFF8
  7756                           tblptrh	equ	0xFF7
  7757                           tblptrl	equ	0xFF6
  7758                           tablat	equ	0xFF5
  7759                           prodh	equ	0xFF4
  7760                           prodl	equ	0xFF3
  7761                           intcon	equ	0xFF2
  7762                           intcon2	equ	0xFF1
  7763                           indf0	equ	0xFEF
  7764                           postinc0	equ	0xFEE
  7765                           fsr0h	equ	0xFEA
  7766                           fsr0l	equ	0xFE9
  7767                           wreg	equ	0xFE8
  7768                           postdec1	equ	0xFE5
  7769                           fsr1h	equ	0xFE2
  7770                           fsr1l	equ	0xFE1
  7771                           indf2	equ	0xFDF
  7772                           postinc2	equ	0xFDE
  7773                           postdec2	equ	0xFDD
  7774                           plusw2	equ	0xFDB
  7775                           fsr2h	equ	0xFDA
  7776                           fsr2l	equ	0xFD9
  7777                           status	equ	0xFD8
  7778                           
  7779 ;; *************** function _UART_buff_modulo_inc *****************
  7780 ;; Defined at:
  7781 ;;		line 106 in file "UART.c"
  7782 ;; Parameters:    Size  Location     Type
  7783 ;;  value           2    0[COMRAM] const unsigned int 
  7784 ;;  modulus         2    2[COMRAM] const unsigned int 
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;  my_value        2    4[COMRAM] unsigned int 
  7787 ;; Return value:  Size  Location     Type
  7788 ;;                  2    0[COMRAM] unsigned int 
  7789 ;; Registers used:
  7790 ;;		wreg, status,2, status,0
  7791 ;; Tracked objects:
  7792 ;;		On entry : 0/0
  7793 ;;		On exit  : 0/0
  7794 ;;		Unchanged: 0/0
  7795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7796 ;;      Params:         4       0       0       0       0       0       0
  7797 ;;      Locals:         2       0       0       0       0       0       0
  7798 ;;      Temps:          0       0       0       0       0       0       0
  7799 ;;      Totals:         6       0       0       0       0       0       0
  7800 ;;Total ram usage:        6 bytes
  7801 ;; Hardware stack levels used:    1
  7802 ;; This function calls:
  7803 ;;		Nothing
  7804 ;; This function is called by:
  7805 ;;		_UART_buff_put
  7806 ;;		_UART_buff_get
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text51
  7811  00122E                     __ptext51:
  7812                           	opt stack 0
  7813  00122E                     _UART_buff_modulo_inc:
  7814                           	opt stack 22
  7815                           
  7816                           ;UART.c: 107: unsigned int my_value = value + 1;
  7817                           
  7818                           ;incstack = 0
  7819  00122E  0E01               	movlw	1
  7820  001230  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7821  001232  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7822  001234  0E00               	movlw	0
  7823  001236  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7824  001238  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7825                           
  7826                           ;UART.c: 108: if (my_value >= modulus) {
  7827  00123A  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7828  00123C  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7829  00123E  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7830  001240  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7831  001242  A0D8               	btfss	status,0,c
  7832  001244  D004               	goto	i2l2528
  7833                           
  7834                           ;UART.c: 109: my_value = 0;
  7835  001246  0E00               	movlw	0
  7836  001248  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7837  00124A  0E00               	movlw	0
  7838  00124C  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7839  00124E                     i2l2528:
  7840                           
  7841                           ;UART.c: 110: }
  7842                           ;UART.c: 111: return (my_value);
  7843  00124E  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7844  001252  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7845  001256  0012               	return	
  7846  001258                     __end_of_UART_buff_modulo_inc:
  7847                           	opt stack 0
  7848                           pclatu	equ	0xFFB
  7849                           pclath	equ	0xFFA
  7850                           tblptru	equ	0xFF8
  7851                           tblptrh	equ	0xFF7
  7852                           tblptrl	equ	0xFF6
  7853                           tablat	equ	0xFF5
  7854                           prodh	equ	0xFF4
  7855                           prodl	equ	0xFF3
  7856                           intcon	equ	0xFF2
  7857                           intcon2	equ	0xFF1
  7858                           indf0	equ	0xFEF
  7859                           postinc0	equ	0xFEE
  7860                           fsr0h	equ	0xFEA
  7861                           fsr0l	equ	0xFE9
  7862                           wreg	equ	0xFE8
  7863                           postdec1	equ	0xFE5
  7864                           fsr1h	equ	0xFE2
  7865                           fsr1l	equ	0xFE1
  7866                           indf2	equ	0xFDF
  7867                           postinc2	equ	0xFDE
  7868                           postdec2	equ	0xFDD
  7869                           plusw2	equ	0xFDB
  7870                           fsr2h	equ	0xFDA
  7871                           fsr2l	equ	0xFD9
  7872                           status	equ	0xFD8
  7873                           pclatu	equ	0xFFB
  7874                           pclath	equ	0xFFA
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           intcon2	equ	0xFF1
  7883                           indf0	equ	0xFEF
  7884                           postinc0	equ	0xFEE
  7885                           fsr0h	equ	0xFEA
  7886                           fsr0l	equ	0xFE9
  7887                           wreg	equ	0xFE8
  7888                           postdec1	equ	0xFE5
  7889                           fsr1h	equ	0xFE2
  7890                           fsr1l	equ	0xFE1
  7891                           indf2	equ	0xFDF
  7892                           postinc2	equ	0xFDE
  7893                           postdec2	equ	0xFDD
  7894                           plusw2	equ	0xFDB
  7895                           fsr2h	equ	0xFDA
  7896                           fsr2l	equ	0xFD9
  7897                           status	equ	0xFD8
  7898                           
  7899                           	psect	rparam
  7900  0000                     pclatu	equ	0xFFB
  7901                           pclath	equ	0xFFA
  7902                           tblptru	equ	0xFF8
  7903                           tblptrh	equ	0xFF7
  7904                           tblptrl	equ	0xFF6
  7905                           tablat	equ	0xFF5
  7906                           prodh	equ	0xFF4
  7907                           prodl	equ	0xFF3
  7908                           intcon	equ	0xFF2
  7909                           intcon2	equ	0xFF1
  7910                           indf0	equ	0xFEF
  7911                           postinc0	equ	0xFEE
  7912                           fsr0h	equ	0xFEA
  7913                           fsr0l	equ	0xFE9
  7914                           wreg	equ	0xFE8
  7915                           postdec1	equ	0xFE5
  7916                           fsr1h	equ	0xFE2
  7917                           fsr1l	equ	0xFE1
  7918                           indf2	equ	0xFDF
  7919                           postinc2	equ	0xFDE
  7920                           postdec2	equ	0xFDD
  7921                           plusw2	equ	0xFDB
  7922                           fsr2h	equ	0xFDA
  7923                           fsr2l	equ	0xFD9
  7924                           status	equ	0xFD8
  7925                           
  7926                           	psect	temp
  7927  000045                     btemp:
  7928                           	opt stack 0
  7929  000045                     	ds	1
  7930  0000                     int$flags	set	btemp
  7931                           pclatu	equ	0xFFB
  7932                           pclath	equ	0xFFA
  7933                           tblptru	equ	0xFF8
  7934                           tblptrh	equ	0xFF7
  7935                           tblptrl	equ	0xFF6
  7936                           tablat	equ	0xFF5
  7937                           prodh	equ	0xFF4
  7938                           prodl	equ	0xFF3
  7939                           intcon	equ	0xFF2
  7940                           intcon2	equ	0xFF1
  7941                           indf0	equ	0xFEF
  7942                           postinc0	equ	0xFEE
  7943                           fsr0h	equ	0xFEA
  7944                           fsr0l	equ	0xFE9
  7945                           wreg	equ	0xFE8
  7946                           postdec1	equ	0xFE5
  7947                           fsr1h	equ	0xFE2
  7948                           fsr1l	equ	0xFE1
  7949                           indf2	equ	0xFDF
  7950                           postinc2	equ	0xFDE
  7951                           postdec2	equ	0xFDD
  7952                           plusw2	equ	0xFDB
  7953                           fsr2h	equ	0xFDA
  7954                           fsr2l	equ	0xFD9
  7955                           status	equ	0xFD8


Data Sizes:
    Strings     41
    Constant    480
    Data        10
    BSS         957
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     148
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[15]), STR_3(CODE[16]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1846(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _CRCcheck->_crcBufS_status_put
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _ledDebug->_time_Set
    _ledDebug->_time_get
    _Splash->_gotoXy
    _gotoXy->_LCDwrite
    _NokiaStr->_LcdCharacter
    _LcdCharacter->_LCDwrite
    _SYSTEM_Initialize->_TMR0_Initialize
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondChargerAsECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _SetCharger->_printf
    _Splash->_NokiaStr
    _NokiaStr->_LcdCharacter

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22067
                              _Delay
                         _NokiaStart
                  _SYSTEM_Initialize
                             _Splash
                           _clearLcd
                           _ledDebug
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12911
                          _Precharge
                         _SetCharger
                        _receiveData
                _respondChargerAsECU
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  1     1      0    5817
                                              8 BANK0      1     1      0
                              _Delay
                      _GetPowerState
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                             34 COMRAM     1     1      0
                                              4 BANK0      4     4      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1982
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
                      _GetPowerState (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetPowerState                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              9 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              2 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     819
                                             32 COMRAM     3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM     4     0      4
                                              0 BANK0      6     6      0
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0    1005
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0     130
                           _time_Set
                           _time_get
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Splash                                               0     0      0    3497
                           _NokiaStr
                             _gotoXy
 ---------------------------------------------------------------------------------
 (2) _gotoXy                                               2     1      1    1523
                                             34 COMRAM     2     1      1
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _NokiaStr                                             2     0      2    1974
                                              3 BANK0      2     0      2
                       _LcdCharacter
 ---------------------------------------------------------------------------------
 (3) _LcdCharacter                                         5     5      0    1755
                                             34 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    3384
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0    1307
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1239
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     838
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _Splash
     _NokiaStr
       _LcdCharacter
         _LCDwrite
           _SPI1_Exchange8bit
           ___wmul (ARG)
         ___wmul
     _gotoXy
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _clearLcd
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _ledDebug
     _time_Set
     _time_get
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondChargerAsECU
       _Delay
       _GetPowerState
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetPowerState (ARG)
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      94       4       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     40A       9        0.0%
DATA                 0      0     40A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu Jun 16 07:14:33 2016

                      _SPI1_Exchange8bit 13A6        __end_of_FastTransfer_buffer_flush 0E3E  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l50 0FFA  
                   __end_of_LcdCharacter 0C5C                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l421 0FD0                                      l523 0A16  
                                    l188 13AE                                      l703 1032  
                                    l535 0AAA                                      l447 00FC  
                                    l708 1038                                      l670 09CA  
                                    l663 09BE                                      l692 1026  
                                    l766 135A                                      l678 0A0C  
                                    l768 135C                                      l698 102C  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                    ??_SPI1_Exchange8bit 001B     FastTransfer_buffer_flush@clearBuffer 00D2  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_LVP$OFF 000000  
                                   l3204 0FD6                                     l3150 0FEA  
                                   l3206 0FDC                                     l3320 0A18  
                                   l3304 0D08                                     l3162 101C  
                                   l3226 037C                                     l3306 0D0E  
                                   l3164 101E                                     l3260 068A  
                                   l3244 05EC                                     l3324 0A2E  
                                   l3420 00B2                                     l3180 115E  
                                   l3350 06F6                                     l3190 0FA4  
                                   l3334 0A82                                     l3430 00F2  
                                   l3174 1224                                     l3520 098C  
                                   l2536 103E                                     l3360 0732  
                                   l3352 06FE                                     l3248 05F6  
                                   l3504 0344                                     l3512 0350  
                                   l3184 116E                                     l3346 06E2  
                                   l3370 07A6                                     l3338 0AA2  
                                   l3292 0F64                                     l3380 0BFE  
                                   l3524 09A2                                     l3364 075C  
                                   l3196 0FBA                                     l3276 092A  
                                   l3268 08A4                                     l3460 019A  
                                   l3390 1288                                     l3534 09DA  
                                   l3470 024E                                     l3296 0F80  
                                   l3376 0BE8                                     l2920 1116  
                                   l3368 0784                                     l3394 1298  
                                   l3386 0C50                                     l3538 09F0  
                                   l3482 02D4                                     l3466 0234  
                                   l3468 023A                                     l3492 02E0  
                                   l3590 1182                                     l3558 0E72  
                                   l3594 1198                                     l3696 0EF8  
                   receiveData@crcHolder 00DF                                     STR_1 7FFB  
                                   STR_2 7FFB                                     STR_3 7FD5  
                                   STR_4 7FE5                                     STR_5 7FF4  
                                   _CRC8 0F9E                                     u2011 037A  
                                   u2200 077C                                     _LATA 000F89  
                                   _LATB 000F8A                                     u2207 0772  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   u2321 013E                                     _LATE 000F8D  
                                   u2190 0752                                     u1660 1114  
                                   u2197 0748                                     u2607 0F6A  
                                   u1990 0884                                     i2l62 1150  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART2_Write 0FE8                                     _main 0EA4  
                  ??_respondChargerAsECU 00D8                          _TMR0_StartTimer 13F6  
                                   _time 0026                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04C8                                     start 00AC  
              __end_of_SPI1_Exchange8bit 13B6                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 1154                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 11D8  
                       __end_of_CRCcheck 0AAC           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 13C4                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l140 004E  
                                  i2l142 005A                                    i2l144 0066  
                                  i2l148 0070                         __end_of_LCDwrite 1368  
                                  i2l611 1338                                    i2l580 0BCC  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 0F52  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 00EB  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 10C4  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _Start 002A  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 0088  
                         __CFG_EBTRB$OFF 000000                                    _group 002C  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 13DE  
                         ?_EUSART2_Write 0001                                    tablat 000FF5  
                   __size_of_crcBufS_get 00F2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0FE8                          CRCcheck@SentCRC 00D2  
                        __initialization 0C5C                             __end_of_main 0F02  
                             ToSend@what 00D2                                   ??_CRC8 001E  
                      LcdCharacter@index 00D1              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0026                         __end_of_NokiaStr 11AC  
                          __activetblptr 000002                            SetMux@channel 001B  
                      SetCharger@Current 0021                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001                               _SetCharger 0E3E  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 13FA  
             __end_of_EUSART2_Initialize 10C4                 _eusart2TxBufferRemaining 0043  
                             Precharge@i 00D1                        SetCharger@Voltage 0022  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 0AAC                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   Delay@i 0020  
                         __CFG_WDTEN$OFF 000000                                   i2l2528 124E  
                                 i2l2804 0BC8              UART_buff_modulo_inc@modulus 0003  
                                 i2l2790 0554                                   i2l2784 04E8  
                                 i2l2872 1200                                   i2l2864 11E0  
                                 i2l2858 114C                                   i2l2884 10EE  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                  SPI1_Exchange8bit@data 001B                         __end_of_clearLcd 12A8  
             __size_of_SPI1_Exchange8bit 0010                         __end_of_ledDebug 1126  
                         __CFG_XINST$OFF 000000                    __size_of_LcdCharacter 008C  
                                 _ToSend 12F4                                   _SetMux 1022  
                       crcBufS_get@_this 001B                    __end_of_GetPowerState 13F6  
            ??_FastTransfer_buffer_flush 0023                                   _Splash 105A  
                          _output_buffer 0300                         crcBufS_get@space 001E  
                                 ___wmul 12CE                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _gotoXy 1258                                   _memset 1154  
                                 clear_0 0C62                                   clear_1 0C6E  
                                 clear_2 0C7A                                   clear_3 0C86  
                                 clear_4 0C92                                   clear_5 0C9E  
                     __size_of_Precharge 00A6                                   _printf 06D4  
                                 _rx_len 0040                         __end_of_sendData 0D5E  
                           __pdataCOMRAM 0044                         __end_of_time_Set 1330  
                       __end_of_time_get 13A6                             __mediumconst 7DF4  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                   _EUSART2_Transmit_ISR 1126             __end_of_UART_buff_modulo_inc 1258  
                        ??_EUSART2_Write 001B            __size_of_INTERRUPT_Initialize 000C  
                        _eusart2RxBuffer 0093                             _LcdCharacter 0BD0  
                      _SYSTEM_Initialize 1368                          _eusart2TxBuffer 009B  
                             __accesstop 0060                  __end_of__initialization 0CD6  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                              ?_LCDwrite 0021                            __end_of_Delay 0F9E  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 089A  
                           __pidataBANK0 13E8                      ??_SYSTEM_Initialize 001D  
                       crcBufS_put@_this 001B   __end_of_FastTransfer_buffer_modulo_inc 122E  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1204  
                      ??_SPI1_Initialize 001B                              NokiaStr@str 00D3  
                          __end_of_putch 13E8             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 00D4                    LcdCharacter@character 00D0  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0BD0                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05E2                                  ??_Delay 001F  
                            ?_SetCharger 0021                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 134E                _FastTransfer_buffer_flush 0DD2  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 137E                   receiveData@holder_1846 00E4  
                                ??_putch 001C                      _addressErrorCounter 00AF  
                            ?_NokiaStart 0001                            _eusart2RxHead 0036  
                          _eusart2TxHead 0038                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                     __end_of_FONTLOOKUP 7FD5                            _eusart2RxTail 0037  
                          _eusart2TxTail 0039                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 0A16                               ??_CRCcheck 0025  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 00D3  
                             ??_LCDwrite 0022                     __size_of_receiveData 02A4  
                                ?_ToSend 00D2                                  ?_SetMux 0001  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Splash 0001  
                                ?___wmul 001B                       __CFG_CCP3MX$PORTB5 000000  
    FastTransfer_buffer_modulo_inc@value 001B                                  ?_gotoXy 0023  
                                ?_memset 001B                               _crc_buffer 00BF  
                                ?_printf 001D                         time_Set@WhatTime 001D  
                     UART_buff_put@_this 0007                                ?_clearLcd 0001  
                                _LEDtime 00A3                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 1204             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                              ?_ledDebug 0001                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00D4                      _receiveArrayAddress 002E  
                                _SSP1BUF 000FC9              __end_of_respondChargerAsECU 0DD2  
                              ?_sendData 0001                        _alignErrorCounter 00B1  
                             ??_NokiaStr 0025                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                              ?_time_Set 001B                          __size_of_ToSend 001E  
                        __size_of_SetMux 0038                      __size_of_SetCharger 0066  
                              ?_time_get 001B                                  _PowerOn 0033  
                              _AKNAKsend 0032                          __size_of_Splash 0036  
                   _UART_buff_modulo_inc 122E                          __size_of___wmul 0026  
                                _calc_CS 0034                                  __pcinit 0C5C  
                    __size_of_NokiaStart 0092                          __size_of_gotoXy 0028  
                        __size_of_memset 002C                                  __ramtop 0600  
                                __ptext0 0EA4                                  __ptext1 12A8  
                                __ptext2 0D5E                                  __ptext3 0CE4  
                                __ptext4 07C2                                  __ptext5 0DD2  
                                __ptext6 1154                                  __ptext7 12F4  
                                __ptext8 0354                                  __ptext9 1204  
                        __size_of_printf 00EE                                _T0CONbits 000FD5  
                  _OSCILLATOR_Initialize 13B6                   ??_EUSART2_Transmit_ISR 0001  
                _FastTransfer_buffer_put 0354                    CRCcheck@calculatedCRC 00D3  
               ??_PIN_MANAGER_Initialize 001B                               ??_clearLcd 0023  
           crcBufS_status_put@wantedTime 0023                               ??_ledDebug 001E  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0016                     end_of_initialization 0CD6  
                              Delay@wait 001B                                  gotoXy@x 0024  
                                gotoXy@y 0023                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7DF4                               ??_sendData 0023  
                     _EUSART2_Initialize 1090                               ??_time_Set 001D  
                             ??_time_get 001D                                  printf@c 00D3  
                                printf@f 001D                    ?_UART_buff_modulo_inc 0001  
                   __size_of_updateComms 0026                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                      CRCcheck@arrayHolder 00D4  
                    ?_EUSART2_Initialize 0001                   _dataAdressErrorCounter 00B5  
                             _rx_address 003E                             LCDwrite@data 0021  
                           LCDwrite@mode 0022                                _TRISAbits 000F92  
                              _TRISBbits 000F93                                _TRISCbits 000F94  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 006C  
                        _SPI1_Initialize 13C4                           _UART_buff_size 137E  
                    __end_of_crcBufS_get 06D4                      __end_of_crcBufS_put 089A  
                      __size_of_CRCcheck 0096                          Precharge@i_2130 00D3  
                          _moduleAddress 003C                     _timer0ReloadVal16bit 0041  
                             CRCcheck@rt 00D7                           __end_of_ToSend 1312  
                         __end_of_SetMux 105A                        __size_of_LCDwrite 001A  
           __end_of_INTERRUPT_Initialize 13DE                           __end_of_Splash 1090  
                        _crcErrorCounter 00B3                           __end_of___wmul 12F4  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 13FA  
              ??_FastTransfer_buffer_put 00D0                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 1280                           __end_of_memset 1180  
                      crcBufS_put@status 001F                           __end_of_printf 07C2  
                           receiveData@r 00E9                             receiveData@u 00E7  
                           ??_SetCharger 0023                      start_initialization 0C5C  
               __size_of_TMR0_Initialize 002C          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 00D0                   __size_of_GetPowerState 0004  
                            putch@txData 001C                             ??_NokiaStart 0025  
                  __end_of_EUSART2_Write 1022                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 1394                           UART_buff_put@c 0009  
                              _Precharge 0970                                 ??_ToSend 0026  
                               ??_SetMux 001B                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                                 ??_Splash 0025  
                        crcBufS_get@time 001D                        __size_of_NokiaStr 002C  
                     __end_of_SetCharger 0EA4                                 ??___wmul 001F  
                            __pdataBANK0 00EB                                 ??_gotoXy 0024  
                               ??_memset 0021                                 ??_printf 0021  
                     __end_of_NokiaStart 0B3E                           _eusart2RxCount 0035  
                            __pbssCOMRAM 0026            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00D0                  __end_of_SPI1_Initialize 13D2  
                      __size_of_clearLcd 0028                              _crcBufS_get 05E2  
                            _crcBufS_put 07C2                      EUSART2_Write@txData 001B  
                      __size_of_ledDebug 0030                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00D9  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00D5  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                               ?_Precharge 0001  
                 _PIN_MANAGER_Initialize 0F02                        __size_of_sendData 007A  
                              __pintcode 0008                            __pmediumconst 7DF4  
                          _GetPowerState 13F2                        __size_of_time_Set 001E  
                      __size_of_time_get 0012             ??_INTERRUPT_InterruptManager 000D  
                               _BAUD1CON 000FB8                                 _BAUD2CON 000F70  
                         __size_of_Delay 004C                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 13D2                             _receiveArray 0060  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 002C  
                               _CRCcheck 0A16                           ___wmul@product 001F  
                               _LATAbits 000F89                                 _LATBbits 000F8A  
                               _LATCbits 000F8B                      UART_buff_size@_this 0001  
           __size_of_respondChargerAsECU 0074                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 134E  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u154_40 0B5C  
                               i2u163_40 10DE                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                           ?_GetPowerState 0001  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0354                                 _SSP1CON1 000FC6  
                               _SSP1STAT 000FC7           FastTransfer_buffer_flush@_this 00D0  
                           _input_buffer 0200                                _rx_buffer 0400  
                      ___wmul@multiplier 001B                              _lastLEDTime 00A7  
                             printf@flag 00D0                            _UART_buff_get 0B3E  
                          _UART_buff_put 04C8                           Precharge@OnOff 00D0  
          __size_of_EUSART2_Transmit_ISR 002E                         ?_SPI1_Initialize 0001  
                         SetCharger@mode 0023                              _INTCON2bits 000FF1  
                              copy_data0 0CB8                    ?_INTERRUPT_Initialize 0001  
                          ?_LcdCharacter 0001                        _sendStructAddress 0030  
                          ??_updateComms 0026                                 _NokiaStr 1180  
                               __Hrparam 0000                              ??_Precharge 0024  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                          time_Set@value 001B                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                         ?_UART_buff_get 0007                           ?_UART_buff_put 0007  
                            CRC8@extract 001F                                sendData@i 00D6  
                               _clearLcd 1280                                 _ledDebug 10F6  
               crcBufS_status_put@status 001E                                 __ptext10 13F2  
                               __ptext11 00B0                                 __ptext20 1022  
                               __ptext12 0A16                                 __ptext21 0970  
                               __ptext13 089A                                 __ptext30 1368  
                               __ptext22 10F6                                 __ptext14 05E2  
                               __ptext31 11AC                                 __ptext23 1394  
                               __ptext15 0F9E                                 __ptext40 13A6  
                               __ptext32 13F6                                 __ptext24 1312  
                               __ptext16 0E3E                                 __ptext41 13C4  
                               __ptext33 0F02                                 __ptext25 105A  
                               __ptext17 06D4                                 __ptext50 04C8  
                               __ptext42 0F52                                 __ptext34 13B6  
                               __ptext26 1258                                 __ptext18 13DE  
                               __ptext51 122E                                 __ptext35 13D2  
                               __ptext27 1180                                 __ptext19 0FE8  
                               __ptext44 1126                                 __ptext36 1090  
                               __ptext28 0BD0                                 __ptext45 11D8  
                               __ptext37 0AAC                                 __ptext29 12CE  
                               __ptext46 10C4                                 __ptext38 1280  
                               __ptext47 137E                                 __ptext39 134E  
                               __ptext48 0B3E                                 __ptext49 1330  
                           _SSP1CON1bits 000FC6                           ??_LcdCharacter 0023  
                          __size_of_CRC8 004A                  EUSART1_Receive_ISR@data 000C  
            __size_of_EUSART2_Initialize 0034                            _returnAddress 003D  
                          __size_of_main 005E                              _receiveData 00B0  
                         _Transmit_stall 0044                                 _sendData 0CE4  
                               _talkTime 00AB                          ??_GetPowerState 001B  
                             _RC1STAbits 000FAB                                 _time_Set 1312  
                             _RC2STAbits 000F71                              clearLcd@res 0023  
                               _time_get 1394                               _FONTLOOKUP 7DF5  
                               int$flags 0045                             _serial_write 00BD  
                    __end_of_updateComms 12CE       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 1330                        receiveData@holder 00E1  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00B7  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                  ?_PIN_MANAGER_Initialize 0001  
           __end_of_EUSART1_Transmit_ISR 10F6                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 00D0                              _serial_peek 00B9  
                            _serial_read 00BB                 ?_FastTransfer_buffer_put 0021  
                               printf@ap 00D1                                 printf@cp 00D4  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0009  
                        ??_UART_buff_put 000A                   __size_of_EUSART2_Write 003A  
                    _EUSART2_Receive_ISR 11D8    FastTransfer_buffer_modulo_inc@modulus 001D  
                    _respondChargerAsECU 0D5E                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 11AC                receiveData@crcHolder_1847 00E0  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0970                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0F52         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                     ?_respondChargerAsECU 0001  
                            _updateComms 12A8  
