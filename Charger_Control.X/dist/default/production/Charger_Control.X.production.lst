

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Fri Jul 15 17:29:09 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    84                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    85  0000                     
    86                           	psect	idataCOMRAM
    87  001EE2                     __pidataCOMRAM:
    88                           	opt stack 0
    89                           
    90                           ;initializer for _Transmit_stall
    91  001EE2  01                 	db	1
    92                           
    93                           	psect	mediumconst
    94  007DE6                     __pmediumconst:
    95                           	opt stack 0
    96  007DE6  00                 	db	0
    97  007DE7                     _FONTLOOKUP:
    98                           	opt stack 0
    99  007DE7  00                 	db	0
   100  007DE8  00                 	db	0
   101  007DE9  00                 	db	0
   102  007DEA  00                 	db	0
   103  007DEB  00                 	db	0
   104  007DEC  00                 	db	0
   105  007DED  00                 	db	0
   106  007DEE  5F                 	db	95
   107  007DEF  00                 	db	0
   108  007DF0  00                 	db	0
   109  007DF1  00                 	db	0
   110  007DF2  07                 	db	7
   111  007DF3  00                 	db	0
   112  007DF4  07                 	db	7
   113  007DF5  00                 	db	0
   114  007DF6  14                 	db	20
   115  007DF7  7F                 	db	127
   116  007DF8  14                 	db	20
   117  007DF9  7F                 	db	127
   118  007DFA  14                 	db	20
   119  007DFB  24                 	db	36
   120  007DFC  2A                 	db	42
   121  007DFD  7F                 	db	127
   122  007DFE  2A                 	db	42
   123  007DFF  12                 	db	18
   124  007E00  23                 	db	35
   125  007E01  13                 	db	19
   126  007E02  08                 	db	8
   127  007E03  64                 	db	100
   128  007E04  62                 	db	98
   129  007E05  36                 	db	54
   130  007E06  49                 	db	73
   131  007E07  55                 	db	85
   132  007E08  22                 	db	34
   133  007E09  50                 	db	80
   134  007E0A  00                 	db	0
   135  007E0B  05                 	db	5
   136  007E0C  03                 	db	3
   137  007E0D  00                 	db	0
   138  007E0E  00                 	db	0
   139  007E0F  00                 	db	0
   140  007E10  1C                 	db	28
   141  007E11  22                 	db	34
   142  007E12  41                 	db	65
   143  007E13  00                 	db	0
   144  007E14  00                 	db	0
   145  007E15  41                 	db	65
   146  007E16  22                 	db	34
   147  007E17  1C                 	db	28
   148  007E18  00                 	db	0
   149  007E19  14                 	db	20
   150  007E1A  08                 	db	8
   151  007E1B  3E                 	db	62
   152  007E1C  08                 	db	8
   153  007E1D  14                 	db	20
   154  007E1E  08                 	db	8
   155  007E1F  08                 	db	8
   156  007E20  3E                 	db	62
   157  007E21  08                 	db	8
   158  007E22  08                 	db	8
   159  007E23  00                 	db	0
   160  007E24  50                 	db	80
   161  007E25  30                 	db	48
   162  007E26  00                 	db	0
   163  007E27  00                 	db	0
   164  007E28  08                 	db	8
   165  007E29  08                 	db	8
   166  007E2A  08                 	db	8
   167  007E2B  08                 	db	8
   168  007E2C  08                 	db	8
   169  007E2D  00                 	db	0
   170  007E2E  60                 	db	96
   171  007E2F  60                 	db	96
   172  007E30  00                 	db	0
   173  007E31  00                 	db	0
   174  007E32  20                 	db	32
   175  007E33  10                 	db	16
   176  007E34  08                 	db	8
   177  007E35  04                 	db	4
   178  007E36  02                 	db	2
   179  007E37  3E                 	db	62
   180  007E38  51                 	db	81
   181  007E39  49                 	db	73
   182  007E3A  45                 	db	69
   183  007E3B  3E                 	db	62
   184  007E3C  00                 	db	0
   185  007E3D  42                 	db	66
   186  007E3E  7F                 	db	127
   187  007E3F  40                 	db	64
   188  007E40  00                 	db	0
   189  007E41  42                 	db	66
   190  007E42  61                 	db	97
   191  007E43  51                 	db	81
   192  007E44  49                 	db	73
   193  007E45  46                 	db	70
   194  007E46  21                 	db	33
   195  007E47  41                 	db	65
   196  007E48  45                 	db	69
   197  007E49  4B                 	db	75
   198  007E4A  31                 	db	49
   199  007E4B  18                 	db	24
   200  007E4C  14                 	db	20
   201  007E4D  12                 	db	18
   202  007E4E  7F                 	db	127
   203  007E4F  10                 	db	16
   204  007E50  27                 	db	39
   205  007E51  45                 	db	69
   206  007E52  45                 	db	69
   207  007E53  45                 	db	69
   208  007E54  39                 	db	57
   209  007E55  3C                 	db	60
   210  007E56  4A                 	db	74
   211  007E57  49                 	db	73
   212  007E58  49                 	db	73
   213  007E59  30                 	db	48
   214  007E5A  01                 	db	1
   215  007E5B  71                 	db	113
   216  007E5C  09                 	db	9
   217  007E5D  05                 	db	5
   218  007E5E  03                 	db	3
   219  007E5F  36                 	db	54
   220  007E60  49                 	db	73
   221  007E61  49                 	db	73
   222  007E62  49                 	db	73
   223  007E63  36                 	db	54
   224  007E64  06                 	db	6
   225  007E65  49                 	db	73
   226  007E66  49                 	db	73
   227  007E67  29                 	db	41
   228  007E68  1E                 	db	30
   229  007E69  00                 	db	0
   230  007E6A  36                 	db	54
   231  007E6B  36                 	db	54
   232  007E6C  00                 	db	0
   233  007E6D  00                 	db	0
   234  007E6E  00                 	db	0
   235  007E6F  56                 	db	86
   236  007E70  36                 	db	54
   237  007E71  00                 	db	0
   238  007E72  00                 	db	0
   239  007E73  08                 	db	8
   240  007E74  14                 	db	20
   241  007E75  22                 	db	34
   242  007E76  41                 	db	65
   243  007E77  00                 	db	0
   244  007E78  14                 	db	20
   245  007E79  14                 	db	20
   246  007E7A  14                 	db	20
   247  007E7B  14                 	db	20
   248  007E7C  14                 	db	20
   249  007E7D  00                 	db	0
   250  007E7E  41                 	db	65
   251  007E7F  22                 	db	34
   252  007E80  14                 	db	20
   253  007E81  08                 	db	8
   254  007E82  02                 	db	2
   255  007E83  01                 	db	1
   256  007E84  51                 	db	81
   257  007E85  09                 	db	9
   258  007E86  06                 	db	6
   259  007E87  32                 	db	50
   260  007E88  49                 	db	73
   261  007E89  79                 	db	121
   262  007E8A  41                 	db	65
   263  007E8B  3E                 	db	62
   264  007E8C  7E                 	db	126
   265  007E8D  11                 	db	17
   266  007E8E  11                 	db	17
   267  007E8F  11                 	db	17
   268  007E90  7E                 	db	126
   269  007E91  7F                 	db	127
   270  007E92  49                 	db	73
   271  007E93  49                 	db	73
   272  007E94  49                 	db	73
   273  007E95  36                 	db	54
   274  007E96  3E                 	db	62
   275  007E97  41                 	db	65
   276  007E98  41                 	db	65
   277  007E99  41                 	db	65
   278  007E9A  22                 	db	34
   279  007E9B  7F                 	db	127
   280  007E9C  41                 	db	65
   281  007E9D  41                 	db	65
   282  007E9E  22                 	db	34
   283  007E9F  1C                 	db	28
   284  007EA0  7F                 	db	127
   285  007EA1  49                 	db	73
   286  007EA2  49                 	db	73
   287  007EA3  49                 	db	73
   288  007EA4  41                 	db	65
   289  007EA5  7F                 	db	127
   290  007EA6  09                 	db	9
   291  007EA7  09                 	db	9
   292  007EA8  09                 	db	9
   293  007EA9  01                 	db	1
   294  007EAA  3E                 	db	62
   295  007EAB  41                 	db	65
   296  007EAC  49                 	db	73
   297  007EAD  49                 	db	73
   298  007EAE  7A                 	db	122
   299  007EAF  7F                 	db	127
   300  007EB0  08                 	db	8
   301  007EB1  08                 	db	8
   302  007EB2  08                 	db	8
   303  007EB3  7F                 	db	127
   304  007EB4  00                 	db	0
   305  007EB5  41                 	db	65
   306  007EB6  7F                 	db	127
   307  007EB7  41                 	db	65
   308  007EB8  00                 	db	0
   309  007EB9  20                 	db	32
   310  007EBA  40                 	db	64
   311  007EBB  41                 	db	65
   312  007EBC  3F                 	db	63
   313  007EBD  01                 	db	1
   314  007EBE  7F                 	db	127
   315  007EBF  08                 	db	8
   316  007EC0  14                 	db	20
   317  007EC1  22                 	db	34
   318  007EC2  41                 	db	65
   319  007EC3  7F                 	db	127
   320  007EC4  40                 	db	64
   321  007EC5  40                 	db	64
   322  007EC6  40                 	db	64
   323  007EC7  40                 	db	64
   324  007EC8  7F                 	db	127
   325  007EC9  02                 	db	2
   326  007ECA  0C                 	db	12
   327  007ECB  02                 	db	2
   328  007ECC  7F                 	db	127
   329  007ECD  7F                 	db	127
   330  007ECE  04                 	db	4
   331  007ECF  08                 	db	8
   332  007ED0  10                 	db	16
   333  007ED1  7F                 	db	127
   334  007ED2  3E                 	db	62
   335  007ED3  41                 	db	65
   336  007ED4  41                 	db	65
   337  007ED5  41                 	db	65
   338  007ED6  3E                 	db	62
   339  007ED7  7F                 	db	127
   340  007ED8  09                 	db	9
   341  007ED9  09                 	db	9
   342  007EDA  09                 	db	9
   343  007EDB  06                 	db	6
   344  007EDC  3E                 	db	62
   345  007EDD  41                 	db	65
   346  007EDE  51                 	db	81
   347  007EDF  21                 	db	33
   348  007EE0  5E                 	db	94
   349  007EE1  7F                 	db	127
   350  007EE2  09                 	db	9
   351  007EE3  19                 	db	25
   352  007EE4  29                 	db	41
   353  007EE5  46                 	db	70
   354  007EE6  46                 	db	70
   355  007EE7  49                 	db	73
   356  007EE8  49                 	db	73
   357  007EE9  49                 	db	73
   358  007EEA  31                 	db	49
   359  007EEB  01                 	db	1
   360  007EEC  01                 	db	1
   361  007EED  7F                 	db	127
   362  007EEE  01                 	db	1
   363  007EEF  01                 	db	1
   364  007EF0  3F                 	db	63
   365  007EF1  40                 	db	64
   366  007EF2  40                 	db	64
   367  007EF3  40                 	db	64
   368  007EF4  3F                 	db	63
   369  007EF5  1F                 	db	31
   370  007EF6  20                 	db	32
   371  007EF7  40                 	db	64
   372  007EF8  20                 	db	32
   373  007EF9  1F                 	db	31
   374  007EFA  3F                 	db	63
   375  007EFB  40                 	db	64
   376  007EFC  38                 	db	56
   377  007EFD  40                 	db	64
   378  007EFE  3F                 	db	63
   379  007EFF  63                 	db	99
   380  007F00  14                 	db	20
   381  007F01  08                 	db	8
   382  007F02  14                 	db	20
   383  007F03  63                 	db	99
   384  007F04  07                 	db	7
   385  007F05  08                 	db	8
   386  007F06  70                 	db	112
   387  007F07  08                 	db	8
   388  007F08  07                 	db	7
   389  007F09  61                 	db	97
   390  007F0A  51                 	db	81
   391  007F0B  49                 	db	73
   392  007F0C  45                 	db	69
   393  007F0D  43                 	db	67
   394  007F0E  00                 	db	0
   395  007F0F  7F                 	db	127
   396  007F10  41                 	db	65
   397  007F11  41                 	db	65
   398  007F12  00                 	db	0
   399  007F13  02                 	db	2
   400  007F14  04                 	db	4
   401  007F15  08                 	db	8
   402  007F16  10                 	db	16
   403  007F17  20                 	db	32
   404  007F18  00                 	db	0
   405  007F19  41                 	db	65
   406  007F1A  41                 	db	65
   407  007F1B  7F                 	db	127
   408  007F1C  00                 	db	0
   409  007F1D  04                 	db	4
   410  007F1E  02                 	db	2
   411  007F1F  01                 	db	1
   412  007F20  02                 	db	2
   413  007F21  04                 	db	4
   414  007F22  40                 	db	64
   415  007F23  40                 	db	64
   416  007F24  40                 	db	64
   417  007F25  40                 	db	64
   418  007F26  40                 	db	64
   419  007F27  00                 	db	0
   420  007F28  01                 	db	1
   421  007F29  02                 	db	2
   422  007F2A  04                 	db	4
   423  007F2B  00                 	db	0
   424  007F2C  20                 	db	32
   425  007F2D  54                 	db	84
   426  007F2E  54                 	db	84
   427  007F2F  54                 	db	84
   428  007F30  78                 	db	120
   429  007F31  7F                 	db	127
   430  007F32  48                 	db	72
   431  007F33  44                 	db	68
   432  007F34  44                 	db	68
   433  007F35  38                 	db	56
   434  007F36  38                 	db	56
   435  007F37  44                 	db	68
   436  007F38  44                 	db	68
   437  007F39  44                 	db	68
   438  007F3A  20                 	db	32
   439  007F3B  38                 	db	56
   440  007F3C  44                 	db	68
   441  007F3D  44                 	db	68
   442  007F3E  48                 	db	72
   443  007F3F  7F                 	db	127
   444  007F40  38                 	db	56
   445  007F41  54                 	db	84
   446  007F42  54                 	db	84
   447  007F43  54                 	db	84
   448  007F44  18                 	db	24
   449  007F45  08                 	db	8
   450  007F46  7E                 	db	126
   451  007F47  09                 	db	9
   452  007F48  01                 	db	1
   453  007F49  02                 	db	2
   454  007F4A  0C                 	db	12
   455  007F4B  52                 	db	82
   456  007F4C  52                 	db	82
   457  007F4D  52                 	db	82
   458  007F4E  3E                 	db	62
   459  007F4F  7F                 	db	127
   460  007F50  08                 	db	8
   461  007F51  04                 	db	4
   462  007F52  04                 	db	4
   463  007F53  78                 	db	120
   464  007F54  00                 	db	0
   465  007F55  44                 	db	68
   466  007F56  7D                 	db	125
   467  007F57  40                 	db	64
   468  007F58  00                 	db	0
   469  007F59  20                 	db	32
   470  007F5A  40                 	db	64
   471  007F5B  44                 	db	68
   472  007F5C  3D                 	db	61
   473  007F5D  00                 	db	0
   474  007F5E  7F                 	db	127
   475  007F5F  10                 	db	16
   476  007F60  28                 	db	40
   477  007F61  44                 	db	68
   478  007F62  00                 	db	0
   479  007F63  00                 	db	0
   480  007F64  41                 	db	65
   481  007F65  7F                 	db	127
   482  007F66  40                 	db	64
   483  007F67  00                 	db	0
   484  007F68  7C                 	db	124
   485  007F69  04                 	db	4
   486  007F6A  18                 	db	24
   487  007F6B  04                 	db	4
   488  007F6C  78                 	db	120
   489  007F6D  7C                 	db	124
   490  007F6E  08                 	db	8
   491  007F6F  04                 	db	4
   492  007F70  04                 	db	4
   493  007F71  78                 	db	120
   494  007F72  38                 	db	56
   495  007F73  44                 	db	68
   496  007F74  44                 	db	68
   497  007F75  44                 	db	68
   498  007F76  38                 	db	56
   499  007F77  7C                 	db	124
   500  007F78  14                 	db	20
   501  007F79  14                 	db	20
   502  007F7A  14                 	db	20
   503  007F7B  08                 	db	8
   504  007F7C  08                 	db	8
   505  007F7D  14                 	db	20
   506  007F7E  14                 	db	20
   507  007F7F  18                 	db	24
   508  007F80  7C                 	db	124
   509  007F81  7C                 	db	124
   510  007F82  08                 	db	8
   511  007F83  04                 	db	4
   512  007F84  04                 	db	4
   513  007F85  08                 	db	8
   514  007F86  48                 	db	72
   515  007F87  54                 	db	84
   516  007F88  54                 	db	84
   517  007F89  54                 	db	84
   518  007F8A  20                 	db	32
   519  007F8B  04                 	db	4
   520  007F8C  3F                 	db	63
   521  007F8D  44                 	db	68
   522  007F8E  40                 	db	64
   523  007F8F  20                 	db	32
   524  007F90  3C                 	db	60
   525  007F91  40                 	db	64
   526  007F92  40                 	db	64
   527  007F93  20                 	db	32
   528  007F94  7C                 	db	124
   529  007F95  1C                 	db	28
   530  007F96  20                 	db	32
   531  007F97  40                 	db	64
   532  007F98  20                 	db	32
   533  007F99  1C                 	db	28
   534  007F9A  3C                 	db	60
   535  007F9B  40                 	db	64
   536  007F9C  30                 	db	48
   537  007F9D  40                 	db	64
   538  007F9E  3C                 	db	60
   539  007F9F  44                 	db	68
   540  007FA0  28                 	db	40
   541  007FA1  10                 	db	16
   542  007FA2  28                 	db	40
   543  007FA3  44                 	db	68
   544  007FA4  0C                 	db	12
   545  007FA5  50                 	db	80
   546  007FA6  50                 	db	80
   547  007FA7  50                 	db	80
   548  007FA8  3C                 	db	60
   549  007FA9  44                 	db	68
   550  007FAA  64                 	db	100
   551  007FAB  54                 	db	84
   552  007FAC  4C                 	db	76
   553  007FAD  44                 	db	68
   554  007FAE  00                 	db	0
   555  007FAF  08                 	db	8
   556  007FB0  36                 	db	54
   557  007FB1  41                 	db	65
   558  007FB2  00                 	db	0
   559  007FB3  00                 	db	0
   560  007FB4  00                 	db	0
   561  007FB5  7F                 	db	127
   562  007FB6  00                 	db	0
   563  007FB7  00                 	db	0
   564  007FB8  00                 	db	0
   565  007FB9  41                 	db	65
   566  007FBA  36                 	db	54
   567  007FBB  08                 	db	8
   568  007FBC  00                 	db	0
   569  007FBD  10                 	db	16
   570  007FBE  08                 	db	8
   571  007FBF  08                 	db	8
   572  007FC0  10                 	db	16
   573  007FC1  08                 	db	8
   574  007FC2  78                 	db	120
   575  007FC3  46                 	db	70
   576  007FC4  41                 	db	65
   577  007FC5  46                 	db	70
   578  007FC6  78                 	db	120
   579  007FC7                     __end_of_FONTLOOKUP:
   580                           	opt stack 0
   581  007FC7                     _dpowers:
   582                           	opt stack 0
   583  007FC7  0001               	dw	1
   584  007FC9  000A               	dw	10
   585  007FCB  0064               	dw	100
   586  007FCD  03E8               	dw	1000
   587  007FCF  2710               	dw	10000
   588  007FD1                     __end_of_dpowers:
   589                           	opt stack 0
   590  0000                     _ANSELA	set	3896
   591  0000                     _ANSELB	set	3897
   592  0000                     _ANSELC	set	3898
   593  0000                     _ANSELD	set	3899
   594  0000                     _ANSELE	set	3900
   595  0000                     _ANSA3	set	31171
   596  0000                     _ANSB0	set	31176
   597  0000                     _ANSB1	set	31177
   598  0000                     _BAUD1CON	set	4024
   599  0000                     _BAUD2CON	set	3952
   600  0000                     _INTCON2bits	set	4081
   601  0000                     _INTCONbits	set	4082
   602  0000                     _IPR1bits	set	3999
   603  0000                     _IPR3bits	set	4005
   604  0000                     _LATA	set	3977
   605  0000                     _LATB	set	3978
   606  0000                     _LATBbits	set	3978
   607  0000                     _LATC	set	3979
   608  0000                     _LATCbits	set	3979
   609  0000                     _LATD	set	3980
   610  0000                     _LATE	set	3981
   611  0000                     _OSCCON	set	4051
   612  0000                     _OSCCON2	set	4050
   613  0000                     _OSCTUNE	set	3995
   614  0000                     _PIE1bits	set	3997
   615  0000                     _PIE3bits	set	4003
   616  0000                     _PIR1bits	set	3998
   617  0000                     _PIR3bits	set	4004
   618  0000                     _RC1STA	set	4011
   619  0000                     _RC1STAbits	set	4011
   620  0000                     _RC2STA	set	3953
   621  0000                     _RC2STAbits	set	3953
   622  0000                     _RCONbits	set	4048
   623  0000                     _RCREG1	set	4014
   624  0000                     _RCREG2	set	3956
   625  0000                     _SPBRG1	set	4015
   626  0000                     _SPBRG2	set	3957
   627  0000                     _SPBRGH1	set	4016
   628  0000                     _SPBRGH2	set	3958
   629  0000                     _SSP1ADD	set	4040
   630  0000                     _SSP1BUF	set	4041
   631  0000                     _SSP1CON1	set	4038
   632  0000                     _SSP1CON1bits	set	4038
   633  0000                     _SSP1STAT	set	4039
   634  0000                     _SSP1STATbits	set	4039
   635  0000                     _T0CON	set	4053
   636  0000                     _T0CONbits	set	4053
   637  0000                     _TMR0H	set	4055
   638  0000                     _TMR0L	set	4054
   639  0000                     _TRISA	set	3986
   640  0000                     _TRISAbits	set	3986
   641  0000                     _TRISB	set	3987
   642  0000                     _TRISBbits	set	3987
   643  0000                     _TRISC	set	3988
   644  0000                     _TRISCbits	set	3988
   645  0000                     _TRISD	set	3989
   646  0000                     _TRISE	set	3990
   647  0000                     _TX1STA	set	4012
   648  0000                     _TX2STA	set	3954
   649  0000                     _TXREG1	set	4013
   650  0000                     _TXREG2	set	3955
   651  0000                     _WPUB	set	3937
   652  0000                     _LATA3	set	31819
   653  0000                     _LATA7	set	31823
   654  0000                     _LATB0	set	31824
   655  0000                     _LATB1	set	31825
   656  0000                     _LATB3	set	31827
   657  0000                     _LATB4	set	31828
   658  0000                     _LATB5	set	31829
   659  0000                     _LATC0	set	31832
   660  0000                     _LATC1	set	31833
   661  0000                     _LATD0	set	31840
   662  0000                     _LATD3	set	31843
   663  0000                     _TRISB0	set	31896
   664  0000                     _TRISB1	set	31897
   665  0000                     _TRISD0	set	31912
   666  0000                     _TRISD2	set	31914
   667  0000                     _TRISD3	set	31915
   668  007FD1                     STR_17:
   669  007FD1  43                 	db	67	;'C'
   670  007FD2  61                 	db	97	;'a'
   671  007FD3  72                 	db	114	;'r'
   672  007FD4  20                 	db	32
   673  007FD5  43                 	db	67	;'C'
   674  007FD6  68                 	db	104	;'h'
   675  007FD7  61                 	db	97	;'a'
   676  007FD8  72                 	db	114	;'r'
   677  007FD9  67                 	db	103	;'g'
   678  007FDA  65                 	db	101	;'e'
   679  007FDB  72                 	db	114	;'r'
   680  007FDC  00                 	db	0
   681  007FDD                     STR_7:
   682  007FDD  25                 	db	37
   683  007FDE  30                 	db	48	;'0'
   684  007FDF  33                 	db	51	;'3'
   685  007FE0  64                 	db	100	;'d'
   686  007FE1  2C                 	db	44
   687  007FE2  45                 	db	69	;'E'
   688  007FE3  0A                 	db	10
   689  007FE4  00                 	db	0
   690  007FE5                     STR_19:
   691  007FE5  28                 	db	40
   692  007FE6  6E                 	db	110	;'n'
   693  007FE7  75                 	db	117	;'u'
   694  007FE8  6C                 	db	108	;'l'
   695  007FE9  6C                 	db	108	;'l'
   696  007FEA  29                 	db	41
   697  007FEB  00                 	db	0
   698  007FEC                     STR_18:
   699  007FEC  4E                 	db	78	;'N'
   700  007FED  6F                 	db	111	;'o'
   701  007FEE  20                 	db	32
   702  007FEF  42                 	db	66	;'B'
   703  007FF0  4D                 	db	77	;'M'
   704  007FF1  4D                 	db	77	;'M'
   705  007FF2  00                 	db	0
   706  007FF3                     STR_3:
   707  007FF3  25                 	db	37
   708  007FF4  30                 	db	48	;'0'
   709  007FF5  33                 	db	51	;'3'
   710  007FF6  64                 	db	100	;'d'
   711  007FF7  2C                 	db	44
   712  007FF8  00                 	db	0
   713  007FF9                     STR_1:
   714  007FF9  4D                 	db	77	;'M'
   715  007FFA  2C                 	db	44
   716  007FFB  00                 	db	0
   717  007FFC                     STR_2:
   718  007FFC  25                 	db	37
   719  007FFD  73                 	db	115	;'s'
   720  007FFE  00                 	db	0
   721  0000                     
   722                           ; #config settings
   723  007FFF  00                 	db	0	; dummy byte at the end
   724  0000                     
   725                           	psect	cinit
   726  001604                     __pcinit:
   727                           	opt stack 0
   728  001604                     start_initialization:
   729                           	opt stack 0
   730  001604                     __initialization:
   731                           	opt stack 0
   732                           
   733                           ; Clear objects allocated to BANK4 (200 bytes)
   734  001604  EE04  F000         	lfsr	0,__pbssBANK4
   735  001608  0EC8               	movlw	200
   736  00160A                     clear_0:
   737  00160A  6AEE               	clrf	postinc0,c
   738  00160C  06E8               	decf	wreg,f,c
   739  00160E  E1FD               	bnz	clear_0
   740                           
   741                           ; Clear objects allocated to BANK3 (206 bytes)
   742  001610  EE03  F000         	lfsr	0,__pbssBANK3
   743  001614  0ECE               	movlw	206
   744  001616                     clear_1:
   745  001616  6AEE               	clrf	postinc0,c
   746  001618  06E8               	decf	wreg,f,c
   747  00161A  E1FD               	bnz	clear_1
   748                           
   749                           ; Clear objects allocated to BANK2 (206 bytes)
   750  00161C  EE02  F000         	lfsr	0,__pbssBANK2
   751  001620  0ECE               	movlw	206
   752  001622                     clear_2:
   753  001622  6AEE               	clrf	postinc0,c
   754  001624  06E8               	decf	wreg,f,c
   755  001626  E1FD               	bnz	clear_2
   756                           
   757                           ; Clear objects allocated to BANK1 (246 bytes)
   758  001628  EE01  F000         	lfsr	0,__pbssBANK1
   759  00162C  0EF6               	movlw	246
   760  00162E                     clear_3:
   761  00162E  6AEE               	clrf	postinc0,c
   762  001630  06E8               	decf	wreg,f,c
   763  001632  E1FD               	bnz	clear_3
   764                           
   765                           ; Clear objects allocated to BANK0 (114 bytes)
   766  001634  EE00  F060         	lfsr	0,__pbssBANK0
   767  001638  0E72               	movlw	114
   768  00163A                     clear_4:
   769  00163A  6AEE               	clrf	postinc0,c
   770  00163C  06E8               	decf	wreg,f,c
   771  00163E  E1FD               	bnz	clear_4
   772                           
   773                           ; Clear objects allocated to COMRAM (28 bytes)
   774  001640  EE00  F028         	lfsr	0,__pbssCOMRAM
   775  001644  0E1C               	movlw	28
   776  001646                     clear_5:
   777  001646  6AEE               	clrf	postinc0,c
   778  001648  06E8               	decf	wreg,f,c
   779  00164A  E1FD               	bnz	clear_5
   780                           
   781                           ; Initialize objects allocated to COMRAM (1 bytes)
   782                           ; load TBLPTR registers with __pidataCOMRAM
   783  00164C  0EE2               	movlw	low __pidataCOMRAM
   784  00164E  6EF6               	movwf	tblptrl,c
   785  001650  0E1E               	movlw	high __pidataCOMRAM
   786  001652  6EF7               	movwf	tblptrh,c
   787  001654  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   788  001656  6EF8               	movwf	tblptru,c
   789  001658  0009               	tblrd		*+	;fetch initializer
   790  00165A  CFF5 F044          	movff	tablat,__pdataCOMRAM
   791  00165E                     end_of_initialization:
   792                           	opt stack 0
   793  00165E                     __end_of__initialization:
   794                           	opt stack 0
   795  00165E  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   796  001660  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   797  001662  0E00               	movlw	low (__Lmediumconst shr (0+16))
   798  001664  6EF8               	movwf	tblptru,c
   799  001666  0100               	movlb	0
   800  001668  EFF9  F00B         	goto	_main	;jump to C main() function
   801                           tblptru	equ	0xFF8
   802                           tblptrh	equ	0xFF7
   803                           tblptrl	equ	0xFF6
   804                           tablat	equ	0xFF5
   805                           postinc0	equ	0xFEE
   806                           wreg	equ	0xFE8
   807                           
   808                           	psect	bssCOMRAM
   809  000028                     __pbssCOMRAM:
   810                           	opt stack 0
   811  000028                     _time:
   812                           	opt stack 0
   813  000028                     	ds	4
   814  00002C                     _group:
   815                           	opt stack 0
   816  00002C                     	ds	2
   817  00002E                     _receiveArrayAddress:
   818                           	opt stack 0
   819  00002E                     	ds	2
   820  000030                     _sendStructAddress:
   821                           	opt stack 0
   822  000030                     	ds	2
   823  000032                     _timer0ReloadVal16bit:
   824                           	opt stack 0
   825  000032                     	ds	2
   826  000034                     _AKNAKsend:
   827                           	opt stack 0
   828  000034                     	ds	1
   829  000035                     _PowerOn:
   830                           	opt stack 0
   831  000035                     	ds	1
   832  000036                     _calc_CS:
   833                           	opt stack 0
   834  000036                     	ds	1
   835  000037                     _eusart1RxCount:
   836                           	opt stack 0
   837  000037                     	ds	1
   838  000038                     _eusart1RxHead:
   839                           	opt stack 0
   840  000038                     	ds	1
   841  000039                     _eusart1RxTail:
   842                           	opt stack 0
   843  000039                     	ds	1
   844  00003A                     _eusart1TxBufferRemaining:
   845                           	opt stack 0
   846  00003A                     	ds	1
   847  00003B                     _eusart1TxHead:
   848                           	opt stack 0
   849  00003B                     	ds	1
   850  00003C                     _eusart1TxTail:
   851                           	opt stack 0
   852  00003C                     	ds	1
   853  00003D                     _i:
   854                           	opt stack 0
   855  00003D                     	ds	1
   856  00003E                     _maxDataAddress:
   857                           	opt stack 0
   858  00003E                     	ds	1
   859  00003F                     _moduleAddress:
   860                           	opt stack 0
   861  00003F                     	ds	1
   862  000040                     _returnAddress:
   863                           	opt stack 0
   864  000040                     	ds	1
   865  000041                     _rx_address:
   866                           	opt stack 0
   867  000041                     	ds	1
   868  000042                     _rx_array_inx:
   869                           	opt stack 0
   870  000042                     	ds	1
   871  000043                     _rx_len:
   872                           	opt stack 0
   873  000043                     	ds	1
   874                           tblptru	equ	0xFF8
   875                           tblptrh	equ	0xFF7
   876                           tblptrl	equ	0xFF6
   877                           tablat	equ	0xFF5
   878                           postinc0	equ	0xFEE
   879                           wreg	equ	0xFE8
   880                           
   881                           	psect	dataCOMRAM
   882  000044                     __pdataCOMRAM:
   883                           	opt stack 0
   884  000044                     _Transmit_stall:
   885                           	opt stack 0
   886  000044                     	ds	1
   887                           tblptru	equ	0xFF8
   888                           tblptrh	equ	0xFF7
   889                           tblptrl	equ	0xFF6
   890                           tablat	equ	0xFF5
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           
   894                           	psect	bssBANK0
   895  000060                     __pbssBANK0:
   896                           	opt stack 0
   897  000060                     _ddata:
   898                           	opt stack 0
   899  000060                     	ds	11
   900  00006B                     _eusart1RxBuffer:
   901                           	opt stack 0
   902  00006B                     	ds	8
   903  000073                     _eusart1TxBuffer:
   904                           	opt stack 0
   905  000073                     	ds	8
   906  00007B                     _LEDtime:
   907                           	opt stack 0
   908  00007B                     	ds	4
   909  00007F                     _lastLEDTime:
   910                           	opt stack 0
   911  00007F                     	ds	4
   912  000083                     _talkTime:
   913                           	opt stack 0
   914  000083                     	ds	4
   915  000087                     _Start:
   916                           	opt stack 0
   917  000087                     	ds	2
   918  000089                     _addressErrorCounter:
   919                           	opt stack 0
   920  000089                     	ds	2
   921  00008B                     _alignErrorCounter:
   922                           	opt stack 0
   923  00008B                     	ds	2
   924  00008D                     _crcErrorCounter:
   925                           	opt stack 0
   926  00008D                     	ds	2
   927  00008F                     _dataAdressErrorCounter:
   928                           	opt stack 0
   929  00008F                     	ds	2
   930  000091                     _serial_available:
   931                           	opt stack 0
   932  000091                     	ds	2
   933  000093                     _serial_peek:
   934                           	opt stack 0
   935  000093                     	ds	2
   936  000095                     _serial_read:
   937                           	opt stack 0
   938  000095                     	ds	2
   939  000097                     _serial_write:
   940                           	opt stack 0
   941  000097                     	ds	2
   942  000099                     _ChargerData:
   943                           	opt stack 0
   944  000099                     	ds	40
   945  0000C1                     _crc_buffer:
   946                           	opt stack 0
   947  0000C1                     	ds	17
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           
   955                           	psect	bssBANK1
   956  000100                     __pbssBANK1:
   957                           	opt stack 0
   958  000100                     _receiveArray:
   959                           	opt stack 0
   960  000100                     	ds	40
   961  000128                     _ring_buffer:
   962                           	opt stack 0
   963  000128                     	ds	206
   964                           tblptru	equ	0xFF8
   965                           tblptrh	equ	0xFF7
   966                           tblptrl	equ	0xFF6
   967                           tablat	equ	0xFF5
   968                           postinc0	equ	0xFEE
   969                           wreg	equ	0xFE8
   970                           
   971                           	psect	bssBANK2
   972  000200                     __pbssBANK2:
   973                           	opt stack 0
   974  000200                     _input_buffer:
   975                           	opt stack 0
   976  000200                     	ds	206
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           
   984                           	psect	bssBANK3
   985  000300                     __pbssBANK3:
   986                           	opt stack 0
   987  000300                     _output_buffer:
   988                           	opt stack 0
   989  000300                     	ds	206
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           
   997                           	psect	bssBANK4
   998  000400                     __pbssBANK4:
   999                           	opt stack 0
  1000  000400                     _rx_buffer:
  1001                           	opt stack 0
  1002  000400                     	ds	200
  1003                           tblptru	equ	0xFF8
  1004                           tblptrh	equ	0xFF7
  1005                           tblptrl	equ	0xFF6
  1006                           tablat	equ	0xFF5
  1007                           postinc0	equ	0xFEE
  1008                           wreg	equ	0xFE8
  1009                           
  1010                           	psect	cstackBANK2
  1011  0002CE                     __pcstackBANK2:
  1012                           	opt stack 0
  1013  0002CE                     SetCharger@str:
  1014                           	opt stack 0
  1015                           
  1016                           ; 10 bytes @ 0x0
  1017  0002CE                     	ds	10
  1018  0002D8                     SetCharger@mode:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0xA
  1022  0002D8                     	ds	1
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           
  1030                           	psect	cstackBANK0
  1031  0000D2                     __pcstackBANK0:
  1032                           	opt stack 0
  1033  0000D2                     ?__doprnt:
  1034                           	opt stack 0
  1035  0000D2                     sendData@whereToSend:
  1036                           	opt stack 0
  1037  0000D2                     CRCcheck@SentCRC:
  1038                           	opt stack 0
  1039  0000D2                     ToSend@what:
  1040                           	opt stack 0
  1041  0000D2                     NokiaStr@str:
  1042                           	opt stack 0
  1043  0000D2                     __doprnt@pb:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x0
  1047  0000D2                     	ds	1
  1048  0000D3                     sendData@CS:
  1049                           	opt stack 0
  1050  0000D3                     CRCcheck@calculatedCRC:
  1051                           	opt stack 0
  1052                           
  1053                           ; 1 bytes @ 0x1
  1054  0000D3                     	ds	1
  1055  0000D4                     ToSend@where:
  1056                           	opt stack 0
  1057  0000D4                     sendData@i:
  1058                           	opt stack 0
  1059  0000D4                     __doprnt@f:
  1060                           	opt stack 0
  1061  0000D4                     CRCcheck@arrayHolder:
  1062                           	opt stack 0
  1063                           
  1064                           ; 3 bytes @ 0x2
  1065  0000D4                     	ds	2
  1066  0000D6                     ??_respondChargerAsECU:
  1067  0000D6                     __doprnt@ap:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x4
  1071  0000D6                     	ds	1
  1072  0000D7                     CRCcheck@rt:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x5
  1076  0000D7                     	ds	1
  1077  0000D8                     ??__doprnt:
  1078                           
  1079                           ; 1 bytes @ 0x6
  1080  0000D8                     	ds	1
  1081  0000D9                     ??_receiveData:
  1082                           
  1083                           ; 1 bytes @ 0x7
  1084  0000D9                     	ds	3
  1085  0000DC                     __doprnt@prec:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0xA
  1089  0000DC                     	ds	1
  1090  0000DD                     __doprnt@val:
  1091                           	opt stack 0
  1092                           
  1093                           ; 2 bytes @ 0xB
  1094  0000DD                     	ds	2
  1095  0000DF                     receiveData@crcHolder:
  1096                           	opt stack 0
  1097  0000DF                     __doprnt@len:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0xD
  1101  0000DF                     	ds	1
  1102  0000E0                     receiveData@crcHolder_1690:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0xE
  1106  0000E0                     	ds	1
  1107  0000E1                     __doprnt@flag:
  1108                           	opt stack 0
  1109  0000E1                     receiveData@holder:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0xF
  1113  0000E1                     	ds	1
  1114  0000E2                     __doprnt@cp:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x10
  1118  0000E2                     	ds	2
  1119  0000E4                     __doprnt@width:
  1120                           	opt stack 0
  1121  0000E4                     receiveData@holder_1689:
  1122                           	opt stack 0
  1123                           
  1124                           ; 3 bytes @ 0x12
  1125  0000E4                     	ds	2
  1126  0000E6                     __doprnt@c:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x14
  1130  0000E6                     	ds	1
  1131  0000E7                     ?_sprintf:
  1132                           	opt stack 0
  1133  0000E7                     ?_printf:
  1134                           	opt stack 0
  1135  0000E7                     receiveData@u:
  1136                           	opt stack 0
  1137  0000E7                     printf@f:
  1138                           	opt stack 0
  1139  0000E7                     sprintf@wh:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x15
  1143  0000E7                     	ds	2
  1144  0000E9                     receiveData@r:
  1145                           	opt stack 0
  1146  0000E9                     sprintf@f:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x17
  1150  0000E9                     	ds	2
  1151  0000EB                     printf@ap:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x19
  1155  0000EB                     	ds	2
  1156  0000ED                     sprintf@ap:
  1157                           	opt stack 0
  1158  0000ED                     printf@pb:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x1B
  1162  0000ED                     	ds	2
  1163  0000EF                     sprintf@pb:
  1164                           	opt stack 0
  1165                           
  1166                           ; 4 bytes @ 0x1D
  1167  0000EF                     	ds	4
  1168  0000F3                     SetCharger@Current:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x21
  1172  0000F3                     	ds	2
  1173  0000F5                     SetCharger@Voltage:
  1174                           	opt stack 0
  1175                           
  1176                           ; 2 bytes @ 0x23
  1177  0000F5                     	ds	2
  1178                           tblptru	equ	0xFF8
  1179                           tblptrh	equ	0xFF7
  1180                           tblptrl	equ	0xFF6
  1181                           tablat	equ	0xFF5
  1182                           postinc0	equ	0xFEE
  1183                           wreg	equ	0xFE8
  1184                           
  1185                           	psect	cstackCOMRAM
  1186  000001                     __pcstackCOMRAM:
  1187                           	opt stack 0
  1188  000001                     ?_UART_buff_modulo_inc:
  1189                           	opt stack 0
  1190  000001                     ?_UART_buff_size:
  1191                           	opt stack 0
  1192  000001                     UART_buff_size@_this:
  1193                           	opt stack 0
  1194  000001                     UART_buff_modulo_inc@value:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x0
  1198  000001                     	ds	2
  1199  000003                     UART_buff_modulo_inc@modulus:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x2
  1203  000003                     	ds	2
  1204  000005                     UART_buff_modulo_inc@my_value:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x4
  1208  000005                     	ds	2
  1209  000007                     UART_buff_put@_this:
  1210                           	opt stack 0
  1211  000007                     UART_buff_get@_this:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x6
  1215  000007                     	ds	2
  1216  000009                     ??_UART_buff_get:
  1217  000009                     UART_buff_put@c:
  1218                           	opt stack 0
  1219                           
  1220                           ; 1 bytes @ 0x8
  1221  000009                     	ds	1
  1222  00000A                     ??_UART_buff_put:
  1223                           
  1224                           ; 1 bytes @ 0x9
  1225  00000A                     	ds	1
  1226  00000B                     UART_buff_get@c:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0xA
  1230  00000B                     	ds	1
  1231  00000C                     EUSART2_Receive_ISR@data:
  1232                           	opt stack 0
  1233                           
  1234                           ; 1 bytes @ 0xB
  1235  00000C                     	ds	1
  1236  00000D                     ??_INTERRUPT_InterruptManager:
  1237                           
  1238                           ; 1 bytes @ 0xC
  1239  00000D                     	ds	14
  1240  00001B                     ??_TMR0_Initialize:
  1241  00001B                     ??_isdigit:
  1242  00001B                     ??_updateTimers:
  1243  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1244                           	opt stack 0
  1245  00001B                     ?_time_get:
  1246                           	opt stack 0
  1247  00001B                     ?___wmul:
  1248                           	opt stack 0
  1249  00001B                     ?___awmod:
  1250                           	opt stack 0
  1251  00001B                     ?___lwdiv:
  1252                           	opt stack 0
  1253  00001B                     EUSART1_Write@txData:
  1254                           	opt stack 0
  1255  00001B                     SPI1_Exchange8bit@data:
  1256                           	opt stack 0
  1257  00001B                     SetMux@channel:
  1258                           	opt stack 0
  1259  00001B                     time_Set@value:
  1260                           	opt stack 0
  1261  00001B                     CRC8@data:
  1262                           	opt stack 0
  1263  00001B                     FastTransfer_buffer_modulo_inc@value:
  1264                           	opt stack 0
  1265  00001B                     crcBufS_put@_this:
  1266                           	opt stack 0
  1267  00001B                     crcBufS_status_put@_this:
  1268                           	opt stack 0
  1269  00001B                     crcBufS_get@_this:
  1270                           	opt stack 0
  1271  00001B                     Delay@wait:
  1272                           	opt stack 0
  1273  00001B                     ___wmul@multiplier:
  1274                           	opt stack 0
  1275  00001B                     ___awmod@dividend:
  1276                           	opt stack 0
  1277  00001B                     ___lwdiv@dividend:
  1278                           	opt stack 0
  1279  00001B                     memset@p1:
  1280                           	opt stack 0
  1281  00001B                     strcpy@to:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x1A
  1285  00001B                     	ds	1
  1286  00001C                     putch@txData:
  1287                           	opt stack 0
  1288  00001C                     _isdigit$2394:
  1289                           	opt stack 0
  1290                           
  1291                           ; 1 bytes @ 0x1B
  1292  00001C                     	ds	1
  1293  00001D                     ??_Delay:
  1294  00001D                     time_get@WhatTime:
  1295                           	opt stack 0
  1296  00001D                     time_Set@WhatTime:
  1297                           	opt stack 0
  1298  00001D                     CRC8@len:
  1299                           	opt stack 0
  1300  00001D                     crcBufS_put@address:
  1301                           	opt stack 0
  1302  00001D                     crcBufS_status_put@time:
  1303                           	opt stack 0
  1304  00001D                     crcBufS_get@time:
  1305                           	opt stack 0
  1306  00001D                     isdigit@c:
  1307                           	opt stack 0
  1308  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1309                           	opt stack 0
  1310  00001D                     ___wmul@multiplicand:
  1311                           	opt stack 0
  1312  00001D                     ___awmod@divisor:
  1313                           	opt stack 0
  1314  00001D                     ___lwdiv@divisor:
  1315                           	opt stack 0
  1316  00001D                     memset@c:
  1317                           	opt stack 0
  1318  00001D                     strcpy@from:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x1C
  1322  00001D                     	ds	1
  1323  00001E                     CRC8@sum:
  1324                           	opt stack 0
  1325  00001E                     crcBufS_put@oldCRC:
  1326                           	opt stack 0
  1327  00001E                     crcBufS_status_put@status:
  1328                           	opt stack 0
  1329  00001E                     crcBufS_get@space:
  1330                           	opt stack 0
  1331  00001E                     Delay@i:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x1D
  1335  00001E                     	ds	1
  1336  00001F                     ??_crcBufS_get:
  1337  00001F                     ??_crcBufS_status_put:
  1338  00001F                     CRC8@extract:
  1339                           	opt stack 0
  1340  00001F                     crcBufS_put@status:
  1341                           	opt stack 0
  1342  00001F                     ___awmod@counter:
  1343                           	opt stack 0
  1344  00001F                     ___lwdiv@counter:
  1345                           	opt stack 0
  1346  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1347                           	opt stack 0
  1348  00001F                     ___wmul@product:
  1349                           	opt stack 0
  1350  00001F                     memset@n:
  1351                           	opt stack 0
  1352  00001F                     strcpy@cp:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x1E
  1356  00001F                     	ds	1
  1357  000020                     ??_crcBufS_put:
  1358  000020                     CRC8@tempI:
  1359                           	opt stack 0
  1360  000020                     Precharge@OnOff:
  1361                           	opt stack 0
  1362  000020                     ___awmod@sign:
  1363                           	opt stack 0
  1364  000020                     ___lwdiv@quotient:
  1365                           	opt stack 0
  1366                           
  1367                           ; 2 bytes @ 0x1F
  1368  000020                     	ds	1
  1369  000021                     CRC8@crc:
  1370                           	opt stack 0
  1371  000021                     LCDwrite@data:
  1372                           	opt stack 0
  1373  000021                     FastTransfer_buffer_put@_this:
  1374                           	opt stack 0
  1375  000021                     Precharge@i:
  1376                           	opt stack 0
  1377  000021                     memset@p:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0x20
  1381  000021                     	ds	1
  1382  000022                     ?___lwmod:
  1383                           	opt stack 0
  1384  000022                     LCDwrite@mode:
  1385                           	opt stack 0
  1386  000022                     ___lwmod@dividend:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x21
  1390  000022                     	ds	1
  1391  000023                     ??_LcdCharacter:
  1392  000023                     FastTransfer_buffer_put@towhere:
  1393                           	opt stack 0
  1394  000023                     gotoXy@y:
  1395                           	opt stack 0
  1396  000023                     FastTransfer_buffer_flush@_this:
  1397                           	opt stack 0
  1398  000023                     crcBufS_status_put@wantedTime:
  1399                           	opt stack 0
  1400  000023                     UART_buff_init@_this:
  1401                           	opt stack 0
  1402  000023                     Precharge@i_2001:
  1403                           	opt stack 0
  1404  000023                     clearLcd@res:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x22
  1408  000023                     	ds	1
  1409  000024                     gotoXy@x:
  1410                           	opt stack 0
  1411  000024                     FastTransfer_buffer_put@towhat:
  1412                           	opt stack 0
  1413  000024                     ___lwmod@divisor:
  1414                           	opt stack 0
  1415                           
  1416                           ; 2 bytes @ 0x23
  1417  000024                     	ds	1
  1418  000025                     LcdCharacter@character:
  1419                           	opt stack 0
  1420  000025                     FastTransfer_buffer_flush@clearBuffer:
  1421                           	opt stack 0
  1422  000025                     crcBufS_get@wantedTime:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x24
  1426  000025                     	ds	1
  1427  000026                     ??_FastTransfer_buffer_put:
  1428  000026                     ___lwmod@counter:
  1429                           	opt stack 0
  1430  000026                     LcdCharacter@index:
  1431                           	opt stack 0
  1432                           
  1433                           ; 2 bytes @ 0x25
  1434  000026                     	ds	1
  1435  000027                     ??_sendData:
  1436  000027                     
  1437                           ; 1 bytes @ 0x26
  1438  000027                     	ds	1
  1439  000028                     tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           
  1446                           ; 1 bytes @ 0x27
  1447 ;;
  1448 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1449 ;;
  1450 ;; *************** function _main *****************
  1451 ;; Defined at:
  1452 ;;		line 16 in file "main.c"
  1453 ;; Parameters:    Size  Location     Type
  1454 ;;		None
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;		None
  1457 ;; Return value:  Size  Location     Type
  1458 ;;                  1    wreg      void 
  1459 ;; Registers used:
  1460 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1461 ;; Tracked objects:
  1462 ;;		On entry : 0/0
  1463 ;;		On exit  : 0/0
  1464 ;;		Unchanged: 0/0
  1465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1466 ;;      Params:         0       0       0       0       0       0       0
  1467 ;;      Locals:         0       0       0       0       0       0       0
  1468 ;;      Temps:          0       0       0       0       0       0       0
  1469 ;;      Totals:         0       0       0       0       0       0       0
  1470 ;;Total ram usage:        0 bytes
  1471 ;; Hardware stack levels required when called:   10
  1472 ;; This function calls:
  1473 ;;		_Delay
  1474 ;;		_NokiaStart
  1475 ;;		_SYSTEM_Initialize
  1476 ;;		_Splash
  1477 ;;		_clearLcd
  1478 ;;		_ledDebug
  1479 ;;		_updateComms
  1480 ;;		_updateTimers
  1481 ;; This function is called by:
  1482 ;;		Startup code after reset
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486                           	psect	text0
  1487  0017F2                     __ptext0:
  1488                           	opt stack 0
  1489  0017F2                     _main:
  1490                           	opt stack 21
  1491                           
  1492                           ;main.c: 18: SYSTEM_Initialize();
  1493                           
  1494                           ;incstack = 0
  1495  0017F2  EC12  F00F         	call	_SYSTEM_Initialize	;wreg free
  1496                           
  1497                           ;main.c: 37: (INTCONbits.GIE = 1);
  1498  0017F6  8EF2               	bsf	intcon,7,c	;volatile
  1499                           
  1500                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1501  0017F8  8CF2               	bsf	intcon,6,c	;volatile
  1502                           
  1503                           ;main.c: 47: ANSELC = 0;
  1504  0017FA  0E00               	movlw	0
  1505  0017FC  010F               	movlb	15	; () banked
  1506  0017FE  6F3A               	movwf	58,b	;volatile
  1507                           
  1508                           ; BSR set to: 15
  1509                           ;main.c: 48: ANSELA = 0;
  1510  001800  0E00               	movlw	0
  1511  001802  010F               	movlb	15	; () banked
  1512  001804  6F38               	movwf	56,b	;volatile
  1513                           
  1514                           ; BSR set to: 15
  1515                           ;main.c: 49: TRISCbits.TRISC0=0;
  1516  001806  9094               	bcf	3988,0,c	;volatile
  1517                           
  1518                           ; BSR set to: 15
  1519                           ;main.c: 50: TRISCbits.TRISC1=0;
  1520  001808  9294               	bcf	3988,1,c	;volatile
  1521                           
  1522                           ; BSR set to: 15
  1523                           ;main.c: 51: TRISCbits.TRISC2=0;
  1524  00180A  9494               	bcf	3988,2,c	;volatile
  1525                           
  1526                           ; BSR set to: 15
  1527                           ;main.c: 52: TRISAbits.TRISA6=0;
  1528  00180C  9C92               	bcf	3986,6,c	;volatile
  1529                           
  1530                           ; BSR set to: 15
  1531                           ;main.c: 53: TRISAbits.TRISA7=0;
  1532  00180E  9E92               	bcf	3986,7,c	;volatile
  1533                           
  1534                           ; BSR set to: 15
  1535                           ;main.c: 54: TRISBbits.TRISB3=0;
  1536  001810  9693               	bcf	3987,3,c	;volatile
  1537                           
  1538                           ; BSR set to: 15
  1539                           ;main.c: 55: TRISBbits.TRISB4=0;
  1540  001812  9893               	bcf	3987,4,c	;volatile
  1541                           
  1542                           ; BSR set to: 15
  1543                           ;main.c: 56: TRISBbits.TRISB5=0;
  1544  001814  9A93               	bcf	3987,5,c	;volatile
  1545                           
  1546                           ; BSR set to: 15
  1547                           ;main.c: 58: LATBbits.LATB3=0;
  1548  001816  968A               	bcf	3978,3,c	;volatile
  1549                           
  1550                           ; BSR set to: 15
  1551                           ;main.c: 59: LATBbits.LATB5=0;
  1552  001818  9A8A               	bcf	3978,5,c	;volatile
  1553                           
  1554                           ; BSR set to: 15
  1555                           ;main.c: 60: LATBbits.LATB4=0;
  1556  00181A  988A               	bcf	3978,4,c	;volatile
  1557                           
  1558                           ; BSR set to: 15
  1559                           
  1560                           ; BSR set to: 15
  1561                           
  1562                           ;main.c: 68: do { LATC1 = 1; } while(0);
  1563  00181C  828B               	bsf	3979,1,c	;volatile
  1564                           
  1565                           ; BSR set to: 15
  1566                           
  1567                           ; BSR set to: 15
  1568                           
  1569                           ;main.c: 73: do { ANSA3 = 0; } while(0);
  1570                           
  1571                           ; BSR set to: 15
  1572  00181E  010F               	movlb	15	; () banked
  1573  001820  9738               	bcf	56,3,b	;volatile
  1574                           
  1575                           ; BSR set to: 15
  1576                           ;main.c: 76: NokiaStart();
  1577                           
  1578                           ; BSR set to: 15
  1579  001822  ECD6  F009         	call	_NokiaStart	;wreg free
  1580                           
  1581                           ;main.c: 77: Delay(100);
  1582  001826  0E00               	movlw	0
  1583  001828  6E1C               	movwf	Delay@wait+1,c
  1584  00182A  0E64               	movlw	100
  1585  00182C  6E1B               	movwf	Delay@wait,c
  1586  00182E  EC92  F00D         	call	_Delay	;wreg free
  1587                           
  1588                           ;main.c: 79: clearLcd();
  1589  001832  ECA0  F00E         	call	_clearLcd	;wreg free
  1590                           
  1591                           ;main.c: 80: Splash();
  1592  001836  EC5D  F00D         	call	_Splash	;wreg free
  1593  00183A                     l4641:
  1594                           
  1595                           ;main.c: 85: updateComms();
  1596  00183A  ECC5  F00D         	call	_updateComms	;wreg free
  1597                           
  1598                           ;main.c: 86: updateTimers();
  1599  00183E  EC36  F00B         	call	_updateTimers	;wreg free
  1600                           
  1601                           ;main.c: 87: ledDebug();
  1602  001842  EC9B  F00C         	call	_ledDebug	;wreg free
  1603  001846  D7F9               	goto	l4641
  1604  001848                     __end_of_main:
  1605                           	opt stack 0
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           intcon	equ	0xFF2
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           
  1614 ;; *************** function _updateTimers *****************
  1615 ;; Defined at:
  1616 ;;		line 148 in file "mcc_generated_files/tmr0.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, status,2, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1630 ;;      Params:         0       0       0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0       0       0
  1632 ;;      Temps:          8       0       0       0       0       0       0
  1633 ;;      Totals:         8       0       0       0       0       0       0
  1634 ;;Total ram usage:        8 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    4
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_main
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text1
  1645  00166C                     __ptext1:
  1646                           	opt stack 0
  1647  00166C                     _updateTimers:
  1648                           	opt stack 26
  1649                           
  1650                           ;tmr0.c: 149: LEDtime += (time - lastLEDTime);
  1651                           
  1652                           ;incstack = 0
  1653  00166C  C07F  F01B         	movff	_lastLEDTime,??_updateTimers
  1654  001670  C080  F01C         	movff	_lastLEDTime+1,??_updateTimers+1
  1655  001674  C081  F01D         	movff	_lastLEDTime+2,??_updateTimers+2
  1656  001678  C082  F01E         	movff	_lastLEDTime+3,??_updateTimers+3
  1657  00167C  1E1B               	comf	??_updateTimers,f,c
  1658  00167E  1E1C               	comf	??_updateTimers+1,f,c
  1659  001680  1E1D               	comf	??_updateTimers+2,f,c
  1660  001682  1E1E               	comf	??_updateTimers+3,f,c
  1661  001684  2A1B               	incf	??_updateTimers,f,c
  1662  001686  0E00               	movlw	0
  1663  001688  221C               	addwfc	??_updateTimers+1,f,c
  1664  00168A  221D               	addwfc	??_updateTimers+2,f,c
  1665  00168C  221E               	addwfc	??_updateTimers+3,f,c
  1666  00168E  5028               	movf	_time,w,c
  1667  001690  241B               	addwf	??_updateTimers,w,c
  1668  001692  6E1F               	movwf	(??_updateTimers+4)& (0+255),c
  1669  001694  5029               	movf	_time+1,w,c
  1670  001696  201C               	addwfc	??_updateTimers+1,w,c
  1671  001698  6E20               	movwf	(??_updateTimers+5)& (0+255),c
  1672  00169A  502A               	movf	_time+2,w,c
  1673  00169C  201D               	addwfc	??_updateTimers+2,w,c
  1674  00169E  6E21               	movwf	(??_updateTimers+6)& (0+255),c
  1675  0016A0  502B               	movf	_time+3,w,c
  1676  0016A2  201E               	addwfc	??_updateTimers+3,w,c
  1677  0016A4  6E22               	movwf	(??_updateTimers+7)& (0+255),c
  1678  0016A6  501F               	movf	??_updateTimers+4,w,c
  1679  0016A8  0100               	movlb	0	; () banked
  1680  0016AA  277B               	addwf	_LEDtime& (0+255),f,b
  1681  0016AC  5020               	movf	??_updateTimers+5,w,c
  1682  0016AE  0100               	movlb	0	; () banked
  1683  0016B0  237C               	addwfc	(_LEDtime+1)& (0+255),f,b
  1684  0016B2  5021               	movf	??_updateTimers+6,w,c
  1685  0016B4  0100               	movlb	0	; () banked
  1686  0016B6  237D               	addwfc	(_LEDtime+2)& (0+255),f,b
  1687  0016B8  5022               	movf	??_updateTimers+7,w,c
  1688  0016BA  0100               	movlb	0	; () banked
  1689  0016BC  237E               	addwfc	(_LEDtime+3)& (0+255),f,b
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;tmr0.c: 150: lastLEDTime = time;
  1693  0016BE  C028  F07F         	movff	_time,_lastLEDTime
  1694  0016C2  C029  F080         	movff	_time+1,_lastLEDTime+1
  1695  0016C6  C02A  F081         	movff	_time+2,_lastLEDTime+2
  1696  0016CA  C02B  F082         	movff	_time+3,_lastLEDTime+3
  1697                           
  1698                           ; BSR set to: 0
  1699  0016CE  0012               	return		;funcret
  1700  0016D0                     __end_of_updateTimers:
  1701                           	opt stack 0
  1702                           tblptru	equ	0xFF8
  1703                           tblptrh	equ	0xFF7
  1704                           tblptrl	equ	0xFF6
  1705                           tablat	equ	0xFF5
  1706                           intcon	equ	0xFF2
  1707                           postinc0	equ	0xFEE
  1708                           wreg	equ	0xFE8
  1709                           
  1710 ;; *************** function _updateComms *****************
  1711 ;; Defined at:
  1712 ;;		line 12 in file "Communications.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;		None
  1715 ;; Auto vars:     Size  Location     Type
  1716 ;;		None
  1717 ;; Return value:  Size  Location     Type
  1718 ;;                  1    wreg      void 
  1719 ;; Registers used:
  1720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1721 ;; Tracked objects:
  1722 ;;		On entry : 0/0
  1723 ;;		On exit  : 0/0
  1724 ;;		Unchanged: 0/0
  1725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1726 ;;      Params:         0       0       0       0       0       0       0
  1727 ;;      Locals:         0       0       0       0       0       0       0
  1728 ;;      Temps:          0       0       0       0       0       0       0
  1729 ;;      Totals:         0       0       0       0       0       0       0
  1730 ;;Total ram usage:        0 bytes
  1731 ;; Hardware stack levels used:    1
  1732 ;; Hardware stack levels required when called:    9
  1733 ;; This function calls:
  1734 ;;		_Precharge
  1735 ;;		_SetCharger
  1736 ;;		_receiveData
  1737 ;;		_respondChargerAsECU
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text2
  1744  001B8A                     __ptext2:
  1745                           	opt stack 0
  1746  001B8A                     _updateComms:
  1747                           	opt stack 21
  1748                           
  1749                           ;Communications.c: 13: if (receiveData()) {
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;incstack = 0
  1753  001B8A  EC67  F005         	call	_receiveData	;wreg free
  1754  001B8E  0900               	iorlw	0
  1755  001B90  B4D8               	btfsc	status,2,c
  1756  001B92  0012               	return	
  1757                           
  1758                           ;Communications.c: 14: Precharge(receiveArray[1]);
  1759  001B94  0101               	movlb	1	; () banked
  1760  001B96  5102               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1761  001B98  EC54  F00A         	call	_Precharge
  1762                           
  1763                           ;Communications.c: 15: SetCharger(1, receiveArray[2], receiveArray[3]);
  1764  001B9C  C104  F0F3         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1765  001BA0  C105  F0F4         	movff	_receiveArray+5,SetCharger@Current+1	;volatile
  1766  001BA4  C106  F0F5         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1767  001BA8  C107  F0F6         	movff	_receiveArray+7,SetCharger@Voltage+1	;volatile
  1768  001BAC  0E01               	movlw	1
  1769  001BAE  ECFA  F003         	call	_SetCharger
  1770                           
  1771                           ;Communications.c: 16: respondChargerAsECU();
  1772  001BB2  EC68  F00B         	call	_respondChargerAsECU	;wreg free
  1773  001BB6  0012               	return	
  1774  001BB8                     __end_of_updateComms:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           intcon	equ	0xFF2
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _respondChargerAsECU *****************
  1786 ;; Defined at:
  1787 ;;		line 38 in file "Communications.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;		None
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;		None
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1801 ;;      Params:         0       0       0       0       0       0       0
  1802 ;;      Locals:         0       0       0       0       0       0       0
  1803 ;;      Temps:          0       1       0       0       0       0       0
  1804 ;;      Totals:         0       1       0       0       0       0       0
  1805 ;;Total ram usage:        1 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    7
  1808 ;; This function calls:
  1809 ;;		_Delay
  1810 ;;		_GetPowerState
  1811 ;;		_ToSend
  1812 ;;		_sendData
  1813 ;; This function is called by:
  1814 ;;		_updateComms
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818                           	psect	text3
  1819  0016D0                     __ptext3:
  1820                           	opt stack 0
  1821  0016D0                     _respondChargerAsECU:
  1822                           	opt stack 22
  1823                           
  1824                           ;Communications.c: 39: LATCbits.LATC5 = 1;
  1825                           
  1826                           ;incstack = 0
  1827  0016D0  8A8B               	bsf	3979,5,c	;volatile
  1828                           
  1829                           ;Communications.c: 40: ToSend(0, 7);
  1830  0016D2  0E00               	movlw	0
  1831  0016D4  0100               	movlb	0	; () banked
  1832  0016D6  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1833  0016D8  0E07               	movlw	7
  1834  0016DA  6FD2               	movwf	ToSend@what& (0+255),b
  1835  0016DC  0E00               	movlw	0
  1836  0016DE  ECC7  F00E         	call	_ToSend
  1837                           
  1838                           ;Communications.c: 41: ToSend(2, GetPowerState());
  1839  0016E2  EC6D  F00F         	call	_GetPowerState	;wreg free
  1840  0016E6  0100               	movlb	0	; () banked
  1841  0016E8  6FD6               	movwf	??_respondChargerAsECU& (0+255),b
  1842  0016EA  0100               	movlb	0	; () banked
  1843  0016EC  51D6               	movf	??_respondChargerAsECU& (0+255),w,b
  1844  0016EE  0100               	movlb	0	; () banked
  1845  0016F0  6FD2               	movwf	ToSend@what& (0+255),b
  1846  0016F2  6BD3               	clrf	(ToSend@what+1)& (0+255),b
  1847  0016F4  0E02               	movlw	2
  1848  0016F6  ECC7  F00E         	call	_ToSend
  1849                           
  1850                           ;Communications.c: 42: ToSend(3, GetPowerState());
  1851  0016FA  EC6D  F00F         	call	_GetPowerState	;wreg free
  1852  0016FE  0100               	movlb	0	; () banked
  1853  001700  6FD6               	movwf	??_respondChargerAsECU& (0+255),b
  1854  001702  0100               	movlb	0	; () banked
  1855  001704  51D6               	movf	??_respondChargerAsECU& (0+255),w,b
  1856  001706  0100               	movlb	0	; () banked
  1857  001708  6FD2               	movwf	ToSend@what& (0+255),b
  1858  00170A  6BD3               	clrf	(ToSend@what+1)& (0+255),b
  1859  00170C  0E03               	movlw	3
  1860  00170E  ECC7  F00E         	call	_ToSend
  1861                           
  1862                           ;Communications.c: 43: Delay(5);
  1863  001712  0E00               	movlw	0
  1864  001714  6E1C               	movwf	Delay@wait+1,c
  1865  001716  0E05               	movlw	5
  1866  001718  6E1B               	movwf	Delay@wait,c
  1867  00171A  EC92  F00D         	call	_Delay	;wreg free
  1868                           
  1869                           ;Communications.c: 44: sendData(6);
  1870  00171E  0E06               	movlw	6
  1871  001720  EC90  F00A         	call	_sendData
  1872                           
  1873                           ;Communications.c: 45: Delay(3);
  1874  001724  0E00               	movlw	0
  1875  001726  6E1C               	movwf	Delay@wait+1,c
  1876  001728  0E03               	movlw	3
  1877  00172A  6E1B               	movwf	Delay@wait,c
  1878  00172C  EC92  F00D         	call	_Delay	;wreg free
  1879                           
  1880                           ;Communications.c: 46: LATCbits.LATC5 = 0;
  1881  001730  9A8B               	bcf	3979,5,c	;volatile
  1882  001732  0012               	return		;funcret
  1883  001734                     __end_of_respondChargerAsECU:
  1884                           	opt stack 0
  1885                           tblptru	equ	0xFF8
  1886                           tblptrh	equ	0xFF7
  1887                           tblptrl	equ	0xFF6
  1888                           tablat	equ	0xFF5
  1889                           intcon	equ	0xFF2
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _sendData *****************
  1895 ;; Defined at:
  1896 ;;		line 53 in file "FastTransfer.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;  whereToSend     1    wreg     unsigned char 
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;  whereToSend     1    0[BANK0 ] unsigned char 
  1901 ;;  i               2    2[BANK0 ] int 
  1902 ;;  CS              1    1[BANK0 ] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;                  1    wreg      void 
  1905 ;; Registers used:
  1906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 0/0
  1909 ;;		On exit  : 0/0
  1910 ;;		Unchanged: 0/0
  1911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1912 ;;      Params:         0       0       0       0       0       0       0
  1913 ;;      Locals:         0       4       0       0       0       0       0
  1914 ;;      Temps:          1       0       0       0       0       0       0
  1915 ;;      Totals:         1       4       0       0       0       0       0
  1916 ;;Total ram usage:        5 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    6
  1919 ;; This function calls:
  1920 ;;		_CRC8
  1921 ;;		_FastTransfer_buffer_flush
  1922 ;;		_crcBufS_put
  1923 ;; This function is called by:
  1924 ;;		_respondChargerAsECU
  1925 ;;		_SetBMM
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           	psect	text4
  1930  001520                     __ptext4:
  1931                           	opt stack 0
  1932  001520                     _sendData:
  1933                           	opt stack 22
  1934                           
  1935                           ;incstack = 0
  1936                           ;sendData@whereToSend stored from wreg
  1937  001520  0100               	movlb	0	; () banked
  1938  001522  6FD2               	movwf	sendData@whereToSend& (0+255),b
  1939                           
  1940                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1941  001524  C030  F01B         	movff	_sendStructAddress,CRC8@data
  1942  001528  C031  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1943  00152C  C1F4  F01D         	movff	_ring_buffer+204,CRC8@len
  1944  001530  EC76  F00C         	call	_CRC8	;wreg free
  1945  001534  0100               	movlb	0	; () banked
  1946  001536  6FD3               	movwf	sendData@CS& (0+255),b
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;FastTransfer.c: 66: int i;
  1950                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1951  001538  0E00               	movlw	0
  1952  00153A  0100               	movlb	0	; () banked
  1953  00153C  6FD5               	movwf	(sendData@i+1)& (0+255),b
  1954  00153E  0E00               	movlw	0
  1955  001540  6FD4               	movwf	sendData@i& (0+255),b
  1956  001542  D003               	goto	l4249
  1957  001544                     l4247:
  1958  001544  0100               	movlb	0	; () banked
  1959  001546  4BD4               	infsnz	sendData@i& (0+255),f,b
  1960  001548  2BD5               	incf	(sendData@i+1)& (0+255),f,b
  1961  00154A                     l4249:
  1962                           
  1963                           ; BSR set to: 0
  1964  00154A  0101               	movlb	1	; () banked
  1965  00154C  51F4               	movf	(_ring_buffer+204)& (0+255),w,b
  1966  00154E  0100               	movlb	0	; () banked
  1967  001550  5DD4               	subwf	sendData@i& (0+255),w,b
  1968  001552  0100               	movlb	0	; () banked
  1969  001554  51D5               	movf	(sendData@i+1)& (0+255),w,b
  1970  001556  0A80               	xorlw	128
  1971  001558  6E27               	movwf	??_sendData& (0+255),c
  1972  00155A  0101               	movlb	1	; () banked
  1973  00155C  51F5               	movf	(_ring_buffer+205)& (0+255),w,b
  1974  00155E  0A80               	xorlw	128
  1975  001560  5827               	subwfb	??_sendData& (0+255),w,c
  1976  001562  A0D8               	btfss	status,0,c
  1977  001564  D7EF               	goto	l4247
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1981                           
  1982                           ; BSR set to: 1
  1983                           
  1984                           ;FastTransfer.c: 69: }
  1985                           ;FastTransfer.c: 72: serial_write(CS);
  1986  001566  0EC1               	movlw	low _crc_buffer
  1987  001568  6E1B               	movwf	crcBufS_put@_this,c
  1988  00156A  0E00               	movlw	high _crc_buffer
  1989  00156C  6E1C               	movwf	crcBufS_put@_this+1,c
  1990  00156E  C0D2  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1991  001572  C0D3  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1992  001576  0E00               	movlw	0
  1993  001578  6E1F               	movwf	crcBufS_put@status,c
  1994  00157A  EC6B  F008         	call	_crcBufS_put	;wreg free
  1995                           
  1996                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1997  00157E  0E28               	movlw	low _ring_buffer
  1998  001580  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1999  001582  0E01               	movlw	high _ring_buffer
  2000  001584  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  2001  001586  0E00               	movlw	0
  2002  001588  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  2003  00158A  0E01               	movlw	1
  2004  00158C  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  2005  00158E  EC9A  F00B         	call	_FastTransfer_buffer_flush	;wreg free
  2006  001592  0012               	return		;funcret
  2007  001594                     __end_of_sendData:
  2008                           	opt stack 0
  2009                           tblptru	equ	0xFF8
  2010                           tblptrh	equ	0xFF7
  2011                           tblptrl	equ	0xFF6
  2012                           tablat	equ	0xFF5
  2013                           intcon	equ	0xFF2
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function _crcBufS_put *****************
  2019 ;; Defined at:
  2020 ;;		line 321 in file "FastTransfer.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2023 ;;		 -> crc_buffer(17), 
  2024 ;;  address         1   28[COMRAM] unsigned char 
  2025 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2026 ;;  status          1   30[COMRAM] unsigned char 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2038 ;;      Params:         5       0       0       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0
  2040 ;;      Temps:          2       0       0       0       0       0       0
  2041 ;;      Totals:         7       0       0       0       0       0       0
  2042 ;;Total ram usage:        7 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; Hardware stack levels required when called:    4
  2045 ;; This function calls:
  2046 ;;		Nothing
  2047 ;; This function is called by:
  2048 ;;		_sendData
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text5
  2053  0010D6                     __ptext5:
  2054                           	opt stack 0
  2055  0010D6                     _crcBufS_put:
  2056                           	opt stack 23
  2057                           
  2058                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  2059                           
  2060                           ;incstack = 0
  2061  0010D6  EE20 F00F          	lfsr	2,15
  2062  0010DA  501B               	movf	crcBufS_put@_this,w,c
  2063  0010DC  26D9               	addwf	fsr2l,f,c
  2064  0010DE  501C               	movf	crcBufS_put@_this+1,w,c
  2065  0010E0  22DA               	addwfc	fsr2h,f,c
  2066  0010E2  CFDE F020          	movff	postinc2,??_crcBufS_put
  2067  0010E6  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2068  0010EA  5020               	movf	??_crcBufS_put,w,c
  2069  0010EC  241B               	addwf	crcBufS_put@_this,w,c
  2070  0010EE  6ED9               	movwf	fsr2l,c
  2071  0010F0  5021               	movf	??_crcBufS_put+1,w,c
  2072  0010F2  201C               	addwfc	crcBufS_put@_this+1,w,c
  2073  0010F4  6EDA               	movwf	fsr2h,c
  2074  0010F6  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2075                           
  2076                           ;FastTransfer.c: 323: _this->head++;
  2077  0010FA  EE20 F00F          	lfsr	2,15
  2078  0010FE  501B               	movf	crcBufS_put@_this,w,c
  2079  001100  26D9               	addwf	fsr2l,f,c
  2080  001102  501C               	movf	crcBufS_put@_this+1,w,c
  2081  001104  22DA               	addwfc	fsr2h,f,c
  2082  001106  2ADE               	incf	postinc2,f,c
  2083  001108  0E00               	movlw	0
  2084  00110A  22DD               	addwfc	postdec2,f,c
  2085                           
  2086                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  2087  00110C  EE20 F00F          	lfsr	2,15
  2088  001110  501B               	movf	crcBufS_put@_this,w,c
  2089  001112  26D9               	addwf	fsr2l,f,c
  2090  001114  501C               	movf	crcBufS_put@_this+1,w,c
  2091  001116  22DA               	addwfc	fsr2h,f,c
  2092  001118  CFDE F020          	movff	postinc2,??_crcBufS_put
  2093  00111C  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2094  001120  5020               	movf	??_crcBufS_put,w,c
  2095  001122  241B               	addwf	crcBufS_put@_this,w,c
  2096  001124  6ED9               	movwf	fsr2l,c
  2097  001126  5021               	movf	??_crcBufS_put+1,w,c
  2098  001128  201C               	addwfc	crcBufS_put@_this+1,w,c
  2099  00112A  6EDA               	movwf	fsr2h,c
  2100  00112C  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2101                           
  2102                           ;FastTransfer.c: 325: _this->head++;
  2103  001130  EE20 F00F          	lfsr	2,15
  2104  001134  501B               	movf	crcBufS_put@_this,w,c
  2105  001136  26D9               	addwf	fsr2l,f,c
  2106  001138  501C               	movf	crcBufS_put@_this+1,w,c
  2107  00113A  22DA               	addwfc	fsr2h,f,c
  2108  00113C  2ADE               	incf	postinc2,f,c
  2109  00113E  0E00               	movlw	0
  2110  001140  22DD               	addwfc	postdec2,f,c
  2111                           
  2112                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  2113  001142  EE20 F00F          	lfsr	2,15
  2114  001146  501B               	movf	crcBufS_put@_this,w,c
  2115  001148  26D9               	addwf	fsr2l,f,c
  2116  00114A  501C               	movf	crcBufS_put@_this+1,w,c
  2117  00114C  22DA               	addwfc	fsr2h,f,c
  2118  00114E  CFDE F020          	movff	postinc2,??_crcBufS_put
  2119  001152  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2120  001156  5020               	movf	??_crcBufS_put,w,c
  2121  001158  241B               	addwf	crcBufS_put@_this,w,c
  2122  00115A  6ED9               	movwf	fsr2l,c
  2123  00115C  5021               	movf	??_crcBufS_put+1,w,c
  2124  00115E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2125  001160  6EDA               	movwf	fsr2h,c
  2126  001162  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2127                           
  2128                           ;FastTransfer.c: 327: _this->head++;
  2129  001166  EE20 F00F          	lfsr	2,15
  2130  00116A  501B               	movf	crcBufS_put@_this,w,c
  2131  00116C  26D9               	addwf	fsr2l,f,c
  2132  00116E  501C               	movf	crcBufS_put@_this+1,w,c
  2133  001170  22DA               	addwfc	fsr2h,f,c
  2134  001172  2ADE               	incf	postinc2,f,c
  2135  001174  0E00               	movlw	0
  2136  001176  22DD               	addwfc	postdec2,f,c
  2137                           
  2138                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  2139  001178  EE20 F00F          	lfsr	2,15
  2140  00117C  501B               	movf	crcBufS_put@_this,w,c
  2141  00117E  26D9               	addwf	fsr2l,f,c
  2142  001180  501C               	movf	crcBufS_put@_this+1,w,c
  2143  001182  22DA               	addwfc	fsr2h,f,c
  2144  001184  0E01               	movlw	1
  2145  001186  BEDB               	btfsc	plusw2,7,c
  2146  001188  0012               	return	
  2147  00118A  0E01               	movlw	1
  2148  00118C  50DB               	movf	plusw2,w,c
  2149  00118E  E104               	bnz	u3140
  2150  001190  0E0F               	movlw	15
  2151  001192  5CDE               	subwf	postinc2,w,c
  2152  001194  A0D8               	btfss	status,0,c
  2153  001196  0012               	return	
  2154  001198                     u3140:
  2155                           
  2156                           ;FastTransfer.c: 329: _this->head = 0;
  2157  001198  EE20 F00F          	lfsr	2,15
  2158  00119C  501B               	movf	crcBufS_put@_this,w,c
  2159  00119E  26D9               	addwf	fsr2l,f,c
  2160  0011A0  501C               	movf	crcBufS_put@_this+1,w,c
  2161  0011A2  22DA               	addwfc	fsr2h,f,c
  2162  0011A4  0E00               	movlw	0
  2163  0011A6  6EDE               	movwf	postinc2,c
  2164  0011A8  0E00               	movlw	0
  2165  0011AA  6EDD               	movwf	postdec2,c
  2166  0011AC  0012               	return	
  2167  0011AE                     __end_of_crcBufS_put:
  2168                           	opt stack 0
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           intcon	equ	0xFF2
  2174                           postinc0	equ	0xFEE
  2175                           wreg	equ	0xFE8
  2176                           indf2	equ	0xFDF
  2177                           postinc2	equ	0xFDE
  2178                           postdec2	equ	0xFDD
  2179                           plusw2	equ	0xFDB
  2180                           fsr2h	equ	0xFDA
  2181                           fsr2l	equ	0xFD9
  2182                           status	equ	0xFD8
  2183                           
  2184 ;; *************** function _FastTransfer_buffer_flush *****************
  2185 ;; Defined at:
  2186 ;;		line 261 in file "FastTransfer.c"
  2187 ;; Parameters:    Size  Location     Type
  2188 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  2189 ;;		 -> ring_buffer(206), 
  2190 ;;  clearBuffer     2   36[COMRAM] const int 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;		None
  2193 ;; Return value:  Size  Location     Type
  2194 ;;                  1    wreg      void 
  2195 ;; Registers used:
  2196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2197 ;; Tracked objects:
  2198 ;;		On entry : 0/0
  2199 ;;		On exit  : 0/0
  2200 ;;		Unchanged: 0/0
  2201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2202 ;;      Params:         4       0       0       0       0       0       0
  2203 ;;      Locals:         0       0       0       0       0       0       0
  2204 ;;      Temps:          0       0       0       0       0       0       0
  2205 ;;      Totals:         4       0       0       0       0       0       0
  2206 ;;Total ram usage:        4 bytes
  2207 ;; Hardware stack levels used:    1
  2208 ;; Hardware stack levels required when called:    5
  2209 ;; This function calls:
  2210 ;;		_memset
  2211 ;; This function is called by:
  2212 ;;		_sendData
  2213 ;; This function uses a non-reentrant model
  2214 ;;
  2215                           
  2216                           	psect	text6
  2217  001734                     __ptext6:
  2218                           	opt stack 0
  2219  001734                     _FastTransfer_buffer_flush:
  2220                           	opt stack 22
  2221                           
  2222                           ;FastTransfer.c: 262: _this->count = 0;
  2223                           
  2224                           ;incstack = 0
  2225  001734  EE20 F0CC          	lfsr	2,204
  2226  001738  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2227  00173A  26D9               	addwf	fsr2l,f,c
  2228  00173C  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2229  00173E  22DA               	addwfc	fsr2h,f,c
  2230  001740  0E00               	movlw	0
  2231  001742  6EDE               	movwf	postinc2,c
  2232  001744  0E00               	movlw	0
  2233  001746  6EDD               	movwf	postdec2,c
  2234                           
  2235                           ;FastTransfer.c: 263: _this->head = 0;
  2236  001748  EE20 F0C8          	lfsr	2,200
  2237  00174C  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2238  00174E  26D9               	addwf	fsr2l,f,c
  2239  001750  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2240  001752  22DA               	addwfc	fsr2h,f,c
  2241  001754  0E00               	movlw	0
  2242  001756  6EDE               	movwf	postinc2,c
  2243  001758  0E00               	movlw	0
  2244  00175A  6EDD               	movwf	postdec2,c
  2245                           
  2246                           ;FastTransfer.c: 264: _this->tail = 0;
  2247  00175C  EE20 F0CA          	lfsr	2,202
  2248  001760  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2249  001762  26D9               	addwf	fsr2l,f,c
  2250  001764  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2251  001766  22DA               	addwfc	fsr2h,f,c
  2252  001768  0E00               	movlw	0
  2253  00176A  6EDE               	movwf	postinc2,c
  2254  00176C  0E00               	movlw	0
  2255  00176E  6EDD               	movwf	postdec2,c
  2256                           
  2257                           ;FastTransfer.c: 265: if (clearBuffer) {
  2258  001770  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2259  001772  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2260  001774  B4D8               	btfsc	status,2,c
  2261  001776  0012               	return	
  2262                           
  2263                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2264  001778  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2265  00177C  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2266  001780  0E00               	movlw	0
  2267  001782  6E1E               	movwf	memset@c+1,c
  2268  001784  0E00               	movlw	0
  2269  001786  6E1D               	movwf	memset@c,c
  2270  001788  0E00               	movlw	0
  2271  00178A  6E20               	movwf	memset@n+1,c
  2272  00178C  0EC8               	movlw	200
  2273  00178E  6E1F               	movwf	memset@n,c
  2274  001790  EC36  F00E         	call	_memset	;wreg free
  2275  001794  0012               	return	
  2276  001796                     __end_of_FastTransfer_buffer_flush:
  2277                           	opt stack 0
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           intcon	equ	0xFF2
  2283                           postinc0	equ	0xFEE
  2284                           wreg	equ	0xFE8
  2285                           indf2	equ	0xFDF
  2286                           postinc2	equ	0xFDE
  2287                           postdec2	equ	0xFDD
  2288                           plusw2	equ	0xFDB
  2289                           fsr2h	equ	0xFDA
  2290                           fsr2l	equ	0xFD9
  2291                           status	equ	0xFD8
  2292                           
  2293 ;; *************** function _ToSend *****************
  2294 ;; Defined at:
  2295 ;;		line 216 in file "FastTransfer.c"
  2296 ;; Parameters:    Size  Location     Type
  2297 ;;  where           1    wreg     unsigned char 
  2298 ;;  what            2    0[BANK0 ] unsigned int 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;  where           1    2[BANK0 ] unsigned char 
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  1    wreg      void 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2310 ;;      Params:         0       2       0       0       0       0       0
  2311 ;;      Locals:         0       1       0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0       0       0
  2313 ;;      Totals:         0       3       0       0       0       0       0
  2314 ;;Total ram usage:        3 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    6
  2317 ;; This function calls:
  2318 ;;		_FastTransfer_buffer_put
  2319 ;; This function is called by:
  2320 ;;		_respondChargerAsECU
  2321 ;;		_SetBMM
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           	psect	text7
  2326  001D8E                     __ptext7:
  2327                           	opt stack 0
  2328  001D8E                     _ToSend:
  2329                           	opt stack 22
  2330                           
  2331                           ;incstack = 0
  2332                           ;ToSend@where stored from wreg
  2333  001D8E  0100               	movlb	0	; () banked
  2334  001D90  6FD4               	movwf	ToSend@where& (0+255),b
  2335                           
  2336                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2337  001D92  0E28               	movlw	low _ring_buffer
  2338  001D94  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2339  001D96  0E01               	movlw	high _ring_buffer
  2340  001D98  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2341  001D9A  C0D4  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2342  001D9E  C0D2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2343  001DA2  C0D3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2344  001DA6  ECB9  F006         	call	_FastTransfer_buffer_put	;wreg free
  2345  001DAA  0012               	return		;funcret
  2346  001DAC                     __end_of_ToSend:
  2347                           	opt stack 0
  2348                           tblptru	equ	0xFF8
  2349                           tblptrh	equ	0xFF7
  2350                           tblptrl	equ	0xFF6
  2351                           tablat	equ	0xFF5
  2352                           intcon	equ	0xFF2
  2353                           postinc0	equ	0xFEE
  2354                           wreg	equ	0xFE8
  2355                           indf2	equ	0xFDF
  2356                           postinc2	equ	0xFDE
  2357                           postdec2	equ	0xFDD
  2358                           plusw2	equ	0xFDB
  2359                           fsr2h	equ	0xFDA
  2360                           fsr2l	equ	0xFD9
  2361                           status	equ	0xFD8
  2362                           
  2363 ;; *************** function _FastTransfer_buffer_put *****************
  2364 ;; Defined at:
  2365 ;;		line 223 in file "FastTransfer.c"
  2366 ;; Parameters:    Size  Location     Type
  2367 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2368 ;;		 -> ring_buffer(206), 
  2369 ;;  towhere         1   34[COMRAM] unsigned char 
  2370 ;;  towhat          2   35[COMRAM] unsigned int 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2382 ;;      Params:         5       0       0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0
  2384 ;;      Temps:          2       0       0       0       0       0       0
  2385 ;;      Totals:         7       0       0       0       0       0       0
  2386 ;;Total ram usage:        7 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    5
  2389 ;; This function calls:
  2390 ;;		_FastTransfer_buffer_modulo_inc
  2391 ;; This function is called by:
  2392 ;;		_ToSend
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text8
  2397  000D72                     __ptext8:
  2398                           	opt stack 0
  2399  000D72                     _FastTransfer_buffer_put:
  2400                           	opt stack 22
  2401                           
  2402                           ;FastTransfer.c: 225: group.integer = towhat;
  2403                           
  2404                           ;incstack = 0
  2405  000D72  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  2406  000D76  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2407                           
  2408                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2409  000D7A  EE20 F0CC          	lfsr	2,204
  2410  000D7E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2411  000D80  26D9               	addwf	fsr2l,f,c
  2412  000D82  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2413  000D84  22DA               	addwfc	fsr2h,f,c
  2414  000D86  0E01               	movlw	1
  2415  000D88  BEDB               	btfsc	plusw2,7,c
  2416  000D8A  D007               	goto	l4011
  2417  000D8C  0E01               	movlw	1
  2418  000D8E  50DB               	movf	plusw2,w,c
  2419  000D90  E103               	bnz	u3161
  2420  000D92  0EC5               	movlw	197
  2421  000D94  5CDE               	subwf	postinc2,w,c
  2422  000D96  B0D8               	btfsc	status,0,c
  2423  000D98                     u3161:
  2424  000D98  0012               	return	
  2425  000D9A                     l4011:
  2426                           
  2427                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2428  000D9A  EE20 F0C8          	lfsr	2,200
  2429  000D9E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2430  000DA0  26D9               	addwf	fsr2l,f,c
  2431  000DA2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2432  000DA4  22DA               	addwfc	fsr2h,f,c
  2433  000DA6  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  2434  000DAA  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  2435  000DAE  5026               	movf	??_FastTransfer_buffer_put,w,c
  2436  000DB0  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2437  000DB2  6ED9               	movwf	fsr2l,c
  2438  000DB4  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  2439  000DB6  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2440  000DB8  6EDA               	movwf	fsr2h,c
  2441  000DBA  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2442                           
  2443                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2444  000DBE  EE20 F0C8          	lfsr	2,200
  2445  000DC2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2446  000DC4  26D9               	addwf	fsr2l,f,c
  2447  000DC6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2448  000DC8  22DA               	addwfc	fsr2h,f,c
  2449  000DCA  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2450  000DCE  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2451  000DD2  0E00               	movlw	0
  2452  000DD4  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2453  000DD6  0EC8               	movlw	200
  2454  000DD8  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2455  000DDA  EC62  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2456  000DDE  EE20 F0C8          	lfsr	2,200
  2457  000DE2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2458  000DE4  26D9               	addwf	fsr2l,f,c
  2459  000DE6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2460  000DE8  22DA               	addwfc	fsr2h,f,c
  2461  000DEA  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2462  000DEE  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2463                           
  2464                           ;FastTransfer.c: 230: ++_this->count;
  2465  000DF2  EE20 F0CC          	lfsr	2,204
  2466  000DF6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2467  000DF8  26D9               	addwf	fsr2l,f,c
  2468  000DFA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2469  000DFC  22DA               	addwfc	fsr2h,f,c
  2470  000DFE  2ADE               	incf	postinc2,f,c
  2471  000E00  0E00               	movlw	0
  2472  000E02  22DD               	addwfc	postdec2,f,c
  2473                           
  2474                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2475  000E04  EE20 F0C8          	lfsr	2,200
  2476  000E08  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2477  000E0A  26D9               	addwf	fsr2l,f,c
  2478  000E0C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2479  000E0E  22DA               	addwfc	fsr2h,f,c
  2480  000E10  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  2481  000E14  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  2482  000E18  5026               	movf	??_FastTransfer_buffer_put,w,c
  2483  000E1A  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2484  000E1C  6ED9               	movwf	fsr2l,c
  2485  000E1E  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  2486  000E20  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2487  000E22  6EDA               	movwf	fsr2h,c
  2488  000E24  C02C  FFDF         	movff	_group,indf2
  2489                           
  2490                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2491  000E28  EE20 F0C8          	lfsr	2,200
  2492  000E2C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2493  000E2E  26D9               	addwf	fsr2l,f,c
  2494  000E30  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2495  000E32  22DA               	addwfc	fsr2h,f,c
  2496  000E34  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2497  000E38  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2498  000E3C  0E00               	movlw	0
  2499  000E3E  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2500  000E40  0EC8               	movlw	200
  2501  000E42  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2502  000E44  EC62  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2503  000E48  EE20 F0C8          	lfsr	2,200
  2504  000E4C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2505  000E4E  26D9               	addwf	fsr2l,f,c
  2506  000E50  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2507  000E52  22DA               	addwfc	fsr2h,f,c
  2508  000E54  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2509  000E58  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2510                           
  2511                           ;FastTransfer.c: 233: ++_this->count;
  2512  000E5C  EE20 F0CC          	lfsr	2,204
  2513  000E60  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2514  000E62  26D9               	addwf	fsr2l,f,c
  2515  000E64  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2516  000E66  22DA               	addwfc	fsr2h,f,c
  2517  000E68  2ADE               	incf	postinc2,f,c
  2518  000E6A  0E00               	movlw	0
  2519  000E6C  22DD               	addwfc	postdec2,f,c
  2520                           
  2521                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2522  000E6E  EE20 F0C8          	lfsr	2,200
  2523  000E72  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2524  000E74  26D9               	addwf	fsr2l,f,c
  2525  000E76  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2526  000E78  22DA               	addwfc	fsr2h,f,c
  2527  000E7A  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  2528  000E7E  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  2529  000E82  5026               	movf	??_FastTransfer_buffer_put,w,c
  2530  000E84  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2531  000E86  6ED9               	movwf	fsr2l,c
  2532  000E88  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  2533  000E8A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2534  000E8C  6EDA               	movwf	fsr2h,c
  2535  000E8E  C02D  FFDF         	movff	_group+1,indf2
  2536                           
  2537                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2538  000E92  EE20 F0C8          	lfsr	2,200
  2539  000E96  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2540  000E98  26D9               	addwf	fsr2l,f,c
  2541  000E9A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2542  000E9C  22DA               	addwfc	fsr2h,f,c
  2543  000E9E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2544  000EA2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2545  000EA6  0E00               	movlw	0
  2546  000EA8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2547  000EAA  0EC8               	movlw	200
  2548  000EAC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2549  000EAE  EC62  F00E         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2550  000EB2  EE20 F0C8          	lfsr	2,200
  2551  000EB6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2552  000EB8  26D9               	addwf	fsr2l,f,c
  2553  000EBA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2554  000EBC  22DA               	addwfc	fsr2h,f,c
  2555  000EBE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2556  000EC2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2557                           
  2558                           ;FastTransfer.c: 236: ++_this->count;
  2559  000EC6  EE20 F0CC          	lfsr	2,204
  2560  000ECA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2561  000ECC  26D9               	addwf	fsr2l,f,c
  2562  000ECE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2563  000ED0  22DA               	addwfc	fsr2h,f,c
  2564  000ED2  2ADE               	incf	postinc2,f,c
  2565  000ED4  0E00               	movlw	0
  2566  000ED6  22DD               	addwfc	postdec2,f,c
  2567  000ED8  0012               	return	
  2568  000EDA                     __end_of_FastTransfer_buffer_put:
  2569                           	opt stack 0
  2570                           tblptru	equ	0xFF8
  2571                           tblptrh	equ	0xFF7
  2572                           tblptrl	equ	0xFF6
  2573                           tablat	equ	0xFF5
  2574                           intcon	equ	0xFF2
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           indf2	equ	0xFDF
  2578                           postinc2	equ	0xFDE
  2579                           postdec2	equ	0xFDD
  2580                           plusw2	equ	0xFDB
  2581                           fsr2h	equ	0xFDA
  2582                           fsr2l	equ	0xFD9
  2583                           status	equ	0xFD8
  2584                           
  2585 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2586 ;; Defined at:
  2587 ;;		line 273 in file "FastTransfer.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;  value           2   26[COMRAM] const unsigned int 
  2590 ;;  modulus         2   28[COMRAM] const unsigned int 
  2591 ;; Auto vars:     Size  Location     Type
  2592 ;;  my_value        2   30[COMRAM] unsigned int 
  2593 ;; Return value:  Size  Location     Type
  2594 ;;                  2   26[COMRAM] unsigned int 
  2595 ;; Registers used:
  2596 ;;		wreg, status,2, status,0
  2597 ;; Tracked objects:
  2598 ;;		On entry : 0/0
  2599 ;;		On exit  : 0/0
  2600 ;;		Unchanged: 0/0
  2601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2602 ;;      Params:         4       0       0       0       0       0       0
  2603 ;;      Locals:         2       0       0       0       0       0       0
  2604 ;;      Temps:          0       0       0       0       0       0       0
  2605 ;;      Totals:         6       0       0       0       0       0       0
  2606 ;;Total ram usage:        6 bytes
  2607 ;; Hardware stack levels used:    1
  2608 ;; Hardware stack levels required when called:    4
  2609 ;; This function calls:
  2610 ;;		Nothing
  2611 ;; This function is called by:
  2612 ;;		_FastTransfer_buffer_put
  2613 ;;		_FastTransfer_buffer_get
  2614 ;; This function uses a non-reentrant model
  2615 ;;
  2616                           
  2617                           	psect	text9
  2618  001CC4                     __ptext9:
  2619                           	opt stack 0
  2620  001CC4                     _FastTransfer_buffer_modulo_inc:
  2621                           	opt stack 22
  2622                           
  2623                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2624                           
  2625                           ;incstack = 0
  2626  001CC4  0E01               	movlw	1
  2627  001CC6  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2628  001CC8  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2629  001CCA  0E00               	movlw	0
  2630  001CCC  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2631  001CCE  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2632                           
  2633                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2634  001CD0  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2635  001CD2  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2636  001CD4  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2637  001CD6  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2638  001CD8  A0D8               	btfss	status,0,c
  2639  001CDA  D004               	goto	l3905
  2640                           
  2641                           ;FastTransfer.c: 276: my_value = 0;
  2642  001CDC  0E00               	movlw	0
  2643  001CDE  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2644  001CE0  0E00               	movlw	0
  2645  001CE2  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2646  001CE4                     l3905:
  2647                           
  2648                           ;FastTransfer.c: 277: }
  2649                           ;FastTransfer.c: 278: return (my_value);
  2650  001CE4  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2651  001CE8  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2652  001CEC  0012               	return	
  2653  001CEE                     __end_of_FastTransfer_buffer_modulo_inc:
  2654                           	opt stack 0
  2655                           tblptru	equ	0xFF8
  2656                           tblptrh	equ	0xFF7
  2657                           tblptrl	equ	0xFF6
  2658                           tablat	equ	0xFF5
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           indf2	equ	0xFDF
  2663                           postinc2	equ	0xFDE
  2664                           postdec2	equ	0xFDD
  2665                           plusw2	equ	0xFDB
  2666                           fsr2h	equ	0xFDA
  2667                           fsr2l	equ	0xFD9
  2668                           status	equ	0xFD8
  2669                           
  2670 ;; *************** function _GetPowerState *****************
  2671 ;; Defined at:
  2672 ;;		line 155 in file "Functions.c"
  2673 ;; Parameters:    Size  Location     Type
  2674 ;;		None
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;		None
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      unsigned char 
  2679 ;; Registers used:
  2680 ;;		wreg, status,2
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2686 ;;      Params:         0       0       0       0       0       0       0
  2687 ;;      Locals:         0       0       0       0       0       0       0
  2688 ;;      Temps:          0       0       0       0       0       0       0
  2689 ;;      Totals:         0       0       0       0       0       0       0
  2690 ;;Total ram usage:        0 bytes
  2691 ;; Hardware stack levels used:    1
  2692 ;; Hardware stack levels required when called:    4
  2693 ;; This function calls:
  2694 ;;		Nothing
  2695 ;; This function is called by:
  2696 ;;		_respondChargerAsECU
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text10
  2701  001EDA                     __ptext10:
  2702                           	opt stack 0
  2703  001EDA                     _GetPowerState:
  2704                           	opt stack 24
  2705                           
  2706                           ;Functions.c: 156: return PowerOn;
  2707                           
  2708                           ;incstack = 0
  2709  001EDA  5035               	movf	_PowerOn,w,c
  2710  001EDC  0012               	return	
  2711  001EDE                     __end_of_GetPowerState:
  2712                           	opt stack 0
  2713                           tblptru	equ	0xFF8
  2714                           tblptrh	equ	0xFF7
  2715                           tblptrl	equ	0xFF6
  2716                           tablat	equ	0xFF5
  2717                           intcon	equ	0xFF2
  2718                           postinc0	equ	0xFEE
  2719                           wreg	equ	0xFE8
  2720                           indf2	equ	0xFDF
  2721                           postinc2	equ	0xFDE
  2722                           postdec2	equ	0xFDD
  2723                           plusw2	equ	0xFDB
  2724                           fsr2h	equ	0xFDA
  2725                           fsr2l	equ	0xFD9
  2726                           status	equ	0xFD8
  2727                           
  2728 ;; *************** function _receiveData *****************
  2729 ;; Defined at:
  2730 ;;		line 82 in file "FastTransfer.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2735 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2736 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2737 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2738 ;;  u               2   21[BANK0 ] int 
  2739 ;;  r               2   23[BANK0 ] int 
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      unsigned char 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2749 ;;      Params:         0       0       0       0       0       0       0
  2750 ;;      Locals:         0      12       0       0       0       0       0
  2751 ;;      Temps:          0       6       0       0       0       0       0
  2752 ;;      Totals:         0      18       0       0       0       0       0
  2753 ;;Total ram usage:       18 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    6
  2756 ;; This function calls:
  2757 ;;		_CRC8
  2758 ;;		_CRCcheck
  2759 ;; This function is called by:
  2760 ;;		_updateComms
  2761 ;;		_SetBMM
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text11
  2766  000ACE                     __ptext11:
  2767                           	opt stack 0
  2768  000ACE                     _receiveData:
  2769                           	opt stack 23
  2770                           
  2771                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2772                           
  2773                           ;incstack = 0
  2774  000ACE  D020               	goto	l4407
  2775  000AD0                     l4397:
  2776                           
  2777                           ; BSR set to: 0
  2778  000AD0  0100               	movlb	0	; () banked
  2779  000AD2  4BE7               	infsnz	receiveData@u& (0+255),f,b
  2780  000AD4  2BE8               	incf	(receiveData@u+1)& (0+255),f,b
  2781                           
  2782                           ; BSR set to: 0
  2783                           
  2784                           ; BSR set to: 0
  2785  000AD6  5043               	movf	_rx_len,w,c
  2786  000AD8  0100               	movlb	0	; () banked
  2787  000ADA  6FD9               	movwf	??_receiveData& (0+255),b
  2788  000ADC  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  2789  000ADE  0E01               	movlw	1
  2790  000AE0  0100               	movlb	0	; () banked
  2791  000AE2  27D9               	addwf	??_receiveData& (0+255),f,b
  2792  000AE4  0E00               	movlw	0
  2793  000AE6  23DA               	addwfc	(??_receiveData+1)& (0+255),f,b
  2794  000AE8  0100               	movlb	0	; () banked
  2795  000AEA  51E7               	movf	receiveData@u& (0+255),w,b
  2796  000AEC  0100               	movlb	0	; () banked
  2797  000AEE  5DD9               	subwf	??_receiveData& (0+255),w,b
  2798  000AF0  0100               	movlb	0	; () banked
  2799  000AF2  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  2800  000AF4  0A80               	xorlw	128
  2801  000AF6  0100               	movlb	0	; () banked
  2802  000AF8  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  2803  000AFA  0100               	movlb	0	; () banked
  2804  000AFC  51E8               	movf	(receiveData@u+1)& (0+255),w,b
  2805  000AFE  0A80               	xorlw	128
  2806  000B00  0100               	movlb	0	; () banked
  2807  000B02  59DB               	subwfb	(??_receiveData+2)& (0+255),w,b
  2808  000B04  B0D8               	btfsc	status,0,c
  2809  000B06  D7E4               	goto	l4397
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;FastTransfer.c: 109: }
  2813                           ;FastTransfer.c: 110: rx_len = 0;
  2814                           
  2815                           ; BSR set to: 0
  2816  000B08  0E00               	movlw	0
  2817  000B0A  6E43               	movwf	_rx_len,c
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;FastTransfer.c: 111: return 0;
  2821  000B0C  0E00               	movlw	0
  2822                           
  2823                           ; BSR set to: 0
  2824  000B0E  0012               	return	
  2825  000B10                     l4407:
  2826                           
  2827                           ;FastTransfer.c: 112: }
  2828                           ;FastTransfer.c: 114: }
  2829                           ;FastTransfer.c: 115: }
  2830                           ;FastTransfer.c: 116: }
  2831                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2832  000B10  5043               	movf	_rx_len,w,c
  2833  000B12  B4D8               	btfsc	status,2,c
  2834  000B14  D12C               	goto	l4489
  2835                           
  2836                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2837  000B16  5042               	movf	_rx_array_inx,w,c
  2838  000B18  B4D8               	btfsc	status,2,c
  2839  000B1A                     l474:
  2840  000B1A  D7FF               	goto	l474
  2841                           
  2842                           ;FastTransfer.c: 135: }
  2843                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2844                           
  2845                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2846                           
  2847                           ;FastTransfer.c: 129: }
  2848                           ;FastTransfer.c: 130: }
  2849                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2850                           
  2851                           ;FastTransfer.c: 128: return 0;
  2852                           
  2853                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2854                           
  2855                           ;FastTransfer.c: 126: rx_len = 0;
  2856                           
  2857                           ;FastTransfer.c: 125: CRCcheck();
  2858                           
  2859                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2860  000B1C  5043               	movf	_rx_len,w,c
  2861  000B1E  0100               	movlb	0	; () banked
  2862  000B20  6FD9               	movwf	??_receiveData& (0+255),b
  2863  000B22  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  2864  000B24  0EFF               	movlw	255
  2865  000B26  0100               	movlb	0	; () banked
  2866  000B28  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  2867  000B2A  0EFF               	movlw	255
  2868  000B2C  0100               	movlb	0	; () banked
  2869  000B2E  6FDC               	movwf	(??_receiveData+3)& (0+255),b
  2870  000B30  5042               	movf	_rx_array_inx,w,c
  2871  000B32  0100               	movlb	0	; () banked
  2872  000B34  6FDD               	movwf	(??_receiveData+4)& (0+255),b
  2873  000B36  6BDE               	clrf	(??_receiveData+5)& (0+255),b
  2874  000B38  0100               	movlb	0	; () banked
  2875  000B3A  51DB               	movf	(??_receiveData+2)& (0+255),w,b
  2876  000B3C  0100               	movlb	0	; () banked
  2877  000B3E  27DD               	addwf	(??_receiveData+4)& (0+255),f,b
  2878  000B40  0100               	movlb	0	; () banked
  2879  000B42  51DC               	movf	(??_receiveData+3)& (0+255),w,b
  2880  000B44  0100               	movlb	0	; () banked
  2881  000B46  23DE               	addwfc	(??_receiveData+5)& (0+255),f,b
  2882  000B48  0100               	movlb	0	; () banked
  2883  000B4A  51D9               	movf	??_receiveData& (0+255),w,b
  2884  000B4C  0100               	movlb	0	; () banked
  2885  000B4E  19DD               	xorwf	(??_receiveData+4)& (0+255),w,b
  2886  000B50  E105               	bnz	u3871
  2887  000B52  0100               	movlb	0	; () banked
  2888  000B54  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  2889  000B56  0100               	movlb	0	; () banked
  2890  000B58  19DE               	xorwf	(??_receiveData+5)& (0+255),w,b
  2891  000B5A  A4D8               	btfss	status,2,c
  2892  000B5C                     u3871:
  2893  000B5C  D108               	goto	l4489
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2897  000B5E  0E00               	movlw	low _rx_buffer
  2898  000B60  6E1B               	movwf	CRC8@data,c
  2899  000B62  0E04               	movlw	high _rx_buffer
  2900  000B64  6E1C               	movwf	CRC8@data+1,c
  2901  000B66  C043  F01D         	movff	_rx_len,CRC8@len
  2902  000B6A  EC76  F00C         	call	_CRC8	;wreg free
  2903  000B6E  6E36               	movwf	_calc_CS,c
  2904                           
  2905                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2906  000B70  0EFF               	movlw	255
  2907  000B72  0100               	movlb	0	; () banked
  2908  000B74  6FD9               	movwf	??_receiveData& (0+255),b
  2909  000B76  0EFF               	movlw	255
  2910  000B78  0100               	movlb	0	; () banked
  2911  000B7A  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  2912  000B7C  5042               	movf	_rx_array_inx,w,c
  2913  000B7E  0100               	movlb	0	; () banked
  2914  000B80  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  2915  000B82  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  2916  000B84  0100               	movlb	0	; () banked
  2917  000B86  51D9               	movf	??_receiveData& (0+255),w,b
  2918  000B88  0100               	movlb	0	; () banked
  2919  000B8A  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  2920  000B8C  0100               	movlb	0	; () banked
  2921  000B8E  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  2922  000B90  0100               	movlb	0	; () banked
  2923  000B92  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2924  000B94  0E00               	movlw	low _rx_buffer
  2925  000B96  0100               	movlb	0	; () banked
  2926  000B98  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  2927  000B9A  6ED9               	movwf	fsr2l,c
  2928  000B9C  0E04               	movlw	high _rx_buffer
  2929  000B9E  0100               	movlb	0	; () banked
  2930  000BA0  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2931  000BA2  6EDA               	movwf	fsr2h,c
  2932  000BA4  5036               	movf	_calc_CS,w,c
  2933  000BA6  18DE               	xorwf	postinc2,w,c
  2934  000BA8  A4D8               	btfss	status,2,c
  2935  000BAA  D0A9               	goto	l4469
  2936                           
  2937                           ; BSR set to: 0
  2938                           ;FastTransfer.c: 147: int r;
  2939                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2940  000BAC  0E00               	movlw	0
  2941  000BAE  0100               	movlb	0	; () banked
  2942  000BB0  6FEA               	movwf	(receiveData@r+1)& (0+255),b
  2943  000BB2  0E00               	movlw	0
  2944  000BB4  6FE9               	movwf	receiveData@r& (0+255),b
  2945  000BB6  D05A               	goto	l4447
  2946  000BB8                     l4437:
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2950  000BB8  0E00               	movlw	low _rx_buffer
  2951  000BBA  0100               	movlb	0	; () banked
  2952  000BBC  25E9               	addwf	receiveData@r& (0+255),w,b
  2953  000BBE  6ED9               	movwf	fsr2l,c
  2954  000BC0  0E04               	movlw	high _rx_buffer
  2955  000BC2  0100               	movlb	0	; () banked
  2956  000BC4  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2957  000BC6  6EDA               	movwf	fsr2h,c
  2958  000BC8  503E               	movf	_maxDataAddress,w,c
  2959  000BCA  5CDE               	subwf	postinc2,w,c
  2960  000BCC  B0D8               	btfsc	status,0,c
  2961  000BCE  D041               	goto	l4443
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2965  000BD0  0E01               	movlw	1
  2966  000BD2  0100               	movlb	0	; () banked
  2967  000BD4  25E9               	addwf	receiveData@r& (0+255),w,b
  2968  000BD6  0100               	movlb	0	; () banked
  2969  000BD8  6FD9               	movwf	??_receiveData& (0+255),b
  2970  000BDA  0E00               	movlw	0
  2971  000BDC  0100               	movlb	0	; () banked
  2972  000BDE  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2973  000BE0  0100               	movlb	0	; () banked
  2974  000BE2  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  2975  000BE4  0E00               	movlw	low _rx_buffer
  2976  000BE6  0100               	movlb	0	; () banked
  2977  000BE8  25D9               	addwf	??_receiveData& (0+255),w,b
  2978  000BEA  6ED9               	movwf	fsr2l,c
  2979  000BEC  0E04               	movlw	high _rx_buffer
  2980  000BEE  0100               	movlb	0	; () banked
  2981  000BF0  21DA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2982  000BF2  6EDA               	movwf	fsr2h,c
  2983  000BF4  50DF               	movf	indf2,w,c
  2984  000BF6  6E2C               	movwf	_group,c
  2985                           
  2986                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2987  000BF8  0E02               	movlw	2
  2988  000BFA  0100               	movlb	0	; () banked
  2989  000BFC  25E9               	addwf	receiveData@r& (0+255),w,b
  2990  000BFE  0100               	movlb	0	; () banked
  2991  000C00  6FD9               	movwf	??_receiveData& (0+255),b
  2992  000C02  0E00               	movlw	0
  2993  000C04  0100               	movlb	0	; () banked
  2994  000C06  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2995  000C08  0100               	movlb	0	; () banked
  2996  000C0A  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  2997  000C0C  0E00               	movlw	low _rx_buffer
  2998  000C0E  0100               	movlb	0	; () banked
  2999  000C10  25D9               	addwf	??_receiveData& (0+255),w,b
  3000  000C12  6ED9               	movwf	fsr2l,c
  3001  000C14  0E04               	movlw	high _rx_buffer
  3002  000C16  0100               	movlb	0	; () banked
  3003  000C18  21DA               	addwfc	(??_receiveData+1)& (0+255),w,b
  3004  000C1A  6EDA               	movwf	fsr2h,c
  3005  000C1C  50DF               	movf	indf2,w,c
  3006  000C1E  6E2D               	movwf	_group+1,c
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  3010  000C20  0E00               	movlw	low _rx_buffer
  3011  000C22  0100               	movlb	0	; () banked
  3012  000C24  25E9               	addwf	receiveData@r& (0+255),w,b
  3013  000C26  6ED9               	movwf	fsr2l,c
  3014  000C28  0E04               	movlw	high _rx_buffer
  3015  000C2A  0100               	movlb	0	; () banked
  3016  000C2C  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  3017  000C2E  6EDA               	movwf	fsr2h,c
  3018  000C30  50DF               	movf	indf2,w,c
  3019  000C32  0100               	movlb	0	; () banked
  3020  000C34  6FD9               	movwf	??_receiveData& (0+255),b
  3021  000C36  0100               	movlb	0	; () banked
  3022  000C38  51D9               	movf	??_receiveData& (0+255),w,b
  3023  000C3A  0D02               	mullw	2
  3024  000C3C  50F3               	movf	prodl,w,c
  3025  000C3E  242E               	addwf	_receiveArrayAddress,w,c
  3026  000C40  6ED9               	movwf	fsr2l,c
  3027  000C42  50F4               	movf	prodh,w,c
  3028  000C44  202F               	addwfc	_receiveArrayAddress+1,w,c
  3029  000C46  6EDA               	movwf	fsr2h,c
  3030  000C48  C02C  FFDE         	movff	_group,postinc2
  3031  000C4C  C02D  FFDD         	movff	_group+1,postdec2
  3032                           
  3033                           ;FastTransfer.c: 153: } else {
  3034  000C50  D003               	goto	l4445
  3035  000C52                     l4443:
  3036                           
  3037                           ; BSR set to: 0
  3038                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  3039  000C52  0100               	movlb	0	; () banked
  3040  000C54  4B8F               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  3041  000C56  2B90               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  3042  000C58                     l4445:
  3043                           
  3044                           ; BSR set to: 0
  3045  000C58  0E03               	movlw	3
  3046  000C5A  0100               	movlb	0	; () banked
  3047  000C5C  25E9               	addwf	receiveData@r& (0+255),w,b
  3048  000C5E  0100               	movlb	0	; () banked
  3049  000C60  6FE9               	movwf	receiveData@r& (0+255),b
  3050  000C62  0E00               	movlw	0
  3051  000C64  0100               	movlb	0	; () banked
  3052  000C66  21EA               	addwfc	(receiveData@r+1)& (0+255),w,b
  3053  000C68  0100               	movlb	0	; () banked
  3054  000C6A  6FEA               	movwf	(receiveData@r+1)& (0+255),b
  3055  000C6C                     l4447:
  3056                           
  3057                           ; BSR set to: 0
  3058  000C6C  5043               	movf	_rx_len,w,c
  3059  000C6E  0100               	movlb	0	; () banked
  3060  000C70  6FD9               	movwf	??_receiveData& (0+255),b
  3061  000C72  6BDA               	clrf	(??_receiveData+1)& (0+255),b
  3062  000C74  0100               	movlb	0	; () banked
  3063  000C76  51D9               	movf	??_receiveData& (0+255),w,b
  3064  000C78  0100               	movlb	0	; () banked
  3065  000C7A  5DE9               	subwf	receiveData@r& (0+255),w,b
  3066  000C7C  0100               	movlb	0	; () banked
  3067  000C7E  51EA               	movf	(receiveData@r+1)& (0+255),w,b
  3068  000C80  0A80               	xorlw	128
  3069  000C82  0100               	movlb	0	; () banked
  3070  000C84  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  3071  000C86  0100               	movlb	0	; () banked
  3072  000C88  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  3073  000C8A  0A80               	xorlw	128
  3074  000C8C  0100               	movlb	0	; () banked
  3075  000C8E  59DB               	subwfb	(??_receiveData+2)& (0+255),w,b
  3076  000C90  A0D8               	btfss	status,0,c
  3077  000C92  D792               	goto	l4437
  3078                           
  3079                           ; BSR set to: 0
  3080                           ;FastTransfer.c: 155: }
  3081                           ;FastTransfer.c: 156: }
  3082                           ;FastTransfer.c: 159: if (AKNAKsend) {
  3083                           
  3084                           ; BSR set to: 0
  3085  000C94  5034               	movf	_AKNAKsend,w,c
  3086  000C96  B4D8               	btfsc	status,2,c
  3087  000C98  D02C               	goto	l4459
  3088                           
  3089                           ; BSR set to: 0
  3090                           ;FastTransfer.c: 160: unsigned char holder[3];
  3091                           ;FastTransfer.c: 161: holder[0] = 255;
  3092  000C9A  0100               	movlb	0	; () banked
  3093  000C9C  69E1               	setf	receiveData@holder& (0+255),b
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;FastTransfer.c: 162: holder[1] = 1;
  3097  000C9E  0E01               	movlw	1
  3098  000CA0  0100               	movlb	0	; () banked
  3099  000CA2  6FE2               	movwf	(receiveData@holder+1)& (0+255),b
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  3103  000CA4  0EFF               	movlw	255
  3104  000CA6  0100               	movlb	0	; () banked
  3105  000CA8  6FD9               	movwf	??_receiveData& (0+255),b
  3106  000CAA  0EFF               	movlw	255
  3107  000CAC  0100               	movlb	0	; () banked
  3108  000CAE  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  3109  000CB0  5042               	movf	_rx_array_inx,w,c
  3110  000CB2  0100               	movlb	0	; () banked
  3111  000CB4  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  3112  000CB6  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  3113  000CB8  0100               	movlb	0	; () banked
  3114  000CBA  51D9               	movf	??_receiveData& (0+255),w,b
  3115  000CBC  0100               	movlb	0	; () banked
  3116  000CBE  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  3117  000CC0  0100               	movlb	0	; () banked
  3118  000CC2  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  3119  000CC4  0100               	movlb	0	; () banked
  3120  000CC6  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  3121  000CC8  0E00               	movlw	low _rx_buffer
  3122  000CCA  0100               	movlb	0	; () banked
  3123  000CCC  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  3124  000CCE  6ED9               	movwf	fsr2l,c
  3125  000CD0  0E04               	movlw	high _rx_buffer
  3126  000CD2  0100               	movlb	0	; () banked
  3127  000CD4  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  3128  000CD6  6EDA               	movwf	fsr2h,c
  3129  000CD8  50DF               	movf	indf2,w,c
  3130  000CDA  0100               	movlb	0	; () banked
  3131  000CDC  6FE3               	movwf	(receiveData@holder+2)& (0+255),b
  3132                           
  3133                           ; BSR set to: 0
  3134                           ;FastTransfer.c: 173: serial_write(crcHolder);
  3135  000CDE  0EE1               	movlw	low receiveData@holder
  3136  000CE0  6E1B               	movwf	CRC8@data,c
  3137  000CE2  0E00               	movlw	high receiveData@holder
  3138  000CE4  6E1C               	movwf	CRC8@data+1,c
  3139  000CE6  0E03               	movlw	3
  3140  000CE8  6E1D               	movwf	CRC8@len,c
  3141  000CEA  EC76  F00C         	call	_CRC8	;wreg free
  3142  000CEE  0100               	movlb	0	; () banked
  3143  000CF0  6FDF               	movwf	receiveData@crcHolder& (0+255),b
  3144  000CF2                     l4459:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;FastTransfer.c: 174: }
  3148                           ;FastTransfer.c: 178: rx_len = 0;
  3149  000CF2  0E00               	movlw	0
  3150  000CF4  6E43               	movwf	_rx_len,c
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;FastTransfer.c: 179: rx_array_inx = 0;
  3154  000CF6  0E00               	movlw	0
  3155  000CF8  6E42               	movwf	_rx_array_inx,c
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;FastTransfer.c: 180: return 1;
  3159  000CFA  0E01               	movlw	1
  3160                           
  3161                           ; BSR set to: 0
  3162  000CFC  0012               	return	
  3163  000CFE                     l4469:
  3164                           
  3165                           ; BSR set to: 0
  3166                           ;FastTransfer.c: 182: crcErrorCounter++;
  3167  000CFE  0100               	movlb	0	; () banked
  3168  000D00  4B8D               	infsnz	_crcErrorCounter& (0+255),f,b
  3169  000D02  2B8E               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;FastTransfer.c: 184: if (AKNAKsend) {
  3173  000D04  5034               	movf	_AKNAKsend,w,c
  3174  000D06  B4D8               	btfsc	status,2,c
  3175  000D08  D02C               	goto	l4481
  3176                           
  3177                           ; BSR set to: 0
  3178                           ;FastTransfer.c: 185: unsigned char holder[3];
  3179                           ;FastTransfer.c: 186: holder[0] = 255;
  3180  000D0A  0100               	movlb	0	; () banked
  3181  000D0C  69E4               	setf	receiveData@holder_1689& (0+255),b
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;FastTransfer.c: 187: holder[1] = 2;
  3185  000D0E  0E02               	movlw	2
  3186  000D10  0100               	movlb	0	; () banked
  3187  000D12  6FE5               	movwf	(receiveData@holder_1689+1)& (0+255),b
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  3191  000D14  0EFF               	movlw	255
  3192  000D16  0100               	movlb	0	; () banked
  3193  000D18  6FD9               	movwf	??_receiveData& (0+255),b
  3194  000D1A  0EFF               	movlw	255
  3195  000D1C  0100               	movlb	0	; () banked
  3196  000D1E  6FDA               	movwf	(??_receiveData+1)& (0+255),b
  3197  000D20  5042               	movf	_rx_array_inx,w,c
  3198  000D22  0100               	movlb	0	; () banked
  3199  000D24  6FDB               	movwf	(??_receiveData+2)& (0+255),b
  3200  000D26  6BDC               	clrf	(??_receiveData+3)& (0+255),b
  3201  000D28  0100               	movlb	0	; () banked
  3202  000D2A  51D9               	movf	??_receiveData& (0+255),w,b
  3203  000D2C  0100               	movlb	0	; () banked
  3204  000D2E  27DB               	addwf	(??_receiveData+2)& (0+255),f,b
  3205  000D30  0100               	movlb	0	; () banked
  3206  000D32  51DA               	movf	(??_receiveData+1)& (0+255),w,b
  3207  000D34  0100               	movlb	0	; () banked
  3208  000D36  23DC               	addwfc	(??_receiveData+3)& (0+255),f,b
  3209  000D38  0E00               	movlw	low _rx_buffer
  3210  000D3A  0100               	movlb	0	; () banked
  3211  000D3C  25DB               	addwf	(??_receiveData+2)& (0+255),w,b
  3212  000D3E  6ED9               	movwf	fsr2l,c
  3213  000D40  0E04               	movlw	high _rx_buffer
  3214  000D42  0100               	movlb	0	; () banked
  3215  000D44  21DC               	addwfc	(??_receiveData+3)& (0+255),w,b
  3216  000D46  6EDA               	movwf	fsr2h,c
  3217  000D48  50DF               	movf	indf2,w,c
  3218  000D4A  0100               	movlb	0	; () banked
  3219  000D4C  6FE6               	movwf	(receiveData@holder_1689+2)& (0+255),b
  3220                           
  3221                           ; BSR set to: 0
  3222                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3223  000D4E  0EE4               	movlw	low receiveData@holder_1689
  3224  000D50  6E1B               	movwf	CRC8@data,c
  3225  000D52  0E00               	movlw	high receiveData@holder_1689
  3226  000D54  6E1C               	movwf	CRC8@data+1,c
  3227  000D56  0E03               	movlw	3
  3228  000D58  6E1D               	movwf	CRC8@len,c
  3229  000D5A  EC76  F00C         	call	_CRC8	;wreg free
  3230  000D5E  0100               	movlb	0	; () banked
  3231  000D60  6FE0               	movwf	receiveData@crcHolder_1690& (0+255),b
  3232  000D62                     l4481:
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;FastTransfer.c: 199: }
  3236                           ;FastTransfer.c: 202: rx_len = 0;
  3237  000D62  0E00               	movlw	0
  3238  000D64  6E43               	movwf	_rx_len,c
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3242  000D66  0E00               	movlw	0
  3243  000D68  6E42               	movwf	_rx_array_inx,c
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;FastTransfer.c: 204: return 0;
  3247  000D6A  0E00               	movlw	0
  3248                           
  3249                           ; BSR set to: 0
  3250  000D6C  0012               	return	
  3251  000D6E                     l4489:
  3252                           
  3253                           ;FastTransfer.c: 205: }
  3254                           ;FastTransfer.c: 206: }
  3255                           ;FastTransfer.c: 207: }
  3256                           ;FastTransfer.c: 210: return 0;
  3257  000D6E  0E00               	movlw	0
  3258  000D70  0012               	return	
  3259  000D72                     __end_of_receiveData:
  3260                           	opt stack 0
  3261                           tblptru	equ	0xFF8
  3262                           tblptrh	equ	0xFF7
  3263                           tblptrl	equ	0xFF6
  3264                           tablat	equ	0xFF5
  3265                           prodh	equ	0xFF4
  3266                           prodl	equ	0xFF3
  3267                           intcon	equ	0xFF2
  3268                           postinc0	equ	0xFEE
  3269                           wreg	equ	0xFE8
  3270                           indf2	equ	0xFDF
  3271                           postinc2	equ	0xFDE
  3272                           postdec2	equ	0xFDD
  3273                           plusw2	equ	0xFDB
  3274                           fsr2h	equ	0xFDA
  3275                           fsr2l	equ	0xFD9
  3276                           status	equ	0xFD8
  3277                           
  3278 ;; *************** function _CRCcheck *****************
  3279 ;; Defined at:
  3280 ;;		line 373 in file "FastTransfer.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;  rt              2    5[BANK0 ] int 
  3285 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3286 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3287 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  1    wreg      void 
  3290 ;; Registers used:
  3291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3297 ;;      Params:         0       0       0       0       0       0       0
  3298 ;;      Locals:         0       7       0       0       0       0       0
  3299 ;;      Temps:          0       0       0       0       0       0       0
  3300 ;;      Totals:         0       7       0       0       0       0       0
  3301 ;;Total ram usage:        7 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    5
  3304 ;; This function calls:
  3305 ;;		_CRC8
  3306 ;;		_crcBufS_get
  3307 ;;		_crcBufS_status_put
  3308 ;; This function is called by:
  3309 ;;		_receiveData
  3310 ;; This function uses a non-reentrant model
  3311 ;;
  3312                           
  3313                           	psect	text12
  3314  001284                     __ptext12:
  3315                           	opt stack 0
  3316  001284                     _CRCcheck:
  3317                           	opt stack 23
  3318  001284                     l550:
  3319  001284  D7FF               	goto	l550
  3320  001286                     l4263:
  3321                           
  3322                           ; BSR set to: 0
  3323  001286  0100               	movlb	0	; () banked
  3324  001288  BFD8               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3325  00128A  D008               	goto	l4267
  3326  00128C  0100               	movlb	0	; () banked
  3327  00128E  51D8               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3328  001290  E143               	bnz	l561
  3329  001292  0E05               	movlw	5
  3330  001294  0100               	movlb	0	; () banked
  3331  001296  5DD7               	subwf	CRCcheck@rt& (0+255),w,b
  3332  001298  B0D8               	btfsc	status,0,c
  3333  00129A  0012               	return	
  3334  00129C                     l4267:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3338  00129C  0EC1               	movlw	low _crc_buffer
  3339  00129E  6E1B               	movwf	crcBufS_get@_this,c
  3340  0012A0  0E00               	movlw	high _crc_buffer
  3341  0012A2  6E1C               	movwf	crcBufS_get@_this+1,c
  3342  0012A4  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3343  0012A8  0E00               	movlw	0
  3344  0012AA  6E1E               	movwf	crcBufS_get@space,c
  3345  0012AC  ECFA  F007         	call	_crcBufS_get	;wreg free
  3346  0012B0  1840               	xorwf	_returnAddress,w,c
  3347  0012B2  A4D8               	btfss	status,2,c
  3348  0012B4  D02D               	goto	l4281
  3349                           
  3350                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3351  0012B6  0EC1               	movlw	low _crc_buffer
  3352  0012B8  6E1B               	movwf	crcBufS_get@_this,c
  3353  0012BA  0E00               	movlw	high _crc_buffer
  3354  0012BC  6E1C               	movwf	crcBufS_get@_this+1,c
  3355  0012BE  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3356  0012C2  0E01               	movlw	1
  3357  0012C4  6E1E               	movwf	crcBufS_get@space,c
  3358  0012C6  ECFA  F007         	call	_crcBufS_get	;wreg free
  3359  0012CA  0100               	movlb	0	; () banked
  3360  0012CC  19D6               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3361  0012CE  A4D8               	btfss	status,2,c
  3362  0012D0  D01F               	goto	l4281
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3366  0012D2  0100               	movlb	0	; () banked
  3367  0012D4  05D5               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3368  0012D6  A4D8               	btfss	status,2,c
  3369  0012D8  D00B               	goto	l4277
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3373  0012DA  0EC1               	movlw	low _crc_buffer
  3374  0012DC  6E1B               	movwf	crcBufS_status_put@_this,c
  3375  0012DE  0E00               	movlw	high _crc_buffer
  3376  0012E0  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3377  0012E2  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3378  0012E6  0E01               	movlw	1
  3379  0012E8  6E1E               	movwf	crcBufS_status_put@status,c
  3380  0012EA  ECD7  F008         	call	_crcBufS_status_put	;wreg free
  3381                           
  3382                           ;FastTransfer.c: 393: break;
  3383  0012EE  0012               	return	
  3384  0012F0                     l4277:
  3385  0012F0  0E02               	movlw	2
  3386  0012F2  0100               	movlb	0	; () banked
  3387  0012F4  19D5               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3388  0012F6  A4D8               	btfss	status,2,c
  3389  0012F8  D00B               	goto	l4281
  3390                           
  3391                           ; BSR set to: 0
  3392                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3393  0012FA  0EC1               	movlw	low _crc_buffer
  3394  0012FC  6E1B               	movwf	crcBufS_status_put@_this,c
  3395  0012FE  0E00               	movlw	high _crc_buffer
  3396  001300  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3397  001302  C0D7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3398  001306  0E02               	movlw	2
  3399  001308  6E1E               	movwf	crcBufS_status_put@status,c
  3400  00130A  ECD7  F008         	call	_crcBufS_status_put	;wreg free
  3401                           
  3402                           ;FastTransfer.c: 396: break;
  3403  00130E  0012               	return	
  3404  001310                     l4281:
  3405  001310  0100               	movlb	0	; () banked
  3406  001312  4BD7               	infsnz	CRCcheck@rt& (0+255),f,b
  3407  001314  2BD8               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3408  001316  D7B7               	goto	l4263
  3409  001318                     l561:
  3410  001318  0012               	return		;funcret
  3411  00131A                     __end_of_CRCcheck:
  3412                           	opt stack 0
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           indf2	equ	0xFDF
  3423                           postinc2	equ	0xFDE
  3424                           postdec2	equ	0xFDD
  3425                           plusw2	equ	0xFDB
  3426                           fsr2h	equ	0xFDA
  3427                           fsr2l	equ	0xFD9
  3428                           status	equ	0xFD8
  3429                           
  3430 ;; *************** function _crcBufS_status_put *****************
  3431 ;; Defined at:
  3432 ;;		line 336 in file "FastTransfer.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3435 ;;		 -> crc_buffer(17), 
  3436 ;;  time            1   28[COMRAM] unsigned char 
  3437 ;;  status          1   29[COMRAM] unsigned char 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  wantedTime      2   34[COMRAM] int 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  1    wreg      void 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3444 ;; Tracked objects:
  3445 ;;		On entry : 0/0
  3446 ;;		On exit  : 0/0
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3449 ;;      Params:         4       0       0       0       0       0       0
  3450 ;;      Locals:         2       0       0       0       0       0       0
  3451 ;;      Temps:          4       0       0       0       0       0       0
  3452 ;;      Totals:        10       0       0       0       0       0       0
  3453 ;;Total ram usage:       10 bytes
  3454 ;; Hardware stack levels used:    1
  3455 ;; Hardware stack levels required when called:    4
  3456 ;; This function calls:
  3457 ;;		Nothing
  3458 ;; This function is called by:
  3459 ;;		_CRCcheck
  3460 ;; This function uses a non-reentrant model
  3461 ;;
  3462                           
  3463                           	psect	text13
  3464  0011AE                     __ptext13:
  3465                           	opt stack 0
  3466  0011AE                     _crcBufS_status_put:
  3467                           	opt stack 23
  3468                           
  3469                           ;FastTransfer.c: 337: if (time >= 5) {
  3470                           
  3471                           ;incstack = 0
  3472  0011AE  0E04               	movlw	4
  3473  0011B0  641D               	cpfsgt	crcBufS_status_put@time,c
  3474  0011B2  D002               	goto	l4053
  3475                           
  3476                           ;FastTransfer.c: 338: time = 5 - 1;
  3477  0011B4  0E04               	movlw	4
  3478  0011B6  6E1D               	movwf	crcBufS_status_put@time,c
  3479  0011B8                     l4053:
  3480                           
  3481                           ;FastTransfer.c: 339: }
  3482                           ;FastTransfer.c: 340: time = time + 1;
  3483  0011B8  281D               	incf	crcBufS_status_put@time,w,c
  3484  0011BA  6E1D               	movwf	crcBufS_status_put@time,c
  3485                           
  3486                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3487  0011BC  501D               	movf	crcBufS_status_put@time,w,c
  3488  0011BE  0D03               	mullw	3
  3489  0011C0  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3490  0011C4  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3491                           
  3492                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3493  0011C8  EE20 F00F          	lfsr	2,15
  3494  0011CC  501B               	movf	crcBufS_status_put@_this,w,c
  3495  0011CE  26D9               	addwf	fsr2l,f,c
  3496  0011D0  501C               	movf	crcBufS_status_put@_this+1,w,c
  3497  0011D2  22DA               	addwfc	fsr2h,f,c
  3498  0011D4  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3499  0011D6  5CDE               	subwf	postinc2,w,c
  3500  0011D8  50DE               	movf	postinc2,w,c
  3501  0011DA  0A80               	xorlw	128
  3502  0011DC  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3503  0011DE  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3504  0011E0  0A80               	xorlw	128
  3505  0011E2  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3506  0011E4  B0D8               	btfsc	status,0,c
  3507  0011E6  D02B               	goto	l4061
  3508                           
  3509                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3510  0011E8  EE20 F00F          	lfsr	2,15
  3511  0011EC  501B               	movf	crcBufS_status_put@_this,w,c
  3512  0011EE  26D9               	addwf	fsr2l,f,c
  3513  0011F0  501C               	movf	crcBufS_status_put@_this+1,w,c
  3514  0011F2  22DA               	addwfc	fsr2h,f,c
  3515  0011F4  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3516  0011F8  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3517  0011FC  1E1F               	comf	??_crcBufS_status_put,f,c
  3518  0011FE  1E20               	comf	??_crcBufS_status_put+1,f,c
  3519  001200  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3520  001202  2A20               	incf	??_crcBufS_status_put+1,f,c
  3521  001204  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3522  001206  261F               	addwf	??_crcBufS_status_put,f,c
  3523  001208  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3524  00120A  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3525  00120C  1E1F               	comf	??_crcBufS_status_put,f,c
  3526  00120E  1E20               	comf	??_crcBufS_status_put+1,f,c
  3527  001210  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3528  001212  2A20               	incf	??_crcBufS_status_put+1,f,c
  3529  001214  0E0F               	movlw	15
  3530  001216  241F               	addwf	??_crcBufS_status_put,w,c
  3531  001218  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3532  00121A  0E00               	movlw	0
  3533  00121C  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3534  00121E  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3535                           
  3536                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3537  001220  0E02               	movlw	2
  3538  001222  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3539  001224  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3540  001226  0E00               	movlw	0
  3541  001228  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3542  00122A  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3543  00122C  501F               	movf	??_crcBufS_status_put,w,c
  3544  00122E  241B               	addwf	crcBufS_status_put@_this,w,c
  3545  001230  6ED9               	movwf	fsr2l,c
  3546  001232  5020               	movf	??_crcBufS_status_put+1,w,c
  3547  001234  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3548  001236  6EDA               	movwf	fsr2h,c
  3549  001238  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3550                           
  3551                           ;FastTransfer.c: 345: } else {
  3552  00123C  0012               	return	
  3553  00123E                     l4061:
  3554                           
  3555                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3556  00123E  EE20 F00F          	lfsr	2,15
  3557  001242  501B               	movf	crcBufS_status_put@_this,w,c
  3558  001244  26D9               	addwf	fsr2l,f,c
  3559  001246  501C               	movf	crcBufS_status_put@_this+1,w,c
  3560  001248  22DA               	addwfc	fsr2h,f,c
  3561  00124A  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3562  00124E  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3563  001252  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3564  001256  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3565  00125A  1E21               	comf	??_crcBufS_status_put+2,f,c
  3566  00125C  1E22               	comf	??_crcBufS_status_put+3,f,c
  3567  00125E  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3568  001260  2A22               	incf	??_crcBufS_status_put+3,f,c
  3569  001262  501F               	movf	??_crcBufS_status_put,w,c
  3570  001264  2621               	addwf	??_crcBufS_status_put+2,f,c
  3571  001266  5020               	movf	??_crcBufS_status_put+1,w,c
  3572  001268  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3573  00126A  0E02               	movlw	2
  3574  00126C  2621               	addwf	??_crcBufS_status_put+2,f,c
  3575  00126E  0E00               	movlw	0
  3576  001270  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3577  001272  5021               	movf	??_crcBufS_status_put+2,w,c
  3578  001274  241B               	addwf	crcBufS_status_put@_this,w,c
  3579  001276  6ED9               	movwf	fsr2l,c
  3580  001278  5022               	movf	??_crcBufS_status_put+3,w,c
  3581  00127A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3582  00127C  6EDA               	movwf	fsr2h,c
  3583  00127E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3584  001282  0012               	return	
  3585  001284                     __end_of_crcBufS_status_put:
  3586                           	opt stack 0
  3587                           tblptru	equ	0xFF8
  3588                           tblptrh	equ	0xFF7
  3589                           tblptrl	equ	0xFF6
  3590                           tablat	equ	0xFF5
  3591                           prodh	equ	0xFF4
  3592                           prodl	equ	0xFF3
  3593                           intcon	equ	0xFF2
  3594                           postinc0	equ	0xFEE
  3595                           wreg	equ	0xFE8
  3596                           indf2	equ	0xFDF
  3597                           postinc2	equ	0xFDE
  3598                           postdec2	equ	0xFDD
  3599                           plusw2	equ	0xFDB
  3600                           fsr2h	equ	0xFDA
  3601                           fsr2l	equ	0xFD9
  3602                           status	equ	0xFD8
  3603                           
  3604 ;; *************** function _crcBufS_get *****************
  3605 ;; Defined at:
  3606 ;;		line 353 in file "FastTransfer.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3609 ;;		 -> crc_buffer(17), 
  3610 ;;  time            1   28[COMRAM] unsigned char 
  3611 ;;  space           1   29[COMRAM] unsigned char 
  3612 ;; Auto vars:     Size  Location     Type
  3613 ;;  wantedTime      2   36[COMRAM] int 
  3614 ;; Return value:  Size  Location     Type
  3615 ;;                  1    wreg      unsigned char 
  3616 ;; Registers used:
  3617 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3618 ;; Tracked objects:
  3619 ;;		On entry : 0/0
  3620 ;;		On exit  : 0/0
  3621 ;;		Unchanged: 0/0
  3622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3623 ;;      Params:         4       0       0       0       0       0       0
  3624 ;;      Locals:         2       0       0       0       0       0       0
  3625 ;;      Temps:          6       0       0       0       0       0       0
  3626 ;;      Totals:        12       0       0       0       0       0       0
  3627 ;;Total ram usage:       12 bytes
  3628 ;; Hardware stack levels used:    1
  3629 ;; Hardware stack levels required when called:    4
  3630 ;; This function calls:
  3631 ;;		Nothing
  3632 ;; This function is called by:
  3633 ;;		_CRCcheck
  3634 ;;		_AKNAK
  3635 ;; This function uses a non-reentrant model
  3636 ;;
  3637                           
  3638                           	psect	text14
  3639  000FF4                     __ptext14:
  3640                           	opt stack 0
  3641  000FF4                     _crcBufS_get:
  3642                           	opt stack 23
  3643                           
  3644                           ;FastTransfer.c: 354: if (time >= 5) {
  3645                           
  3646                           ;incstack = 0
  3647  000FF4  0E04               	movlw	4
  3648  000FF6  641D               	cpfsgt	crcBufS_get@time,c
  3649  000FF8  D002               	goto	l4029
  3650                           
  3651                           ;FastTransfer.c: 355: time = 5 - 1;
  3652  000FFA  0E04               	movlw	4
  3653  000FFC  6E1D               	movwf	crcBufS_get@time,c
  3654  000FFE                     l4029:
  3655                           
  3656                           ;FastTransfer.c: 356: }
  3657                           ;FastTransfer.c: 357: if (space >= 3) {
  3658  000FFE  0E02               	movlw	2
  3659  001000  641E               	cpfsgt	crcBufS_get@space,c
  3660  001002  D002               	goto	l4033
  3661                           
  3662                           ;FastTransfer.c: 358: space = 3 - 1;
  3663  001004  0E02               	movlw	2
  3664  001006  6E1E               	movwf	crcBufS_get@space,c
  3665  001008                     l4033:
  3666                           
  3667                           ;FastTransfer.c: 359: }
  3668                           ;FastTransfer.c: 360: time = time + 1;
  3669  001008  281D               	incf	crcBufS_get@time,w,c
  3670  00100A  6E1D               	movwf	crcBufS_get@time,c
  3671                           
  3672                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3673  00100C  501D               	movf	crcBufS_get@time,w,c
  3674  00100E  0D03               	mullw	3
  3675  001010  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3676  001014  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3677                           
  3678                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3679  001018  EE20 F00F          	lfsr	2,15
  3680  00101C  501B               	movf	crcBufS_get@_this,w,c
  3681  00101E  26D9               	addwf	fsr2l,f,c
  3682  001020  501C               	movf	crcBufS_get@_this+1,w,c
  3683  001022  22DA               	addwfc	fsr2h,f,c
  3684  001024  5025               	movf	crcBufS_get@wantedTime,w,c
  3685  001026  5CDE               	subwf	postinc2,w,c
  3686  001028  50DE               	movf	postinc2,w,c
  3687  00102A  0A80               	xorlw	128
  3688  00102C  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3689  00102E  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3690  001030  0A80               	xorlw	128
  3691  001032  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3692  001034  B0D8               	btfsc	status,0,c
  3693  001036  D02A               	goto	l4045
  3694                           
  3695                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3696  001038  EE20 F00F          	lfsr	2,15
  3697  00103C  501B               	movf	crcBufS_get@_this,w,c
  3698  00103E  26D9               	addwf	fsr2l,f,c
  3699  001040  501C               	movf	crcBufS_get@_this+1,w,c
  3700  001042  22DA               	addwfc	fsr2h,f,c
  3701  001044  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3702  001048  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3703  00104C  1E1F               	comf	??_crcBufS_get,f,c
  3704  00104E  1E20               	comf	??_crcBufS_get+1,f,c
  3705  001050  4A1F               	infsnz	??_crcBufS_get,f,c
  3706  001052  2A20               	incf	??_crcBufS_get+1,f,c
  3707  001054  5025               	movf	crcBufS_get@wantedTime,w,c
  3708  001056  261F               	addwf	??_crcBufS_get,f,c
  3709  001058  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3710  00105A  2220               	addwfc	??_crcBufS_get+1,f,c
  3711  00105C  1E1F               	comf	??_crcBufS_get,f,c
  3712  00105E  1E20               	comf	??_crcBufS_get+1,f,c
  3713  001060  4A1F               	infsnz	??_crcBufS_get,f,c
  3714  001062  2A20               	incf	??_crcBufS_get+1,f,c
  3715  001064  0E0F               	movlw	15
  3716  001066  241F               	addwf	??_crcBufS_get,w,c
  3717  001068  6E25               	movwf	crcBufS_get@wantedTime,c
  3718  00106A  0E00               	movlw	0
  3719  00106C  2020               	addwfc	??_crcBufS_get+1,w,c
  3720  00106E  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3721                           
  3722                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3723  001070  501E               	movf	crcBufS_get@space,w,c
  3724  001072  2425               	addwf	crcBufS_get@wantedTime,w,c
  3725  001074  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3726  001076  0E00               	movlw	0
  3727  001078  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3728  00107A  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3729  00107C  501F               	movf	??_crcBufS_get,w,c
  3730  00107E  241B               	addwf	crcBufS_get@_this,w,c
  3731  001080  6ED9               	movwf	fsr2l,c
  3732  001082  5020               	movf	??_crcBufS_get+1,w,c
  3733  001084  201C               	addwfc	crcBufS_get@_this+1,w,c
  3734  001086  6EDA               	movwf	fsr2h,c
  3735  001088  50DF               	movf	indf2,w,c
  3736                           
  3737                           ;FastTransfer.c: 365: } else {
  3738  00108A  0012               	return	
  3739  00108C                     l4045:
  3740                           
  3741                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3742  00108C  EE20 F00F          	lfsr	2,15
  3743  001090  501B               	movf	crcBufS_get@_this,w,c
  3744  001092  26D9               	addwf	fsr2l,f,c
  3745  001094  501C               	movf	crcBufS_get@_this+1,w,c
  3746  001096  22DA               	addwfc	fsr2h,f,c
  3747  001098  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3748  00109C  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3749  0010A0  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3750  0010A4  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3751  0010A8  1E21               	comf	??_crcBufS_get+2,f,c
  3752  0010AA  1E22               	comf	??_crcBufS_get+3,f,c
  3753  0010AC  4A21               	infsnz	??_crcBufS_get+2,f,c
  3754  0010AE  2A22               	incf	??_crcBufS_get+3,f,c
  3755  0010B0  501E               	movf	crcBufS_get@space,w,c
  3756  0010B2  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3757  0010B4  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3758  0010B6  5021               	movf	??_crcBufS_get+2,w,c
  3759  0010B8  2623               	addwf	??_crcBufS_get+4,f,c
  3760  0010BA  5022               	movf	??_crcBufS_get+3,w,c
  3761  0010BC  2224               	addwfc	??_crcBufS_get+5,f,c
  3762  0010BE  501F               	movf	??_crcBufS_get,w,c
  3763  0010C0  2623               	addwf	??_crcBufS_get+4,f,c
  3764  0010C2  5020               	movf	??_crcBufS_get+1,w,c
  3765  0010C4  2224               	addwfc	??_crcBufS_get+5,f,c
  3766  0010C6  5023               	movf	??_crcBufS_get+4,w,c
  3767  0010C8  241B               	addwf	crcBufS_get@_this,w,c
  3768  0010CA  6ED9               	movwf	fsr2l,c
  3769  0010CC  5024               	movf	??_crcBufS_get+5,w,c
  3770  0010CE  201C               	addwfc	crcBufS_get@_this+1,w,c
  3771  0010D0  6EDA               	movwf	fsr2h,c
  3772  0010D2  50DF               	movf	indf2,w,c
  3773  0010D4  0012               	return	
  3774  0010D6                     __end_of_crcBufS_get:
  3775                           	opt stack 0
  3776                           tblptru	equ	0xFF8
  3777                           tblptrh	equ	0xFF7
  3778                           tblptrl	equ	0xFF6
  3779                           tablat	equ	0xFF5
  3780                           prodh	equ	0xFF4
  3781                           prodl	equ	0xFF3
  3782                           intcon	equ	0xFF2
  3783                           postinc0	equ	0xFEE
  3784                           wreg	equ	0xFE8
  3785                           indf2	equ	0xFDF
  3786                           postinc2	equ	0xFDE
  3787                           postdec2	equ	0xFDD
  3788                           plusw2	equ	0xFDB
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _CRC8 *****************
  3794 ;; Defined at:
  3795 ;;		line 34 in file "FastTransfer.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3798 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1689(3), receiveData@holder(3), rx_buffer(200), 
  3799 ;;		 -> ring_buffer(206), NULL(0), 
  3800 ;;  len             1   28[COMRAM] unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;  sum             1   29[COMRAM] unsigned char 
  3803 ;;  tempI           1   31[COMRAM] unsigned char 
  3804 ;;  extract         1   30[COMRAM] unsigned char 
  3805 ;;  crc             1   32[COMRAM] unsigned char 
  3806 ;; Return value:  Size  Location     Type
  3807 ;;                  1    wreg      unsigned char 
  3808 ;; Registers used:
  3809 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3810 ;; Tracked objects:
  3811 ;;		On entry : 0/0
  3812 ;;		On exit  : 0/0
  3813 ;;		Unchanged: 0/0
  3814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3815 ;;      Params:         3       0       0       0       0       0       0
  3816 ;;      Locals:         4       0       0       0       0       0       0
  3817 ;;      Temps:          0       0       0       0       0       0       0
  3818 ;;      Totals:         7       0       0       0       0       0       0
  3819 ;;Total ram usage:        7 bytes
  3820 ;; Hardware stack levels used:    1
  3821 ;; Hardware stack levels required when called:    4
  3822 ;; This function calls:
  3823 ;;		Nothing
  3824 ;; This function is called by:
  3825 ;;		_sendData
  3826 ;;		_receiveData
  3827 ;;		_CRCcheck
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text15
  3832  0018EC                     __ptext15:
  3833                           	opt stack 0
  3834  0018EC                     _CRC8:
  3835                           	opt stack 23
  3836                           
  3837                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3838                           
  3839                           ;incstack = 0
  3840  0018EC  0E00               	movlw	0
  3841  0018EE  6E21               	movwf	CRC8@crc,c
  3842                           
  3843                           ;FastTransfer.c: 36: while (len--) {
  3844  0018F0  D01C               	goto	l3991
  3845  0018F2                     l3975:
  3846                           
  3847                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3848  0018F2  C01B  FFD9         	movff	CRC8@data,fsr2l
  3849  0018F6  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3850  0018FA  50DF               	movf	indf2,w,c
  3851  0018FC  6E1F               	movwf	CRC8@extract,c
  3852  0018FE  4A1B               	infsnz	CRC8@data,f,c
  3853  001900  2A1C               	incf	CRC8@data+1,f,c
  3854                           
  3855                           ;FastTransfer.c: 38: unsigned char tempI;
  3856                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3857  001902  0E08               	movlw	8
  3858  001904  6E20               	movwf	CRC8@tempI,c
  3859  001906  D00E               	goto	l3989
  3860  001908                     l3981:
  3861                           
  3862                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3863  001908  5021               	movf	CRC8@crc,w,c
  3864  00190A  181F               	xorwf	CRC8@extract,w,c
  3865  00190C  0B01               	andlw	1
  3866  00190E  6E1E               	movwf	CRC8@sum,c
  3867                           
  3868                           ;FastTransfer.c: 41: crc >>= 1;
  3869  001910  90D8               	bcf	status,0,c
  3870  001912  3221               	rrcf	CRC8@crc,f,c
  3871                           
  3872                           ;FastTransfer.c: 42: if (sum) {
  3873  001914  501E               	movf	CRC8@sum,w,c
  3874  001916  B4D8               	btfsc	status,2,c
  3875  001918  D002               	goto	l447
  3876                           
  3877                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3878  00191A  0E8C               	movlw	140
  3879  00191C  1A21               	xorwf	CRC8@crc,f,c
  3880  00191E                     l447:
  3881                           
  3882                           ;FastTransfer.c: 44: }
  3883                           ;FastTransfer.c: 45: extract >>= 1;
  3884  00191E  90D8               	bcf	status,0,c
  3885  001920  321F               	rrcf	CRC8@extract,f,c
  3886  001922  0620               	decf	CRC8@tempI,f,c
  3887  001924                     l3989:
  3888  001924  5020               	movf	CRC8@tempI,w,c
  3889  001926  A4D8               	btfss	status,2,c
  3890  001928  D7EF               	goto	l3981
  3891  00192A                     l3991:
  3892  00192A  061D               	decf	CRC8@len,f,c
  3893  00192C  281D               	incf	CRC8@len,w,c
  3894  00192E  A4D8               	btfss	status,2,c
  3895  001930  D7E0               	goto	l3975
  3896                           
  3897                           ;FastTransfer.c: 46: }
  3898                           ;FastTransfer.c: 47: }
  3899                           ;FastTransfer.c: 48: return crc;
  3900  001932  5021               	movf	CRC8@crc,w,c
  3901  001934  0012               	return	
  3902  001936                     __end_of_CRC8:
  3903                           	opt stack 0
  3904                           tblptru	equ	0xFF8
  3905                           tblptrh	equ	0xFF7
  3906                           tblptrl	equ	0xFF6
  3907                           tablat	equ	0xFF5
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           intcon	equ	0xFF2
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           plusw2	equ	0xFDB
  3917                           fsr2h	equ	0xFDA
  3918                           fsr2l	equ	0xFD9
  3919                           status	equ	0xFD8
  3920                           
  3921 ;; *************** function _Precharge *****************
  3922 ;; Defined at:
  3923 ;;		line 31 in file "Functions.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  OnOff           1    wreg     unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  OnOff           1   31[COMRAM] unsigned char 
  3928 ;;  i               2   34[COMRAM] int 
  3929 ;;  i               2   32[COMRAM] int 
  3930 ;; Return value:  Size  Location     Type
  3931 ;;                  1    wreg      void 
  3932 ;; Registers used:
  3933 ;;		wreg, status,2, status,0, cstack
  3934 ;; Tracked objects:
  3935 ;;		On entry : 0/0
  3936 ;;		On exit  : 0/0
  3937 ;;		Unchanged: 0/0
  3938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3939 ;;      Params:         0       0       0       0       0       0       0
  3940 ;;      Locals:         5       0       0       0       0       0       0
  3941 ;;      Temps:          0       0       0       0       0       0       0
  3942 ;;      Totals:         5       0       0       0       0       0       0
  3943 ;;Total ram usage:        5 bytes
  3944 ;; Hardware stack levels used:    1
  3945 ;; Hardware stack levels required when called:    5
  3946 ;; This function calls:
  3947 ;;		_Delay
  3948 ;; This function is called by:
  3949 ;;		_updateComms
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text16
  3954  0014A8                     __ptext16:
  3955                           	opt stack 0
  3956  0014A8                     _Precharge:
  3957                           	opt stack 24
  3958                           
  3959                           ;incstack = 0
  3960                           ;Precharge@OnOff stored from wreg
  3961  0014A8  6E20               	movwf	Precharge@OnOff,c
  3962                           
  3963                           ;Functions.c: 32: if(OnOff){
  3964  0014AA  5020               	movf	Precharge@OnOff,w,c
  3965  0014AC  B4D8               	btfsc	status,2,c
  3966  0014AE  D01C               	goto	l700
  3967                           
  3968                           ;Functions.c: 34: do { LATB3 = 1; } while(0);
  3969  0014B0  868A               	bsf	3978,3,c	;volatile
  3970                           
  3971                           ;Functions.c: 35: for(int i = 0;i<5;i++){
  3972  0014B2  0E00               	movlw	0
  3973  0014B4  6E22               	movwf	Precharge@i+1,c
  3974  0014B6  0E00               	movlw	0
  3975  0014B8  6E21               	movwf	Precharge@i,c
  3976  0014BA                     l3413:
  3977  0014BA  BE22               	btfsc	Precharge@i+1,7,c
  3978  0014BC  D006               	goto	l3417
  3979  0014BE  5022               	movf	Precharge@i+1,w,c
  3980  0014C0  E10D               	bnz	l693
  3981  0014C2  0E05               	movlw	5
  3982  0014C4  5C21               	subwf	Precharge@i,w,c
  3983  0014C6  B0D8               	btfsc	status,0,c
  3984  0014C8  D009               	goto	l693
  3985  0014CA                     l3417:
  3986                           
  3987                           ;Functions.c: 36: Delay(1000);
  3988  0014CA  0E03               	movlw	3
  3989  0014CC  6E1C               	movwf	Delay@wait+1,c
  3990  0014CE  0EE8               	movlw	232
  3991  0014D0  6E1B               	movwf	Delay@wait,c
  3992  0014D2  EC92  F00D         	call	_Delay	;wreg free
  3993  0014D6  4A21               	infsnz	Precharge@i,f,c
  3994  0014D8  2A22               	incf	Precharge@i+1,f,c
  3995  0014DA  D7EF               	goto	l3413
  3996  0014DC                     l693:
  3997  0014DC  888A               	bsf	3978,4,c	;volatile
  3998                           
  3999                           ;Functions.c: 39: do { LATC0 = 1; } while(0);
  4000  0014DE  808B               	bsf	3979,0,c	;volatile
  4001                           
  4002                           ;Functions.c: 40: do { LATB5 = 1; } while(0);
  4003  0014E0  8A8A               	bsf	3978,5,c	;volatile
  4004                           
  4005                           ;Functions.c: 41: PowerOn = 0;
  4006  0014E2  0E00               	movlw	0
  4007  0014E4  6E35               	movwf	_PowerOn,c
  4008                           
  4009                           ;Functions.c: 42: }
  4010  0014E6  0012               	return	
  4011  0014E8                     l700:
  4012  0014E8  988A               	bcf	3978,4,c	;volatile
  4013                           
  4014                           ;Functions.c: 46: do { LATB3 = 0; } while(0);
  4015  0014EA  968A               	bcf	3978,3,c	;volatile
  4016                           
  4017                           ;Functions.c: 47: do { LATC0 = 0; } while(0);
  4018  0014EC  908B               	bcf	3979,0,c	;volatile
  4019                           
  4020                           ;Functions.c: 48: for(int i = 0;i<5;i++){
  4021  0014EE  0E00               	movlw	0
  4022  0014F0  6E24               	movwf	Precharge@i_2001+1,c
  4023  0014F2  0E00               	movlw	0
  4024  0014F4  6E23               	movwf	Precharge@i_2001,c
  4025  0014F6                     l3427:
  4026  0014F6  BE24               	btfsc	Precharge@i_2001+1,7,c
  4027  0014F8  D006               	goto	l3431
  4028  0014FA  5024               	movf	Precharge@i_2001+1,w,c
  4029  0014FC  E10D               	bnz	l708
  4030  0014FE  0E05               	movlw	5
  4031  001500  5C23               	subwf	Precharge@i_2001,w,c
  4032  001502  B0D8               	btfsc	status,0,c
  4033  001504  D009               	goto	l708
  4034  001506                     l3431:
  4035                           
  4036                           ;Functions.c: 49: Delay(1000);
  4037  001506  0E03               	movlw	3
  4038  001508  6E1C               	movwf	Delay@wait+1,c
  4039  00150A  0EE8               	movlw	232
  4040  00150C  6E1B               	movwf	Delay@wait,c
  4041  00150E  EC92  F00D         	call	_Delay	;wreg free
  4042  001512  4A23               	infsnz	Precharge@i_2001,f,c
  4043  001514  2A24               	incf	Precharge@i_2001+1,f,c
  4044  001516  D7EF               	goto	l3427
  4045  001518                     l708:
  4046  001518  9A8A               	bcf	3978,5,c	;volatile
  4047                           
  4048                           ;Functions.c: 53: PowerOn = 1;
  4049  00151A  0E01               	movlw	1
  4050  00151C  6E35               	movwf	_PowerOn,c
  4051  00151E  0012               	return	
  4052  001520                     __end_of_Precharge:
  4053                           	opt stack 0
  4054                           tblptru	equ	0xFF8
  4055                           tblptrh	equ	0xFF7
  4056                           tblptrl	equ	0xFF6
  4057                           tablat	equ	0xFF5
  4058                           prodh	equ	0xFF4
  4059                           prodl	equ	0xFF3
  4060                           intcon	equ	0xFF2
  4061                           postinc0	equ	0xFEE
  4062                           wreg	equ	0xFE8
  4063                           indf2	equ	0xFDF
  4064                           postinc2	equ	0xFDE
  4065                           postdec2	equ	0xFDD
  4066                           plusw2	equ	0xFDB
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _ledDebug *****************
  4072 ;; Defined at:
  4073 ;;		line 147 in file "Functions.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      void 
  4080 ;; Registers used:
  4081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4087 ;;      Params:         0       0       0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0
  4090 ;;      Totals:         0       0       0       0       0       0       0
  4091 ;;Total ram usage:        0 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    9
  4094 ;; This function calls:
  4095 ;;		_SetCharger
  4096 ;;		_time_Set
  4097 ;;		_time_get
  4098 ;; This function is called by:
  4099 ;;		_main
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           	psect	text17
  4104  001936                     __ptext17:
  4105                           	opt stack 0
  4106  001936                     _ledDebug:
  4107                           	opt stack 21
  4108                           
  4109                           ;Functions.c: 148: if (time_get(1) > 4) {
  4110                           
  4111                           ;incstack = 0
  4112  001936  0E01               	movlw	1
  4113  001938  EC43  F00F         	call	_time_get
  4114  00193C  BE1C               	btfsc	?_time_get+1,7,c
  4115  00193E  0012               	return	
  4116  001940  501C               	movf	?_time_get+1,w,c
  4117  001942  E104               	bnz	u3970
  4118  001944  0E05               	movlw	5
  4119  001946  5C1B               	subwf	?_time_get,w,c
  4120  001948  A0D8               	btfss	status,0,c
  4121  00194A  0012               	return	
  4122  00194C                     u3970:
  4123                           
  4124                           ;Functions.c: 149: do { LATA3 = ~LATA3; } while(0);
  4125  00194C  B689               	btfsc	3977,3,c	;volatile
  4126  00194E  D002               	goto	u3980
  4127  001950  8689               	bsf	3977,3,c	;volatile
  4128  001952  D001               	goto	l4593
  4129  001954                     u3980:
  4130  001954  9689               	bcf	3977,3,c	;volatile
  4131  001956                     l4593:
  4132                           
  4133                           ;Functions.c: 150: SetCharger(1,200, 300);
  4134  001956  0E00               	movlw	0
  4135  001958  0100               	movlb	0	; () banked
  4136  00195A  6FF4               	movwf	(SetCharger@Current+1)& (0+255),b
  4137  00195C  0EC8               	movlw	200
  4138  00195E  6FF3               	movwf	SetCharger@Current& (0+255),b
  4139  001960  0E01               	movlw	1
  4140  001962  0100               	movlb	0	; () banked
  4141  001964  6FF6               	movwf	(SetCharger@Voltage+1)& (0+255),b
  4142  001966  0E2C               	movlw	44
  4143  001968  6FF5               	movwf	SetCharger@Voltage& (0+255),b
  4144  00196A  0E01               	movlw	1
  4145  00196C  ECFA  F003         	call	_SetCharger
  4146                           
  4147                           ;Functions.c: 151: time_Set(1, 0);
  4148  001970  0E00               	movlw	0
  4149  001972  6E1C               	movwf	time_Set@value+1,c
  4150  001974  0E00               	movlw	0
  4151  001976  6E1B               	movwf	time_Set@value,c
  4152  001978  0E01               	movlw	1
  4153  00197A  ECD6  F00E         	call	_time_Set
  4154  00197E  0012               	return	
  4155  001980                     __end_of_ledDebug:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           indf2	equ	0xFDF
  4167                           postinc2	equ	0xFDE
  4168                           postdec2	equ	0xFDD
  4169                           plusw2	equ	0xFDB
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function _time_get *****************
  4175 ;; Defined at:
  4176 ;;		line 153 in file "mcc_generated_files/tmr0.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  WhatTime        1    wreg     unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  WhatTime        1   28[COMRAM] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  2   26[COMRAM] int 
  4183 ;; Registers used:
  4184 ;;		wreg, status,2, status,0
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4190 ;;      Params:         2       0       0       0       0       0       0
  4191 ;;      Locals:         1       0       0       0       0       0       0
  4192 ;;      Temps:          0       0       0       0       0       0       0
  4193 ;;      Totals:         3       0       0       0       0       0       0
  4194 ;;Total ram usage:        3 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    4
  4197 ;; This function calls:
  4198 ;;		Nothing
  4199 ;; This function is called by:
  4200 ;;		_ledDebug
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text18
  4205  001E86                     __ptext18:
  4206                           	opt stack 0
  4207  001E86                     _time_get:
  4208                           	opt stack 25
  4209                           
  4210                           ;incstack = 0
  4211                           ;time_get@WhatTime stored from wreg
  4212  001E86  6E1D               	movwf	time_get@WhatTime,c
  4213                           
  4214                           ;tmr0.c: 154: if(WhatTime == 1){
  4215  001E88  041D               	decf	time_get@WhatTime,w,c
  4216  001E8A  A4D8               	btfss	status,2,c
  4217  001E8C  0012               	return	
  4218                           
  4219                           ;tmr0.c: 155: return LEDtime;
  4220  001E8E  C07B  F01B         	movff	_LEDtime,?_time_get
  4221  001E92  C07C  F01C         	movff	_LEDtime+1,?_time_get+1
  4222  001E96  0012               	return	
  4223  001E98                     __end_of_time_get:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           postinc0	equ	0xFEE
  4233                           wreg	equ	0xFE8
  4234                           indf2	equ	0xFDF
  4235                           postinc2	equ	0xFDE
  4236                           postdec2	equ	0xFDD
  4237                           plusw2	equ	0xFDB
  4238                           fsr2h	equ	0xFDA
  4239                           fsr2l	equ	0xFD9
  4240                           status	equ	0xFD8
  4241                           
  4242 ;; *************** function _time_Set *****************
  4243 ;; Defined at:
  4244 ;;		line 159 in file "mcc_generated_files/tmr0.c"
  4245 ;; Parameters:    Size  Location     Type
  4246 ;;  WhatTime        1    wreg     unsigned char 
  4247 ;;  value           2   26[COMRAM] int 
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  WhatTime        1   28[COMRAM] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4259 ;;      Params:         2       0       0       0       0       0       0
  4260 ;;      Locals:         1       0       0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0
  4262 ;;      Totals:         3       0       0       0       0       0       0
  4263 ;;Total ram usage:        3 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    4
  4266 ;; This function calls:
  4267 ;;		Nothing
  4268 ;; This function is called by:
  4269 ;;		_ledDebug
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text19
  4274  001DAC                     __ptext19:
  4275                           	opt stack 0
  4276  001DAC                     _time_Set:
  4277                           	opt stack 25
  4278                           
  4279                           ;incstack = 0
  4280                           ;time_Set@WhatTime stored from wreg
  4281  001DAC  6E1D               	movwf	time_Set@WhatTime,c
  4282                           
  4283                           ;tmr0.c: 160: if(WhatTime == 1){
  4284  001DAE  041D               	decf	time_Set@WhatTime,w,c
  4285  001DB0  A4D8               	btfss	status,2,c
  4286  001DB2  0012               	return	
  4287                           
  4288                           ;tmr0.c: 161: LEDtime = value;
  4289  001DB4  C01B  F07B         	movff	time_Set@value,_LEDtime
  4290  001DB8  C01C  F07C         	movff	time_Set@value+1,_LEDtime+1
  4291  001DBC  0100               	movlb	0	; () banked
  4292  001DBE  0E00               	movlw	0
  4293  001DC0  BF7C               	btfsc	(_LEDtime+1)& (0+255),7,b
  4294  001DC2  0EFF               	movlw	-1
  4295  001DC4  6F7D               	movwf	(_LEDtime+2)& (0+255),b
  4296  001DC6  6F7E               	movwf	(_LEDtime+3)& (0+255),b
  4297  001DC8  0012               	return	
  4298  001DCA                     __end_of_time_Set:
  4299                           	opt stack 0
  4300                           tblptru	equ	0xFF8
  4301                           tblptrh	equ	0xFF7
  4302                           tblptrl	equ	0xFF6
  4303                           tablat	equ	0xFF5
  4304                           prodh	equ	0xFF4
  4305                           prodl	equ	0xFF3
  4306                           intcon	equ	0xFF2
  4307                           postinc0	equ	0xFEE
  4308                           wreg	equ	0xFE8
  4309                           indf2	equ	0xFDF
  4310                           postinc2	equ	0xFDE
  4311                           postdec2	equ	0xFDD
  4312                           plusw2	equ	0xFDB
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function _SetCharger *****************
  4318 ;; Defined at:
  4319 ;;		line 66 in file "Functions.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  mode            1    wreg     unsigned char 
  4322 ;;  Current         2   33[BANK0 ] int 
  4323 ;;  Voltage         2   35[BANK0 ] int 
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;  mode            1   10[BANK2 ] unsigned char 
  4326 ;;  str            10    0[BANK2 ] unsigned char [10]
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4336 ;;      Params:         0       4       0       0       0       0       0
  4337 ;;      Locals:         0       0       0      11       0       0       0
  4338 ;;      Temps:          0       0       0       0       0       0       0
  4339 ;;      Totals:         0       4       0      11       0       0       0
  4340 ;;Total ram usage:       15 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    8
  4343 ;; This function calls:
  4344 ;;		_SetMux
  4345 ;;		___awmod
  4346 ;;		_printf
  4347 ;;		_sprintf
  4348 ;;		_strcpy
  4349 ;; This function is called by:
  4350 ;;		_updateComms
  4351 ;;		_ledDebug
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text20
  4356  0007F4                     __ptext20:
  4357                           	opt stack 0
  4358  0007F4                     _SetCharger:
  4359                           	opt stack 21
  4360                           
  4361                           ;incstack = 0
  4362                           ;SetCharger@mode stored from wreg
  4363  0007F4  0102               	movlb	2	; () banked
  4364  0007F6  6FD8               	movwf	SetCharger@mode& (0+255),b
  4365                           
  4366                           ;Functions.c: 67: char str[10];
  4367                           ;Functions.c: 68: if(mode == 1){
  4368  0007F8  0102               	movlb	2	; () banked
  4369  0007FA  05D8               	decf	SetCharger@mode& (0+255),w,b
  4370  0007FC  A4D8               	btfss	status,2,c
  4371  0007FE  D0AA               	goto	l4521
  4372                           
  4373                           ; BSR set to: 2
  4374                           ;Functions.c: 70: SetMux(1);
  4375  000800  0E01               	movlw	1
  4376  000802  EC41  F00D         	call	_SetMux
  4377                           
  4378                           ;Functions.c: 73: sprintf(str, "M,");
  4379  000806  0ECE               	movlw	low SetCharger@str
  4380  000808  0100               	movlb	0	; () banked
  4381  00080A  6FE7               	movwf	sprintf@wh& (0+255),b
  4382  00080C  0E02               	movlw	high SetCharger@str
  4383  00080E  0100               	movlb	0	; () banked
  4384  000810  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4385  000812  0EF9               	movlw	low STR_1
  4386  000814  0100               	movlb	0	; () banked
  4387  000816  6FE9               	movwf	sprintf@f& (0+255),b
  4388  000818  0E7F               	movlw	high STR_1
  4389  00081A  0100               	movlb	0	; () banked
  4390  00081C  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4391  00081E  EC24  F00C         	call	_sprintf	;wreg free
  4392                           
  4393                           ;Functions.c: 74: strcpy(ChargerData, str);
  4394  000822  0E99               	movlw	low _ChargerData
  4395  000824  6E1B               	movwf	strcpy@to,c
  4396  000826  0E00               	movlw	high _ChargerData
  4397  000828  6E1C               	movwf	strcpy@to+1,c
  4398  00082A  0ECE               	movlw	low SetCharger@str
  4399  00082C  6E1D               	movwf	strcpy@from,c
  4400  00082E  0E02               	movlw	high SetCharger@str
  4401  000830  6E1E               	movwf	strcpy@from+1,c
  4402  000832  ECDC  F00D         	call	_strcpy	;wreg free
  4403                           
  4404                           ;Functions.c: 75: printf("%s",ChargerData);
  4405  000836  0EFC               	movlw	low STR_2
  4406  000838  0100               	movlb	0	; () banked
  4407  00083A  6FE7               	movwf	printf@f& (0+255),b
  4408  00083C  0E7F               	movlw	high STR_2
  4409  00083E  0100               	movlb	0	; () banked
  4410  000840  6FE8               	movwf	(printf@f+1)& (0+255),b
  4411  000842  0E99               	movlw	low _ChargerData
  4412  000844  0100               	movlb	0	; () banked
  4413  000846  6FE9               	movwf	(?_printf+2)& (0+255),b
  4414  000848  0E00               	movlw	high _ChargerData
  4415  00084A  0100               	movlb	0	; () banked
  4416  00084C  6FEA               	movwf	(?_printf+3)& (0+255),b
  4417  00084E  ECC0  F00C         	call	_printf	;wreg free
  4418                           
  4419                           ;Functions.c: 76: sprintf(str, "%03d,", 001);
  4420  000852  0ECE               	movlw	low SetCharger@str
  4421  000854  0100               	movlb	0	; () banked
  4422  000856  6FE7               	movwf	sprintf@wh& (0+255),b
  4423  000858  0E02               	movlw	high SetCharger@str
  4424  00085A  0100               	movlb	0	; () banked
  4425  00085C  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4426  00085E  0EF3               	movlw	low STR_3
  4427  000860  0100               	movlb	0	; () banked
  4428  000862  6FE9               	movwf	sprintf@f& (0+255),b
  4429  000864  0E7F               	movlw	high STR_3
  4430  000866  0100               	movlb	0	; () banked
  4431  000868  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4432  00086A  0E00               	movlw	0
  4433  00086C  0100               	movlb	0	; () banked
  4434  00086E  6FEC               	movwf	(?_sprintf+5)& (0+255),b
  4435  000870  0E01               	movlw	1
  4436  000872  6FEB               	movwf	(?_sprintf+4)& (0+255),b
  4437  000874  EC24  F00C         	call	_sprintf	;wreg free
  4438                           
  4439                           ;Functions.c: 77: strcpy(ChargerData, str);
  4440  000878  0E99               	movlw	low _ChargerData
  4441  00087A  6E1B               	movwf	strcpy@to,c
  4442  00087C  0E00               	movlw	high _ChargerData
  4443  00087E  6E1C               	movwf	strcpy@to+1,c
  4444  000880  0ECE               	movlw	low SetCharger@str
  4445  000882  6E1D               	movwf	strcpy@from,c
  4446  000884  0E02               	movlw	high SetCharger@str
  4447  000886  6E1E               	movwf	strcpy@from+1,c
  4448  000888  ECDC  F00D         	call	_strcpy	;wreg free
  4449                           
  4450                           ;Functions.c: 78: printf("%s",ChargerData);
  4451  00088C  0EFC               	movlw	low STR_2
  4452  00088E  0100               	movlb	0	; () banked
  4453  000890  6FE7               	movwf	printf@f& (0+255),b
  4454  000892  0E7F               	movlw	high STR_2
  4455  000894  0100               	movlb	0	; () banked
  4456  000896  6FE8               	movwf	(printf@f+1)& (0+255),b
  4457  000898  0E99               	movlw	low _ChargerData
  4458  00089A  0100               	movlb	0	; () banked
  4459  00089C  6FE9               	movwf	(?_printf+2)& (0+255),b
  4460  00089E  0E00               	movlw	high _ChargerData
  4461  0008A0  0100               	movlb	0	; () banked
  4462  0008A2  6FEA               	movwf	(?_printf+3)& (0+255),b
  4463  0008A4  ECC0  F00C         	call	_printf	;wreg free
  4464                           
  4465                           ;Functions.c: 79: sprintf(str, "%03d,", 000);
  4466  0008A8  0ECE               	movlw	low SetCharger@str
  4467  0008AA  0100               	movlb	0	; () banked
  4468  0008AC  6FE7               	movwf	sprintf@wh& (0+255),b
  4469  0008AE  0E02               	movlw	high SetCharger@str
  4470  0008B0  0100               	movlb	0	; () banked
  4471  0008B2  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4472  0008B4  0EF3               	movlw	low STR_3
  4473  0008B6  0100               	movlb	0	; () banked
  4474  0008B8  6FE9               	movwf	sprintf@f& (0+255),b
  4475  0008BA  0E7F               	movlw	high STR_3
  4476  0008BC  0100               	movlb	0	; () banked
  4477  0008BE  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4478  0008C0  0E00               	movlw	0
  4479  0008C2  0100               	movlb	0	; () banked
  4480  0008C4  6FEC               	movwf	(?_sprintf+5)& (0+255),b
  4481  0008C6  0E00               	movlw	0
  4482  0008C8  6FEB               	movwf	(?_sprintf+4)& (0+255),b
  4483  0008CA  EC24  F00C         	call	_sprintf	;wreg free
  4484                           
  4485                           ;Functions.c: 80: strcpy(ChargerData, str);
  4486  0008CE  0E99               	movlw	low _ChargerData
  4487  0008D0  6E1B               	movwf	strcpy@to,c
  4488  0008D2  0E00               	movlw	high _ChargerData
  4489  0008D4  6E1C               	movwf	strcpy@to+1,c
  4490  0008D6  0ECE               	movlw	low SetCharger@str
  4491  0008D8  6E1D               	movwf	strcpy@from,c
  4492  0008DA  0E02               	movlw	high SetCharger@str
  4493  0008DC  6E1E               	movwf	strcpy@from+1,c
  4494  0008DE  ECDC  F00D         	call	_strcpy	;wreg free
  4495                           
  4496                           ;Functions.c: 81: printf("%s",ChargerData);
  4497  0008E2  0EFC               	movlw	low STR_2
  4498  0008E4  0100               	movlb	0	; () banked
  4499  0008E6  6FE7               	movwf	printf@f& (0+255),b
  4500  0008E8  0E7F               	movlw	high STR_2
  4501  0008EA  0100               	movlb	0	; () banked
  4502  0008EC  6FE8               	movwf	(printf@f+1)& (0+255),b
  4503  0008EE  0E99               	movlw	low _ChargerData
  4504  0008F0  0100               	movlb	0	; () banked
  4505  0008F2  6FE9               	movwf	(?_printf+2)& (0+255),b
  4506  0008F4  0E00               	movlw	high _ChargerData
  4507  0008F6  0100               	movlb	0	; () banked
  4508  0008F8  6FEA               	movwf	(?_printf+3)& (0+255),b
  4509  0008FA  ECC0  F00C         	call	_printf	;wreg free
  4510                           
  4511                           ;Functions.c: 83: sprintf(str, "%03d,E\n", (001 + 000)%1000);
  4512  0008FE  0ECE               	movlw	low SetCharger@str
  4513  000900  0100               	movlb	0	; () banked
  4514  000902  6FE7               	movwf	sprintf@wh& (0+255),b
  4515  000904  0E02               	movlw	high SetCharger@str
  4516  000906  0100               	movlb	0	; () banked
  4517  000908  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4518  00090A  0EDD               	movlw	low STR_7
  4519  00090C  0100               	movlb	0	; () banked
  4520  00090E  6FE9               	movwf	sprintf@f& (0+255),b
  4521  000910  0E7F               	movlw	high STR_7
  4522  000912  0100               	movlb	0	; () banked
  4523  000914  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4524  000916  0E00               	movlw	0
  4525  000918  0100               	movlb	0	; () banked
  4526  00091A  6FEC               	movwf	(?_sprintf+5)& (0+255),b
  4527  00091C  0E01               	movlw	1
  4528  00091E  6FEB               	movwf	(?_sprintf+4)& (0+255),b
  4529  000920  EC24  F00C         	call	_sprintf	;wreg free
  4530                           
  4531                           ;Functions.c: 84: strcpy(ChargerData, str);
  4532  000924  0E99               	movlw	low _ChargerData
  4533  000926  6E1B               	movwf	strcpy@to,c
  4534  000928  0E00               	movlw	high _ChargerData
  4535  00092A  6E1C               	movwf	strcpy@to+1,c
  4536  00092C  0ECE               	movlw	low SetCharger@str
  4537  00092E  6E1D               	movwf	strcpy@from,c
  4538  000930  0E02               	movlw	high SetCharger@str
  4539  000932  6E1E               	movwf	strcpy@from+1,c
  4540  000934  ECDC  F00D         	call	_strcpy	;wreg free
  4541                           
  4542                           ;Functions.c: 86: printf("%s",ChargerData);
  4543  000938  0EFC               	movlw	low STR_2
  4544  00093A  0100               	movlb	0	; () banked
  4545  00093C  6FE7               	movwf	printf@f& (0+255),b
  4546  00093E  0E7F               	movlw	high STR_2
  4547  000940  0100               	movlb	0	; () banked
  4548  000942  6FE8               	movwf	(printf@f+1)& (0+255),b
  4549  000944  0E99               	movlw	low _ChargerData
  4550  000946  0100               	movlb	0	; () banked
  4551  000948  6FE9               	movwf	(?_printf+2)& (0+255),b
  4552  00094A  0E00               	movlw	high _ChargerData
  4553  00094C  0100               	movlb	0	; () banked
  4554  00094E  6FEA               	movwf	(?_printf+3)& (0+255),b
  4555  000950  ECC0  F00C         	call	_printf	;wreg free
  4556  000954                     l4521:
  4557                           
  4558                           ;Functions.c: 87: }
  4559                           ;Functions.c: 88: if(mode == 2){
  4560  000954  0E02               	movlw	2
  4561  000956  0102               	movlb	2	; () banked
  4562  000958  19D8               	xorwf	SetCharger@mode& (0+255),w,b
  4563  00095A  A4D8               	btfss	status,2,c
  4564  00095C  0012               	return	
  4565                           
  4566                           ; BSR set to: 2
  4567                           ;Functions.c: 90: SetMux(1);
  4568  00095E  0E01               	movlw	1
  4569  000960  EC41  F00D         	call	_SetMux
  4570                           
  4571                           ;Functions.c: 92: sprintf(str, "M,");
  4572  000964  0ECE               	movlw	low SetCharger@str
  4573  000966  0100               	movlb	0	; () banked
  4574  000968  6FE7               	movwf	sprintf@wh& (0+255),b
  4575  00096A  0E02               	movlw	high SetCharger@str
  4576  00096C  0100               	movlb	0	; () banked
  4577  00096E  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4578  000970  0EF9               	movlw	low STR_1
  4579  000972  0100               	movlb	0	; () banked
  4580  000974  6FE9               	movwf	sprintf@f& (0+255),b
  4581  000976  0E7F               	movlw	high STR_1
  4582  000978  0100               	movlb	0	; () banked
  4583  00097A  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4584  00097C  EC24  F00C         	call	_sprintf	;wreg free
  4585                           
  4586                           ;Functions.c: 93: strcpy(ChargerData, str);
  4587  000980  0E99               	movlw	low _ChargerData
  4588  000982  6E1B               	movwf	strcpy@to,c
  4589  000984  0E00               	movlw	high _ChargerData
  4590  000986  6E1C               	movwf	strcpy@to+1,c
  4591  000988  0ECE               	movlw	low SetCharger@str
  4592  00098A  6E1D               	movwf	strcpy@from,c
  4593  00098C  0E02               	movlw	high SetCharger@str
  4594  00098E  6E1E               	movwf	strcpy@from+1,c
  4595  000990  ECDC  F00D         	call	_strcpy	;wreg free
  4596                           
  4597                           ;Functions.c: 94: printf("%s",ChargerData);
  4598  000994  0EFC               	movlw	low STR_2
  4599  000996  0100               	movlb	0	; () banked
  4600  000998  6FE7               	movwf	printf@f& (0+255),b
  4601  00099A  0E7F               	movlw	high STR_2
  4602  00099C  0100               	movlb	0	; () banked
  4603  00099E  6FE8               	movwf	(printf@f+1)& (0+255),b
  4604  0009A0  0E99               	movlw	low _ChargerData
  4605  0009A2  0100               	movlb	0	; () banked
  4606  0009A4  6FE9               	movwf	(?_printf+2)& (0+255),b
  4607  0009A6  0E00               	movlw	high _ChargerData
  4608  0009A8  0100               	movlb	0	; () banked
  4609  0009AA  6FEA               	movwf	(?_printf+3)& (0+255),b
  4610  0009AC  ECC0  F00C         	call	_printf	;wreg free
  4611                           
  4612                           ;Functions.c: 95: sprintf(str, "%03d,", Current);
  4613  0009B0  0ECE               	movlw	low SetCharger@str
  4614  0009B2  0100               	movlb	0	; () banked
  4615  0009B4  6FE7               	movwf	sprintf@wh& (0+255),b
  4616  0009B6  0E02               	movlw	high SetCharger@str
  4617  0009B8  0100               	movlb	0	; () banked
  4618  0009BA  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4619  0009BC  0EF3               	movlw	low STR_3
  4620  0009BE  0100               	movlb	0	; () banked
  4621  0009C0  6FE9               	movwf	sprintf@f& (0+255),b
  4622  0009C2  0E7F               	movlw	high STR_3
  4623  0009C4  0100               	movlb	0	; () banked
  4624  0009C6  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4625  0009C8  C0F3  F0EB         	movff	SetCharger@Current,?_sprintf+4
  4626  0009CC  C0F4  F0EC         	movff	SetCharger@Current+1,?_sprintf+5
  4627  0009D0  EC24  F00C         	call	_sprintf	;wreg free
  4628                           
  4629                           ;Functions.c: 96: strcpy(ChargerData, str);
  4630  0009D4  0E99               	movlw	low _ChargerData
  4631  0009D6  6E1B               	movwf	strcpy@to,c
  4632  0009D8  0E00               	movlw	high _ChargerData
  4633  0009DA  6E1C               	movwf	strcpy@to+1,c
  4634  0009DC  0ECE               	movlw	low SetCharger@str
  4635  0009DE  6E1D               	movwf	strcpy@from,c
  4636  0009E0  0E02               	movlw	high SetCharger@str
  4637  0009E2  6E1E               	movwf	strcpy@from+1,c
  4638  0009E4  ECDC  F00D         	call	_strcpy	;wreg free
  4639                           
  4640                           ;Functions.c: 97: printf("%s",ChargerData);
  4641  0009E8  0EFC               	movlw	low STR_2
  4642  0009EA  0100               	movlb	0	; () banked
  4643  0009EC  6FE7               	movwf	printf@f& (0+255),b
  4644  0009EE  0E7F               	movlw	high STR_2
  4645  0009F0  0100               	movlb	0	; () banked
  4646  0009F2  6FE8               	movwf	(printf@f+1)& (0+255),b
  4647  0009F4  0E99               	movlw	low _ChargerData
  4648  0009F6  0100               	movlb	0	; () banked
  4649  0009F8  6FE9               	movwf	(?_printf+2)& (0+255),b
  4650  0009FA  0E00               	movlw	high _ChargerData
  4651  0009FC  0100               	movlb	0	; () banked
  4652  0009FE  6FEA               	movwf	(?_printf+3)& (0+255),b
  4653  000A00  ECC0  F00C         	call	_printf	;wreg free
  4654                           
  4655                           ;Functions.c: 98: sprintf(str, "%03d,", Voltage);
  4656  000A04  0ECE               	movlw	low SetCharger@str
  4657  000A06  0100               	movlb	0	; () banked
  4658  000A08  6FE7               	movwf	sprintf@wh& (0+255),b
  4659  000A0A  0E02               	movlw	high SetCharger@str
  4660  000A0C  0100               	movlb	0	; () banked
  4661  000A0E  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4662  000A10  0EF3               	movlw	low STR_3
  4663  000A12  0100               	movlb	0	; () banked
  4664  000A14  6FE9               	movwf	sprintf@f& (0+255),b
  4665  000A16  0E7F               	movlw	high STR_3
  4666  000A18  0100               	movlb	0	; () banked
  4667  000A1A  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4668  000A1C  C0F5  F0EB         	movff	SetCharger@Voltage,?_sprintf+4
  4669  000A20  C0F6  F0EC         	movff	SetCharger@Voltage+1,?_sprintf+5
  4670  000A24  EC24  F00C         	call	_sprintf	;wreg free
  4671                           
  4672                           ;Functions.c: 99: strcpy(ChargerData, str);
  4673  000A28  0E99               	movlw	low _ChargerData
  4674  000A2A  6E1B               	movwf	strcpy@to,c
  4675  000A2C  0E00               	movlw	high _ChargerData
  4676  000A2E  6E1C               	movwf	strcpy@to+1,c
  4677  000A30  0ECE               	movlw	low SetCharger@str
  4678  000A32  6E1D               	movwf	strcpy@from,c
  4679  000A34  0E02               	movlw	high SetCharger@str
  4680  000A36  6E1E               	movwf	strcpy@from+1,c
  4681  000A38  ECDC  F00D         	call	_strcpy	;wreg free
  4682                           
  4683                           ;Functions.c: 100: printf("%s",ChargerData);
  4684  000A3C  0EFC               	movlw	low STR_2
  4685  000A3E  0100               	movlb	0	; () banked
  4686  000A40  6FE7               	movwf	printf@f& (0+255),b
  4687  000A42  0E7F               	movlw	high STR_2
  4688  000A44  0100               	movlb	0	; () banked
  4689  000A46  6FE8               	movwf	(printf@f+1)& (0+255),b
  4690  000A48  0E99               	movlw	low _ChargerData
  4691  000A4A  0100               	movlb	0	; () banked
  4692  000A4C  6FE9               	movwf	(?_printf+2)& (0+255),b
  4693  000A4E  0E00               	movlw	high _ChargerData
  4694  000A50  0100               	movlb	0	; () banked
  4695  000A52  6FEA               	movwf	(?_printf+3)& (0+255),b
  4696  000A54  ECC0  F00C         	call	_printf	;wreg free
  4697                           
  4698                           ;Functions.c: 102: sprintf(str, "%03d,E\n", (Current + Voltage)%1000);
  4699  000A58  0ECE               	movlw	low SetCharger@str
  4700  000A5A  0100               	movlb	0	; () banked
  4701  000A5C  6FE7               	movwf	sprintf@wh& (0+255),b
  4702  000A5E  0E02               	movlw	high SetCharger@str
  4703  000A60  0100               	movlb	0	; () banked
  4704  000A62  6FE8               	movwf	(sprintf@wh+1)& (0+255),b
  4705  000A64  0EDD               	movlw	low STR_7
  4706  000A66  0100               	movlb	0	; () banked
  4707  000A68  6FE9               	movwf	sprintf@f& (0+255),b
  4708  000A6A  0E7F               	movlw	high STR_7
  4709  000A6C  0100               	movlb	0	; () banked
  4710  000A6E  6FEA               	movwf	(sprintf@f+1)& (0+255),b
  4711  000A70  0100               	movlb	0	; () banked
  4712  000A72  51F5               	movf	SetCharger@Voltage& (0+255),w,b
  4713  000A74  0100               	movlb	0	; () banked
  4714  000A76  25F3               	addwf	SetCharger@Current& (0+255),w,b
  4715  000A78  6E1B               	movwf	___awmod@dividend,c
  4716  000A7A  0100               	movlb	0	; () banked
  4717  000A7C  51F6               	movf	(SetCharger@Voltage+1)& (0+255),w,b
  4718  000A7E  0100               	movlb	0	; () banked
  4719  000A80  21F4               	addwfc	(SetCharger@Current+1)& (0+255),w,b
  4720  000A82  6E1C               	movwf	___awmod@dividend+1,c
  4721  000A84  0E03               	movlw	3
  4722  000A86  6E1E               	movwf	___awmod@divisor+1,c
  4723  000A88  0EE8               	movlw	232
  4724  000A8A  6E1D               	movwf	___awmod@divisor,c
  4725  000A8C  ECCA  F00A         	call	___awmod	;wreg free
  4726  000A90  C01B  F0EB         	movff	?___awmod,?_sprintf+4
  4727  000A94  C01C  F0EC         	movff	?___awmod+1,?_sprintf+5
  4728  000A98  EC24  F00C         	call	_sprintf	;wreg free
  4729                           
  4730                           ;Functions.c: 103: strcpy(ChargerData, str);
  4731  000A9C  0E99               	movlw	low _ChargerData
  4732  000A9E  6E1B               	movwf	strcpy@to,c
  4733  000AA0  0E00               	movlw	high _ChargerData
  4734  000AA2  6E1C               	movwf	strcpy@to+1,c
  4735  000AA4  0ECE               	movlw	low SetCharger@str
  4736  000AA6  6E1D               	movwf	strcpy@from,c
  4737  000AA8  0E02               	movlw	high SetCharger@str
  4738  000AAA  6E1E               	movwf	strcpy@from+1,c
  4739  000AAC  ECDC  F00D         	call	_strcpy	;wreg free
  4740                           
  4741                           ;Functions.c: 105: printf("%s",ChargerData);
  4742  000AB0  0EFC               	movlw	low STR_2
  4743  000AB2  0100               	movlb	0	; () banked
  4744  000AB4  6FE7               	movwf	printf@f& (0+255),b
  4745  000AB6  0E7F               	movlw	high STR_2
  4746  000AB8  0100               	movlb	0	; () banked
  4747  000ABA  6FE8               	movwf	(printf@f+1)& (0+255),b
  4748  000ABC  0E99               	movlw	low _ChargerData
  4749  000ABE  0100               	movlb	0	; () banked
  4750  000AC0  6FE9               	movwf	(?_printf+2)& (0+255),b
  4751  000AC2  0E00               	movlw	high _ChargerData
  4752  000AC4  0100               	movlb	0	; () banked
  4753  000AC6  6FEA               	movwf	(?_printf+3)& (0+255),b
  4754  000AC8  ECC0  F00C         	call	_printf	;wreg free
  4755  000ACC  0012               	return	
  4756  000ACE                     __end_of_SetCharger:
  4757                           	opt stack 0
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           intcon	equ	0xFF2
  4765                           postinc0	equ	0xFEE
  4766                           wreg	equ	0xFE8
  4767                           indf2	equ	0xFDF
  4768                           postinc2	equ	0xFDE
  4769                           postdec2	equ	0xFDD
  4770                           plusw2	equ	0xFDB
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _strcpy *****************
  4776 ;; Defined at:
  4777 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\strcpy.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  to              2   26[COMRAM] PTR unsigned char 
  4780 ;;		 -> ChargerData(40), 
  4781 ;;  from            2   28[COMRAM] PTR const unsigned char 
  4782 ;;		 -> SetCharger@str(10), 
  4783 ;; Auto vars:     Size  Location     Type
  4784 ;;  cp              2   30[COMRAM] PTR unsigned char 
  4785 ;;		 -> ChargerData(40), 
  4786 ;; Return value:  Size  Location     Type
  4787 ;;                  2   26[COMRAM] PTR unsigned char 
  4788 ;; Registers used:
  4789 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4790 ;; Tracked objects:
  4791 ;;		On entry : 0/0
  4792 ;;		On exit  : 0/0
  4793 ;;		Unchanged: 0/0
  4794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4795 ;;      Params:         4       0       0       0       0       0       0
  4796 ;;      Locals:         2       0       0       0       0       0       0
  4797 ;;      Temps:          0       0       0       0       0       0       0
  4798 ;;      Totals:         6       0       0       0       0       0       0
  4799 ;;Total ram usage:        6 bytes
  4800 ;; Hardware stack levels used:    1
  4801 ;; Hardware stack levels required when called:    4
  4802 ;; This function calls:
  4803 ;;		Nothing
  4804 ;; This function is called by:
  4805 ;;		_SetCharger
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           	psect	text21
  4810  001BB8                     __ptext21:
  4811                           	opt stack 0
  4812  001BB8                     _strcpy:
  4813                           	opt stack 24
  4814                           
  4815                           ;incstack = 0
  4816  001BB8  C01B  F01F         	movff	strcpy@to,strcpy@cp
  4817  001BBC  C01C  F020         	movff	strcpy@to+1,strcpy@cp+1
  4818  001BC0  D004               	goto	l4307
  4819  001BC2                     l4305:
  4820  001BC2  4A1F               	infsnz	strcpy@cp,f,c
  4821  001BC4  2A20               	incf	strcpy@cp+1,f,c
  4822  001BC6  4A1D               	infsnz	strcpy@from,f,c
  4823  001BC8  2A1E               	incf	strcpy@from+1,f,c
  4824  001BCA                     l4307:
  4825  001BCA  C01D  FFD9         	movff	strcpy@from,fsr2l
  4826  001BCE  C01E  FFDA         	movff	strcpy@from+1,fsr2h
  4827  001BD2  C01F  FFE1         	movff	strcpy@cp,fsr1l
  4828  001BD6  C020  FFE2         	movff	strcpy@cp+1,fsr1h
  4829  001BDA  CFDF FFE7          	movff	indf2,indf1
  4830  001BDE  50E7               	movf	indf1,w,c
  4831  001BE0  B4D8               	btfsc	status,2,c
  4832  001BE2  0012               	return	
  4833  001BE4  D7EE               	goto	l4305
  4834  001BE6                     __end_of_strcpy:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           indf1	equ	0xFE7
  4846                           fsr1h	equ	0xFE2
  4847                           fsr1l	equ	0xFE1
  4848                           indf2	equ	0xFDF
  4849                           postinc2	equ	0xFDE
  4850                           postdec2	equ	0xFDD
  4851                           plusw2	equ	0xFDB
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _sprintf *****************
  4857 ;; Defined at:
  4858 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprintf.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  wh              2   21[BANK0 ] PTR unsigned char 
  4861 ;;		 -> SetCharger@str(10), 
  4862 ;;  f               2   23[BANK0 ] PTR const unsigned char 
  4863 ;;		 -> STR_15(8), STR_13(6), STR_11(6), STR_9(3), 
  4864 ;;		 -> STR_7(8), STR_5(6), STR_3(6), STR_1(3), 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  pb              4   29[BANK0 ] struct __prbuf
  4867 ;;  ap              2   27[BANK0 ] PTR void [1]
  4868 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4869 ;; Return value:  Size  Location     Type
  4870 ;;                  2   21[BANK0 ] int 
  4871 ;; Registers used:
  4872 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4873 ;; Tracked objects:
  4874 ;;		On entry : 0/0
  4875 ;;		On exit  : 0/0
  4876 ;;		Unchanged: 0/0
  4877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4878 ;;      Params:         0       6       0       0       0       0       0
  4879 ;;      Locals:         0       6       0       0       0       0       0
  4880 ;;      Temps:          0       0       0       0       0       0       0
  4881 ;;      Totals:         0      12       0       0       0       0       0
  4882 ;;Total ram usage:       12 bytes
  4883 ;; Hardware stack levels used:    1
  4884 ;; Hardware stack levels required when called:    7
  4885 ;; This function calls:
  4886 ;;		__doprnt
  4887 ;; This function is called by:
  4888 ;;		_SetCharger
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text22
  4893  001848                     __ptext22:
  4894                           	opt stack 0
  4895  001848                     _sprintf:
  4896                           	opt stack 21
  4897                           
  4898                           ;incstack = 0
  4899  001848  C0E7  F0EF         	movff	sprintf@wh,sprintf@pb
  4900  00184C  C0E8  F0F0         	movff	sprintf@wh+1,sprintf@pb+1
  4901  001850  0E00               	movlw	0
  4902  001852  0100               	movlb	0	; () banked
  4903  001854  6FF1               	movwf	(sprintf@pb+2)& (0+255),b
  4904  001856  0E00               	movlw	0
  4905  001858  0100               	movlb	0	; () banked
  4906  00185A  6FF2               	movwf	(sprintf@pb+3)& (0+255),b
  4907  00185C  0EEB               	movlw	low (?_sprintf+4)
  4908  00185E  0100               	movlb	0	; () banked
  4909  001860  6FED               	movwf	sprintf@ap& (0+255),b
  4910  001862  0E00               	movlw	high (?_sprintf+4)
  4911  001864  0100               	movlb	0	; () banked
  4912  001866  6FEE               	movwf	(sprintf@ap+1)& (0+255),b
  4913                           
  4914                           ; BSR set to: 0
  4915  001868  0EEF               	movlw	low sprintf@pb
  4916  00186A  0100               	movlb	0	; () banked
  4917  00186C  6FD2               	movwf	__doprnt@pb& (0+255),b
  4918  00186E  0E00               	movlw	high sprintf@pb
  4919  001870  0100               	movlb	0	; () banked
  4920  001872  6FD3               	movwf	(__doprnt@pb+1)& (0+255),b
  4921  001874  C0E9  F0D4         	movff	sprintf@f,__doprnt@f
  4922  001878  C0EA  F0D5         	movff	sprintf@f+1,__doprnt@f+1
  4923  00187C  0EED               	movlw	low sprintf@ap
  4924  00187E  0100               	movlb	0	; () banked
  4925  001880  6FD6               	movwf	__doprnt@ap& (0+255),b
  4926  001882  0E00               	movlw	high sprintf@ap
  4927  001884  0100               	movlb	0	; () banked
  4928  001886  6FD7               	movwf	(__doprnt@ap+1)& (0+255),b
  4929  001888  EC5E  F000         	call	__doprnt	;wreg free
  4930  00188C  C0EF  FFD9         	movff	sprintf@pb,fsr2l
  4931  001890  C0F0  FFDA         	movff	sprintf@pb+1,fsr2h
  4932  001894  0E00               	movlw	0
  4933  001896  6EDF               	movwf	indf2,c
  4934  001898  0012               	return	
  4935  00189A                     __end_of_sprintf:
  4936                           	opt stack 0
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           intcon	equ	0xFF2
  4944                           postinc0	equ	0xFEE
  4945                           wreg	equ	0xFE8
  4946                           indf1	equ	0xFE7
  4947                           fsr1h	equ	0xFE2
  4948                           fsr1l	equ	0xFE1
  4949                           indf2	equ	0xFDF
  4950                           postinc2	equ	0xFDE
  4951                           postdec2	equ	0xFDD
  4952                           plusw2	equ	0xFDB
  4953                           fsr2h	equ	0xFDA
  4954                           fsr2l	equ	0xFD9
  4955                           status	equ	0xFD8
  4956                           
  4957 ;; *************** function _printf *****************
  4958 ;; Defined at:
  4959 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\printf.c"
  4960 ;; Parameters:    Size  Location     Type
  4961 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4962 ;;		 -> STR_16(3), STR_14(3), STR_12(3), STR_10(3), 
  4963 ;;		 -> STR_8(3), STR_6(3), STR_4(3), STR_2(3), 
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  pb              4   27[BANK0 ] struct __prbuf
  4966 ;;  ap              2   25[BANK0 ] PTR void [1]
  4967 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;                  2   21[BANK0 ] int 
  4970 ;; Registers used:
  4971 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4977 ;;      Params:         0       4       0       0       0       0       0
  4978 ;;      Locals:         0       6       0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0
  4980 ;;      Totals:         0      10       0       0       0       0       0
  4981 ;;Total ram usage:       10 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    7
  4984 ;; This function calls:
  4985 ;;		__doprnt
  4986 ;; This function is called by:
  4987 ;;		_SetCharger
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           	psect	text23
  4992  001980                     __ptext23:
  4993                           	opt stack 0
  4994  001980                     _printf:
  4995                           	opt stack 21
  4996                           
  4997                           ;incstack = 0
  4998  001980  0E00               	movlw	0
  4999  001982  0100               	movlb	0	; () banked
  5000  001984  6FED               	movwf	printf@pb& (0+255),b
  5001  001986  0E00               	movlw	0
  5002  001988  0100               	movlb	0	; () banked
  5003  00198A  6FEE               	movwf	(printf@pb+1)& (0+255),b
  5004  00198C  0ED0               	movlw	low _putch
  5005  00198E  0100               	movlb	0	; () banked
  5006  001990  6FEF               	movwf	(printf@pb+2)& (0+255),b
  5007  001992  0E1E               	movlw	high _putch
  5008  001994  0100               	movlb	0	; () banked
  5009  001996  6FF0               	movwf	(printf@pb+3)& (0+255),b
  5010  001998  0EE9               	movlw	low (?_printf+2)
  5011  00199A  0100               	movlb	0	; () banked
  5012  00199C  6FEB               	movwf	printf@ap& (0+255),b
  5013  00199E  0E00               	movlw	high (?_printf+2)
  5014  0019A0  0100               	movlb	0	; () banked
  5015  0019A2  6FEC               	movwf	(printf@ap+1)& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;	Return value of _printf is never used
  5019  0019A4  0EED               	movlw	low printf@pb
  5020  0019A6  0100               	movlb	0	; () banked
  5021  0019A8  6FD2               	movwf	__doprnt@pb& (0+255),b
  5022  0019AA  0E00               	movlw	high printf@pb
  5023  0019AC  0100               	movlb	0	; () banked
  5024  0019AE  6FD3               	movwf	(__doprnt@pb+1)& (0+255),b
  5025  0019B0  C0E7  F0D4         	movff	printf@f,__doprnt@f
  5026  0019B4  C0E8  F0D5         	movff	printf@f+1,__doprnt@f+1
  5027  0019B8  0EEB               	movlw	low printf@ap
  5028  0019BA  0100               	movlb	0	; () banked
  5029  0019BC  6FD6               	movwf	__doprnt@ap& (0+255),b
  5030  0019BE  0E00               	movlw	high printf@ap
  5031  0019C0  0100               	movlb	0	; () banked
  5032  0019C2  6FD7               	movwf	(__doprnt@ap+1)& (0+255),b
  5033  0019C4  EC5E  F000         	call	__doprnt	;wreg free
  5034  0019C8  0012               	return	
  5035  0019CA                     __end_of_printf:
  5036                           	opt stack 0
  5037                           tblptru	equ	0xFF8
  5038                           tblptrh	equ	0xFF7
  5039                           tblptrl	equ	0xFF6
  5040                           tablat	equ	0xFF5
  5041                           prodh	equ	0xFF4
  5042                           prodl	equ	0xFF3
  5043                           intcon	equ	0xFF2
  5044                           postinc0	equ	0xFEE
  5045                           wreg	equ	0xFE8
  5046                           indf1	equ	0xFE7
  5047                           fsr1h	equ	0xFE2
  5048                           fsr1l	equ	0xFE1
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           plusw2	equ	0xFDB
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function __doprnt *****************
  5058 ;; Defined at:
  5059 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  pb              2    0[BANK0 ] PTR struct __prbuf
  5062 ;;		 -> sprintf@pb(4), printf@pb(4), 
  5063 ;;  f               2    2[BANK0 ] PTR const unsigned char 
  5064 ;;		 -> STR_16(3), STR_15(8), STR_14(3), STR_13(6), 
  5065 ;;		 -> STR_12(3), STR_11(6), STR_10(3), STR_9(3), 
  5066 ;;		 -> STR_8(3), STR_7(8), STR_6(3), STR_5(6), 
  5067 ;;		 -> STR_4(3), STR_3(6), STR_2(3), STR_1(3), 
  5068 ;;  ap              2    4[BANK0 ] PTR PTR void 
  5069 ;;		 -> sprintf@ap(2), printf@ap(2), 
  5070 ;; Auto vars:     Size  Location     Type
  5071 ;;  tmpval          4    0        struct .
  5072 ;;  width           2   18[BANK0 ] int 
  5073 ;;  cp              2   16[BANK0 ] PTR const unsigned char 
  5074 ;;		 -> ?_sprintf(2), ?_printf(2), STR_19(7), ChargerData(40), 
  5075 ;;		 -> SetCharger@str(10), NULL(0), 
  5076 ;;  len             2   13[BANK0 ] unsigned int 
  5077 ;;  val             2   11[BANK0 ] unsigned int 
  5078 ;;  c               1   20[BANK0 ] char 
  5079 ;;  flag            1   15[BANK0 ] unsigned char 
  5080 ;;  prec            1   10[BANK0 ] char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  2    0[BANK0 ] int 
  5083 ;; Registers used:
  5084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5090 ;;      Params:         0       6       0       0       0       0       0
  5091 ;;      Locals:         0      11       0       0       0       0       0
  5092 ;;      Temps:          0       4       0       0       0       0       0
  5093 ;;      Totals:         0      21       0       0       0       0       0
  5094 ;;Total ram usage:       21 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    6
  5097 ;; This function calls:
  5098 ;;		Absolute function
  5099 ;;		___lwdiv
  5100 ;;		___lwmod
  5101 ;;		___wmul
  5102 ;;		_isdigit
  5103 ;;		_putch
  5104 ;; This function is called by:
  5105 ;;		_printf
  5106 ;;		_sprintf
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text24
  5111  0000BC                     __ptext24:
  5112                           	opt stack 0
  5113  0000BC                     __doprnt:
  5114                           	opt stack 21
  5115                           
  5116                           ;doprnt.c: 499: signed char c;
  5117                           ;doprnt.c: 501: int width;
  5118                           ;doprnt.c: 506: signed char prec;
  5119                           ;doprnt.c: 508: unsigned char flag;
  5120                           ;doprnt.c: 523: union {
  5121                           ;doprnt.c: 524: unsigned long vd;
  5122                           ;doprnt.c: 525: double integ;
  5123                           ;doprnt.c: 526: } tmpval;
  5124                           ;doprnt.c: 528: unsigned int val;
  5125                           ;doprnt.c: 529: unsigned len;
  5126                           ;doprnt.c: 530: const char * cp;
  5127                           ;doprnt.c: 536: while(c = *f++) {
  5128                           
  5129                           ;incstack = 0
  5130  0000BC  D387               	goto	l4235
  5131  0000BE                     l4065:
  5132                           
  5133                           ;doprnt.c: 538: if(c != '%')
  5134  0000BE  0E25               	movlw	37
  5135  0000C0  0100               	movlb	0	; () banked
  5136  0000C2  19E6               	xorwf	__doprnt@c& (0+255),w,b
  5137  0000C4  B4D8               	btfsc	status,2,c
  5138  0000C6  D036               	goto	l4075
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;doprnt.c: 540: {
  5142                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5143  0000C8  0100               	movlb	0	; () banked
  5144  0000CA  EE20 F002          	lfsr	2,2
  5145  0000CE  51D2               	movf	__doprnt@pb& (0+255),w,b
  5146  0000D0  26D9               	addwf	fsr2l,f,c
  5147  0000D2  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5148  0000D4  22DA               	addwfc	fsr2h,f,c
  5149  0000D6  50DE               	movf	postinc2,w,c
  5150  0000D8  10DE               	iorwf	postinc2,w,c
  5151  0000DA  B4D8               	btfsc	status,2,c
  5152  0000DC  D015               	goto	l4071
  5153                           
  5154                           ; BSR set to: 0
  5155  0000DE  0100               	movlb	0	; () banked
  5156  0000E0  EE20 F002          	lfsr	2,2
  5157  0000E4  51D2               	movf	__doprnt@pb& (0+255),w,b
  5158  0000E6  26D9               	addwf	fsr2l,f,c
  5159  0000E8  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5160  0000EA  22DA               	addwfc	fsr2h,f,c
  5161  0000EC  D801               	call	u3248
  5162  0000EE  D36E               	goto	l4235
  5163  0000F0                     u3248:
  5164  0000F0  0005               	push	
  5165  0000F2  6EFA               	movwf	pclath,c
  5166  0000F4  50DE               	movf	postinc2,w,c
  5167  0000F6  6EFD               	movwf	tosl,c
  5168  0000F8  50DE               	movf	postinc2,w,c
  5169  0000FA  6EFE               	movwf	tosh,c
  5170  0000FC  50F8               	movf	tblptru,w,c
  5171  0000FE  6EFF               	movwf	tosu,c
  5172  000100  50FA               	movf	pclath,w,c
  5173  000102  0100               	movlb	0	; () banked
  5174  000104  51E6               	movf	__doprnt@c& (0+255),w,b
  5175  000106  0012               	return		;indir
  5176  000108                     l4071:
  5177  000108  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5178  00010C  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5179  000110  CFDE F0D8          	movff	postinc2,??__doprnt
  5180  000114  CFDD F0D9          	movff	postdec2,??__doprnt+1
  5181  000118  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5182  00011C  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5183  000120  C0E6  FFDF         	movff	__doprnt@c,indf2
  5184  000124  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5185  000128  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5186  00012C  2ADE               	incf	postinc2,f,c
  5187  00012E  0E00               	movlw	0
  5188  000130  22DD               	addwfc	postdec2,f,c
  5189                           
  5190                           ;doprnt.c: 542: continue;
  5191  000132  D34C               	goto	l4235
  5192  000134                     l4075:
  5193                           
  5194                           ;doprnt.c: 543: }
  5195                           ;doprnt.c: 546: width = 0;
  5196  000134  0E00               	movlw	0
  5197  000136  0100               	movlb	0	; () banked
  5198  000138  6FE5               	movwf	(__doprnt@width+1)& (0+255),b
  5199  00013A  0E00               	movlw	0
  5200  00013C  6FE4               	movwf	__doprnt@width& (0+255),b
  5201                           
  5202                           ;doprnt.c: 548: flag = 0;
  5203  00013E  0E00               	movlw	0
  5204  000140  0100               	movlb	0	; () banked
  5205  000142  6FE1               	movwf	__doprnt@flag& (0+255),b
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;doprnt.c: 551: switch(*f) {
  5209                           
  5210                           ;doprnt.c: 550: for(;;) {
  5211  000144  D005               	goto	l4081
  5212  000146                     l4077:
  5213                           
  5214                           ;doprnt.c: 580: flag |= 0x04;
  5215  000146  0100               	movlb	0	; () banked
  5216  000148  85E1               	bsf	__doprnt@flag& (0+255),2,b
  5217                           
  5218                           ;doprnt.c: 581: f++;
  5219  00014A  0100               	movlb	0	; () banked
  5220  00014C  4BD4               	infsnz	__doprnt@f& (0+255),f,b
  5221  00014E  2BD5               	incf	(__doprnt@f+1)& (0+255),f,b
  5222  000150                     l4081:
  5223  000150  C0D4  FFF6         	movff	__doprnt@f,tblptrl
  5224  000154  C0D5  FFF7         	movff	__doprnt@f+1,tblptrh
  5225  000158                     	if	0	;tblptru may be non-zero
  5226  000158                     	endif
  5227  000158                     	if	0	;tblptru may be non-zero
  5228  000158                     	endif
  5229  000158  0008               	tblrd		*
  5230  00015A  50F5               	movf	tablat,w,c
  5231                           
  5232                           ; Switch size 1, requested type "space"
  5233                           ; Number of cases is 1, Range of values is 48 to 48
  5234                           ; switch strategies available:
  5235                           ; Name         Instructions Cycles
  5236                           ; simple_byte            4     3 (average)
  5237                           ;	Chosen strategy is simple_byte
  5238  00015C  0A30               	xorlw	48	; case 48
  5239  00015E  B4D8               	btfsc	status,2,c
  5240  000160  D7F2               	goto	l4077
  5241                           
  5242                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5243                           
  5244                           ;doprnt.c: 586: }
  5245                           
  5246                           ;doprnt.c: 585: break;
  5247  000162  C0D4  FFF6         	movff	__doprnt@f,tblptrl
  5248  000166  C0D5  FFF7         	movff	__doprnt@f+1,tblptrh
  5249  00016A                     	if	0	;tblptru may be non-zero
  5250  00016A                     	endif
  5251  00016A                     	if	0	;tblptru may be non-zero
  5252  00016A                     	endif
  5253  00016A  0008               	tblrd		*
  5254  00016C  50F5               	movf	tablat,w,c
  5255  00016E  ECE5  F00E         	call	_isdigit
  5256  000172  A0D8               	btfss	status,0,c
  5257  000174  D146               	goto	l4139
  5258                           
  5259                           ;doprnt.c: 598: width = 0;
  5260  000176  0E00               	movlw	0
  5261  000178  0100               	movlb	0	; () banked
  5262  00017A  6FE5               	movwf	(__doprnt@width+1)& (0+255),b
  5263  00017C  0E00               	movlw	0
  5264  00017E  6FE4               	movwf	__doprnt@width& (0+255),b
  5265  000180                     l4087:
  5266                           
  5267                           ;doprnt.c: 600: width *= 10;
  5268  000180  C0E4  F01B         	movff	__doprnt@width,___wmul@multiplier
  5269  000184  C0E5  F01C         	movff	__doprnt@width+1,___wmul@multiplier+1
  5270  000188  0E00               	movlw	0
  5271  00018A  6E1E               	movwf	___wmul@multiplicand+1,c
  5272  00018C  0E0A               	movlw	10
  5273  00018E  6E1D               	movwf	___wmul@multiplicand,c
  5274  000190  ECB4  F00E         	call	___wmul	;wreg free
  5275  000194  C01B  F0E4         	movff	?___wmul,__doprnt@width
  5276  000198  C01C  F0E5         	movff	?___wmul+1,__doprnt@width+1
  5277                           
  5278                           ;doprnt.c: 601: width += *f++ - '0';
  5279  00019C  0ED0               	movlw	208
  5280  00019E  0100               	movlb	0	; () banked
  5281  0001A0  6FD8               	movwf	??__doprnt& (0+255),b
  5282  0001A2  0EFF               	movlw	255
  5283  0001A4  0100               	movlb	0	; () banked
  5284  0001A6  6FD9               	movwf	(??__doprnt+1)& (0+255),b
  5285  0001A8  C0D4  FFF6         	movff	__doprnt@f,tblptrl
  5286  0001AC  C0D5  FFF7         	movff	__doprnt@f+1,tblptrh
  5287  0001B0                     	if	0	;tblptru may be non-zero
  5288  0001B0                     	endif
  5289  0001B0                     	if	0	;tblptru may be non-zero
  5290  0001B0                     	endif
  5291  0001B0  0008               	tblrd		*
  5292  0001B2  50F5               	movf	tablat,w,c
  5293  0001B4  0100               	movlb	0	; () banked
  5294  0001B6  6FDA               	movwf	(??__doprnt+2)& (0+255),b
  5295  0001B8  6BDB               	clrf	(??__doprnt+3)& (0+255),b
  5296  0001BA  0100               	movlb	0	; () banked
  5297  0001BC  51D8               	movf	??__doprnt& (0+255),w,b
  5298  0001BE  0100               	movlb	0	; () banked
  5299  0001C0  27DA               	addwf	(??__doprnt+2)& (0+255),f,b
  5300  0001C2  0100               	movlb	0	; () banked
  5301  0001C4  51D9               	movf	(??__doprnt+1)& (0+255),w,b
  5302  0001C6  0100               	movlb	0	; () banked
  5303  0001C8  23DB               	addwfc	(??__doprnt+3)& (0+255),f,b
  5304  0001CA  0100               	movlb	0	; () banked
  5305  0001CC  51DA               	movf	(??__doprnt+2)& (0+255),w,b
  5306  0001CE  0100               	movlb	0	; () banked
  5307  0001D0  27E4               	addwf	__doprnt@width& (0+255),f,b
  5308  0001D2  0100               	movlb	0	; () banked
  5309  0001D4  51DB               	movf	(??__doprnt+3)& (0+255),w,b
  5310  0001D6  0100               	movlb	0	; () banked
  5311  0001D8  23E5               	addwfc	(__doprnt@width+1)& (0+255),f,b
  5312                           
  5313                           ; BSR set to: 0
  5314  0001DA  0100               	movlb	0	; () banked
  5315  0001DC  4BD4               	infsnz	__doprnt@f& (0+255),f,b
  5316  0001DE  2BD5               	incf	(__doprnt@f+1)& (0+255),f,b
  5317                           
  5318                           ; BSR set to: 0
  5319                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5320  0001E0  C0D4  FFF6         	movff	__doprnt@f,tblptrl
  5321  0001E4  C0D5  FFF7         	movff	__doprnt@f+1,tblptrh
  5322  0001E8                     	if	0	;tblptru may be non-zero
  5323  0001E8                     	endif
  5324  0001E8                     	if	0	;tblptru may be non-zero
  5325  0001E8                     	endif
  5326  0001E8  0008               	tblrd		*
  5327  0001EA  50F5               	movf	tablat,w,c
  5328  0001EC  ECE5  F00E         	call	_isdigit
  5329  0001F0  A0D8               	btfss	status,0,c
  5330  0001F2  D107               	goto	l4139
  5331  0001F4  D7C5               	goto	l4087
  5332  0001F6                     l4095:
  5333                           
  5334                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5335  0001F6  C0D6  FFD9         	movff	__doprnt@ap,fsr2l
  5336  0001FA  C0D7  FFDA         	movff	__doprnt@ap+1,fsr2h
  5337  0001FE  CFDF F0D8          	movff	indf2,??__doprnt
  5338  000202  0E02               	movlw	2
  5339  000204  26DE               	addwf	postinc2,f,c
  5340  000206  CFDF F0D9          	movff	indf2,??__doprnt+1
  5341  00020A  0E00               	movlw	0
  5342  00020C  22DD               	addwfc	postdec2,f,c
  5343  00020E  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5344  000212  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5345  000216  CFDE F0E2          	movff	postinc2,__doprnt@cp
  5346  00021A  CFDD F0E3          	movff	postdec2,__doprnt@cp+1
  5347                           
  5348                           ;doprnt.c: 740: if(!cp)
  5349  00021E  0100               	movlb	0	; () banked
  5350  000220  51E2               	movf	__doprnt@cp& (0+255),w,b
  5351  000222  0100               	movlb	0	; () banked
  5352  000224  11E3               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  5353  000226  A4D8               	btfss	status,2,c
  5354  000228  D006               	goto	l4101
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;doprnt.c: 741: cp = "(null)";
  5358  00022A  0EE5               	movlw	low STR_19
  5359  00022C  0100               	movlb	0	; () banked
  5360  00022E  6FE2               	movwf	__doprnt@cp& (0+255),b
  5361  000230  0E7F               	movlw	high STR_19
  5362  000232  0100               	movlb	0	; () banked
  5363  000234  6FE3               	movwf	(__doprnt@cp+1)& (0+255),b
  5364  000236                     l4101:
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;doprnt.c: 745: len = 0;
  5368  000236  0E00               	movlw	0
  5369  000238  0100               	movlb	0	; () banked
  5370  00023A  6FE0               	movwf	(__doprnt@len+1)& (0+255),b
  5371  00023C  0E00               	movlw	0
  5372  00023E  6FDF               	movwf	__doprnt@len& (0+255),b
  5373                           
  5374                           ;doprnt.c: 746: while(cp[len])
  5375  000240  D003               	goto	l4105
  5376  000242                     l4103:
  5377                           
  5378                           ;doprnt.c: 747: len++;
  5379  000242  0100               	movlb	0	; () banked
  5380  000244  4BDF               	infsnz	__doprnt@len& (0+255),f,b
  5381  000246  2BE0               	incf	(__doprnt@len+1)& (0+255),f,b
  5382  000248                     l4105:
  5383                           
  5384                           ; BSR set to: 0
  5385  000248  0100               	movlb	0	; () banked
  5386  00024A  51DF               	movf	__doprnt@len& (0+255),w,b
  5387  00024C  0100               	movlb	0	; () banked
  5388  00024E  25E2               	addwf	__doprnt@cp& (0+255),w,b
  5389  000250  0100               	movlb	0	; () banked
  5390  000252  6FD8               	movwf	??__doprnt& (0+255),b
  5391  000254  0100               	movlb	0	; () banked
  5392  000256  51E0               	movf	(__doprnt@len+1)& (0+255),w,b
  5393  000258  0100               	movlb	0	; () banked
  5394  00025A  21E3               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  5395  00025C  0100               	movlb	0	; () banked
  5396  00025E  6FD9               	movwf	(??__doprnt+1)& (0+255),b
  5397  000260  C0D8  FFF6         	movff	??__doprnt,tblptrl
  5398  000264  C0D9  FFF7         	movff	??__doprnt+1,tblptrh
  5399  000268  6AF8               	clrf	tblptru,c
  5400  00026A  0E05               	movlw	(high __ramtop+-1)
  5401  00026C  64F7               	cpfsgt	tblptrh,c
  5402  00026E  D003               	bra	u3287
  5403  000270  0008               	tblrd		*
  5404  000272  50F5               	movf	tablat,w,c
  5405  000274  D005               	bra	u3280
  5406  000276                     u3287:
  5407  000276  CFF6 FFE9          	movff	tblptrl,fsr0l
  5408  00027A  CFF7 FFEA          	movff	tblptrh,fsr0h
  5409  00027E  50EF               	movf	indf0,w,c
  5410  000280                     u3280:
  5411  000280  0900               	iorlw	0
  5412  000282  A4D8               	btfss	status,2,c
  5413  000284  D7DE               	goto	l4103
  5414                           
  5415                           ;doprnt.c: 757: if(width > len)
  5416  000286  0100               	movlb	0	; () banked
  5417  000288  51E4               	movf	__doprnt@width& (0+255),w,b
  5418  00028A  0100               	movlb	0	; () banked
  5419  00028C  5DDF               	subwf	__doprnt@len& (0+255),w,b
  5420  00028E  0100               	movlb	0	; () banked
  5421  000290  51E5               	movf	(__doprnt@width+1)& (0+255),w,b
  5422  000292  0100               	movlb	0	; () banked
  5423  000294  59E0               	subwfb	(__doprnt@len+1)& (0+255),w,b
  5424  000296  B0D8               	btfsc	status,0,c
  5425  000298  D009               	goto	l4111
  5426                           
  5427                           ; BSR set to: 0
  5428                           ;doprnt.c: 758: width -= len;
  5429  00029A  0100               	movlb	0	; () banked
  5430  00029C  51DF               	movf	__doprnt@len& (0+255),w,b
  5431  00029E  0100               	movlb	0	; () banked
  5432  0002A0  5FE4               	subwf	__doprnt@width& (0+255),f,b
  5433  0002A2  0100               	movlb	0	; () banked
  5434  0002A4  51E0               	movf	(__doprnt@len+1)& (0+255),w,b
  5435  0002A6  0100               	movlb	0	; () banked
  5436  0002A8  5BE5               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5437  0002AA  D03A               	goto	l4121
  5438  0002AC                     l4111:
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;doprnt.c: 759: else
  5442                           ;doprnt.c: 760: width = 0;
  5443  0002AC  0E00               	movlw	0
  5444  0002AE  0100               	movlb	0	; () banked
  5445  0002B0  6FE5               	movwf	(__doprnt@width+1)& (0+255),b
  5446  0002B2  0E00               	movlw	0
  5447  0002B4  6FE4               	movwf	__doprnt@width& (0+255),b
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;doprnt.c: 764: while(width--)
  5451  0002B6  D034               	goto	l4121
  5452  0002B8                     l4113:
  5453                           
  5454                           ; BSR set to: 0
  5455                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5456  0002B8  0100               	movlb	0	; () banked
  5457  0002BA  EE20 F002          	lfsr	2,2
  5458  0002BE  51D2               	movf	__doprnt@pb& (0+255),w,b
  5459  0002C0  26D9               	addwf	fsr2l,f,c
  5460  0002C2  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5461  0002C4  22DA               	addwfc	fsr2h,f,c
  5462  0002C6  50DE               	movf	postinc2,w,c
  5463  0002C8  10DE               	iorwf	postinc2,w,c
  5464  0002CA  B4D8               	btfsc	status,2,c
  5465  0002CC  D014               	goto	l4117
  5466                           
  5467                           ; BSR set to: 0
  5468  0002CE  0100               	movlb	0	; () banked
  5469  0002D0  EE20 F002          	lfsr	2,2
  5470  0002D4  51D2               	movf	__doprnt@pb& (0+255),w,b
  5471  0002D6  26D9               	addwf	fsr2l,f,c
  5472  0002D8  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5473  0002DA  22DA               	addwfc	fsr2h,f,c
  5474  0002DC  D801               	call	u3328
  5475  0002DE  D020               	goto	l4121
  5476  0002E0                     u3328:
  5477  0002E0  0005               	push	
  5478  0002E2  6EFA               	movwf	pclath,c
  5479  0002E4  50DE               	movf	postinc2,w,c
  5480  0002E6  6EFD               	movwf	tosl,c
  5481  0002E8  50DE               	movf	postinc2,w,c
  5482  0002EA  6EFE               	movwf	tosh,c
  5483  0002EC  50F8               	movf	tblptru,w,c
  5484  0002EE  6EFF               	movwf	tosu,c
  5485  0002F0  50FA               	movf	pclath,w,c
  5486  0002F2  0E20               	movlw	32
  5487  0002F4  0012               	return		;indir
  5488  0002F6                     l4117:
  5489  0002F6  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5490  0002FA  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5491  0002FE  CFDE F0D8          	movff	postinc2,??__doprnt
  5492  000302  CFDD F0D9          	movff	postdec2,??__doprnt+1
  5493  000306  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5494  00030A  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5495  00030E  0E20               	movlw	32
  5496  000310  6EDF               	movwf	indf2,c
  5497  000312  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5498  000316  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5499  00031A  2ADE               	incf	postinc2,f,c
  5500  00031C  0E00               	movlw	0
  5501  00031E  22DD               	addwfc	postdec2,f,c
  5502  000320                     l4121:
  5503  000320  0100               	movlb	0	; () banked
  5504  000322  07E4               	decf	__doprnt@width& (0+255),f,b
  5505  000324  A0D8               	btfss	status,0,c
  5506  000326  07E5               	decf	(__doprnt@width+1)& (0+255),f,b
  5507  000328  0100               	movlb	0	; () banked
  5508  00032A  29E4               	incf	__doprnt@width& (0+255),w,b
  5509  00032C  E1C5               	bnz	l4113
  5510  00032E  0100               	movlb	0	; () banked
  5511  000330  29E5               	incf	(__doprnt@width+1)& (0+255),w,b
  5512  000332  B4D8               	btfsc	status,2,c
  5513  000334  D05A               	goto	l4135
  5514  000336  D7C0               	goto	l4113
  5515  000338                     l4123:
  5516                           
  5517                           ; BSR set to: 0
  5518                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  5519  000338  0100               	movlb	0	; () banked
  5520  00033A  EE20 F002          	lfsr	2,2
  5521  00033E  51D2               	movf	__doprnt@pb& (0+255),w,b
  5522  000340  26D9               	addwf	fsr2l,f,c
  5523  000342  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5524  000344  22DA               	addwfc	fsr2h,f,c
  5525  000346  50DE               	movf	postinc2,w,c
  5526  000348  10DE               	iorwf	postinc2,w,c
  5527  00034A  B4D8               	btfsc	status,2,c
  5528  00034C  D027               	goto	l4129
  5529                           
  5530                           ; BSR set to: 0
  5531  00034E  0100               	movlb	0	; () banked
  5532  000350  EE20 F002          	lfsr	2,2
  5533  000354  51D2               	movf	__doprnt@pb& (0+255),w,b
  5534  000356  26D9               	addwf	fsr2l,f,c
  5535  000358  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5536  00035A  22DA               	addwfc	fsr2h,f,c
  5537  00035C  D801               	call	u3358
  5538  00035E  D01A               	goto	l4127
  5539  000360                     u3358:
  5540  000360  0005               	push	
  5541  000362  6EFA               	movwf	pclath,c
  5542  000364  50DE               	movf	postinc2,w,c
  5543  000366  6EFD               	movwf	tosl,c
  5544  000368  50DE               	movf	postinc2,w,c
  5545  00036A  6EFE               	movwf	tosh,c
  5546  00036C  50F8               	movf	tblptru,w,c
  5547  00036E  6EFF               	movwf	tosu,c
  5548  000370  50FA               	movf	pclath,w,c
  5549  000372  C0E2  FFF6         	movff	__doprnt@cp,tblptrl
  5550  000376  C0E3  FFF7         	movff	__doprnt@cp+1,tblptrh
  5551  00037A  6AF8               	clrf	tblptru,c
  5552  00037C  0E05               	movlw	(high __ramtop+-1)
  5553  00037E  64F7               	cpfsgt	tblptrh,c
  5554  000380  D003               	bra	u3367
  5555  000382  0008               	tblrd		*
  5556  000384  50F5               	movf	tablat,w,c
  5557  000386  D005               	bra	u3360
  5558  000388                     u3367:
  5559  000388  CFF6 FFE9          	movff	tblptrl,fsr0l
  5560  00038C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5561  000390  50EF               	movf	indf0,w,c
  5562  000392                     u3360:
  5563  000392  0012               	return		;indir
  5564  000394                     l4127:
  5565  000394  0100               	movlb	0	; () banked
  5566  000396  4BE2               	infsnz	__doprnt@cp& (0+255),f,b
  5567  000398  2BE3               	incf	(__doprnt@cp+1)& (0+255),f,b
  5568  00039A  D027               	goto	l4135
  5569  00039C                     l4129:
  5570                           
  5571                           ; BSR set to: 0
  5572  00039C  C0E2  FFF6         	movff	__doprnt@cp,tblptrl
  5573  0003A0  C0E3  FFF7         	movff	__doprnt@cp+1,tblptrh
  5574  0003A4  6AF8               	clrf	tblptru,c
  5575  0003A6  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5576  0003AA  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5577  0003AE  CFDE F0D8          	movff	postinc2,??__doprnt
  5578  0003B2  CFDD F0D9          	movff	postdec2,??__doprnt+1
  5579  0003B6  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5580  0003BA  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5581  0003BE  0E05               	movlw	(high __ramtop+-1)
  5582  0003C0  64F7               	cpfsgt	tblptrh,c
  5583  0003C2  D003               	bra	u3377
  5584  0003C4  0008               	tblrd		*
  5585  0003C6  50F5               	movf	tablat,w,c
  5586  0003C8  D005               	bra	u3370
  5587  0003CA                     u3377:
  5588  0003CA  CFF6 FFE9          	movff	tblptrl,fsr0l
  5589  0003CE  CFF7 FFEA          	movff	tblptrh,fsr0h
  5590  0003D2  50EF               	movf	indf0,w,c
  5591  0003D4                     u3370:
  5592  0003D4  6EDF               	movwf	indf2,c
  5593  0003D6  0100               	movlb	0	; () banked
  5594  0003D8  4BE2               	infsnz	__doprnt@cp& (0+255),f,b
  5595  0003DA  2BE3               	incf	(__doprnt@cp+1)& (0+255),f,b
  5596                           
  5597                           ; BSR set to: 0
  5598  0003DC  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5599  0003E0  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5600  0003E4  2ADE               	incf	postinc2,f,c
  5601  0003E6  0E00               	movlw	0
  5602  0003E8  22DD               	addwfc	postdec2,f,c
  5603  0003EA                     l4135:
  5604                           
  5605                           ; BSR set to: 0
  5606  0003EA  0100               	movlb	0	; () banked
  5607  0003EC  07DF               	decf	__doprnt@len& (0+255),f,b
  5608  0003EE  A0D8               	btfss	status,0,c
  5609  0003F0  07E0               	decf	(__doprnt@len+1)& (0+255),f,b
  5610  0003F2  0100               	movlb	0	; () banked
  5611  0003F4  29DF               	incf	__doprnt@len& (0+255),w,b
  5612  0003F6  E1A0               	bnz	l4123
  5613  0003F8  0100               	movlb	0	; () banked
  5614  0003FA  29E0               	incf	(__doprnt@len+1)& (0+255),w,b
  5615  0003FC  B4D8               	btfsc	status,2,c
  5616  0003FE  D1E6               	goto	l4235
  5617  000400  D79B               	goto	l4123
  5618  000402                     l4139:
  5619  000402  C0D4  FFF6         	movff	__doprnt@f,tblptrl
  5620  000406  C0D5  FFF7         	movff	__doprnt@f+1,tblptrh
  5621  00040A  0100               	movlb	0	; () banked
  5622  00040C  4BD4               	infsnz	__doprnt@f& (0+255),f,b
  5623  00040E  2BD5               	incf	(__doprnt@f+1)& (0+255),f,b
  5624  000410                     	if	0	;tblptru may be non-zero
  5625  000410                     	endif
  5626  000410                     	if	0	;tblptru may be non-zero
  5627  000410                     	endif
  5628  000410  0008               	tblrd		*
  5629  000412  CFF5 F0E6          	movff	tablat,__doprnt@c
  5630  000416  0100               	movlb	0	; () banked
  5631  000418  51E6               	movf	__doprnt@c& (0+255),w,b
  5632                           
  5633                           ; Switch size 1, requested type "space"
  5634                           ; Number of cases is 4, Range of values is 0 to 115
  5635                           ; switch strategies available:
  5636                           ; Name         Instructions Cycles
  5637                           ; simple_byte           13     7 (average)
  5638                           ;	Chosen strategy is simple_byte
  5639  00041A  0A00               	xorlw	0	; case 0
  5640  00041C  B4D8               	btfsc	status,2,c
  5641  00041E  D1E4               	goto	l4237
  5642  000420  0A64               	xorlw	100	; case 100
  5643  000422  B4D8               	btfsc	status,2,c
  5644  000424  D007               	goto	l4141
  5645  000426  0A0D               	xorlw	13	; case 105
  5646  000428  B4D8               	btfsc	status,2,c
  5647  00042A  D004               	goto	l4141
  5648  00042C  0A1A               	xorlw	26	; case 115
  5649  00042E  B4D8               	btfsc	status,2,c
  5650  000430  D6E2               	goto	l4095
  5651  000432  D1CC               	goto	l4235
  5652  000434                     l4141:
  5653                           
  5654                           ;doprnt.c: 1253: {
  5655                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5656  000434  C0D6  FFD9         	movff	__doprnt@ap,fsr2l
  5657  000438  C0D7  FFDA         	movff	__doprnt@ap+1,fsr2h
  5658  00043C  CFDF F0D8          	movff	indf2,??__doprnt
  5659  000440  0E02               	movlw	2
  5660  000442  26DE               	addwf	postinc2,f,c
  5661  000444  CFDF F0D9          	movff	indf2,??__doprnt+1
  5662  000448  0E00               	movlw	0
  5663  00044A  22DD               	addwfc	postdec2,f,c
  5664  00044C  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5665  000450  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5666  000454  CFDE F0DD          	movff	postinc2,__doprnt@val
  5667  000458  CFDD F0DE          	movff	postdec2,__doprnt@val+1
  5668                           
  5669                           ;doprnt.c: 1261: if((int)val < 0) {
  5670  00045C  0100               	movlb	0	; () banked
  5671  00045E  AFDE               	btfss	(__doprnt@val+1)& (0+255),7,b
  5672  000460  D008               	goto	l4149
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;doprnt.c: 1262: flag |= 0x03;
  5676  000462  0E03               	movlw	3
  5677  000464  0100               	movlb	0	; () banked
  5678  000466  13E1               	iorwf	__doprnt@flag& (0+255),f,b
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;doprnt.c: 1263: val = -val;
  5682  000468  0100               	movlb	0	; () banked
  5683  00046A  6DDD               	negf	__doprnt@val& (0+255),b
  5684  00046C  1FDE               	comf	(__doprnt@val+1)& (0+255),f,b
  5685  00046E  B0D8               	btfsc	status,0,c
  5686  000470  2BDE               	incf	(__doprnt@val+1)& (0+255),f,b
  5687  000472                     l4149:
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;doprnt.c: 1264: }
  5691                           ;doprnt.c: 1266: }
  5692                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5693  000472  0E01               	movlw	1
  5694  000474  0100               	movlb	0	; () banked
  5695  000476  6FE6               	movwf	__doprnt@c& (0+255),b
  5696  000478                     l4151:
  5697                           
  5698                           ; BSR set to: 0
  5699  000478  0E05               	movlw	5
  5700  00047A  0100               	movlb	0	; () banked
  5701  00047C  19E6               	xorwf	__doprnt@c& (0+255),w,b
  5702  00047E  B4D8               	btfsc	status,2,c
  5703  000480  D016               	goto	l4163
  5704                           
  5705                           ; BSR set to: 0
  5706                           ;doprnt.c: 1306: if(val < dpowers[c])
  5707                           
  5708                           ; BSR set to: 0
  5709                           
  5710                           ; BSR set to: 0
  5711  000482  0100               	movlb	0	; () banked
  5712  000484  51E6               	movf	__doprnt@c& (0+255),w,b
  5713  000486  0D02               	mullw	2
  5714  000488  0EC7               	movlw	low _dpowers
  5715  00048A  24F3               	addwf	prodl,w,c
  5716  00048C  6EF6               	movwf	tblptrl,c
  5717  00048E  0E7F               	movlw	high _dpowers
  5718  000490  20F4               	addwfc	prodh,w,c
  5719  000492  6EF7               	movwf	tblptrh,c
  5720  000494                     	if	0	;There are less than 3 active tblptr bytes
  5721  000494                     	endif
  5722  000494  0009               	tblrd		*+
  5723  000496  50F5               	movf	tablat,w,c
  5724  000498  0100               	movlb	0	; () banked
  5725  00049A  5DDD               	subwf	__doprnt@val& (0+255),w,b
  5726  00049C  0009               	tblrd		*+
  5727  00049E  50F5               	movf	tablat,w,c
  5728  0004A0  0100               	movlb	0	; () banked
  5729  0004A2  59DE               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5730  0004A4  A0D8               	btfss	status,0,c
  5731  0004A6  D003               	goto	l4163
  5732                           
  5733                           ; BSR set to: 0
  5734                           
  5735                           ; BSR set to: 0
  5736                           
  5737                           ; BSR set to: 0
  5738                           ;doprnt.c: 1307: break;
  5739  0004A8  0100               	movlb	0	; () banked
  5740  0004AA  2BE6               	incf	__doprnt@c& (0+255),f,b
  5741  0004AC  D7E5               	goto	l4151
  5742  0004AE                     l4163:
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5746  0004AE  0100               	movlb	0	; () banked
  5747  0004B0  51E4               	movf	__doprnt@width& (0+255),w,b
  5748  0004B2  0100               	movlb	0	; () banked
  5749  0004B4  11E5               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5750  0004B6  B4D8               	btfsc	status,2,c
  5751  0004B8  D00B               	goto	l4169
  5752                           
  5753                           ; BSR set to: 0
  5754  0004BA  C0E1  F0D8         	movff	__doprnt@flag,??__doprnt
  5755  0004BE  0E03               	movlw	3
  5756  0004C0  0100               	movlb	0	; () banked
  5757  0004C2  17D8               	andwf	??__doprnt& (0+255),f,b
  5758  0004C4  B4D8               	btfsc	status,2,c
  5759  0004C6  D004               	goto	l4169
  5760                           
  5761                           ; BSR set to: 0
  5762                           ;doprnt.c: 1346: width--;
  5763  0004C8  0100               	movlb	0	; () banked
  5764  0004CA  07E4               	decf	__doprnt@width& (0+255),f,b
  5765  0004CC  A0D8               	btfss	status,0,c
  5766  0004CE  07E5               	decf	(__doprnt@width+1)& (0+255),f,b
  5767  0004D0                     l4169:
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;doprnt.c: 1381: if(width > c)
  5771  0004D0  0E80               	movlw	128
  5772  0004D2  0100               	movlb	0	; () banked
  5773  0004D4  BFE6               	btfsc	__doprnt@c& (0+255),7,b
  5774  0004D6  0E7F               	movlw	127
  5775  0004D8  0100               	movlb	0	; () banked
  5776  0004DA  6FD8               	movwf	??__doprnt& (0+255),b
  5777  0004DC  0100               	movlb	0	; () banked
  5778  0004DE  51E4               	movf	__doprnt@width& (0+255),w,b
  5779  0004E0  0100               	movlb	0	; () banked
  5780  0004E2  5DE6               	subwf	__doprnt@c& (0+255),w,b
  5781  0004E4  0100               	movlb	0	; () banked
  5782  0004E6  51E5               	movf	(__doprnt@width+1)& (0+255),w,b
  5783  0004E8  0A80               	xorlw	128
  5784  0004EA  0100               	movlb	0	; () banked
  5785  0004EC  59D8               	subwfb	??__doprnt& (0+255),w,b
  5786  0004EE  B0D8               	btfsc	status,0,c
  5787  0004F0  D00B               	goto	l4173
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;doprnt.c: 1382: width -= c;
  5791  0004F2  0100               	movlb	0	; () banked
  5792  0004F4  51E6               	movf	__doprnt@c& (0+255),w,b
  5793  0004F6  0100               	movlb	0	; () banked
  5794  0004F8  5FE4               	subwf	__doprnt@width& (0+255),f,b
  5795  0004FA  0E00               	movlw	0
  5796  0004FC  0100               	movlb	0	; () banked
  5797  0004FE  BFE6               	btfsc	__doprnt@c& (0+255),7,b
  5798  000500  0EFF               	movlw	255
  5799  000502  0100               	movlb	0	; () banked
  5800  000504  5BE5               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5801  000506  D005               	goto	l4175
  5802  000508                     l4173:
  5803                           
  5804                           ; BSR set to: 0
  5805                           ;doprnt.c: 1383: else
  5806                           ;doprnt.c: 1384: width = 0;
  5807  000508  0E00               	movlw	0
  5808  00050A  0100               	movlb	0	; () banked
  5809  00050C  6FE5               	movwf	(__doprnt@width+1)& (0+255),b
  5810  00050E  0E00               	movlw	0
  5811  000510  6FE4               	movwf	__doprnt@width& (0+255),b
  5812  000512                     l4175:
  5813                           
  5814                           ; BSR set to: 0
  5815                           ;doprnt.c: 1387: if(flag & 0x04) {
  5816  000512  0100               	movlb	0	; () banked
  5817  000514  A5E1               	btfss	__doprnt@flag& (0+255),2,b
  5818  000516  D07A               	goto	l4199
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;doprnt.c: 1392: if(flag & 0x03)
  5822  000518  C0E1  F0D8         	movff	__doprnt@flag,??__doprnt
  5823  00051C  0E03               	movlw	3
  5824  00051E  0100               	movlb	0	; () banked
  5825  000520  17D8               	andwf	??__doprnt& (0+255),f,b
  5826  000522  B4D8               	btfsc	status,2,c
  5827  000524  D034               	goto	l4187
  5828                           
  5829                           ; BSR set to: 0
  5830                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5831  000526  0100               	movlb	0	; () banked
  5832  000528  EE20 F002          	lfsr	2,2
  5833  00052C  51D2               	movf	__doprnt@pb& (0+255),w,b
  5834  00052E  26D9               	addwf	fsr2l,f,c
  5835  000530  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5836  000532  22DA               	addwfc	fsr2h,f,c
  5837  000534  50DE               	movf	postinc2,w,c
  5838  000536  10DE               	iorwf	postinc2,w,c
  5839  000538  B4D8               	btfsc	status,2,c
  5840  00053A  D014               	goto	l4183
  5841                           
  5842                           ; BSR set to: 0
  5843  00053C  0100               	movlb	0	; () banked
  5844  00053E  EE20 F002          	lfsr	2,2
  5845  000542  51D2               	movf	__doprnt@pb& (0+255),w,b
  5846  000544  26D9               	addwf	fsr2l,f,c
  5847  000546  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5848  000548  22DA               	addwfc	fsr2h,f,c
  5849  00054A  D801               	call	u3498
  5850  00054C  D020               	goto	l4187
  5851  00054E                     u3498:
  5852  00054E  0005               	push	
  5853  000550  6EFA               	movwf	pclath,c
  5854  000552  50DE               	movf	postinc2,w,c
  5855  000554  6EFD               	movwf	tosl,c
  5856  000556  50DE               	movf	postinc2,w,c
  5857  000558  6EFE               	movwf	tosh,c
  5858  00055A  50F8               	movf	tblptru,w,c
  5859  00055C  6EFF               	movwf	tosu,c
  5860  00055E  50FA               	movf	pclath,w,c
  5861  000560  0E2D               	movlw	45
  5862  000562  0012               	return		;indir
  5863  000564                     l4183:
  5864  000564  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5865  000568  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5866  00056C  CFDE F0D8          	movff	postinc2,??__doprnt
  5867  000570  CFDD F0D9          	movff	postdec2,??__doprnt+1
  5868  000574  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5869  000578  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5870  00057C  0E2D               	movlw	45
  5871  00057E  6EDF               	movwf	indf2,c
  5872  000580  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5873  000584  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5874  000588  2ADE               	incf	postinc2,f,c
  5875  00058A  0E00               	movlw	0
  5876  00058C  22DD               	addwfc	postdec2,f,c
  5877  00058E                     l4187:
  5878                           
  5879                           ;doprnt.c: 1415: if(width)
  5880  00058E  0100               	movlb	0	; () banked
  5881  000590  51E4               	movf	__doprnt@width& (0+255),w,b
  5882  000592  0100               	movlb	0	; () banked
  5883  000594  11E5               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5884  000596  B4D8               	btfsc	status,2,c
  5885  000598  D0B8               	goto	l4221
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5889                           
  5890                           ; BSR set to: 0
  5891                           
  5892                           ;doprnt.c: 1416: do
  5893  00059A  0100               	movlb	0	; () banked
  5894  00059C  EE20 F002          	lfsr	2,2
  5895  0005A0  51D2               	movf	__doprnt@pb& (0+255),w,b
  5896  0005A2  26D9               	addwf	fsr2l,f,c
  5897  0005A4  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5898  0005A6  22DA               	addwfc	fsr2h,f,c
  5899  0005A8  50DE               	movf	postinc2,w,c
  5900  0005AA  10DE               	iorwf	postinc2,w,c
  5901  0005AC  B4D8               	btfsc	status,2,c
  5902  0005AE  D014               	goto	l4193
  5903                           
  5904                           ; BSR set to: 0
  5905  0005B0  0100               	movlb	0	; () banked
  5906  0005B2  EE20 F002          	lfsr	2,2
  5907  0005B6  51D2               	movf	__doprnt@pb& (0+255),w,b
  5908  0005B8  26D9               	addwf	fsr2l,f,c
  5909  0005BA  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5910  0005BC  22DA               	addwfc	fsr2h,f,c
  5911  0005BE  D801               	call	u3528
  5912  0005C0  D020               	goto	l4197
  5913  0005C2                     u3528:
  5914  0005C2  0005               	push	
  5915  0005C4  6EFA               	movwf	pclath,c
  5916  0005C6  50DE               	movf	postinc2,w,c
  5917  0005C8  6EFD               	movwf	tosl,c
  5918  0005CA  50DE               	movf	postinc2,w,c
  5919  0005CC  6EFE               	movwf	tosh,c
  5920  0005CE  50F8               	movf	tblptru,w,c
  5921  0005D0  6EFF               	movwf	tosu,c
  5922  0005D2  50FA               	movf	pclath,w,c
  5923  0005D4  0E30               	movlw	48
  5924  0005D6  0012               	return		;indir
  5925  0005D8                     l4193:
  5926  0005D8  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5927  0005DC  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5928  0005E0  CFDE F0D8          	movff	postinc2,??__doprnt
  5929  0005E4  CFDD F0D9          	movff	postdec2,??__doprnt+1
  5930  0005E8  C0D8  FFD9         	movff	??__doprnt,fsr2l
  5931  0005EC  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  5932  0005F0  0E30               	movlw	48
  5933  0005F2  6EDF               	movwf	indf2,c
  5934  0005F4  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5935  0005F8  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5936  0005FC  2ADE               	incf	postinc2,f,c
  5937  0005FE  0E00               	movlw	0
  5938  000600  22DD               	addwfc	postdec2,f,c
  5939  000602                     l4197:
  5940                           
  5941                           ;doprnt.c: 1418: while(--width);
  5942  000602  0100               	movlb	0	; () banked
  5943  000604  07E4               	decf	__doprnt@width& (0+255),f,b
  5944  000606  A0D8               	btfss	status,0,c
  5945  000608  07E5               	decf	(__doprnt@width+1)& (0+255),f,b
  5946  00060A  D7C1               	goto	l4187
  5947  00060C                     l4199:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;doprnt.c: 1422: {
  5951                           ;doprnt.c: 1424: if(width
  5952                           ;doprnt.c: 1428: )
  5953  00060C  0100               	movlb	0	; () banked
  5954  00060E  51E4               	movf	__doprnt@width& (0+255),w,b
  5955  000610  0100               	movlb	0	; () banked
  5956  000612  11E5               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5957  000614  B4D8               	btfsc	status,2,c
  5958  000616  D03E               	goto	l4211
  5959  000618                     l4201:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5963  000618  0100               	movlb	0	; () banked
  5964  00061A  EE20 F002          	lfsr	2,2
  5965  00061E  51D2               	movf	__doprnt@pb& (0+255),w,b
  5966  000620  26D9               	addwf	fsr2l,f,c
  5967  000622  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5968  000624  22DA               	addwfc	fsr2h,f,c
  5969  000626  50DE               	movf	postinc2,w,c
  5970  000628  10DE               	iorwf	postinc2,w,c
  5971  00062A  B4D8               	btfsc	status,2,c
  5972  00062C  D014               	goto	l4205
  5973                           
  5974                           ; BSR set to: 0
  5975  00062E  0100               	movlb	0	; () banked
  5976  000630  EE20 F002          	lfsr	2,2
  5977  000634  51D2               	movf	__doprnt@pb& (0+255),w,b
  5978  000636  26D9               	addwf	fsr2l,f,c
  5979  000638  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  5980  00063A  22DA               	addwfc	fsr2h,f,c
  5981  00063C  D801               	call	u3568
  5982  00063E  D020               	goto	l4209
  5983  000640                     u3568:
  5984  000640  0005               	push	
  5985  000642  6EFA               	movwf	pclath,c
  5986  000644  50DE               	movf	postinc2,w,c
  5987  000646  6EFD               	movwf	tosl,c
  5988  000648  50DE               	movf	postinc2,w,c
  5989  00064A  6EFE               	movwf	tosh,c
  5990  00064C  50F8               	movf	tblptru,w,c
  5991  00064E  6EFF               	movwf	tosu,c
  5992  000650  50FA               	movf	pclath,w,c
  5993  000652  0E20               	movlw	32
  5994  000654  0012               	return		;indir
  5995  000656                     l4205:
  5996  000656  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  5997  00065A  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  5998  00065E  CFDE F0D8          	movff	postinc2,??__doprnt
  5999  000662  CFDD F0D9          	movff	postdec2,??__doprnt+1
  6000  000666  C0D8  FFD9         	movff	??__doprnt,fsr2l
  6001  00066A  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  6002  00066E  0E20               	movlw	32
  6003  000670  6EDF               	movwf	indf2,c
  6004  000672  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  6005  000676  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  6006  00067A  2ADE               	incf	postinc2,f,c
  6007  00067C  0E00               	movlw	0
  6008  00067E  22DD               	addwfc	postdec2,f,c
  6009  000680                     l4209:
  6010                           
  6011                           ;doprnt.c: 1431: while(--width);
  6012  000680  0100               	movlb	0	; () banked
  6013  000682  07E4               	decf	__doprnt@width& (0+255),f,b
  6014  000684  A0D8               	btfss	status,0,c
  6015  000686  07E5               	decf	(__doprnt@width+1)& (0+255),f,b
  6016  000688  0100               	movlb	0	; () banked
  6017  00068A  51E4               	movf	__doprnt@width& (0+255),w,b
  6018  00068C  0100               	movlb	0	; () banked
  6019  00068E  11E5               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6020  000690  A4D8               	btfss	status,2,c
  6021  000692  D7C2               	goto	l4201
  6022  000694                     l4211:
  6023                           
  6024                           ; BSR set to: 0
  6025                           ;doprnt.c: 1438: if(flag & 0x03)
  6026  000694  C0E1  F0D8         	movff	__doprnt@flag,??__doprnt
  6027  000698  0E03               	movlw	3
  6028  00069A  0100               	movlb	0	; () banked
  6029  00069C  17D8               	andwf	??__doprnt& (0+255),f,b
  6030  00069E  B4D8               	btfsc	status,2,c
  6031  0006A0  D034               	goto	l4221
  6032                           
  6033                           ; BSR set to: 0
  6034                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6035  0006A2  0100               	movlb	0	; () banked
  6036  0006A4  EE20 F002          	lfsr	2,2
  6037  0006A8  51D2               	movf	__doprnt@pb& (0+255),w,b
  6038  0006AA  26D9               	addwf	fsr2l,f,c
  6039  0006AC  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  6040  0006AE  22DA               	addwfc	fsr2h,f,c
  6041  0006B0  50DE               	movf	postinc2,w,c
  6042  0006B2  10DE               	iorwf	postinc2,w,c
  6043  0006B4  B4D8               	btfsc	status,2,c
  6044  0006B6  D014               	goto	l4217
  6045                           
  6046                           ; BSR set to: 0
  6047  0006B8  0100               	movlb	0	; () banked
  6048  0006BA  EE20 F002          	lfsr	2,2
  6049  0006BE  51D2               	movf	__doprnt@pb& (0+255),w,b
  6050  0006C0  26D9               	addwf	fsr2l,f,c
  6051  0006C2  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  6052  0006C4  22DA               	addwfc	fsr2h,f,c
  6053  0006C6  D801               	call	u3608
  6054  0006C8  D020               	goto	l4221
  6055  0006CA                     u3608:
  6056  0006CA  0005               	push	
  6057  0006CC  6EFA               	movwf	pclath,c
  6058  0006CE  50DE               	movf	postinc2,w,c
  6059  0006D0  6EFD               	movwf	tosl,c
  6060  0006D2  50DE               	movf	postinc2,w,c
  6061  0006D4  6EFE               	movwf	tosh,c
  6062  0006D6  50F8               	movf	tblptru,w,c
  6063  0006D8  6EFF               	movwf	tosu,c
  6064  0006DA  50FA               	movf	pclath,w,c
  6065  0006DC  0E2D               	movlw	45
  6066  0006DE  0012               	return		;indir
  6067  0006E0                     l4217:
  6068  0006E0  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  6069  0006E4  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  6070  0006E8  CFDE F0D8          	movff	postinc2,??__doprnt
  6071  0006EC  CFDD F0D9          	movff	postdec2,??__doprnt+1
  6072  0006F0  C0D8  FFD9         	movff	??__doprnt,fsr2l
  6073  0006F4  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  6074  0006F8  0E2D               	movlw	45
  6075  0006FA  6EDF               	movwf	indf2,c
  6076  0006FC  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  6077  000700  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  6078  000704  2ADE               	incf	postinc2,f,c
  6079  000706  0E00               	movlw	0
  6080  000708  22DD               	addwfc	postdec2,f,c
  6081  00070A                     l4221:
  6082                           
  6083                           ;doprnt.c: 1469: }
  6084                           ;doprnt.c: 1472: prec = c;
  6085  00070A  C0E6  F0DC         	movff	__doprnt@c,__doprnt@prec
  6086                           
  6087                           ;doprnt.c: 1474: while(prec--) {
  6088  00070E  D058               	goto	l4233
  6089  000710                     l4223:
  6090                           
  6091                           ;doprnt.c: 1478: {
  6092                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6093  000710  0100               	movlb	0	; () banked
  6094  000712  51DC               	movf	__doprnt@prec& (0+255),w,b
  6095  000714  0D02               	mullw	2
  6096  000716  0EC7               	movlw	low _dpowers
  6097  000718  24F3               	addwf	prodl,w,c
  6098  00071A  6EF6               	movwf	tblptrl,c
  6099  00071C  0E7F               	movlw	high _dpowers
  6100  00071E  20F4               	addwfc	prodh,w,c
  6101  000720  6EF7               	movwf	tblptrh,c
  6102  000722                     	if	0	;There are less than 3 active tblptr bytes
  6103  000722                     	endif
  6104  000722  0009               	tblrd		*+
  6105  000724  CFF5 F01D          	movff	tablat,___lwdiv@divisor
  6106  000728  000A               	tblrd		*-
  6107  00072A  CFF5 F01E          	movff	tablat,___lwdiv@divisor+1
  6108  00072E  C0DD  F01B         	movff	__doprnt@val,___lwdiv@dividend
  6109  000732  C0DE  F01C         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6110  000736  EC4D  F00C         	call	___lwdiv
  6111  00073A  C01B  F022         	movff	?___lwdiv,___lwmod@dividend
  6112  00073E  C01C  F023         	movff	?___lwdiv+1,___lwmod@dividend+1
  6113  000742  0E00               	movlw	0
  6114  000744  6E25               	movwf	___lwmod@divisor+1,c
  6115  000746  0E0A               	movlw	10
  6116  000748  6E24               	movwf	___lwmod@divisor,c
  6117  00074A  ECE5  F00C         	call	___lwmod	;wreg free
  6118  00074E  5022               	movf	?___lwmod,w,c
  6119  000750  0F30               	addlw	48
  6120  000752  0100               	movlb	0	; () banked
  6121  000754  6FE6               	movwf	__doprnt@c& (0+255),b
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;doprnt.c: 1523: }
  6125                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6126  000756  0100               	movlb	0	; () banked
  6127  000758  EE20 F002          	lfsr	2,2
  6128  00075C  51D2               	movf	__doprnt@pb& (0+255),w,b
  6129  00075E  26D9               	addwf	fsr2l,f,c
  6130  000760  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  6131  000762  22DA               	addwfc	fsr2h,f,c
  6132  000764  50DE               	movf	postinc2,w,c
  6133  000766  10DE               	iorwf	postinc2,w,c
  6134  000768  B4D8               	btfsc	status,2,c
  6135  00076A  D015               	goto	l4229
  6136                           
  6137                           ; BSR set to: 0
  6138  00076C  0100               	movlb	0	; () banked
  6139  00076E  EE20 F002          	lfsr	2,2
  6140  000772  51D2               	movf	__doprnt@pb& (0+255),w,b
  6141  000774  26D9               	addwf	fsr2l,f,c
  6142  000776  51D3               	movf	(__doprnt@pb+1)& (0+255),w,b
  6143  000778  22DA               	addwfc	fsr2h,f,c
  6144  00077A  D801               	call	u3628
  6145  00077C  D021               	goto	l4233
  6146  00077E                     u3628:
  6147  00077E  0005               	push	
  6148  000780  6EFA               	movwf	pclath,c
  6149  000782  50DE               	movf	postinc2,w,c
  6150  000784  6EFD               	movwf	tosl,c
  6151  000786  50DE               	movf	postinc2,w,c
  6152  000788  6EFE               	movwf	tosh,c
  6153  00078A  50F8               	movf	tblptru,w,c
  6154  00078C  6EFF               	movwf	tosu,c
  6155  00078E  50FA               	movf	pclath,w,c
  6156  000790  0100               	movlb	0	; () banked
  6157  000792  51E6               	movf	__doprnt@c& (0+255),w,b
  6158  000794  0012               	return		;indir
  6159  000796                     l4229:
  6160  000796  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  6161  00079A  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  6162  00079E  CFDE F0D8          	movff	postinc2,??__doprnt
  6163  0007A2  CFDD F0D9          	movff	postdec2,??__doprnt+1
  6164  0007A6  C0D8  FFD9         	movff	??__doprnt,fsr2l
  6165  0007AA  C0D9  FFDA         	movff	??__doprnt+1,fsr2h
  6166  0007AE  C0E6  FFDF         	movff	__doprnt@c,indf2
  6167  0007B2  C0D2  FFD9         	movff	__doprnt@pb,fsr2l
  6168  0007B6  C0D3  FFDA         	movff	__doprnt@pb+1,fsr2h
  6169  0007BA  2ADE               	incf	postinc2,f,c
  6170  0007BC  0E00               	movlw	0
  6171  0007BE  22DD               	addwfc	postdec2,f,c
  6172  0007C0                     l4233:
  6173  0007C0  0100               	movlb	0	; () banked
  6174  0007C2  07DC               	decf	__doprnt@prec& (0+255),f,b
  6175  0007C4  0100               	movlb	0	; () banked
  6176  0007C6  29DC               	incf	__doprnt@prec& (0+255),w,b
  6177  0007C8  A4D8               	btfss	status,2,c
  6178  0007CA  D7A2               	goto	l4223
  6179  0007CC                     l4235:
  6180  0007CC  C0D4  FFF6         	movff	__doprnt@f,tblptrl
  6181  0007D0  C0D5  FFF7         	movff	__doprnt@f+1,tblptrh
  6182  0007D4  0100               	movlb	0	; () banked
  6183  0007D6  4BD4               	infsnz	__doprnt@f& (0+255),f,b
  6184  0007D8  2BD5               	incf	(__doprnt@f+1)& (0+255),f,b
  6185  0007DA                     	if	0	;tblptru may be non-zero
  6186  0007DA                     	endif
  6187  0007DA                     	if	0	;tblptru may be non-zero
  6188  0007DA                     	endif
  6189  0007DA  0008               	tblrd		*
  6190  0007DC  CFF5 F0E6          	movff	tablat,__doprnt@c
  6191  0007E0  0100               	movlb	0	; () banked
  6192  0007E2  51E6               	movf	__doprnt@c& (0+255),w,b
  6193  0007E4  A4D8               	btfss	status,2,c
  6194  0007E6  D46B               	goto	l4065
  6195  0007E8                     l4237:
  6196                           
  6197                           ;doprnt.c: 1540: return 0;
  6198  0007E8  0E00               	movlw	0
  6199  0007EA  0100               	movlb	0	; () banked
  6200  0007EC  6FD3               	movwf	(?__doprnt+1)& (0+255),b
  6201  0007EE  0E00               	movlw	0
  6202  0007F0  6FD2               	movwf	?__doprnt& (0+255),b
  6203  0007F2  0012               	return	
  6204  0007F4                     __end_of__doprnt:
  6205                           	opt stack 0
  6206                           tosu	equ	0xFFF
  6207                           tosh	equ	0xFFE
  6208                           tosl	equ	0xFFD
  6209                           pclath	equ	0xFFA
  6210                           tblptru	equ	0xFF8
  6211                           tblptrh	equ	0xFF7
  6212                           tblptrl	equ	0xFF6
  6213                           tablat	equ	0xFF5
  6214                           prodh	equ	0xFF4
  6215                           prodl	equ	0xFF3
  6216                           intcon	equ	0xFF2
  6217                           indf0	equ	0xFEF
  6218                           postinc0	equ	0xFEE
  6219                           fsr0h	equ	0xFEA
  6220                           fsr0l	equ	0xFE9
  6221                           wreg	equ	0xFE8
  6222                           indf1	equ	0xFE7
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           plusw2	equ	0xFDB
  6229                           fsr2h	equ	0xFDA
  6230                           fsr2l	equ	0xFD9
  6231                           status	equ	0xFD8
  6232                           
  6233 ;; *************** function _putch *****************
  6234 ;; Defined at:
  6235 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  6236 ;; Parameters:    Size  Location     Type
  6237 ;;  txData          1    wreg     unsigned char 
  6238 ;; Auto vars:     Size  Location     Type
  6239 ;;  txData          1   27[COMRAM] unsigned char 
  6240 ;; Return value:  Size  Location     Type
  6241 ;;                  1    wreg      void 
  6242 ;; Registers used:
  6243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6244 ;; Tracked objects:
  6245 ;;		On entry : 0/0
  6246 ;;		On exit  : 0/0
  6247 ;;		Unchanged: 0/0
  6248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6249 ;;      Params:         0       0       0       0       0       0       0
  6250 ;;      Locals:         1       0       0       0       0       0       0
  6251 ;;      Temps:          0       0       0       0       0       0       0
  6252 ;;      Totals:         1       0       0       0       0       0       0
  6253 ;;Total ram usage:        1 bytes
  6254 ;; Hardware stack levels used:    1
  6255 ;; Hardware stack levels required when called:    5
  6256 ;; This function calls:
  6257 ;;		_EUSART1_Write
  6258 ;; This function is called by:
  6259 ;;		_printf
  6260 ;;		__doprnt
  6261 ;; This function uses a non-reentrant model
  6262 ;;
  6263                           
  6264                           	psect	text25
  6265  001ED0                     __ptext25:
  6266                           	opt stack 0
  6267  001ED0                     _putch:
  6268                           	opt stack 21
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;incstack = 0
  6272                           ;putch@txData stored from wreg
  6273  001ED0  6E1C               	movwf	putch@txData,c
  6274                           
  6275                           ;eusart2.c: 152: EUSART1_Write(txData);
  6276  001ED2  501C               	movf	putch@txData,w,c
  6277  001ED4  EC24  F00D         	call	_EUSART1_Write
  6278  001ED8  0012               	return		;funcret
  6279  001EDA                     __end_of_putch:
  6280                           	opt stack 0
  6281                           tosu	equ	0xFFF
  6282                           tosh	equ	0xFFE
  6283                           tosl	equ	0xFFD
  6284                           pclath	equ	0xFFA
  6285                           tblptru	equ	0xFF8
  6286                           tblptrh	equ	0xFF7
  6287                           tblptrl	equ	0xFF6
  6288                           tablat	equ	0xFF5
  6289                           prodh	equ	0xFF4
  6290                           prodl	equ	0xFF3
  6291                           intcon	equ	0xFF2
  6292                           indf0	equ	0xFEF
  6293                           postinc0	equ	0xFEE
  6294                           fsr0h	equ	0xFEA
  6295                           fsr0l	equ	0xFE9
  6296                           wreg	equ	0xFE8
  6297                           indf1	equ	0xFE7
  6298                           fsr1h	equ	0xFE2
  6299                           fsr1l	equ	0xFE1
  6300                           indf2	equ	0xFDF
  6301                           postinc2	equ	0xFDE
  6302                           postdec2	equ	0xFDD
  6303                           plusw2	equ	0xFDB
  6304                           fsr2h	equ	0xFDA
  6305                           fsr2l	equ	0xFD9
  6306                           status	equ	0xFD8
  6307                           
  6308 ;; *************** function _EUSART1_Write *****************
  6309 ;; Defined at:
  6310 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  6311 ;; Parameters:    Size  Location     Type
  6312 ;;  txData          1    wreg     unsigned char 
  6313 ;; Auto vars:     Size  Location     Type
  6314 ;;  txData          1   26[COMRAM] unsigned char 
  6315 ;; Return value:  Size  Location     Type
  6316 ;;                  1    wreg      void 
  6317 ;; Registers used:
  6318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6319 ;; Tracked objects:
  6320 ;;		On entry : 0/0
  6321 ;;		On exit  : 0/0
  6322 ;;		Unchanged: 0/0
  6323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6324 ;;      Params:         0       0       0       0       0       0       0
  6325 ;;      Locals:         1       0       0       0       0       0       0
  6326 ;;      Temps:          0       0       0       0       0       0       0
  6327 ;;      Totals:         1       0       0       0       0       0       0
  6328 ;;Total ram usage:        1 bytes
  6329 ;; Hardware stack levels used:    1
  6330 ;; Hardware stack levels required when called:    4
  6331 ;; This function calls:
  6332 ;;		Nothing
  6333 ;; This function is called by:
  6334 ;;		_putch
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           	psect	text26
  6339  001A48                     __ptext26:
  6340                           	opt stack 0
  6341  001A48                     _EUSART1_Write:
  6342                           	opt stack 21
  6343                           
  6344                           ;incstack = 0
  6345                           ;EUSART1_Write@txData stored from wreg
  6346  001A48  6E1B               	movwf	EUSART1_Write@txData,c
  6347  001A4A                     l3883:
  6348  001A4A  503A               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  6349  001A4C  B4D8               	btfsc	status,2,c
  6350  001A4E  D7FD               	goto	l3883
  6351                           
  6352                           ;eusart2.c: 132: }
  6353                           ;eusart2.c: 134: if (0 == PIE1bits.TX1IE) {
  6354  001A50  B89D               	btfsc	3997,4,c	;volatile
  6355  001A52  D003               	goto	l50
  6356                           
  6357                           ;eusart2.c: 135: TXREG1 = txData;
  6358  001A54  C01B  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  6359                           
  6360                           ;eusart2.c: 136: } else {
  6361  001A58  D012               	goto	l3897
  6362  001A5A                     l50:
  6363                           
  6364                           ;eusart2.c: 137: PIE1bits.TX1IE = 0;
  6365  001A5A  989D               	bcf	3997,4,c	;volatile
  6366                           
  6367                           ;eusart2.c: 138: eusart1TxBuffer[eusart1TxHead++] = txData;
  6368  001A5C  503B               	movf	_eusart1TxHead,w,c
  6369  001A5E  0D01               	mullw	1
  6370  001A60  0E73               	movlw	low _eusart1TxBuffer
  6371  001A62  24F3               	addwf	prodl,w,c
  6372  001A64  6ED9               	movwf	fsr2l,c
  6373  001A66  0E00               	movlw	high _eusart1TxBuffer
  6374  001A68  20F4               	addwfc	prodh,w,c
  6375  001A6A  6EDA               	movwf	fsr2h,c
  6376  001A6C  C01B  FFDF         	movff	EUSART1_Write@txData,indf2
  6377  001A70  2A3B               	incf	_eusart1TxHead,f,c
  6378                           
  6379                           ;eusart2.c: 139: if (sizeof (eusart1TxBuffer) <= eusart1TxHead) {
  6380  001A72  0E07               	movlw	7
  6381  001A74  643B               	cpfsgt	_eusart1TxHead,c
  6382  001A76  D002               	goto	l3895
  6383                           
  6384                           ;eusart2.c: 140: eusart1TxHead = 0;
  6385  001A78  0E00               	movlw	0
  6386  001A7A  6E3B               	movwf	_eusart1TxHead,c
  6387  001A7C                     l3895:
  6388                           
  6389                           ;eusart2.c: 141: }
  6390                           ;eusart2.c: 142: eusart1TxBufferRemaining--;
  6391  001A7C  063A               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  6392  001A7E                     l3897:
  6393                           
  6394                           ;eusart2.c: 143: }
  6395                           ;eusart2.c: 144: PIE1bits.TX1IE = 1;
  6396  001A7E  889D               	bsf	3997,4,c	;volatile
  6397  001A80  0012               	return		;funcret
  6398  001A82                     __end_of_EUSART1_Write:
  6399                           	opt stack 0
  6400                           tosu	equ	0xFFF
  6401                           tosh	equ	0xFFE
  6402                           tosl	equ	0xFFD
  6403                           pclath	equ	0xFFA
  6404                           tblptru	equ	0xFF8
  6405                           tblptrh	equ	0xFF7
  6406                           tblptrl	equ	0xFF6
  6407                           tablat	equ	0xFF5
  6408                           prodh	equ	0xFF4
  6409                           prodl	equ	0xFF3
  6410                           intcon	equ	0xFF2
  6411                           indf0	equ	0xFEF
  6412                           postinc0	equ	0xFEE
  6413                           fsr0h	equ	0xFEA
  6414                           fsr0l	equ	0xFE9
  6415                           wreg	equ	0xFE8
  6416                           indf1	equ	0xFE7
  6417                           fsr1h	equ	0xFE2
  6418                           fsr1l	equ	0xFE1
  6419                           indf2	equ	0xFDF
  6420                           postinc2	equ	0xFDE
  6421                           postdec2	equ	0xFDD
  6422                           plusw2	equ	0xFDB
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _isdigit *****************
  6428 ;; Defined at:
  6429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;  c               1    wreg     unsigned char 
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  c               1   28[COMRAM] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;		None               void
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6443 ;;      Params:         0       0       0       0       0       0       0
  6444 ;;      Locals:         2       0       0       0       0       0       0
  6445 ;;      Temps:          1       0       0       0       0       0       0
  6446 ;;      Totals:         3       0       0       0       0       0       0
  6447 ;;Total ram usage:        3 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    4
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		__doprnt
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           	psect	text27
  6458  001DCA                     __ptext27:
  6459                           	opt stack 0
  6460  001DCA                     _isdigit:
  6461                           	opt stack 22
  6462                           
  6463                           ;incstack = 0
  6464                           ;isdigit@c stored from wreg
  6465  001DCA  6E1D               	movwf	isdigit@c,c
  6466  001DCC  0E00               	movlw	0
  6467  001DCE  6E1C               	movwf	_isdigit$2394,c
  6468  001DD0  0E3A               	movlw	58
  6469  001DD2  601D               	cpfslt	isdigit@c,c
  6470  001DD4  D005               	goto	l3925
  6471  001DD6  0E2F               	movlw	47
  6472  001DD8  641D               	cpfsgt	isdigit@c,c
  6473  001DDA  D002               	goto	l3925
  6474  001DDC  0E01               	movlw	1
  6475  001DDE  6E1C               	movwf	_isdigit$2394,c
  6476  001DE0                     l3925:
  6477  001DE0  C01C  F01B         	movff	_isdigit$2394,??_isdigit
  6478  001DE4  301B               	rrcf	??_isdigit,w,c
  6479  001DE6  0012               	return	
  6480  001DE8                     __end_of_isdigit:
  6481                           	opt stack 0
  6482                           tosu	equ	0xFFF
  6483                           tosh	equ	0xFFE
  6484                           tosl	equ	0xFFD
  6485                           pclath	equ	0xFFA
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           intcon	equ	0xFF2
  6493                           indf0	equ	0xFEF
  6494                           postinc0	equ	0xFEE
  6495                           fsr0h	equ	0xFEA
  6496                           fsr0l	equ	0xFE9
  6497                           wreg	equ	0xFE8
  6498                           indf1	equ	0xFE7
  6499                           fsr1h	equ	0xFE2
  6500                           fsr1l	equ	0xFE1
  6501                           indf2	equ	0xFDF
  6502                           postinc2	equ	0xFDE
  6503                           postdec2	equ	0xFDD
  6504                           plusw2	equ	0xFDB
  6505                           fsr2h	equ	0xFDA
  6506                           fsr2l	equ	0xFD9
  6507                           status	equ	0xFD8
  6508                           
  6509 ;; *************** function ___lwmod *****************
  6510 ;; Defined at:
  6511 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
  6512 ;; Parameters:    Size  Location     Type
  6513 ;;  dividend        2   33[COMRAM] unsigned int 
  6514 ;;  divisor         2   35[COMRAM] unsigned int 
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  counter         1   37[COMRAM] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  2   33[COMRAM] unsigned int 
  6519 ;; Registers used:
  6520 ;;		wreg, status,2, status,0
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6526 ;;      Params:         4       0       0       0       0       0       0
  6527 ;;      Locals:         1       0       0       0       0       0       0
  6528 ;;      Temps:          0       0       0       0       0       0       0
  6529 ;;      Totals:         5       0       0       0       0       0       0
  6530 ;;Total ram usage:        5 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:    4
  6533 ;; This function calls:
  6534 ;;		Nothing
  6535 ;; This function is called by:
  6536 ;;		__doprnt
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text28
  6541  0019CA                     __ptext28:
  6542                           	opt stack 0
  6543  0019CA                     ___lwmod:
  6544                           	opt stack 22
  6545                           
  6546                           ;incstack = 0
  6547  0019CA  5024               	movf	___lwmod@divisor,w,c
  6548  0019CC  1025               	iorwf	___lwmod@divisor+1,w,c
  6549  0019CE  B4D8               	btfsc	status,2,c
  6550  0019D0  D018               	goto	l1330
  6551  0019D2  0E01               	movlw	1
  6552  0019D4  6E26               	movwf	___lwmod@counter,c
  6553  0019D6  D004               	goto	l3963
  6554  0019D8                     l3961:
  6555  0019D8  90D8               	bcf	status,0,c
  6556  0019DA  3624               	rlcf	___lwmod@divisor,f,c
  6557  0019DC  3625               	rlcf	___lwmod@divisor+1,f,c
  6558  0019DE  2A26               	incf	___lwmod@counter,f,c
  6559  0019E0                     l3963:
  6560  0019E0  AE25               	btfss	___lwmod@divisor+1,7,c
  6561  0019E2  D7FA               	goto	l3961
  6562  0019E4                     l3965:
  6563  0019E4  5024               	movf	___lwmod@divisor,w,c
  6564  0019E6  5C22               	subwf	___lwmod@dividend,w,c
  6565  0019E8  5025               	movf	___lwmod@divisor+1,w,c
  6566  0019EA  5823               	subwfb	___lwmod@dividend+1,w,c
  6567  0019EC  A0D8               	btfss	status,0,c
  6568  0019EE  D004               	goto	l3969
  6569  0019F0  5024               	movf	___lwmod@divisor,w,c
  6570  0019F2  5E22               	subwf	___lwmod@dividend,f,c
  6571  0019F4  5025               	movf	___lwmod@divisor+1,w,c
  6572  0019F6  5A23               	subwfb	___lwmod@dividend+1,f,c
  6573  0019F8                     l3969:
  6574  0019F8  90D8               	bcf	status,0,c
  6575  0019FA  3225               	rrcf	___lwmod@divisor+1,f,c
  6576  0019FC  3224               	rrcf	___lwmod@divisor,f,c
  6577  0019FE  2E26               	decfsz	___lwmod@counter,f,c
  6578  001A00  D7F1               	goto	l3965
  6579  001A02                     l1330:
  6580  001A02  C022  F022         	movff	___lwmod@dividend,?___lwmod
  6581  001A06  C023  F023         	movff	___lwmod@dividend+1,?___lwmod+1
  6582  001A0A  0012               	return		;funcret
  6583  001A0C                     __end_of___lwmod:
  6584                           	opt stack 0
  6585                           tosu	equ	0xFFF
  6586                           tosh	equ	0xFFE
  6587                           tosl	equ	0xFFD
  6588                           pclath	equ	0xFFA
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           intcon	equ	0xFF2
  6596                           indf0	equ	0xFEF
  6597                           postinc0	equ	0xFEE
  6598                           fsr0h	equ	0xFEA
  6599                           fsr0l	equ	0xFE9
  6600                           wreg	equ	0xFE8
  6601                           indf1	equ	0xFE7
  6602                           fsr1h	equ	0xFE2
  6603                           fsr1l	equ	0xFE1
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           plusw2	equ	0xFDB
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function ___lwdiv *****************
  6613 ;; Defined at:
  6614 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  dividend        2   26[COMRAM] unsigned int 
  6617 ;;  divisor         2   28[COMRAM] unsigned int 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  quotient        2   31[COMRAM] unsigned int 
  6620 ;;  counter         1   30[COMRAM] unsigned char 
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  2   26[COMRAM] unsigned int 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6630 ;;      Params:         4       0       0       0       0       0       0
  6631 ;;      Locals:         3       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0
  6633 ;;      Totals:         7       0       0       0       0       0       0
  6634 ;;Total ram usage:        7 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    4
  6637 ;; This function calls:
  6638 ;;		Nothing
  6639 ;; This function is called by:
  6640 ;;		__doprnt
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text29
  6645  00189A                     __ptext29:
  6646                           	opt stack 0
  6647  00189A                     ___lwdiv:
  6648                           	opt stack 22
  6649                           
  6650                           ;incstack = 0
  6651  00189A  0E00               	movlw	0
  6652  00189C  6E21               	movwf	___lwdiv@quotient+1,c
  6653  00189E  0E00               	movlw	0
  6654  0018A0  6E20               	movwf	___lwdiv@quotient,c
  6655  0018A2  501D               	movf	___lwdiv@divisor,w,c
  6656  0018A4  101E               	iorwf	___lwdiv@divisor+1,w,c
  6657  0018A6  B4D8               	btfsc	status,2,c
  6658  0018A8  D01C               	goto	l1320
  6659  0018AA  0E01               	movlw	1
  6660  0018AC  6E1F               	movwf	___lwdiv@counter,c
  6661  0018AE  D004               	goto	l3943
  6662  0018B0                     l3941:
  6663  0018B0  90D8               	bcf	status,0,c
  6664  0018B2  361D               	rlcf	___lwdiv@divisor,f,c
  6665  0018B4  361E               	rlcf	___lwdiv@divisor+1,f,c
  6666  0018B6  2A1F               	incf	___lwdiv@counter,f,c
  6667  0018B8                     l3943:
  6668  0018B8  AE1E               	btfss	___lwdiv@divisor+1,7,c
  6669  0018BA  D7FA               	goto	l3941
  6670  0018BC                     l3945:
  6671  0018BC  90D8               	bcf	status,0,c
  6672  0018BE  3620               	rlcf	___lwdiv@quotient,f,c
  6673  0018C0  3621               	rlcf	___lwdiv@quotient+1,f,c
  6674  0018C2  501D               	movf	___lwdiv@divisor,w,c
  6675  0018C4  5C1B               	subwf	___lwdiv@dividend,w,c
  6676  0018C6  501E               	movf	___lwdiv@divisor+1,w,c
  6677  0018C8  581C               	subwfb	___lwdiv@dividend+1,w,c
  6678  0018CA  A0D8               	btfss	status,0,c
  6679  0018CC  D005               	goto	l3953
  6680  0018CE  501D               	movf	___lwdiv@divisor,w,c
  6681  0018D0  5E1B               	subwf	___lwdiv@dividend,f,c
  6682  0018D2  501E               	movf	___lwdiv@divisor+1,w,c
  6683  0018D4  5A1C               	subwfb	___lwdiv@dividend+1,f,c
  6684  0018D6  8020               	bsf	___lwdiv@quotient,0,c
  6685  0018D8                     l3953:
  6686  0018D8  90D8               	bcf	status,0,c
  6687  0018DA  321E               	rrcf	___lwdiv@divisor+1,f,c
  6688  0018DC  321D               	rrcf	___lwdiv@divisor,f,c
  6689  0018DE  2E1F               	decfsz	___lwdiv@counter,f,c
  6690  0018E0  D7ED               	goto	l3945
  6691  0018E2                     l1320:
  6692  0018E2  C020  F01B         	movff	___lwdiv@quotient,?___lwdiv
  6693  0018E6  C021  F01C         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6694  0018EA  0012               	return		;funcret
  6695  0018EC                     __end_of___lwdiv:
  6696                           	opt stack 0
  6697                           tosu	equ	0xFFF
  6698                           tosh	equ	0xFFE
  6699                           tosl	equ	0xFFD
  6700                           pclath	equ	0xFFA
  6701                           tblptru	equ	0xFF8
  6702                           tblptrh	equ	0xFF7
  6703                           tblptrl	equ	0xFF6
  6704                           tablat	equ	0xFF5
  6705                           prodh	equ	0xFF4
  6706                           prodl	equ	0xFF3
  6707                           intcon	equ	0xFF2
  6708                           indf0	equ	0xFEF
  6709                           postinc0	equ	0xFEE
  6710                           fsr0h	equ	0xFEA
  6711                           fsr0l	equ	0xFE9
  6712                           wreg	equ	0xFE8
  6713                           indf1	equ	0xFE7
  6714                           fsr1h	equ	0xFE2
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           plusw2	equ	0xFDB
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function ___awmod *****************
  6725 ;; Defined at:
  6726 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  dividend        2   26[COMRAM] int 
  6729 ;;  divisor         2   28[COMRAM] int 
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  sign            1   31[COMRAM] unsigned char 
  6732 ;;  counter         1   30[COMRAM] unsigned char 
  6733 ;; Return value:  Size  Location     Type
  6734 ;;                  2   26[COMRAM] int 
  6735 ;; Registers used:
  6736 ;;		wreg, status,2, status,0
  6737 ;; Tracked objects:
  6738 ;;		On entry : 0/0
  6739 ;;		On exit  : 0/0
  6740 ;;		Unchanged: 0/0
  6741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6742 ;;      Params:         4       0       0       0       0       0       0
  6743 ;;      Locals:         2       0       0       0       0       0       0
  6744 ;;      Temps:          0       0       0       0       0       0       0
  6745 ;;      Totals:         6       0       0       0       0       0       0
  6746 ;;Total ram usage:        6 bytes
  6747 ;; Hardware stack levels used:    1
  6748 ;; Hardware stack levels required when called:    4
  6749 ;; This function calls:
  6750 ;;		Nothing
  6751 ;; This function is called by:
  6752 ;;		_SetCharger
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text30
  6757  001594                     __ptext30:
  6758                           	opt stack 0
  6759  001594                     ___awmod:
  6760                           	opt stack 24
  6761                           
  6762                           ;incstack = 0
  6763  001594  0E00               	movlw	0
  6764  001596  6E20               	movwf	___awmod@sign,c
  6765  001598  AE1C               	btfss	___awmod@dividend+1,7,c
  6766  00159A  D006               	goto	l4339
  6767  00159C  6C1B               	negf	___awmod@dividend,c
  6768  00159E  1E1C               	comf	___awmod@dividend+1,f,c
  6769  0015A0  B0D8               	btfsc	status,0,c
  6770  0015A2  2A1C               	incf	___awmod@dividend+1,f,c
  6771  0015A4  0E01               	movlw	1
  6772  0015A6  6E20               	movwf	___awmod@sign,c
  6773  0015A8                     l4339:
  6774  0015A8  AE1E               	btfss	___awmod@divisor+1,7,c
  6775  0015AA  D004               	goto	l4343
  6776  0015AC  6C1D               	negf	___awmod@divisor,c
  6777  0015AE  1E1E               	comf	___awmod@divisor+1,f,c
  6778  0015B0  B0D8               	btfsc	status,0,c
  6779  0015B2  2A1E               	incf	___awmod@divisor+1,f,c
  6780  0015B4                     l4343:
  6781  0015B4  501D               	movf	___awmod@divisor,w,c
  6782  0015B6  101E               	iorwf	___awmod@divisor+1,w,c
  6783  0015B8  B4D8               	btfsc	status,2,c
  6784  0015BA  D018               	goto	l4359
  6785  0015BC  0E01               	movlw	1
  6786  0015BE  6E1F               	movwf	___awmod@counter,c
  6787  0015C0  D004               	goto	l4349
  6788  0015C2                     l4347:
  6789  0015C2  90D8               	bcf	status,0,c
  6790  0015C4  361D               	rlcf	___awmod@divisor,f,c
  6791  0015C6  361E               	rlcf	___awmod@divisor+1,f,c
  6792  0015C8  2A1F               	incf	___awmod@counter,f,c
  6793  0015CA                     l4349:
  6794  0015CA  AE1E               	btfss	___awmod@divisor+1,7,c
  6795  0015CC  D7FA               	goto	l4347
  6796  0015CE                     l4351:
  6797  0015CE  501D               	movf	___awmod@divisor,w,c
  6798  0015D0  5C1B               	subwf	___awmod@dividend,w,c
  6799  0015D2  501E               	movf	___awmod@divisor+1,w,c
  6800  0015D4  581C               	subwfb	___awmod@dividend+1,w,c
  6801  0015D6  A0D8               	btfss	status,0,c
  6802  0015D8  D004               	goto	l4355
  6803  0015DA  501D               	movf	___awmod@divisor,w,c
  6804  0015DC  5E1B               	subwf	___awmod@dividend,f,c
  6805  0015DE  501E               	movf	___awmod@divisor+1,w,c
  6806  0015E0  5A1C               	subwfb	___awmod@dividend+1,f,c
  6807  0015E2                     l4355:
  6808  0015E2  90D8               	bcf	status,0,c
  6809  0015E4  321E               	rrcf	___awmod@divisor+1,f,c
  6810  0015E6  321D               	rrcf	___awmod@divisor,f,c
  6811  0015E8  2E1F               	decfsz	___awmod@counter,f,c
  6812  0015EA  D7F1               	goto	l4351
  6813  0015EC                     l4359:
  6814  0015EC  5020               	movf	___awmod@sign,w,c
  6815  0015EE  B4D8               	btfsc	status,2,c
  6816  0015F0  D004               	goto	l4363
  6817  0015F2  6C1B               	negf	___awmod@dividend,c
  6818  0015F4  1E1C               	comf	___awmod@dividend+1,f,c
  6819  0015F6  B0D8               	btfsc	status,0,c
  6820  0015F8  2A1C               	incf	___awmod@dividend+1,f,c
  6821  0015FA                     l4363:
  6822  0015FA  C01B  F01B         	movff	___awmod@dividend,?___awmod
  6823  0015FE  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
  6824  001602  0012               	return	
  6825  001604                     __end_of___awmod:
  6826                           	opt stack 0
  6827                           tosu	equ	0xFFF
  6828                           tosh	equ	0xFFE
  6829                           tosl	equ	0xFFD
  6830                           pclath	equ	0xFFA
  6831                           tblptru	equ	0xFF8
  6832                           tblptrh	equ	0xFF7
  6833                           tblptrl	equ	0xFF6
  6834                           tablat	equ	0xFF5
  6835                           prodh	equ	0xFF4
  6836                           prodl	equ	0xFF3
  6837                           intcon	equ	0xFF2
  6838                           indf0	equ	0xFEF
  6839                           postinc0	equ	0xFEE
  6840                           fsr0h	equ	0xFEA
  6841                           fsr0l	equ	0xFE9
  6842                           wreg	equ	0xFE8
  6843                           indf1	equ	0xFE7
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           plusw2	equ	0xFDB
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function _SetMux *****************
  6855 ;; Defined at:
  6856 ;;		line 116 in file "Functions.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  channel         1    wreg     unsigned char 
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;  channel         1   26[COMRAM] unsigned char 
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, status,2, status,0
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6870 ;;      Params:         0       0       0       0       0       0       0
  6871 ;;      Locals:         1       0       0       0       0       0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0
  6873 ;;      Totals:         1       0       0       0       0       0       0
  6874 ;;Total ram usage:        1 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    4
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_SetCharger
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text31
  6885  001A82                     __ptext31:
  6886                           	opt stack 0
  6887  001A82                     _SetMux:
  6888                           	opt stack 24
  6889                           
  6890                           ;incstack = 0
  6891                           ;SetMux@channel stored from wreg
  6892  001A82  6E1B               	movwf	SetMux@channel,c
  6893                           
  6894                           ;Functions.c: 117: switch (channel){
  6895  001A84  D00C               	goto	l4293
  6896  001A86                     l720:
  6897  001A86  908A               	bcf	3978,0,c	;volatile
  6898                           
  6899                           ;Functions.c: 120: do { LATB1 = 0; } while(0);
  6900  001A88  928A               	bcf	3978,1,c	;volatile
  6901                           
  6902                           ;Functions.c: 121: break;
  6903  001A8A  0012               	return	
  6904  001A8C                     l726:
  6905  001A8C  808A               	bsf	3978,0,c	;volatile
  6906                           
  6907                           ;Functions.c: 124: do { LATB1 = 0; } while(0);
  6908  001A8E  928A               	bcf	3978,1,c	;volatile
  6909                           
  6910                           ;Functions.c: 125: break;
  6911  001A90  0012               	return	
  6912  001A92                     l731:
  6913  001A92  908A               	bcf	3978,0,c	;volatile
  6914                           
  6915                           ;Functions.c: 128: do { LATB1 = 1; } while(0);
  6916  001A94  828A               	bsf	3978,1,c	;volatile
  6917                           
  6918                           ;Functions.c: 129: break;
  6919  001A96  0012               	return	
  6920  001A98                     l736:
  6921  001A98  808A               	bsf	3978,0,c	;volatile
  6922                           
  6923                           ;Functions.c: 132: do { LATB1 = 1; } while(0);
  6924  001A9A  828A               	bsf	3978,1,c	;volatile
  6925                           
  6926                           ;Functions.c: 137: }
  6927                           
  6928                           ;Functions.c: 136: break;
  6929                           
  6930                           ;Functions.c: 134: default:
  6931                           
  6932                           ;Functions.c: 133: break;
  6933  001A9C  0012               	return	
  6934  001A9E                     l4293:
  6935  001A9E  501B               	movf	SetMux@channel,w,c
  6936                           
  6937                           ; Switch size 1, requested type "space"
  6938                           ; Number of cases is 4, Range of values is 1 to 4
  6939                           ; switch strategies available:
  6940                           ; Name         Instructions Cycles
  6941                           ; simple_byte           13     7 (average)
  6942                           ;	Chosen strategy is simple_byte
  6943  001AA0  0A01               	xorlw	1	; case 1
  6944  001AA2  B4D8               	btfsc	status,2,c
  6945  001AA4  D7F0               	goto	l720
  6946  001AA6  0A03               	xorlw	3	; case 2
  6947  001AA8  B4D8               	btfsc	status,2,c
  6948  001AAA  D7F0               	goto	l726
  6949  001AAC  0A01               	xorlw	1	; case 3
  6950  001AAE  B4D8               	btfsc	status,2,c
  6951  001AB0  D7F0               	goto	l731
  6952  001AB2  0A07               	xorlw	7	; case 4
  6953  001AB4  A4D8               	btfss	status,2,c
  6954  001AB6  0012               	return	
  6955  001AB8  D7EF               	goto	l736
  6956  001ABA                     __end_of_SetMux:
  6957                           	opt stack 0
  6958                           tosu	equ	0xFFF
  6959                           tosh	equ	0xFFE
  6960                           tosl	equ	0xFFD
  6961                           pclath	equ	0xFFA
  6962                           tblptru	equ	0xFF8
  6963                           tblptrh	equ	0xFF7
  6964                           tblptrl	equ	0xFF6
  6965                           tablat	equ	0xFF5
  6966                           prodh	equ	0xFF4
  6967                           prodl	equ	0xFF3
  6968                           intcon	equ	0xFF2
  6969                           indf0	equ	0xFEF
  6970                           postinc0	equ	0xFEE
  6971                           fsr0h	equ	0xFEA
  6972                           fsr0l	equ	0xFE9
  6973                           wreg	equ	0xFE8
  6974                           indf1	equ	0xFE7
  6975                           fsr1h	equ	0xFE2
  6976                           fsr1l	equ	0xFE1
  6977                           indf2	equ	0xFDF
  6978                           postinc2	equ	0xFDE
  6979                           postdec2	equ	0xFDD
  6980                           plusw2	equ	0xFDB
  6981                           fsr2h	equ	0xFDA
  6982                           fsr2l	equ	0xFD9
  6983                           status	equ	0xFD8
  6984                           
  6985 ;; *************** function _Splash *****************
  6986 ;; Defined at:
  6987 ;;		line 143 in file "NokiaLCD.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;		None
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7001 ;;      Params:         0       0       0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0
  7004 ;;      Totals:         0       0       0       0       0       0       0
  7005 ;;Total ram usage:        0 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    8
  7008 ;; This function calls:
  7009 ;;		_NokiaStr
  7010 ;;		_gotoXy
  7011 ;; This function is called by:
  7012 ;;		_main
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           	psect	text32
  7017  001ABA                     __ptext32:
  7018                           	opt stack 0
  7019  001ABA                     _Splash:
  7020                           	opt stack 22
  7021                           
  7022                           ;NokiaLCD.c: 144: gotoXy(0,0);
  7023                           
  7024                           ;incstack = 0
  7025  001ABA  0E00               	movlw	0
  7026  001ABC  6E23               	movwf	gotoXy@y,c
  7027  001ABE  0E00               	movlw	0
  7028  001AC0  EC8C  F00E         	call	_gotoXy
  7029                           
  7030                           ;NokiaLCD.c: 145: NokiaStr("Car Charger");
  7031  001AC4  0ED1               	movlw	low STR_17
  7032  001AC6  0100               	movlb	0	; () banked
  7033  001AC8  6FD2               	movwf	NokiaStr@str& (0+255),b
  7034  001ACA  0E7F               	movlw	high STR_17
  7035  001ACC  0100               	movlb	0	; () banked
  7036  001ACE  6FD3               	movwf	(NokiaStr@str+1)& (0+255),b
  7037  001AD0  EC0A  F00E         	call	_NokiaStr	;wreg free
  7038                           
  7039                           ;NokiaLCD.c: 146: gotoXy(0,2);
  7040  001AD4  0E02               	movlw	2
  7041  001AD6  6E23               	movwf	gotoXy@y,c
  7042  001AD8  0E00               	movlw	0
  7043  001ADA  EC8C  F00E         	call	_gotoXy
  7044                           
  7045                           ;NokiaLCD.c: 147: NokiaStr("No BMM");
  7046  001ADE  0EEC               	movlw	low STR_18
  7047  001AE0  0100               	movlb	0	; () banked
  7048  001AE2  6FD2               	movwf	NokiaStr@str& (0+255),b
  7049  001AE4  0E7F               	movlw	high STR_18
  7050  001AE6  0100               	movlb	0	; () banked
  7051  001AE8  6FD3               	movwf	(NokiaStr@str+1)& (0+255),b
  7052  001AEA  EC0A  F00E         	call	_NokiaStr	;wreg free
  7053  001AEE  0012               	return		;funcret
  7054  001AF0                     __end_of_Splash:
  7055                           	opt stack 0
  7056                           tosu	equ	0xFFF
  7057                           tosh	equ	0xFFE
  7058                           tosl	equ	0xFFD
  7059                           pclath	equ	0xFFA
  7060                           tblptru	equ	0xFF8
  7061                           tblptrh	equ	0xFF7
  7062                           tblptrl	equ	0xFF6
  7063                           tablat	equ	0xFF5
  7064                           prodh	equ	0xFF4
  7065                           prodl	equ	0xFF3
  7066                           intcon	equ	0xFF2
  7067                           indf0	equ	0xFEF
  7068                           postinc0	equ	0xFEE
  7069                           fsr0h	equ	0xFEA
  7070                           fsr0l	equ	0xFE9
  7071                           wreg	equ	0xFE8
  7072                           indf1	equ	0xFE7
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           postinc2	equ	0xFDE
  7077                           postdec2	equ	0xFDD
  7078                           plusw2	equ	0xFDB
  7079                           fsr2h	equ	0xFDA
  7080                           fsr2l	equ	0xFD9
  7081                           status	equ	0xFD8
  7082                           
  7083 ;; *************** function _gotoXy *****************
  7084 ;; Defined at:
  7085 ;;		line 97 in file "NokiaLCD.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;  x               1    wreg     unsigned char 
  7088 ;;  y               1   34[COMRAM] unsigned char 
  7089 ;; Auto vars:     Size  Location     Type
  7090 ;;  x               1   35[COMRAM] unsigned char 
  7091 ;; Return value:  Size  Location     Type
  7092 ;;                  1    wreg      void 
  7093 ;; Registers used:
  7094 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7095 ;; Tracked objects:
  7096 ;;		On entry : 0/0
  7097 ;;		On exit  : 0/0
  7098 ;;		Unchanged: 0/0
  7099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7100 ;;      Params:         1       0       0       0       0       0       0
  7101 ;;      Locals:         1       0       0       0       0       0       0
  7102 ;;      Temps:          0       0       0       0       0       0       0
  7103 ;;      Totals:         2       0       0       0       0       0       0
  7104 ;;Total ram usage:        2 bytes
  7105 ;; Hardware stack levels used:    1
  7106 ;; Hardware stack levels required when called:    6
  7107 ;; This function calls:
  7108 ;;		_LCDwrite
  7109 ;; This function is called by:
  7110 ;;		_Splash
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           	psect	text33
  7115  001D18                     __ptext33:
  7116                           	opt stack 0
  7117  001D18                     _gotoXy:
  7118                           	opt stack 23
  7119                           
  7120                           ;incstack = 0
  7121                           ;gotoXy@x stored from wreg
  7122  001D18  6E24               	movwf	gotoXy@x,c
  7123                           
  7124                           ;NokiaLCD.c: 98: y=y|0x40;
  7125  001D1A  5023               	movf	gotoXy@y,w,c
  7126  001D1C  0940               	iorlw	64
  7127  001D1E  6E23               	movwf	gotoXy@y,c
  7128                           
  7129                           ;NokiaLCD.c: 99: LCDwrite(1, y);
  7130  001D20  C023  F021         	movff	gotoXy@y,LCDwrite@data
  7131  001D24  0E01               	movlw	1
  7132  001D26  EC1F  F00F         	call	_LCDwrite
  7133                           
  7134                           ;NokiaLCD.c: 100: x=(x*6)|0x80;
  7135  001D2A  5024               	movf	gotoXy@x,w,c
  7136  001D2C  0D06               	mullw	6
  7137  001D2E  50F3               	movf	prodl,w,c
  7138  001D30  0980               	iorlw	128
  7139  001D32  6E24               	movwf	gotoXy@x,c
  7140                           
  7141                           ;NokiaLCD.c: 101: LCDwrite(1, x);
  7142  001D34  C024  F021         	movff	gotoXy@x,LCDwrite@data
  7143  001D38  0E01               	movlw	1
  7144  001D3A  EC1F  F00F         	call	_LCDwrite
  7145  001D3E  0012               	return		;funcret
  7146  001D40                     __end_of_gotoXy:
  7147                           	opt stack 0
  7148                           tosu	equ	0xFFF
  7149                           tosh	equ	0xFFE
  7150                           tosl	equ	0xFFD
  7151                           pclath	equ	0xFFA
  7152                           tblptru	equ	0xFF8
  7153                           tblptrh	equ	0xFF7
  7154                           tblptrl	equ	0xFF6
  7155                           tablat	equ	0xFF5
  7156                           prodh	equ	0xFF4
  7157                           prodl	equ	0xFF3
  7158                           intcon	equ	0xFF2
  7159                           indf0	equ	0xFEF
  7160                           postinc0	equ	0xFEE
  7161                           fsr0h	equ	0xFEA
  7162                           fsr0l	equ	0xFE9
  7163                           wreg	equ	0xFE8
  7164                           indf1	equ	0xFE7
  7165                           fsr1h	equ	0xFE2
  7166                           fsr1l	equ	0xFE1
  7167                           indf2	equ	0xFDF
  7168                           postinc2	equ	0xFDE
  7169                           postdec2	equ	0xFDD
  7170                           plusw2	equ	0xFDB
  7171                           fsr2h	equ	0xFDA
  7172                           fsr2l	equ	0xFD9
  7173                           status	equ	0xFD8
  7174                           
  7175 ;; *************** function _NokiaStr *****************
  7176 ;; Defined at:
  7177 ;;		line 128 in file "NokiaLCD.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;  str             2    0[BANK0 ] PTR unsigned char 
  7180 ;;		 -> STR_18(7), STR_17(12), 
  7181 ;; Auto vars:     Size  Location     Type
  7182 ;;		None
  7183 ;; Return value:  Size  Location     Type
  7184 ;;                  1    wreg      void 
  7185 ;; Registers used:
  7186 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7187 ;; Tracked objects:
  7188 ;;		On entry : 0/0
  7189 ;;		On exit  : 0/0
  7190 ;;		Unchanged: 0/0
  7191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7192 ;;      Params:         0       2       0       0       0       0       0
  7193 ;;      Locals:         0       0       0       0       0       0       0
  7194 ;;      Temps:          0       0       0       0       0       0       0
  7195 ;;      Totals:         0       2       0       0       0       0       0
  7196 ;;Total ram usage:        2 bytes
  7197 ;; Hardware stack levels used:    1
  7198 ;; Hardware stack levels required when called:    7
  7199 ;; This function calls:
  7200 ;;		_LcdCharacter
  7201 ;; This function is called by:
  7202 ;;		_Splash
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           	psect	text34
  7207  001C14                     __ptext34:
  7208                           	opt stack 0
  7209  001C14                     _NokiaStr:
  7210                           	opt stack 22
  7211                           
  7212                           ;NokiaLCD.c: 129: while (*str)
  7213                           
  7214                           ;incstack = 0
  7215  001C14  D00B               	goto	l4565
  7216  001C16                     l4561:
  7217                           
  7218                           ;NokiaLCD.c: 130: {
  7219                           ;NokiaLCD.c: 131: LcdCharacter(*str++);
  7220  001C16  C0D2  FFF6         	movff	NokiaStr@str,tblptrl
  7221  001C1A  C0D3  FFF7         	movff	NokiaStr@str+1,tblptrh
  7222  001C1E                     	if	0	;tblptru may be non-zero
  7223  001C1E                     	endif
  7224  001C1E                     	if	0	;tblptru may be non-zero
  7225  001C1E                     	endif
  7226  001C1E  0008               	tblrd		*
  7227  001C20  50F5               	movf	tablat,w,c
  7228  001C22  EC17  F00A         	call	_LcdCharacter
  7229  001C26  0100               	movlb	0	; () banked
  7230  001C28  4BD2               	infsnz	NokiaStr@str& (0+255),f,b
  7231  001C2A  2BD3               	incf	(NokiaStr@str+1)& (0+255),f,b
  7232  001C2C                     l4565:
  7233  001C2C  C0D2  FFF6         	movff	NokiaStr@str,tblptrl
  7234  001C30  C0D3  FFF7         	movff	NokiaStr@str+1,tblptrh
  7235  001C34                     	if	0	;tblptru may be non-zero
  7236  001C34                     	endif
  7237  001C34                     	if	0	;tblptru may be non-zero
  7238  001C34                     	endif
  7239  001C34  0008               	tblrd		*
  7240  001C36  50F5               	movf	tablat,w,c
  7241  001C38  0900               	iorlw	0
  7242  001C3A  B4D8               	btfsc	status,2,c
  7243  001C3C  0012               	return	
  7244  001C3E  D7EB               	goto	l4561
  7245  001C40                     __end_of_NokiaStr:
  7246                           	opt stack 0
  7247                           tosu	equ	0xFFF
  7248                           tosh	equ	0xFFE
  7249                           tosl	equ	0xFFD
  7250                           pclath	equ	0xFFA
  7251                           tblptru	equ	0xFF8
  7252                           tblptrh	equ	0xFF7
  7253                           tblptrl	equ	0xFF6
  7254                           tablat	equ	0xFF5
  7255                           prodh	equ	0xFF4
  7256                           prodl	equ	0xFF3
  7257                           intcon	equ	0xFF2
  7258                           indf0	equ	0xFEF
  7259                           postinc0	equ	0xFEE
  7260                           fsr0h	equ	0xFEA
  7261                           fsr0l	equ	0xFE9
  7262                           wreg	equ	0xFE8
  7263                           indf1	equ	0xFE7
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           indf2	equ	0xFDF
  7267                           postinc2	equ	0xFDE
  7268                           postdec2	equ	0xFDD
  7269                           plusw2	equ	0xFDB
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274 ;; *************** function _LcdCharacter *****************
  7275 ;; Defined at:
  7276 ;;		line 111 in file "NokiaLCD.c"
  7277 ;; Parameters:    Size  Location     Type
  7278 ;;  character       1    wreg     unsigned char 
  7279 ;; Auto vars:     Size  Location     Type
  7280 ;;  character       1   36[COMRAM] unsigned char 
  7281 ;;  index           2   37[COMRAM] int 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;                  1    wreg      void 
  7284 ;; Registers used:
  7285 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7291 ;;      Params:         0       0       0       0       0       0       0
  7292 ;;      Locals:         3       0       0       0       0       0       0
  7293 ;;      Temps:          2       0       0       0       0       0       0
  7294 ;;      Totals:         5       0       0       0       0       0       0
  7295 ;;Total ram usage:        5 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    6
  7298 ;; This function calls:
  7299 ;;		_LCDwrite
  7300 ;;		___wmul
  7301 ;; This function is called by:
  7302 ;;		_NokiaStr
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text35
  7307  00142E                     __ptext35:
  7308                           	opt stack 0
  7309  00142E                     _LcdCharacter:
  7310                           	opt stack 22
  7311                           
  7312                           ;incstack = 0
  7313                           ;LcdCharacter@character stored from wreg
  7314  00142E  6E25               	movwf	LcdCharacter@character,c
  7315                           
  7316                           ;NokiaLCD.c: 113: LCDwrite(0, 0x00);
  7317  001430  0E00               	movlw	0
  7318  001432  6E21               	movwf	LCDwrite@data,c
  7319  001434  0E00               	movlw	0
  7320  001436  EC1F  F00F         	call	_LCDwrite
  7321                           
  7322                           ;NokiaLCD.c: 114: for (int index = 0; index < 5; index++)
  7323  00143A  0E00               	movlw	0
  7324  00143C  6E27               	movwf	LcdCharacter@index+1,c
  7325  00143E  0E00               	movlw	0
  7326  001440  6E26               	movwf	LcdCharacter@index,c
  7327  001442                     l4319:
  7328  001442  BE27               	btfsc	LcdCharacter@index+1,7,c
  7329  001444  D006               	goto	l4323
  7330  001446  5027               	movf	LcdCharacter@index+1,w,c
  7331  001448  E129               	bnz	l4329
  7332  00144A  0E05               	movlw	5
  7333  00144C  5C26               	subwf	LcdCharacter@index,w,c
  7334  00144E  B0D8               	btfsc	status,0,c
  7335  001450  D025               	goto	l4329
  7336  001452                     l4323:
  7337                           
  7338                           ;NokiaLCD.c: 115: {
  7339                           ;NokiaLCD.c: 116: LCDwrite(0, FONTLOOKUP[character - 0x20][index]);
  7340  001452  0EE0               	movlw	224
  7341  001454  2425               	addwf	LcdCharacter@character,w,c
  7342  001456  6E1B               	movwf	___wmul@multiplier,c
  7343  001458  6A1C               	clrf	___wmul@multiplier+1,c
  7344  00145A  0EFF               	movlw	255
  7345  00145C  221C               	addwfc	___wmul@multiplier+1,f,c
  7346  00145E  0E00               	movlw	0
  7347  001460  6E1E               	movwf	___wmul@multiplicand+1,c
  7348  001462  0E05               	movlw	5
  7349  001464  6E1D               	movwf	___wmul@multiplicand,c
  7350  001466  ECB4  F00E         	call	___wmul	;wreg free
  7351  00146A  0EE7               	movlw	low _FONTLOOKUP
  7352  00146C  6E23               	movwf	??_LcdCharacter& (0+255),c
  7353  00146E  0E7D               	movlw	high _FONTLOOKUP
  7354  001470  6E24               	movwf	(??_LcdCharacter+1)& (0+255),c
  7355  001472  501B               	movf	?___wmul,w,c
  7356  001474  2623               	addwf	??_LcdCharacter,f,c
  7357  001476  501C               	movf	?___wmul+1,w,c
  7358  001478  2224               	addwfc	??_LcdCharacter+1,f,c
  7359  00147A  5026               	movf	LcdCharacter@index,w,c
  7360  00147C  2623               	addwf	??_LcdCharacter,f,c
  7361  00147E  5027               	movf	LcdCharacter@index+1,w,c
  7362  001480  2224               	addwfc	??_LcdCharacter+1,f,c
  7363  001482  C023  FFF6         	movff	??_LcdCharacter,tblptrl
  7364  001486  C024  FFF7         	movff	??_LcdCharacter+1,tblptrh
  7365  00148A                     	if	0	;tblptru may be non-zero
  7366  00148A                     	endif
  7367  00148A                     	if	0	;tblptru may be non-zero
  7368  00148A                     	endif
  7369  00148A  0008               	tblrd		*
  7370  00148C  CFF5 F021          	movff	tablat,LCDwrite@data
  7371  001490  0E00               	movlw	0
  7372  001492  EC1F  F00F         	call	_LCDwrite
  7373  001496  4A26               	infsnz	LcdCharacter@index,f,c
  7374  001498  2A27               	incf	LcdCharacter@index+1,f,c
  7375  00149A  D7D3               	goto	l4319
  7376  00149C                     l4329:
  7377                           
  7378                           ;NokiaLCD.c: 117: }
  7379                           ;NokiaLCD.c: 118: LCDwrite(0, 0x00);
  7380  00149C  0E00               	movlw	0
  7381  00149E  6E21               	movwf	LCDwrite@data,c
  7382  0014A0  0E00               	movlw	0
  7383  0014A2  EC1F  F00F         	call	_LCDwrite
  7384  0014A6  0012               	return		;funcret
  7385  0014A8                     __end_of_LcdCharacter:
  7386                           	opt stack 0
  7387                           tosu	equ	0xFFF
  7388                           tosh	equ	0xFFE
  7389                           tosl	equ	0xFFD
  7390                           pclath	equ	0xFFA
  7391                           tblptru	equ	0xFF8
  7392                           tblptrh	equ	0xFF7
  7393                           tblptrl	equ	0xFF6
  7394                           tablat	equ	0xFF5
  7395                           prodh	equ	0xFF4
  7396                           prodl	equ	0xFF3
  7397                           intcon	equ	0xFF2
  7398                           indf0	equ	0xFEF
  7399                           postinc0	equ	0xFEE
  7400                           fsr0h	equ	0xFEA
  7401                           fsr0l	equ	0xFE9
  7402                           wreg	equ	0xFE8
  7403                           indf1	equ	0xFE7
  7404                           fsr1h	equ	0xFE2
  7405                           fsr1l	equ	0xFE1
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           postdec2	equ	0xFDD
  7409                           plusw2	equ	0xFDB
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function ___wmul *****************
  7415 ;; Defined at:
  7416 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  multiplier      2   26[COMRAM] unsigned int 
  7419 ;;  multiplicand    2   28[COMRAM] unsigned int 
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;  product         2   30[COMRAM] unsigned int 
  7422 ;; Return value:  Size  Location     Type
  7423 ;;                  2   26[COMRAM] unsigned int 
  7424 ;; Registers used:
  7425 ;;		wreg, status,2, status,0, prodl, prodh
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7431 ;;      Params:         4       0       0       0       0       0       0
  7432 ;;      Locals:         2       0       0       0       0       0       0
  7433 ;;      Temps:          0       0       0       0       0       0       0
  7434 ;;      Totals:         6       0       0       0       0       0       0
  7435 ;;Total ram usage:        6 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    4
  7438 ;; This function calls:
  7439 ;;		Nothing
  7440 ;; This function is called by:
  7441 ;;		_LcdCharacter
  7442 ;;		__doprnt
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text36
  7447  001D68                     __ptext36:
  7448                           	opt stack 0
  7449  001D68                     ___wmul:
  7450                           	opt stack 22
  7451                           
  7452                           ;incstack = 0
  7453  001D68  501B               	movf	___wmul@multiplier,w,c
  7454  001D6A  021D               	mulwf	___wmul@multiplicand,c
  7455  001D6C  CFF3 F01F          	movff	prodl,___wmul@product
  7456  001D70  CFF4 F020          	movff	prodh,___wmul@product+1
  7457  001D74  501B               	movf	___wmul@multiplier,w,c
  7458  001D76  021E               	mulwf	___wmul@multiplicand+1,c
  7459  001D78  50F3               	movf	prodl,w,c
  7460  001D7A  2620               	addwf	___wmul@product+1,f,c
  7461  001D7C  501C               	movf	___wmul@multiplier+1,w,c
  7462  001D7E  021D               	mulwf	___wmul@multiplicand,c
  7463  001D80  50F3               	movf	prodl,w,c
  7464  001D82  2620               	addwf	___wmul@product+1,f,c
  7465  001D84  C01F  F01B         	movff	___wmul@product,?___wmul
  7466  001D88  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  7467  001D8C  0012               	return	
  7468  001D8E                     __end_of___wmul:
  7469                           	opt stack 0
  7470                           tosu	equ	0xFFF
  7471                           tosh	equ	0xFFE
  7472                           tosl	equ	0xFFD
  7473                           pclath	equ	0xFFA
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           prodh	equ	0xFF4
  7479                           prodl	equ	0xFF3
  7480                           intcon	equ	0xFF2
  7481                           indf0	equ	0xFEF
  7482                           postinc0	equ	0xFEE
  7483                           fsr0h	equ	0xFEA
  7484                           fsr0l	equ	0xFE9
  7485                           wreg	equ	0xFE8
  7486                           indf1	equ	0xFE7
  7487                           fsr1h	equ	0xFE2
  7488                           fsr1l	equ	0xFE1
  7489                           indf2	equ	0xFDF
  7490                           postinc2	equ	0xFDE
  7491                           postdec2	equ	0xFDD
  7492                           plusw2	equ	0xFDB
  7493                           fsr2h	equ	0xFDA
  7494                           fsr2l	equ	0xFD9
  7495                           status	equ	0xFD8
  7496                           
  7497 ;; *************** function _SYSTEM_Initialize *****************
  7498 ;; Defined at:
  7499 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;		None
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      void 
  7506 ;; Registers used:
  7507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7513 ;;      Params:         0       0       0       0       0       0       0
  7514 ;;      Locals:         0       0       0       0       0       0       0
  7515 ;;      Temps:          0       0       0       0       0       0       0
  7516 ;;      Totals:         0       0       0       0       0       0       0
  7517 ;;Total ram usage:        0 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    7
  7520 ;; This function calls:
  7521 ;;		_EUSART1_Initialize
  7522 ;;		_EUSART2_Initialize
  7523 ;;		_INTERRUPT_Initialize
  7524 ;;		_OSCILLATOR_Initialize
  7525 ;;		_PIN_MANAGER_Initialize
  7526 ;;		_TMR0_Initialize
  7527 ;; This function is called by:
  7528 ;;		_main
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text37
  7533  001E24                     __ptext37:
  7534                           	opt stack 0
  7535  001E24                     _SYSTEM_Initialize:
  7536                           	opt stack 23
  7537                           
  7538                           ;mcc.c: 113: OSCILLATOR_Initialize();
  7539                           
  7540                           ;incstack = 0
  7541  001E24  EC54  F00F         	call	_OSCILLATOR_Initialize	;wreg free
  7542                           
  7543                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  7544  001E28  ECCB  F00B         	call	_PIN_MANAGER_Initialize	;wreg free
  7545                           
  7546                           ;mcc.c: 115: INTERRUPT_Initialize();
  7547  001E2C  EC62  F00F         	call	_INTERRUPT_Initialize	;wreg free
  7548                           
  7549                           ;mcc.c: 116: EUSART1_Initialize();
  7550  001E30  EC06  F00D         	call	_EUSART1_Initialize	;wreg free
  7551                           
  7552                           ;mcc.c: 117: EUSART2_Initialize();
  7553  001E34  EC78  F00D         	call	_EUSART2_Initialize	;wreg free
  7554                           
  7555                           ;mcc.c: 118: TMR0_Initialize();
  7556  001E38  EC20  F00E         	call	_TMR0_Initialize	;wreg free
  7557  001E3C  0012               	return		;funcret
  7558  001E3E                     __end_of_SYSTEM_Initialize:
  7559                           	opt stack 0
  7560                           tosu	equ	0xFFF
  7561                           tosh	equ	0xFFE
  7562                           tosl	equ	0xFFD
  7563                           pclath	equ	0xFFA
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           indf0	equ	0xFEF
  7572                           postinc0	equ	0xFEE
  7573                           fsr0h	equ	0xFEA
  7574                           fsr0l	equ	0xFE9
  7575                           wreg	equ	0xFE8
  7576                           indf1	equ	0xFE7
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           plusw2	equ	0xFDB
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _TMR0_Initialize *****************
  7588 ;; Defined at:
  7589 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;		None
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;		None
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  2  182[None  ] int 
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0, cstack
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7603 ;;      Params:         0       0       0       0       0       0       0
  7604 ;;      Locals:         0       0       0       0       0       0       0
  7605 ;;      Temps:          2       0       0       0       0       0       0
  7606 ;;      Totals:         2       0       0       0       0       0       0
  7607 ;;Total ram usage:        2 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    5
  7610 ;; This function calls:
  7611 ;;		_TMR0_StartTimer
  7612 ;; This function is called by:
  7613 ;;		_SYSTEM_Initialize
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text38
  7618  001C40                     __ptext38:
  7619                           	opt stack 0
  7620  001C40                     _TMR0_Initialize:
  7621                           	opt stack 24
  7622                           
  7623                           ;tmr0.c: 74: T0CON = 0x94;
  7624                           
  7625                           ;incstack = 0
  7626  001C40  0E94               	movlw	148
  7627  001C42  6ED5               	movwf	4053,c	;volatile
  7628                           
  7629                           ;tmr0.c: 76: TMR0H = 0xCF;
  7630  001C44  0ECF               	movlw	207
  7631  001C46  6ED7               	movwf	4055,c	;volatile
  7632                           
  7633                           ;tmr0.c: 78: TMR0L = 0x2C;
  7634  001C48  0E2C               	movlw	44
  7635  001C4A  6ED6               	movwf	4054,c	;volatile
  7636                           
  7637                           ;tmr0.c: 81: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  7638  001C4C  50D6               	movf	4054,w,c	;volatile
  7639  001C4E  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  7640  001C52  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7641  001C54  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7642  001C58  6A1B               	clrf	??_TMR0_Initialize,c
  7643  001C5A  101B               	iorwf	??_TMR0_Initialize,w,c
  7644  001C5C  6E32               	movwf	_timer0ReloadVal16bit,c
  7645  001C5E  501C               	movf	??_TMR0_Initialize+1,w,c
  7646  001C60  6E33               	movwf	_timer0ReloadVal16bit+1,c
  7647                           
  7648                           ;tmr0.c: 84: INTCONbits.TMR0IF = 0;
  7649  001C62  94F2               	bcf	intcon,2,c	;volatile
  7650                           
  7651                           ;tmr0.c: 87: INTCONbits.TMR0IE = 1;
  7652  001C64  8AF2               	bsf	intcon,5,c	;volatile
  7653                           
  7654                           ;tmr0.c: 90: TMR0_StartTimer();
  7655  001C66  EC6F  F00F         	call	_TMR0_StartTimer	;wreg free
  7656  001C6A  0012               	return		;funcret
  7657  001C6C                     __end_of_TMR0_Initialize:
  7658                           	opt stack 0
  7659                           tosu	equ	0xFFF
  7660                           tosh	equ	0xFFE
  7661                           tosl	equ	0xFFD
  7662                           pclath	equ	0xFFA
  7663                           tblptru	equ	0xFF8
  7664                           tblptrh	equ	0xFF7
  7665                           tblptrl	equ	0xFF6
  7666                           tablat	equ	0xFF5
  7667                           prodh	equ	0xFF4
  7668                           prodl	equ	0xFF3
  7669                           intcon	equ	0xFF2
  7670                           indf0	equ	0xFEF
  7671                           postinc0	equ	0xFEE
  7672                           fsr0h	equ	0xFEA
  7673                           fsr0l	equ	0xFE9
  7674                           wreg	equ	0xFE8
  7675                           indf1	equ	0xFE7
  7676                           fsr1h	equ	0xFE2
  7677                           fsr1l	equ	0xFE1
  7678                           indf2	equ	0xFDF
  7679                           postinc2	equ	0xFDE
  7680                           postdec2	equ	0xFDD
  7681                           plusw2	equ	0xFDB
  7682                           fsr2h	equ	0xFDA
  7683                           fsr2l	equ	0xFD9
  7684                           status	equ	0xFD8
  7685                           
  7686 ;; *************** function _TMR0_StartTimer *****************
  7687 ;; Defined at:
  7688 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  1    wreg      void 
  7695 ;; Registers used:
  7696 ;;		None
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7702 ;;      Params:         0       0       0       0       0       0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    4
  7709 ;; This function calls:
  7710 ;;		Nothing
  7711 ;; This function is called by:
  7712 ;;		_TMR0_Initialize
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text39
  7717  001EDE                     __ptext39:
  7718                           	opt stack 0
  7719  001EDE                     _TMR0_StartTimer:
  7720                           	opt stack 24
  7721                           
  7722                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  7723                           
  7724                           ;incstack = 0
  7725  001EDE  8ED5               	bsf	4053,7,c	;volatile
  7726  001EE0  0012               	return		;funcret
  7727  001EE2                     __end_of_TMR0_StartTimer:
  7728                           	opt stack 0
  7729                           tosu	equ	0xFFF
  7730                           tosh	equ	0xFFE
  7731                           tosl	equ	0xFFD
  7732                           pclath	equ	0xFFA
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           indf0	equ	0xFEF
  7741                           postinc0	equ	0xFEE
  7742                           fsr0h	equ	0xFEA
  7743                           fsr0l	equ	0xFE9
  7744                           wreg	equ	0xFE8
  7745                           indf1	equ	0xFE7
  7746                           fsr1h	equ	0xFE2
  7747                           fsr1l	equ	0xFE1
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           plusw2	equ	0xFDB
  7752                           fsr2h	equ	0xFDA
  7753                           fsr2l	equ	0xFD9
  7754                           status	equ	0xFD8
  7755                           
  7756 ;; *************** function _PIN_MANAGER_Initialize *****************
  7757 ;; Defined at:
  7758 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;		None
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;		None
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7772 ;;      Params:         0       0       0       0       0       0       0
  7773 ;;      Locals:         0       0       0       0       0       0       0
  7774 ;;      Temps:          0       0       0       0       0       0       0
  7775 ;;      Totals:         0       0       0       0       0       0       0
  7776 ;;Total ram usage:        0 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    4
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		_SYSTEM_Initialize
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text40
  7787  001796                     __ptext40:
  7788                           	opt stack 0
  7789  001796                     _PIN_MANAGER_Initialize:
  7790                           	opt stack 25
  7791                           
  7792                           ;pin_manager.c: 51: LATB = 0x0;
  7793                           
  7794                           ;incstack = 0
  7795  001796  0E00               	movlw	0
  7796  001798  6E8A               	movwf	3978,c	;volatile
  7797                           
  7798                           ;pin_manager.c: 52: LATA = 0x0;
  7799  00179A  0E00               	movlw	0
  7800  00179C  6E89               	movwf	3977,c	;volatile
  7801                           
  7802                           ;pin_manager.c: 53: ANSELE = 0x7;
  7803  00179E  0E07               	movlw	7
  7804  0017A0  010F               	movlb	15	; () banked
  7805  0017A2  6F3C               	movwf	60,b	;volatile
  7806                           
  7807                           ;pin_manager.c: 54: LATE = 0x0;
  7808  0017A4  0E00               	movlw	0
  7809  0017A6  6E8D               	movwf	3981,c	;volatile
  7810                           
  7811                           ;pin_manager.c: 55: LATD = 0x0;
  7812  0017A8  0E00               	movlw	0
  7813  0017AA  6E8C               	movwf	3980,c	;volatile
  7814                           
  7815                           ;pin_manager.c: 56: LATC = 0x0;
  7816  0017AC  0E00               	movlw	0
  7817  0017AE  6E8B               	movwf	3979,c	;volatile
  7818                           
  7819                           ;pin_manager.c: 57: ANSELA = 0x2F;
  7820  0017B0  0E2F               	movlw	47
  7821  0017B2  010F               	movlb	15	; () banked
  7822  0017B4  6F38               	movwf	56,b	;volatile
  7823                           
  7824                           ;pin_manager.c: 58: ANSELB = 0x3F;
  7825  0017B6  0E3F               	movlw	63
  7826  0017B8  010F               	movlb	15	; () banked
  7827  0017BA  6F39               	movwf	57,b	;volatile
  7828                           
  7829                           ;pin_manager.c: 59: ANSELC = 0xEC;
  7830  0017BC  0EEC               	movlw	236
  7831  0017BE  010F               	movlb	15	; () banked
  7832  0017C0  6F3A               	movwf	58,b	;volatile
  7833                           
  7834                           ;pin_manager.c: 60: ANSELD = 0x3F;
  7835  0017C2  0E3F               	movlw	63
  7836  0017C4  010F               	movlb	15	; () banked
  7837  0017C6  6F3B               	movwf	59,b	;volatile
  7838                           
  7839                           ;pin_manager.c: 61: WPUB = 0xFC;
  7840  0017C8  0EFC               	movlw	252
  7841  0017CA  6E61               	movwf	3937,c	;volatile
  7842                           
  7843                           ;pin_manager.c: 62: TRISD = 0xF2;
  7844  0017CC  0EF2               	movlw	242
  7845  0017CE  6E95               	movwf	3989,c	;volatile
  7846                           
  7847                           ;pin_manager.c: 63: TRISE = 0x7;
  7848  0017D0  0E07               	movlw	7
  7849  0017D2  6E96               	movwf	3990,c	;volatile
  7850                           
  7851                           ;pin_manager.c: 64: TRISB = 0xC4;
  7852  0017D4  0EC4               	movlw	196
  7853  0017D6  6E93               	movwf	3987,c	;volatile
  7854                           
  7855                           ;pin_manager.c: 65: TRISC = 0xD4;
  7856  0017D8  0ED4               	movlw	212
  7857  0017DA  6E94               	movwf	3988,c	;volatile
  7858                           
  7859                           ;pin_manager.c: 66: TRISA = 0x37;
  7860  0017DC  0E37               	movlw	55
  7861  0017DE  6E92               	movwf	3986,c	;volatile
  7862                           
  7863                           ; BSR set to: 15
  7864                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  7865  0017E0  9EF1               	bcf	intcon2,7,c	;volatile
  7866                           
  7867                           ; BSR set to: 15
  7868                           
  7869                           ; BSR set to: 15
  7870                           
  7871                           ;pin_manager.c: 70: do { ANSB0 = 0; } while(0);
  7872  0017E2  010F               	movlb	15	; () banked
  7873  0017E4  9139               	bcf	57,0,b	;volatile
  7874                           
  7875                           ; BSR set to: 15
  7876                           
  7877                           ; BSR set to: 15
  7878                           
  7879                           ;pin_manager.c: 71: do { ANSB1 = 0; } while(0);
  7880                           
  7881                           ; BSR set to: 15
  7882  0017E6  010F               	movlb	15	; () banked
  7883  0017E8  9339               	bcf	57,1,b	;volatile
  7884                           
  7885                           ; BSR set to: 15
  7886                           
  7887                           ; BSR set to: 15
  7888                           
  7889                           ;pin_manager.c: 73: do { TRISB0 = 0; } while(0);
  7890                           
  7891                           ; BSR set to: 15
  7892  0017EA  9093               	bcf	3987,0,c	;volatile
  7893                           
  7894                           ; BSR set to: 15
  7895                           
  7896                           ; BSR set to: 15
  7897                           
  7898                           ;pin_manager.c: 74: do { TRISB1 = 0; } while(0);
  7899                           
  7900                           ; BSR set to: 15
  7901  0017EC  9293               	bcf	3987,1,c	;volatile
  7902                           
  7903                           ; BSR set to: 15
  7904                           ;pin_manager.c: 78: INTCONbits.RBIE = 0;
  7905                           
  7906                           ; BSR set to: 15
  7907  0017EE  96F2               	bcf	intcon,3,c	;volatile
  7908                           
  7909                           ; BSR set to: 15
  7910  0017F0  0012               	return		;funcret
  7911  0017F2                     __end_of_PIN_MANAGER_Initialize:
  7912                           	opt stack 0
  7913                           tosu	equ	0xFFF
  7914                           tosh	equ	0xFFE
  7915                           tosl	equ	0xFFD
  7916                           pclath	equ	0xFFA
  7917                           tblptru	equ	0xFF8
  7918                           tblptrh	equ	0xFF7
  7919                           tblptrl	equ	0xFF6
  7920                           tablat	equ	0xFF5
  7921                           prodh	equ	0xFF4
  7922                           prodl	equ	0xFF3
  7923                           intcon	equ	0xFF2
  7924                           intcon2	equ	0xFF1
  7925                           indf0	equ	0xFEF
  7926                           postinc0	equ	0xFEE
  7927                           fsr0h	equ	0xFEA
  7928                           fsr0l	equ	0xFE9
  7929                           wreg	equ	0xFE8
  7930                           indf1	equ	0xFE7
  7931                           fsr1h	equ	0xFE2
  7932                           fsr1l	equ	0xFE1
  7933                           indf2	equ	0xFDF
  7934                           postinc2	equ	0xFDE
  7935                           postdec2	equ	0xFDD
  7936                           plusw2	equ	0xFDB
  7937                           fsr2h	equ	0xFDA
  7938                           fsr2l	equ	0xFD9
  7939                           status	equ	0xFD8
  7940                           
  7941 ;; *************** function _OSCILLATOR_Initialize *****************
  7942 ;; Defined at:
  7943 ;;		line 121 in file "mcc_generated_files/mcc.c"
  7944 ;; Parameters:    Size  Location     Type
  7945 ;;		None
  7946 ;; Auto vars:     Size  Location     Type
  7947 ;;		None
  7948 ;; Return value:  Size  Location     Type
  7949 ;;                  1    wreg      void 
  7950 ;; Registers used:
  7951 ;;		wreg, status,2
  7952 ;; Tracked objects:
  7953 ;;		On entry : 0/0
  7954 ;;		On exit  : 0/0
  7955 ;;		Unchanged: 0/0
  7956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7957 ;;      Params:         0       0       0       0       0       0       0
  7958 ;;      Locals:         0       0       0       0       0       0       0
  7959 ;;      Temps:          0       0       0       0       0       0       0
  7960 ;;      Totals:         0       0       0       0       0       0       0
  7961 ;;Total ram usage:        0 bytes
  7962 ;; Hardware stack levels used:    1
  7963 ;; Hardware stack levels required when called:    4
  7964 ;; This function calls:
  7965 ;;		Nothing
  7966 ;; This function is called by:
  7967 ;;		_SYSTEM_Initialize
  7968 ;; This function uses a non-reentrant model
  7969 ;;
  7970                           
  7971                           	psect	text41
  7972  001EA8                     __ptext41:
  7973                           	opt stack 0
  7974  001EA8                     _OSCILLATOR_Initialize:
  7975                           	opt stack 25
  7976                           
  7977                           ;mcc.c: 123: OSCCON = 0x70;
  7978                           
  7979                           ; BSR set to: 15
  7980                           ;incstack = 0
  7981  001EA8  0E70               	movlw	112
  7982  001EAA  6ED3               	movwf	4051,c	;volatile
  7983                           
  7984                           ;mcc.c: 125: OSCCON2 = 0x04;
  7985  001EAC  0E04               	movlw	4
  7986  001EAE  6ED2               	movwf	4050,c	;volatile
  7987                           
  7988                           ;mcc.c: 127: OSCTUNE = 0x00;
  7989  001EB0  0E00               	movlw	0
  7990  001EB2  6E9B               	movwf	3995,c	;volatile
  7991  001EB4  0012               	return		;funcret
  7992  001EB6                     __end_of_OSCILLATOR_Initialize:
  7993                           	opt stack 0
  7994                           tosu	equ	0xFFF
  7995                           tosh	equ	0xFFE
  7996                           tosl	equ	0xFFD
  7997                           pclath	equ	0xFFA
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           intcon	equ	0xFF2
  8005                           intcon2	equ	0xFF1
  8006                           indf0	equ	0xFEF
  8007                           postinc0	equ	0xFEE
  8008                           fsr0h	equ	0xFEA
  8009                           fsr0l	equ	0xFE9
  8010                           wreg	equ	0xFE8
  8011                           indf1	equ	0xFE7
  8012                           fsr1h	equ	0xFE2
  8013                           fsr1l	equ	0xFE1
  8014                           indf2	equ	0xFDF
  8015                           postinc2	equ	0xFDE
  8016                           postdec2	equ	0xFDD
  8017                           plusw2	equ	0xFDB
  8018                           fsr2h	equ	0xFDA
  8019                           fsr2l	equ	0xFD9
  8020                           status	equ	0xFD8
  8021                           
  8022 ;; *************** function _INTERRUPT_Initialize *****************
  8023 ;; Defined at:
  8024 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;		None
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;		None
  8029 ;; Return value:  Size  Location     Type
  8030 ;;                  1    wreg      void 
  8031 ;; Registers used:
  8032 ;;		None
  8033 ;; Tracked objects:
  8034 ;;		On entry : 0/0
  8035 ;;		On exit  : 0/0
  8036 ;;		Unchanged: 0/0
  8037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8038 ;;      Params:         0       0       0       0       0       0       0
  8039 ;;      Locals:         0       0       0       0       0       0       0
  8040 ;;      Temps:          0       0       0       0       0       0       0
  8041 ;;      Totals:         0       0       0       0       0       0       0
  8042 ;;Total ram usage:        0 bytes
  8043 ;; Hardware stack levels used:    1
  8044 ;; Hardware stack levels required when called:    4
  8045 ;; This function calls:
  8046 ;;		Nothing
  8047 ;; This function is called by:
  8048 ;;		_SYSTEM_Initialize
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           	psect	text42
  8053  001EC4                     __ptext42:
  8054                           	opt stack 0
  8055  001EC4                     _INTERRUPT_Initialize:
  8056                           	opt stack 25
  8057                           
  8058                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8059                           
  8060                           ;incstack = 0
  8061  001EC4  9ED0               	bcf	4048,7,c	;volatile
  8062                           
  8063                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  8064  001EC6  9AA5               	bcf	4005,5,c	;volatile
  8065                           
  8066                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  8067  001EC8  98A5               	bcf	4005,4,c	;volatile
  8068                           
  8069                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  8070  001ECA  9A9F               	bcf	3999,5,c	;volatile
  8071                           
  8072                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  8073  001ECC  989F               	bcf	3999,4,c	;volatile
  8074  001ECE  0012               	return		;funcret
  8075  001ED0                     __end_of_INTERRUPT_Initialize:
  8076                           	opt stack 0
  8077                           tosu	equ	0xFFF
  8078                           tosh	equ	0xFFE
  8079                           tosl	equ	0xFFD
  8080                           pclath	equ	0xFFA
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           intcon2	equ	0xFF1
  8089                           indf0	equ	0xFEF
  8090                           postinc0	equ	0xFEE
  8091                           fsr0h	equ	0xFEA
  8092                           fsr0l	equ	0xFE9
  8093                           wreg	equ	0xFE8
  8094                           indf1	equ	0xFE7
  8095                           fsr1h	equ	0xFE2
  8096                           fsr1l	equ	0xFE1
  8097                           indf2	equ	0xFDF
  8098                           postinc2	equ	0xFDE
  8099                           postdec2	equ	0xFDD
  8100                           plusw2	equ	0xFDB
  8101                           fsr2h	equ	0xFDA
  8102                           fsr2l	equ	0xFD9
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function _EUSART2_Initialize *****************
  8106 ;; Defined at:
  8107 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;		None
  8110 ;; Auto vars:     Size  Location     Type
  8111 ;;		None
  8112 ;; Return value:  Size  Location     Type
  8113 ;;                  1    wreg      void 
  8114 ;; Registers used:
  8115 ;;		wreg, status,2
  8116 ;; Tracked objects:
  8117 ;;		On entry : 0/0
  8118 ;;		On exit  : 0/0
  8119 ;;		Unchanged: 0/0
  8120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8121 ;;      Params:         0       0       0       0       0       0       0
  8122 ;;      Locals:         0       0       0       0       0       0       0
  8123 ;;      Temps:          0       0       0       0       0       0       0
  8124 ;;      Totals:         0       0       0       0       0       0       0
  8125 ;;Total ram usage:        0 bytes
  8126 ;; Hardware stack levels used:    1
  8127 ;; Hardware stack levels required when called:    4
  8128 ;; This function calls:
  8129 ;;		Nothing
  8130 ;; This function is called by:
  8131 ;;		_SYSTEM_Initialize
  8132 ;; This function uses a non-reentrant model
  8133 ;;
  8134                           
  8135                           	psect	text43
  8136  001AF0                     __ptext43:
  8137                           	opt stack 0
  8138  001AF0                     _EUSART2_Initialize:
  8139                           	opt stack 25
  8140                           
  8141                           ;eusart2.c: 78: PIE1bits.RC1IE = 0;
  8142                           
  8143                           ;incstack = 0
  8144  001AF0  9A9D               	bcf	3997,5,c	;volatile
  8145                           
  8146                           ;eusart2.c: 79: PIE1bits.TX1IE = 0;
  8147  001AF2  989D               	bcf	3997,4,c	;volatile
  8148                           
  8149                           ;eusart2.c: 84: BAUD1CON = 0x48;
  8150  001AF4  0E48               	movlw	72
  8151  001AF6  6EB8               	movwf	4024,c	;volatile
  8152                           
  8153                           ;eusart2.c: 87: RC1STA = 0x90;
  8154  001AF8  0E90               	movlw	144
  8155  001AFA  6EAB               	movwf	4011,c	;volatile
  8156                           
  8157                           ;eusart2.c: 90: TX1STA = 0x26;
  8158  001AFC  0E26               	movlw	38
  8159  001AFE  6EAC               	movwf	4012,c	;volatile
  8160                           
  8161                           ;eusart2.c: 93: SPBRG1 = 0x33;
  8162  001B00  0E33               	movlw	51
  8163  001B02  6EAF               	movwf	4015,c	;volatile
  8164                           
  8165                           ;eusart2.c: 96: SPBRGH1 = 0x00;
  8166  001B04  0E00               	movlw	0
  8167  001B06  6EB0               	movwf	4016,c	;volatile
  8168                           
  8169                           ;eusart2.c: 100: eusart1TxHead = 0;
  8170  001B08  0E00               	movlw	0
  8171  001B0A  6E3B               	movwf	_eusart1TxHead,c
  8172                           
  8173                           ;eusart2.c: 101: eusart1TxTail = 0;
  8174  001B0C  0E00               	movlw	0
  8175  001B0E  6E3C               	movwf	_eusart1TxTail,c
  8176                           
  8177                           ;eusart2.c: 102: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  8178  001B10  0E08               	movlw	8
  8179  001B12  6E3A               	movwf	_eusart1TxBufferRemaining,c	;volatile
  8180                           
  8181                           ;eusart2.c: 104: eusart1RxHead = 0;
  8182  001B14  0E00               	movlw	0
  8183  001B16  6E38               	movwf	_eusart1RxHead,c
  8184                           
  8185                           ;eusart2.c: 105: eusart1RxTail = 0;
  8186  001B18  0E00               	movlw	0
  8187  001B1A  6E39               	movwf	_eusart1RxTail,c
  8188                           
  8189                           ;eusart2.c: 106: eusart1RxCount = 0;
  8190  001B1C  0E00               	movlw	0
  8191  001B1E  6E37               	movwf	_eusart1RxCount,c	;volatile
  8192                           
  8193                           ;eusart2.c: 109: PIE1bits.RC1IE = 1;
  8194  001B20  8A9D               	bsf	3997,5,c	;volatile
  8195  001B22  0012               	return		;funcret
  8196  001B24                     __end_of_EUSART2_Initialize:
  8197                           	opt stack 0
  8198                           tosu	equ	0xFFF
  8199                           tosh	equ	0xFFE
  8200                           tosl	equ	0xFFD
  8201                           pclath	equ	0xFFA
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           intcon2	equ	0xFF1
  8210                           indf0	equ	0xFEF
  8211                           postinc0	equ	0xFEE
  8212                           fsr0h	equ	0xFEA
  8213                           fsr0l	equ	0xFE9
  8214                           wreg	equ	0xFE8
  8215                           indf1	equ	0xFE7
  8216                           fsr1h	equ	0xFE2
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           plusw2	equ	0xFDB
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _EUSART1_Initialize *****************
  8227 ;; Defined at:
  8228 ;;		line 23 in file "UART.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  2  178[None  ] int 
  8235 ;; Registers used:
  8236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8242 ;;      Params:         0       0       0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0
  8245 ;;      Totals:         0       0       0       0       0       0       0
  8246 ;;Total ram usage:        0 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    6
  8249 ;; This function calls:
  8250 ;;		_UART_buff_init
  8251 ;; This function is called by:
  8252 ;;		_SYSTEM_Initialize
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text44
  8257  001A0C                     __ptext44:
  8258                           	opt stack 0
  8259  001A0C                     _EUSART1_Initialize:
  8260                           	opt stack 23
  8261                           
  8262                           ;UART.c: 25: PIE3bits.RC2IE = 0;
  8263                           
  8264                           ;incstack = 0
  8265  001A0C  9AA3               	bcf	4003,5,c	;volatile
  8266                           
  8267                           ;UART.c: 26: PIE3bits.TX2IE = 0;
  8268  001A0E  98A3               	bcf	4003,4,c	;volatile
  8269                           
  8270                           ;UART.c: 31: BAUD2CON = 0x48;
  8271  001A10  0E48               	movlw	72
  8272  001A12  6E70               	movwf	3952,c	;volatile
  8273                           
  8274                           ;UART.c: 34: RC2STA = 0x98;
  8275  001A14  0E98               	movlw	152
  8276  001A16  6E71               	movwf	3953,c	;volatile
  8277                           
  8278                           ;UART.c: 37: TX2STA = 0x26;
  8279  001A18  0E26               	movlw	38
  8280  001A1A  6E72               	movwf	3954,c	;volatile
  8281                           
  8282                           ;UART.c: 40: SPBRG2 = (((8000000/38400)/4)-1);
  8283  001A1C  0E33               	movlw	51
  8284  001A1E  6E75               	movwf	3957,c	;volatile
  8285                           
  8286                           ;UART.c: 43: SPBRGH2 = 0x00;
  8287  001A20  0E00               	movlw	0
  8288  001A22  6E76               	movwf	3958,c	;volatile
  8289                           
  8290                           ;UART.c: 46: TXREG2 = 0x00;
  8291  001A24  0E00               	movlw	0
  8292  001A26  6E73               	movwf	3955,c	;volatile
  8293                           
  8294                           ;UART.c: 49: RCREG2 = 0x00;
  8295  001A28  0E00               	movlw	0
  8296  001A2A  6E74               	movwf	3956,c	;volatile
  8297                           
  8298                           ;UART.c: 51: UART_buff_init(&input_buffer);
  8299  001A2C  0E00               	movlw	low _input_buffer
  8300  001A2E  6E23               	movwf	UART_buff_init@_this,c
  8301  001A30  0E02               	movlw	high _input_buffer
  8302  001A32  6E24               	movwf	UART_buff_init@_this+1,c
  8303  001A34  ECF4  F00E         	call	_UART_buff_init	;wreg free
  8304                           
  8305                           ;UART.c: 52: UART_buff_init(&output_buffer);
  8306  001A38  0E00               	movlw	low _output_buffer
  8307  001A3A  6E23               	movwf	UART_buff_init@_this,c
  8308  001A3C  0E03               	movlw	high _output_buffer
  8309  001A3E  6E24               	movwf	UART_buff_init@_this+1,c
  8310  001A40  ECF4  F00E         	call	_UART_buff_init	;wreg free
  8311                           
  8312                           ;UART.c: 54: PIE3bits.RC2IE = 1;
  8313  001A44  8AA3               	bsf	4003,5,c	;volatile
  8314  001A46  0012               	return		;funcret
  8315  001A48                     __end_of_EUSART1_Initialize:
  8316                           	opt stack 0
  8317                           tosu	equ	0xFFF
  8318                           tosh	equ	0xFFE
  8319                           tosl	equ	0xFFD
  8320                           pclath	equ	0xFFA
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           intcon	equ	0xFF2
  8328                           intcon2	equ	0xFF1
  8329                           indf0	equ	0xFEF
  8330                           postinc0	equ	0xFEE
  8331                           fsr0h	equ	0xFEA
  8332                           fsr0l	equ	0xFE9
  8333                           wreg	equ	0xFE8
  8334                           indf1	equ	0xFE7
  8335                           fsr1h	equ	0xFE2
  8336                           fsr1l	equ	0xFE1
  8337                           indf2	equ	0xFDF
  8338                           postinc2	equ	0xFDE
  8339                           postdec2	equ	0xFDD
  8340                           plusw2	equ	0xFDB
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _UART_buff_init *****************
  8346 ;; Defined at:
  8347 ;;		line 58 in file "UART.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  8350 ;;		 -> output_buffer(206), input_buffer(206), 
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;		None
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      void 
  8355 ;; Registers used:
  8356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8357 ;; Tracked objects:
  8358 ;;		On entry : 0/0
  8359 ;;		On exit  : 0/0
  8360 ;;		Unchanged: 0/0
  8361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8362 ;;      Params:         2       0       0       0       0       0       0
  8363 ;;      Locals:         0       0       0       0       0       0       0
  8364 ;;      Temps:          0       0       0       0       0       0       0
  8365 ;;      Totals:         2       0       0       0       0       0       0
  8366 ;;Total ram usage:        2 bytes
  8367 ;; Hardware stack levels used:    1
  8368 ;; Hardware stack levels required when called:    5
  8369 ;; This function calls:
  8370 ;;		_memset
  8371 ;; This function is called by:
  8372 ;;		_EUSART1_Initialize
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376                           	psect	text45
  8377  001DE8                     __ptext45:
  8378                           	opt stack 0
  8379  001DE8                     _UART_buff_init:
  8380                           	opt stack 23
  8381                           
  8382                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  8383                           
  8384                           ;incstack = 0
  8385  001DE8  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  8386  001DEC  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  8387  001DF0  0E00               	movlw	0
  8388  001DF2  6E1E               	movwf	memset@c+1,c
  8389  001DF4  0E00               	movlw	0
  8390  001DF6  6E1D               	movwf	memset@c,c
  8391  001DF8  0E00               	movlw	0
  8392  001DFA  6E20               	movwf	memset@n+1,c
  8393  001DFC  0ECE               	movlw	206
  8394  001DFE  6E1F               	movwf	memset@n,c
  8395  001E00  EC36  F00E         	call	_memset	;wreg free
  8396  001E04  0012               	return		;funcret
  8397  001E06                     __end_of_UART_buff_init:
  8398                           	opt stack 0
  8399                           tosu	equ	0xFFF
  8400                           tosh	equ	0xFFE
  8401                           tosl	equ	0xFFD
  8402                           pclath	equ	0xFFA
  8403                           tblptru	equ	0xFF8
  8404                           tblptrh	equ	0xFF7
  8405                           tblptrl	equ	0xFF6
  8406                           tablat	equ	0xFF5
  8407                           prodh	equ	0xFF4
  8408                           prodl	equ	0xFF3
  8409                           intcon	equ	0xFF2
  8410                           intcon2	equ	0xFF1
  8411                           indf0	equ	0xFEF
  8412                           postinc0	equ	0xFEE
  8413                           fsr0h	equ	0xFEA
  8414                           fsr0l	equ	0xFE9
  8415                           wreg	equ	0xFE8
  8416                           indf1	equ	0xFE7
  8417                           fsr1h	equ	0xFE2
  8418                           fsr1l	equ	0xFE1
  8419                           indf2	equ	0xFDF
  8420                           postinc2	equ	0xFDE
  8421                           postdec2	equ	0xFDD
  8422                           plusw2	equ	0xFDB
  8423                           fsr2h	equ	0xFDA
  8424                           fsr2l	equ	0xFD9
  8425                           status	equ	0xFD8
  8426                           
  8427 ;; *************** function _memset *****************
  8428 ;; Defined at:
  8429 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  8430 ;; Parameters:    Size  Location     Type
  8431 ;;  p1              2   26[COMRAM] PTR void 
  8432 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8433 ;;  c               2   28[COMRAM] int 
  8434 ;;  n               2   30[COMRAM] unsigned int 
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  p               2   32[COMRAM] PTR unsigned char 
  8437 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  2   26[COMRAM] PTR void 
  8440 ;; Registers used:
  8441 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8447 ;;      Params:         6       0       0       0       0       0       0
  8448 ;;      Locals:         2       0       0       0       0       0       0
  8449 ;;      Temps:          0       0       0       0       0       0       0
  8450 ;;      Totals:         8       0       0       0       0       0       0
  8451 ;;Total ram usage:        8 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    4
  8454 ;; This function calls:
  8455 ;;		Nothing
  8456 ;; This function is called by:
  8457 ;;		_FastTransfer_buffer_flush
  8458 ;;		_UART_buff_init
  8459 ;;		_UART_buff_flush
  8460 ;; This function uses a non-reentrant model
  8461 ;;
  8462                           
  8463                           	psect	text46
  8464  001C6C                     __ptext46:
  8465                           	opt stack 0
  8466  001C6C                     _memset:
  8467                           	opt stack 22
  8468                           
  8469                           ;incstack = 0
  8470  001C6C  C01B  F021         	movff	memset@p1,memset@p
  8471  001C70  C01C  F022         	movff	memset@p1+1,memset@p+1
  8472  001C74  D008               	goto	l3915
  8473  001C76                     l3911:
  8474  001C76  C021  FFD9         	movff	memset@p,fsr2l
  8475  001C7A  C022  FFDA         	movff	memset@p+1,fsr2h
  8476  001C7E  C01D  FFDF         	movff	memset@c,indf2
  8477  001C82  4A21               	infsnz	memset@p,f,c
  8478  001C84  2A22               	incf	memset@p+1,f,c
  8479  001C86                     l3915:
  8480  001C86  061F               	decf	memset@n,f,c
  8481  001C88  A0D8               	btfss	status,0,c
  8482  001C8A  0620               	decf	memset@n+1,f,c
  8483  001C8C  281F               	incf	memset@n,w,c
  8484  001C8E  E1F3               	bnz	l3911
  8485  001C90  2820               	incf	memset@n+1,w,c
  8486  001C92  B4D8               	btfsc	status,2,c
  8487  001C94  0012               	return	
  8488  001C96  D7EF               	goto	l3911
  8489  001C98                     __end_of_memset:
  8490                           	opt stack 0
  8491                           tosu	equ	0xFFF
  8492                           tosh	equ	0xFFE
  8493                           tosl	equ	0xFFD
  8494                           pclath	equ	0xFFA
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodh	equ	0xFF4
  8500                           prodl	equ	0xFF3
  8501                           intcon	equ	0xFF2
  8502                           intcon2	equ	0xFF1
  8503                           indf0	equ	0xFEF
  8504                           postinc0	equ	0xFEE
  8505                           fsr0h	equ	0xFEA
  8506                           fsr0l	equ	0xFE9
  8507                           wreg	equ	0xFE8
  8508                           indf1	equ	0xFE7
  8509                           fsr1h	equ	0xFE2
  8510                           fsr1l	equ	0xFE1
  8511                           indf2	equ	0xFDF
  8512                           postinc2	equ	0xFDE
  8513                           postdec2	equ	0xFDD
  8514                           plusw2	equ	0xFDB
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _NokiaStart *****************
  8520 ;; Defined at:
  8521 ;;		line 25 in file "NokiaLCD.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2, status,0, cstack
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8535 ;;      Params:         0       0       0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0
  8538 ;;      Totals:         0       0       0       0       0       0       0
  8539 ;;Total ram usage:        0 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    7
  8542 ;; This function calls:
  8543 ;;		_Delay
  8544 ;;		_LCDwrite
  8545 ;;		_SPI1_Initialize
  8546 ;;		_clearLcd
  8547 ;; This function is called by:
  8548 ;;		_main
  8549 ;; This function uses a non-reentrant model
  8550 ;;
  8551                           
  8552                           	psect	text47
  8553  0013AC                     __ptext47:
  8554                           	opt stack 0
  8555  0013AC                     _NokiaStart:
  8556                           	opt stack 23
  8557                           
  8558                           ;NokiaLCD.c: 26: TRISBbits.TRISB6 = 0;
  8559                           
  8560                           ;incstack = 0
  8561  0013AC  9C93               	bcf	3987,6,c	;volatile
  8562                           
  8563                           ;NokiaLCD.c: 27: do { TRISD0 = 0; } while(0);
  8564  0013AE  9095               	bcf	3989,0,c	;volatile
  8565                           
  8566                           ;NokiaLCD.c: 28: do { TRISD3 = 0; } while(0);
  8567  0013B0  9695               	bcf	3989,3,c	;volatile
  8568                           
  8569                           ;NokiaLCD.c: 29: do { TRISD2 = 0; } while(0);
  8570  0013B2  9495               	bcf	3989,2,c	;volatile
  8571                           
  8572                           ;NokiaLCD.c: 30: do { LATD0 = 1; } while(0);
  8573  0013B4  808C               	bsf	3980,0,c	;volatile
  8574                           
  8575                           ;NokiaLCD.c: 31: SPI1_Initialize();
  8576  0013B6  EC5B  F00F         	call	_SPI1_Initialize	;wreg free
  8577                           
  8578                           ;NokiaLCD.c: 32: LATBbits.LATB6 = 1;
  8579  0013BA  8C8A               	bsf	3978,6,c	;volatile
  8580                           
  8581                           ;NokiaLCD.c: 33: Delay(100);
  8582  0013BC  0E00               	movlw	0
  8583  0013BE  6E1C               	movwf	Delay@wait+1,c
  8584  0013C0  0E64               	movlw	100
  8585  0013C2  6E1B               	movwf	Delay@wait,c
  8586  0013C4  EC92  F00D         	call	_Delay	;wreg free
  8587                           
  8588                           ;NokiaLCD.c: 34: LATBbits.LATB6 = 0;
  8589  0013C8  9C8A               	bcf	3978,6,c	;volatile
  8590                           
  8591                           ;NokiaLCD.c: 35: Delay(100);
  8592  0013CA  0E00               	movlw	0
  8593  0013CC  6E1C               	movwf	Delay@wait+1,c
  8594  0013CE  0E64               	movlw	100
  8595  0013D0  6E1B               	movwf	Delay@wait,c
  8596  0013D2  EC92  F00D         	call	_Delay	;wreg free
  8597                           
  8598                           ;NokiaLCD.c: 36: LATBbits.LATB6 = 1;
  8599  0013D6  8C8A               	bsf	3978,6,c	;volatile
  8600                           
  8601                           ;NokiaLCD.c: 37: LCDwrite(1, 0x21);
  8602  0013D8  0E21               	movlw	33
  8603  0013DA  6E21               	movwf	LCDwrite@data,c
  8604  0013DC  0E01               	movlw	1
  8605  0013DE  EC1F  F00F         	call	_LCDwrite
  8606                           
  8607                           ;NokiaLCD.c: 38: LCDwrite(1, 0xC8);
  8608  0013E2  0EC8               	movlw	200
  8609  0013E4  6E21               	movwf	LCDwrite@data,c
  8610  0013E6  0E01               	movlw	1
  8611  0013E8  EC1F  F00F         	call	_LCDwrite
  8612                           
  8613                           ;NokiaLCD.c: 39: LCDwrite(1, 0x04 | !!((66-2) & (1u << 6)));
  8614  0013EC  0E05               	movlw	5
  8615  0013EE  6E21               	movwf	LCDwrite@data,c
  8616  0013F0  0E01               	movlw	1
  8617  0013F2  EC1F  F00F         	call	_LCDwrite
  8618                           
  8619                           ;NokiaLCD.c: 40: LCDwrite(1, 0x40 | ((66-2) & ((1u << 6) - 1)));
  8620  0013F6  0E40               	movlw	64
  8621  0013F8  6E21               	movwf	LCDwrite@data,c
  8622  0013FA  0E01               	movlw	1
  8623  0013FC  EC1F  F00F         	call	_LCDwrite
  8624                           
  8625                           ;NokiaLCD.c: 42: LCDwrite(1, 0x14);
  8626  001400  0E14               	movlw	20
  8627  001402  6E21               	movwf	LCDwrite@data,c
  8628  001404  0E01               	movlw	1
  8629  001406  EC1F  F00F         	call	_LCDwrite
  8630                           
  8631                           ;NokiaLCD.c: 43: LCDwrite(1, 0x20);
  8632  00140A  0E20               	movlw	32
  8633  00140C  6E21               	movwf	LCDwrite@data,c
  8634  00140E  0E01               	movlw	1
  8635  001410  EC1F  F00F         	call	_LCDwrite
  8636                           
  8637                           ;NokiaLCD.c: 44: LCDwrite(1, 0x08);
  8638  001414  0E08               	movlw	8
  8639  001416  6E21               	movwf	LCDwrite@data,c
  8640  001418  0E01               	movlw	1
  8641  00141A  EC1F  F00F         	call	_LCDwrite
  8642                           
  8643                           ;NokiaLCD.c: 45: LCDwrite(1, 0x0C);
  8644  00141E  0E0C               	movlw	12
  8645  001420  6E21               	movwf	LCDwrite@data,c
  8646  001422  0E01               	movlw	1
  8647  001424  EC1F  F00F         	call	_LCDwrite
  8648                           
  8649                           ;NokiaLCD.c: 46: clearLcd();
  8650  001428  ECA0  F00E         	call	_clearLcd	;wreg free
  8651  00142C  0012               	return		;funcret
  8652  00142E                     __end_of_NokiaStart:
  8653                           	opt stack 0
  8654                           tosu	equ	0xFFF
  8655                           tosh	equ	0xFFE
  8656                           tosl	equ	0xFFD
  8657                           pclath	equ	0xFFA
  8658                           tblptru	equ	0xFF8
  8659                           tblptrh	equ	0xFF7
  8660                           tblptrl	equ	0xFF6
  8661                           tablat	equ	0xFF5
  8662                           prodh	equ	0xFF4
  8663                           prodl	equ	0xFF3
  8664                           intcon	equ	0xFF2
  8665                           intcon2	equ	0xFF1
  8666                           indf0	equ	0xFEF
  8667                           postinc0	equ	0xFEE
  8668                           fsr0h	equ	0xFEA
  8669                           fsr0l	equ	0xFE9
  8670                           wreg	equ	0xFE8
  8671                           indf1	equ	0xFE7
  8672                           fsr1h	equ	0xFE2
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           plusw2	equ	0xFDB
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682 ;; *************** function _clearLcd *****************
  8683 ;; Defined at:
  8684 ;;		line 68 in file "NokiaLCD.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;		None
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;  res             2   34[COMRAM] int 
  8689 ;; Return value:  Size  Location     Type
  8690 ;;                  1    wreg      void 
  8691 ;; Registers used:
  8692 ;;		wreg, status,2, status,0, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8698 ;;      Params:         0       0       0       0       0       0       0
  8699 ;;      Locals:         2       0       0       0       0       0       0
  8700 ;;      Temps:          0       0       0       0       0       0       0
  8701 ;;      Totals:         2       0       0       0       0       0       0
  8702 ;;Total ram usage:        2 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    6
  8705 ;; This function calls:
  8706 ;;		_LCDwrite
  8707 ;; This function is called by:
  8708 ;;		_main
  8709 ;;		_NokiaStart
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text48
  8714  001D40                     __ptext48:
  8715                           	opt stack 0
  8716  001D40                     _clearLcd:
  8717                           	opt stack 24
  8718                           
  8719                           ;NokiaLCD.c: 69: int res;
  8720                           ;NokiaLCD.c: 70: for(res=0;res<504;res++){
  8721                           
  8722                           ;incstack = 0
  8723  001D40  0E00               	movlw	0
  8724  001D42  6E24               	movwf	clearLcd@res+1,c
  8725  001D44  0E00               	movlw	0
  8726  001D46  6E23               	movwf	clearLcd@res,c
  8727  001D48                     l3283:
  8728  001D48  BE24               	btfsc	clearLcd@res+1,7,c
  8729  001D4A  D006               	goto	l3287
  8730  001D4C  0EF8               	movlw	248
  8731  001D4E  5C23               	subwf	clearLcd@res,w,c
  8732  001D50  0E01               	movlw	1
  8733  001D52  5824               	subwfb	clearLcd@res+1,w,c
  8734  001D54  B0D8               	btfsc	status,0,c
  8735  001D56  0012               	return	
  8736  001D58                     l3287:
  8737                           
  8738                           ;NokiaLCD.c: 71: LCDwrite(0, 0x00);
  8739  001D58  0E00               	movlw	0
  8740  001D5A  6E21               	movwf	LCDwrite@data,c
  8741  001D5C  0E00               	movlw	0
  8742  001D5E  EC1F  F00F         	call	_LCDwrite
  8743  001D62  4A23               	infsnz	clearLcd@res,f,c
  8744  001D64  2A24               	incf	clearLcd@res+1,f,c
  8745  001D66  D7F0               	goto	l3283
  8746  001D68                     __end_of_clearLcd:
  8747                           	opt stack 0
  8748                           tosu	equ	0xFFF
  8749                           tosh	equ	0xFFE
  8750                           tosl	equ	0xFFD
  8751                           pclath	equ	0xFFA
  8752                           tblptru	equ	0xFF8
  8753                           tblptrh	equ	0xFF7
  8754                           tblptrl	equ	0xFF6
  8755                           tablat	equ	0xFF5
  8756                           prodh	equ	0xFF4
  8757                           prodl	equ	0xFF3
  8758                           intcon	equ	0xFF2
  8759                           intcon2	equ	0xFF1
  8760                           indf0	equ	0xFEF
  8761                           postinc0	equ	0xFEE
  8762                           fsr0h	equ	0xFEA
  8763                           fsr0l	equ	0xFE9
  8764                           wreg	equ	0xFE8
  8765                           indf1	equ	0xFE7
  8766                           fsr1h	equ	0xFE2
  8767                           fsr1l	equ	0xFE1
  8768                           indf2	equ	0xFDF
  8769                           postinc2	equ	0xFDE
  8770                           postdec2	equ	0xFDD
  8771                           plusw2	equ	0xFDB
  8772                           fsr2h	equ	0xFDA
  8773                           fsr2l	equ	0xFD9
  8774                           status	equ	0xFD8
  8775                           
  8776 ;; *************** function _LCDwrite *****************
  8777 ;; Defined at:
  8778 ;;		line 49 in file "NokiaLCD.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  mode            1    wreg     unsigned char 
  8781 ;;  data            1   32[COMRAM] unsigned char 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  mode            1   33[COMRAM] unsigned char 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8793 ;;      Params:         1       0       0       0       0       0       0
  8794 ;;      Locals:         1       0       0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0
  8796 ;;      Totals:         2       0       0       0       0       0       0
  8797 ;;Total ram usage:        2 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    5
  8800 ;; This function calls:
  8801 ;;		_SPI1_Exchange8bit
  8802 ;; This function is called by:
  8803 ;;		_NokiaStart
  8804 ;;		_clearLcd
  8805 ;;		_gotoXy
  8806 ;;		_LcdCharacter
  8807 ;;		_blackLcd
  8808 ;; This function uses a non-reentrant model
  8809 ;;
  8810                           
  8811                           	psect	text49
  8812  001E3E                     __ptext49:
  8813                           	opt stack 0
  8814  001E3E                     _LCDwrite:
  8815                           	opt stack 24
  8816                           
  8817                           ;incstack = 0
  8818                           ;LCDwrite@mode stored from wreg
  8819  001E3E  6E22               	movwf	LCDwrite@mode,c
  8820                           
  8821                           ;NokiaLCD.c: 50: if(mode){
  8822  001E40  5022               	movf	LCDwrite@mode,w,c
  8823  001E42  B4D8               	btfsc	status,2,c
  8824  001E44  D002               	goto	l801
  8825                           
  8826                           ;NokiaLCD.c: 51: do { LATD3 = 0; } while(0);
  8827  001E46  968C               	bcf	3980,3,c	;volatile
  8828                           
  8829                           ;NokiaLCD.c: 52: }
  8830  001E48  D001               	goto	l803
  8831  001E4A                     l801:
  8832  001E4A  868C               	bsf	3980,3,c	;volatile
  8833  001E4C                     l803:
  8834  001E4C  908C               	bcf	3980,0,c	;volatile
  8835                           
  8836                           ;NokiaLCD.c: 57: SPI1_Exchange8bit(data);
  8837  001E4E  5021               	movf	LCDwrite@data,w,c
  8838  001E50  EC4C  F00F         	call	_SPI1_Exchange8bit
  8839                           
  8840                           ;NokiaLCD.c: 58: do { LATD0 = 1; } while(0);
  8841  001E54  808C               	bsf	3980,0,c	;volatile
  8842  001E56  0012               	return	
  8843  001E58                     __end_of_LCDwrite:
  8844                           	opt stack 0
  8845                           tosu	equ	0xFFF
  8846                           tosh	equ	0xFFE
  8847                           tosl	equ	0xFFD
  8848                           pclath	equ	0xFFA
  8849                           tblptru	equ	0xFF8
  8850                           tblptrh	equ	0xFF7
  8851                           tblptrl	equ	0xFF6
  8852                           tablat	equ	0xFF5
  8853                           prodh	equ	0xFF4
  8854                           prodl	equ	0xFF3
  8855                           intcon	equ	0xFF2
  8856                           intcon2	equ	0xFF1
  8857                           indf0	equ	0xFEF
  8858                           postinc0	equ	0xFEE
  8859                           fsr0h	equ	0xFEA
  8860                           fsr0l	equ	0xFE9
  8861                           wreg	equ	0xFE8
  8862                           indf1	equ	0xFE7
  8863                           fsr1h	equ	0xFE2
  8864                           fsr1l	equ	0xFE1
  8865                           indf2	equ	0xFDF
  8866                           postinc2	equ	0xFDE
  8867                           postdec2	equ	0xFDD
  8868                           plusw2	equ	0xFDB
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873 ;; *************** function _SPI1_Exchange8bit *****************
  8874 ;; Defined at:
  8875 ;;		line 78 in file "mcc_generated_files/spi1.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;  data            1    wreg     unsigned char 
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;  data            1   26[COMRAM] unsigned char 
  8880 ;; Return value:  Size  Location     Type
  8881 ;;                  1    wreg      unsigned char 
  8882 ;; Registers used:
  8883 ;;		wreg, status,2
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8889 ;;      Params:         0       0       0       0       0       0       0
  8890 ;;      Locals:         1       0       0       0       0       0       0
  8891 ;;      Temps:          0       0       0       0       0       0       0
  8892 ;;      Totals:         1       0       0       0       0       0       0
  8893 ;;Total ram usage:        1 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    4
  8896 ;; This function calls:
  8897 ;;		Nothing
  8898 ;; This function is called by:
  8899 ;;		_LCDwrite
  8900 ;;		_SPI1_Exchange8bitBuffer
  8901 ;; This function uses a non-reentrant model
  8902 ;;
  8903                           
  8904                           	psect	text50
  8905  001E98                     __ptext50:
  8906                           	opt stack 0
  8907  001E98                     _SPI1_Exchange8bit:
  8908                           	opt stack 24
  8909                           
  8910                           ;incstack = 0
  8911                           ;SPI1_Exchange8bit@data stored from wreg
  8912  001E98  6E1B               	movwf	SPI1_Exchange8bit@data,c
  8913                           
  8914                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  8915  001E9A  9EC6               	bcf	4038,7,c	;volatile
  8916                           
  8917                           ;spi1.c: 83: SSP1BUF = data;
  8918  001E9C  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  8919  001EA0                     l212:
  8920  001EA0  A0C7               	btfss	4039,0,c	;volatile
  8921  001EA2  D7FE               	goto	l212
  8922                           
  8923                           ;spi1.c: 87: }
  8924                           ;spi1.c: 89: return (SSP1BUF);
  8925  001EA4  50C9               	movf	4041,w,c	;volatile
  8926  001EA6  0012               	return		;funcret
  8927  001EA8                     __end_of_SPI1_Exchange8bit:
  8928                           	opt stack 0
  8929                           tosu	equ	0xFFF
  8930                           tosh	equ	0xFFE
  8931                           tosl	equ	0xFFD
  8932                           pclath	equ	0xFFA
  8933                           tblptru	equ	0xFF8
  8934                           tblptrh	equ	0xFF7
  8935                           tblptrl	equ	0xFF6
  8936                           tablat	equ	0xFF5
  8937                           prodh	equ	0xFF4
  8938                           prodl	equ	0xFF3
  8939                           intcon	equ	0xFF2
  8940                           intcon2	equ	0xFF1
  8941                           indf0	equ	0xFEF
  8942                           postinc0	equ	0xFEE
  8943                           fsr0h	equ	0xFEA
  8944                           fsr0l	equ	0xFE9
  8945                           wreg	equ	0xFE8
  8946                           indf1	equ	0xFE7
  8947                           fsr1h	equ	0xFE2
  8948                           fsr1l	equ	0xFE1
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           plusw2	equ	0xFDB
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _SPI1_Initialize *****************
  8958 ;; Defined at:
  8959 ;;		line 64 in file "mcc_generated_files/spi1.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8973 ;;      Params:         0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    4
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_NokiaStart
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text51
  8988  001EB6                     __ptext51:
  8989                           	opt stack 0
  8990  001EB6                     _SPI1_Initialize:
  8991                           	opt stack 25
  8992                           
  8993                           ;spi1.c: 69: SSP1STAT = 0x80;
  8994                           
  8995                           ;incstack = 0
  8996  001EB6  0E80               	movlw	128
  8997  001EB8  6EC7               	movwf	4039,c	;volatile
  8998                           
  8999                           ;spi1.c: 72: SSP1CON1 = 0x30;
  9000  001EBA  0E30               	movlw	48
  9001  001EBC  6EC6               	movwf	4038,c	;volatile
  9002                           
  9003                           ;spi1.c: 75: SSP1ADD = 0x00;
  9004  001EBE  0E00               	movlw	0
  9005  001EC0  6EC8               	movwf	4040,c	;volatile
  9006  001EC2  0012               	return		;funcret
  9007  001EC4                     __end_of_SPI1_Initialize:
  9008                           	opt stack 0
  9009                           tosu	equ	0xFFF
  9010                           tosh	equ	0xFFE
  9011                           tosl	equ	0xFFD
  9012                           pclath	equ	0xFFA
  9013                           tblptru	equ	0xFF8
  9014                           tblptrh	equ	0xFF7
  9015                           tblptrl	equ	0xFF6
  9016                           tablat	equ	0xFF5
  9017                           prodh	equ	0xFF4
  9018                           prodl	equ	0xFF3
  9019                           intcon	equ	0xFF2
  9020                           intcon2	equ	0xFF1
  9021                           indf0	equ	0xFEF
  9022                           postinc0	equ	0xFEE
  9023                           fsr0h	equ	0xFEA
  9024                           fsr0l	equ	0xFE9
  9025                           wreg	equ	0xFE8
  9026                           indf1	equ	0xFE7
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           plusw2	equ	0xFDB
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _Delay *****************
  9038 ;; Defined at:
  9039 ;;		line 17 in file "Functions.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  wait            2   26[COMRAM] int 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;  i               2   29[COMRAM] int 
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      void 
  9046 ;; Registers used:
  9047 ;;		wreg, status,2, status,0
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9053 ;;      Params:         2       0       0       0       0       0       0
  9054 ;;      Locals:         2       0       0       0       0       0       0
  9055 ;;      Temps:          1       0       0       0       0       0       0
  9056 ;;      Totals:         5       0       0       0       0       0       0
  9057 ;;Total ram usage:        5 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    4
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_main
  9064 ;;		_respondChargerAsECU
  9065 ;;		_Precharge
  9066 ;;		_NokiaStart
  9067 ;;		_SetBMM
  9068 ;;		_Horn
  9069 ;; This function uses a non-reentrant model
  9070 ;;
  9071                           
  9072                           	psect	text52
  9073  001B24                     __ptext52:
  9074                           	opt stack 0
  9075  001B24                     _Delay:
  9076                           	opt stack 24
  9077                           
  9078                           ;Functions.c: 18: int i = 0;
  9079                           
  9080                           ;incstack = 0
  9081  001B24  0E00               	movlw	0
  9082  001B26  6E1F               	movwf	Delay@i+1,c
  9083  001B28  0E00               	movlw	0
  9084  001B2A  6E1E               	movwf	Delay@i,c
  9085                           
  9086                           ;Functions.c: 19: for (; wait > i; i++) {
  9087  001B2C  D00A               	goto	l682
  9088  001B2E                     l3121:
  9089                           
  9090                           ;Functions.c: 20: _delay((unsigned long)((1)*(16000000/4000.0)));
  9091  001B2E  0E06               	movlw	6
  9092  001B30  6E1D               	movwf	??_Delay& (0+255),c
  9093  001B32  0E30               	movlw	48
  9094  001B34                     u4057:
  9095  001B34  2EE8               	decfsz	wreg,f,c
  9096  001B36  D7FE               	goto	u4057
  9097  001B38  2E1D               	decfsz	??_Delay& (0+255),f,c
  9098  001B3A  D7FC               	goto	u4057
  9099  001B3C  D000               	nop2	
  9100  001B3E  4A1E               	infsnz	Delay@i,f,c
  9101  001B40  2A1F               	incf	Delay@i+1,f,c
  9102  001B42                     l682:
  9103  001B42  501B               	movf	Delay@wait,w,c
  9104  001B44  5C1E               	subwf	Delay@i,w,c
  9105  001B46  501F               	movf	Delay@i+1,w,c
  9106  001B48  0A80               	xorlw	128
  9107  001B4A  6E1D               	movwf	??_Delay& (0+255),c
  9108  001B4C  501C               	movf	Delay@wait+1,w,c
  9109  001B4E  0A80               	xorlw	128
  9110  001B50  581D               	subwfb	??_Delay& (0+255),w,c
  9111  001B52  B0D8               	btfsc	status,0,c
  9112  001B54  0012               	return	
  9113  001B56  D7EB               	goto	l3121
  9114  001B58                     __end_of_Delay:
  9115                           	opt stack 0
  9116                           tosu	equ	0xFFF
  9117                           tosh	equ	0xFFE
  9118                           tosl	equ	0xFFD
  9119                           pclath	equ	0xFFA
  9120                           tblptru	equ	0xFF8
  9121                           tblptrh	equ	0xFF7
  9122                           tblptrl	equ	0xFF6
  9123                           tablat	equ	0xFF5
  9124                           prodh	equ	0xFF4
  9125                           prodl	equ	0xFF3
  9126                           intcon	equ	0xFF2
  9127                           intcon2	equ	0xFF1
  9128                           indf0	equ	0xFEF
  9129                           postinc0	equ	0xFEE
  9130                           fsr0h	equ	0xFEA
  9131                           fsr0l	equ	0xFE9
  9132                           wreg	equ	0xFE8
  9133                           indf1	equ	0xFE7
  9134                           fsr1h	equ	0xFE2
  9135                           fsr1l	equ	0xFE1
  9136                           indf2	equ	0xFDF
  9137                           postinc2	equ	0xFDE
  9138                           postdec2	equ	0xFDD
  9139                           plusw2	equ	0xFDB
  9140                           fsr2h	equ	0xFDA
  9141                           fsr2l	equ	0xFD9
  9142                           status	equ	0xFD8
  9143                           
  9144 ;; *************** function _INTERRUPT_InterruptManager *****************
  9145 ;; Defined at:
  9146 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;		None
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;		None
  9151 ;; Return value:  Size  Location     Type
  9152 ;;                  1    wreg      void 
  9153 ;; Registers used:
  9154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9160 ;;      Params:         0       0       0       0       0       0       0
  9161 ;;      Locals:         0       0       0       0       0       0       0
  9162 ;;      Temps:         14       0       0       0       0       0       0
  9163 ;;      Totals:        14       0       0       0       0       0       0
  9164 ;;Total ram usage:       14 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:    3
  9167 ;; This function calls:
  9168 ;;		_EUSART1_Receive_ISR
  9169 ;;		_EUSART1_Transmit_ISR
  9170 ;;		_EUSART2_Receive_ISR
  9171 ;;		_EUSART2_Transmit_ISR
  9172 ;;		_TMR0_ISR
  9173 ;; This function is called by:
  9174 ;;		Interrupt level 2
  9175 ;; This function uses a non-reentrant model
  9176 ;;
  9177                           
  9178                           	psect	intcode
  9179  000008                     __pintcode:
  9180                           	opt stack 0
  9181  000008                     _INTERRUPT_InterruptManager:
  9182                           	opt stack 21
  9183                           
  9184                           ;incstack = 0
  9185  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9186  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  9187  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9188  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  9189  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  9190  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  9191  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  9192  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  9193  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  9194  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  9195  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  9196  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  9197  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  9198  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  9199  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  9200                           
  9201                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  9202  000042  BAA3               	btfsc	4003,5,c	;volatile
  9203  000044  AAA4               	btfss	4004,5,c	;volatile
  9204  000046  D003               	goto	i2l160
  9205                           
  9206                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  9207  000048  EC03  F00F         	call	_EUSART2_Receive_ISR	;wreg free
  9208                           
  9209                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  9210  00004C  D017               	goto	i2l170
  9211  00004E                     i2l160:
  9212  00004E  B8A3               	btfsc	4003,4,c	;volatile
  9213  000050  A8A4               	btfss	4004,4,c	;volatile
  9214  000052  D003               	goto	i2l162
  9215                           
  9216                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  9217  000054  ECAC  F00D         	call	_EUSART2_Transmit_ISR	;wreg free
  9218                           
  9219                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  9220  000058  D011               	goto	i2l170
  9221  00005A                     i2l162:
  9222  00005A  BA9D               	btfsc	3997,5,c	;volatile
  9223  00005C  AA9E               	btfss	3998,5,c	;volatile
  9224  00005E  D003               	goto	i2l164
  9225                           
  9226                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  9227  000060  EC4C  F00E         	call	_EUSART1_Receive_ISR	;wreg free
  9228                           
  9229                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  9230  000064  D00B               	goto	i2l170
  9231  000066                     i2l164:
  9232  000066  B89D               	btfsc	3997,4,c	;volatile
  9233  000068  A89E               	btfss	3998,4,c	;volatile
  9234  00006A  D003               	goto	i2l166
  9235                           
  9236                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  9237  00006C  ECF3  F00D         	call	_EUSART1_Transmit_ISR	;wreg free
  9238                           
  9239                           ;interrupt_manager.c: 78: } else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  9240  000070  D005               	goto	i2l170
  9241  000072                     i2l166:
  9242  000072  BAF2               	btfsc	intcon,5,c	;volatile
  9243  000074  A4F2               	btfss	intcon,2,c	;volatile
  9244  000076  D002               	goto	i2l170
  9245                           
  9246                           ;interrupt_manager.c: 79: TMR0_ISR();
  9247  000078  EC2C  F00F         	call	_TMR0_ISR	;wreg free
  9248  00007C                     i2l170:
  9249  00007C  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  9250  000080  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  9251  000084  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  9252  000088  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  9253  00008C  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  9254  000090  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  9255  000094  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  9256  000098  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  9257  00009C  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  9258  0000A0  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  9259  0000A4  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  9260  0000A8  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  9261  0000AC  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9262  0000B0  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9263  0000B4  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9264  0000B6  0011               	retfie		f
  9265  0000B8                     __end_of_INTERRUPT_InterruptManager:
  9266                           	opt stack 0
  9267                           tosu	equ	0xFFF
  9268                           tosh	equ	0xFFE
  9269                           tosl	equ	0xFFD
  9270                           pclatu	equ	0xFFB
  9271                           pclath	equ	0xFFA
  9272                           tblptru	equ	0xFF8
  9273                           tblptrh	equ	0xFF7
  9274                           tblptrl	equ	0xFF6
  9275                           tablat	equ	0xFF5
  9276                           prodh	equ	0xFF4
  9277                           prodl	equ	0xFF3
  9278                           intcon	equ	0xFF2
  9279                           intcon2	equ	0xFF1
  9280                           indf0	equ	0xFEF
  9281                           postinc0	equ	0xFEE
  9282                           fsr0h	equ	0xFEA
  9283                           fsr0l	equ	0xFE9
  9284                           wreg	equ	0xFE8
  9285                           indf1	equ	0xFE7
  9286                           fsr1h	equ	0xFE2
  9287                           fsr1l	equ	0xFE1
  9288                           indf2	equ	0xFDF
  9289                           postinc2	equ	0xFDE
  9290                           postdec2	equ	0xFDD
  9291                           plusw2	equ	0xFDB
  9292                           fsr2h	equ	0xFDA
  9293                           fsr2l	equ	0xFD9
  9294                           status	equ	0xFD8
  9295                           
  9296 ;; *************** function _TMR0_ISR *****************
  9297 ;; Defined at:
  9298 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  9299 ;; Parameters:    Size  Location     Type
  9300 ;;		None
  9301 ;; Auto vars:     Size  Location     Type
  9302 ;;		None
  9303 ;; Return value:  Size  Location     Type
  9304 ;;                  2  154[None  ] int 
  9305 ;; Registers used:
  9306 ;;		wreg, status,2, status,0
  9307 ;; Tracked objects:
  9308 ;;		On entry : 0/0
  9309 ;;		On exit  : 0/0
  9310 ;;		Unchanged: 0/0
  9311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9312 ;;      Params:         0       0       0       0       0       0       0
  9313 ;;      Locals:         0       0       0       0       0       0       0
  9314 ;;      Temps:          0       0       0       0       0       0       0
  9315 ;;      Totals:         0       0       0       0       0       0       0
  9316 ;;Total ram usage:        0 bytes
  9317 ;; Hardware stack levels used:    1
  9318 ;; This function calls:
  9319 ;;		Nothing
  9320 ;; This function is called by:
  9321 ;;		_INTERRUPT_InterruptManager
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           	psect	text54
  9326  001E58                     __ptext54:
  9327                           	opt stack 0
  9328  001E58                     _TMR0_ISR:
  9329                           	opt stack 23
  9330                           
  9331                           ;tmr0.c: 138: TMR0H = timer0ReloadVal16bit >> 8;
  9332                           
  9333                           ;incstack = 0
  9334  001E58  5033               	movf	_timer0ReloadVal16bit+1,w,c
  9335  001E5A  6ED7               	movwf	4055,c	;volatile
  9336                           
  9337                           ;tmr0.c: 139: TMR0L = (uint8_t) timer0ReloadVal16bit;
  9338  001E5C  C032  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  9339                           
  9340                           ;tmr0.c: 141: time++;
  9341  001E60  0E01               	movlw	1
  9342  001E62  2628               	addwf	_time,f,c
  9343  001E64  0E00               	movlw	0
  9344  001E66  2229               	addwfc	_time+1,f,c
  9345  001E68  222A               	addwfc	_time+2,f,c
  9346  001E6A  222B               	addwfc	_time+3,f,c
  9347                           
  9348                           ;tmr0.c: 144: INTCONbits.TMR0IF = 0;
  9349  001E6C  94F2               	bcf	intcon,2,c	;volatile
  9350  001E6E  0012               	return		;funcret
  9351  001E70                     __end_of_TMR0_ISR:
  9352                           	opt stack 0
  9353                           tosu	equ	0xFFF
  9354                           tosh	equ	0xFFE
  9355                           tosl	equ	0xFFD
  9356                           pclatu	equ	0xFFB
  9357                           pclath	equ	0xFFA
  9358                           tblptru	equ	0xFF8
  9359                           tblptrh	equ	0xFF7
  9360                           tblptrl	equ	0xFF6
  9361                           tablat	equ	0xFF5
  9362                           prodh	equ	0xFF4
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           intcon2	equ	0xFF1
  9366                           indf0	equ	0xFEF
  9367                           postinc0	equ	0xFEE
  9368                           fsr0h	equ	0xFEA
  9369                           fsr0l	equ	0xFE9
  9370                           wreg	equ	0xFE8
  9371                           indf1	equ	0xFE7
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           plusw2	equ	0xFDB
  9378                           fsr2h	equ	0xFDA
  9379                           fsr2l	equ	0xFD9
  9380                           status	equ	0xFD8
  9381                           
  9382 ;; *************** function _EUSART2_Transmit_ISR *****************
  9383 ;; Defined at:
  9384 ;;		line 152 in file "UART.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;		None
  9387 ;; Auto vars:     Size  Location     Type
  9388 ;;		None
  9389 ;; Return value:  Size  Location     Type
  9390 ;;                  1    wreg      void 
  9391 ;; Registers used:
  9392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9393 ;; Tracked objects:
  9394 ;;		On entry : 0/0
  9395 ;;		On exit  : 0/0
  9396 ;;		Unchanged: 0/0
  9397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9398 ;;      Params:         0       0       0       0       0       0       0
  9399 ;;      Locals:         0       0       0       0       0       0       0
  9400 ;;      Temps:          0       0       0       0       0       0       0
  9401 ;;      Totals:         0       0       0       0       0       0       0
  9402 ;;Total ram usage:        0 bytes
  9403 ;; Hardware stack levels used:    1
  9404 ;; Hardware stack levels required when called:    2
  9405 ;; This function calls:
  9406 ;;		_UART_buff_get
  9407 ;;		_UART_buff_size
  9408 ;; This function is called by:
  9409 ;;		_INTERRUPT_InterruptManager
  9410 ;; This function uses a non-reentrant model
  9411 ;;
  9412                           
  9413                           	psect	text55
  9414  001B58                     __ptext55:
  9415                           	opt stack 0
  9416  001B58                     _EUSART2_Transmit_ISR:
  9417                           	opt stack 21
  9418                           
  9419                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
  9420                           
  9421                           ;incstack = 0
  9422  001B58  0E00               	movlw	low _output_buffer
  9423  001B5A  6E01               	movwf	UART_buff_size@_this,c
  9424  001B5C  0E03               	movlw	high _output_buffer
  9425  001B5E  6E02               	movwf	UART_buff_size@_this+1,c
  9426  001B60  EC38  F00F         	call	_UART_buff_size	;wreg free
  9427  001B64  BE02               	btfsc	?_UART_buff_size+1,7,c
  9428  001B66  D00D               	goto	i2l3607
  9429  001B68  5002               	movf	?_UART_buff_size+1,w,c
  9430  001B6A  E103               	bnz	i2u269_40
  9431  001B6C  0401               	decf	?_UART_buff_size,w,c
  9432  001B6E  A0D8               	btfss	status,0,c
  9433  001B70  D008               	goto	i2l3607
  9434  001B72                     i2u269_40:
  9435                           
  9436                           ;UART.c: 155: TXREG2 = UART_buff_get(&output_buffer);
  9437  001B72  0E00               	movlw	low _output_buffer
  9438  001B74  6E07               	movwf	UART_buff_get@_this,c
  9439  001B76  0E03               	movlw	high _output_buffer
  9440  001B78  6E08               	movwf	UART_buff_get@_this+1,c
  9441  001B7A  EC8D  F009         	call	_UART_buff_get	;wreg free
  9442  001B7E  6E73               	movwf	3955,c	;volatile
  9443                           
  9444                           ;UART.c: 156: } else {
  9445  001B80  0012               	return	
  9446  001B82                     i2l3607:
  9447                           
  9448                           ;UART.c: 157: Transmit_stall = 1;
  9449  001B82  0E01               	movlw	1
  9450  001B84  6E44               	movwf	_Transmit_stall,c
  9451                           
  9452                           ;UART.c: 158: PIE3bits.TX2IE = 0;
  9453  001B86  98A3               	bcf	4003,4,c	;volatile
  9454  001B88  0012               	return	
  9455  001B8A                     __end_of_EUSART2_Transmit_ISR:
  9456                           	opt stack 0
  9457                           tosu	equ	0xFFF
  9458                           tosh	equ	0xFFE
  9459                           tosl	equ	0xFFD
  9460                           pclatu	equ	0xFFB
  9461                           pclath	equ	0xFFA
  9462                           tblptru	equ	0xFF8
  9463                           tblptrh	equ	0xFF7
  9464                           tblptrl	equ	0xFF6
  9465                           tablat	equ	0xFF5
  9466                           prodh	equ	0xFF4
  9467                           prodl	equ	0xFF3
  9468                           intcon	equ	0xFF2
  9469                           intcon2	equ	0xFF1
  9470                           indf0	equ	0xFEF
  9471                           postinc0	equ	0xFEE
  9472                           fsr0h	equ	0xFEA
  9473                           fsr0l	equ	0xFE9
  9474                           wreg	equ	0xFE8
  9475                           indf1	equ	0xFE7
  9476                           fsr1h	equ	0xFE2
  9477                           fsr1l	equ	0xFE1
  9478                           indf2	equ	0xFDF
  9479                           postinc2	equ	0xFDE
  9480                           postdec2	equ	0xFDD
  9481                           plusw2	equ	0xFDB
  9482                           fsr2h	equ	0xFDA
  9483                           fsr2l	equ	0xFD9
  9484                           status	equ	0xFD8
  9485                           
  9486 ;; *************** function _UART_buff_size *****************
  9487 ;; Defined at:
  9488 ;;		line 104 in file "UART.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  9491 ;;		 -> output_buffer(206), input_buffer(206), 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;		None
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  2    0[COMRAM] int 
  9496 ;; Registers used:
  9497 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9503 ;;      Params:         2       0       0       0       0       0       0
  9504 ;;      Locals:         0       0       0       0       0       0       0
  9505 ;;      Temps:          0       0       0       0       0       0       0
  9506 ;;      Totals:         2       0       0       0       0       0       0
  9507 ;;Total ram usage:        2 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; This function calls:
  9510 ;;		Nothing
  9511 ;; This function is called by:
  9512 ;;		_EUSART2_Transmit_ISR
  9513 ;;		_Receive_available
  9514 ;; This function uses a non-reentrant model
  9515 ;;
  9516                           
  9517                           	psect	text56
  9518  001E70                     __ptext56:
  9519                           	opt stack 0
  9520  001E70                     _UART_buff_size:
  9521                           	opt stack 22
  9522                           
  9523                           ;UART.c: 105: return (_this->count);
  9524                           
  9525                           ;incstack = 0
  9526  001E70  EE20 F0CC          	lfsr	2,204
  9527  001E74  5001               	movf	UART_buff_size@_this,w,c
  9528  001E76  26D9               	addwf	fsr2l,f,c
  9529  001E78  5002               	movf	UART_buff_size@_this+1,w,c
  9530  001E7A  22DA               	addwfc	fsr2h,f,c
  9531  001E7C  CFDE F001          	movff	postinc2,?_UART_buff_size
  9532  001E80  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  9533  001E84  0012               	return	
  9534  001E86                     __end_of_UART_buff_size:
  9535                           	opt stack 0
  9536                           tosu	equ	0xFFF
  9537                           tosh	equ	0xFFE
  9538                           tosl	equ	0xFFD
  9539                           pclatu	equ	0xFFB
  9540                           pclath	equ	0xFFA
  9541                           tblptru	equ	0xFF8
  9542                           tblptrh	equ	0xFF7
  9543                           tblptrl	equ	0xFF6
  9544                           tablat	equ	0xFF5
  9545                           prodh	equ	0xFF4
  9546                           prodl	equ	0xFF3
  9547                           intcon	equ	0xFF2
  9548                           intcon2	equ	0xFF1
  9549                           indf0	equ	0xFEF
  9550                           postinc0	equ	0xFEE
  9551                           fsr0h	equ	0xFEA
  9552                           fsr0l	equ	0xFE9
  9553                           wreg	equ	0xFE8
  9554                           indf1	equ	0xFE7
  9555                           fsr1h	equ	0xFE2
  9556                           fsr1l	equ	0xFE1
  9557                           indf2	equ	0xFDF
  9558                           postinc2	equ	0xFDE
  9559                           postdec2	equ	0xFDD
  9560                           plusw2	equ	0xFDB
  9561                           fsr2h	equ	0xFDA
  9562                           fsr2l	equ	0xFD9
  9563                           status	equ	0xFD8
  9564                           
  9565 ;; *************** function _UART_buff_get *****************
  9566 ;; Defined at:
  9567 ;;		line 83 in file "UART.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9570 ;;		 -> output_buffer(206), input_buffer(206), 
  9571 ;; Auto vars:     Size  Location     Type
  9572 ;;  c               1   10[COMRAM] unsigned char 
  9573 ;; Return value:  Size  Location     Type
  9574 ;;                  1    wreg      unsigned char 
  9575 ;; Registers used:
  9576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9577 ;; Tracked objects:
  9578 ;;		On entry : 0/0
  9579 ;;		On exit  : 0/0
  9580 ;;		Unchanged: 0/0
  9581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9582 ;;      Params:         2       0       0       0       0       0       0
  9583 ;;      Locals:         1       0       0       0       0       0       0
  9584 ;;      Temps:          2       0       0       0       0       0       0
  9585 ;;      Totals:         5       0       0       0       0       0       0
  9586 ;;Total ram usage:        5 bytes
  9587 ;; Hardware stack levels used:    1
  9588 ;; Hardware stack levels required when called:    1
  9589 ;; This function calls:
  9590 ;;		_UART_buff_modulo_inc
  9591 ;; This function is called by:
  9592 ;;		_EUSART2_Transmit_ISR
  9593 ;;		_Receive_get
  9594 ;;		_Send_put
  9595 ;; This function uses a non-reentrant model
  9596 ;;
  9597                           
  9598                           	psect	text57
  9599  00131A                     __ptext57:
  9600                           	opt stack 0
  9601  00131A                     _UART_buff_get:
  9602                           	opt stack 21
  9603                           
  9604                           ;UART.c: 84: unsigned char c;
  9605                           ;UART.c: 85: if (_this->count > 0) {
  9606                           
  9607                           ;incstack = 0
  9608  00131A  EE20 F0CC          	lfsr	2,204
  9609  00131E  5007               	movf	UART_buff_get@_this,w,c
  9610  001320  26D9               	addwf	fsr2l,f,c
  9611  001322  5008               	movf	UART_buff_get@_this+1,w,c
  9612  001324  22DA               	addwfc	fsr2h,f,c
  9613  001326  0E01               	movlw	1
  9614  001328  BEDB               	btfsc	plusw2,7,c
  9615  00132A  D03C               	goto	i2l3527
  9616  00132C  0E01               	movlw	1
  9617  00132E  50DB               	movf	plusw2,w,c
  9618  001330  E103               	bnz	i2u260_40
  9619  001332  04DE               	decf	postinc2,w,c
  9620  001334  A0D8               	btfss	status,0,c
  9621  001336  D036               	goto	i2l3527
  9622  001338                     i2u260_40:
  9623                           
  9624                           ;UART.c: 86: c = _this->buf[_this->tail];
  9625  001338  EE20 F0CA          	lfsr	2,202
  9626  00133C  5007               	movf	UART_buff_get@_this,w,c
  9627  00133E  26D9               	addwf	fsr2l,f,c
  9628  001340  5008               	movf	UART_buff_get@_this+1,w,c
  9629  001342  22DA               	addwfc	fsr2h,f,c
  9630  001344  CFDE F009          	movff	postinc2,??_UART_buff_get
  9631  001348  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  9632  00134C  5009               	movf	??_UART_buff_get,w,c
  9633  00134E  2407               	addwf	UART_buff_get@_this,w,c
  9634  001350  6ED9               	movwf	fsr2l,c
  9635  001352  500A               	movf	??_UART_buff_get+1,w,c
  9636  001354  2008               	addwfc	UART_buff_get@_this+1,w,c
  9637  001356  6EDA               	movwf	fsr2h,c
  9638  001358  50DF               	movf	indf2,w,c
  9639  00135A  6E0B               	movwf	UART_buff_get@c,c
  9640                           
  9641                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  9642  00135C  EE20 F0CA          	lfsr	2,202
  9643  001360  5007               	movf	UART_buff_get@_this,w,c
  9644  001362  26D9               	addwf	fsr2l,f,c
  9645  001364  5008               	movf	UART_buff_get@_this+1,w,c
  9646  001366  22DA               	addwfc	fsr2h,f,c
  9647  001368  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  9648  00136C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  9649  001370  0E00               	movlw	0
  9650  001372  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  9651  001374  0EC8               	movlw	200
  9652  001376  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  9653  001378  EC77  F00E         	call	_UART_buff_modulo_inc	;wreg free
  9654  00137C  EE20 F0CA          	lfsr	2,202
  9655  001380  5007               	movf	UART_buff_get@_this,w,c
  9656  001382  26D9               	addwf	fsr2l,f,c
  9657  001384  5008               	movf	UART_buff_get@_this+1,w,c
  9658  001386  22DA               	addwfc	fsr2h,f,c
  9659  001388  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  9660  00138C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  9661                           
  9662                           ;UART.c: 88: --_this->count;
  9663  001390  EE20 F0CC          	lfsr	2,204
  9664  001394  5007               	movf	UART_buff_get@_this,w,c
  9665  001396  26D9               	addwf	fsr2l,f,c
  9666  001398  5008               	movf	UART_buff_get@_this+1,w,c
  9667  00139A  22DA               	addwfc	fsr2h,f,c
  9668  00139C  06DE               	decf	postinc2,f,c
  9669  00139E  0E00               	movlw	0
  9670  0013A0  5ADD               	subwfb	postdec2,f,c
  9671                           
  9672                           ;UART.c: 89: } else {
  9673  0013A2  D002               	goto	i2l608
  9674  0013A4                     i2l3527:
  9675                           
  9676                           ;UART.c: 90: c = 0;
  9677  0013A4  0E00               	movlw	0
  9678  0013A6  6E0B               	movwf	UART_buff_get@c,c
  9679  0013A8                     i2l608:
  9680                           
  9681                           ;UART.c: 91: }
  9682                           ;UART.c: 92: return (c);
  9683  0013A8  500B               	movf	UART_buff_get@c,w,c
  9684  0013AA  0012               	return	
  9685  0013AC                     __end_of_UART_buff_get:
  9686                           	opt stack 0
  9687                           tosu	equ	0xFFF
  9688                           tosh	equ	0xFFE
  9689                           tosl	equ	0xFFD
  9690                           pclatu	equ	0xFFB
  9691                           pclath	equ	0xFFA
  9692                           tblptru	equ	0xFF8
  9693                           tblptrh	equ	0xFF7
  9694                           tblptrl	equ	0xFF6
  9695                           tablat	equ	0xFF5
  9696                           prodh	equ	0xFF4
  9697                           prodl	equ	0xFF3
  9698                           intcon	equ	0xFF2
  9699                           intcon2	equ	0xFF1
  9700                           indf0	equ	0xFEF
  9701                           postinc0	equ	0xFEE
  9702                           fsr0h	equ	0xFEA
  9703                           fsr0l	equ	0xFE9
  9704                           wreg	equ	0xFE8
  9705                           indf1	equ	0xFE7
  9706                           fsr1h	equ	0xFE2
  9707                           fsr1l	equ	0xFE1
  9708                           indf2	equ	0xFDF
  9709                           postinc2	equ	0xFDE
  9710                           postdec2	equ	0xFDD
  9711                           plusw2	equ	0xFDB
  9712                           fsr2h	equ	0xFDA
  9713                           fsr2l	equ	0xFD9
  9714                           status	equ	0xFD8
  9715                           
  9716 ;; *************** function _EUSART2_Receive_ISR *****************
  9717 ;; Defined at:
  9718 ;;		line 141 in file "UART.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;  data            1   11[COMRAM] unsigned char 
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  1    wreg      void 
  9725 ;; Registers used:
  9726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9732 ;;      Params:         0       0       0       0       0       0       0
  9733 ;;      Locals:         1       0       0       0       0       0       0
  9734 ;;      Temps:          0       0       0       0       0       0       0
  9735 ;;      Totals:         1       0       0       0       0       0       0
  9736 ;;Total ram usage:        1 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    2
  9739 ;; This function calls:
  9740 ;;		_UART_buff_put
  9741 ;; This function is called by:
  9742 ;;		_INTERRUPT_InterruptManager
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           	psect	text58
  9747  001E06                     __ptext58:
  9748                           	opt stack 0
  9749  001E06                     _EUSART2_Receive_ISR:
  9750                           	opt stack 21
  9751                           
  9752                           ;UART.c: 142: if (1 == RC2STAbits.OERR) {
  9753                           
  9754                           ;incstack = 0
  9755  001E06  A271               	btfss	3953,1,c	;volatile
  9756  001E08  D002               	goto	i2l639
  9757                           
  9758                           ;UART.c: 145: RC2STAbits.CREN = 0;
  9759  001E0A  9871               	bcf	3953,4,c	;volatile
  9760                           
  9761                           ;UART.c: 146: RC2STAbits.CREN = 1;
  9762  001E0C  8871               	bsf	3953,4,c	;volatile
  9763  001E0E                     i2l639:
  9764                           
  9765                           ;UART.c: 147: }
  9766                           ;UART.c: 148: unsigned char data = RCREG1;
  9767  001E0E  CFAE F00C          	movff	4014,EUSART2_Receive_ISR@data	;volatile
  9768                           
  9769                           ;UART.c: 149: UART_buff_put(&input_buffer, data);
  9770  001E12  0E00               	movlw	low _input_buffer
  9771  001E14  6E07               	movwf	UART_buff_put@_this,c
  9772  001E16  0E02               	movlw	high _input_buffer
  9773  001E18  6E08               	movwf	UART_buff_put@_this+1,c
  9774  001E1A  C00C  F009         	movff	EUSART2_Receive_ISR@data,UART_buff_put@c
  9775  001E1E  EC6D  F007         	call	_UART_buff_put	;wreg free
  9776  001E22  0012               	return		;funcret
  9777  001E24                     __end_of_EUSART2_Receive_ISR:
  9778                           	opt stack 0
  9779                           tosu	equ	0xFFF
  9780                           tosh	equ	0xFFE
  9781                           tosl	equ	0xFFD
  9782                           pclatu	equ	0xFFB
  9783                           pclath	equ	0xFFA
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           intcon2	equ	0xFF1
  9792                           indf0	equ	0xFEF
  9793                           postinc0	equ	0xFEE
  9794                           fsr0h	equ	0xFEA
  9795                           fsr0l	equ	0xFE9
  9796                           wreg	equ	0xFE8
  9797                           indf1	equ	0xFE7
  9798                           fsr1h	equ	0xFE2
  9799                           fsr1l	equ	0xFE1
  9800                           indf2	equ	0xFDF
  9801                           postinc2	equ	0xFDE
  9802                           postdec2	equ	0xFDD
  9803                           plusw2	equ	0xFDB
  9804                           fsr2h	equ	0xFDA
  9805                           fsr2l	equ	0xFD9
  9806                           status	equ	0xFD8
  9807                           
  9808 ;; *************** function _UART_buff_put *****************
  9809 ;; Defined at:
  9810 ;;		line 70 in file "UART.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  9813 ;;		 -> output_buffer(206), input_buffer(206), 
  9814 ;;  c               1    8[COMRAM] const unsigned char 
  9815 ;; Auto vars:     Size  Location     Type
  9816 ;;		None
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  1    wreg      void 
  9819 ;; Registers used:
  9820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9826 ;;      Params:         3       0       0       0       0       0       0
  9827 ;;      Locals:         0       0       0       0       0       0       0
  9828 ;;      Temps:          2       0       0       0       0       0       0
  9829 ;;      Totals:         5       0       0       0       0       0       0
  9830 ;;Total ram usage:        5 bytes
  9831 ;; Hardware stack levels used:    1
  9832 ;; Hardware stack levels required when called:    1
  9833 ;; This function calls:
  9834 ;;		_UART_buff_modulo_inc
  9835 ;; This function is called by:
  9836 ;;		_EUSART2_Receive_ISR
  9837 ;;		_Send_put
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           	psect	text59
  9842  000EDA                     __ptext59:
  9843                           	opt stack 0
  9844  000EDA                     _UART_buff_put:
  9845                           	opt stack 21
  9846                           
  9847                           ;UART.c: 71: if (_this->count < 200) {
  9848                           
  9849                           ;incstack = 0
  9850  000EDA  EE20 F0CC          	lfsr	2,204
  9851  000EDE  5007               	movf	UART_buff_put@_this,w,c
  9852  000EE0  26D9               	addwf	fsr2l,f,c
  9853  000EE2  5008               	movf	UART_buff_put@_this+1,w,c
  9854  000EE4  22DA               	addwfc	fsr2h,f,c
  9855  000EE6  0E01               	movlw	1
  9856  000EE8  BEDB               	btfsc	plusw2,7,c
  9857  000EEA  D007               	goto	i2l3507
  9858  000EEC  0E01               	movlw	1
  9859  000EEE  50DB               	movf	plusw2,w,c
  9860  000EF0  E13A               	bnz	i2l3513
  9861  000EF2  0EC8               	movlw	200
  9862  000EF4  5CDE               	subwf	postinc2,w,c
  9863  000EF6  B0D8               	btfsc	status,0,c
  9864  000EF8  D036               	goto	i2l3513
  9865  000EFA                     i2l3507:
  9866                           
  9867                           ;UART.c: 72: _this->buf[_this->head] = c;
  9868  000EFA  EE20 F0C8          	lfsr	2,200
  9869  000EFE  5007               	movf	UART_buff_put@_this,w,c
  9870  000F00  26D9               	addwf	fsr2l,f,c
  9871  000F02  5008               	movf	UART_buff_put@_this+1,w,c
  9872  000F04  22DA               	addwfc	fsr2h,f,c
  9873  000F06  CFDE F00A          	movff	postinc2,??_UART_buff_put
  9874  000F0A  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  9875  000F0E  500A               	movf	??_UART_buff_put,w,c
  9876  000F10  2407               	addwf	UART_buff_put@_this,w,c
  9877  000F12  6ED9               	movwf	fsr2l,c
  9878  000F14  500B               	movf	??_UART_buff_put+1,w,c
  9879  000F16  2008               	addwfc	UART_buff_put@_this+1,w,c
  9880  000F18  6EDA               	movwf	fsr2h,c
  9881  000F1A  C009  FFDF         	movff	UART_buff_put@c,indf2
  9882                           
  9883                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  9884  000F1E  EE20 F0C8          	lfsr	2,200
  9885  000F22  5007               	movf	UART_buff_put@_this,w,c
  9886  000F24  26D9               	addwf	fsr2l,f,c
  9887  000F26  5008               	movf	UART_buff_put@_this+1,w,c
  9888  000F28  22DA               	addwfc	fsr2h,f,c
  9889  000F2A  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  9890  000F2E  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  9891  000F32  0E00               	movlw	0
  9892  000F34  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  9893  000F36  0EC8               	movlw	200
  9894  000F38  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  9895  000F3A  EC77  F00E         	call	_UART_buff_modulo_inc	;wreg free
  9896  000F3E  EE20 F0C8          	lfsr	2,200
  9897  000F42  5007               	movf	UART_buff_put@_this,w,c
  9898  000F44  26D9               	addwf	fsr2l,f,c
  9899  000F46  5008               	movf	UART_buff_put@_this+1,w,c
  9900  000F48  22DA               	addwfc	fsr2h,f,c
  9901  000F4A  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  9902  000F4E  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  9903                           
  9904                           ;UART.c: 74: ++_this->count;
  9905  000F52  EE20 F0CC          	lfsr	2,204
  9906  000F56  5007               	movf	UART_buff_put@_this,w,c
  9907  000F58  26D9               	addwf	fsr2l,f,c
  9908  000F5A  5008               	movf	UART_buff_put@_this+1,w,c
  9909  000F5C  22DA               	addwfc	fsr2h,f,c
  9910  000F5E  2ADE               	incf	postinc2,f,c
  9911  000F60  0E00               	movlw	0
  9912  000F62  22DD               	addwfc	postdec2,f,c
  9913                           
  9914                           ;UART.c: 75: } else {
  9915  000F64  0012               	return	
  9916  000F66                     i2l3513:
  9917                           
  9918                           ;UART.c: 76: _this->buf[_this->head] = c;
  9919  000F66  EE20 F0C8          	lfsr	2,200
  9920  000F6A  5007               	movf	UART_buff_put@_this,w,c
  9921  000F6C  26D9               	addwf	fsr2l,f,c
  9922  000F6E  5008               	movf	UART_buff_put@_this+1,w,c
  9923  000F70  22DA               	addwfc	fsr2h,f,c
  9924  000F72  CFDE F00A          	movff	postinc2,??_UART_buff_put
  9925  000F76  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  9926  000F7A  500A               	movf	??_UART_buff_put,w,c
  9927  000F7C  2407               	addwf	UART_buff_put@_this,w,c
  9928  000F7E  6ED9               	movwf	fsr2l,c
  9929  000F80  500B               	movf	??_UART_buff_put+1,w,c
  9930  000F82  2008               	addwfc	UART_buff_put@_this+1,w,c
  9931  000F84  6EDA               	movwf	fsr2h,c
  9932  000F86  C009  FFDF         	movff	UART_buff_put@c,indf2
  9933                           
  9934                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  9935  000F8A  EE20 F0C8          	lfsr	2,200
  9936  000F8E  5007               	movf	UART_buff_put@_this,w,c
  9937  000F90  26D9               	addwf	fsr2l,f,c
  9938  000F92  5008               	movf	UART_buff_put@_this+1,w,c
  9939  000F94  22DA               	addwfc	fsr2h,f,c
  9940  000F96  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  9941  000F9A  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  9942  000F9E  0E00               	movlw	0
  9943  000FA0  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  9944  000FA2  0EC8               	movlw	200
  9945  000FA4  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  9946  000FA6  EC77  F00E         	call	_UART_buff_modulo_inc	;wreg free
  9947  000FAA  EE20 F0C8          	lfsr	2,200
  9948  000FAE  5007               	movf	UART_buff_put@_this,w,c
  9949  000FB0  26D9               	addwf	fsr2l,f,c
  9950  000FB2  5008               	movf	UART_buff_put@_this+1,w,c
  9951  000FB4  22DA               	addwfc	fsr2h,f,c
  9952  000FB6  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  9953  000FBA  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  9954                           
  9955                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  9956  000FBE  EE20 F0CA          	lfsr	2,202
  9957  000FC2  5007               	movf	UART_buff_put@_this,w,c
  9958  000FC4  26D9               	addwf	fsr2l,f,c
  9959  000FC6  5008               	movf	UART_buff_put@_this+1,w,c
  9960  000FC8  22DA               	addwfc	fsr2h,f,c
  9961  000FCA  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  9962  000FCE  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  9963  000FD2  0E00               	movlw	0
  9964  000FD4  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  9965  000FD6  0EC8               	movlw	200
  9966  000FD8  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  9967  000FDA  EC77  F00E         	call	_UART_buff_modulo_inc	;wreg free
  9968  000FDE  EE20 F0CA          	lfsr	2,202
  9969  000FE2  5007               	movf	UART_buff_put@_this,w,c
  9970  000FE4  26D9               	addwf	fsr2l,f,c
  9971  000FE6  5008               	movf	UART_buff_put@_this+1,w,c
  9972  000FE8  22DA               	addwfc	fsr2h,f,c
  9973  000FEA  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  9974  000FEE  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  9975  000FF2  0012               	return	
  9976  000FF4                     __end_of_UART_buff_put:
  9977                           	opt stack 0
  9978                           tosu	equ	0xFFF
  9979                           tosh	equ	0xFFE
  9980                           tosl	equ	0xFFD
  9981                           pclatu	equ	0xFFB
  9982                           pclath	equ	0xFFA
  9983                           tblptru	equ	0xFF8
  9984                           tblptrh	equ	0xFF7
  9985                           tblptrl	equ	0xFF6
  9986                           tablat	equ	0xFF5
  9987                           prodh	equ	0xFF4
  9988                           prodl	equ	0xFF3
  9989                           intcon	equ	0xFF2
  9990                           intcon2	equ	0xFF1
  9991                           indf0	equ	0xFEF
  9992                           postinc0	equ	0xFEE
  9993                           fsr0h	equ	0xFEA
  9994                           fsr0l	equ	0xFE9
  9995                           wreg	equ	0xFE8
  9996                           indf1	equ	0xFE7
  9997                           fsr1h	equ	0xFE2
  9998                           fsr1l	equ	0xFE1
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           postdec2	equ	0xFDD
 10002                           plusw2	equ	0xFDB
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function _UART_buff_modulo_inc *****************
 10008 ;; Defined at:
 10009 ;;		line 108 in file "UART.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;  value           2    0[COMRAM] const unsigned int 
 10012 ;;  modulus         2    2[COMRAM] const unsigned int 
 10013 ;; Auto vars:     Size  Location     Type
 10014 ;;  my_value        2    4[COMRAM] unsigned int 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  2    0[COMRAM] unsigned int 
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10024 ;;      Params:         4       0       0       0       0       0       0
 10025 ;;      Locals:         2       0       0       0       0       0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0
 10027 ;;      Totals:         6       0       0       0       0       0       0
 10028 ;;Total ram usage:        6 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; This function calls:
 10031 ;;		Nothing
 10032 ;; This function is called by:
 10033 ;;		_UART_buff_put
 10034 ;;		_UART_buff_get
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           	psect	text60
 10039  001CEE                     __ptext60:
 10040                           	opt stack 0
 10041  001CEE                     _UART_buff_modulo_inc:
 10042                           	opt stack 21
 10043                           
 10044                           ;UART.c: 109: unsigned int my_value = value + 1;
 10045                           
 10046                           ;incstack = 0
 10047  001CEE  0E01               	movlw	1
 10048  001CF0  2401               	addwf	UART_buff_modulo_inc@value,w,c
 10049  001CF2  6E05               	movwf	UART_buff_modulo_inc@my_value,c
 10050  001CF4  0E00               	movlw	0
 10051  001CF6  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
 10052  001CF8  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
 10053                           
 10054                           ;UART.c: 110: if (my_value >= modulus) {
 10055  001CFA  5003               	movf	UART_buff_modulo_inc@modulus,w,c
 10056  001CFC  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
 10057  001CFE  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
 10058  001D00  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
 10059  001D02  A0D8               	btfss	status,0,c
 10060  001D04  D004               	goto	i2l3181
 10061                           
 10062                           ;UART.c: 111: my_value = 0;
 10063  001D06  0E00               	movlw	0
 10064  001D08  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
 10065  001D0A  0E00               	movlw	0
 10066  001D0C  6E05               	movwf	UART_buff_modulo_inc@my_value,c
 10067  001D0E                     i2l3181:
 10068                           
 10069                           ;UART.c: 112: }
 10070                           ;UART.c: 113: return (my_value);
 10071  001D0E  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
 10072  001D12  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
 10073  001D16  0012               	return	
 10074  001D18                     __end_of_UART_buff_modulo_inc:
 10075                           	opt stack 0
 10076                           tosu	equ	0xFFF
 10077                           tosh	equ	0xFFE
 10078                           tosl	equ	0xFFD
 10079                           pclatu	equ	0xFFB
 10080                           pclath	equ	0xFFA
 10081                           tblptru	equ	0xFF8
 10082                           tblptrh	equ	0xFF7
 10083                           tblptrl	equ	0xFF6
 10084                           tablat	equ	0xFF5
 10085                           prodh	equ	0xFF4
 10086                           prodl	equ	0xFF3
 10087                           intcon	equ	0xFF2
 10088                           intcon2	equ	0xFF1
 10089                           indf0	equ	0xFEF
 10090                           postinc0	equ	0xFEE
 10091                           fsr0h	equ	0xFEA
 10092                           fsr0l	equ	0xFE9
 10093                           wreg	equ	0xFE8
 10094                           indf1	equ	0xFE7
 10095                           fsr1h	equ	0xFE2
 10096                           fsr1l	equ	0xFE1
 10097                           indf2	equ	0xFDF
 10098                           postinc2	equ	0xFDE
 10099                           postdec2	equ	0xFDD
 10100                           plusw2	equ	0xFDB
 10101                           fsr2h	equ	0xFDA
 10102                           fsr2l	equ	0xFD9
 10103                           status	equ	0xFD8
 10104                           
 10105 ;; *************** function _EUSART1_Transmit_ISR *****************
 10106 ;; Defined at:
 10107 ;;		line 155 in file "mcc_generated_files/eusart2.c"
 10108 ;; Parameters:    Size  Location     Type
 10109 ;;		None
 10110 ;; Auto vars:     Size  Location     Type
 10111 ;;		None
 10112 ;; Return value:  Size  Location     Type
 10113 ;;                  1    wreg      void 
 10114 ;; Registers used:
 10115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10116 ;; Tracked objects:
 10117 ;;		On entry : 0/0
 10118 ;;		On exit  : 0/0
 10119 ;;		Unchanged: 0/0
 10120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10121 ;;      Params:         0       0       0       0       0       0       0
 10122 ;;      Locals:         0       0       0       0       0       0       0
 10123 ;;      Temps:          0       0       0       0       0       0       0
 10124 ;;      Totals:         0       0       0       0       0       0       0
 10125 ;;Total ram usage:        0 bytes
 10126 ;; Hardware stack levels used:    1
 10127 ;; This function calls:
 10128 ;;		Nothing
 10129 ;; This function is called by:
 10130 ;;		_INTERRUPT_InterruptManager
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           	psect	text61
 10135  001BE6                     __ptext61:
 10136                           	opt stack 0
 10137  001BE6                     _EUSART1_Transmit_ISR:
 10138                           	opt stack 23
 10139                           
 10140                           ;eusart2.c: 158: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 10141                           
 10142                           ;incstack = 0
 10143  001BE6  0E08               	movlw	8
 10144  001BE8  603A               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 10145  001BEA  D012               	goto	i2l62
 10146                           
 10147                           ;eusart2.c: 159: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 10148  001BEC  503C               	movf	_eusart1TxTail,w,c
 10149  001BEE  0D01               	mullw	1
 10150  001BF0  0E73               	movlw	low _eusart1TxBuffer
 10151  001BF2  24F3               	addwf	prodl,w,c
 10152  001BF4  6ED9               	movwf	fsr2l,c
 10153  001BF6  0E00               	movlw	high _eusart1TxBuffer
 10154  001BF8  20F4               	addwfc	prodh,w,c
 10155  001BFA  6EDA               	movwf	fsr2h,c
 10156  001BFC  50DF               	movf	indf2,w,c
 10157  001BFE  6EAD               	movwf	4013,c	;volatile
 10158  001C00  2A3C               	incf	_eusart1TxTail,f,c
 10159                           
 10160                           ;eusart2.c: 160: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 10161  001C02  0E07               	movlw	7
 10162  001C04  643C               	cpfsgt	_eusart1TxTail,c
 10163  001C06  D002               	goto	i2l3581
 10164                           
 10165                           ;eusart2.c: 161: eusart1TxTail = 0;
 10166  001C08  0E00               	movlw	0
 10167  001C0A  6E3C               	movwf	_eusart1TxTail,c
 10168  001C0C                     i2l3581:
 10169                           
 10170                           ;eusart2.c: 162: }
 10171                           ;eusart2.c: 163: eusart1TxBufferRemaining++;
 10172  001C0C  2A3A               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 10173                           
 10174                           ;eusart2.c: 164: } else {
 10175  001C0E  0012               	return	
 10176  001C10                     i2l62:
 10177                           
 10178                           ;eusart2.c: 165: PIE1bits.TX1IE = 0;
 10179  001C10  989D               	bcf	3997,4,c	;volatile
 10180  001C12  0012               	return	
 10181  001C14                     __end_of_EUSART1_Transmit_ISR:
 10182                           	opt stack 0
 10183                           tosu	equ	0xFFF
 10184                           tosh	equ	0xFFE
 10185                           tosl	equ	0xFFD
 10186                           pclatu	equ	0xFFB
 10187                           pclath	equ	0xFFA
 10188                           tblptru	equ	0xFF8
 10189                           tblptrh	equ	0xFF7
 10190                           tblptrl	equ	0xFF6
 10191                           tablat	equ	0xFF5
 10192                           prodh	equ	0xFF4
 10193                           prodl	equ	0xFF3
 10194                           intcon	equ	0xFF2
 10195                           intcon2	equ	0xFF1
 10196                           indf0	equ	0xFEF
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           indf1	equ	0xFE7
 10202                           fsr1h	equ	0xFE2
 10203                           fsr1l	equ	0xFE1
 10204                           indf2	equ	0xFDF
 10205                           postinc2	equ	0xFDE
 10206                           postdec2	equ	0xFDD
 10207                           plusw2	equ	0xFDB
 10208                           fsr2h	equ	0xFDA
 10209                           fsr2l	equ	0xFD9
 10210                           status	equ	0xFD8
 10211                           
 10212 ;; *************** function _EUSART1_Receive_ISR *****************
 10213 ;; Defined at:
 10214 ;;		line 169 in file "mcc_generated_files/eusart2.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;		None
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;		None
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10228 ;;      Params:         0       0       0       0       0       0       0
 10229 ;;      Locals:         0       0       0       0       0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0
 10231 ;;      Totals:         0       0       0       0       0       0       0
 10232 ;;Total ram usage:        0 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		_INTERRUPT_InterruptManager
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text62
 10242  001C98                     __ptext62:
 10243                           	opt stack 0
 10244  001C98                     _EUSART1_Receive_ISR:
 10245                           	opt stack 23
 10246                           
 10247                           ;eusart2.c: 170: if (1 == RC1STAbits.OERR) {
 10248                           
 10249                           ;incstack = 0
 10250  001C98  A2AB               	btfss	4011,1,c	;volatile
 10251  001C9A  D002               	goto	i2l3587
 10252                           
 10253                           ;eusart2.c: 173: RC1STAbits.CREN = 0;
 10254  001C9C  98AB               	bcf	4011,4,c	;volatile
 10255                           
 10256                           ;eusart2.c: 174: RC1STAbits.CREN = 1;
 10257  001C9E  88AB               	bsf	4011,4,c	;volatile
 10258  001CA0                     i2l3587:
 10259                           
 10260                           ;eusart2.c: 175: }
 10261                           ;eusart2.c: 178: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 10262  001CA0  5038               	movf	_eusart1RxHead,w,c
 10263  001CA2  0D01               	mullw	1
 10264  001CA4  0E6B               	movlw	low _eusart1RxBuffer
 10265  001CA6  24F3               	addwf	prodl,w,c
 10266  001CA8  6ED9               	movwf	fsr2l,c
 10267  001CAA  0E00               	movlw	high _eusart1RxBuffer
 10268  001CAC  20F4               	addwfc	prodh,w,c
 10269  001CAE  6EDA               	movwf	fsr2h,c
 10270  001CB0  CFAE FFDF          	movff	4014,indf2	;volatile
 10271  001CB4  2A38               	incf	_eusart1RxHead,f,c
 10272                           
 10273                           ;eusart2.c: 179: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 10274  001CB6  0E07               	movlw	7
 10275  001CB8  6438               	cpfsgt	_eusart1RxHead,c
 10276  001CBA  D002               	goto	i2l3595
 10277                           
 10278                           ;eusart2.c: 180: eusart1RxHead = 0;
 10279  001CBC  0E00               	movlw	0
 10280  001CBE  6E38               	movwf	_eusart1RxHead,c
 10281  001CC0                     i2l3595:
 10282                           
 10283                           ;eusart2.c: 181: }
 10284                           ;eusart2.c: 182: eusart1RxCount++;
 10285  001CC0  2A37               	incf	_eusart1RxCount,f,c	;volatile
 10286  001CC2  0012               	return		;funcret
 10287  001CC4                     __end_of_EUSART1_Receive_ISR:
 10288                           	opt stack 0
 10289                           tosu	equ	0xFFF
 10290                           tosh	equ	0xFFE
 10291                           tosl	equ	0xFFD
 10292                           pclatu	equ	0xFFB
 10293                           pclath	equ	0xFFA
 10294                           tblptru	equ	0xFF8
 10295                           tblptrh	equ	0xFF7
 10296                           tblptrl	equ	0xFF6
 10297                           tablat	equ	0xFF5
 10298                           prodh	equ	0xFF4
 10299                           prodl	equ	0xFF3
 10300                           intcon	equ	0xFF2
 10301                           intcon2	equ	0xFF1
 10302                           indf0	equ	0xFEF
 10303                           postinc0	equ	0xFEE
 10304                           fsr0h	equ	0xFEA
 10305                           fsr0l	equ	0xFE9
 10306                           wreg	equ	0xFE8
 10307                           indf1	equ	0xFE7
 10308                           fsr1h	equ	0xFE2
 10309                           fsr1l	equ	0xFE1
 10310                           indf2	equ	0xFDF
 10311                           postinc2	equ	0xFDE
 10312                           postdec2	equ	0xFDD
 10313                           plusw2	equ	0xFDB
 10314                           fsr2h	equ	0xFDA
 10315                           fsr2l	equ	0xFD9
 10316                           status	equ	0xFD8
 10317                           tosu	equ	0xFFF
 10318                           tosh	equ	0xFFE
 10319                           tosl	equ	0xFFD
 10320                           pclatu	equ	0xFFB
 10321                           pclath	equ	0xFFA
 10322                           tblptru	equ	0xFF8
 10323                           tblptrh	equ	0xFF7
 10324                           tblptrl	equ	0xFF6
 10325                           tablat	equ	0xFF5
 10326                           prodh	equ	0xFF4
 10327                           prodl	equ	0xFF3
 10328                           intcon	equ	0xFF2
 10329                           intcon2	equ	0xFF1
 10330                           indf0	equ	0xFEF
 10331                           postinc0	equ	0xFEE
 10332                           fsr0h	equ	0xFEA
 10333                           fsr0l	equ	0xFE9
 10334                           wreg	equ	0xFE8
 10335                           indf1	equ	0xFE7
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           plusw2	equ	0xFDB
 10342                           fsr2h	equ	0xFDA
 10343                           fsr2l	equ	0xFD9
 10344                           status	equ	0xFD8
 10345                           
 10346                           	psect	text63
 10347  000000                     __ptext63:
 10348                           	opt stack 0
 10349                           tosu	equ	0xFFF
 10350                           tosh	equ	0xFFE
 10351                           tosl	equ	0xFFD
 10352                           pclatu	equ	0xFFB
 10353                           pclath	equ	0xFFA
 10354                           tblptru	equ	0xFF8
 10355                           tblptrh	equ	0xFF7
 10356                           tblptrl	equ	0xFF6
 10357                           tablat	equ	0xFF5
 10358                           prodh	equ	0xFF4
 10359                           prodl	equ	0xFF3
 10360                           intcon	equ	0xFF2
 10361                           intcon2	equ	0xFF1
 10362                           indf0	equ	0xFEF
 10363                           postinc0	equ	0xFEE
 10364                           fsr0h	equ	0xFEA
 10365                           fsr0l	equ	0xFE9
 10366                           wreg	equ	0xFE8
 10367                           indf1	equ	0xFE7
 10368                           fsr1h	equ	0xFE2
 10369                           fsr1l	equ	0xFE1
 10370                           indf2	equ	0xFDF
 10371                           postinc2	equ	0xFDE
 10372                           postdec2	equ	0xFDD
 10373                           plusw2	equ	0xFDB
 10374                           fsr2h	equ	0xFDA
 10375                           fsr2l	equ	0xFD9
 10376                           status	equ	0xFD8
 10377                           
 10378                           	psect	rparam
 10379  0000                     tosu	equ	0xFFF
 10380                           tosh	equ	0xFFE
 10381                           tosl	equ	0xFFD
 10382                           pclatu	equ	0xFFB
 10383                           pclath	equ	0xFFA
 10384                           tblptru	equ	0xFF8
 10385                           tblptrh	equ	0xFF7
 10386                           tblptrl	equ	0xFF6
 10387                           tablat	equ	0xFF5
 10388                           prodh	equ	0xFF4
 10389                           prodl	equ	0xFF3
 10390                           intcon	equ	0xFF2
 10391                           intcon2	equ	0xFF1
 10392                           indf0	equ	0xFEF
 10393                           postinc0	equ	0xFEE
 10394                           fsr0h	equ	0xFEA
 10395                           fsr0l	equ	0xFE9
 10396                           wreg	equ	0xFE8
 10397                           indf1	equ	0xFE7
 10398                           fsr1h	equ	0xFE2
 10399                           fsr1l	equ	0xFE1
 10400                           indf2	equ	0xFDF
 10401                           postinc2	equ	0xFDE
 10402                           postdec2	equ	0xFDD
 10403                           plusw2	equ	0xFDB
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8
 10407                           
 10408                           	psect	temp
 10409  000045                     btemp:
 10410                           	opt stack 0
 10411  000045                     	ds	1
 10412  0000                     int$flags	set	btemp
 10413                           tosu	equ	0xFFF
 10414                           tosh	equ	0xFFE
 10415                           tosl	equ	0xFFD
 10416                           pclatu	equ	0xFFB
 10417                           pclath	equ	0xFFA
 10418                           tblptru	equ	0xFF8
 10419                           tblptrh	equ	0xFF7
 10420                           tblptrl	equ	0xFF6
 10421                           tablat	equ	0xFF5
 10422                           prodh	equ	0xFF4
 10423                           prodl	equ	0xFF3
 10424                           intcon	equ	0xFF2
 10425                           intcon2	equ	0xFF1
 10426                           indf0	equ	0xFEF
 10427                           postinc0	equ	0xFEE
 10428                           fsr0h	equ	0xFEA
 10429                           fsr0l	equ	0xFE9
 10430                           wreg	equ	0xFE8
 10431                           indf1	equ	0xFE7
 10432                           fsr1h	equ	0xFE2
 10433                           fsr1l	equ	0xFE1
 10434                           indf2	equ	0xFDF
 10435                           postinc2	equ	0xFDE
 10436                           postdec2	equ	0xFDD
 10437                           plusw2	equ	0xFDB
 10438                           fsr2h	equ	0xFDA
 10439                           fsr2l	equ	0xFD9
 10440                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    490
    Data        1
    BSS         1000
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      68
    BANK0           160     37     151
    BANK1           256      0     246
    BANK2           256     11     217
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(BANK2[10]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 40
		 -> ChargerData(BANK0[40]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 40
		 -> ChargerData(BANK0[40]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_15(CODE[8]), STR_13(CODE[6]), STR_11(CODE[6]), STR_9(CODE[3]), 
		 -> STR_7(CODE[8]), STR_5(CODE[6]), STR_3(CODE[6]), STR_1(CODE[3]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(BANK2[10]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(BANK2[10]), NULL(NULL[0]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_16(CODE[3]), STR_14(CODE[3]), STR_12(CODE[3]), STR_10(CODE[3]), 
		 -> STR_8(CODE[3]), STR_6(CODE[3]), STR_4(CODE[3]), STR_2(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(BANK2[10]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), STR_19(CODE[7]), ChargerData(BANK0[40]), 
		 -> SetCharger@str(BANK2[10]), NULL(NULL[0]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_16(CODE[3]), STR_15(CODE[8]), STR_14(CODE[3]), STR_13(CODE[6]), 
		 -> STR_12(CODE[3]), STR_11(CODE[6]), STR_10(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[3]), STR_7(CODE[8]), STR_6(CODE[3]), STR_5(CODE[6]), 
		 -> STR_4(CODE[3]), STR_3(CODE[6]), STR_2(CODE[3]), STR_1(CODE[3]), 

    S2137__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S2137__prbuf$ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(BANK2[10]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(BANK2[10]), NULL(NULL[0]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 12
		 -> STR_18(CODE[7]), STR_17(CODE[12]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> ChargerData(BANK0[40]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1689(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _respondChargerAsECU->_sendData
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _Precharge->_Delay
    __doprnt->___lwmod
    _putch->_EUSART1_Write
    ___lwmod->___lwdiv
    _gotoXy->_LCDwrite
    _NokiaStr->_LcdCharacter
    _LcdCharacter->_LCDwrite
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART2_Receive_ISR
    _EUSART2_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART2_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_SetCharger
    _respondChargerAsECU->_sendData
    _receiveData->_CRCcheck
    _ledDebug->_SetCharger
    _SetCharger->_sprintf
    _sprintf->__doprnt
    _printf->__doprnt
    _Splash->_NokiaStr

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _updateComms->_SetCharger
    _ledDebug->_SetCharger

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   49660
                              _Delay
                         _NokiaStart
                  _SYSTEM_Initialize
                             _Splash
                           _clearLcd
                           _ledDebug
                        _updateComms
                       _updateTimers
 ---------------------------------------------------------------------------------
 (1) _updateTimers                                         8     8      0       0
                                             26 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   26292
                          _Precharge
                         _SetCharger
                        _receiveData
                _respondChargerAsECU
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  1     1      0    5729
                                              4 BANK0      1     1      0
                              _Delay
                      _GetPowerState
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                             38 COMRAM     1     1      0
                                              0 BANK0      4     4      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1982
                                              0 BANK0      3     1      2
            _FastTransfer_buffer_put
                      _GetPowerState (ARG)
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _GetPowerState                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0     864
                                             31 COMRAM     5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0   14559
                         _SetCharger
                           _time_Set
                           _time_get
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                          15    11      4   14429
                                             33 BANK0      4     0      4
                                              0 BANK2     11    11      0
                             _SetMux
                            ___awmod
                             _printf
                            _sprintf
                             _strcpy
 ---------------------------------------------------------------------------------
 (3) _strcpy                                               6     2      4    1341
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             12     6      6    6053
                                             21 BANK0     12     6      6
                            ___awmod (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _printf                                              10     6      4    5361
                                             21 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) __doprnt                                             25    19      6    4477
                                              0 BANK0     21    15      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     386
                                             33 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     395
                                             26 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     587
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Splash                                               0     0      0    3145
                           _NokiaStr
                             _gotoXy
 ---------------------------------------------------------------------------------
 (2) _gotoXy                                               2     1      1    1237
                                             34 COMRAM     2     1      1
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _NokiaStr                                             2     0      2    1908
                                              0 BANK0      2     0      2
                       _LcdCharacter
 ---------------------------------------------------------------------------------
 (3) _LcdCharacter                                         5     5      0    1689
                                             34 COMRAM     5     5      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     540
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    1015
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    2834
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0    1065
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1019
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      15
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     750
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (8) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (9) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART2_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (9) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) _UART_buff_modulo_inc                                6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _SYSTEM_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _Splash
     _NokiaStr
       _LcdCharacter
         _LCDwrite
           _SPI1_Exchange8bit
           ___wmul (ARG)
         ___wmul
     _gotoXy
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _clearLcd
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _ledDebug
     _SetCharger
       _SetMux
       ___awmod
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _EUSART1_Write
       _sprintf
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _EUSART1_Write
       _strcpy
     _time_Set
     _time_get
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       ___awmod
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _EUSART1_Write
       _sprintf
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _EUSART1_Write
       _strcpy
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondChargerAsECU
       _Delay
       _GetPowerState
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
         _GetPowerState (ARG)
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put
   _updateTimers

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _EUSART2_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART2_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      B      D9       8       84.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F6       6       96.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     25      97       4       94.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     440       9        0.0%
DATA                 0      0     440      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Fri Jul 15 17:29:09 2016

                      _SPI1_Exchange8bit 1E98        __end_of_FastTransfer_buffer_flush 1796  
               _eusart1TxBufferRemaining 003A                                        _i 003D  
                           _rx_array_inx 0042                       ?_SPI1_Exchange8bit 0001  
                                     l50 1A5A                     __end_of_LcdCharacter 14A8  
                EUSART2_Receive_ISR@data 000C                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l212 1EA0                                      l700 14E8  
                                    l550 1284                                      l447 191E  
                                    l720 1A86                                      l801 1E4A  
                                    l561 1318                                      l474 0B1A  
                                    l803 1E4C                                      l731 1A92  
                                    l708 1518                                      l726 1A8C  
                                    l736 1A98                                      l682 1B42  
                                    l693 14DC                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000                      ??_SPI1_Exchange8bit 001B  
   FastTransfer_buffer_flush@clearBuffer 0025                             ___awmod@sign 0020  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                                     l1320 18E2  
                                   l1330 1A02                                     l3121 1B2E  
                                   l4011 0D9A                                     l4101 0236  
                                   l4111 02AC                                     l4103 0242  
                                   l4201 0618                                     l4113 02B8  
                                   l4121 0320                                     l4105 0248  
                                   l4033 1008                                     l4211 0694  
                                   l4123 0338                                     l4205 0656  
                                   l4221 070A                                     l4117 02F6  
                                   l4141 0434                                     l3413 14BA  
                                   l4045 108C                                     l4029 0FFE  
                                   l4061 123E                                     l4053 11B8  
                                   l4223 0710                                     l4151 0478  
                                   l4127 0394                                     l4135 03EA  
                                   l4071 0108                                     l3431 1506  
                                   l4233 07C0                                     l4217 06E0  
                                   l4209 0680                                     l4129 039C  
                                   l4081 0150                                     l4065 00BE  
                                   l4305 1BC2                                     l3417 14CA  
                                   l3283 1D48                                     l4323 1452  
                                   l4163 04AE                                     l4139 0402  
                                   l4075 0134                                     l4235 07CC  
                                   l4307 1BCA                                     l3427 14F6  
                                   l4229 0796                                     l4173 0508  
                                   l4149 0472                                     l4237 07E8  
                                   l4077 0146                                     l3287 1D58  
                                   l4319 1442                                     l4351 15CE  
                                   l4343 15B4                                     l4183 0564  
                                   l4175 0512                                     l4095 01F6  
                                   l4087 0180                                     l4263 1286  
                                   l4407 0B10                                     l4247 1544  
                                   l4329 149C                                     l4193 05D8  
                                   l4169 04D0                                     l4521 0954  
                                   l4281 1310                                     l4249 154A  
                                   l4363 15FA                                     l4355 15E2  
                                   l4347 15C2                                     l4339 15A8  
                                   l4187 058E                                     l4267 129C  
                                   l4443 0C52                                     l4293 1A9E  
                                   l4349 15CA                                     l4197 0602  
                                   l4277 12F0                                     l4445 0C58  
                                   l4437 0BB8                                     l3911 1C76  
                                   l4359 15EC                                     l4199 060C  
                                   l4447 0C6C                                     l4561 1C16  
                                   l4481 0D62                                     l3905 1CE4  
                                   l4641 183A                                     l3915 1C86  
                                   l4459 0CF2                                     l4565 1C2C  
                                   l3941 18B0                                     l3925 1DE0  
                                   l4469 0CFE                                     l4397 0AD0  
                                   l3943 18B8                                     l3953 18D8  
                                   l3945 18BC                                     l3961 19D8  
                                   l4593 1956                                     l4489 0D6E  
                   receiveData@crcHolder 00DF                                     l3963 19E0  
                                   l3883 1A4A                                     l3965 19E4  
                                   l3981 1908                                     l3895 1A7C  
                                   l3975 18F2                                     l3991 192A  
                                   l3969 19F8                                     l3897 1A7E  
                                   l3989 1924                                     STR_1 7FF9  
                                   STR_2 7FFC                                     STR_3 7FF3  
                                   STR_4 7FFC                                     STR_5 7FF3  
                                   STR_6 7FFC                                     STR_7 7FDD  
                                   STR_8 7FFC                                     _CRC8 18EC  
                                   STR_9 7FF9                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u3140 1198                                     u3161 0D98  
                                   u3360 0392                                     u3328 02E0  
                                   u3280 0280                                     u3248 00F0  
                                   u4057 1B34                                     u3370 03D4  
                                   u3358 0360                                     u3367 0388  
                                   u3287 0276                                     u3608 06CA  
                                   u3528 05C2                                     u3377 03CA  
                                   u3628 077E                                     u3568 0640  
                                   u3498 054E                                     u3871 0B5C  
                                   u3970 194C                                     u3980 1954  
                                   i2l62 1C10                                     _WPUB 000F61  
                  ??_EUSART2_Receive_ISR 000C                            _EUSART1_Write 1A48  
                                   _main 17F2                    ??_respondChargerAsECU 00D6  
                        _TMR0_StartTimer 1EDE                                     _time 0028  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   indf0 000FEF                                     fsr0l 000FE9  
                                   fsr2h 000FDA                                     indf1 000FE7  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 0EDA                                     start 00B8  
              __end_of_SPI1_Exchange8bit 1EA8                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 1B8A                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 1C6C  
                       __end_of_CRCcheck 131A           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1EB6                       crcBufS_put@address 001D  
                                  ?_main 0001                                    STR_10 7FFC  
                                  STR_11 7FF3                                    STR_12 7FFC  
                                  STR_13 7FF3                                    STR_14 7FFC  
                                  STR_15 7FDD                                    STR_16 7FFC  
                                  STR_17 7FD1                                    STR_18 7FEC  
                                  STR_19 7FE5                          __end_of___awmod 1604  
                                  _ANSB0 0079C8                                    _ANSB1 0079C9  
                                  _ANSA3 0079C3                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATA7 007C4F  
                                  _LATD3 007C63                           __CFG_DEBUG$OFF 000000  
                        __end_of___lwdiv 18EC                          __end_of___lwmod 1A0C  
                                  i2l160 004E                                    i2l162 005A  
                                  i2l170 007C                                    i2l164 0066  
                                  i2l166 0072                         __end_of_LCDwrite 1E58  
                                  i2l608 13A8                                    i2l639 1E0E  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                        __end_of__doprnt 07F4                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 1B24                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                            _ChargerData 0099                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1BE6                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                       __end_of_TMR0_ISR 1E70                                    _Start 0087  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 0060  
                         __CFG_EBTRB$OFF 000000                          __end_of_dpowers 7FD1  
                        __end_of_isdigit 1DE8                                    _group 002C  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 1ED0  
                         ?_EUSART1_Write 0001                                    pclath 000FFA  
                                  tablat 000FF5                     __size_of_crcBufS_get 00E2  
                                  plusw2 000FDB                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                          __end_of_sprintf 189A  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 1936                          CRCcheck@SentCRC 00D2  
                        __initialization 1604               __end_of_EUSART1_Initialize 1A48  
                           __end_of_main 1848                               ToSend@what 00D2  
                                 ??_CRC8 001E                        LcdCharacter@index 0026  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0028  
                       __end_of_NokiaStr 1C40                            __activetblptr 000002  
                          SetMux@channel 001B                        SetCharger@Current 00F3  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
                             _SetCharger 07F4            FastTransfer_buffer_put@towhat 0024  
                __end_of_TMR0_StartTimer 1EE2               __end_of_EUSART2_Initialize 1B24  
                             Precharge@i 0021                        SetCharger@Voltage 00F5  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 13AC                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   Delay@i 001E  
                                 i2l3181 1D0E                           __CFG_WDTEN$OFF 000000  
                                 i2l3513 0F66                                   i2l3507 0EFA  
                                 i2l3527 13A4                                   i2l3607 1B82  
            UART_buff_modulo_inc@modulus 0003                                   i2l3581 1C0C  
                                 i2l3595 1CC0                                   i2l3587 1CA0  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISB0 007C98  
                                 _TRISB1 007C99                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                  SPI1_Exchange8bit@data 001B                         __end_of_clearLcd 1D68  
             __size_of_SPI1_Exchange8bit 0010                         __end_of_ledDebug 1980  
                         __CFG_XINST$OFF 000000                    __size_of_LcdCharacter 007A  
                                 _ToSend 1D8E                                   _SetMux 1A82  
                       crcBufS_get@_this 001B                    __end_of_GetPowerState 1EDE  
            ??_FastTransfer_buffer_flush 0027                                   _Splash 1ABA  
                          _output_buffer 0300                         crcBufS_get@space 001E  
                                 ___wmul 1D68                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                                ??___awmod 001F  
                              ??___lwdiv 001F                                ??___lwmod 0026  
                              ??__doprnt 00D8                         ?_TMR0_Initialize 0001  
                                 _gotoXy 1D18                                   _memset 1C6C  
                                 clear_0 160A                                   clear_1 1616  
                                 clear_2 1622                                   clear_3 162E  
                                 clear_4 163A                                   clear_5 1646  
                        ___awmod@divisor 001D                       __size_of_Precharge 0078  
                           __doprnt@flag 00E1                          ___awmod@counter 001F  
                                 _printf 1980                                   _rx_len 0043  
                       __end_of_sendData 1594                             __doprnt@prec 00DC  
                                 _strcpy 1BB8                             __pdataCOMRAM 0044  
                              ??_isdigit 001B                         __end_of_time_Set 1DCA  
                       __end_of_time_get 1E98                             __mediumconst 7DE6  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0168  
                   _EUSART2_Transmit_ISR 1B58             __end_of_UART_buff_modulo_inc 1D18  
                        ??_EUSART1_Write 001B                                ??_sprintf 0027  
                        _eusart1RxBuffer 006B            __size_of_INTERRUPT_Initialize 000C  
                        _eusart1TxBuffer 0073                             _LcdCharacter 142E  
                      _SYSTEM_Initialize 1E24                               __accesstop 0060  
                __end_of__initialization 165E                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                           ?_updateComms 0001                                ?_LCDwrite 0021  
                          __end_of_Delay 1B58                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 11AE                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                                ?_TMR0_ISR 0001  
 __end_of_FastTransfer_buffer_modulo_inc 1CEE  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 1CC4                        ??_SPI1_Initialize 001B  
                            NokiaStr@str 00D2                            __end_of_putch 1EDA  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00D4  
                  LcdCharacter@character 0025                       UART_buff_get@_this 0007  
                    ?_crcBufS_status_put 001B                    __end_of_UART_buff_get 13AC  
                 ??_EUSART1_Transmit_ISR 0001                    __end_of_UART_buff_put 0FF4  
                                ??_Delay 001D                              ?_SetCharger 00F3  
                  ?_EUSART2_Transmit_ISR 0001              __end_of_EUSART1_Receive_ISR 1CC4  
              _FastTransfer_buffer_flush 1734                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                             __doprnt@ap 00D6                               __doprnt@cp 00E2  
                             __doprnt@pb 00D2                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 1E3E                   receiveData@holder_1689 00E4  
                                ??_putch 001C                            _eusart1RxHead 0038  
                    _addressErrorCounter 0089                              ?_NokiaStart 0001  
                          _eusart1TxHead 003B                            _eusart1RxTail 0039  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FC7  
                          _eusart1TxTail 003C                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 1520                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 00D2  
                             ??_LCDwrite 0022                     __size_of_receiveData 02A4  
                                ?_ToSend 00D2                                  ?_SetMux 0001  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Splash 0001  
                                ?___wmul 001B                               ??_TMR0_ISR 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_gotoXy 0023                                  ?_memset 001B  
                             _crc_buffer 00C1                                  ?_printf 00E7  
                       time_Set@WhatTime 001D                                  ?_strcpy 001B  
                     UART_buff_put@_this 0007                                ?_clearLcd 0001  
                                _LEDtime 007B                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 1E24             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                              ?_ledDebug 0001                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00D2                      _receiveArrayAddress 002E  
                                _SSP1BUF 000FC9              __end_of_respondChargerAsECU 1734  
                              ?_sendData 0001                        _alignErrorCounter 008B  
                             ??_NokiaStr 0028                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                              ?_time_Set 001B                          __size_of_ToSend 001E  
                        __size_of_SetMux 0038                      __size_of_SetCharger 02DA  
                              ?_time_get 001B                                  _PowerOn 0035  
                              _AKNAKsend 0034                          __size_of_Splash 0036  
                   _UART_buff_modulo_inc 1CEE                                  ___awmod 1594  
                        __size_of___wmul 0026                                  ___lwdiv 189A  
                                _calc_CS 0036                                  ___lwmod 19CA  
                                __doprnt 00BC                                  __pcinit 1604  
                    __size_of_NokiaStart 0082                          __size_of_gotoXy 0028  
                        __size_of_memset 002C                                  __ramtop 0600  
                                __ptext0 17F2                                  __ptext1 166C  
                                __ptext2 1B8A                                  __ptext3 16D0  
                                __ptext4 1520                                  __ptext5 10D6  
                                __ptext6 1734                                  __ptext7 1D8E  
                                __ptext8 0D72                                  __ptext9 1CC4  
                        __size_of_printf 004A                                _T0CONbits 000FD5  
                        __size_of_strcpy 002E                                  _dpowers 7FC7  
                  _OSCILLATOR_Initialize 1EA8                   ??_EUSART2_Transmit_ISR 000C  
                                _isdigit 1DCA                  _FastTransfer_buffer_put 0D72  
                       ___awmod@dividend 001B                    CRCcheck@calculatedCRC 00D3  
                     _EUSART1_Initialize 1A0C                 ??_PIN_MANAGER_Initialize 001B  
                             ??_clearLcd 0023             crcBufS_status_put@wantedTime 0023  
                             ??_ledDebug 0027                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 001A  
                                _sprintf 1848                            __doprnt@width 00E4  
                   end_of_initialization 165E                                Delay@wait 001B  
                    ?_EUSART1_Initialize 0001                                  gotoXy@x 0024  
                                gotoXy@y 0023                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7DE6                               ??_sendData 0027  
                     _EUSART2_Initialize 1AF0                               ??_time_Set 001D  
                             ??_time_get 001D                                  printf@f 00E7  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 002E  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                      CRCcheck@arrayHolder 00D4  
                   ??_EUSART1_Initialize 0025                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 008F                               _rx_address 0041  
                           LCDwrite@data 0021                             LCDwrite@mode 0022  
                              _TRISAbits 000F92                                _TRISBbits 000F93  
                              _TRISCbits 000F94                      EUSART1_Write@txData 001B  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 0062  
                        _SPI1_Initialize 1EB6                           _UART_buff_init 1DE8  
                         _UART_buff_size 1E70                      __end_of_crcBufS_get 10D6  
                    __end_of_crcBufS_put 11AE                        __size_of_CRCcheck 0096  
                          ?_updateTimers 0001                          Precharge@i_2001 0023  
                          _moduleAddress 003F                     _timer0ReloadVal16bit 0032  
                             CRCcheck@rt 00D7                           __end_of_ToSend 1DAC  
                         __end_of_SetMux 1ABA                        __size_of_LCDwrite 001A  
           __end_of_INTERRUPT_Initialize 1ED0                           __end_of_Splash 1AF0  
                        _crcErrorCounter 008D                           __end_of___wmul 1D8E  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1EE2  
                      __size_of_TMR0_ISR 0018                ??_FastTransfer_buffer_put 0026  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_gotoXy 1D40  
                         __end_of_memset 1C98                        crcBufS_put@status 001F  
                         __end_of_printf 19CA                             receiveData@r 00E9  
                           receiveData@u 00E7                           __end_of_strcpy 1BE6  
                           ??_SetCharger 0027                      start_initialization 1604  
               __size_of_TMR0_Initialize 002C          __size_of_PIN_MANAGER_Initialize 005C  
                  crcBufS_get@wantedTime 0025                   __size_of_GetPowerState 0004  
                            putch@txData 001C                             ??_NokiaStart 0025  
                  __end_of_EUSART1_Write 1A82                   __end_of_UART_buff_init 1E06  
                         UART_buff_get@c 000B                   __end_of_UART_buff_size 1E86  
                         UART_buff_put@c 0009                           ??_updateTimers 001B  
                              _Precharge 14A8                                 ??_ToSend 0028  
                               ??_SetMux 001B                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                                 ??_Splash 0028  
                        crcBufS_get@time 001D                        __size_of_NokiaStr 002C  
                     __end_of_SetCharger 0ACE                                 ??___wmul 001F  
                            __doprnt@len 00DF                              __doprnt@val 00DD  
                               ??_gotoXy 0024                                 ??_memset 0021  
                               ??_printf 0027                       __end_of_NokiaStart 142E  
                               ??_strcpy 001F                           _eusart1RxCount 0037  
                            __pbssCOMRAM 0028            __size_of_EUSART1_Transmit_ISR 002E  
                          __pcstackBANK0 00D2                            __pcstackBANK2 02CE  
                __end_of_SPI1_Initialize 1EC4                             _isdigit$2394 001C  
                    UART_buff_init@_this 0023                        __size_of_clearLcd 0028  
                            _crcBufS_get 0FF4                              _crcBufS_put 10D6  
                      __size_of_ledDebug 004A                          ?_UART_buff_init 0023  
                        ?_UART_buff_size 0001             __size_of_EUSART1_Receive_ISR 002C  
                              __doprnt@c 00E6                                __doprnt@f 00D4  
                          ??_receiveData 00D9              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00D3                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                             ?_Precharge 0001                         ___lwdiv@dividend 001B  
                 _PIN_MANAGER_Initialize 1796                        __size_of_sendData 0074  
                              __pintcode 0008                            __pmediumconst 7DE6  
                          _GetPowerState 1EDA                                 ?___awmod 001B  
                               ?___lwdiv 001B                                 ?___lwmod 0022  
                      __size_of_time_Set 001E                        __size_of_time_get 0012  
                               ?__doprnt 00D2             ??_INTERRUPT_InterruptManager 000D  
                               _BAUD1CON 000FB8                                 _BAUD2CON 000F70  
                               ?_isdigit 0001                           __size_of_Delay 0034  
                       ___lwdiv@quotient 0020                                 ?_sprintf 00E7  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 1EC4  
                           _receiveArray 0100                        ??_TMR0_Initialize 001B  
           __size_of_EUSART2_Receive_ISR 001E                                 _CRCcheck 1284  
                         ___wmul@product 001F                                 _LATBbits 000F8A  
                               _LATCbits 000F8B                      UART_buff_size@_this 0001  
           __size_of_respondChargerAsECU 0064                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 1E3E  
    __size_of_INTERRUPT_InterruptManager 00B0                                 i2u260_40 1338  
                               _PIR1bits 000F9E                                 i2u269_40 1B72  
                               _PIR3bits 000FA4                           ?_GetPowerState 0001  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0D72                                 _SSP1CON1 000FC6  
                               _TMR0_ISR 1E58                                 _SSP1STAT 000FC7  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0200  
                              _rx_buffer 0400                        ___wmul@multiplier 001B  
                            _lastLEDTime 007F                            _UART_buff_get 131A  
                          _UART_buff_put 0EDA                     __end_of_updateTimers 16D0  
                         Precharge@OnOff 0020            __size_of_EUSART2_Transmit_ISR 0032  
                       ?_SPI1_Initialize 0001                           SetCharger@mode 02D8  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                          ?_LcdCharacter 0001                        _sendStructAddress 0030  
                          ??_updateComms 0028                                 _NokiaStr 1C14  
                               __Hrparam 0000                              ??_Precharge 0020  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                          time_Set@value 001B                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                       __size_of___awmod 0070              __size_of_EUSART1_Initialize 003C  
                       __size_of___lwdiv 0052                         __size_of___lwmod 0042  
                       __size_of__doprnt 0738                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                              sendData@i 00D4                                 _clearLcd 1D40  
                       __size_of_isdigit 001E                          ___lwdiv@divisor 001D  
                               _ledDebug 1936                          ___lwdiv@counter 001F  
               crcBufS_status_put@status 001E                                 __ptext10 1EDA  
                               __ptext11 0ACE                                 __ptext20 07F4  
                               __ptext12 1284                                 __ptext21 1BB8  
                               __ptext13 11AE                                 __ptext30 1594  
                               __ptext22 1848                                 __ptext14 0FF4  
                               __ptext31 1A82                                 __ptext23 1980  
                               __ptext15 18EC                                 __ptext40 1796  
                               __ptext32 1ABA                                 __ptext24 00BC  
                               __ptext16 14A8                                 __ptext41 1EA8  
                               __ptext33 1D18                                 __ptext25 1ED0  
                               __ptext17 1936                                 __ptext50 1E98  
                               __ptext42 1EC4                                 __ptext34 1C14  
                               __ptext26 1A48                                 __ptext18 1E86  
                               __ptext51 1EB6                                 __ptext43 1AF0  
                               __ptext35 142E                                 __ptext27 1DCA  
                               __ptext19 1DAC                                 __ptext60 1CEE  
                               __ptext52 1B24                                 __ptext44 1A0C  
                               __ptext36 1D68                                 __ptext28 19CA  
                               __ptext61 1BE6                                 __ptext45 1DE8  
                               __ptext37 1E24                                 __ptext29 189A  
                               __ptext62 1C98                                 __ptext54 1E58  
                               __ptext46 1C6C                                 __ptext38 1C40  
                               __ptext63 0000                                 __ptext55 1B58  
                               __ptext47 13AC                                 __ptext39 1EDE  
                               __ptext56 1E70                                 __ptext48 1D40  
                               __ptext57 131A                                 __ptext49 1E3E  
                               __ptext58 1E06                                 __ptext59 0EDA  
                           _SSP1CON1bits 000FC6                           ??_LcdCharacter 0023  
                          __size_of_CRC8 004A                         __size_of_sprintf 0052  
            __size_of_EUSART2_Initialize 0034                               strcpy@from 001D  
                          _returnAddress 0040                            __size_of_main 0056  
                            _receiveData 0ACE                           _Transmit_stall 0044  
                               _sendData 1520                                 _talkTime 0083  
                        ??_GetPowerState 001B                               _RC1STAbits 000FAB  
                               _time_Set 1DAC                               _RC2STAbits 000F71  
                            clearLcd@res 0023                                 _time_get 1E86  
                             _FONTLOOKUP 7DE7                                 int$flags 0045  
                           _serial_write 0097                      __end_of_updateComms 1BB8  
     __end_of_INTERRUPT_InterruptManager 00B8               _INTERRUPT_InterruptManager 0008  
                           _SSP1STATbits 000FC7                      _EUSART1_Receive_ISR 1C98  
                      receiveData@holder 00E1                            SetCharger@str 02CE  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_init 0025                         ??_UART_buff_size 0003  
                               isdigit@c 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 0091  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                              sprintf@ap 00ED                                sprintf@pb 00EF  
                              sprintf@wh 00E7                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                       ___lwmod@dividend 0022                  ?_PIN_MANAGER_Initialize 0001  
           __end_of_EUSART1_Transmit_ISR 1C14                              _ring_buffer 0128  
             ?_FastTransfer_buffer_flush 0023                              _serial_peek 0093  
                            _serial_read 0095                 ?_FastTransfer_buffer_put 0021  
                               printf@ap 00EB                                 printf@pb 00ED  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0009  
                  __size_of_updateTimers 0064                   __size_of_EUSART1_Write 003A  
                        ??_UART_buff_put 000A                      _EUSART2_Receive_ISR 1E06  
  FastTransfer_buffer_modulo_inc@modulus 001D                                 sprintf@f 00E9  
                    _respondChargerAsECU 16D0                   crcBufS_status_put@time 001D  
                        ___lwmod@divisor 0024                          _TMR0_Initialize 1C40  
                               strcpy@cp 001F                                 strcpy@to 001B  
                        ___lwmod@counter 0026                receiveData@crcHolder_1690 00E0  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003E  
             __end_of_crcBufS_status_put 1284                    ??_EUSART1_Receive_ISR 0001  
         __end_of_PIN_MANAGER_Initialize 17F2         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                     ?_respondChargerAsECU 0001  
                            _updateComms 1B8A                             _updateTimers 166C  
