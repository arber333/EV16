

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu May 12 23:03:47 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76                           	psect	idataCOMRAM
    77  0013EA                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _Transmit_stall
    81  0013EA  01                 	db	1
    82                           
    83                           	psect	idataBANK0
    84  0013DC                     __pidataBANK0:
    85                           	opt stack 0
    86                           
    87                           ;initializer for _ChargerData
    88  0013DC  4D                 	db	77
    89  0013DD  2C                 	db	44
    90  0013DE  00                 	db	0
    91  0013DF  2C                 	db	44
    92  0013E0  00                 	db	0
    93  0013E1  2C                 	db	44
    94  0013E2  00                 	db	0
    95  0013E3  2C                 	db	44
    96  0013E4  45                 	db	69
    97                           
    98                           	psect	mediumconst
    99  007DF4                     __pmediumconst:
   100                           	opt stack 0
   101  007DF4  00                 	db	0
   102  007DF5                     _FONTLOOKUP:
   103                           	opt stack 0
   104  007DF5  00                 	db	0
   105  007DF6  00                 	db	0
   106  007DF7  00                 	db	0
   107  007DF8  00                 	db	0
   108  007DF9  00                 	db	0
   109  007DFA  00                 	db	0
   110  007DFB  00                 	db	0
   111  007DFC  5F                 	db	95
   112  007DFD  00                 	db	0
   113  007DFE  00                 	db	0
   114  007DFF  00                 	db	0
   115  007E00  07                 	db	7
   116  007E01  00                 	db	0
   117  007E02  07                 	db	7
   118  007E03  00                 	db	0
   119  007E04  14                 	db	20
   120  007E05  7F                 	db	127
   121  007E06  14                 	db	20
   122  007E07  7F                 	db	127
   123  007E08  14                 	db	20
   124  007E09  24                 	db	36
   125  007E0A  2A                 	db	42
   126  007E0B  7F                 	db	127
   127  007E0C  2A                 	db	42
   128  007E0D  12                 	db	18
   129  007E0E  23                 	db	35
   130  007E0F  13                 	db	19
   131  007E10  08                 	db	8
   132  007E11  64                 	db	100
   133  007E12  62                 	db	98
   134  007E13  36                 	db	54
   135  007E14  49                 	db	73
   136  007E15  55                 	db	85
   137  007E16  22                 	db	34
   138  007E17  50                 	db	80
   139  007E18  00                 	db	0
   140  007E19  05                 	db	5
   141  007E1A  03                 	db	3
   142  007E1B  00                 	db	0
   143  007E1C  00                 	db	0
   144  007E1D  00                 	db	0
   145  007E1E  1C                 	db	28
   146  007E1F  22                 	db	34
   147  007E20  41                 	db	65
   148  007E21  00                 	db	0
   149  007E22  00                 	db	0
   150  007E23  41                 	db	65
   151  007E24  22                 	db	34
   152  007E25  1C                 	db	28
   153  007E26  00                 	db	0
   154  007E27  14                 	db	20
   155  007E28  08                 	db	8
   156  007E29  3E                 	db	62
   157  007E2A  08                 	db	8
   158  007E2B  14                 	db	20
   159  007E2C  08                 	db	8
   160  007E2D  08                 	db	8
   161  007E2E  3E                 	db	62
   162  007E2F  08                 	db	8
   163  007E30  08                 	db	8
   164  007E31  00                 	db	0
   165  007E32  50                 	db	80
   166  007E33  30                 	db	48
   167  007E34  00                 	db	0
   168  007E35  00                 	db	0
   169  007E36  08                 	db	8
   170  007E37  08                 	db	8
   171  007E38  08                 	db	8
   172  007E39  08                 	db	8
   173  007E3A  08                 	db	8
   174  007E3B  00                 	db	0
   175  007E3C  60                 	db	96
   176  007E3D  60                 	db	96
   177  007E3E  00                 	db	0
   178  007E3F  00                 	db	0
   179  007E40  20                 	db	32
   180  007E41  10                 	db	16
   181  007E42  08                 	db	8
   182  007E43  04                 	db	4
   183  007E44  02                 	db	2
   184  007E45  3E                 	db	62
   185  007E46  51                 	db	81
   186  007E47  49                 	db	73
   187  007E48  45                 	db	69
   188  007E49  3E                 	db	62
   189  007E4A  00                 	db	0
   190  007E4B  42                 	db	66
   191  007E4C  7F                 	db	127
   192  007E4D  40                 	db	64
   193  007E4E  00                 	db	0
   194  007E4F  42                 	db	66
   195  007E50  61                 	db	97
   196  007E51  51                 	db	81
   197  007E52  49                 	db	73
   198  007E53  46                 	db	70
   199  007E54  21                 	db	33
   200  007E55  41                 	db	65
   201  007E56  45                 	db	69
   202  007E57  4B                 	db	75
   203  007E58  31                 	db	49
   204  007E59  18                 	db	24
   205  007E5A  14                 	db	20
   206  007E5B  12                 	db	18
   207  007E5C  7F                 	db	127
   208  007E5D  10                 	db	16
   209  007E5E  27                 	db	39
   210  007E5F  45                 	db	69
   211  007E60  45                 	db	69
   212  007E61  45                 	db	69
   213  007E62  39                 	db	57
   214  007E63  3C                 	db	60
   215  007E64  4A                 	db	74
   216  007E65  49                 	db	73
   217  007E66  49                 	db	73
   218  007E67  30                 	db	48
   219  007E68  01                 	db	1
   220  007E69  71                 	db	113
   221  007E6A  09                 	db	9
   222  007E6B  05                 	db	5
   223  007E6C  03                 	db	3
   224  007E6D  36                 	db	54
   225  007E6E  49                 	db	73
   226  007E6F  49                 	db	73
   227  007E70  49                 	db	73
   228  007E71  36                 	db	54
   229  007E72  06                 	db	6
   230  007E73  49                 	db	73
   231  007E74  49                 	db	73
   232  007E75  29                 	db	41
   233  007E76  1E                 	db	30
   234  007E77  00                 	db	0
   235  007E78  36                 	db	54
   236  007E79  36                 	db	54
   237  007E7A  00                 	db	0
   238  007E7B  00                 	db	0
   239  007E7C  00                 	db	0
   240  007E7D  56                 	db	86
   241  007E7E  36                 	db	54
   242  007E7F  00                 	db	0
   243  007E80  00                 	db	0
   244  007E81  08                 	db	8
   245  007E82  14                 	db	20
   246  007E83  22                 	db	34
   247  007E84  41                 	db	65
   248  007E85  00                 	db	0
   249  007E86  14                 	db	20
   250  007E87  14                 	db	20
   251  007E88  14                 	db	20
   252  007E89  14                 	db	20
   253  007E8A  14                 	db	20
   254  007E8B  00                 	db	0
   255  007E8C  41                 	db	65
   256  007E8D  22                 	db	34
   257  007E8E  14                 	db	20
   258  007E8F  08                 	db	8
   259  007E90  02                 	db	2
   260  007E91  01                 	db	1
   261  007E92  51                 	db	81
   262  007E93  09                 	db	9
   263  007E94  06                 	db	6
   264  007E95  32                 	db	50
   265  007E96  49                 	db	73
   266  007E97  79                 	db	121
   267  007E98  41                 	db	65
   268  007E99  3E                 	db	62
   269  007E9A  7E                 	db	126
   270  007E9B  11                 	db	17
   271  007E9C  11                 	db	17
   272  007E9D  11                 	db	17
   273  007E9E  7E                 	db	126
   274  007E9F  7F                 	db	127
   275  007EA0  49                 	db	73
   276  007EA1  49                 	db	73
   277  007EA2  49                 	db	73
   278  007EA3  36                 	db	54
   279  007EA4  3E                 	db	62
   280  007EA5  41                 	db	65
   281  007EA6  41                 	db	65
   282  007EA7  41                 	db	65
   283  007EA8  22                 	db	34
   284  007EA9  7F                 	db	127
   285  007EAA  41                 	db	65
   286  007EAB  41                 	db	65
   287  007EAC  22                 	db	34
   288  007EAD  1C                 	db	28
   289  007EAE  7F                 	db	127
   290  007EAF  49                 	db	73
   291  007EB0  49                 	db	73
   292  007EB1  49                 	db	73
   293  007EB2  41                 	db	65
   294  007EB3  7F                 	db	127
   295  007EB4  09                 	db	9
   296  007EB5  09                 	db	9
   297  007EB6  09                 	db	9
   298  007EB7  01                 	db	1
   299  007EB8  3E                 	db	62
   300  007EB9  41                 	db	65
   301  007EBA  49                 	db	73
   302  007EBB  49                 	db	73
   303  007EBC  7A                 	db	122
   304  007EBD  7F                 	db	127
   305  007EBE  08                 	db	8
   306  007EBF  08                 	db	8
   307  007EC0  08                 	db	8
   308  007EC1  7F                 	db	127
   309  007EC2  00                 	db	0
   310  007EC3  41                 	db	65
   311  007EC4  7F                 	db	127
   312  007EC5  41                 	db	65
   313  007EC6  00                 	db	0
   314  007EC7  20                 	db	32
   315  007EC8  40                 	db	64
   316  007EC9  41                 	db	65
   317  007ECA  3F                 	db	63
   318  007ECB  01                 	db	1
   319  007ECC  7F                 	db	127
   320  007ECD  08                 	db	8
   321  007ECE  14                 	db	20
   322  007ECF  22                 	db	34
   323  007ED0  41                 	db	65
   324  007ED1  7F                 	db	127
   325  007ED2  40                 	db	64
   326  007ED3  40                 	db	64
   327  007ED4  40                 	db	64
   328  007ED5  40                 	db	64
   329  007ED6  7F                 	db	127
   330  007ED7  02                 	db	2
   331  007ED8  0C                 	db	12
   332  007ED9  02                 	db	2
   333  007EDA  7F                 	db	127
   334  007EDB  7F                 	db	127
   335  007EDC  04                 	db	4
   336  007EDD  08                 	db	8
   337  007EDE  10                 	db	16
   338  007EDF  7F                 	db	127
   339  007EE0  3E                 	db	62
   340  007EE1  41                 	db	65
   341  007EE2  41                 	db	65
   342  007EE3  41                 	db	65
   343  007EE4  3E                 	db	62
   344  007EE5  7F                 	db	127
   345  007EE6  09                 	db	9
   346  007EE7  09                 	db	9
   347  007EE8  09                 	db	9
   348  007EE9  06                 	db	6
   349  007EEA  3E                 	db	62
   350  007EEB  41                 	db	65
   351  007EEC  51                 	db	81
   352  007EED  21                 	db	33
   353  007EEE  5E                 	db	94
   354  007EEF  7F                 	db	127
   355  007EF0  09                 	db	9
   356  007EF1  19                 	db	25
   357  007EF2  29                 	db	41
   358  007EF3  46                 	db	70
   359  007EF4  46                 	db	70
   360  007EF5  49                 	db	73
   361  007EF6  49                 	db	73
   362  007EF7  49                 	db	73
   363  007EF8  31                 	db	49
   364  007EF9  01                 	db	1
   365  007EFA  01                 	db	1
   366  007EFB  7F                 	db	127
   367  007EFC  01                 	db	1
   368  007EFD  01                 	db	1
   369  007EFE  3F                 	db	63
   370  007EFF  40                 	db	64
   371  007F00  40                 	db	64
   372  007F01  40                 	db	64
   373  007F02  3F                 	db	63
   374  007F03  1F                 	db	31
   375  007F04  20                 	db	32
   376  007F05  40                 	db	64
   377  007F06  20                 	db	32
   378  007F07  1F                 	db	31
   379  007F08  3F                 	db	63
   380  007F09  40                 	db	64
   381  007F0A  38                 	db	56
   382  007F0B  40                 	db	64
   383  007F0C  3F                 	db	63
   384  007F0D  63                 	db	99
   385  007F0E  14                 	db	20
   386  007F0F  08                 	db	8
   387  007F10  14                 	db	20
   388  007F11  63                 	db	99
   389  007F12  07                 	db	7
   390  007F13  08                 	db	8
   391  007F14  70                 	db	112
   392  007F15  08                 	db	8
   393  007F16  07                 	db	7
   394  007F17  61                 	db	97
   395  007F18  51                 	db	81
   396  007F19  49                 	db	73
   397  007F1A  45                 	db	69
   398  007F1B  43                 	db	67
   399  007F1C  00                 	db	0
   400  007F1D  7F                 	db	127
   401  007F1E  41                 	db	65
   402  007F1F  41                 	db	65
   403  007F20  00                 	db	0
   404  007F21  02                 	db	2
   405  007F22  04                 	db	4
   406  007F23  08                 	db	8
   407  007F24  10                 	db	16
   408  007F25  20                 	db	32
   409  007F26  00                 	db	0
   410  007F27  41                 	db	65
   411  007F28  41                 	db	65
   412  007F29  7F                 	db	127
   413  007F2A  00                 	db	0
   414  007F2B  04                 	db	4
   415  007F2C  02                 	db	2
   416  007F2D  01                 	db	1
   417  007F2E  02                 	db	2
   418  007F2F  04                 	db	4
   419  007F30  40                 	db	64
   420  007F31  40                 	db	64
   421  007F32  40                 	db	64
   422  007F33  40                 	db	64
   423  007F34  40                 	db	64
   424  007F35  00                 	db	0
   425  007F36  01                 	db	1
   426  007F37  02                 	db	2
   427  007F38  04                 	db	4
   428  007F39  00                 	db	0
   429  007F3A  20                 	db	32
   430  007F3B  54                 	db	84
   431  007F3C  54                 	db	84
   432  007F3D  54                 	db	84
   433  007F3E  78                 	db	120
   434  007F3F  7F                 	db	127
   435  007F40  48                 	db	72
   436  007F41  44                 	db	68
   437  007F42  44                 	db	68
   438  007F43  38                 	db	56
   439  007F44  38                 	db	56
   440  007F45  44                 	db	68
   441  007F46  44                 	db	68
   442  007F47  44                 	db	68
   443  007F48  20                 	db	32
   444  007F49  38                 	db	56
   445  007F4A  44                 	db	68
   446  007F4B  44                 	db	68
   447  007F4C  48                 	db	72
   448  007F4D  7F                 	db	127
   449  007F4E  38                 	db	56
   450  007F4F  54                 	db	84
   451  007F50  54                 	db	84
   452  007F51  54                 	db	84
   453  007F52  18                 	db	24
   454  007F53  08                 	db	8
   455  007F54  7E                 	db	126
   456  007F55  09                 	db	9
   457  007F56  01                 	db	1
   458  007F57  02                 	db	2
   459  007F58  0C                 	db	12
   460  007F59  52                 	db	82
   461  007F5A  52                 	db	82
   462  007F5B  52                 	db	82
   463  007F5C  3E                 	db	62
   464  007F5D  7F                 	db	127
   465  007F5E  08                 	db	8
   466  007F5F  04                 	db	4
   467  007F60  04                 	db	4
   468  007F61  78                 	db	120
   469  007F62  00                 	db	0
   470  007F63  44                 	db	68
   471  007F64  7D                 	db	125
   472  007F65  40                 	db	64
   473  007F66  00                 	db	0
   474  007F67  20                 	db	32
   475  007F68  40                 	db	64
   476  007F69  44                 	db	68
   477  007F6A  3D                 	db	61
   478  007F6B  00                 	db	0
   479  007F6C  7F                 	db	127
   480  007F6D  10                 	db	16
   481  007F6E  28                 	db	40
   482  007F6F  44                 	db	68
   483  007F70  00                 	db	0
   484  007F71  00                 	db	0
   485  007F72  41                 	db	65
   486  007F73  7F                 	db	127
   487  007F74  40                 	db	64
   488  007F75  00                 	db	0
   489  007F76  7C                 	db	124
   490  007F77  04                 	db	4
   491  007F78  18                 	db	24
   492  007F79  04                 	db	4
   493  007F7A  78                 	db	120
   494  007F7B  7C                 	db	124
   495  007F7C  08                 	db	8
   496  007F7D  04                 	db	4
   497  007F7E  04                 	db	4
   498  007F7F  78                 	db	120
   499  007F80  38                 	db	56
   500  007F81  44                 	db	68
   501  007F82  44                 	db	68
   502  007F83  44                 	db	68
   503  007F84  38                 	db	56
   504  007F85  7C                 	db	124
   505  007F86  14                 	db	20
   506  007F87  14                 	db	20
   507  007F88  14                 	db	20
   508  007F89  08                 	db	8
   509  007F8A  08                 	db	8
   510  007F8B  14                 	db	20
   511  007F8C  14                 	db	20
   512  007F8D  18                 	db	24
   513  007F8E  7C                 	db	124
   514  007F8F  7C                 	db	124
   515  007F90  08                 	db	8
   516  007F91  04                 	db	4
   517  007F92  04                 	db	4
   518  007F93  08                 	db	8
   519  007F94  48                 	db	72
   520  007F95  54                 	db	84
   521  007F96  54                 	db	84
   522  007F97  54                 	db	84
   523  007F98  20                 	db	32
   524  007F99  04                 	db	4
   525  007F9A  3F                 	db	63
   526  007F9B  44                 	db	68
   527  007F9C  40                 	db	64
   528  007F9D  20                 	db	32
   529  007F9E  3C                 	db	60
   530  007F9F  40                 	db	64
   531  007FA0  40                 	db	64
   532  007FA1  20                 	db	32
   533  007FA2  7C                 	db	124
   534  007FA3  1C                 	db	28
   535  007FA4  20                 	db	32
   536  007FA5  40                 	db	64
   537  007FA6  20                 	db	32
   538  007FA7  1C                 	db	28
   539  007FA8  3C                 	db	60
   540  007FA9  40                 	db	64
   541  007FAA  30                 	db	48
   542  007FAB  40                 	db	64
   543  007FAC  3C                 	db	60
   544  007FAD  44                 	db	68
   545  007FAE  28                 	db	40
   546  007FAF  10                 	db	16
   547  007FB0  28                 	db	40
   548  007FB1  44                 	db	68
   549  007FB2  0C                 	db	12
   550  007FB3  50                 	db	80
   551  007FB4  50                 	db	80
   552  007FB5  50                 	db	80
   553  007FB6  3C                 	db	60
   554  007FB7  44                 	db	68
   555  007FB8  64                 	db	100
   556  007FB9  54                 	db	84
   557  007FBA  4C                 	db	76
   558  007FBB  44                 	db	68
   559  007FBC  00                 	db	0
   560  007FBD  08                 	db	8
   561  007FBE  36                 	db	54
   562  007FBF  41                 	db	65
   563  007FC0  00                 	db	0
   564  007FC1  00                 	db	0
   565  007FC2  00                 	db	0
   566  007FC3  7F                 	db	127
   567  007FC4  00                 	db	0
   568  007FC5  00                 	db	0
   569  007FC6  00                 	db	0
   570  007FC7  41                 	db	65
   571  007FC8  36                 	db	54
   572  007FC9  08                 	db	8
   573  007FCA  00                 	db	0
   574  007FCB  10                 	db	16
   575  007FCC  08                 	db	8
   576  007FCD  08                 	db	8
   577  007FCE  10                 	db	16
   578  007FCF  08                 	db	8
   579  007FD0  78                 	db	120
   580  007FD1  46                 	db	70
   581  007FD2  41                 	db	65
   582  007FD3  46                 	db	70
   583  007FD4  78                 	db	120
   584  007FD5                     __end_of_FONTLOOKUP:
   585                           	opt stack 0
   586  007FD5                     STR_3:
   587  007FD5  43                 	db	67	;'C'
   588  007FD6  68                 	db	104	;'h'
   589  007FD7  61                 	db	97	;'a'
   590  007FD8  72                 	db	114	;'r'
   591  007FD9  67                 	db	103	;'g'
   592  007FDA  65                 	db	101	;'e'
   593  007FDB  72                 	db	114	;'r'
   594  007FDC  20                 	db	32
   595  007FDD  43                 	db	67	;'C'
   596  007FDE  6F                 	db	111	;'o'
   597  007FDF  6E                 	db	110	;'n'
   598  007FE0  74                 	db	116	;'t'
   599  007FE1  72                 	db	114	;'r'
   600  007FE2  6F                 	db	111	;'o'
   601  007FE3  6C                 	db	108	;'l'
   602  007FE4  00                 	db	0
   603  007FE5                     STR_4:
   604  007FE5  57                 	db	87	;'W'
   605  007FE6  61                 	db	97	;'a'
   606  007FE7  69                 	db	105	;'i'
   607  007FE8  74                 	db	116	;'t'
   608  007FE9  69                 	db	105	;'i'
   609  007FEA  6E                 	db	110	;'n'
   610  007FEB  67                 	db	103	;'g'
   611  007FEC  20                 	db	32
   612  007FED  6F                 	db	111	;'o'
   613  007FEE  6E                 	db	110	;'n'
   614  007FEF  20                 	db	32
   615  007FF0  42                 	db	66	;'B'
   616  007FF1  4D                 	db	77	;'M'
   617  007FF2  4D                 	db	77	;'M'
   618  007FF3  00                 	db	0
   619  007FF4                     STR_5:
   620  007FF4  28                 	db	40
   621  007FF5  6E                 	db	110	;'n'
   622  007FF6  75                 	db	117	;'u'
   623  007FF7  6C                 	db	108	;'l'
   624  007FF8  6C                 	db	108	;'l'
   625  007FF9  29                 	db	41
   626  007FFA  00                 	db	0
   627  007FFB                     STR_1:
   628  007FFB  25                 	db	37
   629  007FFC  73                 	db	115	;'s'
   630  007FFD  00                 	db	0
   631  0000                     
   632                           ; #config settings
   633  007FFE  00                 	db	0	; dummy byte at the end
   634  0000                     
   635                           	psect	nvCOMRAM
   636  000041                     __pnvCOMRAM:
   637                           	opt stack 0
   638  000041                     _timer0ReloadVal16bit:
   639                           	opt stack 0
   640  000041                     	ds	2
   641  000043                     _eusart2TxBufferRemaining:
   642                           	opt stack 0
   643  000043                     	ds	1
   644  0000                     _ANSELA	set	3896
   645  0000                     _ANSELB	set	3897
   646  0000                     _ANSELC	set	3898
   647  0000                     _ANSELD	set	3899
   648  0000                     _ANSELE	set	3900
   649  0000                     _BAUD1CON	set	4024
   650  0000                     _BAUD2CON	set	3952
   651  0000                     _INTCON2bits	set	4081
   652  0000                     _INTCONbits	set	4082
   653  0000                     _IPR1bits	set	3999
   654  0000                     _IPR3bits	set	4005
   655  0000                     _LATA	set	3977
   656  0000                     _LATB	set	3978
   657  0000                     _LATBbits	set	3978
   658  0000                     _LATC	set	3979
   659  0000                     _LATCbits	set	3979
   660  0000                     _LATD	set	3980
   661  0000                     _LATE	set	3981
   662  0000                     _OSCCON	set	4051
   663  0000                     _OSCCON2	set	4050
   664  0000                     _OSCTUNE	set	3995
   665  0000                     _PIE1bits	set	3997
   666  0000                     _PIE3bits	set	4003
   667  0000                     _PIR1bits	set	3998
   668  0000                     _PIR3bits	set	4004
   669  0000                     _RC1STA	set	4011
   670  0000                     _RC1STAbits	set	4011
   671  0000                     _RC2STA	set	3953
   672  0000                     _RC2STAbits	set	3953
   673  0000                     _RCONbits	set	4048
   674  0000                     _RCREG1	set	4014
   675  0000                     _RCREG2	set	3956
   676  0000                     _SPBRG1	set	4015
   677  0000                     _SPBRG2	set	3957
   678  0000                     _SPBRGH1	set	4016
   679  0000                     _SPBRGH2	set	3958
   680  0000                     _SSP1ADD	set	4040
   681  0000                     _SSP1BUF	set	4041
   682  0000                     _SSP1CON1	set	4038
   683  0000                     _SSP1CON1bits	set	4038
   684  0000                     _SSP1STAT	set	4039
   685  0000                     _SSP1STATbits	set	4039
   686  0000                     _T0CON	set	4053
   687  0000                     _T0CONbits	set	4053
   688  0000                     _TMR0H	set	4055
   689  0000                     _TMR0L	set	4054
   690  0000                     _TRISA	set	3986
   691  0000                     _TRISB	set	3987
   692  0000                     _TRISBbits	set	3987
   693  0000                     _TRISC	set	3988
   694  0000                     _TRISD	set	3989
   695  0000                     _TRISE	set	3990
   696  0000                     _TX1STA	set	4012
   697  0000                     _TX2STA	set	3954
   698  0000                     _TXREG1	set	4013
   699  0000                     _TXREG2	set	3955
   700  0000                     _WPUB	set	3937
   701  0000                     _LATA3	set	31819
   702  0000                     _LATB0	set	31824
   703  0000                     _LATB1	set	31825
   704  0000                     _LATB3	set	31827
   705  0000                     _LATB4	set	31828
   706  0000                     _LATB5	set	31829
   707  0000                     _LATC0	set	31832
   708  0000                     _LATC1	set	31833
   709  0000                     _LATD0	set	31840
   710  0000                     _LATD3	set	31843
   711  0000                     _TRISD0	set	31912
   712  0000                     _TRISD2	set	31914
   713  0000                     _TRISD3	set	31915
   714                           
   715                           	psect	cinit
   716  000C2A                     __pcinit:
   717                           	opt stack 0
   718  000C2A                     start_initialization:
   719                           	opt stack 0
   720  000C2A                     __initialization:
   721                           	opt stack 0
   722                           
   723                           ; Clear objects allocated to BANK4 (200 bytes)
   724  000C2A  EE04  F000         	lfsr	0,__pbssBANK4
   725  000C2E  0EC8               	movlw	200
   726  000C30                     clear_0:
   727  000C30  6AEE               	clrf	postinc0,c
   728  000C32  06E8               	decf	wreg,f,c
   729  000C34  E1FD               	bnz	clear_0
   730                           
   731                           ; Clear objects allocated to BANK3 (206 bytes)
   732  000C36  EE03  F000         	lfsr	0,__pbssBANK3
   733  000C3A  0ECE               	movlw	206
   734  000C3C                     clear_1:
   735  000C3C  6AEE               	clrf	postinc0,c
   736  000C3E  06E8               	decf	wreg,f,c
   737  000C40  E1FD               	bnz	clear_1
   738                           
   739                           ; Clear objects allocated to BANK2 (206 bytes)
   740  000C42  EE02  F000         	lfsr	0,__pbssBANK2
   741  000C46  0ECE               	movlw	206
   742  000C48                     clear_2:
   743  000C48  6AEE               	clrf	postinc0,c
   744  000C4A  06E8               	decf	wreg,f,c
   745  000C4C  E1FD               	bnz	clear_2
   746                           
   747                           ; Clear objects allocated to BANK1 (206 bytes)
   748  000C4E  EE01  F000         	lfsr	0,__pbssBANK1
   749  000C52  0ECE               	movlw	206
   750  000C54                     clear_3:
   751  000C54  6AEE               	clrf	postinc0,c
   752  000C56  06E8               	decf	wreg,f,c
   753  000C58  E1FD               	bnz	clear_3
   754                           
   755                           ; Clear objects allocated to BANK0 (112 bytes)
   756  000C5A  EE00  F060         	lfsr	0,__pbssBANK0
   757  000C5E  0E70               	movlw	112
   758  000C60                     clear_4:
   759  000C60  6AEE               	clrf	postinc0,c
   760  000C62  06E8               	decf	wreg,f,c
   761  000C64  E1FD               	bnz	clear_4
   762                           
   763                           ; Clear objects allocated to COMRAM (26 bytes)
   764  000C66  EE00  F027         	lfsr	0,__pbssCOMRAM
   765  000C6A  0E1A               	movlw	26
   766  000C6C                     clear_5:
   767  000C6C  6AEE               	clrf	postinc0,c
   768  000C6E  06E8               	decf	wreg,f,c
   769  000C70  E1FD               	bnz	clear_5
   770                           
   771                           ; Initialize objects allocated to BANK0 (9 bytes)
   772                           ; load TBLPTR registers with __pidataBANK0
   773  000C72  0EDC               	movlw	low __pidataBANK0
   774  000C74  6EF6               	movwf	tblptrl,c
   775  000C76  0E13               	movlw	high __pidataBANK0
   776  000C78  6EF7               	movwf	tblptrh,c
   777  000C7A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   778  000C7C  6EF8               	movwf	tblptru,c
   779  000C7E  EE00  F0E9         	lfsr	0,__pdataBANK0
   780  000C82  EE10 F009          	lfsr	1,9
   781  000C86                     copy_data0:
   782  000C86  0009               	tblrd		*+
   783  000C88  CFF5 FFEE          	movff	tablat,postinc0
   784  000C8C  50E5               	movf	postdec1,w,c
   785  000C8E  50E1               	movf	fsr1l,w,c
   786  000C90  E1FA               	bnz	copy_data0
   787                           
   788                           ; Initialize objects allocated to COMRAM (1 bytes)
   789                           ; load TBLPTR registers with __pidataCOMRAM
   790  000C92  0EEA               	movlw	low __pidataCOMRAM
   791  000C94  6EF6               	movwf	tblptrl,c
   792  000C96  0E13               	movlw	high __pidataCOMRAM
   793  000C98  6EF7               	movwf	tblptrh,c
   794  000C9A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   795  000C9C  6EF8               	movwf	tblptru,c
   796  000C9E  0009               	tblrd		*+	;fetch initializer
   797  000CA0  CFF5 F044          	movff	tablat,__pdataCOMRAM
   798  000CA4                     end_of_initialization:
   799                           	opt stack 0
   800  000CA4                     __end_of__initialization:
   801                           	opt stack 0
   802  000CA4  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   803  000CA6  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   804  000CA8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   805  000CAA  6EF8               	movwf	tblptru,c
   806  000CAC  0100               	movlb	0
   807  000CAE  EFD5  F007         	goto	_main	;jump to C main() function
   808                           tblptru	equ	0xFF8
   809                           tblptrh	equ	0xFF7
   810                           tblptrl	equ	0xFF6
   811                           tablat	equ	0xFF5
   812                           postinc0	equ	0xFEE
   813                           wreg	equ	0xFE8
   814                           postdec1	equ	0xFE5
   815                           fsr1l	equ	0xFE1
   816                           
   817                           	psect	bssCOMRAM
   818  000027                     __pbssCOMRAM:
   819                           	opt stack 0
   820  000027                     _time:
   821                           	opt stack 0
   822  000027                     	ds	4
   823  00002B                     _Start:
   824                           	opt stack 0
   825  00002B                     	ds	2
   826  00002D                     _group:
   827                           	opt stack 0
   828  00002D                     	ds	2
   829  00002F                     _receiveArrayAddress:
   830                           	opt stack 0
   831  00002F                     	ds	2
   832  000031                     _sendStructAddress:
   833                           	opt stack 0
   834  000031                     	ds	2
   835  000033                     _AKNAKsend:
   836                           	opt stack 0
   837  000033                     	ds	1
   838  000034                     _calc_CS:
   839                           	opt stack 0
   840  000034                     	ds	1
   841  000035                     _eusart2RxCount:
   842                           	opt stack 0
   843  000035                     	ds	1
   844  000036                     _eusart2RxHead:
   845                           	opt stack 0
   846  000036                     	ds	1
   847  000037                     _eusart2RxTail:
   848                           	opt stack 0
   849  000037                     	ds	1
   850  000038                     _eusart2TxHead:
   851                           	opt stack 0
   852  000038                     	ds	1
   853  000039                     _eusart2TxTail:
   854                           	opt stack 0
   855  000039                     	ds	1
   856  00003A                     _i:
   857                           	opt stack 0
   858  00003A                     	ds	1
   859  00003B                     _maxDataAddress:
   860                           	opt stack 0
   861  00003B                     	ds	1
   862  00003C                     _moduleAddress:
   863                           	opt stack 0
   864  00003C                     	ds	1
   865  00003D                     _returnAddress:
   866                           	opt stack 0
   867  00003D                     	ds	1
   868  00003E                     _rx_address:
   869                           	opt stack 0
   870  00003E                     	ds	1
   871  00003F                     _rx_array_inx:
   872                           	opt stack 0
   873  00003F                     	ds	1
   874  000040                     _rx_len:
   875                           	opt stack 0
   876  000040                     	ds	1
   877                           tblptru	equ	0xFF8
   878                           tblptrh	equ	0xFF7
   879                           tblptrl	equ	0xFF6
   880                           tablat	equ	0xFF5
   881                           postinc0	equ	0xFEE
   882                           wreg	equ	0xFE8
   883                           postdec1	equ	0xFE5
   884                           fsr1l	equ	0xFE1
   885                           
   886                           	psect	dataCOMRAM
   887  000044                     __pdataCOMRAM:
   888                           	opt stack 0
   889  000044                     _Transmit_stall:
   890                           	opt stack 0
   891  000044                     	ds	1
   892                           tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           postinc0	equ	0xFEE
   897                           wreg	equ	0xFE8
   898                           postdec1	equ	0xFE5
   899                           fsr1l	equ	0xFE1
   900                           
   901                           	psect	bssBANK0
   902  000060                     __pbssBANK0:
   903                           	opt stack 0
   904  000060                     _receiveArray:
   905                           	opt stack 0
   906  000060                     	ds	40
   907  000088                     _ddata:
   908                           	opt stack 0
   909  000088                     	ds	11
   910  000093                     _eusart2RxBuffer:
   911                           	opt stack 0
   912  000093                     	ds	8
   913  00009B                     _eusart2TxBuffer:
   914                           	opt stack 0
   915  00009B                     	ds	8
   916  0000A3                     _LEDtime:
   917                           	opt stack 0
   918  0000A3                     	ds	4
   919  0000A7                     _lastLEDTime:
   920                           	opt stack 0
   921  0000A7                     	ds	4
   922  0000AB                     _talkTime:
   923                           	opt stack 0
   924  0000AB                     	ds	4
   925  0000AF                     _addressErrorCounter:
   926                           	opt stack 0
   927  0000AF                     	ds	2
   928  0000B1                     _alignErrorCounter:
   929                           	opt stack 0
   930  0000B1                     	ds	2
   931  0000B3                     _crcErrorCounter:
   932                           	opt stack 0
   933  0000B3                     	ds	2
   934  0000B5                     _dataAdressErrorCounter:
   935                           	opt stack 0
   936  0000B5                     	ds	2
   937  0000B7                     _serial_available:
   938                           	opt stack 0
   939  0000B7                     	ds	2
   940  0000B9                     _serial_peek:
   941                           	opt stack 0
   942  0000B9                     	ds	2
   943  0000BB                     _serial_read:
   944                           	opt stack 0
   945  0000BB                     	ds	2
   946  0000BD                     _serial_write:
   947                           	opt stack 0
   948  0000BD                     	ds	2
   949  0000BF                     _crc_buffer:
   950                           	opt stack 0
   951  0000BF                     	ds	17
   952                           tblptru	equ	0xFF8
   953                           tblptrh	equ	0xFF7
   954                           tblptrl	equ	0xFF6
   955                           tablat	equ	0xFF5
   956                           postinc0	equ	0xFEE
   957                           wreg	equ	0xFE8
   958                           postdec1	equ	0xFE5
   959                           fsr1l	equ	0xFE1
   960                           
   961                           	psect	dataBANK0
   962  0000E9                     __pdataBANK0:
   963                           	opt stack 0
   964  0000E9                     _ChargerData:
   965                           	opt stack 0
   966  0000E9                     	ds	9
   967                           tblptru	equ	0xFF8
   968                           tblptrh	equ	0xFF7
   969                           tblptrl	equ	0xFF6
   970                           tablat	equ	0xFF5
   971                           postinc0	equ	0xFEE
   972                           wreg	equ	0xFE8
   973                           postdec1	equ	0xFE5
   974                           fsr1l	equ	0xFE1
   975                           
   976                           	psect	bssBANK1
   977  000100                     __pbssBANK1:
   978                           	opt stack 0
   979  000100                     _ring_buffer:
   980                           	opt stack 0
   981  000100                     	ds	206
   982                           tblptru	equ	0xFF8
   983                           tblptrh	equ	0xFF7
   984                           tblptrl	equ	0xFF6
   985                           tablat	equ	0xFF5
   986                           postinc0	equ	0xFEE
   987                           wreg	equ	0xFE8
   988                           postdec1	equ	0xFE5
   989                           fsr1l	equ	0xFE1
   990                           
   991                           	psect	bssBANK2
   992  000200                     __pbssBANK2:
   993                           	opt stack 0
   994  000200                     _input_buffer:
   995                           	opt stack 0
   996  000200                     	ds	206
   997                           tblptru	equ	0xFF8
   998                           tblptrh	equ	0xFF7
   999                           tblptrl	equ	0xFF6
  1000                           tablat	equ	0xFF5
  1001                           postinc0	equ	0xFEE
  1002                           wreg	equ	0xFE8
  1003                           postdec1	equ	0xFE5
  1004                           fsr1l	equ	0xFE1
  1005                           
  1006                           	psect	bssBANK3
  1007  000300                     __pbssBANK3:
  1008                           	opt stack 0
  1009  000300                     _output_buffer:
  1010                           	opt stack 0
  1011  000300                     	ds	206
  1012                           tblptru	equ	0xFF8
  1013                           tblptrh	equ	0xFF7
  1014                           tblptrl	equ	0xFF6
  1015                           tablat	equ	0xFF5
  1016                           postinc0	equ	0xFEE
  1017                           wreg	equ	0xFE8
  1018                           postdec1	equ	0xFE5
  1019                           fsr1l	equ	0xFE1
  1020                           
  1021                           	psect	bssBANK4
  1022  000400                     __pbssBANK4:
  1023                           	opt stack 0
  1024  000400                     _rx_buffer:
  1025                           	opt stack 0
  1026  000400                     	ds	200
  1027                           tblptru	equ	0xFF8
  1028                           tblptrh	equ	0xFF7
  1029                           tblptrl	equ	0xFF6
  1030                           tablat	equ	0xFF5
  1031                           postinc0	equ	0xFEE
  1032                           wreg	equ	0xFE8
  1033                           postdec1	equ	0xFE5
  1034                           fsr1l	equ	0xFE1
  1035                           
  1036                           	psect	cstackBANK0
  1037  0000D0                     __pcstackBANK0:
  1038                           	opt stack 0
  1039  0000D0                     ??_sendData:
  1040  0000D0                     ??_FastTransfer_buffer_put:
  1041  0000D0                     CRCcheck@SentCRC:
  1042                           	opt stack 0
  1043  0000D0                     Precharge@OnOff:
  1044                           	opt stack 0
  1045  0000D0                     SetCharger@Current:
  1046                           	opt stack 0
  1047  0000D0                     LcdCharacter@character:
  1048                           	opt stack 0
  1049                           
  1050                           ; 1 bytes @ 0x0
  1051  0000D0                     	ds	1
  1052  0000D1                     sendData@whereToSend:
  1053                           	opt stack 0
  1054  0000D1                     CRCcheck@calculatedCRC:
  1055                           	opt stack 0
  1056  0000D1                     SetCharger@Voltage:
  1057                           	opt stack 0
  1058  0000D1                     Precharge@i:
  1059                           	opt stack 0
  1060  0000D1                     LcdCharacter@index:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x1
  1064  0000D1                     	ds	1
  1065  0000D2                     sendData@CS:
  1066                           	opt stack 0
  1067  0000D2                     SetCharger@mode:
  1068                           	opt stack 0
  1069  0000D2                     ToSend@what:
  1070                           	opt stack 0
  1071  0000D2                     CRCcheck@arrayHolder:
  1072                           	opt stack 0
  1073                           
  1074                           ; 3 bytes @ 0x2
  1075  0000D2                     	ds	1
  1076  0000D3                     sendData@i:
  1077                           	opt stack 0
  1078  0000D3                     Precharge@i_1680:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x3
  1082  0000D3                     	ds	2
  1083  0000D5                     CRCcheck@rt:
  1084                           	opt stack 0
  1085                           
  1086                           ; 2 bytes @ 0x5
  1087  0000D5                     	ds	2
  1088  0000D7                     ??_receiveData:
  1089                           
  1090                           ; 0 bytes @ 0x7
  1091  0000D7                     	ds	6
  1092  0000DD                     receiveData@crcHolder:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0xD
  1096  0000DD                     	ds	1
  1097  0000DE                     receiveData@crcHolder_1389:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0xE
  1101  0000DE                     	ds	1
  1102  0000DF                     receiveData@holder:
  1103                           	opt stack 0
  1104                           
  1105                           ; 3 bytes @ 0xF
  1106  0000DF                     	ds	3
  1107  0000E2                     receiveData@holder_1388:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x12
  1111  0000E2                     	ds	3
  1112  0000E5                     receiveData@u:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x15
  1116  0000E5                     	ds	2
  1117  0000E7                     receiveData@r:
  1118                           	opt stack 0
  1119                           
  1120                           ; 2 bytes @ 0x17
  1121  0000E7                     	ds	2
  1122                           tblptru	equ	0xFF8
  1123                           tblptrh	equ	0xFF7
  1124                           tblptrl	equ	0xFF6
  1125                           tablat	equ	0xFF5
  1126                           postinc0	equ	0xFEE
  1127                           wreg	equ	0xFE8
  1128                           postdec1	equ	0xFE5
  1129                           fsr1l	equ	0xFE1
  1130                           
  1131                           	psect	cstackCOMRAM
  1132  000001                     __pcstackCOMRAM:
  1133                           	opt stack 0
  1134  000001                     ?_UART_buff_modulo_inc:
  1135                           	opt stack 0
  1136  000001                     ?_UART_buff_size:
  1137                           	opt stack 0
  1138  000001                     UART_buff_size@_this:
  1139                           	opt stack 0
  1140  000001                     UART_buff_modulo_inc@value:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x0
  1144  000001                     	ds	2
  1145  000003                     UART_buff_modulo_inc@modulus:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x2
  1149  000003                     	ds	2
  1150  000005                     UART_buff_modulo_inc@my_value:
  1151                           	opt stack 0
  1152                           
  1153                           ; 2 bytes @ 0x4
  1154  000005                     	ds	2
  1155  000007                     UART_buff_put@_this:
  1156                           	opt stack 0
  1157  000007                     UART_buff_get@_this:
  1158                           	opt stack 0
  1159                           
  1160                           ; 2 bytes @ 0x6
  1161  000007                     	ds	2
  1162  000009                     ??_UART_buff_get:
  1163  000009                     UART_buff_put@c:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x8
  1167  000009                     	ds	1
  1168  00000A                     ??_UART_buff_put:
  1169                           
  1170                           ; 0 bytes @ 0x9
  1171  00000A                     	ds	1
  1172  00000B                     UART_buff_get@c:
  1173                           	opt stack 0
  1174                           
  1175                           ; 1 bytes @ 0xA
  1176  00000B                     	ds	1
  1177  00000C                     EUSART1_Receive_ISR@data:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0xB
  1181  00000C                     	ds	1
  1182  00000D                     ??_INTERRUPT_InterruptManager:
  1183                           
  1184                           ; 0 bytes @ 0xC
  1185  00000D                     	ds	14
  1186  00001B                     ??_TMR0_Initialize:
  1187  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1188                           	opt stack 0
  1189  00001B                     ?_time_get:
  1190                           	opt stack 0
  1191  00001B                     ?___wmul:
  1192                           	opt stack 0
  1193  00001B                     EUSART2_Write@txData:
  1194                           	opt stack 0
  1195  00001B                     SPI1_Exchange8bit@data:
  1196                           	opt stack 0
  1197  00001B                     SetMux@channel:
  1198                           	opt stack 0
  1199  00001B                     CRC8@data:
  1200                           	opt stack 0
  1201  00001B                     FastTransfer_buffer_modulo_inc@value:
  1202                           	opt stack 0
  1203  00001B                     crcBufS_put@_this:
  1204                           	opt stack 0
  1205  00001B                     crcBufS_status_put@_this:
  1206                           	opt stack 0
  1207  00001B                     crcBufS_get@_this:
  1208                           	opt stack 0
  1209  00001B                     time_Set@value:
  1210                           	opt stack 0
  1211  00001B                     ___wmul@multiplier:
  1212                           	opt stack 0
  1213  00001B                     memset@p1:
  1214                           	opt stack 0
  1215  00001B                     Delay@wait:
  1216                           	opt stack 0
  1217                           
  1218                           ; 4 bytes @ 0x1A
  1219  00001B                     	ds	1
  1220  00001C                     putch@txData:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x1B
  1224  00001C                     	ds	1
  1225  00001D                     ?_printf:
  1226                           	opt stack 0
  1227  00001D                     CRC8@len:
  1228                           	opt stack 0
  1229  00001D                     crcBufS_put@address:
  1230                           	opt stack 0
  1231  00001D                     crcBufS_status_put@time:
  1232                           	opt stack 0
  1233  00001D                     crcBufS_get@time:
  1234                           	opt stack 0
  1235  00001D                     time_get@WhatTime:
  1236                           	opt stack 0
  1237  00001D                     time_Set@WhatTime:
  1238                           	opt stack 0
  1239  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1240                           	opt stack 0
  1241  00001D                     printf@f:
  1242                           	opt stack 0
  1243  00001D                     ___wmul@multiplicand:
  1244                           	opt stack 0
  1245  00001D                     memset@c:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x1C
  1249  00001D                     	ds	1
  1250  00001E                     CRC8@sum:
  1251                           	opt stack 0
  1252  00001E                     crcBufS_put@oldCRC:
  1253                           	opt stack 0
  1254  00001E                     crcBufS_status_put@status:
  1255                           	opt stack 0
  1256  00001E                     crcBufS_get@space:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x1D
  1260  00001E                     	ds	1
  1261  00001F                     ??_Delay:
  1262  00001F                     ??_crcBufS_get:
  1263  00001F                     ??_crcBufS_status_put:
  1264  00001F                     CRC8@extract:
  1265                           	opt stack 0
  1266  00001F                     crcBufS_put@status:
  1267                           	opt stack 0
  1268  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1269                           	opt stack 0
  1270  00001F                     ___wmul@product:
  1271                           	opt stack 0
  1272  00001F                     memset@n:
  1273                           	opt stack 0
  1274                           
  1275                           ; 2 bytes @ 0x1E
  1276  00001F                     	ds	1
  1277  000020                     ??_crcBufS_put:
  1278  000020                     CRC8@tempI:
  1279                           	opt stack 0
  1280  000020                     Delay@i:
  1281                           	opt stack 0
  1282                           
  1283                           ; 4 bytes @ 0x1F
  1284  000020                     	ds	1
  1285  000021                     CRC8@crc:
  1286                           	opt stack 0
  1287  000021                     LCDwrite@data:
  1288                           	opt stack 0
  1289  000021                     printf@flag:
  1290                           	opt stack 0
  1291  000021                     FastTransfer_buffer_put@_this:
  1292                           	opt stack 0
  1293  000021                     memset@p:
  1294                           	opt stack 0
  1295                           
  1296                           ; 2 bytes @ 0x20
  1297  000021                     	ds	1
  1298  000022                     LCDwrite@mode:
  1299                           	opt stack 0
  1300  000022                     printf@ap:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x21
  1304  000022                     	ds	1
  1305  000023                     ??_LcdCharacter:
  1306  000023                     FastTransfer_buffer_put@towhere:
  1307                           	opt stack 0
  1308  000023                     gotoXy@y:
  1309                           	opt stack 0
  1310  000023                     FastTransfer_buffer_flush@_this:
  1311                           	opt stack 0
  1312  000023                     crcBufS_status_put@wantedTime:
  1313                           	opt stack 0
  1314  000023                     clearLcd@res:
  1315                           	opt stack 0
  1316                           
  1317                           ; 2 bytes @ 0x22
  1318  000023                     	ds	1
  1319  000024                     gotoXy@x:
  1320                           	opt stack 0
  1321  000024                     printf@c:
  1322                           	opt stack 0
  1323  000024                     FastTransfer_buffer_put@towhat:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x23
  1327  000024                     	ds	1
  1328  000025                     FastTransfer_buffer_flush@clearBuffer:
  1329                           	opt stack 0
  1330  000025                     crcBufS_get@wantedTime:
  1331                           	opt stack 0
  1332  000025                     NokiaStr@str:
  1333                           	opt stack 0
  1334  000025                     printf@cp:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x24
  1338  000025                     	ds	1
  1339  000026                     ToSend@where:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x25
  1343  000026                     	ds	1
  1344  000027                     tblptru	equ	0xFF8
  1345                           tblptrh	equ	0xFF7
  1346                           tblptrl	equ	0xFF6
  1347                           tablat	equ	0xFF5
  1348                           postinc0	equ	0xFEE
  1349                           wreg	equ	0xFE8
  1350                           postdec1	equ	0xFE5
  1351                           fsr1l	equ	0xFE1
  1352                           
  1353                           ; 0 bytes @ 0x26
  1354 ;;
  1355 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1356 ;;
  1357 ;; *************** function _main *****************
  1358 ;; Defined at:
  1359 ;;		line 16 in file "main.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;		None
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;		None
  1364 ;; Return value:  Size  Location     Type
  1365 ;;		None               void
  1366 ;; Registers used:
  1367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1368 ;; Tracked objects:
  1369 ;;		On entry : 0/0
  1370 ;;		On exit  : 0/0
  1371 ;;		Unchanged: 0/0
  1372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1373 ;;      Params:         0       0       0       0       0       0       0
  1374 ;;      Locals:         0       0       0       0       0       0       0
  1375 ;;      Temps:          0       0       0       0       0       0       0
  1376 ;;      Totals:         0       0       0       0       0       0       0
  1377 ;;Total ram usage:        0 bytes
  1378 ;; Hardware stack levels required when called:    9
  1379 ;; This function calls:
  1380 ;;		_Delay
  1381 ;;		_NokiaStart
  1382 ;;		_SYSTEM_Initialize
  1383 ;;		_SetBMM
  1384 ;;		_Splash
  1385 ;;		_clearLcd
  1386 ;;		_ledDebug
  1387 ;;		_updateComms
  1388 ;; This function is called by:
  1389 ;;		Startup code after reset
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text0
  1394  000FAA                     __ptext0:
  1395                           	opt stack 0
  1396  000FAA                     _main:
  1397                           	opt stack 22
  1398                           
  1399                           ;main.c: 18: SYSTEM_Initialize();
  1400                           
  1401                           ;incstack = 0
  1402  000FAA  ECAE  F009         	call	_SYSTEM_Initialize	;wreg free
  1403                           
  1404                           ;main.c: 37: (INTCONbits.GIE = 1);
  1405  000FAE  8EF2               	bsf	intcon,7,c	;volatile
  1406                           
  1407                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1408  000FB0  8CF2               	bsf	intcon,6,c	;volatile
  1409                           
  1410                           ;main.c: 47: NokiaStart();
  1411  000FB2  EC3D  F005         	call	_NokiaStart	;wreg free
  1412                           
  1413                           ;main.c: 48: Delay(100);
  1414  000FB6  0E64               	movlw	100
  1415  000FB8  6E1B               	movwf	Delay@wait,c
  1416  000FBA  0E00               	movlw	0
  1417  000FBC  6E1C               	movwf	Delay@wait+1,c
  1418  000FBE  0E00               	movlw	0
  1419  000FC0  6E1D               	movwf	Delay@wait+2,c
  1420  000FC2  0E00               	movlw	0
  1421  000FC4  6E1E               	movwf	Delay@wait+3,c
  1422  000FC6  EC8A  F007         	call	_Delay	;wreg free
  1423                           
  1424                           ;main.c: 50: clearLcd();
  1425  000FCA  EC3B  F009         	call	_clearLcd	;wreg free
  1426                           
  1427                           ;main.c: 51: Splash();
  1428  000FCE  EC78  F008         	call	_Splash	;wreg free
  1429  000FD2                     l3586:
  1430  000FD2  EC59  F006         	call	_SetBMM	;wreg free
  1431  000FD6  0900               	iorlw	0
  1432  000FD8  A4D8               	btfss	status,2,c
  1433  000FDA  D7FB               	goto	l3586
  1434                           
  1435                           ;main.c: 54: do { LATA3 = 1; } while(0);
  1436  000FDC  8689               	bsf	3977,3,c	;volatile
  1437  000FDE                     l3588:
  1438                           
  1439                           ;main.c: 56: updateComms();
  1440  000FDE  EC4F  F009         	call	_updateComms	;wreg free
  1441                           
  1442                           ;main.c: 57: ledDebug();
  1443  000FE2  EC60  F008         	call	_ledDebug	;wreg free
  1444  000FE6  D7FB               	goto	l3588
  1445  000FE8                     __end_of_main:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           intcon	equ	0xFF2
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1l	equ	0xFE1
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _updateComms *****************
  1459 ;; Defined at:
  1460 ;;		line 12 in file "Communications.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;		None               void
  1467 ;; Registers used:
  1468 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1474 ;;      Params:         0       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0
  1476 ;;      Temps:          0       0       0       0       0       0       0
  1477 ;;      Totals:         0       0       0       0       0       0       0
  1478 ;;Total ram usage:        0 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    8
  1481 ;; This function calls:
  1482 ;;		_Precharge
  1483 ;;		_SetCharger
  1484 ;;		_receiveData
  1485 ;;		_respondChargerAsECU
  1486 ;; This function is called by:
  1487 ;;		_main
  1488 ;; This function uses a non-reentrant model
  1489 ;;
  1490                           
  1491                           	psect	text1
  1492  00129E                     __ptext1:
  1493                           	opt stack 0
  1494  00129E                     _updateComms:
  1495                           	opt stack 22
  1496                           
  1497                           ;Communications.c: 13: if (receiveData()) {
  1498                           
  1499                           ;incstack = 0
  1500  00129E  EC58  F000         	call	_receiveData	;wreg free
  1501  0012A2  0900               	iorlw	0
  1502  0012A4  B4D8               	btfsc	status,2,c
  1503  0012A6  0012               	return	
  1504                           
  1505                           ;Communications.c: 14: Precharge(receiveArray[1]);
  1506  0012A8  0100               	movlb	0	; () banked
  1507  0012AA  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1508  0012AC  ECA3  F004         	call	_Precharge
  1509                           
  1510                           ;Communications.c: 15: SetCharger(1, receiveArray[2], receiveArray[3]);
  1511  0012B0  C064  F0D0         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1512  0012B4  C066  F0D1         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1513  0012B8  0E01               	movlw	1
  1514  0012BA  ECD1  F006         	call	_SetCharger
  1515                           
  1516                           ;Communications.c: 16: respondChargerAsECU();
  1517  0012BE  EC38  F007         	call	_respondChargerAsECU	;wreg free
  1518  0012C2  0012               	return	
  1519  0012C4                     __end_of_updateComms:
  1520                           	opt stack 0
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           intcon	equ	0xFF2
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           postdec1	equ	0xFE5
  1529                           fsr1l	equ	0xFE1
  1530                           status	equ	0xFD8
  1531                           
  1532 ;; *************** function _respondChargerAsECU *****************
  1533 ;; Defined at:
  1534 ;;		line 31 in file "Communications.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;		None
  1537 ;; Auto vars:     Size  Location     Type
  1538 ;;		None
  1539 ;; Return value:  Size  Location     Type
  1540 ;;		None               void
  1541 ;; Registers used:
  1542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1543 ;; Tracked objects:
  1544 ;;		On entry : 0/0
  1545 ;;		On exit  : 0/0
  1546 ;;		Unchanged: 0/0
  1547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1548 ;;      Params:         0       0       0       0       0       0       0
  1549 ;;      Locals:         0       0       0       0       0       0       0
  1550 ;;      Temps:          0       0       0       0       0       0       0
  1551 ;;      Totals:         0       0       0       0       0       0       0
  1552 ;;Total ram usage:        0 bytes
  1553 ;; Hardware stack levels used:    1
  1554 ;; Hardware stack levels required when called:    7
  1555 ;; This function calls:
  1556 ;;		_Delay
  1557 ;;		_ToSend
  1558 ;;		_sendData
  1559 ;; This function is called by:
  1560 ;;		_updateComms
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text2
  1565  000E70                     __ptext2:
  1566                           	opt stack 0
  1567  000E70                     _respondChargerAsECU:
  1568                           	opt stack 22
  1569                           
  1570                           ;Communications.c: 32: LATCbits.LATC5 = 1;
  1571                           
  1572                           ;incstack = 0
  1573  000E70  8A8B               	bsf	3979,5,c	;volatile
  1574                           
  1575                           ;Communications.c: 33: ToSend(0, 1);
  1576  000E72  0E00               	movlw	0
  1577  000E74  0100               	movlb	0	; () banked
  1578  000E76  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1579  000E78  0E01               	movlw	1
  1580  000E7A  6FD2               	movwf	ToSend@what& (0+255),b
  1581  000E7C  0E00               	movlw	0
  1582  000E7E  EC93  F009         	call	_ToSend
  1583                           
  1584                           ;Communications.c: 34: ToSend(1, 1);
  1585  000E82  0E00               	movlw	0
  1586  000E84  0100               	movlb	0	; () banked
  1587  000E86  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1588  000E88  0E01               	movlw	1
  1589  000E8A  6FD2               	movwf	ToSend@what& (0+255),b
  1590  000E8C  0E01               	movlw	1
  1591  000E8E  EC93  F009         	call	_ToSend
  1592                           
  1593                           ;Communications.c: 35: Delay(5);
  1594  000E92  0E05               	movlw	5
  1595  000E94  6E1B               	movwf	Delay@wait,c
  1596  000E96  0E00               	movlw	0
  1597  000E98  6E1C               	movwf	Delay@wait+1,c
  1598  000E9A  0E00               	movlw	0
  1599  000E9C  6E1D               	movwf	Delay@wait+2,c
  1600  000E9E  0E00               	movlw	0
  1601  000EA0  6E1E               	movwf	Delay@wait+3,c
  1602  000EA2  EC8A  F007         	call	_Delay	;wreg free
  1603                           
  1604                           ;Communications.c: 36: sendData(6);
  1605  000EA6  0E06               	movlw	6
  1606  000EA8  EC95  F006         	call	_sendData
  1607                           
  1608                           ;Communications.c: 37: Delay(3);
  1609  000EAC  0E03               	movlw	3
  1610  000EAE  6E1B               	movwf	Delay@wait,c
  1611  000EB0  0E00               	movlw	0
  1612  000EB2  6E1C               	movwf	Delay@wait+1,c
  1613  000EB4  0E00               	movlw	0
  1614  000EB6  6E1D               	movwf	Delay@wait+2,c
  1615  000EB8  0E00               	movlw	0
  1616  000EBA  6E1E               	movwf	Delay@wait+3,c
  1617  000EBC  EC8A  F007         	call	_Delay	;wreg free
  1618                           
  1619                           ;Communications.c: 38: LATCbits.LATC5 = 0;
  1620  000EC0  9A8B               	bcf	3979,5,c	;volatile
  1621  000EC2  0012               	return		;funcret
  1622  000EC4                     __end_of_respondChargerAsECU:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           intcon	equ	0xFF2
  1629                           postinc0	equ	0xFEE
  1630                           wreg	equ	0xFE8
  1631                           postdec1	equ	0xFE5
  1632                           fsr1l	equ	0xFE1
  1633                           status	equ	0xFD8
  1634                           
  1635 ;; *************** function _SetCharger *****************
  1636 ;; Defined at:
  1637 ;;		line 59 in file "Functions.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;  mode            1    wreg     unsigned char 
  1640 ;;  Current         1    0[BANK0 ] unsigned char 
  1641 ;;  Voltage         1    1[BANK0 ] unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  mode            1    2[BANK0 ] unsigned char 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;		None               void
  1646 ;; Registers used:
  1647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1653 ;;      Params:         0       2       0       0       0       0       0
  1654 ;;      Locals:         0       1       0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0
  1656 ;;      Totals:         0       3       0       0       0       0       0
  1657 ;;Total ram usage:        3 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    7
  1660 ;; This function calls:
  1661 ;;		_SetMux
  1662 ;;		_printf
  1663 ;; This function is called by:
  1664 ;;		_updateComms
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text3
  1669  000DA2                     __ptext3:
  1670                           	opt stack 0
  1671  000DA2                     _SetCharger:
  1672                           	opt stack 22
  1673                           
  1674                           ;incstack = 0
  1675                           ;SetCharger@mode stored from wreg
  1676  000DA2  0100               	movlb	0	; () banked
  1677  000DA4  6FD2               	movwf	SetCharger@mode& (0+255),b
  1678                           
  1679                           ;Functions.c: 60: if(mode == 1){
  1680  000DA6  0100               	movlb	0	; () banked
  1681  000DA8  05D2               	decf	SetCharger@mode& (0+255),w,b
  1682  000DAA  A4D8               	btfss	status,2,c
  1683  000DAC  D016               	goto	l3462
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;Functions.c: 62: SetMux(1);
  1687  000DAE  0E01               	movlw	1
  1688  000DB0  EC11  F008         	call	_SetMux
  1689                           
  1690                           ;Functions.c: 65: ChargerData[2] = 001;
  1691  000DB4  0E01               	movlw	1
  1692  000DB6  0100               	movlb	0	; () banked
  1693  000DB8  6FEB               	movwf	(_ChargerData+2)& (0+255),b
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;Functions.c: 66: ChargerData[4] = 000;
  1697  000DBA  0E00               	movlw	0
  1698  000DBC  0100               	movlb	0	; () banked
  1699  000DBE  6FED               	movwf	(_ChargerData+4)& (0+255),b
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;Functions.c: 67: ChargerData[6] = 001;
  1703  000DC0  0E01               	movlw	1
  1704  000DC2  0100               	movlb	0	; () banked
  1705  000DC4  6FEF               	movwf	(_ChargerData+6)& (0+255),b
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;Functions.c: 69: printf("%s",ChargerData);
  1709  000DC6  0EFB               	movlw	low STR_1
  1710  000DC8  6E1D               	movwf	printf@f,c
  1711  000DCA  0E7F               	movlw	high STR_1
  1712  000DCC  6E1E               	movwf	printf@f+1,c
  1713  000DCE  0EE9               	movlw	low _ChargerData
  1714  000DD0  6E1F               	movwf	?_printf+2,c
  1715  000DD2  0E00               	movlw	high _ChargerData
  1716  000DD4  6E20               	movwf	?_printf+3,c
  1717  000DD6  EC39  F004         	call	_printf	;wreg free
  1718  000DDA                     l3462:
  1719                           
  1720                           ;Functions.c: 70: }
  1721                           ;Functions.c: 71: if(mode == 2){
  1722  000DDA  0E02               	movlw	2
  1723  000DDC  0100               	movlb	0	; () banked
  1724  000DDE  19D2               	xorwf	SetCharger@mode& (0+255),w,b
  1725  000DE0  A4D8               	btfss	status,2,c
  1726  000DE2  0012               	return	
  1727                           
  1728                           ; BSR set to: 0
  1729                           ;Functions.c: 73: SetMux(1);
  1730  000DE4  0E01               	movlw	1
  1731  000DE6  EC11  F008         	call	_SetMux
  1732                           
  1733                           ;Functions.c: 75: ChargerData[2] = Current;
  1734  000DEA  C0D0  F0EB         	movff	SetCharger@Current,_ChargerData+2
  1735                           
  1736                           ;Functions.c: 76: ChargerData[4] = Voltage;
  1737  000DEE  C0D1  F0ED         	movff	SetCharger@Voltage,_ChargerData+4
  1738                           
  1739                           ;Functions.c: 78: ChargerData[6] = (Current + Voltage)%1,000;
  1740  000DF2  0E00               	movlw	0
  1741  000DF4  0100               	movlb	0	; () banked
  1742  000DF6  6FEF               	movwf	(_ChargerData+6)& (0+255),b
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;Functions.c: 80: printf("%s",ChargerData);
  1746  000DF8  0EFB               	movlw	low STR_1
  1747  000DFA  6E1D               	movwf	printf@f,c
  1748  000DFC  0E7F               	movlw	high STR_1
  1749  000DFE  6E1E               	movwf	printf@f+1,c
  1750  000E00  0EE9               	movlw	low _ChargerData
  1751  000E02  6E1F               	movwf	?_printf+2,c
  1752  000E04  0E00               	movlw	high _ChargerData
  1753  000E06  6E20               	movwf	?_printf+3,c
  1754  000E08  EC39  F004         	call	_printf	;wreg free
  1755  000E0C  0012               	return	
  1756  000E0E                     __end_of_SetCharger:
  1757                           	opt stack 0
  1758                           tblptru	equ	0xFF8
  1759                           tblptrh	equ	0xFF7
  1760                           tblptrl	equ	0xFF6
  1761                           tablat	equ	0xFF5
  1762                           intcon	equ	0xFF2
  1763                           postinc0	equ	0xFEE
  1764                           wreg	equ	0xFE8
  1765                           postdec1	equ	0xFE5
  1766                           fsr1l	equ	0xFE1
  1767                           status	equ	0xFD8
  1768                           
  1769 ;; *************** function _printf *****************
  1770 ;; Defined at:
  1771 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;  f               2   28[COMRAM] PTR const unsigned char 
  1774 ;;		 -> STR_2(3), STR_1(3), 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  tmpval          4    0        struct .
  1777 ;;  cp              2   36[COMRAM] PTR const unsigned char 
  1778 ;;		 -> STR_5(7), ChargerData(9), 
  1779 ;;  ap              2   33[COMRAM] PTR void [1]
  1780 ;;		 -> ?_printf(2), 
  1781 ;;  len             2    0        unsigned int 
  1782 ;;  val             2    0        unsigned int 
  1783 ;;  c               1   35[COMRAM] char 
  1784 ;;  flag            1   32[COMRAM] unsigned char 
  1785 ;;  prec            1    0        char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  2   28[COMRAM] int 
  1788 ;; Registers used:
  1789 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1795 ;;      Params:         4       0       0       0       0       0       0
  1796 ;;      Locals:         6       0       0       0       0       0       0
  1797 ;;      Temps:          0       0       0       0       0       0       0
  1798 ;;      Totals:        10       0       0       0       0       0       0
  1799 ;;Total ram usage:       10 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    6
  1802 ;; This function calls:
  1803 ;;		_putch
  1804 ;; This function is called by:
  1805 ;;		_SetCharger
  1806 ;; This function uses a non-reentrant model
  1807 ;;
  1808                           
  1809                           	psect	text4
  1810  000872                     __ptext4:
  1811                           	opt stack 0
  1812  000872                     _printf:
  1813                           	opt stack 22
  1814                           
  1815                           ;doprnt.c: 466: va_list ap;
  1816                           ;doprnt.c: 499: signed char c;
  1817                           ;doprnt.c: 506: signed char prec;
  1818                           ;doprnt.c: 508: unsigned char flag;
  1819                           ;doprnt.c: 523: union {
  1820                           ;doprnt.c: 524: unsigned long vd;
  1821                           ;doprnt.c: 525: double integ;
  1822                           ;doprnt.c: 526: } tmpval;
  1823                           ;doprnt.c: 528: unsigned int val;
  1824                           ;doprnt.c: 529: unsigned len;
  1825                           ;doprnt.c: 530: const char * cp;
  1826                           ;doprnt.c: 533: *ap = __va_start();
  1827                           
  1828                           ;incstack = 0
  1829  000872  0E1F               	movlw	low (?_printf+2)
  1830  000874  6E22               	movwf	printf@ap,c
  1831  000876  0E00               	movlw	high (?_printf+2)
  1832  000878  6E23               	movwf	printf@ap+1,c
  1833                           
  1834                           ;doprnt.c: 536: while(c = *f++) {
  1835  00087A  D058               	goto	l3278
  1836  00087C                     l3254:
  1837                           
  1838                           ;doprnt.c: 538: if(c != '%')
  1839  00087C  0E25               	movlw	37
  1840  00087E  1824               	xorwf	printf@c,w,c
  1841  000880  B4D8               	btfsc	status,2,c
  1842  000882  D004               	goto	l3258
  1843                           
  1844                           ;doprnt.c: 540: {
  1845                           ;doprnt.c: 541: (putch(c) );
  1846  000884  5024               	movf	printf@c,w,c
  1847  000886  ECE9  F009         	call	_putch
  1848                           
  1849                           ;doprnt.c: 542: continue;
  1850  00088A  D050               	goto	l3278
  1851  00088C                     l3258:
  1852                           
  1853                           ;doprnt.c: 543: }
  1854                           ;doprnt.c: 548: flag = 0;
  1855  00088C  0E00               	movlw	0
  1856  00088E  6E21               	movwf	printf@flag,c
  1857                           
  1858                           ;doprnt.c: 635: switch(c = *f++) {
  1859  000890  D03D               	goto	l3276
  1860  000892                     l3260:
  1861                           
  1862                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1863  000892  C022  FFD9         	movff	printf@ap,fsr2l
  1864  000896  C023  FFDA         	movff	printf@ap+1,fsr2h
  1865  00089A  CFDE F025          	movff	postinc2,printf@cp
  1866  00089E  CFDD F026          	movff	postdec2,printf@cp+1
  1867  0008A2  0E02               	movlw	2
  1868  0008A4  2622               	addwf	printf@ap,f,c
  1869  0008A6  0E00               	movlw	0
  1870  0008A8  2223               	addwfc	printf@ap+1,f,c
  1871                           
  1872                           ;doprnt.c: 740: if(!cp)
  1873  0008AA  5025               	movf	printf@cp,w,c
  1874  0008AC  1026               	iorwf	printf@cp+1,w,c
  1875  0008AE  A4D8               	btfss	status,2,c
  1876  0008B0  D019               	goto	l3272
  1877                           
  1878                           ;doprnt.c: 741: cp = "(null)";
  1879  0008B2  0EF4               	movlw	low STR_5
  1880  0008B4  6E25               	movwf	printf@cp,c
  1881  0008B6  0E7F               	movlw	high STR_5
  1882  0008B8  6E26               	movwf	printf@cp+1,c
  1883                           
  1884                           ;doprnt.c: 777: while(*cp)
  1885  0008BA  D014               	goto	l3272
  1886  0008BC                     l3268:
  1887                           
  1888                           ;doprnt.c: 778: (putch(*cp++) );
  1889  0008BC  C025  FFF6         	movff	printf@cp,tblptrl
  1890  0008C0  C026  FFF7         	movff	printf@cp+1,tblptrh
  1891  0008C4  6AF8               	clrf	tblptru,c
  1892  0008C6  0E05               	movlw	(high __ramtop+-1)
  1893  0008C8  64F7               	cpfsgt	tblptrh,c
  1894  0008CA  D003               	bra	u2227
  1895  0008CC  0008               	tblrd		*
  1896  0008CE  50F5               	movf	tablat,w,c
  1897  0008D0  D005               	bra	u2220
  1898  0008D2                     u2227:
  1899  0008D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  1900  0008D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  1901  0008DA  50EF               	movf	indf0,w,c
  1902  0008DC                     u2220:
  1903  0008DC  ECE9  F009         	call	_putch
  1904  0008E0  4A25               	infsnz	printf@cp,f,c
  1905  0008E2  2A26               	incf	printf@cp+1,f,c
  1906  0008E4                     l3272:
  1907  0008E4  C025  FFF6         	movff	printf@cp,tblptrl
  1908  0008E8  C026  FFF7         	movff	printf@cp+1,tblptrh
  1909  0008EC  6AF8               	clrf	tblptru,c
  1910  0008EE  0E05               	movlw	(high __ramtop+-1)
  1911  0008F0  64F7               	cpfsgt	tblptrh,c
  1912  0008F2  D003               	bra	u2237
  1913  0008F4  0008               	tblrd		*
  1914  0008F6  50F5               	movf	tablat,w,c
  1915  0008F8  D005               	bra	u2230
  1916  0008FA                     u2237:
  1917  0008FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  1918  0008FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  1919  000902  50EF               	movf	indf0,w,c
  1920  000904                     u2230:
  1921  000904  0900               	iorlw	0
  1922  000906  B4D8               	btfsc	status,2,c
  1923  000908  D011               	goto	l3278
  1924  00090A  D7D8               	goto	l3268
  1925  00090C                     l3276:
  1926  00090C  C01D  FFF6         	movff	printf@f,tblptrl
  1927  000910  C01E  FFF7         	movff	printf@f+1,tblptrh
  1928  000914  4A1D               	infsnz	printf@f,f,c
  1929  000916  2A1E               	incf	printf@f+1,f,c
  1930  000918                     	if	0	;tblptru may be non-zero
  1931  000918                     	endif
  1932  000918                     	if	0	;tblptru may be non-zero
  1933  000918                     	endif
  1934  000918  0008               	tblrd		*
  1935  00091A  CFF5 F024          	movff	tablat,printf@c
  1936  00091E  5024               	movf	printf@c,w,c
  1937                           
  1938                           ; Switch size 1, requested type "space"
  1939                           ; Number of cases is 2, Range of values is 0 to 115
  1940                           ; switch strategies available:
  1941                           ; Name         Instructions Cycles
  1942                           ; simple_byte            7     4 (average)
  1943                           ;	Chosen strategy is simple_byte
  1944  000920  0A00               	xorlw	0	; case 0
  1945  000922  B4D8               	btfsc	status,2,c
  1946  000924  0012               	return	
  1947  000926  0A73               	xorlw	115	; case 115
  1948  000928  B4D8               	btfsc	status,2,c
  1949  00092A  D7B3               	goto	l3260
  1950  00092C                     l3278:
  1951  00092C  C01D  FFF6         	movff	printf@f,tblptrl
  1952  000930  C01E  FFF7         	movff	printf@f+1,tblptrh
  1953  000934  4A1D               	infsnz	printf@f,f,c
  1954  000936  2A1E               	incf	printf@f+1,f,c
  1955  000938                     	if	0	;tblptru may be non-zero
  1956  000938                     	endif
  1957  000938                     	if	0	;tblptru may be non-zero
  1958  000938                     	endif
  1959  000938  0008               	tblrd		*
  1960  00093A  CFF5 F024          	movff	tablat,printf@c
  1961  00093E  5024               	movf	printf@c,w,c
  1962  000940  B4D8               	btfsc	status,2,c
  1963  000942  0012               	return	
  1964  000944  D79B               	goto	l3254
  1965  000946                     __end_of_printf:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           intcon	equ	0xFF2
  1972                           indf0	equ	0xFEF
  1973                           postinc0	equ	0xFEE
  1974                           fsr0h	equ	0xFEA
  1975                           fsr0l	equ	0xFE9
  1976                           wreg	equ	0xFE8
  1977                           postdec1	equ	0xFE5
  1978                           fsr1l	equ	0xFE1
  1979                           postinc2	equ	0xFDE
  1980                           postdec2	equ	0xFDD
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _putch *****************
  1986 ;; Defined at:
  1987 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;  txData          1    wreg     unsigned char 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  txData          1   27[COMRAM] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;		None               void
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2001 ;;      Params:         0       0       0       0       0       0       0
  2002 ;;      Locals:         1       0       0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0
  2004 ;;      Totals:         1       0       0       0       0       0       0
  2005 ;;Total ram usage:        1 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    5
  2008 ;; This function calls:
  2009 ;;		_EUSART2_Write
  2010 ;; This function is called by:
  2011 ;;		_printf
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           
  2015                           	psect	text5
  2016  0013D2                     __ptext5:
  2017                           	opt stack 0
  2018  0013D2                     _putch:
  2019                           	opt stack 22
  2020                           
  2021                           ;incstack = 0
  2022                           ;putch@txData stored from wreg
  2023  0013D2  6E1C               	movwf	putch@txData,c
  2024                           
  2025                           ;eusart2.c: 152: EUSART2_Write(txData);
  2026  0013D4  501C               	movf	putch@txData,w,c
  2027  0013D6  ECF4  F007         	call	_EUSART2_Write
  2028  0013DA  0012               	return		;funcret
  2029  0013DC                     __end_of_putch:
  2030                           	opt stack 0
  2031                           tblptru	equ	0xFF8
  2032                           tblptrh	equ	0xFF7
  2033                           tblptrl	equ	0xFF6
  2034                           tablat	equ	0xFF5
  2035                           intcon	equ	0xFF2
  2036                           indf0	equ	0xFEF
  2037                           postinc0	equ	0xFEE
  2038                           fsr0h	equ	0xFEA
  2039                           fsr0l	equ	0xFE9
  2040                           wreg	equ	0xFE8
  2041                           postdec1	equ	0xFE5
  2042                           fsr1l	equ	0xFE1
  2043                           postinc2	equ	0xFDE
  2044                           postdec2	equ	0xFDD
  2045                           fsr2h	equ	0xFDA
  2046                           fsr2l	equ	0xFD9
  2047                           status	equ	0xFD8
  2048                           
  2049 ;; *************** function _EUSART2_Write *****************
  2050 ;; Defined at:
  2051 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  2052 ;; Parameters:    Size  Location     Type
  2053 ;;  txData          1    wreg     unsigned char 
  2054 ;; Auto vars:     Size  Location     Type
  2055 ;;  txData          1   26[COMRAM] unsigned char 
  2056 ;; Return value:  Size  Location     Type
  2057 ;;		None               void
  2058 ;; Registers used:
  2059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2060 ;; Tracked objects:
  2061 ;;		On entry : 0/0
  2062 ;;		On exit  : 0/0
  2063 ;;		Unchanged: 0/0
  2064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2065 ;;      Params:         0       0       0       0       0       0       0
  2066 ;;      Locals:         1       0       0       0       0       0       0
  2067 ;;      Temps:          0       0       0       0       0       0       0
  2068 ;;      Totals:         1       0       0       0       0       0       0
  2069 ;;Total ram usage:        1 bytes
  2070 ;; Hardware stack levels used:    1
  2071 ;; Hardware stack levels required when called:    4
  2072 ;; This function calls:
  2073 ;;		Nothing
  2074 ;; This function is called by:
  2075 ;;		_putch
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text6
  2080  000FE8                     __ptext6:
  2081                           	opt stack 0
  2082  000FE8                     _EUSART2_Write:
  2083                           	opt stack 22
  2084                           
  2085                           ;incstack = 0
  2086                           ;EUSART2_Write@txData stored from wreg
  2087  000FE8  6E1B               	movwf	EUSART2_Write@txData,c
  2088  000FEA                     l3060:
  2089  000FEA  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  2090  000FEC  B4D8               	btfsc	status,2,c
  2091  000FEE  D7FD               	goto	l3060
  2092                           
  2093                           ;eusart2.c: 132: }
  2094                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  2095  000FF0  B8A3               	btfsc	4003,4,c	;volatile
  2096  000FF2  D003               	goto	l50
  2097                           
  2098                           ;eusart2.c: 135: TXREG2 = txData;
  2099  000FF4  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  2100                           
  2101                           ;eusart2.c: 136: } else {
  2102  000FF8  D012               	goto	l3074
  2103  000FFA                     l50:
  2104                           
  2105                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  2106  000FFA  98A3               	bcf	4003,4,c	;volatile
  2107                           
  2108                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  2109  000FFC  5038               	movf	_eusart2TxHead,w,c
  2110  000FFE  0D01               	mullw	1
  2111  001000  0E9B               	movlw	low _eusart2TxBuffer
  2112  001002  24F3               	addwf	prodl,w,c
  2113  001004  6ED9               	movwf	fsr2l,c
  2114  001006  0E00               	movlw	high _eusart2TxBuffer
  2115  001008  20F4               	addwfc	prodh,w,c
  2116  00100A  6EDA               	movwf	fsr2h,c
  2117  00100C  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  2118  001010  2A38               	incf	_eusart2TxHead,f,c
  2119                           
  2120                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  2121  001012  0E07               	movlw	7
  2122  001014  6438               	cpfsgt	_eusart2TxHead,c
  2123  001016  D002               	goto	l3072
  2124                           
  2125                           ;eusart2.c: 140: eusart2TxHead = 0;
  2126  001018  0E00               	movlw	0
  2127  00101A  6E38               	movwf	_eusart2TxHead,c
  2128  00101C                     l3072:
  2129                           
  2130                           ;eusart2.c: 141: }
  2131                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  2132  00101C  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  2133  00101E                     l3074:
  2134                           
  2135                           ;eusart2.c: 143: }
  2136                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  2137  00101E  88A3               	bsf	4003,4,c	;volatile
  2138  001020  0012               	return		;funcret
  2139  001022                     __end_of_EUSART2_Write:
  2140                           	opt stack 0
  2141                           tblptru	equ	0xFF8
  2142                           tblptrh	equ	0xFF7
  2143                           tblptrl	equ	0xFF6
  2144                           tablat	equ	0xFF5
  2145                           prodh	equ	0xFF4
  2146                           prodl	equ	0xFF3
  2147                           intcon	equ	0xFF2
  2148                           indf0	equ	0xFEF
  2149                           postinc0	equ	0xFEE
  2150                           fsr0h	equ	0xFEA
  2151                           fsr0l	equ	0xFE9
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           indf2	equ	0xFDF
  2156                           postinc2	equ	0xFDE
  2157                           postdec2	equ	0xFDD
  2158                           fsr2h	equ	0xFDA
  2159                           fsr2l	equ	0xFD9
  2160                           status	equ	0xFD8
  2161                           
  2162 ;; *************** function _SetMux *****************
  2163 ;; Defined at:
  2164 ;;		line 91 in file "Functions.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  channel         1    wreg     unsigned char 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  channel         1   26[COMRAM] unsigned char 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;		None               void
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2178 ;;      Params:         0       0       0       0       0       0       0
  2179 ;;      Locals:         1       0       0       0       0       0       0
  2180 ;;      Temps:          0       0       0       0       0       0       0
  2181 ;;      Totals:         1       0       0       0       0       0       0
  2182 ;;Total ram usage:        1 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    4
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_SetCharger
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           	psect	text7
  2193  001022                     __ptext7:
  2194                           	opt stack 0
  2195  001022                     _SetMux:
  2196                           	opt stack 24
  2197                           
  2198                           ;incstack = 0
  2199                           ;SetMux@channel stored from wreg
  2200  001022  6E1B               	movwf	SetMux@channel,c
  2201                           
  2202                           ;Functions.c: 92: switch (channel){
  2203  001024  D00C               	goto	l3250
  2204  001026                     l623:
  2205  001026  908A               	bcf	3978,0,c	;volatile
  2206                           
  2207                           ;Functions.c: 95: do { LATB1 = 0; } while(0);
  2208  001028  928A               	bcf	3978,1,c	;volatile
  2209                           
  2210                           ;Functions.c: 96: break;
  2211  00102A  0012               	return	
  2212  00102C                     l629:
  2213  00102C  808A               	bsf	3978,0,c	;volatile
  2214                           
  2215                           ;Functions.c: 99: do { LATB1 = 0; } while(0);
  2216  00102E  928A               	bcf	3978,1,c	;volatile
  2217                           
  2218                           ;Functions.c: 100: break;
  2219  001030  0012               	return	
  2220  001032                     l634:
  2221  001032  908A               	bcf	3978,0,c	;volatile
  2222                           
  2223                           ;Functions.c: 103: do { LATB1 = 1; } while(0);
  2224  001034  828A               	bsf	3978,1,c	;volatile
  2225                           
  2226                           ;Functions.c: 104: break;
  2227  001036  0012               	return	
  2228  001038                     l639:
  2229  001038  808A               	bsf	3978,0,c	;volatile
  2230                           
  2231                           ;Functions.c: 107: do { LATB1 = 1; } while(0);
  2232  00103A  828A               	bsf	3978,1,c	;volatile
  2233                           
  2234                           ;Functions.c: 112: }
  2235                           
  2236                           ;Functions.c: 111: break;
  2237                           
  2238                           ;Functions.c: 109: default:
  2239                           
  2240                           ;Functions.c: 108: break;
  2241  00103C  0012               	return	
  2242  00103E                     l3250:
  2243  00103E  501B               	movf	SetMux@channel,w,c
  2244                           
  2245                           ; Switch size 1, requested type "space"
  2246                           ; Number of cases is 4, Range of values is 1 to 4
  2247                           ; switch strategies available:
  2248                           ; Name         Instructions Cycles
  2249                           ; simple_byte           13     7 (average)
  2250                           ;	Chosen strategy is simple_byte
  2251  001040  0A01               	xorlw	1	; case 1
  2252  001042  B4D8               	btfsc	status,2,c
  2253  001044  D7F0               	goto	l623
  2254  001046  0A03               	xorlw	3	; case 2
  2255  001048  B4D8               	btfsc	status,2,c
  2256  00104A  D7F0               	goto	l629
  2257  00104C  0A01               	xorlw	1	; case 3
  2258  00104E  B4D8               	btfsc	status,2,c
  2259  001050  D7F0               	goto	l634
  2260  001052  0A07               	xorlw	7	; case 4
  2261  001054  A4D8               	btfss	status,2,c
  2262  001056  0012               	return	
  2263  001058  D7EF               	goto	l639
  2264  00105A                     __end_of_SetMux:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           prodh	equ	0xFF4
  2271                           prodl	equ	0xFF3
  2272                           intcon	equ	0xFF2
  2273                           indf0	equ	0xFEF
  2274                           postinc0	equ	0xFEE
  2275                           fsr0h	equ	0xFEA
  2276                           fsr0l	equ	0xFE9
  2277                           wreg	equ	0xFE8
  2278                           postdec1	equ	0xFE5
  2279                           fsr1l	equ	0xFE1
  2280                           indf2	equ	0xFDF
  2281                           postinc2	equ	0xFDE
  2282                           postdec2	equ	0xFDD
  2283                           fsr2h	equ	0xFDA
  2284                           fsr2l	equ	0xFD9
  2285                           status	equ	0xFD8
  2286                           
  2287 ;; *************** function _Precharge *****************
  2288 ;; Defined at:
  2289 ;;		line 26 in file "Functions.c"
  2290 ;; Parameters:    Size  Location     Type
  2291 ;;  OnOff           1    wreg     unsigned char 
  2292 ;; Auto vars:     Size  Location     Type
  2293 ;;  OnOff           1    0[BANK0 ] unsigned char 
  2294 ;;  i               2    3[BANK0 ] int 
  2295 ;;  i               2    1[BANK0 ] int 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;		None               void
  2298 ;; Registers used:
  2299 ;;		wreg, status,2, status,0, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2305 ;;      Params:         0       0       0       0       0       0       0
  2306 ;;      Locals:         0       5       0       0       0       0       0
  2307 ;;      Temps:          0       0       0       0       0       0       0
  2308 ;;      Totals:         0       5       0       0       0       0       0
  2309 ;;Total ram usage:        5 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    5
  2312 ;; This function calls:
  2313 ;;		_Delay
  2314 ;; This function is called by:
  2315 ;;		_updateComms
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           	psect	text8
  2320  000946                     __ptext8:
  2321                           	opt stack 0
  2322  000946                     _Precharge:
  2323                           	opt stack 24
  2324                           
  2325                           ;incstack = 0
  2326                           ;Precharge@OnOff stored from wreg
  2327  000946  0100               	movlb	0	; () banked
  2328  000948  6FD0               	movwf	Precharge@OnOff& (0+255),b
  2329                           
  2330                           ;Functions.c: 27: if(OnOff){
  2331  00094A  0100               	movlb	0	; () banked
  2332  00094C  51D0               	movf	Precharge@OnOff& (0+255),w,b
  2333  00094E  0100               	movlb	0	; () banked
  2334  000950  B4D8               	btfsc	status,2,c
  2335  000952  D024               	goto	l601
  2336                           
  2337                           ; BSR set to: 0
  2338                           
  2339                           ;Functions.c: 28: do { LATC1 = 1; } while(0);
  2340  000954  828B               	bsf	3979,1,c	;volatile
  2341                           
  2342                           ; BSR set to: 0
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;Functions.c: 29: do { LATB3 = 1; } while(0);
  2346  000956  868A               	bsf	3978,3,c	;volatile
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;Functions.c: 30: for(int i = 0;i<5;i++){
  2350                           
  2351                           ; BSR set to: 0
  2352  000958  0E00               	movlw	0
  2353  00095A  0100               	movlb	0	; () banked
  2354  00095C  6FD2               	movwf	(Precharge@i+1)& (0+255),b
  2355  00095E  0E00               	movlw	0
  2356  000960  6FD1               	movwf	Precharge@i& (0+255),b
  2357  000962                     l3428:
  2358                           
  2359                           ; BSR set to: 0
  2360  000962  0100               	movlb	0	; () banked
  2361  000964  BFD2               	btfsc	(Precharge@i+1)& (0+255),7,b
  2362  000966  D008               	goto	l3432
  2363  000968  0100               	movlb	0	; () banked
  2364  00096A  51D2               	movf	(Precharge@i+1)& (0+255),w,b
  2365  00096C  E113               	bnz	l594
  2366  00096E  0E05               	movlw	5
  2367  000970  0100               	movlb	0	; () banked
  2368  000972  5DD1               	subwf	Precharge@i& (0+255),w,b
  2369  000974  B0D8               	btfsc	status,0,c
  2370  000976  D00E               	goto	l594
  2371  000978                     l3432:
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;Functions.c: 31: Delay(1000);
  2375  000978  0EE8               	movlw	232
  2376  00097A  6E1B               	movwf	Delay@wait,c
  2377  00097C  0E03               	movlw	3
  2378  00097E  6E1C               	movwf	Delay@wait+1,c
  2379  000980  0E00               	movlw	0
  2380  000982  6E1D               	movwf	Delay@wait+2,c
  2381  000984  0E00               	movlw	0
  2382  000986  6E1E               	movwf	Delay@wait+3,c
  2383  000988  EC8A  F007         	call	_Delay	;wreg free
  2384  00098C  0100               	movlb	0	; () banked
  2385  00098E  4BD1               	infsnz	Precharge@i& (0+255),f,b
  2386  000990  2BD2               	incf	(Precharge@i+1)& (0+255),f,b
  2387  000992  D7E7               	goto	l3428
  2388  000994                     l594:
  2389                           
  2390                           ; BSR set to: 0
  2391  000994  888A               	bsf	3978,4,c	;volatile
  2392                           
  2393                           ; BSR set to: 0
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;Functions.c: 34: do { LATC0 = 1; } while(0);
  2397  000996  808B               	bsf	3979,0,c	;volatile
  2398                           
  2399                           ; BSR set to: 0
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;Functions.c: 35: do { LATB5 = 1; } while(0);
  2403  000998  8A8A               	bsf	3978,5,c	;volatile
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;Functions.c: 36: }
  2407  00099A  0012               	return	
  2408  00099C                     l601:
  2409                           
  2410                           ; BSR set to: 0
  2411  00099C  988A               	bcf	3978,4,c	;volatile
  2412                           
  2413                           ; BSR set to: 0
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;Functions.c: 40: do { LATB3 = 0; } while(0);
  2417  00099E  968A               	bcf	3978,3,c	;volatile
  2418                           
  2419                           ; BSR set to: 0
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;Functions.c: 41: do { LATC0 = 0; } while(0);
  2423  0009A0  908B               	bcf	3979,0,c	;volatile
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;Functions.c: 42: for(int i = 0;i<5;i++){
  2427                           
  2428                           ; BSR set to: 0
  2429  0009A2  0E00               	movlw	0
  2430  0009A4  0100               	movlb	0	; () banked
  2431  0009A6  6FD4               	movwf	(Precharge@i_1680+1)& (0+255),b
  2432  0009A8  0E00               	movlw	0
  2433  0009AA  6FD3               	movwf	Precharge@i_1680& (0+255),b
  2434  0009AC                     l3440:
  2435                           
  2436                           ; BSR set to: 0
  2437  0009AC  0100               	movlb	0	; () banked
  2438  0009AE  BFD4               	btfsc	(Precharge@i_1680+1)& (0+255),7,b
  2439  0009B0  D008               	goto	l3444
  2440  0009B2  0100               	movlb	0	; () banked
  2441  0009B4  51D4               	movf	(Precharge@i_1680+1)& (0+255),w,b
  2442  0009B6  E113               	bnz	l609
  2443  0009B8  0E05               	movlw	5
  2444  0009BA  0100               	movlb	0	; () banked
  2445  0009BC  5DD3               	subwf	Precharge@i_1680& (0+255),w,b
  2446  0009BE  B0D8               	btfsc	status,0,c
  2447  0009C0  D00E               	goto	l609
  2448  0009C2                     l3444:
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;Functions.c: 43: Delay(1000);
  2452  0009C2  0EE8               	movlw	232
  2453  0009C4  6E1B               	movwf	Delay@wait,c
  2454  0009C6  0E03               	movlw	3
  2455  0009C8  6E1C               	movwf	Delay@wait+1,c
  2456  0009CA  0E00               	movlw	0
  2457  0009CC  6E1D               	movwf	Delay@wait+2,c
  2458  0009CE  0E00               	movlw	0
  2459  0009D0  6E1E               	movwf	Delay@wait+3,c
  2460  0009D2  EC8A  F007         	call	_Delay	;wreg free
  2461  0009D6  0100               	movlb	0	; () banked
  2462  0009D8  4BD3               	infsnz	Precharge@i_1680& (0+255),f,b
  2463  0009DA  2BD4               	incf	(Precharge@i_1680+1)& (0+255),f,b
  2464  0009DC  D7E7               	goto	l3440
  2465  0009DE                     l609:
  2466                           
  2467                           ; BSR set to: 0
  2468  0009DE  928B               	bcf	3979,1,c	;volatile
  2469                           
  2470                           ; BSR set to: 0
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;Functions.c: 46: do { LATB5 = 0; } while(0);
  2474  0009E0  9A8A               	bcf	3978,5,c	;volatile
  2475                           
  2476                           ; BSR set to: 0
  2477  0009E2  0012               	return	
  2478  0009E4                     __end_of_Precharge:
  2479                           	opt stack 0
  2480                           tblptru	equ	0xFF8
  2481                           tblptrh	equ	0xFF7
  2482                           tblptrl	equ	0xFF6
  2483                           tablat	equ	0xFF5
  2484                           prodh	equ	0xFF4
  2485                           prodl	equ	0xFF3
  2486                           intcon	equ	0xFF2
  2487                           indf0	equ	0xFEF
  2488                           postinc0	equ	0xFEE
  2489                           fsr0h	equ	0xFEA
  2490                           fsr0l	equ	0xFE9
  2491                           wreg	equ	0xFE8
  2492                           postdec1	equ	0xFE5
  2493                           fsr1l	equ	0xFE1
  2494                           indf2	equ	0xFDF
  2495                           postinc2	equ	0xFDE
  2496                           postdec2	equ	0xFDD
  2497                           fsr2h	equ	0xFDA
  2498                           fsr2l	equ	0xFD9
  2499                           status	equ	0xFD8
  2500                           
  2501 ;; *************** function _ledDebug *****************
  2502 ;; Defined at:
  2503 ;;		line 116 in file "Functions.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;		None
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;		None
  2508 ;; Return value:  Size  Location     Type
  2509 ;;		None               void
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0, cstack
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2517 ;;      Params:         0       0       0       0       0       0       0
  2518 ;;      Locals:         0       0       0       0       0       0       0
  2519 ;;      Temps:          0       0       0       0       0       0       0
  2520 ;;      Totals:         0       0       0       0       0       0       0
  2521 ;;Total ram usage:        0 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    5
  2524 ;; This function calls:
  2525 ;;		_time_Set
  2526 ;;		_time_get
  2527 ;; This function is called by:
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531                           
  2532                           	psect	text9
  2533  0010C0                     __ptext9:
  2534                           	opt stack 0
  2535  0010C0                     _ledDebug:
  2536                           	opt stack 25
  2537                           
  2538                           ;Functions.c: 117: if (time_get(1) > 500) {
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;incstack = 0
  2542  0010C0  0E01               	movlw	1
  2543  0010C2  ECC4  F009         	call	_time_get
  2544  0010C6  BE1C               	btfsc	?_time_get+1,7,c
  2545  0010C8  0012               	return	
  2546  0010CA  0EF5               	movlw	245
  2547  0010CC  5C1B               	subwf	?_time_get,w,c
  2548  0010CE  0E01               	movlw	1
  2549  0010D0  581C               	subwfb	?_time_get+1,w,c
  2550  0010D2  A0D8               	btfss	status,0,c
  2551  0010D4  0012               	return	
  2552                           
  2553                           ;Functions.c: 118: do { LATA3 = ~LATA3; } while(0);
  2554  0010D6  B689               	btfsc	3977,3,c	;volatile
  2555  0010D8  D002               	goto	u1690
  2556  0010DA  8689               	bsf	3977,3,c	;volatile
  2557  0010DC  D001               	goto	l2880
  2558  0010DE                     u1690:
  2559  0010DE  9689               	bcf	3977,3,c	;volatile
  2560  0010E0                     l2880:
  2561                           
  2562                           ;Functions.c: 119: time_Set(1, 0);
  2563  0010E0  0E00               	movlw	0
  2564  0010E2  6E1C               	movwf	time_Set@value+1,c
  2565  0010E4  0E00               	movlw	0
  2566  0010E6  6E1B               	movwf	time_Set@value,c
  2567  0010E8  0E01               	movlw	1
  2568  0010EA  EC75  F009         	call	_time_Set
  2569  0010EE  0012               	return	
  2570  0010F0                     __end_of_ledDebug:
  2571                           	opt stack 0
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           prodh	equ	0xFF4
  2577                           prodl	equ	0xFF3
  2578                           intcon	equ	0xFF2
  2579                           indf0	equ	0xFEF
  2580                           postinc0	equ	0xFEE
  2581                           fsr0h	equ	0xFEA
  2582                           fsr0l	equ	0xFE9
  2583                           wreg	equ	0xFE8
  2584                           postdec1	equ	0xFE5
  2585                           fsr1l	equ	0xFE1
  2586                           indf2	equ	0xFDF
  2587                           postinc2	equ	0xFDE
  2588                           postdec2	equ	0xFDD
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           
  2593 ;; *************** function _time_get *****************
  2594 ;; Defined at:
  2595 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  WhatTime        1    wreg     unsigned char 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  WhatTime        1   28[COMRAM] unsigned char 
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  2   26[COMRAM] int 
  2602 ;; Registers used:
  2603 ;;		wreg, status,2, status,0
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2609 ;;      Params:         2       0       0       0       0       0       0
  2610 ;;      Locals:         1       0       0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0       0       0
  2612 ;;      Totals:         3       0       0       0       0       0       0
  2613 ;;Total ram usage:        3 bytes
  2614 ;; Hardware stack levels used:    1
  2615 ;; Hardware stack levels required when called:    4
  2616 ;; This function calls:
  2617 ;;		Nothing
  2618 ;; This function is called by:
  2619 ;;		_ledDebug
  2620 ;; This function uses a non-reentrant model
  2621 ;;
  2622                           
  2623                           	psect	text10
  2624  001388                     __ptext10:
  2625                           	opt stack 0
  2626  001388                     _time_get:
  2627                           	opt stack 25
  2628                           
  2629                           ;incstack = 0
  2630                           ;time_get@WhatTime stored from wreg
  2631  001388  6E1D               	movwf	time_get@WhatTime,c
  2632                           
  2633                           ;tmr0.c: 157: if(WhatTime == 1){
  2634  00138A  041D               	decf	time_get@WhatTime,w,c
  2635  00138C  A4D8               	btfss	status,2,c
  2636  00138E  0012               	return	
  2637                           
  2638                           ;tmr0.c: 158: return LEDtime;
  2639  001390  C0A3  F01B         	movff	_LEDtime,?_time_get
  2640  001394  C0A4  F01C         	movff	_LEDtime+1,?_time_get+1
  2641  001398  0012               	return	
  2642  00139A                     __end_of_time_get:
  2643                           	opt stack 0
  2644                           tblptru	equ	0xFF8
  2645                           tblptrh	equ	0xFF7
  2646                           tblptrl	equ	0xFF6
  2647                           tablat	equ	0xFF5
  2648                           prodh	equ	0xFF4
  2649                           prodl	equ	0xFF3
  2650                           intcon	equ	0xFF2
  2651                           indf0	equ	0xFEF
  2652                           postinc0	equ	0xFEE
  2653                           fsr0h	equ	0xFEA
  2654                           fsr0l	equ	0xFE9
  2655                           wreg	equ	0xFE8
  2656                           postdec1	equ	0xFE5
  2657                           fsr1l	equ	0xFE1
  2658                           indf2	equ	0xFDF
  2659                           postinc2	equ	0xFDE
  2660                           postdec2	equ	0xFDD
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _time_Set *****************
  2666 ;; Defined at:
  2667 ;;		line 162 in file "mcc_generated_files/tmr0.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  WhatTime        1    wreg     unsigned char 
  2670 ;;  value           2   26[COMRAM] int 
  2671 ;; Auto vars:     Size  Location     Type
  2672 ;;  WhatTime        1   28[COMRAM] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;		None               void
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2682 ;;      Params:         2       0       0       0       0       0       0
  2683 ;;      Locals:         1       0       0       0       0       0       0
  2684 ;;      Temps:          0       0       0       0       0       0       0
  2685 ;;      Totals:         3       0       0       0       0       0       0
  2686 ;;Total ram usage:        3 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    4
  2689 ;; This function calls:
  2690 ;;		Nothing
  2691 ;; This function is called by:
  2692 ;;		_ledDebug
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text11
  2697  0012EA                     __ptext11:
  2698                           	opt stack 0
  2699  0012EA                     _time_Set:
  2700                           	opt stack 25
  2701                           
  2702                           ;incstack = 0
  2703                           ;time_Set@WhatTime stored from wreg
  2704  0012EA  6E1D               	movwf	time_Set@WhatTime,c
  2705                           
  2706                           ;tmr0.c: 163: if(WhatTime == 1){
  2707  0012EC  041D               	decf	time_Set@WhatTime,w,c
  2708  0012EE  A4D8               	btfss	status,2,c
  2709  0012F0  0012               	return	
  2710                           
  2711                           ;tmr0.c: 164: LEDtime = value;
  2712  0012F2  C01B  F0A3         	movff	time_Set@value,_LEDtime
  2713  0012F6  C01C  F0A4         	movff	time_Set@value+1,_LEDtime+1
  2714  0012FA  0100               	movlb	0	; () banked
  2715  0012FC  0E00               	movlw	0
  2716  0012FE  BFA4               	btfsc	(_LEDtime+1)& (0+255),7,b
  2717  001300  0EFF               	movlw	-1
  2718  001302  6FA5               	movwf	(_LEDtime+2)& (0+255),b
  2719  001304  6FA6               	movwf	(_LEDtime+3)& (0+255),b
  2720  001306  0012               	return	
  2721  001308                     __end_of_time_Set:
  2722                           	opt stack 0
  2723                           tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           intcon	equ	0xFF2
  2730                           indf0	equ	0xFEF
  2731                           postinc0	equ	0xFEE
  2732                           fsr0h	equ	0xFEA
  2733                           fsr0l	equ	0xFE9
  2734                           wreg	equ	0xFE8
  2735                           postdec1	equ	0xFE5
  2736                           fsr1l	equ	0xFE1
  2737                           indf2	equ	0xFDF
  2738                           postinc2	equ	0xFDE
  2739                           postdec2	equ	0xFDD
  2740                           fsr2h	equ	0xFDA
  2741                           fsr2l	equ	0xFD9
  2742                           status	equ	0xFD8
  2743                           
  2744 ;; *************** function _Splash *****************
  2745 ;; Defined at:
  2746 ;;		line 143 in file "NokiaLCD.c"
  2747 ;; Parameters:    Size  Location     Type
  2748 ;;		None
  2749 ;; Auto vars:     Size  Location     Type
  2750 ;;		None
  2751 ;; Return value:  Size  Location     Type
  2752 ;;		None               void
  2753 ;; Registers used:
  2754 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2755 ;; Tracked objects:
  2756 ;;		On entry : 0/0
  2757 ;;		On exit  : 0/0
  2758 ;;		Unchanged: 0/0
  2759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2760 ;;      Params:         0       0       0       0       0       0       0
  2761 ;;      Locals:         0       0       0       0       0       0       0
  2762 ;;      Temps:          0       0       0       0       0       0       0
  2763 ;;      Totals:         0       0       0       0       0       0       0
  2764 ;;Total ram usage:        0 bytes
  2765 ;; Hardware stack levels used:    1
  2766 ;; Hardware stack levels required when called:    8
  2767 ;; This function calls:
  2768 ;;		_NokiaStr
  2769 ;;		_gotoXy
  2770 ;; This function is called by:
  2771 ;;		_main
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           	psect	text12
  2776  0010F0                     __ptext12:
  2777                           	opt stack 0
  2778  0010F0                     _Splash:
  2779                           	opt stack 22
  2780                           
  2781                           ;NokiaLCD.c: 144: gotoXy(0,2);
  2782                           
  2783                           ;incstack = 0
  2784  0010F0  0E02               	movlw	2
  2785  0010F2  6E23               	movwf	gotoXy@y,c
  2786  0010F4  0E00               	movlw	0
  2787  0010F6  EC27  F009         	call	_gotoXy
  2788                           
  2789                           ;NokiaLCD.c: 145: NokiaStr("Charger Control");
  2790  0010FA  0ED5               	movlw	low STR_3
  2791  0010FC  6E25               	movwf	NokiaStr@str,c
  2792  0010FE  0E7F               	movlw	high STR_3
  2793  001100  6E26               	movwf	NokiaStr@str+1,c
  2794  001102  ECE8  F008         	call	_NokiaStr	;wreg free
  2795                           
  2796                           ;NokiaLCD.c: 146: gotoXy(1,4);
  2797  001106  0E04               	movlw	4
  2798  001108  6E23               	movwf	gotoXy@y,c
  2799  00110A  0E01               	movlw	1
  2800  00110C  EC27  F009         	call	_gotoXy
  2801                           
  2802                           ;NokiaLCD.c: 147: NokiaStr("Waiting on BMM");
  2803  001110  0EE5               	movlw	low STR_4
  2804  001112  6E25               	movwf	NokiaStr@str,c
  2805  001114  0E7F               	movlw	high STR_4
  2806  001116  6E26               	movwf	NokiaStr@str+1,c
  2807  001118  ECE8  F008         	call	_NokiaStr	;wreg free
  2808  00111C  0012               	return		;funcret
  2809  00111E                     __end_of_Splash:
  2810                           	opt stack 0
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           prodh	equ	0xFF4
  2816                           prodl	equ	0xFF3
  2817                           intcon	equ	0xFF2
  2818                           indf0	equ	0xFEF
  2819                           postinc0	equ	0xFEE
  2820                           fsr0h	equ	0xFEA
  2821                           fsr0l	equ	0xFE9
  2822                           wreg	equ	0xFE8
  2823                           postdec1	equ	0xFE5
  2824                           fsr1l	equ	0xFE1
  2825                           indf2	equ	0xFDF
  2826                           postinc2	equ	0xFDE
  2827                           postdec2	equ	0xFDD
  2828                           fsr2h	equ	0xFDA
  2829                           fsr2l	equ	0xFD9
  2830                           status	equ	0xFD8
  2831                           
  2832 ;; *************** function _gotoXy *****************
  2833 ;; Defined at:
  2834 ;;		line 97 in file "NokiaLCD.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  x               1    wreg     unsigned char 
  2837 ;;  y               1   34[COMRAM] unsigned char 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  x               1   35[COMRAM] unsigned char 
  2840 ;; Return value:  Size  Location     Type
  2841 ;;		None               void
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2849 ;;      Params:         1       0       0       0       0       0       0
  2850 ;;      Locals:         1       0       0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0
  2852 ;;      Totals:         2       0       0       0       0       0       0
  2853 ;;Total ram usage:        2 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    6
  2856 ;; This function calls:
  2857 ;;		_LCDwrite
  2858 ;; This function is called by:
  2859 ;;		_Splash
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text13
  2864  00124E                     __ptext13:
  2865                           	opt stack 0
  2866  00124E                     _gotoXy:
  2867                           	opt stack 23
  2868                           
  2869                           ;incstack = 0
  2870                           ;gotoXy@x stored from wreg
  2871  00124E  6E24               	movwf	gotoXy@x,c
  2872                           
  2873                           ;NokiaLCD.c: 98: y=y|0x40;
  2874  001250  5023               	movf	gotoXy@y,w,c
  2875  001252  0940               	iorlw	64
  2876  001254  6E23               	movwf	gotoXy@y,c
  2877                           
  2878                           ;NokiaLCD.c: 99: LCDwrite(1, y);
  2879  001256  C023  F021         	movff	gotoXy@y,LCDwrite@data
  2880  00125A  0E01               	movlw	1
  2881  00125C  ECA1  F009         	call	_LCDwrite
  2882                           
  2883                           ;NokiaLCD.c: 100: x=(x*6)|0x80;
  2884  001260  5024               	movf	gotoXy@x,w,c
  2885  001262  0D06               	mullw	6
  2886  001264  50F3               	movf	prodl,w,c
  2887  001266  0980               	iorlw	128
  2888  001268  6E24               	movwf	gotoXy@x,c
  2889                           
  2890                           ;NokiaLCD.c: 101: LCDwrite(1, x);
  2891  00126A  C024  F021         	movff	gotoXy@x,LCDwrite@data
  2892  00126E  0E01               	movlw	1
  2893  001270  ECA1  F009         	call	_LCDwrite
  2894  001274  0012               	return		;funcret
  2895  001276                     __end_of_gotoXy:
  2896                           	opt stack 0
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           prodh	equ	0xFF4
  2902                           prodl	equ	0xFF3
  2903                           intcon	equ	0xFF2
  2904                           indf0	equ	0xFEF
  2905                           postinc0	equ	0xFEE
  2906                           fsr0h	equ	0xFEA
  2907                           fsr0l	equ	0xFE9
  2908                           wreg	equ	0xFE8
  2909                           postdec1	equ	0xFE5
  2910                           fsr1l	equ	0xFE1
  2911                           indf2	equ	0xFDF
  2912                           postinc2	equ	0xFDE
  2913                           postdec2	equ	0xFDD
  2914                           fsr2h	equ	0xFDA
  2915                           fsr2l	equ	0xFD9
  2916                           status	equ	0xFD8
  2917                           
  2918 ;; *************** function _NokiaStr *****************
  2919 ;; Defined at:
  2920 ;;		line 128 in file "NokiaLCD.c"
  2921 ;; Parameters:    Size  Location     Type
  2922 ;;  str             2   36[COMRAM] PTR unsigned char 
  2923 ;;		 -> STR_4(15), STR_3(16), 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;		None               void
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2935 ;;      Params:         2       0       0       0       0       0       0
  2936 ;;      Locals:         0       0       0       0       0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0
  2938 ;;      Totals:         2       0       0       0       0       0       0
  2939 ;;Total ram usage:        2 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:    7
  2942 ;; This function calls:
  2943 ;;		_LcdCharacter
  2944 ;; This function is called by:
  2945 ;;		_Splash
  2946 ;; This function uses a non-reentrant model
  2947 ;;
  2948                           
  2949                           	psect	text14
  2950  0011D0                     __ptext14:
  2951                           	opt stack 0
  2952  0011D0                     _NokiaStr:
  2953                           	opt stack 22
  2954                           
  2955                           ;NokiaLCD.c: 129: while (*str)
  2956                           
  2957                           ;incstack = 0
  2958  0011D0  D00A               	goto	l3498
  2959  0011D2                     l3494:
  2960                           
  2961                           ;NokiaLCD.c: 130: {
  2962                           ;NokiaLCD.c: 131: LcdCharacter(*str++);
  2963  0011D2  C025  FFF6         	movff	NokiaStr@str,tblptrl
  2964  0011D6  C026  FFF7         	movff	NokiaStr@str+1,tblptrh
  2965  0011DA                     	if	0	;tblptru may be non-zero
  2966  0011DA                     	endif
  2967  0011DA                     	if	0	;tblptru may be non-zero
  2968  0011DA                     	endif
  2969  0011DA  0008               	tblrd		*
  2970  0011DC  50F5               	movf	tablat,w,c
  2971  0011DE  ECCF  F005         	call	_LcdCharacter
  2972  0011E2  4A25               	infsnz	NokiaStr@str,f,c
  2973  0011E4  2A26               	incf	NokiaStr@str+1,f,c
  2974  0011E6                     l3498:
  2975  0011E6  C025  FFF6         	movff	NokiaStr@str,tblptrl
  2976  0011EA  C026  FFF7         	movff	NokiaStr@str+1,tblptrh
  2977  0011EE                     	if	0	;tblptru may be non-zero
  2978  0011EE                     	endif
  2979  0011EE                     	if	0	;tblptru may be non-zero
  2980  0011EE                     	endif
  2981  0011EE  0008               	tblrd		*
  2982  0011F0  50F5               	movf	tablat,w,c
  2983  0011F2  0900               	iorlw	0
  2984  0011F4  B4D8               	btfsc	status,2,c
  2985  0011F6  0012               	return	
  2986  0011F8  D7EC               	goto	l3494
  2987  0011FA                     __end_of_NokiaStr:
  2988                           	opt stack 0
  2989                           tblptru	equ	0xFF8
  2990                           tblptrh	equ	0xFF7
  2991                           tblptrl	equ	0xFF6
  2992                           tablat	equ	0xFF5
  2993                           prodh	equ	0xFF4
  2994                           prodl	equ	0xFF3
  2995                           intcon	equ	0xFF2
  2996                           indf0	equ	0xFEF
  2997                           postinc0	equ	0xFEE
  2998                           fsr0h	equ	0xFEA
  2999                           fsr0l	equ	0xFE9
  3000                           wreg	equ	0xFE8
  3001                           postdec1	equ	0xFE5
  3002                           fsr1l	equ	0xFE1
  3003                           indf2	equ	0xFDF
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function _LcdCharacter *****************
  3011 ;; Defined at:
  3012 ;;		line 111 in file "NokiaLCD.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  character       1    wreg     unsigned char 
  3015 ;; Auto vars:     Size  Location     Type
  3016 ;;  character       1    0[BANK0 ] unsigned char 
  3017 ;;  index           2    1[BANK0 ] int 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;		None               void
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3027 ;;      Params:         0       0       0       0       0       0       0
  3028 ;;      Locals:         0       3       0       0       0       0       0
  3029 ;;      Temps:          2       0       0       0       0       0       0
  3030 ;;      Totals:         2       3       0       0       0       0       0
  3031 ;;Total ram usage:        5 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    6
  3034 ;; This function calls:
  3035 ;;		_LCDwrite
  3036 ;;		___wmul
  3037 ;; This function is called by:
  3038 ;;		_NokiaStr
  3039 ;; This function uses a non-reentrant model
  3040 ;;
  3041                           
  3042                           	psect	text15
  3043  000B9E                     __ptext15:
  3044                           	opt stack 0
  3045  000B9E                     _LcdCharacter:
  3046                           	opt stack 22
  3047                           
  3048                           ;incstack = 0
  3049                           ;LcdCharacter@character stored from wreg
  3050  000B9E  0100               	movlb	0	; () banked
  3051  000BA0  6FD0               	movwf	LcdCharacter@character& (0+255),b
  3052                           
  3053                           ;NokiaLCD.c: 113: LCDwrite(0, 0x00);
  3054  000BA2  0E00               	movlw	0
  3055  000BA4  6E21               	movwf	LCDwrite@data,c
  3056  000BA6  0E00               	movlw	0
  3057  000BA8  ECA1  F009         	call	_LCDwrite
  3058                           
  3059                           ;NokiaLCD.c: 114: for (int index = 0; index < 5; index++)
  3060  000BAC  0E00               	movlw	0
  3061  000BAE  0100               	movlb	0	; () banked
  3062  000BB0  6FD2               	movwf	(LcdCharacter@index+1)& (0+255),b
  3063  000BB2  0E00               	movlw	0
  3064  000BB4  6FD1               	movwf	LcdCharacter@index& (0+255),b
  3065  000BB6                     l3284:
  3066                           
  3067                           ; BSR set to: 0
  3068  000BB6  0100               	movlb	0	; () banked
  3069  000BB8  BFD2               	btfsc	(LcdCharacter@index+1)& (0+255),7,b
  3070  000BBA  D008               	goto	l3288
  3071  000BBC  0100               	movlb	0	; () banked
  3072  000BBE  51D2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  3073  000BC0  E12E               	bnz	l3294
  3074  000BC2  0E05               	movlw	5
  3075  000BC4  0100               	movlb	0	; () banked
  3076  000BC6  5DD1               	subwf	LcdCharacter@index& (0+255),w,b
  3077  000BC8  B0D8               	btfsc	status,0,c
  3078  000BCA  D029               	goto	l3294
  3079  000BCC                     l3288:
  3080                           
  3081                           ; BSR set to: 0
  3082                           ;NokiaLCD.c: 115: {
  3083                           ;NokiaLCD.c: 116: LCDwrite(0, FONTLOOKUP[character - 0x20][index]);
  3084  000BCC  0EE0               	movlw	224
  3085  000BCE  0100               	movlb	0	; () banked
  3086  000BD0  25D0               	addwf	LcdCharacter@character& (0+255),w,b
  3087  000BD2  6E1B               	movwf	___wmul@multiplier,c
  3088  000BD4  6A1C               	clrf	___wmul@multiplier+1,c
  3089  000BD6  0EFF               	movlw	255
  3090  000BD8  221C               	addwfc	___wmul@multiplier+1,f,c
  3091  000BDA  0E00               	movlw	0
  3092  000BDC  6E1E               	movwf	___wmul@multiplicand+1,c
  3093  000BDE  0E05               	movlw	5
  3094  000BE0  6E1D               	movwf	___wmul@multiplicand,c
  3095  000BE2  EC62  F009         	call	___wmul	;wreg free
  3096  000BE6  0EF5               	movlw	low _FONTLOOKUP
  3097  000BE8  6E23               	movwf	??_LcdCharacter& (0+255),c
  3098  000BEA  0E7D               	movlw	high _FONTLOOKUP
  3099  000BEC  6E24               	movwf	(??_LcdCharacter+1)& (0+255),c
  3100  000BEE  501B               	movf	?___wmul,w,c
  3101  000BF0  2623               	addwf	??_LcdCharacter,f,c
  3102  000BF2  501C               	movf	?___wmul+1,w,c
  3103  000BF4  2224               	addwfc	??_LcdCharacter+1,f,c
  3104  000BF6  0100               	movlb	0	; () banked
  3105  000BF8  51D1               	movf	LcdCharacter@index& (0+255),w,b
  3106  000BFA  2623               	addwf	??_LcdCharacter,f,c
  3107  000BFC  0100               	movlb	0	; () banked
  3108  000BFE  51D2               	movf	(LcdCharacter@index+1)& (0+255),w,b
  3109  000C00  2224               	addwfc	??_LcdCharacter+1,f,c
  3110  000C02  C023  FFF6         	movff	??_LcdCharacter,tblptrl
  3111  000C06  C024  FFF7         	movff	??_LcdCharacter+1,tblptrh
  3112  000C0A                     	if	0	;tblptru may be non-zero
  3113  000C0A                     	endif
  3114  000C0A                     	if	0	;tblptru may be non-zero
  3115  000C0A                     	endif
  3116  000C0A  0008               	tblrd		*
  3117  000C0C  CFF5 F021          	movff	tablat,LCDwrite@data
  3118  000C10  0E00               	movlw	0
  3119  000C12  ECA1  F009         	call	_LCDwrite
  3120  000C16  0100               	movlb	0	; () banked
  3121  000C18  4BD1               	infsnz	LcdCharacter@index& (0+255),f,b
  3122  000C1A  2BD2               	incf	(LcdCharacter@index+1)& (0+255),f,b
  3123  000C1C  D7CC               	goto	l3284
  3124  000C1E                     l3294:
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;NokiaLCD.c: 117: }
  3128                           ;NokiaLCD.c: 118: LCDwrite(0, 0x00);
  3129  000C1E  0E00               	movlw	0
  3130  000C20  6E21               	movwf	LCDwrite@data,c
  3131  000C22  0E00               	movlw	0
  3132  000C24  ECA1  F009         	call	_LCDwrite
  3133  000C28  0012               	return		;funcret
  3134  000C2A                     __end_of_LcdCharacter:
  3135                           	opt stack 0
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           prodh	equ	0xFF4
  3141                           prodl	equ	0xFF3
  3142                           intcon	equ	0xFF2
  3143                           indf0	equ	0xFEF
  3144                           postinc0	equ	0xFEE
  3145                           fsr0h	equ	0xFEA
  3146                           fsr0l	equ	0xFE9
  3147                           wreg	equ	0xFE8
  3148                           postdec1	equ	0xFE5
  3149                           fsr1l	equ	0xFE1
  3150                           indf2	equ	0xFDF
  3151                           postinc2	equ	0xFDE
  3152                           postdec2	equ	0xFDD
  3153                           fsr2h	equ	0xFDA
  3154                           fsr2l	equ	0xFD9
  3155                           status	equ	0xFD8
  3156                           
  3157 ;; *************** function ___wmul *****************
  3158 ;; Defined at:
  3159 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  3160 ;; Parameters:    Size  Location     Type
  3161 ;;  multiplier      2   26[COMRAM] unsigned int 
  3162 ;;  multiplicand    2   28[COMRAM] unsigned int 
  3163 ;; Auto vars:     Size  Location     Type
  3164 ;;  product         2   30[COMRAM] unsigned int 
  3165 ;; Return value:  Size  Location     Type
  3166 ;;                  2   26[COMRAM] unsigned int 
  3167 ;; Registers used:
  3168 ;;		wreg, status,2, status,0, prodl, prodh
  3169 ;; Tracked objects:
  3170 ;;		On entry : 0/0
  3171 ;;		On exit  : 0/0
  3172 ;;		Unchanged: 0/0
  3173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3174 ;;      Params:         4       0       0       0       0       0       0
  3175 ;;      Locals:         2       0       0       0       0       0       0
  3176 ;;      Temps:          0       0       0       0       0       0       0
  3177 ;;      Totals:         6       0       0       0       0       0       0
  3178 ;;Total ram usage:        6 bytes
  3179 ;; Hardware stack levels used:    1
  3180 ;; Hardware stack levels required when called:    4
  3181 ;; This function calls:
  3182 ;;		Nothing
  3183 ;; This function is called by:
  3184 ;;		_LcdCharacter
  3185 ;; This function uses a non-reentrant model
  3186 ;;
  3187                           
  3188                           	psect	text16
  3189  0012C4                     __ptext16:
  3190                           	opt stack 0
  3191  0012C4                     ___wmul:
  3192                           	opt stack 23
  3193                           
  3194                           ;incstack = 0
  3195  0012C4  501B               	movf	___wmul@multiplier,w,c
  3196  0012C6  021D               	mulwf	___wmul@multiplicand,c
  3197  0012C8  CFF3 F01F          	movff	prodl,___wmul@product
  3198  0012CC  CFF4 F020          	movff	prodh,___wmul@product+1
  3199  0012D0  501B               	movf	___wmul@multiplier,w,c
  3200  0012D2  021E               	mulwf	___wmul@multiplicand+1,c
  3201  0012D4  50F3               	movf	prodl,w,c
  3202  0012D6  2620               	addwf	___wmul@product+1,f,c
  3203  0012D8  501C               	movf	___wmul@multiplier+1,w,c
  3204  0012DA  021D               	mulwf	___wmul@multiplicand,c
  3205  0012DC  50F3               	movf	prodl,w,c
  3206  0012DE  2620               	addwf	___wmul@product+1,f,c
  3207  0012E0  C01F  F01B         	movff	___wmul@product,?___wmul
  3208  0012E4  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  3209  0012E8  0012               	return	
  3210  0012EA                     __end_of___wmul:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           intcon	equ	0xFF2
  3219                           indf0	equ	0xFEF
  3220                           postinc0	equ	0xFEE
  3221                           fsr0h	equ	0xFEA
  3222                           fsr0l	equ	0xFE9
  3223                           wreg	equ	0xFE8
  3224                           postdec1	equ	0xFE5
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _SetBMM *****************
  3234 ;; Defined at:
  3235 ;;		line 41 in file "Communications.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      unsigned char 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3249 ;;      Params:         0       0       0       0       0       0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0
  3252 ;;      Totals:         0       0       0       0       0       0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    7
  3256 ;; This function calls:
  3257 ;;		_Delay
  3258 ;;		_ToSend
  3259 ;;		_receiveData
  3260 ;;		_sendData
  3261 ;; This function is called by:
  3262 ;;		_main
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text17
  3267  000CB2                     __ptext17:
  3268                           	opt stack 0
  3269  000CB2                     _SetBMM:
  3270                           	opt stack 23
  3271                           
  3272                           ;Communications.c: 42: LATCbits.LATC5 = 1;
  3273                           
  3274                           ;incstack = 0
  3275  000CB2  8A8B               	bsf	3979,5,c	;volatile
  3276                           
  3277                           ;Communications.c: 43: ToSend(0, 1);
  3278  000CB4  0E00               	movlw	0
  3279  000CB6  0100               	movlb	0	; () banked
  3280  000CB8  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  3281  000CBA  0E01               	movlw	1
  3282  000CBC  6FD2               	movwf	ToSend@what& (0+255),b
  3283  000CBE  0E00               	movlw	0
  3284  000CC0  EC93  F009         	call	_ToSend
  3285                           
  3286                           ;Communications.c: 44: ToSend(1, 1);
  3287  000CC4  0E00               	movlw	0
  3288  000CC6  0100               	movlb	0	; () banked
  3289  000CC8  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  3290  000CCA  0E01               	movlw	1
  3291  000CCC  6FD2               	movwf	ToSend@what& (0+255),b
  3292  000CCE  0E01               	movlw	1
  3293  000CD0  EC93  F009         	call	_ToSend
  3294                           
  3295                           ;Communications.c: 45: Delay(5);
  3296  000CD4  0E05               	movlw	5
  3297  000CD6  6E1B               	movwf	Delay@wait,c
  3298  000CD8  0E00               	movlw	0
  3299  000CDA  6E1C               	movwf	Delay@wait+1,c
  3300  000CDC  0E00               	movlw	0
  3301  000CDE  6E1D               	movwf	Delay@wait+2,c
  3302  000CE0  0E00               	movlw	0
  3303  000CE2  6E1E               	movwf	Delay@wait+3,c
  3304  000CE4  EC8A  F007         	call	_Delay	;wreg free
  3305                           
  3306                           ;Communications.c: 46: sendData(6);
  3307  000CE8  0E06               	movlw	6
  3308  000CEA  EC95  F006         	call	_sendData
  3309                           
  3310                           ;Communications.c: 47: Delay(3);
  3311  000CEE  0E03               	movlw	3
  3312  000CF0  6E1B               	movwf	Delay@wait,c
  3313  000CF2  0E00               	movlw	0
  3314  000CF4  6E1C               	movwf	Delay@wait+1,c
  3315  000CF6  0E00               	movlw	0
  3316  000CF8  6E1D               	movwf	Delay@wait+2,c
  3317  000CFA  0E00               	movlw	0
  3318  000CFC  6E1E               	movwf	Delay@wait+3,c
  3319  000CFE  EC8A  F007         	call	_Delay	;wreg free
  3320                           
  3321                           ;Communications.c: 48: LATCbits.LATC5 = 0;
  3322  000D02  9A8B               	bcf	3979,5,c	;volatile
  3323                           
  3324                           ;Communications.c: 49: Delay(100);
  3325  000D04  0E64               	movlw	100
  3326  000D06  6E1B               	movwf	Delay@wait,c
  3327  000D08  0E00               	movlw	0
  3328  000D0A  6E1C               	movwf	Delay@wait+1,c
  3329  000D0C  0E00               	movlw	0
  3330  000D0E  6E1D               	movwf	Delay@wait+2,c
  3331  000D10  0E00               	movlw	0
  3332  000D12  6E1E               	movwf	Delay@wait+3,c
  3333  000D14  EC8A  F007         	call	_Delay	;wreg free
  3334                           
  3335                           ;Communications.c: 50: if (receiveData()){
  3336  000D18  EC58  F000         	call	_receiveData	;wreg free
  3337  000D1C  0900               	iorlw	0
  3338  000D1E  B4D8               	btfsc	status,2,c
  3339  000D20  D002               	goto	l3540
  3340                           
  3341                           ;Communications.c: 51: return 0;
  3342  000D22  0E00               	movlw	0
  3343                           
  3344                           ;Communications.c: 52: }
  3345  000D24  0012               	return	
  3346  000D26                     l3540:
  3347                           
  3348                           ;Communications.c: 53: else return 1;
  3349  000D26  0E01               	movlw	1
  3350  000D28  0012               	return	
  3351  000D2A                     __end_of_SetBMM:
  3352                           	opt stack 0
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           prodh	equ	0xFF4
  3358                           prodl	equ	0xFF3
  3359                           intcon	equ	0xFF2
  3360                           indf0	equ	0xFEF
  3361                           postinc0	equ	0xFEE
  3362                           fsr0h	equ	0xFEA
  3363                           fsr0l	equ	0xFE9
  3364                           wreg	equ	0xFE8
  3365                           postdec1	equ	0xFE5
  3366                           fsr1l	equ	0xFE1
  3367                           indf2	equ	0xFDF
  3368                           postinc2	equ	0xFDE
  3369                           postdec2	equ	0xFDD
  3370                           fsr2h	equ	0xFDA
  3371                           fsr2l	equ	0xFD9
  3372                           status	equ	0xFD8
  3373                           
  3374 ;; *************** function _sendData *****************
  3375 ;; Defined at:
  3376 ;;		line 53 in file "FastTransfer.c"
  3377 ;; Parameters:    Size  Location     Type
  3378 ;;  whereToSend     1    wreg     unsigned char 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  whereToSend     1    1[BANK0 ] unsigned char 
  3381 ;;  i               2    3[BANK0 ] int 
  3382 ;;  CS              1    2[BANK0 ] unsigned char 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;		None               void
  3385 ;; Registers used:
  3386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3392 ;;      Params:         0       0       0       0       0       0       0
  3393 ;;      Locals:         0       4       0       0       0       0       0
  3394 ;;      Temps:          0       1       0       0       0       0       0
  3395 ;;      Totals:         0       5       0       0       0       0       0
  3396 ;;Total ram usage:        5 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    6
  3399 ;; This function calls:
  3400 ;;		_CRC8
  3401 ;;		_FastTransfer_buffer_flush
  3402 ;;		_crcBufS_put
  3403 ;; This function is called by:
  3404 ;;		_respondChargerAsECU
  3405 ;;		_SetBMM
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text18
  3410  000D2A                     __ptext18:
  3411                           	opt stack 0
  3412  000D2A                     _sendData:
  3413                           	opt stack 22
  3414                           
  3415                           ;incstack = 0
  3416                           ;sendData@whereToSend stored from wreg
  3417  000D2A  0100               	movlb	0	; () banked
  3418  000D2C  6FD1               	movwf	sendData@whereToSend& (0+255),b
  3419                           
  3420                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  3421  000D2E  C031  F01B         	movff	_sendStructAddress,CRC8@data
  3422  000D32  C032  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  3423  000D36  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  3424  000D3A  ECB0  F007         	call	_CRC8	;wreg free
  3425  000D3E  0100               	movlb	0	; () banked
  3426  000D40  6FD2               	movwf	sendData@CS& (0+255),b
  3427                           
  3428                           ; BSR set to: 0
  3429                           ;FastTransfer.c: 66: int i;
  3430                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  3431  000D42  0E00               	movlw	0
  3432  000D44  0100               	movlb	0	; () banked
  3433  000D46  6FD4               	movwf	(sendData@i+1)& (0+255),b
  3434  000D48  0E00               	movlw	0
  3435  000D4A  6FD3               	movwf	sendData@i& (0+255),b
  3436  000D4C  D003               	goto	l3208
  3437  000D4E                     l3206:
  3438                           
  3439                           ; BSR set to: 0
  3440  000D4E  0100               	movlb	0	; () banked
  3441  000D50  4BD3               	infsnz	sendData@i& (0+255),f,b
  3442  000D52  2BD4               	incf	(sendData@i+1)& (0+255),f,b
  3443  000D54                     l3208:
  3444                           
  3445                           ; BSR set to: 0
  3446  000D54  0101               	movlb	1	; () banked
  3447  000D56  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  3448  000D58  0100               	movlb	0	; () banked
  3449  000D5A  5DD3               	subwf	sendData@i& (0+255),w,b
  3450  000D5C  0100               	movlb	0	; () banked
  3451  000D5E  51D4               	movf	(sendData@i+1)& (0+255),w,b
  3452  000D60  0A80               	xorlw	128
  3453  000D62  0100               	movlb	0	; () banked
  3454  000D64  6FD0               	movwf	??_sendData& (0+255),b
  3455  000D66  0101               	movlb	1	; () banked
  3456  000D68  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  3457  000D6A  0A80               	xorlw	128
  3458  000D6C  0100               	movlb	0	; () banked
  3459  000D6E  59D0               	subwfb	??_sendData& (0+255),w,b
  3460  000D70  A0D8               	btfss	status,0,c
  3461  000D72  D7ED               	goto	l3206
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  3465                           
  3466                           ; BSR set to: 0
  3467                           
  3468                           ;FastTransfer.c: 69: }
  3469                           ;FastTransfer.c: 72: serial_write(CS);
  3470  000D74  0EBF               	movlw	low _crc_buffer
  3471  000D76  6E1B               	movwf	crcBufS_put@_this,c
  3472  000D78  0E00               	movlw	high _crc_buffer
  3473  000D7A  6E1C               	movwf	crcBufS_put@_this+1,c
  3474  000D7C  C0D1  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  3475  000D80  C0D2  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  3476  000D84  0E00               	movlw	0
  3477  000D86  6E1F               	movwf	crcBufS_put@status,c
  3478  000D88  EC62  F003         	call	_crcBufS_put	;wreg free
  3479                           
  3480                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  3481  000D8C  0E00               	movlw	low _ring_buffer
  3482  000D8E  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  3483  000D90  0E01               	movlw	high _ring_buffer
  3484  000D92  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  3485  000D94  0E00               	movlw	0
  3486  000D96  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  3487  000D98  0E01               	movlw	1
  3488  000D9A  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  3489  000D9C  EC07  F007         	call	_FastTransfer_buffer_flush	;wreg free
  3490  000DA0  0012               	return		;funcret
  3491  000DA2                     __end_of_sendData:
  3492                           	opt stack 0
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           indf0	equ	0xFEF
  3501                           postinc0	equ	0xFEE
  3502                           fsr0h	equ	0xFEA
  3503                           fsr0l	equ	0xFE9
  3504                           wreg	equ	0xFE8
  3505                           postdec1	equ	0xFE5
  3506                           fsr1l	equ	0xFE1
  3507                           indf2	equ	0xFDF
  3508                           postinc2	equ	0xFDE
  3509                           postdec2	equ	0xFDD
  3510                           fsr2h	equ	0xFDA
  3511                           fsr2l	equ	0xFD9
  3512                           status	equ	0xFD8
  3513                           
  3514 ;; *************** function _crcBufS_put *****************
  3515 ;; Defined at:
  3516 ;;		line 321 in file "FastTransfer.c"
  3517 ;; Parameters:    Size  Location     Type
  3518 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3519 ;;		 -> crc_buffer(17), 
  3520 ;;  address         1   28[COMRAM] unsigned char 
  3521 ;;  oldCRC          1   29[COMRAM] unsigned char 
  3522 ;;  status          1   30[COMRAM] unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;		None               void
  3527 ;; Registers used:
  3528 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3534 ;;      Params:         5       0       0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0
  3536 ;;      Temps:          2       0       0       0       0       0       0
  3537 ;;      Totals:         7       0       0       0       0       0       0
  3538 ;;Total ram usage:        7 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    4
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		_sendData
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text19
  3549  0006C4                     __ptext19:
  3550                           	opt stack 0
  3551  0006C4                     _crcBufS_put:
  3552                           	opt stack 23
  3553                           
  3554                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  3555                           
  3556                           ;incstack = 0
  3557  0006C4  EE20 F00F          	lfsr	2,15
  3558  0006C8  501B               	movf	crcBufS_put@_this,w,c
  3559  0006CA  26D9               	addwf	fsr2l,f,c
  3560  0006CC  501C               	movf	crcBufS_put@_this+1,w,c
  3561  0006CE  22DA               	addwfc	fsr2h,f,c
  3562  0006D0  CFDE F020          	movff	postinc2,??_crcBufS_put
  3563  0006D4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  3564  0006D8  5020               	movf	??_crcBufS_put,w,c
  3565  0006DA  241B               	addwf	crcBufS_put@_this,w,c
  3566  0006DC  6ED9               	movwf	fsr2l,c
  3567  0006DE  5021               	movf	??_crcBufS_put+1,w,c
  3568  0006E0  201C               	addwfc	crcBufS_put@_this+1,w,c
  3569  0006E2  6EDA               	movwf	fsr2h,c
  3570  0006E4  C01D  FFDF         	movff	crcBufS_put@address,indf2
  3571                           
  3572                           ;FastTransfer.c: 323: _this->head++;
  3573  0006E8  EE20 F00F          	lfsr	2,15
  3574  0006EC  501B               	movf	crcBufS_put@_this,w,c
  3575  0006EE  26D9               	addwf	fsr2l,f,c
  3576  0006F0  501C               	movf	crcBufS_put@_this+1,w,c
  3577  0006F2  22DA               	addwfc	fsr2h,f,c
  3578  0006F4  2ADE               	incf	postinc2,f,c
  3579  0006F6  0E00               	movlw	0
  3580  0006F8  22DD               	addwfc	postdec2,f,c
  3581                           
  3582                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  3583  0006FA  EE20 F00F          	lfsr	2,15
  3584  0006FE  501B               	movf	crcBufS_put@_this,w,c
  3585  000700  26D9               	addwf	fsr2l,f,c
  3586  000702  501C               	movf	crcBufS_put@_this+1,w,c
  3587  000704  22DA               	addwfc	fsr2h,f,c
  3588  000706  CFDE F020          	movff	postinc2,??_crcBufS_put
  3589  00070A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  3590  00070E  5020               	movf	??_crcBufS_put,w,c
  3591  000710  241B               	addwf	crcBufS_put@_this,w,c
  3592  000712  6ED9               	movwf	fsr2l,c
  3593  000714  5021               	movf	??_crcBufS_put+1,w,c
  3594  000716  201C               	addwfc	crcBufS_put@_this+1,w,c
  3595  000718  6EDA               	movwf	fsr2h,c
  3596  00071A  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  3597                           
  3598                           ;FastTransfer.c: 325: _this->head++;
  3599  00071E  EE20 F00F          	lfsr	2,15
  3600  000722  501B               	movf	crcBufS_put@_this,w,c
  3601  000724  26D9               	addwf	fsr2l,f,c
  3602  000726  501C               	movf	crcBufS_put@_this+1,w,c
  3603  000728  22DA               	addwfc	fsr2h,f,c
  3604  00072A  2ADE               	incf	postinc2,f,c
  3605  00072C  0E00               	movlw	0
  3606  00072E  22DD               	addwfc	postdec2,f,c
  3607                           
  3608                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  3609  000730  EE20 F00F          	lfsr	2,15
  3610  000734  501B               	movf	crcBufS_put@_this,w,c
  3611  000736  26D9               	addwf	fsr2l,f,c
  3612  000738  501C               	movf	crcBufS_put@_this+1,w,c
  3613  00073A  22DA               	addwfc	fsr2h,f,c
  3614  00073C  CFDE F020          	movff	postinc2,??_crcBufS_put
  3615  000740  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  3616  000744  5020               	movf	??_crcBufS_put,w,c
  3617  000746  241B               	addwf	crcBufS_put@_this,w,c
  3618  000748  6ED9               	movwf	fsr2l,c
  3619  00074A  5021               	movf	??_crcBufS_put+1,w,c
  3620  00074C  201C               	addwfc	crcBufS_put@_this+1,w,c
  3621  00074E  6EDA               	movwf	fsr2h,c
  3622  000750  C01F  FFDF         	movff	crcBufS_put@status,indf2
  3623                           
  3624                           ;FastTransfer.c: 327: _this->head++;
  3625  000754  EE20 F00F          	lfsr	2,15
  3626  000758  501B               	movf	crcBufS_put@_this,w,c
  3627  00075A  26D9               	addwf	fsr2l,f,c
  3628  00075C  501C               	movf	crcBufS_put@_this+1,w,c
  3629  00075E  22DA               	addwfc	fsr2h,f,c
  3630  000760  2ADE               	incf	postinc2,f,c
  3631  000762  0E00               	movlw	0
  3632  000764  22DD               	addwfc	postdec2,f,c
  3633                           
  3634                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  3635  000766  EE20 F00F          	lfsr	2,15
  3636  00076A  501B               	movf	crcBufS_put@_this,w,c
  3637  00076C  26D9               	addwf	fsr2l,f,c
  3638  00076E  501C               	movf	crcBufS_put@_this+1,w,c
  3639  000770  22DA               	addwfc	fsr2h,f,c
  3640  000772  0E01               	movlw	1
  3641  000774  BEDB               	btfsc	plusw2,7,c
  3642  000776  0012               	return	
  3643  000778  0E01               	movlw	1
  3644  00077A  50DB               	movf	plusw2,w,c
  3645  00077C  E104               	bnz	u2020
  3646  00077E  0E0F               	movlw	15
  3647  000780  5CDE               	subwf	postinc2,w,c
  3648  000782  A0D8               	btfss	status,0,c
  3649  000784  0012               	return	
  3650  000786                     u2020:
  3651                           
  3652                           ;FastTransfer.c: 329: _this->head = 0;
  3653  000786  EE20 F00F          	lfsr	2,15
  3654  00078A  501B               	movf	crcBufS_put@_this,w,c
  3655  00078C  26D9               	addwf	fsr2l,f,c
  3656  00078E  501C               	movf	crcBufS_put@_this+1,w,c
  3657  000790  22DA               	addwfc	fsr2h,f,c
  3658  000792  0E00               	movlw	0
  3659  000794  6EDE               	movwf	postinc2,c
  3660  000796  0E00               	movlw	0
  3661  000798  6EDD               	movwf	postdec2,c
  3662  00079A  0012               	return	
  3663  00079C                     __end_of_crcBufS_put:
  3664                           	opt stack 0
  3665                           tblptru	equ	0xFF8
  3666                           tblptrh	equ	0xFF7
  3667                           tblptrl	equ	0xFF6
  3668                           tablat	equ	0xFF5
  3669                           prodh	equ	0xFF4
  3670                           prodl	equ	0xFF3
  3671                           intcon	equ	0xFF2
  3672                           indf0	equ	0xFEF
  3673                           postinc0	equ	0xFEE
  3674                           fsr0h	equ	0xFEA
  3675                           fsr0l	equ	0xFE9
  3676                           wreg	equ	0xFE8
  3677                           postdec1	equ	0xFE5
  3678                           fsr1l	equ	0xFE1
  3679                           indf2	equ	0xFDF
  3680                           postinc2	equ	0xFDE
  3681                           postdec2	equ	0xFDD
  3682                           plusw2	equ	0xFDB
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function _FastTransfer_buffer_flush *****************
  3688 ;; Defined at:
  3689 ;;		line 261 in file "FastTransfer.c"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  3692 ;;		 -> ring_buffer(206), 
  3693 ;;  clearBuffer     2   36[COMRAM] const int 
  3694 ;; Auto vars:     Size  Location     Type
  3695 ;;		None
  3696 ;; Return value:  Size  Location     Type
  3697 ;;		None               void
  3698 ;; Registers used:
  3699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3700 ;; Tracked objects:
  3701 ;;		On entry : 0/0
  3702 ;;		On exit  : 0/0
  3703 ;;		Unchanged: 0/0
  3704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3705 ;;      Params:         4       0       0       0       0       0       0
  3706 ;;      Locals:         0       0       0       0       0       0       0
  3707 ;;      Temps:          0       0       0       0       0       0       0
  3708 ;;      Totals:         4       0       0       0       0       0       0
  3709 ;;Total ram usage:        4 bytes
  3710 ;; Hardware stack levels used:    1
  3711 ;; Hardware stack levels required when called:    5
  3712 ;; This function calls:
  3713 ;;		_memset
  3714 ;; This function is called by:
  3715 ;;		_sendData
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text20
  3720  000E0E                     __ptext20:
  3721                           	opt stack 0
  3722  000E0E                     _FastTransfer_buffer_flush:
  3723                           	opt stack 22
  3724                           
  3725                           ;FastTransfer.c: 262: _this->count = 0;
  3726                           
  3727                           ;incstack = 0
  3728  000E0E  EE20 F0CC          	lfsr	2,204
  3729  000E12  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  3730  000E14  26D9               	addwf	fsr2l,f,c
  3731  000E16  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  3732  000E18  22DA               	addwfc	fsr2h,f,c
  3733  000E1A  0E00               	movlw	0
  3734  000E1C  6EDE               	movwf	postinc2,c
  3735  000E1E  0E00               	movlw	0
  3736  000E20  6EDD               	movwf	postdec2,c
  3737                           
  3738                           ;FastTransfer.c: 263: _this->head = 0;
  3739  000E22  EE20 F0C8          	lfsr	2,200
  3740  000E26  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  3741  000E28  26D9               	addwf	fsr2l,f,c
  3742  000E2A  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  3743  000E2C  22DA               	addwfc	fsr2h,f,c
  3744  000E2E  0E00               	movlw	0
  3745  000E30  6EDE               	movwf	postinc2,c
  3746  000E32  0E00               	movlw	0
  3747  000E34  6EDD               	movwf	postdec2,c
  3748                           
  3749                           ;FastTransfer.c: 264: _this->tail = 0;
  3750  000E36  EE20 F0CA          	lfsr	2,202
  3751  000E3A  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  3752  000E3C  26D9               	addwf	fsr2l,f,c
  3753  000E3E  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  3754  000E40  22DA               	addwfc	fsr2h,f,c
  3755  000E42  0E00               	movlw	0
  3756  000E44  6EDE               	movwf	postinc2,c
  3757  000E46  0E00               	movlw	0
  3758  000E48  6EDD               	movwf	postdec2,c
  3759                           
  3760                           ;FastTransfer.c: 265: if (clearBuffer) {
  3761  000E4A  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  3762  000E4C  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  3763  000E4E  B4D8               	btfsc	status,2,c
  3764  000E50  0012               	return	
  3765                           
  3766                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  3767  000E52  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  3768  000E56  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  3769  000E5A  0E00               	movlw	0
  3770  000E5C  6E1E               	movwf	memset@c+1,c
  3771  000E5E  0E00               	movlw	0
  3772  000E60  6E1D               	movwf	memset@c,c
  3773  000E62  0E00               	movlw	0
  3774  000E64  6E20               	movwf	memset@n+1,c
  3775  000E66  0EC8               	movlw	200
  3776  000E68  6E1F               	movwf	memset@n,c
  3777  000E6A  ECA6  F008         	call	_memset	;wreg free
  3778  000E6E  0012               	return	
  3779  000E70                     __end_of_FastTransfer_buffer_flush:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           indf0	equ	0xFEF
  3789                           postinc0	equ	0xFEE
  3790                           fsr0h	equ	0xFEA
  3791                           fsr0l	equ	0xFE9
  3792                           wreg	equ	0xFE8
  3793                           postdec1	equ	0xFE5
  3794                           fsr1l	equ	0xFE1
  3795                           indf2	equ	0xFDF
  3796                           postinc2	equ	0xFDE
  3797                           postdec2	equ	0xFDD
  3798                           plusw2	equ	0xFDB
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function _memset *****************
  3804 ;; Defined at:
  3805 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  p1              2   26[COMRAM] PTR void 
  3808 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  3809 ;;  c               2   28[COMRAM] int 
  3810 ;;  n               2   30[COMRAM] unsigned int 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  p               2   32[COMRAM] PTR unsigned char 
  3813 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  2   26[COMRAM] PTR void 
  3816 ;; Registers used:
  3817 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3823 ;;      Params:         6       0       0       0       0       0       0
  3824 ;;      Locals:         2       0       0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0
  3826 ;;      Totals:         8       0       0       0       0       0       0
  3827 ;;Total ram usage:        8 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    4
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_FastTransfer_buffer_flush
  3834 ;;		_UART_buff_init
  3835 ;;		_UART_buff_flush
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text21
  3840  00114C                     __ptext21:
  3841                           	opt stack 0
  3842  00114C                     _memset:
  3843                           	opt stack 22
  3844                           
  3845                           ;incstack = 0
  3846  00114C  C01B  F021         	movff	memset@p1,memset@p
  3847  001150  C01C  F022         	movff	memset@p1+1,memset@p+1
  3848  001154  D008               	goto	l3086
  3849  001156                     l3082:
  3850  001156  C021  FFD9         	movff	memset@p,fsr2l
  3851  00115A  C022  FFDA         	movff	memset@p+1,fsr2h
  3852  00115E  C01D  FFDF         	movff	memset@c,indf2
  3853  001162  4A21               	infsnz	memset@p,f,c
  3854  001164  2A22               	incf	memset@p+1,f,c
  3855  001166                     l3086:
  3856  001166  061F               	decf	memset@n,f,c
  3857  001168  A0D8               	btfss	status,0,c
  3858  00116A  0620               	decf	memset@n+1,f,c
  3859  00116C  281F               	incf	memset@n,w,c
  3860  00116E  E1F3               	bnz	l3082
  3861  001170  2820               	incf	memset@n+1,w,c
  3862  001172  B4D8               	btfsc	status,2,c
  3863  001174  0012               	return	
  3864  001176  D7EF               	goto	l3082
  3865  001178                     __end_of_memset:
  3866                           	opt stack 0
  3867                           tblptru	equ	0xFF8
  3868                           tblptrh	equ	0xFF7
  3869                           tblptrl	equ	0xFF6
  3870                           tablat	equ	0xFF5
  3871                           prodh	equ	0xFF4
  3872                           prodl	equ	0xFF3
  3873                           intcon	equ	0xFF2
  3874                           indf0	equ	0xFEF
  3875                           postinc0	equ	0xFEE
  3876                           fsr0h	equ	0xFEA
  3877                           fsr0l	equ	0xFE9
  3878                           wreg	equ	0xFE8
  3879                           postdec1	equ	0xFE5
  3880                           fsr1l	equ	0xFE1
  3881                           indf2	equ	0xFDF
  3882                           postinc2	equ	0xFDE
  3883                           postdec2	equ	0xFDD
  3884                           plusw2	equ	0xFDB
  3885                           fsr2h	equ	0xFDA
  3886                           fsr2l	equ	0xFD9
  3887                           status	equ	0xFD8
  3888                           
  3889 ;; *************** function _receiveData *****************
  3890 ;; Defined at:
  3891 ;;		line 82 in file "FastTransfer.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;  holder          3   18[BANK0 ] unsigned char [3]
  3896 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  3897 ;;  holder          3   15[BANK0 ] unsigned char [3]
  3898 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  3899 ;;  u               2   21[BANK0 ] int 
  3900 ;;  r               2   23[BANK0 ] int 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      unsigned char 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3910 ;;      Params:         0       0       0       0       0       0       0
  3911 ;;      Locals:         0      12       0       0       0       0       0
  3912 ;;      Temps:          0       6       0       0       0       0       0
  3913 ;;      Totals:         0      18       0       0       0       0       0
  3914 ;;Total ram usage:       18 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    6
  3917 ;; This function calls:
  3918 ;;		_CRC8
  3919 ;;		_CRCcheck
  3920 ;; This function is called by:
  3921 ;;		_updateComms
  3922 ;;		_SetBMM
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text22
  3927  0000B0                     __ptext22:
  3928                           	opt stack 0
  3929  0000B0                     _receiveData:
  3930                           	opt stack 23
  3931                           
  3932                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  3933                           
  3934                           ;incstack = 0
  3935  0000B0  D020               	goto	l3338
  3936  0000B2                     l3328:
  3937                           
  3938                           ; BSR set to: 0
  3939  0000B2  0100               	movlb	0	; () banked
  3940  0000B4  4BE5               	infsnz	receiveData@u& (0+255),f,b
  3941  0000B6  2BE6               	incf	(receiveData@u+1)& (0+255),f,b
  3942                           
  3943                           ; BSR set to: 0
  3944                           
  3945                           ; BSR set to: 0
  3946  0000B8  5040               	movf	_rx_len,w,c
  3947  0000BA  0100               	movlb	0	; () banked
  3948  0000BC  6FD7               	movwf	??_receiveData& (0+255),b
  3949  0000BE  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  3950  0000C0  0E01               	movlw	1
  3951  0000C2  0100               	movlb	0	; () banked
  3952  0000C4  27D7               	addwf	??_receiveData& (0+255),f,b
  3953  0000C6  0E00               	movlw	0
  3954  0000C8  23D8               	addwfc	(??_receiveData+1)& (0+255),f,b
  3955  0000CA  0100               	movlb	0	; () banked
  3956  0000CC  51E5               	movf	receiveData@u& (0+255),w,b
  3957  0000CE  0100               	movlb	0	; () banked
  3958  0000D0  5DD7               	subwf	??_receiveData& (0+255),w,b
  3959  0000D2  0100               	movlb	0	; () banked
  3960  0000D4  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  3961  0000D6  0A80               	xorlw	128
  3962  0000D8  0100               	movlb	0	; () banked
  3963  0000DA  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  3964  0000DC  0100               	movlb	0	; () banked
  3965  0000DE  51E6               	movf	(receiveData@u+1)& (0+255),w,b
  3966  0000E0  0A80               	xorlw	128
  3967  0000E2  0100               	movlb	0	; () banked
  3968  0000E4  59D9               	subwfb	(??_receiveData+2)& (0+255),w,b
  3969  0000E6  B0D8               	btfsc	status,0,c
  3970  0000E8  D7E4               	goto	l3328
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;FastTransfer.c: 109: }
  3974                           ;FastTransfer.c: 110: rx_len = 0;
  3975                           
  3976                           ; BSR set to: 0
  3977  0000EA  0E00               	movlw	0
  3978  0000EC  6E40               	movwf	_rx_len,c
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;FastTransfer.c: 111: return 0;
  3982  0000EE  0E00               	movlw	0
  3983                           
  3984                           ; BSR set to: 0
  3985  0000F0  0012               	return	
  3986  0000F2                     l3338:
  3987                           
  3988                           ;FastTransfer.c: 112: }
  3989                           ;FastTransfer.c: 114: }
  3990                           ;FastTransfer.c: 115: }
  3991                           ;FastTransfer.c: 116: }
  3992                           ;FastTransfer.c: 119: if (rx_len != 0) {
  3993  0000F2  5040               	movf	_rx_len,w,c
  3994  0000F4  B4D8               	btfsc	status,2,c
  3995  0000F6  D12C               	goto	l3420
  3996                           
  3997                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  3998  0000F8  503F               	movf	_rx_array_inx,w,c
  3999  0000FA  B4D8               	btfsc	status,2,c
  4000  0000FC                     l380:
  4001  0000FC  D7FF               	goto	l380
  4002                           
  4003                           ;FastTransfer.c: 135: }
  4004                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  4005                           
  4006                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  4007                           
  4008                           ;FastTransfer.c: 129: }
  4009                           ;FastTransfer.c: 130: }
  4010                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  4011                           
  4012                           ;FastTransfer.c: 128: return 0;
  4013                           
  4014                           ;FastTransfer.c: 127: rx_array_inx = 0;
  4015                           
  4016                           ;FastTransfer.c: 126: rx_len = 0;
  4017                           
  4018                           ;FastTransfer.c: 125: CRCcheck();
  4019                           
  4020                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  4021  0000FE  5040               	movf	_rx_len,w,c
  4022  000100  0100               	movlb	0	; () banked
  4023  000102  6FD7               	movwf	??_receiveData& (0+255),b
  4024  000104  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  4025  000106  0EFF               	movlw	255
  4026  000108  0100               	movlb	0	; () banked
  4027  00010A  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  4028  00010C  0EFF               	movlw	255
  4029  00010E  0100               	movlb	0	; () banked
  4030  000110  6FDA               	movwf	(??_receiveData+3)& (0+255),b
  4031  000112  503F               	movf	_rx_array_inx,w,c
  4032  000114  0100               	movlb	0	; () banked
  4033  000116  6FDB               	movwf	(??_receiveData+4)& (0+255),b
  4034  000118  6BDC               	clrf	(??_receiveData+5)& (0+255),b
  4035  00011A  0100               	movlb	0	; () banked
  4036  00011C  51D9               	movf	(??_receiveData+2)& (0+255),w,b
  4037  00011E  0100               	movlb	0	; () banked
  4038  000120  27DB               	addwf	(??_receiveData+4)& (0+255),f,b
  4039  000122  0100               	movlb	0	; () banked
  4040  000124  51DA               	movf	(??_receiveData+3)& (0+255),w,b
  4041  000126  0100               	movlb	0	; () banked
  4042  000128  23DC               	addwfc	(??_receiveData+5)& (0+255),f,b
  4043  00012A  0100               	movlb	0	; () banked
  4044  00012C  51D7               	movf	??_receiveData& (0+255),w,b
  4045  00012E  0100               	movlb	0	; () banked
  4046  000130  19DB               	xorwf	(??_receiveData+4)& (0+255),w,b
  4047  000132  E105               	bnz	u2351
  4048  000134  0100               	movlb	0	; () banked
  4049  000136  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  4050  000138  0100               	movlb	0	; () banked
  4051  00013A  19DC               	xorwf	(??_receiveData+5)& (0+255),w,b
  4052  00013C  A4D8               	btfss	status,2,c
  4053  00013E                     u2351:
  4054  00013E  D108               	goto	l3420
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  4058  000140  0E00               	movlw	low _rx_buffer
  4059  000142  6E1B               	movwf	CRC8@data,c
  4060  000144  0E04               	movlw	high _rx_buffer
  4061  000146  6E1C               	movwf	CRC8@data+1,c
  4062  000148  C040  F01D         	movff	_rx_len,CRC8@len
  4063  00014C  ECB0  F007         	call	_CRC8	;wreg free
  4064  000150  6E34               	movwf	_calc_CS,c
  4065                           
  4066                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  4067  000152  0EFF               	movlw	255
  4068  000154  0100               	movlb	0	; () banked
  4069  000156  6FD7               	movwf	??_receiveData& (0+255),b
  4070  000158  0EFF               	movlw	255
  4071  00015A  0100               	movlb	0	; () banked
  4072  00015C  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  4073  00015E  503F               	movf	_rx_array_inx,w,c
  4074  000160  0100               	movlb	0	; () banked
  4075  000162  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  4076  000164  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  4077  000166  0100               	movlb	0	; () banked
  4078  000168  51D7               	movf	??_receiveData& (0+255),w,b
  4079  00016A  0100               	movlb	0	; () banked
  4080  00016C  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  4081  00016E  0100               	movlb	0	; () banked
  4082  000170  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  4083  000172  0100               	movlb	0	; () banked
  4084  000174  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  4085  000176  0E00               	movlw	low _rx_buffer
  4086  000178  0100               	movlb	0	; () banked
  4087  00017A  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  4088  00017C  6ED9               	movwf	fsr2l,c
  4089  00017E  0E04               	movlw	high _rx_buffer
  4090  000180  0100               	movlb	0	; () banked
  4091  000182  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  4092  000184  6EDA               	movwf	fsr2h,c
  4093  000186  5034               	movf	_calc_CS,w,c
  4094  000188  18DE               	xorwf	postinc2,w,c
  4095  00018A  A4D8               	btfss	status,2,c
  4096  00018C  D0A9               	goto	l3400
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;FastTransfer.c: 147: int r;
  4100                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  4101  00018E  0E00               	movlw	0
  4102  000190  0100               	movlb	0	; () banked
  4103  000192  6FE8               	movwf	(receiveData@r+1)& (0+255),b
  4104  000194  0E00               	movlw	0
  4105  000196  6FE7               	movwf	receiveData@r& (0+255),b
  4106  000198  D05A               	goto	l3378
  4107  00019A                     l3368:
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  4111  00019A  0E00               	movlw	low _rx_buffer
  4112  00019C  0100               	movlb	0	; () banked
  4113  00019E  25E7               	addwf	receiveData@r& (0+255),w,b
  4114  0001A0  6ED9               	movwf	fsr2l,c
  4115  0001A2  0E04               	movlw	high _rx_buffer
  4116  0001A4  0100               	movlb	0	; () banked
  4117  0001A6  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  4118  0001A8  6EDA               	movwf	fsr2h,c
  4119  0001AA  503B               	movf	_maxDataAddress,w,c
  4120  0001AC  5CDE               	subwf	postinc2,w,c
  4121  0001AE  B0D8               	btfsc	status,0,c
  4122  0001B0  D041               	goto	l3374
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  4126  0001B2  0E01               	movlw	1
  4127  0001B4  0100               	movlb	0	; () banked
  4128  0001B6  25E7               	addwf	receiveData@r& (0+255),w,b
  4129  0001B8  0100               	movlb	0	; () banked
  4130  0001BA  6FD7               	movwf	??_receiveData& (0+255),b
  4131  0001BC  0E00               	movlw	0
  4132  0001BE  0100               	movlb	0	; () banked
  4133  0001C0  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  4134  0001C2  0100               	movlb	0	; () banked
  4135  0001C4  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  4136  0001C6  0E00               	movlw	low _rx_buffer
  4137  0001C8  0100               	movlb	0	; () banked
  4138  0001CA  25D7               	addwf	??_receiveData& (0+255),w,b
  4139  0001CC  6ED9               	movwf	fsr2l,c
  4140  0001CE  0E04               	movlw	high _rx_buffer
  4141  0001D0  0100               	movlb	0	; () banked
  4142  0001D2  21D8               	addwfc	(??_receiveData+1)& (0+255),w,b
  4143  0001D4  6EDA               	movwf	fsr2h,c
  4144  0001D6  50DF               	movf	indf2,w,c
  4145  0001D8  6E2D               	movwf	_group,c
  4146                           
  4147                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  4148  0001DA  0E02               	movlw	2
  4149  0001DC  0100               	movlb	0	; () banked
  4150  0001DE  25E7               	addwf	receiveData@r& (0+255),w,b
  4151  0001E0  0100               	movlb	0	; () banked
  4152  0001E2  6FD7               	movwf	??_receiveData& (0+255),b
  4153  0001E4  0E00               	movlw	0
  4154  0001E6  0100               	movlb	0	; () banked
  4155  0001E8  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  4156  0001EA  0100               	movlb	0	; () banked
  4157  0001EC  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  4158  0001EE  0E00               	movlw	low _rx_buffer
  4159  0001F0  0100               	movlb	0	; () banked
  4160  0001F2  25D7               	addwf	??_receiveData& (0+255),w,b
  4161  0001F4  6ED9               	movwf	fsr2l,c
  4162  0001F6  0E04               	movlw	high _rx_buffer
  4163  0001F8  0100               	movlb	0	; () banked
  4164  0001FA  21D8               	addwfc	(??_receiveData+1)& (0+255),w,b
  4165  0001FC  6EDA               	movwf	fsr2h,c
  4166  0001FE  50DF               	movf	indf2,w,c
  4167  000200  6E2E               	movwf	_group+1,c
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  4171  000202  0E00               	movlw	low _rx_buffer
  4172  000204  0100               	movlb	0	; () banked
  4173  000206  25E7               	addwf	receiveData@r& (0+255),w,b
  4174  000208  6ED9               	movwf	fsr2l,c
  4175  00020A  0E04               	movlw	high _rx_buffer
  4176  00020C  0100               	movlb	0	; () banked
  4177  00020E  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  4178  000210  6EDA               	movwf	fsr2h,c
  4179  000212  50DF               	movf	indf2,w,c
  4180  000214  0100               	movlb	0	; () banked
  4181  000216  6FD7               	movwf	??_receiveData& (0+255),b
  4182  000218  0100               	movlb	0	; () banked
  4183  00021A  51D7               	movf	??_receiveData& (0+255),w,b
  4184  00021C  0D02               	mullw	2
  4185  00021E  50F3               	movf	prodl,w,c
  4186  000220  242F               	addwf	_receiveArrayAddress,w,c
  4187  000222  6ED9               	movwf	fsr2l,c
  4188  000224  50F4               	movf	prodh,w,c
  4189  000226  2030               	addwfc	_receiveArrayAddress+1,w,c
  4190  000228  6EDA               	movwf	fsr2h,c
  4191  00022A  C02D  FFDE         	movff	_group,postinc2
  4192  00022E  C02E  FFDD         	movff	_group+1,postdec2
  4193                           
  4194                           ;FastTransfer.c: 153: } else {
  4195  000232  D003               	goto	l3376
  4196  000234                     l3374:
  4197                           
  4198                           ; BSR set to: 0
  4199                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  4200  000234  0100               	movlb	0	; () banked
  4201  000236  4BB5               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  4202  000238  2BB6               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  4203  00023A                     l3376:
  4204                           
  4205                           ; BSR set to: 0
  4206  00023A  0E03               	movlw	3
  4207  00023C  0100               	movlb	0	; () banked
  4208  00023E  25E7               	addwf	receiveData@r& (0+255),w,b
  4209  000240  0100               	movlb	0	; () banked
  4210  000242  6FE7               	movwf	receiveData@r& (0+255),b
  4211  000244  0E00               	movlw	0
  4212  000246  0100               	movlb	0	; () banked
  4213  000248  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  4214  00024A  0100               	movlb	0	; () banked
  4215  00024C  6FE8               	movwf	(receiveData@r+1)& (0+255),b
  4216  00024E                     l3378:
  4217                           
  4218                           ; BSR set to: 0
  4219  00024E  5040               	movf	_rx_len,w,c
  4220  000250  0100               	movlb	0	; () banked
  4221  000252  6FD7               	movwf	??_receiveData& (0+255),b
  4222  000254  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  4223  000256  0100               	movlb	0	; () banked
  4224  000258  51D7               	movf	??_receiveData& (0+255),w,b
  4225  00025A  0100               	movlb	0	; () banked
  4226  00025C  5DE7               	subwf	receiveData@r& (0+255),w,b
  4227  00025E  0100               	movlb	0	; () banked
  4228  000260  51E8               	movf	(receiveData@r+1)& (0+255),w,b
  4229  000262  0A80               	xorlw	128
  4230  000264  0100               	movlb	0	; () banked
  4231  000266  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  4232  000268  0100               	movlb	0	; () banked
  4233  00026A  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  4234  00026C  0A80               	xorlw	128
  4235  00026E  0100               	movlb	0	; () banked
  4236  000270  59D9               	subwfb	(??_receiveData+2)& (0+255),w,b
  4237  000272  A0D8               	btfss	status,0,c
  4238  000274  D792               	goto	l3368
  4239                           
  4240                           ; BSR set to: 0
  4241                           ;FastTransfer.c: 155: }
  4242                           ;FastTransfer.c: 156: }
  4243                           ;FastTransfer.c: 159: if (AKNAKsend) {
  4244                           
  4245                           ; BSR set to: 0
  4246  000276  5033               	movf	_AKNAKsend,w,c
  4247  000278  B4D8               	btfsc	status,2,c
  4248  00027A  D02C               	goto	l3390
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;FastTransfer.c: 160: unsigned char holder[3];
  4252                           ;FastTransfer.c: 161: holder[0] = 255;
  4253  00027C  0100               	movlb	0	; () banked
  4254  00027E  69DF               	setf	receiveData@holder& (0+255),b
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;FastTransfer.c: 162: holder[1] = 1;
  4258  000280  0E01               	movlw	1
  4259  000282  0100               	movlb	0	; () banked
  4260  000284  6FE0               	movwf	(receiveData@holder+1)& (0+255),b
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  4264  000286  0EFF               	movlw	255
  4265  000288  0100               	movlb	0	; () banked
  4266  00028A  6FD7               	movwf	??_receiveData& (0+255),b
  4267  00028C  0EFF               	movlw	255
  4268  00028E  0100               	movlb	0	; () banked
  4269  000290  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  4270  000292  503F               	movf	_rx_array_inx,w,c
  4271  000294  0100               	movlb	0	; () banked
  4272  000296  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  4273  000298  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  4274  00029A  0100               	movlb	0	; () banked
  4275  00029C  51D7               	movf	??_receiveData& (0+255),w,b
  4276  00029E  0100               	movlb	0	; () banked
  4277  0002A0  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  4278  0002A2  0100               	movlb	0	; () banked
  4279  0002A4  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  4280  0002A6  0100               	movlb	0	; () banked
  4281  0002A8  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  4282  0002AA  0E00               	movlw	low _rx_buffer
  4283  0002AC  0100               	movlb	0	; () banked
  4284  0002AE  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  4285  0002B0  6ED9               	movwf	fsr2l,c
  4286  0002B2  0E04               	movlw	high _rx_buffer
  4287  0002B4  0100               	movlb	0	; () banked
  4288  0002B6  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  4289  0002B8  6EDA               	movwf	fsr2h,c
  4290  0002BA  50DF               	movf	indf2,w,c
  4291  0002BC  0100               	movlb	0	; () banked
  4292  0002BE  6FE1               	movwf	(receiveData@holder+2)& (0+255),b
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;FastTransfer.c: 173: serial_write(crcHolder);
  4296  0002C0  0EDF               	movlw	low receiveData@holder
  4297  0002C2  6E1B               	movwf	CRC8@data,c
  4298  0002C4  0E00               	movlw	high receiveData@holder
  4299  0002C6  6E1C               	movwf	CRC8@data+1,c
  4300  0002C8  0E03               	movlw	3
  4301  0002CA  6E1D               	movwf	CRC8@len,c
  4302  0002CC  ECB0  F007         	call	_CRC8	;wreg free
  4303  0002D0  0100               	movlb	0	; () banked
  4304  0002D2  6FDD               	movwf	receiveData@crcHolder& (0+255),b
  4305  0002D4                     l3390:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;FastTransfer.c: 174: }
  4309                           ;FastTransfer.c: 178: rx_len = 0;
  4310  0002D4  0E00               	movlw	0
  4311  0002D6  6E40               	movwf	_rx_len,c
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;FastTransfer.c: 179: rx_array_inx = 0;
  4315  0002D8  0E00               	movlw	0
  4316  0002DA  6E3F               	movwf	_rx_array_inx,c
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;FastTransfer.c: 180: return 1;
  4320  0002DC  0E01               	movlw	1
  4321                           
  4322                           ; BSR set to: 0
  4323  0002DE  0012               	return	
  4324  0002E0                     l3400:
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;FastTransfer.c: 182: crcErrorCounter++;
  4328  0002E0  0100               	movlb	0	; () banked
  4329  0002E2  4BB3               	infsnz	_crcErrorCounter& (0+255),f,b
  4330  0002E4  2BB4               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;FastTransfer.c: 184: if (AKNAKsend) {
  4334  0002E6  5033               	movf	_AKNAKsend,w,c
  4335  0002E8  B4D8               	btfsc	status,2,c
  4336  0002EA  D02C               	goto	l3412
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;FastTransfer.c: 185: unsigned char holder[3];
  4340                           ;FastTransfer.c: 186: holder[0] = 255;
  4341  0002EC  0100               	movlb	0	; () banked
  4342  0002EE  69E2               	setf	receiveData@holder_1388& (0+255),b
  4343                           
  4344                           ; BSR set to: 0
  4345                           ;FastTransfer.c: 187: holder[1] = 2;
  4346  0002F0  0E02               	movlw	2
  4347  0002F2  0100               	movlb	0	; () banked
  4348  0002F4  6FE3               	movwf	(receiveData@holder_1388+1)& (0+255),b
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  4352  0002F6  0EFF               	movlw	255
  4353  0002F8  0100               	movlb	0	; () banked
  4354  0002FA  6FD7               	movwf	??_receiveData& (0+255),b
  4355  0002FC  0EFF               	movlw	255
  4356  0002FE  0100               	movlb	0	; () banked
  4357  000300  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  4358  000302  503F               	movf	_rx_array_inx,w,c
  4359  000304  0100               	movlb	0	; () banked
  4360  000306  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  4361  000308  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  4362  00030A  0100               	movlb	0	; () banked
  4363  00030C  51D7               	movf	??_receiveData& (0+255),w,b
  4364  00030E  0100               	movlb	0	; () banked
  4365  000310  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  4366  000312  0100               	movlb	0	; () banked
  4367  000314  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  4368  000316  0100               	movlb	0	; () banked
  4369  000318  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  4370  00031A  0E00               	movlw	low _rx_buffer
  4371  00031C  0100               	movlb	0	; () banked
  4372  00031E  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  4373  000320  6ED9               	movwf	fsr2l,c
  4374  000322  0E04               	movlw	high _rx_buffer
  4375  000324  0100               	movlb	0	; () banked
  4376  000326  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  4377  000328  6EDA               	movwf	fsr2h,c
  4378  00032A  50DF               	movf	indf2,w,c
  4379  00032C  0100               	movlb	0	; () banked
  4380  00032E  6FE4               	movwf	(receiveData@holder_1388+2)& (0+255),b
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;FastTransfer.c: 198: serial_write(crcHolder);
  4384  000330  0EE2               	movlw	low receiveData@holder_1388
  4385  000332  6E1B               	movwf	CRC8@data,c
  4386  000334  0E00               	movlw	high receiveData@holder_1388
  4387  000336  6E1C               	movwf	CRC8@data+1,c
  4388  000338  0E03               	movlw	3
  4389  00033A  6E1D               	movwf	CRC8@len,c
  4390  00033C  ECB0  F007         	call	_CRC8	;wreg free
  4391  000340  0100               	movlb	0	; () banked
  4392  000342  6FDE               	movwf	receiveData@crcHolder_1389& (0+255),b
  4393  000344                     l3412:
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;FastTransfer.c: 199: }
  4397                           ;FastTransfer.c: 202: rx_len = 0;
  4398  000344  0E00               	movlw	0
  4399  000346  6E40               	movwf	_rx_len,c
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;FastTransfer.c: 203: rx_array_inx = 0;
  4403  000348  0E00               	movlw	0
  4404  00034A  6E3F               	movwf	_rx_array_inx,c
  4405                           
  4406                           ; BSR set to: 0
  4407                           ;FastTransfer.c: 204: return 0;
  4408  00034C  0E00               	movlw	0
  4409                           
  4410                           ; BSR set to: 0
  4411  00034E  0012               	return	
  4412  000350                     l3420:
  4413                           
  4414                           ;FastTransfer.c: 205: }
  4415                           ;FastTransfer.c: 206: }
  4416                           ;FastTransfer.c: 207: }
  4417                           ;FastTransfer.c: 210: return 0;
  4418  000350  0E00               	movlw	0
  4419  000352  0012               	return	
  4420  000354                     __end_of_receiveData:
  4421                           	opt stack 0
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           indf0	equ	0xFEF
  4430                           postinc0	equ	0xFEE
  4431                           fsr0h	equ	0xFEA
  4432                           fsr0l	equ	0xFE9
  4433                           wreg	equ	0xFE8
  4434                           postdec1	equ	0xFE5
  4435                           fsr1l	equ	0xFE1
  4436                           indf2	equ	0xFDF
  4437                           postinc2	equ	0xFDE
  4438                           postdec2	equ	0xFDD
  4439                           plusw2	equ	0xFDB
  4440                           fsr2h	equ	0xFDA
  4441                           fsr2l	equ	0xFD9
  4442                           status	equ	0xFD8
  4443                           
  4444 ;; *************** function _CRCcheck *****************
  4445 ;; Defined at:
  4446 ;;		line 373 in file "FastTransfer.c"
  4447 ;; Parameters:    Size  Location     Type
  4448 ;;		None
  4449 ;; Auto vars:     Size  Location     Type
  4450 ;;  rt              2    5[BANK0 ] int 
  4451 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  4452 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  4453 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4463 ;;      Params:         0       0       0       0       0       0       0
  4464 ;;      Locals:         0       7       0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0
  4466 ;;      Totals:         0       7       0       0       0       0       0
  4467 ;;Total ram usage:        7 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    5
  4470 ;; This function calls:
  4471 ;;		_CRC8
  4472 ;;		_crcBufS_get
  4473 ;;		_crcBufS_status_put
  4474 ;; This function is called by:
  4475 ;;		_receiveData
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text23
  4480  0009E4                     __ptext23:
  4481                           	opt stack 0
  4482  0009E4                     _CRCcheck:
  4483                           	opt stack 23
  4484  0009E4                     l456:
  4485  0009E4  D7FF               	goto	l456
  4486  0009E6                     l3222:
  4487                           
  4488                           ; BSR set to: 0
  4489  0009E6  0100               	movlb	0	; () banked
  4490  0009E8  BFD6               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4491  0009EA  D008               	goto	l3226
  4492  0009EC  0100               	movlb	0	; () banked
  4493  0009EE  51D6               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4494  0009F0  E143               	bnz	l468
  4495  0009F2  0E05               	movlw	5
  4496  0009F4  0100               	movlb	0	; () banked
  4497  0009F6  5DD5               	subwf	CRCcheck@rt& (0+255),w,b
  4498  0009F8  B0D8               	btfsc	status,0,c
  4499  0009FA  0012               	return	
  4500  0009FC                     l3226:
  4501                           
  4502                           ; BSR set to: 0
  4503                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4504  0009FC  0EBF               	movlw	low _crc_buffer
  4505  0009FE  6E1B               	movwf	crcBufS_get@_this,c
  4506  000A00  0E00               	movlw	high _crc_buffer
  4507  000A02  6E1C               	movwf	crcBufS_get@_this+1,c
  4508  000A04  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4509  000A08  0E00               	movlw	0
  4510  000A0A  6E1E               	movwf	crcBufS_get@space,c
  4511  000A0C  ECF1  F002         	call	_crcBufS_get	;wreg free
  4512  000A10  183D               	xorwf	_returnAddress,w,c
  4513  000A12  A4D8               	btfss	status,2,c
  4514  000A14  D02D               	goto	l3240
  4515                           
  4516                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4517  000A16  0EBF               	movlw	low _crc_buffer
  4518  000A18  6E1B               	movwf	crcBufS_get@_this,c
  4519  000A1A  0E00               	movlw	high _crc_buffer
  4520  000A1C  6E1C               	movwf	crcBufS_get@_this+1,c
  4521  000A1E  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4522  000A22  0E01               	movlw	1
  4523  000A24  6E1E               	movwf	crcBufS_get@space,c
  4524  000A26  ECF1  F002         	call	_crcBufS_get	;wreg free
  4525  000A2A  0100               	movlb	0	; () banked
  4526  000A2C  19D4               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4527  000A2E  A4D8               	btfss	status,2,c
  4528  000A30  D01F               	goto	l3240
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  4532  000A32  0100               	movlb	0	; () banked
  4533  000A34  05D3               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4534  000A36  A4D8               	btfss	status,2,c
  4535  000A38  D00B               	goto	l3236
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  4539  000A3A  0EBF               	movlw	low _crc_buffer
  4540  000A3C  6E1B               	movwf	crcBufS_status_put@_this,c
  4541  000A3E  0E00               	movlw	high _crc_buffer
  4542  000A40  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4543  000A42  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4544  000A46  0E01               	movlw	1
  4545  000A48  6E1E               	movwf	crcBufS_status_put@status,c
  4546  000A4A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  4547                           
  4548                           ;FastTransfer.c: 393: break;
  4549  000A4E  0012               	return	
  4550  000A50                     l3236:
  4551  000A50  0E02               	movlw	2
  4552  000A52  0100               	movlb	0	; () banked
  4553  000A54  19D3               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4554  000A56  A4D8               	btfss	status,2,c
  4555  000A58  D00B               	goto	l3240
  4556                           
  4557                           ; BSR set to: 0
  4558                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  4559  000A5A  0EBF               	movlw	low _crc_buffer
  4560  000A5C  6E1B               	movwf	crcBufS_status_put@_this,c
  4561  000A5E  0E00               	movlw	high _crc_buffer
  4562  000A60  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4563  000A62  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4564  000A66  0E02               	movlw	2
  4565  000A68  6E1E               	movwf	crcBufS_status_put@status,c
  4566  000A6A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  4567                           
  4568                           ;FastTransfer.c: 396: break;
  4569  000A6E  0012               	return	
  4570  000A70                     l3240:
  4571  000A70  0100               	movlb	0	; () banked
  4572  000A72  4BD5               	infsnz	CRCcheck@rt& (0+255),f,b
  4573  000A74  2BD6               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4574  000A76  D7B7               	goto	l3222
  4575  000A78                     l468:
  4576  000A78  0012               	return		;funcret
  4577  000A7A                     __end_of_CRCcheck:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           prodh	equ	0xFF4
  4584                           prodl	equ	0xFF3
  4585                           intcon	equ	0xFF2
  4586                           indf0	equ	0xFEF
  4587                           postinc0	equ	0xFEE
  4588                           fsr0h	equ	0xFEA
  4589                           fsr0l	equ	0xFE9
  4590                           wreg	equ	0xFE8
  4591                           postdec1	equ	0xFE5
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           plusw2	equ	0xFDB
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8
  4600                           
  4601 ;; *************** function _crcBufS_status_put *****************
  4602 ;; Defined at:
  4603 ;;		line 336 in file "FastTransfer.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4606 ;;		 -> crc_buffer(17), 
  4607 ;;  time            1   28[COMRAM] unsigned char 
  4608 ;;  status          1   29[COMRAM] unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  wantedTime      2   34[COMRAM] int 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;		None               void
  4613 ;; Registers used:
  4614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4620 ;;      Params:         4       0       0       0       0       0       0
  4621 ;;      Locals:         2       0       0       0       0       0       0
  4622 ;;      Temps:          4       0       0       0       0       0       0
  4623 ;;      Totals:        10       0       0       0       0       0       0
  4624 ;;Total ram usage:       10 bytes
  4625 ;; Hardware stack levels used:    1
  4626 ;; Hardware stack levels required when called:    4
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_CRCcheck
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634                           	psect	text24
  4635  00079C                     __ptext24:
  4636                           	opt stack 0
  4637  00079C                     _crcBufS_status_put:
  4638                           	opt stack 23
  4639                           
  4640                           ;FastTransfer.c: 337: if (time >= 5) {
  4641                           
  4642                           ;incstack = 0
  4643  00079C  0E04               	movlw	4
  4644  00079E  641D               	cpfsgt	crcBufS_status_put@time,c
  4645  0007A0  D002               	goto	l3170
  4646                           
  4647                           ;FastTransfer.c: 338: time = 5 - 1;
  4648  0007A2  0E04               	movlw	4
  4649  0007A4  6E1D               	movwf	crcBufS_status_put@time,c
  4650  0007A6                     l3170:
  4651                           
  4652                           ;FastTransfer.c: 339: }
  4653                           ;FastTransfer.c: 340: time = time + 1;
  4654  0007A6  281D               	incf	crcBufS_status_put@time,w,c
  4655  0007A8  6E1D               	movwf	crcBufS_status_put@time,c
  4656                           
  4657                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  4658  0007AA  501D               	movf	crcBufS_status_put@time,w,c
  4659  0007AC  0D03               	mullw	3
  4660  0007AE  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4661  0007B2  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4662                           
  4663                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  4664  0007B6  EE20 F00F          	lfsr	2,15
  4665  0007BA  501B               	movf	crcBufS_status_put@_this,w,c
  4666  0007BC  26D9               	addwf	fsr2l,f,c
  4667  0007BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  4668  0007C0  22DA               	addwfc	fsr2h,f,c
  4669  0007C2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4670  0007C4  5CDE               	subwf	postinc2,w,c
  4671  0007C6  50DE               	movf	postinc2,w,c
  4672  0007C8  0A80               	xorlw	128
  4673  0007CA  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4674  0007CC  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4675  0007CE  0A80               	xorlw	128
  4676  0007D0  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4677  0007D2  B0D8               	btfsc	status,0,c
  4678  0007D4  D02B               	goto	l3178
  4679                           
  4680                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4681  0007D6  EE20 F00F          	lfsr	2,15
  4682  0007DA  501B               	movf	crcBufS_status_put@_this,w,c
  4683  0007DC  26D9               	addwf	fsr2l,f,c
  4684  0007DE  501C               	movf	crcBufS_status_put@_this+1,w,c
  4685  0007E0  22DA               	addwfc	fsr2h,f,c
  4686  0007E2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4687  0007E6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4688  0007EA  1E1F               	comf	??_crcBufS_status_put,f,c
  4689  0007EC  1E20               	comf	??_crcBufS_status_put+1,f,c
  4690  0007EE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4691  0007F0  2A20               	incf	??_crcBufS_status_put+1,f,c
  4692  0007F2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4693  0007F4  261F               	addwf	??_crcBufS_status_put,f,c
  4694  0007F6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4695  0007F8  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4696  0007FA  1E1F               	comf	??_crcBufS_status_put,f,c
  4697  0007FC  1E20               	comf	??_crcBufS_status_put+1,f,c
  4698  0007FE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4699  000800  2A20               	incf	??_crcBufS_status_put+1,f,c
  4700  000802  0E0F               	movlw	15
  4701  000804  241F               	addwf	??_crcBufS_status_put,w,c
  4702  000806  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4703  000808  0E00               	movlw	0
  4704  00080A  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4705  00080C  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4706                           
  4707                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4708  00080E  0E02               	movlw	2
  4709  000810  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4710  000812  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4711  000814  0E00               	movlw	0
  4712  000816  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4713  000818  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4714  00081A  501F               	movf	??_crcBufS_status_put,w,c
  4715  00081C  241B               	addwf	crcBufS_status_put@_this,w,c
  4716  00081E  6ED9               	movwf	fsr2l,c
  4717  000820  5020               	movf	??_crcBufS_status_put+1,w,c
  4718  000822  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4719  000824  6EDA               	movwf	fsr2h,c
  4720  000826  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4721                           
  4722                           ;FastTransfer.c: 345: } else {
  4723  00082A  0012               	return	
  4724  00082C                     l3178:
  4725                           
  4726                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4727  00082C  EE20 F00F          	lfsr	2,15
  4728  000830  501B               	movf	crcBufS_status_put@_this,w,c
  4729  000832  26D9               	addwf	fsr2l,f,c
  4730  000834  501C               	movf	crcBufS_status_put@_this+1,w,c
  4731  000836  22DA               	addwfc	fsr2h,f,c
  4732  000838  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4733  00083C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4734  000840  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4735  000844  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4736  000848  1E21               	comf	??_crcBufS_status_put+2,f,c
  4737  00084A  1E22               	comf	??_crcBufS_status_put+3,f,c
  4738  00084C  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4739  00084E  2A22               	incf	??_crcBufS_status_put+3,f,c
  4740  000850  501F               	movf	??_crcBufS_status_put,w,c
  4741  000852  2621               	addwf	??_crcBufS_status_put+2,f,c
  4742  000854  5020               	movf	??_crcBufS_status_put+1,w,c
  4743  000856  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4744  000858  0E02               	movlw	2
  4745  00085A  2621               	addwf	??_crcBufS_status_put+2,f,c
  4746  00085C  0E00               	movlw	0
  4747  00085E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4748  000860  5021               	movf	??_crcBufS_status_put+2,w,c
  4749  000862  241B               	addwf	crcBufS_status_put@_this,w,c
  4750  000864  6ED9               	movwf	fsr2l,c
  4751  000866  5022               	movf	??_crcBufS_status_put+3,w,c
  4752  000868  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4753  00086A  6EDA               	movwf	fsr2h,c
  4754  00086C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4755  000870  0012               	return	
  4756  000872                     __end_of_crcBufS_status_put:
  4757                           	opt stack 0
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           intcon	equ	0xFF2
  4765                           indf0	equ	0xFEF
  4766                           postinc0	equ	0xFEE
  4767                           fsr0h	equ	0xFEA
  4768                           fsr0l	equ	0xFE9
  4769                           wreg	equ	0xFE8
  4770                           postdec1	equ	0xFE5
  4771                           fsr1l	equ	0xFE1
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           plusw2	equ	0xFDB
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _crcBufS_get *****************
  4781 ;; Defined at:
  4782 ;;		line 353 in file "FastTransfer.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4785 ;;		 -> crc_buffer(17), 
  4786 ;;  time            1   28[COMRAM] unsigned char 
  4787 ;;  space           1   29[COMRAM] unsigned char 
  4788 ;; Auto vars:     Size  Location     Type
  4789 ;;  wantedTime      2   36[COMRAM] int 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  1    wreg      unsigned char 
  4792 ;; Registers used:
  4793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4799 ;;      Params:         4       0       0       0       0       0       0
  4800 ;;      Locals:         2       0       0       0       0       0       0
  4801 ;;      Temps:          6       0       0       0       0       0       0
  4802 ;;      Totals:        12       0       0       0       0       0       0
  4803 ;;Total ram usage:       12 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    4
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_CRCcheck
  4810 ;;		_AKNAK
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text25
  4815  0005E2                     __ptext25:
  4816                           	opt stack 0
  4817  0005E2                     _crcBufS_get:
  4818                           	opt stack 23
  4819                           
  4820                           ;FastTransfer.c: 354: if (time >= 5) {
  4821                           
  4822                           ;incstack = 0
  4823  0005E2  0E04               	movlw	4
  4824  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  4825  0005E6  D002               	goto	l3146
  4826                           
  4827                           ;FastTransfer.c: 355: time = 5 - 1;
  4828  0005E8  0E04               	movlw	4
  4829  0005EA  6E1D               	movwf	crcBufS_get@time,c
  4830  0005EC                     l3146:
  4831                           
  4832                           ;FastTransfer.c: 356: }
  4833                           ;FastTransfer.c: 357: if (space >= 3) {
  4834  0005EC  0E02               	movlw	2
  4835  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  4836  0005F0  D002               	goto	l3150
  4837                           
  4838                           ;FastTransfer.c: 358: space = 3 - 1;
  4839  0005F2  0E02               	movlw	2
  4840  0005F4  6E1E               	movwf	crcBufS_get@space,c
  4841  0005F6                     l3150:
  4842                           
  4843                           ;FastTransfer.c: 359: }
  4844                           ;FastTransfer.c: 360: time = time + 1;
  4845  0005F6  281D               	incf	crcBufS_get@time,w,c
  4846  0005F8  6E1D               	movwf	crcBufS_get@time,c
  4847                           
  4848                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4849  0005FA  501D               	movf	crcBufS_get@time,w,c
  4850  0005FC  0D03               	mullw	3
  4851  0005FE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4852  000602  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4853                           
  4854                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4855  000606  EE20 F00F          	lfsr	2,15
  4856  00060A  501B               	movf	crcBufS_get@_this,w,c
  4857  00060C  26D9               	addwf	fsr2l,f,c
  4858  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  4859  000610  22DA               	addwfc	fsr2h,f,c
  4860  000612  5025               	movf	crcBufS_get@wantedTime,w,c
  4861  000614  5CDE               	subwf	postinc2,w,c
  4862  000616  50DE               	movf	postinc2,w,c
  4863  000618  0A80               	xorlw	128
  4864  00061A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4865  00061C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4866  00061E  0A80               	xorlw	128
  4867  000620  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4868  000622  B0D8               	btfsc	status,0,c
  4869  000624  D02A               	goto	l3162
  4870                           
  4871                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4872  000626  EE20 F00F          	lfsr	2,15
  4873  00062A  501B               	movf	crcBufS_get@_this,w,c
  4874  00062C  26D9               	addwf	fsr2l,f,c
  4875  00062E  501C               	movf	crcBufS_get@_this+1,w,c
  4876  000630  22DA               	addwfc	fsr2h,f,c
  4877  000632  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4878  000636  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4879  00063A  1E1F               	comf	??_crcBufS_get,f,c
  4880  00063C  1E20               	comf	??_crcBufS_get+1,f,c
  4881  00063E  4A1F               	infsnz	??_crcBufS_get,f,c
  4882  000640  2A20               	incf	??_crcBufS_get+1,f,c
  4883  000642  5025               	movf	crcBufS_get@wantedTime,w,c
  4884  000644  261F               	addwf	??_crcBufS_get,f,c
  4885  000646  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4886  000648  2220               	addwfc	??_crcBufS_get+1,f,c
  4887  00064A  1E1F               	comf	??_crcBufS_get,f,c
  4888  00064C  1E20               	comf	??_crcBufS_get+1,f,c
  4889  00064E  4A1F               	infsnz	??_crcBufS_get,f,c
  4890  000650  2A20               	incf	??_crcBufS_get+1,f,c
  4891  000652  0E0F               	movlw	15
  4892  000654  241F               	addwf	??_crcBufS_get,w,c
  4893  000656  6E25               	movwf	crcBufS_get@wantedTime,c
  4894  000658  0E00               	movlw	0
  4895  00065A  2020               	addwfc	??_crcBufS_get+1,w,c
  4896  00065C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4897                           
  4898                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4899  00065E  501E               	movf	crcBufS_get@space,w,c
  4900  000660  2425               	addwf	crcBufS_get@wantedTime,w,c
  4901  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4902  000664  0E00               	movlw	0
  4903  000666  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4904  000668  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4905  00066A  501F               	movf	??_crcBufS_get,w,c
  4906  00066C  241B               	addwf	crcBufS_get@_this,w,c
  4907  00066E  6ED9               	movwf	fsr2l,c
  4908  000670  5020               	movf	??_crcBufS_get+1,w,c
  4909  000672  201C               	addwfc	crcBufS_get@_this+1,w,c
  4910  000674  6EDA               	movwf	fsr2h,c
  4911  000676  50DF               	movf	indf2,w,c
  4912                           
  4913                           ;FastTransfer.c: 365: } else {
  4914  000678  0012               	return	
  4915  00067A                     l3162:
  4916                           
  4917                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4918  00067A  EE20 F00F          	lfsr	2,15
  4919  00067E  501B               	movf	crcBufS_get@_this,w,c
  4920  000680  26D9               	addwf	fsr2l,f,c
  4921  000682  501C               	movf	crcBufS_get@_this+1,w,c
  4922  000684  22DA               	addwfc	fsr2h,f,c
  4923  000686  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4924  00068A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4925  00068E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4926  000692  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4927  000696  1E21               	comf	??_crcBufS_get+2,f,c
  4928  000698  1E22               	comf	??_crcBufS_get+3,f,c
  4929  00069A  4A21               	infsnz	??_crcBufS_get+2,f,c
  4930  00069C  2A22               	incf	??_crcBufS_get+3,f,c
  4931  00069E  501E               	movf	crcBufS_get@space,w,c
  4932  0006A0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4933  0006A2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4934  0006A4  5021               	movf	??_crcBufS_get+2,w,c
  4935  0006A6  2623               	addwf	??_crcBufS_get+4,f,c
  4936  0006A8  5022               	movf	??_crcBufS_get+3,w,c
  4937  0006AA  2224               	addwfc	??_crcBufS_get+5,f,c
  4938  0006AC  501F               	movf	??_crcBufS_get,w,c
  4939  0006AE  2623               	addwf	??_crcBufS_get+4,f,c
  4940  0006B0  5020               	movf	??_crcBufS_get+1,w,c
  4941  0006B2  2224               	addwfc	??_crcBufS_get+5,f,c
  4942  0006B4  5023               	movf	??_crcBufS_get+4,w,c
  4943  0006B6  241B               	addwf	crcBufS_get@_this,w,c
  4944  0006B8  6ED9               	movwf	fsr2l,c
  4945  0006BA  5024               	movf	??_crcBufS_get+5,w,c
  4946  0006BC  201C               	addwfc	crcBufS_get@_this+1,w,c
  4947  0006BE  6EDA               	movwf	fsr2h,c
  4948  0006C0  50DF               	movf	indf2,w,c
  4949  0006C2  0012               	return	
  4950  0006C4                     __end_of_crcBufS_get:
  4951                           	opt stack 0
  4952                           tblptru	equ	0xFF8
  4953                           tblptrh	equ	0xFF7
  4954                           tblptrl	equ	0xFF6
  4955                           tablat	equ	0xFF5
  4956                           prodh	equ	0xFF4
  4957                           prodl	equ	0xFF3
  4958                           intcon	equ	0xFF2
  4959                           indf0	equ	0xFEF
  4960                           postinc0	equ	0xFEE
  4961                           fsr0h	equ	0xFEA
  4962                           fsr0l	equ	0xFE9
  4963                           wreg	equ	0xFE8
  4964                           postdec1	equ	0xFE5
  4965                           fsr1l	equ	0xFE1
  4966                           indf2	equ	0xFDF
  4967                           postinc2	equ	0xFDE
  4968                           postdec2	equ	0xFDD
  4969                           plusw2	equ	0xFDB
  4970                           fsr2h	equ	0xFDA
  4971                           fsr2l	equ	0xFD9
  4972                           status	equ	0xFD8
  4973                           
  4974 ;; *************** function _CRC8 *****************
  4975 ;; Defined at:
  4976 ;;		line 34 in file "FastTransfer.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4979 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1388(3), receiveData@holder(3), rx_buffer(200), 
  4980 ;;		 -> ring_buffer(206), NULL(0), 
  4981 ;;  len             1   28[COMRAM] unsigned char 
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;  sum             1   29[COMRAM] unsigned char 
  4984 ;;  tempI           1   31[COMRAM] unsigned char 
  4985 ;;  extract         1   30[COMRAM] unsigned char 
  4986 ;;  crc             1   32[COMRAM] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      unsigned char 
  4989 ;; Registers used:
  4990 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4996 ;;      Params:         3       0       0       0       0       0       0
  4997 ;;      Locals:         4       0       0       0       0       0       0
  4998 ;;      Temps:          0       0       0       0       0       0       0
  4999 ;;      Totals:         7       0       0       0       0       0       0
  5000 ;;Total ram usage:        7 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    4
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_sendData
  5007 ;;		_receiveData
  5008 ;;		_CRCcheck
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           	psect	text26
  5013  000F60                     __ptext26:
  5014                           	opt stack 0
  5015  000F60                     _CRC8:
  5016                           	opt stack 23
  5017                           
  5018                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  5019                           
  5020                           ;incstack = 0
  5021  000F60  0E00               	movlw	0
  5022  000F62  6E21               	movwf	CRC8@crc,c
  5023                           
  5024                           ;FastTransfer.c: 36: while (len--) {
  5025  000F64  D01C               	goto	l3108
  5026  000F66                     l3092:
  5027                           
  5028                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  5029  000F66  C01B  FFD9         	movff	CRC8@data,fsr2l
  5030  000F6A  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5031  000F6E  50DF               	movf	indf2,w,c
  5032  000F70  6E1F               	movwf	CRC8@extract,c
  5033  000F72  4A1B               	infsnz	CRC8@data,f,c
  5034  000F74  2A1C               	incf	CRC8@data+1,f,c
  5035                           
  5036                           ;FastTransfer.c: 38: unsigned char tempI;
  5037                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  5038  000F76  0E08               	movlw	8
  5039  000F78  6E20               	movwf	CRC8@tempI,c
  5040  000F7A  D00E               	goto	l3106
  5041  000F7C                     l3098:
  5042                           
  5043                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  5044  000F7C  5021               	movf	CRC8@crc,w,c
  5045  000F7E  181F               	xorwf	CRC8@extract,w,c
  5046  000F80  0B01               	andlw	1
  5047  000F82  6E1E               	movwf	CRC8@sum,c
  5048                           
  5049                           ;FastTransfer.c: 41: crc >>= 1;
  5050  000F84  90D8               	bcf	status,0,c
  5051  000F86  3221               	rrcf	CRC8@crc,f,c
  5052                           
  5053                           ;FastTransfer.c: 42: if (sum) {
  5054  000F88  501E               	movf	CRC8@sum,w,c
  5055  000F8A  B4D8               	btfsc	status,2,c
  5056  000F8C  D002               	goto	l354
  5057                           
  5058                           ;FastTransfer.c: 43: crc ^= 0x8C;
  5059  000F8E  0E8C               	movlw	140
  5060  000F90  1A21               	xorwf	CRC8@crc,f,c
  5061  000F92                     l354:
  5062                           
  5063                           ;FastTransfer.c: 44: }
  5064                           ;FastTransfer.c: 45: extract >>= 1;
  5065  000F92  90D8               	bcf	status,0,c
  5066  000F94  321F               	rrcf	CRC8@extract,f,c
  5067  000F96  0620               	decf	CRC8@tempI,f,c
  5068  000F98                     l3106:
  5069  000F98  5020               	movf	CRC8@tempI,w,c
  5070  000F9A  A4D8               	btfss	status,2,c
  5071  000F9C  D7EF               	goto	l3098
  5072  000F9E                     l3108:
  5073  000F9E  061D               	decf	CRC8@len,f,c
  5074  000FA0  281D               	incf	CRC8@len,w,c
  5075  000FA2  A4D8               	btfss	status,2,c
  5076  000FA4  D7E0               	goto	l3092
  5077                           
  5078                           ;FastTransfer.c: 46: }
  5079                           ;FastTransfer.c: 47: }
  5080                           ;FastTransfer.c: 48: return crc;
  5081  000FA6  5021               	movf	CRC8@crc,w,c
  5082  000FA8  0012               	return	
  5083  000FAA                     __end_of_CRC8:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           intcon	equ	0xFF2
  5092                           indf0	equ	0xFEF
  5093                           postinc0	equ	0xFEE
  5094                           fsr0h	equ	0xFEA
  5095                           fsr0l	equ	0xFE9
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1l	equ	0xFE1
  5099                           indf2	equ	0xFDF
  5100                           postinc2	equ	0xFDE
  5101                           postdec2	equ	0xFDD
  5102                           plusw2	equ	0xFDB
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function _ToSend *****************
  5108 ;; Defined at:
  5109 ;;		line 216 in file "FastTransfer.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  where           1    wreg     unsigned char 
  5112 ;;  what            2    2[BANK0 ] unsigned int 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;  where           1   37[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;		None               void
  5117 ;; Registers used:
  5118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5124 ;;      Params:         0       2       0       0       0       0       0
  5125 ;;      Locals:         1       0       0       0       0       0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0
  5127 ;;      Totals:         1       2       0       0       0       0       0
  5128 ;;Total ram usage:        3 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    6
  5131 ;; This function calls:
  5132 ;;		_FastTransfer_buffer_put
  5133 ;; This function is called by:
  5134 ;;		_respondChargerAsECU
  5135 ;;		_SetBMM
  5136 ;; This function uses a non-reentrant model
  5137 ;;
  5138                           
  5139                           	psect	text27
  5140  001326                     __ptext27:
  5141                           	opt stack 0
  5142  001326                     _ToSend:
  5143                           	opt stack 22
  5144                           
  5145                           ;incstack = 0
  5146                           ;ToSend@where stored from wreg
  5147  001326  6E26               	movwf	ToSend@where,c
  5148                           
  5149                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  5150  001328  0E00               	movlw	low _ring_buffer
  5151  00132A  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5152  00132C  0E01               	movlw	high _ring_buffer
  5153  00132E  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5154  001330  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5155  001334  C0D2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5156  001338  C0D3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5157  00133C  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  5158  001340  0012               	return		;funcret
  5159  001342                     __end_of_ToSend:
  5160                           	opt stack 0
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           indf0	equ	0xFEF
  5169                           postinc0	equ	0xFEE
  5170                           fsr0h	equ	0xFEA
  5171                           fsr0l	equ	0xFE9
  5172                           wreg	equ	0xFE8
  5173                           postdec1	equ	0xFE5
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           postinc2	equ	0xFDE
  5177                           postdec2	equ	0xFDD
  5178                           plusw2	equ	0xFDB
  5179                           fsr2h	equ	0xFDA
  5180                           fsr2l	equ	0xFD9
  5181                           status	equ	0xFD8
  5182                           
  5183 ;; *************** function _FastTransfer_buffer_put *****************
  5184 ;; Defined at:
  5185 ;;		line 223 in file "FastTransfer.c"
  5186 ;; Parameters:    Size  Location     Type
  5187 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5188 ;;		 -> ring_buffer(206), 
  5189 ;;  towhere         1   34[COMRAM] unsigned char 
  5190 ;;  towhat          2   35[COMRAM] unsigned int 
  5191 ;; Auto vars:     Size  Location     Type
  5192 ;;		None
  5193 ;; Return value:  Size  Location     Type
  5194 ;;		None               void
  5195 ;; Registers used:
  5196 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5197 ;; Tracked objects:
  5198 ;;		On entry : 0/0
  5199 ;;		On exit  : 0/0
  5200 ;;		Unchanged: 0/0
  5201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5202 ;;      Params:         5       0       0       0       0       0       0
  5203 ;;      Locals:         0       0       0       0       0       0       0
  5204 ;;      Temps:          0       2       0       0       0       0       0
  5205 ;;      Totals:         5       2       0       0       0       0       0
  5206 ;;Total ram usage:        7 bytes
  5207 ;; Hardware stack levels used:    1
  5208 ;; Hardware stack levels required when called:    5
  5209 ;; This function calls:
  5210 ;;		_FastTransfer_buffer_modulo_inc
  5211 ;; This function is called by:
  5212 ;;		_ToSend
  5213 ;; This function uses a non-reentrant model
  5214 ;;
  5215                           
  5216                           	psect	text28
  5217  000354                     __ptext28:
  5218                           	opt stack 0
  5219  000354                     _FastTransfer_buffer_put:
  5220                           	opt stack 22
  5221                           
  5222                           ;FastTransfer.c: 225: group.integer = towhat;
  5223                           
  5224                           ;incstack = 0
  5225  000354  C024  F02D         	movff	FastTransfer_buffer_put@towhat,_group
  5226  000358  C025  F02E         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5227                           
  5228                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  5229  00035C  EE20 F0CC          	lfsr	2,204
  5230  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5231  000362  26D9               	addwf	fsr2l,f,c
  5232  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5233  000366  22DA               	addwfc	fsr2h,f,c
  5234  000368  0E01               	movlw	1
  5235  00036A  BEDB               	btfsc	plusw2,7,c
  5236  00036C  D007               	goto	l3128
  5237  00036E  0E01               	movlw	1
  5238  000370  50DB               	movf	plusw2,w,c
  5239  000372  E103               	bnz	u2041
  5240  000374  0EC5               	movlw	197
  5241  000376  5CDE               	subwf	postinc2,w,c
  5242  000378  B0D8               	btfsc	status,0,c
  5243  00037A                     u2041:
  5244  00037A  0012               	return	
  5245  00037C                     l3128:
  5246                           
  5247                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  5248  00037C  EE20 F0C8          	lfsr	2,200
  5249  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5250  000382  26D9               	addwf	fsr2l,f,c
  5251  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5252  000386  22DA               	addwfc	fsr2h,f,c
  5253  000388  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  5254  00038C  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  5255  000390  0100               	movlb	0	; () banked
  5256  000392  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5257  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5258  000396  6ED9               	movwf	fsr2l,c
  5259  000398  0100               	movlb	0	; () banked
  5260  00039A  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5261  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5262  00039E  6EDA               	movwf	fsr2h,c
  5263  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5267  0003A4  EE20 F0C8          	lfsr	2,200
  5268  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5269  0003AA  26D9               	addwf	fsr2l,f,c
  5270  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5271  0003AE  22DA               	addwfc	fsr2h,f,c
  5272  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5273  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5274  0003B8  0E00               	movlw	0
  5275  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5276  0003BC  0EC8               	movlw	200
  5277  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5278  0003C0  ECFD  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5279  0003C4  EE20 F0C8          	lfsr	2,200
  5280  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5281  0003CA  26D9               	addwf	fsr2l,f,c
  5282  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5283  0003CE  22DA               	addwfc	fsr2h,f,c
  5284  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5285  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5286                           
  5287                           ;FastTransfer.c: 230: ++_this->count;
  5288  0003D8  EE20 F0CC          	lfsr	2,204
  5289  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5290  0003DE  26D9               	addwf	fsr2l,f,c
  5291  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5292  0003E2  22DA               	addwfc	fsr2h,f,c
  5293  0003E4  2ADE               	incf	postinc2,f,c
  5294  0003E6  0E00               	movlw	0
  5295  0003E8  22DD               	addwfc	postdec2,f,c
  5296                           
  5297                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  5298  0003EA  EE20 F0C8          	lfsr	2,200
  5299  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5300  0003F0  26D9               	addwf	fsr2l,f,c
  5301  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5302  0003F4  22DA               	addwfc	fsr2h,f,c
  5303  0003F6  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  5304  0003FA  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  5305  0003FE  0100               	movlb	0	; () banked
  5306  000400  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5307  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5308  000404  6ED9               	movwf	fsr2l,c
  5309  000406  0100               	movlb	0	; () banked
  5310  000408  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5311  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5312  00040C  6EDA               	movwf	fsr2h,c
  5313  00040E  C02D  FFDF         	movff	_group,indf2
  5314                           
  5315                           ; BSR set to: 0
  5316                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5317  000412  EE20 F0C8          	lfsr	2,200
  5318  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5319  000418  26D9               	addwf	fsr2l,f,c
  5320  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5321  00041C  22DA               	addwfc	fsr2h,f,c
  5322  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5323  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5324  000426  0E00               	movlw	0
  5325  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5326  00042A  0EC8               	movlw	200
  5327  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5328  00042E  ECFD  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5329  000432  EE20 F0C8          	lfsr	2,200
  5330  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5331  000438  26D9               	addwf	fsr2l,f,c
  5332  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5333  00043C  22DA               	addwfc	fsr2h,f,c
  5334  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5335  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5336                           
  5337                           ;FastTransfer.c: 233: ++_this->count;
  5338  000446  EE20 F0CC          	lfsr	2,204
  5339  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5340  00044C  26D9               	addwf	fsr2l,f,c
  5341  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5342  000450  22DA               	addwfc	fsr2h,f,c
  5343  000452  2ADE               	incf	postinc2,f,c
  5344  000454  0E00               	movlw	0
  5345  000456  22DD               	addwfc	postdec2,f,c
  5346                           
  5347                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  5348  000458  EE20 F0C8          	lfsr	2,200
  5349  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5350  00045E  26D9               	addwf	fsr2l,f,c
  5351  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5352  000462  22DA               	addwfc	fsr2h,f,c
  5353  000464  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  5354  000468  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  5355  00046C  0100               	movlb	0	; () banked
  5356  00046E  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5357  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5358  000472  6ED9               	movwf	fsr2l,c
  5359  000474  0100               	movlb	0	; () banked
  5360  000476  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5361  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5362  00047A  6EDA               	movwf	fsr2h,c
  5363  00047C  C02E  FFDF         	movff	_group+1,indf2
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5367  000480  EE20 F0C8          	lfsr	2,200
  5368  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5369  000486  26D9               	addwf	fsr2l,f,c
  5370  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5371  00048A  22DA               	addwfc	fsr2h,f,c
  5372  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5373  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5374  000494  0E00               	movlw	0
  5375  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5376  000498  0EC8               	movlw	200
  5377  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5378  00049C  ECFD  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5379  0004A0  EE20 F0C8          	lfsr	2,200
  5380  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5381  0004A6  26D9               	addwf	fsr2l,f,c
  5382  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5383  0004AA  22DA               	addwfc	fsr2h,f,c
  5384  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5385  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5386                           
  5387                           ;FastTransfer.c: 236: ++_this->count;
  5388  0004B4  EE20 F0CC          	lfsr	2,204
  5389  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5390  0004BA  26D9               	addwf	fsr2l,f,c
  5391  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5392  0004BE  22DA               	addwfc	fsr2h,f,c
  5393  0004C0  2ADE               	incf	postinc2,f,c
  5394  0004C2  0E00               	movlw	0
  5395  0004C4  22DD               	addwfc	postdec2,f,c
  5396  0004C6  0012               	return	
  5397  0004C8                     __end_of_FastTransfer_buffer_put:
  5398                           	opt stack 0
  5399                           tblptru	equ	0xFF8
  5400                           tblptrh	equ	0xFF7
  5401                           tblptrl	equ	0xFF6
  5402                           tablat	equ	0xFF5
  5403                           prodh	equ	0xFF4
  5404                           prodl	equ	0xFF3
  5405                           intcon	equ	0xFF2
  5406                           indf0	equ	0xFEF
  5407                           postinc0	equ	0xFEE
  5408                           fsr0h	equ	0xFEA
  5409                           fsr0l	equ	0xFE9
  5410                           wreg	equ	0xFE8
  5411                           postdec1	equ	0xFE5
  5412                           fsr1l	equ	0xFE1
  5413                           indf2	equ	0xFDF
  5414                           postinc2	equ	0xFDE
  5415                           postdec2	equ	0xFDD
  5416                           plusw2	equ	0xFDB
  5417                           fsr2h	equ	0xFDA
  5418                           fsr2l	equ	0xFD9
  5419                           status	equ	0xFD8
  5420                           
  5421 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5422 ;; Defined at:
  5423 ;;		line 273 in file "FastTransfer.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  value           2   26[COMRAM] const unsigned int 
  5426 ;;  modulus         2   28[COMRAM] const unsigned int 
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;  my_value        2   30[COMRAM] unsigned int 
  5429 ;; Return value:  Size  Location     Type
  5430 ;;                  2   26[COMRAM] unsigned int 
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0
  5433 ;; Tracked objects:
  5434 ;;		On entry : 0/0
  5435 ;;		On exit  : 0/0
  5436 ;;		Unchanged: 0/0
  5437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5438 ;;      Params:         4       0       0       0       0       0       0
  5439 ;;      Locals:         2       0       0       0       0       0       0
  5440 ;;      Temps:          0       0       0       0       0       0       0
  5441 ;;      Totals:         6       0       0       0       0       0       0
  5442 ;;Total ram usage:        6 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    4
  5445 ;; This function calls:
  5446 ;;		Nothing
  5447 ;; This function is called by:
  5448 ;;		_FastTransfer_buffer_put
  5449 ;;		_FastTransfer_buffer_get
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text29
  5454  0011FA                     __ptext29:
  5455                           	opt stack 0
  5456  0011FA                     _FastTransfer_buffer_modulo_inc:
  5457                           	opt stack 22
  5458                           
  5459                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  5460                           
  5461                           ;incstack = 0
  5462  0011FA  0E01               	movlw	1
  5463  0011FC  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5464  0011FE  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5465  001200  0E00               	movlw	0
  5466  001202  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5467  001204  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5468                           
  5469                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  5470  001206  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5471  001208  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5472  00120A  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5473  00120C  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5474  00120E  A0D8               	btfss	status,0,c
  5475  001210  D004               	goto	l2296
  5476                           
  5477                           ;FastTransfer.c: 276: my_value = 0;
  5478  001212  0E00               	movlw	0
  5479  001214  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5480  001216  0E00               	movlw	0
  5481  001218  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5482  00121A                     l2296:
  5483                           
  5484                           ;FastTransfer.c: 277: }
  5485                           ;FastTransfer.c: 278: return (my_value);
  5486  00121A  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5487  00121E  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5488  001222  0012               	return	
  5489  001224                     __end_of_FastTransfer_buffer_modulo_inc:
  5490                           	opt stack 0
  5491                           tblptru	equ	0xFF8
  5492                           tblptrh	equ	0xFF7
  5493                           tblptrl	equ	0xFF6
  5494                           tablat	equ	0xFF5
  5495                           prodh	equ	0xFF4
  5496                           prodl	equ	0xFF3
  5497                           intcon	equ	0xFF2
  5498                           indf0	equ	0xFEF
  5499                           postinc0	equ	0xFEE
  5500                           fsr0h	equ	0xFEA
  5501                           fsr0l	equ	0xFE9
  5502                           wreg	equ	0xFE8
  5503                           postdec1	equ	0xFE5
  5504                           fsr1l	equ	0xFE1
  5505                           indf2	equ	0xFDF
  5506                           postinc2	equ	0xFDE
  5507                           postdec2	equ	0xFDD
  5508                           plusw2	equ	0xFDB
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           
  5513 ;; *************** function _SYSTEM_Initialize *****************
  5514 ;; Defined at:
  5515 ;;		line 112 in file "mcc_generated_files/mcc.c"
  5516 ;; Parameters:    Size  Location     Type
  5517 ;;		None
  5518 ;; Auto vars:     Size  Location     Type
  5519 ;;		None
  5520 ;; Return value:  Size  Location     Type
  5521 ;;		None               void
  5522 ;; Registers used:
  5523 ;;		wreg, status,2, status,0, cstack
  5524 ;; Tracked objects:
  5525 ;;		On entry : 0/0
  5526 ;;		On exit  : 0/0
  5527 ;;		Unchanged: 0/0
  5528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5529 ;;      Params:         0       0       0       0       0       0       0
  5530 ;;      Locals:         0       0       0       0       0       0       0
  5531 ;;      Temps:          0       0       0       0       0       0       0
  5532 ;;      Totals:         0       0       0       0       0       0       0
  5533 ;;Total ram usage:        0 bytes
  5534 ;; Hardware stack levels used:    1
  5535 ;; Hardware stack levels required when called:    6
  5536 ;; This function calls:
  5537 ;;		_EUSART2_Initialize
  5538 ;;		_INTERRUPT_Initialize
  5539 ;;		_OSCILLATOR_Initialize
  5540 ;;		_PIN_MANAGER_Initialize
  5541 ;;		_TMR0_Initialize
  5542 ;; This function is called by:
  5543 ;;		_main
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547                           	psect	text30
  5548  00135C                     __ptext30:
  5549                           	opt stack 0
  5550  00135C                     _SYSTEM_Initialize:
  5551                           	opt stack 24
  5552                           
  5553                           ;mcc.c: 113: OSCILLATOR_Initialize();
  5554                           
  5555                           ;incstack = 0
  5556  00135C  ECD5  F009         	call	_OSCILLATOR_Initialize	;wreg free
  5557                           
  5558                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  5559  001360  EC62  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  5560                           
  5561                           ;mcc.c: 115: INTERRUPT_Initialize();
  5562  001364  ECE3  F009         	call	_INTERRUPT_Initialize	;wreg free
  5563                           
  5564                           ;mcc.c: 117: EUSART2_Initialize();
  5565  001368  EC2D  F008         	call	_EUSART2_Initialize	;wreg free
  5566                           
  5567                           ;mcc.c: 118: TMR0_Initialize();
  5568  00136C  ECBC  F008         	call	_TMR0_Initialize	;wreg free
  5569  001370  0012               	return		;funcret
  5570  001372                     __end_of_SYSTEM_Initialize:
  5571                           	opt stack 0
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           prodh	equ	0xFF4
  5577                           prodl	equ	0xFF3
  5578                           intcon	equ	0xFF2
  5579                           indf0	equ	0xFEF
  5580                           postinc0	equ	0xFEE
  5581                           fsr0h	equ	0xFEA
  5582                           fsr0l	equ	0xFE9
  5583                           wreg	equ	0xFE8
  5584                           postdec1	equ	0xFE5
  5585                           fsr1l	equ	0xFE1
  5586                           indf2	equ	0xFDF
  5587                           postinc2	equ	0xFDE
  5588                           postdec2	equ	0xFDD
  5589                           plusw2	equ	0xFDB
  5590                           fsr2h	equ	0xFDA
  5591                           fsr2l	equ	0xFD9
  5592                           status	equ	0xFD8
  5593                           
  5594 ;; *************** function _TMR0_Initialize *****************
  5595 ;; Defined at:
  5596 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  5597 ;; Parameters:    Size  Location     Type
  5598 ;;		None
  5599 ;; Auto vars:     Size  Location     Type
  5600 ;;		None
  5601 ;; Return value:  Size  Location     Type
  5602 ;;                  2  158[None  ] int 
  5603 ;; Registers used:
  5604 ;;		wreg, status,2, status,0, cstack
  5605 ;; Tracked objects:
  5606 ;;		On entry : 0/0
  5607 ;;		On exit  : 0/0
  5608 ;;		Unchanged: 0/0
  5609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5610 ;;      Params:         0       0       0       0       0       0       0
  5611 ;;      Locals:         0       0       0       0       0       0       0
  5612 ;;      Temps:          2       0       0       0       0       0       0
  5613 ;;      Totals:         2       0       0       0       0       0       0
  5614 ;;Total ram usage:        2 bytes
  5615 ;; Hardware stack levels used:    1
  5616 ;; Hardware stack levels required when called:    5
  5617 ;; This function calls:
  5618 ;;		_TMR0_StartTimer
  5619 ;; This function is called by:
  5620 ;;		_SYSTEM_Initialize
  5621 ;; This function uses a non-reentrant model
  5622 ;;
  5623                           
  5624                           	psect	text31
  5625  001178                     __ptext31:
  5626                           	opt stack 0
  5627  001178                     _TMR0_Initialize:
  5628                           	opt stack 24
  5629                           
  5630                           ;tmr0.c: 74: T0CON = 0x98;
  5631                           
  5632                           ;incstack = 0
  5633  001178  0E98               	movlw	152
  5634  00117A  6ED5               	movwf	4053,c	;volatile
  5635                           
  5636                           ;tmr0.c: 77: TMR0H = 0xF0;
  5637  00117C  0EF0               	movlw	240
  5638  00117E  6ED7               	movwf	4055,c	;volatile
  5639                           
  5640                           ;tmr0.c: 80: TMR0L = 0x5F;
  5641  001180  0E5F               	movlw	95
  5642  001182  6ED6               	movwf	4054,c	;volatile
  5643                           
  5644                           ;tmr0.c: 83: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  5645  001184  50D6               	movf	4054,w,c	;volatile
  5646  001186  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  5647  00118A  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  5648  00118C  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  5649  001190  6A1B               	clrf	??_TMR0_Initialize,c
  5650  001192  101B               	iorwf	??_TMR0_Initialize,w,c
  5651  001194  6E41               	movwf	_timer0ReloadVal16bit,c
  5652  001196  501C               	movf	??_TMR0_Initialize+1,w,c
  5653  001198  6E42               	movwf	_timer0ReloadVal16bit+1,c
  5654                           
  5655                           ;tmr0.c: 86: INTCONbits.TMR0IF = 0;
  5656  00119A  94F2               	bcf	intcon,2,c	;volatile
  5657                           
  5658                           ;tmr0.c: 89: INTCONbits.TMR0IE = 1;
  5659  00119C  8AF2               	bsf	intcon,5,c	;volatile
  5660                           
  5661                           ;tmr0.c: 92: TMR0_StartTimer();
  5662  00119E  ECF3  F009         	call	_TMR0_StartTimer	;wreg free
  5663  0011A2  0012               	return		;funcret
  5664  0011A4                     __end_of_TMR0_Initialize:
  5665                           	opt stack 0
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           indf0	equ	0xFEF
  5674                           postinc0	equ	0xFEE
  5675                           fsr0h	equ	0xFEA
  5676                           fsr0l	equ	0xFE9
  5677                           wreg	equ	0xFE8
  5678                           postdec1	equ	0xFE5
  5679                           fsr1l	equ	0xFE1
  5680                           indf2	equ	0xFDF
  5681                           postinc2	equ	0xFDE
  5682                           postdec2	equ	0xFDD
  5683                           plusw2	equ	0xFDB
  5684                           fsr2h	equ	0xFDA
  5685                           fsr2l	equ	0xFD9
  5686                           status	equ	0xFD8
  5687                           
  5688 ;; *************** function _TMR0_StartTimer *****************
  5689 ;; Defined at:
  5690 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  5691 ;; Parameters:    Size  Location     Type
  5692 ;;		None
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;		None               void
  5697 ;; Registers used:
  5698 ;;		None
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5704 ;;      Params:         0       0       0       0       0       0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0
  5707 ;;      Totals:         0       0       0       0       0       0       0
  5708 ;;Total ram usage:        0 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    4
  5711 ;; This function calls:
  5712 ;;		Nothing
  5713 ;; This function is called by:
  5714 ;;		_TMR0_Initialize
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           	psect	text32
  5719  0013E6                     __ptext32:
  5720                           	opt stack 0
  5721  0013E6                     _TMR0_StartTimer:
  5722                           	opt stack 24
  5723                           
  5724                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
  5725                           
  5726                           ;incstack = 0
  5727  0013E6  8ED5               	bsf	4053,7,c	;volatile
  5728  0013E8  0012               	return		;funcret
  5729  0013EA                     __end_of_TMR0_StartTimer:
  5730                           	opt stack 0
  5731                           tblptru	equ	0xFF8
  5732                           tblptrh	equ	0xFF7
  5733                           tblptrl	equ	0xFF6
  5734                           tablat	equ	0xFF5
  5735                           prodh	equ	0xFF4
  5736                           prodl	equ	0xFF3
  5737                           intcon	equ	0xFF2
  5738                           indf0	equ	0xFEF
  5739                           postinc0	equ	0xFEE
  5740                           fsr0h	equ	0xFEA
  5741                           fsr0l	equ	0xFE9
  5742                           wreg	equ	0xFE8
  5743                           postdec1	equ	0xFE5
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           plusw2	equ	0xFDB
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function _PIN_MANAGER_Initialize *****************
  5754 ;; Defined at:
  5755 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;		None               void
  5762 ;; Registers used:
  5763 ;;		wreg, status,2
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5769 ;;      Params:         0       0       0       0       0       0       0
  5770 ;;      Locals:         0       0       0       0       0       0       0
  5771 ;;      Temps:          0       0       0       0       0       0       0
  5772 ;;      Totals:         0       0       0       0       0       0       0
  5773 ;;Total ram usage:        0 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    4
  5776 ;; This function calls:
  5777 ;;		Nothing
  5778 ;; This function is called by:
  5779 ;;		_SYSTEM_Initialize
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text33
  5784  000EC4                     __ptext33:
  5785                           	opt stack 0
  5786  000EC4                     _PIN_MANAGER_Initialize:
  5787                           	opt stack 25
  5788                           
  5789                           ;pin_manager.c: 51: LATB = 0x0;
  5790                           
  5791                           ;incstack = 0
  5792  000EC4  0E00               	movlw	0
  5793  000EC6  6E8A               	movwf	3978,c	;volatile
  5794                           
  5795                           ;pin_manager.c: 52: LATA = 0x0;
  5796  000EC8  0E00               	movlw	0
  5797  000ECA  6E89               	movwf	3977,c	;volatile
  5798                           
  5799                           ;pin_manager.c: 53: ANSELE = 0x7;
  5800  000ECC  0E07               	movlw	7
  5801  000ECE  010F               	movlb	15	; () banked
  5802  000ED0  6F3C               	movwf	60,b	;volatile
  5803                           
  5804                           ;pin_manager.c: 54: LATE = 0x0;
  5805  000ED2  0E00               	movlw	0
  5806  000ED4  6E8D               	movwf	3981,c	;volatile
  5807                           
  5808                           ;pin_manager.c: 55: LATD = 0x0;
  5809  000ED6  0E00               	movlw	0
  5810  000ED8  6E8C               	movwf	3980,c	;volatile
  5811                           
  5812                           ;pin_manager.c: 56: LATC = 0x0;
  5813  000EDA  0E00               	movlw	0
  5814  000EDC  6E8B               	movwf	3979,c	;volatile
  5815                           
  5816                           ;pin_manager.c: 57: ANSELA = 0x2F;
  5817  000EDE  0E2F               	movlw	47
  5818  000EE0  010F               	movlb	15	; () banked
  5819  000EE2  6F38               	movwf	56,b	;volatile
  5820                           
  5821                           ;pin_manager.c: 58: ANSELB = 0x3F;
  5822  000EE4  0E3F               	movlw	63
  5823  000EE6  010F               	movlb	15	; () banked
  5824  000EE8  6F39               	movwf	57,b	;volatile
  5825                           
  5826                           ;pin_manager.c: 59: ANSELC = 0xEC;
  5827  000EEA  0EEC               	movlw	236
  5828  000EEC  010F               	movlb	15	; () banked
  5829  000EEE  6F3A               	movwf	58,b	;volatile
  5830                           
  5831                           ;pin_manager.c: 60: ANSELD = 0x3F;
  5832  000EF0  0E3F               	movlw	63
  5833  000EF2  010F               	movlb	15	; () banked
  5834  000EF4  6F3B               	movwf	59,b	;volatile
  5835                           
  5836                           ;pin_manager.c: 61: WPUB = 0xFC;
  5837  000EF6  0EFC               	movlw	252
  5838  000EF8  6E61               	movwf	3937,c	;volatile
  5839                           
  5840                           ;pin_manager.c: 62: TRISD = 0xF2;
  5841  000EFA  0EF2               	movlw	242
  5842  000EFC  6E95               	movwf	3989,c	;volatile
  5843                           
  5844                           ;pin_manager.c: 63: TRISE = 0x7;
  5845  000EFE  0E07               	movlw	7
  5846  000F00  6E96               	movwf	3990,c	;volatile
  5847                           
  5848                           ;pin_manager.c: 64: TRISB = 0xC4;
  5849  000F02  0EC4               	movlw	196
  5850  000F04  6E93               	movwf	3987,c	;volatile
  5851                           
  5852                           ;pin_manager.c: 65: TRISC = 0xD4;
  5853  000F06  0ED4               	movlw	212
  5854  000F08  6E94               	movwf	3988,c	;volatile
  5855                           
  5856                           ;pin_manager.c: 66: TRISA = 0x37;
  5857  000F0A  0E37               	movlw	55
  5858  000F0C  6E92               	movwf	3986,c	;volatile
  5859                           
  5860                           ; BSR set to: 15
  5861                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  5862  000F0E  9EF1               	bcf	intcon2,7,c	;volatile
  5863                           
  5864                           ; BSR set to: 15
  5865                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  5866  000F10  96F2               	bcf	intcon,3,c	;volatile
  5867                           
  5868                           ; BSR set to: 15
  5869  000F12  0012               	return		;funcret
  5870  000F14                     __end_of_PIN_MANAGER_Initialize:
  5871                           	opt stack 0
  5872                           tblptru	equ	0xFF8
  5873                           tblptrh	equ	0xFF7
  5874                           tblptrl	equ	0xFF6
  5875                           tablat	equ	0xFF5
  5876                           prodh	equ	0xFF4
  5877                           prodl	equ	0xFF3
  5878                           intcon	equ	0xFF2
  5879                           intcon2	equ	0xFF1
  5880                           indf0	equ	0xFEF
  5881                           postinc0	equ	0xFEE
  5882                           fsr0h	equ	0xFEA
  5883                           fsr0l	equ	0xFE9
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1l	equ	0xFE1
  5887                           indf2	equ	0xFDF
  5888                           postinc2	equ	0xFDE
  5889                           postdec2	equ	0xFDD
  5890                           plusw2	equ	0xFDB
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function _OSCILLATOR_Initialize *****************
  5896 ;; Defined at:
  5897 ;;		line 121 in file "mcc_generated_files/mcc.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;		None
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;		None
  5902 ;; Return value:  Size  Location     Type
  5903 ;;		None               void
  5904 ;; Registers used:
  5905 ;;		wreg, status,2
  5906 ;; Tracked objects:
  5907 ;;		On entry : 0/0
  5908 ;;		On exit  : 0/0
  5909 ;;		Unchanged: 0/0
  5910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5911 ;;      Params:         0       0       0       0       0       0       0
  5912 ;;      Locals:         0       0       0       0       0       0       0
  5913 ;;      Temps:          0       0       0       0       0       0       0
  5914 ;;      Totals:         0       0       0       0       0       0       0
  5915 ;;Total ram usage:        0 bytes
  5916 ;; Hardware stack levels used:    1
  5917 ;; Hardware stack levels required when called:    4
  5918 ;; This function calls:
  5919 ;;		Nothing
  5920 ;; This function is called by:
  5921 ;;		_SYSTEM_Initialize
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text34
  5926  0013AA                     __ptext34:
  5927                           	opt stack 0
  5928  0013AA                     _OSCILLATOR_Initialize:
  5929                           	opt stack 25
  5930                           
  5931                           ;mcc.c: 123: OSCCON = 0x70;
  5932                           
  5933                           ; BSR set to: 15
  5934                           ;incstack = 0
  5935  0013AA  0E70               	movlw	112
  5936  0013AC  6ED3               	movwf	4051,c	;volatile
  5937                           
  5938                           ;mcc.c: 125: OSCCON2 = 0x04;
  5939  0013AE  0E04               	movlw	4
  5940  0013B0  6ED2               	movwf	4050,c	;volatile
  5941                           
  5942                           ;mcc.c: 127: OSCTUNE = 0x00;
  5943  0013B2  0E00               	movlw	0
  5944  0013B4  6E9B               	movwf	3995,c	;volatile
  5945  0013B6  0012               	return		;funcret
  5946  0013B8                     __end_of_OSCILLATOR_Initialize:
  5947                           	opt stack 0
  5948                           tblptru	equ	0xFF8
  5949                           tblptrh	equ	0xFF7
  5950                           tblptrl	equ	0xFF6
  5951                           tablat	equ	0xFF5
  5952                           prodh	equ	0xFF4
  5953                           prodl	equ	0xFF3
  5954                           intcon	equ	0xFF2
  5955                           intcon2	equ	0xFF1
  5956                           indf0	equ	0xFEF
  5957                           postinc0	equ	0xFEE
  5958                           fsr0h	equ	0xFEA
  5959                           fsr0l	equ	0xFE9
  5960                           wreg	equ	0xFE8
  5961                           postdec1	equ	0xFE5
  5962                           fsr1l	equ	0xFE1
  5963                           indf2	equ	0xFDF
  5964                           postinc2	equ	0xFDE
  5965                           postdec2	equ	0xFDD
  5966                           plusw2	equ	0xFDB
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _INTERRUPT_Initialize *****************
  5972 ;; Defined at:
  5973 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;		None
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;		None
  5978 ;; Return value:  Size  Location     Type
  5979 ;;		None               void
  5980 ;; Registers used:
  5981 ;;		None
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5987 ;;      Params:         0       0       0       0       0       0       0
  5988 ;;      Locals:         0       0       0       0       0       0       0
  5989 ;;      Temps:          0       0       0       0       0       0       0
  5990 ;;      Totals:         0       0       0       0       0       0       0
  5991 ;;Total ram usage:        0 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:    4
  5994 ;; This function calls:
  5995 ;;		Nothing
  5996 ;; This function is called by:
  5997 ;;		_SYSTEM_Initialize
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text35
  6002  0013C6                     __ptext35:
  6003                           	opt stack 0
  6004  0013C6                     _INTERRUPT_Initialize:
  6005                           	opt stack 25
  6006                           
  6007                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6008                           
  6009                           ;incstack = 0
  6010  0013C6  9ED0               	bcf	4048,7,c	;volatile
  6011                           
  6012                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  6013  0013C8  9AA5               	bcf	4005,5,c	;volatile
  6014                           
  6015                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  6016  0013CA  98A5               	bcf	4005,4,c	;volatile
  6017                           
  6018                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  6019  0013CC  9A9F               	bcf	3999,5,c	;volatile
  6020                           
  6021                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  6022  0013CE  989F               	bcf	3999,4,c	;volatile
  6023  0013D0  0012               	return		;funcret
  6024  0013D2                     __end_of_INTERRUPT_Initialize:
  6025                           	opt stack 0
  6026                           tblptru	equ	0xFF8
  6027                           tblptrh	equ	0xFF7
  6028                           tblptrl	equ	0xFF6
  6029                           tablat	equ	0xFF5
  6030                           prodh	equ	0xFF4
  6031                           prodl	equ	0xFF3
  6032                           intcon	equ	0xFF2
  6033                           intcon2	equ	0xFF1
  6034                           indf0	equ	0xFEF
  6035                           postinc0	equ	0xFEE
  6036                           fsr0h	equ	0xFEA
  6037                           fsr0l	equ	0xFE9
  6038                           wreg	equ	0xFE8
  6039                           postdec1	equ	0xFE5
  6040                           fsr1l	equ	0xFE1
  6041                           indf2	equ	0xFDF
  6042                           postinc2	equ	0xFDE
  6043                           postdec2	equ	0xFDD
  6044                           plusw2	equ	0xFDB
  6045                           fsr2h	equ	0xFDA
  6046                           fsr2l	equ	0xFD9
  6047                           status	equ	0xFD8
  6048                           
  6049 ;; *************** function _EUSART2_Initialize *****************
  6050 ;; Defined at:
  6051 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;		None
  6054 ;; Auto vars:     Size  Location     Type
  6055 ;;		None
  6056 ;; Return value:  Size  Location     Type
  6057 ;;		None               void
  6058 ;; Registers used:
  6059 ;;		wreg, status,2
  6060 ;; Tracked objects:
  6061 ;;		On entry : 0/0
  6062 ;;		On exit  : 0/0
  6063 ;;		Unchanged: 0/0
  6064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6065 ;;      Params:         0       0       0       0       0       0       0
  6066 ;;      Locals:         0       0       0       0       0       0       0
  6067 ;;      Temps:          0       0       0       0       0       0       0
  6068 ;;      Totals:         0       0       0       0       0       0       0
  6069 ;;Total ram usage:        0 bytes
  6070 ;; Hardware stack levels used:    1
  6071 ;; Hardware stack levels required when called:    4
  6072 ;; This function calls:
  6073 ;;		Nothing
  6074 ;; This function is called by:
  6075 ;;		_SYSTEM_Initialize
  6076 ;; This function uses a non-reentrant model
  6077 ;;
  6078                           
  6079                           	psect	text36
  6080  00105A                     __ptext36:
  6081                           	opt stack 0
  6082  00105A                     _EUSART2_Initialize:
  6083                           	opt stack 25
  6084                           
  6085                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  6086                           
  6087                           ;incstack = 0
  6088  00105A  9AA3               	bcf	4003,5,c	;volatile
  6089                           
  6090                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  6091  00105C  98A3               	bcf	4003,4,c	;volatile
  6092                           
  6093                           ;eusart2.c: 84: BAUD2CON = 0x48;
  6094  00105E  0E48               	movlw	72
  6095  001060  6E70               	movwf	3952,c	;volatile
  6096                           
  6097                           ;eusart2.c: 87: RC2STA = 0x90;
  6098  001062  0E90               	movlw	144
  6099  001064  6E71               	movwf	3953,c	;volatile
  6100                           
  6101                           ;eusart2.c: 90: TX2STA = 0x26;
  6102  001066  0E26               	movlw	38
  6103  001068  6E72               	movwf	3954,c	;volatile
  6104                           
  6105                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  6106  00106A  0EA0               	movlw	160
  6107  00106C  6E75               	movwf	3957,c	;volatile
  6108                           
  6109                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  6110  00106E  0E01               	movlw	1
  6111  001070  6E76               	movwf	3958,c	;volatile
  6112                           
  6113                           ;eusart2.c: 100: eusart2TxHead = 0;
  6114  001072  0E00               	movlw	0
  6115  001074  6E38               	movwf	_eusart2TxHead,c
  6116                           
  6117                           ;eusart2.c: 101: eusart2TxTail = 0;
  6118  001076  0E00               	movlw	0
  6119  001078  6E39               	movwf	_eusart2TxTail,c
  6120                           
  6121                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  6122  00107A  0E08               	movlw	8
  6123  00107C  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  6124                           
  6125                           ;eusart2.c: 104: eusart2RxHead = 0;
  6126  00107E  0E00               	movlw	0
  6127  001080  6E36               	movwf	_eusart2RxHead,c
  6128                           
  6129                           ;eusart2.c: 105: eusart2RxTail = 0;
  6130  001082  0E00               	movlw	0
  6131  001084  6E37               	movwf	_eusart2RxTail,c
  6132                           
  6133                           ;eusart2.c: 106: eusart2RxCount = 0;
  6134  001086  0E00               	movlw	0
  6135  001088  6E35               	movwf	_eusart2RxCount,c	;volatile
  6136                           
  6137                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  6138  00108A  8AA3               	bsf	4003,5,c	;volatile
  6139  00108C  0012               	return		;funcret
  6140  00108E                     __end_of_EUSART2_Initialize:
  6141                           	opt stack 0
  6142                           tblptru	equ	0xFF8
  6143                           tblptrh	equ	0xFF7
  6144                           tblptrl	equ	0xFF6
  6145                           tablat	equ	0xFF5
  6146                           prodh	equ	0xFF4
  6147                           prodl	equ	0xFF3
  6148                           intcon	equ	0xFF2
  6149                           intcon2	equ	0xFF1
  6150                           indf0	equ	0xFEF
  6151                           postinc0	equ	0xFEE
  6152                           fsr0h	equ	0xFEA
  6153                           fsr0l	equ	0xFE9
  6154                           wreg	equ	0xFE8
  6155                           postdec1	equ	0xFE5
  6156                           fsr1l	equ	0xFE1
  6157                           indf2	equ	0xFDF
  6158                           postinc2	equ	0xFDE
  6159                           postdec2	equ	0xFDD
  6160                           plusw2	equ	0xFDB
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _NokiaStart *****************
  6166 ;; Defined at:
  6167 ;;		line 25 in file "NokiaLCD.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;		None
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;		None
  6172 ;; Return value:  Size  Location     Type
  6173 ;;		None               void
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0, cstack
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6181 ;;      Params:         0       0       0       0       0       0       0
  6182 ;;      Locals:         0       0       0       0       0       0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0
  6184 ;;      Totals:         0       0       0       0       0       0       0
  6185 ;;Total ram usage:        0 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    7
  6188 ;; This function calls:
  6189 ;;		_Delay
  6190 ;;		_LCDwrite
  6191 ;;		_SPI1_Initialize
  6192 ;;		_clearLcd
  6193 ;; This function is called by:
  6194 ;;		_main
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           	psect	text37
  6199  000A7A                     __ptext37:
  6200                           	opt stack 0
  6201  000A7A                     _NokiaStart:
  6202                           	opt stack 23
  6203                           
  6204                           ;NokiaLCD.c: 26: TRISBbits.TRISB6 = 0;
  6205                           
  6206                           ;incstack = 0
  6207  000A7A  9C93               	bcf	3987,6,c	;volatile
  6208                           
  6209                           ;NokiaLCD.c: 27: do { TRISD0 = 0; } while(0);
  6210  000A7C  9095               	bcf	3989,0,c	;volatile
  6211                           
  6212                           ;NokiaLCD.c: 28: do { TRISD3 = 0; } while(0);
  6213  000A7E  9695               	bcf	3989,3,c	;volatile
  6214                           
  6215                           ;NokiaLCD.c: 29: do { TRISD2 = 0; } while(0);
  6216  000A80  9495               	bcf	3989,2,c	;volatile
  6217                           
  6218                           ;NokiaLCD.c: 30: do { LATD0 = 1; } while(0);
  6219  000A82  808C               	bsf	3980,0,c	;volatile
  6220                           
  6221                           ;NokiaLCD.c: 31: SPI1_Initialize();
  6222  000A84  ECDC  F009         	call	_SPI1_Initialize	;wreg free
  6223                           
  6224                           ;NokiaLCD.c: 32: LATBbits.LATB6 = 1;
  6225  000A88  8C8A               	bsf	3978,6,c	;volatile
  6226                           
  6227                           ;NokiaLCD.c: 33: Delay(100);
  6228  000A8A  0E64               	movlw	100
  6229  000A8C  6E1B               	movwf	Delay@wait,c
  6230  000A8E  0E00               	movlw	0
  6231  000A90  6E1C               	movwf	Delay@wait+1,c
  6232  000A92  0E00               	movlw	0
  6233  000A94  6E1D               	movwf	Delay@wait+2,c
  6234  000A96  0E00               	movlw	0
  6235  000A98  6E1E               	movwf	Delay@wait+3,c
  6236  000A9A  EC8A  F007         	call	_Delay	;wreg free
  6237                           
  6238                           ;NokiaLCD.c: 34: LATBbits.LATB6 = 0;
  6239  000A9E  9C8A               	bcf	3978,6,c	;volatile
  6240                           
  6241                           ;NokiaLCD.c: 35: Delay(100);
  6242  000AA0  0E64               	movlw	100
  6243  000AA2  6E1B               	movwf	Delay@wait,c
  6244  000AA4  0E00               	movlw	0
  6245  000AA6  6E1C               	movwf	Delay@wait+1,c
  6246  000AA8  0E00               	movlw	0
  6247  000AAA  6E1D               	movwf	Delay@wait+2,c
  6248  000AAC  0E00               	movlw	0
  6249  000AAE  6E1E               	movwf	Delay@wait+3,c
  6250  000AB0  EC8A  F007         	call	_Delay	;wreg free
  6251                           
  6252                           ;NokiaLCD.c: 36: LATBbits.LATB6 = 1;
  6253  000AB4  8C8A               	bsf	3978,6,c	;volatile
  6254                           
  6255                           ;NokiaLCD.c: 37: LCDwrite(1, 0x21);
  6256  000AB6  0E21               	movlw	33
  6257  000AB8  6E21               	movwf	LCDwrite@data,c
  6258  000ABA  0E01               	movlw	1
  6259  000ABC  ECA1  F009         	call	_LCDwrite
  6260                           
  6261                           ;NokiaLCD.c: 38: LCDwrite(1, 0xC8);
  6262  000AC0  0EC8               	movlw	200
  6263  000AC2  6E21               	movwf	LCDwrite@data,c
  6264  000AC4  0E01               	movlw	1
  6265  000AC6  ECA1  F009         	call	_LCDwrite
  6266                           
  6267                           ;NokiaLCD.c: 39: LCDwrite(1, 0x04 | !!((66-2) & (1u << 6)));
  6268  000ACA  0E05               	movlw	5
  6269  000ACC  6E21               	movwf	LCDwrite@data,c
  6270  000ACE  0E01               	movlw	1
  6271  000AD0  ECA1  F009         	call	_LCDwrite
  6272                           
  6273                           ;NokiaLCD.c: 40: LCDwrite(1, 0x40 | ((66-2) & ((1u << 6) - 1)));
  6274  000AD4  0E40               	movlw	64
  6275  000AD6  6E21               	movwf	LCDwrite@data,c
  6276  000AD8  0E01               	movlw	1
  6277  000ADA  ECA1  F009         	call	_LCDwrite
  6278                           
  6279                           ;NokiaLCD.c: 42: LCDwrite(1, 0x14);
  6280  000ADE  0E14               	movlw	20
  6281  000AE0  6E21               	movwf	LCDwrite@data,c
  6282  000AE2  0E01               	movlw	1
  6283  000AE4  ECA1  F009         	call	_LCDwrite
  6284                           
  6285                           ;NokiaLCD.c: 43: LCDwrite(1, 0x20);
  6286  000AE8  0E20               	movlw	32
  6287  000AEA  6E21               	movwf	LCDwrite@data,c
  6288  000AEC  0E01               	movlw	1
  6289  000AEE  ECA1  F009         	call	_LCDwrite
  6290                           
  6291                           ;NokiaLCD.c: 44: LCDwrite(1, 0x08);
  6292  000AF2  0E08               	movlw	8
  6293  000AF4  6E21               	movwf	LCDwrite@data,c
  6294  000AF6  0E01               	movlw	1
  6295  000AF8  ECA1  F009         	call	_LCDwrite
  6296                           
  6297                           ;NokiaLCD.c: 45: LCDwrite(1, 0x0C);
  6298  000AFC  0E0C               	movlw	12
  6299  000AFE  6E21               	movwf	LCDwrite@data,c
  6300  000B00  0E01               	movlw	1
  6301  000B02  ECA1  F009         	call	_LCDwrite
  6302                           
  6303                           ;NokiaLCD.c: 46: clearLcd();
  6304  000B06  EC3B  F009         	call	_clearLcd	;wreg free
  6305  000B0A  0012               	return		;funcret
  6306  000B0C                     __end_of_NokiaStart:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           prodh	equ	0xFF4
  6313                           prodl	equ	0xFF3
  6314                           intcon	equ	0xFF2
  6315                           intcon2	equ	0xFF1
  6316                           indf0	equ	0xFEF
  6317                           postinc0	equ	0xFEE
  6318                           fsr0h	equ	0xFEA
  6319                           fsr0l	equ	0xFE9
  6320                           wreg	equ	0xFE8
  6321                           postdec1	equ	0xFE5
  6322                           fsr1l	equ	0xFE1
  6323                           indf2	equ	0xFDF
  6324                           postinc2	equ	0xFDE
  6325                           postdec2	equ	0xFDD
  6326                           plusw2	equ	0xFDB
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _clearLcd *****************
  6332 ;; Defined at:
  6333 ;;		line 68 in file "NokiaLCD.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  res             2   34[COMRAM] int 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;		None               void
  6340 ;; Registers used:
  6341 ;;		wreg, status,2, status,0, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6347 ;;      Params:         0       0       0       0       0       0       0
  6348 ;;      Locals:         2       0       0       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0
  6350 ;;      Totals:         2       0       0       0       0       0       0
  6351 ;;Total ram usage:        2 bytes
  6352 ;; Hardware stack levels used:    1
  6353 ;; Hardware stack levels required when called:    6
  6354 ;; This function calls:
  6355 ;;		_LCDwrite
  6356 ;; This function is called by:
  6357 ;;		_main
  6358 ;;		_NokiaStart
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text38
  6363  001276                     __ptext38:
  6364                           	opt stack 0
  6365  001276                     _clearLcd:
  6366                           	opt stack 24
  6367                           
  6368                           ;NokiaLCD.c: 69: int res;
  6369                           ;NokiaLCD.c: 70: for(res=0;res<504;res++){
  6370                           
  6371                           ;incstack = 0
  6372  001276  0E00               	movlw	0
  6373  001278  6E24               	movwf	clearLcd@res+1,c
  6374  00127A  0E00               	movlw	0
  6375  00127C  6E23               	movwf	clearLcd@res,c
  6376  00127E                     l3298:
  6377  00127E  BE24               	btfsc	clearLcd@res+1,7,c
  6378  001280  D006               	goto	l3302
  6379  001282  0EF8               	movlw	248
  6380  001284  5C23               	subwf	clearLcd@res,w,c
  6381  001286  0E01               	movlw	1
  6382  001288  5824               	subwfb	clearLcd@res+1,w,c
  6383  00128A  B0D8               	btfsc	status,0,c
  6384  00128C  0012               	return	
  6385  00128E                     l3302:
  6386                           
  6387                           ;NokiaLCD.c: 71: LCDwrite(0, 0x00);
  6388  00128E  0E00               	movlw	0
  6389  001290  6E21               	movwf	LCDwrite@data,c
  6390  001292  0E00               	movlw	0
  6391  001294  ECA1  F009         	call	_LCDwrite
  6392  001298  4A23               	infsnz	clearLcd@res,f,c
  6393  00129A  2A24               	incf	clearLcd@res+1,f,c
  6394  00129C  D7F0               	goto	l3298
  6395  00129E                     __end_of_clearLcd:
  6396                           	opt stack 0
  6397                           tblptru	equ	0xFF8
  6398                           tblptrh	equ	0xFF7
  6399                           tblptrl	equ	0xFF6
  6400                           tablat	equ	0xFF5
  6401                           prodh	equ	0xFF4
  6402                           prodl	equ	0xFF3
  6403                           intcon	equ	0xFF2
  6404                           intcon2	equ	0xFF1
  6405                           indf0	equ	0xFEF
  6406                           postinc0	equ	0xFEE
  6407                           fsr0h	equ	0xFEA
  6408                           fsr0l	equ	0xFE9
  6409                           wreg	equ	0xFE8
  6410                           postdec1	equ	0xFE5
  6411                           fsr1l	equ	0xFE1
  6412                           indf2	equ	0xFDF
  6413                           postinc2	equ	0xFDE
  6414                           postdec2	equ	0xFDD
  6415                           plusw2	equ	0xFDB
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _LCDwrite *****************
  6421 ;; Defined at:
  6422 ;;		line 49 in file "NokiaLCD.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  mode            1    wreg     unsigned char 
  6425 ;;  data            1   32[COMRAM] unsigned char 
  6426 ;; Auto vars:     Size  Location     Type
  6427 ;;  mode            1   33[COMRAM] unsigned char 
  6428 ;; Return value:  Size  Location     Type
  6429 ;;		None               void
  6430 ;; Registers used:
  6431 ;;		wreg, status,2, cstack
  6432 ;; Tracked objects:
  6433 ;;		On entry : 0/0
  6434 ;;		On exit  : 0/0
  6435 ;;		Unchanged: 0/0
  6436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6437 ;;      Params:         1       0       0       0       0       0       0
  6438 ;;      Locals:         1       0       0       0       0       0       0
  6439 ;;      Temps:          0       0       0       0       0       0       0
  6440 ;;      Totals:         2       0       0       0       0       0       0
  6441 ;;Total ram usage:        2 bytes
  6442 ;; Hardware stack levels used:    1
  6443 ;; Hardware stack levels required when called:    5
  6444 ;; This function calls:
  6445 ;;		_SPI1_Exchange8bit
  6446 ;; This function is called by:
  6447 ;;		_NokiaStart
  6448 ;;		_clearLcd
  6449 ;;		_gotoXy
  6450 ;;		_LcdCharacter
  6451 ;;		_blackLcd
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           	psect	text39
  6456  001342                     __ptext39:
  6457                           	opt stack 0
  6458  001342                     _LCDwrite:
  6459                           	opt stack 24
  6460                           
  6461                           ;incstack = 0
  6462                           ;LCDwrite@mode stored from wreg
  6463  001342  6E22               	movwf	LCDwrite@mode,c
  6464                           
  6465                           ;NokiaLCD.c: 50: if(mode){
  6466  001344  5022               	movf	LCDwrite@mode,w,c
  6467  001346  B4D8               	btfsc	status,2,c
  6468  001348  D002               	goto	l694
  6469                           
  6470                           ;NokiaLCD.c: 51: do { LATD3 = 0; } while(0);
  6471  00134A  968C               	bcf	3980,3,c	;volatile
  6472                           
  6473                           ;NokiaLCD.c: 52: }
  6474  00134C  D001               	goto	l696
  6475  00134E                     l694:
  6476  00134E  868C               	bsf	3980,3,c	;volatile
  6477  001350                     l696:
  6478  001350  908C               	bcf	3980,0,c	;volatile
  6479                           
  6480                           ;NokiaLCD.c: 57: SPI1_Exchange8bit(data);
  6481  001352  5021               	movf	LCDwrite@data,w,c
  6482  001354  ECCD  F009         	call	_SPI1_Exchange8bit
  6483                           
  6484                           ;NokiaLCD.c: 58: do { LATD0 = 1; } while(0);
  6485  001358  808C               	bsf	3980,0,c	;volatile
  6486  00135A  0012               	return	
  6487  00135C                     __end_of_LCDwrite:
  6488                           	opt stack 0
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           intcon2	equ	0xFF1
  6497                           indf0	equ	0xFEF
  6498                           postinc0	equ	0xFEE
  6499                           fsr0h	equ	0xFEA
  6500                           fsr0l	equ	0xFE9
  6501                           wreg	equ	0xFE8
  6502                           postdec1	equ	0xFE5
  6503                           fsr1l	equ	0xFE1
  6504                           indf2	equ	0xFDF
  6505                           postinc2	equ	0xFDE
  6506                           postdec2	equ	0xFDD
  6507                           plusw2	equ	0xFDB
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function _SPI1_Exchange8bit *****************
  6513 ;; Defined at:
  6514 ;;		line 78 in file "mcc_generated_files/spi1.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  data            1    wreg     unsigned char 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  data            1   26[COMRAM] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;                  1    wreg      unsigned char 
  6521 ;; Registers used:
  6522 ;;		wreg, status,2
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6528 ;;      Params:         0       0       0       0       0       0       0
  6529 ;;      Locals:         1       0       0       0       0       0       0
  6530 ;;      Temps:          0       0       0       0       0       0       0
  6531 ;;      Totals:         1       0       0       0       0       0       0
  6532 ;;Total ram usage:        1 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    4
  6535 ;; This function calls:
  6536 ;;		Nothing
  6537 ;; This function is called by:
  6538 ;;		_LCDwrite
  6539 ;;		_SPI1_Exchange8bitBuffer
  6540 ;; This function uses a non-reentrant model
  6541 ;;
  6542                           
  6543                           	psect	text40
  6544  00139A                     __ptext40:
  6545                           	opt stack 0
  6546  00139A                     _SPI1_Exchange8bit:
  6547                           	opt stack 24
  6548                           
  6549                           ;incstack = 0
  6550                           ;SPI1_Exchange8bit@data stored from wreg
  6551  00139A  6E1B               	movwf	SPI1_Exchange8bit@data,c
  6552                           
  6553                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  6554  00139C  9EC6               	bcf	4038,7,c	;volatile
  6555                           
  6556                           ;spi1.c: 83: SSP1BUF = data;
  6557  00139E  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  6558  0013A2                     l188:
  6559  0013A2  A0C7               	btfss	4039,0,c	;volatile
  6560  0013A4  D7FE               	goto	l188
  6561                           
  6562                           ;spi1.c: 87: }
  6563                           ;spi1.c: 89: return (SSP1BUF);
  6564  0013A6  50C9               	movf	4041,w,c	;volatile
  6565  0013A8  0012               	return		;funcret
  6566  0013AA                     __end_of_SPI1_Exchange8bit:
  6567                           	opt stack 0
  6568                           tblptru	equ	0xFF8
  6569                           tblptrh	equ	0xFF7
  6570                           tblptrl	equ	0xFF6
  6571                           tablat	equ	0xFF5
  6572                           prodh	equ	0xFF4
  6573                           prodl	equ	0xFF3
  6574                           intcon	equ	0xFF2
  6575                           intcon2	equ	0xFF1
  6576                           indf0	equ	0xFEF
  6577                           postinc0	equ	0xFEE
  6578                           fsr0h	equ	0xFEA
  6579                           fsr0l	equ	0xFE9
  6580                           wreg	equ	0xFE8
  6581                           postdec1	equ	0xFE5
  6582                           fsr1l	equ	0xFE1
  6583                           indf2	equ	0xFDF
  6584                           postinc2	equ	0xFDE
  6585                           postdec2	equ	0xFDD
  6586                           plusw2	equ	0xFDB
  6587                           fsr2h	equ	0xFDA
  6588                           fsr2l	equ	0xFD9
  6589                           status	equ	0xFD8
  6590                           
  6591 ;; *************** function _SPI1_Initialize *****************
  6592 ;; Defined at:
  6593 ;;		line 64 in file "mcc_generated_files/spi1.c"
  6594 ;; Parameters:    Size  Location     Type
  6595 ;;		None
  6596 ;; Auto vars:     Size  Location     Type
  6597 ;;		None
  6598 ;; Return value:  Size  Location     Type
  6599 ;;		None               void
  6600 ;; Registers used:
  6601 ;;		wreg, status,2
  6602 ;; Tracked objects:
  6603 ;;		On entry : 0/0
  6604 ;;		On exit  : 0/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6607 ;;      Params:         0       0       0       0       0       0       0
  6608 ;;      Locals:         0       0       0       0       0       0       0
  6609 ;;      Temps:          0       0       0       0       0       0       0
  6610 ;;      Totals:         0       0       0       0       0       0       0
  6611 ;;Total ram usage:        0 bytes
  6612 ;; Hardware stack levels used:    1
  6613 ;; Hardware stack levels required when called:    4
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_NokiaStart
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           	psect	text41
  6622  0013B8                     __ptext41:
  6623                           	opt stack 0
  6624  0013B8                     _SPI1_Initialize:
  6625                           	opt stack 25
  6626                           
  6627                           ;spi1.c: 69: SSP1STAT = 0x80;
  6628                           
  6629                           ;incstack = 0
  6630  0013B8  0E80               	movlw	128
  6631  0013BA  6EC7               	movwf	4039,c	;volatile
  6632                           
  6633                           ;spi1.c: 72: SSP1CON1 = 0x30;
  6634  0013BC  0E30               	movlw	48
  6635  0013BE  6EC6               	movwf	4038,c	;volatile
  6636                           
  6637                           ;spi1.c: 75: SSP1ADD = 0x00;
  6638  0013C0  0E00               	movlw	0
  6639  0013C2  6EC8               	movwf	4040,c	;volatile
  6640  0013C4  0012               	return		;funcret
  6641  0013C6                     __end_of_SPI1_Initialize:
  6642                           	opt stack 0
  6643                           tblptru	equ	0xFF8
  6644                           tblptrh	equ	0xFF7
  6645                           tblptrl	equ	0xFF6
  6646                           tablat	equ	0xFF5
  6647                           prodh	equ	0xFF4
  6648                           prodl	equ	0xFF3
  6649                           intcon	equ	0xFF2
  6650                           intcon2	equ	0xFF1
  6651                           indf0	equ	0xFEF
  6652                           postinc0	equ	0xFEE
  6653                           fsr0h	equ	0xFEA
  6654                           fsr0l	equ	0xFE9
  6655                           wreg	equ	0xFE8
  6656                           postdec1	equ	0xFE5
  6657                           fsr1l	equ	0xFE1
  6658                           indf2	equ	0xFDF
  6659                           postinc2	equ	0xFDE
  6660                           postdec2	equ	0xFDD
  6661                           plusw2	equ	0xFDB
  6662                           fsr2h	equ	0xFDA
  6663                           fsr2l	equ	0xFD9
  6664                           status	equ	0xFD8
  6665                           
  6666 ;; *************** function _Delay *****************
  6667 ;; Defined at:
  6668 ;;		line 12 in file "Functions.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  wait            4   26[COMRAM] long 
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  i               4   31[COMRAM] long 
  6673 ;; Return value:  Size  Location     Type
  6674 ;;		None               void
  6675 ;; Registers used:
  6676 ;;		wreg, status,2, status,0
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6682 ;;      Params:         4       0       0       0       0       0       0
  6683 ;;      Locals:         4       0       0       0       0       0       0
  6684 ;;      Temps:          1       0       0       0       0       0       0
  6685 ;;      Totals:         9       0       0       0       0       0       0
  6686 ;;Total ram usage:        9 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    4
  6689 ;; This function calls:
  6690 ;;		Nothing
  6691 ;; This function is called by:
  6692 ;;		_main
  6693 ;;		_respondChargerAsECU
  6694 ;;		_SetBMM
  6695 ;;		_Precharge
  6696 ;;		_NokiaStart
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text42
  6701  000F14                     __ptext42:
  6702                           	opt stack 0
  6703  000F14                     _Delay:
  6704                           	opt stack 24
  6705                           
  6706                           ;Functions.c: 13: long int i = 0;
  6707                           
  6708                           ;incstack = 0
  6709  000F14  0E00               	movlw	0
  6710  000F16  6E20               	movwf	Delay@i,c
  6711  000F18  0E00               	movlw	0
  6712  000F1A  6E21               	movwf	Delay@i+1,c
  6713  000F1C  0E00               	movlw	0
  6714  000F1E  6E22               	movwf	Delay@i+2,c
  6715  000F20  0E00               	movlw	0
  6716  000F22  6E23               	movwf	Delay@i+3,c
  6717                           
  6718                           ;Functions.c: 14: for (; wait > i; i++) {
  6719  000F24  D00E               	goto	l3198
  6720  000F26                     l3194:
  6721                           
  6722                           ;Functions.c: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
  6723  000F26  0E06               	movlw	6
  6724  000F28  6E1F               	movwf	??_Delay& (0+255),c
  6725  000F2A  0E30               	movlw	48
  6726  000F2C                     u2647:
  6727  000F2C  2EE8               	decfsz	wreg,f,c
  6728  000F2E  D7FE               	goto	u2647
  6729  000F30  2E1F               	decfsz	??_Delay& (0+255),f,c
  6730  000F32  D7FC               	goto	u2647
  6731  000F34  D000               	nop2	
  6732  000F36  0E01               	movlw	1
  6733  000F38  2620               	addwf	Delay@i,f,c
  6734  000F3A  0E00               	movlw	0
  6735  000F3C  2221               	addwfc	Delay@i+1,f,c
  6736  000F3E  2222               	addwfc	Delay@i+2,f,c
  6737  000F40  2223               	addwfc	Delay@i+3,f,c
  6738  000F42                     l3198:
  6739  000F42  501B               	movf	Delay@wait,w,c
  6740  000F44  5C20               	subwf	Delay@i,w,c
  6741  000F46  501C               	movf	Delay@wait+1,w,c
  6742  000F48  5821               	subwfb	Delay@i+1,w,c
  6743  000F4A  501D               	movf	Delay@wait+2,w,c
  6744  000F4C  5822               	subwfb	Delay@i+2,w,c
  6745  000F4E  5023               	movf	Delay@i+3,w,c
  6746  000F50  0A80               	xorlw	128
  6747  000F52  6E1F               	movwf	??_Delay& (0+255),c
  6748  000F54  501E               	movf	Delay@wait+3,w,c
  6749  000F56  0A80               	xorlw	128
  6750  000F58  581F               	subwfb	??_Delay& (0+255),w,c
  6751  000F5A  B0D8               	btfsc	status,0,c
  6752  000F5C  0012               	return	
  6753  000F5E  D7E3               	goto	l3194
  6754  000F60                     __end_of_Delay:
  6755                           	opt stack 0
  6756                           tblptru	equ	0xFF8
  6757                           tblptrh	equ	0xFF7
  6758                           tblptrl	equ	0xFF6
  6759                           tablat	equ	0xFF5
  6760                           prodh	equ	0xFF4
  6761                           prodl	equ	0xFF3
  6762                           intcon	equ	0xFF2
  6763                           intcon2	equ	0xFF1
  6764                           indf0	equ	0xFEF
  6765                           postinc0	equ	0xFEE
  6766                           fsr0h	equ	0xFEA
  6767                           fsr0l	equ	0xFE9
  6768                           wreg	equ	0xFE8
  6769                           postdec1	equ	0xFE5
  6770                           fsr1l	equ	0xFE1
  6771                           indf2	equ	0xFDF
  6772                           postinc2	equ	0xFDE
  6773                           postdec2	equ	0xFDD
  6774                           plusw2	equ	0xFDB
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _INTERRUPT_InterruptManager *****************
  6780 ;; Defined at:
  6781 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;		None
  6786 ;; Return value:  Size  Location     Type
  6787 ;;		None               void
  6788 ;; Registers used:
  6789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6795 ;;      Params:         0       0       0       0       0       0       0
  6796 ;;      Locals:         0       0       0       0       0       0       0
  6797 ;;      Temps:         14       0       0       0       0       0       0
  6798 ;;      Totals:        14       0       0       0       0       0       0
  6799 ;;Total ram usage:       14 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    3
  6802 ;; This function calls:
  6803 ;;		_EUSART1_Receive_ISR
  6804 ;;		_EUSART1_Transmit_ISR
  6805 ;;		_EUSART2_Receive_ISR
  6806 ;;		_EUSART2_Transmit_ISR
  6807 ;; This function is called by:
  6808 ;;		Interrupt level 2
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           	psect	intcode
  6813  000008                     __pintcode:
  6814                           	opt stack 0
  6815  000008                     _INTERRUPT_InterruptManager:
  6816                           	opt stack 22
  6817                           
  6818                           ;incstack = 0
  6819  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6820  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6821  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6822  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6823  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6824  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6825  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6826  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6827  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6828  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6829  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6830  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6831  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6832  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6833  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6834                           
  6835                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6836  000042  BAA3               	btfsc	4003,5,c	;volatile
  6837  000044  AAA4               	btfss	4004,5,c	;volatile
  6838  000046  D003               	goto	i2l140
  6839                           
  6840                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6841  000048  ECD2  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6842                           
  6843                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6844  00004C  D011               	goto	i2l148
  6845  00004E                     i2l140:
  6846  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6847  000050  A8A4               	btfss	4004,4,c	;volatile
  6848  000052  D003               	goto	i2l142
  6849                           
  6850                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6851  000054  EC8F  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6852                           
  6853                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6854  000058  D00B               	goto	i2l148
  6855  00005A                     i2l142:
  6856  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6857  00005C  AA9E               	btfss	3998,5,c	;volatile
  6858  00005E  D003               	goto	i2l144
  6859                           
  6860                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6861  000060  EC84  F009         	call	_EUSART1_Receive_ISR	;wreg free
  6862                           
  6863                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6864  000064  D005               	goto	i2l148
  6865  000066                     i2l144:
  6866  000066  B89D               	btfsc	3997,4,c	;volatile
  6867  000068  A89E               	btfss	3998,4,c	;volatile
  6868  00006A  D002               	goto	i2l148
  6869                           
  6870                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6871  00006C  EC47  F008         	call	_EUSART1_Transmit_ISR	;wreg free
  6872  000070                     i2l148:
  6873  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6874  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6875  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6876  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6877  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6878  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6879  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6880  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6881  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6882  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6883  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6884  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6885  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6886  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6887  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6888  0000AA  0011               	retfie		f
  6889  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6890                           	opt stack 0
  6891                           pclatu	equ	0xFFB
  6892                           pclath	equ	0xFFA
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           intcon	equ	0xFF2
  6900                           intcon2	equ	0xFF1
  6901                           indf0	equ	0xFEF
  6902                           postinc0	equ	0xFEE
  6903                           fsr0h	equ	0xFEA
  6904                           fsr0l	equ	0xFE9
  6905                           wreg	equ	0xFE8
  6906                           postdec1	equ	0xFE5
  6907                           fsr1h	equ	0xFE2
  6908                           fsr1l	equ	0xFE1
  6909                           indf2	equ	0xFDF
  6910                           postinc2	equ	0xFDE
  6911                           postdec2	equ	0xFDD
  6912                           plusw2	equ	0xFDB
  6913                           fsr2h	equ	0xFDA
  6914                           fsr2l	equ	0xFD9
  6915                           status	equ	0xFD8
  6916                           
  6917 ;; *************** function _EUSART2_Transmit_ISR *****************
  6918 ;; Defined at:
  6919 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6920 ;; Parameters:    Size  Location     Type
  6921 ;;		None
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;		None
  6924 ;; Return value:  Size  Location     Type
  6925 ;;		None               void
  6926 ;; Registers used:
  6927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6933 ;;      Params:         0       0       0       0       0       0       0
  6934 ;;      Locals:         0       0       0       0       0       0       0
  6935 ;;      Temps:          0       0       0       0       0       0       0
  6936 ;;      Totals:         0       0       0       0       0       0       0
  6937 ;;Total ram usage:        0 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; This function calls:
  6940 ;;		Nothing
  6941 ;; This function is called by:
  6942 ;;		_INTERRUPT_InterruptManager
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           	psect	text44
  6947  00111E                     __ptext44:
  6948                           	opt stack 0
  6949  00111E                     _EUSART2_Transmit_ISR:
  6950                           	opt stack 24
  6951                           
  6952                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6953                           
  6954                           ;incstack = 0
  6955  00111E  0E08               	movlw	8
  6956  001120  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  6957  001122  D012               	goto	i2l62
  6958                           
  6959                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  6960  001124  5039               	movf	_eusart2TxTail,w,c
  6961  001126  0D01               	mullw	1
  6962  001128  0E9B               	movlw	low _eusart2TxBuffer
  6963  00112A  24F3               	addwf	prodl,w,c
  6964  00112C  6ED9               	movwf	fsr2l,c
  6965  00112E  0E00               	movlw	high _eusart2TxBuffer
  6966  001130  20F4               	addwfc	prodh,w,c
  6967  001132  6EDA               	movwf	fsr2h,c
  6968  001134  50DF               	movf	indf2,w,c
  6969  001136  6E73               	movwf	3955,c	;volatile
  6970  001138  2A39               	incf	_eusart2TxTail,f,c
  6971                           
  6972                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  6973  00113A  0E07               	movlw	7
  6974  00113C  6439               	cpfsgt	_eusart2TxTail,c
  6975  00113E  D002               	goto	i2l2796
  6976                           
  6977                           ;eusart2.c: 161: eusart2TxTail = 0;
  6978  001140  0E00               	movlw	0
  6979  001142  6E39               	movwf	_eusart2TxTail,c
  6980  001144                     i2l2796:
  6981                           
  6982                           ;eusart2.c: 162: }
  6983                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  6984  001144  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  6985                           
  6986                           ;eusart2.c: 164: } else {
  6987  001146  0012               	return	
  6988  001148                     i2l62:
  6989                           
  6990                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  6991  001148  98A3               	bcf	4003,4,c	;volatile
  6992  00114A  0012               	return	
  6993  00114C                     __end_of_EUSART2_Transmit_ISR:
  6994                           	opt stack 0
  6995                           pclatu	equ	0xFFB
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           intcon2	equ	0xFF1
  7005                           indf0	equ	0xFEF
  7006                           postinc0	equ	0xFEE
  7007                           fsr0h	equ	0xFEA
  7008                           fsr0l	equ	0xFE9
  7009                           wreg	equ	0xFE8
  7010                           postdec1	equ	0xFE5
  7011                           fsr1h	equ	0xFE2
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           plusw2	equ	0xFDB
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _EUSART2_Receive_ISR *****************
  7022 ;; Defined at:
  7023 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;		None
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;		None
  7028 ;; Return value:  Size  Location     Type
  7029 ;;		None               void
  7030 ;; Registers used:
  7031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7032 ;; Tracked objects:
  7033 ;;		On entry : 0/0
  7034 ;;		On exit  : 0/0
  7035 ;;		Unchanged: 0/0
  7036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7037 ;;      Params:         0       0       0       0       0       0       0
  7038 ;;      Locals:         0       0       0       0       0       0       0
  7039 ;;      Temps:          0       0       0       0       0       0       0
  7040 ;;      Totals:         0       0       0       0       0       0       0
  7041 ;;Total ram usage:        0 bytes
  7042 ;; Hardware stack levels used:    1
  7043 ;; This function calls:
  7044 ;;		Nothing
  7045 ;; This function is called by:
  7046 ;;		_INTERRUPT_InterruptManager
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           	psect	text45
  7051  0011A4                     __ptext45:
  7052                           	opt stack 0
  7053  0011A4                     _EUSART2_Receive_ISR:
  7054                           	opt stack 24
  7055                           
  7056                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  7057                           
  7058                           ;incstack = 0
  7059  0011A4  A271               	btfss	3953,1,c	;volatile
  7060  0011A6  D002               	goto	i2l2802
  7061                           
  7062                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  7063  0011A8  9871               	bcf	3953,4,c	;volatile
  7064                           
  7065                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  7066  0011AA  8871               	bsf	3953,4,c	;volatile
  7067  0011AC                     i2l2802:
  7068                           
  7069                           ;eusart2.c: 175: }
  7070                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  7071  0011AC  5036               	movf	_eusart2RxHead,w,c
  7072  0011AE  0D01               	mullw	1
  7073  0011B0  0E93               	movlw	low _eusart2RxBuffer
  7074  0011B2  24F3               	addwf	prodl,w,c
  7075  0011B4  6ED9               	movwf	fsr2l,c
  7076  0011B6  0E00               	movlw	high _eusart2RxBuffer
  7077  0011B8  20F4               	addwfc	prodh,w,c
  7078  0011BA  6EDA               	movwf	fsr2h,c
  7079  0011BC  CF74 FFDF          	movff	3956,indf2	;volatile
  7080  0011C0  2A36               	incf	_eusart2RxHead,f,c
  7081                           
  7082                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  7083  0011C2  0E07               	movlw	7
  7084  0011C4  6436               	cpfsgt	_eusart2RxHead,c
  7085  0011C6  D002               	goto	i2l2810
  7086                           
  7087                           ;eusart2.c: 180: eusart2RxHead = 0;
  7088  0011C8  0E00               	movlw	0
  7089  0011CA  6E36               	movwf	_eusart2RxHead,c
  7090  0011CC                     i2l2810:
  7091                           
  7092                           ;eusart2.c: 181: }
  7093                           ;eusart2.c: 182: eusart2RxCount++;
  7094  0011CC  2A35               	incf	_eusart2RxCount,f,c	;volatile
  7095  0011CE  0012               	return		;funcret
  7096  0011D0                     __end_of_EUSART2_Receive_ISR:
  7097                           	opt stack 0
  7098                           pclatu	equ	0xFFB
  7099                           pclath	equ	0xFFA
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           intcon2	equ	0xFF1
  7108                           indf0	equ	0xFEF
  7109                           postinc0	equ	0xFEE
  7110                           fsr0h	equ	0xFEA
  7111                           fsr0l	equ	0xFE9
  7112                           wreg	equ	0xFE8
  7113                           postdec1	equ	0xFE5
  7114                           fsr1h	equ	0xFE2
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           plusw2	equ	0xFDB
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _EUSART1_Transmit_ISR *****************
  7125 ;; Defined at:
  7126 ;;		line 150 in file "UART.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  2  134[None  ] int 
  7133 ;; Registers used:
  7134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7140 ;;      Params:         0       0       0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0
  7142 ;;      Temps:          0       0       0       0       0       0       0
  7143 ;;      Totals:         0       0       0       0       0       0       0
  7144 ;;Total ram usage:        0 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    2
  7147 ;; This function calls:
  7148 ;;		_UART_buff_get
  7149 ;;		_UART_buff_size
  7150 ;; This function is called by:
  7151 ;;		_INTERRUPT_InterruptManager
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           	psect	text46
  7156  00108E                     __ptext46:
  7157                           	opt stack 0
  7158  00108E                     _EUSART1_Transmit_ISR:
  7159                           	opt stack 22
  7160                           
  7161                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7162                           
  7163                           ;incstack = 0
  7164  00108E  0E00               	movlw	low _output_buffer
  7165  001090  6E01               	movwf	UART_buff_size@_this,c
  7166  001092  0E03               	movlw	high _output_buffer
  7167  001094  6E02               	movwf	UART_buff_size@_this+1,c
  7168  001096  ECB9  F009         	call	_UART_buff_size	;wreg free
  7169  00109A  BE02               	btfsc	?_UART_buff_size+1,7,c
  7170  00109C  D00D               	goto	i2l2822
  7171  00109E  5002               	movf	?_UART_buff_size+1,w,c
  7172  0010A0  E103               	bnz	i2u165_40
  7173  0010A2  0401               	decf	?_UART_buff_size,w,c
  7174  0010A4  A0D8               	btfss	status,0,c
  7175  0010A6  D008               	goto	i2l2822
  7176  0010A8                     i2u165_40:
  7177                           
  7178                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7179  0010A8  0E00               	movlw	low _output_buffer
  7180  0010AA  6E07               	movwf	UART_buff_get@_this,c
  7181  0010AC  0E03               	movlw	high _output_buffer
  7182  0010AE  6E08               	movwf	UART_buff_get@_this+1,c
  7183  0010B0  EC86  F005         	call	_UART_buff_get	;wreg free
  7184  0010B4  6EAD               	movwf	4013,c	;volatile
  7185                           
  7186                           ;UART.c: 154: } else {
  7187  0010B6  0012               	return	
  7188  0010B8                     i2l2822:
  7189                           
  7190                           ;UART.c: 155: Transmit_stall = 1;
  7191  0010B8  0E01               	movlw	1
  7192  0010BA  6E44               	movwf	_Transmit_stall,c
  7193                           
  7194                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7195  0010BC  989D               	bcf	3997,4,c	;volatile
  7196  0010BE  0012               	return	
  7197  0010C0                     __end_of_EUSART1_Transmit_ISR:
  7198                           	opt stack 0
  7199                           pclatu	equ	0xFFB
  7200                           pclath	equ	0xFFA
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           intcon	equ	0xFF2
  7208                           intcon2	equ	0xFF1
  7209                           indf0	equ	0xFEF
  7210                           postinc0	equ	0xFEE
  7211                           fsr0h	equ	0xFEA
  7212                           fsr0l	equ	0xFE9
  7213                           wreg	equ	0xFE8
  7214                           postdec1	equ	0xFE5
  7215                           fsr1h	equ	0xFE2
  7216                           fsr1l	equ	0xFE1
  7217                           indf2	equ	0xFDF
  7218                           postinc2	equ	0xFDE
  7219                           postdec2	equ	0xFDD
  7220                           plusw2	equ	0xFDB
  7221                           fsr2h	equ	0xFDA
  7222                           fsr2l	equ	0xFD9
  7223                           status	equ	0xFD8
  7224                           
  7225 ;; *************** function _UART_buff_size *****************
  7226 ;; Defined at:
  7227 ;;		line 102 in file "UART.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7230 ;;		 -> output_buffer(206), input_buffer(206), 
  7231 ;; Auto vars:     Size  Location     Type
  7232 ;;		None
  7233 ;; Return value:  Size  Location     Type
  7234 ;;                  2    0[COMRAM] int 
  7235 ;; Registers used:
  7236 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7237 ;; Tracked objects:
  7238 ;;		On entry : 0/0
  7239 ;;		On exit  : 0/0
  7240 ;;		Unchanged: 0/0
  7241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7242 ;;      Params:         2       0       0       0       0       0       0
  7243 ;;      Locals:         0       0       0       0       0       0       0
  7244 ;;      Temps:          0       0       0       0       0       0       0
  7245 ;;      Totals:         2       0       0       0       0       0       0
  7246 ;;Total ram usage:        2 bytes
  7247 ;; Hardware stack levels used:    1
  7248 ;; This function calls:
  7249 ;;		Nothing
  7250 ;; This function is called by:
  7251 ;;		_EUSART1_Transmit_ISR
  7252 ;;		_Receive_available
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text47
  7257  001372                     __ptext47:
  7258                           	opt stack 0
  7259  001372                     _UART_buff_size:
  7260                           	opt stack 23
  7261                           
  7262                           ;UART.c: 103: return (_this->count);
  7263                           
  7264                           ;incstack = 0
  7265  001372  EE20 F0CC          	lfsr	2,204
  7266  001376  5001               	movf	UART_buff_size@_this,w,c
  7267  001378  26D9               	addwf	fsr2l,f,c
  7268  00137A  5002               	movf	UART_buff_size@_this+1,w,c
  7269  00137C  22DA               	addwfc	fsr2h,f,c
  7270  00137E  CFDE F001          	movff	postinc2,?_UART_buff_size
  7271  001382  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  7272  001386  0012               	return	
  7273  001388                     __end_of_UART_buff_size:
  7274                           	opt stack 0
  7275                           pclatu	equ	0xFFB
  7276                           pclath	equ	0xFFA
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           intcon	equ	0xFF2
  7284                           intcon2	equ	0xFF1
  7285                           indf0	equ	0xFEF
  7286                           postinc0	equ	0xFEE
  7287                           fsr0h	equ	0xFEA
  7288                           fsr0l	equ	0xFE9
  7289                           wreg	equ	0xFE8
  7290                           postdec1	equ	0xFE5
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           plusw2	equ	0xFDB
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301 ;; *************** function _UART_buff_get *****************
  7302 ;; Defined at:
  7303 ;;		line 81 in file "UART.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7306 ;;		 -> output_buffer(206), input_buffer(206), 
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  c               1   10[COMRAM] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      unsigned char 
  7311 ;; Registers used:
  7312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : 0/0
  7315 ;;		On exit  : 0/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7318 ;;      Params:         2       0       0       0       0       0       0
  7319 ;;      Locals:         1       0       0       0       0       0       0
  7320 ;;      Temps:          2       0       0       0       0       0       0
  7321 ;;      Totals:         5       0       0       0       0       0       0
  7322 ;;Total ram usage:        5 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    1
  7325 ;; This function calls:
  7326 ;;		_UART_buff_modulo_inc
  7327 ;; This function is called by:
  7328 ;;		_EUSART1_Transmit_ISR
  7329 ;;		_Receive_get
  7330 ;;		_Send_put
  7331 ;; This function uses a non-reentrant model
  7332 ;;
  7333                           
  7334                           	psect	text48
  7335  000B0C                     __ptext48:
  7336                           	opt stack 0
  7337  000B0C                     _UART_buff_get:
  7338                           	opt stack 22
  7339                           
  7340                           ;UART.c: 82: unsigned char c;
  7341                           ;UART.c: 83: if (_this->count > 0) {
  7342                           
  7343                           ;incstack = 0
  7344  000B0C  EE20 F0CC          	lfsr	2,204
  7345  000B10  5007               	movf	UART_buff_get@_this,w,c
  7346  000B12  26D9               	addwf	fsr2l,f,c
  7347  000B14  5008               	movf	UART_buff_get@_this+1,w,c
  7348  000B16  22DA               	addwfc	fsr2h,f,c
  7349  000B18  0E01               	movlw	1
  7350  000B1A  BEDB               	btfsc	plusw2,7,c
  7351  000B1C  D03C               	goto	i2l2734
  7352  000B1E  0E01               	movlw	1
  7353  000B20  50DB               	movf	plusw2,w,c
  7354  000B22  E103               	bnz	i2u154_40
  7355  000B24  04DE               	decf	postinc2,w,c
  7356  000B26  A0D8               	btfss	status,0,c
  7357  000B28  D036               	goto	i2l2734
  7358  000B2A                     i2u154_40:
  7359                           
  7360                           ;UART.c: 84: c = _this->buf[_this->tail];
  7361  000B2A  EE20 F0CA          	lfsr	2,202
  7362  000B2E  5007               	movf	UART_buff_get@_this,w,c
  7363  000B30  26D9               	addwf	fsr2l,f,c
  7364  000B32  5008               	movf	UART_buff_get@_this+1,w,c
  7365  000B34  22DA               	addwfc	fsr2h,f,c
  7366  000B36  CFDE F009          	movff	postinc2,??_UART_buff_get
  7367  000B3A  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  7368  000B3E  5009               	movf	??_UART_buff_get,w,c
  7369  000B40  2407               	addwf	UART_buff_get@_this,w,c
  7370  000B42  6ED9               	movwf	fsr2l,c
  7371  000B44  500A               	movf	??_UART_buff_get+1,w,c
  7372  000B46  2008               	addwfc	UART_buff_get@_this+1,w,c
  7373  000B48  6EDA               	movwf	fsr2h,c
  7374  000B4A  50DF               	movf	indf2,w,c
  7375  000B4C  6E0B               	movwf	UART_buff_get@c,c
  7376                           
  7377                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7378  000B4E  EE20 F0CA          	lfsr	2,202
  7379  000B52  5007               	movf	UART_buff_get@_this,w,c
  7380  000B54  26D9               	addwf	fsr2l,f,c
  7381  000B56  5008               	movf	UART_buff_get@_this+1,w,c
  7382  000B58  22DA               	addwfc	fsr2h,f,c
  7383  000B5A  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7384  000B5E  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7385  000B62  0E00               	movlw	0
  7386  000B64  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7387  000B66  0EC8               	movlw	200
  7388  000B68  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7389  000B6A  EC12  F009         	call	_UART_buff_modulo_inc	;wreg free
  7390  000B6E  EE20 F0CA          	lfsr	2,202
  7391  000B72  5007               	movf	UART_buff_get@_this,w,c
  7392  000B74  26D9               	addwf	fsr2l,f,c
  7393  000B76  5008               	movf	UART_buff_get@_this+1,w,c
  7394  000B78  22DA               	addwfc	fsr2h,f,c
  7395  000B7A  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7396  000B7E  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7397                           
  7398                           ;UART.c: 86: --_this->count;
  7399  000B82  EE20 F0CC          	lfsr	2,204
  7400  000B86  5007               	movf	UART_buff_get@_this,w,c
  7401  000B88  26D9               	addwf	fsr2l,f,c
  7402  000B8A  5008               	movf	UART_buff_get@_this+1,w,c
  7403  000B8C  22DA               	addwfc	fsr2h,f,c
  7404  000B8E  06DE               	decf	postinc2,f,c
  7405  000B90  0E00               	movlw	0
  7406  000B92  5ADD               	subwfb	postdec2,f,c
  7407                           
  7408                           ;UART.c: 87: } else {
  7409  000B94  D002               	goto	i2l513
  7410  000B96                     i2l2734:
  7411                           
  7412                           ;UART.c: 88: c = 0;
  7413  000B96  0E00               	movlw	0
  7414  000B98  6E0B               	movwf	UART_buff_get@c,c
  7415  000B9A                     i2l513:
  7416                           
  7417                           ;UART.c: 89: }
  7418                           ;UART.c: 90: return (c);
  7419  000B9A  500B               	movf	UART_buff_get@c,w,c
  7420  000B9C  0012               	return	
  7421  000B9E                     __end_of_UART_buff_get:
  7422                           	opt stack 0
  7423                           pclatu	equ	0xFFB
  7424                           pclath	equ	0xFFA
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           intcon	equ	0xFF2
  7432                           intcon2	equ	0xFF1
  7433                           indf0	equ	0xFEF
  7434                           postinc0	equ	0xFEE
  7435                           fsr0h	equ	0xFEA
  7436                           fsr0l	equ	0xFE9
  7437                           wreg	equ	0xFE8
  7438                           postdec1	equ	0xFE5
  7439                           fsr1h	equ	0xFE2
  7440                           fsr1l	equ	0xFE1
  7441                           indf2	equ	0xFDF
  7442                           postinc2	equ	0xFDE
  7443                           postdec2	equ	0xFDD
  7444                           plusw2	equ	0xFDB
  7445                           fsr2h	equ	0xFDA
  7446                           fsr2l	equ	0xFD9
  7447                           status	equ	0xFD8
  7448                           
  7449 ;; *************** function _EUSART1_Receive_ISR *****************
  7450 ;; Defined at:
  7451 ;;		line 139 in file "UART.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;		None
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  data            1   11[COMRAM] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  2  132[None  ] int 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7465 ;;      Params:         0       0       0       0       0       0       0
  7466 ;;      Locals:         1       0       0       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0
  7468 ;;      Totals:         1       0       0       0       0       0       0
  7469 ;;Total ram usage:        1 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:    2
  7472 ;; This function calls:
  7473 ;;		_UART_buff_put
  7474 ;; This function is called by:
  7475 ;;		_INTERRUPT_InterruptManager
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           	psect	text49
  7480  001308                     __ptext49:
  7481                           	opt stack 0
  7482  001308                     _EUSART1_Receive_ISR:
  7483                           	opt stack 22
  7484                           
  7485                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  7486                           
  7487                           ;incstack = 0
  7488  001308  A2AB               	btfss	4011,1,c	;volatile
  7489  00130A  D002               	goto	i2l544
  7490                           
  7491                           ;UART.c: 143: RC1STAbits.CREN = 0;
  7492  00130C  98AB               	bcf	4011,4,c	;volatile
  7493                           
  7494                           ;UART.c: 144: RC1STAbits.CREN = 1;
  7495  00130E  88AB               	bsf	4011,4,c	;volatile
  7496  001310                     i2l544:
  7497                           
  7498                           ;UART.c: 145: }
  7499                           ;UART.c: 146: unsigned char data = RCREG1;
  7500  001310  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  7501                           
  7502                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7503  001314  0E00               	movlw	low _input_buffer
  7504  001316  6E07               	movwf	UART_buff_put@_this,c
  7505  001318  0E02               	movlw	high _input_buffer
  7506  00131A  6E08               	movwf	UART_buff_put@_this+1,c
  7507  00131C  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  7508  001320  EC64  F002         	call	_UART_buff_put	;wreg free
  7509  001324  0012               	return		;funcret
  7510  001326                     __end_of_EUSART1_Receive_ISR:
  7511                           	opt stack 0
  7512                           pclatu	equ	0xFFB
  7513                           pclath	equ	0xFFA
  7514                           tblptru	equ	0xFF8
  7515                           tblptrh	equ	0xFF7
  7516                           tblptrl	equ	0xFF6
  7517                           tablat	equ	0xFF5
  7518                           prodh	equ	0xFF4
  7519                           prodl	equ	0xFF3
  7520                           intcon	equ	0xFF2
  7521                           intcon2	equ	0xFF1
  7522                           indf0	equ	0xFEF
  7523                           postinc0	equ	0xFEE
  7524                           fsr0h	equ	0xFEA
  7525                           fsr0l	equ	0xFE9
  7526                           wreg	equ	0xFE8
  7527                           postdec1	equ	0xFE5
  7528                           fsr1h	equ	0xFE2
  7529                           fsr1l	equ	0xFE1
  7530                           indf2	equ	0xFDF
  7531                           postinc2	equ	0xFDE
  7532                           postdec2	equ	0xFDD
  7533                           plusw2	equ	0xFDB
  7534                           fsr2h	equ	0xFDA
  7535                           fsr2l	equ	0xFD9
  7536                           status	equ	0xFD8
  7537                           
  7538 ;; *************** function _UART_buff_put *****************
  7539 ;; Defined at:
  7540 ;;		line 68 in file "UART.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7543 ;;		 -> output_buffer(206), input_buffer(206), 
  7544 ;;  c               1    8[COMRAM] const unsigned char 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;		None
  7547 ;; Return value:  Size  Location     Type
  7548 ;;		None               void
  7549 ;; Registers used:
  7550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7556 ;;      Params:         3       0       0       0       0       0       0
  7557 ;;      Locals:         0       0       0       0       0       0       0
  7558 ;;      Temps:          2       0       0       0       0       0       0
  7559 ;;      Totals:         5       0       0       0       0       0       0
  7560 ;;Total ram usage:        5 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    1
  7563 ;; This function calls:
  7564 ;;		_UART_buff_modulo_inc
  7565 ;; This function is called by:
  7566 ;;		_EUSART1_Receive_ISR
  7567 ;;		_Send_put
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text50
  7572  0004C8                     __ptext50:
  7573                           	opt stack 0
  7574  0004C8                     _UART_buff_put:
  7575                           	opt stack 22
  7576                           
  7577                           ;UART.c: 69: if (_this->count < 200) {
  7578                           
  7579                           ;incstack = 0
  7580  0004C8  EE20 F0CC          	lfsr	2,204
  7581  0004CC  5007               	movf	UART_buff_put@_this,w,c
  7582  0004CE  26D9               	addwf	fsr2l,f,c
  7583  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  7584  0004D2  22DA               	addwfc	fsr2h,f,c
  7585  0004D4  0E01               	movlw	1
  7586  0004D6  BEDB               	btfsc	plusw2,7,c
  7587  0004D8  D007               	goto	i2l2714
  7588  0004DA  0E01               	movlw	1
  7589  0004DC  50DB               	movf	plusw2,w,c
  7590  0004DE  E13A               	bnz	i2l2720
  7591  0004E0  0EC8               	movlw	200
  7592  0004E2  5CDE               	subwf	postinc2,w,c
  7593  0004E4  B0D8               	btfsc	status,0,c
  7594  0004E6  D036               	goto	i2l2720
  7595  0004E8                     i2l2714:
  7596                           
  7597                           ;UART.c: 70: _this->buf[_this->head] = c;
  7598  0004E8  EE20 F0C8          	lfsr	2,200
  7599  0004EC  5007               	movf	UART_buff_put@_this,w,c
  7600  0004EE  26D9               	addwf	fsr2l,f,c
  7601  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  7602  0004F2  22DA               	addwfc	fsr2h,f,c
  7603  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7604  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7605  0004FC  500A               	movf	??_UART_buff_put,w,c
  7606  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  7607  000500  6ED9               	movwf	fsr2l,c
  7608  000502  500B               	movf	??_UART_buff_put+1,w,c
  7609  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  7610  000506  6EDA               	movwf	fsr2h,c
  7611  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  7612                           
  7613                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7614  00050C  EE20 F0C8          	lfsr	2,200
  7615  000510  5007               	movf	UART_buff_put@_this,w,c
  7616  000512  26D9               	addwf	fsr2l,f,c
  7617  000514  5008               	movf	UART_buff_put@_this+1,w,c
  7618  000516  22DA               	addwfc	fsr2h,f,c
  7619  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7620  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7621  000520  0E00               	movlw	0
  7622  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7623  000524  0EC8               	movlw	200
  7624  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7625  000528  EC12  F009         	call	_UART_buff_modulo_inc	;wreg free
  7626  00052C  EE20 F0C8          	lfsr	2,200
  7627  000530  5007               	movf	UART_buff_put@_this,w,c
  7628  000532  26D9               	addwf	fsr2l,f,c
  7629  000534  5008               	movf	UART_buff_put@_this+1,w,c
  7630  000536  22DA               	addwfc	fsr2h,f,c
  7631  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7632  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7633                           
  7634                           ;UART.c: 72: ++_this->count;
  7635  000540  EE20 F0CC          	lfsr	2,204
  7636  000544  5007               	movf	UART_buff_put@_this,w,c
  7637  000546  26D9               	addwf	fsr2l,f,c
  7638  000548  5008               	movf	UART_buff_put@_this+1,w,c
  7639  00054A  22DA               	addwfc	fsr2h,f,c
  7640  00054C  2ADE               	incf	postinc2,f,c
  7641  00054E  0E00               	movlw	0
  7642  000550  22DD               	addwfc	postdec2,f,c
  7643                           
  7644                           ;UART.c: 73: } else {
  7645  000552  0012               	return	
  7646  000554                     i2l2720:
  7647                           
  7648                           ;UART.c: 74: _this->buf[_this->head] = c;
  7649  000554  EE20 F0C8          	lfsr	2,200
  7650  000558  5007               	movf	UART_buff_put@_this,w,c
  7651  00055A  26D9               	addwf	fsr2l,f,c
  7652  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  7653  00055E  22DA               	addwfc	fsr2h,f,c
  7654  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7655  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7656  000568  500A               	movf	??_UART_buff_put,w,c
  7657  00056A  2407               	addwf	UART_buff_put@_this,w,c
  7658  00056C  6ED9               	movwf	fsr2l,c
  7659  00056E  500B               	movf	??_UART_buff_put+1,w,c
  7660  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  7661  000572  6EDA               	movwf	fsr2h,c
  7662  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  7663                           
  7664                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7665  000578  EE20 F0C8          	lfsr	2,200
  7666  00057C  5007               	movf	UART_buff_put@_this,w,c
  7667  00057E  26D9               	addwf	fsr2l,f,c
  7668  000580  5008               	movf	UART_buff_put@_this+1,w,c
  7669  000582  22DA               	addwfc	fsr2h,f,c
  7670  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7671  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7672  00058C  0E00               	movlw	0
  7673  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7674  000590  0EC8               	movlw	200
  7675  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7676  000594  EC12  F009         	call	_UART_buff_modulo_inc	;wreg free
  7677  000598  EE20 F0C8          	lfsr	2,200
  7678  00059C  5007               	movf	UART_buff_put@_this,w,c
  7679  00059E  26D9               	addwf	fsr2l,f,c
  7680  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  7681  0005A2  22DA               	addwfc	fsr2h,f,c
  7682  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7683  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7684                           
  7685                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7686  0005AC  EE20 F0CA          	lfsr	2,202
  7687  0005B0  5007               	movf	UART_buff_put@_this,w,c
  7688  0005B2  26D9               	addwf	fsr2l,f,c
  7689  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  7690  0005B6  22DA               	addwfc	fsr2h,f,c
  7691  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7692  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7693  0005C0  0E00               	movlw	0
  7694  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7695  0005C4  0EC8               	movlw	200
  7696  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7697  0005C8  EC12  F009         	call	_UART_buff_modulo_inc	;wreg free
  7698  0005CC  EE20 F0CA          	lfsr	2,202
  7699  0005D0  5007               	movf	UART_buff_put@_this,w,c
  7700  0005D2  26D9               	addwf	fsr2l,f,c
  7701  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  7702  0005D6  22DA               	addwfc	fsr2h,f,c
  7703  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7704  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7705  0005E0  0012               	return	
  7706  0005E2                     __end_of_UART_buff_put:
  7707                           	opt stack 0
  7708                           pclatu	equ	0xFFB
  7709                           pclath	equ	0xFFA
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           intcon2	equ	0xFF1
  7718                           indf0	equ	0xFEF
  7719                           postinc0	equ	0xFEE
  7720                           fsr0h	equ	0xFEA
  7721                           fsr0l	equ	0xFE9
  7722                           wreg	equ	0xFE8
  7723                           postdec1	equ	0xFE5
  7724                           fsr1h	equ	0xFE2
  7725                           fsr1l	equ	0xFE1
  7726                           indf2	equ	0xFDF
  7727                           postinc2	equ	0xFDE
  7728                           postdec2	equ	0xFDD
  7729                           plusw2	equ	0xFDB
  7730                           fsr2h	equ	0xFDA
  7731                           fsr2l	equ	0xFD9
  7732                           status	equ	0xFD8
  7733                           
  7734 ;; *************** function _UART_buff_modulo_inc *****************
  7735 ;; Defined at:
  7736 ;;		line 106 in file "UART.c"
  7737 ;; Parameters:    Size  Location     Type
  7738 ;;  value           2    0[COMRAM] const unsigned int 
  7739 ;;  modulus         2    2[COMRAM] const unsigned int 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  my_value        2    4[COMRAM] unsigned int 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  2    0[COMRAM] unsigned int 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7751 ;;      Params:         4       0       0       0       0       0       0
  7752 ;;      Locals:         2       0       0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0
  7754 ;;      Totals:         6       0       0       0       0       0       0
  7755 ;;Total ram usage:        6 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; This function calls:
  7758 ;;		Nothing
  7759 ;; This function is called by:
  7760 ;;		_UART_buff_put
  7761 ;;		_UART_buff_get
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text51
  7766  001224                     __ptext51:
  7767                           	opt stack 0
  7768  001224                     _UART_buff_modulo_inc:
  7769                           	opt stack 22
  7770                           
  7771                           ;UART.c: 107: unsigned int my_value = value + 1;
  7772                           
  7773                           ;incstack = 0
  7774  001224  0E01               	movlw	1
  7775  001226  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7776  001228  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7777  00122A  0E00               	movlw	0
  7778  00122C  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7779  00122E  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7780                           
  7781                           ;UART.c: 108: if (my_value >= modulus) {
  7782  001230  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7783  001232  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7784  001234  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7785  001236  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7786  001238  A0D8               	btfss	status,0,c
  7787  00123A  D004               	goto	i2l2470
  7788                           
  7789                           ;UART.c: 109: my_value = 0;
  7790  00123C  0E00               	movlw	0
  7791  00123E  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7792  001240  0E00               	movlw	0
  7793  001242  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7794  001244                     i2l2470:
  7795                           
  7796                           ;UART.c: 110: }
  7797                           ;UART.c: 111: return (my_value);
  7798  001244  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7799  001248  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7800  00124C  0012               	return	
  7801  00124E                     __end_of_UART_buff_modulo_inc:
  7802                           	opt stack 0
  7803                           pclatu	equ	0xFFB
  7804                           pclath	equ	0xFFA
  7805                           tblptru	equ	0xFF8
  7806                           tblptrh	equ	0xFF7
  7807                           tblptrl	equ	0xFF6
  7808                           tablat	equ	0xFF5
  7809                           prodh	equ	0xFF4
  7810                           prodl	equ	0xFF3
  7811                           intcon	equ	0xFF2
  7812                           intcon2	equ	0xFF1
  7813                           indf0	equ	0xFEF
  7814                           postinc0	equ	0xFEE
  7815                           fsr0h	equ	0xFEA
  7816                           fsr0l	equ	0xFE9
  7817                           wreg	equ	0xFE8
  7818                           postdec1	equ	0xFE5
  7819                           fsr1h	equ	0xFE2
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           plusw2	equ	0xFDB
  7825                           fsr2h	equ	0xFDA
  7826                           fsr2l	equ	0xFD9
  7827                           status	equ	0xFD8
  7828                           pclatu	equ	0xFFB
  7829                           pclath	equ	0xFFA
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           intcon2	equ	0xFF1
  7838                           indf0	equ	0xFEF
  7839                           postinc0	equ	0xFEE
  7840                           fsr0h	equ	0xFEA
  7841                           fsr0l	equ	0xFE9
  7842                           wreg	equ	0xFE8
  7843                           postdec1	equ	0xFE5
  7844                           fsr1h	equ	0xFE2
  7845                           fsr1l	equ	0xFE1
  7846                           indf2	equ	0xFDF
  7847                           postinc2	equ	0xFDE
  7848                           postdec2	equ	0xFDD
  7849                           plusw2	equ	0xFDB
  7850                           fsr2h	equ	0xFDA
  7851                           fsr2l	equ	0xFD9
  7852                           status	equ	0xFD8
  7853                           
  7854                           	psect	rparam
  7855  0000                     pclatu	equ	0xFFB
  7856                           pclath	equ	0xFFA
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon2	equ	0xFF1
  7865                           indf0	equ	0xFEF
  7866                           postinc0	equ	0xFEE
  7867                           fsr0h	equ	0xFEA
  7868                           fsr0l	equ	0xFE9
  7869                           wreg	equ	0xFE8
  7870                           postdec1	equ	0xFE5
  7871                           fsr1h	equ	0xFE2
  7872                           fsr1l	equ	0xFE1
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           plusw2	equ	0xFDB
  7877                           fsr2h	equ	0xFDA
  7878                           fsr2l	equ	0xFD9
  7879                           status	equ	0xFD8
  7880                           
  7881                           	psect	temp
  7882  000045                     btemp:
  7883                           	opt stack 0
  7884  000045                     	ds	1
  7885  0000                     int$flags	set	btemp
  7886                           pclatu	equ	0xFFB
  7887                           pclath	equ	0xFFA
  7888                           tblptru	equ	0xFF8
  7889                           tblptrh	equ	0xFF7
  7890                           tblptrl	equ	0xFF6
  7891                           tablat	equ	0xFF5
  7892                           prodh	equ	0xFF4
  7893                           prodl	equ	0xFF3
  7894                           intcon	equ	0xFF2
  7895                           intcon2	equ	0xFF1
  7896                           indf0	equ	0xFEF
  7897                           postinc0	equ	0xFEE
  7898                           fsr0h	equ	0xFEA
  7899                           fsr0l	equ	0xFE9
  7900                           wreg	equ	0xFE8
  7901                           postdec1	equ	0xFE5
  7902                           fsr1h	equ	0xFE2
  7903                           fsr1l	equ	0xFE1
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           plusw2	equ	0xFDB
  7908                           fsr2h	equ	0xFDA
  7909                           fsr2l	equ	0xFD9
  7910                           status	equ	0xFD8


Data Sizes:
    Strings     41
    Constant    480
    Data        10
    BSS         956
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      68
    BANK0           160     25     146
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_5(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[15]), STR_3(CODE[16]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1388(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _respondChargerAsECU->_ToSend
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _ledDebug->_time_Set
    _ledDebug->_time_get
    _Splash->_NokiaStr
    _gotoXy->_LCDwrite
    _NokiaStr->_LcdCharacter
    _LcdCharacter->_LCDwrite
    _SetBMM->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _CRCcheck->_crcBufS_get
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _SYSTEM_Initialize->_TMR0_Initialize
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondChargerAsECU->_sendData
    _NokiaStr->_LcdCharacter
    _SetBMM->_receiveData
    _receiveData->_CRCcheck
    _ToSend->_FastTransfer_buffer_put

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   32721
                              _Delay
                         _NokiaStart
                  _SYSTEM_Initialize
                             _SetBMM
                             _Splash
                           _clearLcd
                           _ledDebug
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12699
                          _Precharge
                         _SetCharger
                        _receiveData
                _respondChargerAsECU
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  0     0      0    5596
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     828
                                              0 BANK0      3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0    1005
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0     130
                           _time_Set
                           _time_get
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Splash                                               0     0      0    3497
                           _NokiaStr
                             _gotoXy
 ---------------------------------------------------------------------------------
 (2) _gotoXy                                               2     1      1    1523
                                             34 COMRAM     2     1      1
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _NokiaStr                                             2     0      2    1974
                                             36 COMRAM     2     0      2
                       _LcdCharacter
 ---------------------------------------------------------------------------------
 (3) _LcdCharacter                                         5     5      0    1755
                                             34 COMRAM     2     2      0
                                              0 BANK0      3     3      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SetBMM                                               0     0      0   10866
                              _Delay
                             _ToSend
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                              0 BANK0      5     5      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1761
                                             37 COMRAM     1     1      0
                                              2 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    3384
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0    1307
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1239
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     838
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _SetBMM
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _sendData
       _CRC8
       _FastTransfer_buffer_flush
         _memset
       _crcBufS_put
   _Splash
     _NokiaStr
       _LcdCharacter
         _LCDwrite
           _SPI1_Exchange8bit
           ___wmul (ARG)
         ___wmul
     _gotoXy
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _clearLcd
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _ledDebug
     _time_Set
     _time_get
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondChargerAsECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     19      92       4       91.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     408       9        0.0%
DATA                 0      0     408      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu May 12 23:03:47 2016

                      _SPI1_Exchange8bit 139A        __end_of_FastTransfer_buffer_flush 0E70  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l50 0FFA  
                   __end_of_LcdCharacter 0C2A                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l601 099C                                      l354 0F92  
                                    l188 13A2                                      l380 00FC  
                                    l623 1026                                      l456 09E4  
                                    l609 09DE                                      l634 1032  
                                    l468 0A78                                      l629 102C  
                                    l639 1038                                      l594 0994  
                                    l694 134E                                      l696 1350  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                    ??_SPI1_Exchange8bit 001B     FastTransfer_buffer_flush@clearBuffer 0025  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_LVP$OFF 000000  
                                   l3106 0F98                                     l3108 0F9E  
                                   l3060 0FEA                                     l3302 128E  
                                   l3150 05F6                                     l3222 09E6  
                                   l3206 0D4E                                     l3128 037C  
                                   l3240 0A70                                     l3400 02E0  
                                   l3208 0D54                                     l3072 101C  
                                   l3162 067A                                     l3146 05EC  
                                   l3170 07A6                                     l3226 09FC  
                                   l3082 1156                                     l3250 103E  
                                   l3074 101E                                     l3092 0F66  
                                   l3236 0A50                                     l3412 0344  
                                   l3420 0350                                     l3260 0892  
                                   l3086 1166                                     l3254 087C  
                                   l2296 121A                                     l3328 00B2  
                                   l3440 09AC                                     l3432 0978  
                                   l3272 08E4                                     l3194 0F26  
                                   l3098 0F7C                                     l3178 082C  
                                   l3338 00F2                                     l3258 088C  
                                   l3540 0D26                                     l3284 0BB6  
                                   l3444 09C2                                     l3428 0962  
                                   l3268 08BC                                     l3276 090C  
                                   l3198 0F42                                     l3390 02D4  
                                   l3374 0234                                     l3294 0C1E  
                                   l3278 092C                                     l3462 0DDA  
                                   l3376 023A                                     l3368 019A  
                                   l3288 0BCC                                     l3298 127E  
                                   l3378 024E                                     l3494 11D2  
                                   l2880 10E0                                     l3498 11E6  
                                   l3586 0FD2                                     l3588 0FDE  
                   receiveData@crcHolder 00DD                                     STR_1 7FFB  
                                   STR_2 7FFB                                     STR_3 7FD5  
                                   STR_4 7FE5                                     STR_5 7FF4  
                                   _CRC8 0F60                                     u2020 0786  
                                   u2041 037A                                     u2220 08DC  
                                   _LATA 000F89                                     u2230 0904  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2227 08D2                                     u2237 08FA  
                                   u2351 013E                                     u1690 10DE  
                                   u2647 0F2C                                     i2l62 1148  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART2_Write 0FE8                                     _main 0FAA  
                  ??_respondChargerAsECU 0027                          _TMR0_StartTimer 13E6  
                                   _time 0027                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04C8                                     start 00AC  
              __end_of_SPI1_Exchange8bit 13AA                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 114C                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 11A4  
                       __end_of_CRCcheck 0A7A           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 13B8                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l140 004E  
                                  i2l142 005A                                    i2l144 0066  
                                  i2l148 0070                         __end_of_LCDwrite 135C  
                                  i2l513 0B9A                                    i2l544 1310  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 0F14  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 00E9  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 108E  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _Start 002B  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 0088  
                         __CFG_EBTRB$OFF 000000                                    _group 002D  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 13D2  
                         ?_EUSART2_Write 0001                                    tablat 000FF5  
                   __size_of_crcBufS_get 00E2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0FAA                          CRCcheck@SentCRC 00D0  
                        __initialization 0C2A                             __end_of_main 0FE8  
                             ToSend@what 00D2                                   ??_CRC8 001E  
                      LcdCharacter@index 00D1              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0027                         __end_of_NokiaStr 11FA  
                          __activetblptr 000002                            SetMux@channel 001B  
                      SetCharger@Current 00D0                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001                               _SetCharger 0DA2  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 13EA  
             __end_of_EUSART2_Initialize 108E                 _eusart2TxBufferRemaining 0043  
                             Precharge@i 00D1                        SetCharger@Voltage 00D1  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 0A7A                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   Delay@i 0020  
                                 i2l2470 1244                           __CFG_WDTEN$OFF 000000  
                                 i2l2720 0554                                   i2l2714 04E8  
                                 i2l2810 11CC                                   i2l2802 11AC  
                                 i2l2734 0B96                                   i2l2822 10B8  
            UART_buff_modulo_inc@modulus 0003                                   i2l2796 1144  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                  SPI1_Exchange8bit@data 001B                         __end_of_clearLcd 129E  
             __size_of_SPI1_Exchange8bit 0010                         __end_of_ledDebug 10F0  
                                 _SetBMM 0CB2                           __CFG_XINST$OFF 000000  
                  __size_of_LcdCharacter 008C                                   _ToSend 1326  
                                 _SetMux 1022                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                                   _Splash 10F0  
                          _output_buffer 0300                         crcBufS_get@space 001E  
                                 ___wmul 12C4                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _gotoXy 124E                                   _memset 114C  
                                 clear_0 0C30                                   clear_1 0C3C  
                                 clear_2 0C48                                   clear_3 0C54  
                                 clear_4 0C60                                   clear_5 0C6C  
                     __size_of_Precharge 009E                                   _printf 0872  
                                 _rx_len 0040                         __end_of_sendData 0DA2  
                           __pdataCOMRAM 0044                         __end_of_time_Set 1308  
                       __end_of_time_get 139A                             __mediumconst 7DF4  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                   _EUSART2_Transmit_ISR 111E             __end_of_UART_buff_modulo_inc 124E  
                        ??_EUSART2_Write 001B            __size_of_INTERRUPT_Initialize 000C  
                        _eusart2RxBuffer 0093                             _LcdCharacter 0B9E  
                      _SYSTEM_Initialize 135C                          _eusart2TxBuffer 009B  
                             __accesstop 0060                  __end_of__initialization 0CA4  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                              ?_LCDwrite 0021                            __end_of_Delay 0F60  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 079C  
                           __pidataBANK0 13DC                      ??_SYSTEM_Initialize 001D  
                       crcBufS_put@_this 001B   __end_of_FastTransfer_buffer_modulo_inc 1224  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 11FA  
                      ??_SPI1_Initialize 001B                              NokiaStr@str 0025  
                          __end_of_putch 13DC             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0026                    LcdCharacter@character 00D0  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0B9E                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05E2                                  ??_Delay 001F  
                            ?_SetCharger 00D0                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 1326                _FastTransfer_buffer_flush 0E0E  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 1372                   receiveData@holder_1388 00E2  
                                ??_putch 001C                      _addressErrorCounter 00AF  
                            ?_NokiaStart 0001                            _eusart2RxHead 0036  
                          _eusart2TxHead 0038                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                     __end_of_FONTLOOKUP 7FD5                            _eusart2RxTail 0037  
                          _eusart2TxTail 0039                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 09E4                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 0025  
                                ?_SetBMM 0001                               ??_LCDwrite 0022  
                   __size_of_receiveData 02A4                                  ?_ToSend 00D2  
                                ?_SetMux 0001                       __CFG_CCP2MX$PORTC1 000000  
                                ?_Splash 0001                                  ?___wmul 001B  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_gotoXy 0023                                  ?_memset 001B  
                             _crc_buffer 00BF                                  ?_printf 001D  
                       time_Set@WhatTime 001D                       UART_buff_put@_this 0007  
                              ?_clearLcd 0001                                  _LEDtime 00A3  
                                _OSCCON2 000FD2              __end_of_EUSART2_Receive_ISR 11D0  
           UART_buff_modulo_inc@my_value 0005                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                ?_ledDebug 0001  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP1ADD 000FC8                      sendData@whereToSend 00D1  
                    _receiveArrayAddress 002F                                  _SSP1BUF 000FC9  
            __end_of_respondChargerAsECU 0EC4                                ?_sendData 0001  
                      _alignErrorCounter 00B1                               ??_NokiaStr 0027  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_SetBMM 0078  
                              ?_time_Set 001B                          __size_of_ToSend 001C  
                        __size_of_SetMux 0038                      __size_of_SetCharger 006C  
                              ?_time_get 001B                                _AKNAKsend 0033  
                        __size_of_Splash 002E                     _UART_buff_modulo_inc 1224  
                        __size_of___wmul 0026                                  _calc_CS 0034  
                                __pcinit 0C2A                      __size_of_NokiaStart 0092  
                        __size_of_gotoXy 0028                          __size_of_memset 002C  
                                __ramtop 0600                                  __ptext0 0FAA  
                                __ptext1 129E                                  __ptext2 0E70  
                                __ptext3 0DA2                                  __ptext4 0872  
                                __ptext5 13D2                                  __ptext6 0FE8  
                                __ptext7 1022                                  __ptext8 0946  
                                __ptext9 10C0                          __size_of_printf 00D4  
                              _T0CONbits 000FD5                    _OSCILLATOR_Initialize 13AA  
                 ??_EUSART2_Transmit_ISR 0001                  _FastTransfer_buffer_put 0354  
                  CRCcheck@calculatedCRC 00D1                 ??_PIN_MANAGER_Initialize 001B  
                             ??_clearLcd 0023             crcBufS_status_put@wantedTime 0023  
                             ??_ledDebug 001E                            ??_crcBufS_get 001F  
                          ??_crcBufS_put 0020               __size_of_SYSTEM_Initialize 0016  
                   end_of_initialization 0CA4                                Delay@wait 001B  
                                gotoXy@x 0024                                  gotoXy@y 0023  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7DF4  
                             ??_sendData 00D0                       _EUSART2_Initialize 105A  
                             ??_time_Set 001D                               ??_time_get 001D  
                                printf@c 0024                                  printf@f 001D  
                  ?_UART_buff_modulo_inc 0001                     __size_of_updateComms 0026  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                    CRCcheck@arrayHolder 00D2                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 00B5                               _rx_address 003E  
                           LCDwrite@data 0021                             LCDwrite@mode 0022  
                              _TRISBbits 000F93                     ??_EUSART2_Initialize 001B  
     __size_of_FastTransfer_buffer_flush 0062                          _SPI1_Initialize 13B8  
                         _UART_buff_size 1372                      __end_of_crcBufS_get 06C4  
                    __end_of_crcBufS_put 079C                        __size_of_CRCcheck 0096  
                        Precharge@i_1680 00D3                            _moduleAddress 003C  
                   _timer0ReloadVal16bit 0041                           __end_of_SetBMM 0D2A  
                             CRCcheck@rt 00D5                           __end_of_ToSend 1342  
                         __end_of_SetMux 105A                        __size_of_LCDwrite 001A  
           __end_of_INTERRUPT_Initialize 13D2                           __end_of_Splash 111E  
                        _crcErrorCounter 00B3                           __end_of___wmul 12EA  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 13EA  
              ??_FastTransfer_buffer_put 00D0                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 1276                           __end_of_memset 1178  
                      crcBufS_put@status 001F                           __end_of_printf 0946  
                           receiveData@r 00E7                             receiveData@u 00E5  
                           ??_SetCharger 0027                      start_initialization 0C2A  
               __size_of_TMR0_Initialize 002C          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 0025                              putch@txData 001C  
                           ??_NokiaStart 0025                    __end_of_EUSART2_Write 1022  
                         UART_buff_get@c 000B                   __end_of_UART_buff_size 1388  
                         UART_buff_put@c 0009                                 ??_SetBMM 0027  
                              _Precharge 0946                                 ??_ToSend 0026  
                               ??_SetMux 001B                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                                 ??_Splash 0027  
                        crcBufS_get@time 001D                        __size_of_NokiaStr 002A  
                     __end_of_SetCharger 0E0E                                 ??___wmul 001F  
                            __pdataBANK0 00E9                                 ??_gotoXy 0024  
                               ??_memset 0021                                 ??_printf 0021  
                     __end_of_NokiaStart 0B0C                           _eusart2RxCount 0035  
                            __pbssCOMRAM 0027            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00D0                  __end_of_SPI1_Initialize 13C6  
                      __size_of_clearLcd 0028                              _crcBufS_get 05E2  
                            _crcBufS_put 06C4                      EUSART2_Write@txData 001B  
                      __size_of_ledDebug 0030                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00D7  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00D2  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                               ?_Precharge 0001  
                 _PIN_MANAGER_Initialize 0EC4                        __size_of_sendData 0078  
                              __pintcode 0008                            __pmediumconst 7DF4  
                      __size_of_time_Set 001E                        __size_of_time_get 0012  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 13C6  
                           _receiveArray 0060                        ??_TMR0_Initialize 001B  
           __size_of_EUSART2_Receive_ISR 002C                                 _CRCcheck 09E4  
                         ___wmul@product 001F                                 _LATBbits 000F8A  
                               _LATCbits 000F8B                      UART_buff_size@_this 0001  
           __size_of_respondChargerAsECU 0054                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 1342  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u154_40 0B2A  
                               i2u165_40 10A8                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0354  
                               _SSP1CON1 000FC6                                 _SSP1STAT 000FC7  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0200  
                              _rx_buffer 0400                        ___wmul@multiplier 001B  
                            _lastLEDTime 00A7                               printf@flag 0021  
                          _UART_buff_get 0B0C                            _UART_buff_put 04C8  
                         Precharge@OnOff 00D0            __size_of_EUSART2_Transmit_ISR 002E  
                       ?_SPI1_Initialize 0001                           SetCharger@mode 00D2  
                            _INTCON2bits 000FF1                                copy_data0 0C86  
                  ?_INTERRUPT_Initialize 0001                            ?_LcdCharacter 0001  
                      _sendStructAddress 0031                            ??_updateComms 0027  
                               _NokiaStr 11D0                                 __Hrparam 0000  
                            ??_Precharge 0024                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                            time_Set@value 001B  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                      ??_TMR0_StartTimer 001B                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                              sendData@i 00D3                                 _clearLcd 1276  
                               _ledDebug 10C0                 crcBufS_status_put@status 001E  
                               __ptext10 1388                                 __ptext11 12EA  
                               __ptext20 0E0E                                 __ptext12 10F0  
                               __ptext21 114C                                 __ptext13 124E  
                               __ptext30 135C                                 __ptext22 00B0  
                               __ptext14 11D0                                 __ptext31 1178  
                               __ptext23 09E4                                 __ptext15 0B9E  
                               __ptext40 139A                                 __ptext32 13E6  
                               __ptext24 079C                                 __ptext16 12C4  
                               __ptext41 13B8                                 __ptext33 0EC4  
                               __ptext25 05E2                                 __ptext17 0CB2  
                               __ptext50 04C8                                 __ptext42 0F14  
                               __ptext34 13AA                                 __ptext26 0F60  
                               __ptext18 0D2A                                 __ptext51 1224  
                               __ptext35 13C6                                 __ptext27 1326  
                               __ptext19 06C4                                 __ptext44 111E  
                               __ptext36 105A                                 __ptext28 0354  
                               __ptext45 11A4                                 __ptext37 0A7A  
                               __ptext29 11FA                                 __ptext46 108E  
                               __ptext38 1276                                 __ptext47 1372  
                               __ptext39 1342                                 __ptext48 0B0C  
                               __ptext49 1308                             _SSP1CON1bits 000FC6  
                         ??_LcdCharacter 0023                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 003D                            __size_of_main 003E  
                            _receiveData 00B0                           _Transmit_stall 0044  
                               _sendData 0D2A                                 _talkTime 00AB  
                             _RC1STAbits 000FAB                                 _time_Set 12EA  
                             _RC2STAbits 000F71                              clearLcd@res 0023  
                               _time_get 1388                               _FONTLOOKUP 7DF5  
                               int$flags 0045                             _serial_write 00BD  
                    __end_of_updateComms 12C4       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 1308                        receiveData@holder 00DF  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00B7  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                  ?_PIN_MANAGER_Initialize 0001  
           __end_of_EUSART1_Transmit_ISR 10C0                              _ring_buffer 0100  
             ?_FastTransfer_buffer_flush 0023                              _serial_peek 00B9  
                            _serial_read 00BB                 ?_FastTransfer_buffer_put 0021  
                               printf@ap 0022                                 printf@cp 0025  
          __size_of_UART_buff_modulo_inc 002A                          ??_UART_buff_get 0009  
                        ??_UART_buff_put 000A                   __size_of_EUSART2_Write 003A  
                    _EUSART2_Receive_ISR 11A4    FastTransfer_buffer_modulo_inc@modulus 001D  
                    _respondChargerAsECU 0E70                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1178                receiveData@crcHolder_1389 00DE  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0872                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0F14         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                     ?_respondChargerAsECU 0001  
                            _updateComms 129E  
