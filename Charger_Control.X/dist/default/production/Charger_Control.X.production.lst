

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu May 05 21:22:57 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           	psect	idataCOMRAM
    72  0012D4                     __pidataCOMRAM:
    73                           	opt stack 0
    74                           
    75                           ;initializer for _Transmit_stall
    76  0012D4  01                 	db	1
    77                           
    78                           	psect	idataBANK0
    79  0012C6                     __pidataBANK0:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _ChargerData
    83  0012C6  4D                 	db	77
    84  0012C7  2C                 	db	44
    85  0012C8  00                 	db	0
    86  0012C9  2C                 	db	44
    87  0012CA  00                 	db	0
    88  0012CB  2C                 	db	44
    89  0012CC  00                 	db	0
    90  0012CD  2C                 	db	44
    91  0012CE  45                 	db	69
    92                           
    93                           	psect	mediumconst
    94  007E06                     __pmediumconst:
    95                           	opt stack 0
    96  007E06  00                 	db	0
    97  007E07                     _FONTLOOKUP:
    98                           	opt stack 0
    99  007E07  00                 	db	0
   100  007E08  00                 	db	0
   101  007E09  00                 	db	0
   102  007E0A  00                 	db	0
   103  007E0B  00                 	db	0
   104  007E0C  00                 	db	0
   105  007E0D  00                 	db	0
   106  007E0E  5F                 	db	95
   107  007E0F  00                 	db	0
   108  007E10  00                 	db	0
   109  007E11  00                 	db	0
   110  007E12  07                 	db	7
   111  007E13  00                 	db	0
   112  007E14  07                 	db	7
   113  007E15  00                 	db	0
   114  007E16  14                 	db	20
   115  007E17  7F                 	db	127
   116  007E18  14                 	db	20
   117  007E19  7F                 	db	127
   118  007E1A  14                 	db	20
   119  007E1B  24                 	db	36
   120  007E1C  2A                 	db	42
   121  007E1D  7F                 	db	127
   122  007E1E  2A                 	db	42
   123  007E1F  12                 	db	18
   124  007E20  23                 	db	35
   125  007E21  13                 	db	19
   126  007E22  08                 	db	8
   127  007E23  64                 	db	100
   128  007E24  62                 	db	98
   129  007E25  36                 	db	54
   130  007E26  49                 	db	73
   131  007E27  55                 	db	85
   132  007E28  22                 	db	34
   133  007E29  50                 	db	80
   134  007E2A  00                 	db	0
   135  007E2B  05                 	db	5
   136  007E2C  03                 	db	3
   137  007E2D  00                 	db	0
   138  007E2E  00                 	db	0
   139  007E2F  00                 	db	0
   140  007E30  1C                 	db	28
   141  007E31  22                 	db	34
   142  007E32  41                 	db	65
   143  007E33  00                 	db	0
   144  007E34  00                 	db	0
   145  007E35  41                 	db	65
   146  007E36  22                 	db	34
   147  007E37  1C                 	db	28
   148  007E38  00                 	db	0
   149  007E39  14                 	db	20
   150  007E3A  08                 	db	8
   151  007E3B  3E                 	db	62
   152  007E3C  08                 	db	8
   153  007E3D  14                 	db	20
   154  007E3E  08                 	db	8
   155  007E3F  08                 	db	8
   156  007E40  3E                 	db	62
   157  007E41  08                 	db	8
   158  007E42  08                 	db	8
   159  007E43  00                 	db	0
   160  007E44  50                 	db	80
   161  007E45  30                 	db	48
   162  007E46  00                 	db	0
   163  007E47  00                 	db	0
   164  007E48  08                 	db	8
   165  007E49  08                 	db	8
   166  007E4A  08                 	db	8
   167  007E4B  08                 	db	8
   168  007E4C  08                 	db	8
   169  007E4D  00                 	db	0
   170  007E4E  60                 	db	96
   171  007E4F  60                 	db	96
   172  007E50  00                 	db	0
   173  007E51  00                 	db	0
   174  007E52  20                 	db	32
   175  007E53  10                 	db	16
   176  007E54  08                 	db	8
   177  007E55  04                 	db	4
   178  007E56  02                 	db	2
   179  007E57  3E                 	db	62
   180  007E58  51                 	db	81
   181  007E59  49                 	db	73
   182  007E5A  45                 	db	69
   183  007E5B  3E                 	db	62
   184  007E5C  00                 	db	0
   185  007E5D  42                 	db	66
   186  007E5E  7F                 	db	127
   187  007E5F  40                 	db	64
   188  007E60  00                 	db	0
   189  007E61  42                 	db	66
   190  007E62  61                 	db	97
   191  007E63  51                 	db	81
   192  007E64  49                 	db	73
   193  007E65  46                 	db	70
   194  007E66  21                 	db	33
   195  007E67  41                 	db	65
   196  007E68  45                 	db	69
   197  007E69  4B                 	db	75
   198  007E6A  31                 	db	49
   199  007E6B  18                 	db	24
   200  007E6C  14                 	db	20
   201  007E6D  12                 	db	18
   202  007E6E  7F                 	db	127
   203  007E6F  10                 	db	16
   204  007E70  27                 	db	39
   205  007E71  45                 	db	69
   206  007E72  45                 	db	69
   207  007E73  45                 	db	69
   208  007E74  39                 	db	57
   209  007E75  3C                 	db	60
   210  007E76  4A                 	db	74
   211  007E77  49                 	db	73
   212  007E78  49                 	db	73
   213  007E79  30                 	db	48
   214  007E7A  01                 	db	1
   215  007E7B  71                 	db	113
   216  007E7C  09                 	db	9
   217  007E7D  05                 	db	5
   218  007E7E  03                 	db	3
   219  007E7F  36                 	db	54
   220  007E80  49                 	db	73
   221  007E81  49                 	db	73
   222  007E82  49                 	db	73
   223  007E83  36                 	db	54
   224  007E84  06                 	db	6
   225  007E85  49                 	db	73
   226  007E86  49                 	db	73
   227  007E87  29                 	db	41
   228  007E88  1E                 	db	30
   229  007E89  00                 	db	0
   230  007E8A  36                 	db	54
   231  007E8B  36                 	db	54
   232  007E8C  00                 	db	0
   233  007E8D  00                 	db	0
   234  007E8E  00                 	db	0
   235  007E8F  56                 	db	86
   236  007E90  36                 	db	54
   237  007E91  00                 	db	0
   238  007E92  00                 	db	0
   239  007E93  08                 	db	8
   240  007E94  14                 	db	20
   241  007E95  22                 	db	34
   242  007E96  41                 	db	65
   243  007E97  00                 	db	0
   244  007E98  14                 	db	20
   245  007E99  14                 	db	20
   246  007E9A  14                 	db	20
   247  007E9B  14                 	db	20
   248  007E9C  14                 	db	20
   249  007E9D  00                 	db	0
   250  007E9E  41                 	db	65
   251  007E9F  22                 	db	34
   252  007EA0  14                 	db	20
   253  007EA1  08                 	db	8
   254  007EA2  02                 	db	2
   255  007EA3  01                 	db	1
   256  007EA4  51                 	db	81
   257  007EA5  09                 	db	9
   258  007EA6  06                 	db	6
   259  007EA7  32                 	db	50
   260  007EA8  49                 	db	73
   261  007EA9  79                 	db	121
   262  007EAA  41                 	db	65
   263  007EAB  3E                 	db	62
   264  007EAC  7E                 	db	126
   265  007EAD  11                 	db	17
   266  007EAE  11                 	db	17
   267  007EAF  11                 	db	17
   268  007EB0  7E                 	db	126
   269  007EB1  7F                 	db	127
   270  007EB2  49                 	db	73
   271  007EB3  49                 	db	73
   272  007EB4  49                 	db	73
   273  007EB5  36                 	db	54
   274  007EB6  3E                 	db	62
   275  007EB7  41                 	db	65
   276  007EB8  41                 	db	65
   277  007EB9  41                 	db	65
   278  007EBA  22                 	db	34
   279  007EBB  7F                 	db	127
   280  007EBC  41                 	db	65
   281  007EBD  41                 	db	65
   282  007EBE  22                 	db	34
   283  007EBF  1C                 	db	28
   284  007EC0  7F                 	db	127
   285  007EC1  49                 	db	73
   286  007EC2  49                 	db	73
   287  007EC3  49                 	db	73
   288  007EC4  41                 	db	65
   289  007EC5  7F                 	db	127
   290  007EC6  09                 	db	9
   291  007EC7  09                 	db	9
   292  007EC8  09                 	db	9
   293  007EC9  01                 	db	1
   294  007ECA  3E                 	db	62
   295  007ECB  41                 	db	65
   296  007ECC  49                 	db	73
   297  007ECD  49                 	db	73
   298  007ECE  7A                 	db	122
   299  007ECF  7F                 	db	127
   300  007ED0  08                 	db	8
   301  007ED1  08                 	db	8
   302  007ED2  08                 	db	8
   303  007ED3  7F                 	db	127
   304  007ED4  00                 	db	0
   305  007ED5  41                 	db	65
   306  007ED6  7F                 	db	127
   307  007ED7  41                 	db	65
   308  007ED8  00                 	db	0
   309  007ED9  20                 	db	32
   310  007EDA  40                 	db	64
   311  007EDB  41                 	db	65
   312  007EDC  3F                 	db	63
   313  007EDD  01                 	db	1
   314  007EDE  7F                 	db	127
   315  007EDF  08                 	db	8
   316  007EE0  14                 	db	20
   317  007EE1  22                 	db	34
   318  007EE2  41                 	db	65
   319  007EE3  7F                 	db	127
   320  007EE4  40                 	db	64
   321  007EE5  40                 	db	64
   322  007EE6  40                 	db	64
   323  007EE7  40                 	db	64
   324  007EE8  7F                 	db	127
   325  007EE9  02                 	db	2
   326  007EEA  0C                 	db	12
   327  007EEB  02                 	db	2
   328  007EEC  7F                 	db	127
   329  007EED  7F                 	db	127
   330  007EEE  04                 	db	4
   331  007EEF  08                 	db	8
   332  007EF0  10                 	db	16
   333  007EF1  7F                 	db	127
   334  007EF2  3E                 	db	62
   335  007EF3  41                 	db	65
   336  007EF4  41                 	db	65
   337  007EF5  41                 	db	65
   338  007EF6  3E                 	db	62
   339  007EF7  7F                 	db	127
   340  007EF8  09                 	db	9
   341  007EF9  09                 	db	9
   342  007EFA  09                 	db	9
   343  007EFB  06                 	db	6
   344  007EFC  3E                 	db	62
   345  007EFD  41                 	db	65
   346  007EFE  51                 	db	81
   347  007EFF  21                 	db	33
   348  007F00  5E                 	db	94
   349  007F01  7F                 	db	127
   350  007F02  09                 	db	9
   351  007F03  19                 	db	25
   352  007F04  29                 	db	41
   353  007F05  46                 	db	70
   354  007F06  46                 	db	70
   355  007F07  49                 	db	73
   356  007F08  49                 	db	73
   357  007F09  49                 	db	73
   358  007F0A  31                 	db	49
   359  007F0B  01                 	db	1
   360  007F0C  01                 	db	1
   361  007F0D  7F                 	db	127
   362  007F0E  01                 	db	1
   363  007F0F  01                 	db	1
   364  007F10  3F                 	db	63
   365  007F11  40                 	db	64
   366  007F12  40                 	db	64
   367  007F13  40                 	db	64
   368  007F14  3F                 	db	63
   369  007F15  1F                 	db	31
   370  007F16  20                 	db	32
   371  007F17  40                 	db	64
   372  007F18  20                 	db	32
   373  007F19  1F                 	db	31
   374  007F1A  3F                 	db	63
   375  007F1B  40                 	db	64
   376  007F1C  38                 	db	56
   377  007F1D  40                 	db	64
   378  007F1E  3F                 	db	63
   379  007F1F  63                 	db	99
   380  007F20  14                 	db	20
   381  007F21  08                 	db	8
   382  007F22  14                 	db	20
   383  007F23  63                 	db	99
   384  007F24  07                 	db	7
   385  007F25  08                 	db	8
   386  007F26  70                 	db	112
   387  007F27  08                 	db	8
   388  007F28  07                 	db	7
   389  007F29  61                 	db	97
   390  007F2A  51                 	db	81
   391  007F2B  49                 	db	73
   392  007F2C  45                 	db	69
   393  007F2D  43                 	db	67
   394  007F2E  00                 	db	0
   395  007F2F  7F                 	db	127
   396  007F30  41                 	db	65
   397  007F31  41                 	db	65
   398  007F32  00                 	db	0
   399  007F33  02                 	db	2
   400  007F34  04                 	db	4
   401  007F35  08                 	db	8
   402  007F36  10                 	db	16
   403  007F37  20                 	db	32
   404  007F38  00                 	db	0
   405  007F39  41                 	db	65
   406  007F3A  41                 	db	65
   407  007F3B  7F                 	db	127
   408  007F3C  00                 	db	0
   409  007F3D  04                 	db	4
   410  007F3E  02                 	db	2
   411  007F3F  01                 	db	1
   412  007F40  02                 	db	2
   413  007F41  04                 	db	4
   414  007F42  40                 	db	64
   415  007F43  40                 	db	64
   416  007F44  40                 	db	64
   417  007F45  40                 	db	64
   418  007F46  40                 	db	64
   419  007F47  00                 	db	0
   420  007F48  01                 	db	1
   421  007F49  02                 	db	2
   422  007F4A  04                 	db	4
   423  007F4B  00                 	db	0
   424  007F4C  20                 	db	32
   425  007F4D  54                 	db	84
   426  007F4E  54                 	db	84
   427  007F4F  54                 	db	84
   428  007F50  78                 	db	120
   429  007F51  7F                 	db	127
   430  007F52  48                 	db	72
   431  007F53  44                 	db	68
   432  007F54  44                 	db	68
   433  007F55  38                 	db	56
   434  007F56  38                 	db	56
   435  007F57  44                 	db	68
   436  007F58  44                 	db	68
   437  007F59  44                 	db	68
   438  007F5A  20                 	db	32
   439  007F5B  38                 	db	56
   440  007F5C  44                 	db	68
   441  007F5D  44                 	db	68
   442  007F5E  48                 	db	72
   443  007F5F  7F                 	db	127
   444  007F60  38                 	db	56
   445  007F61  54                 	db	84
   446  007F62  54                 	db	84
   447  007F63  54                 	db	84
   448  007F64  18                 	db	24
   449  007F65  08                 	db	8
   450  007F66  7E                 	db	126
   451  007F67  09                 	db	9
   452  007F68  01                 	db	1
   453  007F69  02                 	db	2
   454  007F6A  0C                 	db	12
   455  007F6B  52                 	db	82
   456  007F6C  52                 	db	82
   457  007F6D  52                 	db	82
   458  007F6E  3E                 	db	62
   459  007F6F  7F                 	db	127
   460  007F70  08                 	db	8
   461  007F71  04                 	db	4
   462  007F72  04                 	db	4
   463  007F73  78                 	db	120
   464  007F74  00                 	db	0
   465  007F75  44                 	db	68
   466  007F76  7D                 	db	125
   467  007F77  40                 	db	64
   468  007F78  00                 	db	0
   469  007F79  20                 	db	32
   470  007F7A  40                 	db	64
   471  007F7B  44                 	db	68
   472  007F7C  3D                 	db	61
   473  007F7D  00                 	db	0
   474  007F7E  7F                 	db	127
   475  007F7F  10                 	db	16
   476  007F80  28                 	db	40
   477  007F81  44                 	db	68
   478  007F82  00                 	db	0
   479  007F83  00                 	db	0
   480  007F84  41                 	db	65
   481  007F85  7F                 	db	127
   482  007F86  40                 	db	64
   483  007F87  00                 	db	0
   484  007F88  7C                 	db	124
   485  007F89  04                 	db	4
   486  007F8A  18                 	db	24
   487  007F8B  04                 	db	4
   488  007F8C  78                 	db	120
   489  007F8D  7C                 	db	124
   490  007F8E  08                 	db	8
   491  007F8F  04                 	db	4
   492  007F90  04                 	db	4
   493  007F91  78                 	db	120
   494  007F92  38                 	db	56
   495  007F93  44                 	db	68
   496  007F94  44                 	db	68
   497  007F95  44                 	db	68
   498  007F96  38                 	db	56
   499  007F97  7C                 	db	124
   500  007F98  14                 	db	20
   501  007F99  14                 	db	20
   502  007F9A  14                 	db	20
   503  007F9B  08                 	db	8
   504  007F9C  08                 	db	8
   505  007F9D  14                 	db	20
   506  007F9E  14                 	db	20
   507  007F9F  18                 	db	24
   508  007FA0  7C                 	db	124
   509  007FA1  7C                 	db	124
   510  007FA2  08                 	db	8
   511  007FA3  04                 	db	4
   512  007FA4  04                 	db	4
   513  007FA5  08                 	db	8
   514  007FA6  48                 	db	72
   515  007FA7  54                 	db	84
   516  007FA8  54                 	db	84
   517  007FA9  54                 	db	84
   518  007FAA  20                 	db	32
   519  007FAB  04                 	db	4
   520  007FAC  3F                 	db	63
   521  007FAD  44                 	db	68
   522  007FAE  40                 	db	64
   523  007FAF  20                 	db	32
   524  007FB0  3C                 	db	60
   525  007FB1  40                 	db	64
   526  007FB2  40                 	db	64
   527  007FB3  20                 	db	32
   528  007FB4  7C                 	db	124
   529  007FB5  1C                 	db	28
   530  007FB6  20                 	db	32
   531  007FB7  40                 	db	64
   532  007FB8  20                 	db	32
   533  007FB9  1C                 	db	28
   534  007FBA  3C                 	db	60
   535  007FBB  40                 	db	64
   536  007FBC  30                 	db	48
   537  007FBD  40                 	db	64
   538  007FBE  3C                 	db	60
   539  007FBF  44                 	db	68
   540  007FC0  28                 	db	40
   541  007FC1  10                 	db	16
   542  007FC2  28                 	db	40
   543  007FC3  44                 	db	68
   544  007FC4  0C                 	db	12
   545  007FC5  50                 	db	80
   546  007FC6  50                 	db	80
   547  007FC7  50                 	db	80
   548  007FC8  3C                 	db	60
   549  007FC9  44                 	db	68
   550  007FCA  64                 	db	100
   551  007FCB  54                 	db	84
   552  007FCC  4C                 	db	76
   553  007FCD  44                 	db	68
   554  007FCE  00                 	db	0
   555  007FCF  08                 	db	8
   556  007FD0  36                 	db	54
   557  007FD1  41                 	db	65
   558  007FD2  00                 	db	0
   559  007FD3  00                 	db	0
   560  007FD4  00                 	db	0
   561  007FD5  7F                 	db	127
   562  007FD6  00                 	db	0
   563  007FD7  00                 	db	0
   564  007FD8  00                 	db	0
   565  007FD9  41                 	db	65
   566  007FDA  36                 	db	54
   567  007FDB  08                 	db	8
   568  007FDC  00                 	db	0
   569  007FDD  10                 	db	16
   570  007FDE  08                 	db	8
   571  007FDF  08                 	db	8
   572  007FE0  10                 	db	16
   573  007FE1  08                 	db	8
   574  007FE2  78                 	db	120
   575  007FE3  46                 	db	70
   576  007FE4  41                 	db	65
   577  007FE5  46                 	db	70
   578  007FE6  78                 	db	120
   579  007FE7                     __end_of_FONTLOOKUP:
   580                           	opt stack 0
   581  007FE7                     STR_1:
   582  007FE7  48                 	db	72	;'H'
   583  007FE8  65                 	db	101	;'e'
   584  007FE9  6C                 	db	108	;'l'
   585  007FEA  6C                 	db	108	;'l'
   586  007FEB  6F                 	db	111	;'o'
   587  007FEC  20                 	db	32
   588  007FED  57                 	db	87	;'W'
   589  007FEE  6F                 	db	111	;'o'
   590  007FEF  72                 	db	114	;'r'
   591  007FF0  6C                 	db	108	;'l'
   592  007FF1  64                 	db	100	;'d'
   593  007FF2  21                 	db	33
   594  007FF3  00                 	db	0
   595  007FF4                     STR_4:
   596  007FF4  28                 	db	40
   597  007FF5  6E                 	db	110	;'n'
   598  007FF6  75                 	db	117	;'u'
   599  007FF7  6C                 	db	108	;'l'
   600  007FF8  6C                 	db	108	;'l'
   601  007FF9  29                 	db	41
   602  007FFA  00                 	db	0
   603  007FFB                     STR_2:
   604  007FFB  25                 	db	37
   605  007FFC  73                 	db	115	;'s'
   606  007FFD  00                 	db	0
   607  0000                     
   608                           ; #config settings
   609  007FFE  00                 	db	0	; dummy byte at the end
   610  0000                     
   611                           	psect	nvCOMRAM
   612  000041                     __pnvCOMRAM:
   613                           	opt stack 0
   614  000041                     _timer0ReloadVal16bit:
   615                           	opt stack 0
   616  000041                     	ds	2
   617  000043                     _eusart2TxBufferRemaining:
   618                           	opt stack 0
   619  000043                     	ds	1
   620  0000                     _ANSELA	set	3896
   621  0000                     _ANSELB	set	3897
   622  0000                     _ANSELC	set	3898
   623  0000                     _ANSELD	set	3899
   624  0000                     _ANSELE	set	3900
   625  0000                     _BAUD1CON	set	4024
   626  0000                     _BAUD2CON	set	3952
   627  0000                     _INTCON2bits	set	4081
   628  0000                     _INTCONbits	set	4082
   629  0000                     _IPR1bits	set	3999
   630  0000                     _IPR3bits	set	4005
   631  0000                     _LATA	set	3977
   632  0000                     _LATB	set	3978
   633  0000                     _LATBbits	set	3978
   634  0000                     _LATC	set	3979
   635  0000                     _LATCbits	set	3979
   636  0000                     _LATD	set	3980
   637  0000                     _LATE	set	3981
   638  0000                     _OSCCON	set	4051
   639  0000                     _OSCCON2	set	4050
   640  0000                     _OSCTUNE	set	3995
   641  0000                     _PIE1bits	set	3997
   642  0000                     _PIE3bits	set	4003
   643  0000                     _PIR1bits	set	3998
   644  0000                     _PIR3bits	set	4004
   645  0000                     _RC1STA	set	4011
   646  0000                     _RC1STAbits	set	4011
   647  0000                     _RC2STA	set	3953
   648  0000                     _RC2STAbits	set	3953
   649  0000                     _RCONbits	set	4048
   650  0000                     _RCREG1	set	4014
   651  0000                     _RCREG2	set	3956
   652  0000                     _SPBRG1	set	4015
   653  0000                     _SPBRG2	set	3957
   654  0000                     _SPBRGH1	set	4016
   655  0000                     _SPBRGH2	set	3958
   656  0000                     _SSP1ADD	set	4040
   657  0000                     _SSP1BUF	set	4041
   658  0000                     _SSP1CON1	set	4038
   659  0000                     _SSP1CON1bits	set	4038
   660  0000                     _SSP1STAT	set	4039
   661  0000                     _SSP1STATbits	set	4039
   662  0000                     _T0CON	set	4053
   663  0000                     _T0CONbits	set	4053
   664  0000                     _TMR0H	set	4055
   665  0000                     _TMR0L	set	4054
   666  0000                     _TRISA	set	3986
   667  0000                     _TRISB	set	3987
   668  0000                     _TRISBbits	set	3987
   669  0000                     _TRISC	set	3988
   670  0000                     _TRISD	set	3989
   671  0000                     _TRISE	set	3990
   672  0000                     _TX1STA	set	4012
   673  0000                     _TX2STA	set	3954
   674  0000                     _TXREG1	set	4013
   675  0000                     _TXREG2	set	3955
   676  0000                     _WPUB	set	3937
   677  0000                     _LATA3	set	31819
   678  0000                     _LATA6	set	31822
   679  0000                     _LATB0	set	31824
   680  0000                     _LATB1	set	31825
   681  0000                     _LATB3	set	31827
   682  0000                     _LATB4	set	31828
   683  0000                     _LATB5	set	31829
   684  0000                     _LATC0	set	31832
   685  0000                     _LATC1	set	31833
   686  0000                     _LATD0	set	31840
   687  0000                     _LATD3	set	31843
   688  0000                     _TRISA3	set	31891
   689  0000                     _TRISD0	set	31912
   690  0000                     _TRISD2	set	31914
   691  0000                     _TRISD3	set	31915
   692                           
   693                           	psect	cinit
   694  000AF4                     __pcinit:
   695                           	opt stack 0
   696  000AF4                     start_initialization:
   697                           	opt stack 0
   698  000AF4                     __initialization:
   699                           	opt stack 0
   700                           
   701                           ; Clear objects allocated to BANK4 (200 bytes)
   702  000AF4  EE04  F000         	lfsr	0,__pbssBANK4
   703  000AF8  0EC8               	movlw	200
   704  000AFA                     clear_0:
   705  000AFA  6AEE               	clrf	postinc0,c
   706  000AFC  06E8               	decf	wreg,f,c
   707  000AFE  E1FD               	bnz	clear_0
   708                           
   709                           ; Clear objects allocated to BANK3 (206 bytes)
   710  000B00  EE03  F000         	lfsr	0,__pbssBANK3
   711  000B04  0ECE               	movlw	206
   712  000B06                     clear_1:
   713  000B06  6AEE               	clrf	postinc0,c
   714  000B08  06E8               	decf	wreg,f,c
   715  000B0A  E1FD               	bnz	clear_1
   716                           
   717                           ; Clear objects allocated to BANK2 (206 bytes)
   718  000B0C  EE02  F000         	lfsr	0,__pbssBANK2
   719  000B10  0ECE               	movlw	206
   720  000B12                     clear_2:
   721  000B12  6AEE               	clrf	postinc0,c
   722  000B14  06E8               	decf	wreg,f,c
   723  000B16  E1FD               	bnz	clear_2
   724                           
   725                           ; Clear objects allocated to BANK1 (206 bytes)
   726  000B18  EE01  F000         	lfsr	0,__pbssBANK1
   727  000B1C  0ECE               	movlw	206
   728  000B1E                     clear_3:
   729  000B1E  6AEE               	clrf	postinc0,c
   730  000B20  06E8               	decf	wreg,f,c
   731  000B22  E1FD               	bnz	clear_3
   732                           
   733                           ; Clear objects allocated to BANK0 (98 bytes)
   734  000B24  EE00  F060         	lfsr	0,__pbssBANK0
   735  000B28  0E62               	movlw	98
   736  000B2A                     clear_4:
   737  000B2A  6AEE               	clrf	postinc0,c
   738  000B2C  06E8               	decf	wreg,f,c
   739  000B2E  E1FD               	bnz	clear_4
   740                           
   741                           ; Clear objects allocated to COMRAM (24 bytes)
   742  000B30  EE00  F029         	lfsr	0,__pbssCOMRAM
   743  000B34  0E18               	movlw	24
   744  000B36                     clear_5:
   745  000B36  6AEE               	clrf	postinc0,c
   746  000B38  06E8               	decf	wreg,f,c
   747  000B3A  E1FD               	bnz	clear_5
   748                           
   749                           ; Initialize objects allocated to BANK0 (9 bytes)
   750                           ; load TBLPTR registers with __pidataBANK0
   751  000B3C  0EC6               	movlw	low __pidataBANK0
   752  000B3E  6EF6               	movwf	tblptrl,c
   753  000B40  0E12               	movlw	high __pidataBANK0
   754  000B42  6EF7               	movwf	tblptrh,c
   755  000B44  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   756  000B46  6EF8               	movwf	tblptru,c
   757  000B48  EE00  F0DD         	lfsr	0,__pdataBANK0
   758  000B4C  EE10 F009          	lfsr	1,9
   759  000B50                     copy_data0:
   760  000B50  0009               	tblrd		*+
   761  000B52  CFF5 FFEE          	movff	tablat,postinc0
   762  000B56  50E5               	movf	postdec1,w,c
   763  000B58  50E1               	movf	fsr1l,w,c
   764  000B5A  E1FA               	bnz	copy_data0
   765                           
   766                           ; Initialize objects allocated to COMRAM (1 bytes)
   767                           ; load TBLPTR registers with __pidataCOMRAM
   768  000B5C  0ED4               	movlw	low __pidataCOMRAM
   769  000B5E  6EF6               	movwf	tblptrl,c
   770  000B60  0E12               	movlw	high __pidataCOMRAM
   771  000B62  6EF7               	movwf	tblptrh,c
   772  000B64  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   773  000B66  6EF8               	movwf	tblptru,c
   774  000B68  0009               	tblrd		*+	;fetch initializer
   775  000B6A  CFF5 F044          	movff	tablat,__pdataCOMRAM
   776  000B6E                     end_of_initialization:
   777                           	opt stack 0
   778  000B6E                     __end_of__initialization:
   779                           	opt stack 0
   780  000B6E  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   781  000B70  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   782  000B72  0E00               	movlw	low (__Lmediumconst shr (0+16))
   783  000B74  6EF8               	movwf	tblptru,c
   784  000B76  0100               	movlb	0
   785  000B78  EF00  F006         	goto	_main	;jump to C main() function
   786                           tblptru	equ	0xFF8
   787                           tblptrh	equ	0xFF7
   788                           tblptrl	equ	0xFF6
   789                           tablat	equ	0xFF5
   790                           postinc0	equ	0xFEE
   791                           wreg	equ	0xFE8
   792                           postdec1	equ	0xFE5
   793                           fsr1l	equ	0xFE1
   794                           
   795                           	psect	bssCOMRAM
   796  000029                     __pbssCOMRAM:
   797                           	opt stack 0
   798  000029                     _Start:
   799                           	opt stack 0
   800  000029                     	ds	2
   801  00002B                     _group:
   802                           	opt stack 0
   803  00002B                     	ds	2
   804  00002D                     _receiveArrayAddress:
   805                           	opt stack 0
   806  00002D                     	ds	2
   807  00002F                     _sendStructAddress:
   808                           	opt stack 0
   809  00002F                     	ds	2
   810  000031                     _serial_write:
   811                           	opt stack 0
   812  000031                     	ds	2
   813  000033                     _AKNAKsend:
   814                           	opt stack 0
   815  000033                     	ds	1
   816  000034                     _calc_CS:
   817                           	opt stack 0
   818  000034                     	ds	1
   819  000035                     _eusart2RxCount:
   820                           	opt stack 0
   821  000035                     	ds	1
   822  000036                     _eusart2RxHead:
   823                           	opt stack 0
   824  000036                     	ds	1
   825  000037                     _eusart2RxTail:
   826                           	opt stack 0
   827  000037                     	ds	1
   828  000038                     _eusart2TxHead:
   829                           	opt stack 0
   830  000038                     	ds	1
   831  000039                     _eusart2TxTail:
   832                           	opt stack 0
   833  000039                     	ds	1
   834  00003A                     _i:
   835                           	opt stack 0
   836  00003A                     	ds	1
   837  00003B                     _maxDataAddress:
   838                           	opt stack 0
   839  00003B                     	ds	1
   840  00003C                     _moduleAddress:
   841                           	opt stack 0
   842  00003C                     	ds	1
   843  00003D                     _returnAddress:
   844                           	opt stack 0
   845  00003D                     	ds	1
   846  00003E                     _rx_address:
   847                           	opt stack 0
   848  00003E                     	ds	1
   849  00003F                     _rx_array_inx:
   850                           	opt stack 0
   851  00003F                     	ds	1
   852  000040                     _rx_len:
   853                           	opt stack 0
   854  000040                     	ds	1
   855                           tblptru	equ	0xFF8
   856                           tblptrh	equ	0xFF7
   857                           tblptrl	equ	0xFF6
   858                           tablat	equ	0xFF5
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           postdec1	equ	0xFE5
   862                           fsr1l	equ	0xFE1
   863                           
   864                           	psect	dataCOMRAM
   865  000044                     __pdataCOMRAM:
   866                           	opt stack 0
   867  000044                     _Transmit_stall:
   868                           	opt stack 0
   869  000044                     	ds	1
   870                           tblptru	equ	0xFF8
   871                           tblptrh	equ	0xFF7
   872                           tblptrl	equ	0xFF6
   873                           tablat	equ	0xFF5
   874                           postinc0	equ	0xFEE
   875                           wreg	equ	0xFE8
   876                           postdec1	equ	0xFE5
   877                           fsr1l	equ	0xFE1
   878                           
   879                           	psect	bssBANK0
   880  000060                     __pbssBANK0:
   881                           	opt stack 0
   882  000060                     _receiveArray:
   883                           	opt stack 0
   884  000060                     	ds	40
   885  000088                     _ddata:
   886                           	opt stack 0
   887  000088                     	ds	11
   888  000093                     _eusart2RxBuffer:
   889                           	opt stack 0
   890  000093                     	ds	8
   891  00009B                     _eusart2TxBuffer:
   892                           	opt stack 0
   893  00009B                     	ds	8
   894  0000A3                     _addressErrorCounter:
   895                           	opt stack 0
   896  0000A3                     	ds	2
   897  0000A5                     _alignErrorCounter:
   898                           	opt stack 0
   899  0000A5                     	ds	2
   900  0000A7                     _crcErrorCounter:
   901                           	opt stack 0
   902  0000A7                     	ds	2
   903  0000A9                     _dataAdressErrorCounter:
   904                           	opt stack 0
   905  0000A9                     	ds	2
   906  0000AB                     _serial_available:
   907                           	opt stack 0
   908  0000AB                     	ds	2
   909  0000AD                     _serial_peek:
   910                           	opt stack 0
   911  0000AD                     	ds	2
   912  0000AF                     _serial_read:
   913                           	opt stack 0
   914  0000AF                     	ds	2
   915  0000B1                     _crc_buffer:
   916                           	opt stack 0
   917  0000B1                     	ds	17
   918                           tblptru	equ	0xFF8
   919                           tblptrh	equ	0xFF7
   920                           tblptrl	equ	0xFF6
   921                           tablat	equ	0xFF5
   922                           postinc0	equ	0xFEE
   923                           wreg	equ	0xFE8
   924                           postdec1	equ	0xFE5
   925                           fsr1l	equ	0xFE1
   926                           
   927                           	psect	dataBANK0
   928  0000DD                     __pdataBANK0:
   929                           	opt stack 0
   930  0000DD                     _ChargerData:
   931                           	opt stack 0
   932  0000DD                     	ds	9
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           
   942                           	psect	bssBANK1
   943  000100                     __pbssBANK1:
   944                           	opt stack 0
   945  000100                     _ring_buffer:
   946                           	opt stack 0
   947  000100                     	ds	206
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           postdec1	equ	0xFE5
   955                           fsr1l	equ	0xFE1
   956                           
   957                           	psect	bssBANK2
   958  000200                     __pbssBANK2:
   959                           	opt stack 0
   960  000200                     _input_buffer:
   961                           	opt stack 0
   962  000200                     	ds	206
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	bssBANK3
   973  000300                     __pbssBANK3:
   974                           	opt stack 0
   975  000300                     _output_buffer:
   976                           	opt stack 0
   977  000300                     	ds	206
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	bssBANK4
   988  000400                     __pbssBANK4:
   989                           	opt stack 0
   990  000400                     _rx_buffer:
   991                           	opt stack 0
   992  000400                     	ds	200
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           postinc0	equ	0xFEE
   998                           wreg	equ	0xFE8
   999                           postdec1	equ	0xFE5
  1000                           fsr1l	equ	0xFE1
  1001                           
  1002                           	psect	cstackBANK0
  1003  0000C2                     __pcstackBANK0:
  1004                           	opt stack 0
  1005  0000C2                     sendData@whereToSend:
  1006                           	opt stack 0
  1007  0000C2                     CRCcheck@SentCRC:
  1008                           	opt stack 0
  1009  0000C2                     SetCharger@mode:
  1010                           	opt stack 0
  1011  0000C2                     ToSend@what:
  1012                           	opt stack 0
  1013  0000C2                     NokiaStr@str:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x0
  1017  0000C2                     	ds	1
  1018  0000C3                     sendData@CS:
  1019                           	opt stack 0
  1020  0000C3                     CRCcheck@calculatedCRC:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x1
  1024  0000C3                     	ds	1
  1025  0000C4                     sendData@i:
  1026                           	opt stack 0
  1027  0000C4                     CRCcheck@arrayHolder:
  1028                           	opt stack 0
  1029                           
  1030                           ; 3 bytes @ 0x2
  1031  0000C4                     	ds	3
  1032  0000C7                     CRCcheck@rt:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x5
  1036  0000C7                     	ds	2
  1037  0000C9                     ??_receiveData:
  1038                           
  1039                           ; 0 bytes @ 0x7
  1040  0000C9                     	ds	6
  1041  0000CF                     receiveData@crcHolder:
  1042                           	opt stack 0
  1043                           
  1044                           ; 1 bytes @ 0xD
  1045  0000CF                     	ds	1
  1046  0000D0                     receiveData@crcHolder_1485:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0xE
  1050  0000D0                     	ds	1
  1051  0000D1                     receiveData@holder:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0xF
  1055  0000D1                     	ds	3
  1056  0000D4                     receiveData@holder_1484:
  1057                           	opt stack 0
  1058                           
  1059                           ; 3 bytes @ 0x12
  1060  0000D4                     	ds	3
  1061  0000D7                     receiveData@u:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x15
  1065  0000D7                     	ds	2
  1066  0000D9                     receiveData@r:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x17
  1070  0000D9                     	ds	2
  1071  0000DB                     main@x:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x19
  1075  0000DB                     	ds	2
  1076                           tblptru	equ	0xFF8
  1077                           tblptrh	equ	0xFF7
  1078                           tblptrl	equ	0xFF6
  1079                           tablat	equ	0xFF5
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           postdec1	equ	0xFE5
  1083                           fsr1l	equ	0xFE1
  1084                           
  1085                           	psect	cstackCOMRAM
  1086  000001                     __pcstackCOMRAM:
  1087                           	opt stack 0
  1088  000001                     ?_UART_buff_modulo_inc:
  1089                           	opt stack 0
  1090  000001                     ?_UART_buff_size:
  1091                           	opt stack 0
  1092  000001                     UART_buff_size@_this:
  1093                           	opt stack 0
  1094  000001                     UART_buff_modulo_inc@value:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x0
  1098  000001                     	ds	2
  1099  000003                     UART_buff_modulo_inc@modulus:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x2
  1103  000003                     	ds	2
  1104  000005                     UART_buff_modulo_inc@my_value:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x4
  1108  000005                     	ds	2
  1109  000007                     UART_buff_put@_this:
  1110                           	opt stack 0
  1111  000007                     UART_buff_get@_this:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x6
  1115  000007                     	ds	2
  1116  000009                     ??_UART_buff_get:
  1117  000009                     UART_buff_put@c:
  1118                           	opt stack 0
  1119                           
  1120                           ; 1 bytes @ 0x8
  1121  000009                     	ds	1
  1122  00000A                     ??_UART_buff_put:
  1123                           
  1124                           ; 0 bytes @ 0x9
  1125  00000A                     	ds	1
  1126  00000B                     UART_buff_get@c:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0xA
  1130  00000B                     	ds	1
  1131  00000C                     EUSART1_Receive_ISR@data:
  1132                           	opt stack 0
  1133                           
  1134                           ; 1 bytes @ 0xB
  1135  00000C                     	ds	1
  1136  00000D                     ??_INTERRUPT_InterruptManager:
  1137                           
  1138                           ; 0 bytes @ 0xC
  1139  00000D                     	ds	14
  1140  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1141                           	opt stack 0
  1142  00001B                     ?___wmul:
  1143                           	opt stack 0
  1144  00001B                     EUSART2_Write@txData:
  1145                           	opt stack 0
  1146  00001B                     SPI1_Exchange8bit@data:
  1147                           	opt stack 0
  1148  00001B                     SetMux@channel:
  1149                           	opt stack 0
  1150  00001B                     CRC8@data:
  1151                           	opt stack 0
  1152  00001B                     FastTransfer_buffer_modulo_inc@value:
  1153                           	opt stack 0
  1154  00001B                     crcBufS_put@_this:
  1155                           	opt stack 0
  1156  00001B                     crcBufS_status_put@_this:
  1157                           	opt stack 0
  1158  00001B                     crcBufS_get@_this:
  1159                           	opt stack 0
  1160  00001B                     ___wmul@multiplier:
  1161                           	opt stack 0
  1162  00001B                     memset@p1:
  1163                           	opt stack 0
  1164  00001B                     Delay@wait:
  1165                           	opt stack 0
  1166                           
  1167                           ; 4 bytes @ 0x1A
  1168  00001B                     	ds	1
  1169  00001C                     putch@txData:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x1B
  1173  00001C                     	ds	1
  1174  00001D                     ?_printf:
  1175                           	opt stack 0
  1176  00001D                     CRC8@len:
  1177                           	opt stack 0
  1178  00001D                     crcBufS_put@address:
  1179                           	opt stack 0
  1180  00001D                     crcBufS_status_put@time:
  1181                           	opt stack 0
  1182  00001D                     crcBufS_get@time:
  1183                           	opt stack 0
  1184  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1185                           	opt stack 0
  1186  00001D                     printf@f:
  1187                           	opt stack 0
  1188  00001D                     ___wmul@multiplicand:
  1189                           	opt stack 0
  1190  00001D                     memset@c:
  1191                           	opt stack 0
  1192                           
  1193                           ; 2 bytes @ 0x1C
  1194  00001D                     	ds	1
  1195  00001E                     CRC8@sum:
  1196                           	opt stack 0
  1197  00001E                     crcBufS_put@oldCRC:
  1198                           	opt stack 0
  1199  00001E                     crcBufS_status_put@status:
  1200                           	opt stack 0
  1201  00001E                     crcBufS_get@space:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x1D
  1205  00001E                     	ds	1
  1206  00001F                     ??_Delay:
  1207  00001F                     ??_crcBufS_get:
  1208  00001F                     ??_crcBufS_status_put:
  1209  00001F                     CRC8@extract:
  1210                           	opt stack 0
  1211  00001F                     crcBufS_put@status:
  1212                           	opt stack 0
  1213  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1214                           	opt stack 0
  1215  00001F                     ___wmul@product:
  1216                           	opt stack 0
  1217  00001F                     memset@n:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x1E
  1221  00001F                     	ds	1
  1222  000020                     ??_crcBufS_put:
  1223  000020                     CRC8@tempI:
  1224                           	opt stack 0
  1225  000020                     Delay@i:
  1226                           	opt stack 0
  1227                           
  1228                           ; 4 bytes @ 0x1F
  1229  000020                     	ds	1
  1230  000021                     CRC8@crc:
  1231                           	opt stack 0
  1232  000021                     LCDwrite@data:
  1233                           	opt stack 0
  1234  000021                     printf@flag:
  1235                           	opt stack 0
  1236  000021                     FastTransfer_buffer_put@_this:
  1237                           	opt stack 0
  1238  000021                     memset@p:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0x20
  1242  000021                     	ds	1
  1243  000022                     LCDwrite@mode:
  1244                           	opt stack 0
  1245  000022                     printf@ap:
  1246                           	opt stack 0
  1247                           
  1248                           ; 2 bytes @ 0x21
  1249  000022                     	ds	1
  1250  000023                     ??_LcdCharacter:
  1251  000023                     FastTransfer_buffer_put@towhere:
  1252                           	opt stack 0
  1253  000023                     gotoXy@y:
  1254                           	opt stack 0
  1255  000023                     FastTransfer_buffer_flush@_this:
  1256                           	opt stack 0
  1257  000023                     crcBufS_status_put@wantedTime:
  1258                           	opt stack 0
  1259  000023                     clearLcd@res:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x22
  1263  000023                     	ds	1
  1264  000024                     Precharge@OnOff:
  1265                           	opt stack 0
  1266  000024                     gotoXy@x:
  1267                           	opt stack 0
  1268  000024                     printf@c:
  1269                           	opt stack 0
  1270  000024                     FastTransfer_buffer_put@towhat:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x23
  1274  000024                     	ds	1
  1275  000025                     LcdCharacter@character:
  1276                           	opt stack 0
  1277  000025                     FastTransfer_buffer_flush@clearBuffer:
  1278                           	opt stack 0
  1279  000025                     crcBufS_get@wantedTime:
  1280                           	opt stack 0
  1281  000025                     Precharge@i:
  1282                           	opt stack 0
  1283  000025                     printf@cp:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x24
  1287  000025                     	ds	1
  1288  000026                     ??_FastTransfer_buffer_put:
  1289  000026                     LcdCharacter@index:
  1290                           	opt stack 0
  1291                           
  1292                           ; 2 bytes @ 0x25
  1293  000026                     	ds	1
  1294  000027                     ??_sendData:
  1295  000027                     SetCharger@Current:
  1296                           	opt stack 0
  1297  000027                     Precharge@i_1764:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x26
  1301  000027                     	ds	1
  1302  000028                     ToSend@where:
  1303                           	opt stack 0
  1304  000028                     SetCharger@Voltage:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x27
  1308  000028                     	ds	1
  1309  000029                     tblptru	equ	0xFF8
  1310                           tblptrh	equ	0xFF7
  1311                           tblptrl	equ	0xFF6
  1312                           tablat	equ	0xFF5
  1313                           postinc0	equ	0xFEE
  1314                           wreg	equ	0xFE8
  1315                           postdec1	equ	0xFE5
  1316                           fsr1l	equ	0xFE1
  1317                           
  1318                           ; 0 bytes @ 0x28
  1319 ;;
  1320 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1321 ;;
  1322 ;; *************** function _main *****************
  1323 ;; Defined at:
  1324 ;;		line 16 in file "main.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  x               2   25[BANK0 ] int 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;		None               void
  1331 ;; Registers used:
  1332 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 0/0
  1335 ;;		On exit  : 0/0
  1336 ;;		Unchanged: 0/0
  1337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1338 ;;      Params:         0       0       0       0       0       0       0
  1339 ;;      Locals:         0       2       0       0       0       0       0
  1340 ;;      Temps:          0       0       0       0       0       0       0
  1341 ;;      Totals:         0       2       0       0       0       0       0
  1342 ;;Total ram usage:        2 bytes
  1343 ;; Hardware stack levels required when called:    9
  1344 ;; This function calls:
  1345 ;;		_Delay
  1346 ;;		_NokiaStart
  1347 ;;		_NokiaStr
  1348 ;;		_SYSTEM_Initialize
  1349 ;;		_clearLcd
  1350 ;;		_gotoXy
  1351 ;;		_respondECU
  1352 ;;		_updateComms
  1353 ;; This function is called by:
  1354 ;;		Startup code after reset
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text0
  1359  000C00                     __ptext0:
  1360                           	opt stack 0
  1361  000C00                     _main:
  1362                           	opt stack 22
  1363                           
  1364                           ;main.c: 18: SYSTEM_Initialize();
  1365                           
  1366                           ;incstack = 0
  1367  000C00  EC2C  F009         	call	_SYSTEM_Initialize	;wreg free
  1368                           
  1369                           ;main.c: 37: (INTCONbits.GIE = 1);
  1370  000C04  8EF2               	bsf	intcon,7,c	;volatile
  1371                           
  1372                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1373  000C06  8CF2               	bsf	intcon,6,c	;volatile
  1374                           
  1375                           ;main.c: 47: NokiaStart();
  1376  000C08  ECE8  F004         	call	_NokiaStart	;wreg free
  1377                           
  1378                           ;main.c: 48: do { TRISA3 = 0; } while(0);
  1379  000C0C  9692               	bcf	3986,3,c	;volatile
  1380                           
  1381                           ;main.c: 49: do { LATA3 = 1; } while(0);
  1382  000C0E  8689               	bsf	3977,3,c	;volatile
  1383                           
  1384                           ;main.c: 50: int x = 0;
  1385  000C10  0E00               	movlw	0
  1386  000C12  0100               	movlb	0	; () banked
  1387  000C14  6FDC               	movwf	(main@x+1)& (0+255),b
  1388  000C16  0E00               	movlw	0
  1389  000C18  6FDB               	movwf	main@x& (0+255),b
  1390  000C1A                     l3534:
  1391                           
  1392                           ; BSR set to: 0
  1393                           ;main.c: 53: Delay(1000);
  1394  000C1A  0EE8               	movlw	232
  1395  000C1C  6E1B               	movwf	Delay@wait,c
  1396  000C1E  0E03               	movlw	3
  1397  000C20  6E1C               	movwf	Delay@wait+1,c
  1398  000C22  0E00               	movlw	0
  1399  000C24  6E1D               	movwf	Delay@wait+2,c
  1400  000C26  0E00               	movlw	0
  1401  000C28  6E1E               	movwf	Delay@wait+3,c
  1402  000C2A  EC6E  F007         	call	_Delay	;wreg free
  1403                           
  1404                           ;main.c: 54: clearLcd();
  1405  000C2E  ECBC  F008         	call	_clearLcd	;wreg free
  1406                           
  1407                           ;main.c: 55: gotoXy(3,3);
  1408  000C32  0E03               	movlw	3
  1409  000C34  6E23               	movwf	gotoXy@y,c
  1410  000C36  0E03               	movlw	3
  1411  000C38  ECA8  F008         	call	_gotoXy
  1412                           
  1413                           ;main.c: 57: NokiaStr("Hello World!");
  1414  000C3C  0EE7               	movlw	low STR_1
  1415  000C3E  0100               	movlb	0	; () banked
  1416  000C40  6FC2               	movwf	NokiaStr@str& (0+255),b
  1417  000C42  0E7F               	movlw	high STR_1
  1418  000C44  0100               	movlb	0	; () banked
  1419  000C46  6FC3               	movwf	(NokiaStr@str+1)& (0+255),b
  1420  000C48  EC52  F008         	call	_NokiaStr	;wreg free
  1421                           
  1422                           ;main.c: 59: do { LATA6 = ~LATA6; } while(0);
  1423  000C4C  BC89               	btfsc	3977,6,c	;volatile
  1424  000C4E  D002               	goto	u2590
  1425  000C50  8C89               	bsf	3977,6,c	;volatile
  1426  000C52  D001               	goto	l3544
  1427  000C54                     u2590:
  1428  000C54  9C89               	bcf	3977,6,c	;volatile
  1429  000C56                     l3544:
  1430  000C56  B08B               	btfsc	3979,0,c	;volatile
  1431  000C58  D002               	goto	u2610
  1432  000C5A  808B               	bsf	3979,0,c	;volatile
  1433  000C5C  D001               	goto	l3546
  1434  000C5E                     u2610:
  1435  000C5E  908B               	bcf	3979,0,c	;volatile
  1436  000C60                     l3546:
  1437  000C60  B28B               	btfsc	3979,1,c	;volatile
  1438  000C62  D002               	goto	u2630
  1439  000C64  828B               	bsf	3979,1,c	;volatile
  1440  000C66  D001               	goto	l3548
  1441  000C68                     u2630:
  1442  000C68  928B               	bcf	3979,1,c	;volatile
  1443  000C6A                     l3548:
  1444  000C6A  B689               	btfsc	3977,3,c	;volatile
  1445  000C6C  D002               	goto	u2650
  1446  000C6E  8689               	bsf	3977,3,c	;volatile
  1447  000C70  D001               	goto	l3550
  1448  000C72                     u2650:
  1449  000C72  9689               	bcf	3977,3,c	;volatile
  1450  000C74                     l3550:
  1451                           
  1452                           ;main.c: 63: x++;
  1453  000C74  0100               	movlb	0	; () banked
  1454  000C76  4BDB               	infsnz	main@x& (0+255),f,b
  1455  000C78  2BDC               	incf	(main@x+1)& (0+255),f,b
  1456                           
  1457                           ; BSR set to: 0
  1458  000C7A  D7CF               	goto	l3534
  1459  000C7C                     __end_of_main:
  1460                           	opt stack 0
  1461                           tblptru	equ	0xFF8
  1462                           tblptrh	equ	0xFF7
  1463                           tblptrl	equ	0xFF6
  1464                           tablat	equ	0xFF5
  1465                           intcon	equ	0xFF2
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1l	equ	0xFE1
  1470                           
  1471 ;; *************** function _updateComms *****************
  1472 ;; Defined at:
  1473 ;;		line 14 in file "Communications.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;		None
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;		None
  1478 ;; Return value:  Size  Location     Type
  1479 ;;		None               void
  1480 ;; Registers used:
  1481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1487 ;;      Params:         0       0       0       0       0       0       0
  1488 ;;      Locals:         0       0       0       0       0       0       0
  1489 ;;      Temps:          0       0       0       0       0       0       0
  1490 ;;      Totals:         0       0       0       0       0       0       0
  1491 ;;Total ram usage:        0 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    8
  1494 ;; This function calls:
  1495 ;;		_Precharge
  1496 ;;		_SetCharger
  1497 ;;		_receiveData
  1498 ;;		_respondECU
  1499 ;; This function is called by:
  1500 ;;		_main
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503                           
  1504                           	psect	text1
  1505  0011A0                     __ptext1:
  1506                           	opt stack 0
  1507  0011A0                     _updateComms:
  1508                           	opt stack 22
  1509                           
  1510                           ;Communications.c: 15: if (receiveData()) {
  1511                           
  1512                           ;incstack = 0
  1513  0011A0  EC58  F000         	call	_receiveData	;wreg free
  1514  0011A4  0900               	iorlw	0
  1515  0011A6  B4D8               	btfsc	status,2,c
  1516  0011A8  0012               	return	
  1517                           
  1518                           ;Communications.c: 16: Precharge(receiveArray[1]);
  1519  0011AA  0100               	movlb	0	; () banked
  1520  0011AC  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1521  0011AE  ECBE  F005         	call	_Precharge
  1522                           
  1523                           ;Communications.c: 17: SetCharger(1, receiveArray[2], receiveArray[3]);
  1524  0011B2  C064  F027         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1525  0011B6  C066  F028         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1526  0011BA  0E01               	movlw	1
  1527  0011BC  ECB5  F006         	call	_SetCharger
  1528                           
  1529                           ;Communications.c: 18: respondECU();
  1530  0011C0  EC1C  F007         	call	_respondECU	;wreg free
  1531  0011C4  0012               	return	
  1532  0011C6                     __end_of_updateComms:
  1533                           	opt stack 0
  1534                           tblptru	equ	0xFF8
  1535                           tblptrh	equ	0xFF7
  1536                           tblptrl	equ	0xFF6
  1537                           tablat	equ	0xFF5
  1538                           intcon	equ	0xFF2
  1539                           postinc0	equ	0xFEE
  1540                           wreg	equ	0xFE8
  1541                           postdec1	equ	0xFE5
  1542                           fsr1l	equ	0xFE1
  1543                           status	equ	0xFD8
  1544                           
  1545 ;; *************** function _respondECU *****************
  1546 ;; Defined at:
  1547 ;;		line 33 in file "Communications.c"
  1548 ;; Parameters:    Size  Location     Type
  1549 ;;		None
  1550 ;; Auto vars:     Size  Location     Type
  1551 ;;		None
  1552 ;; Return value:  Size  Location     Type
  1553 ;;                  2  276[None  ] int 
  1554 ;; Registers used:
  1555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1556 ;; Tracked objects:
  1557 ;;		On entry : 0/0
  1558 ;;		On exit  : 0/0
  1559 ;;		Unchanged: 0/0
  1560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1561 ;;      Params:         0       0       0       0       0       0       0
  1562 ;;      Locals:         0       0       0       0       0       0       0
  1563 ;;      Temps:          0       0       0       0       0       0       0
  1564 ;;      Totals:         0       0       0       0       0       0       0
  1565 ;;Total ram usage:        0 bytes
  1566 ;; Hardware stack levels used:    1
  1567 ;; Hardware stack levels required when called:    7
  1568 ;; This function calls:
  1569 ;;		_Delay
  1570 ;;		_ToSend
  1571 ;;		_sendData
  1572 ;; This function is called by:
  1573 ;;		_main
  1574 ;;		_updateComms
  1575 ;; This function uses a non-reentrant model
  1576 ;;
  1577                           
  1578                           	psect	text2
  1579  000E38                     __ptext2:
  1580                           	opt stack 0
  1581  000E38                     _respondECU:
  1582                           	opt stack 22
  1583                           
  1584                           ;Communications.c: 34: LATCbits.LATC5 = 1;
  1585                           
  1586                           ;incstack = 0
  1587  000E38  8A8B               	bsf	3979,5,c	;volatile
  1588                           
  1589                           ;Communications.c: 35: ToSend(0, 1);
  1590  000E3A  0E00               	movlw	0
  1591  000E3C  0100               	movlb	0	; () banked
  1592  000E3E  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1593  000E40  0E01               	movlw	1
  1594  000E42  6FC2               	movwf	ToSend@what& (0+255),b
  1595  000E44  0E00               	movlw	0
  1596  000E46  EC05  F009         	call	_ToSend
  1597                           
  1598                           ;Communications.c: 36: ToSend(1, 1);
  1599  000E4A  0E00               	movlw	0
  1600  000E4C  0100               	movlb	0	; () banked
  1601  000E4E  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1602  000E50  0E01               	movlw	1
  1603  000E52  6FC2               	movwf	ToSend@what& (0+255),b
  1604  000E54  0E01               	movlw	1
  1605  000E56  EC05  F009         	call	_ToSend
  1606                           
  1607                           ;Communications.c: 37: Delay(5);
  1608  000E5A  0E05               	movlw	5
  1609  000E5C  6E1B               	movwf	Delay@wait,c
  1610  000E5E  0E00               	movlw	0
  1611  000E60  6E1C               	movwf	Delay@wait+1,c
  1612  000E62  0E00               	movlw	0
  1613  000E64  6E1D               	movwf	Delay@wait+2,c
  1614  000E66  0E00               	movlw	0
  1615  000E68  6E1E               	movwf	Delay@wait+3,c
  1616  000E6A  EC6E  F007         	call	_Delay	;wreg free
  1617                           
  1618                           ;Communications.c: 39: sendData(6);
  1619  000E6E  0E06               	movlw	6
  1620  000E70  EC7B  F006         	call	_sendData
  1621                           
  1622                           ;Communications.c: 40: Delay(3);
  1623  000E74  0E03               	movlw	3
  1624  000E76  6E1B               	movwf	Delay@wait,c
  1625  000E78  0E00               	movlw	0
  1626  000E7A  6E1C               	movwf	Delay@wait+1,c
  1627  000E7C  0E00               	movlw	0
  1628  000E7E  6E1D               	movwf	Delay@wait+2,c
  1629  000E80  0E00               	movlw	0
  1630  000E82  6E1E               	movwf	Delay@wait+3,c
  1631  000E84  EC6E  F007         	call	_Delay	;wreg free
  1632                           
  1633                           ;Communications.c: 41: LATCbits.LATC5 = 0;
  1634  000E88  9A8B               	bcf	3979,5,c	;volatile
  1635  000E8A  0012               	return		;funcret
  1636  000E8C                     __end_of_respondECU:
  1637                           	opt stack 0
  1638                           tblptru	equ	0xFF8
  1639                           tblptrh	equ	0xFF7
  1640                           tblptrl	equ	0xFF6
  1641                           tablat	equ	0xFF5
  1642                           intcon	equ	0xFF2
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1l	equ	0xFE1
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function _sendData *****************
  1650 ;; Defined at:
  1651 ;;		line 53 in file "FastTransfer.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  whereToSend     1    wreg     unsigned char 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  whereToSend     1    0[BANK0 ] unsigned char 
  1656 ;;  i               2    2[BANK0 ] int 
  1657 ;;  CS              1    1[BANK0 ] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;		None               void
  1660 ;; Registers used:
  1661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1667 ;;      Params:         0       0       0       0       0       0       0
  1668 ;;      Locals:         0       4       0       0       0       0       0
  1669 ;;      Temps:          1       0       0       0       0       0       0
  1670 ;;      Totals:         1       4       0       0       0       0       0
  1671 ;;Total ram usage:        5 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    6
  1674 ;; This function calls:
  1675 ;;		_CRC8
  1676 ;;		_FastTransfer_buffer_flush
  1677 ;;		_crcBufS_put
  1678 ;; This function is called by:
  1679 ;;		_respondECU
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text3
  1684  000CF6                     __ptext3:
  1685                           	opt stack 0
  1686  000CF6                     _sendData:
  1687                           	opt stack 22
  1688                           
  1689                           ;incstack = 0
  1690                           ;sendData@whereToSend stored from wreg
  1691  000CF6  0100               	movlb	0	; () banked
  1692  000CF8  6FC2               	movwf	sendData@whereToSend& (0+255),b
  1693                           
  1694                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1695  000CFA  C02F  F01B         	movff	_sendStructAddress,CRC8@data
  1696  000CFE  C030  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1697  000D02  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1698  000D06  EC94  F007         	call	_CRC8	;wreg free
  1699  000D0A  0100               	movlb	0	; () banked
  1700  000D0C  6FC3               	movwf	sendData@CS& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;FastTransfer.c: 66: int i;
  1704                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1705  000D0E  0E00               	movlw	0
  1706  000D10  0100               	movlb	0	; () banked
  1707  000D12  6FC5               	movwf	(sendData@i+1)& (0+255),b
  1708  000D14  0E00               	movlw	0
  1709  000D16  6FC4               	movwf	sendData@i& (0+255),b
  1710  000D18  D003               	goto	l3132
  1711  000D1A                     l3130:
  1712  000D1A  0100               	movlb	0	; () banked
  1713  000D1C  4BC4               	infsnz	sendData@i& (0+255),f,b
  1714  000D1E  2BC5               	incf	(sendData@i+1)& (0+255),f,b
  1715  000D20                     l3132:
  1716                           
  1717                           ; BSR set to: 0
  1718  000D20  0101               	movlb	1	; () banked
  1719  000D22  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1720  000D24  0100               	movlb	0	; () banked
  1721  000D26  5DC4               	subwf	sendData@i& (0+255),w,b
  1722  000D28  0100               	movlb	0	; () banked
  1723  000D2A  51C5               	movf	(sendData@i+1)& (0+255),w,b
  1724  000D2C  0A80               	xorlw	128
  1725  000D2E  6E27               	movwf	??_sendData& (0+255),c
  1726  000D30  0101               	movlb	1	; () banked
  1727  000D32  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1728  000D34  0A80               	xorlw	128
  1729  000D36  5827               	subwfb	??_sendData& (0+255),w,c
  1730  000D38  A0D8               	btfss	status,0,c
  1731  000D3A  D7EF               	goto	l3130
  1732                           
  1733                           ; BSR set to: 1
  1734                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1735                           
  1736                           ; BSR set to: 1
  1737                           
  1738                           ;FastTransfer.c: 69: }
  1739                           ;FastTransfer.c: 72: serial_write(CS);
  1740  000D3C  0EB1               	movlw	low _crc_buffer
  1741  000D3E  6E1B               	movwf	crcBufS_put@_this,c
  1742  000D40  0E00               	movlw	high _crc_buffer
  1743  000D42  6E1C               	movwf	crcBufS_put@_this+1,c
  1744  000D44  C0C2  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1745  000D48  C0C3  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1746  000D4C  0E00               	movlw	0
  1747  000D4E  6E1F               	movwf	crcBufS_put@status,c
  1748  000D50  EC5C  F003         	call	_crcBufS_put	;wreg free
  1749                           
  1750                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1751  000D54  0E00               	movlw	low _ring_buffer
  1752  000D56  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1753  000D58  0E01               	movlw	high _ring_buffer
  1754  000D5A  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1755  000D5C  0E00               	movlw	0
  1756  000D5E  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1757  000D60  0E01               	movlw	1
  1758  000D62  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1759  000D64  ECEB  F006         	call	_FastTransfer_buffer_flush	;wreg free
  1760  000D68  0012               	return		;funcret
  1761  000D6A                     __end_of_sendData:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           intcon	equ	0xFF2
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           postdec1	equ	0xFE5
  1771                           fsr1l	equ	0xFE1
  1772                           status	equ	0xFD8
  1773                           
  1774 ;; *************** function _crcBufS_put *****************
  1775 ;; Defined at:
  1776 ;;		line 321 in file "FastTransfer.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1779 ;;		 -> crc_buffer(17), 
  1780 ;;  address         1   28[COMRAM] unsigned char 
  1781 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1782 ;;  status          1   30[COMRAM] unsigned char 
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;		None               void
  1787 ;; Registers used:
  1788 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         5       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          2       0       0       0       0       0       0
  1797 ;;      Totals:         7       0       0       0       0       0       0
  1798 ;;Total ram usage:        7 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    4
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_sendData
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text4
  1809  0006B8                     __ptext4:
  1810                           	opt stack 0
  1811  0006B8                     _crcBufS_put:
  1812                           	opt stack 23
  1813                           
  1814                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1815                           
  1816                           ;incstack = 0
  1817  0006B8  EE20 F00F          	lfsr	2,15
  1818  0006BC  501B               	movf	crcBufS_put@_this,w,c
  1819  0006BE  26D9               	addwf	fsr2l,f,c
  1820  0006C0  501C               	movf	crcBufS_put@_this+1,w,c
  1821  0006C2  22DA               	addwfc	fsr2h,f,c
  1822  0006C4  CFDE F020          	movff	postinc2,??_crcBufS_put
  1823  0006C8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1824  0006CC  5020               	movf	??_crcBufS_put,w,c
  1825  0006CE  241B               	addwf	crcBufS_put@_this,w,c
  1826  0006D0  6ED9               	movwf	fsr2l,c
  1827  0006D2  5021               	movf	??_crcBufS_put+1,w,c
  1828  0006D4  201C               	addwfc	crcBufS_put@_this+1,w,c
  1829  0006D6  6EDA               	movwf	fsr2h,c
  1830  0006D8  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1831                           
  1832                           ;FastTransfer.c: 323: _this->head++;
  1833  0006DC  EE20 F00F          	lfsr	2,15
  1834  0006E0  501B               	movf	crcBufS_put@_this,w,c
  1835  0006E2  26D9               	addwf	fsr2l,f,c
  1836  0006E4  501C               	movf	crcBufS_put@_this+1,w,c
  1837  0006E6  22DA               	addwfc	fsr2h,f,c
  1838  0006E8  2ADE               	incf	postinc2,f,c
  1839  0006EA  0E00               	movlw	0
  1840  0006EC  22DD               	addwfc	postdec2,f,c
  1841                           
  1842                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1843  0006EE  EE20 F00F          	lfsr	2,15
  1844  0006F2  501B               	movf	crcBufS_put@_this,w,c
  1845  0006F4  26D9               	addwf	fsr2l,f,c
  1846  0006F6  501C               	movf	crcBufS_put@_this+1,w,c
  1847  0006F8  22DA               	addwfc	fsr2h,f,c
  1848  0006FA  CFDE F020          	movff	postinc2,??_crcBufS_put
  1849  0006FE  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1850  000702  5020               	movf	??_crcBufS_put,w,c
  1851  000704  241B               	addwf	crcBufS_put@_this,w,c
  1852  000706  6ED9               	movwf	fsr2l,c
  1853  000708  5021               	movf	??_crcBufS_put+1,w,c
  1854  00070A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1855  00070C  6EDA               	movwf	fsr2h,c
  1856  00070E  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1857                           
  1858                           ;FastTransfer.c: 325: _this->head++;
  1859  000712  EE20 F00F          	lfsr	2,15
  1860  000716  501B               	movf	crcBufS_put@_this,w,c
  1861  000718  26D9               	addwf	fsr2l,f,c
  1862  00071A  501C               	movf	crcBufS_put@_this+1,w,c
  1863  00071C  22DA               	addwfc	fsr2h,f,c
  1864  00071E  2ADE               	incf	postinc2,f,c
  1865  000720  0E00               	movlw	0
  1866  000722  22DD               	addwfc	postdec2,f,c
  1867                           
  1868                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1869  000724  EE20 F00F          	lfsr	2,15
  1870  000728  501B               	movf	crcBufS_put@_this,w,c
  1871  00072A  26D9               	addwf	fsr2l,f,c
  1872  00072C  501C               	movf	crcBufS_put@_this+1,w,c
  1873  00072E  22DA               	addwfc	fsr2h,f,c
  1874  000730  CFDE F020          	movff	postinc2,??_crcBufS_put
  1875  000734  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1876  000738  5020               	movf	??_crcBufS_put,w,c
  1877  00073A  241B               	addwf	crcBufS_put@_this,w,c
  1878  00073C  6ED9               	movwf	fsr2l,c
  1879  00073E  5021               	movf	??_crcBufS_put+1,w,c
  1880  000740  201C               	addwfc	crcBufS_put@_this+1,w,c
  1881  000742  6EDA               	movwf	fsr2h,c
  1882  000744  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1883                           
  1884                           ;FastTransfer.c: 327: _this->head++;
  1885  000748  EE20 F00F          	lfsr	2,15
  1886  00074C  501B               	movf	crcBufS_put@_this,w,c
  1887  00074E  26D9               	addwf	fsr2l,f,c
  1888  000750  501C               	movf	crcBufS_put@_this+1,w,c
  1889  000752  22DA               	addwfc	fsr2h,f,c
  1890  000754  2ADE               	incf	postinc2,f,c
  1891  000756  0E00               	movlw	0
  1892  000758  22DD               	addwfc	postdec2,f,c
  1893                           
  1894                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1895  00075A  EE20 F00F          	lfsr	2,15
  1896  00075E  501B               	movf	crcBufS_put@_this,w,c
  1897  000760  26D9               	addwf	fsr2l,f,c
  1898  000762  501C               	movf	crcBufS_put@_this+1,w,c
  1899  000764  22DA               	addwfc	fsr2h,f,c
  1900  000766  0E01               	movlw	1
  1901  000768  BEDB               	btfsc	plusw2,7,c
  1902  00076A  0012               	return	
  1903  00076C  0E01               	movlw	1
  1904  00076E  50DB               	movf	plusw2,w,c
  1905  000770  E104               	bnz	u2050
  1906  000772  0E0F               	movlw	15
  1907  000774  5CDE               	subwf	postinc2,w,c
  1908  000776  A0D8               	btfss	status,0,c
  1909  000778  0012               	return	
  1910  00077A                     u2050:
  1911                           
  1912                           ;FastTransfer.c: 329: _this->head = 0;
  1913  00077A  EE20 F00F          	lfsr	2,15
  1914  00077E  501B               	movf	crcBufS_put@_this,w,c
  1915  000780  26D9               	addwf	fsr2l,f,c
  1916  000782  501C               	movf	crcBufS_put@_this+1,w,c
  1917  000784  22DA               	addwfc	fsr2h,f,c
  1918  000786  0E00               	movlw	0
  1919  000788  6EDE               	movwf	postinc2,c
  1920  00078A  0E00               	movlw	0
  1921  00078C  6EDD               	movwf	postdec2,c
  1922  00078E  0012               	return	
  1923  000790                     __end_of_crcBufS_put:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           intcon	equ	0xFF2
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           postdec1	equ	0xFE5
  1933                           fsr1l	equ	0xFE1
  1934                           indf2	equ	0xFDF
  1935                           postinc2	equ	0xFDE
  1936                           postdec2	equ	0xFDD
  1937                           plusw2	equ	0xFDB
  1938                           fsr2h	equ	0xFDA
  1939                           fsr2l	equ	0xFD9
  1940                           status	equ	0xFD8
  1941                           
  1942 ;; *************** function _FastTransfer_buffer_flush *****************
  1943 ;; Defined at:
  1944 ;;		line 261 in file "FastTransfer.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1947 ;;		 -> ring_buffer(206), 
  1948 ;;  clearBuffer     2   36[COMRAM] const int 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;		None               void
  1953 ;; Registers used:
  1954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1960 ;;      Params:         4       0       0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0
  1963 ;;      Totals:         4       0       0       0       0       0       0
  1964 ;;Total ram usage:        4 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    5
  1967 ;; This function calls:
  1968 ;;		_memset
  1969 ;; This function is called by:
  1970 ;;		_sendData
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973                           
  1974                           	psect	text5
  1975  000DD6                     __ptext5:
  1976                           	opt stack 0
  1977  000DD6                     _FastTransfer_buffer_flush:
  1978                           	opt stack 22
  1979                           
  1980                           ;FastTransfer.c: 262: _this->count = 0;
  1981                           
  1982                           ;incstack = 0
  1983  000DD6  EE20 F0CC          	lfsr	2,204
  1984  000DDA  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1985  000DDC  26D9               	addwf	fsr2l,f,c
  1986  000DDE  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1987  000DE0  22DA               	addwfc	fsr2h,f,c
  1988  000DE2  0E00               	movlw	0
  1989  000DE4  6EDE               	movwf	postinc2,c
  1990  000DE6  0E00               	movlw	0
  1991  000DE8  6EDD               	movwf	postdec2,c
  1992                           
  1993                           ;FastTransfer.c: 263: _this->head = 0;
  1994  000DEA  EE20 F0C8          	lfsr	2,200
  1995  000DEE  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1996  000DF0  26D9               	addwf	fsr2l,f,c
  1997  000DF2  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1998  000DF4  22DA               	addwfc	fsr2h,f,c
  1999  000DF6  0E00               	movlw	0
  2000  000DF8  6EDE               	movwf	postinc2,c
  2001  000DFA  0E00               	movlw	0
  2002  000DFC  6EDD               	movwf	postdec2,c
  2003                           
  2004                           ;FastTransfer.c: 264: _this->tail = 0;
  2005  000DFE  EE20 F0CA          	lfsr	2,202
  2006  000E02  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  2007  000E04  26D9               	addwf	fsr2l,f,c
  2008  000E06  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  2009  000E08  22DA               	addwfc	fsr2h,f,c
  2010  000E0A  0E00               	movlw	0
  2011  000E0C  6EDE               	movwf	postinc2,c
  2012  000E0E  0E00               	movlw	0
  2013  000E10  6EDD               	movwf	postdec2,c
  2014                           
  2015                           ;FastTransfer.c: 265: if (clearBuffer) {
  2016  000E12  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  2017  000E14  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  2018  000E16  B4D8               	btfsc	status,2,c
  2019  000E18  0012               	return	
  2020                           
  2021                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  2022  000E1A  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2023  000E1E  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2024  000E22  0E00               	movlw	0
  2025  000E24  6E1E               	movwf	memset@c+1,c
  2026  000E26  0E00               	movlw	0
  2027  000E28  6E1D               	movwf	memset@c,c
  2028  000E2A  0E00               	movlw	0
  2029  000E2C  6E20               	movwf	memset@n+1,c
  2030  000E2E  0EC8               	movlw	200
  2031  000E30  6E1F               	movwf	memset@n,c
  2032  000E32  EC3C  F008         	call	_memset	;wreg free
  2033  000E36  0012               	return	
  2034  000E38                     __end_of_FastTransfer_buffer_flush:
  2035                           	opt stack 0
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           intcon	equ	0xFF2
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           postdec1	equ	0xFE5
  2044                           fsr1l	equ	0xFE1
  2045                           indf2	equ	0xFDF
  2046                           postinc2	equ	0xFDE
  2047                           postdec2	equ	0xFDD
  2048                           plusw2	equ	0xFDB
  2049                           fsr2h	equ	0xFDA
  2050                           fsr2l	equ	0xFD9
  2051                           status	equ	0xFD8
  2052                           
  2053 ;; *************** function _memset *****************
  2054 ;; Defined at:
  2055 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;  p1              2   26[COMRAM] PTR void 
  2058 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2059 ;;  c               2   28[COMRAM] int 
  2060 ;;  n               2   30[COMRAM] unsigned int 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  p               2   32[COMRAM] PTR unsigned char 
  2063 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2064 ;; Return value:  Size  Location     Type
  2065 ;;                  2   26[COMRAM] PTR void 
  2066 ;; Registers used:
  2067 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2068 ;; Tracked objects:
  2069 ;;		On entry : 0/0
  2070 ;;		On exit  : 0/0
  2071 ;;		Unchanged: 0/0
  2072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2073 ;;      Params:         6       0       0       0       0       0       0
  2074 ;;      Locals:         2       0       0       0       0       0       0
  2075 ;;      Temps:          0       0       0       0       0       0       0
  2076 ;;      Totals:         8       0       0       0       0       0       0
  2077 ;;Total ram usage:        8 bytes
  2078 ;; Hardware stack levels used:    1
  2079 ;; Hardware stack levels required when called:    4
  2080 ;; This function calls:
  2081 ;;		Nothing
  2082 ;; This function is called by:
  2083 ;;		_FastTransfer_buffer_flush
  2084 ;;		_UART_buff_init
  2085 ;;		_UART_buff_flush
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089                           	psect	text6
  2090  001078                     __ptext6:
  2091                           	opt stack 0
  2092  001078                     _memset:
  2093                           	opt stack 22
  2094                           
  2095                           ;incstack = 0
  2096  001078  C01B  F021         	movff	memset@p1,memset@p
  2097  00107C  C01C  F022         	movff	memset@p1+1,memset@p+1
  2098  001080  D008               	goto	l3016
  2099  001082                     l3012:
  2100  001082  C021  FFD9         	movff	memset@p,fsr2l
  2101  001086  C022  FFDA         	movff	memset@p+1,fsr2h
  2102  00108A  C01D  FFDF         	movff	memset@c,indf2
  2103  00108E  4A21               	infsnz	memset@p,f,c
  2104  001090  2A22               	incf	memset@p+1,f,c
  2105  001092                     l3016:
  2106  001092  061F               	decf	memset@n,f,c
  2107  001094  A0D8               	btfss	status,0,c
  2108  001096  0620               	decf	memset@n+1,f,c
  2109  001098  281F               	incf	memset@n,w,c
  2110  00109A  E1F3               	bnz	l3012
  2111  00109C  2820               	incf	memset@n+1,w,c
  2112  00109E  B4D8               	btfsc	status,2,c
  2113  0010A0  0012               	return	
  2114  0010A2  D7EF               	goto	l3012
  2115  0010A4                     __end_of_memset:
  2116                           	opt stack 0
  2117                           tblptru	equ	0xFF8
  2118                           tblptrh	equ	0xFF7
  2119                           tblptrl	equ	0xFF6
  2120                           tablat	equ	0xFF5
  2121                           intcon	equ	0xFF2
  2122                           postinc0	equ	0xFEE
  2123                           wreg	equ	0xFE8
  2124                           postdec1	equ	0xFE5
  2125                           fsr1l	equ	0xFE1
  2126                           indf2	equ	0xFDF
  2127                           postinc2	equ	0xFDE
  2128                           postdec2	equ	0xFDD
  2129                           plusw2	equ	0xFDB
  2130                           fsr2h	equ	0xFDA
  2131                           fsr2l	equ	0xFD9
  2132                           status	equ	0xFD8
  2133                           
  2134 ;; *************** function _ToSend *****************
  2135 ;; Defined at:
  2136 ;;		line 216 in file "FastTransfer.c"
  2137 ;; Parameters:    Size  Location     Type
  2138 ;;  where           1    wreg     unsigned char 
  2139 ;;  what            2    0[BANK0 ] unsigned int 
  2140 ;; Auto vars:     Size  Location     Type
  2141 ;;  where           1   39[COMRAM] unsigned char 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;		None               void
  2144 ;; Registers used:
  2145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2151 ;;      Params:         0       2       0       0       0       0       0
  2152 ;;      Locals:         1       0       0       0       0       0       0
  2153 ;;      Temps:          0       0       0       0       0       0       0
  2154 ;;      Totals:         1       2       0       0       0       0       0
  2155 ;;Total ram usage:        3 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    6
  2158 ;; This function calls:
  2159 ;;		_FastTransfer_buffer_put
  2160 ;; This function is called by:
  2161 ;;		_respondECU
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text7
  2166  00120A                     __ptext7:
  2167                           	opt stack 0
  2168  00120A                     _ToSend:
  2169                           	opt stack 22
  2170                           
  2171                           ;incstack = 0
  2172                           ;ToSend@where stored from wreg
  2173  00120A  6E28               	movwf	ToSend@where,c
  2174                           
  2175                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2176  00120C  0E00               	movlw	low _ring_buffer
  2177  00120E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2178  001210  0E01               	movlw	high _ring_buffer
  2179  001212  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2180  001214  C028  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2181  001218  C0C2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2182  00121C  C0C3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2183  001220  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2184  001224  0012               	return		;funcret
  2185  001226                     __end_of_ToSend:
  2186                           	opt stack 0
  2187                           tblptru	equ	0xFF8
  2188                           tblptrh	equ	0xFF7
  2189                           tblptrl	equ	0xFF6
  2190                           tablat	equ	0xFF5
  2191                           intcon	equ	0xFF2
  2192                           postinc0	equ	0xFEE
  2193                           wreg	equ	0xFE8
  2194                           postdec1	equ	0xFE5
  2195                           fsr1l	equ	0xFE1
  2196                           indf2	equ	0xFDF
  2197                           postinc2	equ	0xFDE
  2198                           postdec2	equ	0xFDD
  2199                           plusw2	equ	0xFDB
  2200                           fsr2h	equ	0xFDA
  2201                           fsr2l	equ	0xFD9
  2202                           status	equ	0xFD8
  2203                           
  2204 ;; *************** function _FastTransfer_buffer_put *****************
  2205 ;; Defined at:
  2206 ;;		line 223 in file "FastTransfer.c"
  2207 ;; Parameters:    Size  Location     Type
  2208 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2209 ;;		 -> ring_buffer(206), 
  2210 ;;  towhere         1   34[COMRAM] unsigned char 
  2211 ;;  towhat          2   35[COMRAM] unsigned int 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;		None
  2214 ;; Return value:  Size  Location     Type
  2215 ;;		None               void
  2216 ;; Registers used:
  2217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2223 ;;      Params:         5       0       0       0       0       0       0
  2224 ;;      Locals:         0       0       0       0       0       0       0
  2225 ;;      Temps:          2       0       0       0       0       0       0
  2226 ;;      Totals:         7       0       0       0       0       0       0
  2227 ;;Total ram usage:        7 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    5
  2230 ;; This function calls:
  2231 ;;		_FastTransfer_buffer_modulo_inc
  2232 ;; This function is called by:
  2233 ;;		_ToSend
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           	psect	text8
  2238  000354                     __ptext8:
  2239                           	opt stack 0
  2240  000354                     _FastTransfer_buffer_put:
  2241                           	opt stack 22
  2242                           
  2243                           ;FastTransfer.c: 225: group.integer = towhat;
  2244                           
  2245                           ;incstack = 0
  2246  000354  C024  F02B         	movff	FastTransfer_buffer_put@towhat,_group
  2247  000358  C025  F02C         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2248                           
  2249                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2250  00035C  EE20 F0CC          	lfsr	2,204
  2251  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2252  000362  26D9               	addwf	fsr2l,f,c
  2253  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2254  000366  22DA               	addwfc	fsr2h,f,c
  2255  000368  0E01               	movlw	1
  2256  00036A  BEDB               	btfsc	plusw2,7,c
  2257  00036C  D007               	goto	l3062
  2258  00036E  0E01               	movlw	1
  2259  000370  50DB               	movf	plusw2,w,c
  2260  000372  E103               	bnz	u2071
  2261  000374  0EC5               	movlw	197
  2262  000376  5CDE               	subwf	postinc2,w,c
  2263  000378  B0D8               	btfsc	status,0,c
  2264  00037A                     u2071:
  2265  00037A  0012               	return	
  2266  00037C                     l3062:
  2267                           
  2268                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2269  00037C  EE20 F0C8          	lfsr	2,200
  2270  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2271  000382  26D9               	addwf	fsr2l,f,c
  2272  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2273  000386  22DA               	addwfc	fsr2h,f,c
  2274  000388  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  2275  00038C  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  2276  000390  5026               	movf	??_FastTransfer_buffer_put,w,c
  2277  000392  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2278  000394  6ED9               	movwf	fsr2l,c
  2279  000396  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  2280  000398  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2281  00039A  6EDA               	movwf	fsr2h,c
  2282  00039C  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2283                           
  2284                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2285  0003A0  EE20 F0C8          	lfsr	2,200
  2286  0003A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2287  0003A6  26D9               	addwf	fsr2l,f,c
  2288  0003A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2289  0003AA  22DA               	addwfc	fsr2h,f,c
  2290  0003AC  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2291  0003B0  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2292  0003B4  0E00               	movlw	0
  2293  0003B6  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2294  0003B8  0EC8               	movlw	200
  2295  0003BA  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2296  0003BC  EC7E  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2297  0003C0  EE20 F0C8          	lfsr	2,200
  2298  0003C4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2299  0003C6  26D9               	addwf	fsr2l,f,c
  2300  0003C8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2301  0003CA  22DA               	addwfc	fsr2h,f,c
  2302  0003CC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2303  0003D0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2304                           
  2305                           ;FastTransfer.c: 230: ++_this->count;
  2306  0003D4  EE20 F0CC          	lfsr	2,204
  2307  0003D8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2308  0003DA  26D9               	addwf	fsr2l,f,c
  2309  0003DC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2310  0003DE  22DA               	addwfc	fsr2h,f,c
  2311  0003E0  2ADE               	incf	postinc2,f,c
  2312  0003E2  0E00               	movlw	0
  2313  0003E4  22DD               	addwfc	postdec2,f,c
  2314                           
  2315                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2316  0003E6  EE20 F0C8          	lfsr	2,200
  2317  0003EA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2318  0003EC  26D9               	addwf	fsr2l,f,c
  2319  0003EE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2320  0003F0  22DA               	addwfc	fsr2h,f,c
  2321  0003F2  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  2322  0003F6  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  2323  0003FA  5026               	movf	??_FastTransfer_buffer_put,w,c
  2324  0003FC  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2325  0003FE  6ED9               	movwf	fsr2l,c
  2326  000400  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  2327  000402  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2328  000404  6EDA               	movwf	fsr2h,c
  2329  000406  C02B  FFDF         	movff	_group,indf2
  2330                           
  2331                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2332  00040A  EE20 F0C8          	lfsr	2,200
  2333  00040E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2334  000410  26D9               	addwf	fsr2l,f,c
  2335  000412  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2336  000414  22DA               	addwfc	fsr2h,f,c
  2337  000416  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2338  00041A  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2339  00041E  0E00               	movlw	0
  2340  000420  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2341  000422  0EC8               	movlw	200
  2342  000424  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2343  000426  EC7E  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2344  00042A  EE20 F0C8          	lfsr	2,200
  2345  00042E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2346  000430  26D9               	addwf	fsr2l,f,c
  2347  000432  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2348  000434  22DA               	addwfc	fsr2h,f,c
  2349  000436  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2350  00043A  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2351                           
  2352                           ;FastTransfer.c: 233: ++_this->count;
  2353  00043E  EE20 F0CC          	lfsr	2,204
  2354  000442  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2355  000444  26D9               	addwf	fsr2l,f,c
  2356  000446  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2357  000448  22DA               	addwfc	fsr2h,f,c
  2358  00044A  2ADE               	incf	postinc2,f,c
  2359  00044C  0E00               	movlw	0
  2360  00044E  22DD               	addwfc	postdec2,f,c
  2361                           
  2362                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2363  000450  EE20 F0C8          	lfsr	2,200
  2364  000454  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2365  000456  26D9               	addwf	fsr2l,f,c
  2366  000458  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2367  00045A  22DA               	addwfc	fsr2h,f,c
  2368  00045C  CFDE F026          	movff	postinc2,??_FastTransfer_buffer_put
  2369  000460  CFDD F027          	movff	postdec2,??_FastTransfer_buffer_put+1
  2370  000464  5026               	movf	??_FastTransfer_buffer_put,w,c
  2371  000466  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2372  000468  6ED9               	movwf	fsr2l,c
  2373  00046A  5027               	movf	??_FastTransfer_buffer_put+1,w,c
  2374  00046C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2375  00046E  6EDA               	movwf	fsr2h,c
  2376  000470  C02C  FFDF         	movff	_group+1,indf2
  2377                           
  2378                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2379  000474  EE20 F0C8          	lfsr	2,200
  2380  000478  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2381  00047A  26D9               	addwf	fsr2l,f,c
  2382  00047C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2383  00047E  22DA               	addwfc	fsr2h,f,c
  2384  000480  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2385  000484  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2386  000488  0E00               	movlw	0
  2387  00048A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2388  00048C  0EC8               	movlw	200
  2389  00048E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2390  000490  EC7E  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2391  000494  EE20 F0C8          	lfsr	2,200
  2392  000498  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2393  00049A  26D9               	addwf	fsr2l,f,c
  2394  00049C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2395  00049E  22DA               	addwfc	fsr2h,f,c
  2396  0004A0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2397  0004A4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2398                           
  2399                           ;FastTransfer.c: 236: ++_this->count;
  2400  0004A8  EE20 F0CC          	lfsr	2,204
  2401  0004AC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2402  0004AE  26D9               	addwf	fsr2l,f,c
  2403  0004B0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2404  0004B2  22DA               	addwfc	fsr2h,f,c
  2405  0004B4  2ADE               	incf	postinc2,f,c
  2406  0004B6  0E00               	movlw	0
  2407  0004B8  22DD               	addwfc	postdec2,f,c
  2408  0004BA  0012               	return	
  2409  0004BC                     __end_of_FastTransfer_buffer_put:
  2410                           	opt stack 0
  2411                           tblptru	equ	0xFF8
  2412                           tblptrh	equ	0xFF7
  2413                           tblptrl	equ	0xFF6
  2414                           tablat	equ	0xFF5
  2415                           intcon	equ	0xFF2
  2416                           postinc0	equ	0xFEE
  2417                           wreg	equ	0xFE8
  2418                           postdec1	equ	0xFE5
  2419                           fsr1l	equ	0xFE1
  2420                           indf2	equ	0xFDF
  2421                           postinc2	equ	0xFDE
  2422                           postdec2	equ	0xFDD
  2423                           plusw2	equ	0xFDB
  2424                           fsr2h	equ	0xFDA
  2425                           fsr2l	equ	0xFD9
  2426                           status	equ	0xFD8
  2427                           
  2428 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2429 ;; Defined at:
  2430 ;;		line 273 in file "FastTransfer.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  value           2   26[COMRAM] const unsigned int 
  2433 ;;  modulus         2   28[COMRAM] const unsigned int 
  2434 ;; Auto vars:     Size  Location     Type
  2435 ;;  my_value        2   30[COMRAM] unsigned int 
  2436 ;; Return value:  Size  Location     Type
  2437 ;;                  2   26[COMRAM] unsigned int 
  2438 ;; Registers used:
  2439 ;;		wreg, status,2, status,0
  2440 ;; Tracked objects:
  2441 ;;		On entry : 0/0
  2442 ;;		On exit  : 0/0
  2443 ;;		Unchanged: 0/0
  2444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2445 ;;      Params:         4       0       0       0       0       0       0
  2446 ;;      Locals:         2       0       0       0       0       0       0
  2447 ;;      Temps:          0       0       0       0       0       0       0
  2448 ;;      Totals:         6       0       0       0       0       0       0
  2449 ;;Total ram usage:        6 bytes
  2450 ;; Hardware stack levels used:    1
  2451 ;; Hardware stack levels required when called:    4
  2452 ;; This function calls:
  2453 ;;		Nothing
  2454 ;; This function is called by:
  2455 ;;		_FastTransfer_buffer_put
  2456 ;;		_FastTransfer_buffer_get
  2457 ;; This function uses a non-reentrant model
  2458 ;;
  2459                           
  2460                           	psect	text9
  2461  0010FC                     __ptext9:
  2462                           	opt stack 0
  2463  0010FC                     _FastTransfer_buffer_modulo_inc:
  2464                           	opt stack 22
  2465                           
  2466                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2467                           
  2468                           ;incstack = 0
  2469  0010FC  0E01               	movlw	1
  2470  0010FE  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2471  001100  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2472  001102  0E00               	movlw	0
  2473  001104  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2474  001106  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2475                           
  2476                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2477  001108  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2478  00110A  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2479  00110C  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2480  00110E  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2481  001110  A0D8               	btfss	status,0,c
  2482  001112  D004               	goto	l3006
  2483                           
  2484                           ;FastTransfer.c: 276: my_value = 0;
  2485  001114  0E00               	movlw	0
  2486  001116  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2487  001118  0E00               	movlw	0
  2488  00111A  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2489  00111C                     l3006:
  2490                           
  2491                           ;FastTransfer.c: 277: }
  2492                           ;FastTransfer.c: 278: return (my_value);
  2493  00111C  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2494  001120  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2495  001124  0012               	return	
  2496  001126                     __end_of_FastTransfer_buffer_modulo_inc:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           intcon	equ	0xFF2
  2503                           postinc0	equ	0xFEE
  2504                           wreg	equ	0xFE8
  2505                           postdec1	equ	0xFE5
  2506                           fsr1l	equ	0xFE1
  2507                           indf2	equ	0xFDF
  2508                           postinc2	equ	0xFDE
  2509                           postdec2	equ	0xFDD
  2510                           plusw2	equ	0xFDB
  2511                           fsr2h	equ	0xFDA
  2512                           fsr2l	equ	0xFD9
  2513                           status	equ	0xFD8
  2514                           
  2515 ;; *************** function _receiveData *****************
  2516 ;; Defined at:
  2517 ;;		line 82 in file "FastTransfer.c"
  2518 ;; Parameters:    Size  Location     Type
  2519 ;;		None
  2520 ;; Auto vars:     Size  Location     Type
  2521 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2522 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2523 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2524 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2525 ;;  u               2   21[BANK0 ] int 
  2526 ;;  r               2   23[BANK0 ] int 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  1    wreg      unsigned char 
  2529 ;; Registers used:
  2530 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2536 ;;      Params:         0       0       0       0       0       0       0
  2537 ;;      Locals:         0      12       0       0       0       0       0
  2538 ;;      Temps:          0       6       0       0       0       0       0
  2539 ;;      Totals:         0      18       0       0       0       0       0
  2540 ;;Total ram usage:       18 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    6
  2543 ;; This function calls:
  2544 ;;		_CRC8
  2545 ;;		_CRCcheck
  2546 ;; This function is called by:
  2547 ;;		_updateComms
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text10
  2552  0000B0                     __ptext10:
  2553                           	opt stack 0
  2554  0000B0                     _receiveData:
  2555                           	opt stack 23
  2556                           
  2557                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2558                           
  2559                           ;incstack = 0
  2560  0000B0  D020               	goto	l3294
  2561  0000B2                     l3284:
  2562                           
  2563                           ; BSR set to: 0
  2564  0000B2  0100               	movlb	0	; () banked
  2565  0000B4  4BD7               	infsnz	receiveData@u& (0+255),f,b
  2566  0000B6  2BD8               	incf	(receiveData@u+1)& (0+255),f,b
  2567                           
  2568                           ; BSR set to: 0
  2569                           
  2570                           ; BSR set to: 0
  2571  0000B8  5040               	movf	_rx_len,w,c
  2572  0000BA  0100               	movlb	0	; () banked
  2573  0000BC  6FC9               	movwf	??_receiveData& (0+255),b
  2574  0000BE  6BCA               	clrf	(??_receiveData+1)& (0+255),b
  2575  0000C0  0E01               	movlw	1
  2576  0000C2  0100               	movlb	0	; () banked
  2577  0000C4  27C9               	addwf	??_receiveData& (0+255),f,b
  2578  0000C6  0E00               	movlw	0
  2579  0000C8  23CA               	addwfc	(??_receiveData+1)& (0+255),f,b
  2580  0000CA  0100               	movlb	0	; () banked
  2581  0000CC  51D7               	movf	receiveData@u& (0+255),w,b
  2582  0000CE  0100               	movlb	0	; () banked
  2583  0000D0  5DC9               	subwf	??_receiveData& (0+255),w,b
  2584  0000D2  0100               	movlb	0	; () banked
  2585  0000D4  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2586  0000D6  0A80               	xorlw	128
  2587  0000D8  0100               	movlb	0	; () banked
  2588  0000DA  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2589  0000DC  0100               	movlb	0	; () banked
  2590  0000DE  51D8               	movf	(receiveData@u+1)& (0+255),w,b
  2591  0000E0  0A80               	xorlw	128
  2592  0000E2  0100               	movlb	0	; () banked
  2593  0000E4  59CB               	subwfb	(??_receiveData+2)& (0+255),w,b
  2594  0000E6  B0D8               	btfsc	status,0,c
  2595  0000E8  D7E4               	goto	l3284
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;FastTransfer.c: 109: }
  2599                           ;FastTransfer.c: 110: rx_len = 0;
  2600                           
  2601                           ; BSR set to: 0
  2602  0000EA  0E00               	movlw	0
  2603  0000EC  6E40               	movwf	_rx_len,c
  2604                           
  2605                           ; BSR set to: 0
  2606                           ;FastTransfer.c: 111: return 0;
  2607  0000EE  0E00               	movlw	0
  2608                           
  2609                           ; BSR set to: 0
  2610  0000F0  0012               	return	
  2611  0000F2                     l3294:
  2612                           
  2613                           ;FastTransfer.c: 112: }
  2614                           ;FastTransfer.c: 114: }
  2615                           ;FastTransfer.c: 115: }
  2616                           ;FastTransfer.c: 116: }
  2617                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2618  0000F2  5040               	movf	_rx_len,w,c
  2619  0000F4  B4D8               	btfsc	status,2,c
  2620  0000F6  D12C               	goto	l3376
  2621                           
  2622                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2623  0000F8  503F               	movf	_rx_array_inx,w,c
  2624  0000FA  B4D8               	btfsc	status,2,c
  2625  0000FC                     l425:
  2626  0000FC  D7FF               	goto	l425
  2627                           
  2628                           ;FastTransfer.c: 135: }
  2629                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2630                           
  2631                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2632                           
  2633                           ;FastTransfer.c: 129: }
  2634                           ;FastTransfer.c: 130: }
  2635                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2636                           
  2637                           ;FastTransfer.c: 128: return 0;
  2638                           
  2639                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2640                           
  2641                           ;FastTransfer.c: 126: rx_len = 0;
  2642                           
  2643                           ;FastTransfer.c: 125: CRCcheck();
  2644                           
  2645                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2646  0000FE  5040               	movf	_rx_len,w,c
  2647  000100  0100               	movlb	0	; () banked
  2648  000102  6FC9               	movwf	??_receiveData& (0+255),b
  2649  000104  6BCA               	clrf	(??_receiveData+1)& (0+255),b
  2650  000106  0EFF               	movlw	255
  2651  000108  0100               	movlb	0	; () banked
  2652  00010A  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2653  00010C  0EFF               	movlw	255
  2654  00010E  0100               	movlb	0	; () banked
  2655  000110  6FCC               	movwf	(??_receiveData+3)& (0+255),b
  2656  000112  503F               	movf	_rx_array_inx,w,c
  2657  000114  0100               	movlb	0	; () banked
  2658  000116  6FCD               	movwf	(??_receiveData+4)& (0+255),b
  2659  000118  6BCE               	clrf	(??_receiveData+5)& (0+255),b
  2660  00011A  0100               	movlb	0	; () banked
  2661  00011C  51CB               	movf	(??_receiveData+2)& (0+255),w,b
  2662  00011E  0100               	movlb	0	; () banked
  2663  000120  27CD               	addwf	(??_receiveData+4)& (0+255),f,b
  2664  000122  0100               	movlb	0	; () banked
  2665  000124  51CC               	movf	(??_receiveData+3)& (0+255),w,b
  2666  000126  0100               	movlb	0	; () banked
  2667  000128  23CE               	addwfc	(??_receiveData+5)& (0+255),f,b
  2668  00012A  0100               	movlb	0	; () banked
  2669  00012C  51C9               	movf	??_receiveData& (0+255),w,b
  2670  00012E  0100               	movlb	0	; () banked
  2671  000130  19CD               	xorwf	(??_receiveData+4)& (0+255),w,b
  2672  000132  E105               	bnz	u2361
  2673  000134  0100               	movlb	0	; () banked
  2674  000136  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2675  000138  0100               	movlb	0	; () banked
  2676  00013A  19CE               	xorwf	(??_receiveData+5)& (0+255),w,b
  2677  00013C  A4D8               	btfss	status,2,c
  2678  00013E                     u2361:
  2679  00013E  D108               	goto	l3376
  2680                           
  2681                           ; BSR set to: 0
  2682                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2683  000140  0E00               	movlw	low _rx_buffer
  2684  000142  6E1B               	movwf	CRC8@data,c
  2685  000144  0E04               	movlw	high _rx_buffer
  2686  000146  6E1C               	movwf	CRC8@data+1,c
  2687  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2688  00014C  EC94  F007         	call	_CRC8	;wreg free
  2689  000150  6E34               	movwf	_calc_CS,c
  2690                           
  2691                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2692  000152  0EFF               	movlw	255
  2693  000154  0100               	movlb	0	; () banked
  2694  000156  6FC9               	movwf	??_receiveData& (0+255),b
  2695  000158  0EFF               	movlw	255
  2696  00015A  0100               	movlb	0	; () banked
  2697  00015C  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2698  00015E  503F               	movf	_rx_array_inx,w,c
  2699  000160  0100               	movlb	0	; () banked
  2700  000162  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2701  000164  6BCC               	clrf	(??_receiveData+3)& (0+255),b
  2702  000166  0100               	movlb	0	; () banked
  2703  000168  51C9               	movf	??_receiveData& (0+255),w,b
  2704  00016A  0100               	movlb	0	; () banked
  2705  00016C  27CB               	addwf	(??_receiveData+2)& (0+255),f,b
  2706  00016E  0100               	movlb	0	; () banked
  2707  000170  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2708  000172  0100               	movlb	0	; () banked
  2709  000174  23CC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2710  000176  0E00               	movlw	low _rx_buffer
  2711  000178  0100               	movlb	0	; () banked
  2712  00017A  25CB               	addwf	(??_receiveData+2)& (0+255),w,b
  2713  00017C  6ED9               	movwf	fsr2l,c
  2714  00017E  0E04               	movlw	high _rx_buffer
  2715  000180  0100               	movlb	0	; () banked
  2716  000182  21CC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2717  000184  6EDA               	movwf	fsr2h,c
  2718  000186  5034               	movf	_calc_CS,w,c
  2719  000188  18DE               	xorwf	postinc2,w,c
  2720  00018A  A4D8               	btfss	status,2,c
  2721  00018C  D0A9               	goto	l3356
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;FastTransfer.c: 147: int r;
  2725                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2726  00018E  0E00               	movlw	0
  2727  000190  0100               	movlb	0	; () banked
  2728  000192  6FDA               	movwf	(receiveData@r+1)& (0+255),b
  2729  000194  0E00               	movlw	0
  2730  000196  6FD9               	movwf	receiveData@r& (0+255),b
  2731  000198  D05A               	goto	l3334
  2732  00019A                     l3324:
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2736  00019A  0E00               	movlw	low _rx_buffer
  2737  00019C  0100               	movlb	0	; () banked
  2738  00019E  25D9               	addwf	receiveData@r& (0+255),w,b
  2739  0001A0  6ED9               	movwf	fsr2l,c
  2740  0001A2  0E04               	movlw	high _rx_buffer
  2741  0001A4  0100               	movlb	0	; () banked
  2742  0001A6  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2743  0001A8  6EDA               	movwf	fsr2h,c
  2744  0001AA  503B               	movf	_maxDataAddress,w,c
  2745  0001AC  5CDE               	subwf	postinc2,w,c
  2746  0001AE  B0D8               	btfsc	status,0,c
  2747  0001B0  D041               	goto	l3330
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2751  0001B2  0E01               	movlw	1
  2752  0001B4  0100               	movlb	0	; () banked
  2753  0001B6  25D9               	addwf	receiveData@r& (0+255),w,b
  2754  0001B8  0100               	movlb	0	; () banked
  2755  0001BA  6FC9               	movwf	??_receiveData& (0+255),b
  2756  0001BC  0E00               	movlw	0
  2757  0001BE  0100               	movlb	0	; () banked
  2758  0001C0  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2759  0001C2  0100               	movlb	0	; () banked
  2760  0001C4  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2761  0001C6  0E00               	movlw	low _rx_buffer
  2762  0001C8  0100               	movlb	0	; () banked
  2763  0001CA  25C9               	addwf	??_receiveData& (0+255),w,b
  2764  0001CC  6ED9               	movwf	fsr2l,c
  2765  0001CE  0E04               	movlw	high _rx_buffer
  2766  0001D0  0100               	movlb	0	; () banked
  2767  0001D2  21CA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2768  0001D4  6EDA               	movwf	fsr2h,c
  2769  0001D6  50DF               	movf	indf2,w,c
  2770  0001D8  6E2B               	movwf	_group,c
  2771                           
  2772                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2773  0001DA  0E02               	movlw	2
  2774  0001DC  0100               	movlb	0	; () banked
  2775  0001DE  25D9               	addwf	receiveData@r& (0+255),w,b
  2776  0001E0  0100               	movlb	0	; () banked
  2777  0001E2  6FC9               	movwf	??_receiveData& (0+255),b
  2778  0001E4  0E00               	movlw	0
  2779  0001E6  0100               	movlb	0	; () banked
  2780  0001E8  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2781  0001EA  0100               	movlb	0	; () banked
  2782  0001EC  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2783  0001EE  0E00               	movlw	low _rx_buffer
  2784  0001F0  0100               	movlb	0	; () banked
  2785  0001F2  25C9               	addwf	??_receiveData& (0+255),w,b
  2786  0001F4  6ED9               	movwf	fsr2l,c
  2787  0001F6  0E04               	movlw	high _rx_buffer
  2788  0001F8  0100               	movlb	0	; () banked
  2789  0001FA  21CA               	addwfc	(??_receiveData+1)& (0+255),w,b
  2790  0001FC  6EDA               	movwf	fsr2h,c
  2791  0001FE  50DF               	movf	indf2,w,c
  2792  000200  6E2C               	movwf	_group+1,c
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2796  000202  0E00               	movlw	low _rx_buffer
  2797  000204  0100               	movlb	0	; () banked
  2798  000206  25D9               	addwf	receiveData@r& (0+255),w,b
  2799  000208  6ED9               	movwf	fsr2l,c
  2800  00020A  0E04               	movlw	high _rx_buffer
  2801  00020C  0100               	movlb	0	; () banked
  2802  00020E  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2803  000210  6EDA               	movwf	fsr2h,c
  2804  000212  50DF               	movf	indf2,w,c
  2805  000214  0100               	movlb	0	; () banked
  2806  000216  6FC9               	movwf	??_receiveData& (0+255),b
  2807  000218  0100               	movlb	0	; () banked
  2808  00021A  51C9               	movf	??_receiveData& (0+255),w,b
  2809  00021C  0D02               	mullw	2
  2810  00021E  50F3               	movf	prodl,w,c
  2811  000220  242D               	addwf	_receiveArrayAddress,w,c
  2812  000222  6ED9               	movwf	fsr2l,c
  2813  000224  50F4               	movf	prodh,w,c
  2814  000226  202E               	addwfc	_receiveArrayAddress+1,w,c
  2815  000228  6EDA               	movwf	fsr2h,c
  2816  00022A  C02B  FFDE         	movff	_group,postinc2
  2817  00022E  C02C  FFDD         	movff	_group+1,postdec2
  2818                           
  2819                           ;FastTransfer.c: 153: } else {
  2820  000232  D003               	goto	l3332
  2821  000234                     l3330:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2825  000234  0100               	movlb	0	; () banked
  2826  000236  4BA9               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2827  000238  2BAA               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2828  00023A                     l3332:
  2829                           
  2830                           ; BSR set to: 0
  2831  00023A  0E03               	movlw	3
  2832  00023C  0100               	movlb	0	; () banked
  2833  00023E  25D9               	addwf	receiveData@r& (0+255),w,b
  2834  000240  0100               	movlb	0	; () banked
  2835  000242  6FD9               	movwf	receiveData@r& (0+255),b
  2836  000244  0E00               	movlw	0
  2837  000246  0100               	movlb	0	; () banked
  2838  000248  21DA               	addwfc	(receiveData@r+1)& (0+255),w,b
  2839  00024A  0100               	movlb	0	; () banked
  2840  00024C  6FDA               	movwf	(receiveData@r+1)& (0+255),b
  2841  00024E                     l3334:
  2842                           
  2843                           ; BSR set to: 0
  2844  00024E  5040               	movf	_rx_len,w,c
  2845  000250  0100               	movlb	0	; () banked
  2846  000252  6FC9               	movwf	??_receiveData& (0+255),b
  2847  000254  6BCA               	clrf	(??_receiveData+1)& (0+255),b
  2848  000256  0100               	movlb	0	; () banked
  2849  000258  51C9               	movf	??_receiveData& (0+255),w,b
  2850  00025A  0100               	movlb	0	; () banked
  2851  00025C  5DD9               	subwf	receiveData@r& (0+255),w,b
  2852  00025E  0100               	movlb	0	; () banked
  2853  000260  51DA               	movf	(receiveData@r+1)& (0+255),w,b
  2854  000262  0A80               	xorlw	128
  2855  000264  0100               	movlb	0	; () banked
  2856  000266  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2857  000268  0100               	movlb	0	; () banked
  2858  00026A  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2859  00026C  0A80               	xorlw	128
  2860  00026E  0100               	movlb	0	; () banked
  2861  000270  59CB               	subwfb	(??_receiveData+2)& (0+255),w,b
  2862  000272  A0D8               	btfss	status,0,c
  2863  000274  D792               	goto	l3324
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;FastTransfer.c: 155: }
  2867                           ;FastTransfer.c: 156: }
  2868                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2869                           
  2870                           ; BSR set to: 0
  2871  000276  5033               	movf	_AKNAKsend,w,c
  2872  000278  B4D8               	btfsc	status,2,c
  2873  00027A  D02C               	goto	l3346
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;FastTransfer.c: 160: unsigned char holder[3];
  2877                           ;FastTransfer.c: 161: holder[0] = 255;
  2878  00027C  0100               	movlb	0	; () banked
  2879  00027E  69D1               	setf	receiveData@holder& (0+255),b
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;FastTransfer.c: 162: holder[1] = 1;
  2883  000280  0E01               	movlw	1
  2884  000282  0100               	movlb	0	; () banked
  2885  000284  6FD2               	movwf	(receiveData@holder+1)& (0+255),b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2889  000286  0EFF               	movlw	255
  2890  000288  0100               	movlb	0	; () banked
  2891  00028A  6FC9               	movwf	??_receiveData& (0+255),b
  2892  00028C  0EFF               	movlw	255
  2893  00028E  0100               	movlb	0	; () banked
  2894  000290  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2895  000292  503F               	movf	_rx_array_inx,w,c
  2896  000294  0100               	movlb	0	; () banked
  2897  000296  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2898  000298  6BCC               	clrf	(??_receiveData+3)& (0+255),b
  2899  00029A  0100               	movlb	0	; () banked
  2900  00029C  51C9               	movf	??_receiveData& (0+255),w,b
  2901  00029E  0100               	movlb	0	; () banked
  2902  0002A0  27CB               	addwf	(??_receiveData+2)& (0+255),f,b
  2903  0002A2  0100               	movlb	0	; () banked
  2904  0002A4  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2905  0002A6  0100               	movlb	0	; () banked
  2906  0002A8  23CC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2907  0002AA  0E00               	movlw	low _rx_buffer
  2908  0002AC  0100               	movlb	0	; () banked
  2909  0002AE  25CB               	addwf	(??_receiveData+2)& (0+255),w,b
  2910  0002B0  6ED9               	movwf	fsr2l,c
  2911  0002B2  0E04               	movlw	high _rx_buffer
  2912  0002B4  0100               	movlb	0	; () banked
  2913  0002B6  21CC               	addwfc	(??_receiveData+3)& (0+255),w,b
  2914  0002B8  6EDA               	movwf	fsr2h,c
  2915  0002BA  50DF               	movf	indf2,w,c
  2916  0002BC  0100               	movlb	0	; () banked
  2917  0002BE  6FD3               	movwf	(receiveData@holder+2)& (0+255),b
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2921  0002C0  0ED1               	movlw	low receiveData@holder
  2922  0002C2  6E1B               	movwf	CRC8@data,c
  2923  0002C4  0E00               	movlw	high receiveData@holder
  2924  0002C6  6E1C               	movwf	CRC8@data+1,c
  2925  0002C8  0E03               	movlw	3
  2926  0002CA  6E1D               	movwf	CRC8@len,c
  2927  0002CC  EC94  F007         	call	_CRC8	;wreg free
  2928  0002D0  0100               	movlb	0	; () banked
  2929  0002D2  6FCF               	movwf	receiveData@crcHolder& (0+255),b
  2930  0002D4                     l3346:
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;FastTransfer.c: 174: }
  2934                           ;FastTransfer.c: 178: rx_len = 0;
  2935  0002D4  0E00               	movlw	0
  2936  0002D6  6E40               	movwf	_rx_len,c
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2940  0002D8  0E00               	movlw	0
  2941  0002DA  6E3F               	movwf	_rx_array_inx,c
  2942                           
  2943                           ; BSR set to: 0
  2944                           ;FastTransfer.c: 180: return 1;
  2945  0002DC  0E01               	movlw	1
  2946                           
  2947                           ; BSR set to: 0
  2948  0002DE  0012               	return	
  2949  0002E0                     l3356:
  2950                           
  2951                           ; BSR set to: 0
  2952                           ;FastTransfer.c: 182: crcErrorCounter++;
  2953  0002E0  0100               	movlb	0	; () banked
  2954  0002E2  4BA7               	infsnz	_crcErrorCounter& (0+255),f,b
  2955  0002E4  2BA8               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2959  0002E6  5033               	movf	_AKNAKsend,w,c
  2960  0002E8  B4D8               	btfsc	status,2,c
  2961  0002EA  D02C               	goto	l3368
  2962                           
  2963                           ; BSR set to: 0
  2964                           ;FastTransfer.c: 185: unsigned char holder[3];
  2965                           ;FastTransfer.c: 186: holder[0] = 255;
  2966  0002EC  0100               	movlb	0	; () banked
  2967  0002EE  69D4               	setf	receiveData@holder_1484& (0+255),b
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;FastTransfer.c: 187: holder[1] = 2;
  2971  0002F0  0E02               	movlw	2
  2972  0002F2  0100               	movlb	0	; () banked
  2973  0002F4  6FD5               	movwf	(receiveData@holder_1484+1)& (0+255),b
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2977  0002F6  0EFF               	movlw	255
  2978  0002F8  0100               	movlb	0	; () banked
  2979  0002FA  6FC9               	movwf	??_receiveData& (0+255),b
  2980  0002FC  0EFF               	movlw	255
  2981  0002FE  0100               	movlb	0	; () banked
  2982  000300  6FCA               	movwf	(??_receiveData+1)& (0+255),b
  2983  000302  503F               	movf	_rx_array_inx,w,c
  2984  000304  0100               	movlb	0	; () banked
  2985  000306  6FCB               	movwf	(??_receiveData+2)& (0+255),b
  2986  000308  6BCC               	clrf	(??_receiveData+3)& (0+255),b
  2987  00030A  0100               	movlb	0	; () banked
  2988  00030C  51C9               	movf	??_receiveData& (0+255),w,b
  2989  00030E  0100               	movlb	0	; () banked
  2990  000310  27CB               	addwf	(??_receiveData+2)& (0+255),f,b
  2991  000312  0100               	movlb	0	; () banked
  2992  000314  51CA               	movf	(??_receiveData+1)& (0+255),w,b
  2993  000316  0100               	movlb	0	; () banked
  2994  000318  23CC               	addwfc	(??_receiveData+3)& (0+255),f,b
  2995  00031A  0E00               	movlw	low _rx_buffer
  2996  00031C  0100               	movlb	0	; () banked
  2997  00031E  25CB               	addwf	(??_receiveData+2)& (0+255),w,b
  2998  000320  6ED9               	movwf	fsr2l,c
  2999  000322  0E04               	movlw	high _rx_buffer
  3000  000324  0100               	movlb	0	; () banked
  3001  000326  21CC               	addwfc	(??_receiveData+3)& (0+255),w,b
  3002  000328  6EDA               	movwf	fsr2h,c
  3003  00032A  50DF               	movf	indf2,w,c
  3004  00032C  0100               	movlb	0	; () banked
  3005  00032E  6FD6               	movwf	(receiveData@holder_1484+2)& (0+255),b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3009  000330  0ED4               	movlw	low receiveData@holder_1484
  3010  000332  6E1B               	movwf	CRC8@data,c
  3011  000334  0E00               	movlw	high receiveData@holder_1484
  3012  000336  6E1C               	movwf	CRC8@data+1,c
  3013  000338  0E03               	movlw	3
  3014  00033A  6E1D               	movwf	CRC8@len,c
  3015  00033C  EC94  F007         	call	_CRC8	;wreg free
  3016  000340  0100               	movlb	0	; () banked
  3017  000342  6FD0               	movwf	receiveData@crcHolder_1485& (0+255),b
  3018  000344                     l3368:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;FastTransfer.c: 199: }
  3022                           ;FastTransfer.c: 202: rx_len = 0;
  3023  000344  0E00               	movlw	0
  3024  000346  6E40               	movwf	_rx_len,c
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3028  000348  0E00               	movlw	0
  3029  00034A  6E3F               	movwf	_rx_array_inx,c
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;FastTransfer.c: 204: return 0;
  3033  00034C  0E00               	movlw	0
  3034                           
  3035                           ; BSR set to: 0
  3036  00034E  0012               	return	
  3037  000350                     l3376:
  3038                           
  3039                           ;FastTransfer.c: 205: }
  3040                           ;FastTransfer.c: 206: }
  3041                           ;FastTransfer.c: 207: }
  3042                           ;FastTransfer.c: 210: return 0;
  3043  000350  0E00               	movlw	0
  3044  000352  0012               	return	
  3045  000354                     __end_of_receiveData:
  3046                           	opt stack 0
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           intcon	equ	0xFF2
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postdec1	equ	0xFE5
  3057                           fsr1l	equ	0xFE1
  3058                           indf2	equ	0xFDF
  3059                           postinc2	equ	0xFDE
  3060                           postdec2	equ	0xFDD
  3061                           plusw2	equ	0xFDB
  3062                           fsr2h	equ	0xFDA
  3063                           fsr2l	equ	0xFD9
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _CRCcheck *****************
  3067 ;; Defined at:
  3068 ;;		line 373 in file "FastTransfer.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  rt              2    5[BANK0 ] int 
  3073 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3074 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3075 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3076 ;; Return value:  Size  Location     Type
  3077 ;;		None               void
  3078 ;; Registers used:
  3079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3085 ;;      Params:         0       0       0       0       0       0       0
  3086 ;;      Locals:         0       7       0       0       0       0       0
  3087 ;;      Temps:          0       0       0       0       0       0       0
  3088 ;;      Totals:         0       7       0       0       0       0       0
  3089 ;;Total ram usage:        7 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    5
  3092 ;; This function calls:
  3093 ;;		_CRC8
  3094 ;;		_crcBufS_get
  3095 ;;		_crcBufS_status_put
  3096 ;; This function is called by:
  3097 ;;		_receiveData
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text11
  3102  00093A                     __ptext11:
  3103                           	opt stack 0
  3104  00093A                     _CRCcheck:
  3105                           	opt stack 23
  3106  00093A                     l501:
  3107  00093A  D7FF               	goto	l501
  3108  00093C                     l3146:
  3109                           
  3110                           ; BSR set to: 0
  3111  00093C  0100               	movlb	0	; () banked
  3112  00093E  BFC8               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3113  000940  D008               	goto	l3150
  3114  000942  0100               	movlb	0	; () banked
  3115  000944  51C8               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3116  000946  E143               	bnz	l513
  3117  000948  0E05               	movlw	5
  3118  00094A  0100               	movlb	0	; () banked
  3119  00094C  5DC7               	subwf	CRCcheck@rt& (0+255),w,b
  3120  00094E  B0D8               	btfsc	status,0,c
  3121  000950  0012               	return	
  3122  000952                     l3150:
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3126  000952  0EB1               	movlw	low _crc_buffer
  3127  000954  6E1B               	movwf	crcBufS_get@_this,c
  3128  000956  0E00               	movlw	high _crc_buffer
  3129  000958  6E1C               	movwf	crcBufS_get@_this+1,c
  3130  00095A  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3131  00095E  0E00               	movlw	0
  3132  000960  6E1E               	movwf	crcBufS_get@space,c
  3133  000962  ECEB  F002         	call	_crcBufS_get	;wreg free
  3134  000966  183D               	xorwf	_returnAddress,w,c
  3135  000968  A4D8               	btfss	status,2,c
  3136  00096A  D02D               	goto	l3164
  3137                           
  3138                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3139  00096C  0EB1               	movlw	low _crc_buffer
  3140  00096E  6E1B               	movwf	crcBufS_get@_this,c
  3141  000970  0E00               	movlw	high _crc_buffer
  3142  000972  6E1C               	movwf	crcBufS_get@_this+1,c
  3143  000974  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3144  000978  0E01               	movlw	1
  3145  00097A  6E1E               	movwf	crcBufS_get@space,c
  3146  00097C  ECEB  F002         	call	_crcBufS_get	;wreg free
  3147  000980  0100               	movlb	0	; () banked
  3148  000982  19C6               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3149  000984  A4D8               	btfss	status,2,c
  3150  000986  D01F               	goto	l3164
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3154  000988  0100               	movlb	0	; () banked
  3155  00098A  05C5               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3156  00098C  A4D8               	btfss	status,2,c
  3157  00098E  D00B               	goto	l3160
  3158                           
  3159                           ; BSR set to: 0
  3160                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3161  000990  0EB1               	movlw	low _crc_buffer
  3162  000992  6E1B               	movwf	crcBufS_status_put@_this,c
  3163  000994  0E00               	movlw	high _crc_buffer
  3164  000996  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3165  000998  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3166  00099C  0E01               	movlw	1
  3167  00099E  6E1E               	movwf	crcBufS_status_put@status,c
  3168  0009A0  ECC8  F003         	call	_crcBufS_status_put	;wreg free
  3169                           
  3170                           ;FastTransfer.c: 393: break;
  3171  0009A4  0012               	return	
  3172  0009A6                     l3160:
  3173  0009A6  0E02               	movlw	2
  3174  0009A8  0100               	movlb	0	; () banked
  3175  0009AA  19C5               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3176  0009AC  A4D8               	btfss	status,2,c
  3177  0009AE  D00B               	goto	l3164
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3181  0009B0  0EB1               	movlw	low _crc_buffer
  3182  0009B2  6E1B               	movwf	crcBufS_status_put@_this,c
  3183  0009B4  0E00               	movlw	high _crc_buffer
  3184  0009B6  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3185  0009B8  C0C7  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3186  0009BC  0E02               	movlw	2
  3187  0009BE  6E1E               	movwf	crcBufS_status_put@status,c
  3188  0009C0  ECC8  F003         	call	_crcBufS_status_put	;wreg free
  3189                           
  3190                           ;FastTransfer.c: 396: break;
  3191  0009C4  0012               	return	
  3192  0009C6                     l3164:
  3193  0009C6  0100               	movlb	0	; () banked
  3194  0009C8  4BC7               	infsnz	CRCcheck@rt& (0+255),f,b
  3195  0009CA  2BC8               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3196  0009CC  D7B7               	goto	l3146
  3197  0009CE                     l513:
  3198  0009CE  0012               	return		;funcret
  3199  0009D0                     __end_of_CRCcheck:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           prodh	equ	0xFF4
  3206                           prodl	equ	0xFF3
  3207                           intcon	equ	0xFF2
  3208                           postinc0	equ	0xFEE
  3209                           wreg	equ	0xFE8
  3210                           postdec1	equ	0xFE5
  3211                           fsr1l	equ	0xFE1
  3212                           indf2	equ	0xFDF
  3213                           postinc2	equ	0xFDE
  3214                           postdec2	equ	0xFDD
  3215                           plusw2	equ	0xFDB
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _crcBufS_status_put *****************
  3221 ;; Defined at:
  3222 ;;		line 336 in file "FastTransfer.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3225 ;;		 -> crc_buffer(17), 
  3226 ;;  time            1   28[COMRAM] unsigned char 
  3227 ;;  status          1   29[COMRAM] unsigned char 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  wantedTime      2   34[COMRAM] int 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;		None               void
  3232 ;; Registers used:
  3233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         4       0       0       0       0       0       0
  3240 ;;      Locals:         2       0       0       0       0       0       0
  3241 ;;      Temps:          4       0       0       0       0       0       0
  3242 ;;      Totals:        10       0       0       0       0       0       0
  3243 ;;Total ram usage:       10 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    4
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_CRCcheck
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text12
  3254  000790                     __ptext12:
  3255                           	opt stack 0
  3256  000790                     _crcBufS_status_put:
  3257                           	opt stack 23
  3258                           
  3259                           ;FastTransfer.c: 337: if (time >= 5) {
  3260                           
  3261                           ;incstack = 0
  3262  000790  0E04               	movlw	4
  3263  000792  641D               	cpfsgt	crcBufS_status_put@time,c
  3264  000794  D002               	goto	l3104
  3265                           
  3266                           ;FastTransfer.c: 338: time = 5 - 1;
  3267  000796  0E04               	movlw	4
  3268  000798  6E1D               	movwf	crcBufS_status_put@time,c
  3269  00079A                     l3104:
  3270                           
  3271                           ;FastTransfer.c: 339: }
  3272                           ;FastTransfer.c: 340: time = time + 1;
  3273  00079A  281D               	incf	crcBufS_status_put@time,w,c
  3274  00079C  6E1D               	movwf	crcBufS_status_put@time,c
  3275                           
  3276                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3277  00079E  501D               	movf	crcBufS_status_put@time,w,c
  3278  0007A0  0D03               	mullw	3
  3279  0007A2  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3280  0007A6  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3281                           
  3282                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3283  0007AA  EE20 F00F          	lfsr	2,15
  3284  0007AE  501B               	movf	crcBufS_status_put@_this,w,c
  3285  0007B0  26D9               	addwf	fsr2l,f,c
  3286  0007B2  501C               	movf	crcBufS_status_put@_this+1,w,c
  3287  0007B4  22DA               	addwfc	fsr2h,f,c
  3288  0007B6  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3289  0007B8  5CDE               	subwf	postinc2,w,c
  3290  0007BA  50DE               	movf	postinc2,w,c
  3291  0007BC  0A80               	xorlw	128
  3292  0007BE  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3293  0007C0  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3294  0007C2  0A80               	xorlw	128
  3295  0007C4  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3296  0007C6  B0D8               	btfsc	status,0,c
  3297  0007C8  D02B               	goto	l3112
  3298                           
  3299                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3300  0007CA  EE20 F00F          	lfsr	2,15
  3301  0007CE  501B               	movf	crcBufS_status_put@_this,w,c
  3302  0007D0  26D9               	addwf	fsr2l,f,c
  3303  0007D2  501C               	movf	crcBufS_status_put@_this+1,w,c
  3304  0007D4  22DA               	addwfc	fsr2h,f,c
  3305  0007D6  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3306  0007DA  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3307  0007DE  1E1F               	comf	??_crcBufS_status_put,f,c
  3308  0007E0  1E20               	comf	??_crcBufS_status_put+1,f,c
  3309  0007E2  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3310  0007E4  2A20               	incf	??_crcBufS_status_put+1,f,c
  3311  0007E6  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3312  0007E8  261F               	addwf	??_crcBufS_status_put,f,c
  3313  0007EA  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3314  0007EC  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3315  0007EE  1E1F               	comf	??_crcBufS_status_put,f,c
  3316  0007F0  1E20               	comf	??_crcBufS_status_put+1,f,c
  3317  0007F2  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3318  0007F4  2A20               	incf	??_crcBufS_status_put+1,f,c
  3319  0007F6  0E0F               	movlw	15
  3320  0007F8  241F               	addwf	??_crcBufS_status_put,w,c
  3321  0007FA  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3322  0007FC  0E00               	movlw	0
  3323  0007FE  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3324  000800  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3325                           
  3326                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3327  000802  0E02               	movlw	2
  3328  000804  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3329  000806  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3330  000808  0E00               	movlw	0
  3331  00080A  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3332  00080C  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3333  00080E  501F               	movf	??_crcBufS_status_put,w,c
  3334  000810  241B               	addwf	crcBufS_status_put@_this,w,c
  3335  000812  6ED9               	movwf	fsr2l,c
  3336  000814  5020               	movf	??_crcBufS_status_put+1,w,c
  3337  000816  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3338  000818  6EDA               	movwf	fsr2h,c
  3339  00081A  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3340                           
  3341                           ;FastTransfer.c: 345: } else {
  3342  00081E  0012               	return	
  3343  000820                     l3112:
  3344                           
  3345                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3346  000820  EE20 F00F          	lfsr	2,15
  3347  000824  501B               	movf	crcBufS_status_put@_this,w,c
  3348  000826  26D9               	addwf	fsr2l,f,c
  3349  000828  501C               	movf	crcBufS_status_put@_this+1,w,c
  3350  00082A  22DA               	addwfc	fsr2h,f,c
  3351  00082C  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3352  000830  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3353  000834  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3354  000838  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3355  00083C  1E21               	comf	??_crcBufS_status_put+2,f,c
  3356  00083E  1E22               	comf	??_crcBufS_status_put+3,f,c
  3357  000840  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3358  000842  2A22               	incf	??_crcBufS_status_put+3,f,c
  3359  000844  501F               	movf	??_crcBufS_status_put,w,c
  3360  000846  2621               	addwf	??_crcBufS_status_put+2,f,c
  3361  000848  5020               	movf	??_crcBufS_status_put+1,w,c
  3362  00084A  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3363  00084C  0E02               	movlw	2
  3364  00084E  2621               	addwf	??_crcBufS_status_put+2,f,c
  3365  000850  0E00               	movlw	0
  3366  000852  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3367  000854  5021               	movf	??_crcBufS_status_put+2,w,c
  3368  000856  241B               	addwf	crcBufS_status_put@_this,w,c
  3369  000858  6ED9               	movwf	fsr2l,c
  3370  00085A  5022               	movf	??_crcBufS_status_put+3,w,c
  3371  00085C  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3372  00085E  6EDA               	movwf	fsr2h,c
  3373  000860  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3374  000864  0012               	return	
  3375  000866                     __end_of_crcBufS_status_put:
  3376                           	opt stack 0
  3377                           tblptru	equ	0xFF8
  3378                           tblptrh	equ	0xFF7
  3379                           tblptrl	equ	0xFF6
  3380                           tablat	equ	0xFF5
  3381                           prodh	equ	0xFF4
  3382                           prodl	equ	0xFF3
  3383                           intcon	equ	0xFF2
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           postdec2	equ	0xFDD
  3391                           plusw2	equ	0xFDB
  3392                           fsr2h	equ	0xFDA
  3393                           fsr2l	equ	0xFD9
  3394                           status	equ	0xFD8
  3395                           
  3396 ;; *************** function _crcBufS_get *****************
  3397 ;; Defined at:
  3398 ;;		line 353 in file "FastTransfer.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3401 ;;		 -> crc_buffer(17), 
  3402 ;;  time            1   28[COMRAM] unsigned char 
  3403 ;;  space           1   29[COMRAM] unsigned char 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  wantedTime      2   36[COMRAM] int 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      unsigned char 
  3408 ;; Registers used:
  3409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3415 ;;      Params:         4       0       0       0       0       0       0
  3416 ;;      Locals:         2       0       0       0       0       0       0
  3417 ;;      Temps:          6       0       0       0       0       0       0
  3418 ;;      Totals:        12       0       0       0       0       0       0
  3419 ;;Total ram usage:       12 bytes
  3420 ;; Hardware stack levels used:    1
  3421 ;; Hardware stack levels required when called:    4
  3422 ;; This function calls:
  3423 ;;		Nothing
  3424 ;; This function is called by:
  3425 ;;		_CRCcheck
  3426 ;;		_AKNAK
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text13
  3431  0005D6                     __ptext13:
  3432                           	opt stack 0
  3433  0005D6                     _crcBufS_get:
  3434                           	opt stack 23
  3435                           
  3436                           ;FastTransfer.c: 354: if (time >= 5) {
  3437                           
  3438                           ;incstack = 0
  3439  0005D6  0E04               	movlw	4
  3440  0005D8  641D               	cpfsgt	crcBufS_get@time,c
  3441  0005DA  D002               	goto	l3080
  3442                           
  3443                           ;FastTransfer.c: 355: time = 5 - 1;
  3444  0005DC  0E04               	movlw	4
  3445  0005DE  6E1D               	movwf	crcBufS_get@time,c
  3446  0005E0                     l3080:
  3447                           
  3448                           ;FastTransfer.c: 356: }
  3449                           ;FastTransfer.c: 357: if (space >= 3) {
  3450  0005E0  0E02               	movlw	2
  3451  0005E2  641E               	cpfsgt	crcBufS_get@space,c
  3452  0005E4  D002               	goto	l3084
  3453                           
  3454                           ;FastTransfer.c: 358: space = 3 - 1;
  3455  0005E6  0E02               	movlw	2
  3456  0005E8  6E1E               	movwf	crcBufS_get@space,c
  3457  0005EA                     l3084:
  3458                           
  3459                           ;FastTransfer.c: 359: }
  3460                           ;FastTransfer.c: 360: time = time + 1;
  3461  0005EA  281D               	incf	crcBufS_get@time,w,c
  3462  0005EC  6E1D               	movwf	crcBufS_get@time,c
  3463                           
  3464                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3465  0005EE  501D               	movf	crcBufS_get@time,w,c
  3466  0005F0  0D03               	mullw	3
  3467  0005F2  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3468  0005F6  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3469                           
  3470                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3471  0005FA  EE20 F00F          	lfsr	2,15
  3472  0005FE  501B               	movf	crcBufS_get@_this,w,c
  3473  000600  26D9               	addwf	fsr2l,f,c
  3474  000602  501C               	movf	crcBufS_get@_this+1,w,c
  3475  000604  22DA               	addwfc	fsr2h,f,c
  3476  000606  5025               	movf	crcBufS_get@wantedTime,w,c
  3477  000608  5CDE               	subwf	postinc2,w,c
  3478  00060A  50DE               	movf	postinc2,w,c
  3479  00060C  0A80               	xorlw	128
  3480  00060E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3481  000610  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3482  000612  0A80               	xorlw	128
  3483  000614  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3484  000616  B0D8               	btfsc	status,0,c
  3485  000618  D02A               	goto	l3096
  3486                           
  3487                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3488  00061A  EE20 F00F          	lfsr	2,15
  3489  00061E  501B               	movf	crcBufS_get@_this,w,c
  3490  000620  26D9               	addwf	fsr2l,f,c
  3491  000622  501C               	movf	crcBufS_get@_this+1,w,c
  3492  000624  22DA               	addwfc	fsr2h,f,c
  3493  000626  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3494  00062A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3495  00062E  1E1F               	comf	??_crcBufS_get,f,c
  3496  000630  1E20               	comf	??_crcBufS_get+1,f,c
  3497  000632  4A1F               	infsnz	??_crcBufS_get,f,c
  3498  000634  2A20               	incf	??_crcBufS_get+1,f,c
  3499  000636  5025               	movf	crcBufS_get@wantedTime,w,c
  3500  000638  261F               	addwf	??_crcBufS_get,f,c
  3501  00063A  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3502  00063C  2220               	addwfc	??_crcBufS_get+1,f,c
  3503  00063E  1E1F               	comf	??_crcBufS_get,f,c
  3504  000640  1E20               	comf	??_crcBufS_get+1,f,c
  3505  000642  4A1F               	infsnz	??_crcBufS_get,f,c
  3506  000644  2A20               	incf	??_crcBufS_get+1,f,c
  3507  000646  0E0F               	movlw	15
  3508  000648  241F               	addwf	??_crcBufS_get,w,c
  3509  00064A  6E25               	movwf	crcBufS_get@wantedTime,c
  3510  00064C  0E00               	movlw	0
  3511  00064E  2020               	addwfc	??_crcBufS_get+1,w,c
  3512  000650  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3513                           
  3514                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3515  000652  501E               	movf	crcBufS_get@space,w,c
  3516  000654  2425               	addwf	crcBufS_get@wantedTime,w,c
  3517  000656  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3518  000658  0E00               	movlw	0
  3519  00065A  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3520  00065C  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3521  00065E  501F               	movf	??_crcBufS_get,w,c
  3522  000660  241B               	addwf	crcBufS_get@_this,w,c
  3523  000662  6ED9               	movwf	fsr2l,c
  3524  000664  5020               	movf	??_crcBufS_get+1,w,c
  3525  000666  201C               	addwfc	crcBufS_get@_this+1,w,c
  3526  000668  6EDA               	movwf	fsr2h,c
  3527  00066A  50DF               	movf	indf2,w,c
  3528                           
  3529                           ;FastTransfer.c: 365: } else {
  3530  00066C  0012               	return	
  3531  00066E                     l3096:
  3532                           
  3533                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3534  00066E  EE20 F00F          	lfsr	2,15
  3535  000672  501B               	movf	crcBufS_get@_this,w,c
  3536  000674  26D9               	addwf	fsr2l,f,c
  3537  000676  501C               	movf	crcBufS_get@_this+1,w,c
  3538  000678  22DA               	addwfc	fsr2h,f,c
  3539  00067A  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3540  00067E  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3541  000682  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3542  000686  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3543  00068A  1E21               	comf	??_crcBufS_get+2,f,c
  3544  00068C  1E22               	comf	??_crcBufS_get+3,f,c
  3545  00068E  4A21               	infsnz	??_crcBufS_get+2,f,c
  3546  000690  2A22               	incf	??_crcBufS_get+3,f,c
  3547  000692  501E               	movf	crcBufS_get@space,w,c
  3548  000694  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3549  000696  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3550  000698  5021               	movf	??_crcBufS_get+2,w,c
  3551  00069A  2623               	addwf	??_crcBufS_get+4,f,c
  3552  00069C  5022               	movf	??_crcBufS_get+3,w,c
  3553  00069E  2224               	addwfc	??_crcBufS_get+5,f,c
  3554  0006A0  501F               	movf	??_crcBufS_get,w,c
  3555  0006A2  2623               	addwf	??_crcBufS_get+4,f,c
  3556  0006A4  5020               	movf	??_crcBufS_get+1,w,c
  3557  0006A6  2224               	addwfc	??_crcBufS_get+5,f,c
  3558  0006A8  5023               	movf	??_crcBufS_get+4,w,c
  3559  0006AA  241B               	addwf	crcBufS_get@_this,w,c
  3560  0006AC  6ED9               	movwf	fsr2l,c
  3561  0006AE  5024               	movf	??_crcBufS_get+5,w,c
  3562  0006B0  201C               	addwfc	crcBufS_get@_this+1,w,c
  3563  0006B2  6EDA               	movwf	fsr2h,c
  3564  0006B4  50DF               	movf	indf2,w,c
  3565  0006B6  0012               	return	
  3566  0006B8                     __end_of_crcBufS_get:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           intcon	equ	0xFF2
  3575                           postinc0	equ	0xFEE
  3576                           wreg	equ	0xFE8
  3577                           postdec1	equ	0xFE5
  3578                           fsr1l	equ	0xFE1
  3579                           indf2	equ	0xFDF
  3580                           postinc2	equ	0xFDE
  3581                           postdec2	equ	0xFDD
  3582                           plusw2	equ	0xFDB
  3583                           fsr2h	equ	0xFDA
  3584                           fsr2l	equ	0xFD9
  3585                           status	equ	0xFD8
  3586                           
  3587 ;; *************** function _CRC8 *****************
  3588 ;; Defined at:
  3589 ;;		line 34 in file "FastTransfer.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3592 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1484(3), receiveData@holder(3), rx_buffer(200), 
  3593 ;;		 -> ring_buffer(206), NULL(0), 
  3594 ;;  len             1   28[COMRAM] unsigned char 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  sum             1   29[COMRAM] unsigned char 
  3597 ;;  tempI           1   31[COMRAM] unsigned char 
  3598 ;;  extract         1   30[COMRAM] unsigned char 
  3599 ;;  crc             1   32[COMRAM] unsigned char 
  3600 ;; Return value:  Size  Location     Type
  3601 ;;                  1    wreg      unsigned char 
  3602 ;; Registers used:
  3603 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3604 ;; Tracked objects:
  3605 ;;		On entry : 0/0
  3606 ;;		On exit  : 0/0
  3607 ;;		Unchanged: 0/0
  3608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3609 ;;      Params:         3       0       0       0       0       0       0
  3610 ;;      Locals:         4       0       0       0       0       0       0
  3611 ;;      Temps:          0       0       0       0       0       0       0
  3612 ;;      Totals:         7       0       0       0       0       0       0
  3613 ;;Total ram usage:        7 bytes
  3614 ;; Hardware stack levels used:    1
  3615 ;; Hardware stack levels required when called:    4
  3616 ;; This function calls:
  3617 ;;		Nothing
  3618 ;; This function is called by:
  3619 ;;		_sendData
  3620 ;;		_receiveData
  3621 ;;		_CRCcheck
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text14
  3626  000F28                     __ptext14:
  3627                           	opt stack 0
  3628  000F28                     _CRC8:
  3629                           	opt stack 23
  3630                           
  3631                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3632                           
  3633                           ;incstack = 0
  3634  000F28  0E00               	movlw	0
  3635  000F2A  6E21               	movwf	CRC8@crc,c
  3636                           
  3637                           ;FastTransfer.c: 36: while (len--) {
  3638  000F2C  D01C               	goto	l3042
  3639  000F2E                     l3026:
  3640                           
  3641                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3642  000F2E  C01B  FFD9         	movff	CRC8@data,fsr2l
  3643  000F32  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3644  000F36  50DF               	movf	indf2,w,c
  3645  000F38  6E1F               	movwf	CRC8@extract,c
  3646  000F3A  4A1B               	infsnz	CRC8@data,f,c
  3647  000F3C  2A1C               	incf	CRC8@data+1,f,c
  3648                           
  3649                           ;FastTransfer.c: 38: unsigned char tempI;
  3650                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3651  000F3E  0E08               	movlw	8
  3652  000F40  6E20               	movwf	CRC8@tempI,c
  3653  000F42  D00E               	goto	l3040
  3654  000F44                     l3032:
  3655                           
  3656                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3657  000F44  5021               	movf	CRC8@crc,w,c
  3658  000F46  181F               	xorwf	CRC8@extract,w,c
  3659  000F48  0B01               	andlw	1
  3660  000F4A  6E1E               	movwf	CRC8@sum,c
  3661                           
  3662                           ;FastTransfer.c: 41: crc >>= 1;
  3663  000F4C  90D8               	bcf	status,0,c
  3664  000F4E  3221               	rrcf	CRC8@crc,f,c
  3665                           
  3666                           ;FastTransfer.c: 42: if (sum) {
  3667  000F50  501E               	movf	CRC8@sum,w,c
  3668  000F52  B4D8               	btfsc	status,2,c
  3669  000F54  D002               	goto	l399
  3670                           
  3671                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3672  000F56  0E8C               	movlw	140
  3673  000F58  1A21               	xorwf	CRC8@crc,f,c
  3674  000F5A                     l399:
  3675                           
  3676                           ;FastTransfer.c: 44: }
  3677                           ;FastTransfer.c: 45: extract >>= 1;
  3678  000F5A  90D8               	bcf	status,0,c
  3679  000F5C  321F               	rrcf	CRC8@extract,f,c
  3680  000F5E  0620               	decf	CRC8@tempI,f,c
  3681  000F60                     l3040:
  3682  000F60  5020               	movf	CRC8@tempI,w,c
  3683  000F62  A4D8               	btfss	status,2,c
  3684  000F64  D7EF               	goto	l3032
  3685  000F66                     l3042:
  3686  000F66  061D               	decf	CRC8@len,f,c
  3687  000F68  281D               	incf	CRC8@len,w,c
  3688  000F6A  A4D8               	btfss	status,2,c
  3689  000F6C  D7E0               	goto	l3026
  3690                           
  3691                           ;FastTransfer.c: 46: }
  3692                           ;FastTransfer.c: 47: }
  3693                           ;FastTransfer.c: 48: return crc;
  3694  000F6E  5021               	movf	CRC8@crc,w,c
  3695  000F70  0012               	return	
  3696  000F72                     __end_of_CRC8:
  3697                           	opt stack 0
  3698                           tblptru	equ	0xFF8
  3699                           tblptrh	equ	0xFF7
  3700                           tblptrl	equ	0xFF6
  3701                           tablat	equ	0xFF5
  3702                           prodh	equ	0xFF4
  3703                           prodl	equ	0xFF3
  3704                           intcon	equ	0xFF2
  3705                           postinc0	equ	0xFEE
  3706                           wreg	equ	0xFE8
  3707                           postdec1	equ	0xFE5
  3708                           fsr1l	equ	0xFE1
  3709                           indf2	equ	0xFDF
  3710                           postinc2	equ	0xFDE
  3711                           postdec2	equ	0xFDD
  3712                           plusw2	equ	0xFDB
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function _SetCharger *****************
  3718 ;; Defined at:
  3719 ;;		line 58 in file "Functions.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  mode            1    wreg     unsigned char 
  3722 ;;  Current         1   38[COMRAM] unsigned char 
  3723 ;;  Voltage         1   39[COMRAM] unsigned char 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  mode            1    0[BANK0 ] unsigned char 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3735 ;;      Params:         2       0       0       0       0       0       0
  3736 ;;      Locals:         0       1       0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0
  3738 ;;      Totals:         2       1       0       0       0       0       0
  3739 ;;Total ram usage:        3 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; Hardware stack levels required when called:    7
  3742 ;; This function calls:
  3743 ;;		_SetMux
  3744 ;;		_printf
  3745 ;; This function is called by:
  3746 ;;		_updateComms
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           	psect	text15
  3751  000D6A                     __ptext15:
  3752                           	opt stack 0
  3753  000D6A                     _SetCharger:
  3754                           	opt stack 22
  3755                           
  3756                           ;incstack = 0
  3757                           ;SetCharger@mode stored from wreg
  3758  000D6A  0100               	movlb	0	; () banked
  3759  000D6C  6FC2               	movwf	SetCharger@mode& (0+255),b
  3760                           
  3761                           ;Functions.c: 59: if(mode == 1){
  3762  000D6E  0100               	movlb	0	; () banked
  3763  000D70  05C2               	decf	SetCharger@mode& (0+255),w,b
  3764  000D72  A4D8               	btfss	status,2,c
  3765  000D74  D016               	goto	l3418
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;Functions.c: 61: SetMux(1);
  3769  000D76  0E01               	movlw	1
  3770  000D78  ECD6  F007         	call	_SetMux
  3771                           
  3772                           ;Functions.c: 64: ChargerData[2] = 001;
  3773  000D7C  0E01               	movlw	1
  3774  000D7E  0100               	movlb	0	; () banked
  3775  000D80  6FDF               	movwf	(_ChargerData+2)& (0+255),b
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;Functions.c: 65: ChargerData[4] = 000;
  3779  000D82  0E00               	movlw	0
  3780  000D84  0100               	movlb	0	; () banked
  3781  000D86  6FE1               	movwf	(_ChargerData+4)& (0+255),b
  3782                           
  3783                           ; BSR set to: 0
  3784                           ;Functions.c: 66: ChargerData[6] = 001;
  3785  000D88  0E01               	movlw	1
  3786  000D8A  0100               	movlb	0	; () banked
  3787  000D8C  6FE3               	movwf	(_ChargerData+6)& (0+255),b
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;Functions.c: 68: printf("%s",ChargerData);
  3791  000D8E  0EFB               	movlw	low STR_2
  3792  000D90  6E1D               	movwf	printf@f,c
  3793  000D92  0E7F               	movlw	high STR_2
  3794  000D94  6E1E               	movwf	printf@f+1,c
  3795  000D96  0EDD               	movlw	low _ChargerData
  3796  000D98  6E1F               	movwf	?_printf+2,c
  3797  000D9A  0E00               	movlw	high _ChargerData
  3798  000D9C  6E20               	movwf	?_printf+3,c
  3799  000D9E  EC33  F004         	call	_printf	;wreg free
  3800  000DA2                     l3418:
  3801                           
  3802                           ;Functions.c: 69: }
  3803                           ;Functions.c: 70: if(mode == 2){
  3804  000DA2  0E02               	movlw	2
  3805  000DA4  0100               	movlb	0	; () banked
  3806  000DA6  19C2               	xorwf	SetCharger@mode& (0+255),w,b
  3807  000DA8  A4D8               	btfss	status,2,c
  3808  000DAA  0012               	return	
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;Functions.c: 72: SetMux(1);
  3812  000DAC  0E01               	movlw	1
  3813  000DAE  ECD6  F007         	call	_SetMux
  3814                           
  3815                           ;Functions.c: 74: ChargerData[2] = Current;
  3816  000DB2  C027  F0DF         	movff	SetCharger@Current,_ChargerData+2
  3817                           
  3818                           ;Functions.c: 75: ChargerData[4] = Voltage;
  3819  000DB6  C028  F0E1         	movff	SetCharger@Voltage,_ChargerData+4
  3820                           
  3821                           ;Functions.c: 77: ChargerData[6] = (Current + Voltage)%1,000;
  3822  000DBA  0E00               	movlw	0
  3823  000DBC  0100               	movlb	0	; () banked
  3824  000DBE  6FE3               	movwf	(_ChargerData+6)& (0+255),b
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;Functions.c: 79: printf("%s",ChargerData);
  3828  000DC0  0EFB               	movlw	low STR_2
  3829  000DC2  6E1D               	movwf	printf@f,c
  3830  000DC4  0E7F               	movlw	high STR_2
  3831  000DC6  6E1E               	movwf	printf@f+1,c
  3832  000DC8  0EDD               	movlw	low _ChargerData
  3833  000DCA  6E1F               	movwf	?_printf+2,c
  3834  000DCC  0E00               	movlw	high _ChargerData
  3835  000DCE  6E20               	movwf	?_printf+3,c
  3836  000DD0  EC33  F004         	call	_printf	;wreg free
  3837  000DD4  0012               	return	
  3838  000DD6                     __end_of_SetCharger:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           intcon	equ	0xFF2
  3847                           postinc0	equ	0xFEE
  3848                           wreg	equ	0xFE8
  3849                           postdec1	equ	0xFE5
  3850                           fsr1l	equ	0xFE1
  3851                           indf2	equ	0xFDF
  3852                           postinc2	equ	0xFDE
  3853                           postdec2	equ	0xFDD
  3854                           plusw2	equ	0xFDB
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _printf *****************
  3860 ;; Defined at:
  3861 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3864 ;;		 -> STR_3(3), STR_2(3), 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  tmpval          4    0        struct .
  3867 ;;  cp              2   36[COMRAM] PTR const unsigned char 
  3868 ;;		 -> STR_4(7), ChargerData(9), 
  3869 ;;  ap              2   33[COMRAM] PTR void [1]
  3870 ;;		 -> ?_printf(2), 
  3871 ;;  len             2    0        unsigned int 
  3872 ;;  val             2    0        unsigned int 
  3873 ;;  c               1   35[COMRAM] char 
  3874 ;;  flag            1   32[COMRAM] unsigned char 
  3875 ;;  prec            1    0        char 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  2   28[COMRAM] int 
  3878 ;; Registers used:
  3879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3885 ;;      Params:         4       0       0       0       0       0       0
  3886 ;;      Locals:         6       0       0       0       0       0       0
  3887 ;;      Temps:          0       0       0       0       0       0       0
  3888 ;;      Totals:        10       0       0       0       0       0       0
  3889 ;;Total ram usage:       10 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    6
  3892 ;; This function calls:
  3893 ;;		_putch
  3894 ;; This function is called by:
  3895 ;;		_SetCharger
  3896 ;; This function uses a non-reentrant model
  3897 ;;
  3898                           
  3899                           	psect	text16
  3900  000866                     __ptext16:
  3901                           	opt stack 0
  3902  000866                     _printf:
  3903                           	opt stack 22
  3904                           
  3905                           ;doprnt.c: 466: va_list ap;
  3906                           ;doprnt.c: 499: signed char c;
  3907                           ;doprnt.c: 506: signed char prec;
  3908                           ;doprnt.c: 508: unsigned char flag;
  3909                           ;doprnt.c: 523: union {
  3910                           ;doprnt.c: 524: unsigned long vd;
  3911                           ;doprnt.c: 525: double integ;
  3912                           ;doprnt.c: 526: } tmpval;
  3913                           ;doprnt.c: 528: unsigned int val;
  3914                           ;doprnt.c: 529: unsigned len;
  3915                           ;doprnt.c: 530: const char * cp;
  3916                           ;doprnt.c: 533: *ap = __va_start();
  3917                           
  3918                           ;incstack = 0
  3919  000866  0E1F               	movlw	low (?_printf+2)
  3920  000868  6E22               	movwf	printf@ap,c
  3921  00086A  0E00               	movlw	high (?_printf+2)
  3922  00086C  6E23               	movwf	printf@ap+1,c
  3923                           
  3924                           ;doprnt.c: 536: while(c = *f++) {
  3925  00086E  D058               	goto	l3202
  3926  000870                     l3178:
  3927                           
  3928                           ;doprnt.c: 538: if(c != '%')
  3929  000870  0E25               	movlw	37
  3930  000872  1824               	xorwf	printf@c,w,c
  3931  000874  B4D8               	btfsc	status,2,c
  3932  000876  D004               	goto	l3182
  3933                           
  3934                           ;doprnt.c: 540: {
  3935                           ;doprnt.c: 541: (putch(c) );
  3936  000878  5024               	movf	printf@c,w,c
  3937  00087A  EC5E  F009         	call	_putch
  3938                           
  3939                           ;doprnt.c: 542: continue;
  3940  00087E  D050               	goto	l3202
  3941  000880                     l3182:
  3942                           
  3943                           ;doprnt.c: 543: }
  3944                           ;doprnt.c: 548: flag = 0;
  3945  000880  0E00               	movlw	0
  3946  000882  6E21               	movwf	printf@flag,c
  3947                           
  3948                           ;doprnt.c: 635: switch(c = *f++) {
  3949  000884  D03D               	goto	l3200
  3950  000886                     l3184:
  3951                           
  3952                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3953  000886  C022  FFD9         	movff	printf@ap,fsr2l
  3954  00088A  C023  FFDA         	movff	printf@ap+1,fsr2h
  3955  00088E  CFDE F025          	movff	postinc2,printf@cp
  3956  000892  CFDD F026          	movff	postdec2,printf@cp+1
  3957  000896  0E02               	movlw	2
  3958  000898  2622               	addwf	printf@ap,f,c
  3959  00089A  0E00               	movlw	0
  3960  00089C  2223               	addwfc	printf@ap+1,f,c
  3961                           
  3962                           ;doprnt.c: 740: if(!cp)
  3963  00089E  5025               	movf	printf@cp,w,c
  3964  0008A0  1026               	iorwf	printf@cp+1,w,c
  3965  0008A2  A4D8               	btfss	status,2,c
  3966  0008A4  D019               	goto	l3196
  3967                           
  3968                           ;doprnt.c: 741: cp = "(null)";
  3969  0008A6  0EF4               	movlw	low STR_4
  3970  0008A8  6E25               	movwf	printf@cp,c
  3971  0008AA  0E7F               	movlw	high STR_4
  3972  0008AC  6E26               	movwf	printf@cp+1,c
  3973                           
  3974                           ;doprnt.c: 777: while(*cp)
  3975  0008AE  D014               	goto	l3196
  3976  0008B0                     l3192:
  3977                           
  3978                           ;doprnt.c: 778: (putch(*cp++) );
  3979  0008B0  C025  FFF6         	movff	printf@cp,tblptrl
  3980  0008B4  C026  FFF7         	movff	printf@cp+1,tblptrh
  3981  0008B8  6AF8               	clrf	tblptru,c
  3982  0008BA  0E05               	movlw	(high __ramtop+-1)
  3983  0008BC  64F7               	cpfsgt	tblptrh,c
  3984  0008BE  D003               	bra	u2247
  3985  0008C0  0008               	tblrd		*
  3986  0008C2  50F5               	movf	tablat,w,c
  3987  0008C4  D005               	bra	u2240
  3988  0008C6                     u2247:
  3989  0008C6  CFF6 FFE9          	movff	tblptrl,fsr0l
  3990  0008CA  CFF7 FFEA          	movff	tblptrh,fsr0h
  3991  0008CE  50EF               	movf	indf0,w,c
  3992  0008D0                     u2240:
  3993  0008D0  EC5E  F009         	call	_putch
  3994  0008D4  4A25               	infsnz	printf@cp,f,c
  3995  0008D6  2A26               	incf	printf@cp+1,f,c
  3996  0008D8                     l3196:
  3997  0008D8  C025  FFF6         	movff	printf@cp,tblptrl
  3998  0008DC  C026  FFF7         	movff	printf@cp+1,tblptrh
  3999  0008E0  6AF8               	clrf	tblptru,c
  4000  0008E2  0E05               	movlw	(high __ramtop+-1)
  4001  0008E4  64F7               	cpfsgt	tblptrh,c
  4002  0008E6  D003               	bra	u2257
  4003  0008E8  0008               	tblrd		*
  4004  0008EA  50F5               	movf	tablat,w,c
  4005  0008EC  D005               	bra	u2250
  4006  0008EE                     u2257:
  4007  0008EE  CFF6 FFE9          	movff	tblptrl,fsr0l
  4008  0008F2  CFF7 FFEA          	movff	tblptrh,fsr0h
  4009  0008F6  50EF               	movf	indf0,w,c
  4010  0008F8                     u2250:
  4011  0008F8  0900               	iorlw	0
  4012  0008FA  B4D8               	btfsc	status,2,c
  4013  0008FC  D011               	goto	l3202
  4014  0008FE  D7D8               	goto	l3192
  4015  000900                     l3200:
  4016  000900  C01D  FFF6         	movff	printf@f,tblptrl
  4017  000904  C01E  FFF7         	movff	printf@f+1,tblptrh
  4018  000908  4A1D               	infsnz	printf@f,f,c
  4019  00090A  2A1E               	incf	printf@f+1,f,c
  4020  00090C                     	if	0	;tblptru may be non-zero
  4021  00090C                     	endif
  4022  00090C                     	if	0	;tblptru may be non-zero
  4023  00090C                     	endif
  4024  00090C  0008               	tblrd		*
  4025  00090E  CFF5 F024          	movff	tablat,printf@c
  4026  000912  5024               	movf	printf@c,w,c
  4027                           
  4028                           ; Switch size 1, requested type "space"
  4029                           ; Number of cases is 2, Range of values is 0 to 115
  4030                           ; switch strategies available:
  4031                           ; Name         Instructions Cycles
  4032                           ; simple_byte            7     4 (average)
  4033                           ;	Chosen strategy is simple_byte
  4034  000914  0A00               	xorlw	0	; case 0
  4035  000916  B4D8               	btfsc	status,2,c
  4036  000918  0012               	return	
  4037  00091A  0A73               	xorlw	115	; case 115
  4038  00091C  B4D8               	btfsc	status,2,c
  4039  00091E  D7B3               	goto	l3184
  4040  000920                     l3202:
  4041  000920  C01D  FFF6         	movff	printf@f,tblptrl
  4042  000924  C01E  FFF7         	movff	printf@f+1,tblptrh
  4043  000928  4A1D               	infsnz	printf@f,f,c
  4044  00092A  2A1E               	incf	printf@f+1,f,c
  4045  00092C                     	if	0	;tblptru may be non-zero
  4046  00092C                     	endif
  4047  00092C                     	if	0	;tblptru may be non-zero
  4048  00092C                     	endif
  4049  00092C  0008               	tblrd		*
  4050  00092E  CFF5 F024          	movff	tablat,printf@c
  4051  000932  5024               	movf	printf@c,w,c
  4052  000934  B4D8               	btfsc	status,2,c
  4053  000936  0012               	return	
  4054  000938  D79B               	goto	l3178
  4055  00093A                     __end_of_printf:
  4056                           	opt stack 0
  4057                           tblptru	equ	0xFF8
  4058                           tblptrh	equ	0xFF7
  4059                           tblptrl	equ	0xFF6
  4060                           tablat	equ	0xFF5
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           indf0	equ	0xFEF
  4065                           postinc0	equ	0xFEE
  4066                           fsr0h	equ	0xFEA
  4067                           fsr0l	equ	0xFE9
  4068                           wreg	equ	0xFE8
  4069                           postdec1	equ	0xFE5
  4070                           fsr1l	equ	0xFE1
  4071                           indf2	equ	0xFDF
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           plusw2	equ	0xFDB
  4075                           fsr2h	equ	0xFDA
  4076                           fsr2l	equ	0xFD9
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function _putch *****************
  4080 ;; Defined at:
  4081 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  txData          1    wreg     unsigned char 
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;  txData          1   27[COMRAM] unsigned char 
  4086 ;; Return value:  Size  Location     Type
  4087 ;;		None               void
  4088 ;; Registers used:
  4089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4095 ;;      Params:         0       0       0       0       0       0       0
  4096 ;;      Locals:         1       0       0       0       0       0       0
  4097 ;;      Temps:          0       0       0       0       0       0       0
  4098 ;;      Totals:         1       0       0       0       0       0       0
  4099 ;;Total ram usage:        1 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    5
  4102 ;; This function calls:
  4103 ;;		_EUSART2_Write
  4104 ;; This function is called by:
  4105 ;;		_printf
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text17
  4110  0012BC                     __ptext17:
  4111                           	opt stack 0
  4112  0012BC                     _putch:
  4113                           	opt stack 22
  4114                           
  4115                           ;incstack = 0
  4116                           ;putch@txData stored from wreg
  4117  0012BC  6E1C               	movwf	putch@txData,c
  4118                           
  4119                           ;eusart2.c: 152: EUSART2_Write(txData);
  4120  0012BE  501C               	movf	putch@txData,w,c
  4121  0012C0  ECB9  F007         	call	_EUSART2_Write
  4122  0012C4  0012               	return		;funcret
  4123  0012C6                     __end_of_putch:
  4124                           	opt stack 0
  4125                           tblptru	equ	0xFF8
  4126                           tblptrh	equ	0xFF7
  4127                           tblptrl	equ	0xFF6
  4128                           tablat	equ	0xFF5
  4129                           prodh	equ	0xFF4
  4130                           prodl	equ	0xFF3
  4131                           intcon	equ	0xFF2
  4132                           indf0	equ	0xFEF
  4133                           postinc0	equ	0xFEE
  4134                           fsr0h	equ	0xFEA
  4135                           fsr0l	equ	0xFE9
  4136                           wreg	equ	0xFE8
  4137                           postdec1	equ	0xFE5
  4138                           fsr1l	equ	0xFE1
  4139                           indf2	equ	0xFDF
  4140                           postinc2	equ	0xFDE
  4141                           postdec2	equ	0xFDD
  4142                           plusw2	equ	0xFDB
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _EUSART2_Write *****************
  4148 ;; Defined at:
  4149 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  txData          1    wreg     unsigned char 
  4152 ;; Auto vars:     Size  Location     Type
  4153 ;;  txData          1   26[COMRAM] unsigned char 
  4154 ;; Return value:  Size  Location     Type
  4155 ;;		None               void
  4156 ;; Registers used:
  4157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4158 ;; Tracked objects:
  4159 ;;		On entry : 0/0
  4160 ;;		On exit  : 0/0
  4161 ;;		Unchanged: 0/0
  4162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4163 ;;      Params:         0       0       0       0       0       0       0
  4164 ;;      Locals:         1       0       0       0       0       0       0
  4165 ;;      Temps:          0       0       0       0       0       0       0
  4166 ;;      Totals:         1       0       0       0       0       0       0
  4167 ;;Total ram usage:        1 bytes
  4168 ;; Hardware stack levels used:    1
  4169 ;; Hardware stack levels required when called:    4
  4170 ;; This function calls:
  4171 ;;		Nothing
  4172 ;; This function is called by:
  4173 ;;		_putch
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text18
  4178  000F72                     __ptext18:
  4179                           	opt stack 0
  4180  000F72                     _EUSART2_Write:
  4181                           	opt stack 22
  4182                           
  4183                           ;incstack = 0
  4184                           ;EUSART2_Write@txData stored from wreg
  4185  000F72  6E1B               	movwf	EUSART2_Write@txData,c
  4186  000F74                     l2986:
  4187  000F74  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  4188  000F76  B4D8               	btfsc	status,2,c
  4189  000F78  D7FD               	goto	l2986
  4190                           
  4191                           ;eusart2.c: 132: }
  4192                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  4193  000F7A  B8A3               	btfsc	4003,4,c	;volatile
  4194  000F7C  D003               	goto	l85
  4195                           
  4196                           ;eusart2.c: 135: TXREG2 = txData;
  4197  000F7E  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4198                           
  4199                           ;eusart2.c: 136: } else {
  4200  000F82  D012               	goto	l3000
  4201  000F84                     l85:
  4202                           
  4203                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  4204  000F84  98A3               	bcf	4003,4,c	;volatile
  4205                           
  4206                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  4207  000F86  5038               	movf	_eusart2TxHead,w,c
  4208  000F88  0D01               	mullw	1
  4209  000F8A  0E9B               	movlw	low _eusart2TxBuffer
  4210  000F8C  24F3               	addwf	prodl,w,c
  4211  000F8E  6ED9               	movwf	fsr2l,c
  4212  000F90  0E00               	movlw	high _eusart2TxBuffer
  4213  000F92  20F4               	addwfc	prodh,w,c
  4214  000F94  6EDA               	movwf	fsr2h,c
  4215  000F96  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  4216  000F9A  2A38               	incf	_eusart2TxHead,f,c
  4217                           
  4218                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  4219  000F9C  0E07               	movlw	7
  4220  000F9E  6438               	cpfsgt	_eusart2TxHead,c
  4221  000FA0  D002               	goto	l2998
  4222                           
  4223                           ;eusart2.c: 140: eusart2TxHead = 0;
  4224  000FA2  0E00               	movlw	0
  4225  000FA4  6E38               	movwf	_eusart2TxHead,c
  4226  000FA6                     l2998:
  4227                           
  4228                           ;eusart2.c: 141: }
  4229                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  4230  000FA6  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4231  000FA8                     l3000:
  4232                           
  4233                           ;eusart2.c: 143: }
  4234                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  4235  000FA8  88A3               	bsf	4003,4,c	;volatile
  4236  000FAA  0012               	return		;funcret
  4237  000FAC                     __end_of_EUSART2_Write:
  4238                           	opt stack 0
  4239                           tblptru	equ	0xFF8
  4240                           tblptrh	equ	0xFF7
  4241                           tblptrl	equ	0xFF6
  4242                           tablat	equ	0xFF5
  4243                           prodh	equ	0xFF4
  4244                           prodl	equ	0xFF3
  4245                           intcon	equ	0xFF2
  4246                           indf0	equ	0xFEF
  4247                           postinc0	equ	0xFEE
  4248                           fsr0h	equ	0xFEA
  4249                           fsr0l	equ	0xFE9
  4250                           wreg	equ	0xFE8
  4251                           postdec1	equ	0xFE5
  4252                           fsr1l	equ	0xFE1
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           plusw2	equ	0xFDB
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _SetMux *****************
  4262 ;; Defined at:
  4263 ;;		line 90 in file "Functions.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;  channel         1    wreg     unsigned char 
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  channel         1   26[COMRAM] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;		None               void
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4277 ;;      Params:         0       0       0       0       0       0       0
  4278 ;;      Locals:         1       0       0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0
  4280 ;;      Totals:         1       0       0       0       0       0       0
  4281 ;;Total ram usage:        1 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    4
  4284 ;; This function calls:
  4285 ;;		Nothing
  4286 ;; This function is called by:
  4287 ;;		_SetCharger
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291                           	psect	text19
  4292  000FAC                     __ptext19:
  4293                           	opt stack 0
  4294  000FAC                     _SetMux:
  4295                           	opt stack 24
  4296                           
  4297                           ;incstack = 0
  4298                           ;SetMux@channel stored from wreg
  4299  000FAC  6E1B               	movwf	SetMux@channel,c
  4300                           
  4301                           ;Functions.c: 91: switch (channel){
  4302  000FAE  D00C               	goto	l3174
  4303  000FB0                     l662:
  4304  000FB0  908A               	bcf	3978,0,c	;volatile
  4305                           
  4306                           ;Functions.c: 94: do { LATB1 = 0; } while(0);
  4307  000FB2  928A               	bcf	3978,1,c	;volatile
  4308                           
  4309                           ;Functions.c: 95: break;
  4310  000FB4  0012               	return	
  4311  000FB6                     l668:
  4312  000FB6  808A               	bsf	3978,0,c	;volatile
  4313                           
  4314                           ;Functions.c: 98: do { LATB1 = 0; } while(0);
  4315  000FB8  928A               	bcf	3978,1,c	;volatile
  4316                           
  4317                           ;Functions.c: 99: break;
  4318  000FBA  0012               	return	
  4319  000FBC                     l673:
  4320  000FBC  908A               	bcf	3978,0,c	;volatile
  4321                           
  4322                           ;Functions.c: 102: do { LATB1 = 1; } while(0);
  4323  000FBE  828A               	bsf	3978,1,c	;volatile
  4324                           
  4325                           ;Functions.c: 103: break;
  4326  000FC0  0012               	return	
  4327  000FC2                     l678:
  4328  000FC2  808A               	bsf	3978,0,c	;volatile
  4329                           
  4330                           ;Functions.c: 106: do { LATB1 = 1; } while(0);
  4331  000FC4  828A               	bsf	3978,1,c	;volatile
  4332                           
  4333                           ;Functions.c: 111: }
  4334                           
  4335                           ;Functions.c: 110: break;
  4336                           
  4337                           ;Functions.c: 108: default:
  4338                           
  4339                           ;Functions.c: 107: break;
  4340  000FC6  0012               	return	
  4341  000FC8                     l3174:
  4342  000FC8  501B               	movf	SetMux@channel,w,c
  4343                           
  4344                           ; Switch size 1, requested type "space"
  4345                           ; Number of cases is 4, Range of values is 1 to 4
  4346                           ; switch strategies available:
  4347                           ; Name         Instructions Cycles
  4348                           ; simple_byte           13     7 (average)
  4349                           ;	Chosen strategy is simple_byte
  4350  000FCA  0A01               	xorlw	1	; case 1
  4351  000FCC  B4D8               	btfsc	status,2,c
  4352  000FCE  D7F0               	goto	l662
  4353  000FD0  0A03               	xorlw	3	; case 2
  4354  000FD2  B4D8               	btfsc	status,2,c
  4355  000FD4  D7F0               	goto	l668
  4356  000FD6  0A01               	xorlw	1	; case 3
  4357  000FD8  B4D8               	btfsc	status,2,c
  4358  000FDA  D7F0               	goto	l673
  4359  000FDC  0A07               	xorlw	7	; case 4
  4360  000FDE  A4D8               	btfss	status,2,c
  4361  000FE0  0012               	return	
  4362  000FE2  D7EF               	goto	l678
  4363  000FE4                     __end_of_SetMux:
  4364                           	opt stack 0
  4365                           tblptru	equ	0xFF8
  4366                           tblptrh	equ	0xFF7
  4367                           tblptrl	equ	0xFF6
  4368                           tablat	equ	0xFF5
  4369                           prodh	equ	0xFF4
  4370                           prodl	equ	0xFF3
  4371                           intcon	equ	0xFF2
  4372                           indf0	equ	0xFEF
  4373                           postinc0	equ	0xFEE
  4374                           fsr0h	equ	0xFEA
  4375                           fsr0l	equ	0xFE9
  4376                           wreg	equ	0xFE8
  4377                           postdec1	equ	0xFE5
  4378                           fsr1l	equ	0xFE1
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           plusw2	equ	0xFDB
  4383                           fsr2h	equ	0xFDA
  4384                           fsr2l	equ	0xFD9
  4385                           status	equ	0xFD8
  4386                           
  4387 ;; *************** function _Precharge *****************
  4388 ;; Defined at:
  4389 ;;		line 25 in file "Functions.c"
  4390 ;; Parameters:    Size  Location     Type
  4391 ;;  OnOff           1    wreg     unsigned char 
  4392 ;; Auto vars:     Size  Location     Type
  4393 ;;  OnOff           1   35[COMRAM] unsigned char 
  4394 ;;  i               2   38[COMRAM] int 
  4395 ;;  i               2   36[COMRAM] int 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;		None               void
  4398 ;; Registers used:
  4399 ;;		wreg, status,2, status,0, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4405 ;;      Params:         0       0       0       0       0       0       0
  4406 ;;      Locals:         5       0       0       0       0       0       0
  4407 ;;      Temps:          0       0       0       0       0       0       0
  4408 ;;      Totals:         5       0       0       0       0       0       0
  4409 ;;Total ram usage:        5 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    5
  4412 ;; This function calls:
  4413 ;;		_Delay
  4414 ;; This function is called by:
  4415 ;;		_updateComms
  4416 ;; This function uses a non-reentrant model
  4417 ;;
  4418                           
  4419                           	psect	text20
  4420  000B7C                     __ptext20:
  4421                           	opt stack 0
  4422  000B7C                     _Precharge:
  4423                           	opt stack 24
  4424                           
  4425                           ;incstack = 0
  4426                           ;Precharge@OnOff stored from wreg
  4427  000B7C  6E24               	movwf	Precharge@OnOff,c
  4428                           
  4429                           ;Functions.c: 26: if(OnOff){
  4430  000B7E  5024               	movf	Precharge@OnOff,w,c
  4431  000B80  B4D8               	btfsc	status,2,c
  4432  000B82  D01F               	goto	l640
  4433                           
  4434                           ;Functions.c: 27: do { LATC1 = 1; } while(0);
  4435  000B84  828B               	bsf	3979,1,c	;volatile
  4436                           
  4437                           ;Functions.c: 28: do { LATB3 = 1; } while(0);
  4438  000B86  868A               	bsf	3978,3,c	;volatile
  4439                           
  4440                           ;Functions.c: 29: for(int i = 0;i<5;i++){
  4441  000B88  0E00               	movlw	0
  4442  000B8A  6E26               	movwf	Precharge@i+1,c
  4443  000B8C  0E00               	movlw	0
  4444  000B8E  6E25               	movwf	Precharge@i,c
  4445  000B90                     l3384:
  4446  000B90  BE26               	btfsc	Precharge@i+1,7,c
  4447  000B92  D006               	goto	l3388
  4448  000B94  5026               	movf	Precharge@i+1,w,c
  4449  000B96  E111               	bnz	l633
  4450  000B98  0E05               	movlw	5
  4451  000B9A  5C25               	subwf	Precharge@i,w,c
  4452  000B9C  B0D8               	btfsc	status,0,c
  4453  000B9E  D00D               	goto	l633
  4454  000BA0                     l3388:
  4455                           
  4456                           ;Functions.c: 30: Delay(1000);
  4457  000BA0  0EE8               	movlw	232
  4458  000BA2  6E1B               	movwf	Delay@wait,c
  4459  000BA4  0E03               	movlw	3
  4460  000BA6  6E1C               	movwf	Delay@wait+1,c
  4461  000BA8  0E00               	movlw	0
  4462  000BAA  6E1D               	movwf	Delay@wait+2,c
  4463  000BAC  0E00               	movlw	0
  4464  000BAE  6E1E               	movwf	Delay@wait+3,c
  4465  000BB0  EC6E  F007         	call	_Delay	;wreg free
  4466  000BB4  4A25               	infsnz	Precharge@i,f,c
  4467  000BB6  2A26               	incf	Precharge@i+1,f,c
  4468  000BB8  D7EB               	goto	l3384
  4469  000BBA                     l633:
  4470  000BBA  888A               	bsf	3978,4,c	;volatile
  4471                           
  4472                           ;Functions.c: 33: do { LATC0 = 1; } while(0);
  4473  000BBC  808B               	bsf	3979,0,c	;volatile
  4474                           
  4475                           ;Functions.c: 34: do { LATB5 = 1; } while(0);
  4476  000BBE  8A8A               	bsf	3978,5,c	;volatile
  4477                           
  4478                           ;Functions.c: 35: }
  4479  000BC0  0012               	return	
  4480  000BC2                     l640:
  4481  000BC2  988A               	bcf	3978,4,c	;volatile
  4482                           
  4483                           ;Functions.c: 39: do { LATB3 = 0; } while(0);
  4484  000BC4  968A               	bcf	3978,3,c	;volatile
  4485                           
  4486                           ;Functions.c: 40: do { LATC0 = 0; } while(0);
  4487  000BC6  908B               	bcf	3979,0,c	;volatile
  4488                           
  4489                           ;Functions.c: 41: for(int i = 0;i<5;i++){
  4490  000BC8  0E00               	movlw	0
  4491  000BCA  6E28               	movwf	Precharge@i_1764+1,c
  4492  000BCC  0E00               	movlw	0
  4493  000BCE  6E27               	movwf	Precharge@i_1764,c
  4494  000BD0                     l3396:
  4495  000BD0  BE28               	btfsc	Precharge@i_1764+1,7,c
  4496  000BD2  D006               	goto	l3400
  4497  000BD4  5028               	movf	Precharge@i_1764+1,w,c
  4498  000BD6  E111               	bnz	l648
  4499  000BD8  0E05               	movlw	5
  4500  000BDA  5C27               	subwf	Precharge@i_1764,w,c
  4501  000BDC  B0D8               	btfsc	status,0,c
  4502  000BDE  D00D               	goto	l648
  4503  000BE0                     l3400:
  4504                           
  4505                           ;Functions.c: 42: Delay(1000);
  4506  000BE0  0EE8               	movlw	232
  4507  000BE2  6E1B               	movwf	Delay@wait,c
  4508  000BE4  0E03               	movlw	3
  4509  000BE6  6E1C               	movwf	Delay@wait+1,c
  4510  000BE8  0E00               	movlw	0
  4511  000BEA  6E1D               	movwf	Delay@wait+2,c
  4512  000BEC  0E00               	movlw	0
  4513  000BEE  6E1E               	movwf	Delay@wait+3,c
  4514  000BF0  EC6E  F007         	call	_Delay	;wreg free
  4515  000BF4  4A27               	infsnz	Precharge@i_1764,f,c
  4516  000BF6  2A28               	incf	Precharge@i_1764+1,f,c
  4517  000BF8  D7EB               	goto	l3396
  4518  000BFA                     l648:
  4519  000BFA  928B               	bcf	3979,1,c	;volatile
  4520                           
  4521                           ;Functions.c: 45: do { LATB5 = 0; } while(0);
  4522  000BFC  9A8A               	bcf	3978,5,c	;volatile
  4523  000BFE  0012               	return	
  4524  000C00                     __end_of_Precharge:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           indf0	equ	0xFEF
  4534                           postinc0	equ	0xFEE
  4535                           fsr0h	equ	0xFEA
  4536                           fsr0l	equ	0xFE9
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           indf2	equ	0xFDF
  4541                           postinc2	equ	0xFDE
  4542                           postdec2	equ	0xFDD
  4543                           plusw2	equ	0xFDB
  4544                           fsr2h	equ	0xFDA
  4545                           fsr2l	equ	0xFD9
  4546                           status	equ	0xFD8
  4547                           
  4548 ;; *************** function _gotoXy *****************
  4549 ;; Defined at:
  4550 ;;		line 98 in file "NokiaLCD.c"
  4551 ;; Parameters:    Size  Location     Type
  4552 ;;  x               1    wreg     unsigned char 
  4553 ;;  y               1   34[COMRAM] unsigned char 
  4554 ;; Auto vars:     Size  Location     Type
  4555 ;;  x               1   35[COMRAM] unsigned char 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;		None               void
  4558 ;; Registers used:
  4559 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4565 ;;      Params:         1       0       0       0       0       0       0
  4566 ;;      Locals:         1       0       0       0       0       0       0
  4567 ;;      Temps:          0       0       0       0       0       0       0
  4568 ;;      Totals:         2       0       0       0       0       0       0
  4569 ;;Total ram usage:        2 bytes
  4570 ;; Hardware stack levels used:    1
  4571 ;; Hardware stack levels required when called:    6
  4572 ;; This function calls:
  4573 ;;		_LCDwrite
  4574 ;; This function is called by:
  4575 ;;		_main
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text21
  4580  001150                     __ptext21:
  4581                           	opt stack 0
  4582  001150                     _gotoXy:
  4583                           	opt stack 24
  4584                           
  4585                           ;incstack = 0
  4586                           ;gotoXy@x stored from wreg
  4587  001150  6E24               	movwf	gotoXy@x,c
  4588                           
  4589                           ;NokiaLCD.c: 99: y=y|0x40;
  4590  001152  5023               	movf	gotoXy@y,w,c
  4591  001154  0940               	iorlw	64
  4592  001156  6E23               	movwf	gotoXy@y,c
  4593                           
  4594                           ;NokiaLCD.c: 100: LCDwrite(1, y);
  4595  001158  C023  F021         	movff	gotoXy@y,LCDwrite@data
  4596  00115C  0E01               	movlw	1
  4597  00115E  EC13  F009         	call	_LCDwrite
  4598                           
  4599                           ;NokiaLCD.c: 101: x=(x*6)|0x80;
  4600  001162  5024               	movf	gotoXy@x,w,c
  4601  001164  0D06               	mullw	6
  4602  001166  50F3               	movf	prodl,w,c
  4603  001168  0980               	iorlw	128
  4604  00116A  6E24               	movwf	gotoXy@x,c
  4605                           
  4606                           ;NokiaLCD.c: 102: LCDwrite(1, x);
  4607  00116C  C024  F021         	movff	gotoXy@x,LCDwrite@data
  4608  001170  0E01               	movlw	1
  4609  001172  EC13  F009         	call	_LCDwrite
  4610  001176  0012               	return		;funcret
  4611  001178                     __end_of_gotoXy:
  4612                           	opt stack 0
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           indf0	equ	0xFEF
  4621                           postinc0	equ	0xFEE
  4622                           fsr0h	equ	0xFEA
  4623                           fsr0l	equ	0xFE9
  4624                           wreg	equ	0xFE8
  4625                           postdec1	equ	0xFE5
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           postinc2	equ	0xFDE
  4629                           postdec2	equ	0xFDD
  4630                           plusw2	equ	0xFDB
  4631                           fsr2h	equ	0xFDA
  4632                           fsr2l	equ	0xFD9
  4633                           status	equ	0xFD8
  4634                           
  4635 ;; *************** function _SYSTEM_Initialize *****************
  4636 ;; Defined at:
  4637 ;;		line 112 in file "mcc_generated_files/mcc.c"
  4638 ;; Parameters:    Size  Location     Type
  4639 ;;		None
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;		None
  4642 ;; Return value:  Size  Location     Type
  4643 ;;		None               void
  4644 ;; Registers used:
  4645 ;;		wreg, status,2, cstack
  4646 ;; Tracked objects:
  4647 ;;		On entry : 0/0
  4648 ;;		On exit  : 0/0
  4649 ;;		Unchanged: 0/0
  4650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4651 ;;      Params:         0       0       0       0       0       0       0
  4652 ;;      Locals:         0       0       0       0       0       0       0
  4653 ;;      Temps:          0       0       0       0       0       0       0
  4654 ;;      Totals:         0       0       0       0       0       0       0
  4655 ;;Total ram usage:        0 bytes
  4656 ;; Hardware stack levels used:    1
  4657 ;; Hardware stack levels required when called:    6
  4658 ;; This function calls:
  4659 ;;		_EUSART2_Initialize
  4660 ;;		_INTERRUPT_Initialize
  4661 ;;		_OSCILLATOR_Initialize
  4662 ;;		_PIN_MANAGER_Initialize
  4663 ;;		_TMR0_Initialize
  4664 ;; This function is called by:
  4665 ;;		_main
  4666 ;; This function uses a non-reentrant model
  4667 ;;
  4668                           
  4669                           	psect	text22
  4670  001258                     __ptext22:
  4671                           	opt stack 0
  4672  001258                     _SYSTEM_Initialize:
  4673                           	opt stack 24
  4674                           
  4675                           ;mcc.c: 113: OSCILLATOR_Initialize();
  4676                           
  4677                           ;incstack = 0
  4678  001258  EC4A  F009         	call	_OSCILLATOR_Initialize	;wreg free
  4679                           
  4680                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  4681  00125C  EC46  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  4682                           
  4683                           ;mcc.c: 115: INTERRUPT_Initialize();
  4684  001260  EC58  F009         	call	_INTERRUPT_Initialize	;wreg free
  4685                           
  4686                           ;mcc.c: 117: EUSART2_Initialize();
  4687  001264  ECF2  F007         	call	_EUSART2_Initialize	;wreg free
  4688                           
  4689                           ;mcc.c: 118: TMR0_Initialize();
  4690  001268  EC20  F009         	call	_TMR0_Initialize	;wreg free
  4691  00126C  0012               	return		;funcret
  4692  00126E                     __end_of_SYSTEM_Initialize:
  4693                           	opt stack 0
  4694                           tblptru	equ	0xFF8
  4695                           tblptrh	equ	0xFF7
  4696                           tblptrl	equ	0xFF6
  4697                           tablat	equ	0xFF5
  4698                           prodh	equ	0xFF4
  4699                           prodl	equ	0xFF3
  4700                           intcon	equ	0xFF2
  4701                           indf0	equ	0xFEF
  4702                           postinc0	equ	0xFEE
  4703                           fsr0h	equ	0xFEA
  4704                           fsr0l	equ	0xFE9
  4705                           wreg	equ	0xFE8
  4706                           postdec1	equ	0xFE5
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           postinc2	equ	0xFDE
  4710                           postdec2	equ	0xFDD
  4711                           plusw2	equ	0xFDB
  4712                           fsr2h	equ	0xFDA
  4713                           fsr2l	equ	0xFD9
  4714                           status	equ	0xFD8
  4715                           
  4716 ;; *************** function _TMR0_Initialize *****************
  4717 ;; Defined at:
  4718 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4719 ;; Parameters:    Size  Location     Type
  4720 ;;		None
  4721 ;; Auto vars:     Size  Location     Type
  4722 ;;		None
  4723 ;; Return value:  Size  Location     Type
  4724 ;;		None               void
  4725 ;; Registers used:
  4726 ;;		wreg, status,2, cstack
  4727 ;; Tracked objects:
  4728 ;;		On entry : 0/0
  4729 ;;		On exit  : 0/0
  4730 ;;		Unchanged: 0/0
  4731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4732 ;;      Params:         0       0       0       0       0       0       0
  4733 ;;      Locals:         0       0       0       0       0       0       0
  4734 ;;      Temps:          0       0       0       0       0       0       0
  4735 ;;      Totals:         0       0       0       0       0       0       0
  4736 ;;Total ram usage:        0 bytes
  4737 ;; Hardware stack levels used:    1
  4738 ;; Hardware stack levels required when called:    5
  4739 ;; This function calls:
  4740 ;;		_TMR0_StartTimer
  4741 ;; This function is called by:
  4742 ;;		_SYSTEM_Initialize
  4743 ;; This function uses a non-reentrant model
  4744 ;;
  4745                           
  4746                           	psect	text23
  4747  001240                     __ptext23:
  4748                           	opt stack 0
  4749  001240                     _TMR0_Initialize:
  4750                           	opt stack 24
  4751                           
  4752                           ;tmr0.c: 68: T0CON = 0x91;
  4753                           
  4754                           ;incstack = 0
  4755  001240  0E91               	movlw	145
  4756  001242  6ED5               	movwf	4053,c	;volatile
  4757                           
  4758                           ;tmr0.c: 71: TMR0H = 0x0A;
  4759  001244  0E0A               	movlw	10
  4760  001246  6ED7               	movwf	4055,c	;volatile
  4761                           
  4762                           ;tmr0.c: 74: TMR0L = 0xFF;
  4763  001248  68D6               	setf	4054,c	;volatile
  4764                           
  4765                           ;tmr0.c: 77: timer0ReloadVal16bit = 2815;
  4766  00124A  0E0A               	movlw	10
  4767  00124C  6E42               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4768  00124E  6841               	setf	_timer0ReloadVal16bit,c	;volatile
  4769                           
  4770                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  4771  001250  94F2               	bcf	intcon,2,c	;volatile
  4772                           
  4773                           ;tmr0.c: 83: TMR0_StartTimer();
  4774  001252  EC68  F009         	call	_TMR0_StartTimer	;wreg free
  4775  001256  0012               	return		;funcret
  4776  001258                     __end_of_TMR0_Initialize:
  4777                           	opt stack 0
  4778                           tblptru	equ	0xFF8
  4779                           tblptrh	equ	0xFF7
  4780                           tblptrl	equ	0xFF6
  4781                           tablat	equ	0xFF5
  4782                           prodh	equ	0xFF4
  4783                           prodl	equ	0xFF3
  4784                           intcon	equ	0xFF2
  4785                           indf0	equ	0xFEF
  4786                           postinc0	equ	0xFEE
  4787                           fsr0h	equ	0xFEA
  4788                           fsr0l	equ	0xFE9
  4789                           wreg	equ	0xFE8
  4790                           postdec1	equ	0xFE5
  4791                           fsr1l	equ	0xFE1
  4792                           indf2	equ	0xFDF
  4793                           postinc2	equ	0xFDE
  4794                           postdec2	equ	0xFDD
  4795                           plusw2	equ	0xFDB
  4796                           fsr2h	equ	0xFDA
  4797                           fsr2l	equ	0xFD9
  4798                           status	equ	0xFD8
  4799                           
  4800 ;; *************** function _TMR0_StartTimer *****************
  4801 ;; Defined at:
  4802 ;;		line 86 in file "mcc_generated_files/tmr0.c"
  4803 ;; Parameters:    Size  Location     Type
  4804 ;;		None
  4805 ;; Auto vars:     Size  Location     Type
  4806 ;;		None
  4807 ;; Return value:  Size  Location     Type
  4808 ;;		None               void
  4809 ;; Registers used:
  4810 ;;		None
  4811 ;; Tracked objects:
  4812 ;;		On entry : 0/0
  4813 ;;		On exit  : 0/0
  4814 ;;		Unchanged: 0/0
  4815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4816 ;;      Params:         0       0       0       0       0       0       0
  4817 ;;      Locals:         0       0       0       0       0       0       0
  4818 ;;      Temps:          0       0       0       0       0       0       0
  4819 ;;      Totals:         0       0       0       0       0       0       0
  4820 ;;Total ram usage:        0 bytes
  4821 ;; Hardware stack levels used:    1
  4822 ;; Hardware stack levels required when called:    4
  4823 ;; This function calls:
  4824 ;;		Nothing
  4825 ;; This function is called by:
  4826 ;;		_TMR0_Initialize
  4827 ;; This function uses a non-reentrant model
  4828 ;;
  4829                           
  4830                           	psect	text24
  4831  0012D0                     __ptext24:
  4832                           	opt stack 0
  4833  0012D0                     _TMR0_StartTimer:
  4834                           	opt stack 24
  4835                           
  4836                           ;tmr0.c: 88: T0CONbits.TMR0ON = 1;
  4837                           
  4838                           ;incstack = 0
  4839  0012D0  8ED5               	bsf	4053,7,c	;volatile
  4840  0012D2  0012               	return		;funcret
  4841  0012D4                     __end_of_TMR0_StartTimer:
  4842                           	opt stack 0
  4843                           tblptru	equ	0xFF8
  4844                           tblptrh	equ	0xFF7
  4845                           tblptrl	equ	0xFF6
  4846                           tablat	equ	0xFF5
  4847                           prodh	equ	0xFF4
  4848                           prodl	equ	0xFF3
  4849                           intcon	equ	0xFF2
  4850                           indf0	equ	0xFEF
  4851                           postinc0	equ	0xFEE
  4852                           fsr0h	equ	0xFEA
  4853                           fsr0l	equ	0xFE9
  4854                           wreg	equ	0xFE8
  4855                           postdec1	equ	0xFE5
  4856                           fsr1l	equ	0xFE1
  4857                           indf2	equ	0xFDF
  4858                           postinc2	equ	0xFDE
  4859                           postdec2	equ	0xFDD
  4860                           plusw2	equ	0xFDB
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _PIN_MANAGER_Initialize *****************
  4866 ;; Defined at:
  4867 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;		None               void
  4874 ;; Registers used:
  4875 ;;		wreg, status,2
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4881 ;;      Params:         0       0       0       0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0       0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0
  4884 ;;      Totals:         0       0       0       0       0       0       0
  4885 ;;Total ram usage:        0 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    4
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_SYSTEM_Initialize
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text25
  4896  000E8C                     __ptext25:
  4897                           	opt stack 0
  4898  000E8C                     _PIN_MANAGER_Initialize:
  4899                           	opt stack 25
  4900                           
  4901                           ;pin_manager.c: 51: LATB = 0x0;
  4902                           
  4903                           ;incstack = 0
  4904  000E8C  0E00               	movlw	0
  4905  000E8E  6E8A               	movwf	3978,c	;volatile
  4906                           
  4907                           ;pin_manager.c: 52: LATA = 0x0;
  4908  000E90  0E00               	movlw	0
  4909  000E92  6E89               	movwf	3977,c	;volatile
  4910                           
  4911                           ;pin_manager.c: 53: ANSELE = 0x7;
  4912  000E94  0E07               	movlw	7
  4913  000E96  010F               	movlb	15	; () banked
  4914  000E98  6F3C               	movwf	60,b	;volatile
  4915                           
  4916                           ;pin_manager.c: 54: LATE = 0x0;
  4917  000E9A  0E00               	movlw	0
  4918  000E9C  6E8D               	movwf	3981,c	;volatile
  4919                           
  4920                           ;pin_manager.c: 55: LATD = 0x0;
  4921  000E9E  0E00               	movlw	0
  4922  000EA0  6E8C               	movwf	3980,c	;volatile
  4923                           
  4924                           ;pin_manager.c: 56: LATC = 0x0;
  4925  000EA2  0E00               	movlw	0
  4926  000EA4  6E8B               	movwf	3979,c	;volatile
  4927                           
  4928                           ;pin_manager.c: 57: ANSELA = 0x2F;
  4929  000EA6  0E2F               	movlw	47
  4930  000EA8  010F               	movlb	15	; () banked
  4931  000EAA  6F38               	movwf	56,b	;volatile
  4932                           
  4933                           ;pin_manager.c: 58: ANSELB = 0x3F;
  4934  000EAC  0E3F               	movlw	63
  4935  000EAE  010F               	movlb	15	; () banked
  4936  000EB0  6F39               	movwf	57,b	;volatile
  4937                           
  4938                           ;pin_manager.c: 59: ANSELC = 0xCC;
  4939  000EB2  0ECC               	movlw	204
  4940  000EB4  010F               	movlb	15	; () banked
  4941  000EB6  6F3A               	movwf	58,b	;volatile
  4942                           
  4943                           ;pin_manager.c: 60: ANSELD = 0x3F;
  4944  000EB8  0E3F               	movlw	63
  4945  000EBA  010F               	movlb	15	; () banked
  4946  000EBC  6F3B               	movwf	59,b	;volatile
  4947                           
  4948                           ;pin_manager.c: 61: WPUB = 0xFC;
  4949  000EBE  0EFC               	movlw	252
  4950  000EC0  6E61               	movwf	3937,c	;volatile
  4951                           
  4952                           ;pin_manager.c: 62: TRISD = 0xF2;
  4953  000EC2  0EF2               	movlw	242
  4954  000EC4  6E95               	movwf	3989,c	;volatile
  4955                           
  4956                           ;pin_manager.c: 63: TRISE = 0x7;
  4957  000EC6  0E07               	movlw	7
  4958  000EC8  6E96               	movwf	3990,c	;volatile
  4959                           
  4960                           ;pin_manager.c: 64: TRISB = 0xC4;
  4961  000ECA  0EC4               	movlw	196
  4962  000ECC  6E93               	movwf	3987,c	;volatile
  4963                           
  4964                           ;pin_manager.c: 65: TRISC = 0xD4;
  4965  000ECE  0ED4               	movlw	212
  4966  000ED0  6E94               	movwf	3988,c	;volatile
  4967                           
  4968                           ;pin_manager.c: 66: TRISA = 0x37;
  4969  000ED2  0E37               	movlw	55
  4970  000ED4  6E92               	movwf	3986,c	;volatile
  4971                           
  4972                           ; BSR set to: 15
  4973                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  4974  000ED6  9EF1               	bcf	intcon2,7,c	;volatile
  4975                           
  4976                           ; BSR set to: 15
  4977                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  4978  000ED8  96F2               	bcf	intcon,3,c	;volatile
  4979                           
  4980                           ; BSR set to: 15
  4981  000EDA  0012               	return		;funcret
  4982  000EDC                     __end_of_PIN_MANAGER_Initialize:
  4983                           	opt stack 0
  4984                           tblptru	equ	0xFF8
  4985                           tblptrh	equ	0xFF7
  4986                           tblptrl	equ	0xFF6
  4987                           tablat	equ	0xFF5
  4988                           prodh	equ	0xFF4
  4989                           prodl	equ	0xFF3
  4990                           intcon	equ	0xFF2
  4991                           intcon2	equ	0xFF1
  4992                           indf0	equ	0xFEF
  4993                           postinc0	equ	0xFEE
  4994                           fsr0h	equ	0xFEA
  4995                           fsr0l	equ	0xFE9
  4996                           wreg	equ	0xFE8
  4997                           postdec1	equ	0xFE5
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           plusw2	equ	0xFDB
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function _OSCILLATOR_Initialize *****************
  5008 ;; Defined at:
  5009 ;;		line 121 in file "mcc_generated_files/mcc.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;		None               void
  5016 ;; Registers used:
  5017 ;;		wreg, status,2
  5018 ;; Tracked objects:
  5019 ;;		On entry : 0/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5023 ;;      Params:         0       0       0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0       0       0
  5025 ;;      Temps:          0       0       0       0       0       0       0
  5026 ;;      Totals:         0       0       0       0       0       0       0
  5027 ;;Total ram usage:        0 bytes
  5028 ;; Hardware stack levels used:    1
  5029 ;; Hardware stack levels required when called:    4
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		_SYSTEM_Initialize
  5034 ;; This function uses a non-reentrant model
  5035 ;;
  5036                           
  5037                           	psect	text26
  5038  001294                     __ptext26:
  5039                           	opt stack 0
  5040  001294                     _OSCILLATOR_Initialize:
  5041                           	opt stack 25
  5042                           
  5043                           ;mcc.c: 123: OSCCON = 0x70;
  5044                           
  5045                           ; BSR set to: 15
  5046                           ;incstack = 0
  5047  001294  0E70               	movlw	112
  5048  001296  6ED3               	movwf	4051,c	;volatile
  5049                           
  5050                           ;mcc.c: 125: OSCCON2 = 0x04;
  5051  001298  0E04               	movlw	4
  5052  00129A  6ED2               	movwf	4050,c	;volatile
  5053                           
  5054                           ;mcc.c: 127: OSCTUNE = 0x00;
  5055  00129C  0E00               	movlw	0
  5056  00129E  6E9B               	movwf	3995,c	;volatile
  5057  0012A0  0012               	return		;funcret
  5058  0012A2                     __end_of_OSCILLATOR_Initialize:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           prodh	equ	0xFF4
  5065                           prodl	equ	0xFF3
  5066                           intcon	equ	0xFF2
  5067                           intcon2	equ	0xFF1
  5068                           indf0	equ	0xFEF
  5069                           postinc0	equ	0xFEE
  5070                           fsr0h	equ	0xFEA
  5071                           fsr0l	equ	0xFE9
  5072                           wreg	equ	0xFE8
  5073                           postdec1	equ	0xFE5
  5074                           fsr1l	equ	0xFE1
  5075                           indf2	equ	0xFDF
  5076                           postinc2	equ	0xFDE
  5077                           postdec2	equ	0xFDD
  5078                           plusw2	equ	0xFDB
  5079                           fsr2h	equ	0xFDA
  5080                           fsr2l	equ	0xFD9
  5081                           status	equ	0xFD8
  5082                           
  5083 ;; *************** function _INTERRUPT_Initialize *****************
  5084 ;; Defined at:
  5085 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;		None
  5088 ;; Auto vars:     Size  Location     Type
  5089 ;;		None
  5090 ;; Return value:  Size  Location     Type
  5091 ;;		None               void
  5092 ;; Registers used:
  5093 ;;		None
  5094 ;; Tracked objects:
  5095 ;;		On entry : 0/0
  5096 ;;		On exit  : 0/0
  5097 ;;		Unchanged: 0/0
  5098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5099 ;;      Params:         0       0       0       0       0       0       0
  5100 ;;      Locals:         0       0       0       0       0       0       0
  5101 ;;      Temps:          0       0       0       0       0       0       0
  5102 ;;      Totals:         0       0       0       0       0       0       0
  5103 ;;Total ram usage:        0 bytes
  5104 ;; Hardware stack levels used:    1
  5105 ;; Hardware stack levels required when called:    4
  5106 ;; This function calls:
  5107 ;;		Nothing
  5108 ;; This function is called by:
  5109 ;;		_SYSTEM_Initialize
  5110 ;; This function uses a non-reentrant model
  5111 ;;
  5112                           
  5113                           	psect	text27
  5114  0012B0                     __ptext27:
  5115                           	opt stack 0
  5116  0012B0                     _INTERRUPT_Initialize:
  5117                           	opt stack 25
  5118                           
  5119                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  5120                           
  5121                           ;incstack = 0
  5122  0012B0  9ED0               	bcf	4048,7,c	;volatile
  5123                           
  5124                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  5125  0012B2  9AA5               	bcf	4005,5,c	;volatile
  5126                           
  5127                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  5128  0012B4  98A5               	bcf	4005,4,c	;volatile
  5129                           
  5130                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  5131  0012B6  9A9F               	bcf	3999,5,c	;volatile
  5132                           
  5133                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  5134  0012B8  989F               	bcf	3999,4,c	;volatile
  5135  0012BA  0012               	return		;funcret
  5136  0012BC                     __end_of_INTERRUPT_Initialize:
  5137                           	opt stack 0
  5138                           tblptru	equ	0xFF8
  5139                           tblptrh	equ	0xFF7
  5140                           tblptrl	equ	0xFF6
  5141                           tablat	equ	0xFF5
  5142                           prodh	equ	0xFF4
  5143                           prodl	equ	0xFF3
  5144                           intcon	equ	0xFF2
  5145                           intcon2	equ	0xFF1
  5146                           indf0	equ	0xFEF
  5147                           postinc0	equ	0xFEE
  5148                           fsr0h	equ	0xFEA
  5149                           fsr0l	equ	0xFE9
  5150                           wreg	equ	0xFE8
  5151                           postdec1	equ	0xFE5
  5152                           fsr1l	equ	0xFE1
  5153                           indf2	equ	0xFDF
  5154                           postinc2	equ	0xFDE
  5155                           postdec2	equ	0xFDD
  5156                           plusw2	equ	0xFDB
  5157                           fsr2h	equ	0xFDA
  5158                           fsr2l	equ	0xFD9
  5159                           status	equ	0xFD8
  5160                           
  5161 ;; *************** function _EUSART2_Initialize *****************
  5162 ;; Defined at:
  5163 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  5164 ;; Parameters:    Size  Location     Type
  5165 ;;		None
  5166 ;; Auto vars:     Size  Location     Type
  5167 ;;		None
  5168 ;; Return value:  Size  Location     Type
  5169 ;;		None               void
  5170 ;; Registers used:
  5171 ;;		wreg, status,2
  5172 ;; Tracked objects:
  5173 ;;		On entry : 0/0
  5174 ;;		On exit  : 0/0
  5175 ;;		Unchanged: 0/0
  5176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5177 ;;      Params:         0       0       0       0       0       0       0
  5178 ;;      Locals:         0       0       0       0       0       0       0
  5179 ;;      Temps:          0       0       0       0       0       0       0
  5180 ;;      Totals:         0       0       0       0       0       0       0
  5181 ;;Total ram usage:        0 bytes
  5182 ;; Hardware stack levels used:    1
  5183 ;; Hardware stack levels required when called:    4
  5184 ;; This function calls:
  5185 ;;		Nothing
  5186 ;; This function is called by:
  5187 ;;		_SYSTEM_Initialize
  5188 ;; This function uses a non-reentrant model
  5189 ;;
  5190                           
  5191                           	psect	text28
  5192  000FE4                     __ptext28:
  5193                           	opt stack 0
  5194  000FE4                     _EUSART2_Initialize:
  5195                           	opt stack 25
  5196                           
  5197                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  5198                           
  5199                           ;incstack = 0
  5200  000FE4  9AA3               	bcf	4003,5,c	;volatile
  5201                           
  5202                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  5203  000FE6  98A3               	bcf	4003,4,c	;volatile
  5204                           
  5205                           ;eusart2.c: 84: BAUD2CON = 0x48;
  5206  000FE8  0E48               	movlw	72
  5207  000FEA  6E70               	movwf	3952,c	;volatile
  5208                           
  5209                           ;eusart2.c: 87: RC2STA = 0x90;
  5210  000FEC  0E90               	movlw	144
  5211  000FEE  6E71               	movwf	3953,c	;volatile
  5212                           
  5213                           ;eusart2.c: 90: TX2STA = 0x26;
  5214  000FF0  0E26               	movlw	38
  5215  000FF2  6E72               	movwf	3954,c	;volatile
  5216                           
  5217                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  5218  000FF4  0EA0               	movlw	160
  5219  000FF6  6E75               	movwf	3957,c	;volatile
  5220                           
  5221                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  5222  000FF8  0E01               	movlw	1
  5223  000FFA  6E76               	movwf	3958,c	;volatile
  5224                           
  5225                           ;eusart2.c: 100: eusart2TxHead = 0;
  5226  000FFC  0E00               	movlw	0
  5227  000FFE  6E38               	movwf	_eusart2TxHead,c
  5228                           
  5229                           ;eusart2.c: 101: eusart2TxTail = 0;
  5230  001000  0E00               	movlw	0
  5231  001002  6E39               	movwf	_eusart2TxTail,c
  5232                           
  5233                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  5234  001004  0E08               	movlw	8
  5235  001006  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5236                           
  5237                           ;eusart2.c: 104: eusart2RxHead = 0;
  5238  001008  0E00               	movlw	0
  5239  00100A  6E36               	movwf	_eusart2RxHead,c
  5240                           
  5241                           ;eusart2.c: 105: eusart2RxTail = 0;
  5242  00100C  0E00               	movlw	0
  5243  00100E  6E37               	movwf	_eusart2RxTail,c
  5244                           
  5245                           ;eusart2.c: 106: eusart2RxCount = 0;
  5246  001010  0E00               	movlw	0
  5247  001012  6E35               	movwf	_eusart2RxCount,c	;volatile
  5248                           
  5249                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  5250  001014  8AA3               	bsf	4003,5,c	;volatile
  5251  001016  0012               	return		;funcret
  5252  001018                     __end_of_EUSART2_Initialize:
  5253                           	opt stack 0
  5254                           tblptru	equ	0xFF8
  5255                           tblptrh	equ	0xFF7
  5256                           tblptrl	equ	0xFF6
  5257                           tablat	equ	0xFF5
  5258                           prodh	equ	0xFF4
  5259                           prodl	equ	0xFF3
  5260                           intcon	equ	0xFF2
  5261                           intcon2	equ	0xFF1
  5262                           indf0	equ	0xFEF
  5263                           postinc0	equ	0xFEE
  5264                           fsr0h	equ	0xFEA
  5265                           fsr0l	equ	0xFE9
  5266                           wreg	equ	0xFE8
  5267                           postdec1	equ	0xFE5
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           plusw2	equ	0xFDB
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277 ;; *************** function _NokiaStr *****************
  5278 ;; Defined at:
  5279 ;;		line 129 in file "NokiaLCD.c"
  5280 ;; Parameters:    Size  Location     Type
  5281 ;;  str             2    0[BANK0 ] PTR unsigned char 
  5282 ;;		 -> STR_1(13), 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;		None
  5285 ;; Return value:  Size  Location     Type
  5286 ;;		None               void
  5287 ;; Registers used:
  5288 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5289 ;; Tracked objects:
  5290 ;;		On entry : 0/0
  5291 ;;		On exit  : 0/0
  5292 ;;		Unchanged: 0/0
  5293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5294 ;;      Params:         0       2       0       0       0       0       0
  5295 ;;      Locals:         0       0       0       0       0       0       0
  5296 ;;      Temps:          0       0       0       0       0       0       0
  5297 ;;      Totals:         0       2       0       0       0       0       0
  5298 ;;Total ram usage:        2 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    7
  5301 ;; This function calls:
  5302 ;;		_LcdCharacter
  5303 ;; This function is called by:
  5304 ;;		_main
  5305 ;; This function uses a non-reentrant model
  5306 ;;
  5307                           
  5308                           	psect	text29
  5309  0010A4                     __ptext29:
  5310                           	opt stack 0
  5311  0010A4                     _NokiaStr:
  5312                           	opt stack 23
  5313                           
  5314                           ;NokiaLCD.c: 130: while (*str)
  5315                           
  5316                           ;incstack = 0
  5317  0010A4  D00B               	goto	l3484
  5318  0010A6                     l3480:
  5319                           
  5320                           ;NokiaLCD.c: 131: {
  5321                           ;NokiaLCD.c: 132: LcdCharacter(*str++);
  5322  0010A6  C0C2  FFF6         	movff	NokiaStr@str,tblptrl
  5323  0010AA  C0C3  FFF7         	movff	NokiaStr@str+1,tblptrh
  5324  0010AE                     	if	0	;tblptru may be non-zero
  5325  0010AE                     	endif
  5326  0010AE                     	if	0	;tblptru may be non-zero
  5327  0010AE                     	endif
  5328  0010AE  0008               	tblrd		*
  5329  0010B0  50F5               	movf	tablat,w,c
  5330  0010B2  EC3E  F006         	call	_LcdCharacter
  5331  0010B6  0100               	movlb	0	; () banked
  5332  0010B8  4BC2               	infsnz	NokiaStr@str& (0+255),f,b
  5333  0010BA  2BC3               	incf	(NokiaStr@str+1)& (0+255),f,b
  5334  0010BC                     l3484:
  5335  0010BC  C0C2  FFF6         	movff	NokiaStr@str,tblptrl
  5336  0010C0  C0C3  FFF7         	movff	NokiaStr@str+1,tblptrh
  5337  0010C4                     	if	0	;tblptru may be non-zero
  5338  0010C4                     	endif
  5339  0010C4                     	if	0	;tblptru may be non-zero
  5340  0010C4                     	endif
  5341  0010C4  0008               	tblrd		*
  5342  0010C6  50F5               	movf	tablat,w,c
  5343  0010C8  0900               	iorlw	0
  5344  0010CA  B4D8               	btfsc	status,2,c
  5345  0010CC  0012               	return	
  5346  0010CE  D7EB               	goto	l3480
  5347  0010D0                     __end_of_NokiaStr:
  5348                           	opt stack 0
  5349                           tblptru	equ	0xFF8
  5350                           tblptrh	equ	0xFF7
  5351                           tblptrl	equ	0xFF6
  5352                           tablat	equ	0xFF5
  5353                           prodh	equ	0xFF4
  5354                           prodl	equ	0xFF3
  5355                           intcon	equ	0xFF2
  5356                           intcon2	equ	0xFF1
  5357                           indf0	equ	0xFEF
  5358                           postinc0	equ	0xFEE
  5359                           fsr0h	equ	0xFEA
  5360                           fsr0l	equ	0xFE9
  5361                           wreg	equ	0xFE8
  5362                           postdec1	equ	0xFE5
  5363                           fsr1l	equ	0xFE1
  5364                           indf2	equ	0xFDF
  5365                           postinc2	equ	0xFDE
  5366                           postdec2	equ	0xFDD
  5367                           plusw2	equ	0xFDB
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _LcdCharacter *****************
  5373 ;; Defined at:
  5374 ;;		line 112 in file "NokiaLCD.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  character       1    wreg     unsigned char 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  character       1   36[COMRAM] unsigned char 
  5379 ;;  index           2   37[COMRAM] int 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;		None               void
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5389 ;;      Params:         0       0       0       0       0       0       0
  5390 ;;      Locals:         3       0       0       0       0       0       0
  5391 ;;      Temps:          2       0       0       0       0       0       0
  5392 ;;      Totals:         5       0       0       0       0       0       0
  5393 ;;Total ram usage:        5 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    6
  5396 ;; This function calls:
  5397 ;;		_LCDwrite
  5398 ;;		___wmul
  5399 ;; This function is called by:
  5400 ;;		_NokiaStr
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text30
  5405  000C7C                     __ptext30:
  5406                           	opt stack 0
  5407  000C7C                     _LcdCharacter:
  5408                           	opt stack 23
  5409                           
  5410                           ;incstack = 0
  5411                           ;LcdCharacter@character stored from wreg
  5412  000C7C  6E25               	movwf	LcdCharacter@character,c
  5413                           
  5414                           ;NokiaLCD.c: 114: LCDwrite(0, 0x00);
  5415  000C7E  0E00               	movlw	0
  5416  000C80  6E21               	movwf	LCDwrite@data,c
  5417  000C82  0E00               	movlw	0
  5418  000C84  EC13  F009         	call	_LCDwrite
  5419                           
  5420                           ;NokiaLCD.c: 115: for (int index = 0; index < 5; index++)
  5421  000C88  0E00               	movlw	0
  5422  000C8A  6E27               	movwf	LcdCharacter@index+1,c
  5423  000C8C  0E00               	movlw	0
  5424  000C8E  6E26               	movwf	LcdCharacter@index,c
  5425  000C90                     l3434:
  5426  000C90  BE27               	btfsc	LcdCharacter@index+1,7,c
  5427  000C92  D006               	goto	l3438
  5428  000C94  5027               	movf	LcdCharacter@index+1,w,c
  5429  000C96  E129               	bnz	l3444
  5430  000C98  0E05               	movlw	5
  5431  000C9A  5C26               	subwf	LcdCharacter@index,w,c
  5432  000C9C  B0D8               	btfsc	status,0,c
  5433  000C9E  D025               	goto	l3444
  5434  000CA0                     l3438:
  5435                           
  5436                           ;NokiaLCD.c: 116: {
  5437                           ;NokiaLCD.c: 117: LCDwrite(0, FONTLOOKUP[character - 0x20][index]);
  5438  000CA0  0EE0               	movlw	224
  5439  000CA2  2425               	addwf	LcdCharacter@character,w,c
  5440  000CA4  6E1B               	movwf	___wmul@multiplier,c
  5441  000CA6  6A1C               	clrf	___wmul@multiplier+1,c
  5442  000CA8  0EFF               	movlw	255
  5443  000CAA  221C               	addwfc	___wmul@multiplier+1,f,c
  5444  000CAC  0E00               	movlw	0
  5445  000CAE  6E1E               	movwf	___wmul@multiplicand+1,c
  5446  000CB0  0E05               	movlw	5
  5447  000CB2  6E1D               	movwf	___wmul@multiplicand,c
  5448  000CB4  ECE3  F008         	call	___wmul	;wreg free
  5449  000CB8  0E07               	movlw	low _FONTLOOKUP
  5450  000CBA  6E23               	movwf	??_LcdCharacter& (0+255),c
  5451  000CBC  0E7E               	movlw	high _FONTLOOKUP
  5452  000CBE  6E24               	movwf	(??_LcdCharacter+1)& (0+255),c
  5453  000CC0  501B               	movf	?___wmul,w,c
  5454  000CC2  2623               	addwf	??_LcdCharacter,f,c
  5455  000CC4  501C               	movf	?___wmul+1,w,c
  5456  000CC6  2224               	addwfc	??_LcdCharacter+1,f,c
  5457  000CC8  5026               	movf	LcdCharacter@index,w,c
  5458  000CCA  2623               	addwf	??_LcdCharacter,f,c
  5459  000CCC  5027               	movf	LcdCharacter@index+1,w,c
  5460  000CCE  2224               	addwfc	??_LcdCharacter+1,f,c
  5461  000CD0  C023  FFF6         	movff	??_LcdCharacter,tblptrl
  5462  000CD4  C024  FFF7         	movff	??_LcdCharacter+1,tblptrh
  5463  000CD8                     	if	0	;tblptru may be non-zero
  5464  000CD8                     	endif
  5465  000CD8                     	if	0	;tblptru may be non-zero
  5466  000CD8                     	endif
  5467  000CD8  0008               	tblrd		*
  5468  000CDA  CFF5 F021          	movff	tablat,LCDwrite@data
  5469  000CDE  0E00               	movlw	0
  5470  000CE0  EC13  F009         	call	_LCDwrite
  5471  000CE4  4A26               	infsnz	LcdCharacter@index,f,c
  5472  000CE6  2A27               	incf	LcdCharacter@index+1,f,c
  5473  000CE8  D7D3               	goto	l3434
  5474  000CEA                     l3444:
  5475                           
  5476                           ;NokiaLCD.c: 118: }
  5477                           ;NokiaLCD.c: 119: LCDwrite(0, 0x00);
  5478  000CEA  0E00               	movlw	0
  5479  000CEC  6E21               	movwf	LCDwrite@data,c
  5480  000CEE  0E00               	movlw	0
  5481  000CF0  EC13  F009         	call	_LCDwrite
  5482  000CF4  0012               	return		;funcret
  5483  000CF6                     __end_of_LcdCharacter:
  5484                           	opt stack 0
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           intcon	equ	0xFF2
  5492                           intcon2	equ	0xFF1
  5493                           indf0	equ	0xFEF
  5494                           postinc0	equ	0xFEE
  5495                           fsr0h	equ	0xFEA
  5496                           fsr0l	equ	0xFE9
  5497                           wreg	equ	0xFE8
  5498                           postdec1	equ	0xFE5
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           plusw2	equ	0xFDB
  5504                           fsr2h	equ	0xFDA
  5505                           fsr2l	equ	0xFD9
  5506                           status	equ	0xFD8
  5507                           
  5508 ;; *************** function ___wmul *****************
  5509 ;; Defined at:
  5510 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\Umul16.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  multiplier      2   26[COMRAM] unsigned int 
  5513 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  product         2   30[COMRAM] unsigned int 
  5516 ;; Return value:  Size  Location     Type
  5517 ;;                  2   26[COMRAM] unsigned int 
  5518 ;; Registers used:
  5519 ;;		wreg, status,2, status,0, prodl, prodh
  5520 ;; Tracked objects:
  5521 ;;		On entry : 0/0
  5522 ;;		On exit  : 0/0
  5523 ;;		Unchanged: 0/0
  5524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5525 ;;      Params:         4       0       0       0       0       0       0
  5526 ;;      Locals:         2       0       0       0       0       0       0
  5527 ;;      Temps:          0       0       0       0       0       0       0
  5528 ;;      Totals:         6       0       0       0       0       0       0
  5529 ;;Total ram usage:        6 bytes
  5530 ;; Hardware stack levels used:    1
  5531 ;; Hardware stack levels required when called:    4
  5532 ;; This function calls:
  5533 ;;		Nothing
  5534 ;; This function is called by:
  5535 ;;		_LcdCharacter
  5536 ;; This function uses a non-reentrant model
  5537 ;;
  5538                           
  5539                           	psect	text31
  5540  0011C6                     __ptext31:
  5541                           	opt stack 0
  5542  0011C6                     ___wmul:
  5543                           	opt stack 24
  5544                           
  5545                           ;incstack = 0
  5546  0011C6  501B               	movf	___wmul@multiplier,w,c
  5547  0011C8  021D               	mulwf	___wmul@multiplicand,c
  5548  0011CA  CFF3 F01F          	movff	prodl,___wmul@product
  5549  0011CE  CFF4 F020          	movff	prodh,___wmul@product+1
  5550  0011D2  501B               	movf	___wmul@multiplier,w,c
  5551  0011D4  021E               	mulwf	___wmul@multiplicand+1,c
  5552  0011D6  50F3               	movf	prodl,w,c
  5553  0011D8  2620               	addwf	___wmul@product+1,f,c
  5554  0011DA  501C               	movf	___wmul@multiplier+1,w,c
  5555  0011DC  021D               	mulwf	___wmul@multiplicand,c
  5556  0011DE  50F3               	movf	prodl,w,c
  5557  0011E0  2620               	addwf	___wmul@product+1,f,c
  5558  0011E2  C01F  F01B         	movff	___wmul@product,?___wmul
  5559  0011E6  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  5560  0011EA  0012               	return	
  5561  0011EC                     __end_of___wmul:
  5562                           	opt stack 0
  5563                           tblptru	equ	0xFF8
  5564                           tblptrh	equ	0xFF7
  5565                           tblptrl	equ	0xFF6
  5566                           tablat	equ	0xFF5
  5567                           prodh	equ	0xFF4
  5568                           prodl	equ	0xFF3
  5569                           intcon	equ	0xFF2
  5570                           intcon2	equ	0xFF1
  5571                           indf0	equ	0xFEF
  5572                           postinc0	equ	0xFEE
  5573                           fsr0h	equ	0xFEA
  5574                           fsr0l	equ	0xFE9
  5575                           wreg	equ	0xFE8
  5576                           postdec1	equ	0xFE5
  5577                           fsr1l	equ	0xFE1
  5578                           indf2	equ	0xFDF
  5579                           postinc2	equ	0xFDE
  5580                           postdec2	equ	0xFDD
  5581                           plusw2	equ	0xFDB
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _NokiaStart *****************
  5587 ;; Defined at:
  5588 ;;		line 25 in file "NokiaLCD.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;		None
  5591 ;; Auto vars:     Size  Location     Type
  5592 ;;		None
  5593 ;; Return value:  Size  Location     Type
  5594 ;;		None               void
  5595 ;; Registers used:
  5596 ;;		wreg, status,2, status,0, cstack
  5597 ;; Tracked objects:
  5598 ;;		On entry : 0/0
  5599 ;;		On exit  : 0/0
  5600 ;;		Unchanged: 0/0
  5601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5602 ;;      Params:         0       0       0       0       0       0       0
  5603 ;;      Locals:         0       0       0       0       0       0       0
  5604 ;;      Temps:          0       0       0       0       0       0       0
  5605 ;;      Totals:         0       0       0       0       0       0       0
  5606 ;;Total ram usage:        0 bytes
  5607 ;; Hardware stack levels used:    1
  5608 ;; Hardware stack levels required when called:    7
  5609 ;; This function calls:
  5610 ;;		_Delay
  5611 ;;		_LCDwrite
  5612 ;;		_SPI1_Initialize
  5613 ;;		_clearLcd
  5614 ;; This function is called by:
  5615 ;;		_main
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text32
  5620  0009D0                     __ptext32:
  5621                           	opt stack 0
  5622  0009D0                     _NokiaStart:
  5623                           	opt stack 23
  5624                           
  5625                           ;NokiaLCD.c: 26: TRISBbits.TRISB6 = 0;
  5626                           
  5627                           ;incstack = 0
  5628  0009D0  9C93               	bcf	3987,6,c	;volatile
  5629                           
  5630                           ;NokiaLCD.c: 27: do { TRISD0 = 0; } while(0);
  5631  0009D2  9095               	bcf	3989,0,c	;volatile
  5632                           
  5633                           ;NokiaLCD.c: 28: do { TRISD3 = 0; } while(0);
  5634  0009D4  9695               	bcf	3989,3,c	;volatile
  5635                           
  5636                           ;NokiaLCD.c: 29: do { TRISD2 = 0; } while(0);
  5637  0009D6  9495               	bcf	3989,2,c	;volatile
  5638                           
  5639                           ;NokiaLCD.c: 30: do { LATD0 = 1; } while(0);
  5640  0009D8  808C               	bsf	3980,0,c	;volatile
  5641                           
  5642                           ;NokiaLCD.c: 31: SPI1_Initialize();
  5643  0009DA  EC51  F009         	call	_SPI1_Initialize	;wreg free
  5644                           
  5645                           ;NokiaLCD.c: 32: LATBbits.LATB6 = 1;
  5646  0009DE  8C8A               	bsf	3978,6,c	;volatile
  5647                           
  5648                           ;NokiaLCD.c: 33: Delay(100);
  5649  0009E0  0E64               	movlw	100
  5650  0009E2  6E1B               	movwf	Delay@wait,c
  5651  0009E4  0E00               	movlw	0
  5652  0009E6  6E1C               	movwf	Delay@wait+1,c
  5653  0009E8  0E00               	movlw	0
  5654  0009EA  6E1D               	movwf	Delay@wait+2,c
  5655  0009EC  0E00               	movlw	0
  5656  0009EE  6E1E               	movwf	Delay@wait+3,c
  5657  0009F0  EC6E  F007         	call	_Delay	;wreg free
  5658                           
  5659                           ;NokiaLCD.c: 34: LATBbits.LATB6 = 0;
  5660  0009F4  9C8A               	bcf	3978,6,c	;volatile
  5661                           
  5662                           ;NokiaLCD.c: 35: Delay(100);
  5663  0009F6  0E64               	movlw	100
  5664  0009F8  6E1B               	movwf	Delay@wait,c
  5665  0009FA  0E00               	movlw	0
  5666  0009FC  6E1C               	movwf	Delay@wait+1,c
  5667  0009FE  0E00               	movlw	0
  5668  000A00  6E1D               	movwf	Delay@wait+2,c
  5669  000A02  0E00               	movlw	0
  5670  000A04  6E1E               	movwf	Delay@wait+3,c
  5671  000A06  EC6E  F007         	call	_Delay	;wreg free
  5672                           
  5673                           ;NokiaLCD.c: 36: LATBbits.LATB6 = 1;
  5674  000A0A  8C8A               	bsf	3978,6,c	;volatile
  5675                           
  5676                           ;NokiaLCD.c: 37: LCDwrite(1, 0x21);
  5677  000A0C  0E21               	movlw	33
  5678  000A0E  6E21               	movwf	LCDwrite@data,c
  5679  000A10  0E01               	movlw	1
  5680  000A12  EC13  F009         	call	_LCDwrite
  5681                           
  5682                           ;NokiaLCD.c: 38: LCDwrite(1, 0xC8);
  5683  000A16  0EC8               	movlw	200
  5684  000A18  6E21               	movwf	LCDwrite@data,c
  5685  000A1A  0E01               	movlw	1
  5686  000A1C  EC13  F009         	call	_LCDwrite
  5687                           
  5688                           ;NokiaLCD.c: 39: LCDwrite(1, 0x04 | !!((66-2) & (1u << 6)));
  5689  000A20  0E05               	movlw	5
  5690  000A22  6E21               	movwf	LCDwrite@data,c
  5691  000A24  0E01               	movlw	1
  5692  000A26  EC13  F009         	call	_LCDwrite
  5693                           
  5694                           ;NokiaLCD.c: 40: LCDwrite(1, 0x40 | ((66-2) & ((1u << 6) - 1)));
  5695  000A2A  0E40               	movlw	64
  5696  000A2C  6E21               	movwf	LCDwrite@data,c
  5697  000A2E  0E01               	movlw	1
  5698  000A30  EC13  F009         	call	_LCDwrite
  5699                           
  5700                           ;NokiaLCD.c: 42: LCDwrite(1, 0x14);
  5701  000A34  0E14               	movlw	20
  5702  000A36  6E21               	movwf	LCDwrite@data,c
  5703  000A38  0E01               	movlw	1
  5704  000A3A  EC13  F009         	call	_LCDwrite
  5705                           
  5706                           ;NokiaLCD.c: 43: LCDwrite(1, 0x20);
  5707  000A3E  0E20               	movlw	32
  5708  000A40  6E21               	movwf	LCDwrite@data,c
  5709  000A42  0E01               	movlw	1
  5710  000A44  EC13  F009         	call	_LCDwrite
  5711                           
  5712                           ;NokiaLCD.c: 44: LCDwrite(1, 0x08);
  5713  000A48  0E08               	movlw	8
  5714  000A4A  6E21               	movwf	LCDwrite@data,c
  5715  000A4C  0E01               	movlw	1
  5716  000A4E  EC13  F009         	call	_LCDwrite
  5717                           
  5718                           ;NokiaLCD.c: 45: LCDwrite(1, 0x0C);
  5719  000A52  0E0C               	movlw	12
  5720  000A54  6E21               	movwf	LCDwrite@data,c
  5721  000A56  0E01               	movlw	1
  5722  000A58  EC13  F009         	call	_LCDwrite
  5723                           
  5724                           ;NokiaLCD.c: 46: clearLcd();
  5725  000A5C  ECBC  F008         	call	_clearLcd	;wreg free
  5726  000A60  0012               	return		;funcret
  5727  000A62                     __end_of_NokiaStart:
  5728                           	opt stack 0
  5729                           tblptru	equ	0xFF8
  5730                           tblptrh	equ	0xFF7
  5731                           tblptrl	equ	0xFF6
  5732                           tablat	equ	0xFF5
  5733                           prodh	equ	0xFF4
  5734                           prodl	equ	0xFF3
  5735                           intcon	equ	0xFF2
  5736                           intcon2	equ	0xFF1
  5737                           indf0	equ	0xFEF
  5738                           postinc0	equ	0xFEE
  5739                           fsr0h	equ	0xFEA
  5740                           fsr0l	equ	0xFE9
  5741                           wreg	equ	0xFE8
  5742                           postdec1	equ	0xFE5
  5743                           fsr1l	equ	0xFE1
  5744                           indf2	equ	0xFDF
  5745                           postinc2	equ	0xFDE
  5746                           postdec2	equ	0xFDD
  5747                           plusw2	equ	0xFDB
  5748                           fsr2h	equ	0xFDA
  5749                           fsr2l	equ	0xFD9
  5750                           status	equ	0xFD8
  5751                           
  5752 ;; *************** function _clearLcd *****************
  5753 ;; Defined at:
  5754 ;;		line 69 in file "NokiaLCD.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;		None
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;  res             2   34[COMRAM] int 
  5759 ;; Return value:  Size  Location     Type
  5760 ;;		None               void
  5761 ;; Registers used:
  5762 ;;		wreg, status,2, status,0, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5768 ;;      Params:         0       0       0       0       0       0       0
  5769 ;;      Locals:         2       0       0       0       0       0       0
  5770 ;;      Temps:          0       0       0       0       0       0       0
  5771 ;;      Totals:         2       0       0       0       0       0       0
  5772 ;;Total ram usage:        2 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    6
  5775 ;; This function calls:
  5776 ;;		_LCDwrite
  5777 ;; This function is called by:
  5778 ;;		_main
  5779 ;;		_NokiaStart
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text33
  5784  001178                     __ptext33:
  5785                           	opt stack 0
  5786  001178                     _clearLcd:
  5787                           	opt stack 24
  5788                           
  5789                           ;NokiaLCD.c: 70: int res;
  5790                           ;NokiaLCD.c: 71: for(res=0;res<504;res++){
  5791                           
  5792                           ;incstack = 0
  5793  001178  0E00               	movlw	0
  5794  00117A  6E24               	movwf	clearLcd@res+1,c
  5795  00117C  0E00               	movlw	0
  5796  00117E  6E23               	movwf	clearLcd@res,c
  5797  001180                     l3244:
  5798  001180  BE24               	btfsc	clearLcd@res+1,7,c
  5799  001182  D006               	goto	l3248
  5800  001184  0EF8               	movlw	248
  5801  001186  5C23               	subwf	clearLcd@res,w,c
  5802  001188  0E01               	movlw	1
  5803  00118A  5824               	subwfb	clearLcd@res+1,w,c
  5804  00118C  B0D8               	btfsc	status,0,c
  5805  00118E  0012               	return	
  5806  001190                     l3248:
  5807                           
  5808                           ;NokiaLCD.c: 72: LCDwrite(0, 0x00);
  5809  001190  0E00               	movlw	0
  5810  001192  6E21               	movwf	LCDwrite@data,c
  5811  001194  0E00               	movlw	0
  5812  001196  EC13  F009         	call	_LCDwrite
  5813  00119A  4A23               	infsnz	clearLcd@res,f,c
  5814  00119C  2A24               	incf	clearLcd@res+1,f,c
  5815  00119E  D7F0               	goto	l3244
  5816  0011A0                     __end_of_clearLcd:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           intcon2	equ	0xFF1
  5826                           indf0	equ	0xFEF
  5827                           postinc0	equ	0xFEE
  5828                           fsr0h	equ	0xFEA
  5829                           fsr0l	equ	0xFE9
  5830                           wreg	equ	0xFE8
  5831                           postdec1	equ	0xFE5
  5832                           fsr1l	equ	0xFE1
  5833                           indf2	equ	0xFDF
  5834                           postinc2	equ	0xFDE
  5835                           postdec2	equ	0xFDD
  5836                           plusw2	equ	0xFDB
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _LCDwrite *****************
  5842 ;; Defined at:
  5843 ;;		line 50 in file "NokiaLCD.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  mode            1    wreg     unsigned char 
  5846 ;;  data            1   32[COMRAM] unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  mode            1   33[COMRAM] unsigned char 
  5849 ;; Return value:  Size  Location     Type
  5850 ;;		None               void
  5851 ;; Registers used:
  5852 ;;		wreg, status,2, cstack
  5853 ;; Tracked objects:
  5854 ;;		On entry : 0/0
  5855 ;;		On exit  : 0/0
  5856 ;;		Unchanged: 0/0
  5857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5858 ;;      Params:         1       0       0       0       0       0       0
  5859 ;;      Locals:         1       0       0       0       0       0       0
  5860 ;;      Temps:          0       0       0       0       0       0       0
  5861 ;;      Totals:         2       0       0       0       0       0       0
  5862 ;;Total ram usage:        2 bytes
  5863 ;; Hardware stack levels used:    1
  5864 ;; Hardware stack levels required when called:    5
  5865 ;; This function calls:
  5866 ;;		_SPI1_Exchange8bit
  5867 ;; This function is called by:
  5868 ;;		_NokiaStart
  5869 ;;		_clearLcd
  5870 ;;		_gotoXy
  5871 ;;		_LcdCharacter
  5872 ;;		_blackLcd
  5873 ;; This function uses a non-reentrant model
  5874 ;;
  5875                           
  5876                           	psect	text34
  5877  001226                     __ptext34:
  5878                           	opt stack 0
  5879  001226                     _LCDwrite:
  5880                           	opt stack 24
  5881                           
  5882                           ;incstack = 0
  5883                           ;LCDwrite@mode stored from wreg
  5884  001226  6E22               	movwf	LCDwrite@mode,c
  5885                           
  5886                           ;NokiaLCD.c: 51: if(mode){
  5887  001228  5022               	movf	LCDwrite@mode,w,c
  5888  00122A  B4D8               	btfsc	status,2,c
  5889  00122C  D002               	goto	l727
  5890                           
  5891                           ;NokiaLCD.c: 52: do { LATD3 = 0; } while(0);
  5892  00122E  968C               	bcf	3980,3,c	;volatile
  5893                           
  5894                           ;NokiaLCD.c: 53: }
  5895  001230  D001               	goto	l729
  5896  001232                     l727:
  5897  001232  868C               	bsf	3980,3,c	;volatile
  5898  001234                     l729:
  5899  001234  908C               	bcf	3980,0,c	;volatile
  5900                           
  5901                           ;NokiaLCD.c: 58: SPI1_Exchange8bit(data);
  5902  001236  5021               	movf	LCDwrite@data,w,c
  5903  001238  EC42  F009         	call	_SPI1_Exchange8bit
  5904                           
  5905                           ;NokiaLCD.c: 59: do { LATD0 = 1; } while(0);
  5906  00123C  808C               	bsf	3980,0,c	;volatile
  5907  00123E  0012               	return	
  5908  001240                     __end_of_LCDwrite:
  5909                           	opt stack 0
  5910                           tblptru	equ	0xFF8
  5911                           tblptrh	equ	0xFF7
  5912                           tblptrl	equ	0xFF6
  5913                           tablat	equ	0xFF5
  5914                           prodh	equ	0xFF4
  5915                           prodl	equ	0xFF3
  5916                           intcon	equ	0xFF2
  5917                           intcon2	equ	0xFF1
  5918                           indf0	equ	0xFEF
  5919                           postinc0	equ	0xFEE
  5920                           fsr0h	equ	0xFEA
  5921                           fsr0l	equ	0xFE9
  5922                           wreg	equ	0xFE8
  5923                           postdec1	equ	0xFE5
  5924                           fsr1l	equ	0xFE1
  5925                           indf2	equ	0xFDF
  5926                           postinc2	equ	0xFDE
  5927                           postdec2	equ	0xFDD
  5928                           plusw2	equ	0xFDB
  5929                           fsr2h	equ	0xFDA
  5930                           fsr2l	equ	0xFD9
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function _SPI1_Exchange8bit *****************
  5934 ;; Defined at:
  5935 ;;		line 78 in file "mcc_generated_files/spi1.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;  data            1    wreg     unsigned char 
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;  data            1   26[COMRAM] unsigned char 
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      unsigned char 
  5942 ;; Registers used:
  5943 ;;		wreg, status,2
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5949 ;;      Params:         0       0       0       0       0       0       0
  5950 ;;      Locals:         1       0       0       0       0       0       0
  5951 ;;      Temps:          0       0       0       0       0       0       0
  5952 ;;      Totals:         1       0       0       0       0       0       0
  5953 ;;Total ram usage:        1 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:    4
  5956 ;; This function calls:
  5957 ;;		Nothing
  5958 ;; This function is called by:
  5959 ;;		_LCDwrite
  5960 ;;		_SPI1_Exchange8bitBuffer
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text35
  5965  001284                     __ptext35:
  5966                           	opt stack 0
  5967  001284                     _SPI1_Exchange8bit:
  5968                           	opt stack 24
  5969                           
  5970                           ;incstack = 0
  5971                           ;SPI1_Exchange8bit@data stored from wreg
  5972  001284  6E1B               	movwf	SPI1_Exchange8bit@data,c
  5973                           
  5974                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  5975  001286  9EC6               	bcf	4038,7,c	;volatile
  5976                           
  5977                           ;spi1.c: 83: SSP1BUF = data;
  5978  001288  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  5979  00128C                     l223:
  5980  00128C  A0C7               	btfss	4039,0,c	;volatile
  5981  00128E  D7FE               	goto	l223
  5982                           
  5983                           ;spi1.c: 87: }
  5984                           ;spi1.c: 89: return (SSP1BUF);
  5985  001290  50C9               	movf	4041,w,c	;volatile
  5986  001292  0012               	return		;funcret
  5987  001294                     __end_of_SPI1_Exchange8bit:
  5988                           	opt stack 0
  5989                           tblptru	equ	0xFF8
  5990                           tblptrh	equ	0xFF7
  5991                           tblptrl	equ	0xFF6
  5992                           tablat	equ	0xFF5
  5993                           prodh	equ	0xFF4
  5994                           prodl	equ	0xFF3
  5995                           intcon	equ	0xFF2
  5996                           intcon2	equ	0xFF1
  5997                           indf0	equ	0xFEF
  5998                           postinc0	equ	0xFEE
  5999                           fsr0h	equ	0xFEA
  6000                           fsr0l	equ	0xFE9
  6001                           wreg	equ	0xFE8
  6002                           postdec1	equ	0xFE5
  6003                           fsr1l	equ	0xFE1
  6004                           indf2	equ	0xFDF
  6005                           postinc2	equ	0xFDE
  6006                           postdec2	equ	0xFDD
  6007                           plusw2	equ	0xFDB
  6008                           fsr2h	equ	0xFDA
  6009                           fsr2l	equ	0xFD9
  6010                           status	equ	0xFD8
  6011                           
  6012 ;; *************** function _SPI1_Initialize *****************
  6013 ;; Defined at:
  6014 ;;		line 64 in file "mcc_generated_files/spi1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6028 ;;      Params:         0       0       0       0       0       0       0
  6029 ;;      Locals:         0       0       0       0       0       0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0
  6031 ;;      Totals:         0       0       0       0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    4
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_NokiaStart
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           	psect	text36
  6043  0012A2                     __ptext36:
  6044                           	opt stack 0
  6045  0012A2                     _SPI1_Initialize:
  6046                           	opt stack 25
  6047                           
  6048                           ;spi1.c: 69: SSP1STAT = 0x80;
  6049                           
  6050                           ;incstack = 0
  6051  0012A2  0E80               	movlw	128
  6052  0012A4  6EC7               	movwf	4039,c	;volatile
  6053                           
  6054                           ;spi1.c: 72: SSP1CON1 = 0x30;
  6055  0012A6  0E30               	movlw	48
  6056  0012A8  6EC6               	movwf	4038,c	;volatile
  6057                           
  6058                           ;spi1.c: 75: SSP1ADD = 0x00;
  6059  0012AA  0E00               	movlw	0
  6060  0012AC  6EC8               	movwf	4040,c	;volatile
  6061  0012AE  0012               	return		;funcret
  6062  0012B0                     __end_of_SPI1_Initialize:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           intcon2	equ	0xFF1
  6072                           indf0	equ	0xFEF
  6073                           postinc0	equ	0xFEE
  6074                           fsr0h	equ	0xFEA
  6075                           fsr0l	equ	0xFE9
  6076                           wreg	equ	0xFE8
  6077                           postdec1	equ	0xFE5
  6078                           fsr1l	equ	0xFE1
  6079                           indf2	equ	0xFDF
  6080                           postinc2	equ	0xFDE
  6081                           postdec2	equ	0xFDD
  6082                           plusw2	equ	0xFDB
  6083                           fsr2h	equ	0xFDA
  6084                           fsr2l	equ	0xFD9
  6085                           status	equ	0xFD8
  6086                           
  6087 ;; *************** function _Delay *****************
  6088 ;; Defined at:
  6089 ;;		line 11 in file "Functions.c"
  6090 ;; Parameters:    Size  Location     Type
  6091 ;;  wait            4   26[COMRAM] long 
  6092 ;; Auto vars:     Size  Location     Type
  6093 ;;  i               4   31[COMRAM] long 
  6094 ;; Return value:  Size  Location     Type
  6095 ;;		None               void
  6096 ;; Registers used:
  6097 ;;		wreg, status,2, status,0
  6098 ;; Tracked objects:
  6099 ;;		On entry : 0/0
  6100 ;;		On exit  : 0/0
  6101 ;;		Unchanged: 0/0
  6102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6103 ;;      Params:         4       0       0       0       0       0       0
  6104 ;;      Locals:         4       0       0       0       0       0       0
  6105 ;;      Temps:          1       0       0       0       0       0       0
  6106 ;;      Totals:         9       0       0       0       0       0       0
  6107 ;;Total ram usage:        9 bytes
  6108 ;; Hardware stack levels used:    1
  6109 ;; Hardware stack levels required when called:    4
  6110 ;; This function calls:
  6111 ;;		Nothing
  6112 ;; This function is called by:
  6113 ;;		_main
  6114 ;;		_respondECU
  6115 ;;		_Precharge
  6116 ;;		_NokiaStart
  6117 ;; This function uses a non-reentrant model
  6118 ;;
  6119                           
  6120                           	psect	text37
  6121  000EDC                     __ptext37:
  6122                           	opt stack 0
  6123  000EDC                     _Delay:
  6124                           	opt stack 24
  6125                           
  6126                           ;Functions.c: 12: long int i = 0;
  6127                           
  6128                           ;incstack = 0
  6129  000EDC  0E00               	movlw	0
  6130  000EDE  6E20               	movwf	Delay@i,c
  6131  000EE0  0E00               	movlw	0
  6132  000EE2  6E21               	movwf	Delay@i+1,c
  6133  000EE4  0E00               	movlw	0
  6134  000EE6  6E22               	movwf	Delay@i+2,c
  6135  000EE8  0E00               	movlw	0
  6136  000EEA  6E23               	movwf	Delay@i+3,c
  6137                           
  6138                           ;Functions.c: 13: for (; wait > i; i++) {
  6139  000EEC  D00E               	goto	l3122
  6140  000EEE                     l3118:
  6141                           
  6142                           ;Functions.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  6143  000EEE  0E06               	movlw	6
  6144  000EF0  6E1F               	movwf	??_Delay& (0+255),c
  6145  000EF2  0E30               	movlw	48
  6146  000EF4                     u2747:
  6147  000EF4  2EE8               	decfsz	wreg,f,c
  6148  000EF6  D7FE               	goto	u2747
  6149  000EF8  2E1F               	decfsz	??_Delay& (0+255),f,c
  6150  000EFA  D7FC               	goto	u2747
  6151  000EFC  D000               	nop2	
  6152  000EFE  0E01               	movlw	1
  6153  000F00  2620               	addwf	Delay@i,f,c
  6154  000F02  0E00               	movlw	0
  6155  000F04  2221               	addwfc	Delay@i+1,f,c
  6156  000F06  2222               	addwfc	Delay@i+2,f,c
  6157  000F08  2223               	addwfc	Delay@i+3,f,c
  6158  000F0A                     l3122:
  6159  000F0A  501B               	movf	Delay@wait,w,c
  6160  000F0C  5C20               	subwf	Delay@i,w,c
  6161  000F0E  501C               	movf	Delay@wait+1,w,c
  6162  000F10  5821               	subwfb	Delay@i+1,w,c
  6163  000F12  501D               	movf	Delay@wait+2,w,c
  6164  000F14  5822               	subwfb	Delay@i+2,w,c
  6165  000F16  5023               	movf	Delay@i+3,w,c
  6166  000F18  0A80               	xorlw	128
  6167  000F1A  6E1F               	movwf	??_Delay& (0+255),c
  6168  000F1C  501E               	movf	Delay@wait+3,w,c
  6169  000F1E  0A80               	xorlw	128
  6170  000F20  581F               	subwfb	??_Delay& (0+255),w,c
  6171  000F22  B0D8               	btfsc	status,0,c
  6172  000F24  0012               	return	
  6173  000F26  D7E3               	goto	l3118
  6174  000F28                     __end_of_Delay:
  6175                           	opt stack 0
  6176                           tblptru	equ	0xFF8
  6177                           tblptrh	equ	0xFF7
  6178                           tblptrl	equ	0xFF6
  6179                           tablat	equ	0xFF5
  6180                           prodh	equ	0xFF4
  6181                           prodl	equ	0xFF3
  6182                           intcon	equ	0xFF2
  6183                           intcon2	equ	0xFF1
  6184                           indf0	equ	0xFEF
  6185                           postinc0	equ	0xFEE
  6186                           fsr0h	equ	0xFEA
  6187                           fsr0l	equ	0xFE9
  6188                           wreg	equ	0xFE8
  6189                           postdec1	equ	0xFE5
  6190                           fsr1l	equ	0xFE1
  6191                           indf2	equ	0xFDF
  6192                           postinc2	equ	0xFDE
  6193                           postdec2	equ	0xFDD
  6194                           plusw2	equ	0xFDB
  6195                           fsr2h	equ	0xFDA
  6196                           fsr2l	equ	0xFD9
  6197                           status	equ	0xFD8
  6198                           
  6199 ;; *************** function _INTERRUPT_InterruptManager *****************
  6200 ;; Defined at:
  6201 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;		None               void
  6208 ;; Registers used:
  6209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6215 ;;      Params:         0       0       0       0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0
  6217 ;;      Temps:         14       0       0       0       0       0       0
  6218 ;;      Totals:        14       0       0       0       0       0       0
  6219 ;;Total ram usage:       14 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    3
  6222 ;; This function calls:
  6223 ;;		_EUSART1_Receive_ISR
  6224 ;;		_EUSART1_Transmit_ISR
  6225 ;;		_EUSART2_Receive_ISR
  6226 ;;		_EUSART2_Transmit_ISR
  6227 ;; This function is called by:
  6228 ;;		Interrupt level 2
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	intcode
  6233  000008                     __pintcode:
  6234                           	opt stack 0
  6235  000008                     _INTERRUPT_InterruptManager:
  6236                           	opt stack 22
  6237                           
  6238                           ;incstack = 0
  6239  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6240  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6241  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6242  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6243  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6244  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6245  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6246  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6247  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6248  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6249  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6250  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6251  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6252  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6253  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6254                           
  6255                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6256  000042  BAA3               	btfsc	4003,5,c	;volatile
  6257  000044  AAA4               	btfss	4004,5,c	;volatile
  6258  000046  D003               	goto	i2l175
  6259                           
  6260                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6261  000048  EC68  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6262                           
  6263                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6264  00004C  D011               	goto	i2l183
  6265  00004E                     i2l175:
  6266  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6267  000050  A8A4               	btfss	4004,4,c	;volatile
  6268  000052  D003               	goto	i2l177
  6269                           
  6270                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6271  000054  EC25  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6272                           
  6273                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6274  000058  D00B               	goto	i2l183
  6275  00005A                     i2l177:
  6276  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6277  00005C  AA9E               	btfss	3998,5,c	;volatile
  6278  00005E  D003               	goto	i2l179
  6279                           
  6280                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6281  000060  ECF6  F008         	call	_EUSART1_Receive_ISR	;wreg free
  6282                           
  6283                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6284  000064  D005               	goto	i2l183
  6285  000066                     i2l179:
  6286  000066  B89D               	btfsc	3997,4,c	;volatile
  6287  000068  A89E               	btfss	3998,4,c	;volatile
  6288  00006A  D002               	goto	i2l183
  6289                           
  6290                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6291  00006C  EC0C  F008         	call	_EUSART1_Transmit_ISR	;wreg free
  6292  000070                     i2l183:
  6293  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6294  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6295  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6296  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6297  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6298  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6299  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6300  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6301  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6302  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6303  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6304  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6305  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6306  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6307  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6308  0000AA  0011               	retfie		f
  6309  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6310                           	opt stack 0
  6311                           pclatu	equ	0xFFB
  6312                           pclath	equ	0xFFA
  6313                           tblptru	equ	0xFF8
  6314                           tblptrh	equ	0xFF7
  6315                           tblptrl	equ	0xFF6
  6316                           tablat	equ	0xFF5
  6317                           prodh	equ	0xFF4
  6318                           prodl	equ	0xFF3
  6319                           intcon	equ	0xFF2
  6320                           intcon2	equ	0xFF1
  6321                           indf0	equ	0xFEF
  6322                           postinc0	equ	0xFEE
  6323                           fsr0h	equ	0xFEA
  6324                           fsr0l	equ	0xFE9
  6325                           wreg	equ	0xFE8
  6326                           postdec1	equ	0xFE5
  6327                           fsr1h	equ	0xFE2
  6328                           fsr1l	equ	0xFE1
  6329                           indf2	equ	0xFDF
  6330                           postinc2	equ	0xFDE
  6331                           postdec2	equ	0xFDD
  6332                           plusw2	equ	0xFDB
  6333                           fsr2h	equ	0xFDA
  6334                           fsr2l	equ	0xFD9
  6335                           status	equ	0xFD8
  6336                           
  6337 ;; *************** function _EUSART2_Transmit_ISR *****************
  6338 ;; Defined at:
  6339 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6340 ;; Parameters:    Size  Location     Type
  6341 ;;		None
  6342 ;; Auto vars:     Size  Location     Type
  6343 ;;		None
  6344 ;; Return value:  Size  Location     Type
  6345 ;;		None               void
  6346 ;; Registers used:
  6347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6348 ;; Tracked objects:
  6349 ;;		On entry : 0/0
  6350 ;;		On exit  : 0/0
  6351 ;;		Unchanged: 0/0
  6352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6353 ;;      Params:         0       0       0       0       0       0       0
  6354 ;;      Locals:         0       0       0       0       0       0       0
  6355 ;;      Temps:          0       0       0       0       0       0       0
  6356 ;;      Totals:         0       0       0       0       0       0       0
  6357 ;;Total ram usage:        0 bytes
  6358 ;; Hardware stack levels used:    1
  6359 ;; This function calls:
  6360 ;;		Nothing
  6361 ;; This function is called by:
  6362 ;;		_INTERRUPT_InterruptManager
  6363 ;; This function uses a non-reentrant model
  6364 ;;
  6365                           
  6366                           	psect	text39
  6367  00104A                     __ptext39:
  6368                           	opt stack 0
  6369  00104A                     _EUSART2_Transmit_ISR:
  6370                           	opt stack 24
  6371                           
  6372                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6373                           
  6374                           ;incstack = 0
  6375  00104A  0E08               	movlw	8
  6376  00104C  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  6377  00104E  D012               	goto	i2l97
  6378                           
  6379                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  6380  001050  5039               	movf	_eusart2TxTail,w,c
  6381  001052  0D01               	mullw	1
  6382  001054  0E9B               	movlw	low _eusart2TxBuffer
  6383  001056  24F3               	addwf	prodl,w,c
  6384  001058  6ED9               	movwf	fsr2l,c
  6385  00105A  0E00               	movlw	high _eusart2TxBuffer
  6386  00105C  20F4               	addwfc	prodh,w,c
  6387  00105E  6EDA               	movwf	fsr2h,c
  6388  001060  50DF               	movf	indf2,w,c
  6389  001062  6E73               	movwf	3955,c	;volatile
  6390  001064  2A39               	incf	_eusart2TxTail,f,c
  6391                           
  6392                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  6393  001066  0E07               	movlw	7
  6394  001068  6439               	cpfsgt	_eusart2TxTail,c
  6395  00106A  D002               	goto	i2l2720
  6396                           
  6397                           ;eusart2.c: 161: eusart2TxTail = 0;
  6398  00106C  0E00               	movlw	0
  6399  00106E  6E39               	movwf	_eusart2TxTail,c
  6400  001070                     i2l2720:
  6401                           
  6402                           ;eusart2.c: 162: }
  6403                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  6404  001070  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  6405                           
  6406                           ;eusart2.c: 164: } else {
  6407  001072  0012               	return	
  6408  001074                     i2l97:
  6409                           
  6410                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  6411  001074  98A3               	bcf	4003,4,c	;volatile
  6412  001076  0012               	return	
  6413  001078                     __end_of_EUSART2_Transmit_ISR:
  6414                           	opt stack 0
  6415                           pclatu	equ	0xFFB
  6416                           pclath	equ	0xFFA
  6417                           tblptru	equ	0xFF8
  6418                           tblptrh	equ	0xFF7
  6419                           tblptrl	equ	0xFF6
  6420                           tablat	equ	0xFF5
  6421                           prodh	equ	0xFF4
  6422                           prodl	equ	0xFF3
  6423                           intcon	equ	0xFF2
  6424                           intcon2	equ	0xFF1
  6425                           indf0	equ	0xFEF
  6426                           postinc0	equ	0xFEE
  6427                           fsr0h	equ	0xFEA
  6428                           fsr0l	equ	0xFE9
  6429                           wreg	equ	0xFE8
  6430                           postdec1	equ	0xFE5
  6431                           fsr1h	equ	0xFE2
  6432                           fsr1l	equ	0xFE1
  6433                           indf2	equ	0xFDF
  6434                           postinc2	equ	0xFDE
  6435                           postdec2	equ	0xFDD
  6436                           plusw2	equ	0xFDB
  6437                           fsr2h	equ	0xFDA
  6438                           fsr2l	equ	0xFD9
  6439                           status	equ	0xFD8
  6440                           
  6441 ;; *************** function _EUSART2_Receive_ISR *****************
  6442 ;; Defined at:
  6443 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6457 ;;      Params:         0       0       0       0       0       0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0
  6460 ;;      Totals:         0       0       0       0       0       0       0
  6461 ;;Total ram usage:        0 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; This function calls:
  6464 ;;		Nothing
  6465 ;; This function is called by:
  6466 ;;		_INTERRUPT_InterruptManager
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           	psect	text40
  6471  0010D0                     __ptext40:
  6472                           	opt stack 0
  6473  0010D0                     _EUSART2_Receive_ISR:
  6474                           	opt stack 24
  6475                           
  6476                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  6477                           
  6478                           ;incstack = 0
  6479  0010D0  A271               	btfss	3953,1,c	;volatile
  6480  0010D2  D002               	goto	i2l2726
  6481                           
  6482                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  6483  0010D4  9871               	bcf	3953,4,c	;volatile
  6484                           
  6485                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  6486  0010D6  8871               	bsf	3953,4,c	;volatile
  6487  0010D8                     i2l2726:
  6488                           
  6489                           ;eusart2.c: 175: }
  6490                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  6491  0010D8  5036               	movf	_eusart2RxHead,w,c
  6492  0010DA  0D01               	mullw	1
  6493  0010DC  0E93               	movlw	low _eusart2RxBuffer
  6494  0010DE  24F3               	addwf	prodl,w,c
  6495  0010E0  6ED9               	movwf	fsr2l,c
  6496  0010E2  0E00               	movlw	high _eusart2RxBuffer
  6497  0010E4  20F4               	addwfc	prodh,w,c
  6498  0010E6  6EDA               	movwf	fsr2h,c
  6499  0010E8  CF74 FFDF          	movff	3956,indf2	;volatile
  6500  0010EC  2A36               	incf	_eusart2RxHead,f,c
  6501                           
  6502                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  6503  0010EE  0E07               	movlw	7
  6504  0010F0  6436               	cpfsgt	_eusart2RxHead,c
  6505  0010F2  D002               	goto	i2l2734
  6506                           
  6507                           ;eusart2.c: 180: eusart2RxHead = 0;
  6508  0010F4  0E00               	movlw	0
  6509  0010F6  6E36               	movwf	_eusart2RxHead,c
  6510  0010F8                     i2l2734:
  6511                           
  6512                           ;eusart2.c: 181: }
  6513                           ;eusart2.c: 182: eusart2RxCount++;
  6514  0010F8  2A35               	incf	_eusart2RxCount,f,c	;volatile
  6515  0010FA  0012               	return		;funcret
  6516  0010FC                     __end_of_EUSART2_Receive_ISR:
  6517                           	opt stack 0
  6518                           pclatu	equ	0xFFB
  6519                           pclath	equ	0xFFA
  6520                           tblptru	equ	0xFF8
  6521                           tblptrh	equ	0xFF7
  6522                           tblptrl	equ	0xFF6
  6523                           tablat	equ	0xFF5
  6524                           prodh	equ	0xFF4
  6525                           prodl	equ	0xFF3
  6526                           intcon	equ	0xFF2
  6527                           intcon2	equ	0xFF1
  6528                           indf0	equ	0xFEF
  6529                           postinc0	equ	0xFEE
  6530                           fsr0h	equ	0xFEA
  6531                           fsr0l	equ	0xFE9
  6532                           wreg	equ	0xFE8
  6533                           postdec1	equ	0xFE5
  6534                           fsr1h	equ	0xFE2
  6535                           fsr1l	equ	0xFE1
  6536                           indf2	equ	0xFDF
  6537                           postinc2	equ	0xFDE
  6538                           postdec2	equ	0xFDD
  6539                           plusw2	equ	0xFDB
  6540                           fsr2h	equ	0xFDA
  6541                           fsr2l	equ	0xFD9
  6542                           status	equ	0xFD8
  6543                           
  6544 ;; *************** function _EUSART1_Transmit_ISR *****************
  6545 ;; Defined at:
  6546 ;;		line 150 in file "UART.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;		None
  6549 ;; Auto vars:     Size  Location     Type
  6550 ;;		None
  6551 ;; Return value:  Size  Location     Type
  6552 ;;                  2  169[None  ] int 
  6553 ;; Registers used:
  6554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6555 ;; Tracked objects:
  6556 ;;		On entry : 0/0
  6557 ;;		On exit  : 0/0
  6558 ;;		Unchanged: 0/0
  6559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6560 ;;      Params:         0       0       0       0       0       0       0
  6561 ;;      Locals:         0       0       0       0       0       0       0
  6562 ;;      Temps:          0       0       0       0       0       0       0
  6563 ;;      Totals:         0       0       0       0       0       0       0
  6564 ;;Total ram usage:        0 bytes
  6565 ;; Hardware stack levels used:    1
  6566 ;; Hardware stack levels required when called:    2
  6567 ;; This function calls:
  6568 ;;		_UART_buff_get
  6569 ;;		_UART_buff_size
  6570 ;; This function is called by:
  6571 ;;		_INTERRUPT_InterruptManager
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text41
  6576  001018                     __ptext41:
  6577                           	opt stack 0
  6578  001018                     _EUSART1_Transmit_ISR:
  6579                           	opt stack 22
  6580                           
  6581                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6582                           
  6583                           ;incstack = 0
  6584  001018  0E00               	movlw	low _output_buffer
  6585  00101A  6E01               	movwf	UART_buff_size@_this,c
  6586  00101C  0E03               	movlw	high _output_buffer
  6587  00101E  6E02               	movwf	UART_buff_size@_this+1,c
  6588  001020  EC37  F009         	call	_UART_buff_size	;wreg free
  6589  001024  BE02               	btfsc	?_UART_buff_size+1,7,c
  6590  001026  D00D               	goto	i2l2746
  6591  001028  5002               	movf	?_UART_buff_size+1,w,c
  6592  00102A  E103               	bnz	i2u163_40
  6593  00102C  0401               	decf	?_UART_buff_size,w,c
  6594  00102E  A0D8               	btfss	status,0,c
  6595  001030  D008               	goto	i2l2746
  6596  001032                     i2u163_40:
  6597                           
  6598                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6599  001032  0E00               	movlw	low _output_buffer
  6600  001034  6E07               	movwf	UART_buff_get@_this,c
  6601  001036  0E03               	movlw	high _output_buffer
  6602  001038  6E08               	movwf	UART_buff_get@_this+1,c
  6603  00103A  EC31  F005         	call	_UART_buff_get	;wreg free
  6604  00103E  6EAD               	movwf	4013,c	;volatile
  6605                           
  6606                           ;UART.c: 154: } else {
  6607  001040  0012               	return	
  6608  001042                     i2l2746:
  6609                           
  6610                           ;UART.c: 155: Transmit_stall = 1;
  6611  001042  0E01               	movlw	1
  6612  001044  6E44               	movwf	_Transmit_stall,c
  6613                           
  6614                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6615  001046  989D               	bcf	3997,4,c	;volatile
  6616  001048  0012               	return	
  6617  00104A                     __end_of_EUSART1_Transmit_ISR:
  6618                           	opt stack 0
  6619                           pclatu	equ	0xFFB
  6620                           pclath	equ	0xFFA
  6621                           tblptru	equ	0xFF8
  6622                           tblptrh	equ	0xFF7
  6623                           tblptrl	equ	0xFF6
  6624                           tablat	equ	0xFF5
  6625                           prodh	equ	0xFF4
  6626                           prodl	equ	0xFF3
  6627                           intcon	equ	0xFF2
  6628                           intcon2	equ	0xFF1
  6629                           indf0	equ	0xFEF
  6630                           postinc0	equ	0xFEE
  6631                           fsr0h	equ	0xFEA
  6632                           fsr0l	equ	0xFE9
  6633                           wreg	equ	0xFE8
  6634                           postdec1	equ	0xFE5
  6635                           fsr1h	equ	0xFE2
  6636                           fsr1l	equ	0xFE1
  6637                           indf2	equ	0xFDF
  6638                           postinc2	equ	0xFDE
  6639                           postdec2	equ	0xFDD
  6640                           plusw2	equ	0xFDB
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _UART_buff_size *****************
  6646 ;; Defined at:
  6647 ;;		line 102 in file "UART.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6650 ;;		 -> output_buffer(206), input_buffer(206), 
  6651 ;; Auto vars:     Size  Location     Type
  6652 ;;		None
  6653 ;; Return value:  Size  Location     Type
  6654 ;;                  2    0[COMRAM] int 
  6655 ;; Registers used:
  6656 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6657 ;; Tracked objects:
  6658 ;;		On entry : 0/0
  6659 ;;		On exit  : 0/0
  6660 ;;		Unchanged: 0/0
  6661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6662 ;;      Params:         2       0       0       0       0       0       0
  6663 ;;      Locals:         0       0       0       0       0       0       0
  6664 ;;      Temps:          0       0       0       0       0       0       0
  6665 ;;      Totals:         2       0       0       0       0       0       0
  6666 ;;Total ram usage:        2 bytes
  6667 ;; Hardware stack levels used:    1
  6668 ;; This function calls:
  6669 ;;		Nothing
  6670 ;; This function is called by:
  6671 ;;		_EUSART1_Transmit_ISR
  6672 ;;		_Receive_available
  6673 ;; This function uses a non-reentrant model
  6674 ;;
  6675                           
  6676                           	psect	text42
  6677  00126E                     __ptext42:
  6678                           	opt stack 0
  6679  00126E                     _UART_buff_size:
  6680                           	opt stack 23
  6681                           
  6682                           ;UART.c: 103: return (_this->count);
  6683                           
  6684                           ;incstack = 0
  6685  00126E  EE20 F0CC          	lfsr	2,204
  6686  001272  5001               	movf	UART_buff_size@_this,w,c
  6687  001274  26D9               	addwf	fsr2l,f,c
  6688  001276  5002               	movf	UART_buff_size@_this+1,w,c
  6689  001278  22DA               	addwfc	fsr2h,f,c
  6690  00127A  CFDE F001          	movff	postinc2,?_UART_buff_size
  6691  00127E  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  6692  001282  0012               	return	
  6693  001284                     __end_of_UART_buff_size:
  6694                           	opt stack 0
  6695                           pclatu	equ	0xFFB
  6696                           pclath	equ	0xFFA
  6697                           tblptru	equ	0xFF8
  6698                           tblptrh	equ	0xFF7
  6699                           tblptrl	equ	0xFF6
  6700                           tablat	equ	0xFF5
  6701                           prodh	equ	0xFF4
  6702                           prodl	equ	0xFF3
  6703                           intcon	equ	0xFF2
  6704                           intcon2	equ	0xFF1
  6705                           indf0	equ	0xFEF
  6706                           postinc0	equ	0xFEE
  6707                           fsr0h	equ	0xFEA
  6708                           fsr0l	equ	0xFE9
  6709                           wreg	equ	0xFE8
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           plusw2	equ	0xFDB
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _UART_buff_get *****************
  6722 ;; Defined at:
  6723 ;;		line 81 in file "UART.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6726 ;;		 -> output_buffer(206), input_buffer(206), 
  6727 ;; Auto vars:     Size  Location     Type
  6728 ;;  c               1   10[COMRAM] unsigned char 
  6729 ;; Return value:  Size  Location     Type
  6730 ;;                  1    wreg      unsigned char 
  6731 ;; Registers used:
  6732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6733 ;; Tracked objects:
  6734 ;;		On entry : 0/0
  6735 ;;		On exit  : 0/0
  6736 ;;		Unchanged: 0/0
  6737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6738 ;;      Params:         2       0       0       0       0       0       0
  6739 ;;      Locals:         1       0       0       0       0       0       0
  6740 ;;      Temps:          2       0       0       0       0       0       0
  6741 ;;      Totals:         5       0       0       0       0       0       0
  6742 ;;Total ram usage:        5 bytes
  6743 ;; Hardware stack levels used:    1
  6744 ;; Hardware stack levels required when called:    1
  6745 ;; This function calls:
  6746 ;;		_UART_buff_modulo_inc
  6747 ;; This function is called by:
  6748 ;;		_EUSART1_Transmit_ISR
  6749 ;;		_Receive_get
  6750 ;;		_Send_put
  6751 ;; This function uses a non-reentrant model
  6752 ;;
  6753                           
  6754                           	psect	text43
  6755  000A62                     __ptext43:
  6756                           	opt stack 0
  6757  000A62                     _UART_buff_get:
  6758                           	opt stack 22
  6759                           
  6760                           ;UART.c: 82: unsigned char c;
  6761                           ;UART.c: 83: if (_this->count > 0) {
  6762                           
  6763                           ;incstack = 0
  6764  000A62  EE20 F0CC          	lfsr	2,204
  6765  000A66  5007               	movf	UART_buff_get@_this,w,c
  6766  000A68  26D9               	addwf	fsr2l,f,c
  6767  000A6A  5008               	movf	UART_buff_get@_this+1,w,c
  6768  000A6C  22DA               	addwfc	fsr2h,f,c
  6769  000A6E  0E01               	movlw	1
  6770  000A70  BEDB               	btfsc	plusw2,7,c
  6771  000A72  D03C               	goto	i2l2666
  6772  000A74  0E01               	movlw	1
  6773  000A76  50DB               	movf	plusw2,w,c
  6774  000A78  E103               	bnz	i2u153_40
  6775  000A7A  04DE               	decf	postinc2,w,c
  6776  000A7C  A0D8               	btfss	status,0,c
  6777  000A7E  D036               	goto	i2l2666
  6778  000A80                     i2u153_40:
  6779                           
  6780                           ;UART.c: 84: c = _this->buf[_this->tail];
  6781  000A80  EE20 F0CA          	lfsr	2,202
  6782  000A84  5007               	movf	UART_buff_get@_this,w,c
  6783  000A86  26D9               	addwf	fsr2l,f,c
  6784  000A88  5008               	movf	UART_buff_get@_this+1,w,c
  6785  000A8A  22DA               	addwfc	fsr2h,f,c
  6786  000A8C  CFDE F009          	movff	postinc2,??_UART_buff_get
  6787  000A90  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  6788  000A94  5009               	movf	??_UART_buff_get,w,c
  6789  000A96  2407               	addwf	UART_buff_get@_this,w,c
  6790  000A98  6ED9               	movwf	fsr2l,c
  6791  000A9A  500A               	movf	??_UART_buff_get+1,w,c
  6792  000A9C  2008               	addwfc	UART_buff_get@_this+1,w,c
  6793  000A9E  6EDA               	movwf	fsr2h,c
  6794  000AA0  50DF               	movf	indf2,w,c
  6795  000AA2  6E0B               	movwf	UART_buff_get@c,c
  6796                           
  6797                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6798  000AA4  EE20 F0CA          	lfsr	2,202
  6799  000AA8  5007               	movf	UART_buff_get@_this,w,c
  6800  000AAA  26D9               	addwf	fsr2l,f,c
  6801  000AAC  5008               	movf	UART_buff_get@_this+1,w,c
  6802  000AAE  22DA               	addwfc	fsr2h,f,c
  6803  000AB0  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6804  000AB4  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6805  000AB8  0E00               	movlw	0
  6806  000ABA  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6807  000ABC  0EC8               	movlw	200
  6808  000ABE  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6809  000AC0  EC93  F008         	call	_UART_buff_modulo_inc	;wreg free
  6810  000AC4  EE20 F0CA          	lfsr	2,202
  6811  000AC8  5007               	movf	UART_buff_get@_this,w,c
  6812  000ACA  26D9               	addwf	fsr2l,f,c
  6813  000ACC  5008               	movf	UART_buff_get@_this+1,w,c
  6814  000ACE  22DA               	addwfc	fsr2h,f,c
  6815  000AD0  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6816  000AD4  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6817                           
  6818                           ;UART.c: 86: --_this->count;
  6819  000AD8  EE20 F0CC          	lfsr	2,204
  6820  000ADC  5007               	movf	UART_buff_get@_this,w,c
  6821  000ADE  26D9               	addwf	fsr2l,f,c
  6822  000AE0  5008               	movf	UART_buff_get@_this+1,w,c
  6823  000AE2  22DA               	addwfc	fsr2h,f,c
  6824  000AE4  06DE               	decf	postinc2,f,c
  6825  000AE6  0E00               	movlw	0
  6826  000AE8  5ADD               	subwfb	postdec2,f,c
  6827                           
  6828                           ;UART.c: 87: } else {
  6829  000AEA  D002               	goto	i2l558
  6830  000AEC                     i2l2666:
  6831                           
  6832                           ;UART.c: 88: c = 0;
  6833  000AEC  0E00               	movlw	0
  6834  000AEE  6E0B               	movwf	UART_buff_get@c,c
  6835  000AF0                     i2l558:
  6836                           
  6837                           ;UART.c: 89: }
  6838                           ;UART.c: 90: return (c);
  6839  000AF0  500B               	movf	UART_buff_get@c,w,c
  6840  000AF2  0012               	return	
  6841  000AF4                     __end_of_UART_buff_get:
  6842                           	opt stack 0
  6843                           pclatu	equ	0xFFB
  6844                           pclath	equ	0xFFA
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           indf0	equ	0xFEF
  6854                           postinc0	equ	0xFEE
  6855                           fsr0h	equ	0xFEA
  6856                           fsr0l	equ	0xFE9
  6857                           wreg	equ	0xFE8
  6858                           postdec1	equ	0xFE5
  6859                           fsr1h	equ	0xFE2
  6860                           fsr1l	equ	0xFE1
  6861                           indf2	equ	0xFDF
  6862                           postinc2	equ	0xFDE
  6863                           postdec2	equ	0xFDD
  6864                           plusw2	equ	0xFDB
  6865                           fsr2h	equ	0xFDA
  6866                           fsr2l	equ	0xFD9
  6867                           status	equ	0xFD8
  6868                           
  6869 ;; *************** function _EUSART1_Receive_ISR *****************
  6870 ;; Defined at:
  6871 ;;		line 139 in file "UART.c"
  6872 ;; Parameters:    Size  Location     Type
  6873 ;;		None
  6874 ;; Auto vars:     Size  Location     Type
  6875 ;;  data            1   11[COMRAM] unsigned char 
  6876 ;; Return value:  Size  Location     Type
  6877 ;;                  2  167[None  ] int 
  6878 ;; Registers used:
  6879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6880 ;; Tracked objects:
  6881 ;;		On entry : 0/0
  6882 ;;		On exit  : 0/0
  6883 ;;		Unchanged: 0/0
  6884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6885 ;;      Params:         0       0       0       0       0       0       0
  6886 ;;      Locals:         1       0       0       0       0       0       0
  6887 ;;      Temps:          0       0       0       0       0       0       0
  6888 ;;      Totals:         1       0       0       0       0       0       0
  6889 ;;Total ram usage:        1 bytes
  6890 ;; Hardware stack levels used:    1
  6891 ;; Hardware stack levels required when called:    2
  6892 ;; This function calls:
  6893 ;;		_UART_buff_put
  6894 ;; This function is called by:
  6895 ;;		_INTERRUPT_InterruptManager
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text44
  6900  0011EC                     __ptext44:
  6901                           	opt stack 0
  6902  0011EC                     _EUSART1_Receive_ISR:
  6903                           	opt stack 22
  6904                           
  6905                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6906                           
  6907                           ;incstack = 0
  6908  0011EC  A2AB               	btfss	4011,1,c	;volatile
  6909  0011EE  D002               	goto	i2l589
  6910                           
  6911                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6912  0011F0  98AB               	bcf	4011,4,c	;volatile
  6913                           
  6914                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6915  0011F2  88AB               	bsf	4011,4,c	;volatile
  6916  0011F4                     i2l589:
  6917                           
  6918                           ;UART.c: 145: }
  6919                           ;UART.c: 146: unsigned char data = RCREG1;
  6920  0011F4  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6921                           
  6922                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6923  0011F8  0E00               	movlw	low _input_buffer
  6924  0011FA  6E07               	movwf	UART_buff_put@_this,c
  6925  0011FC  0E02               	movlw	high _input_buffer
  6926  0011FE  6E08               	movwf	UART_buff_put@_this+1,c
  6927  001200  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  6928  001204  EC5E  F002         	call	_UART_buff_put	;wreg free
  6929  001208  0012               	return		;funcret
  6930  00120A                     __end_of_EUSART1_Receive_ISR:
  6931                           	opt stack 0
  6932                           pclatu	equ	0xFFB
  6933                           pclath	equ	0xFFA
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodh	equ	0xFF4
  6939                           prodl	equ	0xFF3
  6940                           intcon	equ	0xFF2
  6941                           intcon2	equ	0xFF1
  6942                           indf0	equ	0xFEF
  6943                           postinc0	equ	0xFEE
  6944                           fsr0h	equ	0xFEA
  6945                           fsr0l	equ	0xFE9
  6946                           wreg	equ	0xFE8
  6947                           postdec1	equ	0xFE5
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           plusw2	equ	0xFDB
  6954                           fsr2h	equ	0xFDA
  6955                           fsr2l	equ	0xFD9
  6956                           status	equ	0xFD8
  6957                           
  6958 ;; *************** function _UART_buff_put *****************
  6959 ;; Defined at:
  6960 ;;		line 68 in file "UART.c"
  6961 ;; Parameters:    Size  Location     Type
  6962 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6963 ;;		 -> output_buffer(206), input_buffer(206), 
  6964 ;;  c               1    8[COMRAM] const unsigned char 
  6965 ;; Auto vars:     Size  Location     Type
  6966 ;;		None
  6967 ;; Return value:  Size  Location     Type
  6968 ;;		None               void
  6969 ;; Registers used:
  6970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6971 ;; Tracked objects:
  6972 ;;		On entry : 0/0
  6973 ;;		On exit  : 0/0
  6974 ;;		Unchanged: 0/0
  6975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6976 ;;      Params:         3       0       0       0       0       0       0
  6977 ;;      Locals:         0       0       0       0       0       0       0
  6978 ;;      Temps:          2       0       0       0       0       0       0
  6979 ;;      Totals:         5       0       0       0       0       0       0
  6980 ;;Total ram usage:        5 bytes
  6981 ;; Hardware stack levels used:    1
  6982 ;; Hardware stack levels required when called:    1
  6983 ;; This function calls:
  6984 ;;		_UART_buff_modulo_inc
  6985 ;; This function is called by:
  6986 ;;		_EUSART1_Receive_ISR
  6987 ;;		_Send_put
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text45
  6992  0004BC                     __ptext45:
  6993                           	opt stack 0
  6994  0004BC                     _UART_buff_put:
  6995                           	opt stack 22
  6996                           
  6997                           ;UART.c: 69: if (_this->count < 200) {
  6998                           
  6999                           ;incstack = 0
  7000  0004BC  EE20 F0CC          	lfsr	2,204
  7001  0004C0  5007               	movf	UART_buff_put@_this,w,c
  7002  0004C2  26D9               	addwf	fsr2l,f,c
  7003  0004C4  5008               	movf	UART_buff_put@_this+1,w,c
  7004  0004C6  22DA               	addwfc	fsr2h,f,c
  7005  0004C8  0E01               	movlw	1
  7006  0004CA  BEDB               	btfsc	plusw2,7,c
  7007  0004CC  D007               	goto	i2l2646
  7008  0004CE  0E01               	movlw	1
  7009  0004D0  50DB               	movf	plusw2,w,c
  7010  0004D2  E13A               	bnz	i2l2652
  7011  0004D4  0EC8               	movlw	200
  7012  0004D6  5CDE               	subwf	postinc2,w,c
  7013  0004D8  B0D8               	btfsc	status,0,c
  7014  0004DA  D036               	goto	i2l2652
  7015  0004DC                     i2l2646:
  7016                           
  7017                           ;UART.c: 70: _this->buf[_this->head] = c;
  7018  0004DC  EE20 F0C8          	lfsr	2,200
  7019  0004E0  5007               	movf	UART_buff_put@_this,w,c
  7020  0004E2  26D9               	addwf	fsr2l,f,c
  7021  0004E4  5008               	movf	UART_buff_put@_this+1,w,c
  7022  0004E6  22DA               	addwfc	fsr2h,f,c
  7023  0004E8  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7024  0004EC  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7025  0004F0  500A               	movf	??_UART_buff_put,w,c
  7026  0004F2  2407               	addwf	UART_buff_put@_this,w,c
  7027  0004F4  6ED9               	movwf	fsr2l,c
  7028  0004F6  500B               	movf	??_UART_buff_put+1,w,c
  7029  0004F8  2008               	addwfc	UART_buff_put@_this+1,w,c
  7030  0004FA  6EDA               	movwf	fsr2h,c
  7031  0004FC  C009  FFDF         	movff	UART_buff_put@c,indf2
  7032                           
  7033                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7034  000500  EE20 F0C8          	lfsr	2,200
  7035  000504  5007               	movf	UART_buff_put@_this,w,c
  7036  000506  26D9               	addwf	fsr2l,f,c
  7037  000508  5008               	movf	UART_buff_put@_this+1,w,c
  7038  00050A  22DA               	addwfc	fsr2h,f,c
  7039  00050C  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7040  000510  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7041  000514  0E00               	movlw	0
  7042  000516  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7043  000518  0EC8               	movlw	200
  7044  00051A  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7045  00051C  EC93  F008         	call	_UART_buff_modulo_inc	;wreg free
  7046  000520  EE20 F0C8          	lfsr	2,200
  7047  000524  5007               	movf	UART_buff_put@_this,w,c
  7048  000526  26D9               	addwf	fsr2l,f,c
  7049  000528  5008               	movf	UART_buff_put@_this+1,w,c
  7050  00052A  22DA               	addwfc	fsr2h,f,c
  7051  00052C  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7052  000530  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7053                           
  7054                           ;UART.c: 72: ++_this->count;
  7055  000534  EE20 F0CC          	lfsr	2,204
  7056  000538  5007               	movf	UART_buff_put@_this,w,c
  7057  00053A  26D9               	addwf	fsr2l,f,c
  7058  00053C  5008               	movf	UART_buff_put@_this+1,w,c
  7059  00053E  22DA               	addwfc	fsr2h,f,c
  7060  000540  2ADE               	incf	postinc2,f,c
  7061  000542  0E00               	movlw	0
  7062  000544  22DD               	addwfc	postdec2,f,c
  7063                           
  7064                           ;UART.c: 73: } else {
  7065  000546  0012               	return	
  7066  000548                     i2l2652:
  7067                           
  7068                           ;UART.c: 74: _this->buf[_this->head] = c;
  7069  000548  EE20 F0C8          	lfsr	2,200
  7070  00054C  5007               	movf	UART_buff_put@_this,w,c
  7071  00054E  26D9               	addwf	fsr2l,f,c
  7072  000550  5008               	movf	UART_buff_put@_this+1,w,c
  7073  000552  22DA               	addwfc	fsr2h,f,c
  7074  000554  CFDE F00A          	movff	postinc2,??_UART_buff_put
  7075  000558  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  7076  00055C  500A               	movf	??_UART_buff_put,w,c
  7077  00055E  2407               	addwf	UART_buff_put@_this,w,c
  7078  000560  6ED9               	movwf	fsr2l,c
  7079  000562  500B               	movf	??_UART_buff_put+1,w,c
  7080  000564  2008               	addwfc	UART_buff_put@_this+1,w,c
  7081  000566  6EDA               	movwf	fsr2h,c
  7082  000568  C009  FFDF         	movff	UART_buff_put@c,indf2
  7083                           
  7084                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  7085  00056C  EE20 F0C8          	lfsr	2,200
  7086  000570  5007               	movf	UART_buff_put@_this,w,c
  7087  000572  26D9               	addwf	fsr2l,f,c
  7088  000574  5008               	movf	UART_buff_put@_this+1,w,c
  7089  000576  22DA               	addwfc	fsr2h,f,c
  7090  000578  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7091  00057C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7092  000580  0E00               	movlw	0
  7093  000582  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7094  000584  0EC8               	movlw	200
  7095  000586  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7096  000588  EC93  F008         	call	_UART_buff_modulo_inc	;wreg free
  7097  00058C  EE20 F0C8          	lfsr	2,200
  7098  000590  5007               	movf	UART_buff_put@_this,w,c
  7099  000592  26D9               	addwf	fsr2l,f,c
  7100  000594  5008               	movf	UART_buff_put@_this+1,w,c
  7101  000596  22DA               	addwfc	fsr2h,f,c
  7102  000598  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7103  00059C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7104                           
  7105                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7106  0005A0  EE20 F0CA          	lfsr	2,202
  7107  0005A4  5007               	movf	UART_buff_put@_this,w,c
  7108  0005A6  26D9               	addwf	fsr2l,f,c
  7109  0005A8  5008               	movf	UART_buff_put@_this+1,w,c
  7110  0005AA  22DA               	addwfc	fsr2h,f,c
  7111  0005AC  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  7112  0005B0  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  7113  0005B4  0E00               	movlw	0
  7114  0005B6  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  7115  0005B8  0EC8               	movlw	200
  7116  0005BA  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  7117  0005BC  EC93  F008         	call	_UART_buff_modulo_inc	;wreg free
  7118  0005C0  EE20 F0CA          	lfsr	2,202
  7119  0005C4  5007               	movf	UART_buff_put@_this,w,c
  7120  0005C6  26D9               	addwf	fsr2l,f,c
  7121  0005C8  5008               	movf	UART_buff_put@_this+1,w,c
  7122  0005CA  22DA               	addwfc	fsr2h,f,c
  7123  0005CC  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  7124  0005D0  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  7125  0005D4  0012               	return	
  7126  0005D6                     __end_of_UART_buff_put:
  7127                           	opt stack 0
  7128                           pclatu	equ	0xFFB
  7129                           pclath	equ	0xFFA
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           intcon	equ	0xFF2
  7137                           intcon2	equ	0xFF1
  7138                           indf0	equ	0xFEF
  7139                           postinc0	equ	0xFEE
  7140                           fsr0h	equ	0xFEA
  7141                           fsr0l	equ	0xFE9
  7142                           wreg	equ	0xFE8
  7143                           postdec1	equ	0xFE5
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           plusw2	equ	0xFDB
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _UART_buff_modulo_inc *****************
  7155 ;; Defined at:
  7156 ;;		line 106 in file "UART.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;  value           2    0[COMRAM] const unsigned int 
  7159 ;;  modulus         2    2[COMRAM] const unsigned int 
  7160 ;; Auto vars:     Size  Location     Type
  7161 ;;  my_value        2    4[COMRAM] unsigned int 
  7162 ;; Return value:  Size  Location     Type
  7163 ;;                  2    0[COMRAM] unsigned int 
  7164 ;; Registers used:
  7165 ;;		wreg, status,2, status,0
  7166 ;; Tracked objects:
  7167 ;;		On entry : 0/0
  7168 ;;		On exit  : 0/0
  7169 ;;		Unchanged: 0/0
  7170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7171 ;;      Params:         4       0       0       0       0       0       0
  7172 ;;      Locals:         2       0       0       0       0       0       0
  7173 ;;      Temps:          0       0       0       0       0       0       0
  7174 ;;      Totals:         6       0       0       0       0       0       0
  7175 ;;Total ram usage:        6 bytes
  7176 ;; Hardware stack levels used:    1
  7177 ;; This function calls:
  7178 ;;		Nothing
  7179 ;; This function is called by:
  7180 ;;		_UART_buff_put
  7181 ;;		_UART_buff_get
  7182 ;; This function uses a non-reentrant model
  7183 ;;
  7184                           
  7185                           	psect	text46
  7186  001126                     __ptext46:
  7187                           	opt stack 0
  7188  001126                     _UART_buff_modulo_inc:
  7189                           	opt stack 22
  7190                           
  7191                           ;UART.c: 107: unsigned int my_value = value + 1;
  7192                           
  7193                           ;incstack = 0
  7194  001126  0E01               	movlw	1
  7195  001128  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7196  00112A  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7197  00112C  0E00               	movlw	0
  7198  00112E  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7199  001130  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7200                           
  7201                           ;UART.c: 108: if (my_value >= modulus) {
  7202  001132  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7203  001134  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7204  001136  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7205  001138  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7206  00113A  A0D8               	btfss	status,0,c
  7207  00113C  D004               	goto	i2l2406
  7208                           
  7209                           ;UART.c: 109: my_value = 0;
  7210  00113E  0E00               	movlw	0
  7211  001140  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7212  001142  0E00               	movlw	0
  7213  001144  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7214  001146                     i2l2406:
  7215                           
  7216                           ;UART.c: 110: }
  7217                           ;UART.c: 111: return (my_value);
  7218  001146  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7219  00114A  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7220  00114E  0012               	return	
  7221  001150                     __end_of_UART_buff_modulo_inc:
  7222                           	opt stack 0
  7223                           pclatu	equ	0xFFB
  7224                           pclath	equ	0xFFA
  7225                           tblptru	equ	0xFF8
  7226                           tblptrh	equ	0xFF7
  7227                           tblptrl	equ	0xFF6
  7228                           tablat	equ	0xFF5
  7229                           prodh	equ	0xFF4
  7230                           prodl	equ	0xFF3
  7231                           intcon	equ	0xFF2
  7232                           intcon2	equ	0xFF1
  7233                           indf0	equ	0xFEF
  7234                           postinc0	equ	0xFEE
  7235                           fsr0h	equ	0xFEA
  7236                           fsr0l	equ	0xFE9
  7237                           wreg	equ	0xFE8
  7238                           postdec1	equ	0xFE5
  7239                           fsr1h	equ	0xFE2
  7240                           fsr1l	equ	0xFE1
  7241                           indf2	equ	0xFDF
  7242                           postinc2	equ	0xFDE
  7243                           postdec2	equ	0xFDD
  7244                           plusw2	equ	0xFDB
  7245                           fsr2h	equ	0xFDA
  7246                           fsr2l	equ	0xFD9
  7247                           status	equ	0xFD8
  7248                           pclatu	equ	0xFFB
  7249                           pclath	equ	0xFFA
  7250                           tblptru	equ	0xFF8
  7251                           tblptrh	equ	0xFF7
  7252                           tblptrl	equ	0xFF6
  7253                           tablat	equ	0xFF5
  7254                           prodh	equ	0xFF4
  7255                           prodl	equ	0xFF3
  7256                           intcon	equ	0xFF2
  7257                           intcon2	equ	0xFF1
  7258                           indf0	equ	0xFEF
  7259                           postinc0	equ	0xFEE
  7260                           fsr0h	equ	0xFEA
  7261                           fsr0l	equ	0xFE9
  7262                           wreg	equ	0xFE8
  7263                           postdec1	equ	0xFE5
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           indf2	equ	0xFDF
  7267                           postinc2	equ	0xFDE
  7268                           postdec2	equ	0xFDD
  7269                           plusw2	equ	0xFDB
  7270                           fsr2h	equ	0xFDA
  7271                           fsr2l	equ	0xFD9
  7272                           status	equ	0xFD8
  7273                           
  7274                           	psect	rparam
  7275  0000                     pclatu	equ	0xFFB
  7276                           pclath	equ	0xFFA
  7277                           tblptru	equ	0xFF8
  7278                           tblptrh	equ	0xFF7
  7279                           tblptrl	equ	0xFF6
  7280                           tablat	equ	0xFF5
  7281                           prodh	equ	0xFF4
  7282                           prodl	equ	0xFF3
  7283                           intcon	equ	0xFF2
  7284                           intcon2	equ	0xFF1
  7285                           indf0	equ	0xFEF
  7286                           postinc0	equ	0xFEE
  7287                           fsr0h	equ	0xFEA
  7288                           fsr0l	equ	0xFE9
  7289                           wreg	equ	0xFE8
  7290                           postdec1	equ	0xFE5
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           plusw2	equ	0xFDB
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301                           	psect	temp
  7302  000045                     btemp:
  7303                           	opt stack 0
  7304  000045                     	ds	1
  7305  0000                     int$flags	set	btemp
  7306                           pclatu	equ	0xFFB
  7307                           pclath	equ	0xFFA
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           intcon	equ	0xFF2
  7315                           intcon2	equ	0xFF1
  7316                           indf0	equ	0xFEF
  7317                           postinc0	equ	0xFEE
  7318                           fsr0h	equ	0xFEA
  7319                           fsr0l	equ	0xFE9
  7320                           wreg	equ	0xFE8
  7321                           postdec1	equ	0xFE5
  7322                           fsr1h	equ	0xFE2
  7323                           fsr1l	equ	0xFE1
  7324                           indf2	equ	0xFDF
  7325                           postinc2	equ	0xFDE
  7326                           postdec2	equ	0xFDD
  7327                           plusw2	equ	0xFDB
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    480
    Data        10
    BSS         940
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      68
    BANK0           160     27     134
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_3(CODE[3]), STR_2(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_4(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1484(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _updateComms->_Precharge
    _updateComms->_SetCharger
    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _gotoXy->_LCDwrite
    _NokiaStr->_LcdCharacter
    _LcdCharacter->_LCDwrite
    _NokiaStart->_clearLcd
    _clearLcd->_LCDwrite
    _LCDwrite->___wmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _receiveData->_CRCcheck

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   25998
                                             25 BANK0      2     2      0
                              _Delay
                         _NokiaStart
                           _NokiaStr
                  _SYSTEM_Initialize
                           _clearLcd
                             _gotoXy
                         _respondECU
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12227
                          _Precharge
                         _SetCharger
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    5355
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                             38 COMRAM     1     1      0
                                              0 BANK0      4     4      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1751
                                             39 COMRAM     1     1      0
                                              0 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     7     2      5
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     828
                                             38 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0     774
                                             35 COMRAM     5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _gotoXy                                               2     1      1    1446
                                             34 COMRAM     2     1      1
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStr                                             2     0      2    1897
                                              0 BANK0      2     0      2
                       _LcdCharacter
 ---------------------------------------------------------------------------------
 (2) _LcdCharacter                                         5     5      0    1755
                                             34 COMRAM     5     5      0
                           _LCDwrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    3153
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0    1307
                                             34 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1239
                                             32 COMRAM     2     1      1
                  _SPI1_Exchange8bit
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     607
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
     _SPI1_Initialize
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
   _NokiaStr
     _LcdCharacter
       _LCDwrite
         _SPI1_Exchange8bit
         ___wmul (ARG)
       ___wmul
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _clearLcd
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _gotoXy
     _LCDwrite
       _SPI1_Exchange8bit
       ___wmul (ARG)
   _respondECU
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _sendData
       _CRC8
       _FastTransfer_buffer_flush
         _memset
       _crcBufS_put
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      86       4       83.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3FC       9        0.0%
DATA                 0      0     3FC      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu May 05 21:22:57 2016

                      _SPI1_Exchange8bit 1284        __end_of_FastTransfer_buffer_flush 0E38  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l85 0F84  
                   __end_of_LcdCharacter 0CF6                      ___wmul@multiplicand 001D  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l223 128C                                      l501 093A  
                                    l513 09CE                                      l425 00FC  
                                    l640 0BC2                                      l633 0BBA  
                                    l662 0FB0                                      l727 1232  
                                    l399 0F5A                                      l648 0BFA  
                                    l729 1234                                      l673 0FBC  
                                    l668 0FB6                                      l678 0FC2  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                    ??_SPI1_Exchange8bit 001B     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                                     l3000 0FA8  
                                   l3012 1082                                     l3006 111C  
                                   l3200 0900                                     l3032 0F44  
                                   l3040 0F60                                     l3112 0820  
                                   l3104 079A                                     l3016 1092  
                                   l3122 0F0A                                     l3202 0920  
                                   l3026 0F2E                                     l3042 0F66  
                                   l3130 0D1A                                     l3132 0D20  
                                   l3118 0EEE                                     l3150 0952  
                                   l3062 037C                                     l3400 0BE0  
                                   l3080 05E0                                     l3160 09A6  
                                   l3146 093C                                     l3330 0234  
                                   l3244 1180                                     l3084 05EA  
                                   l3164 09C6                                     l3332 023A  
                                   l3324 019A                                     l3174 0FC8  
                                   l3182 0880                                     l3334 024E  
                                   l3248 1190                                     l3192 08B0  
                                   l3184 0886                                     l3096 066E  
                                   l3434 0C90                                     l3178 0870  
                                   l3418 0DA2                                     l3346 02D4  
                                   l3444 0CEA                                     l3196 08D8  
                                   l3356 02E0                                     l3284 00B2  
                                   l3438 0CA0                                     l3294 00F2  
                                   l3550 0C74                                     l3534 0C1A  
                                   l3480 10A6                                     l3384 0B90  
                                   l3368 0344                                     l3376 0350  
                                   l3544 0C56                                     l3546 0C60  
                                   l3484 10BC                                     l3396 0BD0  
                                   l3388 0BA0                                     l3548 0C6A  
                   receiveData@crcHolder 00CF                                     l2986 0F74  
                                   l2998 0FA6                                     STR_1 7FE7  
                                   STR_2 7FFB                                     STR_3 7FFB  
                                   STR_4 7FF4                                     _CRC8 0F28  
                                   u2050 077A                                     _LATA 000F89  
                                   _LATB 000F8A                                     u2071 037A  
                                   _LATC 000F8B                                     u2240 08D0  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2250 08F8                                     u2247 08C6  
                                   u2257 08EE                                     u2361 013E  
                                   u2610 0C5E                                     u2630 0C68  
                                   u2650 0C72                                     u2590 0C54  
                                   u2747 0EF4                                     i2l97 1074  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART2_Write 0F72                                     _main 0C00  
                        _TMR0_StartTimer 12D0                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04BC                                     start 00AC  
              __end_of_SPI1_Exchange8bit 1294                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 1078                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 1258  
                       __end_of_CRCcheck 09D0           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 12A2                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATA6 007C4E                                    _LATB5 007C55  
                                  _LATD3 007C63                           __CFG_DEBUG$OFF 000000  
                                  i2l183 0070                                    i2l175 004E  
                       __end_of_LCDwrite 1240                                    i2l177 005A  
                                  i2l179 0066                                    i2l558 0AF0  
                                  i2l589 11F4                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 0EDC                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                            _ChargerData 00DD                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 1018                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                                  _Start 0029                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _ddata 0088                           __CFG_EBTRB$OFF 000000  
                                  _group 002B                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 12BC                                    main@x 00DB  
                         ?_EUSART2_Write 0001                                    tablat 000FF5  
                   __size_of_crcBufS_get 00E2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0F72                          CRCcheck@SentCRC 00C2  
                        __initialization 0AF4                             __end_of_main 0C7C  
                             ToSend@what 00C2                                   ??_CRC8 001E  
                      LcdCharacter@index 0026              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0029                         __end_of_NokiaStr 10D0  
                          __activetblptr 000002                            SetMux@channel 001B  
                      SetCharger@Current 0027                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001                               _SetCharger 0D6A  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 12D4  
             __end_of_EUSART2_Initialize 1018                 _eusart2TxBufferRemaining 0043  
                             Precharge@i 0025                        SetCharger@Voltage 0028  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 09D0                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   Delay@i 0020  
                                 i2l2406 1146                           __CFG_WDTEN$OFF 000000  
                                 i2l2720 1070                                   i2l2652 0548  
                                 i2l2646 04DC                                   i2l2734 10F8  
                                 i2l2726 10D8              UART_buff_modulo_inc@modulus 0003  
                                 i2l2666 0AEC                                   i2l2746 1042  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISA3 007C93  
                                 _TRISD0 007CA8                                   _TRISD2 007CAA  
                                 _TRISD3 007CAB                                   _TXREG1 000FAD  
                                 _TXREG2 000F73                    SPI1_Exchange8bit@data 001B  
                       __end_of_clearLcd 11A0               __size_of_SPI1_Exchange8bit 0010  
                         __CFG_XINST$OFF 000000                    __size_of_LcdCharacter 007A  
                                 _ToSend 120A                                   _SetMux 0FAC  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0027  
                          _output_buffer 0300                         crcBufS_get@space 001E  
                                 ___wmul 11C6                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _gotoXy 1150                                   _memset 1078  
                                 clear_0 0AFA                                   clear_1 0B06  
                                 clear_2 0B12                                   clear_3 0B1E  
                                 clear_4 0B2A                                   clear_5 0B36  
                     __size_of_Precharge 0084                                   _printf 0866  
                                 _rx_len 0040                         __end_of_sendData 0D6A  
                           __pdataCOMRAM 0044                             __mediumconst 7E06  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0168  
                   _EUSART2_Transmit_ISR 104A             __end_of_UART_buff_modulo_inc 1150  
                        ??_EUSART2_Write 001B            __size_of_INTERRUPT_Initialize 000C  
                        _eusart2RxBuffer 0093                             _LcdCharacter 0C7C  
                      _SYSTEM_Initialize 1258                          _eusart2TxBuffer 009B  
                             __accesstop 0060                  __end_of__initialization 0B6E  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                              ?_LCDwrite 0021                            __end_of_Delay 0F28  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 0790  
                           __pidataBANK0 12C6                      ??_SYSTEM_Initialize 001B  
                       crcBufS_put@_this 001B   __end_of_FastTransfer_buffer_modulo_inc 1126  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 10FC  
                      ??_SPI1_Initialize 001B                              NokiaStr@str 00C2  
                          __end_of_putch 12C6             FastTransfer_buffer_put@_this 0021  
                            ToSend@where 0028                    LcdCharacter@character 0025  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0AF4                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05D6                                  ??_Delay 001F  
                            ?_SetCharger 0027                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 120A                _FastTransfer_buffer_flush 0DD6  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 126E                   receiveData@holder_1484 00D4  
                                ??_putch 001C                      _addressErrorCounter 00A3  
                            ?_NokiaStart 0001                            _eusart2RxHead 0036  
                          _eusart2TxHead 0038                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                     __end_of_FONTLOOKUP 7FE7                            _eusart2RxTail 0037  
                          _eusart2TxTail 0039                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 0C00                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 00C2  
                             ??_LCDwrite 0022                     __size_of_receiveData 02A4  
                                ?_ToSend 00C2                                  ?_SetMux 0001  
                     __CFG_CCP2MX$PORTC1 000000                                  ?___wmul 001B  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_gotoXy 0023                                  ?_memset 001B  
                             _crc_buffer 00B1                                  ?_printf 001D  
                     UART_buff_put@_this 0007                                ?_clearLcd 0001  
                                _OSCCON2 000FD2              __end_of_EUSART2_Receive_ISR 10FC  
           UART_buff_modulo_inc@my_value 0005                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00C2                      _receiveArrayAddress 002D  
                                _SSP1BUF 000FC9                                ?_sendData 0001  
                      _alignErrorCounter 00A5                               ??_NokiaStr 0028  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                                __Lparam 0000                          __size_of_ToSend 001C  
                        __size_of_SetMux 0038                      __size_of_SetCharger 006C  
                              _AKNAKsend 0033                     _UART_buff_modulo_inc 1126  
                        __size_of___wmul 0026                                  _calc_CS 0034  
                                __pcinit 0AF4                      __size_of_NokiaStart 0092  
                        __size_of_gotoXy 0028                          __size_of_memset 002C  
                                __ramtop 0600                                  __ptext0 0C00  
                                __ptext1 11A0                                  __ptext2 0E38  
                                __ptext3 0CF6                                  __ptext4 06B8  
                                __ptext5 0DD6                                  __ptext6 1078  
                                __ptext7 120A                                  __ptext8 0354  
                                __ptext9 10FC                          __size_of_printf 00D4  
                              _T0CONbits 000FD5                    _OSCILLATOR_Initialize 1294  
                 ??_EUSART2_Transmit_ISR 0001                  _FastTransfer_buffer_put 0354  
                  CRCcheck@calculatedCRC 00C3                 ??_PIN_MANAGER_Initialize 001B  
                             ??_clearLcd 0023             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0016                     end_of_initialization 0B6E  
                              Delay@wait 001B                                  gotoXy@x 0024  
                                gotoXy@y 0023                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7E06                               ??_sendData 0027  
                     _EUSART2_Initialize 0FE4                                  printf@c 0024  
                                printf@f 001D                    ?_UART_buff_modulo_inc 0001  
                   __size_of_updateComms 0026                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0E38  
                    CRCcheck@arrayHolder 00C4                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 00A9                               _rx_address 003E  
                           LCDwrite@data 0021                             LCDwrite@mode 0022  
                              _TRISBbits 000F93                     ??_EUSART2_Initialize 001B  
     __size_of_FastTransfer_buffer_flush 0062                          _SPI1_Initialize 12A2  
                         _UART_buff_size 126E                      __end_of_crcBufS_get 06B8  
                    __end_of_crcBufS_put 0790                        __size_of_CRCcheck 0096  
                        Precharge@i_1764 0027                            _moduleAddress 003C  
                   _timer0ReloadVal16bit 0041                               CRCcheck@rt 00C7  
                         __end_of_ToSend 1226                           __end_of_SetMux 0FE4  
                      __size_of_LCDwrite 001A             __end_of_INTERRUPT_Initialize 12BC  
                        _crcErrorCounter 00A7                           __end_of___wmul 11EC  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 12D4  
              ??_FastTransfer_buffer_put 0026                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 1178                           __end_of_memset 10A4  
                      crcBufS_put@status 001F                           __end_of_printf 093A  
                           receiveData@r 00D9                             receiveData@u 00D7  
                           ??_SetCharger 0029                      start_initialization 0AF4  
               __size_of_TMR0_Initialize 0018          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 0025                              putch@txData 001C  
                           ??_NokiaStart 0025                    __end_of_EUSART2_Write 0FAC  
                         UART_buff_get@c 000B                   __end_of_UART_buff_size 1284  
                         UART_buff_put@c 0009                                _Precharge 0B7C  
                               ??_ToSend 0028                                 ??_SetMux 001B  
                 ??_UART_buff_modulo_inc 0005                                 CRC8@data 001B  
                        crcBufS_get@time 001D                        __size_of_NokiaStr 002C  
                     __end_of_SetCharger 0DD6                              ?_respondECU 0001  
                               ??___wmul 001F                              __pdataBANK0 00DD  
                               ??_gotoXy 0024                                 ??_memset 0021  
                               ??_printf 0021                       __end_of_NokiaStart 0A62  
                         _eusart2RxCount 0035                              __pbssCOMRAM 0029  
          __size_of_EUSART1_Transmit_ISR 0032                            __pcstackBANK0 00C2  
                __end_of_SPI1_Initialize 12B0                        __size_of_clearLcd 0028  
                            _crcBufS_get 05D6                              _crcBufS_put 06B8  
                    EUSART2_Write@txData 001B                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00C9  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00C3  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                               ?_Precharge 0001  
                 _PIN_MANAGER_Initialize 0E8C                        __size_of_sendData 0074  
                              __pintcode 0008                            __pmediumconst 7E06  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                    __size_of_respondECU 0054                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 12B0                             _receiveArray 0060  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 002C  
                               _CRCcheck 093A                           ___wmul@product 001F  
                               _LATBbits 000F8A                                 _LATCbits 000F8B  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3                                 _LCDwrite 1226  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u153_40 0A80  
                               i2u163_40 1032                                 _PIR1bits 000F9E  
                               _PIR3bits 000FA4                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0354  
                               _SSP1CON1 000FC6                                 _SSP1STAT 000FC7  
         FastTransfer_buffer_flush@_this 0023                             _input_buffer 0200  
                              _rx_buffer 0400                        ___wmul@multiplier 001B  
                             printf@flag 0021                            _UART_buff_get 0A62  
                          _UART_buff_put 04BC                           Precharge@OnOff 0024  
          __size_of_EUSART2_Transmit_ISR 002E                         ?_SPI1_Initialize 0001  
                         SetCharger@mode 00C2                              _INTCON2bits 000FF1  
                              copy_data0 0B50                    ?_INTERRUPT_Initialize 0001  
                          ?_LcdCharacter 0001                        _sendStructAddress 002F  
                          ??_updateComms 0029                                 _NokiaStr 10A4  
                               __Hrparam 0000                              ??_Precharge 0024  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                      ??_TMR0_StartTimer 001B                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                              sendData@i 00C4                                 _clearLcd 1178  
               crcBufS_status_put@status 001E                                 __ptext10 00B0  
                               __ptext11 093A                                 __ptext20 0B7C  
                               __ptext12 0790                                 __ptext21 1150  
                               __ptext13 05D6                                 __ptext30 0C7C  
                               __ptext22 1258                                 __ptext14 0F28  
                               __ptext31 11C6                                 __ptext23 1240  
                               __ptext15 0D6A                                 __ptext40 10D0  
                               __ptext32 09D0                                 __ptext24 12D0  
                               __ptext16 0866                                 __ptext41 1018  
                               __ptext33 1178                                 __ptext25 0E8C  
                               __ptext17 12BC                                 __ptext42 126E  
                               __ptext34 1226                                 __ptext26 1294  
                               __ptext18 0F72                                 __ptext43 0A62  
                               __ptext35 1284                                 __ptext27 12B0  
                               __ptext19 0FAC                                 __ptext44 11EC  
                               __ptext36 12A2                                 __ptext28 0FE4  
                               __ptext45 04BC                                 __ptext37 0EDC  
                               __ptext29 10A4                                 __ptext46 1126  
                               __ptext39 104A                             _SSP1CON1bits 000FC6  
                         ??_LcdCharacter 0023                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 003D                            __size_of_main 007C  
                            _receiveData 00B0                           _Transmit_stall 0044  
                               _sendData 0CF6                               _RC1STAbits 000FAB  
                             _RC2STAbits 000F71                              clearLcd@res 0023  
                             _FONTLOOKUP 7E07                             ??_respondECU 0029  
                               int$flags 0045                             _serial_write 0031  
                    __end_of_updateComms 11C6       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 11EC                        receiveData@holder 00D1  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00AB  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0E8C                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 104A  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0023  
                            _serial_peek 00AD                              _serial_read 00AF  
               ?_FastTransfer_buffer_put 0021                                 printf@ap 0022  
                               printf@cp 0025            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0009                          ??_UART_buff_put 000A  
                 __size_of_EUSART2_Write 003A                      _EUSART2_Receive_ISR 10D0  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1240                receiveData@crcHolder_1485 00D0  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0866                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0EDC         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 11A0  
