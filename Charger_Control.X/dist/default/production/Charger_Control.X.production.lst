

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Thu May 12 20:20:59 2016

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           	psect	idataCOMRAM
    71  00123A                     __pidataCOMRAM:
    72                           	opt stack 0
    73                           
    74                           ;initializer for _Transmit_stall
    75  00123A  01                 	db	1
    76                           
    77                           	psect	idataBANK0
    78  00122C                     __pidataBANK0:
    79                           	opt stack 0
    80                           
    81                           ;initializer for _ChargerData
    82  00122C  4D                 	db	77
    83  00122D  2C                 	db	44
    84  00122E  00                 	db	0
    85  00122F  2C                 	db	44
    86  001230  00                 	db	0
    87  001231  2C                 	db	44
    88  001232  00                 	db	0
    89  001233  2C                 	db	44
    90  001234  45                 	db	69
    91                           
    92                           	psect	mediumconst
    93  007E14                     __pmediumconst:
    94                           	opt stack 0
    95  007E14  00                 	db	0
    96  007E15                     _FONTLOOKUP:
    97                           	opt stack 0
    98  007E15  00                 	db	0
    99  007E16  00                 	db	0
   100  007E17  00                 	db	0
   101  007E18  00                 	db	0
   102  007E19  00                 	db	0
   103  007E1A  00                 	db	0
   104  007E1B  00                 	db	0
   105  007E1C  5F                 	db	95
   106  007E1D  00                 	db	0
   107  007E1E  00                 	db	0
   108  007E1F  00                 	db	0
   109  007E20  07                 	db	7
   110  007E21  00                 	db	0
   111  007E22  07                 	db	7
   112  007E23  00                 	db	0
   113  007E24  14                 	db	20
   114  007E25  7F                 	db	127
   115  007E26  14                 	db	20
   116  007E27  7F                 	db	127
   117  007E28  14                 	db	20
   118  007E29  24                 	db	36
   119  007E2A  2A                 	db	42
   120  007E2B  7F                 	db	127
   121  007E2C  2A                 	db	42
   122  007E2D  12                 	db	18
   123  007E2E  23                 	db	35
   124  007E2F  13                 	db	19
   125  007E30  08                 	db	8
   126  007E31  64                 	db	100
   127  007E32  62                 	db	98
   128  007E33  36                 	db	54
   129  007E34  49                 	db	73
   130  007E35  55                 	db	85
   131  007E36  22                 	db	34
   132  007E37  50                 	db	80
   133  007E38  00                 	db	0
   134  007E39  05                 	db	5
   135  007E3A  03                 	db	3
   136  007E3B  00                 	db	0
   137  007E3C  00                 	db	0
   138  007E3D  00                 	db	0
   139  007E3E  1C                 	db	28
   140  007E3F  22                 	db	34
   141  007E40  41                 	db	65
   142  007E41  00                 	db	0
   143  007E42  00                 	db	0
   144  007E43  41                 	db	65
   145  007E44  22                 	db	34
   146  007E45  1C                 	db	28
   147  007E46  00                 	db	0
   148  007E47  14                 	db	20
   149  007E48  08                 	db	8
   150  007E49  3E                 	db	62
   151  007E4A  08                 	db	8
   152  007E4B  14                 	db	20
   153  007E4C  08                 	db	8
   154  007E4D  08                 	db	8
   155  007E4E  3E                 	db	62
   156  007E4F  08                 	db	8
   157  007E50  08                 	db	8
   158  007E51  00                 	db	0
   159  007E52  50                 	db	80
   160  007E53  30                 	db	48
   161  007E54  00                 	db	0
   162  007E55  00                 	db	0
   163  007E56  08                 	db	8
   164  007E57  08                 	db	8
   165  007E58  08                 	db	8
   166  007E59  08                 	db	8
   167  007E5A  08                 	db	8
   168  007E5B  00                 	db	0
   169  007E5C  60                 	db	96
   170  007E5D  60                 	db	96
   171  007E5E  00                 	db	0
   172  007E5F  00                 	db	0
   173  007E60  20                 	db	32
   174  007E61  10                 	db	16
   175  007E62  08                 	db	8
   176  007E63  04                 	db	4
   177  007E64  02                 	db	2
   178  007E65  3E                 	db	62
   179  007E66  51                 	db	81
   180  007E67  49                 	db	73
   181  007E68  45                 	db	69
   182  007E69  3E                 	db	62
   183  007E6A  00                 	db	0
   184  007E6B  42                 	db	66
   185  007E6C  7F                 	db	127
   186  007E6D  40                 	db	64
   187  007E6E  00                 	db	0
   188  007E6F  42                 	db	66
   189  007E70  61                 	db	97
   190  007E71  51                 	db	81
   191  007E72  49                 	db	73
   192  007E73  46                 	db	70
   193  007E74  21                 	db	33
   194  007E75  41                 	db	65
   195  007E76  45                 	db	69
   196  007E77  4B                 	db	75
   197  007E78  31                 	db	49
   198  007E79  18                 	db	24
   199  007E7A  14                 	db	20
   200  007E7B  12                 	db	18
   201  007E7C  7F                 	db	127
   202  007E7D  10                 	db	16
   203  007E7E  27                 	db	39
   204  007E7F  45                 	db	69
   205  007E80  45                 	db	69
   206  007E81  45                 	db	69
   207  007E82  39                 	db	57
   208  007E83  3C                 	db	60
   209  007E84  4A                 	db	74
   210  007E85  49                 	db	73
   211  007E86  49                 	db	73
   212  007E87  30                 	db	48
   213  007E88  01                 	db	1
   214  007E89  71                 	db	113
   215  007E8A  09                 	db	9
   216  007E8B  05                 	db	5
   217  007E8C  03                 	db	3
   218  007E8D  36                 	db	54
   219  007E8E  49                 	db	73
   220  007E8F  49                 	db	73
   221  007E90  49                 	db	73
   222  007E91  36                 	db	54
   223  007E92  06                 	db	6
   224  007E93  49                 	db	73
   225  007E94  49                 	db	73
   226  007E95  29                 	db	41
   227  007E96  1E                 	db	30
   228  007E97  00                 	db	0
   229  007E98  36                 	db	54
   230  007E99  36                 	db	54
   231  007E9A  00                 	db	0
   232  007E9B  00                 	db	0
   233  007E9C  00                 	db	0
   234  007E9D  56                 	db	86
   235  007E9E  36                 	db	54
   236  007E9F  00                 	db	0
   237  007EA0  00                 	db	0
   238  007EA1  08                 	db	8
   239  007EA2  14                 	db	20
   240  007EA3  22                 	db	34
   241  007EA4  41                 	db	65
   242  007EA5  00                 	db	0
   243  007EA6  14                 	db	20
   244  007EA7  14                 	db	20
   245  007EA8  14                 	db	20
   246  007EA9  14                 	db	20
   247  007EAA  14                 	db	20
   248  007EAB  00                 	db	0
   249  007EAC  41                 	db	65
   250  007EAD  22                 	db	34
   251  007EAE  14                 	db	20
   252  007EAF  08                 	db	8
   253  007EB0  02                 	db	2
   254  007EB1  01                 	db	1
   255  007EB2  51                 	db	81
   256  007EB3  09                 	db	9
   257  007EB4  06                 	db	6
   258  007EB5  32                 	db	50
   259  007EB6  49                 	db	73
   260  007EB7  79                 	db	121
   261  007EB8  41                 	db	65
   262  007EB9  3E                 	db	62
   263  007EBA  7E                 	db	126
   264  007EBB  11                 	db	17
   265  007EBC  11                 	db	17
   266  007EBD  11                 	db	17
   267  007EBE  7E                 	db	126
   268  007EBF  7F                 	db	127
   269  007EC0  49                 	db	73
   270  007EC1  49                 	db	73
   271  007EC2  49                 	db	73
   272  007EC3  36                 	db	54
   273  007EC4  3E                 	db	62
   274  007EC5  41                 	db	65
   275  007EC6  41                 	db	65
   276  007EC7  41                 	db	65
   277  007EC8  22                 	db	34
   278  007EC9  7F                 	db	127
   279  007ECA  41                 	db	65
   280  007ECB  41                 	db	65
   281  007ECC  22                 	db	34
   282  007ECD  1C                 	db	28
   283  007ECE  7F                 	db	127
   284  007ECF  49                 	db	73
   285  007ED0  49                 	db	73
   286  007ED1  49                 	db	73
   287  007ED2  41                 	db	65
   288  007ED3  7F                 	db	127
   289  007ED4  09                 	db	9
   290  007ED5  09                 	db	9
   291  007ED6  09                 	db	9
   292  007ED7  01                 	db	1
   293  007ED8  3E                 	db	62
   294  007ED9  41                 	db	65
   295  007EDA  49                 	db	73
   296  007EDB  49                 	db	73
   297  007EDC  7A                 	db	122
   298  007EDD  7F                 	db	127
   299  007EDE  08                 	db	8
   300  007EDF  08                 	db	8
   301  007EE0  08                 	db	8
   302  007EE1  7F                 	db	127
   303  007EE2  00                 	db	0
   304  007EE3  41                 	db	65
   305  007EE4  7F                 	db	127
   306  007EE5  41                 	db	65
   307  007EE6  00                 	db	0
   308  007EE7  20                 	db	32
   309  007EE8  40                 	db	64
   310  007EE9  41                 	db	65
   311  007EEA  3F                 	db	63
   312  007EEB  01                 	db	1
   313  007EEC  7F                 	db	127
   314  007EED  08                 	db	8
   315  007EEE  14                 	db	20
   316  007EEF  22                 	db	34
   317  007EF0  41                 	db	65
   318  007EF1  7F                 	db	127
   319  007EF2  40                 	db	64
   320  007EF3  40                 	db	64
   321  007EF4  40                 	db	64
   322  007EF5  40                 	db	64
   323  007EF6  7F                 	db	127
   324  007EF7  02                 	db	2
   325  007EF8  0C                 	db	12
   326  007EF9  02                 	db	2
   327  007EFA  7F                 	db	127
   328  007EFB  7F                 	db	127
   329  007EFC  04                 	db	4
   330  007EFD  08                 	db	8
   331  007EFE  10                 	db	16
   332  007EFF  7F                 	db	127
   333  007F00  3E                 	db	62
   334  007F01  41                 	db	65
   335  007F02  41                 	db	65
   336  007F03  41                 	db	65
   337  007F04  3E                 	db	62
   338  007F05  7F                 	db	127
   339  007F06  09                 	db	9
   340  007F07  09                 	db	9
   341  007F08  09                 	db	9
   342  007F09  06                 	db	6
   343  007F0A  3E                 	db	62
   344  007F0B  41                 	db	65
   345  007F0C  51                 	db	81
   346  007F0D  21                 	db	33
   347  007F0E  5E                 	db	94
   348  007F0F  7F                 	db	127
   349  007F10  09                 	db	9
   350  007F11  19                 	db	25
   351  007F12  29                 	db	41
   352  007F13  46                 	db	70
   353  007F14  46                 	db	70
   354  007F15  49                 	db	73
   355  007F16  49                 	db	73
   356  007F17  49                 	db	73
   357  007F18  31                 	db	49
   358  007F19  01                 	db	1
   359  007F1A  01                 	db	1
   360  007F1B  7F                 	db	127
   361  007F1C  01                 	db	1
   362  007F1D  01                 	db	1
   363  007F1E  3F                 	db	63
   364  007F1F  40                 	db	64
   365  007F20  40                 	db	64
   366  007F21  40                 	db	64
   367  007F22  3F                 	db	63
   368  007F23  1F                 	db	31
   369  007F24  20                 	db	32
   370  007F25  40                 	db	64
   371  007F26  20                 	db	32
   372  007F27  1F                 	db	31
   373  007F28  3F                 	db	63
   374  007F29  40                 	db	64
   375  007F2A  38                 	db	56
   376  007F2B  40                 	db	64
   377  007F2C  3F                 	db	63
   378  007F2D  63                 	db	99
   379  007F2E  14                 	db	20
   380  007F2F  08                 	db	8
   381  007F30  14                 	db	20
   382  007F31  63                 	db	99
   383  007F32  07                 	db	7
   384  007F33  08                 	db	8
   385  007F34  70                 	db	112
   386  007F35  08                 	db	8
   387  007F36  07                 	db	7
   388  007F37  61                 	db	97
   389  007F38  51                 	db	81
   390  007F39  49                 	db	73
   391  007F3A  45                 	db	69
   392  007F3B  43                 	db	67
   393  007F3C  00                 	db	0
   394  007F3D  7F                 	db	127
   395  007F3E  41                 	db	65
   396  007F3F  41                 	db	65
   397  007F40  00                 	db	0
   398  007F41  02                 	db	2
   399  007F42  04                 	db	4
   400  007F43  08                 	db	8
   401  007F44  10                 	db	16
   402  007F45  20                 	db	32
   403  007F46  00                 	db	0
   404  007F47  41                 	db	65
   405  007F48  41                 	db	65
   406  007F49  7F                 	db	127
   407  007F4A  00                 	db	0
   408  007F4B  04                 	db	4
   409  007F4C  02                 	db	2
   410  007F4D  01                 	db	1
   411  007F4E  02                 	db	2
   412  007F4F  04                 	db	4
   413  007F50  40                 	db	64
   414  007F51  40                 	db	64
   415  007F52  40                 	db	64
   416  007F53  40                 	db	64
   417  007F54  40                 	db	64
   418  007F55  00                 	db	0
   419  007F56  01                 	db	1
   420  007F57  02                 	db	2
   421  007F58  04                 	db	4
   422  007F59  00                 	db	0
   423  007F5A  20                 	db	32
   424  007F5B  54                 	db	84
   425  007F5C  54                 	db	84
   426  007F5D  54                 	db	84
   427  007F5E  78                 	db	120
   428  007F5F  7F                 	db	127
   429  007F60  48                 	db	72
   430  007F61  44                 	db	68
   431  007F62  44                 	db	68
   432  007F63  38                 	db	56
   433  007F64  38                 	db	56
   434  007F65  44                 	db	68
   435  007F66  44                 	db	68
   436  007F67  44                 	db	68
   437  007F68  20                 	db	32
   438  007F69  38                 	db	56
   439  007F6A  44                 	db	68
   440  007F6B  44                 	db	68
   441  007F6C  48                 	db	72
   442  007F6D  7F                 	db	127
   443  007F6E  38                 	db	56
   444  007F6F  54                 	db	84
   445  007F70  54                 	db	84
   446  007F71  54                 	db	84
   447  007F72  18                 	db	24
   448  007F73  08                 	db	8
   449  007F74  7E                 	db	126
   450  007F75  09                 	db	9
   451  007F76  01                 	db	1
   452  007F77  02                 	db	2
   453  007F78  0C                 	db	12
   454  007F79  52                 	db	82
   455  007F7A  52                 	db	82
   456  007F7B  52                 	db	82
   457  007F7C  3E                 	db	62
   458  007F7D  7F                 	db	127
   459  007F7E  08                 	db	8
   460  007F7F  04                 	db	4
   461  007F80  04                 	db	4
   462  007F81  78                 	db	120
   463  007F82  00                 	db	0
   464  007F83  44                 	db	68
   465  007F84  7D                 	db	125
   466  007F85  40                 	db	64
   467  007F86  00                 	db	0
   468  007F87  20                 	db	32
   469  007F88  40                 	db	64
   470  007F89  44                 	db	68
   471  007F8A  3D                 	db	61
   472  007F8B  00                 	db	0
   473  007F8C  7F                 	db	127
   474  007F8D  10                 	db	16
   475  007F8E  28                 	db	40
   476  007F8F  44                 	db	68
   477  007F90  00                 	db	0
   478  007F91  00                 	db	0
   479  007F92  41                 	db	65
   480  007F93  7F                 	db	127
   481  007F94  40                 	db	64
   482  007F95  00                 	db	0
   483  007F96  7C                 	db	124
   484  007F97  04                 	db	4
   485  007F98  18                 	db	24
   486  007F99  04                 	db	4
   487  007F9A  78                 	db	120
   488  007F9B  7C                 	db	124
   489  007F9C  08                 	db	8
   490  007F9D  04                 	db	4
   491  007F9E  04                 	db	4
   492  007F9F  78                 	db	120
   493  007FA0  38                 	db	56
   494  007FA1  44                 	db	68
   495  007FA2  44                 	db	68
   496  007FA3  44                 	db	68
   497  007FA4  38                 	db	56
   498  007FA5  7C                 	db	124
   499  007FA6  14                 	db	20
   500  007FA7  14                 	db	20
   501  007FA8  14                 	db	20
   502  007FA9  08                 	db	8
   503  007FAA  08                 	db	8
   504  007FAB  14                 	db	20
   505  007FAC  14                 	db	20
   506  007FAD  18                 	db	24
   507  007FAE  7C                 	db	124
   508  007FAF  7C                 	db	124
   509  007FB0  08                 	db	8
   510  007FB1  04                 	db	4
   511  007FB2  04                 	db	4
   512  007FB3  08                 	db	8
   513  007FB4  48                 	db	72
   514  007FB5  54                 	db	84
   515  007FB6  54                 	db	84
   516  007FB7  54                 	db	84
   517  007FB8  20                 	db	32
   518  007FB9  04                 	db	4
   519  007FBA  3F                 	db	63
   520  007FBB  44                 	db	68
   521  007FBC  40                 	db	64
   522  007FBD  20                 	db	32
   523  007FBE  3C                 	db	60
   524  007FBF  40                 	db	64
   525  007FC0  40                 	db	64
   526  007FC1  20                 	db	32
   527  007FC2  7C                 	db	124
   528  007FC3  1C                 	db	28
   529  007FC4  20                 	db	32
   530  007FC5  40                 	db	64
   531  007FC6  20                 	db	32
   532  007FC7  1C                 	db	28
   533  007FC8  3C                 	db	60
   534  007FC9  40                 	db	64
   535  007FCA  30                 	db	48
   536  007FCB  40                 	db	64
   537  007FCC  3C                 	db	60
   538  007FCD  44                 	db	68
   539  007FCE  28                 	db	40
   540  007FCF  10                 	db	16
   541  007FD0  28                 	db	40
   542  007FD1  44                 	db	68
   543  007FD2  0C                 	db	12
   544  007FD3  50                 	db	80
   545  007FD4  50                 	db	80
   546  007FD5  50                 	db	80
   547  007FD6  3C                 	db	60
   548  007FD7  44                 	db	68
   549  007FD8  64                 	db	100
   550  007FD9  54                 	db	84
   551  007FDA  4C                 	db	76
   552  007FDB  44                 	db	68
   553  007FDC  00                 	db	0
   554  007FDD  08                 	db	8
   555  007FDE  36                 	db	54
   556  007FDF  41                 	db	65
   557  007FE0  00                 	db	0
   558  007FE1  00                 	db	0
   559  007FE2  00                 	db	0
   560  007FE3  7F                 	db	127
   561  007FE4  00                 	db	0
   562  007FE5  00                 	db	0
   563  007FE6  00                 	db	0
   564  007FE7  41                 	db	65
   565  007FE8  36                 	db	54
   566  007FE9  08                 	db	8
   567  007FEA  00                 	db	0
   568  007FEB  10                 	db	16
   569  007FEC  08                 	db	8
   570  007FED  08                 	db	8
   571  007FEE  10                 	db	16
   572  007FEF  08                 	db	8
   573  007FF0  78                 	db	120
   574  007FF1  46                 	db	70
   575  007FF2  41                 	db	65
   576  007FF3  46                 	db	70
   577  007FF4  78                 	db	120
   578  007FF5                     __end_of_FONTLOOKUP:
   579                           	opt stack 0
   580  007FF5                     STR_3:
   581  007FF5  28                 	db	40
   582  007FF6  6E                 	db	110	;'n'
   583  007FF7  75                 	db	117	;'u'
   584  007FF8  6C                 	db	108	;'l'
   585  007FF9  6C                 	db	108	;'l'
   586  007FFA  29                 	db	41
   587  007FFB  00                 	db	0
   588  007FFC                     STR_1:
   589  007FFC  25                 	db	37
   590  007FFD  73                 	db	115	;'s'
   591  007FFE  00                 	db	0
   592  0000                     
   593                           ; #config settings
   594  007FFF  00                 	db	0	; dummy byte at the end
   595  0000                     
   596                           	psect	nvCOMRAM
   597  000041                     __pnvCOMRAM:
   598                           	opt stack 0
   599  000041                     _timer0ReloadVal16bit:
   600                           	opt stack 0
   601  000041                     	ds	2
   602  000043                     _eusart2TxBufferRemaining:
   603                           	opt stack 0
   604  000043                     	ds	1
   605  0000                     _ANSELA	set	3896
   606  0000                     _ANSELB	set	3897
   607  0000                     _ANSELC	set	3898
   608  0000                     _ANSELD	set	3899
   609  0000                     _ANSELE	set	3900
   610  0000                     _BAUD1CON	set	4024
   611  0000                     _BAUD2CON	set	3952
   612  0000                     _INTCON2bits	set	4081
   613  0000                     _INTCONbits	set	4082
   614  0000                     _IPR1bits	set	3999
   615  0000                     _IPR3bits	set	4005
   616  0000                     _LATA	set	3977
   617  0000                     _LATB	set	3978
   618  0000                     _LATBbits	set	3978
   619  0000                     _LATC	set	3979
   620  0000                     _LATCbits	set	3979
   621  0000                     _LATD	set	3980
   622  0000                     _LATE	set	3981
   623  0000                     _OSCCON	set	4051
   624  0000                     _OSCCON2	set	4050
   625  0000                     _OSCTUNE	set	3995
   626  0000                     _PIE1bits	set	3997
   627  0000                     _PIE3bits	set	4003
   628  0000                     _PIR1bits	set	3998
   629  0000                     _PIR3bits	set	4004
   630  0000                     _RC1STA	set	4011
   631  0000                     _RC1STAbits	set	4011
   632  0000                     _RC2STA	set	3953
   633  0000                     _RC2STAbits	set	3953
   634  0000                     _RCONbits	set	4048
   635  0000                     _RCREG1	set	4014
   636  0000                     _RCREG2	set	3956
   637  0000                     _SPBRG1	set	4015
   638  0000                     _SPBRG2	set	3957
   639  0000                     _SPBRGH1	set	4016
   640  0000                     _SPBRGH2	set	3958
   641  0000                     _SSP1ADD	set	4040
   642  0000                     _SSP1BUF	set	4041
   643  0000                     _SSP1CON1	set	4038
   644  0000                     _SSP1CON1bits	set	4038
   645  0000                     _SSP1STAT	set	4039
   646  0000                     _SSP1STATbits	set	4039
   647  0000                     _T0CON	set	4053
   648  0000                     _T0CONbits	set	4053
   649  0000                     _TMR0H	set	4055
   650  0000                     _TMR0L	set	4054
   651  0000                     _TRISA	set	3986
   652  0000                     _TRISB	set	3987
   653  0000                     _TRISBbits	set	3987
   654  0000                     _TRISC	set	3988
   655  0000                     _TRISD	set	3989
   656  0000                     _TRISE	set	3990
   657  0000                     _TX1STA	set	4012
   658  0000                     _TX2STA	set	3954
   659  0000                     _TXREG1	set	4013
   660  0000                     _TXREG2	set	3955
   661  0000                     _WPUB	set	3937
   662  0000                     _LATA3	set	31819
   663  0000                     _LATB0	set	31824
   664  0000                     _LATB1	set	31825
   665  0000                     _LATB3	set	31827
   666  0000                     _LATB4	set	31828
   667  0000                     _LATB5	set	31829
   668  0000                     _LATC0	set	31832
   669  0000                     _LATC1	set	31833
   670  0000                     _LATD0	set	31840
   671  0000                     _LATD3	set	31843
   672  0000                     _TRISD0	set	31912
   673  0000                     _TRISD2	set	31914
   674  0000                     _TRISD3	set	31915
   675                           
   676                           	psect	cinit
   677  000B9E                     __pcinit:
   678                           	opt stack 0
   679  000B9E                     start_initialization:
   680                           	opt stack 0
   681  000B9E                     __initialization:
   682                           	opt stack 0
   683                           
   684                           ; Clear objects allocated to BANK4 (200 bytes)
   685  000B9E  EE04  F000         	lfsr	0,__pbssBANK4
   686  000BA2  0EC8               	movlw	200
   687  000BA4                     clear_0:
   688  000BA4  6AEE               	clrf	postinc0,c
   689  000BA6  06E8               	decf	wreg,f,c
   690  000BA8  E1FD               	bnz	clear_0
   691                           
   692                           ; Clear objects allocated to BANK3 (206 bytes)
   693  000BAA  EE03  F000         	lfsr	0,__pbssBANK3
   694  000BAE  0ECE               	movlw	206
   695  000BB0                     clear_1:
   696  000BB0  6AEE               	clrf	postinc0,c
   697  000BB2  06E8               	decf	wreg,f,c
   698  000BB4  E1FD               	bnz	clear_1
   699                           
   700                           ; Clear objects allocated to BANK2 (206 bytes)
   701  000BB6  EE02  F000         	lfsr	0,__pbssBANK2
   702  000BBA  0ECE               	movlw	206
   703  000BBC                     clear_2:
   704  000BBC  6AEE               	clrf	postinc0,c
   705  000BBE  06E8               	decf	wreg,f,c
   706  000BC0  E1FD               	bnz	clear_2
   707                           
   708                           ; Clear objects allocated to BANK1 (206 bytes)
   709  000BC2  EE01  F000         	lfsr	0,__pbssBANK1
   710  000BC6  0ECE               	movlw	206
   711  000BC8                     clear_3:
   712  000BC8  6AEE               	clrf	postinc0,c
   713  000BCA  06E8               	decf	wreg,f,c
   714  000BCC  E1FD               	bnz	clear_3
   715                           
   716                           ; Clear objects allocated to BANK0 (112 bytes)
   717  000BCE  EE00  F060         	lfsr	0,__pbssBANK0
   718  000BD2  0E70               	movlw	112
   719  000BD4                     clear_4:
   720  000BD4  6AEE               	clrf	postinc0,c
   721  000BD6  06E8               	decf	wreg,f,c
   722  000BD8  E1FD               	bnz	clear_4
   723                           
   724                           ; Clear objects allocated to COMRAM (26 bytes)
   725  000BDA  EE00  F027         	lfsr	0,__pbssCOMRAM
   726  000BDE  0E1A               	movlw	26
   727  000BE0                     clear_5:
   728  000BE0  6AEE               	clrf	postinc0,c
   729  000BE2  06E8               	decf	wreg,f,c
   730  000BE4  E1FD               	bnz	clear_5
   731                           
   732                           ; Initialize objects allocated to BANK0 (9 bytes)
   733                           ; load TBLPTR registers with __pidataBANK0
   734  000BE6  0E2C               	movlw	low __pidataBANK0
   735  000BE8  6EF6               	movwf	tblptrl,c
   736  000BEA  0E12               	movlw	high __pidataBANK0
   737  000BEC  6EF7               	movwf	tblptrh,c
   738  000BEE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   739  000BF0  6EF8               	movwf	tblptru,c
   740  000BF2  EE00  F0E9         	lfsr	0,__pdataBANK0
   741  000BF6  EE10 F009          	lfsr	1,9
   742  000BFA                     copy_data0:
   743  000BFA  0009               	tblrd		*+
   744  000BFC  CFF5 FFEE          	movff	tablat,postinc0
   745  000C00  50E5               	movf	postdec1,w,c
   746  000C02  50E1               	movf	fsr1l,w,c
   747  000C04  E1FA               	bnz	copy_data0
   748                           
   749                           ; Initialize objects allocated to COMRAM (1 bytes)
   750                           ; load TBLPTR registers with __pidataCOMRAM
   751  000C06  0E3A               	movlw	low __pidataCOMRAM
   752  000C08  6EF6               	movwf	tblptrl,c
   753  000C0A  0E12               	movlw	high __pidataCOMRAM
   754  000C0C  6EF7               	movwf	tblptrh,c
   755  000C0E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   756  000C10  6EF8               	movwf	tblptru,c
   757  000C12  0009               	tblrd		*+	;fetch initializer
   758  000C14  CFF5 F044          	movff	tablat,__pdataCOMRAM
   759  000C18                     end_of_initialization:
   760                           	opt stack 0
   761  000C18                     __end_of__initialization:
   762                           	opt stack 0
   763  000C18  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   764  000C1A  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   765  000C1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   766  000C1E  6EF8               	movwf	tblptru,c
   767  000C20  0100               	movlb	0
   768  000C22  EF70  F007         	goto	_main	;jump to C main() function
   769                           tblptru	equ	0xFF8
   770                           tblptrh	equ	0xFF7
   771                           tblptrl	equ	0xFF6
   772                           tablat	equ	0xFF5
   773                           postinc0	equ	0xFEE
   774                           wreg	equ	0xFE8
   775                           postdec1	equ	0xFE5
   776                           fsr1l	equ	0xFE1
   777                           
   778                           	psect	bssCOMRAM
   779  000027                     __pbssCOMRAM:
   780                           	opt stack 0
   781  000027                     _time:
   782                           	opt stack 0
   783  000027                     	ds	4
   784  00002B                     _Start:
   785                           	opt stack 0
   786  00002B                     	ds	2
   787  00002D                     _group:
   788                           	opt stack 0
   789  00002D                     	ds	2
   790  00002F                     _receiveArrayAddress:
   791                           	opt stack 0
   792  00002F                     	ds	2
   793  000031                     _sendStructAddress:
   794                           	opt stack 0
   795  000031                     	ds	2
   796  000033                     _AKNAKsend:
   797                           	opt stack 0
   798  000033                     	ds	1
   799  000034                     _calc_CS:
   800                           	opt stack 0
   801  000034                     	ds	1
   802  000035                     _eusart2RxCount:
   803                           	opt stack 0
   804  000035                     	ds	1
   805  000036                     _eusart2RxHead:
   806                           	opt stack 0
   807  000036                     	ds	1
   808  000037                     _eusart2RxTail:
   809                           	opt stack 0
   810  000037                     	ds	1
   811  000038                     _eusart2TxHead:
   812                           	opt stack 0
   813  000038                     	ds	1
   814  000039                     _eusart2TxTail:
   815                           	opt stack 0
   816  000039                     	ds	1
   817  00003A                     _i:
   818                           	opt stack 0
   819  00003A                     	ds	1
   820  00003B                     _maxDataAddress:
   821                           	opt stack 0
   822  00003B                     	ds	1
   823  00003C                     _moduleAddress:
   824                           	opt stack 0
   825  00003C                     	ds	1
   826  00003D                     _returnAddress:
   827                           	opt stack 0
   828  00003D                     	ds	1
   829  00003E                     _rx_address:
   830                           	opt stack 0
   831  00003E                     	ds	1
   832  00003F                     _rx_array_inx:
   833                           	opt stack 0
   834  00003F                     	ds	1
   835  000040                     _rx_len:
   836                           	opt stack 0
   837  000040                     	ds	1
   838                           tblptru	equ	0xFF8
   839                           tblptrh	equ	0xFF7
   840                           tblptrl	equ	0xFF6
   841                           tablat	equ	0xFF5
   842                           postinc0	equ	0xFEE
   843                           wreg	equ	0xFE8
   844                           postdec1	equ	0xFE5
   845                           fsr1l	equ	0xFE1
   846                           
   847                           	psect	dataCOMRAM
   848  000044                     __pdataCOMRAM:
   849                           	opt stack 0
   850  000044                     _Transmit_stall:
   851                           	opt stack 0
   852  000044                     	ds	1
   853                           tblptru	equ	0xFF8
   854                           tblptrh	equ	0xFF7
   855                           tblptrl	equ	0xFF6
   856                           tablat	equ	0xFF5
   857                           postinc0	equ	0xFEE
   858                           wreg	equ	0xFE8
   859                           postdec1	equ	0xFE5
   860                           fsr1l	equ	0xFE1
   861                           
   862                           	psect	bssBANK0
   863  000060                     __pbssBANK0:
   864                           	opt stack 0
   865  000060                     _receiveArray:
   866                           	opt stack 0
   867  000060                     	ds	40
   868  000088                     _ddata:
   869                           	opt stack 0
   870  000088                     	ds	11
   871  000093                     _eusart2RxBuffer:
   872                           	opt stack 0
   873  000093                     	ds	8
   874  00009B                     _eusart2TxBuffer:
   875                           	opt stack 0
   876  00009B                     	ds	8
   877  0000A3                     _LEDtime:
   878                           	opt stack 0
   879  0000A3                     	ds	4
   880  0000A7                     _lastLEDTime:
   881                           	opt stack 0
   882  0000A7                     	ds	4
   883  0000AB                     _talkTime:
   884                           	opt stack 0
   885  0000AB                     	ds	4
   886  0000AF                     _addressErrorCounter:
   887                           	opt stack 0
   888  0000AF                     	ds	2
   889  0000B1                     _alignErrorCounter:
   890                           	opt stack 0
   891  0000B1                     	ds	2
   892  0000B3                     _crcErrorCounter:
   893                           	opt stack 0
   894  0000B3                     	ds	2
   895  0000B5                     _dataAdressErrorCounter:
   896                           	opt stack 0
   897  0000B5                     	ds	2
   898  0000B7                     _serial_available:
   899                           	opt stack 0
   900  0000B7                     	ds	2
   901  0000B9                     _serial_peek:
   902                           	opt stack 0
   903  0000B9                     	ds	2
   904  0000BB                     _serial_read:
   905                           	opt stack 0
   906  0000BB                     	ds	2
   907  0000BD                     _serial_write:
   908                           	opt stack 0
   909  0000BD                     	ds	2
   910  0000BF                     _crc_buffer:
   911                           	opt stack 0
   912  0000BF                     	ds	17
   913                           tblptru	equ	0xFF8
   914                           tblptrh	equ	0xFF7
   915                           tblptrl	equ	0xFF6
   916                           tablat	equ	0xFF5
   917                           postinc0	equ	0xFEE
   918                           wreg	equ	0xFE8
   919                           postdec1	equ	0xFE5
   920                           fsr1l	equ	0xFE1
   921                           
   922                           	psect	dataBANK0
   923  0000E9                     __pdataBANK0:
   924                           	opt stack 0
   925  0000E9                     _ChargerData:
   926                           	opt stack 0
   927  0000E9                     	ds	9
   928                           tblptru	equ	0xFF8
   929                           tblptrh	equ	0xFF7
   930                           tblptrl	equ	0xFF6
   931                           tablat	equ	0xFF5
   932                           postinc0	equ	0xFEE
   933                           wreg	equ	0xFE8
   934                           postdec1	equ	0xFE5
   935                           fsr1l	equ	0xFE1
   936                           
   937                           	psect	bssBANK1
   938  000100                     __pbssBANK1:
   939                           	opt stack 0
   940  000100                     _ring_buffer:
   941                           	opt stack 0
   942  000100                     	ds	206
   943                           tblptru	equ	0xFF8
   944                           tblptrh	equ	0xFF7
   945                           tblptrl	equ	0xFF6
   946                           tablat	equ	0xFF5
   947                           postinc0	equ	0xFEE
   948                           wreg	equ	0xFE8
   949                           postdec1	equ	0xFE5
   950                           fsr1l	equ	0xFE1
   951                           
   952                           	psect	bssBANK2
   953  000200                     __pbssBANK2:
   954                           	opt stack 0
   955  000200                     _input_buffer:
   956                           	opt stack 0
   957  000200                     	ds	206
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1l	equ	0xFE1
   966                           
   967                           	psect	bssBANK3
   968  000300                     __pbssBANK3:
   969                           	opt stack 0
   970  000300                     _output_buffer:
   971                           	opt stack 0
   972  000300                     	ds	206
   973                           tblptru	equ	0xFF8
   974                           tblptrh	equ	0xFF7
   975                           tblptrl	equ	0xFF6
   976                           tablat	equ	0xFF5
   977                           postinc0	equ	0xFEE
   978                           wreg	equ	0xFE8
   979                           postdec1	equ	0xFE5
   980                           fsr1l	equ	0xFE1
   981                           
   982                           	psect	bssBANK4
   983  000400                     __pbssBANK4:
   984                           	opt stack 0
   985  000400                     _rx_buffer:
   986                           	opt stack 0
   987  000400                     	ds	200
   988                           tblptru	equ	0xFF8
   989                           tblptrh	equ	0xFF7
   990                           tblptrl	equ	0xFF6
   991                           tablat	equ	0xFF5
   992                           postinc0	equ	0xFEE
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1l	equ	0xFE1
   996                           
   997                           	psect	cstackBANK0
   998  0000D0                     __pcstackBANK0:
   999                           	opt stack 0
  1000  0000D0                     ??_sendData:
  1001  0000D0                     ??_FastTransfer_buffer_put:
  1002  0000D0                     CRCcheck@SentCRC:
  1003                           	opt stack 0
  1004  0000D0                     Precharge@OnOff:
  1005                           	opt stack 0
  1006  0000D0                     SetCharger@Current:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x0
  1010  0000D0                     	ds	1
  1011  0000D1                     sendData@whereToSend:
  1012                           	opt stack 0
  1013  0000D1                     CRCcheck@calculatedCRC:
  1014                           	opt stack 0
  1015  0000D1                     SetCharger@Voltage:
  1016                           	opt stack 0
  1017  0000D1                     Precharge@i:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x1
  1021  0000D1                     	ds	1
  1022  0000D2                     sendData@CS:
  1023                           	opt stack 0
  1024  0000D2                     SetCharger@mode:
  1025                           	opt stack 0
  1026  0000D2                     ToSend@what:
  1027                           	opt stack 0
  1028  0000D2                     CRCcheck@arrayHolder:
  1029                           	opt stack 0
  1030                           
  1031                           ; 3 bytes @ 0x2
  1032  0000D2                     	ds	1
  1033  0000D3                     sendData@i:
  1034                           	opt stack 0
  1035  0000D3                     Precharge@i_1672:
  1036                           	opt stack 0
  1037                           
  1038                           ; 2 bytes @ 0x3
  1039  0000D3                     	ds	2
  1040  0000D5                     CRCcheck@rt:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x5
  1044  0000D5                     	ds	2
  1045  0000D7                     ??_receiveData:
  1046                           
  1047                           ; 0 bytes @ 0x7
  1048  0000D7                     	ds	6
  1049  0000DD                     receiveData@crcHolder:
  1050                           	opt stack 0
  1051                           
  1052                           ; 1 bytes @ 0xD
  1053  0000DD                     	ds	1
  1054  0000DE                     receiveData@crcHolder_1381:
  1055                           	opt stack 0
  1056                           
  1057                           ; 1 bytes @ 0xE
  1058  0000DE                     	ds	1
  1059  0000DF                     receiveData@holder:
  1060                           	opt stack 0
  1061                           
  1062                           ; 3 bytes @ 0xF
  1063  0000DF                     	ds	3
  1064  0000E2                     receiveData@holder_1380:
  1065                           	opt stack 0
  1066                           
  1067                           ; 3 bytes @ 0x12
  1068  0000E2                     	ds	3
  1069  0000E5                     receiveData@u:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x15
  1073  0000E5                     	ds	2
  1074  0000E7                     receiveData@r:
  1075                           	opt stack 0
  1076                           
  1077                           ; 2 bytes @ 0x17
  1078  0000E7                     	ds	2
  1079                           tblptru	equ	0xFF8
  1080                           tblptrh	equ	0xFF7
  1081                           tblptrl	equ	0xFF6
  1082                           tablat	equ	0xFF5
  1083                           postinc0	equ	0xFEE
  1084                           wreg	equ	0xFE8
  1085                           postdec1	equ	0xFE5
  1086                           fsr1l	equ	0xFE1
  1087                           
  1088                           	psect	cstackCOMRAM
  1089  000001                     __pcstackCOMRAM:
  1090                           	opt stack 0
  1091  000001                     ?_UART_buff_modulo_inc:
  1092                           	opt stack 0
  1093  000001                     ?_UART_buff_size:
  1094                           	opt stack 0
  1095  000001                     UART_buff_size@_this:
  1096                           	opt stack 0
  1097  000001                     UART_buff_modulo_inc@value:
  1098                           	opt stack 0
  1099                           
  1100                           ; 2 bytes @ 0x0
  1101  000001                     	ds	2
  1102  000003                     UART_buff_modulo_inc@modulus:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x2
  1106  000003                     	ds	2
  1107  000005                     UART_buff_modulo_inc@my_value:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x4
  1111  000005                     	ds	2
  1112  000007                     UART_buff_put@_this:
  1113                           	opt stack 0
  1114  000007                     UART_buff_get@_this:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x6
  1118  000007                     	ds	2
  1119  000009                     ??_UART_buff_get:
  1120  000009                     UART_buff_put@c:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x8
  1124  000009                     	ds	1
  1125  00000A                     ??_UART_buff_put:
  1126                           
  1127                           ; 0 bytes @ 0x9
  1128  00000A                     	ds	1
  1129  00000B                     UART_buff_get@c:
  1130                           	opt stack 0
  1131                           
  1132                           ; 1 bytes @ 0xA
  1133  00000B                     	ds	1
  1134  00000C                     EUSART1_Receive_ISR@data:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0xB
  1138  00000C                     	ds	1
  1139  00000D                     ??_INTERRUPT_InterruptManager:
  1140                           
  1141                           ; 0 bytes @ 0xC
  1142  00000D                     	ds	14
  1143  00001B                     ??_TMR0_Initialize:
  1144  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1145                           	opt stack 0
  1146  00001B                     ?_time_get:
  1147                           	opt stack 0
  1148  00001B                     EUSART2_Write@txData:
  1149                           	opt stack 0
  1150  00001B                     SPI1_Exchange8bit@data:
  1151                           	opt stack 0
  1152  00001B                     SetMux@channel:
  1153                           	opt stack 0
  1154  00001B                     CRC8@data:
  1155                           	opt stack 0
  1156  00001B                     FastTransfer_buffer_modulo_inc@value:
  1157                           	opt stack 0
  1158  00001B                     crcBufS_put@_this:
  1159                           	opt stack 0
  1160  00001B                     crcBufS_status_put@_this:
  1161                           	opt stack 0
  1162  00001B                     crcBufS_get@_this:
  1163                           	opt stack 0
  1164  00001B                     time_Set@value:
  1165                           	opt stack 0
  1166  00001B                     memset@p1:
  1167                           	opt stack 0
  1168  00001B                     Delay@wait:
  1169                           	opt stack 0
  1170                           
  1171                           ; 4 bytes @ 0x1A
  1172  00001B                     	ds	1
  1173  00001C                     putch@txData:
  1174                           	opt stack 0
  1175  00001C                     LCDwrite@data:
  1176                           	opt stack 0
  1177                           
  1178                           ; 1 bytes @ 0x1B
  1179  00001C                     	ds	1
  1180  00001D                     ?_printf:
  1181                           	opt stack 0
  1182  00001D                     CRC8@len:
  1183                           	opt stack 0
  1184  00001D                     crcBufS_put@address:
  1185                           	opt stack 0
  1186  00001D                     crcBufS_status_put@time:
  1187                           	opt stack 0
  1188  00001D                     crcBufS_get@time:
  1189                           	opt stack 0
  1190  00001D                     LCDwrite@mode:
  1191                           	opt stack 0
  1192  00001D                     time_get@WhatTime:
  1193                           	opt stack 0
  1194  00001D                     time_Set@WhatTime:
  1195                           	opt stack 0
  1196  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1197                           	opt stack 0
  1198  00001D                     printf@f:
  1199                           	opt stack 0
  1200  00001D                     memset@c:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x1C
  1204  00001D                     	ds	1
  1205  00001E                     CRC8@sum:
  1206                           	opt stack 0
  1207  00001E                     crcBufS_put@oldCRC:
  1208                           	opt stack 0
  1209  00001E                     crcBufS_status_put@status:
  1210                           	opt stack 0
  1211  00001E                     crcBufS_get@space:
  1212                           	opt stack 0
  1213  00001E                     clearLcd@res:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x1D
  1217  00001E                     	ds	1
  1218  00001F                     ??_Delay:
  1219  00001F                     ??_crcBufS_get:
  1220  00001F                     ??_crcBufS_status_put:
  1221  00001F                     CRC8@extract:
  1222                           	opt stack 0
  1223  00001F                     crcBufS_put@status:
  1224                           	opt stack 0
  1225  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1226                           	opt stack 0
  1227  00001F                     memset@n:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x1E
  1231  00001F                     	ds	1
  1232  000020                     ??_crcBufS_put:
  1233  000020                     CRC8@tempI:
  1234                           	opt stack 0
  1235  000020                     Delay@i:
  1236                           	opt stack 0
  1237                           
  1238                           ; 4 bytes @ 0x1F
  1239  000020                     	ds	1
  1240  000021                     CRC8@crc:
  1241                           	opt stack 0
  1242  000021                     printf@flag:
  1243                           	opt stack 0
  1244  000021                     FastTransfer_buffer_put@_this:
  1245                           	opt stack 0
  1246  000021                     memset@p:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x20
  1250  000021                     	ds	1
  1251  000022                     printf@ap:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x21
  1255  000022                     	ds	1
  1256  000023                     FastTransfer_buffer_put@towhere:
  1257                           	opt stack 0
  1258  000023                     FastTransfer_buffer_flush@_this:
  1259                           	opt stack 0
  1260  000023                     crcBufS_status_put@wantedTime:
  1261                           	opt stack 0
  1262                           
  1263                           ; 2 bytes @ 0x22
  1264  000023                     	ds	1
  1265  000024                     printf@c:
  1266                           	opt stack 0
  1267  000024                     FastTransfer_buffer_put@towhat:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0x23
  1271  000024                     	ds	1
  1272  000025                     FastTransfer_buffer_flush@clearBuffer:
  1273                           	opt stack 0
  1274  000025                     crcBufS_get@wantedTime:
  1275                           	opt stack 0
  1276  000025                     printf@cp:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x24
  1280  000025                     	ds	1
  1281  000026                     ToSend@where:
  1282                           	opt stack 0
  1283                           
  1284                           ; 1 bytes @ 0x25
  1285  000026                     	ds	1
  1286  000027                     tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1l	equ	0xFE1
  1294                           
  1295                           ; 0 bytes @ 0x26
  1296 ;;
  1297 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1298 ;;
  1299 ;; *************** function _main *****************
  1300 ;; Defined at:
  1301 ;;		line 16 in file "main.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;		None
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;		None
  1306 ;; Return value:  Size  Location     Type
  1307 ;;		None               void
  1308 ;; Registers used:
  1309 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1315 ;;      Params:         0       0       0       0       0       0       0
  1316 ;;      Locals:         0       0       0       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0
  1318 ;;      Totals:         0       0       0       0       0       0       0
  1319 ;;Total ram usage:        0 bytes
  1320 ;; Hardware stack levels required when called:    9
  1321 ;; This function calls:
  1322 ;;		_Delay
  1323 ;;		_NokiaStart
  1324 ;;		_SYSTEM_Initialize
  1325 ;;		_clearLcd
  1326 ;;		_ledDebug
  1327 ;;		_respondECU
  1328 ;;		_updateComms
  1329 ;; This function is called by:
  1330 ;;		Startup code after reset
  1331 ;; This function uses a non-reentrant model
  1332 ;;
  1333                           
  1334                           	psect	text0
  1335  000EE0                     __ptext0:
  1336                           	opt stack 0
  1337  000EE0                     _main:
  1338                           	opt stack 22
  1339                           
  1340                           ;main.c: 18: SYSTEM_Initialize();
  1341                           
  1342                           ;incstack = 0
  1343  000EE0  ECD6  F008         	call	_SYSTEM_Initialize	;wreg free
  1344                           
  1345                           ;main.c: 37: (INTCONbits.GIE = 1);
  1346  000EE4  8EF2               	bsf	intcon,7,c	;volatile
  1347                           
  1348                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1349  000EE6  8CF2               	bsf	intcon,6,c	;volatile
  1350                           
  1351                           ;main.c: 47: NokiaStart();
  1352  000EE8  EC3D  F005         	call	_NokiaStart	;wreg free
  1353                           
  1354                           ;main.c: 48: Delay(100);
  1355  000EEC  0E64               	movlw	100
  1356  000EEE  6E1B               	movwf	Delay@wait,c
  1357  000EF0  0E00               	movlw	0
  1358  000EF2  6E1C               	movwf	Delay@wait+1,c
  1359  000EF4  0E00               	movlw	0
  1360  000EF6  6E1D               	movwf	Delay@wait+2,c
  1361  000EF8  0E00               	movlw	0
  1362  000EFA  6E1E               	movwf	Delay@wait+3,c
  1363  000EFC  EC08  F007         	call	_Delay	;wreg free
  1364                           
  1365                           ;main.c: 49: clearLcd();
  1366  000F00  EC76  F008         	call	_clearLcd	;wreg free
  1367                           
  1368                           ;main.c: 50: respondECU();
  1369  000F04  ECB6  F006         	call	_respondECU	;wreg free
  1370                           
  1371                           ;main.c: 52: do { LATA3 = 1; } while(0);
  1372  000F08  8689               	bsf	3977,3,c	;volatile
  1373  000F0A                     l3397:
  1374                           
  1375                           ;main.c: 54: respondECU();
  1376  000F0A  ECB6  F006         	call	_respondECU	;wreg free
  1377                           
  1378                           ;main.c: 55: updateComms();
  1379  000F0E  EC8A  F008         	call	_updateComms	;wreg free
  1380                           
  1381                           ;main.c: 56: ledDebug();
  1382  000F12  ECDB  F007         	call	_ledDebug	;wreg free
  1383  000F16  D7F9               	goto	l3397
  1384  000F18                     __end_of_main:
  1385                           	opt stack 0
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           intcon	equ	0xFF2
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           postdec1	equ	0xFE5
  1394                           fsr1l	equ	0xFE1
  1395                           
  1396 ;; *************** function _updateComms *****************
  1397 ;; Defined at:
  1398 ;;		line 14 in file "Communications.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;		None
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;		None
  1403 ;; Return value:  Size  Location     Type
  1404 ;;		None               void
  1405 ;; Registers used:
  1406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1412 ;;      Params:         0       0       0       0       0       0       0
  1413 ;;      Locals:         0       0       0       0       0       0       0
  1414 ;;      Temps:          0       0       0       0       0       0       0
  1415 ;;      Totals:         0       0       0       0       0       0       0
  1416 ;;Total ram usage:        0 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    8
  1419 ;; This function calls:
  1420 ;;		_Precharge
  1421 ;;		_SetCharger
  1422 ;;		_receiveData
  1423 ;;		_respondECU
  1424 ;; This function is called by:
  1425 ;;		_main
  1426 ;; This function uses a non-reentrant model
  1427 ;;
  1428                           
  1429                           	psect	text1
  1430  001114                     __ptext1:
  1431                           	opt stack 0
  1432  001114                     _updateComms:
  1433                           	opt stack 22
  1434                           
  1435                           ;Communications.c: 15: if (receiveData()) {
  1436                           
  1437                           ;incstack = 0
  1438  001114  EC58  F000         	call	_receiveData	;wreg free
  1439  001118  0900               	iorlw	0
  1440  00111A  B4D8               	btfsc	status,2,c
  1441  00111C  0012               	return	
  1442                           
  1443                           ;Communications.c: 16: Precharge(receiveArray[1]);
  1444  00111E  0100               	movlb	0	; () banked
  1445  001120  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1446  001122  ECA3  F004         	call	_Precharge
  1447                           
  1448                           ;Communications.c: 17: SetCharger(1, receiveArray[2], receiveArray[3]);
  1449  001126  C064  F0D0         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1450  00112A  C066  F0D1         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1451  00112E  0E01               	movlw	1
  1452  001130  EC4F  F006         	call	_SetCharger
  1453                           
  1454                           ;Communications.c: 18: respondECU();
  1455  001134  ECB6  F006         	call	_respondECU	;wreg free
  1456  001138  0012               	return	
  1457  00113A                     __end_of_updateComms:
  1458                           	opt stack 0
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           intcon	equ	0xFF2
  1464                           postinc0	equ	0xFEE
  1465                           wreg	equ	0xFE8
  1466                           postdec1	equ	0xFE5
  1467                           fsr1l	equ	0xFE1
  1468                           status	equ	0xFD8
  1469                           
  1470 ;; *************** function _respondECU *****************
  1471 ;; Defined at:
  1472 ;;		line 33 in file "Communications.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;		None
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;		None
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  2  227[None  ] int 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1486 ;;      Params:         0       0       0       0       0       0       0
  1487 ;;      Locals:         0       0       0       0       0       0       0
  1488 ;;      Temps:          0       0       0       0       0       0       0
  1489 ;;      Totals:         0       0       0       0       0       0       0
  1490 ;;Total ram usage:        0 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    7
  1493 ;; This function calls:
  1494 ;;		_Delay
  1495 ;;		_ToSend
  1496 ;;		_sendData
  1497 ;; This function is called by:
  1498 ;;		_main
  1499 ;;		_updateComms
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text2
  1504  000D6C                     __ptext2:
  1505                           	opt stack 0
  1506  000D6C                     _respondECU:
  1507                           	opt stack 22
  1508                           
  1509                           ;Communications.c: 34: LATCbits.LATC5 = 1;
  1510                           
  1511                           ;incstack = 0
  1512  000D6C  8A8B               	bsf	3979,5,c	;volatile
  1513                           
  1514                           ;Communications.c: 35: ToSend(0, 1);
  1515  000D6E  0E00               	movlw	0
  1516  000D70  0100               	movlb	0	; () banked
  1517  000D72  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1518  000D74  0E01               	movlw	1
  1519  000D76  6FD2               	movwf	ToSend@what& (0+255),b
  1520  000D78  0E00               	movlw	0
  1521  000D7A  ECBB  F008         	call	_ToSend
  1522                           
  1523                           ;Communications.c: 36: ToSend(1, 1);
  1524  000D7E  0E00               	movlw	0
  1525  000D80  0100               	movlb	0	; () banked
  1526  000D82  6FD3               	movwf	(ToSend@what+1)& (0+255),b
  1527  000D84  0E01               	movlw	1
  1528  000D86  6FD2               	movwf	ToSend@what& (0+255),b
  1529  000D88  0E01               	movlw	1
  1530  000D8A  ECBB  F008         	call	_ToSend
  1531                           
  1532                           ;Communications.c: 37: Delay(5);
  1533  000D8E  0E05               	movlw	5
  1534  000D90  6E1B               	movwf	Delay@wait,c
  1535  000D92  0E00               	movlw	0
  1536  000D94  6E1C               	movwf	Delay@wait+1,c
  1537  000D96  0E00               	movlw	0
  1538  000D98  6E1D               	movwf	Delay@wait+2,c
  1539  000D9A  0E00               	movlw	0
  1540  000D9C  6E1E               	movwf	Delay@wait+3,c
  1541  000D9E  EC08  F007         	call	_Delay	;wreg free
  1542                           
  1543                           ;Communications.c: 39: sendData(6);
  1544  000DA2  0E06               	movlw	6
  1545  000DA4  EC13  F006         	call	_sendData
  1546                           
  1547                           ;Communications.c: 40: Delay(3);
  1548  000DA8  0E03               	movlw	3
  1549  000DAA  6E1B               	movwf	Delay@wait,c
  1550  000DAC  0E00               	movlw	0
  1551  000DAE  6E1C               	movwf	Delay@wait+1,c
  1552  000DB0  0E00               	movlw	0
  1553  000DB2  6E1D               	movwf	Delay@wait+2,c
  1554  000DB4  0E00               	movlw	0
  1555  000DB6  6E1E               	movwf	Delay@wait+3,c
  1556  000DB8  EC08  F007         	call	_Delay	;wreg free
  1557                           
  1558                           ;Communications.c: 41: LATCbits.LATC5 = 0;
  1559  000DBC  9A8B               	bcf	3979,5,c	;volatile
  1560  000DBE  0012               	return		;funcret
  1561  000DC0                     __end_of_respondECU:
  1562                           	opt stack 0
  1563                           tblptru	equ	0xFF8
  1564                           tblptrh	equ	0xFF7
  1565                           tblptrl	equ	0xFF6
  1566                           tablat	equ	0xFF5
  1567                           intcon	equ	0xFF2
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           postdec1	equ	0xFE5
  1571                           fsr1l	equ	0xFE1
  1572                           status	equ	0xFD8
  1573                           
  1574 ;; *************** function _sendData *****************
  1575 ;; Defined at:
  1576 ;;		line 53 in file "FastTransfer.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  whereToSend     1    wreg     unsigned char 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  whereToSend     1    1[BANK0 ] unsigned char 
  1581 ;;  i               2    3[BANK0 ] int 
  1582 ;;  CS              1    2[BANK0 ] unsigned char 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;		None               void
  1585 ;; Registers used:
  1586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1592 ;;      Params:         0       0       0       0       0       0       0
  1593 ;;      Locals:         0       4       0       0       0       0       0
  1594 ;;      Temps:          0       1       0       0       0       0       0
  1595 ;;      Totals:         0       5       0       0       0       0       0
  1596 ;;Total ram usage:        5 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    6
  1599 ;; This function calls:
  1600 ;;		_CRC8
  1601 ;;		_FastTransfer_buffer_flush
  1602 ;;		_crcBufS_put
  1603 ;; This function is called by:
  1604 ;;		_respondECU
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           	psect	text3
  1609  000C26                     __ptext3:
  1610                           	opt stack 0
  1611  000C26                     _sendData:
  1612                           	opt stack 22
  1613                           
  1614                           ;incstack = 0
  1615                           ;sendData@whereToSend stored from wreg
  1616  000C26  0100               	movlb	0	; () banked
  1617  000C28  6FD1               	movwf	sendData@whereToSend& (0+255),b
  1618                           
  1619                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1620  000C2A  C031  F01B         	movff	_sendStructAddress,CRC8@data
  1621  000C2E  C032  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1622  000C32  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1623  000C36  EC2E  F007         	call	_CRC8	;wreg free
  1624  000C3A  0100               	movlb	0	; () banked
  1625  000C3C  6FD2               	movwf	sendData@CS& (0+255),b
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;FastTransfer.c: 66: int i;
  1629                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1630  000C3E  0E00               	movlw	0
  1631  000C40  0100               	movlb	0	; () banked
  1632  000C42  6FD4               	movwf	(sendData@i+1)& (0+255),b
  1633  000C44  0E00               	movlw	0
  1634  000C46  6FD3               	movwf	sendData@i& (0+255),b
  1635  000C48  D003               	goto	l3115
  1636  000C4A                     l3113:
  1637                           
  1638                           ; BSR set to: 0
  1639  000C4A  0100               	movlb	0	; () banked
  1640  000C4C  4BD3               	infsnz	sendData@i& (0+255),f,b
  1641  000C4E  2BD4               	incf	(sendData@i+1)& (0+255),f,b
  1642  000C50                     l3115:
  1643                           
  1644                           ; BSR set to: 0
  1645  000C50  0101               	movlb	1	; () banked
  1646  000C52  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1647  000C54  0100               	movlb	0	; () banked
  1648  000C56  5DD3               	subwf	sendData@i& (0+255),w,b
  1649  000C58  0100               	movlb	0	; () banked
  1650  000C5A  51D4               	movf	(sendData@i+1)& (0+255),w,b
  1651  000C5C  0A80               	xorlw	128
  1652  000C5E  0100               	movlb	0	; () banked
  1653  000C60  6FD0               	movwf	??_sendData& (0+255),b
  1654  000C62  0101               	movlb	1	; () banked
  1655  000C64  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1656  000C66  0A80               	xorlw	128
  1657  000C68  0100               	movlb	0	; () banked
  1658  000C6A  59D0               	subwfb	??_sendData& (0+255),w,b
  1659  000C6C  A0D8               	btfss	status,0,c
  1660  000C6E  D7ED               	goto	l3113
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1664                           
  1665                           ; BSR set to: 0
  1666                           
  1667                           ;FastTransfer.c: 69: }
  1668                           ;FastTransfer.c: 72: serial_write(CS);
  1669  000C70  0EBF               	movlw	low _crc_buffer
  1670  000C72  6E1B               	movwf	crcBufS_put@_this,c
  1671  000C74  0E00               	movlw	high _crc_buffer
  1672  000C76  6E1C               	movwf	crcBufS_put@_this+1,c
  1673  000C78  C0D1  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1674  000C7C  C0D2  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1675  000C80  0E00               	movlw	0
  1676  000C82  6E1F               	movwf	crcBufS_put@status,c
  1677  000C84  EC62  F003         	call	_crcBufS_put	;wreg free
  1678                           
  1679                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1680  000C88  0E00               	movlw	low _ring_buffer
  1681  000C8A  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1682  000C8C  0E01               	movlw	high _ring_buffer
  1683  000C8E  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1684  000C90  0E00               	movlw	0
  1685  000C92  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1686  000C94  0E01               	movlw	1
  1687  000C96  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1688  000C98  EC85  F006         	call	_FastTransfer_buffer_flush	;wreg free
  1689  000C9C  0012               	return		;funcret
  1690  000C9E                     __end_of_sendData:
  1691                           	opt stack 0
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           intcon	equ	0xFF2
  1697                           postinc0	equ	0xFEE
  1698                           wreg	equ	0xFE8
  1699                           postdec1	equ	0xFE5
  1700                           fsr1l	equ	0xFE1
  1701                           status	equ	0xFD8
  1702                           
  1703 ;; *************** function _crcBufS_put *****************
  1704 ;; Defined at:
  1705 ;;		line 321 in file "FastTransfer.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1708 ;;		 -> crc_buffer(17), 
  1709 ;;  address         1   28[COMRAM] unsigned char 
  1710 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1711 ;;  status          1   30[COMRAM] unsigned char 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;		None
  1714 ;; Return value:  Size  Location     Type
  1715 ;;		None               void
  1716 ;; Registers used:
  1717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1718 ;; Tracked objects:
  1719 ;;		On entry : 0/0
  1720 ;;		On exit  : 0/0
  1721 ;;		Unchanged: 0/0
  1722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1723 ;;      Params:         5       0       0       0       0       0       0
  1724 ;;      Locals:         0       0       0       0       0       0       0
  1725 ;;      Temps:          2       0       0       0       0       0       0
  1726 ;;      Totals:         7       0       0       0       0       0       0
  1727 ;;Total ram usage:        7 bytes
  1728 ;; Hardware stack levels used:    1
  1729 ;; Hardware stack levels required when called:    4
  1730 ;; This function calls:
  1731 ;;		Nothing
  1732 ;; This function is called by:
  1733 ;;		_sendData
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text4
  1738  0006C4                     __ptext4:
  1739                           	opt stack 0
  1740  0006C4                     _crcBufS_put:
  1741                           	opt stack 23
  1742                           
  1743                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1744                           
  1745                           ;incstack = 0
  1746  0006C4  EE20 F00F          	lfsr	2,15
  1747  0006C8  501B               	movf	crcBufS_put@_this,w,c
  1748  0006CA  26D9               	addwf	fsr2l,f,c
  1749  0006CC  501C               	movf	crcBufS_put@_this+1,w,c
  1750  0006CE  22DA               	addwfc	fsr2h,f,c
  1751  0006D0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1752  0006D4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1753  0006D8  5020               	movf	??_crcBufS_put,w,c
  1754  0006DA  241B               	addwf	crcBufS_put@_this,w,c
  1755  0006DC  6ED9               	movwf	fsr2l,c
  1756  0006DE  5021               	movf	??_crcBufS_put+1,w,c
  1757  0006E0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1758  0006E2  6EDA               	movwf	fsr2h,c
  1759  0006E4  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1760                           
  1761                           ;FastTransfer.c: 323: _this->head++;
  1762  0006E8  EE20 F00F          	lfsr	2,15
  1763  0006EC  501B               	movf	crcBufS_put@_this,w,c
  1764  0006EE  26D9               	addwf	fsr2l,f,c
  1765  0006F0  501C               	movf	crcBufS_put@_this+1,w,c
  1766  0006F2  22DA               	addwfc	fsr2h,f,c
  1767  0006F4  2ADE               	incf	postinc2,f,c
  1768  0006F6  0E00               	movlw	0
  1769  0006F8  22DD               	addwfc	postdec2,f,c
  1770                           
  1771                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1772  0006FA  EE20 F00F          	lfsr	2,15
  1773  0006FE  501B               	movf	crcBufS_put@_this,w,c
  1774  000700  26D9               	addwf	fsr2l,f,c
  1775  000702  501C               	movf	crcBufS_put@_this+1,w,c
  1776  000704  22DA               	addwfc	fsr2h,f,c
  1777  000706  CFDE F020          	movff	postinc2,??_crcBufS_put
  1778  00070A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1779  00070E  5020               	movf	??_crcBufS_put,w,c
  1780  000710  241B               	addwf	crcBufS_put@_this,w,c
  1781  000712  6ED9               	movwf	fsr2l,c
  1782  000714  5021               	movf	??_crcBufS_put+1,w,c
  1783  000716  201C               	addwfc	crcBufS_put@_this+1,w,c
  1784  000718  6EDA               	movwf	fsr2h,c
  1785  00071A  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1786                           
  1787                           ;FastTransfer.c: 325: _this->head++;
  1788  00071E  EE20 F00F          	lfsr	2,15
  1789  000722  501B               	movf	crcBufS_put@_this,w,c
  1790  000724  26D9               	addwf	fsr2l,f,c
  1791  000726  501C               	movf	crcBufS_put@_this+1,w,c
  1792  000728  22DA               	addwfc	fsr2h,f,c
  1793  00072A  2ADE               	incf	postinc2,f,c
  1794  00072C  0E00               	movlw	0
  1795  00072E  22DD               	addwfc	postdec2,f,c
  1796                           
  1797                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1798  000730  EE20 F00F          	lfsr	2,15
  1799  000734  501B               	movf	crcBufS_put@_this,w,c
  1800  000736  26D9               	addwf	fsr2l,f,c
  1801  000738  501C               	movf	crcBufS_put@_this+1,w,c
  1802  00073A  22DA               	addwfc	fsr2h,f,c
  1803  00073C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1804  000740  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1805  000744  5020               	movf	??_crcBufS_put,w,c
  1806  000746  241B               	addwf	crcBufS_put@_this,w,c
  1807  000748  6ED9               	movwf	fsr2l,c
  1808  00074A  5021               	movf	??_crcBufS_put+1,w,c
  1809  00074C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1810  00074E  6EDA               	movwf	fsr2h,c
  1811  000750  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1812                           
  1813                           ;FastTransfer.c: 327: _this->head++;
  1814  000754  EE20 F00F          	lfsr	2,15
  1815  000758  501B               	movf	crcBufS_put@_this,w,c
  1816  00075A  26D9               	addwf	fsr2l,f,c
  1817  00075C  501C               	movf	crcBufS_put@_this+1,w,c
  1818  00075E  22DA               	addwfc	fsr2h,f,c
  1819  000760  2ADE               	incf	postinc2,f,c
  1820  000762  0E00               	movlw	0
  1821  000764  22DD               	addwfc	postdec2,f,c
  1822                           
  1823                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1824  000766  EE20 F00F          	lfsr	2,15
  1825  00076A  501B               	movf	crcBufS_put@_this,w,c
  1826  00076C  26D9               	addwf	fsr2l,f,c
  1827  00076E  501C               	movf	crcBufS_put@_this+1,w,c
  1828  000770  22DA               	addwfc	fsr2h,f,c
  1829  000772  0E01               	movlw	1
  1830  000774  BEDB               	btfsc	plusw2,7,c
  1831  000776  0012               	return	
  1832  000778  0E01               	movlw	1
  1833  00077A  50DB               	movf	plusw2,w,c
  1834  00077C  E104               	bnz	u1970
  1835  00077E  0E0F               	movlw	15
  1836  000780  5CDE               	subwf	postinc2,w,c
  1837  000782  A0D8               	btfss	status,0,c
  1838  000784  0012               	return	
  1839  000786                     u1970:
  1840                           
  1841                           ;FastTransfer.c: 329: _this->head = 0;
  1842  000786  EE20 F00F          	lfsr	2,15
  1843  00078A  501B               	movf	crcBufS_put@_this,w,c
  1844  00078C  26D9               	addwf	fsr2l,f,c
  1845  00078E  501C               	movf	crcBufS_put@_this+1,w,c
  1846  000790  22DA               	addwfc	fsr2h,f,c
  1847  000792  0E00               	movlw	0
  1848  000794  6EDE               	movwf	postinc2,c
  1849  000796  0E00               	movlw	0
  1850  000798  6EDD               	movwf	postdec2,c
  1851  00079A  0012               	return	
  1852  00079C                     __end_of_crcBufS_put:
  1853                           	opt stack 0
  1854                           tblptru	equ	0xFF8
  1855                           tblptrh	equ	0xFF7
  1856                           tblptrl	equ	0xFF6
  1857                           tablat	equ	0xFF5
  1858                           intcon	equ	0xFF2
  1859                           postinc0	equ	0xFEE
  1860                           wreg	equ	0xFE8
  1861                           postdec1	equ	0xFE5
  1862                           fsr1l	equ	0xFE1
  1863                           indf2	equ	0xFDF
  1864                           postinc2	equ	0xFDE
  1865                           postdec2	equ	0xFDD
  1866                           plusw2	equ	0xFDB
  1867                           fsr2h	equ	0xFDA
  1868                           fsr2l	equ	0xFD9
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _FastTransfer_buffer_flush *****************
  1872 ;; Defined at:
  1873 ;;		line 261 in file "FastTransfer.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1876 ;;		 -> ring_buffer(206), 
  1877 ;;  clearBuffer     2   36[COMRAM] const int 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;		None               void
  1882 ;; Registers used:
  1883 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1889 ;;      Params:         4       0       0       0       0       0       0
  1890 ;;      Locals:         0       0       0       0       0       0       0
  1891 ;;      Temps:          0       0       0       0       0       0       0
  1892 ;;      Totals:         4       0       0       0       0       0       0
  1893 ;;Total ram usage:        4 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    5
  1896 ;; This function calls:
  1897 ;;		_memset
  1898 ;; This function is called by:
  1899 ;;		_sendData
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902                           
  1903                           	psect	text5
  1904  000D0A                     __ptext5:
  1905                           	opt stack 0
  1906  000D0A                     _FastTransfer_buffer_flush:
  1907                           	opt stack 22
  1908                           
  1909                           ;FastTransfer.c: 262: _this->count = 0;
  1910                           
  1911                           ;incstack = 0
  1912  000D0A  EE20 F0CC          	lfsr	2,204
  1913  000D0E  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1914  000D10  26D9               	addwf	fsr2l,f,c
  1915  000D12  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1916  000D14  22DA               	addwfc	fsr2h,f,c
  1917  000D16  0E00               	movlw	0
  1918  000D18  6EDE               	movwf	postinc2,c
  1919  000D1A  0E00               	movlw	0
  1920  000D1C  6EDD               	movwf	postdec2,c
  1921                           
  1922                           ;FastTransfer.c: 263: _this->head = 0;
  1923  000D1E  EE20 F0C8          	lfsr	2,200
  1924  000D22  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1925  000D24  26D9               	addwf	fsr2l,f,c
  1926  000D26  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1927  000D28  22DA               	addwfc	fsr2h,f,c
  1928  000D2A  0E00               	movlw	0
  1929  000D2C  6EDE               	movwf	postinc2,c
  1930  000D2E  0E00               	movlw	0
  1931  000D30  6EDD               	movwf	postdec2,c
  1932                           
  1933                           ;FastTransfer.c: 264: _this->tail = 0;
  1934  000D32  EE20 F0CA          	lfsr	2,202
  1935  000D36  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1936  000D38  26D9               	addwf	fsr2l,f,c
  1937  000D3A  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1938  000D3C  22DA               	addwfc	fsr2h,f,c
  1939  000D3E  0E00               	movlw	0
  1940  000D40  6EDE               	movwf	postinc2,c
  1941  000D42  0E00               	movlw	0
  1942  000D44  6EDD               	movwf	postdec2,c
  1943                           
  1944                           ;FastTransfer.c: 265: if (clearBuffer) {
  1945  000D46  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1946  000D48  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1947  000D4A  B4D8               	btfsc	status,2,c
  1948  000D4C  0012               	return	
  1949                           
  1950                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1951  000D4E  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1952  000D52  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1953  000D56  0E00               	movlw	0
  1954  000D58  6E1E               	movwf	memset@c+1,c
  1955  000D5A  0E00               	movlw	0
  1956  000D5C  6E1D               	movwf	memset@c,c
  1957  000D5E  0E00               	movlw	0
  1958  000D60  6E20               	movwf	memset@n+1,c
  1959  000D62  0EC8               	movlw	200
  1960  000D64  6E1F               	movwf	memset@n,c
  1961  000D66  EC0A  F008         	call	_memset	;wreg free
  1962  000D6A  0012               	return	
  1963  000D6C                     __end_of_FastTransfer_buffer_flush:
  1964                           	opt stack 0
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           intcon	equ	0xFF2
  1970                           postinc0	equ	0xFEE
  1971                           wreg	equ	0xFE8
  1972                           postdec1	equ	0xFE5
  1973                           fsr1l	equ	0xFE1
  1974                           indf2	equ	0xFDF
  1975                           postinc2	equ	0xFDE
  1976                           postdec2	equ	0xFDD
  1977                           plusw2	equ	0xFDB
  1978                           fsr2h	equ	0xFDA
  1979                           fsr2l	equ	0xFD9
  1980                           status	equ	0xFD8
  1981                           
  1982 ;; *************** function _memset *****************
  1983 ;; Defined at:
  1984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\memset.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  p1              2   26[COMRAM] PTR void 
  1987 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1988 ;;  c               2   28[COMRAM] int 
  1989 ;;  n               2   30[COMRAM] unsigned int 
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  p               2   32[COMRAM] PTR unsigned char 
  1992 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  2   26[COMRAM] PTR void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2002 ;;      Params:         6       0       0       0       0       0       0
  2003 ;;      Locals:         2       0       0       0       0       0       0
  2004 ;;      Temps:          0       0       0       0       0       0       0
  2005 ;;      Totals:         8       0       0       0       0       0       0
  2006 ;;Total ram usage:        8 bytes
  2007 ;; Hardware stack levels used:    1
  2008 ;; Hardware stack levels required when called:    4
  2009 ;; This function calls:
  2010 ;;		Nothing
  2011 ;; This function is called by:
  2012 ;;		_FastTransfer_buffer_flush
  2013 ;;		_UART_buff_init
  2014 ;;		_UART_buff_flush
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           	psect	text6
  2019  001014                     __ptext6:
  2020                           	opt stack 0
  2021  001014                     _memset:
  2022                           	opt stack 22
  2023                           
  2024                           ;incstack = 0
  2025  001014  C01B  F021         	movff	memset@p1,memset@p
  2026  001018  C01C  F022         	movff	memset@p1+1,memset@p+1
  2027  00101C  D008               	goto	l3005
  2028  00101E                     l3001:
  2029  00101E  C021  FFD9         	movff	memset@p,fsr2l
  2030  001022  C022  FFDA         	movff	memset@p+1,fsr2h
  2031  001026  C01D  FFDF         	movff	memset@c,indf2
  2032  00102A  4A21               	infsnz	memset@p,f,c
  2033  00102C  2A22               	incf	memset@p+1,f,c
  2034  00102E                     l3005:
  2035  00102E  061F               	decf	memset@n,f,c
  2036  001030  A0D8               	btfss	status,0,c
  2037  001032  0620               	decf	memset@n+1,f,c
  2038  001034  281F               	incf	memset@n,w,c
  2039  001036  E1F3               	bnz	l3001
  2040  001038  2820               	incf	memset@n+1,w,c
  2041  00103A  B4D8               	btfsc	status,2,c
  2042  00103C  0012               	return	
  2043  00103E  D7EF               	goto	l3001
  2044  001040                     __end_of_memset:
  2045                           	opt stack 0
  2046                           tblptru	equ	0xFF8
  2047                           tblptrh	equ	0xFF7
  2048                           tblptrl	equ	0xFF6
  2049                           tablat	equ	0xFF5
  2050                           intcon	equ	0xFF2
  2051                           postinc0	equ	0xFEE
  2052                           wreg	equ	0xFE8
  2053                           postdec1	equ	0xFE5
  2054                           fsr1l	equ	0xFE1
  2055                           indf2	equ	0xFDF
  2056                           postinc2	equ	0xFDE
  2057                           postdec2	equ	0xFDD
  2058                           plusw2	equ	0xFDB
  2059                           fsr2h	equ	0xFDA
  2060                           fsr2l	equ	0xFD9
  2061                           status	equ	0xFD8
  2062                           
  2063 ;; *************** function _ToSend *****************
  2064 ;; Defined at:
  2065 ;;		line 216 in file "FastTransfer.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  where           1    wreg     unsigned char 
  2068 ;;  what            2    2[BANK0 ] unsigned int 
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  where           1   37[COMRAM] unsigned char 
  2071 ;; Return value:  Size  Location     Type
  2072 ;;		None               void
  2073 ;; Registers used:
  2074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2075 ;; Tracked objects:
  2076 ;;		On entry : 0/0
  2077 ;;		On exit  : 0/0
  2078 ;;		Unchanged: 0/0
  2079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2080 ;;      Params:         0       2       0       0       0       0       0
  2081 ;;      Locals:         1       0       0       0       0       0       0
  2082 ;;      Temps:          0       0       0       0       0       0       0
  2083 ;;      Totals:         1       2       0       0       0       0       0
  2084 ;;Total ram usage:        3 bytes
  2085 ;; Hardware stack levels used:    1
  2086 ;; Hardware stack levels required when called:    6
  2087 ;; This function calls:
  2088 ;;		_FastTransfer_buffer_put
  2089 ;; This function is called by:
  2090 ;;		_respondECU
  2091 ;; This function uses a non-reentrant model
  2092 ;;
  2093                           
  2094                           	psect	text7
  2095  001176                     __ptext7:
  2096                           	opt stack 0
  2097  001176                     _ToSend:
  2098                           	opt stack 22
  2099                           
  2100                           ;incstack = 0
  2101                           ;ToSend@where stored from wreg
  2102  001176  6E26               	movwf	ToSend@where,c
  2103                           
  2104                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2105  001178  0E00               	movlw	low _ring_buffer
  2106  00117A  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2107  00117C  0E01               	movlw	high _ring_buffer
  2108  00117E  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2109  001180  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2110  001184  C0D2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2111  001188  C0D3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2112  00118C  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2113  001190  0012               	return		;funcret
  2114  001192                     __end_of_ToSend:
  2115                           	opt stack 0
  2116                           tblptru	equ	0xFF8
  2117                           tblptrh	equ	0xFF7
  2118                           tblptrl	equ	0xFF6
  2119                           tablat	equ	0xFF5
  2120                           intcon	equ	0xFF2
  2121                           postinc0	equ	0xFEE
  2122                           wreg	equ	0xFE8
  2123                           postdec1	equ	0xFE5
  2124                           fsr1l	equ	0xFE1
  2125                           indf2	equ	0xFDF
  2126                           postinc2	equ	0xFDE
  2127                           postdec2	equ	0xFDD
  2128                           plusw2	equ	0xFDB
  2129                           fsr2h	equ	0xFDA
  2130                           fsr2l	equ	0xFD9
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _FastTransfer_buffer_put *****************
  2134 ;; Defined at:
  2135 ;;		line 223 in file "FastTransfer.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2138 ;;		 -> ring_buffer(206), 
  2139 ;;  towhere         1   34[COMRAM] unsigned char 
  2140 ;;  towhat          2   35[COMRAM] unsigned int 
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;		None               void
  2145 ;; Registers used:
  2146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2152 ;;      Params:         5       0       0       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0       0       0
  2154 ;;      Temps:          0       2       0       0       0       0       0
  2155 ;;      Totals:         5       2       0       0       0       0       0
  2156 ;;Total ram usage:        7 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; Hardware stack levels required when called:    5
  2159 ;; This function calls:
  2160 ;;		_FastTransfer_buffer_modulo_inc
  2161 ;; This function is called by:
  2162 ;;		_ToSend
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166                           	psect	text8
  2167  000354                     __ptext8:
  2168                           	opt stack 0
  2169  000354                     _FastTransfer_buffer_put:
  2170                           	opt stack 22
  2171                           
  2172                           ;FastTransfer.c: 225: group.integer = towhat;
  2173                           
  2174                           ;incstack = 0
  2175  000354  C024  F02D         	movff	FastTransfer_buffer_put@towhat,_group
  2176  000358  C025  F02E         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2177                           
  2178                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2179  00035C  EE20 F0CC          	lfsr	2,204
  2180  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2181  000362  26D9               	addwf	fsr2l,f,c
  2182  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2183  000366  22DA               	addwfc	fsr2h,f,c
  2184  000368  0E01               	movlw	1
  2185  00036A  BEDB               	btfsc	plusw2,7,c
  2186  00036C  D007               	goto	l3047
  2187  00036E  0E01               	movlw	1
  2188  000370  50DB               	movf	plusw2,w,c
  2189  000372  E103               	bnz	u1991
  2190  000374  0EC5               	movlw	197
  2191  000376  5CDE               	subwf	postinc2,w,c
  2192  000378  B0D8               	btfsc	status,0,c
  2193  00037A                     u1991:
  2194  00037A  0012               	return	
  2195  00037C                     l3047:
  2196                           
  2197                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2198  00037C  EE20 F0C8          	lfsr	2,200
  2199  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2200  000382  26D9               	addwf	fsr2l,f,c
  2201  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2202  000386  22DA               	addwfc	fsr2h,f,c
  2203  000388  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  2204  00038C  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2205  000390  0100               	movlb	0	; () banked
  2206  000392  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2207  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2208  000396  6ED9               	movwf	fsr2l,c
  2209  000398  0100               	movlb	0	; () banked
  2210  00039A  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2211  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2212  00039E  6EDA               	movwf	fsr2h,c
  2213  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2217  0003A4  EE20 F0C8          	lfsr	2,200
  2218  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2219  0003AA  26D9               	addwf	fsr2l,f,c
  2220  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2221  0003AE  22DA               	addwfc	fsr2h,f,c
  2222  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2223  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2224  0003B8  0E00               	movlw	0
  2225  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2226  0003BC  0EC8               	movlw	200
  2227  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2228  0003C0  EC4C  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2229  0003C4  EE20 F0C8          	lfsr	2,200
  2230  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2231  0003CA  26D9               	addwf	fsr2l,f,c
  2232  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2233  0003CE  22DA               	addwfc	fsr2h,f,c
  2234  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2235  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2236                           
  2237                           ;FastTransfer.c: 230: ++_this->count;
  2238  0003D8  EE20 F0CC          	lfsr	2,204
  2239  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2240  0003DE  26D9               	addwf	fsr2l,f,c
  2241  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2242  0003E2  22DA               	addwfc	fsr2h,f,c
  2243  0003E4  2ADE               	incf	postinc2,f,c
  2244  0003E6  0E00               	movlw	0
  2245  0003E8  22DD               	addwfc	postdec2,f,c
  2246                           
  2247                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2248  0003EA  EE20 F0C8          	lfsr	2,200
  2249  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2250  0003F0  26D9               	addwf	fsr2l,f,c
  2251  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2252  0003F4  22DA               	addwfc	fsr2h,f,c
  2253  0003F6  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  2254  0003FA  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2255  0003FE  0100               	movlb	0	; () banked
  2256  000400  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2257  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2258  000404  6ED9               	movwf	fsr2l,c
  2259  000406  0100               	movlb	0	; () banked
  2260  000408  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2261  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2262  00040C  6EDA               	movwf	fsr2h,c
  2263  00040E  C02D  FFDF         	movff	_group,indf2
  2264                           
  2265                           ; BSR set to: 0
  2266                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2267  000412  EE20 F0C8          	lfsr	2,200
  2268  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2269  000418  26D9               	addwf	fsr2l,f,c
  2270  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2271  00041C  22DA               	addwfc	fsr2h,f,c
  2272  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2273  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2274  000426  0E00               	movlw	0
  2275  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2276  00042A  0EC8               	movlw	200
  2277  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2278  00042E  EC4C  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2279  000432  EE20 F0C8          	lfsr	2,200
  2280  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2281  000438  26D9               	addwf	fsr2l,f,c
  2282  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2283  00043C  22DA               	addwfc	fsr2h,f,c
  2284  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2285  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2286                           
  2287                           ;FastTransfer.c: 233: ++_this->count;
  2288  000446  EE20 F0CC          	lfsr	2,204
  2289  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2290  00044C  26D9               	addwf	fsr2l,f,c
  2291  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2292  000450  22DA               	addwfc	fsr2h,f,c
  2293  000452  2ADE               	incf	postinc2,f,c
  2294  000454  0E00               	movlw	0
  2295  000456  22DD               	addwfc	postdec2,f,c
  2296                           
  2297                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2298  000458  EE20 F0C8          	lfsr	2,200
  2299  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2300  00045E  26D9               	addwf	fsr2l,f,c
  2301  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2302  000462  22DA               	addwfc	fsr2h,f,c
  2303  000464  CFDE F0D0          	movff	postinc2,??_FastTransfer_buffer_put
  2304  000468  CFDD F0D1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2305  00046C  0100               	movlb	0	; () banked
  2306  00046E  51D0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2307  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2308  000472  6ED9               	movwf	fsr2l,c
  2309  000474  0100               	movlb	0	; () banked
  2310  000476  51D1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2311  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2312  00047A  6EDA               	movwf	fsr2h,c
  2313  00047C  C02E  FFDF         	movff	_group+1,indf2
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2317  000480  EE20 F0C8          	lfsr	2,200
  2318  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2319  000486  26D9               	addwf	fsr2l,f,c
  2320  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2321  00048A  22DA               	addwfc	fsr2h,f,c
  2322  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2323  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2324  000494  0E00               	movlw	0
  2325  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2326  000498  0EC8               	movlw	200
  2327  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2328  00049C  EC4C  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2329  0004A0  EE20 F0C8          	lfsr	2,200
  2330  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2331  0004A6  26D9               	addwf	fsr2l,f,c
  2332  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2333  0004AA  22DA               	addwfc	fsr2h,f,c
  2334  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2335  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2336                           
  2337                           ;FastTransfer.c: 236: ++_this->count;
  2338  0004B4  EE20 F0CC          	lfsr	2,204
  2339  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2340  0004BA  26D9               	addwf	fsr2l,f,c
  2341  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2342  0004BE  22DA               	addwfc	fsr2h,f,c
  2343  0004C0  2ADE               	incf	postinc2,f,c
  2344  0004C2  0E00               	movlw	0
  2345  0004C4  22DD               	addwfc	postdec2,f,c
  2346  0004C6  0012               	return	
  2347  0004C8                     __end_of_FastTransfer_buffer_put:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           intcon	equ	0xFF2
  2354                           postinc0	equ	0xFEE
  2355                           wreg	equ	0xFE8
  2356                           postdec1	equ	0xFE5
  2357                           fsr1l	equ	0xFE1
  2358                           indf2	equ	0xFDF
  2359                           postinc2	equ	0xFDE
  2360                           postdec2	equ	0xFDD
  2361                           plusw2	equ	0xFDB
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2367 ;; Defined at:
  2368 ;;		line 273 in file "FastTransfer.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;  value           2   26[COMRAM] const unsigned int 
  2371 ;;  modulus         2   28[COMRAM] const unsigned int 
  2372 ;; Auto vars:     Size  Location     Type
  2373 ;;  my_value        2   30[COMRAM] unsigned int 
  2374 ;; Return value:  Size  Location     Type
  2375 ;;                  2   26[COMRAM] unsigned int 
  2376 ;; Registers used:
  2377 ;;		wreg, status,2, status,0
  2378 ;; Tracked objects:
  2379 ;;		On entry : 0/0
  2380 ;;		On exit  : 0/0
  2381 ;;		Unchanged: 0/0
  2382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2383 ;;      Params:         4       0       0       0       0       0       0
  2384 ;;      Locals:         2       0       0       0       0       0       0
  2385 ;;      Temps:          0       0       0       0       0       0       0
  2386 ;;      Totals:         6       0       0       0       0       0       0
  2387 ;;Total ram usage:        6 bytes
  2388 ;; Hardware stack levels used:    1
  2389 ;; Hardware stack levels required when called:    4
  2390 ;; This function calls:
  2391 ;;		Nothing
  2392 ;; This function is called by:
  2393 ;;		_FastTransfer_buffer_put
  2394 ;;		_FastTransfer_buffer_get
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text9
  2399  001098                     __ptext9:
  2400                           	opt stack 0
  2401  001098                     _FastTransfer_buffer_modulo_inc:
  2402                           	opt stack 22
  2403                           
  2404                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2405                           
  2406                           ;incstack = 0
  2407  001098  0E01               	movlw	1
  2408  00109A  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2409  00109C  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2410  00109E  0E00               	movlw	0
  2411  0010A0  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2412  0010A2  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2413                           
  2414                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2415  0010A4  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2416  0010A6  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2417  0010A8  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2418  0010AA  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2419  0010AC  A0D8               	btfss	status,0,c
  2420  0010AE  D004               	goto	l2251
  2421                           
  2422                           ;FastTransfer.c: 276: my_value = 0;
  2423  0010B0  0E00               	movlw	0
  2424  0010B2  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2425  0010B4  0E00               	movlw	0
  2426  0010B6  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2427  0010B8                     l2251:
  2428                           
  2429                           ;FastTransfer.c: 277: }
  2430                           ;FastTransfer.c: 278: return (my_value);
  2431  0010B8  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2432  0010BC  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2433  0010C0  0012               	return	
  2434  0010C2                     __end_of_FastTransfer_buffer_modulo_inc:
  2435                           	opt stack 0
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           intcon	equ	0xFF2
  2441                           postinc0	equ	0xFEE
  2442                           wreg	equ	0xFE8
  2443                           postdec1	equ	0xFE5
  2444                           fsr1l	equ	0xFE1
  2445                           indf2	equ	0xFDF
  2446                           postinc2	equ	0xFDE
  2447                           postdec2	equ	0xFDD
  2448                           plusw2	equ	0xFDB
  2449                           fsr2h	equ	0xFDA
  2450                           fsr2l	equ	0xFD9
  2451                           status	equ	0xFD8
  2452                           
  2453 ;; *************** function _receiveData *****************
  2454 ;; Defined at:
  2455 ;;		line 82 in file "FastTransfer.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;		None
  2458 ;; Auto vars:     Size  Location     Type
  2459 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2460 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2461 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2462 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2463 ;;  u               2   21[BANK0 ] int 
  2464 ;;  r               2   23[BANK0 ] int 
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      unsigned char 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2474 ;;      Params:         0       0       0       0       0       0       0
  2475 ;;      Locals:         0      12       0       0       0       0       0
  2476 ;;      Temps:          0       6       0       0       0       0       0
  2477 ;;      Totals:         0      18       0       0       0       0       0
  2478 ;;Total ram usage:       18 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    6
  2481 ;; This function calls:
  2482 ;;		_CRC8
  2483 ;;		_CRCcheck
  2484 ;; This function is called by:
  2485 ;;		_updateComms
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text10
  2490  0000B0                     __ptext10:
  2491                           	opt stack 0
  2492  0000B0                     _receiveData:
  2493                           	opt stack 23
  2494                           
  2495                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2496                           
  2497                           ;incstack = 0
  2498  0000B0  D020               	goto	l3227
  2499  0000B2                     l3217:
  2500                           
  2501                           ; BSR set to: 0
  2502  0000B2  0100               	movlb	0	; () banked
  2503  0000B4  4BE5               	infsnz	receiveData@u& (0+255),f,b
  2504  0000B6  2BE6               	incf	(receiveData@u+1)& (0+255),f,b
  2505                           
  2506                           ; BSR set to: 0
  2507                           
  2508                           ; BSR set to: 0
  2509  0000B8  5040               	movf	_rx_len,w,c
  2510  0000BA  0100               	movlb	0	; () banked
  2511  0000BC  6FD7               	movwf	??_receiveData& (0+255),b
  2512  0000BE  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  2513  0000C0  0E01               	movlw	1
  2514  0000C2  0100               	movlb	0	; () banked
  2515  0000C4  27D7               	addwf	??_receiveData& (0+255),f,b
  2516  0000C6  0E00               	movlw	0
  2517  0000C8  23D8               	addwfc	(??_receiveData+1)& (0+255),f,b
  2518  0000CA  0100               	movlb	0	; () banked
  2519  0000CC  51E5               	movf	receiveData@u& (0+255),w,b
  2520  0000CE  0100               	movlb	0	; () banked
  2521  0000D0  5DD7               	subwf	??_receiveData& (0+255),w,b
  2522  0000D2  0100               	movlb	0	; () banked
  2523  0000D4  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2524  0000D6  0A80               	xorlw	128
  2525  0000D8  0100               	movlb	0	; () banked
  2526  0000DA  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2527  0000DC  0100               	movlb	0	; () banked
  2528  0000DE  51E6               	movf	(receiveData@u+1)& (0+255),w,b
  2529  0000E0  0A80               	xorlw	128
  2530  0000E2  0100               	movlb	0	; () banked
  2531  0000E4  59D9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2532  0000E6  B0D8               	btfsc	status,0,c
  2533  0000E8  D7E4               	goto	l3217
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;FastTransfer.c: 109: }
  2537                           ;FastTransfer.c: 110: rx_len = 0;
  2538                           
  2539                           ; BSR set to: 0
  2540  0000EA  0E00               	movlw	0
  2541  0000EC  6E40               	movwf	_rx_len,c
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;FastTransfer.c: 111: return 0;
  2545  0000EE  0E00               	movlw	0
  2546                           
  2547                           ; BSR set to: 0
  2548  0000F0  0012               	return	
  2549  0000F2                     l3227:
  2550                           
  2551                           ;FastTransfer.c: 112: }
  2552                           ;FastTransfer.c: 114: }
  2553                           ;FastTransfer.c: 115: }
  2554                           ;FastTransfer.c: 116: }
  2555                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2556  0000F2  5040               	movf	_rx_len,w,c
  2557  0000F4  B4D8               	btfsc	status,2,c
  2558  0000F6  D12C               	goto	l3309
  2559                           
  2560                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2561  0000F8  503F               	movf	_rx_array_inx,w,c
  2562  0000FA  B4D8               	btfsc	status,2,c
  2563  0000FC                     l370:
  2564  0000FC  D7FF               	goto	l370
  2565                           
  2566                           ;FastTransfer.c: 135: }
  2567                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2568                           
  2569                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2570                           
  2571                           ;FastTransfer.c: 129: }
  2572                           ;FastTransfer.c: 130: }
  2573                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2574                           
  2575                           ;FastTransfer.c: 128: return 0;
  2576                           
  2577                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2578                           
  2579                           ;FastTransfer.c: 126: rx_len = 0;
  2580                           
  2581                           ;FastTransfer.c: 125: CRCcheck();
  2582                           
  2583                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2584  0000FE  5040               	movf	_rx_len,w,c
  2585  000100  0100               	movlb	0	; () banked
  2586  000102  6FD7               	movwf	??_receiveData& (0+255),b
  2587  000104  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  2588  000106  0EFF               	movlw	255
  2589  000108  0100               	movlb	0	; () banked
  2590  00010A  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2591  00010C  0EFF               	movlw	255
  2592  00010E  0100               	movlb	0	; () banked
  2593  000110  6FDA               	movwf	(??_receiveData+3)& (0+255),b
  2594  000112  503F               	movf	_rx_array_inx,w,c
  2595  000114  0100               	movlb	0	; () banked
  2596  000116  6FDB               	movwf	(??_receiveData+4)& (0+255),b
  2597  000118  6BDC               	clrf	(??_receiveData+5)& (0+255),b
  2598  00011A  0100               	movlb	0	; () banked
  2599  00011C  51D9               	movf	(??_receiveData+2)& (0+255),w,b
  2600  00011E  0100               	movlb	0	; () banked
  2601  000120  27DB               	addwf	(??_receiveData+4)& (0+255),f,b
  2602  000122  0100               	movlb	0	; () banked
  2603  000124  51DA               	movf	(??_receiveData+3)& (0+255),w,b
  2604  000126  0100               	movlb	0	; () banked
  2605  000128  23DC               	addwfc	(??_receiveData+5)& (0+255),f,b
  2606  00012A  0100               	movlb	0	; () banked
  2607  00012C  51D7               	movf	??_receiveData& (0+255),w,b
  2608  00012E  0100               	movlb	0	; () banked
  2609  000130  19DB               	xorwf	(??_receiveData+4)& (0+255),w,b
  2610  000132  E105               	bnz	u2251
  2611  000134  0100               	movlb	0	; () banked
  2612  000136  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2613  000138  0100               	movlb	0	; () banked
  2614  00013A  19DC               	xorwf	(??_receiveData+5)& (0+255),w,b
  2615  00013C  A4D8               	btfss	status,2,c
  2616  00013E                     u2251:
  2617  00013E  D108               	goto	l3309
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2621  000140  0E00               	movlw	low _rx_buffer
  2622  000142  6E1B               	movwf	CRC8@data,c
  2623  000144  0E04               	movlw	high _rx_buffer
  2624  000146  6E1C               	movwf	CRC8@data+1,c
  2625  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2626  00014C  EC2E  F007         	call	_CRC8	;wreg free
  2627  000150  6E34               	movwf	_calc_CS,c
  2628                           
  2629                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2630  000152  0EFF               	movlw	255
  2631  000154  0100               	movlb	0	; () banked
  2632  000156  6FD7               	movwf	??_receiveData& (0+255),b
  2633  000158  0EFF               	movlw	255
  2634  00015A  0100               	movlb	0	; () banked
  2635  00015C  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2636  00015E  503F               	movf	_rx_array_inx,w,c
  2637  000160  0100               	movlb	0	; () banked
  2638  000162  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2639  000164  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2640  000166  0100               	movlb	0	; () banked
  2641  000168  51D7               	movf	??_receiveData& (0+255),w,b
  2642  00016A  0100               	movlb	0	; () banked
  2643  00016C  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2644  00016E  0100               	movlb	0	; () banked
  2645  000170  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2646  000172  0100               	movlb	0	; () banked
  2647  000174  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2648  000176  0E00               	movlw	low _rx_buffer
  2649  000178  0100               	movlb	0	; () banked
  2650  00017A  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2651  00017C  6ED9               	movwf	fsr2l,c
  2652  00017E  0E04               	movlw	high _rx_buffer
  2653  000180  0100               	movlb	0	; () banked
  2654  000182  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2655  000184  6EDA               	movwf	fsr2h,c
  2656  000186  5034               	movf	_calc_CS,w,c
  2657  000188  18DE               	xorwf	postinc2,w,c
  2658  00018A  A4D8               	btfss	status,2,c
  2659  00018C  D0A9               	goto	l3289
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;FastTransfer.c: 147: int r;
  2663                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2664  00018E  0E00               	movlw	0
  2665  000190  0100               	movlb	0	; () banked
  2666  000192  6FE8               	movwf	(receiveData@r+1)& (0+255),b
  2667  000194  0E00               	movlw	0
  2668  000196  6FE7               	movwf	receiveData@r& (0+255),b
  2669  000198  D05A               	goto	l3267
  2670  00019A                     l3257:
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2674  00019A  0E00               	movlw	low _rx_buffer
  2675  00019C  0100               	movlb	0	; () banked
  2676  00019E  25E7               	addwf	receiveData@r& (0+255),w,b
  2677  0001A0  6ED9               	movwf	fsr2l,c
  2678  0001A2  0E04               	movlw	high _rx_buffer
  2679  0001A4  0100               	movlb	0	; () banked
  2680  0001A6  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2681  0001A8  6EDA               	movwf	fsr2h,c
  2682  0001AA  503B               	movf	_maxDataAddress,w,c
  2683  0001AC  5CDE               	subwf	postinc2,w,c
  2684  0001AE  B0D8               	btfsc	status,0,c
  2685  0001B0  D041               	goto	l3263
  2686                           
  2687                           ; BSR set to: 0
  2688                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2689  0001B2  0E01               	movlw	1
  2690  0001B4  0100               	movlb	0	; () banked
  2691  0001B6  25E7               	addwf	receiveData@r& (0+255),w,b
  2692  0001B8  0100               	movlb	0	; () banked
  2693  0001BA  6FD7               	movwf	??_receiveData& (0+255),b
  2694  0001BC  0E00               	movlw	0
  2695  0001BE  0100               	movlb	0	; () banked
  2696  0001C0  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2697  0001C2  0100               	movlb	0	; () banked
  2698  0001C4  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2699  0001C6  0E00               	movlw	low _rx_buffer
  2700  0001C8  0100               	movlb	0	; () banked
  2701  0001CA  25D7               	addwf	??_receiveData& (0+255),w,b
  2702  0001CC  6ED9               	movwf	fsr2l,c
  2703  0001CE  0E04               	movlw	high _rx_buffer
  2704  0001D0  0100               	movlb	0	; () banked
  2705  0001D2  21D8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2706  0001D4  6EDA               	movwf	fsr2h,c
  2707  0001D6  50DF               	movf	indf2,w,c
  2708  0001D8  6E2D               	movwf	_group,c
  2709                           
  2710                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2711  0001DA  0E02               	movlw	2
  2712  0001DC  0100               	movlb	0	; () banked
  2713  0001DE  25E7               	addwf	receiveData@r& (0+255),w,b
  2714  0001E0  0100               	movlb	0	; () banked
  2715  0001E2  6FD7               	movwf	??_receiveData& (0+255),b
  2716  0001E4  0E00               	movlw	0
  2717  0001E6  0100               	movlb	0	; () banked
  2718  0001E8  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2719  0001EA  0100               	movlb	0	; () banked
  2720  0001EC  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2721  0001EE  0E00               	movlw	low _rx_buffer
  2722  0001F0  0100               	movlb	0	; () banked
  2723  0001F2  25D7               	addwf	??_receiveData& (0+255),w,b
  2724  0001F4  6ED9               	movwf	fsr2l,c
  2725  0001F6  0E04               	movlw	high _rx_buffer
  2726  0001F8  0100               	movlb	0	; () banked
  2727  0001FA  21D8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2728  0001FC  6EDA               	movwf	fsr2h,c
  2729  0001FE  50DF               	movf	indf2,w,c
  2730  000200  6E2E               	movwf	_group+1,c
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2734  000202  0E00               	movlw	low _rx_buffer
  2735  000204  0100               	movlb	0	; () banked
  2736  000206  25E7               	addwf	receiveData@r& (0+255),w,b
  2737  000208  6ED9               	movwf	fsr2l,c
  2738  00020A  0E04               	movlw	high _rx_buffer
  2739  00020C  0100               	movlb	0	; () banked
  2740  00020E  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2741  000210  6EDA               	movwf	fsr2h,c
  2742  000212  50DF               	movf	indf2,w,c
  2743  000214  0100               	movlb	0	; () banked
  2744  000216  6FD7               	movwf	??_receiveData& (0+255),b
  2745  000218  0100               	movlb	0	; () banked
  2746  00021A  51D7               	movf	??_receiveData& (0+255),w,b
  2747  00021C  0D02               	mullw	2
  2748  00021E  50F3               	movf	prodl,w,c
  2749  000220  242F               	addwf	_receiveArrayAddress,w,c
  2750  000222  6ED9               	movwf	fsr2l,c
  2751  000224  50F4               	movf	prodh,w,c
  2752  000226  2030               	addwfc	_receiveArrayAddress+1,w,c
  2753  000228  6EDA               	movwf	fsr2h,c
  2754  00022A  C02D  FFDE         	movff	_group,postinc2
  2755  00022E  C02E  FFDD         	movff	_group+1,postdec2
  2756                           
  2757                           ;FastTransfer.c: 153: } else {
  2758  000232  D003               	goto	l3265
  2759  000234                     l3263:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2763  000234  0100               	movlb	0	; () banked
  2764  000236  4BB5               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2765  000238  2BB6               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2766  00023A                     l3265:
  2767                           
  2768                           ; BSR set to: 0
  2769  00023A  0E03               	movlw	3
  2770  00023C  0100               	movlb	0	; () banked
  2771  00023E  25E7               	addwf	receiveData@r& (0+255),w,b
  2772  000240  0100               	movlb	0	; () banked
  2773  000242  6FE7               	movwf	receiveData@r& (0+255),b
  2774  000244  0E00               	movlw	0
  2775  000246  0100               	movlb	0	; () banked
  2776  000248  21E8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2777  00024A  0100               	movlb	0	; () banked
  2778  00024C  6FE8               	movwf	(receiveData@r+1)& (0+255),b
  2779  00024E                     l3267:
  2780                           
  2781                           ; BSR set to: 0
  2782  00024E  5040               	movf	_rx_len,w,c
  2783  000250  0100               	movlb	0	; () banked
  2784  000252  6FD7               	movwf	??_receiveData& (0+255),b
  2785  000254  6BD8               	clrf	(??_receiveData+1)& (0+255),b
  2786  000256  0100               	movlb	0	; () banked
  2787  000258  51D7               	movf	??_receiveData& (0+255),w,b
  2788  00025A  0100               	movlb	0	; () banked
  2789  00025C  5DE7               	subwf	receiveData@r& (0+255),w,b
  2790  00025E  0100               	movlb	0	; () banked
  2791  000260  51E8               	movf	(receiveData@r+1)& (0+255),w,b
  2792  000262  0A80               	xorlw	128
  2793  000264  0100               	movlb	0	; () banked
  2794  000266  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2795  000268  0100               	movlb	0	; () banked
  2796  00026A  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2797  00026C  0A80               	xorlw	128
  2798  00026E  0100               	movlb	0	; () banked
  2799  000270  59D9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2800  000272  A0D8               	btfss	status,0,c
  2801  000274  D792               	goto	l3257
  2802                           
  2803                           ; BSR set to: 0
  2804                           ;FastTransfer.c: 155: }
  2805                           ;FastTransfer.c: 156: }
  2806                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2807                           
  2808                           ; BSR set to: 0
  2809  000276  5033               	movf	_AKNAKsend,w,c
  2810  000278  B4D8               	btfsc	status,2,c
  2811  00027A  D02C               	goto	l3279
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;FastTransfer.c: 160: unsigned char holder[3];
  2815                           ;FastTransfer.c: 161: holder[0] = 255;
  2816  00027C  0100               	movlb	0	; () banked
  2817  00027E  69DF               	setf	receiveData@holder& (0+255),b
  2818                           
  2819                           ; BSR set to: 0
  2820                           ;FastTransfer.c: 162: holder[1] = 1;
  2821  000280  0E01               	movlw	1
  2822  000282  0100               	movlb	0	; () banked
  2823  000284  6FE0               	movwf	(receiveData@holder+1)& (0+255),b
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2827  000286  0EFF               	movlw	255
  2828  000288  0100               	movlb	0	; () banked
  2829  00028A  6FD7               	movwf	??_receiveData& (0+255),b
  2830  00028C  0EFF               	movlw	255
  2831  00028E  0100               	movlb	0	; () banked
  2832  000290  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2833  000292  503F               	movf	_rx_array_inx,w,c
  2834  000294  0100               	movlb	0	; () banked
  2835  000296  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2836  000298  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2837  00029A  0100               	movlb	0	; () banked
  2838  00029C  51D7               	movf	??_receiveData& (0+255),w,b
  2839  00029E  0100               	movlb	0	; () banked
  2840  0002A0  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2841  0002A2  0100               	movlb	0	; () banked
  2842  0002A4  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2843  0002A6  0100               	movlb	0	; () banked
  2844  0002A8  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2845  0002AA  0E00               	movlw	low _rx_buffer
  2846  0002AC  0100               	movlb	0	; () banked
  2847  0002AE  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2848  0002B0  6ED9               	movwf	fsr2l,c
  2849  0002B2  0E04               	movlw	high _rx_buffer
  2850  0002B4  0100               	movlb	0	; () banked
  2851  0002B6  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2852  0002B8  6EDA               	movwf	fsr2h,c
  2853  0002BA  50DF               	movf	indf2,w,c
  2854  0002BC  0100               	movlb	0	; () banked
  2855  0002BE  6FE1               	movwf	(receiveData@holder+2)& (0+255),b
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2859  0002C0  0EDF               	movlw	low receiveData@holder
  2860  0002C2  6E1B               	movwf	CRC8@data,c
  2861  0002C4  0E00               	movlw	high receiveData@holder
  2862  0002C6  6E1C               	movwf	CRC8@data+1,c
  2863  0002C8  0E03               	movlw	3
  2864  0002CA  6E1D               	movwf	CRC8@len,c
  2865  0002CC  EC2E  F007         	call	_CRC8	;wreg free
  2866  0002D0  0100               	movlb	0	; () banked
  2867  0002D2  6FDD               	movwf	receiveData@crcHolder& (0+255),b
  2868  0002D4                     l3279:
  2869                           
  2870                           ; BSR set to: 0
  2871                           ;FastTransfer.c: 174: }
  2872                           ;FastTransfer.c: 178: rx_len = 0;
  2873  0002D4  0E00               	movlw	0
  2874  0002D6  6E40               	movwf	_rx_len,c
  2875                           
  2876                           ; BSR set to: 0
  2877                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2878  0002D8  0E00               	movlw	0
  2879  0002DA  6E3F               	movwf	_rx_array_inx,c
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;FastTransfer.c: 180: return 1;
  2883  0002DC  0E01               	movlw	1
  2884                           
  2885                           ; BSR set to: 0
  2886  0002DE  0012               	return	
  2887  0002E0                     l3289:
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;FastTransfer.c: 182: crcErrorCounter++;
  2891  0002E0  0100               	movlb	0	; () banked
  2892  0002E2  4BB3               	infsnz	_crcErrorCounter& (0+255),f,b
  2893  0002E4  2BB4               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2897  0002E6  5033               	movf	_AKNAKsend,w,c
  2898  0002E8  B4D8               	btfsc	status,2,c
  2899  0002EA  D02C               	goto	l3301
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;FastTransfer.c: 185: unsigned char holder[3];
  2903                           ;FastTransfer.c: 186: holder[0] = 255;
  2904  0002EC  0100               	movlb	0	; () banked
  2905  0002EE  69E2               	setf	receiveData@holder_1380& (0+255),b
  2906                           
  2907                           ; BSR set to: 0
  2908                           ;FastTransfer.c: 187: holder[1] = 2;
  2909  0002F0  0E02               	movlw	2
  2910  0002F2  0100               	movlb	0	; () banked
  2911  0002F4  6FE3               	movwf	(receiveData@holder_1380+1)& (0+255),b
  2912                           
  2913                           ; BSR set to: 0
  2914                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2915  0002F6  0EFF               	movlw	255
  2916  0002F8  0100               	movlb	0	; () banked
  2917  0002FA  6FD7               	movwf	??_receiveData& (0+255),b
  2918  0002FC  0EFF               	movlw	255
  2919  0002FE  0100               	movlb	0	; () banked
  2920  000300  6FD8               	movwf	(??_receiveData+1)& (0+255),b
  2921  000302  503F               	movf	_rx_array_inx,w,c
  2922  000304  0100               	movlb	0	; () banked
  2923  000306  6FD9               	movwf	(??_receiveData+2)& (0+255),b
  2924  000308  6BDA               	clrf	(??_receiveData+3)& (0+255),b
  2925  00030A  0100               	movlb	0	; () banked
  2926  00030C  51D7               	movf	??_receiveData& (0+255),w,b
  2927  00030E  0100               	movlb	0	; () banked
  2928  000310  27D9               	addwf	(??_receiveData+2)& (0+255),f,b
  2929  000312  0100               	movlb	0	; () banked
  2930  000314  51D8               	movf	(??_receiveData+1)& (0+255),w,b
  2931  000316  0100               	movlb	0	; () banked
  2932  000318  23DA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2933  00031A  0E00               	movlw	low _rx_buffer
  2934  00031C  0100               	movlb	0	; () banked
  2935  00031E  25D9               	addwf	(??_receiveData+2)& (0+255),w,b
  2936  000320  6ED9               	movwf	fsr2l,c
  2937  000322  0E04               	movlw	high _rx_buffer
  2938  000324  0100               	movlb	0	; () banked
  2939  000326  21DA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2940  000328  6EDA               	movwf	fsr2h,c
  2941  00032A  50DF               	movf	indf2,w,c
  2942  00032C  0100               	movlb	0	; () banked
  2943  00032E  6FE4               	movwf	(receiveData@holder_1380+2)& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;FastTransfer.c: 198: serial_write(crcHolder);
  2947  000330  0EE2               	movlw	low receiveData@holder_1380
  2948  000332  6E1B               	movwf	CRC8@data,c
  2949  000334  0E00               	movlw	high receiveData@holder_1380
  2950  000336  6E1C               	movwf	CRC8@data+1,c
  2951  000338  0E03               	movlw	3
  2952  00033A  6E1D               	movwf	CRC8@len,c
  2953  00033C  EC2E  F007         	call	_CRC8	;wreg free
  2954  000340  0100               	movlb	0	; () banked
  2955  000342  6FDE               	movwf	receiveData@crcHolder_1381& (0+255),b
  2956  000344                     l3301:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;FastTransfer.c: 199: }
  2960                           ;FastTransfer.c: 202: rx_len = 0;
  2961  000344  0E00               	movlw	0
  2962  000346  6E40               	movwf	_rx_len,c
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;FastTransfer.c: 203: rx_array_inx = 0;
  2966  000348  0E00               	movlw	0
  2967  00034A  6E3F               	movwf	_rx_array_inx,c
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;FastTransfer.c: 204: return 0;
  2971  00034C  0E00               	movlw	0
  2972                           
  2973                           ; BSR set to: 0
  2974  00034E  0012               	return	
  2975  000350                     l3309:
  2976                           
  2977                           ;FastTransfer.c: 205: }
  2978                           ;FastTransfer.c: 206: }
  2979                           ;FastTransfer.c: 207: }
  2980                           ;FastTransfer.c: 210: return 0;
  2981  000350  0E00               	movlw	0
  2982  000352  0012               	return	
  2983  000354                     __end_of_receiveData:
  2984                           	opt stack 0
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           postinc0	equ	0xFEE
  2993                           wreg	equ	0xFE8
  2994                           postdec1	equ	0xFE5
  2995                           fsr1l	equ	0xFE1
  2996                           indf2	equ	0xFDF
  2997                           postinc2	equ	0xFDE
  2998                           postdec2	equ	0xFDD
  2999                           plusw2	equ	0xFDB
  3000                           fsr2h	equ	0xFDA
  3001                           fsr2l	equ	0xFD9
  3002                           status	equ	0xFD8
  3003                           
  3004 ;; *************** function _CRCcheck *****************
  3005 ;; Defined at:
  3006 ;;		line 373 in file "FastTransfer.c"
  3007 ;; Parameters:    Size  Location     Type
  3008 ;;		None
  3009 ;; Auto vars:     Size  Location     Type
  3010 ;;  rt              2    5[BANK0 ] int 
  3011 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3012 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3013 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3023 ;;      Params:         0       0       0       0       0       0       0
  3024 ;;      Locals:         0       7       0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0       0       0
  3026 ;;      Totals:         0       7       0       0       0       0       0
  3027 ;;Total ram usage:        7 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    5
  3030 ;; This function calls:
  3031 ;;		_CRC8
  3032 ;;		_crcBufS_get
  3033 ;;		_crcBufS_status_put
  3034 ;; This function is called by:
  3035 ;;		_receiveData
  3036 ;; This function uses a non-reentrant model
  3037 ;;
  3038                           
  3039                           	psect	text11
  3040  0009E4                     __ptext11:
  3041                           	opt stack 0
  3042  0009E4                     _CRCcheck:
  3043                           	opt stack 23
  3044  0009E4                     l446:
  3045  0009E4  D7FF               	goto	l446
  3046  0009E6                     l3129:
  3047                           
  3048                           ; BSR set to: 0
  3049  0009E6  0100               	movlb	0	; () banked
  3050  0009E8  BFD6               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3051  0009EA  D008               	goto	l3133
  3052  0009EC  0100               	movlb	0	; () banked
  3053  0009EE  51D6               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3054  0009F0  E143               	bnz	l458
  3055  0009F2  0E05               	movlw	5
  3056  0009F4  0100               	movlb	0	; () banked
  3057  0009F6  5DD5               	subwf	CRCcheck@rt& (0+255),w,b
  3058  0009F8  B0D8               	btfsc	status,0,c
  3059  0009FA  0012               	return	
  3060  0009FC                     l3133:
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3064  0009FC  0EBF               	movlw	low _crc_buffer
  3065  0009FE  6E1B               	movwf	crcBufS_get@_this,c
  3066  000A00  0E00               	movlw	high _crc_buffer
  3067  000A02  6E1C               	movwf	crcBufS_get@_this+1,c
  3068  000A04  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3069  000A08  0E00               	movlw	0
  3070  000A0A  6E1E               	movwf	crcBufS_get@space,c
  3071  000A0C  ECF1  F002         	call	_crcBufS_get	;wreg free
  3072  000A10  183D               	xorwf	_returnAddress,w,c
  3073  000A12  A4D8               	btfss	status,2,c
  3074  000A14  D02D               	goto	l3147
  3075                           
  3076                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3077  000A16  0EBF               	movlw	low _crc_buffer
  3078  000A18  6E1B               	movwf	crcBufS_get@_this,c
  3079  000A1A  0E00               	movlw	high _crc_buffer
  3080  000A1C  6E1C               	movwf	crcBufS_get@_this+1,c
  3081  000A1E  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3082  000A22  0E01               	movlw	1
  3083  000A24  6E1E               	movwf	crcBufS_get@space,c
  3084  000A26  ECF1  F002         	call	_crcBufS_get	;wreg free
  3085  000A2A  0100               	movlb	0	; () banked
  3086  000A2C  19D4               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3087  000A2E  A4D8               	btfss	status,2,c
  3088  000A30  D01F               	goto	l3147
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3092  000A32  0100               	movlb	0	; () banked
  3093  000A34  05D3               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3094  000A36  A4D8               	btfss	status,2,c
  3095  000A38  D00B               	goto	l3143
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3099  000A3A  0EBF               	movlw	low _crc_buffer
  3100  000A3C  6E1B               	movwf	crcBufS_status_put@_this,c
  3101  000A3E  0E00               	movlw	high _crc_buffer
  3102  000A40  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3103  000A42  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3104  000A46  0E01               	movlw	1
  3105  000A48  6E1E               	movwf	crcBufS_status_put@status,c
  3106  000A4A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3107                           
  3108                           ;FastTransfer.c: 393: break;
  3109  000A4E  0012               	return	
  3110  000A50                     l3143:
  3111  000A50  0E02               	movlw	2
  3112  000A52  0100               	movlb	0	; () banked
  3113  000A54  19D3               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3114  000A56  A4D8               	btfss	status,2,c
  3115  000A58  D00B               	goto	l3147
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3119  000A5A  0EBF               	movlw	low _crc_buffer
  3120  000A5C  6E1B               	movwf	crcBufS_status_put@_this,c
  3121  000A5E  0E00               	movlw	high _crc_buffer
  3122  000A60  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3123  000A62  C0D5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3124  000A66  0E02               	movlw	2
  3125  000A68  6E1E               	movwf	crcBufS_status_put@status,c
  3126  000A6A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3127                           
  3128                           ;FastTransfer.c: 396: break;
  3129  000A6E  0012               	return	
  3130  000A70                     l3147:
  3131  000A70  0100               	movlb	0	; () banked
  3132  000A72  4BD5               	infsnz	CRCcheck@rt& (0+255),f,b
  3133  000A74  2BD6               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3134  000A76  D7B7               	goto	l3129
  3135  000A78                     l458:
  3136  000A78  0012               	return		;funcret
  3137  000A7A                     __end_of_CRCcheck:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           prodh	equ	0xFF4
  3144                           prodl	equ	0xFF3
  3145                           intcon	equ	0xFF2
  3146                           postinc0	equ	0xFEE
  3147                           wreg	equ	0xFE8
  3148                           postdec1	equ	0xFE5
  3149                           fsr1l	equ	0xFE1
  3150                           indf2	equ	0xFDF
  3151                           postinc2	equ	0xFDE
  3152                           postdec2	equ	0xFDD
  3153                           plusw2	equ	0xFDB
  3154                           fsr2h	equ	0xFDA
  3155                           fsr2l	equ	0xFD9
  3156                           status	equ	0xFD8
  3157                           
  3158 ;; *************** function _crcBufS_status_put *****************
  3159 ;; Defined at:
  3160 ;;		line 336 in file "FastTransfer.c"
  3161 ;; Parameters:    Size  Location     Type
  3162 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3163 ;;		 -> crc_buffer(17), 
  3164 ;;  time            1   28[COMRAM] unsigned char 
  3165 ;;  status          1   29[COMRAM] unsigned char 
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;  wantedTime      2   34[COMRAM] int 
  3168 ;; Return value:  Size  Location     Type
  3169 ;;		None               void
  3170 ;; Registers used:
  3171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3177 ;;      Params:         4       0       0       0       0       0       0
  3178 ;;      Locals:         2       0       0       0       0       0       0
  3179 ;;      Temps:          4       0       0       0       0       0       0
  3180 ;;      Totals:        10       0       0       0       0       0       0
  3181 ;;Total ram usage:       10 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    4
  3184 ;; This function calls:
  3185 ;;		Nothing
  3186 ;; This function is called by:
  3187 ;;		_CRCcheck
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           	psect	text12
  3192  00079C                     __ptext12:
  3193                           	opt stack 0
  3194  00079C                     _crcBufS_status_put:
  3195                           	opt stack 23
  3196                           
  3197                           ;FastTransfer.c: 337: if (time >= 5) {
  3198                           
  3199                           ;incstack = 0
  3200  00079C  0E04               	movlw	4
  3201  00079E  641D               	cpfsgt	crcBufS_status_put@time,c
  3202  0007A0  D002               	goto	l3089
  3203                           
  3204                           ;FastTransfer.c: 338: time = 5 - 1;
  3205  0007A2  0E04               	movlw	4
  3206  0007A4  6E1D               	movwf	crcBufS_status_put@time,c
  3207  0007A6                     l3089:
  3208                           
  3209                           ;FastTransfer.c: 339: }
  3210                           ;FastTransfer.c: 340: time = time + 1;
  3211  0007A6  281D               	incf	crcBufS_status_put@time,w,c
  3212  0007A8  6E1D               	movwf	crcBufS_status_put@time,c
  3213                           
  3214                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3215  0007AA  501D               	movf	crcBufS_status_put@time,w,c
  3216  0007AC  0D03               	mullw	3
  3217  0007AE  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3218  0007B2  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3219                           
  3220                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3221  0007B6  EE20 F00F          	lfsr	2,15
  3222  0007BA  501B               	movf	crcBufS_status_put@_this,w,c
  3223  0007BC  26D9               	addwf	fsr2l,f,c
  3224  0007BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3225  0007C0  22DA               	addwfc	fsr2h,f,c
  3226  0007C2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3227  0007C4  5CDE               	subwf	postinc2,w,c
  3228  0007C6  50DE               	movf	postinc2,w,c
  3229  0007C8  0A80               	xorlw	128
  3230  0007CA  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3231  0007CC  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3232  0007CE  0A80               	xorlw	128
  3233  0007D0  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3234  0007D2  B0D8               	btfsc	status,0,c
  3235  0007D4  D02B               	goto	l3097
  3236                           
  3237                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3238  0007D6  EE20 F00F          	lfsr	2,15
  3239  0007DA  501B               	movf	crcBufS_status_put@_this,w,c
  3240  0007DC  26D9               	addwf	fsr2l,f,c
  3241  0007DE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3242  0007E0  22DA               	addwfc	fsr2h,f,c
  3243  0007E2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3244  0007E6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3245  0007EA  1E1F               	comf	??_crcBufS_status_put,f,c
  3246  0007EC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3247  0007EE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3248  0007F0  2A20               	incf	??_crcBufS_status_put+1,f,c
  3249  0007F2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3250  0007F4  261F               	addwf	??_crcBufS_status_put,f,c
  3251  0007F6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3252  0007F8  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3253  0007FA  1E1F               	comf	??_crcBufS_status_put,f,c
  3254  0007FC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3255  0007FE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3256  000800  2A20               	incf	??_crcBufS_status_put+1,f,c
  3257  000802  0E0F               	movlw	15
  3258  000804  241F               	addwf	??_crcBufS_status_put,w,c
  3259  000806  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3260  000808  0E00               	movlw	0
  3261  00080A  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3262  00080C  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3263                           
  3264                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3265  00080E  0E02               	movlw	2
  3266  000810  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3267  000812  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3268  000814  0E00               	movlw	0
  3269  000816  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3270  000818  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3271  00081A  501F               	movf	??_crcBufS_status_put,w,c
  3272  00081C  241B               	addwf	crcBufS_status_put@_this,w,c
  3273  00081E  6ED9               	movwf	fsr2l,c
  3274  000820  5020               	movf	??_crcBufS_status_put+1,w,c
  3275  000822  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3276  000824  6EDA               	movwf	fsr2h,c
  3277  000826  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3278                           
  3279                           ;FastTransfer.c: 345: } else {
  3280  00082A  0012               	return	
  3281  00082C                     l3097:
  3282                           
  3283                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3284  00082C  EE20 F00F          	lfsr	2,15
  3285  000830  501B               	movf	crcBufS_status_put@_this,w,c
  3286  000832  26D9               	addwf	fsr2l,f,c
  3287  000834  501C               	movf	crcBufS_status_put@_this+1,w,c
  3288  000836  22DA               	addwfc	fsr2h,f,c
  3289  000838  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3290  00083C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3291  000840  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3292  000844  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3293  000848  1E21               	comf	??_crcBufS_status_put+2,f,c
  3294  00084A  1E22               	comf	??_crcBufS_status_put+3,f,c
  3295  00084C  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3296  00084E  2A22               	incf	??_crcBufS_status_put+3,f,c
  3297  000850  501F               	movf	??_crcBufS_status_put,w,c
  3298  000852  2621               	addwf	??_crcBufS_status_put+2,f,c
  3299  000854  5020               	movf	??_crcBufS_status_put+1,w,c
  3300  000856  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3301  000858  0E02               	movlw	2
  3302  00085A  2621               	addwf	??_crcBufS_status_put+2,f,c
  3303  00085C  0E00               	movlw	0
  3304  00085E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3305  000860  5021               	movf	??_crcBufS_status_put+2,w,c
  3306  000862  241B               	addwf	crcBufS_status_put@_this,w,c
  3307  000864  6ED9               	movwf	fsr2l,c
  3308  000866  5022               	movf	??_crcBufS_status_put+3,w,c
  3309  000868  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3310  00086A  6EDA               	movwf	fsr2h,c
  3311  00086C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3312  000870  0012               	return	
  3313  000872                     __end_of_crcBufS_status_put:
  3314                           	opt stack 0
  3315                           tblptru	equ	0xFF8
  3316                           tblptrh	equ	0xFF7
  3317                           tblptrl	equ	0xFF6
  3318                           tablat	equ	0xFF5
  3319                           prodh	equ	0xFF4
  3320                           prodl	equ	0xFF3
  3321                           intcon	equ	0xFF2
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1l	equ	0xFE1
  3326                           indf2	equ	0xFDF
  3327                           postinc2	equ	0xFDE
  3328                           postdec2	equ	0xFDD
  3329                           plusw2	equ	0xFDB
  3330                           fsr2h	equ	0xFDA
  3331                           fsr2l	equ	0xFD9
  3332                           status	equ	0xFD8
  3333                           
  3334 ;; *************** function _crcBufS_get *****************
  3335 ;; Defined at:
  3336 ;;		line 353 in file "FastTransfer.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3339 ;;		 -> crc_buffer(17), 
  3340 ;;  time            1   28[COMRAM] unsigned char 
  3341 ;;  space           1   29[COMRAM] unsigned char 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  wantedTime      2   36[COMRAM] int 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;                  1    wreg      unsigned char 
  3346 ;; Registers used:
  3347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3353 ;;      Params:         4       0       0       0       0       0       0
  3354 ;;      Locals:         2       0       0       0       0       0       0
  3355 ;;      Temps:          6       0       0       0       0       0       0
  3356 ;;      Totals:        12       0       0       0       0       0       0
  3357 ;;Total ram usage:       12 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    4
  3360 ;; This function calls:
  3361 ;;		Nothing
  3362 ;; This function is called by:
  3363 ;;		_CRCcheck
  3364 ;;		_AKNAK
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text13
  3369  0005E2                     __ptext13:
  3370                           	opt stack 0
  3371  0005E2                     _crcBufS_get:
  3372                           	opt stack 23
  3373                           
  3374                           ;FastTransfer.c: 354: if (time >= 5) {
  3375                           
  3376                           ;incstack = 0
  3377  0005E2  0E04               	movlw	4
  3378  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  3379  0005E6  D002               	goto	l3065
  3380                           
  3381                           ;FastTransfer.c: 355: time = 5 - 1;
  3382  0005E8  0E04               	movlw	4
  3383  0005EA  6E1D               	movwf	crcBufS_get@time,c
  3384  0005EC                     l3065:
  3385                           
  3386                           ;FastTransfer.c: 356: }
  3387                           ;FastTransfer.c: 357: if (space >= 3) {
  3388  0005EC  0E02               	movlw	2
  3389  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  3390  0005F0  D002               	goto	l3069
  3391                           
  3392                           ;FastTransfer.c: 358: space = 3 - 1;
  3393  0005F2  0E02               	movlw	2
  3394  0005F4  6E1E               	movwf	crcBufS_get@space,c
  3395  0005F6                     l3069:
  3396                           
  3397                           ;FastTransfer.c: 359: }
  3398                           ;FastTransfer.c: 360: time = time + 1;
  3399  0005F6  281D               	incf	crcBufS_get@time,w,c
  3400  0005F8  6E1D               	movwf	crcBufS_get@time,c
  3401                           
  3402                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3403  0005FA  501D               	movf	crcBufS_get@time,w,c
  3404  0005FC  0D03               	mullw	3
  3405  0005FE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3406  000602  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3407                           
  3408                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3409  000606  EE20 F00F          	lfsr	2,15
  3410  00060A  501B               	movf	crcBufS_get@_this,w,c
  3411  00060C  26D9               	addwf	fsr2l,f,c
  3412  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  3413  000610  22DA               	addwfc	fsr2h,f,c
  3414  000612  5025               	movf	crcBufS_get@wantedTime,w,c
  3415  000614  5CDE               	subwf	postinc2,w,c
  3416  000616  50DE               	movf	postinc2,w,c
  3417  000618  0A80               	xorlw	128
  3418  00061A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3419  00061C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3420  00061E  0A80               	xorlw	128
  3421  000620  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3422  000622  B0D8               	btfsc	status,0,c
  3423  000624  D02A               	goto	l3081
  3424                           
  3425                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3426  000626  EE20 F00F          	lfsr	2,15
  3427  00062A  501B               	movf	crcBufS_get@_this,w,c
  3428  00062C  26D9               	addwf	fsr2l,f,c
  3429  00062E  501C               	movf	crcBufS_get@_this+1,w,c
  3430  000630  22DA               	addwfc	fsr2h,f,c
  3431  000632  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3432  000636  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3433  00063A  1E1F               	comf	??_crcBufS_get,f,c
  3434  00063C  1E20               	comf	??_crcBufS_get+1,f,c
  3435  00063E  4A1F               	infsnz	??_crcBufS_get,f,c
  3436  000640  2A20               	incf	??_crcBufS_get+1,f,c
  3437  000642  5025               	movf	crcBufS_get@wantedTime,w,c
  3438  000644  261F               	addwf	??_crcBufS_get,f,c
  3439  000646  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3440  000648  2220               	addwfc	??_crcBufS_get+1,f,c
  3441  00064A  1E1F               	comf	??_crcBufS_get,f,c
  3442  00064C  1E20               	comf	??_crcBufS_get+1,f,c
  3443  00064E  4A1F               	infsnz	??_crcBufS_get,f,c
  3444  000650  2A20               	incf	??_crcBufS_get+1,f,c
  3445  000652  0E0F               	movlw	15
  3446  000654  241F               	addwf	??_crcBufS_get,w,c
  3447  000656  6E25               	movwf	crcBufS_get@wantedTime,c
  3448  000658  0E00               	movlw	0
  3449  00065A  2020               	addwfc	??_crcBufS_get+1,w,c
  3450  00065C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3451                           
  3452                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3453  00065E  501E               	movf	crcBufS_get@space,w,c
  3454  000660  2425               	addwf	crcBufS_get@wantedTime,w,c
  3455  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3456  000664  0E00               	movlw	0
  3457  000666  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3458  000668  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3459  00066A  501F               	movf	??_crcBufS_get,w,c
  3460  00066C  241B               	addwf	crcBufS_get@_this,w,c
  3461  00066E  6ED9               	movwf	fsr2l,c
  3462  000670  5020               	movf	??_crcBufS_get+1,w,c
  3463  000672  201C               	addwfc	crcBufS_get@_this+1,w,c
  3464  000674  6EDA               	movwf	fsr2h,c
  3465  000676  50DF               	movf	indf2,w,c
  3466                           
  3467                           ;FastTransfer.c: 365: } else {
  3468  000678  0012               	return	
  3469  00067A                     l3081:
  3470                           
  3471                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3472  00067A  EE20 F00F          	lfsr	2,15
  3473  00067E  501B               	movf	crcBufS_get@_this,w,c
  3474  000680  26D9               	addwf	fsr2l,f,c
  3475  000682  501C               	movf	crcBufS_get@_this+1,w,c
  3476  000684  22DA               	addwfc	fsr2h,f,c
  3477  000686  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3478  00068A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3479  00068E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3480  000692  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3481  000696  1E21               	comf	??_crcBufS_get+2,f,c
  3482  000698  1E22               	comf	??_crcBufS_get+3,f,c
  3483  00069A  4A21               	infsnz	??_crcBufS_get+2,f,c
  3484  00069C  2A22               	incf	??_crcBufS_get+3,f,c
  3485  00069E  501E               	movf	crcBufS_get@space,w,c
  3486  0006A0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3487  0006A2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3488  0006A4  5021               	movf	??_crcBufS_get+2,w,c
  3489  0006A6  2623               	addwf	??_crcBufS_get+4,f,c
  3490  0006A8  5022               	movf	??_crcBufS_get+3,w,c
  3491  0006AA  2224               	addwfc	??_crcBufS_get+5,f,c
  3492  0006AC  501F               	movf	??_crcBufS_get,w,c
  3493  0006AE  2623               	addwf	??_crcBufS_get+4,f,c
  3494  0006B0  5020               	movf	??_crcBufS_get+1,w,c
  3495  0006B2  2224               	addwfc	??_crcBufS_get+5,f,c
  3496  0006B4  5023               	movf	??_crcBufS_get+4,w,c
  3497  0006B6  241B               	addwf	crcBufS_get@_this,w,c
  3498  0006B8  6ED9               	movwf	fsr2l,c
  3499  0006BA  5024               	movf	??_crcBufS_get+5,w,c
  3500  0006BC  201C               	addwfc	crcBufS_get@_this+1,w,c
  3501  0006BE  6EDA               	movwf	fsr2h,c
  3502  0006C0  50DF               	movf	indf2,w,c
  3503  0006C2  0012               	return	
  3504  0006C4                     __end_of_crcBufS_get:
  3505                           	opt stack 0
  3506                           tblptru	equ	0xFF8
  3507                           tblptrh	equ	0xFF7
  3508                           tblptrl	equ	0xFF6
  3509                           tablat	equ	0xFF5
  3510                           prodh	equ	0xFF4
  3511                           prodl	equ	0xFF3
  3512                           intcon	equ	0xFF2
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           postdec1	equ	0xFE5
  3516                           fsr1l	equ	0xFE1
  3517                           indf2	equ	0xFDF
  3518                           postinc2	equ	0xFDE
  3519                           postdec2	equ	0xFDD
  3520                           plusw2	equ	0xFDB
  3521                           fsr2h	equ	0xFDA
  3522                           fsr2l	equ	0xFD9
  3523                           status	equ	0xFD8
  3524                           
  3525 ;; *************** function _CRC8 *****************
  3526 ;; Defined at:
  3527 ;;		line 34 in file "FastTransfer.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3530 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1380(3), receiveData@holder(3), rx_buffer(200), 
  3531 ;;		 -> ring_buffer(206), NULL(0), 
  3532 ;;  len             1   28[COMRAM] unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  sum             1   29[COMRAM] unsigned char 
  3535 ;;  tempI           1   31[COMRAM] unsigned char 
  3536 ;;  extract         1   30[COMRAM] unsigned char 
  3537 ;;  crc             1   32[COMRAM] unsigned char 
  3538 ;; Return value:  Size  Location     Type
  3539 ;;                  1    wreg      unsigned char 
  3540 ;; Registers used:
  3541 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3542 ;; Tracked objects:
  3543 ;;		On entry : 0/0
  3544 ;;		On exit  : 0/0
  3545 ;;		Unchanged: 0/0
  3546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3547 ;;      Params:         3       0       0       0       0       0       0
  3548 ;;      Locals:         4       0       0       0       0       0       0
  3549 ;;      Temps:          0       0       0       0       0       0       0
  3550 ;;      Totals:         7       0       0       0       0       0       0
  3551 ;;Total ram usage:        7 bytes
  3552 ;; Hardware stack levels used:    1
  3553 ;; Hardware stack levels required when called:    4
  3554 ;; This function calls:
  3555 ;;		Nothing
  3556 ;; This function is called by:
  3557 ;;		_sendData
  3558 ;;		_receiveData
  3559 ;;		_CRCcheck
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text14
  3564  000E5C                     __ptext14:
  3565                           	opt stack 0
  3566  000E5C                     _CRC8:
  3567                           	opt stack 23
  3568                           
  3569                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3570                           
  3571                           ;incstack = 0
  3572  000E5C  0E00               	movlw	0
  3573  000E5E  6E21               	movwf	CRC8@crc,c
  3574                           
  3575                           ;FastTransfer.c: 36: while (len--) {
  3576  000E60  D01C               	goto	l3027
  3577  000E62                     l3011:
  3578                           
  3579                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3580  000E62  C01B  FFD9         	movff	CRC8@data,fsr2l
  3581  000E66  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3582  000E6A  50DF               	movf	indf2,w,c
  3583  000E6C  6E1F               	movwf	CRC8@extract,c
  3584  000E6E  4A1B               	infsnz	CRC8@data,f,c
  3585  000E70  2A1C               	incf	CRC8@data+1,f,c
  3586                           
  3587                           ;FastTransfer.c: 38: unsigned char tempI;
  3588                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3589  000E72  0E08               	movlw	8
  3590  000E74  6E20               	movwf	CRC8@tempI,c
  3591  000E76  D00E               	goto	l3025
  3592  000E78                     l3017:
  3593                           
  3594                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3595  000E78  5021               	movf	CRC8@crc,w,c
  3596  000E7A  181F               	xorwf	CRC8@extract,w,c
  3597  000E7C  0B01               	andlw	1
  3598  000E7E  6E1E               	movwf	CRC8@sum,c
  3599                           
  3600                           ;FastTransfer.c: 41: crc >>= 1;
  3601  000E80  90D8               	bcf	status,0,c
  3602  000E82  3221               	rrcf	CRC8@crc,f,c
  3603                           
  3604                           ;FastTransfer.c: 42: if (sum) {
  3605  000E84  501E               	movf	CRC8@sum,w,c
  3606  000E86  B4D8               	btfsc	status,2,c
  3607  000E88  D002               	goto	l344
  3608                           
  3609                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3610  000E8A  0E8C               	movlw	140
  3611  000E8C  1A21               	xorwf	CRC8@crc,f,c
  3612  000E8E                     l344:
  3613                           
  3614                           ;FastTransfer.c: 44: }
  3615                           ;FastTransfer.c: 45: extract >>= 1;
  3616  000E8E  90D8               	bcf	status,0,c
  3617  000E90  321F               	rrcf	CRC8@extract,f,c
  3618  000E92  0620               	decf	CRC8@tempI,f,c
  3619  000E94                     l3025:
  3620  000E94  5020               	movf	CRC8@tempI,w,c
  3621  000E96  A4D8               	btfss	status,2,c
  3622  000E98  D7EF               	goto	l3017
  3623  000E9A                     l3027:
  3624  000E9A  061D               	decf	CRC8@len,f,c
  3625  000E9C  281D               	incf	CRC8@len,w,c
  3626  000E9E  A4D8               	btfss	status,2,c
  3627  000EA0  D7E0               	goto	l3011
  3628                           
  3629                           ;FastTransfer.c: 46: }
  3630                           ;FastTransfer.c: 47: }
  3631                           ;FastTransfer.c: 48: return crc;
  3632  000EA2  5021               	movf	CRC8@crc,w,c
  3633  000EA4  0012               	return	
  3634  000EA6                     __end_of_CRC8:
  3635                           	opt stack 0
  3636                           tblptru	equ	0xFF8
  3637                           tblptrh	equ	0xFF7
  3638                           tblptrl	equ	0xFF6
  3639                           tablat	equ	0xFF5
  3640                           prodh	equ	0xFF4
  3641                           prodl	equ	0xFF3
  3642                           intcon	equ	0xFF2
  3643                           postinc0	equ	0xFEE
  3644                           wreg	equ	0xFE8
  3645                           postdec1	equ	0xFE5
  3646                           fsr1l	equ	0xFE1
  3647                           indf2	equ	0xFDF
  3648                           postinc2	equ	0xFDE
  3649                           postdec2	equ	0xFDD
  3650                           plusw2	equ	0xFDB
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _SetCharger *****************
  3656 ;; Defined at:
  3657 ;;		line 59 in file "Functions.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  mode            1    wreg     unsigned char 
  3660 ;;  Current         1    0[BANK0 ] unsigned char 
  3661 ;;  Voltage         1    1[BANK0 ] unsigned char 
  3662 ;; Auto vars:     Size  Location     Type
  3663 ;;  mode            1    2[BANK0 ] unsigned char 
  3664 ;; Return value:  Size  Location     Type
  3665 ;;		None               void
  3666 ;; Registers used:
  3667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3668 ;; Tracked objects:
  3669 ;;		On entry : 0/0
  3670 ;;		On exit  : 0/0
  3671 ;;		Unchanged: 0/0
  3672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3673 ;;      Params:         0       2       0       0       0       0       0
  3674 ;;      Locals:         0       1       0       0       0       0       0
  3675 ;;      Temps:          0       0       0       0       0       0       0
  3676 ;;      Totals:         0       3       0       0       0       0       0
  3677 ;;Total ram usage:        3 bytes
  3678 ;; Hardware stack levels used:    1
  3679 ;; Hardware stack levels required when called:    7
  3680 ;; This function calls:
  3681 ;;		_SetMux
  3682 ;;		_printf
  3683 ;; This function is called by:
  3684 ;;		_updateComms
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text15
  3689  000C9E                     __ptext15:
  3690                           	opt stack 0
  3691  000C9E                     _SetCharger:
  3692                           	opt stack 22
  3693                           
  3694                           ;incstack = 0
  3695                           ;SetCharger@mode stored from wreg
  3696  000C9E  0100               	movlb	0	; () banked
  3697  000CA0  6FD2               	movwf	SetCharger@mode& (0+255),b
  3698                           
  3699                           ;Functions.c: 60: if(mode == 1){
  3700  000CA2  0100               	movlb	0	; () banked
  3701  000CA4  05D2               	decf	SetCharger@mode& (0+255),w,b
  3702  000CA6  A4D8               	btfss	status,2,c
  3703  000CA8  D016               	goto	l3351
  3704                           
  3705                           ; BSR set to: 0
  3706                           ;Functions.c: 62: SetMux(1);
  3707  000CAA  0E01               	movlw	1
  3708  000CAC  EC8C  F007         	call	_SetMux
  3709                           
  3710                           ;Functions.c: 65: ChargerData[2] = 001;
  3711  000CB0  0E01               	movlw	1
  3712  000CB2  0100               	movlb	0	; () banked
  3713  000CB4  6FEB               	movwf	(_ChargerData+2)& (0+255),b
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;Functions.c: 66: ChargerData[4] = 000;
  3717  000CB6  0E00               	movlw	0
  3718  000CB8  0100               	movlb	0	; () banked
  3719  000CBA  6FED               	movwf	(_ChargerData+4)& (0+255),b
  3720                           
  3721                           ; BSR set to: 0
  3722                           ;Functions.c: 67: ChargerData[6] = 001;
  3723  000CBC  0E01               	movlw	1
  3724  000CBE  0100               	movlb	0	; () banked
  3725  000CC0  6FEF               	movwf	(_ChargerData+6)& (0+255),b
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;Functions.c: 69: printf("%s",ChargerData);
  3729  000CC2  0EFC               	movlw	low STR_1
  3730  000CC4  6E1D               	movwf	printf@f,c
  3731  000CC6  0E7F               	movlw	high STR_1
  3732  000CC8  6E1E               	movwf	printf@f+1,c
  3733  000CCA  0EE9               	movlw	low _ChargerData
  3734  000CCC  6E1F               	movwf	?_printf+2,c
  3735  000CCE  0E00               	movlw	high _ChargerData
  3736  000CD0  6E20               	movwf	?_printf+3,c
  3737  000CD2  EC39  F004         	call	_printf	;wreg free
  3738  000CD6                     l3351:
  3739                           
  3740                           ;Functions.c: 70: }
  3741                           ;Functions.c: 71: if(mode == 2){
  3742  000CD6  0E02               	movlw	2
  3743  000CD8  0100               	movlb	0	; () banked
  3744  000CDA  19D2               	xorwf	SetCharger@mode& (0+255),w,b
  3745  000CDC  A4D8               	btfss	status,2,c
  3746  000CDE  0012               	return	
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;Functions.c: 73: SetMux(1);
  3750  000CE0  0E01               	movlw	1
  3751  000CE2  EC8C  F007         	call	_SetMux
  3752                           
  3753                           ;Functions.c: 75: ChargerData[2] = Current;
  3754  000CE6  C0D0  F0EB         	movff	SetCharger@Current,_ChargerData+2
  3755                           
  3756                           ;Functions.c: 76: ChargerData[4] = Voltage;
  3757  000CEA  C0D1  F0ED         	movff	SetCharger@Voltage,_ChargerData+4
  3758                           
  3759                           ;Functions.c: 78: ChargerData[6] = (Current + Voltage)%1,000;
  3760  000CEE  0E00               	movlw	0
  3761  000CF0  0100               	movlb	0	; () banked
  3762  000CF2  6FEF               	movwf	(_ChargerData+6)& (0+255),b
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;Functions.c: 80: printf("%s",ChargerData);
  3766  000CF4  0EFC               	movlw	low STR_1
  3767  000CF6  6E1D               	movwf	printf@f,c
  3768  000CF8  0E7F               	movlw	high STR_1
  3769  000CFA  6E1E               	movwf	printf@f+1,c
  3770  000CFC  0EE9               	movlw	low _ChargerData
  3771  000CFE  6E1F               	movwf	?_printf+2,c
  3772  000D00  0E00               	movlw	high _ChargerData
  3773  000D02  6E20               	movwf	?_printf+3,c
  3774  000D04  EC39  F004         	call	_printf	;wreg free
  3775  000D08  0012               	return	
  3776  000D0A                     __end_of_SetCharger:
  3777                           	opt stack 0
  3778                           tblptru	equ	0xFF8
  3779                           tblptrh	equ	0xFF7
  3780                           tblptrl	equ	0xFF6
  3781                           tablat	equ	0xFF5
  3782                           prodh	equ	0xFF4
  3783                           prodl	equ	0xFF3
  3784                           intcon	equ	0xFF2
  3785                           postinc0	equ	0xFEE
  3786                           wreg	equ	0xFE8
  3787                           postdec1	equ	0xFE5
  3788                           fsr1l	equ	0xFE1
  3789                           indf2	equ	0xFDF
  3790                           postinc2	equ	0xFDE
  3791                           postdec2	equ	0xFDD
  3792                           plusw2	equ	0xFDB
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function _printf *****************
  3798 ;; Defined at:
  3799 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\doprnt.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3802 ;;		 -> STR_2(3), STR_1(3), 
  3803 ;; Auto vars:     Size  Location     Type
  3804 ;;  tmpval          4    0        struct .
  3805 ;;  cp              2   36[COMRAM] PTR const unsigned char 
  3806 ;;		 -> STR_3(7), ChargerData(9), 
  3807 ;;  ap              2   33[COMRAM] PTR void [1]
  3808 ;;		 -> ?_printf(2), 
  3809 ;;  len             2    0        unsigned int 
  3810 ;;  val             2    0        unsigned int 
  3811 ;;  c               1   35[COMRAM] char 
  3812 ;;  flag            1   32[COMRAM] unsigned char 
  3813 ;;  prec            1    0        char 
  3814 ;; Return value:  Size  Location     Type
  3815 ;;                  2   28[COMRAM] int 
  3816 ;; Registers used:
  3817 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3823 ;;      Params:         4       0       0       0       0       0       0
  3824 ;;      Locals:         6       0       0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0
  3826 ;;      Totals:        10       0       0       0       0       0       0
  3827 ;;Total ram usage:       10 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    6
  3830 ;; This function calls:
  3831 ;;		_putch
  3832 ;; This function is called by:
  3833 ;;		_SetCharger
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           	psect	text16
  3838  000872                     __ptext16:
  3839                           	opt stack 0
  3840  000872                     _printf:
  3841                           	opt stack 22
  3842                           
  3843                           ;doprnt.c: 466: va_list ap;
  3844                           ;doprnt.c: 499: signed char c;
  3845                           ;doprnt.c: 506: signed char prec;
  3846                           ;doprnt.c: 508: unsigned char flag;
  3847                           ;doprnt.c: 523: union {
  3848                           ;doprnt.c: 524: unsigned long vd;
  3849                           ;doprnt.c: 525: double integ;
  3850                           ;doprnt.c: 526: } tmpval;
  3851                           ;doprnt.c: 528: unsigned int val;
  3852                           ;doprnt.c: 529: unsigned len;
  3853                           ;doprnt.c: 530: const char * cp;
  3854                           ;doprnt.c: 533: *ap = __va_start();
  3855                           
  3856                           ;incstack = 0
  3857  000872  0E1F               	movlw	low (?_printf+2)
  3858  000874  6E22               	movwf	printf@ap,c
  3859  000876  0E00               	movlw	high (?_printf+2)
  3860  000878  6E23               	movwf	printf@ap+1,c
  3861                           
  3862                           ;doprnt.c: 536: while(c = *f++) {
  3863  00087A  D058               	goto	l3185
  3864  00087C                     l3161:
  3865                           
  3866                           ;doprnt.c: 538: if(c != '%')
  3867  00087C  0E25               	movlw	37
  3868  00087E  1824               	xorwf	printf@c,w,c
  3869  000880  B4D8               	btfsc	status,2,c
  3870  000882  D004               	goto	l3165
  3871                           
  3872                           ;doprnt.c: 540: {
  3873                           ;doprnt.c: 541: (putch(c) );
  3874  000884  5024               	movf	printf@c,w,c
  3875  000886  EC11  F009         	call	_putch
  3876                           
  3877                           ;doprnt.c: 542: continue;
  3878  00088A  D050               	goto	l3185
  3879  00088C                     l3165:
  3880                           
  3881                           ;doprnt.c: 543: }
  3882                           ;doprnt.c: 548: flag = 0;
  3883  00088C  0E00               	movlw	0
  3884  00088E  6E21               	movwf	printf@flag,c
  3885                           
  3886                           ;doprnt.c: 635: switch(c = *f++) {
  3887  000890  D03D               	goto	l3183
  3888  000892                     l3167:
  3889                           
  3890                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3891  000892  C022  FFD9         	movff	printf@ap,fsr2l
  3892  000896  C023  FFDA         	movff	printf@ap+1,fsr2h
  3893  00089A  CFDE F025          	movff	postinc2,printf@cp
  3894  00089E  CFDD F026          	movff	postdec2,printf@cp+1
  3895  0008A2  0E02               	movlw	2
  3896  0008A4  2622               	addwf	printf@ap,f,c
  3897  0008A6  0E00               	movlw	0
  3898  0008A8  2223               	addwfc	printf@ap+1,f,c
  3899                           
  3900                           ;doprnt.c: 740: if(!cp)
  3901  0008AA  5025               	movf	printf@cp,w,c
  3902  0008AC  1026               	iorwf	printf@cp+1,w,c
  3903  0008AE  A4D8               	btfss	status,2,c
  3904  0008B0  D019               	goto	l3179
  3905                           
  3906                           ;doprnt.c: 741: cp = "(null)";
  3907  0008B2  0EF5               	movlw	low STR_3
  3908  0008B4  6E25               	movwf	printf@cp,c
  3909  0008B6  0E7F               	movlw	high STR_3
  3910  0008B8  6E26               	movwf	printf@cp+1,c
  3911                           
  3912                           ;doprnt.c: 777: while(*cp)
  3913  0008BA  D014               	goto	l3179
  3914  0008BC                     l3175:
  3915                           
  3916                           ;doprnt.c: 778: (putch(*cp++) );
  3917  0008BC  C025  FFF6         	movff	printf@cp,tblptrl
  3918  0008C0  C026  FFF7         	movff	printf@cp+1,tblptrh
  3919  0008C4  6AF8               	clrf	tblptru,c
  3920  0008C6  0E05               	movlw	(high __ramtop+-1)
  3921  0008C8  64F7               	cpfsgt	tblptrh,c
  3922  0008CA  D003               	bra	u2167
  3923  0008CC  0008               	tblrd		*
  3924  0008CE  50F5               	movf	tablat,w,c
  3925  0008D0  D005               	bra	u2160
  3926  0008D2                     u2167:
  3927  0008D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3928  0008D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3929  0008DA  50EF               	movf	indf0,w,c
  3930  0008DC                     u2160:
  3931  0008DC  EC11  F009         	call	_putch
  3932  0008E0  4A25               	infsnz	printf@cp,f,c
  3933  0008E2  2A26               	incf	printf@cp+1,f,c
  3934  0008E4                     l3179:
  3935  0008E4  C025  FFF6         	movff	printf@cp,tblptrl
  3936  0008E8  C026  FFF7         	movff	printf@cp+1,tblptrh
  3937  0008EC  6AF8               	clrf	tblptru,c
  3938  0008EE  0E05               	movlw	(high __ramtop+-1)
  3939  0008F0  64F7               	cpfsgt	tblptrh,c
  3940  0008F2  D003               	bra	u2177
  3941  0008F4  0008               	tblrd		*
  3942  0008F6  50F5               	movf	tablat,w,c
  3943  0008F8  D005               	bra	u2170
  3944  0008FA                     u2177:
  3945  0008FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  3946  0008FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  3947  000902  50EF               	movf	indf0,w,c
  3948  000904                     u2170:
  3949  000904  0900               	iorlw	0
  3950  000906  B4D8               	btfsc	status,2,c
  3951  000908  D011               	goto	l3185
  3952  00090A  D7D8               	goto	l3175
  3953  00090C                     l3183:
  3954  00090C  C01D  FFF6         	movff	printf@f,tblptrl
  3955  000910  C01E  FFF7         	movff	printf@f+1,tblptrh
  3956  000914  4A1D               	infsnz	printf@f,f,c
  3957  000916  2A1E               	incf	printf@f+1,f,c
  3958  000918                     	if	0	;tblptru may be non-zero
  3959  000918                     	endif
  3960  000918                     	if	0	;tblptru may be non-zero
  3961  000918                     	endif
  3962  000918  0008               	tblrd		*
  3963  00091A  CFF5 F024          	movff	tablat,printf@c
  3964  00091E  5024               	movf	printf@c,w,c
  3965                           
  3966                           ; Switch size 1, requested type "space"
  3967                           ; Number of cases is 2, Range of values is 0 to 115
  3968                           ; switch strategies available:
  3969                           ; Name         Instructions Cycles
  3970                           ; simple_byte            7     4 (average)
  3971                           ;	Chosen strategy is simple_byte
  3972  000920  0A00               	xorlw	0	; case 0
  3973  000922  B4D8               	btfsc	status,2,c
  3974  000924  0012               	return	
  3975  000926  0A73               	xorlw	115	; case 115
  3976  000928  B4D8               	btfsc	status,2,c
  3977  00092A  D7B3               	goto	l3167
  3978  00092C                     l3185:
  3979  00092C  C01D  FFF6         	movff	printf@f,tblptrl
  3980  000930  C01E  FFF7         	movff	printf@f+1,tblptrh
  3981  000934  4A1D               	infsnz	printf@f,f,c
  3982  000936  2A1E               	incf	printf@f+1,f,c
  3983  000938                     	if	0	;tblptru may be non-zero
  3984  000938                     	endif
  3985  000938                     	if	0	;tblptru may be non-zero
  3986  000938                     	endif
  3987  000938  0008               	tblrd		*
  3988  00093A  CFF5 F024          	movff	tablat,printf@c
  3989  00093E  5024               	movf	printf@c,w,c
  3990  000940  B4D8               	btfsc	status,2,c
  3991  000942  0012               	return	
  3992  000944  D79B               	goto	l3161
  3993  000946                     __end_of_printf:
  3994                           	opt stack 0
  3995                           tblptru	equ	0xFF8
  3996                           tblptrh	equ	0xFF7
  3997                           tblptrl	equ	0xFF6
  3998                           tablat	equ	0xFF5
  3999                           prodh	equ	0xFF4
  4000                           prodl	equ	0xFF3
  4001                           intcon	equ	0xFF2
  4002                           indf0	equ	0xFEF
  4003                           postinc0	equ	0xFEE
  4004                           fsr0h	equ	0xFEA
  4005                           fsr0l	equ	0xFE9
  4006                           wreg	equ	0xFE8
  4007                           postdec1	equ	0xFE5
  4008                           fsr1l	equ	0xFE1
  4009                           indf2	equ	0xFDF
  4010                           postinc2	equ	0xFDE
  4011                           postdec2	equ	0xFDD
  4012                           plusw2	equ	0xFDB
  4013                           fsr2h	equ	0xFDA
  4014                           fsr2l	equ	0xFD9
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _putch *****************
  4018 ;; Defined at:
  4019 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;  txData          1    wreg     unsigned char 
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;  txData          1   27[COMRAM] unsigned char 
  4024 ;; Return value:  Size  Location     Type
  4025 ;;		None               void
  4026 ;; Registers used:
  4027 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4033 ;;      Params:         0       0       0       0       0       0       0
  4034 ;;      Locals:         1       0       0       0       0       0       0
  4035 ;;      Temps:          0       0       0       0       0       0       0
  4036 ;;      Totals:         1       0       0       0       0       0       0
  4037 ;;Total ram usage:        1 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:    5
  4040 ;; This function calls:
  4041 ;;		_EUSART2_Write
  4042 ;; This function is called by:
  4043 ;;		_printf
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047                           	psect	text17
  4048  001222                     __ptext17:
  4049                           	opt stack 0
  4050  001222                     _putch:
  4051                           	opt stack 22
  4052                           
  4053                           ;incstack = 0
  4054                           ;putch@txData stored from wreg
  4055  001222  6E1C               	movwf	putch@txData,c
  4056                           
  4057                           ;eusart2.c: 152: EUSART2_Write(txData);
  4058  001224  501C               	movf	putch@txData,w,c
  4059  001226  EC53  F007         	call	_EUSART2_Write
  4060  00122A  0012               	return		;funcret
  4061  00122C                     __end_of_putch:
  4062                           	opt stack 0
  4063                           tblptru	equ	0xFF8
  4064                           tblptrh	equ	0xFF7
  4065                           tblptrl	equ	0xFF6
  4066                           tablat	equ	0xFF5
  4067                           prodh	equ	0xFF4
  4068                           prodl	equ	0xFF3
  4069                           intcon	equ	0xFF2
  4070                           indf0	equ	0xFEF
  4071                           postinc0	equ	0xFEE
  4072                           fsr0h	equ	0xFEA
  4073                           fsr0l	equ	0xFE9
  4074                           wreg	equ	0xFE8
  4075                           postdec1	equ	0xFE5
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           plusw2	equ	0xFDB
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _EUSART2_Write *****************
  4086 ;; Defined at:
  4087 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;  txData          1    wreg     unsigned char 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  txData          1   26[COMRAM] unsigned char 
  4092 ;; Return value:  Size  Location     Type
  4093 ;;		None               void
  4094 ;; Registers used:
  4095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4101 ;;      Params:         0       0       0       0       0       0       0
  4102 ;;      Locals:         1       0       0       0       0       0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0
  4104 ;;      Totals:         1       0       0       0       0       0       0
  4105 ;;Total ram usage:        1 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    4
  4108 ;; This function calls:
  4109 ;;		Nothing
  4110 ;; This function is called by:
  4111 ;;		_putch
  4112 ;; This function uses a non-reentrant model
  4113 ;;
  4114                           
  4115                           	psect	text18
  4116  000EA6                     __ptext18:
  4117                           	opt stack 0
  4118  000EA6                     _EUSART2_Write:
  4119                           	opt stack 22
  4120                           
  4121                           ;incstack = 0
  4122                           ;EUSART2_Write@txData stored from wreg
  4123  000EA6  6E1B               	movwf	EUSART2_Write@txData,c
  4124  000EA8                     l2983:
  4125  000EA8  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  4126  000EAA  B4D8               	btfsc	status,2,c
  4127  000EAC  D7FD               	goto	l2983
  4128                           
  4129                           ;eusart2.c: 132: }
  4130                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  4131  000EAE  B8A3               	btfsc	4003,4,c	;volatile
  4132  000EB0  D003               	goto	l50
  4133                           
  4134                           ;eusart2.c: 135: TXREG2 = txData;
  4135  000EB2  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4136                           
  4137                           ;eusart2.c: 136: } else {
  4138  000EB6  D012               	goto	l2997
  4139  000EB8                     l50:
  4140                           
  4141                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  4142  000EB8  98A3               	bcf	4003,4,c	;volatile
  4143                           
  4144                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  4145  000EBA  5038               	movf	_eusart2TxHead,w,c
  4146  000EBC  0D01               	mullw	1
  4147  000EBE  0E9B               	movlw	low _eusart2TxBuffer
  4148  000EC0  24F3               	addwf	prodl,w,c
  4149  000EC2  6ED9               	movwf	fsr2l,c
  4150  000EC4  0E00               	movlw	high _eusart2TxBuffer
  4151  000EC6  20F4               	addwfc	prodh,w,c
  4152  000EC8  6EDA               	movwf	fsr2h,c
  4153  000ECA  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  4154  000ECE  2A38               	incf	_eusart2TxHead,f,c
  4155                           
  4156                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  4157  000ED0  0E07               	movlw	7
  4158  000ED2  6438               	cpfsgt	_eusart2TxHead,c
  4159  000ED4  D002               	goto	l2995
  4160                           
  4161                           ;eusart2.c: 140: eusart2TxHead = 0;
  4162  000ED6  0E00               	movlw	0
  4163  000ED8  6E38               	movwf	_eusart2TxHead,c
  4164  000EDA                     l2995:
  4165                           
  4166                           ;eusart2.c: 141: }
  4167                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  4168  000EDA  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4169  000EDC                     l2997:
  4170                           
  4171                           ;eusart2.c: 143: }
  4172                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  4173  000EDC  88A3               	bsf	4003,4,c	;volatile
  4174  000EDE  0012               	return		;funcret
  4175  000EE0                     __end_of_EUSART2_Write:
  4176                           	opt stack 0
  4177                           tblptru	equ	0xFF8
  4178                           tblptrh	equ	0xFF7
  4179                           tblptrl	equ	0xFF6
  4180                           tablat	equ	0xFF5
  4181                           prodh	equ	0xFF4
  4182                           prodl	equ	0xFF3
  4183                           intcon	equ	0xFF2
  4184                           indf0	equ	0xFEF
  4185                           postinc0	equ	0xFEE
  4186                           fsr0h	equ	0xFEA
  4187                           fsr0l	equ	0xFE9
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           plusw2	equ	0xFDB
  4195                           fsr2h	equ	0xFDA
  4196                           fsr2l	equ	0xFD9
  4197                           status	equ	0xFD8
  4198                           
  4199 ;; *************** function _SetMux *****************
  4200 ;; Defined at:
  4201 ;;		line 91 in file "Functions.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  channel         1    wreg     unsigned char 
  4204 ;; Auto vars:     Size  Location     Type
  4205 ;;  channel         1   26[COMRAM] unsigned char 
  4206 ;; Return value:  Size  Location     Type
  4207 ;;		None               void
  4208 ;; Registers used:
  4209 ;;		wreg, status,2, status,0
  4210 ;; Tracked objects:
  4211 ;;		On entry : 0/0
  4212 ;;		On exit  : 0/0
  4213 ;;		Unchanged: 0/0
  4214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4215 ;;      Params:         0       0       0       0       0       0       0
  4216 ;;      Locals:         1       0       0       0       0       0       0
  4217 ;;      Temps:          0       0       0       0       0       0       0
  4218 ;;      Totals:         1       0       0       0       0       0       0
  4219 ;;Total ram usage:        1 bytes
  4220 ;; Hardware stack levels used:    1
  4221 ;; Hardware stack levels required when called:    4
  4222 ;; This function calls:
  4223 ;;		Nothing
  4224 ;; This function is called by:
  4225 ;;		_SetCharger
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text19
  4230  000F18                     __ptext19:
  4231                           	opt stack 0
  4232  000F18                     _SetMux:
  4233                           	opt stack 24
  4234                           
  4235                           ;incstack = 0
  4236                           ;SetMux@channel stored from wreg
  4237  000F18  6E1B               	movwf	SetMux@channel,c
  4238                           
  4239                           ;Functions.c: 92: switch (channel){
  4240  000F1A  D00C               	goto	l3157
  4241  000F1C                     l613:
  4242  000F1C  908A               	bcf	3978,0,c	;volatile
  4243                           
  4244                           ;Functions.c: 95: do { LATB1 = 0; } while(0);
  4245  000F1E  928A               	bcf	3978,1,c	;volatile
  4246                           
  4247                           ;Functions.c: 96: break;
  4248  000F20  0012               	return	
  4249  000F22                     l619:
  4250  000F22  808A               	bsf	3978,0,c	;volatile
  4251                           
  4252                           ;Functions.c: 99: do { LATB1 = 0; } while(0);
  4253  000F24  928A               	bcf	3978,1,c	;volatile
  4254                           
  4255                           ;Functions.c: 100: break;
  4256  000F26  0012               	return	
  4257  000F28                     l624:
  4258  000F28  908A               	bcf	3978,0,c	;volatile
  4259                           
  4260                           ;Functions.c: 103: do { LATB1 = 1; } while(0);
  4261  000F2A  828A               	bsf	3978,1,c	;volatile
  4262                           
  4263                           ;Functions.c: 104: break;
  4264  000F2C  0012               	return	
  4265  000F2E                     l629:
  4266  000F2E  808A               	bsf	3978,0,c	;volatile
  4267                           
  4268                           ;Functions.c: 107: do { LATB1 = 1; } while(0);
  4269  000F30  828A               	bsf	3978,1,c	;volatile
  4270                           
  4271                           ;Functions.c: 112: }
  4272                           
  4273                           ;Functions.c: 111: break;
  4274                           
  4275                           ;Functions.c: 109: default:
  4276                           
  4277                           ;Functions.c: 108: break;
  4278  000F32  0012               	return	
  4279  000F34                     l3157:
  4280  000F34  501B               	movf	SetMux@channel,w,c
  4281                           
  4282                           ; Switch size 1, requested type "space"
  4283                           ; Number of cases is 4, Range of values is 1 to 4
  4284                           ; switch strategies available:
  4285                           ; Name         Instructions Cycles
  4286                           ; simple_byte           13     7 (average)
  4287                           ;	Chosen strategy is simple_byte
  4288  000F36  0A01               	xorlw	1	; case 1
  4289  000F38  B4D8               	btfsc	status,2,c
  4290  000F3A  D7F0               	goto	l613
  4291  000F3C  0A03               	xorlw	3	; case 2
  4292  000F3E  B4D8               	btfsc	status,2,c
  4293  000F40  D7F0               	goto	l619
  4294  000F42  0A01               	xorlw	1	; case 3
  4295  000F44  B4D8               	btfsc	status,2,c
  4296  000F46  D7F0               	goto	l624
  4297  000F48  0A07               	xorlw	7	; case 4
  4298  000F4A  A4D8               	btfss	status,2,c
  4299  000F4C  0012               	return	
  4300  000F4E  D7EF               	goto	l629
  4301  000F50                     __end_of_SetMux:
  4302                           	opt stack 0
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           prodh	equ	0xFF4
  4308                           prodl	equ	0xFF3
  4309                           intcon	equ	0xFF2
  4310                           indf0	equ	0xFEF
  4311                           postinc0	equ	0xFEE
  4312                           fsr0h	equ	0xFEA
  4313                           fsr0l	equ	0xFE9
  4314                           wreg	equ	0xFE8
  4315                           postdec1	equ	0xFE5
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           postinc2	equ	0xFDE
  4319                           postdec2	equ	0xFDD
  4320                           plusw2	equ	0xFDB
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function _Precharge *****************
  4326 ;; Defined at:
  4327 ;;		line 26 in file "Functions.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;  OnOff           1    wreg     unsigned char 
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;  OnOff           1    0[BANK0 ] unsigned char 
  4332 ;;  i               2    3[BANK0 ] int 
  4333 ;;  i               2    1[BANK0 ] int 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;		None               void
  4336 ;; Registers used:
  4337 ;;		wreg, status,2, status,0, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4343 ;;      Params:         0       0       0       0       0       0       0
  4344 ;;      Locals:         0       5       0       0       0       0       0
  4345 ;;      Temps:          0       0       0       0       0       0       0
  4346 ;;      Totals:         0       5       0       0       0       0       0
  4347 ;;Total ram usage:        5 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    5
  4350 ;; This function calls:
  4351 ;;		_Delay
  4352 ;; This function is called by:
  4353 ;;		_updateComms
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text20
  4358  000946                     __ptext20:
  4359                           	opt stack 0
  4360  000946                     _Precharge:
  4361                           	opt stack 24
  4362                           
  4363                           ;incstack = 0
  4364                           ;Precharge@OnOff stored from wreg
  4365  000946  0100               	movlb	0	; () banked
  4366  000948  6FD0               	movwf	Precharge@OnOff& (0+255),b
  4367                           
  4368                           ;Functions.c: 27: if(OnOff){
  4369  00094A  0100               	movlb	0	; () banked
  4370  00094C  51D0               	movf	Precharge@OnOff& (0+255),w,b
  4371  00094E  0100               	movlb	0	; () banked
  4372  000950  B4D8               	btfsc	status,2,c
  4373  000952  D024               	goto	l591
  4374                           
  4375                           ; BSR set to: 0
  4376                           
  4377                           ;Functions.c: 28: do { LATC1 = 1; } while(0);
  4378  000954  828B               	bsf	3979,1,c	;volatile
  4379                           
  4380                           ; BSR set to: 0
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;Functions.c: 29: do { LATB3 = 1; } while(0);
  4384  000956  868A               	bsf	3978,3,c	;volatile
  4385                           
  4386                           ; BSR set to: 0
  4387                           ;Functions.c: 30: for(int i = 0;i<5;i++){
  4388                           
  4389                           ; BSR set to: 0
  4390  000958  0E00               	movlw	0
  4391  00095A  0100               	movlb	0	; () banked
  4392  00095C  6FD2               	movwf	(Precharge@i+1)& (0+255),b
  4393  00095E  0E00               	movlw	0
  4394  000960  6FD1               	movwf	Precharge@i& (0+255),b
  4395  000962                     l3317:
  4396                           
  4397                           ; BSR set to: 0
  4398  000962  0100               	movlb	0	; () banked
  4399  000964  BFD2               	btfsc	(Precharge@i+1)& (0+255),7,b
  4400  000966  D008               	goto	l3321
  4401  000968  0100               	movlb	0	; () banked
  4402  00096A  51D2               	movf	(Precharge@i+1)& (0+255),w,b
  4403  00096C  E113               	bnz	l584
  4404  00096E  0E05               	movlw	5
  4405  000970  0100               	movlb	0	; () banked
  4406  000972  5DD1               	subwf	Precharge@i& (0+255),w,b
  4407  000974  B0D8               	btfsc	status,0,c
  4408  000976  D00E               	goto	l584
  4409  000978                     l3321:
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;Functions.c: 31: Delay(1000);
  4413  000978  0EE8               	movlw	232
  4414  00097A  6E1B               	movwf	Delay@wait,c
  4415  00097C  0E03               	movlw	3
  4416  00097E  6E1C               	movwf	Delay@wait+1,c
  4417  000980  0E00               	movlw	0
  4418  000982  6E1D               	movwf	Delay@wait+2,c
  4419  000984  0E00               	movlw	0
  4420  000986  6E1E               	movwf	Delay@wait+3,c
  4421  000988  EC08  F007         	call	_Delay	;wreg free
  4422  00098C  0100               	movlb	0	; () banked
  4423  00098E  4BD1               	infsnz	Precharge@i& (0+255),f,b
  4424  000990  2BD2               	incf	(Precharge@i+1)& (0+255),f,b
  4425  000992  D7E7               	goto	l3317
  4426  000994                     l584:
  4427                           
  4428                           ; BSR set to: 0
  4429  000994  888A               	bsf	3978,4,c	;volatile
  4430                           
  4431                           ; BSR set to: 0
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;Functions.c: 34: do { LATC0 = 1; } while(0);
  4435  000996  808B               	bsf	3979,0,c	;volatile
  4436                           
  4437                           ; BSR set to: 0
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;Functions.c: 35: do { LATB5 = 1; } while(0);
  4441  000998  8A8A               	bsf	3978,5,c	;volatile
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;Functions.c: 36: }
  4445  00099A  0012               	return	
  4446  00099C                     l591:
  4447                           
  4448                           ; BSR set to: 0
  4449  00099C  988A               	bcf	3978,4,c	;volatile
  4450                           
  4451                           ; BSR set to: 0
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;Functions.c: 40: do { LATB3 = 0; } while(0);
  4455  00099E  968A               	bcf	3978,3,c	;volatile
  4456                           
  4457                           ; BSR set to: 0
  4458                           
  4459                           ; BSR set to: 0
  4460                           ;Functions.c: 41: do { LATC0 = 0; } while(0);
  4461  0009A0  908B               	bcf	3979,0,c	;volatile
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;Functions.c: 42: for(int i = 0;i<5;i++){
  4465                           
  4466                           ; BSR set to: 0
  4467  0009A2  0E00               	movlw	0
  4468  0009A4  0100               	movlb	0	; () banked
  4469  0009A6  6FD4               	movwf	(Precharge@i_1672+1)& (0+255),b
  4470  0009A8  0E00               	movlw	0
  4471  0009AA  6FD3               	movwf	Precharge@i_1672& (0+255),b
  4472  0009AC                     l3329:
  4473                           
  4474                           ; BSR set to: 0
  4475  0009AC  0100               	movlb	0	; () banked
  4476  0009AE  BFD4               	btfsc	(Precharge@i_1672+1)& (0+255),7,b
  4477  0009B0  D008               	goto	l3333
  4478  0009B2  0100               	movlb	0	; () banked
  4479  0009B4  51D4               	movf	(Precharge@i_1672+1)& (0+255),w,b
  4480  0009B6  E113               	bnz	l599
  4481  0009B8  0E05               	movlw	5
  4482  0009BA  0100               	movlb	0	; () banked
  4483  0009BC  5DD3               	subwf	Precharge@i_1672& (0+255),w,b
  4484  0009BE  B0D8               	btfsc	status,0,c
  4485  0009C0  D00E               	goto	l599
  4486  0009C2                     l3333:
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;Functions.c: 43: Delay(1000);
  4490  0009C2  0EE8               	movlw	232
  4491  0009C4  6E1B               	movwf	Delay@wait,c
  4492  0009C6  0E03               	movlw	3
  4493  0009C8  6E1C               	movwf	Delay@wait+1,c
  4494  0009CA  0E00               	movlw	0
  4495  0009CC  6E1D               	movwf	Delay@wait+2,c
  4496  0009CE  0E00               	movlw	0
  4497  0009D0  6E1E               	movwf	Delay@wait+3,c
  4498  0009D2  EC08  F007         	call	_Delay	;wreg free
  4499  0009D6  0100               	movlb	0	; () banked
  4500  0009D8  4BD3               	infsnz	Precharge@i_1672& (0+255),f,b
  4501  0009DA  2BD4               	incf	(Precharge@i_1672+1)& (0+255),f,b
  4502  0009DC  D7E7               	goto	l3329
  4503  0009DE                     l599:
  4504                           
  4505                           ; BSR set to: 0
  4506  0009DE  928B               	bcf	3979,1,c	;volatile
  4507                           
  4508                           ; BSR set to: 0
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;Functions.c: 46: do { LATB5 = 0; } while(0);
  4512  0009E0  9A8A               	bcf	3978,5,c	;volatile
  4513                           
  4514                           ; BSR set to: 0
  4515  0009E2  0012               	return	
  4516  0009E4                     __end_of_Precharge:
  4517                           	opt stack 0
  4518                           tblptru	equ	0xFF8
  4519                           tblptrh	equ	0xFF7
  4520                           tblptrl	equ	0xFF6
  4521                           tablat	equ	0xFF5
  4522                           prodh	equ	0xFF4
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           indf0	equ	0xFEF
  4526                           postinc0	equ	0xFEE
  4527                           fsr0h	equ	0xFEA
  4528                           fsr0l	equ	0xFE9
  4529                           wreg	equ	0xFE8
  4530                           postdec1	equ	0xFE5
  4531                           fsr1l	equ	0xFE1
  4532                           indf2	equ	0xFDF
  4533                           postinc2	equ	0xFDE
  4534                           postdec2	equ	0xFDD
  4535                           plusw2	equ	0xFDB
  4536                           fsr2h	equ	0xFDA
  4537                           fsr2l	equ	0xFD9
  4538                           status	equ	0xFD8
  4539                           
  4540 ;; *************** function _ledDebug *****************
  4541 ;; Defined at:
  4542 ;;		line 116 in file "Functions.c"
  4543 ;; Parameters:    Size  Location     Type
  4544 ;;		None
  4545 ;; Auto vars:     Size  Location     Type
  4546 ;;		None
  4547 ;; Return value:  Size  Location     Type
  4548 ;;		None               void
  4549 ;; Registers used:
  4550 ;;		wreg, status,2, status,0, cstack
  4551 ;; Tracked objects:
  4552 ;;		On entry : 0/0
  4553 ;;		On exit  : 0/0
  4554 ;;		Unchanged: 0/0
  4555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4556 ;;      Params:         0       0       0       0       0       0       0
  4557 ;;      Locals:         0       0       0       0       0       0       0
  4558 ;;      Temps:          0       0       0       0       0       0       0
  4559 ;;      Totals:         0       0       0       0       0       0       0
  4560 ;;Total ram usage:        0 bytes
  4561 ;; Hardware stack levels used:    1
  4562 ;; Hardware stack levels required when called:    5
  4563 ;; This function calls:
  4564 ;;		_time_Set
  4565 ;;		_time_get
  4566 ;; This function is called by:
  4567 ;;		_main
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text21
  4572  000FB6                     __ptext21:
  4573                           	opt stack 0
  4574  000FB6                     _ledDebug:
  4575                           	opt stack 25
  4576                           
  4577                           ;Functions.c: 117: if (time_get(1) > 500) {
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;incstack = 0
  4581  000FB6  0E01               	movlw	1
  4582  000FB8  ECEC  F008         	call	_time_get
  4583  000FBC  BE1C               	btfsc	?_time_get+1,7,c
  4584  000FBE  0012               	return	
  4585  000FC0  0EF5               	movlw	245
  4586  000FC2  5C1B               	subwf	?_time_get,w,c
  4587  000FC4  0E01               	movlw	1
  4588  000FC6  581C               	subwfb	?_time_get+1,w,c
  4589  000FC8  A0D8               	btfss	status,0,c
  4590  000FCA  0012               	return	
  4591                           
  4592                           ;Functions.c: 118: do { LATA3 = ~LATA3; } while(0);
  4593  000FCC  B689               	btfsc	3977,3,c	;volatile
  4594  000FCE  D002               	goto	u1630
  4595  000FD0  8689               	bsf	3977,3,c	;volatile
  4596  000FD2  D001               	goto	l2769
  4597  000FD4                     u1630:
  4598  000FD4  9689               	bcf	3977,3,c	;volatile
  4599  000FD6                     l2769:
  4600                           
  4601                           ;Functions.c: 119: time_Set(1, 0);
  4602  000FD6  0E00               	movlw	0
  4603  000FD8  6E1C               	movwf	time_Set@value+1,c
  4604  000FDA  0E00               	movlw	0
  4605  000FDC  6E1B               	movwf	time_Set@value,c
  4606  000FDE  0E01               	movlw	1
  4607  000FE0  EC9D  F008         	call	_time_Set
  4608  000FE4  0012               	return	
  4609  000FE6                     __end_of_ledDebug:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           indf0	equ	0xFEF
  4619                           postinc0	equ	0xFEE
  4620                           fsr0h	equ	0xFEA
  4621                           fsr0l	equ	0xFE9
  4622                           wreg	equ	0xFE8
  4623                           postdec1	equ	0xFE5
  4624                           fsr1l	equ	0xFE1
  4625                           indf2	equ	0xFDF
  4626                           postinc2	equ	0xFDE
  4627                           postdec2	equ	0xFDD
  4628                           plusw2	equ	0xFDB
  4629                           fsr2h	equ	0xFDA
  4630                           fsr2l	equ	0xFD9
  4631                           status	equ	0xFD8
  4632                           
  4633 ;; *************** function _time_get *****************
  4634 ;; Defined at:
  4635 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  4636 ;; Parameters:    Size  Location     Type
  4637 ;;  WhatTime        1    wreg     unsigned char 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  WhatTime        1   28[COMRAM] unsigned char 
  4640 ;; Return value:  Size  Location     Type
  4641 ;;                  2   26[COMRAM] int 
  4642 ;; Registers used:
  4643 ;;		wreg, status,2, status,0
  4644 ;; Tracked objects:
  4645 ;;		On entry : 0/0
  4646 ;;		On exit  : 0/0
  4647 ;;		Unchanged: 0/0
  4648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4649 ;;      Params:         2       0       0       0       0       0       0
  4650 ;;      Locals:         1       0       0       0       0       0       0
  4651 ;;      Temps:          0       0       0       0       0       0       0
  4652 ;;      Totals:         3       0       0       0       0       0       0
  4653 ;;Total ram usage:        3 bytes
  4654 ;; Hardware stack levels used:    1
  4655 ;; Hardware stack levels required when called:    4
  4656 ;; This function calls:
  4657 ;;		Nothing
  4658 ;; This function is called by:
  4659 ;;		_ledDebug
  4660 ;; This function uses a non-reentrant model
  4661 ;;
  4662                           
  4663                           	psect	text22
  4664  0011D8                     __ptext22:
  4665                           	opt stack 0
  4666  0011D8                     _time_get:
  4667                           	opt stack 25
  4668                           
  4669                           ;incstack = 0
  4670                           ;time_get@WhatTime stored from wreg
  4671  0011D8  6E1D               	movwf	time_get@WhatTime,c
  4672                           
  4673                           ;tmr0.c: 157: if(WhatTime == 1){
  4674  0011DA  041D               	decf	time_get@WhatTime,w,c
  4675  0011DC  A4D8               	btfss	status,2,c
  4676  0011DE  0012               	return	
  4677                           
  4678                           ;tmr0.c: 158: return LEDtime;
  4679  0011E0  C0A3  F01B         	movff	_LEDtime,?_time_get
  4680  0011E4  C0A4  F01C         	movff	_LEDtime+1,?_time_get+1
  4681  0011E8  0012               	return	
  4682  0011EA                     __end_of_time_get:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           intcon	equ	0xFF2
  4691                           indf0	equ	0xFEF
  4692                           postinc0	equ	0xFEE
  4693                           fsr0h	equ	0xFEA
  4694                           fsr0l	equ	0xFE9
  4695                           wreg	equ	0xFE8
  4696                           postdec1	equ	0xFE5
  4697                           fsr1l	equ	0xFE1
  4698                           indf2	equ	0xFDF
  4699                           postinc2	equ	0xFDE
  4700                           postdec2	equ	0xFDD
  4701                           plusw2	equ	0xFDB
  4702                           fsr2h	equ	0xFDA
  4703                           fsr2l	equ	0xFD9
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _time_Set *****************
  4707 ;; Defined at:
  4708 ;;		line 162 in file "mcc_generated_files/tmr0.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  WhatTime        1    wreg     unsigned char 
  4711 ;;  value           2   26[COMRAM] int 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  WhatTime        1   28[COMRAM] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, status,2, status,0
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/0
  4720 ;;		On exit  : 0/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4723 ;;      Params:         2       0       0       0       0       0       0
  4724 ;;      Locals:         1       0       0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0
  4726 ;;      Totals:         3       0       0       0       0       0       0
  4727 ;;Total ram usage:        3 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_ledDebug
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text23
  4738  00113A                     __ptext23:
  4739                           	opt stack 0
  4740  00113A                     _time_Set:
  4741                           	opt stack 25
  4742                           
  4743                           ;incstack = 0
  4744                           ;time_Set@WhatTime stored from wreg
  4745  00113A  6E1D               	movwf	time_Set@WhatTime,c
  4746                           
  4747                           ;tmr0.c: 163: if(WhatTime == 1){
  4748  00113C  041D               	decf	time_Set@WhatTime,w,c
  4749  00113E  A4D8               	btfss	status,2,c
  4750  001140  0012               	return	
  4751                           
  4752                           ;tmr0.c: 164: LEDtime = value;
  4753  001142  C01B  F0A3         	movff	time_Set@value,_LEDtime
  4754  001146  C01C  F0A4         	movff	time_Set@value+1,_LEDtime+1
  4755  00114A  0100               	movlb	0	; () banked
  4756  00114C  0E00               	movlw	0
  4757  00114E  BFA4               	btfsc	(_LEDtime+1)& (0+255),7,b
  4758  001150  0EFF               	movlw	-1
  4759  001152  6FA5               	movwf	(_LEDtime+2)& (0+255),b
  4760  001154  6FA6               	movwf	(_LEDtime+3)& (0+255),b
  4761  001156  0012               	return	
  4762  001158                     __end_of_time_Set:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           prodh	equ	0xFF4
  4769                           prodl	equ	0xFF3
  4770                           intcon	equ	0xFF2
  4771                           indf0	equ	0xFEF
  4772                           postinc0	equ	0xFEE
  4773                           fsr0h	equ	0xFEA
  4774                           fsr0l	equ	0xFE9
  4775                           wreg	equ	0xFE8
  4776                           postdec1	equ	0xFE5
  4777                           fsr1l	equ	0xFE1
  4778                           indf2	equ	0xFDF
  4779                           postinc2	equ	0xFDE
  4780                           postdec2	equ	0xFDD
  4781                           plusw2	equ	0xFDB
  4782                           fsr2h	equ	0xFDA
  4783                           fsr2l	equ	0xFD9
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _SYSTEM_Initialize *****************
  4787 ;; Defined at:
  4788 ;;		line 112 in file "mcc_generated_files/mcc.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;		None
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;		None
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4802 ;;      Params:         0       0       0       0       0       0       0
  4803 ;;      Locals:         0       0       0       0       0       0       0
  4804 ;;      Temps:          0       0       0       0       0       0       0
  4805 ;;      Totals:         0       0       0       0       0       0       0
  4806 ;;Total ram usage:        0 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:    6
  4809 ;; This function calls:
  4810 ;;		_EUSART2_Initialize
  4811 ;;		_INTERRUPT_Initialize
  4812 ;;		_OSCILLATOR_Initialize
  4813 ;;		_PIN_MANAGER_Initialize
  4814 ;;		_TMR0_Initialize
  4815 ;; This function is called by:
  4816 ;;		_main
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           	psect	text24
  4821  0011AC                     __ptext24:
  4822                           	opt stack 0
  4823  0011AC                     _SYSTEM_Initialize:
  4824                           	opt stack 24
  4825                           
  4826                           ;mcc.c: 113: OSCILLATOR_Initialize();
  4827                           
  4828                           ;incstack = 0
  4829  0011AC  ECFD  F008         	call	_OSCILLATOR_Initialize	;wreg free
  4830                           
  4831                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  4832  0011B0  ECE0  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  4833                           
  4834                           ;mcc.c: 115: INTERRUPT_Initialize();
  4835  0011B4  EC0B  F009         	call	_INTERRUPT_Initialize	;wreg free
  4836                           
  4837                           ;mcc.c: 117: EUSART2_Initialize();
  4838  0011B8  ECA8  F007         	call	_EUSART2_Initialize	;wreg free
  4839                           
  4840                           ;mcc.c: 118: TMR0_Initialize();
  4841  0011BC  EC20  F008         	call	_TMR0_Initialize	;wreg free
  4842  0011C0  0012               	return		;funcret
  4843  0011C2                     __end_of_SYSTEM_Initialize:
  4844                           	opt stack 0
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           prodh	equ	0xFF4
  4850                           prodl	equ	0xFF3
  4851                           intcon	equ	0xFF2
  4852                           indf0	equ	0xFEF
  4853                           postinc0	equ	0xFEE
  4854                           fsr0h	equ	0xFEA
  4855                           fsr0l	equ	0xFE9
  4856                           wreg	equ	0xFE8
  4857                           postdec1	equ	0xFE5
  4858                           fsr1l	equ	0xFE1
  4859                           indf2	equ	0xFDF
  4860                           postinc2	equ	0xFDE
  4861                           postdec2	equ	0xFDD
  4862                           plusw2	equ	0xFDB
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function _TMR0_Initialize *****************
  4868 ;; Defined at:
  4869 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;		None
  4872 ;; Auto vars:     Size  Location     Type
  4873 ;;		None
  4874 ;; Return value:  Size  Location     Type
  4875 ;;                  2  158[None  ] int 
  4876 ;; Registers used:
  4877 ;;		wreg, status,2, status,0, cstack
  4878 ;; Tracked objects:
  4879 ;;		On entry : 0/0
  4880 ;;		On exit  : 0/0
  4881 ;;		Unchanged: 0/0
  4882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4883 ;;      Params:         0       0       0       0       0       0       0
  4884 ;;      Locals:         0       0       0       0       0       0       0
  4885 ;;      Temps:          2       0       0       0       0       0       0
  4886 ;;      Totals:         2       0       0       0       0       0       0
  4887 ;;Total ram usage:        2 bytes
  4888 ;; Hardware stack levels used:    1
  4889 ;; Hardware stack levels required when called:    5
  4890 ;; This function calls:
  4891 ;;		_TMR0_StartTimer
  4892 ;; This function is called by:
  4893 ;;		_SYSTEM_Initialize
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           	psect	text25
  4898  001040                     __ptext25:
  4899                           	opt stack 0
  4900  001040                     _TMR0_Initialize:
  4901                           	opt stack 24
  4902                           
  4903                           ;tmr0.c: 74: T0CON = 0x98;
  4904                           
  4905                           ;incstack = 0
  4906  001040  0E98               	movlw	152
  4907  001042  6ED5               	movwf	4053,c	;volatile
  4908                           
  4909                           ;tmr0.c: 77: TMR0H = 0xF0;
  4910  001044  0EF0               	movlw	240
  4911  001046  6ED7               	movwf	4055,c	;volatile
  4912                           
  4913                           ;tmr0.c: 80: TMR0L = 0x5F;
  4914  001048  0E5F               	movlw	95
  4915  00104A  6ED6               	movwf	4054,c	;volatile
  4916                           
  4917                           ;tmr0.c: 83: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  4918  00104C  50D6               	movf	4054,w,c	;volatile
  4919  00104E  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  4920  001052  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  4921  001054  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4922  001058  6A1B               	clrf	??_TMR0_Initialize,c
  4923  00105A  101B               	iorwf	??_TMR0_Initialize,w,c
  4924  00105C  6E41               	movwf	_timer0ReloadVal16bit,c
  4925  00105E  501C               	movf	??_TMR0_Initialize+1,w,c
  4926  001060  6E42               	movwf	_timer0ReloadVal16bit+1,c
  4927                           
  4928                           ;tmr0.c: 86: INTCONbits.TMR0IF = 0;
  4929  001062  94F2               	bcf	intcon,2,c	;volatile
  4930                           
  4931                           ;tmr0.c: 89: INTCONbits.TMR0IE = 1;
  4932  001064  8AF2               	bsf	intcon,5,c	;volatile
  4933                           
  4934                           ;tmr0.c: 92: TMR0_StartTimer();
  4935  001066  EC1B  F009         	call	_TMR0_StartTimer	;wreg free
  4936  00106A  0012               	return		;funcret
  4937  00106C                     __end_of_TMR0_Initialize:
  4938                           	opt stack 0
  4939                           tblptru	equ	0xFF8
  4940                           tblptrh	equ	0xFF7
  4941                           tblptrl	equ	0xFF6
  4942                           tablat	equ	0xFF5
  4943                           prodh	equ	0xFF4
  4944                           prodl	equ	0xFF3
  4945                           intcon	equ	0xFF2
  4946                           indf0	equ	0xFEF
  4947                           postinc0	equ	0xFEE
  4948                           fsr0h	equ	0xFEA
  4949                           fsr0l	equ	0xFE9
  4950                           wreg	equ	0xFE8
  4951                           postdec1	equ	0xFE5
  4952                           fsr1l	equ	0xFE1
  4953                           indf2	equ	0xFDF
  4954                           postinc2	equ	0xFDE
  4955                           postdec2	equ	0xFDD
  4956                           plusw2	equ	0xFDB
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function _TMR0_StartTimer *****************
  4962 ;; Defined at:
  4963 ;;		line 95 in file "mcc_generated_files/tmr0.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		None
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4977 ;;      Params:         0       0       0       0       0       0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0
  4979 ;;      Temps:          0       0       0       0       0       0       0
  4980 ;;      Totals:         0       0       0       0       0       0       0
  4981 ;;Total ram usage:        0 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    4
  4984 ;; This function calls:
  4985 ;;		Nothing
  4986 ;; This function is called by:
  4987 ;;		_TMR0_Initialize
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           	psect	text26
  4992  001236                     __ptext26:
  4993                           	opt stack 0
  4994  001236                     _TMR0_StartTimer:
  4995                           	opt stack 24
  4996                           
  4997                           ;tmr0.c: 98: T0CONbits.TMR0ON = 1;
  4998                           
  4999                           ;incstack = 0
  5000  001236  8ED5               	bsf	4053,7,c	;volatile
  5001  001238  0012               	return		;funcret
  5002  00123A                     __end_of_TMR0_StartTimer:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           indf0	equ	0xFEF
  5012                           postinc0	equ	0xFEE
  5013                           fsr0h	equ	0xFEA
  5014                           fsr0l	equ	0xFE9
  5015                           wreg	equ	0xFE8
  5016                           postdec1	equ	0xFE5
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function _PIN_MANAGER_Initialize *****************
  5027 ;; Defined at:
  5028 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;		None               void
  5035 ;; Registers used:
  5036 ;;		wreg, status,2
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5042 ;;      Params:         0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    4
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_SYSTEM_Initialize
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text27
  5057  000DC0                     __ptext27:
  5058                           	opt stack 0
  5059  000DC0                     _PIN_MANAGER_Initialize:
  5060                           	opt stack 25
  5061                           
  5062                           ;pin_manager.c: 51: LATB = 0x0;
  5063                           
  5064                           ;incstack = 0
  5065  000DC0  0E00               	movlw	0
  5066  000DC2  6E8A               	movwf	3978,c	;volatile
  5067                           
  5068                           ;pin_manager.c: 52: LATA = 0x0;
  5069  000DC4  0E00               	movlw	0
  5070  000DC6  6E89               	movwf	3977,c	;volatile
  5071                           
  5072                           ;pin_manager.c: 53: ANSELE = 0x7;
  5073  000DC8  0E07               	movlw	7
  5074  000DCA  010F               	movlb	15	; () banked
  5075  000DCC  6F3C               	movwf	60,b	;volatile
  5076                           
  5077                           ;pin_manager.c: 54: LATE = 0x0;
  5078  000DCE  0E00               	movlw	0
  5079  000DD0  6E8D               	movwf	3981,c	;volatile
  5080                           
  5081                           ;pin_manager.c: 55: LATD = 0x0;
  5082  000DD2  0E00               	movlw	0
  5083  000DD4  6E8C               	movwf	3980,c	;volatile
  5084                           
  5085                           ;pin_manager.c: 56: LATC = 0x0;
  5086  000DD6  0E00               	movlw	0
  5087  000DD8  6E8B               	movwf	3979,c	;volatile
  5088                           
  5089                           ;pin_manager.c: 57: ANSELA = 0x2F;
  5090  000DDA  0E2F               	movlw	47
  5091  000DDC  010F               	movlb	15	; () banked
  5092  000DDE  6F38               	movwf	56,b	;volatile
  5093                           
  5094                           ;pin_manager.c: 58: ANSELB = 0x3F;
  5095  000DE0  0E3F               	movlw	63
  5096  000DE2  010F               	movlb	15	; () banked
  5097  000DE4  6F39               	movwf	57,b	;volatile
  5098                           
  5099                           ;pin_manager.c: 59: ANSELC = 0xEC;
  5100  000DE6  0EEC               	movlw	236
  5101  000DE8  010F               	movlb	15	; () banked
  5102  000DEA  6F3A               	movwf	58,b	;volatile
  5103                           
  5104                           ;pin_manager.c: 60: ANSELD = 0x3F;
  5105  000DEC  0E3F               	movlw	63
  5106  000DEE  010F               	movlb	15	; () banked
  5107  000DF0  6F3B               	movwf	59,b	;volatile
  5108                           
  5109                           ;pin_manager.c: 61: WPUB = 0xFC;
  5110  000DF2  0EFC               	movlw	252
  5111  000DF4  6E61               	movwf	3937,c	;volatile
  5112                           
  5113                           ;pin_manager.c: 62: TRISD = 0xF2;
  5114  000DF6  0EF2               	movlw	242
  5115  000DF8  6E95               	movwf	3989,c	;volatile
  5116                           
  5117                           ;pin_manager.c: 63: TRISE = 0x7;
  5118  000DFA  0E07               	movlw	7
  5119  000DFC  6E96               	movwf	3990,c	;volatile
  5120                           
  5121                           ;pin_manager.c: 64: TRISB = 0xC4;
  5122  000DFE  0EC4               	movlw	196
  5123  000E00  6E93               	movwf	3987,c	;volatile
  5124                           
  5125                           ;pin_manager.c: 65: TRISC = 0xD4;
  5126  000E02  0ED4               	movlw	212
  5127  000E04  6E94               	movwf	3988,c	;volatile
  5128                           
  5129                           ;pin_manager.c: 66: TRISA = 0x37;
  5130  000E06  0E37               	movlw	55
  5131  000E08  6E92               	movwf	3986,c	;volatile
  5132                           
  5133                           ; BSR set to: 15
  5134                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  5135  000E0A  9EF1               	bcf	intcon2,7,c	;volatile
  5136                           
  5137                           ; BSR set to: 15
  5138                           ;pin_manager.c: 72: INTCONbits.RBIE = 0;
  5139  000E0C  96F2               	bcf	intcon,3,c	;volatile
  5140                           
  5141                           ; BSR set to: 15
  5142  000E0E  0012               	return		;funcret
  5143  000E10                     __end_of_PIN_MANAGER_Initialize:
  5144                           	opt stack 0
  5145                           tblptru	equ	0xFF8
  5146                           tblptrh	equ	0xFF7
  5147                           tblptrl	equ	0xFF6
  5148                           tablat	equ	0xFF5
  5149                           prodh	equ	0xFF4
  5150                           prodl	equ	0xFF3
  5151                           intcon	equ	0xFF2
  5152                           intcon2	equ	0xFF1
  5153                           indf0	equ	0xFEF
  5154                           postinc0	equ	0xFEE
  5155                           fsr0h	equ	0xFEA
  5156                           fsr0l	equ	0xFE9
  5157                           wreg	equ	0xFE8
  5158                           postdec1	equ	0xFE5
  5159                           fsr1l	equ	0xFE1
  5160                           indf2	equ	0xFDF
  5161                           postinc2	equ	0xFDE
  5162                           postdec2	equ	0xFDD
  5163                           plusw2	equ	0xFDB
  5164                           fsr2h	equ	0xFDA
  5165                           fsr2l	equ	0xFD9
  5166                           status	equ	0xFD8
  5167                           
  5168 ;; *************** function _OSCILLATOR_Initialize *****************
  5169 ;; Defined at:
  5170 ;;		line 121 in file "mcc_generated_files/mcc.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;		None
  5173 ;; Auto vars:     Size  Location     Type
  5174 ;;		None
  5175 ;; Return value:  Size  Location     Type
  5176 ;;		None               void
  5177 ;; Registers used:
  5178 ;;		wreg, status,2
  5179 ;; Tracked objects:
  5180 ;;		On entry : 0/0
  5181 ;;		On exit  : 0/0
  5182 ;;		Unchanged: 0/0
  5183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5184 ;;      Params:         0       0       0       0       0       0       0
  5185 ;;      Locals:         0       0       0       0       0       0       0
  5186 ;;      Temps:          0       0       0       0       0       0       0
  5187 ;;      Totals:         0       0       0       0       0       0       0
  5188 ;;Total ram usage:        0 bytes
  5189 ;; Hardware stack levels used:    1
  5190 ;; Hardware stack levels required when called:    4
  5191 ;; This function calls:
  5192 ;;		Nothing
  5193 ;; This function is called by:
  5194 ;;		_SYSTEM_Initialize
  5195 ;; This function uses a non-reentrant model
  5196 ;;
  5197                           
  5198                           	psect	text28
  5199  0011FA                     __ptext28:
  5200                           	opt stack 0
  5201  0011FA                     _OSCILLATOR_Initialize:
  5202                           	opt stack 25
  5203                           
  5204                           ;mcc.c: 123: OSCCON = 0x70;
  5205                           
  5206                           ; BSR set to: 15
  5207                           ;incstack = 0
  5208  0011FA  0E70               	movlw	112
  5209  0011FC  6ED3               	movwf	4051,c	;volatile
  5210                           
  5211                           ;mcc.c: 125: OSCCON2 = 0x04;
  5212  0011FE  0E04               	movlw	4
  5213  001200  6ED2               	movwf	4050,c	;volatile
  5214                           
  5215                           ;mcc.c: 127: OSCTUNE = 0x00;
  5216  001202  0E00               	movlw	0
  5217  001204  6E9B               	movwf	3995,c	;volatile
  5218  001206  0012               	return		;funcret
  5219  001208                     __end_of_OSCILLATOR_Initialize:
  5220                           	opt stack 0
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           intcon	equ	0xFF2
  5228                           intcon2	equ	0xFF1
  5229                           indf0	equ	0xFEF
  5230                           postinc0	equ	0xFEE
  5231                           fsr0h	equ	0xFEA
  5232                           fsr0l	equ	0xFE9
  5233                           wreg	equ	0xFE8
  5234                           postdec1	equ	0xFE5
  5235                           fsr1l	equ	0xFE1
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           plusw2	equ	0xFDB
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _INTERRUPT_Initialize *****************
  5245 ;; Defined at:
  5246 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		None
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5260 ;;      Params:         0       0       0       0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0
  5263 ;;      Totals:         0       0       0       0       0       0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    4
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_SYSTEM_Initialize
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text29
  5275  001216                     __ptext29:
  5276                           	opt stack 0
  5277  001216                     _INTERRUPT_Initialize:
  5278                           	opt stack 25
  5279                           
  5280                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  5281                           
  5282                           ;incstack = 0
  5283  001216  9ED0               	bcf	4048,7,c	;volatile
  5284                           
  5285                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  5286  001218  9AA5               	bcf	4005,5,c	;volatile
  5287                           
  5288                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  5289  00121A  98A5               	bcf	4005,4,c	;volatile
  5290                           
  5291                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  5292  00121C  9A9F               	bcf	3999,5,c	;volatile
  5293                           
  5294                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  5295  00121E  989F               	bcf	3999,4,c	;volatile
  5296  001220  0012               	return		;funcret
  5297  001222                     __end_of_INTERRUPT_Initialize:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           prodh	equ	0xFF4
  5304                           prodl	equ	0xFF3
  5305                           intcon	equ	0xFF2
  5306                           intcon2	equ	0xFF1
  5307                           indf0	equ	0xFEF
  5308                           postinc0	equ	0xFEE
  5309                           fsr0h	equ	0xFEA
  5310                           fsr0l	equ	0xFE9
  5311                           wreg	equ	0xFE8
  5312                           postdec1	equ	0xFE5
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           plusw2	equ	0xFDB
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _EUSART2_Initialize *****************
  5323 ;; Defined at:
  5324 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;		None               void
  5331 ;; Registers used:
  5332 ;;		wreg, status,2
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5338 ;;      Params:         0       0       0       0       0       0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0
  5341 ;;      Totals:         0       0       0       0       0       0       0
  5342 ;;Total ram usage:        0 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    4
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_SYSTEM_Initialize
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text30
  5353  000F50                     __ptext30:
  5354                           	opt stack 0
  5355  000F50                     _EUSART2_Initialize:
  5356                           	opt stack 25
  5357                           
  5358                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  5359                           
  5360                           ;incstack = 0
  5361  000F50  9AA3               	bcf	4003,5,c	;volatile
  5362                           
  5363                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  5364  000F52  98A3               	bcf	4003,4,c	;volatile
  5365                           
  5366                           ;eusart2.c: 84: BAUD2CON = 0x48;
  5367  000F54  0E48               	movlw	72
  5368  000F56  6E70               	movwf	3952,c	;volatile
  5369                           
  5370                           ;eusart2.c: 87: RC2STA = 0x90;
  5371  000F58  0E90               	movlw	144
  5372  000F5A  6E71               	movwf	3953,c	;volatile
  5373                           
  5374                           ;eusart2.c: 90: TX2STA = 0x26;
  5375  000F5C  0E26               	movlw	38
  5376  000F5E  6E72               	movwf	3954,c	;volatile
  5377                           
  5378                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  5379  000F60  0EA0               	movlw	160
  5380  000F62  6E75               	movwf	3957,c	;volatile
  5381                           
  5382                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  5383  000F64  0E01               	movlw	1
  5384  000F66  6E76               	movwf	3958,c	;volatile
  5385                           
  5386                           ;eusart2.c: 100: eusart2TxHead = 0;
  5387  000F68  0E00               	movlw	0
  5388  000F6A  6E38               	movwf	_eusart2TxHead,c
  5389                           
  5390                           ;eusart2.c: 101: eusart2TxTail = 0;
  5391  000F6C  0E00               	movlw	0
  5392  000F6E  6E39               	movwf	_eusart2TxTail,c
  5393                           
  5394                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  5395  000F70  0E08               	movlw	8
  5396  000F72  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5397                           
  5398                           ;eusart2.c: 104: eusart2RxHead = 0;
  5399  000F74  0E00               	movlw	0
  5400  000F76  6E36               	movwf	_eusart2RxHead,c
  5401                           
  5402                           ;eusart2.c: 105: eusart2RxTail = 0;
  5403  000F78  0E00               	movlw	0
  5404  000F7A  6E37               	movwf	_eusart2RxTail,c
  5405                           
  5406                           ;eusart2.c: 106: eusart2RxCount = 0;
  5407  000F7C  0E00               	movlw	0
  5408  000F7E  6E35               	movwf	_eusart2RxCount,c	;volatile
  5409                           
  5410                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  5411  000F80  8AA3               	bsf	4003,5,c	;volatile
  5412  000F82  0012               	return		;funcret
  5413  000F84                     __end_of_EUSART2_Initialize:
  5414                           	opt stack 0
  5415                           tblptru	equ	0xFF8
  5416                           tblptrh	equ	0xFF7
  5417                           tblptrl	equ	0xFF6
  5418                           tablat	equ	0xFF5
  5419                           prodh	equ	0xFF4
  5420                           prodl	equ	0xFF3
  5421                           intcon	equ	0xFF2
  5422                           intcon2	equ	0xFF1
  5423                           indf0	equ	0xFEF
  5424                           postinc0	equ	0xFEE
  5425                           fsr0h	equ	0xFEA
  5426                           fsr0l	equ	0xFE9
  5427                           wreg	equ	0xFE8
  5428                           postdec1	equ	0xFE5
  5429                           fsr1l	equ	0xFE1
  5430                           indf2	equ	0xFDF
  5431                           postinc2	equ	0xFDE
  5432                           postdec2	equ	0xFDD
  5433                           plusw2	equ	0xFDB
  5434                           fsr2h	equ	0xFDA
  5435                           fsr2l	equ	0xFD9
  5436                           status	equ	0xFD8
  5437                           
  5438 ;; *************** function _NokiaStart *****************
  5439 ;; Defined at:
  5440 ;;		line 25 in file "NokiaLCD.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;		None
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;		None
  5445 ;; Return value:  Size  Location     Type
  5446 ;;		None               void
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5454 ;;      Params:         0       0       0       0       0       0       0
  5455 ;;      Locals:         0       0       0       0       0       0       0
  5456 ;;      Temps:          0       0       0       0       0       0       0
  5457 ;;      Totals:         0       0       0       0       0       0       0
  5458 ;;Total ram usage:        0 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    7
  5461 ;; This function calls:
  5462 ;;		_Delay
  5463 ;;		_LCDwrite
  5464 ;;		_SPI1_Initialize
  5465 ;;		_clearLcd
  5466 ;; This function is called by:
  5467 ;;		_main
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text31
  5472  000A7A                     __ptext31:
  5473                           	opt stack 0
  5474  000A7A                     _NokiaStart:
  5475                           	opt stack 23
  5476                           
  5477                           ;NokiaLCD.c: 26: TRISBbits.TRISB6 = 0;
  5478                           
  5479                           ;incstack = 0
  5480  000A7A  9C93               	bcf	3987,6,c	;volatile
  5481                           
  5482                           ;NokiaLCD.c: 27: do { TRISD0 = 0; } while(0);
  5483  000A7C  9095               	bcf	3989,0,c	;volatile
  5484                           
  5485                           ;NokiaLCD.c: 28: do { TRISD3 = 0; } while(0);
  5486  000A7E  9695               	bcf	3989,3,c	;volatile
  5487                           
  5488                           ;NokiaLCD.c: 29: do { TRISD2 = 0; } while(0);
  5489  000A80  9495               	bcf	3989,2,c	;volatile
  5490                           
  5491                           ;NokiaLCD.c: 30: do { LATD0 = 1; } while(0);
  5492  000A82  808C               	bsf	3980,0,c	;volatile
  5493                           
  5494                           ;NokiaLCD.c: 31: SPI1_Initialize();
  5495  000A84  EC04  F009         	call	_SPI1_Initialize	;wreg free
  5496                           
  5497                           ;NokiaLCD.c: 32: LATBbits.LATB6 = 1;
  5498  000A88  8C8A               	bsf	3978,6,c	;volatile
  5499                           
  5500                           ;NokiaLCD.c: 33: Delay(100);
  5501  000A8A  0E64               	movlw	100
  5502  000A8C  6E1B               	movwf	Delay@wait,c
  5503  000A8E  0E00               	movlw	0
  5504  000A90  6E1C               	movwf	Delay@wait+1,c
  5505  000A92  0E00               	movlw	0
  5506  000A94  6E1D               	movwf	Delay@wait+2,c
  5507  000A96  0E00               	movlw	0
  5508  000A98  6E1E               	movwf	Delay@wait+3,c
  5509  000A9A  EC08  F007         	call	_Delay	;wreg free
  5510                           
  5511                           ;NokiaLCD.c: 34: LATBbits.LATB6 = 0;
  5512  000A9E  9C8A               	bcf	3978,6,c	;volatile
  5513                           
  5514                           ;NokiaLCD.c: 35: Delay(100);
  5515  000AA0  0E64               	movlw	100
  5516  000AA2  6E1B               	movwf	Delay@wait,c
  5517  000AA4  0E00               	movlw	0
  5518  000AA6  6E1C               	movwf	Delay@wait+1,c
  5519  000AA8  0E00               	movlw	0
  5520  000AAA  6E1D               	movwf	Delay@wait+2,c
  5521  000AAC  0E00               	movlw	0
  5522  000AAE  6E1E               	movwf	Delay@wait+3,c
  5523  000AB0  EC08  F007         	call	_Delay	;wreg free
  5524                           
  5525                           ;NokiaLCD.c: 36: LATBbits.LATB6 = 1;
  5526  000AB4  8C8A               	bsf	3978,6,c	;volatile
  5527                           
  5528                           ;NokiaLCD.c: 37: LCDwrite(1, 0x21);
  5529  000AB6  0E21               	movlw	33
  5530  000AB8  6E1C               	movwf	LCDwrite@data,c
  5531  000ABA  0E01               	movlw	1
  5532  000ABC  ECC9  F008         	call	_LCDwrite
  5533                           
  5534                           ;NokiaLCD.c: 38: LCDwrite(1, 0xC8);
  5535  000AC0  0EC8               	movlw	200
  5536  000AC2  6E1C               	movwf	LCDwrite@data,c
  5537  000AC4  0E01               	movlw	1
  5538  000AC6  ECC9  F008         	call	_LCDwrite
  5539                           
  5540                           ;NokiaLCD.c: 39: LCDwrite(1, 0x04 | !!((66-2) & (1u << 6)));
  5541  000ACA  0E05               	movlw	5
  5542  000ACC  6E1C               	movwf	LCDwrite@data,c
  5543  000ACE  0E01               	movlw	1
  5544  000AD0  ECC9  F008         	call	_LCDwrite
  5545                           
  5546                           ;NokiaLCD.c: 40: LCDwrite(1, 0x40 | ((66-2) & ((1u << 6) - 1)));
  5547  000AD4  0E40               	movlw	64
  5548  000AD6  6E1C               	movwf	LCDwrite@data,c
  5549  000AD8  0E01               	movlw	1
  5550  000ADA  ECC9  F008         	call	_LCDwrite
  5551                           
  5552                           ;NokiaLCD.c: 42: LCDwrite(1, 0x14);
  5553  000ADE  0E14               	movlw	20
  5554  000AE0  6E1C               	movwf	LCDwrite@data,c
  5555  000AE2  0E01               	movlw	1
  5556  000AE4  ECC9  F008         	call	_LCDwrite
  5557                           
  5558                           ;NokiaLCD.c: 43: LCDwrite(1, 0x20);
  5559  000AE8  0E20               	movlw	32
  5560  000AEA  6E1C               	movwf	LCDwrite@data,c
  5561  000AEC  0E01               	movlw	1
  5562  000AEE  ECC9  F008         	call	_LCDwrite
  5563                           
  5564                           ;NokiaLCD.c: 44: LCDwrite(1, 0x08);
  5565  000AF2  0E08               	movlw	8
  5566  000AF4  6E1C               	movwf	LCDwrite@data,c
  5567  000AF6  0E01               	movlw	1
  5568  000AF8  ECC9  F008         	call	_LCDwrite
  5569                           
  5570                           ;NokiaLCD.c: 45: LCDwrite(1, 0x0C);
  5571  000AFC  0E0C               	movlw	12
  5572  000AFE  6E1C               	movwf	LCDwrite@data,c
  5573  000B00  0E01               	movlw	1
  5574  000B02  ECC9  F008         	call	_LCDwrite
  5575                           
  5576                           ;NokiaLCD.c: 46: clearLcd();
  5577  000B06  EC76  F008         	call	_clearLcd	;wreg free
  5578  000B0A  0012               	return		;funcret
  5579  000B0C                     __end_of_NokiaStart:
  5580                           	opt stack 0
  5581                           tblptru	equ	0xFF8
  5582                           tblptrh	equ	0xFF7
  5583                           tblptrl	equ	0xFF6
  5584                           tablat	equ	0xFF5
  5585                           prodh	equ	0xFF4
  5586                           prodl	equ	0xFF3
  5587                           intcon	equ	0xFF2
  5588                           intcon2	equ	0xFF1
  5589                           indf0	equ	0xFEF
  5590                           postinc0	equ	0xFEE
  5591                           fsr0h	equ	0xFEA
  5592                           fsr0l	equ	0xFE9
  5593                           wreg	equ	0xFE8
  5594                           postdec1	equ	0xFE5
  5595                           fsr1l	equ	0xFE1
  5596                           indf2	equ	0xFDF
  5597                           postinc2	equ	0xFDE
  5598                           postdec2	equ	0xFDD
  5599                           plusw2	equ	0xFDB
  5600                           fsr2h	equ	0xFDA
  5601                           fsr2l	equ	0xFD9
  5602                           status	equ	0xFD8
  5603                           
  5604 ;; *************** function _clearLcd *****************
  5605 ;; Defined at:
  5606 ;;		line 69 in file "NokiaLCD.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;  res             2   29[COMRAM] int 
  5611 ;; Return value:  Size  Location     Type
  5612 ;;		None               void
  5613 ;; Registers used:
  5614 ;;		wreg, status,2, status,0, cstack
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5620 ;;      Params:         0       0       0       0       0       0       0
  5621 ;;      Locals:         2       0       0       0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0       0       0
  5623 ;;      Totals:         2       0       0       0       0       0       0
  5624 ;;Total ram usage:        2 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    6
  5627 ;; This function calls:
  5628 ;;		_LCDwrite
  5629 ;; This function is called by:
  5630 ;;		_main
  5631 ;;		_NokiaStart
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text32
  5636  0010EC                     __ptext32:
  5637                           	opt stack 0
  5638  0010EC                     _clearLcd:
  5639                           	opt stack 24
  5640                           
  5641                           ;NokiaLCD.c: 70: int res;
  5642                           ;NokiaLCD.c: 71: for(res=0;res<504;res++){
  5643                           
  5644                           ;incstack = 0
  5645  0010EC  0E00               	movlw	0
  5646  0010EE  6E1F               	movwf	clearLcd@res+1,c
  5647  0010F0  0E00               	movlw	0
  5648  0010F2  6E1E               	movwf	clearLcd@res,c
  5649  0010F4                     l2459:
  5650  0010F4  BE1F               	btfsc	clearLcd@res+1,7,c
  5651  0010F6  D006               	goto	l2463
  5652  0010F8  0EF8               	movlw	248
  5653  0010FA  5C1E               	subwf	clearLcd@res,w,c
  5654  0010FC  0E01               	movlw	1
  5655  0010FE  581F               	subwfb	clearLcd@res+1,w,c
  5656  001100  B0D8               	btfsc	status,0,c
  5657  001102  0012               	return	
  5658  001104                     l2463:
  5659                           
  5660                           ;NokiaLCD.c: 72: LCDwrite(0, 0x00);
  5661  001104  0E00               	movlw	0
  5662  001106  6E1C               	movwf	LCDwrite@data,c
  5663  001108  0E00               	movlw	0
  5664  00110A  ECC9  F008         	call	_LCDwrite
  5665  00110E  4A1E               	infsnz	clearLcd@res,f,c
  5666  001110  2A1F               	incf	clearLcd@res+1,f,c
  5667  001112  D7F0               	goto	l2459
  5668  001114                     __end_of_clearLcd:
  5669                           	opt stack 0
  5670                           tblptru	equ	0xFF8
  5671                           tblptrh	equ	0xFF7
  5672                           tblptrl	equ	0xFF6
  5673                           tablat	equ	0xFF5
  5674                           prodh	equ	0xFF4
  5675                           prodl	equ	0xFF3
  5676                           intcon	equ	0xFF2
  5677                           intcon2	equ	0xFF1
  5678                           indf0	equ	0xFEF
  5679                           postinc0	equ	0xFEE
  5680                           fsr0h	equ	0xFEA
  5681                           fsr0l	equ	0xFE9
  5682                           wreg	equ	0xFE8
  5683                           postdec1	equ	0xFE5
  5684                           fsr1l	equ	0xFE1
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           plusw2	equ	0xFDB
  5689                           fsr2h	equ	0xFDA
  5690                           fsr2l	equ	0xFD9
  5691                           status	equ	0xFD8
  5692                           
  5693 ;; *************** function _LCDwrite *****************
  5694 ;; Defined at:
  5695 ;;		line 50 in file "NokiaLCD.c"
  5696 ;; Parameters:    Size  Location     Type
  5697 ;;  mode            1    wreg     unsigned char 
  5698 ;;  data            1   27[COMRAM] unsigned char 
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  mode            1   28[COMRAM] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;		None               void
  5703 ;; Registers used:
  5704 ;;		wreg, status,2, cstack
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5710 ;;      Params:         1       0       0       0       0       0       0
  5711 ;;      Locals:         1       0       0       0       0       0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0
  5713 ;;      Totals:         2       0       0       0       0       0       0
  5714 ;;Total ram usage:        2 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    5
  5717 ;; This function calls:
  5718 ;;		_SPI1_Exchange8bit
  5719 ;; This function is called by:
  5720 ;;		_NokiaStart
  5721 ;;		_clearLcd
  5722 ;;		_blackLcd
  5723 ;;		_gotoXy
  5724 ;;		_LcdCharacter
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text33
  5729  001192                     __ptext33:
  5730                           	opt stack 0
  5731  001192                     _LCDwrite:
  5732                           	opt stack 24
  5733                           
  5734                           ;incstack = 0
  5735                           ;LCDwrite@mode stored from wreg
  5736  001192  6E1D               	movwf	LCDwrite@mode,c
  5737                           
  5738                           ;NokiaLCD.c: 51: if(mode){
  5739  001194  501D               	movf	LCDwrite@mode,w,c
  5740  001196  B4D8               	btfsc	status,2,c
  5741  001198  D002               	goto	l684
  5742                           
  5743                           ;NokiaLCD.c: 52: do { LATD3 = 0; } while(0);
  5744  00119A  968C               	bcf	3980,3,c	;volatile
  5745                           
  5746                           ;NokiaLCD.c: 53: }
  5747  00119C  D001               	goto	l686
  5748  00119E                     l684:
  5749  00119E  868C               	bsf	3980,3,c	;volatile
  5750  0011A0                     l686:
  5751  0011A0  908C               	bcf	3980,0,c	;volatile
  5752                           
  5753                           ;NokiaLCD.c: 58: SPI1_Exchange8bit(data);
  5754  0011A2  501C               	movf	LCDwrite@data,w,c
  5755  0011A4  ECF5  F008         	call	_SPI1_Exchange8bit
  5756                           
  5757                           ;NokiaLCD.c: 59: do { LATD0 = 1; } while(0);
  5758  0011A8  808C               	bsf	3980,0,c	;volatile
  5759  0011AA  0012               	return	
  5760  0011AC                     __end_of_LCDwrite:
  5761                           	opt stack 0
  5762                           tblptru	equ	0xFF8
  5763                           tblptrh	equ	0xFF7
  5764                           tblptrl	equ	0xFF6
  5765                           tablat	equ	0xFF5
  5766                           prodh	equ	0xFF4
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           intcon2	equ	0xFF1
  5770                           indf0	equ	0xFEF
  5771                           postinc0	equ	0xFEE
  5772                           fsr0h	equ	0xFEA
  5773                           fsr0l	equ	0xFE9
  5774                           wreg	equ	0xFE8
  5775                           postdec1	equ	0xFE5
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           plusw2	equ	0xFDB
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _SPI1_Exchange8bit *****************
  5786 ;; Defined at:
  5787 ;;		line 78 in file "mcc_generated_files/spi1.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  data            1    wreg     unsigned char 
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;  data            1   26[COMRAM] unsigned char 
  5792 ;; Return value:  Size  Location     Type
  5793 ;;                  1    wreg      unsigned char 
  5794 ;; Registers used:
  5795 ;;		wreg, status,2
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5801 ;;      Params:         0       0       0       0       0       0       0
  5802 ;;      Locals:         1       0       0       0       0       0       0
  5803 ;;      Temps:          0       0       0       0       0       0       0
  5804 ;;      Totals:         1       0       0       0       0       0       0
  5805 ;;Total ram usage:        1 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; Hardware stack levels required when called:    4
  5808 ;; This function calls:
  5809 ;;		Nothing
  5810 ;; This function is called by:
  5811 ;;		_LCDwrite
  5812 ;;		_SPI1_Exchange8bitBuffer
  5813 ;; This function uses a non-reentrant model
  5814 ;;
  5815                           
  5816                           	psect	text34
  5817  0011EA                     __ptext34:
  5818                           	opt stack 0
  5819  0011EA                     _SPI1_Exchange8bit:
  5820                           	opt stack 24
  5821                           
  5822                           ;incstack = 0
  5823                           ;SPI1_Exchange8bit@data stored from wreg
  5824  0011EA  6E1B               	movwf	SPI1_Exchange8bit@data,c
  5825                           
  5826                           ;spi1.c: 81: SSP1CON1bits.WCOL = 0;
  5827  0011EC  9EC6               	bcf	4038,7,c	;volatile
  5828                           
  5829                           ;spi1.c: 83: SSP1BUF = data;
  5830  0011EE  C01B  FFC9         	movff	SPI1_Exchange8bit@data,4041	;volatile
  5831  0011F2                     l188:
  5832  0011F2  A0C7               	btfss	4039,0,c	;volatile
  5833  0011F4  D7FE               	goto	l188
  5834                           
  5835                           ;spi1.c: 87: }
  5836                           ;spi1.c: 89: return (SSP1BUF);
  5837  0011F6  50C9               	movf	4041,w,c	;volatile
  5838  0011F8  0012               	return		;funcret
  5839  0011FA                     __end_of_SPI1_Exchange8bit:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           intcon	equ	0xFF2
  5848                           intcon2	equ	0xFF1
  5849                           indf0	equ	0xFEF
  5850                           postinc0	equ	0xFEE
  5851                           fsr0h	equ	0xFEA
  5852                           fsr0l	equ	0xFE9
  5853                           wreg	equ	0xFE8
  5854                           postdec1	equ	0xFE5
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           plusw2	equ	0xFDB
  5860                           fsr2h	equ	0xFDA
  5861                           fsr2l	equ	0xFD9
  5862                           status	equ	0xFD8
  5863                           
  5864 ;; *************** function _SPI1_Initialize *****************
  5865 ;; Defined at:
  5866 ;;		line 64 in file "mcc_generated_files/spi1.c"
  5867 ;; Parameters:    Size  Location     Type
  5868 ;;		None
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;		None
  5871 ;; Return value:  Size  Location     Type
  5872 ;;		None               void
  5873 ;; Registers used:
  5874 ;;		wreg, status,2
  5875 ;; Tracked objects:
  5876 ;;		On entry : 0/0
  5877 ;;		On exit  : 0/0
  5878 ;;		Unchanged: 0/0
  5879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5880 ;;      Params:         0       0       0       0       0       0       0
  5881 ;;      Locals:         0       0       0       0       0       0       0
  5882 ;;      Temps:          0       0       0       0       0       0       0
  5883 ;;      Totals:         0       0       0       0       0       0       0
  5884 ;;Total ram usage:        0 bytes
  5885 ;; Hardware stack levels used:    1
  5886 ;; Hardware stack levels required when called:    4
  5887 ;; This function calls:
  5888 ;;		Nothing
  5889 ;; This function is called by:
  5890 ;;		_NokiaStart
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text35
  5895  001208                     __ptext35:
  5896                           	opt stack 0
  5897  001208                     _SPI1_Initialize:
  5898                           	opt stack 25
  5899                           
  5900                           ;spi1.c: 69: SSP1STAT = 0x80;
  5901                           
  5902                           ;incstack = 0
  5903  001208  0E80               	movlw	128
  5904  00120A  6EC7               	movwf	4039,c	;volatile
  5905                           
  5906                           ;spi1.c: 72: SSP1CON1 = 0x30;
  5907  00120C  0E30               	movlw	48
  5908  00120E  6EC6               	movwf	4038,c	;volatile
  5909                           
  5910                           ;spi1.c: 75: SSP1ADD = 0x00;
  5911  001210  0E00               	movlw	0
  5912  001212  6EC8               	movwf	4040,c	;volatile
  5913  001214  0012               	return		;funcret
  5914  001216                     __end_of_SPI1_Initialize:
  5915                           	opt stack 0
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           intcon	equ	0xFF2
  5923                           intcon2	equ	0xFF1
  5924                           indf0	equ	0xFEF
  5925                           postinc0	equ	0xFEE
  5926                           fsr0h	equ	0xFEA
  5927                           fsr0l	equ	0xFE9
  5928                           wreg	equ	0xFE8
  5929                           postdec1	equ	0xFE5
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           plusw2	equ	0xFDB
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939 ;; *************** function _Delay *****************
  5940 ;; Defined at:
  5941 ;;		line 12 in file "Functions.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;  wait            4   26[COMRAM] long 
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;  i               4   31[COMRAM] long 
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg, status,2, status,0
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5955 ;;      Params:         4       0       0       0       0       0       0
  5956 ;;      Locals:         4       0       0       0       0       0       0
  5957 ;;      Temps:          1       0       0       0       0       0       0
  5958 ;;      Totals:         9       0       0       0       0       0       0
  5959 ;;Total ram usage:        9 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:    4
  5962 ;; This function calls:
  5963 ;;		Nothing
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;;		_respondECU
  5967 ;;		_Precharge
  5968 ;;		_NokiaStart
  5969 ;; This function uses a non-reentrant model
  5970 ;;
  5971                           
  5972                           	psect	text36
  5973  000E10                     __ptext36:
  5974                           	opt stack 0
  5975  000E10                     _Delay:
  5976                           	opt stack 24
  5977                           
  5978                           ;Functions.c: 13: long int i = 0;
  5979                           
  5980                           ;incstack = 0
  5981  000E10  0E00               	movlw	0
  5982  000E12  6E20               	movwf	Delay@i,c
  5983  000E14  0E00               	movlw	0
  5984  000E16  6E21               	movwf	Delay@i+1,c
  5985  000E18  0E00               	movlw	0
  5986  000E1A  6E22               	movwf	Delay@i+2,c
  5987  000E1C  0E00               	movlw	0
  5988  000E1E  6E23               	movwf	Delay@i+3,c
  5989                           
  5990                           ;Functions.c: 14: for (; wait > i; i++) {
  5991  000E20  D00E               	goto	l3105
  5992  000E22                     l3101:
  5993                           
  5994                           ;Functions.c: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
  5995  000E22  0E06               	movlw	6
  5996  000E24  6E1F               	movwf	??_Delay& (0+255),c
  5997  000E26  0E30               	movlw	48
  5998  000E28                     u2437:
  5999  000E28  2EE8               	decfsz	wreg,f,c
  6000  000E2A  D7FE               	goto	u2437
  6001  000E2C  2E1F               	decfsz	??_Delay& (0+255),f,c
  6002  000E2E  D7FC               	goto	u2437
  6003  000E30  D000               	nop2	
  6004  000E32  0E01               	movlw	1
  6005  000E34  2620               	addwf	Delay@i,f,c
  6006  000E36  0E00               	movlw	0
  6007  000E38  2221               	addwfc	Delay@i+1,f,c
  6008  000E3A  2222               	addwfc	Delay@i+2,f,c
  6009  000E3C  2223               	addwfc	Delay@i+3,f,c
  6010  000E3E                     l3105:
  6011  000E3E  501B               	movf	Delay@wait,w,c
  6012  000E40  5C20               	subwf	Delay@i,w,c
  6013  000E42  501C               	movf	Delay@wait+1,w,c
  6014  000E44  5821               	subwfb	Delay@i+1,w,c
  6015  000E46  501D               	movf	Delay@wait+2,w,c
  6016  000E48  5822               	subwfb	Delay@i+2,w,c
  6017  000E4A  5023               	movf	Delay@i+3,w,c
  6018  000E4C  0A80               	xorlw	128
  6019  000E4E  6E1F               	movwf	??_Delay& (0+255),c
  6020  000E50  501E               	movf	Delay@wait+3,w,c
  6021  000E52  0A80               	xorlw	128
  6022  000E54  581F               	subwfb	??_Delay& (0+255),w,c
  6023  000E56  B0D8               	btfsc	status,0,c
  6024  000E58  0012               	return	
  6025  000E5A  D7E3               	goto	l3101
  6026  000E5C                     __end_of_Delay:
  6027                           	opt stack 0
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon	equ	0xFF2
  6035                           intcon2	equ	0xFF1
  6036                           indf0	equ	0xFEF
  6037                           postinc0	equ	0xFEE
  6038                           fsr0h	equ	0xFEA
  6039                           fsr0l	equ	0xFE9
  6040                           wreg	equ	0xFE8
  6041                           postdec1	equ	0xFE5
  6042                           fsr1l	equ	0xFE1
  6043                           indf2	equ	0xFDF
  6044                           postinc2	equ	0xFDE
  6045                           postdec2	equ	0xFDD
  6046                           plusw2	equ	0xFDB
  6047                           fsr2h	equ	0xFDA
  6048                           fsr2l	equ	0xFD9
  6049                           status	equ	0xFD8
  6050                           
  6051 ;; *************** function _INTERRUPT_InterruptManager *****************
  6052 ;; Defined at:
  6053 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6054 ;; Parameters:    Size  Location     Type
  6055 ;;		None
  6056 ;; Auto vars:     Size  Location     Type
  6057 ;;		None
  6058 ;; Return value:  Size  Location     Type
  6059 ;;		None               void
  6060 ;; Registers used:
  6061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6062 ;; Tracked objects:
  6063 ;;		On entry : 0/0
  6064 ;;		On exit  : 0/0
  6065 ;;		Unchanged: 0/0
  6066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6067 ;;      Params:         0       0       0       0       0       0       0
  6068 ;;      Locals:         0       0       0       0       0       0       0
  6069 ;;      Temps:         14       0       0       0       0       0       0
  6070 ;;      Totals:        14       0       0       0       0       0       0
  6071 ;;Total ram usage:       14 bytes
  6072 ;; Hardware stack levels used:    1
  6073 ;; Hardware stack levels required when called:    3
  6074 ;; This function calls:
  6075 ;;		_EUSART1_Receive_ISR
  6076 ;;		_EUSART1_Transmit_ISR
  6077 ;;		_EUSART2_Receive_ISR
  6078 ;;		_EUSART2_Transmit_ISR
  6079 ;; This function is called by:
  6080 ;;		Interrupt level 2
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           	psect	intcode
  6085  000008                     __pintcode:
  6086                           	opt stack 0
  6087  000008                     _INTERRUPT_InterruptManager:
  6088                           	opt stack 22
  6089                           
  6090                           ;incstack = 0
  6091  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6092  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6093  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6094  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6095  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6096  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6097  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6098  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6099  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6100  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6101  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6102  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6103  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6104  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6105  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6106                           
  6107                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6108  000042  BAA3               	btfsc	4003,5,c	;volatile
  6109  000044  AAA4               	btfss	4004,5,c	;volatile
  6110  000046  D003               	goto	i2l140
  6111                           
  6112                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6113  000048  EC36  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6114                           
  6115                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6116  00004C  D011               	goto	i2l148
  6117  00004E                     i2l140:
  6118  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6119  000050  A8A4               	btfss	4004,4,c	;volatile
  6120  000052  D003               	goto	i2l142
  6121                           
  6122                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6123  000054  ECF3  F007         	call	_EUSART2_Transmit_ISR	;wreg free
  6124                           
  6125                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6126  000058  D00B               	goto	i2l148
  6127  00005A                     i2l142:
  6128  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6129  00005C  AA9E               	btfss	3998,5,c	;volatile
  6130  00005E  D003               	goto	i2l144
  6131                           
  6132                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6133  000060  ECAC  F008         	call	_EUSART1_Receive_ISR	;wreg free
  6134                           
  6135                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6136  000064  D005               	goto	i2l148
  6137  000066                     i2l144:
  6138  000066  B89D               	btfsc	3997,4,c	;volatile
  6139  000068  A89E               	btfss	3998,4,c	;volatile
  6140  00006A  D002               	goto	i2l148
  6141                           
  6142                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6143  00006C  ECC2  F007         	call	_EUSART1_Transmit_ISR	;wreg free
  6144  000070                     i2l148:
  6145  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6146  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6147  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6148  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6149  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6150  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6151  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6152  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6153  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6154  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6155  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6156  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6157  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6158  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6159  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6160  0000AA  0011               	retfie		f
  6161  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6162                           	opt stack 0
  6163                           pclatu	equ	0xFFB
  6164                           pclath	equ	0xFFA
  6165                           tblptru	equ	0xFF8
  6166                           tblptrh	equ	0xFF7
  6167                           tblptrl	equ	0xFF6
  6168                           tablat	equ	0xFF5
  6169                           prodh	equ	0xFF4
  6170                           prodl	equ	0xFF3
  6171                           intcon	equ	0xFF2
  6172                           intcon2	equ	0xFF1
  6173                           indf0	equ	0xFEF
  6174                           postinc0	equ	0xFEE
  6175                           fsr0h	equ	0xFEA
  6176                           fsr0l	equ	0xFE9
  6177                           wreg	equ	0xFE8
  6178                           postdec1	equ	0xFE5
  6179                           fsr1h	equ	0xFE2
  6180                           fsr1l	equ	0xFE1
  6181                           indf2	equ	0xFDF
  6182                           postinc2	equ	0xFDE
  6183                           postdec2	equ	0xFDD
  6184                           plusw2	equ	0xFDB
  6185                           fsr2h	equ	0xFDA
  6186                           fsr2l	equ	0xFD9
  6187                           status	equ	0xFD8
  6188                           
  6189 ;; *************** function _EUSART2_Transmit_ISR *****************
  6190 ;; Defined at:
  6191 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;		None               void
  6198 ;; Registers used:
  6199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6205 ;;      Params:         0       0       0       0       0       0       0
  6206 ;;      Locals:         0       0       0       0       0       0       0
  6207 ;;      Temps:          0       0       0       0       0       0       0
  6208 ;;      Totals:         0       0       0       0       0       0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; This function calls:
  6212 ;;		Nothing
  6213 ;; This function is called by:
  6214 ;;		_INTERRUPT_InterruptManager
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217                           
  6218                           	psect	text38
  6219  000FE6                     __ptext38:
  6220                           	opt stack 0
  6221  000FE6                     _EUSART2_Transmit_ISR:
  6222                           	opt stack 24
  6223                           
  6224                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6225                           
  6226                           ;incstack = 0
  6227  000FE6  0E08               	movlw	8
  6228  000FE8  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  6229  000FEA  D012               	goto	i2l62
  6230                           
  6231                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  6232  000FEC  5039               	movf	_eusart2TxTail,w,c
  6233  000FEE  0D01               	mullw	1
  6234  000FF0  0E9B               	movlw	low _eusart2TxBuffer
  6235  000FF2  24F3               	addwf	prodl,w,c
  6236  000FF4  6ED9               	movwf	fsr2l,c
  6237  000FF6  0E00               	movlw	high _eusart2TxBuffer
  6238  000FF8  20F4               	addwfc	prodh,w,c
  6239  000FFA  6EDA               	movwf	fsr2h,c
  6240  000FFC  50DF               	movf	indf2,w,c
  6241  000FFE  6E73               	movwf	3955,c	;volatile
  6242  001000  2A39               	incf	_eusart2TxTail,f,c
  6243                           
  6244                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  6245  001002  0E07               	movlw	7
  6246  001004  6439               	cpfsgt	_eusart2TxTail,c
  6247  001006  D002               	goto	i2l2713
  6248                           
  6249                           ;eusart2.c: 161: eusart2TxTail = 0;
  6250  001008  0E00               	movlw	0
  6251  00100A  6E39               	movwf	_eusart2TxTail,c
  6252  00100C                     i2l2713:
  6253                           
  6254                           ;eusart2.c: 162: }
  6255                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  6256  00100C  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  6257                           
  6258                           ;eusart2.c: 164: } else {
  6259  00100E  0012               	return	
  6260  001010                     i2l62:
  6261                           
  6262                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  6263  001010  98A3               	bcf	4003,4,c	;volatile
  6264  001012  0012               	return	
  6265  001014                     __end_of_EUSART2_Transmit_ISR:
  6266                           	opt stack 0
  6267                           pclatu	equ	0xFFB
  6268                           pclath	equ	0xFFA
  6269                           tblptru	equ	0xFF8
  6270                           tblptrh	equ	0xFF7
  6271                           tblptrl	equ	0xFF6
  6272                           tablat	equ	0xFF5
  6273                           prodh	equ	0xFF4
  6274                           prodl	equ	0xFF3
  6275                           intcon	equ	0xFF2
  6276                           intcon2	equ	0xFF1
  6277                           indf0	equ	0xFEF
  6278                           postinc0	equ	0xFEE
  6279                           fsr0h	equ	0xFEA
  6280                           fsr0l	equ	0xFE9
  6281                           wreg	equ	0xFE8
  6282                           postdec1	equ	0xFE5
  6283                           fsr1h	equ	0xFE2
  6284                           fsr1l	equ	0xFE1
  6285                           indf2	equ	0xFDF
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           plusw2	equ	0xFDB
  6289                           fsr2h	equ	0xFDA
  6290                           fsr2l	equ	0xFD9
  6291                           status	equ	0xFD8
  6292                           
  6293 ;; *************** function _EUSART2_Receive_ISR *****************
  6294 ;; Defined at:
  6295 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;		None
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6309 ;;      Params:         0       0       0       0       0       0       0
  6310 ;;      Locals:         0       0       0       0       0       0       0
  6311 ;;      Temps:          0       0       0       0       0       0       0
  6312 ;;      Totals:         0       0       0       0       0       0       0
  6313 ;;Total ram usage:        0 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_INTERRUPT_InterruptManager
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text39
  6323  00106C                     __ptext39:
  6324                           	opt stack 0
  6325  00106C                     _EUSART2_Receive_ISR:
  6326                           	opt stack 24
  6327                           
  6328                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  6329                           
  6330                           ;incstack = 0
  6331  00106C  A271               	btfss	3953,1,c	;volatile
  6332  00106E  D002               	goto	i2l2719
  6333                           
  6334                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  6335  001070  9871               	bcf	3953,4,c	;volatile
  6336                           
  6337                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  6338  001072  8871               	bsf	3953,4,c	;volatile
  6339  001074                     i2l2719:
  6340                           
  6341                           ;eusart2.c: 175: }
  6342                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  6343  001074  5036               	movf	_eusart2RxHead,w,c
  6344  001076  0D01               	mullw	1
  6345  001078  0E93               	movlw	low _eusart2RxBuffer
  6346  00107A  24F3               	addwf	prodl,w,c
  6347  00107C  6ED9               	movwf	fsr2l,c
  6348  00107E  0E00               	movlw	high _eusart2RxBuffer
  6349  001080  20F4               	addwfc	prodh,w,c
  6350  001082  6EDA               	movwf	fsr2h,c
  6351  001084  CF74 FFDF          	movff	3956,indf2	;volatile
  6352  001088  2A36               	incf	_eusart2RxHead,f,c
  6353                           
  6354                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  6355  00108A  0E07               	movlw	7
  6356  00108C  6436               	cpfsgt	_eusart2RxHead,c
  6357  00108E  D002               	goto	i2l2727
  6358                           
  6359                           ;eusart2.c: 180: eusart2RxHead = 0;
  6360  001090  0E00               	movlw	0
  6361  001092  6E36               	movwf	_eusart2RxHead,c
  6362  001094                     i2l2727:
  6363                           
  6364                           ;eusart2.c: 181: }
  6365                           ;eusart2.c: 182: eusart2RxCount++;
  6366  001094  2A35               	incf	_eusart2RxCount,f,c	;volatile
  6367  001096  0012               	return		;funcret
  6368  001098                     __end_of_EUSART2_Receive_ISR:
  6369                           	opt stack 0
  6370                           pclatu	equ	0xFFB
  6371                           pclath	equ	0xFFA
  6372                           tblptru	equ	0xFF8
  6373                           tblptrh	equ	0xFF7
  6374                           tblptrl	equ	0xFF6
  6375                           tablat	equ	0xFF5
  6376                           prodh	equ	0xFF4
  6377                           prodl	equ	0xFF3
  6378                           intcon	equ	0xFF2
  6379                           intcon2	equ	0xFF1
  6380                           indf0	equ	0xFEF
  6381                           postinc0	equ	0xFEE
  6382                           fsr0h	equ	0xFEA
  6383                           fsr0l	equ	0xFE9
  6384                           wreg	equ	0xFE8
  6385                           postdec1	equ	0xFE5
  6386                           fsr1h	equ	0xFE2
  6387                           fsr1l	equ	0xFE1
  6388                           indf2	equ	0xFDF
  6389                           postinc2	equ	0xFDE
  6390                           postdec2	equ	0xFDD
  6391                           plusw2	equ	0xFDB
  6392                           fsr2h	equ	0xFDA
  6393                           fsr2l	equ	0xFD9
  6394                           status	equ	0xFD8
  6395                           
  6396 ;; *************** function _EUSART1_Transmit_ISR *****************
  6397 ;; Defined at:
  6398 ;;		line 150 in file "UART.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;		None
  6401 ;; Auto vars:     Size  Location     Type
  6402 ;;		None
  6403 ;; Return value:  Size  Location     Type
  6404 ;;                  2  134[None  ] int 
  6405 ;; Registers used:
  6406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6407 ;; Tracked objects:
  6408 ;;		On entry : 0/0
  6409 ;;		On exit  : 0/0
  6410 ;;		Unchanged: 0/0
  6411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6412 ;;      Params:         0       0       0       0       0       0       0
  6413 ;;      Locals:         0       0       0       0       0       0       0
  6414 ;;      Temps:          0       0       0       0       0       0       0
  6415 ;;      Totals:         0       0       0       0       0       0       0
  6416 ;;Total ram usage:        0 bytes
  6417 ;; Hardware stack levels used:    1
  6418 ;; Hardware stack levels required when called:    2
  6419 ;; This function calls:
  6420 ;;		_UART_buff_get
  6421 ;;		_UART_buff_size
  6422 ;; This function is called by:
  6423 ;;		_INTERRUPT_InterruptManager
  6424 ;; This function uses a non-reentrant model
  6425 ;;
  6426                           
  6427                           	psect	text40
  6428  000F84                     __ptext40:
  6429                           	opt stack 0
  6430  000F84                     _EUSART1_Transmit_ISR:
  6431                           	opt stack 22
  6432                           
  6433                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6434                           
  6435                           ;incstack = 0
  6436  000F84  0E00               	movlw	low _output_buffer
  6437  000F86  6E01               	movwf	UART_buff_size@_this,c
  6438  000F88  0E03               	movlw	high _output_buffer
  6439  000F8A  6E02               	movwf	UART_buff_size@_this+1,c
  6440  000F8C  ECE1  F008         	call	_UART_buff_size	;wreg free
  6441  000F90  BE02               	btfsc	?_UART_buff_size+1,7,c
  6442  000F92  D00D               	goto	i2l2739
  6443  000F94  5002               	movf	?_UART_buff_size+1,w,c
  6444  000F96  E103               	bnz	i2u160_40
  6445  000F98  0401               	decf	?_UART_buff_size,w,c
  6446  000F9A  A0D8               	btfss	status,0,c
  6447  000F9C  D008               	goto	i2l2739
  6448  000F9E                     i2u160_40:
  6449                           
  6450                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6451  000F9E  0E00               	movlw	low _output_buffer
  6452  000FA0  6E07               	movwf	UART_buff_get@_this,c
  6453  000FA2  0E03               	movlw	high _output_buffer
  6454  000FA4  6E08               	movwf	UART_buff_get@_this+1,c
  6455  000FA6  EC86  F005         	call	_UART_buff_get	;wreg free
  6456  000FAA  6EAD               	movwf	4013,c	;volatile
  6457                           
  6458                           ;UART.c: 154: } else {
  6459  000FAC  0012               	return	
  6460  000FAE                     i2l2739:
  6461                           
  6462                           ;UART.c: 155: Transmit_stall = 1;
  6463  000FAE  0E01               	movlw	1
  6464  000FB0  6E44               	movwf	_Transmit_stall,c
  6465                           
  6466                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6467  000FB2  989D               	bcf	3997,4,c	;volatile
  6468  000FB4  0012               	return	
  6469  000FB6                     __end_of_EUSART1_Transmit_ISR:
  6470                           	opt stack 0
  6471                           pclatu	equ	0xFFB
  6472                           pclath	equ	0xFFA
  6473                           tblptru	equ	0xFF8
  6474                           tblptrh	equ	0xFF7
  6475                           tblptrl	equ	0xFF6
  6476                           tablat	equ	0xFF5
  6477                           prodh	equ	0xFF4
  6478                           prodl	equ	0xFF3
  6479                           intcon	equ	0xFF2
  6480                           intcon2	equ	0xFF1
  6481                           indf0	equ	0xFEF
  6482                           postinc0	equ	0xFEE
  6483                           fsr0h	equ	0xFEA
  6484                           fsr0l	equ	0xFE9
  6485                           wreg	equ	0xFE8
  6486                           postdec1	equ	0xFE5
  6487                           fsr1h	equ	0xFE2
  6488                           fsr1l	equ	0xFE1
  6489                           indf2	equ	0xFDF
  6490                           postinc2	equ	0xFDE
  6491                           postdec2	equ	0xFDD
  6492                           plusw2	equ	0xFDB
  6493                           fsr2h	equ	0xFDA
  6494                           fsr2l	equ	0xFD9
  6495                           status	equ	0xFD8
  6496                           
  6497 ;; *************** function _UART_buff_size *****************
  6498 ;; Defined at:
  6499 ;;		line 102 in file "UART.c"
  6500 ;; Parameters:    Size  Location     Type
  6501 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6502 ;;		 -> output_buffer(206), input_buffer(206), 
  6503 ;; Auto vars:     Size  Location     Type
  6504 ;;		None
  6505 ;; Return value:  Size  Location     Type
  6506 ;;                  2    0[COMRAM] int 
  6507 ;; Registers used:
  6508 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6509 ;; Tracked objects:
  6510 ;;		On entry : 0/0
  6511 ;;		On exit  : 0/0
  6512 ;;		Unchanged: 0/0
  6513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6514 ;;      Params:         2       0       0       0       0       0       0
  6515 ;;      Locals:         0       0       0       0       0       0       0
  6516 ;;      Temps:          0       0       0       0       0       0       0
  6517 ;;      Totals:         2       0       0       0       0       0       0
  6518 ;;Total ram usage:        2 bytes
  6519 ;; Hardware stack levels used:    1
  6520 ;; This function calls:
  6521 ;;		Nothing
  6522 ;; This function is called by:
  6523 ;;		_EUSART1_Transmit_ISR
  6524 ;;		_Receive_available
  6525 ;; This function uses a non-reentrant model
  6526 ;;
  6527                           
  6528                           	psect	text41
  6529  0011C2                     __ptext41:
  6530                           	opt stack 0
  6531  0011C2                     _UART_buff_size:
  6532                           	opt stack 23
  6533                           
  6534                           ;UART.c: 103: return (_this->count);
  6535                           
  6536                           ;incstack = 0
  6537  0011C2  EE20 F0CC          	lfsr	2,204
  6538  0011C6  5001               	movf	UART_buff_size@_this,w,c
  6539  0011C8  26D9               	addwf	fsr2l,f,c
  6540  0011CA  5002               	movf	UART_buff_size@_this+1,w,c
  6541  0011CC  22DA               	addwfc	fsr2h,f,c
  6542  0011CE  CFDE F001          	movff	postinc2,?_UART_buff_size
  6543  0011D2  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  6544  0011D6  0012               	return	
  6545  0011D8                     __end_of_UART_buff_size:
  6546                           	opt stack 0
  6547                           pclatu	equ	0xFFB
  6548                           pclath	equ	0xFFA
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           intcon2	equ	0xFF1
  6557                           indf0	equ	0xFEF
  6558                           postinc0	equ	0xFEE
  6559                           fsr0h	equ	0xFEA
  6560                           fsr0l	equ	0xFE9
  6561                           wreg	equ	0xFE8
  6562                           postdec1	equ	0xFE5
  6563                           fsr1h	equ	0xFE2
  6564                           fsr1l	equ	0xFE1
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           plusw2	equ	0xFDB
  6569                           fsr2h	equ	0xFDA
  6570                           fsr2l	equ	0xFD9
  6571                           status	equ	0xFD8
  6572                           
  6573 ;; *************** function _UART_buff_get *****************
  6574 ;; Defined at:
  6575 ;;		line 81 in file "UART.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6578 ;;		 -> output_buffer(206), input_buffer(206), 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  c               1   10[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      unsigned char 
  6583 ;; Registers used:
  6584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6590 ;;      Params:         2       0       0       0       0       0       0
  6591 ;;      Locals:         1       0       0       0       0       0       0
  6592 ;;      Temps:          2       0       0       0       0       0       0
  6593 ;;      Totals:         5       0       0       0       0       0       0
  6594 ;;Total ram usage:        5 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    1
  6597 ;; This function calls:
  6598 ;;		_UART_buff_modulo_inc
  6599 ;; This function is called by:
  6600 ;;		_EUSART1_Transmit_ISR
  6601 ;;		_Receive_get
  6602 ;;		_Send_put
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text42
  6607  000B0C                     __ptext42:
  6608                           	opt stack 0
  6609  000B0C                     _UART_buff_get:
  6610                           	opt stack 22
  6611                           
  6612                           ;UART.c: 82: unsigned char c;
  6613                           ;UART.c: 83: if (_this->count > 0) {
  6614                           
  6615                           ;incstack = 0
  6616  000B0C  EE20 F0CC          	lfsr	2,204
  6617  000B10  5007               	movf	UART_buff_get@_this,w,c
  6618  000B12  26D9               	addwf	fsr2l,f,c
  6619  000B14  5008               	movf	UART_buff_get@_this+1,w,c
  6620  000B16  22DA               	addwfc	fsr2h,f,c
  6621  000B18  0E01               	movlw	1
  6622  000B1A  BEDB               	btfsc	plusw2,7,c
  6623  000B1C  D03C               	goto	i2l2667
  6624  000B1E  0E01               	movlw	1
  6625  000B20  50DB               	movf	plusw2,w,c
  6626  000B22  E103               	bnz	i2u150_40
  6627  000B24  04DE               	decf	postinc2,w,c
  6628  000B26  A0D8               	btfss	status,0,c
  6629  000B28  D036               	goto	i2l2667
  6630  000B2A                     i2u150_40:
  6631                           
  6632                           ;UART.c: 84: c = _this->buf[_this->tail];
  6633  000B2A  EE20 F0CA          	lfsr	2,202
  6634  000B2E  5007               	movf	UART_buff_get@_this,w,c
  6635  000B30  26D9               	addwf	fsr2l,f,c
  6636  000B32  5008               	movf	UART_buff_get@_this+1,w,c
  6637  000B34  22DA               	addwfc	fsr2h,f,c
  6638  000B36  CFDE F009          	movff	postinc2,??_UART_buff_get
  6639  000B3A  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  6640  000B3E  5009               	movf	??_UART_buff_get,w,c
  6641  000B40  2407               	addwf	UART_buff_get@_this,w,c
  6642  000B42  6ED9               	movwf	fsr2l,c
  6643  000B44  500A               	movf	??_UART_buff_get+1,w,c
  6644  000B46  2008               	addwfc	UART_buff_get@_this+1,w,c
  6645  000B48  6EDA               	movwf	fsr2h,c
  6646  000B4A  50DF               	movf	indf2,w,c
  6647  000B4C  6E0B               	movwf	UART_buff_get@c,c
  6648                           
  6649                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6650  000B4E  EE20 F0CA          	lfsr	2,202
  6651  000B52  5007               	movf	UART_buff_get@_this,w,c
  6652  000B54  26D9               	addwf	fsr2l,f,c
  6653  000B56  5008               	movf	UART_buff_get@_this+1,w,c
  6654  000B58  22DA               	addwfc	fsr2h,f,c
  6655  000B5A  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6656  000B5E  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6657  000B62  0E00               	movlw	0
  6658  000B64  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6659  000B66  0EC8               	movlw	200
  6660  000B68  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6661  000B6A  EC61  F008         	call	_UART_buff_modulo_inc	;wreg free
  6662  000B6E  EE20 F0CA          	lfsr	2,202
  6663  000B72  5007               	movf	UART_buff_get@_this,w,c
  6664  000B74  26D9               	addwf	fsr2l,f,c
  6665  000B76  5008               	movf	UART_buff_get@_this+1,w,c
  6666  000B78  22DA               	addwfc	fsr2h,f,c
  6667  000B7A  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6668  000B7E  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6669                           
  6670                           ;UART.c: 86: --_this->count;
  6671  000B82  EE20 F0CC          	lfsr	2,204
  6672  000B86  5007               	movf	UART_buff_get@_this,w,c
  6673  000B88  26D9               	addwf	fsr2l,f,c
  6674  000B8A  5008               	movf	UART_buff_get@_this+1,w,c
  6675  000B8C  22DA               	addwfc	fsr2h,f,c
  6676  000B8E  06DE               	decf	postinc2,f,c
  6677  000B90  0E00               	movlw	0
  6678  000B92  5ADD               	subwfb	postdec2,f,c
  6679                           
  6680                           ;UART.c: 87: } else {
  6681  000B94  D002               	goto	i2l503
  6682  000B96                     i2l2667:
  6683                           
  6684                           ;UART.c: 88: c = 0;
  6685  000B96  0E00               	movlw	0
  6686  000B98  6E0B               	movwf	UART_buff_get@c,c
  6687  000B9A                     i2l503:
  6688                           
  6689                           ;UART.c: 89: }
  6690                           ;UART.c: 90: return (c);
  6691  000B9A  500B               	movf	UART_buff_get@c,w,c
  6692  000B9C  0012               	return	
  6693  000B9E                     __end_of_UART_buff_get:
  6694                           	opt stack 0
  6695                           pclatu	equ	0xFFB
  6696                           pclath	equ	0xFFA
  6697                           tblptru	equ	0xFF8
  6698                           tblptrh	equ	0xFF7
  6699                           tblptrl	equ	0xFF6
  6700                           tablat	equ	0xFF5
  6701                           prodh	equ	0xFF4
  6702                           prodl	equ	0xFF3
  6703                           intcon	equ	0xFF2
  6704                           intcon2	equ	0xFF1
  6705                           indf0	equ	0xFEF
  6706                           postinc0	equ	0xFEE
  6707                           fsr0h	equ	0xFEA
  6708                           fsr0l	equ	0xFE9
  6709                           wreg	equ	0xFE8
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           plusw2	equ	0xFDB
  6717                           fsr2h	equ	0xFDA
  6718                           fsr2l	equ	0xFD9
  6719                           status	equ	0xFD8
  6720                           
  6721 ;; *************** function _EUSART1_Receive_ISR *****************
  6722 ;; Defined at:
  6723 ;;		line 139 in file "UART.c"
  6724 ;; Parameters:    Size  Location     Type
  6725 ;;		None
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  data            1   11[COMRAM] unsigned char 
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  2  132[None  ] int 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6737 ;;      Params:         0       0       0       0       0       0       0
  6738 ;;      Locals:         1       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0
  6740 ;;      Totals:         1       0       0       0       0       0       0
  6741 ;;Total ram usage:        1 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    2
  6744 ;; This function calls:
  6745 ;;		_UART_buff_put
  6746 ;; This function is called by:
  6747 ;;		_INTERRUPT_InterruptManager
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           	psect	text43
  6752  001158                     __ptext43:
  6753                           	opt stack 0
  6754  001158                     _EUSART1_Receive_ISR:
  6755                           	opt stack 22
  6756                           
  6757                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6758                           
  6759                           ;incstack = 0
  6760  001158  A2AB               	btfss	4011,1,c	;volatile
  6761  00115A  D002               	goto	i2l534
  6762                           
  6763                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6764  00115C  98AB               	bcf	4011,4,c	;volatile
  6765                           
  6766                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6767  00115E  88AB               	bsf	4011,4,c	;volatile
  6768  001160                     i2l534:
  6769                           
  6770                           ;UART.c: 145: }
  6771                           ;UART.c: 146: unsigned char data = RCREG1;
  6772  001160  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6773                           
  6774                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6775  001164  0E00               	movlw	low _input_buffer
  6776  001166  6E07               	movwf	UART_buff_put@_this,c
  6777  001168  0E02               	movlw	high _input_buffer
  6778  00116A  6E08               	movwf	UART_buff_put@_this+1,c
  6779  00116C  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  6780  001170  EC64  F002         	call	_UART_buff_put	;wreg free
  6781  001174  0012               	return		;funcret
  6782  001176                     __end_of_EUSART1_Receive_ISR:
  6783                           	opt stack 0
  6784                           pclatu	equ	0xFFB
  6785                           pclath	equ	0xFFA
  6786                           tblptru	equ	0xFF8
  6787                           tblptrh	equ	0xFF7
  6788                           tblptrl	equ	0xFF6
  6789                           tablat	equ	0xFF5
  6790                           prodh	equ	0xFF4
  6791                           prodl	equ	0xFF3
  6792                           intcon	equ	0xFF2
  6793                           intcon2	equ	0xFF1
  6794                           indf0	equ	0xFEF
  6795                           postinc0	equ	0xFEE
  6796                           fsr0h	equ	0xFEA
  6797                           fsr0l	equ	0xFE9
  6798                           wreg	equ	0xFE8
  6799                           postdec1	equ	0xFE5
  6800                           fsr1h	equ	0xFE2
  6801                           fsr1l	equ	0xFE1
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           plusw2	equ	0xFDB
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function _UART_buff_put *****************
  6811 ;; Defined at:
  6812 ;;		line 68 in file "UART.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6815 ;;		 -> output_buffer(206), input_buffer(206), 
  6816 ;;  c               1    8[COMRAM] const unsigned char 
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;		None               void
  6821 ;; Registers used:
  6822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6828 ;;      Params:         3       0       0       0       0       0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0
  6830 ;;      Temps:          2       0       0       0       0       0       0
  6831 ;;      Totals:         5       0       0       0       0       0       0
  6832 ;;Total ram usage:        5 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    1
  6835 ;; This function calls:
  6836 ;;		_UART_buff_modulo_inc
  6837 ;; This function is called by:
  6838 ;;		_EUSART1_Receive_ISR
  6839 ;;		_Send_put
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text44
  6844  0004C8                     __ptext44:
  6845                           	opt stack 0
  6846  0004C8                     _UART_buff_put:
  6847                           	opt stack 22
  6848                           
  6849                           ;UART.c: 69: if (_this->count < 200) {
  6850                           
  6851                           ;incstack = 0
  6852  0004C8  EE20 F0CC          	lfsr	2,204
  6853  0004CC  5007               	movf	UART_buff_put@_this,w,c
  6854  0004CE  26D9               	addwf	fsr2l,f,c
  6855  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  6856  0004D2  22DA               	addwfc	fsr2h,f,c
  6857  0004D4  0E01               	movlw	1
  6858  0004D6  BEDB               	btfsc	plusw2,7,c
  6859  0004D8  D007               	goto	i2l2647
  6860  0004DA  0E01               	movlw	1
  6861  0004DC  50DB               	movf	plusw2,w,c
  6862  0004DE  E13A               	bnz	i2l2653
  6863  0004E0  0EC8               	movlw	200
  6864  0004E2  5CDE               	subwf	postinc2,w,c
  6865  0004E4  B0D8               	btfsc	status,0,c
  6866  0004E6  D036               	goto	i2l2653
  6867  0004E8                     i2l2647:
  6868                           
  6869                           ;UART.c: 70: _this->buf[_this->head] = c;
  6870  0004E8  EE20 F0C8          	lfsr	2,200
  6871  0004EC  5007               	movf	UART_buff_put@_this,w,c
  6872  0004EE  26D9               	addwf	fsr2l,f,c
  6873  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  6874  0004F2  22DA               	addwfc	fsr2h,f,c
  6875  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  6876  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  6877  0004FC  500A               	movf	??_UART_buff_put,w,c
  6878  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  6879  000500  6ED9               	movwf	fsr2l,c
  6880  000502  500B               	movf	??_UART_buff_put+1,w,c
  6881  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  6882  000506  6EDA               	movwf	fsr2h,c
  6883  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  6884                           
  6885                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6886  00050C  EE20 F0C8          	lfsr	2,200
  6887  000510  5007               	movf	UART_buff_put@_this,w,c
  6888  000512  26D9               	addwf	fsr2l,f,c
  6889  000514  5008               	movf	UART_buff_put@_this+1,w,c
  6890  000516  22DA               	addwfc	fsr2h,f,c
  6891  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6892  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6893  000520  0E00               	movlw	0
  6894  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6895  000524  0EC8               	movlw	200
  6896  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6897  000528  EC61  F008         	call	_UART_buff_modulo_inc	;wreg free
  6898  00052C  EE20 F0C8          	lfsr	2,200
  6899  000530  5007               	movf	UART_buff_put@_this,w,c
  6900  000532  26D9               	addwf	fsr2l,f,c
  6901  000534  5008               	movf	UART_buff_put@_this+1,w,c
  6902  000536  22DA               	addwfc	fsr2h,f,c
  6903  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6904  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6905                           
  6906                           ;UART.c: 72: ++_this->count;
  6907  000540  EE20 F0CC          	lfsr	2,204
  6908  000544  5007               	movf	UART_buff_put@_this,w,c
  6909  000546  26D9               	addwf	fsr2l,f,c
  6910  000548  5008               	movf	UART_buff_put@_this+1,w,c
  6911  00054A  22DA               	addwfc	fsr2h,f,c
  6912  00054C  2ADE               	incf	postinc2,f,c
  6913  00054E  0E00               	movlw	0
  6914  000550  22DD               	addwfc	postdec2,f,c
  6915                           
  6916                           ;UART.c: 73: } else {
  6917  000552  0012               	return	
  6918  000554                     i2l2653:
  6919                           
  6920                           ;UART.c: 74: _this->buf[_this->head] = c;
  6921  000554  EE20 F0C8          	lfsr	2,200
  6922  000558  5007               	movf	UART_buff_put@_this,w,c
  6923  00055A  26D9               	addwf	fsr2l,f,c
  6924  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  6925  00055E  22DA               	addwfc	fsr2h,f,c
  6926  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  6927  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  6928  000568  500A               	movf	??_UART_buff_put,w,c
  6929  00056A  2407               	addwf	UART_buff_put@_this,w,c
  6930  00056C  6ED9               	movwf	fsr2l,c
  6931  00056E  500B               	movf	??_UART_buff_put+1,w,c
  6932  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  6933  000572  6EDA               	movwf	fsr2h,c
  6934  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  6935                           
  6936                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6937  000578  EE20 F0C8          	lfsr	2,200
  6938  00057C  5007               	movf	UART_buff_put@_this,w,c
  6939  00057E  26D9               	addwf	fsr2l,f,c
  6940  000580  5008               	movf	UART_buff_put@_this+1,w,c
  6941  000582  22DA               	addwfc	fsr2h,f,c
  6942  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6943  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6944  00058C  0E00               	movlw	0
  6945  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6946  000590  0EC8               	movlw	200
  6947  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6948  000594  EC61  F008         	call	_UART_buff_modulo_inc	;wreg free
  6949  000598  EE20 F0C8          	lfsr	2,200
  6950  00059C  5007               	movf	UART_buff_put@_this,w,c
  6951  00059E  26D9               	addwf	fsr2l,f,c
  6952  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  6953  0005A2  22DA               	addwfc	fsr2h,f,c
  6954  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6955  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6956                           
  6957                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6958  0005AC  EE20 F0CA          	lfsr	2,202
  6959  0005B0  5007               	movf	UART_buff_put@_this,w,c
  6960  0005B2  26D9               	addwf	fsr2l,f,c
  6961  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  6962  0005B6  22DA               	addwfc	fsr2h,f,c
  6963  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6964  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6965  0005C0  0E00               	movlw	0
  6966  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6967  0005C4  0EC8               	movlw	200
  6968  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6969  0005C8  EC61  F008         	call	_UART_buff_modulo_inc	;wreg free
  6970  0005CC  EE20 F0CA          	lfsr	2,202
  6971  0005D0  5007               	movf	UART_buff_put@_this,w,c
  6972  0005D2  26D9               	addwf	fsr2l,f,c
  6973  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  6974  0005D6  22DA               	addwfc	fsr2h,f,c
  6975  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6976  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6977  0005E0  0012               	return	
  6978  0005E2                     __end_of_UART_buff_put:
  6979                           	opt stack 0
  6980                           pclatu	equ	0xFFB
  6981                           pclath	equ	0xFFA
  6982                           tblptru	equ	0xFF8
  6983                           tblptrh	equ	0xFF7
  6984                           tblptrl	equ	0xFF6
  6985                           tablat	equ	0xFF5
  6986                           prodh	equ	0xFF4
  6987                           prodl	equ	0xFF3
  6988                           intcon	equ	0xFF2
  6989                           intcon2	equ	0xFF1
  6990                           indf0	equ	0xFEF
  6991                           postinc0	equ	0xFEE
  6992                           fsr0h	equ	0xFEA
  6993                           fsr0l	equ	0xFE9
  6994                           wreg	equ	0xFE8
  6995                           postdec1	equ	0xFE5
  6996                           fsr1h	equ	0xFE2
  6997                           fsr1l	equ	0xFE1
  6998                           indf2	equ	0xFDF
  6999                           postinc2	equ	0xFDE
  7000                           postdec2	equ	0xFDD
  7001                           plusw2	equ	0xFDB
  7002                           fsr2h	equ	0xFDA
  7003                           fsr2l	equ	0xFD9
  7004                           status	equ	0xFD8
  7005                           
  7006 ;; *************** function _UART_buff_modulo_inc *****************
  7007 ;; Defined at:
  7008 ;;		line 106 in file "UART.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;  value           2    0[COMRAM] const unsigned int 
  7011 ;;  modulus         2    2[COMRAM] const unsigned int 
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;  my_value        2    4[COMRAM] unsigned int 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  2    0[COMRAM] unsigned int 
  7016 ;; Registers used:
  7017 ;;		wreg, status,2, status,0
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7023 ;;      Params:         4       0       0       0       0       0       0
  7024 ;;      Locals:         2       0       0       0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0       0       0
  7026 ;;      Totals:         6       0       0       0       0       0       0
  7027 ;;Total ram usage:        6 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_UART_buff_put
  7033 ;;		_UART_buff_get
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text45
  7038  0010C2                     __ptext45:
  7039                           	opt stack 0
  7040  0010C2                     _UART_buff_modulo_inc:
  7041                           	opt stack 22
  7042                           
  7043                           ;UART.c: 107: unsigned int my_value = value + 1;
  7044                           
  7045                           ;incstack = 0
  7046  0010C2  0E01               	movlw	1
  7047  0010C4  2401               	addwf	UART_buff_modulo_inc@value,w,c
  7048  0010C6  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7049  0010C8  0E00               	movlw	0
  7050  0010CA  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7051  0010CC  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7052                           
  7053                           ;UART.c: 108: if (my_value >= modulus) {
  7054  0010CE  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7055  0010D0  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7056  0010D2  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7057  0010D4  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7058  0010D6  A0D8               	btfss	status,0,c
  7059  0010D8  D004               	goto	i2l2413
  7060                           
  7061                           ;UART.c: 109: my_value = 0;
  7062  0010DA  0E00               	movlw	0
  7063  0010DC  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7064  0010DE  0E00               	movlw	0
  7065  0010E0  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7066  0010E2                     i2l2413:
  7067                           
  7068                           ;UART.c: 110: }
  7069                           ;UART.c: 111: return (my_value);
  7070  0010E2  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7071  0010E6  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7072  0010EA  0012               	return	
  7073  0010EC                     __end_of_UART_buff_modulo_inc:
  7074                           	opt stack 0
  7075                           pclatu	equ	0xFFB
  7076                           pclath	equ	0xFFA
  7077                           tblptru	equ	0xFF8
  7078                           tblptrh	equ	0xFF7
  7079                           tblptrl	equ	0xFF6
  7080                           tablat	equ	0xFF5
  7081                           prodh	equ	0xFF4
  7082                           prodl	equ	0xFF3
  7083                           intcon	equ	0xFF2
  7084                           intcon2	equ	0xFF1
  7085                           indf0	equ	0xFEF
  7086                           postinc0	equ	0xFEE
  7087                           fsr0h	equ	0xFEA
  7088                           fsr0l	equ	0xFE9
  7089                           wreg	equ	0xFE8
  7090                           postdec1	equ	0xFE5
  7091                           fsr1h	equ	0xFE2
  7092                           fsr1l	equ	0xFE1
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           plusw2	equ	0xFDB
  7097                           fsr2h	equ	0xFDA
  7098                           fsr2l	equ	0xFD9
  7099                           status	equ	0xFD8
  7100                           pclatu	equ	0xFFB
  7101                           pclath	equ	0xFFA
  7102                           tblptru	equ	0xFF8
  7103                           tblptrh	equ	0xFF7
  7104                           tblptrl	equ	0xFF6
  7105                           tablat	equ	0xFF5
  7106                           prodh	equ	0xFF4
  7107                           prodl	equ	0xFF3
  7108                           intcon	equ	0xFF2
  7109                           intcon2	equ	0xFF1
  7110                           indf0	equ	0xFEF
  7111                           postinc0	equ	0xFEE
  7112                           fsr0h	equ	0xFEA
  7113                           fsr0l	equ	0xFE9
  7114                           wreg	equ	0xFE8
  7115                           postdec1	equ	0xFE5
  7116                           fsr1h	equ	0xFE2
  7117                           fsr1l	equ	0xFE1
  7118                           indf2	equ	0xFDF
  7119                           postinc2	equ	0xFDE
  7120                           postdec2	equ	0xFDD
  7121                           plusw2	equ	0xFDB
  7122                           fsr2h	equ	0xFDA
  7123                           fsr2l	equ	0xFD9
  7124                           status	equ	0xFD8
  7125                           
  7126                           	psect	rparam
  7127  0000                     pclatu	equ	0xFFB
  7128                           pclath	equ	0xFFA
  7129                           tblptru	equ	0xFF8
  7130                           tblptrh	equ	0xFF7
  7131                           tblptrl	equ	0xFF6
  7132                           tablat	equ	0xFF5
  7133                           prodh	equ	0xFF4
  7134                           prodl	equ	0xFF3
  7135                           intcon	equ	0xFF2
  7136                           intcon2	equ	0xFF1
  7137                           indf0	equ	0xFEF
  7138                           postinc0	equ	0xFEE
  7139                           fsr0h	equ	0xFEA
  7140                           fsr0l	equ	0xFE9
  7141                           wreg	equ	0xFE8
  7142                           postdec1	equ	0xFE5
  7143                           fsr1h	equ	0xFE2
  7144                           fsr1l	equ	0xFE1
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           plusw2	equ	0xFDB
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153                           	psect	temp
  7154  000045                     btemp:
  7155                           	opt stack 0
  7156  000045                     	ds	1
  7157  0000                     int$flags	set	btemp
  7158                           pclatu	equ	0xFFB
  7159                           pclath	equ	0xFFA
  7160                           tblptru	equ	0xFF8
  7161                           tblptrh	equ	0xFF7
  7162                           tblptrl	equ	0xFF6
  7163                           tablat	equ	0xFF5
  7164                           prodh	equ	0xFF4
  7165                           prodl	equ	0xFF3
  7166                           intcon	equ	0xFF2
  7167                           intcon2	equ	0xFF1
  7168                           indf0	equ	0xFEF
  7169                           postinc0	equ	0xFEE
  7170                           fsr0h	equ	0xFEA
  7171                           fsr0l	equ	0xFE9
  7172                           wreg	equ	0xFE8
  7173                           postdec1	equ	0xFE5
  7174                           fsr1h	equ	0xFE2
  7175                           fsr1l	equ	0xFE1
  7176                           indf2	equ	0xFDF
  7177                           postinc2	equ	0xFDE
  7178                           postdec2	equ	0xFDD
  7179                           plusw2	equ	0xFDB
  7180                           fsr2h	equ	0xFDA
  7181                           fsr2l	equ	0xFD9
  7182                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    480
    Data        10
    BSS         956
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      68
    BANK0           160     25     146
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1380(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 0
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _ledDebug->_time_Set
    _ledDebug->_time_get
    _SYSTEM_Initialize->_TMR0_Initialize
    _NokiaStart->_Delay
    _clearLcd->_LCDwrite
    _LCDwrite->_SPI1_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   21787
                              _Delay
                         _NokiaStart
                  _SYSTEM_Initialize
                           _clearLcd
                           _ledDebug
                         _respondECU
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   12083
                          _Precharge
                         _SetCharger
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    5211
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                              0 BANK0      5     5      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1607
                                             37 COMRAM     1     1      0
                                              2 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     828
                                              0 BANK0      3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0     774
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0     130
                           _time_Set
                           _time_get
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0    2691
                              _Delay
                           _LCDwrite
                    _SPI1_Initialize
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0    1065
                                             29 COMRAM     2     2      0
                           _LCDwrite
 ---------------------------------------------------------------------------------
 (2) _LCDwrite                                             2     1      1    1019
                                             27 COMRAM     2     1      1
                  _SPI1_Exchange8bit
 ---------------------------------------------------------------------------------
 (3) _SPI1_Exchange8bit                                    1     1      0      15
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     607
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _Delay
     _LCDwrite
       _SPI1_Exchange8bit
     _SPI1_Initialize
     _clearLcd
       _LCDwrite
         _SPI1_Exchange8bit
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _clearLcd
     _LCDwrite
       _SPI1_Exchange8bit
   _ledDebug
     _time_Set
     _time_get
   _respondECU
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _sendData
       _CRC8
       _FastTransfer_buffer_flush
         _memset
       _crcBufS_put
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     19      92       4       91.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     408       9        0.0%
DATA                 0      0     408      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Thu May 12 20:20:59 2016

                      _SPI1_Exchange8bit 11EA        __end_of_FastTransfer_buffer_flush 0D6C  
                                      _i 003A                             _rx_array_inx 003F  
                     ?_SPI1_Exchange8bit 0001                                       l50 0EB8  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l344 0E8E                                      l370 00FC  
                                    l188 11F2                                      l613 0F1C  
                                    l446 09E4                                      l624 0F28  
                                    l458 0A78                                      l619 0F22  
                                    l629 0F2E                                      l591 099C  
                                    l584 0994                                      l684 119E  
                                    l686 11A0                                      l599 09DE  
                           __CFG_CPB$OFF 000000                             __CFG_CPD$OFF 000000  
                    ??_SPI1_Exchange8bit 001B     FastTransfer_buffer_flush@clearBuffer 0025  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    wreg 000FE8                             __CFG_LVP$OFF 000000  
                                   l3001 101E                                     l3011 0E62  
                                   l3101 0E22                                     l3005 102E  
                                   l3105 0E3E                                     l3017 0E78  
                                   l3025 0E94                                     l3113 0C4A  
                                   l3027 0E9A                                     l2251 10B8  
                                   l3115 0C50                                     l3133 09FC  
                                   l3301 0344                                     l3143 0A50  
                                   l3047 037C                                     l3321 0978  
                                   l3161 087C                                     l3081 067A  
                                   l3065 05EC                                     l3129 09E6  
                                   l3217 00B2                                     l3147 0A70  
                                   l3227 00F2                                     l3333 09C2  
                                   l3317 0962                                     l3157 0F34  
                                   l3165 088C                                     l3069 05F6  
                                   l3309 0350                                     l2463 1104  
                                   l3175 08BC                                     l3167 0892  
                                   l3183 090C                                     l3351 0CD6  
                                   l3263 0234                                     l3329 09AC  
                                   l3185 092C                                     l3097 082C  
                                   l3089 07A6                                     l3265 023A  
                                   l3257 019A                                     l2459 10F4  
                                   l3179 08E4                                     l3267 024E  
                                   l3279 02D4                                     l3289 02E0  
                                   l3397 0F0A                                     l2769 0FD6  
                                   l2983 0EA8                     receiveData@crcHolder 00DD  
                                   l2995 0EDA                                     l2997 0EDC  
                                   STR_1 7FFC                                     STR_2 7FFC  
                                   STR_3 7FF5                                     _CRC8 0E5C  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u2160 08DC  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u2170 0904                                     u2251 013E  
                                   u1630 0FD4                                     u2167 08D2  
                                   u2177 08FA                                     u2437 0E28  
                                   u1970 0786                                     u1991 037A  
                                   i2l62 1010                                     _WPUB 000F61  
                  ??_EUSART2_Receive_ISR 0001                            _EUSART2_Write 0EA6  
                                   _main 0EE0                          _TMR0_StartTimer 1236  
                                   _time 0027                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04C8                                     start 00AC  
              __end_of_SPI1_Exchange8bit 11FA                            __CFG_IESO$OFF 000000  
           __end_of_EUSART2_Transmit_ISR 1014                             ___param_bank 000010  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 106C  
                       __end_of_CRCcheck 0A7A           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1208                       crcBufS_put@address 001D  
                                  ?_main 0001                                    _T0CON 000FD5  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l140 004E  
                                  i2l142 005A                                    i2l144 0066  
                                  i2l148 0070                                    i2l503 0B9A  
                       __end_of_LCDwrite 11AC                                    i2l534 1160  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 0E10  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 00E9  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 0F84  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                                    _Start 002B  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _ddata 0088  
                         __CFG_EBTRB$OFF 000000                                    _group 002D  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 1222  
                         ?_EUSART2_Write 0001                                    tablat 000FF5  
                   __size_of_crcBufS_get 00E2                                    plusw2 000FDB  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
               __size_of_SPI1_Initialize 000E                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0EA6                          CRCcheck@SentCRC 00D0  
                        __initialization 0B9E                             __end_of_main 0F18  
                             ToSend@what 00D2                                   ??_CRC8 001E  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0027  
                          __activetblptr 000002                            SetMux@channel 001B  
                      SetCharger@Current 00D0                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001                               _SetCharger 0C9E  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 123A  
             __end_of_EUSART2_Initialize 0F84                 _eusart2TxBufferRemaining 0043  
                             Precharge@i 00D1                        SetCharger@Voltage 00D1  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 0A7A                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   i2l2413 10E2  
                                 Delay@i 0020                           __CFG_WDTEN$OFF 000000  
                                 i2l2713 100C                                   i2l2653 0554  
                                 i2l2647 04E8                                   i2l2727 1094  
                                 i2l2719 1074              UART_buff_modulo_inc@modulus 0003  
                                 i2l2667 0B96                                   i2l2739 0FAE  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                                   _TRISD0 007CA8  
                                 _TRISD2 007CAA                                   _TRISD3 007CAB  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                  SPI1_Exchange8bit@data 001B                         __end_of_clearLcd 1114  
             __size_of_SPI1_Exchange8bit 0010                         __end_of_ledDebug 0FE6  
                         __CFG_XINST$OFF 000000                                   _ToSend 1176  
                                 _SetMux 0F18                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                            _output_buffer 0300  
                       crcBufS_get@space 001E                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 1014                                   clear_0 0BA4  
                                 clear_1 0BB0                                   clear_2 0BBC  
                                 clear_3 0BC8                                   clear_4 0BD4  
                                 clear_5 0BE0                       __size_of_Precharge 009E  
                                 _printf 0872                                   _rx_len 0040  
                       __end_of_sendData 0C9E                             __pdataCOMRAM 0044  
                       __end_of_time_Set 1158                         __end_of_time_get 11EA  
                           __mediumconst 7E14                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174                     _EUSART2_Transmit_ISR 0FE6  
           __end_of_UART_buff_modulo_inc 10EC                          ??_EUSART2_Write 001B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart2RxBuffer 0093  
                      _SYSTEM_Initialize 11AC                          _eusart2TxBuffer 009B  
                             __accesstop 0060                  __end_of__initialization 0C18  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                              ?_LCDwrite 001C                            __end_of_Delay 0E5C  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 079C  
                           __pidataBANK0 122C                      ??_SYSTEM_Initialize 001D  
                       crcBufS_put@_this 001B   __end_of_FastTransfer_buffer_modulo_inc 10C2  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1098  
                      ??_SPI1_Initialize 001B                            __end_of_putch 122C  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0026  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0B9E                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05E2                                  ??_Delay 001F  
                            ?_SetCharger 00D0                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 1176                _FastTransfer_buffer_flush 0D0A  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 11C2                   receiveData@holder_1380 00E2  
                                ??_putch 001C                      _addressErrorCounter 00AF  
                            ?_NokiaStart 0001                            _eusart2RxHead 0036  
                          _eusart2TxHead 0038                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                     __end_of_FONTLOOKUP 7FF5                            _eusart2RxTail 0037  
                          _eusart2TxTail 0039                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 09E4                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                               ??_LCDwrite 001D  
                   __size_of_receiveData 02A4                                  ?_ToSend 00D2  
                                ?_SetMux 0001                       __CFG_CCP2MX$PORTC1 000000  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 00BF  
                                ?_printf 001D                         time_Set@WhatTime 001D  
                     UART_buff_put@_this 0007                                ?_clearLcd 0001  
                                _LEDtime 00A3                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 1098             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                              ?_ledDebug 0001                                  _SPBRGH1 000FB0  
                                _SPBRGH2 000F76                                  _SSP1ADD 000FC8  
                    sendData@whereToSend 00D1                      _receiveArrayAddress 002F  
                                _SSP1BUF 000FC9                                ?_sendData 0001  
                      _alignErrorCounter 00B1                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                              ?_time_Set 001B                          __size_of_ToSend 001C  
                        __size_of_SetMux 0038                      __size_of_SetCharger 006C  
                              ?_time_get 001B                                _AKNAKsend 0033  
                   _UART_buff_modulo_inc 10C2                                  _calc_CS 0034  
                                __pcinit 0B9E                      __size_of_NokiaStart 0092  
                        __size_of_memset 002C                                  __ramtop 0600  
                                __ptext0 0EE0                                  __ptext1 1114  
                                __ptext2 0D6C                                  __ptext3 0C26  
                                __ptext4 06C4                                  __ptext5 0D0A  
                                __ptext6 1014                                  __ptext7 1176  
                                __ptext8 0354                                  __ptext9 1098  
                        __size_of_printf 00D4                                _T0CONbits 000FD5  
                  _OSCILLATOR_Initialize 11FA                   ??_EUSART2_Transmit_ISR 0001  
                _FastTransfer_buffer_put 0354                    CRCcheck@calculatedCRC 00D1  
               ??_PIN_MANAGER_Initialize 001B                               ??_clearLcd 001E  
           crcBufS_status_put@wantedTime 0023                               ??_ledDebug 001E  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0016                     end_of_initialization 0C18  
                              Delay@wait 001B                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7E14                               ??_sendData 00D0  
                     _EUSART2_Initialize 0F50                               ??_time_Set 001D  
                             ??_time_get 001D                                  printf@c 0024  
                                printf@f 001D                    ?_UART_buff_modulo_inc 0001  
                   __size_of_updateComms 0026                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0D6C  
                    CRCcheck@arrayHolder 00D2                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 00B5                               _rx_address 003E  
                           LCDwrite@data 001C                             LCDwrite@mode 001D  
                              _TRISBbits 000F93                     ??_EUSART2_Initialize 001B  
     __size_of_FastTransfer_buffer_flush 0062                          _SPI1_Initialize 1208  
                         _UART_buff_size 11C2                      __end_of_crcBufS_get 06C4  
                    __end_of_crcBufS_put 079C                        __size_of_CRCcheck 0096  
                        Precharge@i_1672 00D3                            _moduleAddress 003C  
                   _timer0ReloadVal16bit 0041                               CRCcheck@rt 00D5  
                         __end_of_ToSend 1192                           __end_of_SetMux 0F50  
                      __size_of_LCDwrite 001A             __end_of_INTERRUPT_Initialize 1222  
                        _crcErrorCounter 00B3                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 123A                ??_FastTransfer_buffer_put 00D0  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 1040  
                      crcBufS_put@status 001F                           __end_of_printf 0946  
                           receiveData@r 00E7                             receiveData@u 00E5  
                           ??_SetCharger 0027                      start_initialization 0B9E  
               __size_of_TMR0_Initialize 002C          __size_of_PIN_MANAGER_Initialize 0050  
                  crcBufS_get@wantedTime 0025                              putch@txData 001C  
                           ??_NokiaStart 0024                    __end_of_EUSART2_Write 0EE0  
                         UART_buff_get@c 000B                   __end_of_UART_buff_size 11D8  
                         UART_buff_put@c 0009                                _Precharge 0946  
                               ??_ToSend 0026                                 ??_SetMux 001B  
                 ??_UART_buff_modulo_inc 0005                                 CRC8@data 001B  
                        crcBufS_get@time 001D                       __end_of_SetCharger 0D0A  
                            ?_respondECU 0001                              __pdataBANK0 00E9  
                               ??_memset 0021                                 ??_printf 0021  
                     __end_of_NokiaStart 0B0C                           _eusart2RxCount 0035  
                            __pbssCOMRAM 0027            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00D0                  __end_of_SPI1_Initialize 1216  
                      __size_of_clearLcd 0028                              _crcBufS_get 05E2  
                            _crcBufS_put 06C4                      EUSART2_Write@txData 001B  
                      __size_of_ledDebug 0030                          ?_UART_buff_size 0001  
           __size_of_EUSART1_Receive_ISR 001E                            ??_receiveData 00D7  
            __size_of_crcBufS_status_put 00D6                               sendData@CS 00D2  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                               ?_Precharge 0001  
                 _PIN_MANAGER_Initialize 0DC0                        __size_of_sendData 0078  
                              __pintcode 0008                            __pmediumconst 7E14  
                      __size_of_time_Set 001E                        __size_of_time_get 0012  
           ??_INTERRUPT_InterruptManager 000D                                 _BAUD1CON 000FB8  
                               _BAUD2CON 000F70                           __size_of_Delay 004C  
                    __size_of_respondECU 0054                           __size_of_putch 000A  
                   _INTERRUPT_Initialize 1216                             _receiveArray 0060  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 002C  
                               _CRCcheck 09E4                                 _LATBbits 000F8A  
                               _LATCbits 000F8B                      UART_buff_size@_this 0001  
                               _IPR1bits 000F9F                                 _PIE1bits 000F9D  
                               _IPR3bits 000FA5                                 _PIE3bits 000FA3  
                               _LCDwrite 1192                                 i2u150_40 0B2A  
    __size_of_INTERRUPT_InterruptManager 00A4                                 i2u160_40 0F9E  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0354                                 _SSP1CON1 000FC6  
                               _SSP1STAT 000FC7           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0200                                _rx_buffer 0400  
                            _lastLEDTime 00A7                               printf@flag 0021  
                          _UART_buff_get 0B0C                            _UART_buff_put 04C8  
                         Precharge@OnOff 00D0            __size_of_EUSART2_Transmit_ISR 002E  
                       ?_SPI1_Initialize 0001                           SetCharger@mode 00D2  
                            _INTCON2bits 000FF1                                copy_data0 0BFA  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 0031  
                          ??_updateComms 0027                                 __Hrparam 0000  
                            ??_Precharge 0024                                 __Lrparam 0000  
                     __CFG_BOREN$SBORDIS 000000                            time_Set@value 001B  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                      ??_TMR0_StartTimer 001B                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                              sendData@i 00D3                                 _clearLcd 10EC  
                               _ledDebug 0FB6                 crcBufS_status_put@status 001E  
                               __ptext10 00B0                                 __ptext11 09E4  
                               __ptext20 0946                                 __ptext12 079C  
                               __ptext21 0FB6                                 __ptext13 05E2  
                               __ptext30 0F50                                 __ptext22 11D8  
                               __ptext14 0E5C                                 __ptext31 0A7A  
                               __ptext23 113A                                 __ptext15 0C9E  
                               __ptext40 0F84                                 __ptext32 10EC  
                               __ptext24 11AC                                 __ptext16 0872  
                               __ptext41 11C2                                 __ptext33 1192  
                               __ptext25 1040                                 __ptext17 1222  
                               __ptext42 0B0C                                 __ptext34 11EA  
                               __ptext26 1236                                 __ptext18 0EA6  
                               __ptext43 1158                                 __ptext35 1208  
                               __ptext27 0DC0                                 __ptext19 0F18  
                               __ptext44 04C8                                 __ptext36 0E10  
                               __ptext28 11FA                                 __ptext45 10C2  
                               __ptext29 1216                                 __ptext38 0FE6  
                               __ptext39 106C                             _SSP1CON1bits 000FC6  
                          __size_of_CRC8 004A                  EUSART1_Receive_ISR@data 000C  
            __size_of_EUSART2_Initialize 0034                            _returnAddress 003D  
                          __size_of_main 0038                              _receiveData 00B0  
                         _Transmit_stall 0044                                 _sendData 0C26  
                               _talkTime 00AB                               _RC1STAbits 000FAB  
                               _time_Set 113A                               _RC2STAbits 000F71  
                            clearLcd@res 001E                                 _time_get 11D8  
                             _FONTLOOKUP 7E15                             ??_respondECU 0027  
                               int$flags 0045                             _serial_write 00BD  
                    __end_of_updateComms 113A       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 1158                        receiveData@holder 00DF  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00B7  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0DC0                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 0FB6  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0023  
                            _serial_peek 00B9                              _serial_read 00BB  
               ?_FastTransfer_buffer_put 0021                                 printf@ap 0022  
                               printf@cp 0025            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0009                          ??_UART_buff_put 000A  
                 __size_of_EUSART2_Write 003A                      _EUSART2_Receive_ISR 106C  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 1040                receiveData@crcHolder_1381 00DE  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0872                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0E10         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 1114  
