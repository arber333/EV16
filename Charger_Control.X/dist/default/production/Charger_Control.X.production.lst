

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Apr 22 00:51:02 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           	psect	idataCOMRAM
    70  00127C                     __pidataCOMRAM:
    71                           	opt stack 0
    72                           
    73                           ;initializer for _Transmit_stall
    74  00127C  01                 	db	1
    75                           
    76                           	psect	idataBANK0
    77  00126E                     __pidataBANK0:
    78                           	opt stack 0
    79                           
    80                           ;initializer for _ChargerData
    81  00126E  4D                 	db	77
    82  00126F  2C                 	db	44
    83  001270  00                 	db	0
    84  001271  2C                 	db	44
    85  001272  00                 	db	0
    86  001273  2C                 	db	44
    87  001274  00                 	db	0
    88  001275  2C                 	db	44
    89  001276  45                 	db	69
    90                           
    91                           	psect	mediumconst
    92  007E2C                     __pmediumconst:
    93                           	opt stack 0
    94  007E2C  00                 	db	0
    95  007E2D                     _FONTLOOKUP:
    96                           	opt stack 0
    97  007E2D  00                 	db	0
    98  007E2E  00                 	db	0
    99  007E2F  00                 	db	0
   100  007E30  00                 	db	0
   101  007E31  00                 	db	0
   102  007E32  00                 	db	0
   103  007E33  00                 	db	0
   104  007E34  2F                 	db	47
   105  007E35  00                 	db	0
   106  007E36  00                 	db	0
   107  007E37  00                 	db	0
   108  007E38  07                 	db	7
   109  007E39  00                 	db	0
   110  007E3A  07                 	db	7
   111  007E3B  00                 	db	0
   112  007E3C  14                 	db	20
   113  007E3D  7F                 	db	127
   114  007E3E  14                 	db	20
   115  007E3F  7F                 	db	127
   116  007E40  14                 	db	20
   117  007E41  24                 	db	36
   118  007E42  2A                 	db	42
   119  007E43  7F                 	db	127
   120  007E44  2A                 	db	42
   121  007E45  12                 	db	18
   122  007E46  C4                 	db	196
   123  007E47  C8                 	db	200
   124  007E48  10                 	db	16
   125  007E49  26                 	db	38
   126  007E4A  46                 	db	70
   127  007E4B  36                 	db	54
   128  007E4C  49                 	db	73
   129  007E4D  55                 	db	85
   130  007E4E  22                 	db	34
   131  007E4F  50                 	db	80
   132  007E50  00                 	db	0
   133  007E51  05                 	db	5
   134  007E52  03                 	db	3
   135  007E53  00                 	db	0
   136  007E54  00                 	db	0
   137  007E55  00                 	db	0
   138  007E56  1C                 	db	28
   139  007E57  22                 	db	34
   140  007E58  41                 	db	65
   141  007E59  00                 	db	0
   142  007E5A  00                 	db	0
   143  007E5B  41                 	db	65
   144  007E5C  22                 	db	34
   145  007E5D  1C                 	db	28
   146  007E5E  00                 	db	0
   147  007E5F  14                 	db	20
   148  007E60  08                 	db	8
   149  007E61  3E                 	db	62
   150  007E62  08                 	db	8
   151  007E63  14                 	db	20
   152  007E64  08                 	db	8
   153  007E65  08                 	db	8
   154  007E66  3E                 	db	62
   155  007E67  08                 	db	8
   156  007E68  08                 	db	8
   157  007E69  00                 	db	0
   158  007E6A  00                 	db	0
   159  007E6B  50                 	db	80
   160  007E6C  30                 	db	48
   161  007E6D  00                 	db	0
   162  007E6E  10                 	db	16
   163  007E6F  10                 	db	16
   164  007E70  10                 	db	16
   165  007E71  10                 	db	16
   166  007E72  10                 	db	16
   167  007E73  00                 	db	0
   168  007E74  60                 	db	96
   169  007E75  60                 	db	96
   170  007E76  00                 	db	0
   171  007E77  00                 	db	0
   172  007E78  20                 	db	32
   173  007E79  10                 	db	16
   174  007E7A  08                 	db	8
   175  007E7B  04                 	db	4
   176  007E7C  02                 	db	2
   177  007E7D  3E                 	db	62
   178  007E7E  51                 	db	81
   179  007E7F  49                 	db	73
   180  007E80  45                 	db	69
   181  007E81  3E                 	db	62
   182  007E82  00                 	db	0
   183  007E83  42                 	db	66
   184  007E84  7F                 	db	127
   185  007E85  40                 	db	64
   186  007E86  00                 	db	0
   187  007E87  42                 	db	66
   188  007E88  61                 	db	97
   189  007E89  51                 	db	81
   190  007E8A  49                 	db	73
   191  007E8B  46                 	db	70
   192  007E8C  21                 	db	33
   193  007E8D  41                 	db	65
   194  007E8E  45                 	db	69
   195  007E8F  4B                 	db	75
   196  007E90  31                 	db	49
   197  007E91  18                 	db	24
   198  007E92  14                 	db	20
   199  007E93  12                 	db	18
   200  007E94  7F                 	db	127
   201  007E95  10                 	db	16
   202  007E96  27                 	db	39
   203  007E97  45                 	db	69
   204  007E98  45                 	db	69
   205  007E99  45                 	db	69
   206  007E9A  39                 	db	57
   207  007E9B  3C                 	db	60
   208  007E9C  4A                 	db	74
   209  007E9D  49                 	db	73
   210  007E9E  49                 	db	73
   211  007E9F  30                 	db	48
   212  007EA0  01                 	db	1
   213  007EA1  71                 	db	113
   214  007EA2  09                 	db	9
   215  007EA3  05                 	db	5
   216  007EA4  03                 	db	3
   217  007EA5  36                 	db	54
   218  007EA6  49                 	db	73
   219  007EA7  49                 	db	73
   220  007EA8  49                 	db	73
   221  007EA9  36                 	db	54
   222  007EAA  06                 	db	6
   223  007EAB  49                 	db	73
   224  007EAC  49                 	db	73
   225  007EAD  29                 	db	41
   226  007EAE  1E                 	db	30
   227  007EAF  00                 	db	0
   228  007EB0  36                 	db	54
   229  007EB1  36                 	db	54
   230  007EB2  00                 	db	0
   231  007EB3  00                 	db	0
   232  007EB4  00                 	db	0
   233  007EB5  56                 	db	86
   234  007EB6  36                 	db	54
   235  007EB7  00                 	db	0
   236  007EB8  00                 	db	0
   237  007EB9  08                 	db	8
   238  007EBA  14                 	db	20
   239  007EBB  22                 	db	34
   240  007EBC  41                 	db	65
   241  007EBD  00                 	db	0
   242  007EBE  14                 	db	20
   243  007EBF  14                 	db	20
   244  007EC0  14                 	db	20
   245  007EC1  14                 	db	20
   246  007EC2  14                 	db	20
   247  007EC3  00                 	db	0
   248  007EC4  41                 	db	65
   249  007EC5  22                 	db	34
   250  007EC6  14                 	db	20
   251  007EC7  08                 	db	8
   252  007EC8  02                 	db	2
   253  007EC9  01                 	db	1
   254  007ECA  51                 	db	81
   255  007ECB  09                 	db	9
   256  007ECC  06                 	db	6
   257  007ECD  32                 	db	50
   258  007ECE  49                 	db	73
   259  007ECF  59                 	db	89
   260  007ED0  51                 	db	81
   261  007ED1  3E                 	db	62
   262  007ED2  7E                 	db	126
   263  007ED3  11                 	db	17
   264  007ED4  11                 	db	17
   265  007ED5  11                 	db	17
   266  007ED6  7E                 	db	126
   267  007ED7  7F                 	db	127
   268  007ED8  49                 	db	73
   269  007ED9  49                 	db	73
   270  007EDA  49                 	db	73
   271  007EDB  36                 	db	54
   272  007EDC  3E                 	db	62
   273  007EDD  41                 	db	65
   274  007EDE  41                 	db	65
   275  007EDF  41                 	db	65
   276  007EE0  22                 	db	34
   277  007EE1  7F                 	db	127
   278  007EE2  41                 	db	65
   279  007EE3  41                 	db	65
   280  007EE4  22                 	db	34
   281  007EE5  1C                 	db	28
   282  007EE6  7F                 	db	127
   283  007EE7  49                 	db	73
   284  007EE8  49                 	db	73
   285  007EE9  49                 	db	73
   286  007EEA  41                 	db	65
   287  007EEB  7F                 	db	127
   288  007EEC  09                 	db	9
   289  007EED  09                 	db	9
   290  007EEE  09                 	db	9
   291  007EEF  01                 	db	1
   292  007EF0  3E                 	db	62
   293  007EF1  41                 	db	65
   294  007EF2  49                 	db	73
   295  007EF3  49                 	db	73
   296  007EF4  7A                 	db	122
   297  007EF5  7F                 	db	127
   298  007EF6  08                 	db	8
   299  007EF7  08                 	db	8
   300  007EF8  08                 	db	8
   301  007EF9  7F                 	db	127
   302  007EFA  00                 	db	0
   303  007EFB  41                 	db	65
   304  007EFC  7F                 	db	127
   305  007EFD  41                 	db	65
   306  007EFE  00                 	db	0
   307  007EFF  20                 	db	32
   308  007F00  40                 	db	64
   309  007F01  41                 	db	65
   310  007F02  3F                 	db	63
   311  007F03  01                 	db	1
   312  007F04  7F                 	db	127
   313  007F05  08                 	db	8
   314  007F06  14                 	db	20
   315  007F07  22                 	db	34
   316  007F08  41                 	db	65
   317  007F09  7F                 	db	127
   318  007F0A  40                 	db	64
   319  007F0B  40                 	db	64
   320  007F0C  40                 	db	64
   321  007F0D  40                 	db	64
   322  007F0E  7F                 	db	127
   323  007F0F  02                 	db	2
   324  007F10  0C                 	db	12
   325  007F11  02                 	db	2
   326  007F12  7F                 	db	127
   327  007F13  7F                 	db	127
   328  007F14  04                 	db	4
   329  007F15  08                 	db	8
   330  007F16  10                 	db	16
   331  007F17  7F                 	db	127
   332  007F18  3E                 	db	62
   333  007F19  41                 	db	65
   334  007F1A  41                 	db	65
   335  007F1B  41                 	db	65
   336  007F1C  3E                 	db	62
   337  007F1D  7F                 	db	127
   338  007F1E  09                 	db	9
   339  007F1F  09                 	db	9
   340  007F20  09                 	db	9
   341  007F21  06                 	db	6
   342  007F22  3E                 	db	62
   343  007F23  41                 	db	65
   344  007F24  51                 	db	81
   345  007F25  21                 	db	33
   346  007F26  5E                 	db	94
   347  007F27  7F                 	db	127
   348  007F28  09                 	db	9
   349  007F29  19                 	db	25
   350  007F2A  29                 	db	41
   351  007F2B  46                 	db	70
   352  007F2C  46                 	db	70
   353  007F2D  49                 	db	73
   354  007F2E  49                 	db	73
   355  007F2F  49                 	db	73
   356  007F30  31                 	db	49
   357  007F31  01                 	db	1
   358  007F32  01                 	db	1
   359  007F33  7F                 	db	127
   360  007F34  01                 	db	1
   361  007F35  01                 	db	1
   362  007F36  3F                 	db	63
   363  007F37  40                 	db	64
   364  007F38  40                 	db	64
   365  007F39  40                 	db	64
   366  007F3A  3F                 	db	63
   367  007F3B  1F                 	db	31
   368  007F3C  20                 	db	32
   369  007F3D  40                 	db	64
   370  007F3E  20                 	db	32
   371  007F3F  1F                 	db	31
   372  007F40  3F                 	db	63
   373  007F41  40                 	db	64
   374  007F42  38                 	db	56
   375  007F43  40                 	db	64
   376  007F44  3F                 	db	63
   377  007F45  63                 	db	99
   378  007F46  14                 	db	20
   379  007F47  08                 	db	8
   380  007F48  14                 	db	20
   381  007F49  63                 	db	99
   382  007F4A  07                 	db	7
   383  007F4B  08                 	db	8
   384  007F4C  70                 	db	112
   385  007F4D  08                 	db	8
   386  007F4E  07                 	db	7
   387  007F4F  61                 	db	97
   388  007F50  51                 	db	81
   389  007F51  49                 	db	73
   390  007F52  45                 	db	69
   391  007F53  43                 	db	67
   392  007F54  00                 	db	0
   393  007F55  7F                 	db	127
   394  007F56  41                 	db	65
   395  007F57  41                 	db	65
   396  007F58  00                 	db	0
   397  007F59  55                 	db	85
   398  007F5A  2A                 	db	42
   399  007F5B  55                 	db	85
   400  007F5C  2A                 	db	42
   401  007F5D  55                 	db	85
   402  007F5E  00                 	db	0
   403  007F5F  41                 	db	65
   404  007F60  41                 	db	65
   405  007F61  7F                 	db	127
   406  007F62  00                 	db	0
   407  007F63  04                 	db	4
   408  007F64  02                 	db	2
   409  007F65  01                 	db	1
   410  007F66  02                 	db	2
   411  007F67  04                 	db	4
   412  007F68  40                 	db	64
   413  007F69  40                 	db	64
   414  007F6A  40                 	db	64
   415  007F6B  40                 	db	64
   416  007F6C  40                 	db	64
   417  007F6D  00                 	db	0
   418  007F6E  01                 	db	1
   419  007F6F  02                 	db	2
   420  007F70  04                 	db	4
   421  007F71  00                 	db	0
   422  007F72  20                 	db	32
   423  007F73  54                 	db	84
   424  007F74  54                 	db	84
   425  007F75  54                 	db	84
   426  007F76  78                 	db	120
   427  007F77  7F                 	db	127
   428  007F78  48                 	db	72
   429  007F79  44                 	db	68
   430  007F7A  44                 	db	68
   431  007F7B  38                 	db	56
   432  007F7C  38                 	db	56
   433  007F7D  44                 	db	68
   434  007F7E  44                 	db	68
   435  007F7F  44                 	db	68
   436  007F80  20                 	db	32
   437  007F81  38                 	db	56
   438  007F82  44                 	db	68
   439  007F83  44                 	db	68
   440  007F84  48                 	db	72
   441  007F85  7F                 	db	127
   442  007F86  38                 	db	56
   443  007F87  54                 	db	84
   444  007F88  54                 	db	84
   445  007F89  54                 	db	84
   446  007F8A  18                 	db	24
   447  007F8B  08                 	db	8
   448  007F8C  7E                 	db	126
   449  007F8D  09                 	db	9
   450  007F8E  01                 	db	1
   451  007F8F  02                 	db	2
   452  007F90  0C                 	db	12
   453  007F91  52                 	db	82
   454  007F92  52                 	db	82
   455  007F93  52                 	db	82
   456  007F94  3E                 	db	62
   457  007F95  7F                 	db	127
   458  007F96  08                 	db	8
   459  007F97  04                 	db	4
   460  007F98  04                 	db	4
   461  007F99  78                 	db	120
   462  007F9A  00                 	db	0
   463  007F9B  44                 	db	68
   464  007F9C  7D                 	db	125
   465  007F9D  40                 	db	64
   466  007F9E  00                 	db	0
   467  007F9F  20                 	db	32
   468  007FA0  40                 	db	64
   469  007FA1  44                 	db	68
   470  007FA2  3D                 	db	61
   471  007FA3  00                 	db	0
   472  007FA4  7F                 	db	127
   473  007FA5  10                 	db	16
   474  007FA6  28                 	db	40
   475  007FA7  44                 	db	68
   476  007FA8  00                 	db	0
   477  007FA9  00                 	db	0
   478  007FAA  41                 	db	65
   479  007FAB  7F                 	db	127
   480  007FAC  40                 	db	64
   481  007FAD  00                 	db	0
   482  007FAE  7C                 	db	124
   483  007FAF  04                 	db	4
   484  007FB0  18                 	db	24
   485  007FB1  04                 	db	4
   486  007FB2  78                 	db	120
   487  007FB3  7C                 	db	124
   488  007FB4  08                 	db	8
   489  007FB5  04                 	db	4
   490  007FB6  04                 	db	4
   491  007FB7  78                 	db	120
   492  007FB8  38                 	db	56
   493  007FB9  44                 	db	68
   494  007FBA  44                 	db	68
   495  007FBB  44                 	db	68
   496  007FBC  38                 	db	56
   497  007FBD  7C                 	db	124
   498  007FBE  14                 	db	20
   499  007FBF  14                 	db	20
   500  007FC0  14                 	db	20
   501  007FC1  08                 	db	8
   502  007FC2  08                 	db	8
   503  007FC3  14                 	db	20
   504  007FC4  14                 	db	20
   505  007FC5  18                 	db	24
   506  007FC6  7C                 	db	124
   507  007FC7  7C                 	db	124
   508  007FC8  08                 	db	8
   509  007FC9  04                 	db	4
   510  007FCA  04                 	db	4
   511  007FCB  08                 	db	8
   512  007FCC  48                 	db	72
   513  007FCD  54                 	db	84
   514  007FCE  54                 	db	84
   515  007FCF  54                 	db	84
   516  007FD0  20                 	db	32
   517  007FD1  04                 	db	4
   518  007FD2  3F                 	db	63
   519  007FD3  44                 	db	68
   520  007FD4  40                 	db	64
   521  007FD5  20                 	db	32
   522  007FD6  3C                 	db	60
   523  007FD7  40                 	db	64
   524  007FD8  40                 	db	64
   525  007FD9  20                 	db	32
   526  007FDA  7C                 	db	124
   527  007FDB  1C                 	db	28
   528  007FDC  20                 	db	32
   529  007FDD  40                 	db	64
   530  007FDE  20                 	db	32
   531  007FDF  1C                 	db	28
   532  007FE0  3C                 	db	60
   533  007FE1  40                 	db	64
   534  007FE2  30                 	db	48
   535  007FE3  40                 	db	64
   536  007FE4  3C                 	db	60
   537  007FE5  44                 	db	68
   538  007FE6  28                 	db	40
   539  007FE7  10                 	db	16
   540  007FE8  28                 	db	40
   541  007FE9  44                 	db	68
   542  007FEA  0C                 	db	12
   543  007FEB  50                 	db	80
   544  007FEC  50                 	db	80
   545  007FED  50                 	db	80
   546  007FEE  3C                 	db	60
   547  007FEF  44                 	db	68
   548  007FF0  64                 	db	100
   549  007FF1  54                 	db	84
   550  007FF2  4C                 	db	76
   551  007FF3  44                 	db	68
   552  007FF4                     __end_of_FONTLOOKUP:
   553                           	opt stack 0
   554  007FF4                     STR_3:
   555  007FF4  28                 	db	40
   556  007FF5  6E                 	db	110	;'n'
   557  007FF6  75                 	db	117	;'u'
   558  007FF7  6C                 	db	108	;'l'
   559  007FF8  6C                 	db	108	;'l'
   560  007FF9  29                 	db	41
   561  007FFA  00                 	db	0
   562  007FFB                     STR_1:
   563  007FFB  25                 	db	37
   564  007FFC  73                 	db	115	;'s'
   565  007FFD  00                 	db	0
   566  0000                     
   567                           ; #config settings
   568  007FFE  00                 	db	0	; dummy byte at the end
   569  0000                     
   570                           	psect	nvCOMRAM
   571  000041                     __pnvCOMRAM:
   572                           	opt stack 0
   573  000041                     _timer0ReloadVal16bit:
   574                           	opt stack 0
   575  000041                     	ds	2
   576  000043                     _eusart2TxBufferRemaining:
   577                           	opt stack 0
   578  000043                     	ds	1
   579  0000                     _ANSELA	set	3896
   580  0000                     _ANSELB	set	3897
   581  0000                     _ANSELC	set	3898
   582  0000                     _ANSELD	set	3899
   583  0000                     _ANSELE	set	3900
   584  0000                     _BAUD1CON	set	4024
   585  0000                     _BAUD2CON	set	3952
   586  0000                     _INTCON2bits	set	4081
   587  0000                     _INTCONbits	set	4082
   588  0000                     _IPR1bits	set	3999
   589  0000                     _IPR3bits	set	4005
   590  0000                     _LATA	set	3977
   591  0000                     _LATB	set	3978
   592  0000                     _LATC	set	3979
   593  0000                     _LATCbits	set	3979
   594  0000                     _LATD	set	3980
   595  0000                     _LATE	set	3981
   596  0000                     _OSCCON	set	4051
   597  0000                     _OSCCON2	set	4050
   598  0000                     _OSCTUNE	set	3995
   599  0000                     _PIE1bits	set	3997
   600  0000                     _PIE3bits	set	4003
   601  0000                     _PIR1bits	set	3998
   602  0000                     _PIR3bits	set	4004
   603  0000                     _RC1STA	set	4011
   604  0000                     _RC1STAbits	set	4011
   605  0000                     _RC2STA	set	3953
   606  0000                     _RC2STAbits	set	3953
   607  0000                     _RCONbits	set	4048
   608  0000                     _RCREG1	set	4014
   609  0000                     _RCREG2	set	3956
   610  0000                     _SPBRG1	set	4015
   611  0000                     _SPBRG2	set	3957
   612  0000                     _SPBRGH1	set	4016
   613  0000                     _SPBRGH2	set	3958
   614  0000                     _SSP2ADD	set	3950
   615  0000                     _SSP2BUF	set	3951
   616  0000                     _SSP2CON1	set	3948
   617  0000                     _SSP2CON1bits	set	3948
   618  0000                     _SSP2STAT	set	3949
   619  0000                     _SSP2STATbits	set	3949
   620  0000                     _T0CON	set	4053
   621  0000                     _T0CONbits	set	4053
   622  0000                     _TMR0H	set	4055
   623  0000                     _TMR0L	set	4054
   624  0000                     _TRISA	set	3986
   625  0000                     _TRISB	set	3987
   626  0000                     _TRISC	set	3988
   627  0000                     _TRISD	set	3989
   628  0000                     _TRISE	set	3990
   629  0000                     _TX1STA	set	4012
   630  0000                     _TX2STA	set	3954
   631  0000                     _TXREG1	set	4013
   632  0000                     _TXREG2	set	3955
   633  0000                     _WPUB	set	3937
   634  0000                     _LATB0	set	31824
   635  0000                     _LATB1	set	31825
   636  0000                     _LATB3	set	31827
   637  0000                     _LATB4	set	31828
   638  0000                     _LATB5	set	31829
   639  0000                     _LATC0	set	31832
   640  0000                     _LATC1	set	31833
   641  0000                     _LATD0	set	31840
   642  0000                     _LATD3	set	31843
   643                           
   644                           	psect	cinit
   645  000B9A                     __pcinit:
   646                           	opt stack 0
   647  000B9A                     start_initialization:
   648                           	opt stack 0
   649  000B9A                     __initialization:
   650                           	opt stack 0
   651                           
   652                           ; Clear objects allocated to BANK4 (200 bytes)
   653  000B9A  EE04  F000         	lfsr	0,__pbssBANK4
   654  000B9E  0EC8               	movlw	200
   655  000BA0                     clear_0:
   656  000BA0  6AEE               	clrf	postinc0,c
   657  000BA2  06E8               	decf	wreg,f,c
   658  000BA4  E1FD               	bnz	clear_0
   659                           
   660                           ; Clear objects allocated to BANK3 (206 bytes)
   661  000BA6  EE03  F000         	lfsr	0,__pbssBANK3
   662  000BAA  0ECE               	movlw	206
   663  000BAC                     clear_1:
   664  000BAC  6AEE               	clrf	postinc0,c
   665  000BAE  06E8               	decf	wreg,f,c
   666  000BB0  E1FD               	bnz	clear_1
   667                           
   668                           ; Clear objects allocated to BANK2 (206 bytes)
   669  000BB2  EE02  F000         	lfsr	0,__pbssBANK2
   670  000BB6  0ECE               	movlw	206
   671  000BB8                     clear_2:
   672  000BB8  6AEE               	clrf	postinc0,c
   673  000BBA  06E8               	decf	wreg,f,c
   674  000BBC  E1FD               	bnz	clear_2
   675                           
   676                           ; Clear objects allocated to BANK1 (206 bytes)
   677  000BBE  EE01  F000         	lfsr	0,__pbssBANK1
   678  000BC2  0ECE               	movlw	206
   679  000BC4                     clear_3:
   680  000BC4  6AEE               	clrf	postinc0,c
   681  000BC6  06E8               	decf	wreg,f,c
   682  000BC8  E1FD               	bnz	clear_3
   683                           
   684                           ; Clear objects allocated to BANK0 (96 bytes)
   685  000BCA  EE00  F060         	lfsr	0,__pbssBANK0
   686  000BCE  0E60               	movlw	96
   687  000BD0                     clear_4:
   688  000BD0  6AEE               	clrf	postinc0,c
   689  000BD2  06E8               	decf	wreg,f,c
   690  000BD4  E1FD               	bnz	clear_4
   691                           
   692                           ; Clear objects allocated to COMRAM (26 bytes)
   693  000BD6  EE00  F027         	lfsr	0,__pbssCOMRAM
   694  000BDA  0E1A               	movlw	26
   695  000BDC                     clear_5:
   696  000BDC  6AEE               	clrf	postinc0,c
   697  000BDE  06E8               	decf	wreg,f,c
   698  000BE0  E1FD               	bnz	clear_5
   699                           
   700                           ; Initialize objects allocated to BANK0 (9 bytes)
   701                           ; load TBLPTR registers with __pidataBANK0
   702  000BE2  0E6E               	movlw	low __pidataBANK0
   703  000BE4  6EF6               	movwf	tblptrl,c
   704  000BE6  0E12               	movlw	high __pidataBANK0
   705  000BE8  6EF7               	movwf	tblptrh,c
   706  000BEA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   707  000BEC  6EF8               	movwf	tblptru,c
   708  000BEE  EE00  F0D9         	lfsr	0,__pdataBANK0
   709  000BF2  EE10 F009          	lfsr	1,9
   710  000BF6                     copy_data0:
   711  000BF6  0009               	tblrd		*+
   712  000BF8  CFF5 FFEE          	movff	tablat,postinc0
   713  000BFC  50E5               	movf	postdec1,w,c
   714  000BFE  50E1               	movf	fsr1l,w,c
   715  000C00  E1FA               	bnz	copy_data0
   716                           
   717                           ; Initialize objects allocated to COMRAM (1 bytes)
   718                           ; load TBLPTR registers with __pidataCOMRAM
   719  000C02  0E7C               	movlw	low __pidataCOMRAM
   720  000C04  6EF6               	movwf	tblptrl,c
   721  000C06  0E12               	movlw	high __pidataCOMRAM
   722  000C08  6EF7               	movwf	tblptrh,c
   723  000C0A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   724  000C0C  6EF8               	movwf	tblptru,c
   725  000C0E  0009               	tblrd		*+	;fetch initializer
   726  000C10  CFF5 F044          	movff	tablat,__pdataCOMRAM
   727  000C14                     end_of_initialization:
   728                           	opt stack 0
   729  000C14                     __end_of__initialization:
   730                           	opt stack 0
   731  000C14  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   732  000C16  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   733  000C18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   734  000C1A  6EF8               	movwf	tblptru,c
   735  000C1C  0100               	movlb	0
   736  000C1E  EF11  F006         	goto	_main	;jump to C main() function
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           postdec1	equ	0xFE5
   744                           fsr1l	equ	0xFE1
   745                           
   746                           	psect	bssCOMRAM
   747  000027                     __pbssCOMRAM:
   748                           	opt stack 0
   749  000027                     _Start:
   750                           	opt stack 0
   751  000027                     	ds	2
   752  000029                     _group:
   753                           	opt stack 0
   754  000029                     	ds	2
   755  00002B                     _receiveArrayAddress:
   756                           	opt stack 0
   757  00002B                     	ds	2
   758  00002D                     _sendStructAddress:
   759                           	opt stack 0
   760  00002D                     	ds	2
   761  00002F                     _serial_read:
   762                           	opt stack 0
   763  00002F                     	ds	2
   764  000031                     _serial_write:
   765                           	opt stack 0
   766  000031                     	ds	2
   767  000033                     _AKNAKsend:
   768                           	opt stack 0
   769  000033                     	ds	1
   770  000034                     _calc_CS:
   771                           	opt stack 0
   772  000034                     	ds	1
   773  000035                     _eusart2RxCount:
   774                           	opt stack 0
   775  000035                     	ds	1
   776  000036                     _eusart2RxHead:
   777                           	opt stack 0
   778  000036                     	ds	1
   779  000037                     _eusart2RxTail:
   780                           	opt stack 0
   781  000037                     	ds	1
   782  000038                     _eusart2TxHead:
   783                           	opt stack 0
   784  000038                     	ds	1
   785  000039                     _eusart2TxTail:
   786                           	opt stack 0
   787  000039                     	ds	1
   788  00003A                     _i:
   789                           	opt stack 0
   790  00003A                     	ds	1
   791  00003B                     _maxDataAddress:
   792                           	opt stack 0
   793  00003B                     	ds	1
   794  00003C                     _moduleAddress:
   795                           	opt stack 0
   796  00003C                     	ds	1
   797  00003D                     _returnAddress:
   798                           	opt stack 0
   799  00003D                     	ds	1
   800  00003E                     _rx_address:
   801                           	opt stack 0
   802  00003E                     	ds	1
   803  00003F                     _rx_array_inx:
   804                           	opt stack 0
   805  00003F                     	ds	1
   806  000040                     _rx_len:
   807                           	opt stack 0
   808  000040                     	ds	1
   809                           tblptru	equ	0xFF8
   810                           tblptrh	equ	0xFF7
   811                           tblptrl	equ	0xFF6
   812                           tablat	equ	0xFF5
   813                           postinc0	equ	0xFEE
   814                           wreg	equ	0xFE8
   815                           postdec1	equ	0xFE5
   816                           fsr1l	equ	0xFE1
   817                           
   818                           	psect	dataCOMRAM
   819  000044                     __pdataCOMRAM:
   820                           	opt stack 0
   821  000044                     _Transmit_stall:
   822                           	opt stack 0
   823  000044                     	ds	1
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           postdec1	equ	0xFE5
   831                           fsr1l	equ	0xFE1
   832                           
   833                           	psect	bssBANK0
   834  000060                     __pbssBANK0:
   835                           	opt stack 0
   836  000060                     _receiveArray:
   837                           	opt stack 0
   838  000060                     	ds	40
   839  000088                     _eusart2RxBuffer:
   840                           	opt stack 0
   841  000088                     	ds	8
   842  000090                     _eusart2TxBuffer:
   843                           	opt stack 0
   844  000090                     	ds	8
   845  000098                     _addressErrorCounter:
   846                           	opt stack 0
   847  000098                     	ds	2
   848  00009A                     _alignErrorCounter:
   849                           	opt stack 0
   850  00009A                     	ds	2
   851  00009C                     _crcErrorCounter:
   852                           	opt stack 0
   853  00009C                     	ds	2
   854  00009E                     _dataAdressErrorCounter:
   855                           	opt stack 0
   856  00009E                     	ds	2
   857  0000A0                     _serial_available:
   858                           	opt stack 0
   859  0000A0                     	ds	2
   860  0000A2                     _serial_peek:
   861                           	opt stack 0
   862  0000A2                     	ds	2
   863  0000A4                     _crc_buffer:
   864                           	opt stack 0
   865  0000A4                     	ds	17
   866  0000B5                     _ddata:
   867                           	opt stack 0
   868  0000B5                     	ds	11
   869                           tblptru	equ	0xFF8
   870                           tblptrh	equ	0xFF7
   871                           tblptrl	equ	0xFF6
   872                           tablat	equ	0xFF5
   873                           postinc0	equ	0xFEE
   874                           wreg	equ	0xFE8
   875                           postdec1	equ	0xFE5
   876                           fsr1l	equ	0xFE1
   877                           
   878                           	psect	dataBANK0
   879  0000D9                     __pdataBANK0:
   880                           	opt stack 0
   881  0000D9                     _ChargerData:
   882                           	opt stack 0
   883  0000D9                     	ds	9
   884                           tblptru	equ	0xFF8
   885                           tblptrh	equ	0xFF7
   886                           tblptrl	equ	0xFF6
   887                           tablat	equ	0xFF5
   888                           postinc0	equ	0xFEE
   889                           wreg	equ	0xFE8
   890                           postdec1	equ	0xFE5
   891                           fsr1l	equ	0xFE1
   892                           
   893                           	psect	bssBANK1
   894  000100                     __pbssBANK1:
   895                           	opt stack 0
   896  000100                     _ring_buffer:
   897                           	opt stack 0
   898  000100                     	ds	206
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           wreg	equ	0xFE8
   905                           postdec1	equ	0xFE5
   906                           fsr1l	equ	0xFE1
   907                           
   908                           	psect	bssBANK2
   909  000200                     __pbssBANK2:
   910                           	opt stack 0
   911  000200                     _input_buffer:
   912                           	opt stack 0
   913  000200                     	ds	206
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postdec1	equ	0xFE5
   921                           fsr1l	equ	0xFE1
   922                           
   923                           	psect	bssBANK3
   924  000300                     __pbssBANK3:
   925                           	opt stack 0
   926  000300                     _output_buffer:
   927                           	opt stack 0
   928  000300                     	ds	206
   929                           tblptru	equ	0xFF8
   930                           tblptrh	equ	0xFF7
   931                           tblptrl	equ	0xFF6
   932                           tablat	equ	0xFF5
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           postdec1	equ	0xFE5
   936                           fsr1l	equ	0xFE1
   937                           
   938                           	psect	bssBANK4
   939  000400                     __pbssBANK4:
   940                           	opt stack 0
   941  000400                     _rx_buffer:
   942                           	opt stack 0
   943  000400                     	ds	200
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           postdec1	equ	0xFE5
   951                           fsr1l	equ	0xFE1
   952                           
   953                           	psect	cstackBANK0
   954  0000C0                     __pcstackBANK0:
   955                           	opt stack 0
   956  0000C0                     ??_sendData:
   957  0000C0                     ??_FastTransfer_buffer_put:
   958  0000C0                     CRCcheck@SentCRC:
   959                           	opt stack 0
   960  0000C0                     Precharge@OnOff:
   961                           	opt stack 0
   962  0000C0                     SetCharger@Current:
   963                           	opt stack 0
   964  0000C0                     NokiaStr@i:
   965                           	opt stack 0
   966                           
   967                           ; 2 bytes @ 0x0
   968  0000C0                     	ds	1
   969  0000C1                     sendData@whereToSend:
   970                           	opt stack 0
   971  0000C1                     CRCcheck@calculatedCRC:
   972                           	opt stack 0
   973  0000C1                     SetCharger@Voltage:
   974                           	opt stack 0
   975  0000C1                     Precharge@i:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x1
   979  0000C1                     	ds	1
   980  0000C2                     sendData@CS:
   981                           	opt stack 0
   982  0000C2                     SetCharger@mode:
   983                           	opt stack 0
   984  0000C2                     ToSend@what:
   985                           	opt stack 0
   986  0000C2                     CRCcheck@arrayHolder:
   987                           	opt stack 0
   988                           
   989                           ; 3 bytes @ 0x2
   990  0000C2                     	ds	1
   991  0000C3                     sendData@i:
   992                           	opt stack 0
   993  0000C3                     Precharge@i_1699:
   994                           	opt stack 0
   995                           
   996                           ; 2 bytes @ 0x3
   997  0000C3                     	ds	2
   998  0000C5                     CRCcheck@rt:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x5
  1002  0000C5                     	ds	2
  1003  0000C7                     ??_receiveData:
  1004                           
  1005                           ; 1 bytes @ 0x7
  1006  0000C7                     	ds	6
  1007  0000CD                     receiveData@crcHolder:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0xD
  1011  0000CD                     	ds	1
  1012  0000CE                     receiveData@crcHolder_1420:
  1013                           	opt stack 0
  1014                           
  1015                           ; 1 bytes @ 0xE
  1016  0000CE                     	ds	1
  1017  0000CF                     receiveData@holder:
  1018                           	opt stack 0
  1019                           
  1020                           ; 3 bytes @ 0xF
  1021  0000CF                     	ds	3
  1022  0000D2                     receiveData@holder_1419:
  1023                           	opt stack 0
  1024                           
  1025                           ; 3 bytes @ 0x12
  1026  0000D2                     	ds	3
  1027  0000D5                     receiveData@u:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0x15
  1031  0000D5                     	ds	2
  1032  0000D7                     receiveData@r:
  1033                           	opt stack 0
  1034                           
  1035                           ; 2 bytes @ 0x17
  1036  0000D7                     	ds	2
  1037                           tblptru	equ	0xFF8
  1038                           tblptrh	equ	0xFF7
  1039                           tblptrl	equ	0xFF6
  1040                           tablat	equ	0xFF5
  1041                           postinc0	equ	0xFEE
  1042                           wreg	equ	0xFE8
  1043                           postdec1	equ	0xFE5
  1044                           fsr1l	equ	0xFE1
  1045                           
  1046                           	psect	cstackCOMRAM
  1047  000001                     __pcstackCOMRAM:
  1048                           	opt stack 0
  1049  000001                     ?_UART_buff_modulo_inc:
  1050                           	opt stack 0
  1051  000001                     ?_UART_buff_size:
  1052                           	opt stack 0
  1053  000001                     UART_buff_size@_this:
  1054                           	opt stack 0
  1055  000001                     UART_buff_modulo_inc@value:
  1056                           	opt stack 0
  1057                           
  1058                           ; 2 bytes @ 0x0
  1059  000001                     	ds	2
  1060  000003                     UART_buff_modulo_inc@modulus:
  1061                           	opt stack 0
  1062                           
  1063                           ; 2 bytes @ 0x2
  1064  000003                     	ds	2
  1065  000005                     UART_buff_modulo_inc@my_value:
  1066                           	opt stack 0
  1067                           
  1068                           ; 2 bytes @ 0x4
  1069  000005                     	ds	2
  1070  000007                     UART_buff_put@_this:
  1071                           	opt stack 0
  1072  000007                     UART_buff_get@_this:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x6
  1076  000007                     	ds	2
  1077  000009                     ??_UART_buff_get:
  1078  000009                     UART_buff_put@c:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x8
  1082  000009                     	ds	1
  1083  00000A                     ??_UART_buff_put:
  1084                           
  1085                           ; 1 bytes @ 0x9
  1086  00000A                     	ds	1
  1087  00000B                     UART_buff_get@c:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0xA
  1091  00000B                     	ds	1
  1092  00000C                     EUSART1_Receive_ISR@data:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0xB
  1096  00000C                     	ds	1
  1097  00000D                     ??_INTERRUPT_InterruptManager:
  1098                           
  1099                           ; 1 bytes @ 0xC
  1100  00000D                     	ds	14
  1101  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1102                           	opt stack 0
  1103  00001B                     ?___wmul:
  1104                           	opt stack 0
  1105  00001B                     EUSART2_Write@txData:
  1106                           	opt stack 0
  1107  00001B                     SPI2_Exchange8bit@data:
  1108                           	opt stack 0
  1109  00001B                     SetMux@channel:
  1110                           	opt stack 0
  1111  00001B                     CRC8@data:
  1112                           	opt stack 0
  1113  00001B                     FastTransfer_buffer_modulo_inc@value:
  1114                           	opt stack 0
  1115  00001B                     crcBufS_put@_this:
  1116                           	opt stack 0
  1117  00001B                     crcBufS_status_put@_this:
  1118                           	opt stack 0
  1119  00001B                     crcBufS_get@_this:
  1120                           	opt stack 0
  1121  00001B                     ___wmul@multiplier:
  1122                           	opt stack 0
  1123  00001B                     memset@p1:
  1124                           	opt stack 0
  1125  00001B                     Delay@wait:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x1A
  1129  00001B                     	ds	1
  1130  00001C                     putch@txData:
  1131                           	opt stack 0
  1132  00001C                     gotoXy@y:
  1133                           	opt stack 0
  1134  00001C                     clearLcd@res:
  1135                           	opt stack 0
  1136  00001C                     blackLcd@res:
  1137                           	opt stack 0
  1138                           
  1139                           ; 2 bytes @ 0x1B
  1140  00001C                     	ds	1
  1141  00001D                     ?_printf:
  1142                           	opt stack 0
  1143  00001D                     CRC8@len:
  1144                           	opt stack 0
  1145  00001D                     crcBufS_put@address:
  1146                           	opt stack 0
  1147  00001D                     crcBufS_status_put@time:
  1148                           	opt stack 0
  1149  00001D                     crcBufS_get@time:
  1150                           	opt stack 0
  1151  00001D                     gotoXy@x:
  1152                           	opt stack 0
  1153  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1154                           	opt stack 0
  1155  00001D                     printf@f:
  1156                           	opt stack 0
  1157  00001D                     ___wmul@multiplicand:
  1158                           	opt stack 0
  1159  00001D                     memset@c:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x1C
  1163  00001D                     	ds	1
  1164  00001E                     CRC8@sum:
  1165                           	opt stack 0
  1166  00001E                     crcBufS_put@oldCRC:
  1167                           	opt stack 0
  1168  00001E                     crcBufS_status_put@status:
  1169                           	opt stack 0
  1170  00001E                     crcBufS_get@space:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x1D
  1174  00001E                     	ds	1
  1175  00001F                     ??_Delay:
  1176  00001F                     ??_crcBufS_get:
  1177  00001F                     ??_crcBufS_status_put:
  1178  00001F                     CRC8@extract:
  1179                           	opt stack 0
  1180  00001F                     crcBufS_put@status:
  1181                           	opt stack 0
  1182  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1183                           	opt stack 0
  1184  00001F                     ___wmul@product:
  1185                           	opt stack 0
  1186  00001F                     memset@n:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1E
  1190  00001F                     	ds	1
  1191  000020                     ??_crcBufS_put:
  1192  000020                     CRC8@tempI:
  1193                           	opt stack 0
  1194  000020                     Delay@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 4 bytes @ 0x1F
  1198  000020                     	ds	1
  1199  000021                     CRC8@crc:
  1200                           	opt stack 0
  1201  000021                     printf@flag:
  1202                           	opt stack 0
  1203  000021                     FastTransfer_buffer_put@_this:
  1204                           	opt stack 0
  1205  000021                     NokiaStr@str:
  1206                           	opt stack 0
  1207  000021                     memset@p:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x20
  1211  000021                     	ds	1
  1212  000022                     printf@ap:
  1213                           	opt stack 0
  1214                           
  1215                           ; 2 bytes @ 0x21
  1216  000022                     	ds	1
  1217  000023                     FastTransfer_buffer_put@towhere:
  1218                           	opt stack 0
  1219  000023                     NokiaStr@len:
  1220                           	opt stack 0
  1221  000023                     FastTransfer_buffer_flush@_this:
  1222                           	opt stack 0
  1223  000023                     crcBufS_status_put@wantedTime:
  1224                           	opt stack 0
  1225                           
  1226                           ; 2 bytes @ 0x22
  1227  000023                     	ds	1
  1228  000024                     ??_NokiaStr:
  1229  000024                     printf@c:
  1230                           	opt stack 0
  1231  000024                     FastTransfer_buffer_put@towhat:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x23
  1235  000024                     	ds	1
  1236  000025                     FastTransfer_buffer_flush@clearBuffer:
  1237                           	opt stack 0
  1238  000025                     crcBufS_get@wantedTime:
  1239                           	opt stack 0
  1240  000025                     printf@cp:
  1241                           	opt stack 0
  1242                           
  1243                           ; 2 bytes @ 0x24
  1244  000025                     	ds	1
  1245  000026                     ToSend@where:
  1246                           	opt stack 0
  1247                           
  1248                           ; 1 bytes @ 0x25
  1249  000026                     	ds	1
  1250  000027                     tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postdec1	equ	0xFE5
  1257                           fsr1l	equ	0xFE1
  1258                           
  1259                           ; 1 bytes @ 0x26
  1260 ;;
  1261 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1262 ;;
  1263 ;; *************** function _main *****************
  1264 ;; Defined at:
  1265 ;;		line 16 in file "main.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;		None
  1268 ;; Auto vars:     Size  Location     Type
  1269 ;;		None
  1270 ;; Return value:  Size  Location     Type
  1271 ;;                  1    wreg      void 
  1272 ;; Registers used:
  1273 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1274 ;; Tracked objects:
  1275 ;;		On entry : 0/0
  1276 ;;		On exit  : 0/0
  1277 ;;		Unchanged: 0/0
  1278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1279 ;;      Params:         0       0       0       0       0       0       0
  1280 ;;      Locals:         0       0       0       0       0       0       0
  1281 ;;      Temps:          0       0       0       0       0       0       0
  1282 ;;      Totals:         0       0       0       0       0       0       0
  1283 ;;Total ram usage:        0 bytes
  1284 ;; Hardware stack levels required when called:    9
  1285 ;; This function calls:
  1286 ;;		_Delay
  1287 ;;		_NokiaStart
  1288 ;;		_NokiaStr
  1289 ;;		_SYSTEM_Initialize
  1290 ;;		_clearLcd
  1291 ;;		_gotoXy
  1292 ;;		_updateComms
  1293 ;; This function is called by:
  1294 ;;		Startup code after reset
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text0
  1299  000C22                     __ptext0:
  1300                           	opt stack 0
  1301  000C22                     _main:
  1302                           	opt stack 22
  1303                           
  1304                           ;main.c: 18: SYSTEM_Initialize();
  1305                           
  1306                           ;incstack = 0
  1307  000C22  EC07  F009         	call	_SYSTEM_Initialize	;wreg free
  1308                           
  1309                           ;main.c: 37: (INTCONbits.GIE = 1);
  1310  000C26  8EF2               	bsf	intcon,7,c	;volatile
  1311                           
  1312                           ;main.c: 47: NokiaStart();
  1313  000C28  ECDF  F007         	call	_NokiaStart	;wreg free
  1314  000C2C                     l3470:
  1315                           
  1316                           ;main.c: 50: Delay(1000);
  1317  000C2C  0EE8               	movlw	232
  1318  000C2E  6E1B               	movwf	Delay@wait,c
  1319  000C30  0E03               	movlw	3
  1320  000C32  6E1C               	movwf	Delay@wait+1,c
  1321  000C34  0E00               	movlw	0
  1322  000C36  6E1D               	movwf	Delay@wait+2,c
  1323  000C38  0E00               	movlw	0
  1324  000C3A  6E1E               	movwf	Delay@wait+3,c
  1325  000C3C  EC1B  F007         	call	_Delay	;wreg free
  1326                           
  1327                           ;main.c: 51: clearLcd();
  1328  000C40  EC7E  F008         	call	_clearLcd	;wreg free
  1329                           
  1330                           ;main.c: 52: ddata[0]='T';
  1331  000C44  0E54               	movlw	84
  1332  000C46  0100               	movlb	0	; () banked
  1333  000C48  6FB5               	movwf	_ddata& (0+255),b
  1334                           
  1335                           ; BSR set to: 0
  1336                           ;main.c: 53: ddata[1]='E';
  1337  000C4A  0E45               	movlw	69
  1338  000C4C  0100               	movlb	0	; () banked
  1339  000C4E  6FB6               	movwf	(_ddata+1)& (0+255),b
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 54: ddata[2]='S';
  1343  000C50  0E53               	movlw	83
  1344  000C52  0100               	movlb	0	; () banked
  1345  000C54  6FB7               	movwf	(_ddata+2)& (0+255),b
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 55: ddata[3]='T';
  1349  000C56  0E54               	movlw	84
  1350  000C58  0100               	movlb	0	; () banked
  1351  000C5A  6FB8               	movwf	(_ddata+3)& (0+255),b
  1352                           
  1353                           ; BSR set to: 0
  1354                           ;main.c: 56: ddata[4]=' ';
  1355  000C5C  0E20               	movlw	32
  1356  000C5E  0100               	movlb	0	; () banked
  1357  000C60  6FB9               	movwf	(_ddata+4)& (0+255),b
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;main.c: 57: ddata[5]='L';
  1361  000C62  0E4C               	movlw	76
  1362  000C64  0100               	movlb	0	; () banked
  1363  000C66  6FBA               	movwf	(_ddata+5)& (0+255),b
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 58: ddata[6]='C';
  1367  000C68  0E43               	movlw	67
  1368  000C6A  0100               	movlb	0	; () banked
  1369  000C6C  6FBB               	movwf	(_ddata+6)& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 59: ddata[7]='D';
  1373  000C6E  0E44               	movlw	68
  1374  000C70  0100               	movlb	0	; () banked
  1375  000C72  6FBC               	movwf	(_ddata+7)& (0+255),b
  1376                           
  1377                           ; BSR set to: 0
  1378                           ;main.c: 60: ddata[8]=' ';
  1379  000C74  0E20               	movlw	32
  1380  000C76  0100               	movlb	0	; () banked
  1381  000C78  6FBD               	movwf	(_ddata+8)& (0+255),b
  1382                           
  1383                           ; BSR set to: 0
  1384                           ;main.c: 61: ddata[9]=i;
  1385  000C7A  C03A  F0BE         	movff	_i,_ddata+9
  1386                           
  1387                           ; BSR set to: 0
  1388                           ;main.c: 62: i++;
  1389  000C7E  2A3A               	incf	_i,f,c
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;main.c: 63: gotoXy(2,2);
  1393  000C80  0E02               	movlw	2
  1394  000C82  6E1C               	movwf	gotoXy@y,c
  1395  000C84  0E02               	movlw	2
  1396  000C86  ECCC  F008         	call	_gotoXy
  1397                           
  1398                           ;main.c: 64: NokiaStr(ddata,10);
  1399  000C8A  0EB5               	movlw	low _ddata
  1400  000C8C  6E21               	movwf	NokiaStr@str,c
  1401  000C8E  0E00               	movlw	high _ddata
  1402  000C90  6E22               	movwf	NokiaStr@str+1,c
  1403  000C92  0E0A               	movlw	10
  1404  000C94  6E23               	movwf	NokiaStr@len,c
  1405  000C96  EC86  F005         	call	_NokiaStr	;wreg free
  1406  000C9A  D7C8               	goto	l3470
  1407  000C9C                     __end_of_main:
  1408                           	opt stack 0
  1409                           tblptru	equ	0xFF8
  1410                           tblptrh	equ	0xFF7
  1411                           tblptrl	equ	0xFF6
  1412                           tablat	equ	0xFF5
  1413                           intcon	equ	0xFF2
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           postdec1	equ	0xFE5
  1417                           fsr1l	equ	0xFE1
  1418                           
  1419 ;; *************** function _updateComms *****************
  1420 ;; Defined at:
  1421 ;;		line 19 in file "Communications.c"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;		None
  1424 ;; Auto vars:     Size  Location     Type
  1425 ;;		None
  1426 ;; Return value:  Size  Location     Type
  1427 ;;                  1    wreg      void 
  1428 ;; Registers used:
  1429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1430 ;; Tracked objects:
  1431 ;;		On entry : 0/0
  1432 ;;		On exit  : 0/0
  1433 ;;		Unchanged: 0/0
  1434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1435 ;;      Params:         0       0       0       0       0       0       0
  1436 ;;      Locals:         0       0       0       0       0       0       0
  1437 ;;      Temps:          0       0       0       0       0       0       0
  1438 ;;      Totals:         0       0       0       0       0       0       0
  1439 ;;Total ram usage:        0 bytes
  1440 ;; Hardware stack levels used:    1
  1441 ;; Hardware stack levels required when called:    8
  1442 ;; This function calls:
  1443 ;;		_Precharge
  1444 ;;		_SetCharger
  1445 ;;		_receiveData
  1446 ;;		_respondECU
  1447 ;; This function is called by:
  1448 ;;		_main
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text1
  1453  00114C                     __ptext1:
  1454                           	opt stack 0
  1455  00114C                     _updateComms:
  1456                           	opt stack 22
  1457                           
  1458                           ;Communications.c: 20: if (receiveData()) {
  1459                           
  1460                           ;incstack = 0
  1461  00114C  EC58  F000         	call	_receiveData	;wreg free
  1462  001150  0900               	iorlw	0
  1463  001152  B4D8               	btfsc	status,2,c
  1464  001154  0012               	return	
  1465                           
  1466                           ;Communications.c: 21: Precharge(receiveArray[1]);
  1467  001156  0100               	movlb	0	; () banked
  1468  001158  5162               	movf	(_receiveArray+2)& (0+255),w,b	;volatile
  1469  00115A  ECA3  F004         	call	_Precharge
  1470                           
  1471                           ;Communications.c: 22: SetCharger(1, receiveArray[2], receiveArray[3]);
  1472  00115E  C064  F0C0         	movff	_receiveArray+4,SetCharger@Current	;volatile
  1473  001162  C066  F0C1         	movff	_receiveArray+6,SetCharger@Voltage	;volatile
  1474  001166  0E01               	movlw	1
  1475  001168  EC8A  F006         	call	_SetCharger
  1476                           
  1477                           ;Communications.c: 23: respondECU();
  1478  00116C  ECF1  F006         	call	_respondECU	;wreg free
  1479  001170  0012               	return	
  1480  001172                     __end_of_updateComms:
  1481                           	opt stack 0
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           intcon	equ	0xFF2
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           status	equ	0xFD8
  1492                           
  1493 ;; *************** function _respondECU *****************
  1494 ;; Defined at:
  1495 ;;		line 38 in file "Communications.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  1    wreg      void 
  1502 ;; Registers used:
  1503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1504 ;; Tracked objects:
  1505 ;;		On entry : 0/0
  1506 ;;		On exit  : 0/0
  1507 ;;		Unchanged: 0/0
  1508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1509 ;;      Params:         0       0       0       0       0       0       0
  1510 ;;      Locals:         0       0       0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0       0       0
  1512 ;;      Totals:         0       0       0       0       0       0       0
  1513 ;;Total ram usage:        0 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    7
  1516 ;; This function calls:
  1517 ;;		_Delay
  1518 ;;		_ToSend
  1519 ;;		_sendData
  1520 ;; This function is called by:
  1521 ;;		_updateComms
  1522 ;; This function uses a non-reentrant model
  1523 ;;
  1524                           
  1525                           	psect	text2
  1526  000DE2                     __ptext2:
  1527                           	opt stack 0
  1528  000DE2                     _respondECU:
  1529                           	opt stack 22
  1530                           
  1531                           ;Communications.c: 39: LATCbits.LATC5 = 1;
  1532                           
  1533                           ;incstack = 0
  1534  000DE2  8A8B               	bsf	3979,5,c	;volatile
  1535                           
  1536                           ;Communications.c: 40: ToSend(0, 1);
  1537  000DE4  0E00               	movlw	0
  1538  000DE6  0100               	movlb	0	; () banked
  1539  000DE8  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1540  000DEA  0E01               	movlw	1
  1541  000DEC  6FC2               	movwf	ToSend@what& (0+255),b
  1542  000DEE  0E00               	movlw	0
  1543  000DF0  ECED  F008         	call	_ToSend
  1544                           
  1545                           ;Communications.c: 41: ToSend(1, 1);
  1546  000DF4  0E00               	movlw	0
  1547  000DF6  0100               	movlb	0	; () banked
  1548  000DF8  6FC3               	movwf	(ToSend@what+1)& (0+255),b
  1549  000DFA  0E01               	movlw	1
  1550  000DFC  6FC2               	movwf	ToSend@what& (0+255),b
  1551  000DFE  0E01               	movlw	1
  1552  000E00  ECED  F008         	call	_ToSend
  1553                           
  1554                           ;Communications.c: 42: Delay(5);
  1555  000E04  0E05               	movlw	5
  1556  000E06  6E1B               	movwf	Delay@wait,c
  1557  000E08  0E00               	movlw	0
  1558  000E0A  6E1C               	movwf	Delay@wait+1,c
  1559  000E0C  0E00               	movlw	0
  1560  000E0E  6E1D               	movwf	Delay@wait+2,c
  1561  000E10  0E00               	movlw	0
  1562  000E12  6E1E               	movwf	Delay@wait+3,c
  1563  000E14  EC1B  F007         	call	_Delay	;wreg free
  1564                           
  1565                           ;Communications.c: 44: sendData(6);
  1566  000E18  0E06               	movlw	6
  1567  000E1A  EC4E  F006         	call	_sendData
  1568                           
  1569                           ;Communications.c: 45: Delay(3);
  1570  000E1E  0E03               	movlw	3
  1571  000E20  6E1B               	movwf	Delay@wait,c
  1572  000E22  0E00               	movlw	0
  1573  000E24  6E1C               	movwf	Delay@wait+1,c
  1574  000E26  0E00               	movlw	0
  1575  000E28  6E1D               	movwf	Delay@wait+2,c
  1576  000E2A  0E00               	movlw	0
  1577  000E2C  6E1E               	movwf	Delay@wait+3,c
  1578  000E2E  EC1B  F007         	call	_Delay	;wreg free
  1579                           
  1580                           ;Communications.c: 46: LATCbits.LATC5 = 0;
  1581  000E32  9A8B               	bcf	3979,5,c	;volatile
  1582  000E34  0012               	return		;funcret
  1583  000E36                     __end_of_respondECU:
  1584                           	opt stack 0
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           intcon	equ	0xFF2
  1590                           postinc0	equ	0xFEE
  1591                           wreg	equ	0xFE8
  1592                           postdec1	equ	0xFE5
  1593                           fsr1l	equ	0xFE1
  1594                           status	equ	0xFD8
  1595                           
  1596 ;; *************** function _sendData *****************
  1597 ;; Defined at:
  1598 ;;		line 53 in file "FastTransfer.c"
  1599 ;; Parameters:    Size  Location     Type
  1600 ;;  whereToSend     1    wreg     unsigned char 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  whereToSend     1    1[BANK0 ] unsigned char 
  1603 ;;  i               2    3[BANK0 ] int 
  1604 ;;  CS              1    2[BANK0 ] unsigned char 
  1605 ;; Return value:  Size  Location     Type
  1606 ;;                  1    wreg      void 
  1607 ;; Registers used:
  1608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1609 ;; Tracked objects:
  1610 ;;		On entry : 0/0
  1611 ;;		On exit  : 0/0
  1612 ;;		Unchanged: 0/0
  1613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1614 ;;      Params:         0       0       0       0       0       0       0
  1615 ;;      Locals:         0       4       0       0       0       0       0
  1616 ;;      Temps:          0       1       0       0       0       0       0
  1617 ;;      Totals:         0       5       0       0       0       0       0
  1618 ;;Total ram usage:        5 bytes
  1619 ;; Hardware stack levels used:    1
  1620 ;; Hardware stack levels required when called:    6
  1621 ;; This function calls:
  1622 ;;		_CRC8
  1623 ;;		_FastTransfer_buffer_flush
  1624 ;;		_crcBufS_put
  1625 ;; This function is called by:
  1626 ;;		_respondECU
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text3
  1631  000C9C                     __ptext3:
  1632                           	opt stack 0
  1633  000C9C                     _sendData:
  1634                           	opt stack 22
  1635                           
  1636                           ;incstack = 0
  1637                           ;sendData@whereToSend stored from wreg
  1638  000C9C  0100               	movlb	0	; () banked
  1639  000C9E  6FC1               	movwf	sendData@whereToSend& (0+255),b
  1640                           
  1641                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1642  000CA0  C02D  F01B         	movff	_sendStructAddress,CRC8@data
  1643  000CA4  C02E  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1644  000CA8  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1645  000CAC  EC67  F007         	call	_CRC8	;wreg free
  1646  000CB0  0100               	movlb	0	; () banked
  1647  000CB2  6FC2               	movwf	sendData@CS& (0+255),b
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;FastTransfer.c: 66: int i;
  1651                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1652  000CB4  0E00               	movlw	0
  1653  000CB6  0100               	movlb	0	; () banked
  1654  000CB8  6FC4               	movwf	(sendData@i+1)& (0+255),b
  1655  000CBA  0E00               	movlw	0
  1656  000CBC  6FC3               	movwf	sendData@i& (0+255),b
  1657  000CBE  D003               	goto	l3112
  1658  000CC0                     l3110:
  1659                           
  1660                           ; BSR set to: 0
  1661  000CC0  0100               	movlb	0	; () banked
  1662  000CC2  4BC3               	infsnz	sendData@i& (0+255),f,b
  1663  000CC4  2BC4               	incf	(sendData@i+1)& (0+255),f,b
  1664  000CC6                     l3112:
  1665                           
  1666                           ; BSR set to: 0
  1667  000CC6  0101               	movlb	1	; () banked
  1668  000CC8  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1669  000CCA  0100               	movlb	0	; () banked
  1670  000CCC  5DC3               	subwf	sendData@i& (0+255),w,b
  1671  000CCE  0100               	movlb	0	; () banked
  1672  000CD0  51C4               	movf	(sendData@i+1)& (0+255),w,b
  1673  000CD2  0A80               	xorlw	128
  1674  000CD4  0100               	movlb	0	; () banked
  1675  000CD6  6FC0               	movwf	??_sendData& (0+255),b
  1676  000CD8  0101               	movlb	1	; () banked
  1677  000CDA  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1678  000CDC  0A80               	xorlw	128
  1679  000CDE  0100               	movlb	0	; () banked
  1680  000CE0  59C0               	subwfb	??_sendData& (0+255),w,b
  1681  000CE2  A0D8               	btfss	status,0,c
  1682  000CE4  D7ED               	goto	l3110
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1686                           
  1687                           ; BSR set to: 0
  1688                           
  1689                           ;FastTransfer.c: 69: }
  1690                           ;FastTransfer.c: 72: serial_write(CS);
  1691  000CE6  0EA4               	movlw	low _crc_buffer
  1692  000CE8  6E1B               	movwf	crcBufS_put@_this,c
  1693  000CEA  0E00               	movlw	high _crc_buffer
  1694  000CEC  6E1C               	movwf	crcBufS_put@_this+1,c
  1695  000CEE  C0C1  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1696  000CF2  C0C2  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1697  000CF6  0E00               	movlw	0
  1698  000CF8  6E1F               	movwf	crcBufS_put@status,c
  1699  000CFA  EC62  F003         	call	_crcBufS_put	;wreg free
  1700                           
  1701                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1702  000CFE  0E00               	movlw	low _ring_buffer
  1703  000D00  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1704  000D02  0E01               	movlw	high _ring_buffer
  1705  000D04  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1706  000D06  0E00               	movlw	0
  1707  000D08  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1708  000D0A  0E01               	movlw	1
  1709  000D0C  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1710  000D0E  ECC0  F006         	call	_FastTransfer_buffer_flush	;wreg free
  1711  000D12  0012               	return		;funcret
  1712  000D14                     __end_of_sendData:
  1713                           	opt stack 0
  1714                           tblptru	equ	0xFF8
  1715                           tblptrh	equ	0xFF7
  1716                           tblptrl	equ	0xFF6
  1717                           tablat	equ	0xFF5
  1718                           intcon	equ	0xFF2
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           postdec1	equ	0xFE5
  1722                           fsr1l	equ	0xFE1
  1723                           status	equ	0xFD8
  1724                           
  1725 ;; *************** function _crcBufS_put *****************
  1726 ;; Defined at:
  1727 ;;		line 321 in file "FastTransfer.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1730 ;;		 -> crc_buffer(17), 
  1731 ;;  address         1   28[COMRAM] unsigned char 
  1732 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1733 ;;  status          1   30[COMRAM] unsigned char 
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1745 ;;      Params:         5       0       0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0       0
  1747 ;;      Temps:          2       0       0       0       0       0       0
  1748 ;;      Totals:         7       0       0       0       0       0       0
  1749 ;;Total ram usage:        7 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    4
  1752 ;; This function calls:
  1753 ;;		Nothing
  1754 ;; This function is called by:
  1755 ;;		_sendData
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           	psect	text4
  1760  0006C4                     __ptext4:
  1761                           	opt stack 0
  1762  0006C4                     _crcBufS_put:
  1763                           	opt stack 23
  1764                           
  1765                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1766                           
  1767                           ;incstack = 0
  1768  0006C4  EE20 F00F          	lfsr	2,15
  1769  0006C8  501B               	movf	crcBufS_put@_this,w,c
  1770  0006CA  26D9               	addwf	fsr2l,f,c
  1771  0006CC  501C               	movf	crcBufS_put@_this+1,w,c
  1772  0006CE  22DA               	addwfc	fsr2h,f,c
  1773  0006D0  CFDE F020          	movff	postinc2,??_crcBufS_put
  1774  0006D4  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1775  0006D8  5020               	movf	??_crcBufS_put,w,c
  1776  0006DA  241B               	addwf	crcBufS_put@_this,w,c
  1777  0006DC  6ED9               	movwf	fsr2l,c
  1778  0006DE  5021               	movf	??_crcBufS_put+1,w,c
  1779  0006E0  201C               	addwfc	crcBufS_put@_this+1,w,c
  1780  0006E2  6EDA               	movwf	fsr2h,c
  1781  0006E4  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1782                           
  1783                           ;FastTransfer.c: 323: _this->head++;
  1784  0006E8  EE20 F00F          	lfsr	2,15
  1785  0006EC  501B               	movf	crcBufS_put@_this,w,c
  1786  0006EE  26D9               	addwf	fsr2l,f,c
  1787  0006F0  501C               	movf	crcBufS_put@_this+1,w,c
  1788  0006F2  22DA               	addwfc	fsr2h,f,c
  1789  0006F4  2ADE               	incf	postinc2,f,c
  1790  0006F6  0E00               	movlw	0
  1791  0006F8  22DD               	addwfc	postdec2,f,c
  1792                           
  1793                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1794  0006FA  EE20 F00F          	lfsr	2,15
  1795  0006FE  501B               	movf	crcBufS_put@_this,w,c
  1796  000700  26D9               	addwf	fsr2l,f,c
  1797  000702  501C               	movf	crcBufS_put@_this+1,w,c
  1798  000704  22DA               	addwfc	fsr2h,f,c
  1799  000706  CFDE F020          	movff	postinc2,??_crcBufS_put
  1800  00070A  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1801  00070E  5020               	movf	??_crcBufS_put,w,c
  1802  000710  241B               	addwf	crcBufS_put@_this,w,c
  1803  000712  6ED9               	movwf	fsr2l,c
  1804  000714  5021               	movf	??_crcBufS_put+1,w,c
  1805  000716  201C               	addwfc	crcBufS_put@_this+1,w,c
  1806  000718  6EDA               	movwf	fsr2h,c
  1807  00071A  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1808                           
  1809                           ;FastTransfer.c: 325: _this->head++;
  1810  00071E  EE20 F00F          	lfsr	2,15
  1811  000722  501B               	movf	crcBufS_put@_this,w,c
  1812  000724  26D9               	addwf	fsr2l,f,c
  1813  000726  501C               	movf	crcBufS_put@_this+1,w,c
  1814  000728  22DA               	addwfc	fsr2h,f,c
  1815  00072A  2ADE               	incf	postinc2,f,c
  1816  00072C  0E00               	movlw	0
  1817  00072E  22DD               	addwfc	postdec2,f,c
  1818                           
  1819                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1820  000730  EE20 F00F          	lfsr	2,15
  1821  000734  501B               	movf	crcBufS_put@_this,w,c
  1822  000736  26D9               	addwf	fsr2l,f,c
  1823  000738  501C               	movf	crcBufS_put@_this+1,w,c
  1824  00073A  22DA               	addwfc	fsr2h,f,c
  1825  00073C  CFDE F020          	movff	postinc2,??_crcBufS_put
  1826  000740  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1827  000744  5020               	movf	??_crcBufS_put,w,c
  1828  000746  241B               	addwf	crcBufS_put@_this,w,c
  1829  000748  6ED9               	movwf	fsr2l,c
  1830  00074A  5021               	movf	??_crcBufS_put+1,w,c
  1831  00074C  201C               	addwfc	crcBufS_put@_this+1,w,c
  1832  00074E  6EDA               	movwf	fsr2h,c
  1833  000750  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1834                           
  1835                           ;FastTransfer.c: 327: _this->head++;
  1836  000754  EE20 F00F          	lfsr	2,15
  1837  000758  501B               	movf	crcBufS_put@_this,w,c
  1838  00075A  26D9               	addwf	fsr2l,f,c
  1839  00075C  501C               	movf	crcBufS_put@_this+1,w,c
  1840  00075E  22DA               	addwfc	fsr2h,f,c
  1841  000760  2ADE               	incf	postinc2,f,c
  1842  000762  0E00               	movlw	0
  1843  000764  22DD               	addwfc	postdec2,f,c
  1844                           
  1845                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1846  000766  EE20 F00F          	lfsr	2,15
  1847  00076A  501B               	movf	crcBufS_put@_this,w,c
  1848  00076C  26D9               	addwf	fsr2l,f,c
  1849  00076E  501C               	movf	crcBufS_put@_this+1,w,c
  1850  000770  22DA               	addwfc	fsr2h,f,c
  1851  000772  0E01               	movlw	1
  1852  000774  BEDB               	btfsc	plusw2,7,c
  1853  000776  0012               	return	
  1854  000778  0E01               	movlw	1
  1855  00077A  50DB               	movf	plusw2,w,c
  1856  00077C  E104               	bnz	u1940
  1857  00077E  0E0F               	movlw	15
  1858  000780  5CDE               	subwf	postinc2,w,c
  1859  000782  A0D8               	btfss	status,0,c
  1860  000784  0012               	return	
  1861  000786                     u1940:
  1862                           
  1863                           ;FastTransfer.c: 329: _this->head = 0;
  1864  000786  EE20 F00F          	lfsr	2,15
  1865  00078A  501B               	movf	crcBufS_put@_this,w,c
  1866  00078C  26D9               	addwf	fsr2l,f,c
  1867  00078E  501C               	movf	crcBufS_put@_this+1,w,c
  1868  000790  22DA               	addwfc	fsr2h,f,c
  1869  000792  0E00               	movlw	0
  1870  000794  6EDE               	movwf	postinc2,c
  1871  000796  0E00               	movlw	0
  1872  000798  6EDD               	movwf	postdec2,c
  1873  00079A  0012               	return	
  1874  00079C                     __end_of_crcBufS_put:
  1875                           	opt stack 0
  1876                           tblptru	equ	0xFF8
  1877                           tblptrh	equ	0xFF7
  1878                           tblptrl	equ	0xFF6
  1879                           tablat	equ	0xFF5
  1880                           intcon	equ	0xFF2
  1881                           postinc0	equ	0xFEE
  1882                           wreg	equ	0xFE8
  1883                           postdec1	equ	0xFE5
  1884                           fsr1l	equ	0xFE1
  1885                           indf2	equ	0xFDF
  1886                           postinc2	equ	0xFDE
  1887                           postdec2	equ	0xFDD
  1888                           plusw2	equ	0xFDB
  1889                           fsr2h	equ	0xFDA
  1890                           fsr2l	equ	0xFD9
  1891                           status	equ	0xFD8
  1892                           
  1893 ;; *************** function _FastTransfer_buffer_flush *****************
  1894 ;; Defined at:
  1895 ;;		line 261 in file "FastTransfer.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1898 ;;		 -> ring_buffer(206), 
  1899 ;;  clearBuffer     2   36[COMRAM] const int 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      void 
  1904 ;; Registers used:
  1905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1911 ;;      Params:         4       0       0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0       0       0
  1914 ;;      Totals:         4       0       0       0       0       0       0
  1915 ;;Total ram usage:        4 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    5
  1918 ;; This function calls:
  1919 ;;		_memset
  1920 ;; This function is called by:
  1921 ;;		_sendData
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924                           
  1925                           	psect	text5
  1926  000D80                     __ptext5:
  1927                           	opt stack 0
  1928  000D80                     _FastTransfer_buffer_flush:
  1929                           	opt stack 22
  1930                           
  1931                           ;FastTransfer.c: 262: _this->count = 0;
  1932                           
  1933                           ;incstack = 0
  1934  000D80  EE20 F0CC          	lfsr	2,204
  1935  000D84  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1936  000D86  26D9               	addwf	fsr2l,f,c
  1937  000D88  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1938  000D8A  22DA               	addwfc	fsr2h,f,c
  1939  000D8C  0E00               	movlw	0
  1940  000D8E  6EDE               	movwf	postinc2,c
  1941  000D90  0E00               	movlw	0
  1942  000D92  6EDD               	movwf	postdec2,c
  1943                           
  1944                           ;FastTransfer.c: 263: _this->head = 0;
  1945  000D94  EE20 F0C8          	lfsr	2,200
  1946  000D98  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1947  000D9A  26D9               	addwf	fsr2l,f,c
  1948  000D9C  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1949  000D9E  22DA               	addwfc	fsr2h,f,c
  1950  000DA0  0E00               	movlw	0
  1951  000DA2  6EDE               	movwf	postinc2,c
  1952  000DA4  0E00               	movlw	0
  1953  000DA6  6EDD               	movwf	postdec2,c
  1954                           
  1955                           ;FastTransfer.c: 264: _this->tail = 0;
  1956  000DA8  EE20 F0CA          	lfsr	2,202
  1957  000DAC  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1958  000DAE  26D9               	addwf	fsr2l,f,c
  1959  000DB0  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1960  000DB2  22DA               	addwfc	fsr2h,f,c
  1961  000DB4  0E00               	movlw	0
  1962  000DB6  6EDE               	movwf	postinc2,c
  1963  000DB8  0E00               	movlw	0
  1964  000DBA  6EDD               	movwf	postdec2,c
  1965                           
  1966                           ;FastTransfer.c: 265: if (clearBuffer) {
  1967  000DBC  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1968  000DBE  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1969  000DC0  B4D8               	btfsc	status,2,c
  1970  000DC2  0012               	return	
  1971                           
  1972                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1973  000DC4  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1974  000DC8  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1975  000DCC  0E00               	movlw	0
  1976  000DCE  6E1E               	movwf	memset@c+1,c
  1977  000DD0  0E00               	movlw	0
  1978  000DD2  6E1D               	movwf	memset@c,c
  1979  000DD4  0E00               	movlw	0
  1980  000DD6  6E20               	movwf	memset@n+1,c
  1981  000DD8  0EC8               	movlw	200
  1982  000DDA  6E1F               	movwf	memset@n,c
  1983  000DDC  EC28  F008         	call	_memset	;wreg free
  1984  000DE0  0012               	return	
  1985  000DE2                     __end_of_FastTransfer_buffer_flush:
  1986                           	opt stack 0
  1987                           tblptru	equ	0xFF8
  1988                           tblptrh	equ	0xFF7
  1989                           tblptrl	equ	0xFF6
  1990                           tablat	equ	0xFF5
  1991                           intcon	equ	0xFF2
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postdec1	equ	0xFE5
  1995                           fsr1l	equ	0xFE1
  1996                           indf2	equ	0xFDF
  1997                           postinc2	equ	0xFDE
  1998                           postdec2	equ	0xFDD
  1999                           plusw2	equ	0xFDB
  2000                           fsr2h	equ	0xFDA
  2001                           fsr2l	equ	0xFD9
  2002                           status	equ	0xFD8
  2003                           
  2004 ;; *************** function _memset *****************
  2005 ;; Defined at:
  2006 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\memset.c"
  2007 ;; Parameters:    Size  Location     Type
  2008 ;;  p1              2   26[COMRAM] PTR void 
  2009 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2010 ;;  c               2   28[COMRAM] int 
  2011 ;;  n               2   30[COMRAM] unsigned int 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  p               2   32[COMRAM] PTR unsigned char 
  2014 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  2   26[COMRAM] PTR void 
  2017 ;; Registers used:
  2018 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: 0/0
  2023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2024 ;;      Params:         6       0       0       0       0       0       0
  2025 ;;      Locals:         2       0       0       0       0       0       0
  2026 ;;      Temps:          0       0       0       0       0       0       0
  2027 ;;      Totals:         8       0       0       0       0       0       0
  2028 ;;Total ram usage:        8 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    4
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_FastTransfer_buffer_flush
  2035 ;;		_UART_buff_init
  2036 ;;		_UART_buff_flush
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text6
  2041  001050                     __ptext6:
  2042                           	opt stack 0
  2043  001050                     _memset:
  2044                           	opt stack 22
  2045                           
  2046                           ;incstack = 0
  2047  001050  C01B  F021         	movff	memset@p1,memset@p
  2048  001054  C01C  F022         	movff	memset@p1+1,memset@p+1
  2049  001058  D008               	goto	l2998
  2050  00105A                     l2994:
  2051  00105A  C021  FFD9         	movff	memset@p,fsr2l
  2052  00105E  C022  FFDA         	movff	memset@p+1,fsr2h
  2053  001062  C01D  FFDF         	movff	memset@c,indf2
  2054  001066  4A21               	infsnz	memset@p,f,c
  2055  001068  2A22               	incf	memset@p+1,f,c
  2056  00106A                     l2998:
  2057  00106A  061F               	decf	memset@n,f,c
  2058  00106C  A0D8               	btfss	status,0,c
  2059  00106E  0620               	decf	memset@n+1,f,c
  2060  001070  281F               	incf	memset@n,w,c
  2061  001072  E1F3               	bnz	l2994
  2062  001074  2820               	incf	memset@n+1,w,c
  2063  001076  B4D8               	btfsc	status,2,c
  2064  001078  0012               	return	
  2065  00107A  D7EF               	goto	l2994
  2066  00107C                     __end_of_memset:
  2067                           	opt stack 0
  2068                           tblptru	equ	0xFF8
  2069                           tblptrh	equ	0xFF7
  2070                           tblptrl	equ	0xFF6
  2071                           tablat	equ	0xFF5
  2072                           intcon	equ	0xFF2
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1l	equ	0xFE1
  2077                           indf2	equ	0xFDF
  2078                           postinc2	equ	0xFDE
  2079                           postdec2	equ	0xFDD
  2080                           plusw2	equ	0xFDB
  2081                           fsr2h	equ	0xFDA
  2082                           fsr2l	equ	0xFD9
  2083                           status	equ	0xFD8
  2084                           
  2085 ;; *************** function _ToSend *****************
  2086 ;; Defined at:
  2087 ;;		line 216 in file "FastTransfer.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  where           1    wreg     unsigned char 
  2090 ;;  what            2    2[BANK0 ] unsigned int 
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;  where           1   37[COMRAM] unsigned char 
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  1    wreg      void 
  2095 ;; Registers used:
  2096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2102 ;;      Params:         0       2       0       0       0       0       0
  2103 ;;      Locals:         1       0       0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0       0       0
  2105 ;;      Totals:         1       2       0       0       0       0       0
  2106 ;;Total ram usage:        3 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    6
  2109 ;; This function calls:
  2110 ;;		_FastTransfer_buffer_put
  2111 ;; This function is called by:
  2112 ;;		_respondECU
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115                           
  2116                           	psect	text7
  2117  0011DA                     __ptext7:
  2118                           	opt stack 0
  2119  0011DA                     _ToSend:
  2120                           	opt stack 22
  2121                           
  2122                           ;incstack = 0
  2123                           ;ToSend@where stored from wreg
  2124  0011DA  6E26               	movwf	ToSend@where,c
  2125                           
  2126                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  2127  0011DC  0E00               	movlw	low _ring_buffer
  2128  0011DE  6E21               	movwf	FastTransfer_buffer_put@_this,c
  2129  0011E0  0E01               	movlw	high _ring_buffer
  2130  0011E2  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  2131  0011E4  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  2132  0011E8  C0C2  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  2133  0011EC  C0C3  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  2134  0011F0  ECAA  F001         	call	_FastTransfer_buffer_put	;wreg free
  2135  0011F4  0012               	return		;funcret
  2136  0011F6                     __end_of_ToSend:
  2137                           	opt stack 0
  2138                           tblptru	equ	0xFF8
  2139                           tblptrh	equ	0xFF7
  2140                           tblptrl	equ	0xFF6
  2141                           tablat	equ	0xFF5
  2142                           intcon	equ	0xFF2
  2143                           postinc0	equ	0xFEE
  2144                           wreg	equ	0xFE8
  2145                           postdec1	equ	0xFE5
  2146                           fsr1l	equ	0xFE1
  2147                           indf2	equ	0xFDF
  2148                           postinc2	equ	0xFDE
  2149                           postdec2	equ	0xFDD
  2150                           plusw2	equ	0xFDB
  2151                           fsr2h	equ	0xFDA
  2152                           fsr2l	equ	0xFD9
  2153                           status	equ	0xFD8
  2154                           
  2155 ;; *************** function _FastTransfer_buffer_put *****************
  2156 ;; Defined at:
  2157 ;;		line 223 in file "FastTransfer.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  2160 ;;		 -> ring_buffer(206), 
  2161 ;;  towhere         1   34[COMRAM] unsigned char 
  2162 ;;  towhat          2   35[COMRAM] unsigned int 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;		None
  2165 ;; Return value:  Size  Location     Type
  2166 ;;                  1    wreg      void 
  2167 ;; Registers used:
  2168 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2169 ;; Tracked objects:
  2170 ;;		On entry : 0/0
  2171 ;;		On exit  : 0/0
  2172 ;;		Unchanged: 0/0
  2173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2174 ;;      Params:         5       0       0       0       0       0       0
  2175 ;;      Locals:         0       0       0       0       0       0       0
  2176 ;;      Temps:          0       2       0       0       0       0       0
  2177 ;;      Totals:         5       2       0       0       0       0       0
  2178 ;;Total ram usage:        7 bytes
  2179 ;; Hardware stack levels used:    1
  2180 ;; Hardware stack levels required when called:    5
  2181 ;; This function calls:
  2182 ;;		_FastTransfer_buffer_modulo_inc
  2183 ;; This function is called by:
  2184 ;;		_ToSend
  2185 ;; This function uses a non-reentrant model
  2186 ;;
  2187                           
  2188                           	psect	text8
  2189  000354                     __ptext8:
  2190                           	opt stack 0
  2191  000354                     _FastTransfer_buffer_put:
  2192                           	opt stack 22
  2193                           
  2194                           ;FastTransfer.c: 225: group.integer = towhat;
  2195                           
  2196                           ;incstack = 0
  2197  000354  C024  F029         	movff	FastTransfer_buffer_put@towhat,_group
  2198  000358  C025  F02A         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  2199                           
  2200                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  2201  00035C  EE20 F0CC          	lfsr	2,204
  2202  000360  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2203  000362  26D9               	addwf	fsr2l,f,c
  2204  000364  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2205  000366  22DA               	addwfc	fsr2h,f,c
  2206  000368  0E01               	movlw	1
  2207  00036A  BEDB               	btfsc	plusw2,7,c
  2208  00036C  D007               	goto	l3040
  2209  00036E  0E01               	movlw	1
  2210  000370  50DB               	movf	plusw2,w,c
  2211  000372  E103               	bnz	u1961
  2212  000374  0EC5               	movlw	197
  2213  000376  5CDE               	subwf	postinc2,w,c
  2214  000378  B0D8               	btfsc	status,0,c
  2215  00037A                     u1961:
  2216  00037A  0012               	return	
  2217  00037C                     l3040:
  2218                           
  2219                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  2220  00037C  EE20 F0C8          	lfsr	2,200
  2221  000380  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2222  000382  26D9               	addwf	fsr2l,f,c
  2223  000384  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2224  000386  22DA               	addwfc	fsr2h,f,c
  2225  000388  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2226  00038C  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2227  000390  0100               	movlb	0	; () banked
  2228  000392  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2229  000394  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2230  000396  6ED9               	movwf	fsr2l,c
  2231  000398  0100               	movlb	0	; () banked
  2232  00039A  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2233  00039C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2234  00039E  6EDA               	movwf	fsr2h,c
  2235  0003A0  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2239  0003A4  EE20 F0C8          	lfsr	2,200
  2240  0003A8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2241  0003AA  26D9               	addwf	fsr2l,f,c
  2242  0003AC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2243  0003AE  22DA               	addwfc	fsr2h,f,c
  2244  0003B0  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2245  0003B4  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2246  0003B8  0E00               	movlw	0
  2247  0003BA  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2248  0003BC  0EC8               	movlw	200
  2249  0003BE  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2250  0003C0  EC54  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2251  0003C4  EE20 F0C8          	lfsr	2,200
  2252  0003C8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2253  0003CA  26D9               	addwf	fsr2l,f,c
  2254  0003CC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2255  0003CE  22DA               	addwfc	fsr2h,f,c
  2256  0003D0  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2257  0003D4  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2258                           
  2259                           ;FastTransfer.c: 230: ++_this->count;
  2260  0003D8  EE20 F0CC          	lfsr	2,204
  2261  0003DC  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2262  0003DE  26D9               	addwf	fsr2l,f,c
  2263  0003E0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2264  0003E2  22DA               	addwfc	fsr2h,f,c
  2265  0003E4  2ADE               	incf	postinc2,f,c
  2266  0003E6  0E00               	movlw	0
  2267  0003E8  22DD               	addwfc	postdec2,f,c
  2268                           
  2269                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  2270  0003EA  EE20 F0C8          	lfsr	2,200
  2271  0003EE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2272  0003F0  26D9               	addwf	fsr2l,f,c
  2273  0003F2  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2274  0003F4  22DA               	addwfc	fsr2h,f,c
  2275  0003F6  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2276  0003FA  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2277  0003FE  0100               	movlb	0	; () banked
  2278  000400  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2279  000402  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2280  000404  6ED9               	movwf	fsr2l,c
  2281  000406  0100               	movlb	0	; () banked
  2282  000408  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2283  00040A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2284  00040C  6EDA               	movwf	fsr2h,c
  2285  00040E  C029  FFDF         	movff	_group,indf2
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2289  000412  EE20 F0C8          	lfsr	2,200
  2290  000416  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2291  000418  26D9               	addwf	fsr2l,f,c
  2292  00041A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2293  00041C  22DA               	addwfc	fsr2h,f,c
  2294  00041E  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2295  000422  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2296  000426  0E00               	movlw	0
  2297  000428  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2298  00042A  0EC8               	movlw	200
  2299  00042C  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2300  00042E  EC54  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2301  000432  EE20 F0C8          	lfsr	2,200
  2302  000436  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2303  000438  26D9               	addwf	fsr2l,f,c
  2304  00043A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2305  00043C  22DA               	addwfc	fsr2h,f,c
  2306  00043E  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2307  000442  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2308                           
  2309                           ;FastTransfer.c: 233: ++_this->count;
  2310  000446  EE20 F0CC          	lfsr	2,204
  2311  00044A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2312  00044C  26D9               	addwf	fsr2l,f,c
  2313  00044E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2314  000450  22DA               	addwfc	fsr2h,f,c
  2315  000452  2ADE               	incf	postinc2,f,c
  2316  000454  0E00               	movlw	0
  2317  000456  22DD               	addwfc	postdec2,f,c
  2318                           
  2319                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  2320  000458  EE20 F0C8          	lfsr	2,200
  2321  00045C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2322  00045E  26D9               	addwf	fsr2l,f,c
  2323  000460  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2324  000462  22DA               	addwfc	fsr2h,f,c
  2325  000464  CFDE F0C0          	movff	postinc2,??_FastTransfer_buffer_put
  2326  000468  CFDD F0C1          	movff	postdec2,??_FastTransfer_buffer_put+1
  2327  00046C  0100               	movlb	0	; () banked
  2328  00046E  51C0               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  2329  000470  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  2330  000472  6ED9               	movwf	fsr2l,c
  2331  000474  0100               	movlb	0	; () banked
  2332  000476  51C1               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  2333  000478  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  2334  00047A  6EDA               	movwf	fsr2h,c
  2335  00047C  C02A  FFDF         	movff	_group+1,indf2
  2336                           
  2337                           ; BSR set to: 0
  2338                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  2339  000480  EE20 F0C8          	lfsr	2,200
  2340  000484  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2341  000486  26D9               	addwf	fsr2l,f,c
  2342  000488  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2343  00048A  22DA               	addwfc	fsr2h,f,c
  2344  00048C  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  2345  000490  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  2346  000494  0E00               	movlw	0
  2347  000496  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  2348  000498  0EC8               	movlw	200
  2349  00049A  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  2350  00049C  EC54  F008         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  2351  0004A0  EE20 F0C8          	lfsr	2,200
  2352  0004A4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2353  0004A6  26D9               	addwf	fsr2l,f,c
  2354  0004A8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2355  0004AA  22DA               	addwfc	fsr2h,f,c
  2356  0004AC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  2357  0004B0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  2358                           
  2359                           ;FastTransfer.c: 236: ++_this->count;
  2360  0004B4  EE20 F0CC          	lfsr	2,204
  2361  0004B8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  2362  0004BA  26D9               	addwf	fsr2l,f,c
  2363  0004BC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  2364  0004BE  22DA               	addwfc	fsr2h,f,c
  2365  0004C0  2ADE               	incf	postinc2,f,c
  2366  0004C2  0E00               	movlw	0
  2367  0004C4  22DD               	addwfc	postdec2,f,c
  2368  0004C6  0012               	return	
  2369  0004C8                     __end_of_FastTransfer_buffer_put:
  2370                           	opt stack 0
  2371                           tblptru	equ	0xFF8
  2372                           tblptrh	equ	0xFF7
  2373                           tblptrl	equ	0xFF6
  2374                           tablat	equ	0xFF5
  2375                           intcon	equ	0xFF2
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           postdec1	equ	0xFE5
  2379                           fsr1l	equ	0xFE1
  2380                           indf2	equ	0xFDF
  2381                           postinc2	equ	0xFDE
  2382                           postdec2	equ	0xFDD
  2383                           plusw2	equ	0xFDB
  2384                           fsr2h	equ	0xFDA
  2385                           fsr2l	equ	0xFD9
  2386                           status	equ	0xFD8
  2387                           
  2388 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  2389 ;; Defined at:
  2390 ;;		line 273 in file "FastTransfer.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  value           2   26[COMRAM] const unsigned int 
  2393 ;;  modulus         2   28[COMRAM] const unsigned int 
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  my_value        2   30[COMRAM] unsigned int 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  2   26[COMRAM] unsigned int 
  2398 ;; Registers used:
  2399 ;;		wreg, status,2, status,0
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/0
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2405 ;;      Params:         4       0       0       0       0       0       0
  2406 ;;      Locals:         2       0       0       0       0       0       0
  2407 ;;      Temps:          0       0       0       0       0       0       0
  2408 ;;      Totals:         6       0       0       0       0       0       0
  2409 ;;Total ram usage:        6 bytes
  2410 ;; Hardware stack levels used:    1
  2411 ;; Hardware stack levels required when called:    4
  2412 ;; This function calls:
  2413 ;;		Nothing
  2414 ;; This function is called by:
  2415 ;;		_FastTransfer_buffer_put
  2416 ;;		_FastTransfer_buffer_get
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419                           
  2420                           	psect	text9
  2421  0010A8                     __ptext9:
  2422                           	opt stack 0
  2423  0010A8                     _FastTransfer_buffer_modulo_inc:
  2424                           	opt stack 22
  2425                           
  2426                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  2427                           
  2428                           ;incstack = 0
  2429  0010A8  0E01               	movlw	1
  2430  0010AA  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  2431  0010AC  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2432  0010AE  0E00               	movlw	0
  2433  0010B0  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  2434  0010B2  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2435                           
  2436                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  2437  0010B4  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  2438  0010B6  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  2439  0010B8  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  2440  0010BA  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  2441  0010BC  A0D8               	btfss	status,0,c
  2442  0010BE  D004               	goto	l2182
  2443                           
  2444                           ;FastTransfer.c: 276: my_value = 0;
  2445  0010C0  0E00               	movlw	0
  2446  0010C2  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  2447  0010C4  0E00               	movlw	0
  2448  0010C6  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  2449  0010C8                     l2182:
  2450                           
  2451                           ;FastTransfer.c: 277: }
  2452                           ;FastTransfer.c: 278: return (my_value);
  2453  0010C8  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  2454  0010CC  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  2455  0010D0  0012               	return	
  2456  0010D2                     __end_of_FastTransfer_buffer_modulo_inc:
  2457                           	opt stack 0
  2458                           tblptru	equ	0xFF8
  2459                           tblptrh	equ	0xFF7
  2460                           tblptrl	equ	0xFF6
  2461                           tablat	equ	0xFF5
  2462                           intcon	equ	0xFF2
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           fsr1l	equ	0xFE1
  2467                           indf2	equ	0xFDF
  2468                           postinc2	equ	0xFDE
  2469                           postdec2	equ	0xFDD
  2470                           plusw2	equ	0xFDB
  2471                           fsr2h	equ	0xFDA
  2472                           fsr2l	equ	0xFD9
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _receiveData *****************
  2476 ;; Defined at:
  2477 ;;		line 82 in file "FastTransfer.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;		None
  2480 ;; Auto vars:     Size  Location     Type
  2481 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2482 ;;  crcHolder       1   14[BANK0 ] unsigned char 
  2483 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2484 ;;  crcHolder       1   13[BANK0 ] unsigned char 
  2485 ;;  u               2   21[BANK0 ] int 
  2486 ;;  r               2   23[BANK0 ] int 
  2487 ;; Return value:  Size  Location     Type
  2488 ;;                  1    wreg      unsigned char 
  2489 ;; Registers used:
  2490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2491 ;; Tracked objects:
  2492 ;;		On entry : 0/0
  2493 ;;		On exit  : 0/0
  2494 ;;		Unchanged: 0/0
  2495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2496 ;;      Params:         0       0       0       0       0       0       0
  2497 ;;      Locals:         0      12       0       0       0       0       0
  2498 ;;      Temps:          0       6       0       0       0       0       0
  2499 ;;      Totals:         0      18       0       0       0       0       0
  2500 ;;Total ram usage:       18 bytes
  2501 ;; Hardware stack levels used:    1
  2502 ;; Hardware stack levels required when called:    6
  2503 ;; This function calls:
  2504 ;;		_CRC8
  2505 ;;		_CRCcheck
  2506 ;; This function is called by:
  2507 ;;		_updateComms
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text10
  2512  0000B0                     __ptext10:
  2513                           	opt stack 0
  2514  0000B0                     _receiveData:
  2515                           	opt stack 23
  2516                           
  2517                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2518                           
  2519                           ;incstack = 0
  2520  0000B0  D020               	goto	l3226
  2521  0000B2                     l3216:
  2522                           
  2523                           ; BSR set to: 0
  2524  0000B2  0100               	movlb	0	; () banked
  2525  0000B4  4BD5               	infsnz	receiveData@u& (0+255),f,b
  2526  0000B6  2BD6               	incf	(receiveData@u+1)& (0+255),f,b
  2527                           
  2528                           ; BSR set to: 0
  2529                           
  2530                           ; BSR set to: 0
  2531  0000B8  5040               	movf	_rx_len,w,c
  2532  0000BA  0100               	movlb	0	; () banked
  2533  0000BC  6FC7               	movwf	??_receiveData& (0+255),b
  2534  0000BE  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2535  0000C0  0E01               	movlw	1
  2536  0000C2  0100               	movlb	0	; () banked
  2537  0000C4  27C7               	addwf	??_receiveData& (0+255),f,b
  2538  0000C6  0E00               	movlw	0
  2539  0000C8  23C8               	addwfc	(??_receiveData+1)& (0+255),f,b
  2540  0000CA  0100               	movlb	0	; () banked
  2541  0000CC  51D5               	movf	receiveData@u& (0+255),w,b
  2542  0000CE  0100               	movlb	0	; () banked
  2543  0000D0  5DC7               	subwf	??_receiveData& (0+255),w,b
  2544  0000D2  0100               	movlb	0	; () banked
  2545  0000D4  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2546  0000D6  0A80               	xorlw	128
  2547  0000D8  0100               	movlb	0	; () banked
  2548  0000DA  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2549  0000DC  0100               	movlb	0	; () banked
  2550  0000DE  51D6               	movf	(receiveData@u+1)& (0+255),w,b
  2551  0000E0  0A80               	xorlw	128
  2552  0000E2  0100               	movlb	0	; () banked
  2553  0000E4  59C9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2554  0000E6  B0D8               	btfsc	status,0,c
  2555  0000E8  D7E4               	goto	l3216
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;FastTransfer.c: 109: }
  2559                           ;FastTransfer.c: 110: rx_len = 0;
  2560                           
  2561                           ; BSR set to: 0
  2562  0000EA  0E00               	movlw	0
  2563  0000EC  6E40               	movwf	_rx_len,c
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;FastTransfer.c: 111: return 0;
  2567  0000EE  0E00               	movlw	0
  2568                           
  2569                           ; BSR set to: 0
  2570  0000F0  0012               	return	
  2571  0000F2                     l3226:
  2572                           
  2573                           ;FastTransfer.c: 112: }
  2574                           ;FastTransfer.c: 114: }
  2575                           ;FastTransfer.c: 115: }
  2576                           ;FastTransfer.c: 116: }
  2577                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2578  0000F2  5040               	movf	_rx_len,w,c
  2579  0000F4  B4D8               	btfsc	status,2,c
  2580  0000F6  D12C               	goto	l3308
  2581                           
  2582                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2583  0000F8  503F               	movf	_rx_array_inx,w,c
  2584  0000FA  B4D8               	btfsc	status,2,c
  2585  0000FC                     l397:
  2586  0000FC  D7FF               	goto	l397
  2587                           
  2588                           ;FastTransfer.c: 135: }
  2589                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2590                           
  2591                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2592                           
  2593                           ;FastTransfer.c: 129: }
  2594                           ;FastTransfer.c: 130: }
  2595                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2596                           
  2597                           ;FastTransfer.c: 128: return 0;
  2598                           
  2599                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2600                           
  2601                           ;FastTransfer.c: 126: rx_len = 0;
  2602                           
  2603                           ;FastTransfer.c: 125: CRCcheck();
  2604                           
  2605                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2606  0000FE  5040               	movf	_rx_len,w,c
  2607  000100  0100               	movlb	0	; () banked
  2608  000102  6FC7               	movwf	??_receiveData& (0+255),b
  2609  000104  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2610  000106  0EFF               	movlw	255
  2611  000108  0100               	movlb	0	; () banked
  2612  00010A  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2613  00010C  0EFF               	movlw	255
  2614  00010E  0100               	movlb	0	; () banked
  2615  000110  6FCA               	movwf	(??_receiveData+3)& (0+255),b
  2616  000112  503F               	movf	_rx_array_inx,w,c
  2617  000114  0100               	movlb	0	; () banked
  2618  000116  6FCB               	movwf	(??_receiveData+4)& (0+255),b
  2619  000118  6BCC               	clrf	(??_receiveData+5)& (0+255),b
  2620  00011A  0100               	movlb	0	; () banked
  2621  00011C  51C9               	movf	(??_receiveData+2)& (0+255),w,b
  2622  00011E  0100               	movlb	0	; () banked
  2623  000120  27CB               	addwf	(??_receiveData+4)& (0+255),f,b
  2624  000122  0100               	movlb	0	; () banked
  2625  000124  51CA               	movf	(??_receiveData+3)& (0+255),w,b
  2626  000126  0100               	movlb	0	; () banked
  2627  000128  23CC               	addwfc	(??_receiveData+5)& (0+255),f,b
  2628  00012A  0100               	movlb	0	; () banked
  2629  00012C  51C7               	movf	??_receiveData& (0+255),w,b
  2630  00012E  0100               	movlb	0	; () banked
  2631  000130  19CB               	xorwf	(??_receiveData+4)& (0+255),w,b
  2632  000132  E105               	bnz	u2251
  2633  000134  0100               	movlb	0	; () banked
  2634  000136  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2635  000138  0100               	movlb	0	; () banked
  2636  00013A  19CC               	xorwf	(??_receiveData+5)& (0+255),w,b
  2637  00013C  A4D8               	btfss	status,2,c
  2638  00013E                     u2251:
  2639  00013E  D108               	goto	l3308
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2643  000140  0E00               	movlw	low _rx_buffer
  2644  000142  6E1B               	movwf	CRC8@data,c
  2645  000144  0E04               	movlw	high _rx_buffer
  2646  000146  6E1C               	movwf	CRC8@data+1,c
  2647  000148  C040  F01D         	movff	_rx_len,CRC8@len
  2648  00014C  EC67  F007         	call	_CRC8	;wreg free
  2649  000150  6E34               	movwf	_calc_CS,c
  2650                           
  2651                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2652  000152  0EFF               	movlw	255
  2653  000154  0100               	movlb	0	; () banked
  2654  000156  6FC7               	movwf	??_receiveData& (0+255),b
  2655  000158  0EFF               	movlw	255
  2656  00015A  0100               	movlb	0	; () banked
  2657  00015C  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2658  00015E  503F               	movf	_rx_array_inx,w,c
  2659  000160  0100               	movlb	0	; () banked
  2660  000162  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2661  000164  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2662  000166  0100               	movlb	0	; () banked
  2663  000168  51C7               	movf	??_receiveData& (0+255),w,b
  2664  00016A  0100               	movlb	0	; () banked
  2665  00016C  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2666  00016E  0100               	movlb	0	; () banked
  2667  000170  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2668  000172  0100               	movlb	0	; () banked
  2669  000174  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2670  000176  0E00               	movlw	low _rx_buffer
  2671  000178  0100               	movlb	0	; () banked
  2672  00017A  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2673  00017C  6ED9               	movwf	fsr2l,c
  2674  00017E  0E04               	movlw	high _rx_buffer
  2675  000180  0100               	movlb	0	; () banked
  2676  000182  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2677  000184  6EDA               	movwf	fsr2h,c
  2678  000186  5034               	movf	_calc_CS,w,c
  2679  000188  18DE               	xorwf	postinc2,w,c
  2680  00018A  A4D8               	btfss	status,2,c
  2681  00018C  D0A9               	goto	l3288
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;FastTransfer.c: 147: int r;
  2685                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2686  00018E  0E00               	movlw	0
  2687  000190  0100               	movlb	0	; () banked
  2688  000192  6FD8               	movwf	(receiveData@r+1)& (0+255),b
  2689  000194  0E00               	movlw	0
  2690  000196  6FD7               	movwf	receiveData@r& (0+255),b
  2691  000198  D05A               	goto	l3266
  2692  00019A                     l3256:
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2696  00019A  0E00               	movlw	low _rx_buffer
  2697  00019C  0100               	movlb	0	; () banked
  2698  00019E  25D7               	addwf	receiveData@r& (0+255),w,b
  2699  0001A0  6ED9               	movwf	fsr2l,c
  2700  0001A2  0E04               	movlw	high _rx_buffer
  2701  0001A4  0100               	movlb	0	; () banked
  2702  0001A6  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2703  0001A8  6EDA               	movwf	fsr2h,c
  2704  0001AA  503B               	movf	_maxDataAddress,w,c
  2705  0001AC  5CDE               	subwf	postinc2,w,c
  2706  0001AE  B0D8               	btfsc	status,0,c
  2707  0001B0  D041               	goto	l3262
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2711  0001B2  0E01               	movlw	1
  2712  0001B4  0100               	movlb	0	; () banked
  2713  0001B6  25D7               	addwf	receiveData@r& (0+255),w,b
  2714  0001B8  0100               	movlb	0	; () banked
  2715  0001BA  6FC7               	movwf	??_receiveData& (0+255),b
  2716  0001BC  0E00               	movlw	0
  2717  0001BE  0100               	movlb	0	; () banked
  2718  0001C0  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2719  0001C2  0100               	movlb	0	; () banked
  2720  0001C4  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2721  0001C6  0E00               	movlw	low _rx_buffer
  2722  0001C8  0100               	movlb	0	; () banked
  2723  0001CA  25C7               	addwf	??_receiveData& (0+255),w,b
  2724  0001CC  6ED9               	movwf	fsr2l,c
  2725  0001CE  0E04               	movlw	high _rx_buffer
  2726  0001D0  0100               	movlb	0	; () banked
  2727  0001D2  21C8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2728  0001D4  6EDA               	movwf	fsr2h,c
  2729  0001D6  50DF               	movf	indf2,w,c
  2730  0001D8  6E29               	movwf	_group,c
  2731                           
  2732                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2733  0001DA  0E02               	movlw	2
  2734  0001DC  0100               	movlb	0	; () banked
  2735  0001DE  25D7               	addwf	receiveData@r& (0+255),w,b
  2736  0001E0  0100               	movlb	0	; () banked
  2737  0001E2  6FC7               	movwf	??_receiveData& (0+255),b
  2738  0001E4  0E00               	movlw	0
  2739  0001E6  0100               	movlb	0	; () banked
  2740  0001E8  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2741  0001EA  0100               	movlb	0	; () banked
  2742  0001EC  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2743  0001EE  0E00               	movlw	low _rx_buffer
  2744  0001F0  0100               	movlb	0	; () banked
  2745  0001F2  25C7               	addwf	??_receiveData& (0+255),w,b
  2746  0001F4  6ED9               	movwf	fsr2l,c
  2747  0001F6  0E04               	movlw	high _rx_buffer
  2748  0001F8  0100               	movlb	0	; () banked
  2749  0001FA  21C8               	addwfc	(??_receiveData+1)& (0+255),w,b
  2750  0001FC  6EDA               	movwf	fsr2h,c
  2751  0001FE  50DF               	movf	indf2,w,c
  2752  000200  6E2A               	movwf	_group+1,c
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2756  000202  0E00               	movlw	low _rx_buffer
  2757  000204  0100               	movlb	0	; () banked
  2758  000206  25D7               	addwf	receiveData@r& (0+255),w,b
  2759  000208  6ED9               	movwf	fsr2l,c
  2760  00020A  0E04               	movlw	high _rx_buffer
  2761  00020C  0100               	movlb	0	; () banked
  2762  00020E  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2763  000210  6EDA               	movwf	fsr2h,c
  2764  000212  50DF               	movf	indf2,w,c
  2765  000214  0100               	movlb	0	; () banked
  2766  000216  6FC7               	movwf	??_receiveData& (0+255),b
  2767  000218  0100               	movlb	0	; () banked
  2768  00021A  51C7               	movf	??_receiveData& (0+255),w,b
  2769  00021C  0D02               	mullw	2
  2770  00021E  50F3               	movf	prodl,w,c
  2771  000220  242B               	addwf	_receiveArrayAddress,w,c
  2772  000222  6ED9               	movwf	fsr2l,c
  2773  000224  50F4               	movf	prodh,w,c
  2774  000226  202C               	addwfc	_receiveArrayAddress+1,w,c
  2775  000228  6EDA               	movwf	fsr2h,c
  2776  00022A  C029  FFDE         	movff	_group,postinc2
  2777  00022E  C02A  FFDD         	movff	_group+1,postdec2
  2778                           
  2779                           ;FastTransfer.c: 153: } else {
  2780  000232  D003               	goto	l3264
  2781  000234                     l3262:
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2785  000234  0100               	movlb	0	; () banked
  2786  000236  4B9E               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2787  000238  2B9F               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2788  00023A                     l3264:
  2789                           
  2790                           ; BSR set to: 0
  2791  00023A  0E03               	movlw	3
  2792  00023C  0100               	movlb	0	; () banked
  2793  00023E  25D7               	addwf	receiveData@r& (0+255),w,b
  2794  000240  0100               	movlb	0	; () banked
  2795  000242  6FD7               	movwf	receiveData@r& (0+255),b
  2796  000244  0E00               	movlw	0
  2797  000246  0100               	movlb	0	; () banked
  2798  000248  21D8               	addwfc	(receiveData@r+1)& (0+255),w,b
  2799  00024A  0100               	movlb	0	; () banked
  2800  00024C  6FD8               	movwf	(receiveData@r+1)& (0+255),b
  2801  00024E                     l3266:
  2802                           
  2803                           ; BSR set to: 0
  2804  00024E  5040               	movf	_rx_len,w,c
  2805  000250  0100               	movlb	0	; () banked
  2806  000252  6FC7               	movwf	??_receiveData& (0+255),b
  2807  000254  6BC8               	clrf	(??_receiveData+1)& (0+255),b
  2808  000256  0100               	movlb	0	; () banked
  2809  000258  51C7               	movf	??_receiveData& (0+255),w,b
  2810  00025A  0100               	movlb	0	; () banked
  2811  00025C  5DD7               	subwf	receiveData@r& (0+255),w,b
  2812  00025E  0100               	movlb	0	; () banked
  2813  000260  51D8               	movf	(receiveData@r+1)& (0+255),w,b
  2814  000262  0A80               	xorlw	128
  2815  000264  0100               	movlb	0	; () banked
  2816  000266  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2817  000268  0100               	movlb	0	; () banked
  2818  00026A  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2819  00026C  0A80               	xorlw	128
  2820  00026E  0100               	movlb	0	; () banked
  2821  000270  59C9               	subwfb	(??_receiveData+2)& (0+255),w,b
  2822  000272  A0D8               	btfss	status,0,c
  2823  000274  D792               	goto	l3256
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;FastTransfer.c: 155: }
  2827                           ;FastTransfer.c: 156: }
  2828                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2829                           
  2830                           ; BSR set to: 0
  2831  000276  5033               	movf	_AKNAKsend,w,c
  2832  000278  B4D8               	btfsc	status,2,c
  2833  00027A  D02C               	goto	l3278
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;FastTransfer.c: 160: unsigned char holder[3];
  2837                           ;FastTransfer.c: 161: holder[0] = 255;
  2838  00027C  0100               	movlb	0	; () banked
  2839  00027E  69CF               	setf	receiveData@holder& (0+255),b
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;FastTransfer.c: 162: holder[1] = 1;
  2843  000280  0E01               	movlw	1
  2844  000282  0100               	movlb	0	; () banked
  2845  000284  6FD0               	movwf	(receiveData@holder+1)& (0+255),b
  2846                           
  2847                           ; BSR set to: 0
  2848                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2849  000286  0EFF               	movlw	255
  2850  000288  0100               	movlb	0	; () banked
  2851  00028A  6FC7               	movwf	??_receiveData& (0+255),b
  2852  00028C  0EFF               	movlw	255
  2853  00028E  0100               	movlb	0	; () banked
  2854  000290  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2855  000292  503F               	movf	_rx_array_inx,w,c
  2856  000294  0100               	movlb	0	; () banked
  2857  000296  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2858  000298  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2859  00029A  0100               	movlb	0	; () banked
  2860  00029C  51C7               	movf	??_receiveData& (0+255),w,b
  2861  00029E  0100               	movlb	0	; () banked
  2862  0002A0  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2863  0002A2  0100               	movlb	0	; () banked
  2864  0002A4  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2865  0002A6  0100               	movlb	0	; () banked
  2866  0002A8  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2867  0002AA  0E00               	movlw	low _rx_buffer
  2868  0002AC  0100               	movlb	0	; () banked
  2869  0002AE  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2870  0002B0  6ED9               	movwf	fsr2l,c
  2871  0002B2  0E04               	movlw	high _rx_buffer
  2872  0002B4  0100               	movlb	0	; () banked
  2873  0002B6  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2874  0002B8  6EDA               	movwf	fsr2h,c
  2875  0002BA  50DF               	movf	indf2,w,c
  2876  0002BC  0100               	movlb	0	; () banked
  2877  0002BE  6FD1               	movwf	(receiveData@holder+2)& (0+255),b
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2881  0002C0  0ECF               	movlw	low receiveData@holder
  2882  0002C2  6E1B               	movwf	CRC8@data,c
  2883  0002C4  0E00               	movlw	high receiveData@holder
  2884  0002C6  6E1C               	movwf	CRC8@data+1,c
  2885  0002C8  0E03               	movlw	3
  2886  0002CA  6E1D               	movwf	CRC8@len,c
  2887  0002CC  EC67  F007         	call	_CRC8	;wreg free
  2888  0002D0  0100               	movlb	0	; () banked
  2889  0002D2  6FCD               	movwf	receiveData@crcHolder& (0+255),b
  2890  0002D4                     l3278:
  2891                           
  2892                           ; BSR set to: 0
  2893                           ;FastTransfer.c: 174: }
  2894                           ;FastTransfer.c: 178: rx_len = 0;
  2895  0002D4  0E00               	movlw	0
  2896  0002D6  6E40               	movwf	_rx_len,c
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2900  0002D8  0E00               	movlw	0
  2901  0002DA  6E3F               	movwf	_rx_array_inx,c
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;FastTransfer.c: 180: return 1;
  2905  0002DC  0E01               	movlw	1
  2906                           
  2907                           ; BSR set to: 0
  2908  0002DE  0012               	return	
  2909  0002E0                     l3288:
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;FastTransfer.c: 182: crcErrorCounter++;
  2913  0002E0  0100               	movlb	0	; () banked
  2914  0002E2  4B9C               	infsnz	_crcErrorCounter& (0+255),f,b
  2915  0002E4  2B9D               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2916                           
  2917                           ; BSR set to: 0
  2918                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2919  0002E6  5033               	movf	_AKNAKsend,w,c
  2920  0002E8  B4D8               	btfsc	status,2,c
  2921  0002EA  D02C               	goto	l3300
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;FastTransfer.c: 185: unsigned char holder[3];
  2925                           ;FastTransfer.c: 186: holder[0] = 255;
  2926  0002EC  0100               	movlb	0	; () banked
  2927  0002EE  69D2               	setf	receiveData@holder_1419& (0+255),b
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;FastTransfer.c: 187: holder[1] = 2;
  2931  0002F0  0E02               	movlw	2
  2932  0002F2  0100               	movlb	0	; () banked
  2933  0002F4  6FD3               	movwf	(receiveData@holder_1419+1)& (0+255),b
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2937  0002F6  0EFF               	movlw	255
  2938  0002F8  0100               	movlb	0	; () banked
  2939  0002FA  6FC7               	movwf	??_receiveData& (0+255),b
  2940  0002FC  0EFF               	movlw	255
  2941  0002FE  0100               	movlb	0	; () banked
  2942  000300  6FC8               	movwf	(??_receiveData+1)& (0+255),b
  2943  000302  503F               	movf	_rx_array_inx,w,c
  2944  000304  0100               	movlb	0	; () banked
  2945  000306  6FC9               	movwf	(??_receiveData+2)& (0+255),b
  2946  000308  6BCA               	clrf	(??_receiveData+3)& (0+255),b
  2947  00030A  0100               	movlb	0	; () banked
  2948  00030C  51C7               	movf	??_receiveData& (0+255),w,b
  2949  00030E  0100               	movlb	0	; () banked
  2950  000310  27C9               	addwf	(??_receiveData+2)& (0+255),f,b
  2951  000312  0100               	movlb	0	; () banked
  2952  000314  51C8               	movf	(??_receiveData+1)& (0+255),w,b
  2953  000316  0100               	movlb	0	; () banked
  2954  000318  23CA               	addwfc	(??_receiveData+3)& (0+255),f,b
  2955  00031A  0E00               	movlw	low _rx_buffer
  2956  00031C  0100               	movlb	0	; () banked
  2957  00031E  25C9               	addwf	(??_receiveData+2)& (0+255),w,b
  2958  000320  6ED9               	movwf	fsr2l,c
  2959  000322  0E04               	movlw	high _rx_buffer
  2960  000324  0100               	movlb	0	; () banked
  2961  000326  21CA               	addwfc	(??_receiveData+3)& (0+255),w,b
  2962  000328  6EDA               	movwf	fsr2h,c
  2963  00032A  50DF               	movf	indf2,w,c
  2964  00032C  0100               	movlb	0	; () banked
  2965  00032E  6FD4               	movwf	(receiveData@holder_1419+2)& (0+255),b
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;FastTransfer.c: 198: serial_write(crcHolder);
  2969  000330  0ED2               	movlw	low receiveData@holder_1419
  2970  000332  6E1B               	movwf	CRC8@data,c
  2971  000334  0E00               	movlw	high receiveData@holder_1419
  2972  000336  6E1C               	movwf	CRC8@data+1,c
  2973  000338  0E03               	movlw	3
  2974  00033A  6E1D               	movwf	CRC8@len,c
  2975  00033C  EC67  F007         	call	_CRC8	;wreg free
  2976  000340  0100               	movlb	0	; () banked
  2977  000342  6FCE               	movwf	receiveData@crcHolder_1420& (0+255),b
  2978  000344                     l3300:
  2979                           
  2980                           ; BSR set to: 0
  2981                           ;FastTransfer.c: 199: }
  2982                           ;FastTransfer.c: 202: rx_len = 0;
  2983  000344  0E00               	movlw	0
  2984  000346  6E40               	movwf	_rx_len,c
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;FastTransfer.c: 203: rx_array_inx = 0;
  2988  000348  0E00               	movlw	0
  2989  00034A  6E3F               	movwf	_rx_array_inx,c
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;FastTransfer.c: 204: return 0;
  2993  00034C  0E00               	movlw	0
  2994                           
  2995                           ; BSR set to: 0
  2996  00034E  0012               	return	
  2997  000350                     l3308:
  2998                           
  2999                           ;FastTransfer.c: 205: }
  3000                           ;FastTransfer.c: 206: }
  3001                           ;FastTransfer.c: 207: }
  3002                           ;FastTransfer.c: 210: return 0;
  3003  000350  0E00               	movlw	0
  3004  000352  0012               	return	
  3005  000354                     __end_of_receiveData:
  3006                           	opt stack 0
  3007                           tblptru	equ	0xFF8
  3008                           tblptrh	equ	0xFF7
  3009                           tblptrl	equ	0xFF6
  3010                           tablat	equ	0xFF5
  3011                           prodh	equ	0xFF4
  3012                           prodl	equ	0xFF3
  3013                           intcon	equ	0xFF2
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           postdec1	equ	0xFE5
  3017                           fsr1l	equ	0xFE1
  3018                           indf2	equ	0xFDF
  3019                           postinc2	equ	0xFDE
  3020                           postdec2	equ	0xFDD
  3021                           plusw2	equ	0xFDB
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _CRCcheck *****************
  3027 ;; Defined at:
  3028 ;;		line 373 in file "FastTransfer.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  rt              2    5[BANK0 ] int 
  3033 ;;  arrayHolder     3    2[BANK0 ] unsigned char [3]
  3034 ;;  calculatedCR    1    1[BANK0 ] unsigned char 
  3035 ;;  SentCRC         1    0[BANK0 ] unsigned char 
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3045 ;;      Params:         0       0       0       0       0       0       0
  3046 ;;      Locals:         0       7       0       0       0       0       0
  3047 ;;      Temps:          0       0       0       0       0       0       0
  3048 ;;      Totals:         0       7       0       0       0       0       0
  3049 ;;Total ram usage:        7 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    5
  3052 ;; This function calls:
  3053 ;;		_CRC8
  3054 ;;		_crcBufS_get
  3055 ;;		_crcBufS_status_put
  3056 ;; This function is called by:
  3057 ;;		_receiveData
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text11
  3062  0009E4                     __ptext11:
  3063                           	opt stack 0
  3064  0009E4                     _CRCcheck:
  3065                           	opt stack 23
  3066  0009E4                     l473:
  3067  0009E4  D7FF               	goto	l473
  3068  0009E6                     l3126:
  3069                           
  3070                           ; BSR set to: 0
  3071  0009E6  0100               	movlb	0	; () banked
  3072  0009E8  BFC6               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3073  0009EA  D008               	goto	l3130
  3074  0009EC  0100               	movlb	0	; () banked
  3075  0009EE  51C6               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3076  0009F0  E143               	bnz	l484
  3077  0009F2  0E05               	movlw	5
  3078  0009F4  0100               	movlb	0	; () banked
  3079  0009F6  5DC5               	subwf	CRCcheck@rt& (0+255),w,b
  3080  0009F8  B0D8               	btfsc	status,0,c
  3081  0009FA  0012               	return	
  3082  0009FC                     l3130:
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3086  0009FC  0EA4               	movlw	low _crc_buffer
  3087  0009FE  6E1B               	movwf	crcBufS_get@_this,c
  3088  000A00  0E00               	movlw	high _crc_buffer
  3089  000A02  6E1C               	movwf	crcBufS_get@_this+1,c
  3090  000A04  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3091  000A08  0E00               	movlw	0
  3092  000A0A  6E1E               	movwf	crcBufS_get@space,c
  3093  000A0C  ECF1  F002         	call	_crcBufS_get	;wreg free
  3094  000A10  183D               	xorwf	_returnAddress,w,c
  3095  000A12  A4D8               	btfss	status,2,c
  3096  000A14  D02D               	goto	l3144
  3097                           
  3098                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3099  000A16  0EA4               	movlw	low _crc_buffer
  3100  000A18  6E1B               	movwf	crcBufS_get@_this,c
  3101  000A1A  0E00               	movlw	high _crc_buffer
  3102  000A1C  6E1C               	movwf	crcBufS_get@_this+1,c
  3103  000A1E  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3104  000A22  0E01               	movlw	1
  3105  000A24  6E1E               	movwf	crcBufS_get@space,c
  3106  000A26  ECF1  F002         	call	_crcBufS_get	;wreg free
  3107  000A2A  0100               	movlb	0	; () banked
  3108  000A2C  19C4               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3109  000A2E  A4D8               	btfss	status,2,c
  3110  000A30  D01F               	goto	l3144
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3114  000A32  0100               	movlb	0	; () banked
  3115  000A34  05C3               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3116  000A36  A4D8               	btfss	status,2,c
  3117  000A38  D00B               	goto	l3140
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3121  000A3A  0EA4               	movlw	low _crc_buffer
  3122  000A3C  6E1B               	movwf	crcBufS_status_put@_this,c
  3123  000A3E  0E00               	movlw	high _crc_buffer
  3124  000A40  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3125  000A42  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3126  000A46  0E01               	movlw	1
  3127  000A48  6E1E               	movwf	crcBufS_status_put@status,c
  3128  000A4A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3129                           
  3130                           ;FastTransfer.c: 393: break;
  3131  000A4E  0012               	return	
  3132  000A50                     l3140:
  3133  000A50  0E02               	movlw	2
  3134  000A52  0100               	movlb	0	; () banked
  3135  000A54  19C3               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3136  000A56  A4D8               	btfss	status,2,c
  3137  000A58  D00B               	goto	l3144
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3141  000A5A  0EA4               	movlw	low _crc_buffer
  3142  000A5C  6E1B               	movwf	crcBufS_status_put@_this,c
  3143  000A5E  0E00               	movlw	high _crc_buffer
  3144  000A60  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3145  000A62  C0C5  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3146  000A66  0E02               	movlw	2
  3147  000A68  6E1E               	movwf	crcBufS_status_put@status,c
  3148  000A6A  ECCE  F003         	call	_crcBufS_status_put	;wreg free
  3149                           
  3150                           ;FastTransfer.c: 396: break;
  3151  000A6E  0012               	return	
  3152  000A70                     l3144:
  3153  000A70  0100               	movlb	0	; () banked
  3154  000A72  4BC5               	infsnz	CRCcheck@rt& (0+255),f,b
  3155  000A74  2BC6               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3156  000A76  D7B7               	goto	l3126
  3157  000A78                     l484:
  3158  000A78  0012               	return		;funcret
  3159  000A7A                     __end_of_CRCcheck:
  3160                           	opt stack 0
  3161                           tblptru	equ	0xFF8
  3162                           tblptrh	equ	0xFF7
  3163                           tblptrl	equ	0xFF6
  3164                           tablat	equ	0xFF5
  3165                           prodh	equ	0xFF4
  3166                           prodl	equ	0xFF3
  3167                           intcon	equ	0xFF2
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           plusw2	equ	0xFDB
  3176                           fsr2h	equ	0xFDA
  3177                           fsr2l	equ	0xFD9
  3178                           status	equ	0xFD8
  3179                           
  3180 ;; *************** function _crcBufS_status_put *****************
  3181 ;; Defined at:
  3182 ;;		line 336 in file "FastTransfer.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3185 ;;		 -> crc_buffer(17), 
  3186 ;;  time            1   28[COMRAM] unsigned char 
  3187 ;;  status          1   29[COMRAM] unsigned char 
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;  wantedTime      2   34[COMRAM] int 
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3199 ;;      Params:         4       0       0       0       0       0       0
  3200 ;;      Locals:         2       0       0       0       0       0       0
  3201 ;;      Temps:          4       0       0       0       0       0       0
  3202 ;;      Totals:        10       0       0       0       0       0       0
  3203 ;;Total ram usage:       10 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    4
  3206 ;; This function calls:
  3207 ;;		Nothing
  3208 ;; This function is called by:
  3209 ;;		_CRCcheck
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212                           
  3213                           	psect	text12
  3214  00079C                     __ptext12:
  3215                           	opt stack 0
  3216  00079C                     _crcBufS_status_put:
  3217                           	opt stack 23
  3218                           
  3219                           ;FastTransfer.c: 337: if (time >= 5) {
  3220                           
  3221                           ;incstack = 0
  3222  00079C  0E04               	movlw	4
  3223  00079E  641D               	cpfsgt	crcBufS_status_put@time,c
  3224  0007A0  D002               	goto	l3082
  3225                           
  3226                           ;FastTransfer.c: 338: time = 5 - 1;
  3227  0007A2  0E04               	movlw	4
  3228  0007A4  6E1D               	movwf	crcBufS_status_put@time,c
  3229  0007A6                     l3082:
  3230                           
  3231                           ;FastTransfer.c: 339: }
  3232                           ;FastTransfer.c: 340: time = time + 1;
  3233  0007A6  281D               	incf	crcBufS_status_put@time,w,c
  3234  0007A8  6E1D               	movwf	crcBufS_status_put@time,c
  3235                           
  3236                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3237  0007AA  501D               	movf	crcBufS_status_put@time,w,c
  3238  0007AC  0D03               	mullw	3
  3239  0007AE  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3240  0007B2  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3241                           
  3242                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3243  0007B6  EE20 F00F          	lfsr	2,15
  3244  0007BA  501B               	movf	crcBufS_status_put@_this,w,c
  3245  0007BC  26D9               	addwf	fsr2l,f,c
  3246  0007BE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3247  0007C0  22DA               	addwfc	fsr2h,f,c
  3248  0007C2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3249  0007C4  5CDE               	subwf	postinc2,w,c
  3250  0007C6  50DE               	movf	postinc2,w,c
  3251  0007C8  0A80               	xorlw	128
  3252  0007CA  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  3253  0007CC  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3254  0007CE  0A80               	xorlw	128
  3255  0007D0  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  3256  0007D2  B0D8               	btfsc	status,0,c
  3257  0007D4  D02B               	goto	l3090
  3258                           
  3259                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3260  0007D6  EE20 F00F          	lfsr	2,15
  3261  0007DA  501B               	movf	crcBufS_status_put@_this,w,c
  3262  0007DC  26D9               	addwf	fsr2l,f,c
  3263  0007DE  501C               	movf	crcBufS_status_put@_this+1,w,c
  3264  0007E0  22DA               	addwfc	fsr2h,f,c
  3265  0007E2  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3266  0007E6  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3267  0007EA  1E1F               	comf	??_crcBufS_status_put,f,c
  3268  0007EC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3269  0007EE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3270  0007F0  2A20               	incf	??_crcBufS_status_put+1,f,c
  3271  0007F2  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3272  0007F4  261F               	addwf	??_crcBufS_status_put,f,c
  3273  0007F6  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  3274  0007F8  2220               	addwfc	??_crcBufS_status_put+1,f,c
  3275  0007FA  1E1F               	comf	??_crcBufS_status_put,f,c
  3276  0007FC  1E20               	comf	??_crcBufS_status_put+1,f,c
  3277  0007FE  4A1F               	infsnz	??_crcBufS_status_put,f,c
  3278  000800  2A20               	incf	??_crcBufS_status_put+1,f,c
  3279  000802  0E0F               	movlw	15
  3280  000804  241F               	addwf	??_crcBufS_status_put,w,c
  3281  000806  6E23               	movwf	crcBufS_status_put@wantedTime,c
  3282  000808  0E00               	movlw	0
  3283  00080A  2020               	addwfc	??_crcBufS_status_put+1,w,c
  3284  00080C  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  3285                           
  3286                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  3287  00080E  0E02               	movlw	2
  3288  000810  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  3289  000812  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  3290  000814  0E00               	movlw	0
  3291  000816  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  3292  000818  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  3293  00081A  501F               	movf	??_crcBufS_status_put,w,c
  3294  00081C  241B               	addwf	crcBufS_status_put@_this,w,c
  3295  00081E  6ED9               	movwf	fsr2l,c
  3296  000820  5020               	movf	??_crcBufS_status_put+1,w,c
  3297  000822  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3298  000824  6EDA               	movwf	fsr2h,c
  3299  000826  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3300                           
  3301                           ;FastTransfer.c: 345: } else {
  3302  00082A  0012               	return	
  3303  00082C                     l3090:
  3304                           
  3305                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  3306  00082C  EE20 F00F          	lfsr	2,15
  3307  000830  501B               	movf	crcBufS_status_put@_this,w,c
  3308  000832  26D9               	addwf	fsr2l,f,c
  3309  000834  501C               	movf	crcBufS_status_put@_this+1,w,c
  3310  000836  22DA               	addwfc	fsr2h,f,c
  3311  000838  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  3312  00083C  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  3313  000840  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  3314  000844  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  3315  000848  1E21               	comf	??_crcBufS_status_put+2,f,c
  3316  00084A  1E22               	comf	??_crcBufS_status_put+3,f,c
  3317  00084C  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  3318  00084E  2A22               	incf	??_crcBufS_status_put+3,f,c
  3319  000850  501F               	movf	??_crcBufS_status_put,w,c
  3320  000852  2621               	addwf	??_crcBufS_status_put+2,f,c
  3321  000854  5020               	movf	??_crcBufS_status_put+1,w,c
  3322  000856  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3323  000858  0E02               	movlw	2
  3324  00085A  2621               	addwf	??_crcBufS_status_put+2,f,c
  3325  00085C  0E00               	movlw	0
  3326  00085E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  3327  000860  5021               	movf	??_crcBufS_status_put+2,w,c
  3328  000862  241B               	addwf	crcBufS_status_put@_this,w,c
  3329  000864  6ED9               	movwf	fsr2l,c
  3330  000866  5022               	movf	??_crcBufS_status_put+3,w,c
  3331  000868  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  3332  00086A  6EDA               	movwf	fsr2h,c
  3333  00086C  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  3334  000870  0012               	return	
  3335  000872                     __end_of_crcBufS_status_put:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           postinc0	equ	0xFEE
  3345                           wreg	equ	0xFE8
  3346                           postdec1	equ	0xFE5
  3347                           fsr1l	equ	0xFE1
  3348                           indf2	equ	0xFDF
  3349                           postinc2	equ	0xFDE
  3350                           postdec2	equ	0xFDD
  3351                           plusw2	equ	0xFDB
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _crcBufS_get *****************
  3357 ;; Defined at:
  3358 ;;		line 353 in file "FastTransfer.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3361 ;;		 -> crc_buffer(17), 
  3362 ;;  time            1   28[COMRAM] unsigned char 
  3363 ;;  space           1   29[COMRAM] unsigned char 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  wantedTime      2   36[COMRAM] int 
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      unsigned char 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3375 ;;      Params:         4       0       0       0       0       0       0
  3376 ;;      Locals:         2       0       0       0       0       0       0
  3377 ;;      Temps:          6       0       0       0       0       0       0
  3378 ;;      Totals:        12       0       0       0       0       0       0
  3379 ;;Total ram usage:       12 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:    4
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_CRCcheck
  3386 ;;		_AKNAK
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text13
  3391  0005E2                     __ptext13:
  3392                           	opt stack 0
  3393  0005E2                     _crcBufS_get:
  3394                           	opt stack 23
  3395                           
  3396                           ;FastTransfer.c: 354: if (time >= 5) {
  3397                           
  3398                           ;incstack = 0
  3399  0005E2  0E04               	movlw	4
  3400  0005E4  641D               	cpfsgt	crcBufS_get@time,c
  3401  0005E6  D002               	goto	l3058
  3402                           
  3403                           ;FastTransfer.c: 355: time = 5 - 1;
  3404  0005E8  0E04               	movlw	4
  3405  0005EA  6E1D               	movwf	crcBufS_get@time,c
  3406  0005EC                     l3058:
  3407                           
  3408                           ;FastTransfer.c: 356: }
  3409                           ;FastTransfer.c: 357: if (space >= 3) {
  3410  0005EC  0E02               	movlw	2
  3411  0005EE  641E               	cpfsgt	crcBufS_get@space,c
  3412  0005F0  D002               	goto	l3062
  3413                           
  3414                           ;FastTransfer.c: 358: space = 3 - 1;
  3415  0005F2  0E02               	movlw	2
  3416  0005F4  6E1E               	movwf	crcBufS_get@space,c
  3417  0005F6                     l3062:
  3418                           
  3419                           ;FastTransfer.c: 359: }
  3420                           ;FastTransfer.c: 360: time = time + 1;
  3421  0005F6  281D               	incf	crcBufS_get@time,w,c
  3422  0005F8  6E1D               	movwf	crcBufS_get@time,c
  3423                           
  3424                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  3425  0005FA  501D               	movf	crcBufS_get@time,w,c
  3426  0005FC  0D03               	mullw	3
  3427  0005FE  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  3428  000602  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  3429                           
  3430                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  3431  000606  EE20 F00F          	lfsr	2,15
  3432  00060A  501B               	movf	crcBufS_get@_this,w,c
  3433  00060C  26D9               	addwf	fsr2l,f,c
  3434  00060E  501C               	movf	crcBufS_get@_this+1,w,c
  3435  000610  22DA               	addwfc	fsr2h,f,c
  3436  000612  5025               	movf	crcBufS_get@wantedTime,w,c
  3437  000614  5CDE               	subwf	postinc2,w,c
  3438  000616  50DE               	movf	postinc2,w,c
  3439  000618  0A80               	xorlw	128
  3440  00061A  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  3441  00061C  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3442  00061E  0A80               	xorlw	128
  3443  000620  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  3444  000622  B0D8               	btfsc	status,0,c
  3445  000624  D02A               	goto	l3074
  3446                           
  3447                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  3448  000626  EE20 F00F          	lfsr	2,15
  3449  00062A  501B               	movf	crcBufS_get@_this,w,c
  3450  00062C  26D9               	addwf	fsr2l,f,c
  3451  00062E  501C               	movf	crcBufS_get@_this+1,w,c
  3452  000630  22DA               	addwfc	fsr2h,f,c
  3453  000632  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3454  000636  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3455  00063A  1E1F               	comf	??_crcBufS_get,f,c
  3456  00063C  1E20               	comf	??_crcBufS_get+1,f,c
  3457  00063E  4A1F               	infsnz	??_crcBufS_get,f,c
  3458  000640  2A20               	incf	??_crcBufS_get+1,f,c
  3459  000642  5025               	movf	crcBufS_get@wantedTime,w,c
  3460  000644  261F               	addwf	??_crcBufS_get,f,c
  3461  000646  5026               	movf	crcBufS_get@wantedTime+1,w,c
  3462  000648  2220               	addwfc	??_crcBufS_get+1,f,c
  3463  00064A  1E1F               	comf	??_crcBufS_get,f,c
  3464  00064C  1E20               	comf	??_crcBufS_get+1,f,c
  3465  00064E  4A1F               	infsnz	??_crcBufS_get,f,c
  3466  000650  2A20               	incf	??_crcBufS_get+1,f,c
  3467  000652  0E0F               	movlw	15
  3468  000654  241F               	addwf	??_crcBufS_get,w,c
  3469  000656  6E25               	movwf	crcBufS_get@wantedTime,c
  3470  000658  0E00               	movlw	0
  3471  00065A  2020               	addwfc	??_crcBufS_get+1,w,c
  3472  00065C  6E26               	movwf	crcBufS_get@wantedTime+1,c
  3473                           
  3474                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  3475  00065E  501E               	movf	crcBufS_get@space,w,c
  3476  000660  2425               	addwf	crcBufS_get@wantedTime,w,c
  3477  000662  6E1F               	movwf	??_crcBufS_get& (0+255),c
  3478  000664  0E00               	movlw	0
  3479  000666  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  3480  000668  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  3481  00066A  501F               	movf	??_crcBufS_get,w,c
  3482  00066C  241B               	addwf	crcBufS_get@_this,w,c
  3483  00066E  6ED9               	movwf	fsr2l,c
  3484  000670  5020               	movf	??_crcBufS_get+1,w,c
  3485  000672  201C               	addwfc	crcBufS_get@_this+1,w,c
  3486  000674  6EDA               	movwf	fsr2h,c
  3487  000676  50DF               	movf	indf2,w,c
  3488                           
  3489                           ;FastTransfer.c: 365: } else {
  3490  000678  0012               	return	
  3491  00067A                     l3074:
  3492                           
  3493                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  3494  00067A  EE20 F00F          	lfsr	2,15
  3495  00067E  501B               	movf	crcBufS_get@_this,w,c
  3496  000680  26D9               	addwf	fsr2l,f,c
  3497  000682  501C               	movf	crcBufS_get@_this+1,w,c
  3498  000684  22DA               	addwfc	fsr2h,f,c
  3499  000686  CFDE F01F          	movff	postinc2,??_crcBufS_get
  3500  00068A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  3501  00068E  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  3502  000692  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  3503  000696  1E21               	comf	??_crcBufS_get+2,f,c
  3504  000698  1E22               	comf	??_crcBufS_get+3,f,c
  3505  00069A  4A21               	infsnz	??_crcBufS_get+2,f,c
  3506  00069C  2A22               	incf	??_crcBufS_get+3,f,c
  3507  00069E  501E               	movf	crcBufS_get@space,w,c
  3508  0006A0  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  3509  0006A2  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  3510  0006A4  5021               	movf	??_crcBufS_get+2,w,c
  3511  0006A6  2623               	addwf	??_crcBufS_get+4,f,c
  3512  0006A8  5022               	movf	??_crcBufS_get+3,w,c
  3513  0006AA  2224               	addwfc	??_crcBufS_get+5,f,c
  3514  0006AC  501F               	movf	??_crcBufS_get,w,c
  3515  0006AE  2623               	addwf	??_crcBufS_get+4,f,c
  3516  0006B0  5020               	movf	??_crcBufS_get+1,w,c
  3517  0006B2  2224               	addwfc	??_crcBufS_get+5,f,c
  3518  0006B4  5023               	movf	??_crcBufS_get+4,w,c
  3519  0006B6  241B               	addwf	crcBufS_get@_this,w,c
  3520  0006B8  6ED9               	movwf	fsr2l,c
  3521  0006BA  5024               	movf	??_crcBufS_get+5,w,c
  3522  0006BC  201C               	addwfc	crcBufS_get@_this+1,w,c
  3523  0006BE  6EDA               	movwf	fsr2h,c
  3524  0006C0  50DF               	movf	indf2,w,c
  3525  0006C2  0012               	return	
  3526  0006C4                     __end_of_crcBufS_get:
  3527                           	opt stack 0
  3528                           tblptru	equ	0xFF8
  3529                           tblptrh	equ	0xFF7
  3530                           tblptrl	equ	0xFF6
  3531                           tablat	equ	0xFF5
  3532                           prodh	equ	0xFF4
  3533                           prodl	equ	0xFF3
  3534                           intcon	equ	0xFF2
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           postinc2	equ	0xFDE
  3541                           postdec2	equ	0xFDD
  3542                           plusw2	equ	0xFDB
  3543                           fsr2h	equ	0xFDA
  3544                           fsr2l	equ	0xFD9
  3545                           status	equ	0xFD8
  3546                           
  3547 ;; *************** function _CRC8 *****************
  3548 ;; Defined at:
  3549 ;;		line 34 in file "FastTransfer.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  data            2   26[COMRAM] PTR const unsigned char 
  3552 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1419(3), receiveData@holder(3), rx_buffer(200), 
  3553 ;;		 -> ring_buffer(206), NULL(0), 
  3554 ;;  len             1   28[COMRAM] unsigned char 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;  sum             1   29[COMRAM] unsigned char 
  3557 ;;  tempI           1   31[COMRAM] unsigned char 
  3558 ;;  extract         1   30[COMRAM] unsigned char 
  3559 ;;  crc             1   32[COMRAM] unsigned char 
  3560 ;; Return value:  Size  Location     Type
  3561 ;;                  1    wreg      unsigned char 
  3562 ;; Registers used:
  3563 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3564 ;; Tracked objects:
  3565 ;;		On entry : 0/0
  3566 ;;		On exit  : 0/0
  3567 ;;		Unchanged: 0/0
  3568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3569 ;;      Params:         3       0       0       0       0       0       0
  3570 ;;      Locals:         4       0       0       0       0       0       0
  3571 ;;      Temps:          0       0       0       0       0       0       0
  3572 ;;      Totals:         7       0       0       0       0       0       0
  3573 ;;Total ram usage:        7 bytes
  3574 ;; Hardware stack levels used:    1
  3575 ;; Hardware stack levels required when called:    4
  3576 ;; This function calls:
  3577 ;;		Nothing
  3578 ;; This function is called by:
  3579 ;;		_sendData
  3580 ;;		_receiveData
  3581 ;;		_CRCcheck
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text14
  3586  000ECE                     __ptext14:
  3587                           	opt stack 0
  3588  000ECE                     _CRC8:
  3589                           	opt stack 23
  3590                           
  3591                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  3592                           
  3593                           ;incstack = 0
  3594  000ECE  0E00               	movlw	0
  3595  000ED0  6E21               	movwf	CRC8@crc,c
  3596                           
  3597                           ;FastTransfer.c: 36: while (len--) {
  3598  000ED2  D01C               	goto	l3020
  3599  000ED4                     l3004:
  3600                           
  3601                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  3602  000ED4  C01B  FFD9         	movff	CRC8@data,fsr2l
  3603  000ED8  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  3604  000EDC  50DF               	movf	indf2,w,c
  3605  000EDE  6E1F               	movwf	CRC8@extract,c
  3606  000EE0  4A1B               	infsnz	CRC8@data,f,c
  3607  000EE2  2A1C               	incf	CRC8@data+1,f,c
  3608                           
  3609                           ;FastTransfer.c: 38: unsigned char tempI;
  3610                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  3611  000EE4  0E08               	movlw	8
  3612  000EE6  6E20               	movwf	CRC8@tempI,c
  3613  000EE8  D00E               	goto	l3018
  3614  000EEA                     l3010:
  3615                           
  3616                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  3617  000EEA  5021               	movf	CRC8@crc,w,c
  3618  000EEC  181F               	xorwf	CRC8@extract,w,c
  3619  000EEE  0B01               	andlw	1
  3620  000EF0  6E1E               	movwf	CRC8@sum,c
  3621                           
  3622                           ;FastTransfer.c: 41: crc >>= 1;
  3623  000EF2  90D8               	bcf	status,0,c
  3624  000EF4  3221               	rrcf	CRC8@crc,f,c
  3625                           
  3626                           ;FastTransfer.c: 42: if (sum) {
  3627  000EF6  501E               	movf	CRC8@sum,w,c
  3628  000EF8  B4D8               	btfsc	status,2,c
  3629  000EFA  D002               	goto	l370
  3630                           
  3631                           ;FastTransfer.c: 43: crc ^= 0x8C;
  3632  000EFC  0E8C               	movlw	140
  3633  000EFE  1A21               	xorwf	CRC8@crc,f,c
  3634  000F00                     l370:
  3635                           
  3636                           ;FastTransfer.c: 44: }
  3637                           ;FastTransfer.c: 45: extract >>= 1;
  3638  000F00  90D8               	bcf	status,0,c
  3639  000F02  321F               	rrcf	CRC8@extract,f,c
  3640  000F04  0620               	decf	CRC8@tempI,f,c
  3641  000F06                     l3018:
  3642  000F06  5020               	movf	CRC8@tempI,w,c
  3643  000F08  A4D8               	btfss	status,2,c
  3644  000F0A  D7EF               	goto	l3010
  3645  000F0C                     l3020:
  3646  000F0C  061D               	decf	CRC8@len,f,c
  3647  000F0E  281D               	incf	CRC8@len,w,c
  3648  000F10  A4D8               	btfss	status,2,c
  3649  000F12  D7E0               	goto	l3004
  3650                           
  3651                           ;FastTransfer.c: 46: }
  3652                           ;FastTransfer.c: 47: }
  3653                           ;FastTransfer.c: 48: return crc;
  3654  000F14  5021               	movf	CRC8@crc,w,c
  3655  000F16  0012               	return	
  3656  000F18                     __end_of_CRC8:
  3657                           	opt stack 0
  3658                           tblptru	equ	0xFF8
  3659                           tblptrh	equ	0xFF7
  3660                           tblptrl	equ	0xFF6
  3661                           tablat	equ	0xFF5
  3662                           prodh	equ	0xFF4
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postdec1	equ	0xFE5
  3668                           fsr1l	equ	0xFE1
  3669                           indf2	equ	0xFDF
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           plusw2	equ	0xFDB
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677 ;; *************** function _SetCharger *****************
  3678 ;; Defined at:
  3679 ;;		line 44 in file "Functions.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  mode            1    wreg     unsigned char 
  3682 ;;  Current         1    0[BANK0 ] unsigned char 
  3683 ;;  Voltage         1    1[BANK0 ] unsigned char 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  mode            1    2[BANK0 ] unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3695 ;;      Params:         0       2       0       0       0       0       0
  3696 ;;      Locals:         0       1       0       0       0       0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0
  3698 ;;      Totals:         0       3       0       0       0       0       0
  3699 ;;Total ram usage:        3 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    7
  3702 ;; This function calls:
  3703 ;;		_SetMux
  3704 ;;		_printf
  3705 ;; This function is called by:
  3706 ;;		_updateComms
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           	psect	text15
  3711  000D14                     __ptext15:
  3712                           	opt stack 0
  3713  000D14                     _SetCharger:
  3714                           	opt stack 22
  3715                           
  3716                           ;incstack = 0
  3717                           ;SetCharger@mode stored from wreg
  3718  000D14  0100               	movlb	0	; () banked
  3719  000D16  6FC2               	movwf	SetCharger@mode& (0+255),b
  3720                           
  3721                           ;Functions.c: 45: if(mode == 1){
  3722  000D18  0100               	movlb	0	; () banked
  3723  000D1A  05C2               	decf	SetCharger@mode& (0+255),w,b
  3724  000D1C  A4D8               	btfss	status,2,c
  3725  000D1E  D016               	goto	l3350
  3726                           
  3727                           ; BSR set to: 0
  3728                           ;Functions.c: 47: SetMux(1);
  3729  000D20  0E01               	movlw	1
  3730  000D22  ECA9  F007         	call	_SetMux
  3731                           
  3732                           ;Functions.c: 50: ChargerData[2] = 001;
  3733  000D26  0E01               	movlw	1
  3734  000D28  0100               	movlb	0	; () banked
  3735  000D2A  6FDB               	movwf	(_ChargerData+2)& (0+255),b
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;Functions.c: 51: ChargerData[4] = 000;
  3739  000D2C  0E00               	movlw	0
  3740  000D2E  0100               	movlb	0	; () banked
  3741  000D30  6FDD               	movwf	(_ChargerData+4)& (0+255),b
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;Functions.c: 52: ChargerData[6] = 001;
  3745  000D32  0E01               	movlw	1
  3746  000D34  0100               	movlb	0	; () banked
  3747  000D36  6FDF               	movwf	(_ChargerData+6)& (0+255),b
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;Functions.c: 54: printf("%s",ChargerData);
  3751  000D38  0EFB               	movlw	low STR_1
  3752  000D3A  6E1D               	movwf	printf@f,c
  3753  000D3C  0E7F               	movlw	high STR_1
  3754  000D3E  6E1E               	movwf	printf@f+1,c
  3755  000D40  0ED9               	movlw	low _ChargerData
  3756  000D42  6E1F               	movwf	?_printf+2,c
  3757  000D44  0E00               	movlw	high _ChargerData
  3758  000D46  6E20               	movwf	?_printf+3,c
  3759  000D48  EC39  F004         	call	_printf	;wreg free
  3760  000D4C                     l3350:
  3761                           
  3762                           ;Functions.c: 55: }
  3763                           ;Functions.c: 56: if(mode == 2){
  3764  000D4C  0E02               	movlw	2
  3765  000D4E  0100               	movlb	0	; () banked
  3766  000D50  19C2               	xorwf	SetCharger@mode& (0+255),w,b
  3767  000D52  A4D8               	btfss	status,2,c
  3768  000D54  0012               	return	
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;Functions.c: 58: SetMux(1);
  3772  000D56  0E01               	movlw	1
  3773  000D58  ECA9  F007         	call	_SetMux
  3774                           
  3775                           ;Functions.c: 60: ChargerData[2] = Current;
  3776  000D5C  C0C0  F0DB         	movff	SetCharger@Current,_ChargerData+2
  3777                           
  3778                           ;Functions.c: 61: ChargerData[4] = Voltage;
  3779  000D60  C0C1  F0DD         	movff	SetCharger@Voltage,_ChargerData+4
  3780                           
  3781                           ;Functions.c: 63: ChargerData[6] = (Current + Voltage)%1,000;
  3782  000D64  0E00               	movlw	0
  3783  000D66  0100               	movlb	0	; () banked
  3784  000D68  6FDF               	movwf	(_ChargerData+6)& (0+255),b
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;Functions.c: 65: printf("%s",ChargerData);
  3788  000D6A  0EFB               	movlw	low STR_1
  3789  000D6C  6E1D               	movwf	printf@f,c
  3790  000D6E  0E7F               	movlw	high STR_1
  3791  000D70  6E1E               	movwf	printf@f+1,c
  3792  000D72  0ED9               	movlw	low _ChargerData
  3793  000D74  6E1F               	movwf	?_printf+2,c
  3794  000D76  0E00               	movlw	high _ChargerData
  3795  000D78  6E20               	movwf	?_printf+3,c
  3796  000D7A  EC39  F004         	call	_printf	;wreg free
  3797  000D7E  0012               	return	
  3798  000D80                     __end_of_SetCharger:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           postinc0	equ	0xFEE
  3808                           wreg	equ	0xFE8
  3809                           postdec1	equ	0xFE5
  3810                           fsr1l	equ	0xFE1
  3811                           indf2	equ	0xFDF
  3812                           postinc2	equ	0xFDE
  3813                           postdec2	equ	0xFDD
  3814                           plusw2	equ	0xFDB
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8
  3818                           
  3819 ;; *************** function _printf *****************
  3820 ;; Defined at:
  3821 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
  3822 ;; Parameters:    Size  Location     Type
  3823 ;;  f               2   28[COMRAM] PTR const unsigned char 
  3824 ;;		 -> STR_2(3), STR_1(3), 
  3825 ;; Auto vars:     Size  Location     Type
  3826 ;;  tmpval          4    0        struct .
  3827 ;;  cp              2   36[COMRAM] PTR const unsigned char 
  3828 ;;		 -> STR_3(7), ChargerData(9), 
  3829 ;;  ap              2   33[COMRAM] PTR void [1]
  3830 ;;		 -> ?_printf(2), 
  3831 ;;  len             2    0        unsigned int 
  3832 ;;  val             2    0        unsigned int 
  3833 ;;  c               1   35[COMRAM] char 
  3834 ;;  flag            1   32[COMRAM] unsigned char 
  3835 ;;  prec            1    0        char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  2   28[COMRAM] int 
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3845 ;;      Params:         4       0       0       0       0       0       0
  3846 ;;      Locals:         6       0       0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0
  3848 ;;      Totals:        10       0       0       0       0       0       0
  3849 ;;Total ram usage:       10 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    6
  3852 ;; This function calls:
  3853 ;;		_putch
  3854 ;; This function is called by:
  3855 ;;		_SetCharger
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           	psect	text16
  3860  000872                     __ptext16:
  3861                           	opt stack 0
  3862  000872                     _printf:
  3863                           	opt stack 22
  3864                           
  3865                           ;doprnt.c: 466: va_list ap;
  3866                           ;doprnt.c: 499: signed char c;
  3867                           ;doprnt.c: 506: signed char prec;
  3868                           ;doprnt.c: 508: unsigned char flag;
  3869                           ;doprnt.c: 523: union {
  3870                           ;doprnt.c: 524: unsigned long vd;
  3871                           ;doprnt.c: 525: double integ;
  3872                           ;doprnt.c: 526: } tmpval;
  3873                           ;doprnt.c: 528: unsigned int val;
  3874                           ;doprnt.c: 529: unsigned len;
  3875                           ;doprnt.c: 530: const char * cp;
  3876                           ;doprnt.c: 533: *ap = __va_start();
  3877                           
  3878                           ;incstack = 0
  3879  000872  0E1F               	movlw	low (?_printf+2)
  3880  000874  6E22               	movwf	printf@ap,c
  3881  000876  0E00               	movlw	high (?_printf+2)
  3882  000878  6E23               	movwf	printf@ap+1,c
  3883                           
  3884                           ;doprnt.c: 536: while(c = *f++) {
  3885  00087A  D058               	goto	l3182
  3886  00087C                     l3158:
  3887                           
  3888                           ;doprnt.c: 538: if(c != '%')
  3889  00087C  0E25               	movlw	37
  3890  00087E  1824               	xorwf	printf@c,w,c
  3891  000880  B4D8               	btfsc	status,2,c
  3892  000882  D004               	goto	l3162
  3893                           
  3894                           ;doprnt.c: 540: {
  3895                           ;doprnt.c: 541: (putch(c) );
  3896  000884  5024               	movf	printf@c,w,c
  3897  000886  EC32  F009         	call	_putch
  3898                           
  3899                           ;doprnt.c: 542: continue;
  3900  00088A  D050               	goto	l3182
  3901  00088C                     l3162:
  3902                           
  3903                           ;doprnt.c: 543: }
  3904                           ;doprnt.c: 548: flag = 0;
  3905  00088C  0E00               	movlw	0
  3906  00088E  6E21               	movwf	printf@flag,c
  3907                           
  3908                           ;doprnt.c: 635: switch(c = *f++) {
  3909  000890  D03D               	goto	l3180
  3910  000892                     l3164:
  3911                           
  3912                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  3913  000892  C022  FFD9         	movff	printf@ap,fsr2l
  3914  000896  C023  FFDA         	movff	printf@ap+1,fsr2h
  3915  00089A  CFDE F025          	movff	postinc2,printf@cp
  3916  00089E  CFDD F026          	movff	postdec2,printf@cp+1
  3917  0008A2  0E02               	movlw	2
  3918  0008A4  2622               	addwf	printf@ap,f,c
  3919  0008A6  0E00               	movlw	0
  3920  0008A8  2223               	addwfc	printf@ap+1,f,c
  3921                           
  3922                           ;doprnt.c: 740: if(!cp)
  3923  0008AA  5025               	movf	printf@cp,w,c
  3924  0008AC  1026               	iorwf	printf@cp+1,w,c
  3925  0008AE  A4D8               	btfss	status,2,c
  3926  0008B0  D019               	goto	l3176
  3927                           
  3928                           ;doprnt.c: 741: cp = "(null)";
  3929  0008B2  0EF4               	movlw	low STR_3
  3930  0008B4  6E25               	movwf	printf@cp,c
  3931  0008B6  0E7F               	movlw	high STR_3
  3932  0008B8  6E26               	movwf	printf@cp+1,c
  3933                           
  3934                           ;doprnt.c: 777: while(*cp)
  3935  0008BA  D014               	goto	l3176
  3936  0008BC                     l3172:
  3937                           
  3938                           ;doprnt.c: 778: (putch(*cp++) );
  3939  0008BC  C025  FFF6         	movff	printf@cp,tblptrl
  3940  0008C0  C026  FFF7         	movff	printf@cp+1,tblptrh
  3941  0008C4  6AF8               	clrf	tblptru,c
  3942  0008C6  0E05               	movlw	(high __ramtop+-1)
  3943  0008C8  64F7               	cpfsgt	tblptrh,c
  3944  0008CA  D003               	bra	u2147
  3945  0008CC  0008               	tblrd		*
  3946  0008CE  50F5               	movf	tablat,w,c
  3947  0008D0  D005               	bra	u2140
  3948  0008D2                     u2147:
  3949  0008D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  3950  0008D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  3951  0008DA  50EF               	movf	indf0,w,c
  3952  0008DC                     u2140:
  3953  0008DC  EC32  F009         	call	_putch
  3954  0008E0  4A25               	infsnz	printf@cp,f,c
  3955  0008E2  2A26               	incf	printf@cp+1,f,c
  3956  0008E4                     l3176:
  3957  0008E4  C025  FFF6         	movff	printf@cp,tblptrl
  3958  0008E8  C026  FFF7         	movff	printf@cp+1,tblptrh
  3959  0008EC  6AF8               	clrf	tblptru,c
  3960  0008EE  0E05               	movlw	(high __ramtop+-1)
  3961  0008F0  64F7               	cpfsgt	tblptrh,c
  3962  0008F2  D003               	bra	u2157
  3963  0008F4  0008               	tblrd		*
  3964  0008F6  50F5               	movf	tablat,w,c
  3965  0008F8  D005               	bra	u2150
  3966  0008FA                     u2157:
  3967  0008FA  CFF6 FFE9          	movff	tblptrl,fsr0l
  3968  0008FE  CFF7 FFEA          	movff	tblptrh,fsr0h
  3969  000902  50EF               	movf	indf0,w,c
  3970  000904                     u2150:
  3971  000904  0900               	iorlw	0
  3972  000906  B4D8               	btfsc	status,2,c
  3973  000908  D011               	goto	l3182
  3974  00090A  D7D8               	goto	l3172
  3975  00090C                     l3180:
  3976  00090C  C01D  FFF6         	movff	printf@f,tblptrl
  3977  000910  C01E  FFF7         	movff	printf@f+1,tblptrh
  3978  000914  4A1D               	infsnz	printf@f,f,c
  3979  000916  2A1E               	incf	printf@f+1,f,c
  3980  000918                     	if	0	;tblptru may be non-zero
  3981  000918                     	endif
  3982  000918                     	if	0	;tblptru may be non-zero
  3983  000918                     	endif
  3984  000918  0008               	tblrd		*
  3985  00091A  CFF5 F024          	movff	tablat,printf@c
  3986  00091E  5024               	movf	printf@c,w,c
  3987                           
  3988                           ; Switch size 1, requested type "space"
  3989                           ; Number of cases is 2, Range of values is 0 to 115
  3990                           ; switch strategies available:
  3991                           ; Name         Instructions Cycles
  3992                           ; simple_byte            7     4 (average)
  3993                           ;	Chosen strategy is simple_byte
  3994  000920  0A00               	xorlw	0	; case 0
  3995  000922  B4D8               	btfsc	status,2,c
  3996  000924  0012               	return	
  3997  000926  0A73               	xorlw	115	; case 115
  3998  000928  B4D8               	btfsc	status,2,c
  3999  00092A  D7B3               	goto	l3164
  4000  00092C                     l3182:
  4001  00092C  C01D  FFF6         	movff	printf@f,tblptrl
  4002  000930  C01E  FFF7         	movff	printf@f+1,tblptrh
  4003  000934  4A1D               	infsnz	printf@f,f,c
  4004  000936  2A1E               	incf	printf@f+1,f,c
  4005  000938                     	if	0	;tblptru may be non-zero
  4006  000938                     	endif
  4007  000938                     	if	0	;tblptru may be non-zero
  4008  000938                     	endif
  4009  000938  0008               	tblrd		*
  4010  00093A  CFF5 F024          	movff	tablat,printf@c
  4011  00093E  5024               	movf	printf@c,w,c
  4012  000940  B4D8               	btfsc	status,2,c
  4013  000942  0012               	return	
  4014  000944  D79B               	goto	l3158
  4015  000946                     __end_of_printf:
  4016                           	opt stack 0
  4017                           tblptru	equ	0xFF8
  4018                           tblptrh	equ	0xFF7
  4019                           tblptrl	equ	0xFF6
  4020                           tablat	equ	0xFF5
  4021                           prodh	equ	0xFF4
  4022                           prodl	equ	0xFF3
  4023                           intcon	equ	0xFF2
  4024                           indf0	equ	0xFEF
  4025                           postinc0	equ	0xFEE
  4026                           fsr0h	equ	0xFEA
  4027                           fsr0l	equ	0xFE9
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           plusw2	equ	0xFDB
  4035                           fsr2h	equ	0xFDA
  4036                           fsr2l	equ	0xFD9
  4037                           status	equ	0xFD8
  4038                           
  4039 ;; *************** function _putch *****************
  4040 ;; Defined at:
  4041 ;;		line 151 in file "mcc_generated_files/eusart2.c"
  4042 ;; Parameters:    Size  Location     Type
  4043 ;;  txData          1    wreg     unsigned char 
  4044 ;; Auto vars:     Size  Location     Type
  4045 ;;  txData          1   27[COMRAM] unsigned char 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4055 ;;      Params:         0       0       0       0       0       0       0
  4056 ;;      Locals:         1       0       0       0       0       0       0
  4057 ;;      Temps:          0       0       0       0       0       0       0
  4058 ;;      Totals:         1       0       0       0       0       0       0
  4059 ;;Total ram usage:        1 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    5
  4062 ;; This function calls:
  4063 ;;		_EUSART2_Write
  4064 ;; This function is called by:
  4065 ;;		_printf
  4066 ;; This function uses a non-reentrant model
  4067 ;;
  4068                           
  4069                           	psect	text17
  4070  001264                     __ptext17:
  4071                           	opt stack 0
  4072  001264                     _putch:
  4073                           	opt stack 22
  4074                           
  4075                           ;incstack = 0
  4076                           ;putch@txData stored from wreg
  4077  001264  6E1C               	movwf	putch@txData,c
  4078                           
  4079                           ;eusart2.c: 152: EUSART2_Write(txData);
  4080  001266  501C               	movf	putch@txData,w,c
  4081  001268  EC8C  F007         	call	_EUSART2_Write
  4082  00126C  0012               	return		;funcret
  4083  00126E                     __end_of_putch:
  4084                           	opt stack 0
  4085                           tblptru	equ	0xFF8
  4086                           tblptrh	equ	0xFF7
  4087                           tblptrl	equ	0xFF6
  4088                           tablat	equ	0xFF5
  4089                           prodh	equ	0xFF4
  4090                           prodl	equ	0xFF3
  4091                           intcon	equ	0xFF2
  4092                           indf0	equ	0xFEF
  4093                           postinc0	equ	0xFEE
  4094                           fsr0h	equ	0xFEA
  4095                           fsr0l	equ	0xFE9
  4096                           wreg	equ	0xFE8
  4097                           postdec1	equ	0xFE5
  4098                           fsr1l	equ	0xFE1
  4099                           indf2	equ	0xFDF
  4100                           postinc2	equ	0xFDE
  4101                           postdec2	equ	0xFDD
  4102                           plusw2	equ	0xFDB
  4103                           fsr2h	equ	0xFDA
  4104                           fsr2l	equ	0xFD9
  4105                           status	equ	0xFD8
  4106                           
  4107 ;; *************** function _EUSART2_Write *****************
  4108 ;; Defined at:
  4109 ;;		line 130 in file "mcc_generated_files/eusart2.c"
  4110 ;; Parameters:    Size  Location     Type
  4111 ;;  txData          1    wreg     unsigned char 
  4112 ;; Auto vars:     Size  Location     Type
  4113 ;;  txData          1   26[COMRAM] unsigned char 
  4114 ;; Return value:  Size  Location     Type
  4115 ;;                  1    wreg      void 
  4116 ;; Registers used:
  4117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4118 ;; Tracked objects:
  4119 ;;		On entry : 0/0
  4120 ;;		On exit  : 0/0
  4121 ;;		Unchanged: 0/0
  4122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4123 ;;      Params:         0       0       0       0       0       0       0
  4124 ;;      Locals:         1       0       0       0       0       0       0
  4125 ;;      Temps:          0       0       0       0       0       0       0
  4126 ;;      Totals:         1       0       0       0       0       0       0
  4127 ;;Total ram usage:        1 bytes
  4128 ;; Hardware stack levels used:    1
  4129 ;; Hardware stack levels required when called:    4
  4130 ;; This function calls:
  4131 ;;		Nothing
  4132 ;; This function is called by:
  4133 ;;		_putch
  4134 ;; This function uses a non-reentrant model
  4135 ;;
  4136                           
  4137                           	psect	text18
  4138  000F18                     __ptext18:
  4139                           	opt stack 0
  4140  000F18                     _EUSART2_Write:
  4141                           	opt stack 22
  4142                           
  4143                           ;incstack = 0
  4144                           ;EUSART2_Write@txData stored from wreg
  4145  000F18  6E1B               	movwf	EUSART2_Write@txData,c
  4146  000F1A                     l2976:
  4147  000F1A  5043               	movf	_eusart2TxBufferRemaining,w,c	;volatile
  4148  000F1C  B4D8               	btfsc	status,2,c
  4149  000F1E  D7FD               	goto	l2976
  4150                           
  4151                           ;eusart2.c: 132: }
  4152                           ;eusart2.c: 134: if (0 == PIE3bits.TX2IE) {
  4153  000F20  B8A3               	btfsc	4003,4,c	;volatile
  4154  000F22  D003               	goto	l85
  4155                           
  4156                           ;eusart2.c: 135: TXREG2 = txData;
  4157  000F24  C01B  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  4158                           
  4159                           ;eusart2.c: 136: } else {
  4160  000F28  D012               	goto	l2990
  4161  000F2A                     l85:
  4162                           
  4163                           ;eusart2.c: 137: PIE3bits.TX2IE = 0;
  4164  000F2A  98A3               	bcf	4003,4,c	;volatile
  4165                           
  4166                           ;eusart2.c: 138: eusart2TxBuffer[eusart2TxHead++] = txData;
  4167  000F2C  5038               	movf	_eusart2TxHead,w,c
  4168  000F2E  0D01               	mullw	1
  4169  000F30  0E90               	movlw	low _eusart2TxBuffer
  4170  000F32  24F3               	addwf	prodl,w,c
  4171  000F34  6ED9               	movwf	fsr2l,c
  4172  000F36  0E00               	movlw	high _eusart2TxBuffer
  4173  000F38  20F4               	addwfc	prodh,w,c
  4174  000F3A  6EDA               	movwf	fsr2h,c
  4175  000F3C  C01B  FFDF         	movff	EUSART2_Write@txData,indf2
  4176  000F40  2A38               	incf	_eusart2TxHead,f,c
  4177                           
  4178                           ;eusart2.c: 139: if (sizeof (eusart2TxBuffer) <= eusart2TxHead) {
  4179  000F42  0E07               	movlw	7
  4180  000F44  6438               	cpfsgt	_eusart2TxHead,c
  4181  000F46  D002               	goto	l2988
  4182                           
  4183                           ;eusart2.c: 140: eusart2TxHead = 0;
  4184  000F48  0E00               	movlw	0
  4185  000F4A  6E38               	movwf	_eusart2TxHead,c
  4186  000F4C                     l2988:
  4187                           
  4188                           ;eusart2.c: 141: }
  4189                           ;eusart2.c: 142: eusart2TxBufferRemaining--;
  4190  000F4C  0643               	decf	_eusart2TxBufferRemaining,f,c	;volatile
  4191  000F4E                     l2990:
  4192                           
  4193                           ;eusart2.c: 143: }
  4194                           ;eusart2.c: 144: PIE3bits.TX2IE = 1;
  4195  000F4E  88A3               	bsf	4003,4,c	;volatile
  4196  000F50  0012               	return		;funcret
  4197  000F52                     __end_of_EUSART2_Write:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           indf0	equ	0xFEF
  4207                           postinc0	equ	0xFEE
  4208                           fsr0h	equ	0xFEA
  4209                           fsr0l	equ	0xFE9
  4210                           wreg	equ	0xFE8
  4211                           postdec1	equ	0xFE5
  4212                           fsr1l	equ	0xFE1
  4213                           indf2	equ	0xFDF
  4214                           postinc2	equ	0xFDE
  4215                           postdec2	equ	0xFDD
  4216                           plusw2	equ	0xFDB
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _SetMux *****************
  4222 ;; Defined at:
  4223 ;;		line 69 in file "Functions.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;  channel         1    wreg     unsigned char 
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;  channel         1   26[COMRAM] unsigned char 
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  1    wreg      void 
  4230 ;; Registers used:
  4231 ;;		wreg, status,2, status,0
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4237 ;;      Params:         0       0       0       0       0       0       0
  4238 ;;      Locals:         1       0       0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0
  4240 ;;      Totals:         1       0       0       0       0       0       0
  4241 ;;Total ram usage:        1 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    4
  4244 ;; This function calls:
  4245 ;;		Nothing
  4246 ;; This function is called by:
  4247 ;;		_SetCharger
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text19
  4252  000F52                     __ptext19:
  4253                           	opt stack 0
  4254  000F52                     _SetMux:
  4255                           	opt stack 24
  4256                           
  4257                           ;incstack = 0
  4258                           ;SetMux@channel stored from wreg
  4259  000F52  6E1B               	movwf	SetMux@channel,c
  4260                           
  4261                           ;Functions.c: 70: switch (channel){
  4262  000F54  D00C               	goto	l3154
  4263  000F56                     l633:
  4264  000F56  908A               	bcf	3978,0,c	;volatile
  4265                           
  4266                           ;Functions.c: 73: do { LATB1 = 0; } while(0);
  4267  000F58  928A               	bcf	3978,1,c	;volatile
  4268                           
  4269                           ;Functions.c: 74: break;
  4270  000F5A  0012               	return	
  4271  000F5C                     l639:
  4272  000F5C  808A               	bsf	3978,0,c	;volatile
  4273                           
  4274                           ;Functions.c: 77: do { LATB1 = 0; } while(0);
  4275  000F5E  928A               	bcf	3978,1,c	;volatile
  4276                           
  4277                           ;Functions.c: 78: break;
  4278  000F60  0012               	return	
  4279  000F62                     l644:
  4280  000F62  908A               	bcf	3978,0,c	;volatile
  4281                           
  4282                           ;Functions.c: 81: do { LATB1 = 1; } while(0);
  4283  000F64  828A               	bsf	3978,1,c	;volatile
  4284                           
  4285                           ;Functions.c: 82: break;
  4286  000F66  0012               	return	
  4287  000F68                     l649:
  4288  000F68  808A               	bsf	3978,0,c	;volatile
  4289                           
  4290                           ;Functions.c: 85: do { LATB1 = 1; } while(0);
  4291  000F6A  828A               	bsf	3978,1,c	;volatile
  4292                           
  4293                           ;Functions.c: 90: }
  4294                           
  4295                           ;Functions.c: 89: break;
  4296                           
  4297                           ;Functions.c: 87: default:
  4298                           
  4299                           ;Functions.c: 86: break;
  4300  000F6C  0012               	return	
  4301  000F6E                     l3154:
  4302  000F6E  501B               	movf	SetMux@channel,w,c
  4303                           
  4304                           ; Switch size 1, requested type "space"
  4305                           ; Number of cases is 4, Range of values is 1 to 4
  4306                           ; switch strategies available:
  4307                           ; Name         Instructions Cycles
  4308                           ; simple_byte           13     7 (average)
  4309                           ;	Chosen strategy is simple_byte
  4310  000F70  0A01               	xorlw	1	; case 1
  4311  000F72  B4D8               	btfsc	status,2,c
  4312  000F74  D7F0               	goto	l633
  4313  000F76  0A03               	xorlw	3	; case 2
  4314  000F78  B4D8               	btfsc	status,2,c
  4315  000F7A  D7F0               	goto	l639
  4316  000F7C  0A01               	xorlw	1	; case 3
  4317  000F7E  B4D8               	btfsc	status,2,c
  4318  000F80  D7F0               	goto	l644
  4319  000F82  0A07               	xorlw	7	; case 4
  4320  000F84  A4D8               	btfss	status,2,c
  4321  000F86  0012               	return	
  4322  000F88  D7EF               	goto	l649
  4323  000F8A                     __end_of_SetMux:
  4324                           	opt stack 0
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           intcon	equ	0xFF2
  4332                           indf0	equ	0xFEF
  4333                           postinc0	equ	0xFEE
  4334                           fsr0h	equ	0xFEA
  4335                           fsr0l	equ	0xFE9
  4336                           wreg	equ	0xFE8
  4337                           postdec1	equ	0xFE5
  4338                           fsr1l	equ	0xFE1
  4339                           indf2	equ	0xFDF
  4340                           postinc2	equ	0xFDE
  4341                           postdec2	equ	0xFDD
  4342                           plusw2	equ	0xFDB
  4343                           fsr2h	equ	0xFDA
  4344                           fsr2l	equ	0xFD9
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _Precharge *****************
  4348 ;; Defined at:
  4349 ;;		line 18 in file "Functions.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  OnOff           1    wreg     unsigned char 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  OnOff           1    0[BANK0 ] unsigned char 
  4354 ;;  i               2    3[BANK0 ] int 
  4355 ;;  i               2    1[BANK0 ] int 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;                  1    wreg      void 
  4358 ;; Registers used:
  4359 ;;		wreg, status,2, status,0, cstack
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4365 ;;      Params:         0       0       0       0       0       0       0
  4366 ;;      Locals:         0       5       0       0       0       0       0
  4367 ;;      Temps:          0       0       0       0       0       0       0
  4368 ;;      Totals:         0       5       0       0       0       0       0
  4369 ;;Total ram usage:        5 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    5
  4372 ;; This function calls:
  4373 ;;		_Delay
  4374 ;; This function is called by:
  4375 ;;		_updateComms
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text20
  4380  000946                     __ptext20:
  4381                           	opt stack 0
  4382  000946                     _Precharge:
  4383                           	opt stack 24
  4384                           
  4385                           ;incstack = 0
  4386                           ;Precharge@OnOff stored from wreg
  4387  000946  0100               	movlb	0	; () banked
  4388  000948  6FC0               	movwf	Precharge@OnOff& (0+255),b
  4389                           
  4390                           ;Functions.c: 19: if(OnOff){
  4391  00094A  0100               	movlb	0	; () banked
  4392  00094C  51C0               	movf	Precharge@OnOff& (0+255),w,b
  4393  00094E  0100               	movlb	0	; () banked
  4394  000950  B4D8               	btfsc	status,2,c
  4395  000952  D024               	goto	l611
  4396                           
  4397                           ; BSR set to: 0
  4398                           
  4399                           ;Functions.c: 20: do { LATC1 = 1; } while(0);
  4400  000954  828B               	bsf	3979,1,c	;volatile
  4401                           
  4402                           ; BSR set to: 0
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;Functions.c: 21: do { LATB3 = 1; } while(0);
  4406  000956  868A               	bsf	3978,3,c	;volatile
  4407                           
  4408                           ; BSR set to: 0
  4409                           ;Functions.c: 22: for(int i = 0;i<5;i++){
  4410                           
  4411                           ; BSR set to: 0
  4412  000958  0E00               	movlw	0
  4413  00095A  0100               	movlb	0	; () banked
  4414  00095C  6FC2               	movwf	(Precharge@i+1)& (0+255),b
  4415  00095E  0E00               	movlw	0
  4416  000960  6FC1               	movwf	Precharge@i& (0+255),b
  4417  000962                     l3316:
  4418                           
  4419                           ; BSR set to: 0
  4420  000962  0100               	movlb	0	; () banked
  4421  000964  BFC2               	btfsc	(Precharge@i+1)& (0+255),7,b
  4422  000966  D008               	goto	l3320
  4423  000968  0100               	movlb	0	; () banked
  4424  00096A  51C2               	movf	(Precharge@i+1)& (0+255),w,b
  4425  00096C  E113               	bnz	l604
  4426  00096E  0E05               	movlw	5
  4427  000970  0100               	movlb	0	; () banked
  4428  000972  5DC1               	subwf	Precharge@i& (0+255),w,b
  4429  000974  B0D8               	btfsc	status,0,c
  4430  000976  D00E               	goto	l604
  4431  000978                     l3320:
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;Functions.c: 23: Delay(1000);
  4435  000978  0EE8               	movlw	232
  4436  00097A  6E1B               	movwf	Delay@wait,c
  4437  00097C  0E03               	movlw	3
  4438  00097E  6E1C               	movwf	Delay@wait+1,c
  4439  000980  0E00               	movlw	0
  4440  000982  6E1D               	movwf	Delay@wait+2,c
  4441  000984  0E00               	movlw	0
  4442  000986  6E1E               	movwf	Delay@wait+3,c
  4443  000988  EC1B  F007         	call	_Delay	;wreg free
  4444  00098C  0100               	movlb	0	; () banked
  4445  00098E  4BC1               	infsnz	Precharge@i& (0+255),f,b
  4446  000990  2BC2               	incf	(Precharge@i+1)& (0+255),f,b
  4447  000992  D7E7               	goto	l3316
  4448  000994                     l604:
  4449                           
  4450                           ; BSR set to: 0
  4451  000994  888A               	bsf	3978,4,c	;volatile
  4452                           
  4453                           ; BSR set to: 0
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;Functions.c: 26: do { LATC0 = 1; } while(0);
  4457  000996  808B               	bsf	3979,0,c	;volatile
  4458                           
  4459                           ; BSR set to: 0
  4460                           
  4461                           ; BSR set to: 0
  4462                           ;Functions.c: 27: do { LATB5 = 1; } while(0);
  4463  000998  8A8A               	bsf	3978,5,c	;volatile
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;Functions.c: 28: }
  4467  00099A  0012               	return	
  4468  00099C                     l611:
  4469                           
  4470                           ; BSR set to: 0
  4471  00099C  988A               	bcf	3978,4,c	;volatile
  4472                           
  4473                           ; BSR set to: 0
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;Functions.c: 32: do { LATB3 = 0; } while(0);
  4477  00099E  968A               	bcf	3978,3,c	;volatile
  4478                           
  4479                           ; BSR set to: 0
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;Functions.c: 33: do { LATC0 = 0; } while(0);
  4483  0009A0  908B               	bcf	3979,0,c	;volatile
  4484                           
  4485                           ; BSR set to: 0
  4486                           ;Functions.c: 34: for(int i = 0;i<5;i++){
  4487                           
  4488                           ; BSR set to: 0
  4489  0009A2  0E00               	movlw	0
  4490  0009A4  0100               	movlb	0	; () banked
  4491  0009A6  6FC4               	movwf	(Precharge@i_1699+1)& (0+255),b
  4492  0009A8  0E00               	movlw	0
  4493  0009AA  6FC3               	movwf	Precharge@i_1699& (0+255),b
  4494  0009AC                     l3328:
  4495                           
  4496                           ; BSR set to: 0
  4497  0009AC  0100               	movlb	0	; () banked
  4498  0009AE  BFC4               	btfsc	(Precharge@i_1699+1)& (0+255),7,b
  4499  0009B0  D008               	goto	l3332
  4500  0009B2  0100               	movlb	0	; () banked
  4501  0009B4  51C4               	movf	(Precharge@i_1699+1)& (0+255),w,b
  4502  0009B6  E113               	bnz	l619
  4503  0009B8  0E05               	movlw	5
  4504  0009BA  0100               	movlb	0	; () banked
  4505  0009BC  5DC3               	subwf	Precharge@i_1699& (0+255),w,b
  4506  0009BE  B0D8               	btfsc	status,0,c
  4507  0009C0  D00E               	goto	l619
  4508  0009C2                     l3332:
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;Functions.c: 35: Delay(1000);
  4512  0009C2  0EE8               	movlw	232
  4513  0009C4  6E1B               	movwf	Delay@wait,c
  4514  0009C6  0E03               	movlw	3
  4515  0009C8  6E1C               	movwf	Delay@wait+1,c
  4516  0009CA  0E00               	movlw	0
  4517  0009CC  6E1D               	movwf	Delay@wait+2,c
  4518  0009CE  0E00               	movlw	0
  4519  0009D0  6E1E               	movwf	Delay@wait+3,c
  4520  0009D2  EC1B  F007         	call	_Delay	;wreg free
  4521  0009D6  0100               	movlb	0	; () banked
  4522  0009D8  4BC3               	infsnz	Precharge@i_1699& (0+255),f,b
  4523  0009DA  2BC4               	incf	(Precharge@i_1699+1)& (0+255),f,b
  4524  0009DC  D7E7               	goto	l3328
  4525  0009DE                     l619:
  4526                           
  4527                           ; BSR set to: 0
  4528  0009DE  928B               	bcf	3979,1,c	;volatile
  4529                           
  4530                           ; BSR set to: 0
  4531                           
  4532                           ; BSR set to: 0
  4533                           ;Functions.c: 38: do { LATB5 = 0; } while(0);
  4534  0009E0  9A8A               	bcf	3978,5,c	;volatile
  4535                           
  4536                           ; BSR set to: 0
  4537  0009E2  0012               	return	
  4538  0009E4                     __end_of_Precharge:
  4539                           	opt stack 0
  4540                           tblptru	equ	0xFF8
  4541                           tblptrh	equ	0xFF7
  4542                           tblptrl	equ	0xFF6
  4543                           tablat	equ	0xFF5
  4544                           prodh	equ	0xFF4
  4545                           prodl	equ	0xFF3
  4546                           intcon	equ	0xFF2
  4547                           indf0	equ	0xFEF
  4548                           postinc0	equ	0xFEE
  4549                           fsr0h	equ	0xFEA
  4550                           fsr0l	equ	0xFE9
  4551                           wreg	equ	0xFE8
  4552                           postdec1	equ	0xFE5
  4553                           fsr1l	equ	0xFE1
  4554                           indf2	equ	0xFDF
  4555                           postinc2	equ	0xFDE
  4556                           postdec2	equ	0xFDD
  4557                           plusw2	equ	0xFDB
  4558                           fsr2h	equ	0xFDA
  4559                           fsr2l	equ	0xFD9
  4560                           status	equ	0xFD8
  4561                           
  4562 ;; *************** function _Delay *****************
  4563 ;; Defined at:
  4564 ;;		line 11 in file "Functions.c"
  4565 ;; Parameters:    Size  Location     Type
  4566 ;;  wait            4   26[COMRAM] long 
  4567 ;; Auto vars:     Size  Location     Type
  4568 ;;  i               4   31[COMRAM] long 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, status,2, status,0
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4578 ;;      Params:         4       0       0       0       0       0       0
  4579 ;;      Locals:         4       0       0       0       0       0       0
  4580 ;;      Temps:          1       0       0       0       0       0       0
  4581 ;;      Totals:         9       0       0       0       0       0       0
  4582 ;;Total ram usage:        9 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    4
  4585 ;; This function calls:
  4586 ;;		Nothing
  4587 ;; This function is called by:
  4588 ;;		_main
  4589 ;;		_respondECU
  4590 ;;		_Precharge
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text21
  4595  000E36                     __ptext21:
  4596                           	opt stack 0
  4597  000E36                     _Delay:
  4598                           	opt stack 24
  4599                           
  4600                           ;Functions.c: 12: long int i = 0;
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;incstack = 0
  4604  000E36  0E00               	movlw	0
  4605  000E38  6E20               	movwf	Delay@i,c
  4606  000E3A  0E00               	movlw	0
  4607  000E3C  6E21               	movwf	Delay@i+1,c
  4608  000E3E  0E00               	movlw	0
  4609  000E40  6E22               	movwf	Delay@i+2,c
  4610  000E42  0E00               	movlw	0
  4611  000E44  6E23               	movwf	Delay@i+3,c
  4612                           
  4613                           ;Functions.c: 13: for (; wait > i; i++) {
  4614  000E46  D00E               	goto	l3102
  4615  000E48                     l3098:
  4616                           
  4617                           ;Functions.c: 14: _delay((unsigned long)((1)*(16000000/4000.0)));
  4618  000E48  0E06               	movlw	6
  4619  000E4A  6E1F               	movwf	??_Delay& (0+255),c
  4620  000E4C  0E30               	movlw	48
  4621  000E4E                     u2557:
  4622  000E4E  2EE8               	decfsz	wreg,f,c
  4623  000E50  D7FE               	goto	u2557
  4624  000E52  2E1F               	decfsz	??_Delay& (0+255),f,c
  4625  000E54  D7FC               	goto	u2557
  4626  000E56  D000               	nop2	
  4627  000E58  0E01               	movlw	1
  4628  000E5A  2620               	addwf	Delay@i,f,c
  4629  000E5C  0E00               	movlw	0
  4630  000E5E  2221               	addwfc	Delay@i+1,f,c
  4631  000E60  2222               	addwfc	Delay@i+2,f,c
  4632  000E62  2223               	addwfc	Delay@i+3,f,c
  4633  000E64                     l3102:
  4634  000E64  501B               	movf	Delay@wait,w,c
  4635  000E66  5C20               	subwf	Delay@i,w,c
  4636  000E68  501C               	movf	Delay@wait+1,w,c
  4637  000E6A  5821               	subwfb	Delay@i+1,w,c
  4638  000E6C  501D               	movf	Delay@wait+2,w,c
  4639  000E6E  5822               	subwfb	Delay@i+2,w,c
  4640  000E70  5023               	movf	Delay@i+3,w,c
  4641  000E72  0A80               	xorlw	128
  4642  000E74  6E1F               	movwf	??_Delay& (0+255),c
  4643  000E76  501E               	movf	Delay@wait+3,w,c
  4644  000E78  0A80               	xorlw	128
  4645  000E7A  581F               	subwfb	??_Delay& (0+255),w,c
  4646  000E7C  B0D8               	btfsc	status,0,c
  4647  000E7E  0012               	return	
  4648  000E80  D7E3               	goto	l3098
  4649  000E82                     __end_of_Delay:
  4650                           	opt stack 0
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           prodh	equ	0xFF4
  4656                           prodl	equ	0xFF3
  4657                           intcon	equ	0xFF2
  4658                           indf0	equ	0xFEF
  4659                           postinc0	equ	0xFEE
  4660                           fsr0h	equ	0xFEA
  4661                           fsr0l	equ	0xFE9
  4662                           wreg	equ	0xFE8
  4663                           postdec1	equ	0xFE5
  4664                           fsr1l	equ	0xFE1
  4665                           indf2	equ	0xFDF
  4666                           postinc2	equ	0xFDE
  4667                           postdec2	equ	0xFDD
  4668                           plusw2	equ	0xFDB
  4669                           fsr2h	equ	0xFDA
  4670                           fsr2l	equ	0xFD9
  4671                           status	equ	0xFD8
  4672                           
  4673 ;; *************** function _gotoXy *****************
  4674 ;; Defined at:
  4675 ;;		line 37 in file "NokiaLCD.c"
  4676 ;; Parameters:    Size  Location     Type
  4677 ;;  x               1    wreg     unsigned char 
  4678 ;;  y               1   27[COMRAM] unsigned char 
  4679 ;; Auto vars:     Size  Location     Type
  4680 ;;  x               1   28[COMRAM] unsigned char 
  4681 ;; Return value:  Size  Location     Type
  4682 ;;                  1    wreg      void 
  4683 ;; Registers used:
  4684 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4685 ;; Tracked objects:
  4686 ;;		On entry : 0/0
  4687 ;;		On exit  : 0/0
  4688 ;;		Unchanged: 0/0
  4689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4690 ;;      Params:         1       0       0       0       0       0       0
  4691 ;;      Locals:         1       0       0       0       0       0       0
  4692 ;;      Temps:          0       0       0       0       0       0       0
  4693 ;;      Totals:         2       0       0       0       0       0       0
  4694 ;;Total ram usage:        2 bytes
  4695 ;; Hardware stack levels used:    1
  4696 ;; Hardware stack levels required when called:    5
  4697 ;; This function calls:
  4698 ;;		_SPI2_Exchange8bit
  4699 ;; This function is called by:
  4700 ;;		_main
  4701 ;; This function uses a non-reentrant model
  4702 ;;
  4703                           
  4704                           	psect	text22
  4705  001198                     __ptext22:
  4706                           	opt stack 0
  4707  001198                     _gotoXy:
  4708                           	opt stack 25
  4709                           
  4710                           ;incstack = 0
  4711                           ;gotoXy@x stored from wreg
  4712  001198  6E1D               	movwf	gotoXy@x,c
  4713                           
  4714                           ;NokiaLCD.c: 38: do { LATD3 = 0; } while(0);
  4715  00119A  968C               	bcf	3980,3,c	;volatile
  4716                           
  4717                           ;NokiaLCD.c: 39: y=y|0x40;
  4718  00119C  501C               	movf	gotoXy@y,w,c
  4719  00119E  0940               	iorlw	64
  4720  0011A0  6E1C               	movwf	gotoXy@y,c
  4721                           
  4722                           ;NokiaLCD.c: 40: SPI2_Exchange8bit(y);
  4723  0011A2  501C               	movf	gotoXy@y,w,c
  4724  0011A4  EC1D  F009         	call	_SPI2_Exchange8bit
  4725                           
  4726                           ;NokiaLCD.c: 41: x=(x*6)|0x80;
  4727  0011A8  501D               	movf	gotoXy@x,w,c
  4728  0011AA  0D06               	mullw	6
  4729  0011AC  50F3               	movf	prodl,w,c
  4730  0011AE  0980               	iorlw	128
  4731  0011B0  6E1D               	movwf	gotoXy@x,c
  4732                           
  4733                           ;NokiaLCD.c: 42: SPI2_Exchange8bit(x);
  4734  0011B2  501D               	movf	gotoXy@x,w,c
  4735  0011B4  EC1D  F009         	call	_SPI2_Exchange8bit
  4736                           
  4737                           ;NokiaLCD.c: 43: do { LATD3 = 1; } while(0);
  4738  0011B8  868C               	bsf	3980,3,c	;volatile
  4739  0011BA  0012               	return	
  4740  0011BC                     __end_of_gotoXy:
  4741                           	opt stack 0
  4742                           tblptru	equ	0xFF8
  4743                           tblptrh	equ	0xFF7
  4744                           tblptrl	equ	0xFF6
  4745                           tablat	equ	0xFF5
  4746                           prodh	equ	0xFF4
  4747                           prodl	equ	0xFF3
  4748                           intcon	equ	0xFF2
  4749                           indf0	equ	0xFEF
  4750                           postinc0	equ	0xFEE
  4751                           fsr0h	equ	0xFEA
  4752                           fsr0l	equ	0xFE9
  4753                           wreg	equ	0xFE8
  4754                           postdec1	equ	0xFE5
  4755                           fsr1l	equ	0xFE1
  4756                           indf2	equ	0xFDF
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           plusw2	equ	0xFDB
  4760                           fsr2h	equ	0xFDA
  4761                           fsr2l	equ	0xFD9
  4762                           status	equ	0xFD8
  4763                           
  4764 ;; *************** function _SYSTEM_Initialize *****************
  4765 ;; Defined at:
  4766 ;;		line 112 in file "mcc_generated_files/mcc.c"
  4767 ;; Parameters:    Size  Location     Type
  4768 ;;		None
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;		None
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  1    wreg      void 
  4773 ;; Registers used:
  4774 ;;		wreg, status,2, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4780 ;;      Params:         0       0       0       0       0       0       0
  4781 ;;      Locals:         0       0       0       0       0       0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0
  4783 ;;      Totals:         0       0       0       0       0       0       0
  4784 ;;Total ram usage:        0 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    6
  4787 ;; This function calls:
  4788 ;;		_EUSART2_Initialize
  4789 ;;		_INTERRUPT_Initialize
  4790 ;;		_OSCILLATOR_Initialize
  4791 ;;		_PIN_MANAGER_Initialize
  4792 ;;		_TMR0_Initialize
  4793 ;; This function is called by:
  4794 ;;		_main
  4795 ;; This function uses a non-reentrant model
  4796 ;;
  4797                           
  4798                           	psect	text23
  4799  00120E                     __ptext23:
  4800                           	opt stack 0
  4801  00120E                     _SYSTEM_Initialize:
  4802                           	opt stack 24
  4803                           
  4804                           ;mcc.c: 113: OSCILLATOR_Initialize();
  4805                           
  4806                           ;incstack = 0
  4807  00120E  EC25  F009         	call	_OSCILLATOR_Initialize	;wreg free
  4808                           
  4809                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  4810  001212  EC41  F007         	call	_PIN_MANAGER_Initialize	;wreg free
  4811                           
  4812                           ;mcc.c: 115: INTERRUPT_Initialize();
  4813  001216  EC2C  F009         	call	_INTERRUPT_Initialize	;wreg free
  4814                           
  4815                           ;mcc.c: 117: EUSART2_Initialize();
  4816  00121A  ECC5  F007         	call	_EUSART2_Initialize	;wreg free
  4817                           
  4818                           ;mcc.c: 118: TMR0_Initialize();
  4819  00121E  ECFB  F008         	call	_TMR0_Initialize	;wreg free
  4820  001222  0012               	return		;funcret
  4821  001224                     __end_of_SYSTEM_Initialize:
  4822                           	opt stack 0
  4823                           tblptru	equ	0xFF8
  4824                           tblptrh	equ	0xFF7
  4825                           tblptrl	equ	0xFF6
  4826                           tablat	equ	0xFF5
  4827                           prodh	equ	0xFF4
  4828                           prodl	equ	0xFF3
  4829                           intcon	equ	0xFF2
  4830                           indf0	equ	0xFEF
  4831                           postinc0	equ	0xFEE
  4832                           fsr0h	equ	0xFEA
  4833                           fsr0l	equ	0xFE9
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           plusw2	equ	0xFDB
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845 ;; *************** function _TMR0_Initialize *****************
  4846 ;; Defined at:
  4847 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;		None
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;		None
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, cstack
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4861 ;;      Params:         0       0       0       0       0       0       0
  4862 ;;      Locals:         0       0       0       0       0       0       0
  4863 ;;      Temps:          0       0       0       0       0       0       0
  4864 ;;      Totals:         0       0       0       0       0       0       0
  4865 ;;Total ram usage:        0 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    5
  4868 ;; This function calls:
  4869 ;;		_TMR0_StartTimer
  4870 ;; This function is called by:
  4871 ;;		_SYSTEM_Initialize
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text24
  4876  0011F6                     __ptext24:
  4877                           	opt stack 0
  4878  0011F6                     _TMR0_Initialize:
  4879                           	opt stack 24
  4880                           
  4881                           ;tmr0.c: 68: T0CON = 0x91;
  4882                           
  4883                           ;incstack = 0
  4884  0011F6  0E91               	movlw	145
  4885  0011F8  6ED5               	movwf	4053,c	;volatile
  4886                           
  4887                           ;tmr0.c: 71: TMR0H = 0x0A;
  4888  0011FA  0E0A               	movlw	10
  4889  0011FC  6ED7               	movwf	4055,c	;volatile
  4890                           
  4891                           ;tmr0.c: 74: TMR0L = 0xFF;
  4892  0011FE  68D6               	setf	4054,c	;volatile
  4893                           
  4894                           ;tmr0.c: 77: timer0ReloadVal16bit = 2815;
  4895  001200  0E0A               	movlw	10
  4896  001202  6E42               	movwf	_timer0ReloadVal16bit+1,c	;volatile
  4897  001204  6841               	setf	_timer0ReloadVal16bit,c	;volatile
  4898                           
  4899                           ;tmr0.c: 80: INTCONbits.TMR0IF = 0;
  4900  001206  94F2               	bcf	intcon,2,c	;volatile
  4901                           
  4902                           ;tmr0.c: 83: TMR0_StartTimer();
  4903  001208  EC3C  F009         	call	_TMR0_StartTimer	;wreg free
  4904  00120C  0012               	return		;funcret
  4905  00120E                     __end_of_TMR0_Initialize:
  4906                           	opt stack 0
  4907                           tblptru	equ	0xFF8
  4908                           tblptrh	equ	0xFF7
  4909                           tblptrl	equ	0xFF6
  4910                           tablat	equ	0xFF5
  4911                           prodh	equ	0xFF4
  4912                           prodl	equ	0xFF3
  4913                           intcon	equ	0xFF2
  4914                           indf0	equ	0xFEF
  4915                           postinc0	equ	0xFEE
  4916                           fsr0h	equ	0xFEA
  4917                           fsr0l	equ	0xFE9
  4918                           wreg	equ	0xFE8
  4919                           postdec1	equ	0xFE5
  4920                           fsr1l	equ	0xFE1
  4921                           indf2	equ	0xFDF
  4922                           postinc2	equ	0xFDE
  4923                           postdec2	equ	0xFDD
  4924                           plusw2	equ	0xFDB
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function _TMR0_StartTimer *****************
  4930 ;; Defined at:
  4931 ;;		line 86 in file "mcc_generated_files/tmr0.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;		None
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;		None
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  1    wreg      void 
  4938 ;; Registers used:
  4939 ;;		None
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4945 ;;      Params:         0       0       0       0       0       0       0
  4946 ;;      Locals:         0       0       0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0
  4948 ;;      Totals:         0       0       0       0       0       0       0
  4949 ;;Total ram usage:        0 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    4
  4952 ;; This function calls:
  4953 ;;		Nothing
  4954 ;; This function is called by:
  4955 ;;		_TMR0_Initialize
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text25
  4960  001278                     __ptext25:
  4961                           	opt stack 0
  4962  001278                     _TMR0_StartTimer:
  4963                           	opt stack 24
  4964                           
  4965                           ;tmr0.c: 88: T0CONbits.TMR0ON = 1;
  4966                           
  4967                           ;incstack = 0
  4968  001278  8ED5               	bsf	4053,7,c	;volatile
  4969  00127A  0012               	return		;funcret
  4970  00127C                     __end_of_TMR0_StartTimer:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           prodh	equ	0xFF4
  4977                           prodl	equ	0xFF3
  4978                           intcon	equ	0xFF2
  4979                           indf0	equ	0xFEF
  4980                           postinc0	equ	0xFEE
  4981                           fsr0h	equ	0xFEA
  4982                           fsr0l	equ	0xFE9
  4983                           wreg	equ	0xFE8
  4984                           postdec1	equ	0xFE5
  4985                           fsr1l	equ	0xFE1
  4986                           indf2	equ	0xFDF
  4987                           postinc2	equ	0xFDE
  4988                           postdec2	equ	0xFDD
  4989                           plusw2	equ	0xFDB
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _PIN_MANAGER_Initialize *****************
  4995 ;; Defined at:
  4996 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, status,2
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5010 ;;      Params:         0       0       0       0       0       0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0
  5012 ;;      Temps:          0       0       0       0       0       0       0
  5013 ;;      Totals:         0       0       0       0       0       0       0
  5014 ;;Total ram usage:        0 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    4
  5017 ;; This function calls:
  5018 ;;		Nothing
  5019 ;; This function is called by:
  5020 ;;		_SYSTEM_Initialize
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text26
  5025  000E82                     __ptext26:
  5026                           	opt stack 0
  5027  000E82                     _PIN_MANAGER_Initialize:
  5028                           	opt stack 25
  5029                           
  5030                           ;pin_manager.c: 51: LATA = 0x00;
  5031                           
  5032                           ;incstack = 0
  5033  000E82  0E00               	movlw	0
  5034  000E84  6E89               	movwf	3977,c	;volatile
  5035                           
  5036                           ;pin_manager.c: 52: TRISA = 0x07;
  5037  000E86  0E07               	movlw	7
  5038  000E88  6E92               	movwf	3986,c	;volatile
  5039                           
  5040                           ;pin_manager.c: 53: ANSELA = 0x07;
  5041  000E8A  0E07               	movlw	7
  5042  000E8C  010F               	movlb	15	; () banked
  5043  000E8E  6F38               	movwf	56,b	;volatile
  5044                           
  5045                           ;pin_manager.c: 55: LATB = 0x00;
  5046  000E90  0E00               	movlw	0
  5047  000E92  6E8A               	movwf	3978,c	;volatile
  5048                           
  5049                           ;pin_manager.c: 56: TRISB = 0xE7;
  5050  000E94  0EE7               	movlw	231
  5051  000E96  6E93               	movwf	3987,c	;volatile
  5052                           
  5053                           ;pin_manager.c: 57: ANSELB = 0x27;
  5054  000E98  0E27               	movlw	39
  5055  000E9A  010F               	movlb	15	; () banked
  5056  000E9C  6F39               	movwf	57,b	;volatile
  5057                           
  5058                           ;pin_manager.c: 58: WPUB = 0x00;
  5059  000E9E  0E00               	movlw	0
  5060  000EA0  6E61               	movwf	3937,c	;volatile
  5061                           
  5062                           ;pin_manager.c: 60: LATC = 0x00;
  5063  000EA2  0E00               	movlw	0
  5064  000EA4  6E8B               	movwf	3979,c	;volatile
  5065                           
  5066                           ;pin_manager.c: 61: TRISC = 0xDC;
  5067  000EA6  0EDC               	movlw	220
  5068  000EA8  6E94               	movwf	3988,c	;volatile
  5069                           
  5070                           ;pin_manager.c: 62: ANSELC = 0x14;
  5071  000EAA  0E14               	movlw	20
  5072  000EAC  010F               	movlb	15	; () banked
  5073  000EAE  6F3A               	movwf	58,b	;volatile
  5074                           
  5075                           ;pin_manager.c: 64: LATD = 0x00;
  5076  000EB0  0E00               	movlw	0
  5077  000EB2  6E8C               	movwf	3980,c	;volatile
  5078                           
  5079                           ; BSR set to: 15
  5080                           ;pin_manager.c: 65: TRISD = 0xFF;
  5081  000EB4  6895               	setf	3989,c	;volatile
  5082                           
  5083                           ;pin_manager.c: 66: ANSELD = 0x3F;
  5084  000EB6  0E3F               	movlw	63
  5085  000EB8  010F               	movlb	15	; () banked
  5086  000EBA  6F3B               	movwf	59,b	;volatile
  5087                           
  5088                           ;pin_manager.c: 68: LATE = 0x00;
  5089  000EBC  0E00               	movlw	0
  5090  000EBE  6E8D               	movwf	3981,c	;volatile
  5091                           
  5092                           ;pin_manager.c: 69: TRISE = 0x07;
  5093  000EC0  0E07               	movlw	7
  5094  000EC2  6E96               	movwf	3990,c	;volatile
  5095                           
  5096                           ;pin_manager.c: 70: ANSELE = 0x07;
  5097  000EC4  0E07               	movlw	7
  5098  000EC6  010F               	movlb	15	; () banked
  5099  000EC8  6F3C               	movwf	60,b	;volatile
  5100                           
  5101                           ; BSR set to: 15
  5102                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x01;
  5103  000ECA  8EF1               	bsf	intcon2,7,c	;volatile
  5104                           
  5105                           ; BSR set to: 15
  5106  000ECC  0012               	return		;funcret
  5107  000ECE                     __end_of_PIN_MANAGER_Initialize:
  5108                           	opt stack 0
  5109                           tblptru	equ	0xFF8
  5110                           tblptrh	equ	0xFF7
  5111                           tblptrl	equ	0xFF6
  5112                           tablat	equ	0xFF5
  5113                           prodh	equ	0xFF4
  5114                           prodl	equ	0xFF3
  5115                           intcon	equ	0xFF2
  5116                           intcon2	equ	0xFF1
  5117                           indf0	equ	0xFEF
  5118                           postinc0	equ	0xFEE
  5119                           fsr0h	equ	0xFEA
  5120                           fsr0l	equ	0xFE9
  5121                           wreg	equ	0xFE8
  5122                           postdec1	equ	0xFE5
  5123                           fsr1l	equ	0xFE1
  5124                           indf2	equ	0xFDF
  5125                           postinc2	equ	0xFDE
  5126                           postdec2	equ	0xFDD
  5127                           plusw2	equ	0xFDB
  5128                           fsr2h	equ	0xFDA
  5129                           fsr2l	equ	0xFD9
  5130                           status	equ	0xFD8
  5131                           
  5132 ;; *************** function _OSCILLATOR_Initialize *****************
  5133 ;; Defined at:
  5134 ;;		line 121 in file "mcc_generated_files/mcc.c"
  5135 ;; Parameters:    Size  Location     Type
  5136 ;;		None
  5137 ;; Auto vars:     Size  Location     Type
  5138 ;;		None
  5139 ;; Return value:  Size  Location     Type
  5140 ;;                  1    wreg      void 
  5141 ;; Registers used:
  5142 ;;		wreg, status,2
  5143 ;; Tracked objects:
  5144 ;;		On entry : 0/0
  5145 ;;		On exit  : 0/0
  5146 ;;		Unchanged: 0/0
  5147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5148 ;;      Params:         0       0       0       0       0       0       0
  5149 ;;      Locals:         0       0       0       0       0       0       0
  5150 ;;      Temps:          0       0       0       0       0       0       0
  5151 ;;      Totals:         0       0       0       0       0       0       0
  5152 ;;Total ram usage:        0 bytes
  5153 ;; Hardware stack levels used:    1
  5154 ;; Hardware stack levels required when called:    4
  5155 ;; This function calls:
  5156 ;;		Nothing
  5157 ;; This function is called by:
  5158 ;;		_SYSTEM_Initialize
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text27
  5163  00124A                     __ptext27:
  5164                           	opt stack 0
  5165  00124A                     _OSCILLATOR_Initialize:
  5166                           	opt stack 25
  5167                           
  5168                           ;mcc.c: 123: OSCCON = 0x70;
  5169                           
  5170                           ; BSR set to: 15
  5171                           ;incstack = 0
  5172  00124A  0E70               	movlw	112
  5173  00124C  6ED3               	movwf	4051,c	;volatile
  5174                           
  5175                           ;mcc.c: 125: OSCCON2 = 0x04;
  5176  00124E  0E04               	movlw	4
  5177  001250  6ED2               	movwf	4050,c	;volatile
  5178                           
  5179                           ;mcc.c: 127: OSCTUNE = 0x00;
  5180  001252  0E00               	movlw	0
  5181  001254  6E9B               	movwf	3995,c	;volatile
  5182  001256  0012               	return		;funcret
  5183  001258                     __end_of_OSCILLATOR_Initialize:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           intcon	equ	0xFF2
  5192                           intcon2	equ	0xFF1
  5193                           indf0	equ	0xFEF
  5194                           postinc0	equ	0xFEE
  5195                           fsr0h	equ	0xFEA
  5196                           fsr0l	equ	0xFE9
  5197                           wreg	equ	0xFE8
  5198                           postdec1	equ	0xFE5
  5199                           fsr1l	equ	0xFE1
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           plusw2	equ	0xFDB
  5204                           fsr2h	equ	0xFDA
  5205                           fsr2l	equ	0xFD9
  5206                           status	equ	0xFD8
  5207                           
  5208 ;; *************** function _INTERRUPT_Initialize *****************
  5209 ;; Defined at:
  5210 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5211 ;; Parameters:    Size  Location     Type
  5212 ;;		None
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;		None
  5215 ;; Return value:  Size  Location     Type
  5216 ;;                  1    wreg      void 
  5217 ;; Registers used:
  5218 ;;		None
  5219 ;; Tracked objects:
  5220 ;;		On entry : 0/0
  5221 ;;		On exit  : 0/0
  5222 ;;		Unchanged: 0/0
  5223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5224 ;;      Params:         0       0       0       0       0       0       0
  5225 ;;      Locals:         0       0       0       0       0       0       0
  5226 ;;      Temps:          0       0       0       0       0       0       0
  5227 ;;      Totals:         0       0       0       0       0       0       0
  5228 ;;Total ram usage:        0 bytes
  5229 ;; Hardware stack levels used:    1
  5230 ;; Hardware stack levels required when called:    4
  5231 ;; This function calls:
  5232 ;;		Nothing
  5233 ;; This function is called by:
  5234 ;;		_SYSTEM_Initialize
  5235 ;; This function uses a non-reentrant model
  5236 ;;
  5237                           
  5238                           	psect	text28
  5239  001258                     __ptext28:
  5240                           	opt stack 0
  5241  001258                     _INTERRUPT_Initialize:
  5242                           	opt stack 25
  5243                           
  5244                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  5245                           
  5246                           ;incstack = 0
  5247  001258  9ED0               	bcf	4048,7,c	;volatile
  5248                           
  5249                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  5250  00125A  9AA5               	bcf	4005,5,c	;volatile
  5251                           
  5252                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  5253  00125C  98A5               	bcf	4005,4,c	;volatile
  5254                           
  5255                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  5256  00125E  9A9F               	bcf	3999,5,c	;volatile
  5257                           
  5258                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  5259  001260  989F               	bcf	3999,4,c	;volatile
  5260  001262  0012               	return		;funcret
  5261  001264                     __end_of_INTERRUPT_Initialize:
  5262                           	opt stack 0
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon2	equ	0xFF1
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           plusw2	equ	0xFDB
  5282                           fsr2h	equ	0xFDA
  5283                           fsr2l	equ	0xFD9
  5284                           status	equ	0xFD8
  5285                           
  5286 ;; *************** function _EUSART2_Initialize *****************
  5287 ;; Defined at:
  5288 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  5289 ;; Parameters:    Size  Location     Type
  5290 ;;		None
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;		None
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5302 ;;      Params:         0       0       0       0       0       0       0
  5303 ;;      Locals:         0       0       0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0
  5305 ;;      Totals:         0       0       0       0       0       0       0
  5306 ;;Total ram usage:        0 bytes
  5307 ;; Hardware stack levels used:    1
  5308 ;; Hardware stack levels required when called:    4
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_SYSTEM_Initialize
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text29
  5317  000F8A                     __ptext29:
  5318                           	opt stack 0
  5319  000F8A                     _EUSART2_Initialize:
  5320                           	opt stack 25
  5321                           
  5322                           ;eusart2.c: 78: PIE3bits.RC2IE = 0;
  5323                           
  5324                           ;incstack = 0
  5325  000F8A  9AA3               	bcf	4003,5,c	;volatile
  5326                           
  5327                           ;eusart2.c: 79: PIE3bits.TX2IE = 0;
  5328  000F8C  98A3               	bcf	4003,4,c	;volatile
  5329                           
  5330                           ;eusart2.c: 84: BAUD2CON = 0x48;
  5331  000F8E  0E48               	movlw	72
  5332  000F90  6E70               	movwf	3952,c	;volatile
  5333                           
  5334                           ;eusart2.c: 87: RC2STA = 0x90;
  5335  000F92  0E90               	movlw	144
  5336  000F94  6E71               	movwf	3953,c	;volatile
  5337                           
  5338                           ;eusart2.c: 90: TX2STA = 0x26;
  5339  000F96  0E26               	movlw	38
  5340  000F98  6E72               	movwf	3954,c	;volatile
  5341                           
  5342                           ;eusart2.c: 93: SPBRG2 = 0xA0;
  5343  000F9A  0EA0               	movlw	160
  5344  000F9C  6E75               	movwf	3957,c	;volatile
  5345                           
  5346                           ;eusart2.c: 96: SPBRGH2 = 0x01;
  5347  000F9E  0E01               	movlw	1
  5348  000FA0  6E76               	movwf	3958,c	;volatile
  5349                           
  5350                           ;eusart2.c: 100: eusart2TxHead = 0;
  5351  000FA2  0E00               	movlw	0
  5352  000FA4  6E38               	movwf	_eusart2TxHead,c
  5353                           
  5354                           ;eusart2.c: 101: eusart2TxTail = 0;
  5355  000FA6  0E00               	movlw	0
  5356  000FA8  6E39               	movwf	_eusart2TxTail,c
  5357                           
  5358                           ;eusart2.c: 102: eusart2TxBufferRemaining = sizeof (eusart2TxBuffer);
  5359  000FAA  0E08               	movlw	8
  5360  000FAC  6E43               	movwf	_eusart2TxBufferRemaining,c	;volatile
  5361                           
  5362                           ;eusart2.c: 104: eusart2RxHead = 0;
  5363  000FAE  0E00               	movlw	0
  5364  000FB0  6E36               	movwf	_eusart2RxHead,c
  5365                           
  5366                           ;eusart2.c: 105: eusart2RxTail = 0;
  5367  000FB2  0E00               	movlw	0
  5368  000FB4  6E37               	movwf	_eusart2RxTail,c
  5369                           
  5370                           ;eusart2.c: 106: eusart2RxCount = 0;
  5371  000FB6  0E00               	movlw	0
  5372  000FB8  6E35               	movwf	_eusart2RxCount,c	;volatile
  5373                           
  5374                           ;eusart2.c: 109: PIE3bits.RC2IE = 1;
  5375  000FBA  8AA3               	bsf	4003,5,c	;volatile
  5376  000FBC  0012               	return		;funcret
  5377  000FBE                     __end_of_EUSART2_Initialize:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           intcon2	equ	0xFF1
  5387                           indf0	equ	0xFEF
  5388                           postinc0	equ	0xFEE
  5389                           fsr0h	equ	0xFEA
  5390                           fsr0l	equ	0xFE9
  5391                           wreg	equ	0xFE8
  5392                           postdec1	equ	0xFE5
  5393                           fsr1l	equ	0xFE1
  5394                           indf2	equ	0xFDF
  5395                           postinc2	equ	0xFDE
  5396                           postdec2	equ	0xFDD
  5397                           plusw2	equ	0xFDB
  5398                           fsr2h	equ	0xFDA
  5399                           fsr2l	equ	0xFD9
  5400                           status	equ	0xFD8
  5401                           
  5402 ;; *************** function _NokiaStr *****************
  5403 ;; Defined at:
  5404 ;;		line 46 in file "NokiaLCD.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;  str             2   32[COMRAM] PTR unsigned char 
  5407 ;;		 -> ddata(11), 
  5408 ;;  len             1   34[COMRAM] unsigned char 
  5409 ;; Auto vars:     Size  Location     Type
  5410 ;;  i               2    0[BANK0 ] int 
  5411 ;; Return value:  Size  Location     Type
  5412 ;;                  1    wreg      void 
  5413 ;; Registers used:
  5414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5415 ;; Tracked objects:
  5416 ;;		On entry : 0/0
  5417 ;;		On exit  : 0/0
  5418 ;;		Unchanged: 0/0
  5419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5420 ;;      Params:         3       0       0       0       0       0       0
  5421 ;;      Locals:         0       2       0       0       0       0       0
  5422 ;;      Temps:          3       0       0       0       0       0       0
  5423 ;;      Totals:         6       2       0       0       0       0       0
  5424 ;;Total ram usage:        8 bytes
  5425 ;; Hardware stack levels used:    1
  5426 ;; Hardware stack levels required when called:    5
  5427 ;; This function calls:
  5428 ;;		_SPI2_Exchange8bit
  5429 ;;		___wmul
  5430 ;; This function is called by:
  5431 ;;		_main
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text30
  5436  000B0C                     __ptext30:
  5437                           	opt stack 0
  5438  000B0C                     _NokiaStr:
  5439                           	opt stack 25
  5440                           
  5441                           ;incstack = 0
  5442                           ;NokiaLCD.c: 47: int i;
  5443                           ;NokiaLCD.c: 48: do { LATD3 = 1; } while(0);
  5444  000B0C  868C               	bsf	3980,3,c	;volatile
  5445  000B0E                     l3406:
  5446                           
  5447                           ;NokiaLCD.c: 49: for(;len>0;len --){
  5448  000B0E  5023               	movf	NokiaStr@len,w,c
  5449  000B10  B4D8               	btfsc	status,2,c
  5450  000B12  0012               	return	
  5451                           
  5452                           ;NokiaLCD.c: 50: for(i=0;i<=4;i++){
  5453  000B14  0E00               	movlw	0
  5454  000B16  0100               	movlb	0	; () banked
  5455  000B18  6FC1               	movwf	(NokiaStr@i+1)& (0+255),b
  5456  000B1A  0E00               	movlw	0
  5457  000B1C  6FC0               	movwf	NokiaStr@i& (0+255),b
  5458  000B1E                     l3412:
  5459                           
  5460                           ; BSR set to: 0
  5461  000B1E  0100               	movlb	0	; () banked
  5462  000B20  BFC1               	btfsc	(NokiaStr@i+1)& (0+255),7,b
  5463  000B22  D008               	goto	l3416
  5464  000B24  0100               	movlb	0	; () banked
  5465  000B26  51C1               	movf	(NokiaStr@i+1)& (0+255),w,b
  5466  000B28  E136               	bnz	l3426
  5467  000B2A  0E05               	movlw	5
  5468  000B2C  0100               	movlb	0	; () banked
  5469  000B2E  5DC0               	subwf	NokiaStr@i& (0+255),w,b
  5470  000B30  B0D8               	btfsc	status,0,c
  5471  000B32  D031               	goto	l3426
  5472  000B34                     l3416:
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;NokiaLCD.c: 51: SPI2_Exchange8bit(FONTLOOKUP[*str-32][i]);
  5476  000B34  C021  FFD9         	movff	NokiaStr@str,fsr2l
  5477  000B38  C022  FFDA         	movff	NokiaStr@str+1,fsr2h
  5478  000B3C  50DF               	movf	indf2,w,c
  5479  000B3E  6E24               	movwf	??_NokiaStr& (0+255),c
  5480  000B40  0EE0               	movlw	224
  5481  000B42  2424               	addwf	??_NokiaStr,w,c
  5482  000B44  6E1B               	movwf	___wmul@multiplier,c
  5483  000B46  6A1C               	clrf	___wmul@multiplier+1,c
  5484  000B48  0EFF               	movlw	255
  5485  000B4A  221C               	addwfc	___wmul@multiplier+1,f,c
  5486  000B4C  0E00               	movlw	0
  5487  000B4E  6E1E               	movwf	___wmul@multiplicand+1,c
  5488  000B50  0E05               	movlw	5
  5489  000B52  6E1D               	movwf	___wmul@multiplicand,c
  5490  000B54  ECB9  F008         	call	___wmul	;wreg free
  5491  000B58  0E2D               	movlw	low _FONTLOOKUP
  5492  000B5A  6E25               	movwf	(??_NokiaStr+1)& (0+255),c
  5493  000B5C  0E7E               	movlw	high _FONTLOOKUP
  5494  000B5E  6E26               	movwf	(??_NokiaStr+2)& (0+255),c
  5495  000B60  501B               	movf	?___wmul,w,c
  5496  000B62  2625               	addwf	??_NokiaStr+1,f,c
  5497  000B64  501C               	movf	?___wmul+1,w,c
  5498  000B66  2226               	addwfc	??_NokiaStr+2,f,c
  5499  000B68  0100               	movlb	0	; () banked
  5500  000B6A  51C0               	movf	NokiaStr@i& (0+255),w,b
  5501  000B6C  2625               	addwf	??_NokiaStr+1,f,c
  5502  000B6E  0100               	movlb	0	; () banked
  5503  000B70  51C1               	movf	(NokiaStr@i+1)& (0+255),w,b
  5504  000B72  2226               	addwfc	??_NokiaStr+2,f,c
  5505  000B74  C025  FFF6         	movff	??_NokiaStr+1,tblptrl
  5506  000B78  C026  FFF7         	movff	??_NokiaStr+2,tblptrh
  5507  000B7C                     	if	0	;tblptru may be non-zero
  5508  000B7C                     	endif
  5509  000B7C                     	if	0	;tblptru may be non-zero
  5510  000B7C                     	endif
  5511  000B7C  0008               	tblrd		*
  5512  000B7E  50F5               	movf	tablat,w,c
  5513  000B80  EC1D  F009         	call	_SPI2_Exchange8bit
  5514                           
  5515                           ;NokiaLCD.c: 52: SPI2_Exchange8bit(0x00);
  5516  000B84  0E00               	movlw	0
  5517  000B86  EC1D  F009         	call	_SPI2_Exchange8bit
  5518                           
  5519                           ;NokiaLCD.c: 53: str++;
  5520  000B8A  4A21               	infsnz	NokiaStr@str,f,c
  5521  000B8C  2A22               	incf	NokiaStr@str+1,f,c
  5522  000B8E  0100               	movlb	0	; () banked
  5523  000B90  4BC0               	infsnz	NokiaStr@i& (0+255),f,b
  5524  000B92  2BC1               	incf	(NokiaStr@i+1)& (0+255),f,b
  5525  000B94  D7C4               	goto	l3412
  5526  000B96                     l3426:
  5527                           
  5528                           ; BSR set to: 0
  5529  000B96  0623               	decf	NokiaStr@len,f,c
  5530  000B98  D7BA               	goto	l3406
  5531  000B9A                     __end_of_NokiaStr:
  5532                           	opt stack 0
  5533                           tblptru	equ	0xFF8
  5534                           tblptrh	equ	0xFF7
  5535                           tblptrl	equ	0xFF6
  5536                           tablat	equ	0xFF5
  5537                           prodh	equ	0xFF4
  5538                           prodl	equ	0xFF3
  5539                           intcon	equ	0xFF2
  5540                           intcon2	equ	0xFF1
  5541                           indf0	equ	0xFEF
  5542                           postinc0	equ	0xFEE
  5543                           fsr0h	equ	0xFEA
  5544                           fsr0l	equ	0xFE9
  5545                           wreg	equ	0xFE8
  5546                           postdec1	equ	0xFE5
  5547                           fsr1l	equ	0xFE1
  5548                           indf2	equ	0xFDF
  5549                           postinc2	equ	0xFDE
  5550                           postdec2	equ	0xFDD
  5551                           plusw2	equ	0xFDB
  5552                           fsr2h	equ	0xFDA
  5553                           fsr2l	equ	0xFD9
  5554                           status	equ	0xFD8
  5555                           
  5556 ;; *************** function ___wmul *****************
  5557 ;; Defined at:
  5558 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  5559 ;; Parameters:    Size  Location     Type
  5560 ;;  multiplier      2   26[COMRAM] unsigned int 
  5561 ;;  multiplicand    2   28[COMRAM] unsigned int 
  5562 ;; Auto vars:     Size  Location     Type
  5563 ;;  product         2   30[COMRAM] unsigned int 
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  2   26[COMRAM] unsigned int 
  5566 ;; Registers used:
  5567 ;;		wreg, status,2, status,0, prodl, prodh
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5573 ;;      Params:         4       0       0       0       0       0       0
  5574 ;;      Locals:         2       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       0       0       0       0       0
  5576 ;;      Totals:         6       0       0       0       0       0       0
  5577 ;;Total ram usage:        6 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:    4
  5580 ;; This function calls:
  5581 ;;		Nothing
  5582 ;; This function is called by:
  5583 ;;		_NokiaStr
  5584 ;; This function uses a non-reentrant model
  5585 ;;
  5586                           
  5587                           	psect	text31
  5588  001172                     __ptext31:
  5589                           	opt stack 0
  5590  001172                     ___wmul:
  5591                           	opt stack 25
  5592                           
  5593                           ;incstack = 0
  5594  001172  501B               	movf	___wmul@multiplier,w,c
  5595  001174  021D               	mulwf	___wmul@multiplicand,c
  5596  001176  CFF3 F01F          	movff	prodl,___wmul@product
  5597  00117A  CFF4 F020          	movff	prodh,___wmul@product+1
  5598  00117E  501B               	movf	___wmul@multiplier,w,c
  5599  001180  021E               	mulwf	___wmul@multiplicand+1,c
  5600  001182  50F3               	movf	prodl,w,c
  5601  001184  2620               	addwf	___wmul@product+1,f,c
  5602  001186  501C               	movf	___wmul@multiplier+1,w,c
  5603  001188  021D               	mulwf	___wmul@multiplicand,c
  5604  00118A  50F3               	movf	prodl,w,c
  5605  00118C  2620               	addwf	___wmul@product+1,f,c
  5606  00118E  C01F  F01B         	movff	___wmul@product,?___wmul
  5607  001192  C020  F01C         	movff	___wmul@product+1,?___wmul+1
  5608  001196  0012               	return	
  5609  001198                     __end_of___wmul:
  5610                           	opt stack 0
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           intcon	equ	0xFF2
  5618                           intcon2	equ	0xFF1
  5619                           indf0	equ	0xFEF
  5620                           postinc0	equ	0xFEE
  5621                           fsr0h	equ	0xFEA
  5622                           fsr0l	equ	0xFE9
  5623                           wreg	equ	0xFE8
  5624                           postdec1	equ	0xFE5
  5625                           fsr1l	equ	0xFE1
  5626                           indf2	equ	0xFDF
  5627                           postinc2	equ	0xFDE
  5628                           postdec2	equ	0xFDD
  5629                           plusw2	equ	0xFDB
  5630                           fsr2h	equ	0xFDA
  5631                           fsr2l	equ	0xFD9
  5632                           status	equ	0xFD8
  5633                           
  5634 ;; *************** function _NokiaStart *****************
  5635 ;; Defined at:
  5636 ;;		line 6 in file "NokiaLCD.c"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5650 ;;      Params:         0       0       0       0       0       0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0
  5653 ;;      Totals:         0       0       0       0       0       0       0
  5654 ;;Total ram usage:        0 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    6
  5657 ;; This function calls:
  5658 ;;		_SPI2_Exchange8bit
  5659 ;;		_blackLcd
  5660 ;;		_clearLcd
  5661 ;; This function is called by:
  5662 ;;		_main
  5663 ;; This function uses a non-reentrant model
  5664 ;;
  5665                           
  5666                           	psect	text32
  5667  000FBE                     __ptext32:
  5668                           	opt stack 0
  5669  000FBE                     _NokiaStart:
  5670                           	opt stack 24
  5671                           
  5672                           ;incstack = 0
  5673                           ;NokiaLCD.c: 7: do { LATD3 = 0; } while(0);
  5674  000FBE  968C               	bcf	3980,3,c	;volatile
  5675                           
  5676                           ;NokiaLCD.c: 8: do { LATD0 = 0; } while(0);
  5677  000FC0  908C               	bcf	3980,0,c	;volatile
  5678                           
  5679                           ;NokiaLCD.c: 9: SPI2_Exchange8bit(0x21);
  5680  000FC2  0E21               	movlw	33
  5681  000FC4  EC1D  F009         	call	_SPI2_Exchange8bit
  5682                           
  5683                           ;NokiaLCD.c: 10: SPI2_Exchange8bit(0xC8);
  5684  000FC8  0EC8               	movlw	200
  5685  000FCA  EC1D  F009         	call	_SPI2_Exchange8bit
  5686                           
  5687                           ;NokiaLCD.c: 11: SPI2_Exchange8bit(0x06);
  5688  000FCE  0E06               	movlw	6
  5689  000FD0  EC1D  F009         	call	_SPI2_Exchange8bit
  5690                           
  5691                           ;NokiaLCD.c: 12: SPI2_Exchange8bit(0x13);
  5692  000FD4  0E13               	movlw	19
  5693  000FD6  EC1D  F009         	call	_SPI2_Exchange8bit
  5694                           
  5695                           ;NokiaLCD.c: 13: SPI2_Exchange8bit(0x20);
  5696  000FDA  0E20               	movlw	32
  5697  000FDC  EC1D  F009         	call	_SPI2_Exchange8bit
  5698                           
  5699                           ;NokiaLCD.c: 14: SPI2_Exchange8bit(0x0C);
  5700  000FE0  0E0C               	movlw	12
  5701  000FE2  EC1D  F009         	call	_SPI2_Exchange8bit
  5702                           
  5703                           ;NokiaLCD.c: 15: clearLcd();
  5704  000FE6  EC7E  F008         	call	_clearLcd	;wreg free
  5705                           
  5706                           ;NokiaLCD.c: 16: blackLcd();
  5707  000FEA  EC92  F008         	call	_blackLcd	;wreg free
  5708  000FEE  0012               	return		;funcret
  5709  000FF0                     __end_of_NokiaStart:
  5710                           	opt stack 0
  5711                           tblptru	equ	0xFF8
  5712                           tblptrh	equ	0xFF7
  5713                           tblptrl	equ	0xFF6
  5714                           tablat	equ	0xFF5
  5715                           prodh	equ	0xFF4
  5716                           prodl	equ	0xFF3
  5717                           intcon	equ	0xFF2
  5718                           intcon2	equ	0xFF1
  5719                           indf0	equ	0xFEF
  5720                           postinc0	equ	0xFEE
  5721                           fsr0h	equ	0xFEA
  5722                           fsr0l	equ	0xFE9
  5723                           wreg	equ	0xFE8
  5724                           postdec1	equ	0xFE5
  5725                           fsr1l	equ	0xFE1
  5726                           indf2	equ	0xFDF
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           plusw2	equ	0xFDB
  5730                           fsr2h	equ	0xFDA
  5731                           fsr2l	equ	0xFD9
  5732                           status	equ	0xFD8
  5733                           
  5734 ;; *************** function _clearLcd *****************
  5735 ;; Defined at:
  5736 ;;		line 20 in file "NokiaLCD.c"
  5737 ;; Parameters:    Size  Location     Type
  5738 ;;		None
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;  res             2   27[COMRAM] int 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  1    wreg      void 
  5743 ;; Registers used:
  5744 ;;		wreg, status,2, status,0, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5750 ;;      Params:         0       0       0       0       0       0       0
  5751 ;;      Locals:         2       0       0       0       0       0       0
  5752 ;;      Temps:          0       0       0       0       0       0       0
  5753 ;;      Totals:         2       0       0       0       0       0       0
  5754 ;;Total ram usage:        2 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    5
  5757 ;; This function calls:
  5758 ;;		_SPI2_Exchange8bit
  5759 ;; This function is called by:
  5760 ;;		_main
  5761 ;;		_NokiaStart
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text33
  5766  0010FC                     __ptext33:
  5767                           	opt stack 0
  5768  0010FC                     _clearLcd:
  5769                           	opt stack 25
  5770                           
  5771                           ;incstack = 0
  5772                           ;NokiaLCD.c: 21: int res;
  5773                           ;NokiaLCD.c: 22: do { LATD0 = 0; } while(0);
  5774  0010FC  908C               	bcf	3980,0,c	;volatile
  5775                           
  5776                           ;NokiaLCD.c: 23: do { LATD3 = 1; } while(0);
  5777  0010FE  868C               	bsf	3980,3,c	;volatile
  5778                           
  5779                           ;NokiaLCD.c: 24: for(res=0;res<504;res++){
  5780  001100  0E00               	movlw	0
  5781  001102  6E1D               	movwf	clearLcd@res+1,c
  5782  001104  0E00               	movlw	0
  5783  001106  6E1C               	movwf	clearLcd@res,c
  5784  001108                     l3186:
  5785  001108  BE1D               	btfsc	clearLcd@res+1,7,c
  5786  00110A  D006               	goto	l3190
  5787  00110C  0EF8               	movlw	248
  5788  00110E  5C1C               	subwf	clearLcd@res,w,c
  5789  001110  0E01               	movlw	1
  5790  001112  581D               	subwfb	clearLcd@res+1,w,c
  5791  001114  B0D8               	btfsc	status,0,c
  5792  001116  0012               	return	
  5793  001118                     l3190:
  5794                           
  5795                           ;NokiaLCD.c: 25: SPI2_Exchange8bit(0x00);
  5796  001118  0E00               	movlw	0
  5797  00111A  EC1D  F009         	call	_SPI2_Exchange8bit
  5798  00111E  4A1C               	infsnz	clearLcd@res,f,c
  5799  001120  2A1D               	incf	clearLcd@res+1,f,c
  5800  001122  D7F2               	goto	l3186
  5801  001124                     __end_of_clearLcd:
  5802                           	opt stack 0
  5803                           tblptru	equ	0xFF8
  5804                           tblptrh	equ	0xFF7
  5805                           tblptrl	equ	0xFF6
  5806                           tablat	equ	0xFF5
  5807                           prodh	equ	0xFF4
  5808                           prodl	equ	0xFF3
  5809                           intcon	equ	0xFF2
  5810                           intcon2	equ	0xFF1
  5811                           indf0	equ	0xFEF
  5812                           postinc0	equ	0xFEE
  5813                           fsr0h	equ	0xFEA
  5814                           fsr0l	equ	0xFE9
  5815                           wreg	equ	0xFE8
  5816                           postdec1	equ	0xFE5
  5817                           fsr1l	equ	0xFE1
  5818                           indf2	equ	0xFDF
  5819                           postinc2	equ	0xFDE
  5820                           postdec2	equ	0xFDD
  5821                           plusw2	equ	0xFDB
  5822                           fsr2h	equ	0xFDA
  5823                           fsr2l	equ	0xFD9
  5824                           status	equ	0xFD8
  5825                           
  5826 ;; *************** function _blackLcd *****************
  5827 ;; Defined at:
  5828 ;;		line 28 in file "NokiaLCD.c"
  5829 ;; Parameters:    Size  Location     Type
  5830 ;;		None
  5831 ;; Auto vars:     Size  Location     Type
  5832 ;;  res             2   27[COMRAM] int 
  5833 ;; Return value:  Size  Location     Type
  5834 ;;                  1    wreg      void 
  5835 ;; Registers used:
  5836 ;;		wreg, status,2, status,0, cstack
  5837 ;; Tracked objects:
  5838 ;;		On entry : 0/0
  5839 ;;		On exit  : 0/0
  5840 ;;		Unchanged: 0/0
  5841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5842 ;;      Params:         0       0       0       0       0       0       0
  5843 ;;      Locals:         2       0       0       0       0       0       0
  5844 ;;      Temps:          0       0       0       0       0       0       0
  5845 ;;      Totals:         2       0       0       0       0       0       0
  5846 ;;Total ram usage:        2 bytes
  5847 ;; Hardware stack levels used:    1
  5848 ;; Hardware stack levels required when called:    5
  5849 ;; This function calls:
  5850 ;;		_SPI2_Exchange8bit
  5851 ;; This function is called by:
  5852 ;;		_NokiaStart
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text34
  5857  001124                     __ptext34:
  5858                           	opt stack 0
  5859  001124                     _blackLcd:
  5860                           	opt stack 24
  5861                           
  5862                           ;incstack = 0
  5863                           ;NokiaLCD.c: 29: int res;
  5864                           ;NokiaLCD.c: 30: do { LATD0 = 0; } while(0);
  5865  001124  908C               	bcf	3980,0,c	;volatile
  5866                           
  5867                           ;NokiaLCD.c: 31: do { LATD3 = 1; } while(0);
  5868  001126  868C               	bsf	3980,3,c	;volatile
  5869                           
  5870                           ;NokiaLCD.c: 32: for(res=0;res<504;res++){
  5871  001128  0E00               	movlw	0
  5872  00112A  6E1D               	movwf	blackLcd@res+1,c
  5873  00112C  0E00               	movlw	0
  5874  00112E  6E1C               	movwf	blackLcd@res,c
  5875  001130                     l3374:
  5876  001130  BE1D               	btfsc	blackLcd@res+1,7,c
  5877  001132  D006               	goto	l3378
  5878  001134  0EF8               	movlw	248
  5879  001136  5C1C               	subwf	blackLcd@res,w,c
  5880  001138  0E01               	movlw	1
  5881  00113A  581D               	subwfb	blackLcd@res+1,w,c
  5882  00113C  B0D8               	btfsc	status,0,c
  5883  00113E  0012               	return	
  5884  001140                     l3378:
  5885                           
  5886                           ;NokiaLCD.c: 33: SPI2_Exchange8bit(0xFF);
  5887  001140  0EFF               	movlw	255
  5888  001142  EC1D  F009         	call	_SPI2_Exchange8bit
  5889  001146  4A1C               	infsnz	blackLcd@res,f,c
  5890  001148  2A1D               	incf	blackLcd@res+1,f,c
  5891  00114A  D7F2               	goto	l3374
  5892  00114C                     __end_of_blackLcd:
  5893                           	opt stack 0
  5894                           tblptru	equ	0xFF8
  5895                           tblptrh	equ	0xFF7
  5896                           tblptrl	equ	0xFF6
  5897                           tablat	equ	0xFF5
  5898                           prodh	equ	0xFF4
  5899                           prodl	equ	0xFF3
  5900                           intcon	equ	0xFF2
  5901                           intcon2	equ	0xFF1
  5902                           indf0	equ	0xFEF
  5903                           postinc0	equ	0xFEE
  5904                           fsr0h	equ	0xFEA
  5905                           fsr0l	equ	0xFE9
  5906                           wreg	equ	0xFE8
  5907                           postdec1	equ	0xFE5
  5908                           fsr1l	equ	0xFE1
  5909                           indf2	equ	0xFDF
  5910                           postinc2	equ	0xFDE
  5911                           postdec2	equ	0xFDD
  5912                           plusw2	equ	0xFDB
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _SPI2_Exchange8bit *****************
  5918 ;; Defined at:
  5919 ;;		line 78 in file "mcc_generated_files/spi2.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;  data            1    wreg     unsigned char 
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;  data            1   26[COMRAM] unsigned char 
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      unsigned char 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5933 ;;      Params:         0       0       0       0       0       0       0
  5934 ;;      Locals:         1       0       0       0       0       0       0
  5935 ;;      Temps:          0       0       0       0       0       0       0
  5936 ;;      Totals:         1       0       0       0       0       0       0
  5937 ;;Total ram usage:        1 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; Hardware stack levels required when called:    4
  5940 ;; This function calls:
  5941 ;;		Nothing
  5942 ;; This function is called by:
  5943 ;;		_NokiaStart
  5944 ;;		_clearLcd
  5945 ;;		_blackLcd
  5946 ;;		_gotoXy
  5947 ;;		_NokiaStr
  5948 ;;		_SPI2_Exchange8bitBuffer
  5949 ;; This function uses a non-reentrant model
  5950 ;;
  5951                           
  5952                           	psect	text35
  5953  00123A                     __ptext35:
  5954                           	opt stack 0
  5955  00123A                     _SPI2_Exchange8bit:
  5956                           	opt stack 25
  5957                           
  5958                           ;incstack = 0
  5959                           ;SPI2_Exchange8bit@data stored from wreg
  5960  00123A  6E1B               	movwf	SPI2_Exchange8bit@data,c
  5961                           
  5962                           ;spi2.c: 81: SSP2CON1bits.WCOL = 0;
  5963  00123C  9E6C               	bcf	3948,7,c	;volatile
  5964                           
  5965                           ;spi2.c: 83: SSP2BUF = data;
  5966  00123E  C01B  FF6F         	movff	SPI2_Exchange8bit@data,3951	;volatile
  5967  001242                     l218:
  5968  001242  A06D               	btfss	3949,0,c	;volatile
  5969  001244  D7FE               	goto	l218
  5970                           
  5971                           ;spi2.c: 87: }
  5972                           ;spi2.c: 89: return (SSP2BUF);
  5973  001246  506F               	movf	3951,w,c	;volatile
  5974  001248  0012               	return		;funcret
  5975  00124A                     __end_of_SPI2_Exchange8bit:
  5976                           	opt stack 0
  5977                           tblptru	equ	0xFF8
  5978                           tblptrh	equ	0xFF7
  5979                           tblptrl	equ	0xFF6
  5980                           tablat	equ	0xFF5
  5981                           prodh	equ	0xFF4
  5982                           prodl	equ	0xFF3
  5983                           intcon	equ	0xFF2
  5984                           intcon2	equ	0xFF1
  5985                           indf0	equ	0xFEF
  5986                           postinc0	equ	0xFEE
  5987                           fsr0h	equ	0xFEA
  5988                           fsr0l	equ	0xFE9
  5989                           wreg	equ	0xFE8
  5990                           postdec1	equ	0xFE5
  5991                           fsr1l	equ	0xFE1
  5992                           indf2	equ	0xFDF
  5993                           postinc2	equ	0xFDE
  5994                           postdec2	equ	0xFDD
  5995                           plusw2	equ	0xFDB
  5996                           fsr2h	equ	0xFDA
  5997                           fsr2l	equ	0xFD9
  5998                           status	equ	0xFD8
  5999                           
  6000 ;; *************** function _INTERRUPT_InterruptManager *****************
  6001 ;; Defined at:
  6002 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6003 ;; Parameters:    Size  Location     Type
  6004 ;;		None
  6005 ;; Auto vars:     Size  Location     Type
  6006 ;;		None
  6007 ;; Return value:  Size  Location     Type
  6008 ;;                  1    wreg      void 
  6009 ;; Registers used:
  6010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6011 ;; Tracked objects:
  6012 ;;		On entry : 0/0
  6013 ;;		On exit  : 0/0
  6014 ;;		Unchanged: 0/0
  6015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6016 ;;      Params:         0       0       0       0       0       0       0
  6017 ;;      Locals:         0       0       0       0       0       0       0
  6018 ;;      Temps:         14       0       0       0       0       0       0
  6019 ;;      Totals:        14       0       0       0       0       0       0
  6020 ;;Total ram usage:       14 bytes
  6021 ;; Hardware stack levels used:    1
  6022 ;; Hardware stack levels required when called:    3
  6023 ;; This function calls:
  6024 ;;		_EUSART1_Receive_ISR
  6025 ;;		_EUSART1_Transmit_ISR
  6026 ;;		_EUSART2_Receive_ISR
  6027 ;;		_EUSART2_Transmit_ISR
  6028 ;; This function is called by:
  6029 ;;		Interrupt level 2
  6030 ;; This function uses a non-reentrant model
  6031 ;;
  6032                           
  6033                           	psect	intcode
  6034  000008                     __pintcode:
  6035                           	opt stack 0
  6036  000008                     _INTERRUPT_InterruptManager:
  6037                           	opt stack 22
  6038                           
  6039                           ;incstack = 0
  6040  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6041  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  6042  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6043  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6044  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6045  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6046  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6047  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6048  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6049  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6050  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6051  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6052  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6053  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6054  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6055                           
  6056                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  6057  000042  BAA3               	btfsc	4003,5,c	;volatile
  6058  000044  AAA4               	btfss	4004,5,c	;volatile
  6059  000046  D003               	goto	i2l170
  6060                           
  6061                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  6062  000048  EC3E  F008         	call	_EUSART2_Receive_ISR	;wreg free
  6063                           
  6064                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  6065  00004C  D011               	goto	i2l178
  6066  00004E                     i2l170:
  6067  00004E  B8A3               	btfsc	4003,4,c	;volatile
  6068  000050  A8A4               	btfss	4004,4,c	;volatile
  6069  000052  D003               	goto	i2l172
  6070                           
  6071                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  6072  000054  EC11  F008         	call	_EUSART2_Transmit_ISR	;wreg free
  6073                           
  6074                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6075  000058  D00B               	goto	i2l178
  6076  00005A                     i2l172:
  6077  00005A  BA9D               	btfsc	3997,5,c	;volatile
  6078  00005C  AA9E               	btfss	3998,5,c	;volatile
  6079  00005E  D003               	goto	i2l174
  6080                           
  6081                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  6082  000060  ECDE  F008         	call	_EUSART1_Receive_ISR	;wreg free
  6083                           
  6084                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6085  000064  D005               	goto	i2l178
  6086  000066                     i2l174:
  6087  000066  B89D               	btfsc	3997,4,c	;volatile
  6088  000068  A89E               	btfss	3998,4,c	;volatile
  6089  00006A  D002               	goto	i2l178
  6090                           
  6091                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  6092  00006C  ECF8  F007         	call	_EUSART1_Transmit_ISR	;wreg free
  6093  000070                     i2l178:
  6094  000070  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6095  000074  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6096  000078  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6097  00007C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6098  000080  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6099  000084  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6100  000088  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6101  00008C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6102  000090  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6103  000094  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6104  000098  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6105  00009C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6106  0000A0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6107  0000A4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6108  0000A8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6109  0000AA  0011               	retfie		f
  6110  0000AC                     __end_of_INTERRUPT_InterruptManager:
  6111                           	opt stack 0
  6112                           pclatu	equ	0xFFB
  6113                           pclath	equ	0xFFA
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           prodh	equ	0xFF4
  6119                           prodl	equ	0xFF3
  6120                           intcon	equ	0xFF2
  6121                           intcon2	equ	0xFF1
  6122                           indf0	equ	0xFEF
  6123                           postinc0	equ	0xFEE
  6124                           fsr0h	equ	0xFEA
  6125                           fsr0l	equ	0xFE9
  6126                           wreg	equ	0xFE8
  6127                           postdec1	equ	0xFE5
  6128                           fsr1h	equ	0xFE2
  6129                           fsr1l	equ	0xFE1
  6130                           indf2	equ	0xFDF
  6131                           postinc2	equ	0xFDE
  6132                           postdec2	equ	0xFDD
  6133                           plusw2	equ	0xFDB
  6134                           fsr2h	equ	0xFDA
  6135                           fsr2l	equ	0xFD9
  6136                           status	equ	0xFD8
  6137                           
  6138 ;; *************** function _EUSART2_Transmit_ISR *****************
  6139 ;; Defined at:
  6140 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  6141 ;; Parameters:    Size  Location     Type
  6142 ;;		None
  6143 ;; Auto vars:     Size  Location     Type
  6144 ;;		None
  6145 ;; Return value:  Size  Location     Type
  6146 ;;                  1    wreg      void 
  6147 ;; Registers used:
  6148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6149 ;; Tracked objects:
  6150 ;;		On entry : 0/0
  6151 ;;		On exit  : 0/0
  6152 ;;		Unchanged: 0/0
  6153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6154 ;;      Params:         0       0       0       0       0       0       0
  6155 ;;      Locals:         0       0       0       0       0       0       0
  6156 ;;      Temps:          0       0       0       0       0       0       0
  6157 ;;      Totals:         0       0       0       0       0       0       0
  6158 ;;Total ram usage:        0 bytes
  6159 ;; Hardware stack levels used:    1
  6160 ;; This function calls:
  6161 ;;		Nothing
  6162 ;; This function is called by:
  6163 ;;		_INTERRUPT_InterruptManager
  6164 ;; This function uses a non-reentrant model
  6165 ;;
  6166                           
  6167                           	psect	text37
  6168  001022                     __ptext37:
  6169                           	opt stack 0
  6170  001022                     _EUSART2_Transmit_ISR:
  6171                           	opt stack 24
  6172                           
  6173                           ;eusart2.c: 158: if (sizeof (eusart2TxBuffer) > eusart2TxBufferRemaining) {
  6174                           
  6175                           ;incstack = 0
  6176  001022  0E08               	movlw	8
  6177  001024  6043               	cpfslt	_eusart2TxBufferRemaining,c	;volatile
  6178  001026  D012               	goto	i2l97
  6179                           
  6180                           ;eusart2.c: 159: TXREG2 = eusart2TxBuffer[eusart2TxTail++];
  6181  001028  5039               	movf	_eusart2TxTail,w,c
  6182  00102A  0D01               	mullw	1
  6183  00102C  0E90               	movlw	low _eusart2TxBuffer
  6184  00102E  24F3               	addwf	prodl,w,c
  6185  001030  6ED9               	movwf	fsr2l,c
  6186  001032  0E00               	movlw	high _eusart2TxBuffer
  6187  001034  20F4               	addwfc	prodh,w,c
  6188  001036  6EDA               	movwf	fsr2h,c
  6189  001038  50DF               	movf	indf2,w,c
  6190  00103A  6E73               	movwf	3955,c	;volatile
  6191  00103C  2A39               	incf	_eusart2TxTail,f,c
  6192                           
  6193                           ;eusart2.c: 160: if (sizeof (eusart2TxBuffer) <= eusart2TxTail) {
  6194  00103E  0E07               	movlw	7
  6195  001040  6439               	cpfsgt	_eusart2TxTail,c
  6196  001042  D002               	goto	i2l2678
  6197                           
  6198                           ;eusart2.c: 161: eusart2TxTail = 0;
  6199  001044  0E00               	movlw	0
  6200  001046  6E39               	movwf	_eusart2TxTail,c
  6201  001048                     i2l2678:
  6202                           
  6203                           ;eusart2.c: 162: }
  6204                           ;eusart2.c: 163: eusart2TxBufferRemaining++;
  6205  001048  2A43               	incf	_eusart2TxBufferRemaining,f,c	;volatile
  6206                           
  6207                           ;eusart2.c: 164: } else {
  6208  00104A  0012               	return	
  6209  00104C                     i2l97:
  6210                           
  6211                           ;eusart2.c: 165: PIE3bits.TX2IE = 0;
  6212  00104C  98A3               	bcf	4003,4,c	;volatile
  6213  00104E  0012               	return	
  6214  001050                     __end_of_EUSART2_Transmit_ISR:
  6215                           	opt stack 0
  6216                           pclatu	equ	0xFFB
  6217                           pclath	equ	0xFFA
  6218                           tblptru	equ	0xFF8
  6219                           tblptrh	equ	0xFF7
  6220                           tblptrl	equ	0xFF6
  6221                           tablat	equ	0xFF5
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           intcon2	equ	0xFF1
  6226                           indf0	equ	0xFEF
  6227                           postinc0	equ	0xFEE
  6228                           fsr0h	equ	0xFEA
  6229                           fsr0l	equ	0xFE9
  6230                           wreg	equ	0xFE8
  6231                           postdec1	equ	0xFE5
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function _EUSART2_Receive_ISR *****************
  6243 ;; Defined at:
  6244 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;		None
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;		None
  6249 ;; Return value:  Size  Location     Type
  6250 ;;                  1    wreg      void 
  6251 ;; Registers used:
  6252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6253 ;; Tracked objects:
  6254 ;;		On entry : 0/0
  6255 ;;		On exit  : 0/0
  6256 ;;		Unchanged: 0/0
  6257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6258 ;;      Params:         0       0       0       0       0       0       0
  6259 ;;      Locals:         0       0       0       0       0       0       0
  6260 ;;      Temps:          0       0       0       0       0       0       0
  6261 ;;      Totals:         0       0       0       0       0       0       0
  6262 ;;Total ram usage:        0 bytes
  6263 ;; Hardware stack levels used:    1
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_INTERRUPT_InterruptManager
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text38
  6272  00107C                     __ptext38:
  6273                           	opt stack 0
  6274  00107C                     _EUSART2_Receive_ISR:
  6275                           	opt stack 24
  6276                           
  6277                           ;eusart2.c: 170: if (1 == RC2STAbits.OERR) {
  6278                           
  6279                           ;incstack = 0
  6280  00107C  A271               	btfss	3953,1,c	;volatile
  6281  00107E  D002               	goto	i2l2684
  6282                           
  6283                           ;eusart2.c: 173: RC2STAbits.CREN = 0;
  6284  001080  9871               	bcf	3953,4,c	;volatile
  6285                           
  6286                           ;eusart2.c: 174: RC2STAbits.CREN = 1;
  6287  001082  8871               	bsf	3953,4,c	;volatile
  6288  001084                     i2l2684:
  6289                           
  6290                           ;eusart2.c: 175: }
  6291                           ;eusart2.c: 178: eusart2RxBuffer[eusart2RxHead++] = RCREG2;
  6292  001084  5036               	movf	_eusart2RxHead,w,c
  6293  001086  0D01               	mullw	1
  6294  001088  0E88               	movlw	low _eusart2RxBuffer
  6295  00108A  24F3               	addwf	prodl,w,c
  6296  00108C  6ED9               	movwf	fsr2l,c
  6297  00108E  0E00               	movlw	high _eusart2RxBuffer
  6298  001090  20F4               	addwfc	prodh,w,c
  6299  001092  6EDA               	movwf	fsr2h,c
  6300  001094  CF74 FFDF          	movff	3956,indf2	;volatile
  6301  001098  2A36               	incf	_eusart2RxHead,f,c
  6302                           
  6303                           ;eusart2.c: 179: if (sizeof (eusart2RxBuffer) <= eusart2RxHead) {
  6304  00109A  0E07               	movlw	7
  6305  00109C  6436               	cpfsgt	_eusart2RxHead,c
  6306  00109E  D002               	goto	i2l2692
  6307                           
  6308                           ;eusart2.c: 180: eusart2RxHead = 0;
  6309  0010A0  0E00               	movlw	0
  6310  0010A2  6E36               	movwf	_eusart2RxHead,c
  6311  0010A4                     i2l2692:
  6312                           
  6313                           ;eusart2.c: 181: }
  6314                           ;eusart2.c: 182: eusart2RxCount++;
  6315  0010A4  2A35               	incf	_eusart2RxCount,f,c	;volatile
  6316  0010A6  0012               	return		;funcret
  6317  0010A8                     __end_of_EUSART2_Receive_ISR:
  6318                           	opt stack 0
  6319                           pclatu	equ	0xFFB
  6320                           pclath	equ	0xFFA
  6321                           tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           intcon	equ	0xFF2
  6328                           intcon2	equ	0xFF1
  6329                           indf0	equ	0xFEF
  6330                           postinc0	equ	0xFEE
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           postdec1	equ	0xFE5
  6335                           fsr1h	equ	0xFE2
  6336                           fsr1l	equ	0xFE1
  6337                           indf2	equ	0xFDF
  6338                           postinc2	equ	0xFDE
  6339                           postdec2	equ	0xFDD
  6340                           plusw2	equ	0xFDB
  6341                           fsr2h	equ	0xFDA
  6342                           fsr2l	equ	0xFD9
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function _EUSART1_Transmit_ISR *****************
  6346 ;; Defined at:
  6347 ;;		line 150 in file "UART.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;		None
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  1    wreg      void 
  6354 ;; Registers used:
  6355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6361 ;;      Params:         0       0       0       0       0       0       0
  6362 ;;      Locals:         0       0       0       0       0       0       0
  6363 ;;      Temps:          0       0       0       0       0       0       0
  6364 ;;      Totals:         0       0       0       0       0       0       0
  6365 ;;Total ram usage:        0 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    2
  6368 ;; This function calls:
  6369 ;;		_UART_buff_get
  6370 ;;		_UART_buff_size
  6371 ;; This function is called by:
  6372 ;;		_INTERRUPT_InterruptManager
  6373 ;; This function uses a non-reentrant model
  6374 ;;
  6375                           
  6376                           	psect	text39
  6377  000FF0                     __ptext39:
  6378                           	opt stack 0
  6379  000FF0                     _EUSART1_Transmit_ISR:
  6380                           	opt stack 22
  6381                           
  6382                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  6383                           
  6384                           ;incstack = 0
  6385  000FF0  0E00               	movlw	low _output_buffer
  6386  000FF2  6E01               	movwf	UART_buff_size@_this,c
  6387  000FF4  0E03               	movlw	high _output_buffer
  6388  000FF6  6E02               	movwf	UART_buff_size@_this+1,c
  6389  000FF8  EC12  F009         	call	_UART_buff_size	;wreg free
  6390  000FFC  BE02               	btfsc	?_UART_buff_size+1,7,c
  6391  000FFE  D00D               	goto	i2l2704
  6392  001000  5002               	movf	?_UART_buff_size+1,w,c
  6393  001002  E103               	bnz	i2u155_40
  6394  001004  0401               	decf	?_UART_buff_size,w,c
  6395  001006  A0D8               	btfss	status,0,c
  6396  001008  D008               	goto	i2l2704
  6397  00100A                     i2u155_40:
  6398                           
  6399                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  6400  00100A  0E00               	movlw	low _output_buffer
  6401  00100C  6E07               	movwf	UART_buff_get@_this,c
  6402  00100E  0E03               	movlw	high _output_buffer
  6403  001010  6E08               	movwf	UART_buff_get@_this+1,c
  6404  001012  EC3D  F005         	call	_UART_buff_get	;wreg free
  6405  001016  6EAD               	movwf	4013,c	;volatile
  6406                           
  6407                           ;UART.c: 154: } else {
  6408  001018  0012               	return	
  6409  00101A                     i2l2704:
  6410                           
  6411                           ;UART.c: 155: Transmit_stall = 1;
  6412  00101A  0E01               	movlw	1
  6413  00101C  6E44               	movwf	_Transmit_stall,c
  6414                           
  6415                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  6416  00101E  989D               	bcf	3997,4,c	;volatile
  6417  001020  0012               	return	
  6418  001022                     __end_of_EUSART1_Transmit_ISR:
  6419                           	opt stack 0
  6420                           pclatu	equ	0xFFB
  6421                           pclath	equ	0xFFA
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           intcon2	equ	0xFF1
  6430                           indf0	equ	0xFEF
  6431                           postinc0	equ	0xFEE
  6432                           fsr0h	equ	0xFEA
  6433                           fsr0l	equ	0xFE9
  6434                           wreg	equ	0xFE8
  6435                           postdec1	equ	0xFE5
  6436                           fsr1h	equ	0xFE2
  6437                           fsr1l	equ	0xFE1
  6438                           indf2	equ	0xFDF
  6439                           postinc2	equ	0xFDE
  6440                           postdec2	equ	0xFDD
  6441                           plusw2	equ	0xFDB
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446 ;; *************** function _UART_buff_size *****************
  6447 ;; Defined at:
  6448 ;;		line 102 in file "UART.c"
  6449 ;; Parameters:    Size  Location     Type
  6450 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  6451 ;;		 -> output_buffer(206), input_buffer(206), 
  6452 ;; Auto vars:     Size  Location     Type
  6453 ;;		None
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  2    0[COMRAM] int 
  6456 ;; Registers used:
  6457 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6463 ;;      Params:         2       0       0       0       0       0       0
  6464 ;;      Locals:         0       0       0       0       0       0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0
  6466 ;;      Totals:         2       0       0       0       0       0       0
  6467 ;;Total ram usage:        2 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; This function calls:
  6470 ;;		Nothing
  6471 ;; This function is called by:
  6472 ;;		_EUSART1_Transmit_ISR
  6473 ;;		_Receive_available
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text40
  6478  001224                     __ptext40:
  6479                           	opt stack 0
  6480  001224                     _UART_buff_size:
  6481                           	opt stack 23
  6482                           
  6483                           ;UART.c: 103: return (_this->count);
  6484                           
  6485                           ;incstack = 0
  6486  001224  EE20 F0CC          	lfsr	2,204
  6487  001228  5001               	movf	UART_buff_size@_this,w,c
  6488  00122A  26D9               	addwf	fsr2l,f,c
  6489  00122C  5002               	movf	UART_buff_size@_this+1,w,c
  6490  00122E  22DA               	addwfc	fsr2h,f,c
  6491  001230  CFDE F001          	movff	postinc2,?_UART_buff_size
  6492  001234  CFDD F002          	movff	postdec2,?_UART_buff_size+1
  6493  001238  0012               	return	
  6494  00123A                     __end_of_UART_buff_size:
  6495                           	opt stack 0
  6496                           pclatu	equ	0xFFB
  6497                           pclath	equ	0xFFA
  6498                           tblptru	equ	0xFF8
  6499                           tblptrh	equ	0xFF7
  6500                           tblptrl	equ	0xFF6
  6501                           tablat	equ	0xFF5
  6502                           prodh	equ	0xFF4
  6503                           prodl	equ	0xFF3
  6504                           intcon	equ	0xFF2
  6505                           intcon2	equ	0xFF1
  6506                           indf0	equ	0xFEF
  6507                           postinc0	equ	0xFEE
  6508                           fsr0h	equ	0xFEA
  6509                           fsr0l	equ	0xFE9
  6510                           wreg	equ	0xFE8
  6511                           postdec1	equ	0xFE5
  6512                           fsr1h	equ	0xFE2
  6513                           fsr1l	equ	0xFE1
  6514                           indf2	equ	0xFDF
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           plusw2	equ	0xFDB
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function _UART_buff_get *****************
  6523 ;; Defined at:
  6524 ;;		line 81 in file "UART.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6527 ;;		 -> output_buffer(206), input_buffer(206), 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  c               1   10[COMRAM] unsigned char 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  1    wreg      unsigned char 
  6532 ;; Registers used:
  6533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6539 ;;      Params:         2       0       0       0       0       0       0
  6540 ;;      Locals:         1       0       0       0       0       0       0
  6541 ;;      Temps:          2       0       0       0       0       0       0
  6542 ;;      Totals:         5       0       0       0       0       0       0
  6543 ;;Total ram usage:        5 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    1
  6546 ;; This function calls:
  6547 ;;		_UART_buff_modulo_inc
  6548 ;; This function is called by:
  6549 ;;		_EUSART1_Transmit_ISR
  6550 ;;		_Receive_get
  6551 ;;		_Send_put
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text41
  6556  000A7A                     __ptext41:
  6557                           	opt stack 0
  6558  000A7A                     _UART_buff_get:
  6559                           	opt stack 22
  6560                           
  6561                           ;UART.c: 82: unsigned char c;
  6562                           ;UART.c: 83: if (_this->count > 0) {
  6563                           
  6564                           ;incstack = 0
  6565  000A7A  EE20 F0CC          	lfsr	2,204
  6566  000A7E  5007               	movf	UART_buff_get@_this,w,c
  6567  000A80  26D9               	addwf	fsr2l,f,c
  6568  000A82  5008               	movf	UART_buff_get@_this+1,w,c
  6569  000A84  22DA               	addwfc	fsr2h,f,c
  6570  000A86  0E01               	movlw	1
  6571  000A88  BEDB               	btfsc	plusw2,7,c
  6572  000A8A  D03C               	goto	i2l2622
  6573  000A8C  0E01               	movlw	1
  6574  000A8E  50DB               	movf	plusw2,w,c
  6575  000A90  E103               	bnz	i2u145_40
  6576  000A92  04DE               	decf	postinc2,w,c
  6577  000A94  A0D8               	btfss	status,0,c
  6578  000A96  D036               	goto	i2l2622
  6579  000A98                     i2u145_40:
  6580                           
  6581                           ;UART.c: 84: c = _this->buf[_this->tail];
  6582  000A98  EE20 F0CA          	lfsr	2,202
  6583  000A9C  5007               	movf	UART_buff_get@_this,w,c
  6584  000A9E  26D9               	addwf	fsr2l,f,c
  6585  000AA0  5008               	movf	UART_buff_get@_this+1,w,c
  6586  000AA2  22DA               	addwfc	fsr2h,f,c
  6587  000AA4  CFDE F009          	movff	postinc2,??_UART_buff_get
  6588  000AA8  CFDD F00A          	movff	postdec2,??_UART_buff_get+1
  6589  000AAC  5009               	movf	??_UART_buff_get,w,c
  6590  000AAE  2407               	addwf	UART_buff_get@_this,w,c
  6591  000AB0  6ED9               	movwf	fsr2l,c
  6592  000AB2  500A               	movf	??_UART_buff_get+1,w,c
  6593  000AB4  2008               	addwfc	UART_buff_get@_this+1,w,c
  6594  000AB6  6EDA               	movwf	fsr2h,c
  6595  000AB8  50DF               	movf	indf2,w,c
  6596  000ABA  6E0B               	movwf	UART_buff_get@c,c
  6597                           
  6598                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6599  000ABC  EE20 F0CA          	lfsr	2,202
  6600  000AC0  5007               	movf	UART_buff_get@_this,w,c
  6601  000AC2  26D9               	addwf	fsr2l,f,c
  6602  000AC4  5008               	movf	UART_buff_get@_this+1,w,c
  6603  000AC6  22DA               	addwfc	fsr2h,f,c
  6604  000AC8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6605  000ACC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6606  000AD0  0E00               	movlw	0
  6607  000AD2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6608  000AD4  0EC8               	movlw	200
  6609  000AD6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6610  000AD8  EC69  F008         	call	_UART_buff_modulo_inc	;wreg free
  6611  000ADC  EE20 F0CA          	lfsr	2,202
  6612  000AE0  5007               	movf	UART_buff_get@_this,w,c
  6613  000AE2  26D9               	addwf	fsr2l,f,c
  6614  000AE4  5008               	movf	UART_buff_get@_this+1,w,c
  6615  000AE6  22DA               	addwfc	fsr2h,f,c
  6616  000AE8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6617  000AEC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6618                           
  6619                           ;UART.c: 86: --_this->count;
  6620  000AF0  EE20 F0CC          	lfsr	2,204
  6621  000AF4  5007               	movf	UART_buff_get@_this,w,c
  6622  000AF6  26D9               	addwf	fsr2l,f,c
  6623  000AF8  5008               	movf	UART_buff_get@_this+1,w,c
  6624  000AFA  22DA               	addwfc	fsr2h,f,c
  6625  000AFC  06DE               	decf	postinc2,f,c
  6626  000AFE  0E00               	movlw	0
  6627  000B00  5ADD               	subwfb	postdec2,f,c
  6628                           
  6629                           ;UART.c: 87: } else {
  6630  000B02  D002               	goto	i2l529
  6631  000B04                     i2l2622:
  6632                           
  6633                           ;UART.c: 88: c = 0;
  6634  000B04  0E00               	movlw	0
  6635  000B06  6E0B               	movwf	UART_buff_get@c,c
  6636  000B08                     i2l529:
  6637                           
  6638                           ;UART.c: 89: }
  6639                           ;UART.c: 90: return (c);
  6640  000B08  500B               	movf	UART_buff_get@c,w,c
  6641  000B0A  0012               	return	
  6642  000B0C                     __end_of_UART_buff_get:
  6643                           	opt stack 0
  6644                           pclatu	equ	0xFFB
  6645                           pclath	equ	0xFFA
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           intcon2	equ	0xFF1
  6654                           indf0	equ	0xFEF
  6655                           postinc0	equ	0xFEE
  6656                           fsr0h	equ	0xFEA
  6657                           fsr0l	equ	0xFE9
  6658                           wreg	equ	0xFE8
  6659                           postdec1	equ	0xFE5
  6660                           fsr1h	equ	0xFE2
  6661                           fsr1l	equ	0xFE1
  6662                           indf2	equ	0xFDF
  6663                           postinc2	equ	0xFDE
  6664                           postdec2	equ	0xFDD
  6665                           plusw2	equ	0xFDB
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670 ;; *************** function _EUSART1_Receive_ISR *****************
  6671 ;; Defined at:
  6672 ;;		line 139 in file "UART.c"
  6673 ;; Parameters:    Size  Location     Type
  6674 ;;		None
  6675 ;; Auto vars:     Size  Location     Type
  6676 ;;  data            1   11[COMRAM] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  1    wreg      void 
  6679 ;; Registers used:
  6680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6686 ;;      Params:         0       0       0       0       0       0       0
  6687 ;;      Locals:         1       0       0       0       0       0       0
  6688 ;;      Temps:          0       0       0       0       0       0       0
  6689 ;;      Totals:         1       0       0       0       0       0       0
  6690 ;;Total ram usage:        1 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    2
  6693 ;; This function calls:
  6694 ;;		_UART_buff_put
  6695 ;; This function is called by:
  6696 ;;		_INTERRUPT_InterruptManager
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text42
  6701  0011BC                     __ptext42:
  6702                           	opt stack 0
  6703  0011BC                     _EUSART1_Receive_ISR:
  6704                           	opt stack 22
  6705                           
  6706                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  6707                           
  6708                           ;incstack = 0
  6709  0011BC  A2AB               	btfss	4011,1,c	;volatile
  6710  0011BE  D002               	goto	i2l560
  6711                           
  6712                           ;UART.c: 143: RC1STAbits.CREN = 0;
  6713  0011C0  98AB               	bcf	4011,4,c	;volatile
  6714                           
  6715                           ;UART.c: 144: RC1STAbits.CREN = 1;
  6716  0011C2  88AB               	bsf	4011,4,c	;volatile
  6717  0011C4                     i2l560:
  6718                           
  6719                           ;UART.c: 145: }
  6720                           ;UART.c: 146: unsigned char data = RCREG1;
  6721  0011C4  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  6722                           
  6723                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  6724  0011C8  0E00               	movlw	low _input_buffer
  6725  0011CA  6E07               	movwf	UART_buff_put@_this,c
  6726  0011CC  0E02               	movlw	high _input_buffer
  6727  0011CE  6E08               	movwf	UART_buff_put@_this+1,c
  6728  0011D0  C00C  F009         	movff	EUSART1_Receive_ISR@data,UART_buff_put@c
  6729  0011D4  EC64  F002         	call	_UART_buff_put	;wreg free
  6730  0011D8  0012               	return		;funcret
  6731  0011DA                     __end_of_EUSART1_Receive_ISR:
  6732                           	opt stack 0
  6733                           pclatu	equ	0xFFB
  6734                           pclath	equ	0xFFA
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           intcon2	equ	0xFF1
  6743                           indf0	equ	0xFEF
  6744                           postinc0	equ	0xFEE
  6745                           fsr0h	equ	0xFEA
  6746                           fsr0l	equ	0xFE9
  6747                           wreg	equ	0xFE8
  6748                           postdec1	equ	0xFE5
  6749                           fsr1h	equ	0xFE2
  6750                           fsr1l	equ	0xFE1
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           plusw2	equ	0xFDB
  6755                           fsr2h	equ	0xFDA
  6756                           fsr2l	equ	0xFD9
  6757                           status	equ	0xFD8
  6758                           
  6759 ;; *************** function _UART_buff_put *****************
  6760 ;; Defined at:
  6761 ;;		line 68 in file "UART.c"
  6762 ;; Parameters:    Size  Location     Type
  6763 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  6764 ;;		 -> output_buffer(206), input_buffer(206), 
  6765 ;;  c               1    8[COMRAM] const unsigned char 
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  1    wreg      void 
  6770 ;; Registers used:
  6771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6777 ;;      Params:         3       0       0       0       0       0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0
  6779 ;;      Temps:          2       0       0       0       0       0       0
  6780 ;;      Totals:         5       0       0       0       0       0       0
  6781 ;;Total ram usage:        5 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; Hardware stack levels required when called:    1
  6784 ;; This function calls:
  6785 ;;		_UART_buff_modulo_inc
  6786 ;; This function is called by:
  6787 ;;		_EUSART1_Receive_ISR
  6788 ;;		_Send_put
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           	psect	text43
  6793  0004C8                     __ptext43:
  6794                           	opt stack 0
  6795  0004C8                     _UART_buff_put:
  6796                           	opt stack 22
  6797                           
  6798                           ;UART.c: 69: if (_this->count < 200) {
  6799                           
  6800                           ;incstack = 0
  6801  0004C8  EE20 F0CC          	lfsr	2,204
  6802  0004CC  5007               	movf	UART_buff_put@_this,w,c
  6803  0004CE  26D9               	addwf	fsr2l,f,c
  6804  0004D0  5008               	movf	UART_buff_put@_this+1,w,c
  6805  0004D2  22DA               	addwfc	fsr2h,f,c
  6806  0004D4  0E01               	movlw	1
  6807  0004D6  BEDB               	btfsc	plusw2,7,c
  6808  0004D8  D007               	goto	i2l2602
  6809  0004DA  0E01               	movlw	1
  6810  0004DC  50DB               	movf	plusw2,w,c
  6811  0004DE  E13A               	bnz	i2l2608
  6812  0004E0  0EC8               	movlw	200
  6813  0004E2  5CDE               	subwf	postinc2,w,c
  6814  0004E4  B0D8               	btfsc	status,0,c
  6815  0004E6  D036               	goto	i2l2608
  6816  0004E8                     i2l2602:
  6817                           
  6818                           ;UART.c: 70: _this->buf[_this->head] = c;
  6819  0004E8  EE20 F0C8          	lfsr	2,200
  6820  0004EC  5007               	movf	UART_buff_put@_this,w,c
  6821  0004EE  26D9               	addwf	fsr2l,f,c
  6822  0004F0  5008               	movf	UART_buff_put@_this+1,w,c
  6823  0004F2  22DA               	addwfc	fsr2h,f,c
  6824  0004F4  CFDE F00A          	movff	postinc2,??_UART_buff_put
  6825  0004F8  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  6826  0004FC  500A               	movf	??_UART_buff_put,w,c
  6827  0004FE  2407               	addwf	UART_buff_put@_this,w,c
  6828  000500  6ED9               	movwf	fsr2l,c
  6829  000502  500B               	movf	??_UART_buff_put+1,w,c
  6830  000504  2008               	addwfc	UART_buff_put@_this+1,w,c
  6831  000506  6EDA               	movwf	fsr2h,c
  6832  000508  C009  FFDF         	movff	UART_buff_put@c,indf2
  6833                           
  6834                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6835  00050C  EE20 F0C8          	lfsr	2,200
  6836  000510  5007               	movf	UART_buff_put@_this,w,c
  6837  000512  26D9               	addwf	fsr2l,f,c
  6838  000514  5008               	movf	UART_buff_put@_this+1,w,c
  6839  000516  22DA               	addwfc	fsr2h,f,c
  6840  000518  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6841  00051C  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6842  000520  0E00               	movlw	0
  6843  000522  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6844  000524  0EC8               	movlw	200
  6845  000526  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6846  000528  EC69  F008         	call	_UART_buff_modulo_inc	;wreg free
  6847  00052C  EE20 F0C8          	lfsr	2,200
  6848  000530  5007               	movf	UART_buff_put@_this,w,c
  6849  000532  26D9               	addwf	fsr2l,f,c
  6850  000534  5008               	movf	UART_buff_put@_this+1,w,c
  6851  000536  22DA               	addwfc	fsr2h,f,c
  6852  000538  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6853  00053C  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6854                           
  6855                           ;UART.c: 72: ++_this->count;
  6856  000540  EE20 F0CC          	lfsr	2,204
  6857  000544  5007               	movf	UART_buff_put@_this,w,c
  6858  000546  26D9               	addwf	fsr2l,f,c
  6859  000548  5008               	movf	UART_buff_put@_this+1,w,c
  6860  00054A  22DA               	addwfc	fsr2h,f,c
  6861  00054C  2ADE               	incf	postinc2,f,c
  6862  00054E  0E00               	movlw	0
  6863  000550  22DD               	addwfc	postdec2,f,c
  6864                           
  6865                           ;UART.c: 73: } else {
  6866  000552  0012               	return	
  6867  000554                     i2l2608:
  6868                           
  6869                           ;UART.c: 74: _this->buf[_this->head] = c;
  6870  000554  EE20 F0C8          	lfsr	2,200
  6871  000558  5007               	movf	UART_buff_put@_this,w,c
  6872  00055A  26D9               	addwf	fsr2l,f,c
  6873  00055C  5008               	movf	UART_buff_put@_this+1,w,c
  6874  00055E  22DA               	addwfc	fsr2h,f,c
  6875  000560  CFDE F00A          	movff	postinc2,??_UART_buff_put
  6876  000564  CFDD F00B          	movff	postdec2,??_UART_buff_put+1
  6877  000568  500A               	movf	??_UART_buff_put,w,c
  6878  00056A  2407               	addwf	UART_buff_put@_this,w,c
  6879  00056C  6ED9               	movwf	fsr2l,c
  6880  00056E  500B               	movf	??_UART_buff_put+1,w,c
  6881  000570  2008               	addwfc	UART_buff_put@_this+1,w,c
  6882  000572  6EDA               	movwf	fsr2h,c
  6883  000574  C009  FFDF         	movff	UART_buff_put@c,indf2
  6884                           
  6885                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  6886  000578  EE20 F0C8          	lfsr	2,200
  6887  00057C  5007               	movf	UART_buff_put@_this,w,c
  6888  00057E  26D9               	addwf	fsr2l,f,c
  6889  000580  5008               	movf	UART_buff_put@_this+1,w,c
  6890  000582  22DA               	addwfc	fsr2h,f,c
  6891  000584  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6892  000588  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6893  00058C  0E00               	movlw	0
  6894  00058E  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6895  000590  0EC8               	movlw	200
  6896  000592  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6897  000594  EC69  F008         	call	_UART_buff_modulo_inc	;wreg free
  6898  000598  EE20 F0C8          	lfsr	2,200
  6899  00059C  5007               	movf	UART_buff_put@_this,w,c
  6900  00059E  26D9               	addwf	fsr2l,f,c
  6901  0005A0  5008               	movf	UART_buff_put@_this+1,w,c
  6902  0005A2  22DA               	addwfc	fsr2h,f,c
  6903  0005A4  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6904  0005A8  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6905                           
  6906                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  6907  0005AC  EE20 F0CA          	lfsr	2,202
  6908  0005B0  5007               	movf	UART_buff_put@_this,w,c
  6909  0005B2  26D9               	addwf	fsr2l,f,c
  6910  0005B4  5008               	movf	UART_buff_put@_this+1,w,c
  6911  0005B6  22DA               	addwfc	fsr2h,f,c
  6912  0005B8  CFDE F001          	movff	postinc2,UART_buff_modulo_inc@value
  6913  0005BC  CFDD F002          	movff	postdec2,UART_buff_modulo_inc@value+1
  6914  0005C0  0E00               	movlw	0
  6915  0005C2  6E04               	movwf	UART_buff_modulo_inc@modulus+1,c
  6916  0005C4  0EC8               	movlw	200
  6917  0005C6  6E03               	movwf	UART_buff_modulo_inc@modulus,c
  6918  0005C8  EC69  F008         	call	_UART_buff_modulo_inc	;wreg free
  6919  0005CC  EE20 F0CA          	lfsr	2,202
  6920  0005D0  5007               	movf	UART_buff_put@_this,w,c
  6921  0005D2  26D9               	addwf	fsr2l,f,c
  6922  0005D4  5008               	movf	UART_buff_put@_this+1,w,c
  6923  0005D6  22DA               	addwfc	fsr2h,f,c
  6924  0005D8  C001  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  6925  0005DC  C002  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  6926  0005E0  0012               	return	
  6927  0005E2                     __end_of_UART_buff_put:
  6928                           	opt stack 0
  6929                           pclatu	equ	0xFFB
  6930                           pclath	equ	0xFFA
  6931                           tblptru	equ	0xFF8
  6932                           tblptrh	equ	0xFF7
  6933                           tblptrl	equ	0xFF6
  6934                           tablat	equ	0xFF5
  6935                           prodh	equ	0xFF4
  6936                           prodl	equ	0xFF3
  6937                           intcon	equ	0xFF2
  6938                           intcon2	equ	0xFF1
  6939                           indf0	equ	0xFEF
  6940                           postinc0	equ	0xFEE
  6941                           fsr0h	equ	0xFEA
  6942                           fsr0l	equ	0xFE9
  6943                           wreg	equ	0xFE8
  6944                           postdec1	equ	0xFE5
  6945                           fsr1h	equ	0xFE2
  6946                           fsr1l	equ	0xFE1
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           plusw2	equ	0xFDB
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8
  6954                           
  6955 ;; *************** function _UART_buff_modulo_inc *****************
  6956 ;; Defined at:
  6957 ;;		line 106 in file "UART.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  value           2    0[COMRAM] const unsigned int 
  6960 ;;  modulus         2    2[COMRAM] const unsigned int 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  my_value        2    4[COMRAM] unsigned int 
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  2    0[COMRAM] unsigned int 
  6965 ;; Registers used:
  6966 ;;		wreg, status,2, status,0
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6972 ;;      Params:         4       0       0       0       0       0       0
  6973 ;;      Locals:         2       0       0       0       0       0       0
  6974 ;;      Temps:          0       0       0       0       0       0       0
  6975 ;;      Totals:         6       0       0       0       0       0       0
  6976 ;;Total ram usage:        6 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_UART_buff_put
  6982 ;;		_UART_buff_get
  6983 ;; This function uses a non-reentrant model
  6984 ;;
  6985                           
  6986                           	psect	text44
  6987  0010D2                     __ptext44:
  6988                           	opt stack 0
  6989  0010D2                     _UART_buff_modulo_inc:
  6990                           	opt stack 22
  6991                           
  6992                           ;UART.c: 107: unsigned int my_value = value + 1;
  6993                           
  6994                           ;incstack = 0
  6995  0010D2  0E01               	movlw	1
  6996  0010D4  2401               	addwf	UART_buff_modulo_inc@value,w,c
  6997  0010D6  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  6998  0010D8  0E00               	movlw	0
  6999  0010DA  2002               	addwfc	UART_buff_modulo_inc@value+1,w,c
  7000  0010DC  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7001                           
  7002                           ;UART.c: 108: if (my_value >= modulus) {
  7003  0010DE  5003               	movf	UART_buff_modulo_inc@modulus,w,c
  7004  0010E0  5C05               	subwf	UART_buff_modulo_inc@my_value,w,c
  7005  0010E2  5004               	movf	UART_buff_modulo_inc@modulus+1,w,c
  7006  0010E4  5806               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  7007  0010E6  A0D8               	btfss	status,0,c
  7008  0010E8  D004               	goto	i2l2350
  7009                           
  7010                           ;UART.c: 109: my_value = 0;
  7011  0010EA  0E00               	movlw	0
  7012  0010EC  6E06               	movwf	UART_buff_modulo_inc@my_value+1,c
  7013  0010EE  0E00               	movlw	0
  7014  0010F0  6E05               	movwf	UART_buff_modulo_inc@my_value,c
  7015  0010F2                     i2l2350:
  7016                           
  7017                           ;UART.c: 110: }
  7018                           ;UART.c: 111: return (my_value);
  7019  0010F2  C005  F001         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  7020  0010F6  C006  F002         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  7021  0010FA  0012               	return	
  7022  0010FC                     __end_of_UART_buff_modulo_inc:
  7023                           	opt stack 0
  7024                           pclatu	equ	0xFFB
  7025                           pclath	equ	0xFFA
  7026                           tblptru	equ	0xFF8
  7027                           tblptrh	equ	0xFF7
  7028                           tblptrl	equ	0xFF6
  7029                           tablat	equ	0xFF5
  7030                           prodh	equ	0xFF4
  7031                           prodl	equ	0xFF3
  7032                           intcon	equ	0xFF2
  7033                           intcon2	equ	0xFF1
  7034                           indf0	equ	0xFEF
  7035                           postinc0	equ	0xFEE
  7036                           fsr0h	equ	0xFEA
  7037                           fsr0l	equ	0xFE9
  7038                           wreg	equ	0xFE8
  7039                           postdec1	equ	0xFE5
  7040                           fsr1h	equ	0xFE2
  7041                           fsr1l	equ	0xFE1
  7042                           indf2	equ	0xFDF
  7043                           postinc2	equ	0xFDE
  7044                           postdec2	equ	0xFDD
  7045                           plusw2	equ	0xFDB
  7046                           fsr2h	equ	0xFDA
  7047                           fsr2l	equ	0xFD9
  7048                           status	equ	0xFD8
  7049                           pclatu	equ	0xFFB
  7050                           pclath	equ	0xFFA
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           intcon2	equ	0xFF1
  7059                           indf0	equ	0xFEF
  7060                           postinc0	equ	0xFEE
  7061                           fsr0h	equ	0xFEA
  7062                           fsr0l	equ	0xFE9
  7063                           wreg	equ	0xFE8
  7064                           postdec1	equ	0xFE5
  7065                           fsr1h	equ	0xFE2
  7066                           fsr1l	equ	0xFE1
  7067                           indf2	equ	0xFDF
  7068                           postinc2	equ	0xFDE
  7069                           postdec2	equ	0xFDD
  7070                           plusw2	equ	0xFDB
  7071                           fsr2h	equ	0xFDA
  7072                           fsr2l	equ	0xFD9
  7073                           status	equ	0xFD8
  7074                           
  7075                           	psect	rparam
  7076  0000                     pclatu	equ	0xFFB
  7077                           pclath	equ	0xFFA
  7078                           tblptru	equ	0xFF8
  7079                           tblptrh	equ	0xFF7
  7080                           tblptrl	equ	0xFF6
  7081                           tablat	equ	0xFF5
  7082                           prodh	equ	0xFF4
  7083                           prodl	equ	0xFF3
  7084                           intcon	equ	0xFF2
  7085                           intcon2	equ	0xFF1
  7086                           indf0	equ	0xFEF
  7087                           postinc0	equ	0xFEE
  7088                           fsr0h	equ	0xFEA
  7089                           fsr0l	equ	0xFE9
  7090                           wreg	equ	0xFE8
  7091                           postdec1	equ	0xFE5
  7092                           fsr1h	equ	0xFE2
  7093                           fsr1l	equ	0xFE1
  7094                           indf2	equ	0xFDF
  7095                           postinc2	equ	0xFDE
  7096                           postdec2	equ	0xFDD
  7097                           plusw2	equ	0xFDB
  7098                           fsr2h	equ	0xFDA
  7099                           fsr2l	equ	0xFD9
  7100                           status	equ	0xFD8
  7101                           
  7102                           	psect	temp
  7103  000045                     btemp:
  7104                           	opt stack 0
  7105  000045                     	ds	1
  7106  0000                     int$flags	set	btemp
  7107                           pclatu	equ	0xFFB
  7108                           pclath	equ	0xFFA
  7109                           tblptru	equ	0xFF8
  7110                           tblptrh	equ	0xFF7
  7111                           tblptrl	equ	0xFF6
  7112                           tablat	equ	0xFF5
  7113                           prodh	equ	0xFF4
  7114                           prodl	equ	0xFF3
  7115                           intcon	equ	0xFF2
  7116                           intcon2	equ	0xFF1
  7117                           indf0	equ	0xFEF
  7118                           postinc0	equ	0xFEE
  7119                           fsr0h	equ	0xFEA
  7120                           fsr0l	equ	0xFE9
  7121                           wreg	equ	0xFE8
  7122                           postdec1	equ	0xFE5
  7123                           fsr1h	equ	0xFE2
  7124                           fsr1l	equ	0xFE1
  7125                           indf2	equ	0xFDF
  7126                           postinc2	equ	0xFDE
  7127                           postdec2	equ	0xFDD
  7128                           plusw2	equ	0xFDB
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8


Data Sizes:
    Strings     10
    Constant    455
    Data        10
    BSS         940
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      68
    BANK0           160     25     130
    BANK1           256      0     206
    BANK2           256      0     206
    BANK3           256      0     206
    BANK4           256      0     200
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[7]), ChargerData(BANK0[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    NokiaStr@str	PTR unsigned char  size(2) Largest target is 11
		 -> ddata(BANK0[11]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK3[206]), input_buffer(BANK2[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1419(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK4[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_available	PTR FTN()int  size(2) Largest target is 1
		 -> Absolute function(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 0
		 -> NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _main->_NokiaStr
    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _CRCcheck->_crcBufS_get
    _SetCharger->_printf
    _printf->_putch
    _putch->_EUSART2_Write
    _Precharge->_Delay
    _gotoXy->_SPI2_Exchange8bit
    _NokiaStr->___wmul
    _NokiaStart->_blackLcd
    _NokiaStart->_clearLcd
    _clearLcd->_SPI2_Exchange8bit
    _blackLcd->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondECU->_sendData
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13563
                              _Delay
                         _NokiaStart
                           _NokiaStr
                  _SYSTEM_Initialize
                           _clearLcd
                             _gotoXy
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   11775
                          _Precharge
                         _SetCharger
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    5057
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    2997
                                              0 BANK0      5     5      0
                               _CRC8
          _FastTransfer_buffer_flush
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1607
                                             37 COMRAM     1     1      0
                                              2 BANK0      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0    5270
                                              7 BANK0     18    18      0
                               _CRC8
                           _CRCcheck
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    3799
                                              0 BANK0      7     7      0
                               _CRC8
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (2) _SetCharger                                           3     1      2     828
                                              0 BANK0      3     1      2
                             _SetMux
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              19    15      4     519
                                             28 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0      93
                                             27 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (5) _EUSART2_Write                                        1     1      0      62
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SetMux                                               1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Precharge                                            5     5      0     620
                                              0 BANK0      5     5      0
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     453
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (1) _gotoXy                                               2     1      1     238
                                             27 COMRAM     2     1      1
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _NokiaStr                                             8     5      3     769
                                             32 COMRAM     6     3      3
                                              0 BANK0      2     2      0
                  _SPI2_Exchange8bit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     386
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _NokiaStart                                           0     0      0     229
                  _SPI2_Exchange8bit
                           _blackLcd
                           _clearLcd
 ---------------------------------------------------------------------------------
 (1) _clearLcd                                             2     2      0      99
                                             27 COMRAM     2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _blackLcd                                             2     2      0      99
                                             27 COMRAM     2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (2) _SPI2_Exchange8bit                                    1     1      0      31
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    2289
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART2_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0    1100
                      _UART_buff_get
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (8) _UART_buff_size                                       2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _UART_buff_get                                        5     3      2     950
                                              6 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  1     1      0    1189
                                             11 COMRAM     1     1      0
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (8) _UART_buff_put                                        5     2      3    1166
                                              6 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _UART_buff_modulo_inc                                 6     2      4     602
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _NokiaStart
     _SPI2_Exchange8bit
     _blackLcd
       _SPI2_Exchange8bit
     _clearLcd
       _SPI2_Exchange8bit
   _NokiaStr
     _SPI2_Exchange8bit
     ___wmul
   _SYSTEM_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _clearLcd
     _SPI2_Exchange8bit
   _gotoXy
     _SPI2_Exchange8bit
   _updateComms
     _Precharge
       _Delay
     _SetCharger
       _SetMux
       _printf
         _putch
           _EUSART2_Write
     _receiveData
       _CRC8
       _CRCcheck
         _CRC8
         _crcBufS_get
         _crcBufS_status_put
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         _CRC8
         _FastTransfer_buffer_flush
           _memset
         _crcBufS_put

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
     _UART_buff_put
       _UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_get
       _UART_buff_modulo_inc
     _UART_buff_size
   _EUSART2_Receive_ISR
   _EUSART2_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      C8      13       78.1%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      CE       8       80.5%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      CE       6       80.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     19      82       4       81.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3F8       9        0.0%
DATA                 0      0     3F8      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Apr 22 00:51:02 2016

      __end_of_FastTransfer_buffer_flush 0DE2                                        _i 003A  
                           _rx_array_inx 003F                                       l85 0F2A  
                    ___wmul@multiplicand 001D                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l218 1242  
                                    l370 0F00                                      l611 099C  
                                    l604 0994                                      l633 0F56  
                                    l473 09E4                                      l619 09DE  
                                    l644 0F62                                      l484 0A78  
                                    l397 00FC                                      l639 0F5C  
                                    l649 0F68                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                                     l3010 0EEA  
                                   l3004 0ED4                                     l3020 0F0C  
                                   l3102 0E64                                     l3110 0CC0  
                                   l3040 037C                                     l3112 0CC6  
                                   l3018 0F06                                     l3130 09FC  
                                   l3140 0A50                                     l3300 0344  
                                   l3062 05F6                                     l3126 09E6  
                                   l2182 10C8                                     l3320 0978  
                                   l3144 0A70                                     l3216 00B2  
                                   l3154 0F6E                                     l3162 088C  
                                   l3074 067A                                     l3058 05EC  
                                   l3090 082C                                     l3082 07A6  
                                   l3226 00F2                                     l3412 0B1E  
                                   l3332 09C2                                     l3316 0962  
                                   l3172 08BC                                     l3164 0892  
                                   l3180 090C                                     l3308 0350  
                                   l3190 1118                                     l3406 0B0E  
                                   l3158 087C                                     l3182 092C  
                                   l3350 0D4C                                     l3262 0234  
                                   l3416 0B34                                     l3328 09AC  
                                   l3176 08E4                                     l3264 023A  
                                   l3256 019A                                     l3186 1108  
                                   l3426 0B96                                     l3098 0E48  
                                   l3266 024E                                     l3374 1130  
                                   l3278 02D4                                     l3470 0C2C  
                                   l3288 02E0                                     l3378 1140  
                                   l2990 0F4E                                     l2976 0F1A  
                   receiveData@crcHolder 00CD                                     l2994 105A  
                                   l2988 0F4C                                     l2998 106A  
                                   STR_1 7FFB                                     STR_2 7FFB  
                                   STR_3 7FF4                                     _CRC8 0ECE  
                                   u2140 08DC                                     _LATA 000F89  
                                   u2150 0904                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _LATD 000F8C  
                                   _LATE 000F8D                                     u2147 08D2  
                                   u2251 013E                                     u2157 08FA  
                                   u1940 0786                                     u2557 0E4E  
                                   u1961 037A                                     i2l97 104C  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 0001  
                          _EUSART2_Write 0F18                                     _main 0C22  
                        _TMR0_StartTimer 1278                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 04C8                                     start 00AC  
                          __CFG_IESO$OFF 000000             __end_of_EUSART2_Transmit_ISR 1050  
                           ___param_bank 000010                                    ?_CRC8 001B  
                __end_of_TMR0_Initialize 120E                         __end_of_CRCcheck 0A7A  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1258  
                     crcBufS_put@address 001D                                    ?_main 0001  
                                  _T0CON 000FD5                                    _LATB0 007C50  
                                  _LATB1 007C51                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATD3 007C63  
                         __CFG_DEBUG$OFF 000000                                    i2l170 004E  
                                  i2l172 005A                                    i2l174 0066  
                                  i2l178 0070                                    i2l560 11C4  
                                  i2l529 0B08                                    _TMR0H 000FD7  
                                  _TMR0L 000FD6                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 0E36                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                            _ChargerData 00D9                            __CFG_WRT3$OFF 000000  
                   _EUSART1_Transmit_ISR 0FF0                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                                  _Start 0027                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                                  _ddata 00B5                           __CFG_EBTRB$OFF 000000  
                                  _group 0029                       __CFG_MCLRE$EXTMCLR 000000  
                                  _putch 1264                           ?_EUSART2_Write 0001  
                                  tablat 000FF5                     __size_of_crcBufS_get 00E2  
                                  plusw2 000FDB                     __size_of_crcBufS_put 00D8  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 0F18                          CRCcheck@SentCRC 00C0  
                        __initialization 0B9A                        _SPI2_Exchange8bit 123A  
                           __end_of_main 0C9C                               ToSend@what 00C2  
                                 ??_CRC8 001E                       ?_SPI2_Exchange8bit 0001  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0027  
                       __end_of_NokiaStr 0B9A                            __activetblptr 000002  
                          SetMux@channel 001B                        SetCharger@Current 00C0  
                    ??_SPI2_Exchange8bit 001B                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001                               _SetCharger 0D14  
          FastTransfer_buffer_put@towhat 0024                  __end_of_TMR0_StartTimer 127C  
             __end_of_EUSART2_Initialize 0FBE                 _eusart2TxBufferRemaining 0043  
                             Precharge@i 00C1                        SetCharger@Voltage 00C1  
                                 _ANSELA 000F38                                   ?_putch 0001  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                             _NokiaStart 0FBE                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                                   Delay@i 0020  
                                 i2l2350 10F2                                   i2l2602 04E8  
                                 i2l2622 0B04                           __CFG_WDTEN$OFF 000000  
                                 i2l2608 0554                                   i2l2704 101A  
            UART_buff_modulo_inc@modulus 0003                                   i2l2692 10A4  
                                 i2l2684 1084                                   i2l2678 1048  
                                 _RCREG1 000FAE                                   _RCREG2 000F74  
                                 _OSCCON 000FD3                                   _SPBRG1 000FAF  
                                 _SPBRG2 000F75                                   _TX1STA 000FAC  
                                 _TX2STA 000F72                         __end_of_blackLcd 114C  
                                 _TXREG1 000FAD                                   _TXREG2 000F73  
                       __end_of_clearLcd 1124                __end_of_SPI2_Exchange8bit 124A  
                         __CFG_XINST$OFF 000000                                   _ToSend 11DA  
                                 _SetMux 0F52                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                            _output_buffer 0300  
                       crcBufS_get@space 001E                                   ___wmul 1172  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                       ?_TMR0_Initialize 0001                                   _gotoXy 1198  
                                 _memset 1050                                   clear_0 0BA0  
                                 clear_1 0BAC                                   clear_2 0BB8  
                                 clear_3 0BC4                                   clear_4 0BD0  
                                 clear_5 0BDC                       __size_of_Precharge 009E  
                                 _printf 0872                                   _rx_len 0040  
                       __end_of_sendData 0D14                             __pdataCOMRAM 0044  
                           __mediumconst 7E2C                                   tblptrh 000FF7  
                                 tblptrl 000FF6                                   tblptru 000FF8  
       __size_of_FastTransfer_buffer_put 0174                     _EUSART2_Transmit_ISR 1022  
           __end_of_UART_buff_modulo_inc 10FC                          ??_EUSART2_Write 001B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart2RxBuffer 0088  
                      _SYSTEM_Initialize 120E                          _eusart2TxBuffer 0090  
                             __accesstop 0060                  __end_of__initialization 0C14  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                             ?_updateComms 0001  
                          __end_of_Delay 0E82                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 079C                             __pidataBANK0 126E  
                    ??_SYSTEM_Initialize 001B                         crcBufS_put@_this 001B  
 __end_of_FastTransfer_buffer_modulo_inc 10D2  __size_of_FastTransfer_buffer_modulo_inc 002A  
         _FastTransfer_buffer_modulo_inc 10A8                              NokiaStr@len 0023  
                            NokiaStr@str 0021                            __end_of_putch 126E  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0026  
                     UART_buff_get@_this 0007                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 0B0C                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 05E2                                  ??_Delay 001F  
                            ?_SetCharger 00C0                    ?_EUSART2_Transmit_ISR 0001  
            __end_of_EUSART1_Receive_ISR 11DA                _FastTransfer_buffer_flush 0D80  
                                CRC8@crc 0021                                  CRC8@len 001D  
                                CRC8@sum 001E                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 1224                   receiveData@holder_1419 00D2  
                                ??_putch 001C                      _addressErrorCounter 0098  
                            ?_NokiaStart 0001                            _eusart2RxHead 0036  
                          _eusart2TxHead 0038                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                     __end_of_FONTLOOKUP 7FF4                            _eusart2RxTail 0037  
                          _eusart2TxTail 0039                          __CFG_PLLCFG$OFF 000000  
                      __end_of_Precharge 09E4                               ??_CRCcheck 0027  
                   ??_crcBufS_status_put 001F                               __pnvCOMRAM 0041  
                __size_of_UART_buff_size 0016                                ?_NokiaStr 0021  
             __size_of_SPI2_Exchange8bit 0010                     __size_of_receiveData 02A4  
                                ?_ToSend 00C2                                  ?_SetMux 0001  
                     __CFG_CCP2MX$PORTC1 000000                                  ?___wmul 001B  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_gotoXy 001C                                  ?_memset 001B  
                             _crc_buffer 00A4                                  ?_printf 001D  
                     UART_buff_put@_this 0007                                ?_blackLcd 0001  
                              ?_clearLcd 0001                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 10A8             UART_buff_modulo_inc@my_value 0005  
                      __CFG_PRICLKEN$OFF 000000                                  _OSCTUNE 000F9B  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP2ADD 000F6E                      sendData@whereToSend 00C1  
                    _receiveArrayAddress 002B                                  _SSP2BUF 000F6F  
                              ?_sendData 0001                        _alignErrorCounter 009A  
                             ??_NokiaStr 0024                          __CFG_PWRTEN$OFF 000000  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_ToSend 001C                          __size_of_SetMux 0038  
                    __size_of_SetCharger 006C                                _AKNAKsend 0033  
                   _UART_buff_modulo_inc 10D2                          __size_of___wmul 0026  
                                _calc_CS 0034                                  __pcinit 0B9A  
                    __size_of_NokiaStart 0032                          __size_of_gotoXy 0024  
                        __size_of_memset 002C                                  __ramtop 0600  
                                __ptext0 0C22                                  __ptext1 114C  
                                __ptext2 0DE2                                  __ptext3 0C9C  
                                __ptext4 06C4                                  __ptext5 0D80  
                                __ptext6 1050                                  __ptext7 11DA  
                                __ptext8 0354                                  __ptext9 10A8  
                        __size_of_printf 00D4                                _T0CONbits 000FD5  
                  _OSCILLATOR_Initialize 124A                   ??_EUSART2_Transmit_ISR 0001  
                             ??_blackLcd 001C                  _FastTransfer_buffer_put 0354  
                  CRCcheck@calculatedCRC 00C1                 ??_PIN_MANAGER_Initialize 001B  
                             ??_clearLcd 001C             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0016                     end_of_initialization 0C14  
                              Delay@wait 001B                                  gotoXy@x 001D  
                                gotoXy@y 001C                                  memset@c 001D  
                                memset@n 001F                                  memset@p 0021  
                          __Lmediumconst 7E2C                               ??_sendData 00C0  
                     _EUSART2_Initialize 0F8A                                  printf@c 0024  
                                printf@f 001D                    ?_UART_buff_modulo_inc 0001  
                   __size_of_updateComms 0026                                  postdec1 000FE5  
                                postdec2 000FDD                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 0DE2  
                    CRCcheck@arrayHolder 00C2                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 009E                               _rx_address 003E  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 0062  
                         _UART_buff_size 1224                      __end_of_crcBufS_get 06C4  
                  SPI2_Exchange8bit@data 001B                      __end_of_crcBufS_put 079C  
                      __size_of_CRCcheck 0096                          Precharge@i_1699 00C3  
                          _moduleAddress 003C                     _timer0ReloadVal16bit 0041  
                             CRCcheck@rt 00C5                           __end_of_ToSend 11F6  
                         __end_of_SetMux 0F8A             __end_of_INTERRUPT_Initialize 1264  
                        _crcErrorCounter 009C                           __end_of___wmul 1198  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 127C  
              ??_FastTransfer_buffer_put 00C0                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_gotoXy 11BC                           __end_of_memset 107C  
                      crcBufS_put@status 001F                           __end_of_printf 0946  
                           receiveData@r 00D7                             receiveData@u 00D5  
                           ??_SetCharger 0027                      start_initialization 0B9A  
               __size_of_TMR0_Initialize 0018          __size_of_PIN_MANAGER_Initialize 004C  
                  crcBufS_get@wantedTime 0025                                NokiaStr@i 00C0  
                            putch@txData 001C                             ??_NokiaStart 001E  
                  __end_of_EUSART2_Write 0F52                           UART_buff_get@c 000B  
                 __end_of_UART_buff_size 123A                           UART_buff_put@c 0009  
                              _Precharge 0946                                 ??_ToSend 0026  
                               ??_SetMux 001B                   ??_UART_buff_modulo_inc 0005  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_NokiaStr 008E                       __end_of_SetCharger 0D80  
                            ?_respondECU 0001                                 ??___wmul 001F  
                            __pdataBANK0 00D9                                 ??_gotoXy 001D  
                               ??_memset 0021                                 ??_printf 0021  
                     __end_of_NokiaStart 0FF0                           _eusart2RxCount 0035  
                            __pbssCOMRAM 0027            __size_of_EUSART1_Transmit_ISR 0032  
                          __pcstackBANK0 00C0                        __size_of_blackLcd 0028  
                      __size_of_clearLcd 0028                              _crcBufS_get 05E2  
                            _crcBufS_put 06C4                      EUSART2_Write@txData 001B  
                        ?_UART_buff_size 0001             __size_of_EUSART1_Receive_ISR 001E  
                          ??_receiveData 00C7              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00C2                 __size_of_TMR0_StartTimer 0004  
                 __size_of_UART_buff_get 0092                   __size_of_UART_buff_put 011A  
                             ?_Precharge 0001                   _PIN_MANAGER_Initialize 0E82  
                      __size_of_sendData 0078                                __pintcode 0008  
                          __pmediumconst 7E2C             ??_INTERRUPT_InterruptManager 000D  
                               _BAUD1CON 000FB8                                 _BAUD2CON 000F70  
                         __size_of_Delay 004C                      __size_of_respondECU 0054  
                         __size_of_putch 000A                     _INTERRUPT_Initialize 1258  
                           _receiveArray 0060                        ??_TMR0_Initialize 001B  
           __size_of_EUSART2_Receive_ISR 002C                                 _CRCcheck 09E4  
                         ___wmul@product 001F                                 _LATCbits 000F8B  
                    UART_buff_size@_this 0001                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3      __size_of_INTERRUPT_InterruptManager 00A4  
                               i2u145_40 0A98                                 i2u155_40 100A  
                               _PIR1bits 000F9E                                 _PIR3bits 000FA4  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0354                                 _SSP2CON1 000F6C  
                               _SSP2STAT 000F6D           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0200                                _rx_buffer 0400  
                      ___wmul@multiplier 001B                               printf@flag 0021  
                          _UART_buff_get 0A7A                            _UART_buff_put 04C8  
                         Precharge@OnOff 00C0            __size_of_EUSART2_Transmit_ISR 002E  
                         SetCharger@mode 00C2                              _INTCON2bits 000FF1  
                              copy_data0 0BF6                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002D                            ??_updateComms 0027  
                            blackLcd@res 001C                                 _NokiaStr 0B0C  
                               __Hrparam 0000                              ??_Precharge 0024  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                      ??_TMR0_StartTimer 001B                           ?_UART_buff_get 0007  
                         ?_UART_buff_put 0007                              CRC8@extract 001F  
                               _blackLcd 1124                                sendData@i 00C3  
                               _clearLcd 10FC                 crcBufS_status_put@status 001E  
                               __ptext10 00B0                                 __ptext11 09E4  
                               __ptext20 0946                                 __ptext12 079C  
                               __ptext21 0E36                                 __ptext13 05E2  
                               __ptext30 0B0C                                 __ptext22 1198  
                               __ptext14 0ECE                                 __ptext31 1172  
                               __ptext23 120E                                 __ptext15 0D14  
                               __ptext40 1224                                 __ptext32 0FBE  
                               __ptext24 11F6                                 __ptext16 0872  
                               __ptext41 0A7A                                 __ptext33 10FC  
                               __ptext25 1278                                 __ptext17 1264  
                               __ptext42 11BC                                 __ptext34 1124  
                               __ptext26 0E82                                 __ptext18 0F18  
                               __ptext43 04C8                                 __ptext35 123A  
                               __ptext27 124A                                 __ptext19 0F52  
                               __ptext44 10D2                                 __ptext28 1258  
                               __ptext37 1022                                 __ptext29 0F8A  
                               __ptext38 107C                                 __ptext39 0FF0  
                           _SSP2CON1bits 000F6C                            __size_of_CRC8 004A  
                EUSART1_Receive_ISR@data 000C              __size_of_EUSART2_Initialize 0034  
                          _returnAddress 003D                            __size_of_main 007A  
                            _receiveData 00B0                           _Transmit_stall 0044  
                               _sendData 0C9C                               _RC1STAbits 000FAB  
                             _RC2STAbits 000F71                              clearLcd@res 001C  
                             _FONTLOOKUP 7E2D                             ??_respondECU 0027  
                               int$flags 0045                             _serial_write 0031  
                    __end_of_updateComms 1172       __end_of_INTERRUPT_InterruptManager 00AC  
             _INTERRUPT_InterruptManager 0008                      _EUSART1_Receive_ISR 11BC  
                           _SSP2STATbits 000F6D                        receiveData@holder 00CF  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 0001  
                       ??_UART_buff_size 0003                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 00A0  
                           ?_crcBufS_get 001B                             ?_crcBufS_put 001B  
                               intlevel2 0000                  crcBufS_status_put@_this 001B  
                     __end_of_respondECU 0E36                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 1022  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 0023  
                            _serial_peek 00A2                              _serial_read 002F  
               ?_FastTransfer_buffer_put 0021                                 printf@ap 0022  
                               printf@cp 0025            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0009                          ??_UART_buff_put 000A  
                 __size_of_EUSART2_Write 003A                      _EUSART2_Receive_ISR 107C  
  FastTransfer_buffer_modulo_inc@modulus 001D                   crcBufS_status_put@time 001D  
                        _TMR0_Initialize 11F6                receiveData@crcHolder_1420 00CE  
                      __CFG_T3CMX$PORTC0 000000                           _maxDataAddress 003B  
             __end_of_crcBufS_status_put 0872                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 0ECE         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B                     ?_EUSART2_Receive_ISR 0001  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 114C  
