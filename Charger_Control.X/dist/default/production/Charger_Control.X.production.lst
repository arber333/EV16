

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Aug 02 11:52:10 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    74                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    75  0000                     
    76 ;; Function _putch is unused but had its address taken
    77  0000                     
    78                           	psect	idataCOMRAM
    79  001948                     __pidataCOMRAM:
    80                           	opt stack 0
    81                           
    82                           ;initializer for _Transmit_stall
    83  001948  01                 	db	1
    84                           
    85                           	psect	mediumconst
    86  007DE6                     __pmediumconst:
    87                           	opt stack 0
    88  007DE6  00                 	db	0
    89  007DE7                     _FONTLOOKUP:
    90                           	opt stack 0
    91  007DE7  00                 	db	0
    92  007DE8  00                 	db	0
    93  007DE9  00                 	db	0
    94  007DEA  00                 	db	0
    95  007DEB  00                 	db	0
    96  007DEC  00                 	db	0
    97  007DED  00                 	db	0
    98  007DEE  5F                 	db	95
    99  007DEF  00                 	db	0
   100  007DF0  00                 	db	0
   101  007DF1  00                 	db	0
   102  007DF2  07                 	db	7
   103  007DF3  00                 	db	0
   104  007DF4  07                 	db	7
   105  007DF5  00                 	db	0
   106  007DF6  14                 	db	20
   107  007DF7  7F                 	db	127
   108  007DF8  14                 	db	20
   109  007DF9  7F                 	db	127
   110  007DFA  14                 	db	20
   111  007DFB  24                 	db	36
   112  007DFC  2A                 	db	42
   113  007DFD  7F                 	db	127
   114  007DFE  2A                 	db	42
   115  007DFF  12                 	db	18
   116  007E00  23                 	db	35
   117  007E01  13                 	db	19
   118  007E02  08                 	db	8
   119  007E03  64                 	db	100
   120  007E04  62                 	db	98
   121  007E05  36                 	db	54
   122  007E06  49                 	db	73
   123  007E07  55                 	db	85
   124  007E08  22                 	db	34
   125  007E09  50                 	db	80
   126  007E0A  00                 	db	0
   127  007E0B  05                 	db	5
   128  007E0C  03                 	db	3
   129  007E0D  00                 	db	0
   130  007E0E  00                 	db	0
   131  007E0F  00                 	db	0
   132  007E10  1C                 	db	28
   133  007E11  22                 	db	34
   134  007E12  41                 	db	65
   135  007E13  00                 	db	0
   136  007E14  00                 	db	0
   137  007E15  41                 	db	65
   138  007E16  22                 	db	34
   139  007E17  1C                 	db	28
   140  007E18  00                 	db	0
   141  007E19  14                 	db	20
   142  007E1A  08                 	db	8
   143  007E1B  3E                 	db	62
   144  007E1C  08                 	db	8
   145  007E1D  14                 	db	20
   146  007E1E  08                 	db	8
   147  007E1F  08                 	db	8
   148  007E20  3E                 	db	62
   149  007E21  08                 	db	8
   150  007E22  08                 	db	8
   151  007E23  00                 	db	0
   152  007E24  50                 	db	80
   153  007E25  30                 	db	48
   154  007E26  00                 	db	0
   155  007E27  00                 	db	0
   156  007E28  08                 	db	8
   157  007E29  08                 	db	8
   158  007E2A  08                 	db	8
   159  007E2B  08                 	db	8
   160  007E2C  08                 	db	8
   161  007E2D  00                 	db	0
   162  007E2E  60                 	db	96
   163  007E2F  60                 	db	96
   164  007E30  00                 	db	0
   165  007E31  00                 	db	0
   166  007E32  20                 	db	32
   167  007E33  10                 	db	16
   168  007E34  08                 	db	8
   169  007E35  04                 	db	4
   170  007E36  02                 	db	2
   171  007E37  3E                 	db	62
   172  007E38  51                 	db	81
   173  007E39  49                 	db	73
   174  007E3A  45                 	db	69
   175  007E3B  3E                 	db	62
   176  007E3C  00                 	db	0
   177  007E3D  42                 	db	66
   178  007E3E  7F                 	db	127
   179  007E3F  40                 	db	64
   180  007E40  00                 	db	0
   181  007E41  42                 	db	66
   182  007E42  61                 	db	97
   183  007E43  51                 	db	81
   184  007E44  49                 	db	73
   185  007E45  46                 	db	70
   186  007E46  21                 	db	33
   187  007E47  41                 	db	65
   188  007E48  45                 	db	69
   189  007E49  4B                 	db	75
   190  007E4A  31                 	db	49
   191  007E4B  18                 	db	24
   192  007E4C  14                 	db	20
   193  007E4D  12                 	db	18
   194  007E4E  7F                 	db	127
   195  007E4F  10                 	db	16
   196  007E50  27                 	db	39
   197  007E51  45                 	db	69
   198  007E52  45                 	db	69
   199  007E53  45                 	db	69
   200  007E54  39                 	db	57
   201  007E55  3C                 	db	60
   202  007E56  4A                 	db	74
   203  007E57  49                 	db	73
   204  007E58  49                 	db	73
   205  007E59  30                 	db	48
   206  007E5A  01                 	db	1
   207  007E5B  71                 	db	113
   208  007E5C  09                 	db	9
   209  007E5D  05                 	db	5
   210  007E5E  03                 	db	3
   211  007E5F  36                 	db	54
   212  007E60  49                 	db	73
   213  007E61  49                 	db	73
   214  007E62  49                 	db	73
   215  007E63  36                 	db	54
   216  007E64  06                 	db	6
   217  007E65  49                 	db	73
   218  007E66  49                 	db	73
   219  007E67  29                 	db	41
   220  007E68  1E                 	db	30
   221  007E69  00                 	db	0
   222  007E6A  36                 	db	54
   223  007E6B  36                 	db	54
   224  007E6C  00                 	db	0
   225  007E6D  00                 	db	0
   226  007E6E  00                 	db	0
   227  007E6F  56                 	db	86
   228  007E70  36                 	db	54
   229  007E71  00                 	db	0
   230  007E72  00                 	db	0
   231  007E73  08                 	db	8
   232  007E74  14                 	db	20
   233  007E75  22                 	db	34
   234  007E76  41                 	db	65
   235  007E77  00                 	db	0
   236  007E78  14                 	db	20
   237  007E79  14                 	db	20
   238  007E7A  14                 	db	20
   239  007E7B  14                 	db	20
   240  007E7C  14                 	db	20
   241  007E7D  00                 	db	0
   242  007E7E  41                 	db	65
   243  007E7F  22                 	db	34
   244  007E80  14                 	db	20
   245  007E81  08                 	db	8
   246  007E82  02                 	db	2
   247  007E83  01                 	db	1
   248  007E84  51                 	db	81
   249  007E85  09                 	db	9
   250  007E86  06                 	db	6
   251  007E87  32                 	db	50
   252  007E88  49                 	db	73
   253  007E89  79                 	db	121
   254  007E8A  41                 	db	65
   255  007E8B  3E                 	db	62
   256  007E8C  7E                 	db	126
   257  007E8D  11                 	db	17
   258  007E8E  11                 	db	17
   259  007E8F  11                 	db	17
   260  007E90  7E                 	db	126
   261  007E91  7F                 	db	127
   262  007E92  49                 	db	73
   263  007E93  49                 	db	73
   264  007E94  49                 	db	73
   265  007E95  36                 	db	54
   266  007E96  3E                 	db	62
   267  007E97  41                 	db	65
   268  007E98  41                 	db	65
   269  007E99  41                 	db	65
   270  007E9A  22                 	db	34
   271  007E9B  7F                 	db	127
   272  007E9C  41                 	db	65
   273  007E9D  41                 	db	65
   274  007E9E  22                 	db	34
   275  007E9F  1C                 	db	28
   276  007EA0  7F                 	db	127
   277  007EA1  49                 	db	73
   278  007EA2  49                 	db	73
   279  007EA3  49                 	db	73
   280  007EA4  41                 	db	65
   281  007EA5  7F                 	db	127
   282  007EA6  09                 	db	9
   283  007EA7  09                 	db	9
   284  007EA8  09                 	db	9
   285  007EA9  01                 	db	1
   286  007EAA  3E                 	db	62
   287  007EAB  41                 	db	65
   288  007EAC  49                 	db	73
   289  007EAD  49                 	db	73
   290  007EAE  7A                 	db	122
   291  007EAF  7F                 	db	127
   292  007EB0  08                 	db	8
   293  007EB1  08                 	db	8
   294  007EB2  08                 	db	8
   295  007EB3  7F                 	db	127
   296  007EB4  00                 	db	0
   297  007EB5  41                 	db	65
   298  007EB6  7F                 	db	127
   299  007EB7  41                 	db	65
   300  007EB8  00                 	db	0
   301  007EB9  20                 	db	32
   302  007EBA  40                 	db	64
   303  007EBB  41                 	db	65
   304  007EBC  3F                 	db	63
   305  007EBD  01                 	db	1
   306  007EBE  7F                 	db	127
   307  007EBF  08                 	db	8
   308  007EC0  14                 	db	20
   309  007EC1  22                 	db	34
   310  007EC2  41                 	db	65
   311  007EC3  7F                 	db	127
   312  007EC4  40                 	db	64
   313  007EC5  40                 	db	64
   314  007EC6  40                 	db	64
   315  007EC7  40                 	db	64
   316  007EC8  7F                 	db	127
   317  007EC9  02                 	db	2
   318  007ECA  0C                 	db	12
   319  007ECB  02                 	db	2
   320  007ECC  7F                 	db	127
   321  007ECD  7F                 	db	127
   322  007ECE  04                 	db	4
   323  007ECF  08                 	db	8
   324  007ED0  10                 	db	16
   325  007ED1  7F                 	db	127
   326  007ED2  3E                 	db	62
   327  007ED3  41                 	db	65
   328  007ED4  41                 	db	65
   329  007ED5  41                 	db	65
   330  007ED6  3E                 	db	62
   331  007ED7  7F                 	db	127
   332  007ED8  09                 	db	9
   333  007ED9  09                 	db	9
   334  007EDA  09                 	db	9
   335  007EDB  06                 	db	6
   336  007EDC  3E                 	db	62
   337  007EDD  41                 	db	65
   338  007EDE  51                 	db	81
   339  007EDF  21                 	db	33
   340  007EE0  5E                 	db	94
   341  007EE1  7F                 	db	127
   342  007EE2  09                 	db	9
   343  007EE3  19                 	db	25
   344  007EE4  29                 	db	41
   345  007EE5  46                 	db	70
   346  007EE6  46                 	db	70
   347  007EE7  49                 	db	73
   348  007EE8  49                 	db	73
   349  007EE9  49                 	db	73
   350  007EEA  31                 	db	49
   351  007EEB  01                 	db	1
   352  007EEC  01                 	db	1
   353  007EED  7F                 	db	127
   354  007EEE  01                 	db	1
   355  007EEF  01                 	db	1
   356  007EF0  3F                 	db	63
   357  007EF1  40                 	db	64
   358  007EF2  40                 	db	64
   359  007EF3  40                 	db	64
   360  007EF4  3F                 	db	63
   361  007EF5  1F                 	db	31
   362  007EF6  20                 	db	32
   363  007EF7  40                 	db	64
   364  007EF8  20                 	db	32
   365  007EF9  1F                 	db	31
   366  007EFA  3F                 	db	63
   367  007EFB  40                 	db	64
   368  007EFC  38                 	db	56
   369  007EFD  40                 	db	64
   370  007EFE  3F                 	db	63
   371  007EFF  63                 	db	99
   372  007F00  14                 	db	20
   373  007F01  08                 	db	8
   374  007F02  14                 	db	20
   375  007F03  63                 	db	99
   376  007F04  07                 	db	7
   377  007F05  08                 	db	8
   378  007F06  70                 	db	112
   379  007F07  08                 	db	8
   380  007F08  07                 	db	7
   381  007F09  61                 	db	97
   382  007F0A  51                 	db	81
   383  007F0B  49                 	db	73
   384  007F0C  45                 	db	69
   385  007F0D  43                 	db	67
   386  007F0E  00                 	db	0
   387  007F0F  7F                 	db	127
   388  007F10  41                 	db	65
   389  007F11  41                 	db	65
   390  007F12  00                 	db	0
   391  007F13  02                 	db	2
   392  007F14  04                 	db	4
   393  007F15  08                 	db	8
   394  007F16  10                 	db	16
   395  007F17  20                 	db	32
   396  007F18  00                 	db	0
   397  007F19  41                 	db	65
   398  007F1A  41                 	db	65
   399  007F1B  7F                 	db	127
   400  007F1C  00                 	db	0
   401  007F1D  04                 	db	4
   402  007F1E  02                 	db	2
   403  007F1F  01                 	db	1
   404  007F20  02                 	db	2
   405  007F21  04                 	db	4
   406  007F22  40                 	db	64
   407  007F23  40                 	db	64
   408  007F24  40                 	db	64
   409  007F25  40                 	db	64
   410  007F26  40                 	db	64
   411  007F27  00                 	db	0
   412  007F28  01                 	db	1
   413  007F29  02                 	db	2
   414  007F2A  04                 	db	4
   415  007F2B  00                 	db	0
   416  007F2C  20                 	db	32
   417  007F2D  54                 	db	84
   418  007F2E  54                 	db	84
   419  007F2F  54                 	db	84
   420  007F30  78                 	db	120
   421  007F31  7F                 	db	127
   422  007F32  48                 	db	72
   423  007F33  44                 	db	68
   424  007F34  44                 	db	68
   425  007F35  38                 	db	56
   426  007F36  38                 	db	56
   427  007F37  44                 	db	68
   428  007F38  44                 	db	68
   429  007F39  44                 	db	68
   430  007F3A  20                 	db	32
   431  007F3B  38                 	db	56
   432  007F3C  44                 	db	68
   433  007F3D  44                 	db	68
   434  007F3E  48                 	db	72
   435  007F3F  7F                 	db	127
   436  007F40  38                 	db	56
   437  007F41  54                 	db	84
   438  007F42  54                 	db	84
   439  007F43  54                 	db	84
   440  007F44  18                 	db	24
   441  007F45  08                 	db	8
   442  007F46  7E                 	db	126
   443  007F47  09                 	db	9
   444  007F48  01                 	db	1
   445  007F49  02                 	db	2
   446  007F4A  0C                 	db	12
   447  007F4B  52                 	db	82
   448  007F4C  52                 	db	82
   449  007F4D  52                 	db	82
   450  007F4E  3E                 	db	62
   451  007F4F  7F                 	db	127
   452  007F50  08                 	db	8
   453  007F51  04                 	db	4
   454  007F52  04                 	db	4
   455  007F53  78                 	db	120
   456  007F54  00                 	db	0
   457  007F55  44                 	db	68
   458  007F56  7D                 	db	125
   459  007F57  40                 	db	64
   460  007F58  00                 	db	0
   461  007F59  20                 	db	32
   462  007F5A  40                 	db	64
   463  007F5B  44                 	db	68
   464  007F5C  3D                 	db	61
   465  007F5D  00                 	db	0
   466  007F5E  7F                 	db	127
   467  007F5F  10                 	db	16
   468  007F60  28                 	db	40
   469  007F61  44                 	db	68
   470  007F62  00                 	db	0
   471  007F63  00                 	db	0
   472  007F64  41                 	db	65
   473  007F65  7F                 	db	127
   474  007F66  40                 	db	64
   475  007F67  00                 	db	0
   476  007F68  7C                 	db	124
   477  007F69  04                 	db	4
   478  007F6A  18                 	db	24
   479  007F6B  04                 	db	4
   480  007F6C  78                 	db	120
   481  007F6D  7C                 	db	124
   482  007F6E  08                 	db	8
   483  007F6F  04                 	db	4
   484  007F70  04                 	db	4
   485  007F71  78                 	db	120
   486  007F72  38                 	db	56
   487  007F73  44                 	db	68
   488  007F74  44                 	db	68
   489  007F75  44                 	db	68
   490  007F76  38                 	db	56
   491  007F77  7C                 	db	124
   492  007F78  14                 	db	20
   493  007F79  14                 	db	20
   494  007F7A  14                 	db	20
   495  007F7B  08                 	db	8
   496  007F7C  08                 	db	8
   497  007F7D  14                 	db	20
   498  007F7E  14                 	db	20
   499  007F7F  18                 	db	24
   500  007F80  7C                 	db	124
   501  007F81  7C                 	db	124
   502  007F82  08                 	db	8
   503  007F83  04                 	db	4
   504  007F84  04                 	db	4
   505  007F85  08                 	db	8
   506  007F86  48                 	db	72
   507  007F87  54                 	db	84
   508  007F88  54                 	db	84
   509  007F89  54                 	db	84
   510  007F8A  20                 	db	32
   511  007F8B  04                 	db	4
   512  007F8C  3F                 	db	63
   513  007F8D  44                 	db	68
   514  007F8E  40                 	db	64
   515  007F8F  20                 	db	32
   516  007F90  3C                 	db	60
   517  007F91  40                 	db	64
   518  007F92  40                 	db	64
   519  007F93  20                 	db	32
   520  007F94  7C                 	db	124
   521  007F95  1C                 	db	28
   522  007F96  20                 	db	32
   523  007F97  40                 	db	64
   524  007F98  20                 	db	32
   525  007F99  1C                 	db	28
   526  007F9A  3C                 	db	60
   527  007F9B  40                 	db	64
   528  007F9C  30                 	db	48
   529  007F9D  40                 	db	64
   530  007F9E  3C                 	db	60
   531  007F9F  44                 	db	68
   532  007FA0  28                 	db	40
   533  007FA1  10                 	db	16
   534  007FA2  28                 	db	40
   535  007FA3  44                 	db	68
   536  007FA4  0C                 	db	12
   537  007FA5  50                 	db	80
   538  007FA6  50                 	db	80
   539  007FA7  50                 	db	80
   540  007FA8  3C                 	db	60
   541  007FA9  44                 	db	68
   542  007FAA  64                 	db	100
   543  007FAB  54                 	db	84
   544  007FAC  4C                 	db	76
   545  007FAD  44                 	db	68
   546  007FAE  00                 	db	0
   547  007FAF  08                 	db	8
   548  007FB0  36                 	db	54
   549  007FB1  41                 	db	65
   550  007FB2  00                 	db	0
   551  007FB3  00                 	db	0
   552  007FB4  00                 	db	0
   553  007FB5  7F                 	db	127
   554  007FB6  00                 	db	0
   555  007FB7  00                 	db	0
   556  007FB8  00                 	db	0
   557  007FB9  41                 	db	65
   558  007FBA  36                 	db	54
   559  007FBB  08                 	db	8
   560  007FBC  00                 	db	0
   561  007FBD  10                 	db	16
   562  007FBE  08                 	db	8
   563  007FBF  08                 	db	8
   564  007FC0  10                 	db	16
   565  007FC1  08                 	db	8
   566  007FC2  78                 	db	120
   567  007FC3  46                 	db	70
   568  007FC4  41                 	db	65
   569  007FC5  46                 	db	70
   570  007FC6  78                 	db	120
   571  007FC7                     __end_of_FONTLOOKUP:
   572                           	opt stack 0
   573  007FC7                     _dpowers:
   574                           	opt stack 0
   575  007FC7  0001               	dw	1
   576  007FC9  000A               	dw	10
   577  007FCB  0064               	dw	100
   578  007FCD  03E8               	dw	1000
   579  007FCF  2710               	dw	10000
   580  007FD1                     __end_of_dpowers:
   581                           	opt stack 0
   582  007FD1  43                 	db	67	;'C'
   583  007FD2  61                 	db	97	;'a'
   584  007FD3  72                 	db	114	;'r'
   585  007FD4  20                 	db	32
   586  007FD5  43                 	db	67	;'C'
   587  007FD6  68                 	db	104	;'h'
   588  007FD7  61                 	db	97	;'a'
   589  007FD8  72                 	db	114	;'r'
   590  007FD9  67                 	db	103	;'g'
   591  007FDA  65                 	db	101	;'e'
   592  007FDB  72                 	db	114	;'r'
   593  007FDC  00                 	db	0
   594  007FDD                     STR_7:
   595  007FDD  25                 	db	37
   596  007FDE  30                 	db	48	;'0'
   597  007FDF  33                 	db	51	;'3'
   598  007FE0  64                 	db	100	;'d'
   599  007FE1  2C                 	db	44
   600  007FE2  45                 	db	69	;'E'
   601  007FE3  0A                 	db	10
   602  007FE4  00                 	db	0
   603  007FE5  28                 	db	40
   604  007FE6  6E                 	db	110	;'n'
   605  007FE7  75                 	db	117	;'u'
   606  007FE8  6C                 	db	108	;'l'
   607  007FE9  6C                 	db	108	;'l'
   608  007FEA  29                 	db	41
   609  007FEB  00                 	db	0
   610  007FEC  4E                 	db	78	;'N'
   611  007FED  6F                 	db	111	;'o'
   612  007FEE  20                 	db	32
   613  007FEF  42                 	db	66	;'B'
   614  007FF0  4D                 	db	77	;'M'
   615  007FF1  4D                 	db	77	;'M'
   616  007FF2  00                 	db	0
   617  007FF3                     STR_3:
   618  007FF3  25                 	db	37
   619  007FF4  30                 	db	48	;'0'
   620  007FF5  33                 	db	51	;'3'
   621  007FF6  64                 	db	100	;'d'
   622  007FF7  2C                 	db	44
   623  007FF8  00                 	db	0
   624  007FF9                     STR_1:
   625  007FF9  4D                 	db	77	;'M'
   626  007FFA  2C                 	db	44
   627  007FFB  00                 	db	0
   628  007FFC                     STR_2:
   629  007FFC  25                 	db	37
   630  007FFD  73                 	db	115	;'s'
   631  007FFE  00                 	db	0
   632  0000                     
   633                           ; #config settings
   634  007FFF  00                 	db	0	; dummy byte at the end
   635  0000                     
   636                           	psect	nvCOMRAM
   637  00003A                     __pnvCOMRAM:
   638                           	opt stack 0
   639  00003A                     _serial_available:
   640                           	opt stack 0
   641  00003A                     	ds	2
   642  00003C                     _serial_read:
   643                           	opt stack 0
   644  00003C                     	ds	2
   645  00003E                     _serial_write:
   646                           	opt stack 0
   647  00003E                     	ds	2
   648  000040                     _timer0ReloadVal16bit:
   649                           	opt stack 0
   650  000040                     	ds	2
   651  000042                     _eusart1TxBufferRemaining:
   652                           	opt stack 0
   653  000042                     	ds	1
   654  000043                     _moduleAddress:
   655                           	opt stack 0
   656  000043                     	ds	1
   657                           
   658                           	psect	nvBANK0
   659  0000E3                     __pnvBANK0:
   660                           	opt stack 0
   661  0000E3                     _receiveArrayAddress:
   662                           	opt stack 0
   663  0000E3                     	ds	2
   664  0000E5                     _sendStructAddress:
   665                           	opt stack 0
   666  0000E5                     	ds	2
   667  0000E7                     _serial_peek:
   668                           	opt stack 0
   669  0000E7                     	ds	2
   670  0000E9                     _AKNAKsend:
   671                           	opt stack 0
   672  0000E9                     	ds	1
   673  0000EA                     _maxDataAddress:
   674                           	opt stack 0
   675  0000EA                     	ds	1
   676  0000                     _ANSELA	set	3896
   677  0000                     _ANSELB	set	3897
   678  0000                     _ANSELC	set	3898
   679  0000                     _ANSELD	set	3899
   680  0000                     _ANSELE	set	3900
   681  0000                     _ANSA3	set	31171
   682  0000                     _ANSB0	set	31176
   683  0000                     _ANSB1	set	31177
   684  0000                     _BAUD1CON	set	4024
   685  0000                     _BAUD2CON	set	3952
   686  0000                     _INTCON2bits	set	4081
   687  0000                     _INTCONbits	set	4082
   688  0000                     _IPR1bits	set	3999
   689  0000                     _IPR3bits	set	4005
   690  0000                     _LATA	set	3977
   691  0000                     _LATB	set	3978
   692  0000                     _LATBbits	set	3978
   693  0000                     _LATC	set	3979
   694  0000                     _LATD	set	3980
   695  0000                     _LATDbits	set	3980
   696  0000                     _LATE	set	3981
   697  0000                     _OSCCON	set	4051
   698  0000                     _OSCCON2	set	4050
   699  0000                     _OSCTUNE	set	3995
   700  0000                     _PIE1bits	set	3997
   701  0000                     _PIE3bits	set	4003
   702  0000                     _PIR1bits	set	3998
   703  0000                     _PIR3bits	set	4004
   704  0000                     _RC1STA	set	4011
   705  0000                     _RC1STAbits	set	4011
   706  0000                     _RC2STA	set	3953
   707  0000                     _RC2STAbits	set	3953
   708  0000                     _RCONbits	set	4048
   709  0000                     _RCREG1	set	4014
   710  0000                     _RCREG2	set	3956
   711  0000                     _SPBRG1	set	4015
   712  0000                     _SPBRG2	set	3957
   713  0000                     _SPBRGH1	set	4016
   714  0000                     _SPBRGH2	set	3958
   715  0000                     _SSP1ADD	set	4040
   716  0000                     _SSP1BUF	set	4041
   717  0000                     _SSP1CON1	set	4038
   718  0000                     _SSP1CON1bits	set	4038
   719  0000                     _SSP1STAT	set	4039
   720  0000                     _SSP1STATbits	set	4039
   721  0000                     _T0CON	set	4053
   722  0000                     _T0CONbits	set	4053
   723  0000                     _TMR0H	set	4055
   724  0000                     _TMR0L	set	4054
   725  0000                     _TRISA	set	3986
   726  0000                     _TRISAbits	set	3986
   727  0000                     _TRISB	set	3987
   728  0000                     _TRISBbits	set	3987
   729  0000                     _TRISC	set	3988
   730  0000                     _TRISCbits	set	3988
   731  0000                     _TRISD	set	3989
   732  0000                     _TRISDbits	set	3989
   733  0000                     _TRISE	set	3990
   734  0000                     _TX1STA	set	4012
   735  0000                     _TX2STA	set	3954
   736  0000                     _TXREG1	set	4013
   737  0000                     _TXREG2	set	3955
   738  0000                     _WPUB	set	3937
   739  0000                     _LATA3	set	31819
   740  0000                     _LATA7	set	31823
   741  0000                     _LATB0	set	31824
   742  0000                     _LATB1	set	31825
   743  0000                     _LATB3	set	31827
   744  0000                     _LATB4	set	31828
   745  0000                     _LATB5	set	31829
   746  0000                     _LATC0	set	31832
   747  0000                     _LATC1	set	31833
   748  0000                     _LATD0	set	31840
   749  0000                     _LATD3	set	31843
   750  0000                     _TRISB0	set	31896
   751  0000                     _TRISB1	set	31897
   752  0000                     _TRISD0	set	31912
   753  0000                     _TRISD2	set	31914
   754  0000                     _TRISD3	set	31915
   755                           
   756                           	psect	cinit
   757  001212                     __pcinit:
   758                           	opt stack 0
   759  001212                     start_initialization:
   760                           	opt stack 0
   761  001212                     __initialization:
   762                           	opt stack 0
   763                           
   764                           ; Clear objects allocated to BANK4 (206 bytes)
   765  001212  EE04  F000         	lfsr	0,__pbssBANK4
   766  001216  0ECE               	movlw	206
   767  001218                     clear_0:
   768  001218  6AEE               	clrf	postinc0,c
   769  00121A  06E8               	decf	wreg,f,c
   770  00121C  E1FD               	bnz	clear_0
   771                           
   772                           ; Clear objects allocated to BANK3 (206 bytes)
   773  00121E  EE03  F000         	lfsr	0,__pbssBANK3
   774  001222  0ECE               	movlw	206
   775  001224                     clear_1:
   776  001224  6AEE               	clrf	postinc0,c
   777  001226  06E8               	decf	wreg,f,c
   778  001228  E1FD               	bnz	clear_1
   779                           
   780                           ; Clear objects allocated to BANK2 (200 bytes)
   781  00122A  EE02  F000         	lfsr	0,__pbssBANK2
   782  00122E  0EC8               	movlw	200
   783  001230                     clear_2:
   784  001230  6AEE               	clrf	postinc0,c
   785  001232  06E8               	decf	wreg,f,c
   786  001234  E1FD               	bnz	clear_2
   787                           
   788                           ; Clear objects allocated to BANK1 (256 bytes)
   789  001236  EE01  F000         	lfsr	0,__pbssBANK1
   790  00123A  EE11 F000          	lfsr	1,256
   791  00123E                     clear_3:
   792  00123E  6AEE               	clrf	postinc0,c
   793  001240  50E5               	movf	postdec1,w,c
   794  001242  50E1               	movf	fsr1l,w,c
   795  001244  E1FC               	bnz	clear_3
   796  001246  50E2               	movf	fsr1h,w,c
   797  001248  E1FA               	bnz	clear_3
   798                           
   799                           ; Clear objects allocated to BANK0 (104 bytes)
   800  00124A  EE00  F060         	lfsr	0,__pbssBANK0
   801  00124E  0E68               	movlw	104
   802  001250                     clear_4:
   803  001250  6AEE               	clrf	postinc0,c
   804  001252  06E8               	decf	wreg,f,c
   805  001254  E1FD               	bnz	clear_4
   806                           
   807                           ; Clear objects allocated to COMRAM (20 bytes)
   808  001256  EE00  F026         	lfsr	0,__pbssCOMRAM
   809  00125A  0E14               	movlw	20
   810  00125C                     clear_5:
   811  00125C  6AEE               	clrf	postinc0,c
   812  00125E  06E8               	decf	wreg,f,c
   813  001260  E1FD               	bnz	clear_5
   814                           
   815                           ; Initialize objects allocated to COMRAM (1 bytes)
   816                           ; load TBLPTR registers with __pidataCOMRAM
   817  001262  0E48               	movlw	low __pidataCOMRAM
   818  001264  6EF6               	movwf	tblptrl,c
   819  001266  0E19               	movlw	high __pidataCOMRAM
   820  001268  6EF7               	movwf	tblptrh,c
   821  00126A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   822  00126C  6EF8               	movwf	tblptru,c
   823  00126E  0009               	tblrd		*+	;fetch initializer
   824  001270  CFF5 F044          	movff	tablat,__pdataCOMRAM
   825  001274                     end_of_initialization:
   826                           	opt stack 0
   827  001274                     __end_of__initialization:
   828                           	opt stack 0
   829  001274  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   830  001276  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   831  001278  0E00               	movlw	low (__Lmediumconst shr (0+16))
   832  00127A  6EF8               	movwf	tblptru,c
   833  00127C  0100               	movlb	0
   834  00127E  EF58  F00A         	goto	_main	;jump to C main() function
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           postdec1	equ	0xFE5
   842                           fsr1h	equ	0xFE2
   843                           fsr1l	equ	0xFE1
   844                           
   845                           	psect	bssCOMRAM
   846  000026                     __pbssCOMRAM:
   847                           	opt stack 0
   848  000026                     _time:
   849                           	opt stack 0
   850  000026                     	ds	4
   851  00002A                     _Start:
   852                           	opt stack 0
   853  00002A                     	ds	2
   854  00002C                     _group:
   855                           	opt stack 0
   856  00002C                     	ds	2
   857  00002E                     _PowerOn:
   858                           	opt stack 0
   859  00002E                     	ds	1
   860  00002F                     _calc_CS:
   861                           	opt stack 0
   862  00002F                     	ds	1
   863  000030                     _eusart1RxCount:
   864                           	opt stack 0
   865  000030                     	ds	1
   866  000031                     _eusart1RxHead:
   867                           	opt stack 0
   868  000031                     	ds	1
   869  000032                     _eusart1RxTail:
   870                           	opt stack 0
   871  000032                     	ds	1
   872  000033                     _eusart1TxHead:
   873                           	opt stack 0
   874  000033                     	ds	1
   875  000034                     _eusart1TxTail:
   876                           	opt stack 0
   877  000034                     	ds	1
   878  000035                     _i:
   879                           	opt stack 0
   880  000035                     	ds	1
   881  000036                     _returnAddress:
   882                           	opt stack 0
   883  000036                     	ds	1
   884  000037                     _rx_address:
   885                           	opt stack 0
   886  000037                     	ds	1
   887  000038                     _rx_array_inx:
   888                           	opt stack 0
   889  000038                     	ds	1
   890  000039                     _rx_len:
   891                           	opt stack 0
   892  000039                     	ds	1
   893                           tblptru	equ	0xFF8
   894                           tblptrh	equ	0xFF7
   895                           tblptrl	equ	0xFF6
   896                           tablat	equ	0xFF5
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           postdec1	equ	0xFE5
   900                           fsr1h	equ	0xFE2
   901                           fsr1l	equ	0xFE1
   902                           
   903                           	psect	dataCOMRAM
   904  000044                     __pdataCOMRAM:
   905                           	opt stack 0
   906  000044                     _Transmit_stall:
   907                           	opt stack 0
   908  000044                     	ds	1
   909                           tblptru	equ	0xFF8
   910                           tblptrh	equ	0xFF7
   911                           tblptrl	equ	0xFF6
   912                           tablat	equ	0xFF5
   913                           postinc0	equ	0xFEE
   914                           wreg	equ	0xFE8
   915                           postdec1	equ	0xFE5
   916                           fsr1h	equ	0xFE2
   917                           fsr1l	equ	0xFE1
   918                           
   919                           	psect	bssBANK0
   920  000060                     __pbssBANK0:
   921                           	opt stack 0
   922  000060                     _ddata:
   923                           	opt stack 0
   924  000060                     	ds	11
   925  00006B                     _eusart1RxBuffer:
   926                           	opt stack 0
   927  00006B                     	ds	8
   928  000073                     _eusart1TxBuffer:
   929                           	opt stack 0
   930  000073                     	ds	8
   931  00007B                     _LEDtime:
   932                           	opt stack 0
   933  00007B                     	ds	4
   934  00007F                     _lastLEDTime:
   935                           	opt stack 0
   936  00007F                     	ds	4
   937  000083                     _talkTime:
   938                           	opt stack 0
   939  000083                     	ds	4
   940  000087                     _addressErrorCounter:
   941                           	opt stack 0
   942  000087                     	ds	2
   943  000089                     _alignErrorCounter:
   944                           	opt stack 0
   945  000089                     	ds	2
   946  00008B                     _crcErrorCounter:
   947                           	opt stack 0
   948  00008B                     	ds	2
   949  00008D                     _dataAdressErrorCounter:
   950                           	opt stack 0
   951  00008D                     	ds	2
   952  00008F                     _ChargerData:
   953                           	opt stack 0
   954  00008F                     	ds	40
   955  0000B7                     _crc_buffer:
   956                           	opt stack 0
   957  0000B7                     	ds	17
   958                           tblptru	equ	0xFF8
   959                           tblptrh	equ	0xFF7
   960                           tblptrl	equ	0xFF6
   961                           tablat	equ	0xFF5
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postdec1	equ	0xFE5
   965                           fsr1h	equ	0xFE2
   966                           fsr1l	equ	0xFE1
   967                           
   968                           	psect	bssBANK1
   969  000100                     __pbssBANK1:
   970                           	opt stack 0
   971  000100                     _ring_buffer:
   972                           	opt stack 0
   973  000100                     	ds	206
   974  0001CE                     _receiveArray:
   975                           	opt stack 0
   976  0001CE                     	ds	50
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           postdec1	equ	0xFE5
   984                           fsr1h	equ	0xFE2
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	bssBANK2
   988  000200                     __pbssBANK2:
   989                           	opt stack 0
   990  000200                     _rx_buffer:
   991                           	opt stack 0
   992  000200                     	ds	200
   993                           tblptru	equ	0xFF8
   994                           tblptrh	equ	0xFF7
   995                           tblptrl	equ	0xFF6
   996                           tablat	equ	0xFF5
   997                           postinc0	equ	0xFEE
   998                           wreg	equ	0xFE8
   999                           postdec1	equ	0xFE5
  1000                           fsr1h	equ	0xFE2
  1001                           fsr1l	equ	0xFE1
  1002                           
  1003                           	psect	bssBANK3
  1004  000300                     __pbssBANK3:
  1005                           	opt stack 0
  1006  000300                     _input_buffer:
  1007                           	opt stack 0
  1008  000300                     	ds	206
  1009                           tblptru	equ	0xFF8
  1010                           tblptrh	equ	0xFF7
  1011                           tblptrl	equ	0xFF6
  1012                           tablat	equ	0xFF5
  1013                           postinc0	equ	0xFEE
  1014                           wreg	equ	0xFE8
  1015                           postdec1	equ	0xFE5
  1016                           fsr1h	equ	0xFE2
  1017                           fsr1l	equ	0xFE1
  1018                           
  1019                           	psect	bssBANK4
  1020  000400                     __pbssBANK4:
  1021                           	opt stack 0
  1022  000400                     _output_buffer:
  1023                           	opt stack 0
  1024  000400                     	ds	206
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1h	equ	0xFE2
  1033                           fsr1l	equ	0xFE1
  1034                           
  1035                           	psect	cstackBANK0
  1036  0000C8                     __pcstackBANK0:
  1037                           	opt stack 0
  1038  0000C8                     ??_FastTransfer_buffer_put:
  1039  0000C8                     Send_put@_data:
  1040                           	opt stack 0
  1041  0000C8                     begin@ptr:
  1042                           	opt stack 0
  1043  0000C8                     FastTransfer_buffer_flush@_this:
  1044                           	opt stack 0
  1045  0000C8                     crcBufS_get@wantedTime:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x0
  1049  0000C8                     	ds	2
  1050  0000CA                     begin@maxSize:
  1051                           	opt stack 0
  1052  0000CA                     CRCcheck@SentCRC:
  1053                           	opt stack 0
  1054  0000CA                     ToSend@what:
  1055                           	opt stack 0
  1056  0000CA                     FastTransfer_buffer_flush@clearBuffer:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x2
  1060  0000CA                     	ds	1
  1061  0000CB                     begin@givenAddress:
  1062                           	opt stack 0
  1063  0000CB                     CRCcheck@calculatedCRC:
  1064                           	opt stack 0
  1065                           
  1066                           ; 1 bytes @ 0x3
  1067  0000CB                     	ds	1
  1068  0000CC                     ??_sendData:
  1069  0000CC                     begin@error:
  1070                           	opt stack 0
  1071  0000CC                     ToSend@where:
  1072                           	opt stack 0
  1073  0000CC                     CRCcheck@arrayHolder:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x4
  1077  0000CC                     	ds	1
  1078  0000CD                     sendData@whereToSend:
  1079                           	opt stack 0
  1080  0000CD                     begin@stufftosend:
  1081                           	opt stack 0
  1082                           
  1083                           ; 2 bytes @ 0x5
  1084  0000CD                     	ds	1
  1085  0000CE                     sendData@CS:
  1086                           	opt stack 0
  1087                           
  1088                           ; 1 bytes @ 0x6
  1089  0000CE                     	ds	1
  1090  0000CF                     begin@stufftoreceive:
  1091                           	opt stack 0
  1092  0000CF                     sendData@i:
  1093                           	opt stack 0
  1094  0000CF                     CRCcheck@rt:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x7
  1098  0000CF                     	ds	2
  1099  0000D1                     ??_receiveData:
  1100  0000D1                     begin@stuffavailable:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x9
  1104  0000D1                     	ds	2
  1105  0000D3                     begin@stuffpeek:
  1106                           	opt stack 0
  1107                           
  1108                           ; 2 bytes @ 0xB
  1109  0000D3                     	ds	4
  1110  0000D7                     receiveData@holder:
  1111                           	opt stack 0
  1112                           
  1113                           ; 3 bytes @ 0xF
  1114  0000D7                     	ds	3
  1115  0000DA                     receiveData@holder_1758:
  1116                           	opt stack 0
  1117                           
  1118                           ; 3 bytes @ 0x12
  1119  0000DA                     	ds	3
  1120  0000DD                     receiveData@crcHolder:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x15
  1124  0000DD                     	ds	1
  1125  0000DE                     receiveData@crcHolder_1759:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x16
  1129  0000DE                     	ds	1
  1130  0000DF                     receiveData@u:
  1131                           	opt stack 0
  1132                           
  1133                           ; 2 bytes @ 0x17
  1134  0000DF                     	ds	2
  1135  0000E1                     receiveData@r:
  1136                           	opt stack 0
  1137                           
  1138                           ; 2 bytes @ 0x19
  1139  0000E1                     	ds	2
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           postinc0	equ	0xFEE
  1145                           wreg	equ	0xFE8
  1146                           postdec1	equ	0xFE5
  1147                           fsr1h	equ	0xFE2
  1148                           fsr1l	equ	0xFE1
  1149                           
  1150                           	psect	cstackCOMRAM
  1151  000001                     __pcstackCOMRAM:
  1152                           	opt stack 0
  1153  000001                     ?i2_UART_buff_size:
  1154                           	opt stack 0
  1155  000001                     ?i2_UART_buff_modulo_inc:
  1156                           	opt stack 0
  1157  000001                     i2UART_buff_size@_this:
  1158                           	opt stack 0
  1159  000001                     i2UART_buff_modulo_inc@value:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x0
  1163  000001                     	ds	2
  1164  000003                     i2UART_buff_modulo_inc@modulus:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x2
  1168  000003                     	ds	2
  1169  000005                     i2UART_buff_modulo_inc@my_value:
  1170                           	opt stack 0
  1171                           
  1172                           ; 2 bytes @ 0x4
  1173  000005                     	ds	2
  1174  000007                     i2UART_buff_put@_this:
  1175                           	opt stack 0
  1176  000007                     i2UART_buff_get@_this:
  1177                           	opt stack 0
  1178                           
  1179                           ; 2 bytes @ 0x6
  1180  000007                     	ds	2
  1181  000009                     ??i2_UART_buff_get:
  1182  000009                     i2UART_buff_put@c:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x8
  1186  000009                     	ds	1
  1187  00000A                     ??i2_UART_buff_put:
  1188                           
  1189                           ; 1 bytes @ 0x9
  1190  00000A                     	ds	1
  1191  00000B                     i2UART_buff_get@c:
  1192                           	opt stack 0
  1193                           
  1194                           ; 1 bytes @ 0xA
  1195  00000B                     	ds	1
  1196  00000C                     EUSART2_Receive_ISR@data:
  1197                           	opt stack 0
  1198                           
  1199                           ; 1 bytes @ 0xB
  1200  00000C                     	ds	1
  1201  00000D                     ??_INTERRUPT_InterruptManager:
  1202                           
  1203                           ; 1 bytes @ 0xC
  1204  00000D                     	ds	14
  1205  00001B                     ??_TMR0_Initialize:
  1206  00001B                     ??_updateTimers:
  1207  00001B                     ?_FastTransfer_buffer_modulo_inc:
  1208                           	opt stack 0
  1209  00001B                     ?_UART_buff_modulo_inc:
  1210                           	opt stack 0
  1211  00001B                     ?_time_get:
  1212                           	opt stack 0
  1213  00001B                     ?_UART_buff_size:
  1214                           	opt stack 0
  1215  00001B                     ?___awdiv:
  1216                           	opt stack 0
  1217  00001B                     time_Set@value:
  1218                           	opt stack 0
  1219  00001B                     CRC8@data:
  1220                           	opt stack 0
  1221  00001B                     FastTransfer_buffer_modulo_inc@value:
  1222                           	opt stack 0
  1223  00001B                     crcBufS_put@_this:
  1224                           	opt stack 0
  1225  00001B                     crcBufS_status_put@_this:
  1226                           	opt stack 0
  1227  00001B                     crcBufS_get@_this:
  1228                           	opt stack 0
  1229  00001B                     UART_buff_size@_this:
  1230                           	opt stack 0
  1231  00001B                     UART_buff_modulo_inc@value:
  1232                           	opt stack 0
  1233  00001B                     UART_buff_peek@_this:
  1234                           	opt stack 0
  1235  00001B                     Delay@wait:
  1236                           	opt stack 0
  1237  00001B                     ___awdiv@dividend:
  1238                           	opt stack 0
  1239  00001B                     memset@p1:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x1A
  1243  00001B                     	ds	2
  1244  00001D                     ??_Delay:
  1245  00001D                     ??_UART_buff_peek:
  1246  00001D                     ?_Receive_available:
  1247                           	opt stack 0
  1248  00001D                     time_get@WhatTime:
  1249                           	opt stack 0
  1250  00001D                     time_Set@WhatTime:
  1251                           	opt stack 0
  1252  00001D                     CRC8@len:
  1253                           	opt stack 0
  1254  00001D                     crcBufS_put@address:
  1255                           	opt stack 0
  1256  00001D                     crcBufS_status_put@time:
  1257                           	opt stack 0
  1258  00001D                     crcBufS_get@time:
  1259                           	opt stack 0
  1260  00001D                     FastTransfer_buffer_modulo_inc@modulus:
  1261                           	opt stack 0
  1262  00001D                     UART_buff_modulo_inc@modulus:
  1263                           	opt stack 0
  1264  00001D                     ___awdiv@divisor:
  1265                           	opt stack 0
  1266  00001D                     memset@c:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x1C
  1270  00001D                     	ds	1
  1271  00001E                     CRC8@sum:
  1272                           	opt stack 0
  1273  00001E                     crcBufS_put@oldCRC:
  1274                           	opt stack 0
  1275  00001E                     crcBufS_status_put@status:
  1276                           	opt stack 0
  1277  00001E                     crcBufS_get@space:
  1278                           	opt stack 0
  1279  00001E                     Delay@i:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x1D
  1283  00001E                     	ds	1
  1284  00001F                     ??_crcBufS_get:
  1285  00001F                     ??_crcBufS_status_put:
  1286  00001F                     CRC8@extract:
  1287                           	opt stack 0
  1288  00001F                     crcBufS_put@status:
  1289                           	opt stack 0
  1290  00001F                     ___awdiv@counter:
  1291                           	opt stack 0
  1292  00001F                     FastTransfer_buffer_modulo_inc@my_value:
  1293                           	opt stack 0
  1294  00001F                     UART_buff_modulo_inc@my_value:
  1295                           	opt stack 0
  1296  00001F                     memset@n:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x1E
  1300  00001F                     	ds	1
  1301  000020                     ??_crcBufS_put:
  1302  000020                     CRC8@tempI:
  1303                           	opt stack 0
  1304  000020                     ___awdiv@sign:
  1305                           	opt stack 0
  1306                           
  1307                           ; 1 bytes @ 0x1F
  1308  000020                     	ds	1
  1309  000021                     CRC8@crc:
  1310                           	opt stack 0
  1311  000021                     FastTransfer_buffer_put@_this:
  1312                           	opt stack 0
  1313  000021                     UART_buff_put@_this:
  1314                           	opt stack 0
  1315  000021                     UART_buff_get@_this:
  1316                           	opt stack 0
  1317  000021                     ___awdiv@quotient:
  1318                           	opt stack 0
  1319  000021                     memset@p:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x20
  1323  000021                     	ds	2
  1324  000023                     ??_UART_buff_get:
  1325  000023                     FastTransfer_buffer_put@towhere:
  1326                           	opt stack 0
  1327  000023                     UART_buff_put@c:
  1328                           	opt stack 0
  1329  000023                     crcBufS_status_put@wantedTime:
  1330                           	opt stack 0
  1331  000023                     UART_buff_init@_this:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x22
  1335  000023                     	ds	1
  1336  000024                     ??_UART_buff_put:
  1337  000024                     FastTransfer_buffer_put@towhat:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x23
  1341  000024                     	ds	1
  1342  000025                     UART_buff_get@c:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x24
  1346  000025                     	ds	1
  1347  000026                     tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1h	equ	0xFE2
  1355                           fsr1l	equ	0xFE1
  1356                           
  1357                           ; 1 bytes @ 0x25
  1358 ;;
  1359 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1360 ;;
  1361 ;; *************** function _main *****************
  1362 ;; Defined at:
  1363 ;;		line 16 in file "main.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;		None
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1377 ;;      Params:         0       0       0       0       0       0       0
  1378 ;;      Locals:         0       0       0       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0
  1380 ;;      Totals:         0       0       0       0       0       0       0
  1381 ;;Total ram usage:        0 bytes
  1382 ;; Hardware stack levels required when called:   11
  1383 ;; This function calls:
  1384 ;;		_SYSTEM_Initialize
  1385 ;;		_SetBMM
  1386 ;;		_ledDebug
  1387 ;;		_updateTimers
  1388 ;; This function is called by:
  1389 ;;		Startup code after reset
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           
  1393                           	psect	text0
  1394  0014B0                     __ptext0:
  1395                           	opt stack 0
  1396  0014B0                     _main:
  1397                           	opt stack 20
  1398                           
  1399                           ;main.c: 18: SYSTEM_Initialize();
  1400                           
  1401                           ;incstack = 0
  1402  0014B0  EC39  F00C         	call	_SYSTEM_Initialize	;wreg free
  1403                           
  1404                           ;main.c: 37: (INTCONbits.GIE = 1);
  1405  0014B4  8EF2               	bsf	intcon,7,c	;volatile
  1406                           
  1407                           ;main.c: 40: (INTCONbits.PEIE = 1);
  1408  0014B6  8CF2               	bsf	intcon,6,c	;volatile
  1409                           
  1410                           ;main.c: 47: ANSELC = 0;
  1411  0014B8  0E00               	movlw	0
  1412  0014BA  010F               	movlb	15	; () banked
  1413  0014BC  6F3A               	movwf	58,b	;volatile
  1414                           
  1415                           ; BSR set to: 15
  1416                           ;main.c: 48: ANSELA = 0;
  1417  0014BE  0E00               	movlw	0
  1418  0014C0  010F               	movlb	15	; () banked
  1419  0014C2  6F38               	movwf	56,b	;volatile
  1420                           
  1421                           ; BSR set to: 15
  1422                           ;main.c: 49: TRISCbits.TRISC0=0;
  1423  0014C4  9094               	bcf	3988,0,c	;volatile
  1424                           
  1425                           ; BSR set to: 15
  1426                           ;main.c: 50: TRISCbits.TRISC1=0;
  1427  0014C6  9294               	bcf	3988,1,c	;volatile
  1428                           
  1429                           ; BSR set to: 15
  1430                           ;main.c: 51: TRISCbits.TRISC2=0;
  1431  0014C8  9494               	bcf	3988,2,c	;volatile
  1432                           
  1433                           ; BSR set to: 15
  1434                           ;main.c: 52: TRISAbits.TRISA6=0;
  1435  0014CA  9C92               	bcf	3986,6,c	;volatile
  1436                           
  1437                           ; BSR set to: 15
  1438                           ;main.c: 53: TRISAbits.TRISA7=0;
  1439  0014CC  9E92               	bcf	3986,7,c	;volatile
  1440                           
  1441                           ; BSR set to: 15
  1442                           ;main.c: 54: TRISBbits.TRISB3=0;
  1443  0014CE  9693               	bcf	3987,3,c	;volatile
  1444                           
  1445                           ; BSR set to: 15
  1446                           ;main.c: 55: TRISBbits.TRISB4=0;
  1447  0014D0  9893               	bcf	3987,4,c	;volatile
  1448                           
  1449                           ; BSR set to: 15
  1450                           ;main.c: 56: TRISBbits.TRISB5=0;
  1451  0014D2  9A93               	bcf	3987,5,c	;volatile
  1452                           
  1453                           ; BSR set to: 15
  1454                           ;main.c: 57: TRISDbits.TRISD4 = 0;
  1455  0014D4  9895               	bcf	3989,4,c	;volatile
  1456                           
  1457                           ; BSR set to: 15
  1458                           ;main.c: 59: LATBbits.LATB3=0;
  1459  0014D6  968A               	bcf	3978,3,c	;volatile
  1460                           
  1461                           ; BSR set to: 15
  1462                           ;main.c: 60: LATBbits.LATB5=0;
  1463  0014D8  9A8A               	bcf	3978,5,c	;volatile
  1464                           
  1465                           ; BSR set to: 15
  1466                           ;main.c: 61: LATBbits.LATB4=0;
  1467  0014DA  988A               	bcf	3978,4,c	;volatile
  1468                           
  1469                           ; BSR set to: 15
  1470                           
  1471                           ; BSR set to: 15
  1472                           
  1473                           ;main.c: 69: do { LATC1 = 1; } while(0);
  1474  0014DC  828B               	bsf	3979,1,c	;volatile
  1475                           
  1476                           ; BSR set to: 15
  1477                           
  1478                           ; BSR set to: 15
  1479                           
  1480                           ;main.c: 74: do { ANSA3 = 0; } while(0);
  1481                           
  1482                           ; BSR set to: 15
  1483  0014DE  010F               	movlb	15	; () banked
  1484  0014E0  9738               	bcf	56,3,b	;volatile
  1485  0014E2                     l4289:
  1486  0014E2  EC7B  F00A         	call	_SetBMM	;wreg free
  1487  0014E6  0900               	iorlw	0
  1488  0014E8  A4D8               	btfss	status,2,c
  1489  0014EA  D7FB               	goto	l4289
  1490  0014EC                     l4291:
  1491                           
  1492                           ;main.c: 86: updateTimers();
  1493  0014EC  EC77  F009         	call	_updateTimers	;wreg free
  1494                           
  1495                           ;main.c: 87: ledDebug();
  1496  0014F0  EC3C  F00B         	call	_ledDebug	;wreg free
  1497  0014F4  D7FB               	goto	l4291
  1498  0014F6                     __end_of_main:
  1499                           	opt stack 0
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           intcon	equ	0xFF2
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1h	equ	0xFE2
  1509                           fsr1l	equ	0xFE1
  1510                           status	equ	0xFD8
  1511                           
  1512 ;; *************** function _updateTimers *****************
  1513 ;; Defined at:
  1514 ;;		line 148 in file "mcc_generated_files/tmr0.c"
  1515 ;; Parameters:    Size  Location     Type
  1516 ;;		None
  1517 ;; Auto vars:     Size  Location     Type
  1518 ;;		None
  1519 ;; Return value:  Size  Location     Type
  1520 ;;                  1    wreg      void 
  1521 ;; Registers used:
  1522 ;;		wreg, status,2, status,0
  1523 ;; Tracked objects:
  1524 ;;		On entry : 0/0
  1525 ;;		On exit  : 0/0
  1526 ;;		Unchanged: 0/0
  1527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1528 ;;      Params:         0       0       0       0       0       0       0
  1529 ;;      Locals:         0       0       0       0       0       0       0
  1530 ;;      Temps:          8       0       0       0       0       0       0
  1531 ;;      Totals:         8       0       0       0       0       0       0
  1532 ;;Total ram usage:        8 bytes
  1533 ;; Hardware stack levels used:    1
  1534 ;; Hardware stack levels required when called:    4
  1535 ;; This function calls:
  1536 ;;		Nothing
  1537 ;; This function is called by:
  1538 ;;		_main
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text1
  1543  0012EE                     __ptext1:
  1544                           	opt stack 0
  1545  0012EE                     _updateTimers:
  1546                           	opt stack 26
  1547                           
  1548                           ;tmr0.c: 149: LEDtime += (time - lastLEDTime);
  1549                           
  1550                           ;incstack = 0
  1551  0012EE  C07F  F01B         	movff	_lastLEDTime,??_updateTimers
  1552  0012F2  C080  F01C         	movff	_lastLEDTime+1,??_updateTimers+1
  1553  0012F6  C081  F01D         	movff	_lastLEDTime+2,??_updateTimers+2
  1554  0012FA  C082  F01E         	movff	_lastLEDTime+3,??_updateTimers+3
  1555  0012FE  1E1B               	comf	??_updateTimers,f,c
  1556  001300  1E1C               	comf	??_updateTimers+1,f,c
  1557  001302  1E1D               	comf	??_updateTimers+2,f,c
  1558  001304  1E1E               	comf	??_updateTimers+3,f,c
  1559  001306  2A1B               	incf	??_updateTimers,f,c
  1560  001308  0E00               	movlw	0
  1561  00130A  221C               	addwfc	??_updateTimers+1,f,c
  1562  00130C  221D               	addwfc	??_updateTimers+2,f,c
  1563  00130E  221E               	addwfc	??_updateTimers+3,f,c
  1564  001310  5026               	movf	_time,w,c
  1565  001312  241B               	addwf	??_updateTimers,w,c
  1566  001314  6E1F               	movwf	(??_updateTimers+4)& (0+255),c
  1567  001316  5027               	movf	_time+1,w,c
  1568  001318  201C               	addwfc	??_updateTimers+1,w,c
  1569  00131A  6E20               	movwf	(??_updateTimers+5)& (0+255),c
  1570  00131C  5028               	movf	_time+2,w,c
  1571  00131E  201D               	addwfc	??_updateTimers+2,w,c
  1572  001320  6E21               	movwf	(??_updateTimers+6)& (0+255),c
  1573  001322  5029               	movf	_time+3,w,c
  1574  001324  201E               	addwfc	??_updateTimers+3,w,c
  1575  001326  6E22               	movwf	(??_updateTimers+7)& (0+255),c
  1576  001328  501F               	movf	??_updateTimers+4,w,c
  1577  00132A  0100               	movlb	0	; () banked
  1578  00132C  277B               	addwf	_LEDtime& (0+255),f,b
  1579  00132E  5020               	movf	??_updateTimers+5,w,c
  1580  001330  0100               	movlb	0	; () banked
  1581  001332  237C               	addwfc	(_LEDtime+1)& (0+255),f,b
  1582  001334  5021               	movf	??_updateTimers+6,w,c
  1583  001336  0100               	movlb	0	; () banked
  1584  001338  237D               	addwfc	(_LEDtime+2)& (0+255),f,b
  1585  00133A  5022               	movf	??_updateTimers+7,w,c
  1586  00133C  0100               	movlb	0	; () banked
  1587  00133E  237E               	addwfc	(_LEDtime+3)& (0+255),f,b
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;tmr0.c: 150: lastLEDTime = time;
  1591  001340  C026  F07F         	movff	_time,_lastLEDTime
  1592  001344  C027  F080         	movff	_time+1,_lastLEDTime+1
  1593  001348  C028  F081         	movff	_time+2,_lastLEDTime+2
  1594  00134C  C029  F082         	movff	_time+3,_lastLEDTime+3
  1595                           
  1596                           ; BSR set to: 0
  1597  001350  0012               	return		;funcret
  1598  001352                     __end_of_updateTimers:
  1599                           	opt stack 0
  1600                           tblptru	equ	0xFF8
  1601                           tblptrh	equ	0xFF7
  1602                           tblptrl	equ	0xFF6
  1603                           tablat	equ	0xFF5
  1604                           intcon	equ	0xFF2
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1h	equ	0xFE2
  1609                           fsr1l	equ	0xFE1
  1610                           status	equ	0xFD8
  1611                           
  1612 ;; *************** function _ledDebug *****************
  1613 ;; Defined at:
  1614 ;;		line 147 in file "Functions.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1628 ;;      Params:         0       0       0       0       0       0       0
  1629 ;;      Locals:         0       0       0       0       0       0       0
  1630 ;;      Temps:          0       0       0       0       0       0       0
  1631 ;;      Totals:         0       0       0       0       0       0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:   10
  1635 ;; This function calls:
  1636 ;;		_respondChargerAsECU
  1637 ;;		_time_Set
  1638 ;;		_time_get
  1639 ;;		_updateComms
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;; This function uses a non-reentrant model
  1643 ;;
  1644                           
  1645                           	psect	text2
  1646  001678                     __ptext2:
  1647                           	opt stack 0
  1648  001678                     _ledDebug:
  1649                           	opt stack 20
  1650                           
  1651                           ;Functions.c: 148: if (time_get(1) > 4) {
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;incstack = 0
  1655  001678  0E01               	movlw	1
  1656  00167A  EC7E  F00C         	call	_time_get
  1657  00167E  BE1C               	btfsc	?_time_get+1,7,c
  1658  001680  0012               	return	
  1659  001682  501C               	movf	?_time_get+1,w,c
  1660  001684  E104               	bnz	u4440
  1661  001686  0E05               	movlw	5
  1662  001688  5C1B               	subwf	?_time_get,w,c
  1663  00168A  A0D8               	btfss	status,0,c
  1664  00168C  0012               	return	
  1665  00168E                     u4440:
  1666                           
  1667                           ;Functions.c: 150: updateComms();
  1668  00168E  EC52  F00C         	call	_updateComms	;wreg free
  1669                           
  1670                           ;Functions.c: 151: time_Set(1, 0);
  1671  001692  0E00               	movlw	0
  1672  001694  6E1C               	movwf	time_Set@value+1,c
  1673  001696  0E00               	movlw	0
  1674  001698  6E1B               	movwf	time_Set@value,c
  1675  00169A  0E01               	movlw	1
  1676  00169C  ECFD  F00B         	call	_time_Set
  1677                           
  1678                           ;Functions.c: 152: respondChargerAsECU();
  1679  0016A0  ECBB  F00A         	call	_respondChargerAsECU	;wreg free
  1680  0016A4  0012               	return	
  1681  0016A6                     __end_of_ledDebug:
  1682                           	opt stack 0
  1683                           tblptru	equ	0xFF8
  1684                           tblptrh	equ	0xFF7
  1685                           tblptrl	equ	0xFF6
  1686                           tablat	equ	0xFF5
  1687                           intcon	equ	0xFF2
  1688                           postinc0	equ	0xFEE
  1689                           wreg	equ	0xFE8
  1690                           postdec1	equ	0xFE5
  1691                           fsr1h	equ	0xFE2
  1692                           fsr1l	equ	0xFE1
  1693                           status	equ	0xFD8
  1694                           
  1695 ;; *************** function _updateComms *****************
  1696 ;; Defined at:
  1697 ;;		line 21 in file "Communications.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;		None
  1702 ;; Return value:  Size  Location     Type
  1703 ;;                  1    wreg      void 
  1704 ;; Registers used:
  1705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1706 ;; Tracked objects:
  1707 ;;		On entry : 0/0
  1708 ;;		On exit  : 0/0
  1709 ;;		Unchanged: 0/0
  1710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1711 ;;      Params:         0       0       0       0       0       0       0
  1712 ;;      Locals:         0       0       0       0       0       0       0
  1713 ;;      Temps:          0       0       0       0       0       0       0
  1714 ;;      Totals:         0       0       0       0       0       0       0
  1715 ;;Total ram usage:        0 bytes
  1716 ;; Hardware stack levels used:    1
  1717 ;; Hardware stack levels required when called:    9
  1718 ;; This function calls:
  1719 ;;		_receiveData
  1720 ;; This function is called by:
  1721 ;;		_ledDebug
  1722 ;; This function uses a non-reentrant model
  1723 ;;
  1724                           
  1725                           	psect	text3
  1726  0018A4                     __ptext3:
  1727                           	opt stack 0
  1728  0018A4                     _updateComms:
  1729                           	opt stack 20
  1730                           
  1731                           ;Communications.c: 22: if (receiveData()) {
  1732                           
  1733                           ;incstack = 0
  1734  0018A4  EC5E  F000         	call	_receiveData	;wreg free
  1735  0018A8  0900               	iorlw	0
  1736  0018AA  B4D8               	btfsc	status,2,c
  1737  0018AC  0012               	return	
  1738                           
  1739                           ;Communications.c: 23: do { LATA3 = ~LATA3; } while(0);
  1740  0018AE  B689               	btfsc	3977,3,c	;volatile
  1741  0018B0  D002               	goto	u4410
  1742  0018B2  8689               	bsf	3977,3,c	;volatile
  1743  0018B4  0012               	return	
  1744  0018B6                     u4410:
  1745  0018B6  9689               	bcf	3977,3,c	;volatile
  1746  0018B8  0012               	return	
  1747  0018BA                     __end_of_updateComms:
  1748                           	opt stack 0
  1749                           tblptru	equ	0xFF8
  1750                           tblptrh	equ	0xFF7
  1751                           tblptrl	equ	0xFF6
  1752                           tablat	equ	0xFF5
  1753                           intcon	equ	0xFF2
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postdec1	equ	0xFE5
  1757                           fsr1h	equ	0xFE2
  1758                           fsr1l	equ	0xFE1
  1759                           status	equ	0xFD8
  1760                           
  1761 ;; *************** function _time_get *****************
  1762 ;; Defined at:
  1763 ;;		line 153 in file "mcc_generated_files/tmr0.c"
  1764 ;; Parameters:    Size  Location     Type
  1765 ;;  WhatTime        1    wreg     unsigned char 
  1766 ;; Auto vars:     Size  Location     Type
  1767 ;;  WhatTime        1   28[COMRAM] unsigned char 
  1768 ;; Return value:  Size  Location     Type
  1769 ;;                  2   26[COMRAM] int 
  1770 ;; Registers used:
  1771 ;;		wreg, status,2, status,0
  1772 ;; Tracked objects:
  1773 ;;		On entry : 0/0
  1774 ;;		On exit  : 0/0
  1775 ;;		Unchanged: 0/0
  1776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1777 ;;      Params:         2       0       0       0       0       0       0
  1778 ;;      Locals:         1       0       0       0       0       0       0
  1779 ;;      Temps:          0       0       0       0       0       0       0
  1780 ;;      Totals:         3       0       0       0       0       0       0
  1781 ;;Total ram usage:        3 bytes
  1782 ;; Hardware stack levels used:    1
  1783 ;; Hardware stack levels required when called:    4
  1784 ;; This function calls:
  1785 ;;		Nothing
  1786 ;; This function is called by:
  1787 ;;		_ledDebug
  1788 ;; This function uses a non-reentrant model
  1789 ;;
  1790                           
  1791                           	psect	text4
  1792  0018FC                     __ptext4:
  1793                           	opt stack 0
  1794  0018FC                     _time_get:
  1795                           	opt stack 25
  1796                           
  1797                           ;incstack = 0
  1798                           ;time_get@WhatTime stored from wreg
  1799  0018FC  6E1D               	movwf	time_get@WhatTime,c
  1800                           
  1801                           ;tmr0.c: 154: if(WhatTime == 1){
  1802  0018FE  041D               	decf	time_get@WhatTime,w,c
  1803  001900  A4D8               	btfss	status,2,c
  1804  001902  0012               	return	
  1805                           
  1806                           ;tmr0.c: 155: return LEDtime;
  1807  001904  C07B  F01B         	movff	_LEDtime,?_time_get
  1808  001908  C07C  F01C         	movff	_LEDtime+1,?_time_get+1
  1809  00190C  0012               	return	
  1810  00190E                     __end_of_time_get:
  1811                           	opt stack 0
  1812                           tblptru	equ	0xFF8
  1813                           tblptrh	equ	0xFF7
  1814                           tblptrl	equ	0xFF6
  1815                           tablat	equ	0xFF5
  1816                           intcon	equ	0xFF2
  1817                           postinc0	equ	0xFEE
  1818                           wreg	equ	0xFE8
  1819                           postdec1	equ	0xFE5
  1820                           fsr1h	equ	0xFE2
  1821                           fsr1l	equ	0xFE1
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _time_Set *****************
  1825 ;; Defined at:
  1826 ;;		line 159 in file "mcc_generated_files/tmr0.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;  WhatTime        1    wreg     unsigned char 
  1829 ;;  value           2   26[COMRAM] int 
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  WhatTime        1   28[COMRAM] unsigned char 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, status,2, status,0
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1841 ;;      Params:         2       0       0       0       0       0       0
  1842 ;;      Locals:         1       0       0       0       0       0       0
  1843 ;;      Temps:          0       0       0       0       0       0       0
  1844 ;;      Totals:         3       0       0       0       0       0       0
  1845 ;;Total ram usage:        3 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    4
  1848 ;; This function calls:
  1849 ;;		Nothing
  1850 ;; This function is called by:
  1851 ;;		_ledDebug
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           	psect	text5
  1856  0017FA                     __ptext5:
  1857                           	opt stack 0
  1858  0017FA                     _time_Set:
  1859                           	opt stack 25
  1860                           
  1861                           ;incstack = 0
  1862                           ;time_Set@WhatTime stored from wreg
  1863  0017FA  6E1D               	movwf	time_Set@WhatTime,c
  1864                           
  1865                           ;tmr0.c: 160: if(WhatTime == 1){
  1866  0017FC  041D               	decf	time_Set@WhatTime,w,c
  1867  0017FE  A4D8               	btfss	status,2,c
  1868  001800  0012               	return	
  1869                           
  1870                           ;tmr0.c: 161: LEDtime = value;
  1871  001802  C01B  F07B         	movff	time_Set@value,_LEDtime
  1872  001806  C01C  F07C         	movff	time_Set@value+1,_LEDtime+1
  1873  00180A  0100               	movlb	0	; () banked
  1874  00180C  0E00               	movlw	0
  1875  00180E  BF7C               	btfsc	(_LEDtime+1)& (0+255),7,b
  1876  001810  0EFF               	movlw	-1
  1877  001812  6F7D               	movwf	(_LEDtime+2)& (0+255),b
  1878  001814  6F7E               	movwf	(_LEDtime+3)& (0+255),b
  1879  001816  0012               	return	
  1880  001818                     __end_of_time_Set:
  1881                           	opt stack 0
  1882                           tblptru	equ	0xFF8
  1883                           tblptrh	equ	0xFF7
  1884                           tblptrl	equ	0xFF6
  1885                           tablat	equ	0xFF5
  1886                           intcon	equ	0xFF2
  1887                           postinc0	equ	0xFEE
  1888                           wreg	equ	0xFE8
  1889                           postdec1	equ	0xFE5
  1890                           fsr1h	equ	0xFE2
  1891                           fsr1l	equ	0xFE1
  1892                           status	equ	0xFD8
  1893                           
  1894 ;; *************** function _respondChargerAsECU *****************
  1895 ;; Defined at:
  1896 ;;		line 37 in file "Communications.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1910 ;;      Params:         0       0       0       0       0       0       0
  1911 ;;      Locals:         0       0       0       0       0       0       0
  1912 ;;      Temps:          0       0       0       0       0       0       0
  1913 ;;      Totals:         0       0       0       0       0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    8
  1917 ;; This function calls:
  1918 ;;		_Delay
  1919 ;;		_ToSend
  1920 ;;		_sendData
  1921 ;; This function is called by:
  1922 ;;		_ledDebug
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925                           
  1926                           	psect	text6
  1927  001576                     __ptext6:
  1928                           	opt stack 0
  1929  001576                     _respondChargerAsECU:
  1930                           	opt stack 21
  1931                           
  1932                           ;Communications.c: 38: LATDbits.LATD4 = 1;
  1933                           
  1934                           ;incstack = 0
  1935  001576  888C               	bsf	3980,4,c	;volatile
  1936                           
  1937                           ;Communications.c: 40: ToSend(0, 1);
  1938  001578  0E00               	movlw	0
  1939  00157A  0100               	movlb	0	; () banked
  1940  00157C  6FCB               	movwf	(ToSend@what+1)& (0+255),b
  1941  00157E  0E01               	movlw	1
  1942  001580  6FCA               	movwf	ToSend@what& (0+255),b
  1943  001582  0E00               	movlw	0
  1944  001584  EC0C  F00C         	call	_ToSend
  1945                           
  1946                           ;Communications.c: 41: ToSend(1, 3);
  1947  001588  0E00               	movlw	0
  1948  00158A  0100               	movlb	0	; () banked
  1949  00158C  6FCB               	movwf	(ToSend@what+1)& (0+255),b
  1950  00158E  0E03               	movlw	3
  1951  001590  6FCA               	movwf	ToSend@what& (0+255),b
  1952  001592  0E01               	movlw	1
  1953  001594  EC0C  F00C         	call	_ToSend
  1954                           
  1955                           ;Communications.c: 43: sendData(6);
  1956  001598  0E06               	movlw	6
  1957  00159A  EC24  F005         	call	_sendData
  1958                           
  1959                           ;Communications.c: 44: Delay(3);
  1960  00159E  0E00               	movlw	0
  1961  0015A0  6E1C               	movwf	Delay@wait+1,c
  1962  0015A2  0E03               	movlw	3
  1963  0015A4  6E1B               	movwf	Delay@wait,c
  1964  0015A6  ECD7  F00A         	call	_Delay	;wreg free
  1965                           
  1966                           ;Communications.c: 45: LATDbits.LATD4 = 0;
  1967  0015AA  988C               	bcf	3980,4,c	;volatile
  1968  0015AC  0012               	return		;funcret
  1969  0015AE                     __end_of_respondChargerAsECU:
  1970                           	opt stack 0
  1971                           tblptru	equ	0xFF8
  1972                           tblptrh	equ	0xFF7
  1973                           tblptrl	equ	0xFF6
  1974                           tablat	equ	0xFF5
  1975                           intcon	equ	0xFF2
  1976                           postinc0	equ	0xFEE
  1977                           wreg	equ	0xFE8
  1978                           postdec1	equ	0xFE5
  1979                           fsr1h	equ	0xFE2
  1980                           fsr1l	equ	0xFE1
  1981                           status	equ	0xFD8
  1982                           
  1983 ;; *************** function _SetBMM *****************
  1984 ;; Defined at:
  1985 ;;		line 55 in file "Communications.c"
  1986 ;; Parameters:    Size  Location     Type
  1987 ;;		None
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;		None
  1990 ;; Return value:  Size  Location     Type
  1991 ;;                  1    wreg      unsigned char 
  1992 ;; Registers used:
  1993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1994 ;; Tracked objects:
  1995 ;;		On entry : 0/0
  1996 ;;		On exit  : 0/0
  1997 ;;		Unchanged: 0/0
  1998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1999 ;;      Params:         0       0       0       0       0       0       0
  2000 ;;      Locals:         0       0       0       0       0       0       0
  2001 ;;      Temps:          0       0       0       0       0       0       0
  2002 ;;      Totals:         0       0       0       0       0       0       0
  2003 ;;Total ram usage:        0 bytes
  2004 ;; Hardware stack levels used:    1
  2005 ;; Hardware stack levels required when called:    9
  2006 ;; This function calls:
  2007 ;;		_Delay
  2008 ;;		_ToSend
  2009 ;;		_receiveData
  2010 ;;		_sendData
  2011 ;; This function is called by:
  2012 ;;		_main
  2013 ;; This function uses a non-reentrant model
  2014 ;;
  2015                           
  2016                           	psect	text7
  2017  0014F6                     __ptext7:
  2018                           	opt stack 0
  2019  0014F6                     _SetBMM:
  2020                           	opt stack 21
  2021                           
  2022                           ;Communications.c: 56: LATDbits.LATD4 = 1;
  2023                           
  2024                           ;incstack = 0
  2025  0014F6  888C               	bsf	3980,4,c	;volatile
  2026                           
  2027                           ;Communications.c: 58: ToSend(1, 7);
  2028  0014F8  0E00               	movlw	0
  2029  0014FA  0100               	movlb	0	; () banked
  2030  0014FC  6FCB               	movwf	(ToSend@what+1)& (0+255),b
  2031  0014FE  0E07               	movlw	7
  2032  001500  6FCA               	movwf	ToSend@what& (0+255),b
  2033  001502  0E01               	movlw	1
  2034  001504  EC0C  F00C         	call	_ToSend
  2035                           
  2036                           ;Communications.c: 60: sendData(6);
  2037  001508  0E06               	movlw	6
  2038  00150A  EC24  F005         	call	_sendData
  2039                           
  2040                           ;Communications.c: 61: Delay(3);
  2041  00150E  0E00               	movlw	0
  2042  001510  6E1C               	movwf	Delay@wait+1,c
  2043  001512  0E03               	movlw	3
  2044  001514  6E1B               	movwf	Delay@wait,c
  2045  001516  ECD7  F00A         	call	_Delay	;wreg free
  2046                           
  2047                           ;Communications.c: 62: LATDbits.LATD4 = 0;
  2048  00151A  988C               	bcf	3980,4,c	;volatile
  2049                           
  2050                           ;Communications.c: 63: Delay(1000);
  2051  00151C  0E03               	movlw	3
  2052  00151E  6E1C               	movwf	Delay@wait+1,c
  2053  001520  0EE8               	movlw	232
  2054  001522  6E1B               	movwf	Delay@wait,c
  2055  001524  ECD7  F00A         	call	_Delay	;wreg free
  2056                           
  2057                           ;Communications.c: 64: if (receiveData()){
  2058  001528  EC5E  F000         	call	_receiveData	;wreg free
  2059  00152C  0900               	iorlw	0
  2060  00152E  B4D8               	btfsc	status,2,c
  2061  001530  D002               	goto	l4239
  2062                           
  2063                           ;Communications.c: 66: return 0;
  2064  001532  0E00               	movlw	0
  2065                           
  2066                           ;Communications.c: 67: }
  2067  001534  0012               	return	
  2068  001536                     l4239:
  2069                           
  2070                           ;Communications.c: 68: else return 1;
  2071  001536  0E01               	movlw	1
  2072  001538  0012               	return	
  2073  00153A                     __end_of_SetBMM:
  2074                           	opt stack 0
  2075                           tblptru	equ	0xFF8
  2076                           tblptrh	equ	0xFF7
  2077                           tblptrl	equ	0xFF6
  2078                           tablat	equ	0xFF5
  2079                           intcon	equ	0xFF2
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postdec1	equ	0xFE5
  2083                           fsr1h	equ	0xFE2
  2084                           fsr1l	equ	0xFE1
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _sendData *****************
  2088 ;; Defined at:
  2089 ;;		line 108 in file "FastTransfer.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;  whereToSend     1    wreg     unsigned char 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  whereToSend     1    5[BANK0 ] unsigned char 
  2094 ;;  i               2    7[BANK0 ] int 
  2095 ;;  CS              1    6[BANK0 ] unsigned char 
  2096 ;; Return value:  Size  Location     Type
  2097 ;;                  1    wreg      void 
  2098 ;; Registers used:
  2099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  2100 ;; Tracked objects:
  2101 ;;		On entry : 0/0
  2102 ;;		On exit  : 0/0
  2103 ;;		Unchanged: 0/0
  2104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2105 ;;      Params:         0       0       0       0       0       0       0
  2106 ;;      Locals:         0       4       0       0       0       0       0
  2107 ;;      Temps:          0       1       0       0       0       0       0
  2108 ;;      Totals:         0       5       0       0       0       0       0
  2109 ;;Total ram usage:        5 bytes
  2110 ;; Hardware stack levels used:    1
  2111 ;; Hardware stack levels required when called:    7
  2112 ;; This function calls:
  2113 ;;		Absolute function
  2114 ;;		_CRC8
  2115 ;;		_FastTransfer_buffer_flush
  2116 ;;		_Send_put
  2117 ;;		_crcBufS_put
  2118 ;; This function is called by:
  2119 ;;		_respondChargerAsECU
  2120 ;;		_SetBMM
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text8
  2125  000A48                     __ptext8:
  2126                           	opt stack 0
  2127  000A48                     _sendData:
  2128                           	opt stack 21
  2129                           
  2130                           ;incstack = 0
  2131                           ;sendData@whereToSend stored from wreg
  2132  000A48  0100               	movlb	0	; () banked
  2133  000A4A  6FCD               	movwf	sendData@whereToSend& (0+255),b
  2134                           
  2135                           ;FastTransfer.c: 111: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  2136  000A4C  C0E5  F01B         	movff	_sendStructAddress,CRC8@data
  2137  000A50  C0E6  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  2138  000A54  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  2139  000A58  EC33  F00A         	call	_CRC8	;wreg free
  2140  000A5C  0100               	movlb	0	; () banked
  2141  000A5E  6FCE               	movwf	sendData@CS& (0+255),b
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;FastTransfer.c: 113: serial_write(0x06);
  2145  000A60  D801               	call	u4328
  2146  000A62  D00B               	goto	l4171
  2147  000A64                     u4328:
  2148  000A64  0005               	push	
  2149  000A66  6EFA               	movwf	pclath,c
  2150  000A68  503E               	movf	_serial_write,w,c
  2151  000A6A  6EFD               	movwf	tosl,c
  2152  000A6C  503F               	movf	_serial_write+1,w,c
  2153  000A6E  6EFE               	movwf	tosh,c
  2154  000A70  50F8               	movf	tblptru,w,c
  2155  000A72  6EFF               	movwf	tosu,c
  2156  000A74  50FA               	movf	pclath,w,c
  2157  000A76  0E06               	movlw	6
  2158  000A78  0012               	return		;indir
  2159  000A7A                     l4171:
  2160                           
  2161                           ;FastTransfer.c: 114: serial_write(0x85);
  2162  000A7A  D801               	call	u4338
  2163  000A7C  D00B               	goto	l4173
  2164  000A7E                     u4338:
  2165  000A7E  0005               	push	
  2166  000A80  6EFA               	movwf	pclath,c
  2167  000A82  503E               	movf	_serial_write,w,c
  2168  000A84  6EFD               	movwf	tosl,c
  2169  000A86  503F               	movf	_serial_write+1,w,c
  2170  000A88  6EFE               	movwf	tosh,c
  2171  000A8A  50F8               	movf	tblptru,w,c
  2172  000A8C  6EFF               	movwf	tosu,c
  2173  000A8E  50FA               	movf	pclath,w,c
  2174  000A90  0E85               	movlw	133
  2175  000A92  0012               	return		;indir
  2176  000A94                     l4173:
  2177                           
  2178                           ;FastTransfer.c: 115: serial_write(whereToSend);
  2179  000A94  D801               	call	u4348
  2180  000A96  D00C               	goto	l4175
  2181  000A98                     u4348:
  2182  000A98  0005               	push	
  2183  000A9A  6EFA               	movwf	pclath,c
  2184  000A9C  503E               	movf	_serial_write,w,c
  2185  000A9E  6EFD               	movwf	tosl,c
  2186  000AA0  503F               	movf	_serial_write+1,w,c
  2187  000AA2  6EFE               	movwf	tosh,c
  2188  000AA4  50F8               	movf	tblptru,w,c
  2189  000AA6  6EFF               	movwf	tosu,c
  2190  000AA8  50FA               	movf	pclath,w,c
  2191  000AAA  0100               	movlb	0	; () banked
  2192  000AAC  51CD               	movf	sendData@whereToSend& (0+255),w,b
  2193  000AAE  0012               	return		;indir
  2194  000AB0                     l4175:
  2195                           
  2196                           ;FastTransfer.c: 116: serial_write(moduleAddress);
  2197  000AB0  D801               	call	u4358
  2198  000AB2  D00B               	goto	l4177
  2199  000AB4                     u4358:
  2200  000AB4  0005               	push	
  2201  000AB6  6EFA               	movwf	pclath,c
  2202  000AB8  503E               	movf	_serial_write,w,c
  2203  000ABA  6EFD               	movwf	tosl,c
  2204  000ABC  503F               	movf	_serial_write+1,w,c
  2205  000ABE  6EFE               	movwf	tosh,c
  2206  000AC0  50F8               	movf	tblptru,w,c
  2207  000AC2  6EFF               	movwf	tosu,c
  2208  000AC4  50FA               	movf	pclath,w,c
  2209  000AC6  5043               	movf	_moduleAddress,w,c
  2210  000AC8  0012               	return		;indir
  2211  000ACA                     l4177:
  2212                           
  2213                           ;FastTransfer.c: 117: serial_write(ring_buffer.count);
  2214  000ACA  D801               	call	u4368
  2215  000ACC  D00C               	goto	l4179
  2216  000ACE                     u4368:
  2217  000ACE  0005               	push	
  2218  000AD0  6EFA               	movwf	pclath,c
  2219  000AD2  503E               	movf	_serial_write,w,c
  2220  000AD4  6EFD               	movwf	tosl,c
  2221  000AD6  503F               	movf	_serial_write+1,w,c
  2222  000AD8  6EFE               	movwf	tosh,c
  2223  000ADA  50F8               	movf	tblptru,w,c
  2224  000ADC  6EFF               	movwf	tosu,c
  2225  000ADE  50FA               	movf	pclath,w,c
  2226  000AE0  0101               	movlb	1	; () banked
  2227  000AE2  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2228  000AE4  0012               	return		;indir
  2229  000AE6                     l4179:
  2230                           
  2231                           ;FastTransfer.c: 121: int i;
  2232                           ;FastTransfer.c: 122: for (i = 0; i < ring_buffer.count; i++) {
  2233  000AE6  0E00               	movlw	0
  2234  000AE8  0100               	movlb	0	; () banked
  2235  000AEA  6FD0               	movwf	(sendData@i+1)& (0+255),b
  2236  000AEC  0E00               	movlw	0
  2237  000AEE  6FCF               	movwf	sendData@i& (0+255),b
  2238  000AF0  D01A               	goto	l4185
  2239  000AF2                     l4181:
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;FastTransfer.c: 123: serial_write(*(sendStructAddress + i));
  2243  000AF2  D801               	call	u4378
  2244  000AF4  D015               	goto	l4183
  2245  000AF6                     u4378:
  2246  000AF6  0005               	push	
  2247  000AF8  6EFA               	movwf	pclath,c
  2248  000AFA  503E               	movf	_serial_write,w,c
  2249  000AFC  6EFD               	movwf	tosl,c
  2250  000AFE  503F               	movf	_serial_write+1,w,c
  2251  000B00  6EFE               	movwf	tosh,c
  2252  000B02  50F8               	movf	tblptru,w,c
  2253  000B04  6EFF               	movwf	tosu,c
  2254  000B06  50FA               	movf	pclath,w,c
  2255  000B08  0100               	movlb	0	; () banked
  2256  000B0A  51CF               	movf	sendData@i& (0+255),w,b
  2257  000B0C  0100               	movlb	0	; () banked
  2258  000B0E  25E5               	addwf	_sendStructAddress& (0+255),w,b
  2259  000B10  6ED9               	movwf	fsr2l,c
  2260  000B12  0100               	movlb	0	; () banked
  2261  000B14  51D0               	movf	(sendData@i+1)& (0+255),w,b
  2262  000B16  0100               	movlb	0	; () banked
  2263  000B18  21E6               	addwfc	(_sendStructAddress+1)& (0+255),w,b
  2264  000B1A  6EDA               	movwf	fsr2h,c
  2265  000B1C  50DF               	movf	indf2,w,c
  2266  000B1E  0012               	return		;indir
  2267  000B20                     l4183:
  2268  000B20  0100               	movlb	0	; () banked
  2269  000B22  4BCF               	infsnz	sendData@i& (0+255),f,b
  2270  000B24  2BD0               	incf	(sendData@i+1)& (0+255),f,b
  2271  000B26                     l4185:
  2272                           
  2273                           ; BSR set to: 0
  2274  000B26  0101               	movlb	1	; () banked
  2275  000B28  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  2276  000B2A  0100               	movlb	0	; () banked
  2277  000B2C  5DCF               	subwf	sendData@i& (0+255),w,b
  2278  000B2E  0100               	movlb	0	; () banked
  2279  000B30  51D0               	movf	(sendData@i+1)& (0+255),w,b
  2280  000B32  0A80               	xorlw	128
  2281  000B34  0100               	movlb	0	; () banked
  2282  000B36  6FCC               	movwf	??_sendData& (0+255),b
  2283  000B38  0101               	movlb	1	; () banked
  2284  000B3A  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  2285  000B3C  0A80               	xorlw	128
  2286  000B3E  0100               	movlb	0	; () banked
  2287  000B40  59CC               	subwfb	??_sendData& (0+255),w,b
  2288  000B42  A0D8               	btfss	status,0,c
  2289  000B44  D7D6               	goto	l4181
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;FastTransfer.c: 124: }
  2293                           ;FastTransfer.c: 127: serial_write(CS);
  2294                           
  2295                           ; BSR set to: 0
  2296  000B46  D801               	call	u4398
  2297  000B48  D00C               	goto	l4189
  2298  000B4A                     u4398:
  2299  000B4A  0005               	push	
  2300  000B4C  6EFA               	movwf	pclath,c
  2301  000B4E  503E               	movf	_serial_write,w,c
  2302  000B50  6EFD               	movwf	tosl,c
  2303  000B52  503F               	movf	_serial_write+1,w,c
  2304  000B54  6EFE               	movwf	tosh,c
  2305  000B56  50F8               	movf	tblptru,w,c
  2306  000B58  6EFF               	movwf	tosu,c
  2307  000B5A  50FA               	movf	pclath,w,c
  2308  000B5C  0100               	movlb	0	; () banked
  2309  000B5E  51CE               	movf	sendData@CS& (0+255),w,b
  2310  000B60  0012               	return		;indir
  2311  000B62                     l4189:
  2312                           
  2313                           ;FastTransfer.c: 130: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  2314  000B62  0EB7               	movlw	low _crc_buffer
  2315  000B64  6E1B               	movwf	crcBufS_put@_this,c
  2316  000B66  0E00               	movlw	high _crc_buffer
  2317  000B68  6E1C               	movwf	crcBufS_put@_this+1,c
  2318  000B6A  C0CD  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  2319  000B6E  C0CE  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  2320  000B72  0E00               	movlw	0
  2321  000B74  6E1F               	movwf	crcBufS_put@status,c
  2322  000B76  EC5E  F007         	call	_crcBufS_put
  2323                           
  2324                           ;FastTransfer.c: 133: FastTransfer_buffer_flush(&ring_buffer, 1);
  2325  000B7A  0E00               	movlw	low _ring_buffer
  2326  000B7C  0100               	movlb	0	; () banked
  2327  000B7E  6FC8               	movwf	FastTransfer_buffer_flush@_this& (0+255),b
  2328  000B80  0E01               	movlw	high _ring_buffer
  2329  000B82  0100               	movlb	0	; () banked
  2330  000B84  6FC9               	movwf	(FastTransfer_buffer_flush@_this+1)& (0+255),b
  2331  000B86  0E00               	movlw	0
  2332  000B88  0100               	movlb	0	; () banked
  2333  000B8A  6FCB               	movwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),b
  2334  000B8C  0E01               	movlw	1
  2335  000B8E  6FCA               	movwf	FastTransfer_buffer_flush@clearBuffer& (0+255),b
  2336  000B90  EC41  F009         	call	_FastTransfer_buffer_flush	;wreg free
  2337  000B94  0012               	return		;funcret
  2338  000B96                     __end_of_sendData:
  2339                           	opt stack 0
  2340                           tosu	equ	0xFFF
  2341                           tosh	equ	0xFFE
  2342                           tosl	equ	0xFFD
  2343                           pclath	equ	0xFFA
  2344                           tblptru	equ	0xFF8
  2345                           tblptrh	equ	0xFF7
  2346                           tblptrl	equ	0xFF6
  2347                           tablat	equ	0xFF5
  2348                           intcon	equ	0xFF2
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           fsr1h	equ	0xFE2
  2353                           fsr1l	equ	0xFE1
  2354                           indf2	equ	0xFDF
  2355                           fsr2h	equ	0xFDA
  2356                           fsr2l	equ	0xFD9
  2357                           status	equ	0xFD8
  2358                           
  2359 ;; *************** function _crcBufS_put *****************
  2360 ;; Defined at:
  2361 ;;		line 376 in file "FastTransfer.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  2364 ;;		 -> crc_buffer(17), 
  2365 ;;  address         1   28[COMRAM] unsigned char 
  2366 ;;  oldCRC          1   29[COMRAM] unsigned char 
  2367 ;;  status          1   30[COMRAM] unsigned char 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2379 ;;      Params:         5       0       0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0
  2381 ;;      Temps:          2       0       0       0       0       0       0
  2382 ;;      Totals:         7       0       0       0       0       0       0
  2383 ;;Total ram usage:        7 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; Hardware stack levels required when called:    4
  2386 ;; This function calls:
  2387 ;;		Nothing
  2388 ;; This function is called by:
  2389 ;;		_sendData
  2390 ;; This function uses a non-reentrant model
  2391 ;;
  2392                           
  2393                           	psect	text9
  2394  000EBC                     __ptext9:
  2395                           	opt stack 0
  2396  000EBC                     _crcBufS_put:
  2397                           	opt stack 23
  2398                           
  2399                           ;FastTransfer.c: 377: _this->buf[_this->head] = address;
  2400                           
  2401                           ;incstack = 0
  2402  000EBC  EE20 F00F          	lfsr	2,15
  2403  000EC0  501B               	movf	crcBufS_put@_this,w,c
  2404  000EC2  26D9               	addwf	fsr2l,f,c
  2405  000EC4  501C               	movf	crcBufS_put@_this+1,w,c
  2406  000EC6  22DA               	addwfc	fsr2h,f,c
  2407  000EC8  CFDE F020          	movff	postinc2,??_crcBufS_put
  2408  000ECC  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2409  000ED0  5020               	movf	??_crcBufS_put,w,c
  2410  000ED2  241B               	addwf	crcBufS_put@_this,w,c
  2411  000ED4  6ED9               	movwf	fsr2l,c
  2412  000ED6  5021               	movf	??_crcBufS_put+1,w,c
  2413  000ED8  201C               	addwfc	crcBufS_put@_this+1,w,c
  2414  000EDA  6EDA               	movwf	fsr2h,c
  2415  000EDC  C01D  FFDF         	movff	crcBufS_put@address,indf2
  2416                           
  2417                           ;FastTransfer.c: 378: _this->head++;
  2418  000EE0  EE20 F00F          	lfsr	2,15
  2419  000EE4  501B               	movf	crcBufS_put@_this,w,c
  2420  000EE6  26D9               	addwf	fsr2l,f,c
  2421  000EE8  501C               	movf	crcBufS_put@_this+1,w,c
  2422  000EEA  22DA               	addwfc	fsr2h,f,c
  2423  000EEC  2ADE               	incf	postinc2,f,c
  2424  000EEE  0E00               	movlw	0
  2425  000EF0  22DD               	addwfc	postdec2,f,c
  2426                           
  2427                           ;FastTransfer.c: 379: _this->buf[_this->head] = oldCRC;
  2428  000EF2  EE20 F00F          	lfsr	2,15
  2429  000EF6  501B               	movf	crcBufS_put@_this,w,c
  2430  000EF8  26D9               	addwf	fsr2l,f,c
  2431  000EFA  501C               	movf	crcBufS_put@_this+1,w,c
  2432  000EFC  22DA               	addwfc	fsr2h,f,c
  2433  000EFE  CFDE F020          	movff	postinc2,??_crcBufS_put
  2434  000F02  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2435  000F06  5020               	movf	??_crcBufS_put,w,c
  2436  000F08  241B               	addwf	crcBufS_put@_this,w,c
  2437  000F0A  6ED9               	movwf	fsr2l,c
  2438  000F0C  5021               	movf	??_crcBufS_put+1,w,c
  2439  000F0E  201C               	addwfc	crcBufS_put@_this+1,w,c
  2440  000F10  6EDA               	movwf	fsr2h,c
  2441  000F12  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  2442                           
  2443                           ;FastTransfer.c: 380: _this->head++;
  2444  000F16  EE20 F00F          	lfsr	2,15
  2445  000F1A  501B               	movf	crcBufS_put@_this,w,c
  2446  000F1C  26D9               	addwf	fsr2l,f,c
  2447  000F1E  501C               	movf	crcBufS_put@_this+1,w,c
  2448  000F20  22DA               	addwfc	fsr2h,f,c
  2449  000F22  2ADE               	incf	postinc2,f,c
  2450  000F24  0E00               	movlw	0
  2451  000F26  22DD               	addwfc	postdec2,f,c
  2452                           
  2453                           ;FastTransfer.c: 381: _this->buf[_this->head] = status;
  2454  000F28  EE20 F00F          	lfsr	2,15
  2455  000F2C  501B               	movf	crcBufS_put@_this,w,c
  2456  000F2E  26D9               	addwf	fsr2l,f,c
  2457  000F30  501C               	movf	crcBufS_put@_this+1,w,c
  2458  000F32  22DA               	addwfc	fsr2h,f,c
  2459  000F34  CFDE F020          	movff	postinc2,??_crcBufS_put
  2460  000F38  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  2461  000F3C  5020               	movf	??_crcBufS_put,w,c
  2462  000F3E  241B               	addwf	crcBufS_put@_this,w,c
  2463  000F40  6ED9               	movwf	fsr2l,c
  2464  000F42  5021               	movf	??_crcBufS_put+1,w,c
  2465  000F44  201C               	addwfc	crcBufS_put@_this+1,w,c
  2466  000F46  6EDA               	movwf	fsr2h,c
  2467  000F48  C01F  FFDF         	movff	crcBufS_put@status,indf2
  2468                           
  2469                           ;FastTransfer.c: 382: _this->head++;
  2470  000F4C  EE20 F00F          	lfsr	2,15
  2471  000F50  501B               	movf	crcBufS_put@_this,w,c
  2472  000F52  26D9               	addwf	fsr2l,f,c
  2473  000F54  501C               	movf	crcBufS_put@_this+1,w,c
  2474  000F56  22DA               	addwfc	fsr2h,f,c
  2475  000F58  2ADE               	incf	postinc2,f,c
  2476  000F5A  0E00               	movlw	0
  2477  000F5C  22DD               	addwfc	postdec2,f,c
  2478                           
  2479                           ;FastTransfer.c: 383: if (_this->head >= (5 * 3)) {
  2480  000F5E  EE20 F00F          	lfsr	2,15
  2481  000F62  501B               	movf	crcBufS_put@_this,w,c
  2482  000F64  26D9               	addwf	fsr2l,f,c
  2483  000F66  501C               	movf	crcBufS_put@_this+1,w,c
  2484  000F68  22DA               	addwfc	fsr2h,f,c
  2485  000F6A  0E01               	movlw	1
  2486  000F6C  BEDB               	btfsc	plusw2,7,c
  2487  000F6E  0012               	return	
  2488  000F70  0E01               	movlw	1
  2489  000F72  50DB               	movf	plusw2,w,c
  2490  000F74  E104               	bnz	u3660
  2491  000F76  0E0F               	movlw	15
  2492  000F78  5CDE               	subwf	postinc2,w,c
  2493  000F7A  A0D8               	btfss	status,0,c
  2494  000F7C  0012               	return	
  2495  000F7E                     u3660:
  2496                           
  2497                           ;FastTransfer.c: 384: _this->head = 0;
  2498  000F7E  EE20 F00F          	lfsr	2,15
  2499  000F82  501B               	movf	crcBufS_put@_this,w,c
  2500  000F84  26D9               	addwf	fsr2l,f,c
  2501  000F86  501C               	movf	crcBufS_put@_this+1,w,c
  2502  000F88  22DA               	addwfc	fsr2h,f,c
  2503  000F8A  0E00               	movlw	0
  2504  000F8C  6EDE               	movwf	postinc2,c
  2505  000F8E  0E00               	movlw	0
  2506  000F90  6EDD               	movwf	postdec2,c
  2507  000F92  0012               	return	
  2508  000F94                     __end_of_crcBufS_put:
  2509                           	opt stack 0
  2510                           tosu	equ	0xFFF
  2511                           tosh	equ	0xFFE
  2512                           tosl	equ	0xFFD
  2513                           pclath	equ	0xFFA
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           intcon	equ	0xFF2
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           fsr1h	equ	0xFE2
  2523                           fsr1l	equ	0xFE1
  2524                           indf2	equ	0xFDF
  2525                           postinc2	equ	0xFDE
  2526                           postdec2	equ	0xFDD
  2527                           plusw2	equ	0xFDB
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _FastTransfer_buffer_flush *****************
  2533 ;; Defined at:
  2534 ;;		line 316 in file "FastTransfer.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  _this           2    0[BANK0 ] PTR struct ringBufS
  2537 ;;		 -> ring_buffer(206), 
  2538 ;;  clearBuffer     2    2[BANK0 ] const int 
  2539 ;; Auto vars:     Size  Location     Type
  2540 ;;		None
  2541 ;; Return value:  Size  Location     Type
  2542 ;;                  1    wreg      void 
  2543 ;; Registers used:
  2544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2545 ;; Tracked objects:
  2546 ;;		On entry : 0/0
  2547 ;;		On exit  : 0/0
  2548 ;;		Unchanged: 0/0
  2549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2550 ;;      Params:         0       4       0       0       0       0       0
  2551 ;;      Locals:         0       0       0       0       0       0       0
  2552 ;;      Temps:          0       0       0       0       0       0       0
  2553 ;;      Totals:         0       4       0       0       0       0       0
  2554 ;;Total ram usage:        4 bytes
  2555 ;; Hardware stack levels used:    1
  2556 ;; Hardware stack levels required when called:    5
  2557 ;; This function calls:
  2558 ;;		_memset
  2559 ;; This function is called by:
  2560 ;;		_sendData
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text10
  2565  001282                     __ptext10:
  2566                           	opt stack 0
  2567  001282                     _FastTransfer_buffer_flush:
  2568                           	opt stack 22
  2569                           
  2570                           ;FastTransfer.c: 317: _this->count = 0;
  2571                           
  2572                           ;incstack = 0
  2573  001282  0100               	movlb	0	; () banked
  2574  001284  EE20 F0CC          	lfsr	2,204
  2575  001288  51C8               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2576  00128A  26D9               	addwf	fsr2l,f,c
  2577  00128C  51C9               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2578  00128E  22DA               	addwfc	fsr2h,f,c
  2579  001290  0E00               	movlw	0
  2580  001292  6EDE               	movwf	postinc2,c
  2581  001294  0E00               	movlw	0
  2582  001296  6EDD               	movwf	postdec2,c
  2583                           
  2584                           ;FastTransfer.c: 318: _this->head = 0;
  2585  001298  0100               	movlb	0	; () banked
  2586  00129A  EE20 F0C8          	lfsr	2,200
  2587  00129E  51C8               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2588  0012A0  26D9               	addwf	fsr2l,f,c
  2589  0012A2  51C9               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2590  0012A4  22DA               	addwfc	fsr2h,f,c
  2591  0012A6  0E00               	movlw	0
  2592  0012A8  6EDE               	movwf	postinc2,c
  2593  0012AA  0E00               	movlw	0
  2594  0012AC  6EDD               	movwf	postdec2,c
  2595                           
  2596                           ;FastTransfer.c: 319: _this->tail = 0;
  2597  0012AE  0100               	movlb	0	; () banked
  2598  0012B0  EE20 F0CA          	lfsr	2,202
  2599  0012B4  51C8               	movf	FastTransfer_buffer_flush@_this& (0+255),w,b
  2600  0012B6  26D9               	addwf	fsr2l,f,c
  2601  0012B8  51C9               	movf	(FastTransfer_buffer_flush@_this+1)& (0+255),w,b
  2602  0012BA  22DA               	addwfc	fsr2h,f,c
  2603  0012BC  0E00               	movlw	0
  2604  0012BE  6EDE               	movwf	postinc2,c
  2605  0012C0  0E00               	movlw	0
  2606  0012C2  6EDD               	movwf	postdec2,c
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;FastTransfer.c: 320: if (clearBuffer) {
  2610  0012C4  0100               	movlb	0	; () banked
  2611  0012C6  51CA               	movf	FastTransfer_buffer_flush@clearBuffer& (0+255),w,b
  2612  0012C8  0100               	movlb	0	; () banked
  2613  0012CA  11CB               	iorwf	(FastTransfer_buffer_flush@clearBuffer+1)& (0+255),w,b
  2614  0012CC  B4D8               	btfsc	status,2,c
  2615  0012CE  0012               	return	
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;FastTransfer.c: 321: memset(_this->buf, 0, sizeof (_this->buf));
  2619  0012D0  C0C8  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  2620  0012D4  C0C9  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  2621  0012D8  0E00               	movlw	0
  2622  0012DA  6E1E               	movwf	memset@c+1,c
  2623  0012DC  0E00               	movlw	0
  2624  0012DE  6E1D               	movwf	memset@c,c
  2625  0012E0  0E00               	movlw	0
  2626  0012E2  6E20               	movwf	memset@n+1,c
  2627  0012E4  0EC8               	movlw	200
  2628  0012E6  6E1F               	movwf	memset@n,c
  2629  0012E8  EC80  F00B         	call	_memset	;wreg free
  2630  0012EC  0012               	return	
  2631  0012EE                     __end_of_FastTransfer_buffer_flush:
  2632                           	opt stack 0
  2633                           tosu	equ	0xFFF
  2634                           tosh	equ	0xFFE
  2635                           tosl	equ	0xFFD
  2636                           pclath	equ	0xFFA
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           intcon	equ	0xFF2
  2642                           postinc0	equ	0xFEE
  2643                           wreg	equ	0xFE8
  2644                           postdec1	equ	0xFE5
  2645                           fsr1h	equ	0xFE2
  2646                           fsr1l	equ	0xFE1
  2647                           indf2	equ	0xFDF
  2648                           postinc2	equ	0xFDE
  2649                           postdec2	equ	0xFDD
  2650                           plusw2	equ	0xFDB
  2651                           fsr2h	equ	0xFDA
  2652                           fsr2l	equ	0xFD9
  2653                           status	equ	0xFD8
  2654                           
  2655 ;; *************** function _receiveData *****************
  2656 ;; Defined at:
  2657 ;;		line 137 in file "FastTransfer.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;  holder          3   18[BANK0 ] unsigned char [3]
  2662 ;;  crcHolder       1   22[BANK0 ] unsigned char 
  2663 ;;  holder          3   15[BANK0 ] unsigned char [3]
  2664 ;;  crcHolder       1   21[BANK0 ] unsigned char 
  2665 ;;  u               2   23[BANK0 ] int 
  2666 ;;  r               2   25[BANK0 ] int 
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      unsigned char 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2676 ;;      Params:         0       0       0       0       0       0       0
  2677 ;;      Locals:         0      12       0       0       0       0       0
  2678 ;;      Temps:          0       6       0       0       0       0       0
  2679 ;;      Totals:         0      18       0       0       0       0       0
  2680 ;;Total ram usage:       18 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    8
  2683 ;; This function calls:
  2684 ;;		Absolute function
  2685 ;;		_CRC8
  2686 ;;		_CRCcheck
  2687 ;;		_Receive_available
  2688 ;;		_Receive_get
  2689 ;;		_Receive_peek
  2690 ;;		_Send_put
  2691 ;; This function is called by:
  2692 ;;		_updateComms
  2693 ;;		_SetBMM
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text11
  2698  0000BC                     __ptext11:
  2699                           	opt stack 0
  2700  0000BC                     _receiveData:
  2701                           	opt stack 20
  2702                           
  2703                           ;FastTransfer.c: 140: if (rx_len == 0) {
  2704                           
  2705                           ;incstack = 0
  2706  0000BC  5039               	movf	_rx_len,w,c
  2707  0000BE  A4D8               	btfss	status,2,c
  2708  0000C0  D0AC               	goto	l4037
  2709                           
  2710                           ;FastTransfer.c: 142: if (serial_available() > 4) {
  2711  0000C2  D801               	call	u3848
  2712  0000C4  D00A               	goto	u3849
  2713  0000C6                     u3848:
  2714  0000C6  0005               	push	
  2715  0000C8  6EFA               	movwf	pclath,c
  2716  0000CA  503A               	movf	_serial_available,w,c
  2717  0000CC  6EFD               	movwf	tosl,c
  2718  0000CE  503B               	movf	_serial_available+1,w,c
  2719  0000D0  6EFE               	movwf	tosh,c
  2720  0000D2  50F8               	movf	tblptru,w,c
  2721  0000D4  6EFF               	movwf	tosu,c
  2722  0000D6  50FA               	movf	pclath,w,c
  2723  0000D8  0012               	return		;indir
  2724  0000DA                     u3849:
  2725  0000DA  BE1E               	btfsc	?_Receive_available+1,7,c
  2726  0000DC  D09E               	goto	l4037
  2727  0000DE  501E               	movf	?_Receive_available+1,w,c
  2728  0000E0  E11E               	bnz	l4013
  2729  0000E2  0E05               	movlw	5
  2730  0000E4  5C1D               	subwf	?_Receive_available,w,c
  2731  0000E6  B0D8               	btfsc	status,0,c
  2732  0000E8  D01A               	goto	l4013
  2733  0000EA  D097               	goto	l4037
  2734  0000EC                     l4005:
  2735                           
  2736                           ;FastTransfer.c: 148: alignErrorCounter++;
  2737  0000EC  0100               	movlb	0	; () banked
  2738  0000EE  4B89               	infsnz	_alignErrorCounter& (0+255),f,b
  2739  0000F0  2B8A               	incf	(_alignErrorCounter+1)& (0+255),f,b
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;FastTransfer.c: 149: if (serial_available() < 5)
  2743  0000F2  D801               	call	u3868
  2744  0000F4  D00A               	goto	u3869
  2745  0000F6                     u3868:
  2746  0000F6  0005               	push	
  2747  0000F8  6EFA               	movwf	pclath,c
  2748  0000FA  503A               	movf	_serial_available,w,c
  2749  0000FC  6EFD               	movwf	tosl,c
  2750  0000FE  503B               	movf	_serial_available+1,w,c
  2751  000100  6EFE               	movwf	tosh,c
  2752  000102  50F8               	movf	tblptru,w,c
  2753  000104  6EFF               	movwf	tosu,c
  2754  000106  50FA               	movf	pclath,w,c
  2755  000108  0012               	return		;indir
  2756  00010A                     u3869:
  2757  00010A  BE1E               	btfsc	?_Receive_available+1,7,c
  2758  00010C  D006               	goto	l4009
  2759  00010E  501E               	movf	?_Receive_available+1,w,c
  2760  000110  E106               	bnz	l4013
  2761  000112  0E05               	movlw	5
  2762  000114  5C1D               	subwf	?_Receive_available,w,c
  2763  000116  B0D8               	btfsc	status,0,c
  2764  000118  D002               	goto	l4013
  2765  00011A                     l4009:
  2766                           
  2767                           ;FastTransfer.c: 150: return 0;
  2768  00011A  0E00               	movlw	0
  2769  00011C  0012               	return	
  2770  00011E                     l4013:
  2771  00011E  D801               	call	u3888
  2772  000120  D00A               	goto	u3889
  2773  000122                     u3888:
  2774  000122  0005               	push	
  2775  000124  6EFA               	movwf	pclath,c
  2776  000126  503C               	movf	_serial_read,w,c
  2777  000128  6EFD               	movwf	tosl,c
  2778  00012A  503D               	movf	_serial_read+1,w,c
  2779  00012C  6EFE               	movwf	tosh,c
  2780  00012E  50F8               	movf	tblptru,w,c
  2781  000130  6EFF               	movwf	tosu,c
  2782  000132  50FA               	movf	pclath,w,c
  2783  000134  0012               	return		;indir
  2784  000136                     u3889:
  2785  000136  0A06               	xorlw	6
  2786  000138  A4D8               	btfss	status,2,c
  2787  00013A  D7D8               	goto	l4005
  2788                           
  2789                           ;FastTransfer.c: 151: }
  2790                           ;FastTransfer.c: 152: if (serial_read() == 0x85) {
  2791  00013C  D801               	call	u3908
  2792  00013E  D00A               	goto	u3909
  2793  000140                     u3908:
  2794  000140  0005               	push	
  2795  000142  6EFA               	movwf	pclath,c
  2796  000144  503C               	movf	_serial_read,w,c
  2797  000146  6EFD               	movwf	tosl,c
  2798  000148  503D               	movf	_serial_read+1,w,c
  2799  00014A  6EFE               	movwf	tosh,c
  2800  00014C  50F8               	movf	tblptru,w,c
  2801  00014E  6EFF               	movwf	tosu,c
  2802  000150  50FA               	movf	pclath,w,c
  2803  000152  0012               	return		;indir
  2804  000154                     u3909:
  2805  000154  0A85               	xorlw	133
  2806  000156  A4D8               	btfss	status,2,c
  2807  000158  D060               	goto	l4037
  2808                           
  2809                           ;FastTransfer.c: 153: rx_address = serial_read();
  2810  00015A  D801               	call	u3928
  2811  00015C  D00A               	goto	u3929
  2812  00015E                     u3928:
  2813  00015E  0005               	push	
  2814  000160  6EFA               	movwf	pclath,c
  2815  000162  503C               	movf	_serial_read,w,c
  2816  000164  6EFD               	movwf	tosl,c
  2817  000166  503D               	movf	_serial_read+1,w,c
  2818  000168  6EFE               	movwf	tosh,c
  2819  00016A  50F8               	movf	tblptru,w,c
  2820  00016C  6EFF               	movwf	tosu,c
  2821  00016E  50FA               	movf	pclath,w,c
  2822  000170  0012               	return		;indir
  2823  000172                     u3929:
  2824  000172  6E37               	movwf	_rx_address,c
  2825                           
  2826                           ;FastTransfer.c: 154: returnAddress = serial_read();
  2827  000174  D801               	call	u3938
  2828  000176  D00A               	goto	u3939
  2829  000178                     u3938:
  2830  000178  0005               	push	
  2831  00017A  6EFA               	movwf	pclath,c
  2832  00017C  503C               	movf	_serial_read,w,c
  2833  00017E  6EFD               	movwf	tosl,c
  2834  000180  503D               	movf	_serial_read+1,w,c
  2835  000182  6EFE               	movwf	tosh,c
  2836  000184  50F8               	movf	tblptru,w,c
  2837  000186  6EFF               	movwf	tosu,c
  2838  000188  50FA               	movf	pclath,w,c
  2839  00018A  0012               	return		;indir
  2840  00018C                     u3939:
  2841  00018C  6E36               	movwf	_returnAddress,c
  2842                           
  2843                           ;FastTransfer.c: 155: rx_len = serial_read();
  2844  00018E  D801               	call	u3948
  2845  000190  D00A               	goto	u3949
  2846  000192                     u3948:
  2847  000192  0005               	push	
  2848  000194  6EFA               	movwf	pclath,c
  2849  000196  503C               	movf	_serial_read,w,c
  2850  000198  6EFD               	movwf	tosl,c
  2851  00019A  503D               	movf	_serial_read+1,w,c
  2852  00019C  6EFE               	movwf	tosh,c
  2853  00019E  50F8               	movf	tblptru,w,c
  2854  0001A0  6EFF               	movwf	tosu,c
  2855  0001A2  50FA               	movf	pclath,w,c
  2856  0001A4  0012               	return		;indir
  2857  0001A6                     u3949:
  2858  0001A6  6E39               	movwf	_rx_len,c
  2859                           
  2860                           ;FastTransfer.c: 157: if (rx_address != moduleAddress) {
  2861  0001A8  5043               	movf	_moduleAddress,w,c
  2862  0001AA  1837               	xorwf	_rx_address,w,c
  2863  0001AC  B4D8               	btfsc	status,2,c
  2864  0001AE  D035               	goto	l4037
  2865                           
  2866                           ;FastTransfer.c: 158: addressErrorCounter++;
  2867  0001B0  0100               	movlb	0	; () banked
  2868  0001B2  4B87               	infsnz	_addressErrorCounter& (0+255),f,b
  2869  0001B4  2B88               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;FastTransfer.c: 161: int u;
  2873                           ;FastTransfer.c: 162: for (u = 0; u <= (rx_len + 1); u++) {
  2874  0001B6  0E00               	movlw	0
  2875  0001B8  0100               	movlb	0	; () banked
  2876  0001BA  6FE0               	movwf	(receiveData@u+1)& (0+255),b
  2877  0001BC  0E00               	movlw	0
  2878  0001BE  6FDF               	movwf	receiveData@u& (0+255),b
  2879  0001C0  D00F               	goto	l4029
  2880  0001C2                     l4025:
  2881                           
  2882                           ; BSR set to: 0
  2883                           ;FastTransfer.c: 163: serial_read();
  2884  0001C2  D801               	call	u3968
  2885  0001C4  D00A               	goto	l4027
  2886  0001C6                     u3968:
  2887  0001C6  0005               	push	
  2888  0001C8  6EFA               	movwf	pclath,c
  2889  0001CA  503C               	movf	_serial_read,w,c
  2890  0001CC  6EFD               	movwf	tosl,c
  2891  0001CE  503D               	movf	_serial_read+1,w,c
  2892  0001D0  6EFE               	movwf	tosh,c
  2893  0001D2  50F8               	movf	tblptru,w,c
  2894  0001D4  6EFF               	movwf	tosu,c
  2895  0001D6  50FA               	movf	pclath,w,c
  2896  0001D8  0012               	return		;indir
  2897  0001DA                     l4027:
  2898  0001DA  0100               	movlb	0	; () banked
  2899  0001DC  4BDF               	infsnz	receiveData@u& (0+255),f,b
  2900  0001DE  2BE0               	incf	(receiveData@u+1)& (0+255),f,b
  2901  0001E0                     l4029:
  2902                           
  2903                           ; BSR set to: 0
  2904  0001E0  5039               	movf	_rx_len,w,c
  2905  0001E2  0100               	movlb	0	; () banked
  2906  0001E4  6FD1               	movwf	??_receiveData& (0+255),b
  2907  0001E6  6BD2               	clrf	(??_receiveData+1)& (0+255),b
  2908  0001E8  0E01               	movlw	1
  2909  0001EA  0100               	movlb	0	; () banked
  2910  0001EC  27D1               	addwf	??_receiveData& (0+255),f,b
  2911  0001EE  0E00               	movlw	0
  2912  0001F0  23D2               	addwfc	(??_receiveData+1)& (0+255),f,b
  2913  0001F2  0100               	movlb	0	; () banked
  2914  0001F4  51DF               	movf	receiveData@u& (0+255),w,b
  2915  0001F6  0100               	movlb	0	; () banked
  2916  0001F8  5DD1               	subwf	??_receiveData& (0+255),w,b
  2917  0001FA  0100               	movlb	0	; () banked
  2918  0001FC  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  2919  0001FE  0A80               	xorlw	128
  2920  000200  0100               	movlb	0	; () banked
  2921  000202  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  2922  000204  0100               	movlb	0	; () banked
  2923  000206  51E0               	movf	(receiveData@u+1)& (0+255),w,b
  2924  000208  0A80               	xorlw	128
  2925  00020A  0100               	movlb	0	; () banked
  2926  00020C  59D3               	subwfb	(??_receiveData+2)& (0+255),w,b
  2927  00020E  B0D8               	btfsc	status,0,c
  2928  000210  D7D8               	goto	l4025
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;FastTransfer.c: 164: }
  2932                           ;FastTransfer.c: 165: rx_len = 0;
  2933                           
  2934                           ; BSR set to: 0
  2935  000212  0E00               	movlw	0
  2936  000214  6E39               	movwf	_rx_len,c
  2937                           
  2938                           ; BSR set to: 0
  2939                           ;FastTransfer.c: 166: return 0;
  2940  000216  0E00               	movlw	0
  2941                           
  2942                           ; BSR set to: 0
  2943  000218  0012               	return	
  2944  00021A                     l4037:
  2945                           
  2946                           ;FastTransfer.c: 167: }
  2947                           ;FastTransfer.c: 169: }
  2948                           ;FastTransfer.c: 170: }
  2949                           ;FastTransfer.c: 171: }
  2950                           ;FastTransfer.c: 174: if (rx_len != 0) {
  2951  00021A  5039               	movf	_rx_len,w,c
  2952  00021C  B4D8               	btfsc	status,2,c
  2953  00021E  D2A9               	goto	l4161
  2954                           
  2955                           ;FastTransfer.c: 177: if (rx_array_inx == 0) {
  2956  000220  5038               	movf	_rx_array_inx,w,c
  2957  000222  A4D8               	btfss	status,2,c
  2958  000224  D044               	goto	l4061
  2959  000226                     l4043:
  2960  000226  D801               	call	u4008
  2961  000228  D00A               	goto	u4009
  2962  00022A                     u4008:
  2963  00022A  0005               	push	
  2964  00022C  6EFA               	movwf	pclath,c
  2965  00022E  503A               	movf	_serial_available,w,c
  2966  000230  6EFD               	movwf	tosl,c
  2967  000232  503B               	movf	_serial_available+1,w,c
  2968  000234  6EFE               	movwf	tosh,c
  2969  000236  50F8               	movf	tblptru,w,c
  2970  000238  6EFF               	movwf	tosu,c
  2971  00023A  50FA               	movf	pclath,w,c
  2972  00023C  0012               	return		;indir
  2973  00023E                     u4009:
  2974  00023E  BE1E               	btfsc	?_Receive_available+1,7,c
  2975  000240  D7F2               	goto	l4043
  2976  000242  501E               	movf	?_Receive_available+1,w,c
  2977  000244  E103               	bnz	l4045
  2978  000246  041D               	decf	?_Receive_available,w,c
  2979  000248  A0D8               	btfss	status,0,c
  2980  00024A  D7ED               	goto	l4043
  2981  00024C                     l4045:
  2982                           
  2983                           ;FastTransfer.c: 179: if (255 == serial_peek()) {
  2984  00024C  D801               	call	u4028
  2985  00024E  D00B               	goto	u4029
  2986  000250                     u4028:
  2987  000250  0005               	push	
  2988  000252  0100               	movlb	0	; () banked
  2989  000254  6EFA               	movwf	pclath,c
  2990  000256  51E7               	movf	_serial_peek& (0+255),w,b
  2991  000258  6EFD               	movwf	tosl,c
  2992  00025A  51E8               	movf	(_serial_peek+1)& (0+255),w,b
  2993  00025C  6EFE               	movwf	tosh,c
  2994  00025E  50F8               	movf	tblptru,w,c
  2995  000260  6EFF               	movwf	tosu,c
  2996  000262  50FA               	movf	pclath,w,c
  2997  000264  0012               	return		;indir
  2998  000266                     u4029:
  2999  000266  0AFF               	xorlw	255
  3000  000268  A4D8               	btfss	status,2,c
  3001  00026A  D021               	goto	l4061
  3002                           
  3003                           ;FastTransfer.c: 180: CRCcheck();
  3004  00026C  EC75  F004         	call	_CRCcheck	;wreg free
  3005                           
  3006                           ;FastTransfer.c: 181: rx_len = 0;
  3007  000270  0E00               	movlw	0
  3008  000272  6E39               	movwf	_rx_len,c
  3009                           
  3010                           ;FastTransfer.c: 182: rx_array_inx = 0;
  3011  000274  0E00               	movlw	0
  3012  000276  6E38               	movwf	_rx_array_inx,c
  3013                           
  3014                           ;FastTransfer.c: 183: return 0;
  3015  000278  0E00               	movlw	0
  3016  00027A  0012               	return	
  3017  00027C                     l4057:
  3018                           
  3019                           ;FastTransfer.c: 189: rx_buffer[rx_array_inx++] = serial_read();
  3020  00027C  D801               	call	u4048
  3021  00027E  D00A               	goto	u4049
  3022  000280                     u4048:
  3023  000280  0005               	push	
  3024  000282  6EFA               	movwf	pclath,c
  3025  000284  503C               	movf	_serial_read,w,c
  3026  000286  6EFD               	movwf	tosl,c
  3027  000288  503D               	movf	_serial_read+1,w,c
  3028  00028A  6EFE               	movwf	tosh,c
  3029  00028C  50F8               	movf	tblptru,w,c
  3030  00028E  6EFF               	movwf	tosu,c
  3031  000290  50FA               	movf	pclath,w,c
  3032  000292  0012               	return		;indir
  3033  000294                     u4049:
  3034  000294  0100               	movlb	0	; () banked
  3035  000296  6FD1               	movwf	??_receiveData& (0+255),b
  3036  000298  5038               	movf	_rx_array_inx,w,c
  3037  00029A  0D01               	mullw	1
  3038  00029C  0E00               	movlw	low _rx_buffer
  3039  00029E  24F3               	addwf	prodl,w,c
  3040  0002A0  6ED9               	movwf	fsr2l,c
  3041  0002A2  0E02               	movlw	high _rx_buffer
  3042  0002A4  20F4               	addwfc	prodh,w,c
  3043  0002A6  6EDA               	movwf	fsr2h,c
  3044  0002A8  C0D1  FFDF         	movff	??_receiveData,indf2
  3045                           
  3046                           ; BSR set to: 0
  3047  0002AC  2A38               	incf	_rx_array_inx,f,c
  3048  0002AE                     l4061:
  3049  0002AE  D801               	call	u4058
  3050  0002B0  D00A               	goto	u4059
  3051  0002B2                     u4058:
  3052  0002B2  0005               	push	
  3053  0002B4  6EFA               	movwf	pclath,c
  3054  0002B6  503A               	movf	_serial_available,w,c
  3055  0002B8  6EFD               	movwf	tosl,c
  3056  0002BA  503B               	movf	_serial_available+1,w,c
  3057  0002BC  6EFE               	movwf	tosh,c
  3058  0002BE  50F8               	movf	tblptru,w,c
  3059  0002C0  6EFF               	movwf	tosu,c
  3060  0002C2  50FA               	movf	pclath,w,c
  3061  0002C4  0012               	return		;indir
  3062  0002C6                     u4059:
  3063  0002C6  501D               	movf	?_Receive_available,w,c
  3064  0002C8  101E               	iorwf	?_Receive_available+1,w,c
  3065  0002CA  B4D8               	btfsc	status,2,c
  3066  0002CC  D004               	goto	l4065
  3067  0002CE  5038               	movf	_rx_array_inx,w,c
  3068  0002D0  5C39               	subwf	_rx_len,w,c
  3069  0002D2  B0D8               	btfsc	status,0,c
  3070  0002D4  D7D3               	goto	l4057
  3071  0002D6                     l4065:
  3072                           
  3073                           ;FastTransfer.c: 190: }
  3074                           ;FastTransfer.c: 192: if (rx_len == (rx_array_inx - 1)) {
  3075  0002D6  5039               	movf	_rx_len,w,c
  3076  0002D8  0100               	movlb	0	; () banked
  3077  0002DA  6FD1               	movwf	??_receiveData& (0+255),b
  3078  0002DC  6BD2               	clrf	(??_receiveData+1)& (0+255),b
  3079  0002DE  0EFF               	movlw	255
  3080  0002E0  0100               	movlb	0	; () banked
  3081  0002E2  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3082  0002E4  0EFF               	movlw	255
  3083  0002E6  0100               	movlb	0	; () banked
  3084  0002E8  6FD4               	movwf	(??_receiveData+3)& (0+255),b
  3085  0002EA  5038               	movf	_rx_array_inx,w,c
  3086  0002EC  0100               	movlb	0	; () banked
  3087  0002EE  6FD5               	movwf	(??_receiveData+4)& (0+255),b
  3088  0002F0  6BD6               	clrf	(??_receiveData+5)& (0+255),b
  3089  0002F2  0100               	movlb	0	; () banked
  3090  0002F4  51D3               	movf	(??_receiveData+2)& (0+255),w,b
  3091  0002F6  0100               	movlb	0	; () banked
  3092  0002F8  27D5               	addwf	(??_receiveData+4)& (0+255),f,b
  3093  0002FA  0100               	movlb	0	; () banked
  3094  0002FC  51D4               	movf	(??_receiveData+3)& (0+255),w,b
  3095  0002FE  0100               	movlb	0	; () banked
  3096  000300  23D6               	addwfc	(??_receiveData+5)& (0+255),f,b
  3097  000302  0100               	movlb	0	; () banked
  3098  000304  51D1               	movf	??_receiveData& (0+255),w,b
  3099  000306  0100               	movlb	0	; () banked
  3100  000308  19D5               	xorwf	(??_receiveData+4)& (0+255),w,b
  3101  00030A  E105               	bnz	u4081
  3102  00030C  0100               	movlb	0	; () banked
  3103  00030E  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3104  000310  0100               	movlb	0	; () banked
  3105  000312  19D6               	xorwf	(??_receiveData+5)& (0+255),w,b
  3106  000314  A4D8               	btfss	status,2,c
  3107  000316                     u4081:
  3108  000316  D22D               	goto	l4161
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;FastTransfer.c: 195: calc_CS = CRC8(rx_buffer, rx_len);
  3112  000318  0E00               	movlw	low _rx_buffer
  3113  00031A  6E1B               	movwf	CRC8@data,c
  3114  00031C  0E02               	movlw	high _rx_buffer
  3115  00031E  6E1C               	movwf	CRC8@data+1,c
  3116  000320  C039  F01D         	movff	_rx_len,CRC8@len
  3117  000324  EC33  F00A         	call	_CRC8	;wreg free
  3118  000328  6E2F               	movwf	_calc_CS,c
  3119                           
  3120                           ;FastTransfer.c: 199: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  3121  00032A  0EFF               	movlw	255
  3122  00032C  0100               	movlb	0	; () banked
  3123  00032E  6FD1               	movwf	??_receiveData& (0+255),b
  3124  000330  0EFF               	movlw	255
  3125  000332  0100               	movlb	0	; () banked
  3126  000334  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3127  000336  5038               	movf	_rx_array_inx,w,c
  3128  000338  0100               	movlb	0	; () banked
  3129  00033A  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3130  00033C  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3131  00033E  0100               	movlb	0	; () banked
  3132  000340  51D1               	movf	??_receiveData& (0+255),w,b
  3133  000342  0100               	movlb	0	; () banked
  3134  000344  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3135  000346  0100               	movlb	0	; () banked
  3136  000348  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3137  00034A  0100               	movlb	0	; () banked
  3138  00034C  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3139  00034E  0E00               	movlw	low _rx_buffer
  3140  000350  0100               	movlb	0	; () banked
  3141  000352  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3142  000354  6ED9               	movwf	fsr2l,c
  3143  000356  0E02               	movlw	high _rx_buffer
  3144  000358  0100               	movlb	0	; () banked
  3145  00035A  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3146  00035C  6EDA               	movwf	fsr2h,c
  3147  00035E  502F               	movf	_calc_CS,w,c
  3148  000360  18DE               	xorwf	postinc2,w,c
  3149  000362  A4D8               	btfss	status,2,c
  3150  000364  D13D               	goto	l4123
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;FastTransfer.c: 202: int r;
  3154                           ;FastTransfer.c: 203: for (r = 0; r < rx_len; r = r + 3) {
  3155  000366  0E00               	movlw	0
  3156  000368  0100               	movlb	0	; () banked
  3157  00036A  6FE2               	movwf	(receiveData@r+1)& (0+255),b
  3158  00036C  0E00               	movlw	0
  3159  00036E  6FE1               	movwf	receiveData@r& (0+255),b
  3160  000370  D05D               	goto	l4083
  3161  000372                     l4073:
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;FastTransfer.c: 204: if (rx_buffer[r] < maxDataAddress) {
  3165  000372  0E00               	movlw	low _rx_buffer
  3166  000374  0100               	movlb	0	; () banked
  3167  000376  25E1               	addwf	receiveData@r& (0+255),w,b
  3168  000378  6ED9               	movwf	fsr2l,c
  3169  00037A  0E02               	movlw	high _rx_buffer
  3170  00037C  0100               	movlb	0	; () banked
  3171  00037E  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3172  000380  6EDA               	movwf	fsr2h,c
  3173  000382  0100               	movlb	0	; () banked
  3174  000384  51EA               	movf	_maxDataAddress& (0+255),w,b
  3175  000386  5CDE               	subwf	postinc2,w,c
  3176  000388  B0D8               	btfsc	status,0,c
  3177  00038A  D043               	goto	l4079
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;FastTransfer.c: 205: group.parts[0] = rx_buffer[r + 1];
  3181  00038C  0E01               	movlw	1
  3182  00038E  0100               	movlb	0	; () banked
  3183  000390  25E1               	addwf	receiveData@r& (0+255),w,b
  3184  000392  0100               	movlb	0	; () banked
  3185  000394  6FD1               	movwf	??_receiveData& (0+255),b
  3186  000396  0E00               	movlw	0
  3187  000398  0100               	movlb	0	; () banked
  3188  00039A  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3189  00039C  0100               	movlb	0	; () banked
  3190  00039E  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3191  0003A0  0E00               	movlw	low _rx_buffer
  3192  0003A2  0100               	movlb	0	; () banked
  3193  0003A4  25D1               	addwf	??_receiveData& (0+255),w,b
  3194  0003A6  6ED9               	movwf	fsr2l,c
  3195  0003A8  0E02               	movlw	high _rx_buffer
  3196  0003AA  0100               	movlb	0	; () banked
  3197  0003AC  21D2               	addwfc	(??_receiveData+1)& (0+255),w,b
  3198  0003AE  6EDA               	movwf	fsr2h,c
  3199  0003B0  50DF               	movf	indf2,w,c
  3200  0003B2  6E2C               	movwf	_group,c
  3201                           
  3202                           ;FastTransfer.c: 206: group.parts[1] = rx_buffer[r + 2];
  3203  0003B4  0E02               	movlw	2
  3204  0003B6  0100               	movlb	0	; () banked
  3205  0003B8  25E1               	addwf	receiveData@r& (0+255),w,b
  3206  0003BA  0100               	movlb	0	; () banked
  3207  0003BC  6FD1               	movwf	??_receiveData& (0+255),b
  3208  0003BE  0E00               	movlw	0
  3209  0003C0  0100               	movlb	0	; () banked
  3210  0003C2  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3211  0003C4  0100               	movlb	0	; () banked
  3212  0003C6  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3213  0003C8  0E00               	movlw	low _rx_buffer
  3214  0003CA  0100               	movlb	0	; () banked
  3215  0003CC  25D1               	addwf	??_receiveData& (0+255),w,b
  3216  0003CE  6ED9               	movwf	fsr2l,c
  3217  0003D0  0E02               	movlw	high _rx_buffer
  3218  0003D2  0100               	movlb	0	; () banked
  3219  0003D4  21D2               	addwfc	(??_receiveData+1)& (0+255),w,b
  3220  0003D6  6EDA               	movwf	fsr2h,c
  3221  0003D8  50DF               	movf	indf2,w,c
  3222  0003DA  6E2D               	movwf	_group+1,c
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;FastTransfer.c: 207: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  3226  0003DC  0E00               	movlw	low _rx_buffer
  3227  0003DE  0100               	movlb	0	; () banked
  3228  0003E0  25E1               	addwf	receiveData@r& (0+255),w,b
  3229  0003E2  6ED9               	movwf	fsr2l,c
  3230  0003E4  0E02               	movlw	high _rx_buffer
  3231  0003E6  0100               	movlb	0	; () banked
  3232  0003E8  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3233  0003EA  6EDA               	movwf	fsr2h,c
  3234  0003EC  50DF               	movf	indf2,w,c
  3235  0003EE  0100               	movlb	0	; () banked
  3236  0003F0  6FD1               	movwf	??_receiveData& (0+255),b
  3237  0003F2  0100               	movlb	0	; () banked
  3238  0003F4  51D1               	movf	??_receiveData& (0+255),w,b
  3239  0003F6  0D02               	mullw	2
  3240  0003F8  50F3               	movf	prodl,w,c
  3241  0003FA  0100               	movlb	0	; () banked
  3242  0003FC  25E3               	addwf	_receiveArrayAddress& (0+255),w,b
  3243  0003FE  6ED9               	movwf	fsr2l,c
  3244  000400  50F4               	movf	prodh,w,c
  3245  000402  0100               	movlb	0	; () banked
  3246  000404  21E4               	addwfc	(_receiveArrayAddress+1)& (0+255),w,b
  3247  000406  6EDA               	movwf	fsr2h,c
  3248  000408  C02C  FFDE         	movff	_group,postinc2
  3249  00040C  C02D  FFDD         	movff	_group+1,postdec2
  3250                           
  3251                           ;FastTransfer.c: 208: } else {
  3252  000410  D003               	goto	l4081
  3253  000412                     l4079:
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;FastTransfer.c: 209: dataAdressErrorCounter++;
  3257  000412  0100               	movlb	0	; () banked
  3258  000414  4B8D               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  3259  000416  2B8E               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  3260  000418                     l4081:
  3261                           
  3262                           ; BSR set to: 0
  3263  000418  0E03               	movlw	3
  3264  00041A  0100               	movlb	0	; () banked
  3265  00041C  25E1               	addwf	receiveData@r& (0+255),w,b
  3266  00041E  0100               	movlb	0	; () banked
  3267  000420  6FE1               	movwf	receiveData@r& (0+255),b
  3268  000422  0E00               	movlw	0
  3269  000424  0100               	movlb	0	; () banked
  3270  000426  21E2               	addwfc	(receiveData@r+1)& (0+255),w,b
  3271  000428  0100               	movlb	0	; () banked
  3272  00042A  6FE2               	movwf	(receiveData@r+1)& (0+255),b
  3273  00042C                     l4083:
  3274                           
  3275                           ; BSR set to: 0
  3276  00042C  5039               	movf	_rx_len,w,c
  3277  00042E  0100               	movlb	0	; () banked
  3278  000430  6FD1               	movwf	??_receiveData& (0+255),b
  3279  000432  6BD2               	clrf	(??_receiveData+1)& (0+255),b
  3280  000434  0100               	movlb	0	; () banked
  3281  000436  51D1               	movf	??_receiveData& (0+255),w,b
  3282  000438  0100               	movlb	0	; () banked
  3283  00043A  5DE1               	subwf	receiveData@r& (0+255),w,b
  3284  00043C  0100               	movlb	0	; () banked
  3285  00043E  51E2               	movf	(receiveData@r+1)& (0+255),w,b
  3286  000440  0A80               	xorlw	128
  3287  000442  0100               	movlb	0	; () banked
  3288  000444  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3289  000446  0100               	movlb	0	; () banked
  3290  000448  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3291  00044A  0A80               	xorlw	128
  3292  00044C  0100               	movlb	0	; () banked
  3293  00044E  59D3               	subwfb	(??_receiveData+2)& (0+255),w,b
  3294  000450  A0D8               	btfss	status,0,c
  3295  000452  D78F               	goto	l4073
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;FastTransfer.c: 210: }
  3299                           ;FastTransfer.c: 211: }
  3300                           ;FastTransfer.c: 214: if (AKNAKsend) {
  3301                           
  3302                           ; BSR set to: 0
  3303  000454  0100               	movlb	0	; () banked
  3304  000456  51E9               	movf	_AKNAKsend& (0+255),w,b
  3305  000458  B4D8               	btfsc	status,2,c
  3306  00045A  D0BC               	goto	l4113
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;FastTransfer.c: 215: unsigned char holder[3];
  3310                           ;FastTransfer.c: 216: holder[0] = 255;
  3311  00045C  0100               	movlb	0	; () banked
  3312  00045E  69D7               	setf	receiveData@holder& (0+255),b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;FastTransfer.c: 217: holder[1] = 1;
  3316  000460  0E01               	movlw	1
  3317  000462  0100               	movlb	0	; () banked
  3318  000464  6FD8               	movwf	(receiveData@holder+1)& (0+255),b
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;FastTransfer.c: 218: holder[2] = rx_buffer[rx_array_inx - 1];
  3322  000466  0EFF               	movlw	255
  3323  000468  0100               	movlb	0	; () banked
  3324  00046A  6FD1               	movwf	??_receiveData& (0+255),b
  3325  00046C  0EFF               	movlw	255
  3326  00046E  0100               	movlb	0	; () banked
  3327  000470  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3328  000472  5038               	movf	_rx_array_inx,w,c
  3329  000474  0100               	movlb	0	; () banked
  3330  000476  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3331  000478  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3332  00047A  0100               	movlb	0	; () banked
  3333  00047C  51D1               	movf	??_receiveData& (0+255),w,b
  3334  00047E  0100               	movlb	0	; () banked
  3335  000480  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3336  000482  0100               	movlb	0	; () banked
  3337  000484  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3338  000486  0100               	movlb	0	; () banked
  3339  000488  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3340  00048A  0E00               	movlw	low _rx_buffer
  3341  00048C  0100               	movlb	0	; () banked
  3342  00048E  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3343  000490  6ED9               	movwf	fsr2l,c
  3344  000492  0E02               	movlw	high _rx_buffer
  3345  000494  0100               	movlb	0	; () banked
  3346  000496  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3347  000498  6EDA               	movwf	fsr2h,c
  3348  00049A  50DF               	movf	indf2,w,c
  3349  00049C  0100               	movlb	0	; () banked
  3350  00049E  6FD9               	movwf	(receiveData@holder+2)& (0+255),b
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;FastTransfer.c: 219: unsigned char crcHolder = CRC8(holder, 3);
  3354  0004A0  0ED7               	movlw	low receiveData@holder
  3355  0004A2  6E1B               	movwf	CRC8@data,c
  3356  0004A4  0E00               	movlw	high receiveData@holder
  3357  0004A6  6E1C               	movwf	CRC8@data+1,c
  3358  0004A8  0E03               	movlw	3
  3359  0004AA  6E1D               	movwf	CRC8@len,c
  3360  0004AC  EC33  F00A         	call	_CRC8	;wreg free
  3361  0004B0  0100               	movlb	0	; () banked
  3362  0004B2  6FDD               	movwf	receiveData@crcHolder& (0+255),b
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;FastTransfer.c: 220: serial_write(0x06);
  3366  0004B4  D801               	call	u4138
  3367  0004B6  D00B               	goto	l4097
  3368  0004B8                     u4138:
  3369  0004B8  0005               	push	
  3370  0004BA  6EFA               	movwf	pclath,c
  3371  0004BC  503E               	movf	_serial_write,w,c
  3372  0004BE  6EFD               	movwf	tosl,c
  3373  0004C0  503F               	movf	_serial_write+1,w,c
  3374  0004C2  6EFE               	movwf	tosh,c
  3375  0004C4  50F8               	movf	tblptru,w,c
  3376  0004C6  6EFF               	movwf	tosu,c
  3377  0004C8  50FA               	movf	pclath,w,c
  3378  0004CA  0E06               	movlw	6
  3379  0004CC  0012               	return		;indir
  3380  0004CE                     l4097:
  3381                           
  3382                           ;FastTransfer.c: 221: serial_write(0x85);
  3383  0004CE  D801               	call	u4148
  3384  0004D0  D00B               	goto	l4099
  3385  0004D2                     u4148:
  3386  0004D2  0005               	push	
  3387  0004D4  6EFA               	movwf	pclath,c
  3388  0004D6  503E               	movf	_serial_write,w,c
  3389  0004D8  6EFD               	movwf	tosl,c
  3390  0004DA  503F               	movf	_serial_write+1,w,c
  3391  0004DC  6EFE               	movwf	tosh,c
  3392  0004DE  50F8               	movf	tblptru,w,c
  3393  0004E0  6EFF               	movwf	tosu,c
  3394  0004E2  50FA               	movf	pclath,w,c
  3395  0004E4  0E85               	movlw	133
  3396  0004E6  0012               	return		;indir
  3397  0004E8                     l4099:
  3398                           
  3399                           ;FastTransfer.c: 222: serial_write(returnAddress);
  3400  0004E8  D801               	call	u4158
  3401  0004EA  D00B               	goto	l4101
  3402  0004EC                     u4158:
  3403  0004EC  0005               	push	
  3404  0004EE  6EFA               	movwf	pclath,c
  3405  0004F0  503E               	movf	_serial_write,w,c
  3406  0004F2  6EFD               	movwf	tosl,c
  3407  0004F4  503F               	movf	_serial_write+1,w,c
  3408  0004F6  6EFE               	movwf	tosh,c
  3409  0004F8  50F8               	movf	tblptru,w,c
  3410  0004FA  6EFF               	movwf	tosu,c
  3411  0004FC  50FA               	movf	pclath,w,c
  3412  0004FE  5036               	movf	_returnAddress,w,c
  3413  000500  0012               	return		;indir
  3414  000502                     l4101:
  3415                           
  3416                           ;FastTransfer.c: 223: serial_write(moduleAddress);
  3417  000502  D801               	call	u4168
  3418  000504  D00B               	goto	l4103
  3419  000506                     u4168:
  3420  000506  0005               	push	
  3421  000508  6EFA               	movwf	pclath,c
  3422  00050A  503E               	movf	_serial_write,w,c
  3423  00050C  6EFD               	movwf	tosl,c
  3424  00050E  503F               	movf	_serial_write+1,w,c
  3425  000510  6EFE               	movwf	tosh,c
  3426  000512  50F8               	movf	tblptru,w,c
  3427  000514  6EFF               	movwf	tosu,c
  3428  000516  50FA               	movf	pclath,w,c
  3429  000518  5043               	movf	_moduleAddress,w,c
  3430  00051A  0012               	return		;indir
  3431  00051C                     l4103:
  3432                           
  3433                           ;FastTransfer.c: 224: serial_write(3);
  3434  00051C  D801               	call	u4178
  3435  00051E  D00B               	goto	l4105
  3436  000520                     u4178:
  3437  000520  0005               	push	
  3438  000522  6EFA               	movwf	pclath,c
  3439  000524  503E               	movf	_serial_write,w,c
  3440  000526  6EFD               	movwf	tosl,c
  3441  000528  503F               	movf	_serial_write+1,w,c
  3442  00052A  6EFE               	movwf	tosh,c
  3443  00052C  50F8               	movf	tblptru,w,c
  3444  00052E  6EFF               	movwf	tosu,c
  3445  000530  50FA               	movf	pclath,w,c
  3446  000532  0E03               	movlw	3
  3447  000534  0012               	return		;indir
  3448  000536                     l4105:
  3449                           
  3450                           ;FastTransfer.c: 225: serial_write(255);
  3451  000536  D801               	call	u4188
  3452  000538  D00B               	goto	l4107
  3453  00053A                     u4188:
  3454  00053A  0005               	push	
  3455  00053C  6EFA               	movwf	pclath,c
  3456  00053E  503E               	movf	_serial_write,w,c
  3457  000540  6EFD               	movwf	tosl,c
  3458  000542  503F               	movf	_serial_write+1,w,c
  3459  000544  6EFE               	movwf	tosh,c
  3460  000546  50F8               	movf	tblptru,w,c
  3461  000548  6EFF               	movwf	tosu,c
  3462  00054A  50FA               	movf	pclath,w,c
  3463  00054C  0EFF               	movlw	255
  3464  00054E  0012               	return		;indir
  3465  000550                     l4107:
  3466                           
  3467                           ;FastTransfer.c: 226: serial_write(1);
  3468  000550  D801               	call	u4198
  3469  000552  D00B               	goto	l4109
  3470  000554                     u4198:
  3471  000554  0005               	push	
  3472  000556  6EFA               	movwf	pclath,c
  3473  000558  503E               	movf	_serial_write,w,c
  3474  00055A  6EFD               	movwf	tosl,c
  3475  00055C  503F               	movf	_serial_write+1,w,c
  3476  00055E  6EFE               	movwf	tosh,c
  3477  000560  50F8               	movf	tblptru,w,c
  3478  000562  6EFF               	movwf	tosu,c
  3479  000564  50FA               	movf	pclath,w,c
  3480  000566  0E01               	movlw	1
  3481  000568  0012               	return		;indir
  3482  00056A                     l4109:
  3483                           
  3484                           ;FastTransfer.c: 227: serial_write(rx_buffer[rx_array_inx - 1]);
  3485  00056A  D801               	call	u4208
  3486  00056C  D025               	goto	l4111
  3487  00056E                     u4208:
  3488  00056E  0005               	push	
  3489  000570  6EFA               	movwf	pclath,c
  3490  000572  503E               	movf	_serial_write,w,c
  3491  000574  6EFD               	movwf	tosl,c
  3492  000576  503F               	movf	_serial_write+1,w,c
  3493  000578  6EFE               	movwf	tosh,c
  3494  00057A  50F8               	movf	tblptru,w,c
  3495  00057C  6EFF               	movwf	tosu,c
  3496  00057E  50FA               	movf	pclath,w,c
  3497  000580  0EFF               	movlw	255
  3498  000582  0100               	movlb	0	; () banked
  3499  000584  6FD1               	movwf	??_receiveData& (0+255),b
  3500  000586  0EFF               	movlw	255
  3501  000588  0100               	movlb	0	; () banked
  3502  00058A  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3503  00058C  5038               	movf	_rx_array_inx,w,c
  3504  00058E  0100               	movlb	0	; () banked
  3505  000590  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3506  000592  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3507  000594  0100               	movlb	0	; () banked
  3508  000596  51D1               	movf	??_receiveData& (0+255),w,b
  3509  000598  0100               	movlb	0	; () banked
  3510  00059A  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3511  00059C  0100               	movlb	0	; () banked
  3512  00059E  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3513  0005A0  0100               	movlb	0	; () banked
  3514  0005A2  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3515  0005A4  0E00               	movlw	low _rx_buffer
  3516  0005A6  0100               	movlb	0	; () banked
  3517  0005A8  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3518  0005AA  6ED9               	movwf	fsr2l,c
  3519  0005AC  0E02               	movlw	high _rx_buffer
  3520  0005AE  0100               	movlb	0	; () banked
  3521  0005B0  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3522  0005B2  6EDA               	movwf	fsr2h,c
  3523  0005B4  50DF               	movf	indf2,w,c
  3524  0005B6  0012               	return		;indir
  3525  0005B8                     l4111:
  3526                           
  3527                           ;FastTransfer.c: 228: serial_write(crcHolder);
  3528  0005B8  D801               	call	u4218
  3529  0005BA  D00C               	goto	l4113
  3530  0005BC                     u4218:
  3531  0005BC  0005               	push	
  3532  0005BE  6EFA               	movwf	pclath,c
  3533  0005C0  503E               	movf	_serial_write,w,c
  3534  0005C2  6EFD               	movwf	tosl,c
  3535  0005C4  503F               	movf	_serial_write+1,w,c
  3536  0005C6  6EFE               	movwf	tosh,c
  3537  0005C8  50F8               	movf	tblptru,w,c
  3538  0005CA  6EFF               	movwf	tosu,c
  3539  0005CC  50FA               	movf	pclath,w,c
  3540  0005CE  0100               	movlb	0	; () banked
  3541  0005D0  51DD               	movf	receiveData@crcHolder& (0+255),w,b
  3542  0005D2  0012               	return		;indir
  3543  0005D4                     l4113:
  3544                           
  3545                           ;FastTransfer.c: 229: }
  3546                           ;FastTransfer.c: 233: rx_len = 0;
  3547  0005D4  0E00               	movlw	0
  3548  0005D6  6E39               	movwf	_rx_len,c
  3549                           
  3550                           ;FastTransfer.c: 234: rx_array_inx = 0;
  3551  0005D8  0E00               	movlw	0
  3552  0005DA  6E38               	movwf	_rx_array_inx,c
  3553                           
  3554                           ;FastTransfer.c: 235: return 1;
  3555  0005DC  0E01               	movlw	1
  3556  0005DE  0012               	return	
  3557  0005E0                     l4123:
  3558                           
  3559                           ;FastTransfer.c: 237: crcErrorCounter++;
  3560  0005E0  0100               	movlb	0	; () banked
  3561  0005E2  4B8B               	infsnz	_crcErrorCounter& (0+255),f,b
  3562  0005E4  2B8C               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;FastTransfer.c: 239: if (AKNAKsend) {
  3566  0005E6  0100               	movlb	0	; () banked
  3567  0005E8  51E9               	movf	_AKNAKsend& (0+255),w,b
  3568  0005EA  B4D8               	btfsc	status,2,c
  3569  0005EC  D0BC               	goto	l4153
  3570                           
  3571                           ; BSR set to: 0
  3572                           ;FastTransfer.c: 240: unsigned char holder[3];
  3573                           ;FastTransfer.c: 241: holder[0] = 255;
  3574  0005EE  0100               	movlb	0	; () banked
  3575  0005F0  69DA               	setf	receiveData@holder_1758& (0+255),b
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;FastTransfer.c: 242: holder[1] = 2;
  3579  0005F2  0E02               	movlw	2
  3580  0005F4  0100               	movlb	0	; () banked
  3581  0005F6  6FDB               	movwf	(receiveData@holder_1758+1)& (0+255),b
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;FastTransfer.c: 243: holder[2] = rx_buffer[rx_array_inx - 1];
  3585  0005F8  0EFF               	movlw	255
  3586  0005FA  0100               	movlb	0	; () banked
  3587  0005FC  6FD1               	movwf	??_receiveData& (0+255),b
  3588  0005FE  0EFF               	movlw	255
  3589  000600  0100               	movlb	0	; () banked
  3590  000602  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3591  000604  5038               	movf	_rx_array_inx,w,c
  3592  000606  0100               	movlb	0	; () banked
  3593  000608  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3594  00060A  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3595  00060C  0100               	movlb	0	; () banked
  3596  00060E  51D1               	movf	??_receiveData& (0+255),w,b
  3597  000610  0100               	movlb	0	; () banked
  3598  000612  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3599  000614  0100               	movlb	0	; () banked
  3600  000616  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3601  000618  0100               	movlb	0	; () banked
  3602  00061A  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3603  00061C  0E00               	movlw	low _rx_buffer
  3604  00061E  0100               	movlb	0	; () banked
  3605  000620  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3606  000622  6ED9               	movwf	fsr2l,c
  3607  000624  0E02               	movlw	high _rx_buffer
  3608  000626  0100               	movlb	0	; () banked
  3609  000628  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3610  00062A  6EDA               	movwf	fsr2h,c
  3611  00062C  50DF               	movf	indf2,w,c
  3612  00062E  0100               	movlb	0	; () banked
  3613  000630  6FDC               	movwf	(receiveData@holder_1758+2)& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;FastTransfer.c: 244: unsigned char crcHolder = CRC8(holder, 3);
  3617  000632  0EDA               	movlw	low receiveData@holder_1758
  3618  000634  6E1B               	movwf	CRC8@data,c
  3619  000636  0E00               	movlw	high receiveData@holder_1758
  3620  000638  6E1C               	movwf	CRC8@data+1,c
  3621  00063A  0E03               	movlw	3
  3622  00063C  6E1D               	movwf	CRC8@len,c
  3623  00063E  EC33  F00A         	call	_CRC8
  3624  000642  0100               	movlb	0	; () banked
  3625  000644  6FDE               	movwf	receiveData@crcHolder_1759& (0+255),b
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;FastTransfer.c: 245: serial_write(0x06);
  3629  000646  D801               	call	u4238
  3630  000648  D00B               	goto	l4137
  3631  00064A                     u4238:
  3632  00064A  0005               	push	
  3633  00064C  6EFA               	movwf	pclath,c
  3634  00064E  503E               	movf	_serial_write,w,c
  3635  000650  6EFD               	movwf	tosl,c
  3636  000652  503F               	movf	_serial_write+1,w,c
  3637  000654  6EFE               	movwf	tosh,c
  3638  000656  50F8               	movf	tblptru,w,c
  3639  000658  6EFF               	movwf	tosu,c
  3640  00065A  50FA               	movf	pclath,w,c
  3641  00065C  0E06               	movlw	6
  3642  00065E  0012               	return		;indir
  3643  000660                     l4137:
  3644                           
  3645                           ;FastTransfer.c: 246: serial_write(0x85);
  3646  000660  D801               	call	u4248
  3647  000662  D00B               	goto	l4139
  3648  000664                     u4248:
  3649  000664  0005               	push	
  3650  000666  6EFA               	movwf	pclath,c
  3651  000668  503E               	movf	_serial_write,w,c
  3652  00066A  6EFD               	movwf	tosl,c
  3653  00066C  503F               	movf	_serial_write+1,w,c
  3654  00066E  6EFE               	movwf	tosh,c
  3655  000670  50F8               	movf	tblptru,w,c
  3656  000672  6EFF               	movwf	tosu,c
  3657  000674  50FA               	movf	pclath,w,c
  3658  000676  0E85               	movlw	133
  3659  000678  0012               	return		;indir
  3660  00067A                     l4139:
  3661                           
  3662                           ;FastTransfer.c: 247: serial_write(returnAddress);
  3663  00067A  D801               	call	u4258
  3664  00067C  D00B               	goto	l4141
  3665  00067E                     u4258:
  3666  00067E  0005               	push	
  3667  000680  6EFA               	movwf	pclath,c
  3668  000682  503E               	movf	_serial_write,w,c
  3669  000684  6EFD               	movwf	tosl,c
  3670  000686  503F               	movf	_serial_write+1,w,c
  3671  000688  6EFE               	movwf	tosh,c
  3672  00068A  50F8               	movf	tblptru,w,c
  3673  00068C  6EFF               	movwf	tosu,c
  3674  00068E  50FA               	movf	pclath,w,c
  3675  000690  5036               	movf	_returnAddress,w,c
  3676  000692  0012               	return		;indir
  3677  000694                     l4141:
  3678                           
  3679                           ;FastTransfer.c: 248: serial_write(moduleAddress);
  3680  000694  D801               	call	u4268
  3681  000696  D00B               	goto	l4143
  3682  000698                     u4268:
  3683  000698  0005               	push	
  3684  00069A  6EFA               	movwf	pclath,c
  3685  00069C  503E               	movf	_serial_write,w,c
  3686  00069E  6EFD               	movwf	tosl,c
  3687  0006A0  503F               	movf	_serial_write+1,w,c
  3688  0006A2  6EFE               	movwf	tosh,c
  3689  0006A4  50F8               	movf	tblptru,w,c
  3690  0006A6  6EFF               	movwf	tosu,c
  3691  0006A8  50FA               	movf	pclath,w,c
  3692  0006AA  5043               	movf	_moduleAddress,w,c
  3693  0006AC  0012               	return		;indir
  3694  0006AE                     l4143:
  3695                           
  3696                           ;FastTransfer.c: 249: serial_write(3);
  3697  0006AE  D801               	call	u4278
  3698  0006B0  D00B               	goto	l4145
  3699  0006B2                     u4278:
  3700  0006B2  0005               	push	
  3701  0006B4  6EFA               	movwf	pclath,c
  3702  0006B6  503E               	movf	_serial_write,w,c
  3703  0006B8  6EFD               	movwf	tosl,c
  3704  0006BA  503F               	movf	_serial_write+1,w,c
  3705  0006BC  6EFE               	movwf	tosh,c
  3706  0006BE  50F8               	movf	tblptru,w,c
  3707  0006C0  6EFF               	movwf	tosu,c
  3708  0006C2  50FA               	movf	pclath,w,c
  3709  0006C4  0E03               	movlw	3
  3710  0006C6  0012               	return		;indir
  3711  0006C8                     l4145:
  3712                           
  3713                           ;FastTransfer.c: 250: serial_write(255);
  3714  0006C8  D801               	call	u4288
  3715  0006CA  D00B               	goto	l4147
  3716  0006CC                     u4288:
  3717  0006CC  0005               	push	
  3718  0006CE  6EFA               	movwf	pclath,c
  3719  0006D0  503E               	movf	_serial_write,w,c
  3720  0006D2  6EFD               	movwf	tosl,c
  3721  0006D4  503F               	movf	_serial_write+1,w,c
  3722  0006D6  6EFE               	movwf	tosh,c
  3723  0006D8  50F8               	movf	tblptru,w,c
  3724  0006DA  6EFF               	movwf	tosu,c
  3725  0006DC  50FA               	movf	pclath,w,c
  3726  0006DE  0EFF               	movlw	255
  3727  0006E0  0012               	return		;indir
  3728  0006E2                     l4147:
  3729                           
  3730                           ;FastTransfer.c: 251: serial_write(2);
  3731  0006E2  D801               	call	u4298
  3732  0006E4  D00B               	goto	l4149
  3733  0006E6                     u4298:
  3734  0006E6  0005               	push	
  3735  0006E8  6EFA               	movwf	pclath,c
  3736  0006EA  503E               	movf	_serial_write,w,c
  3737  0006EC  6EFD               	movwf	tosl,c
  3738  0006EE  503F               	movf	_serial_write+1,w,c
  3739  0006F0  6EFE               	movwf	tosh,c
  3740  0006F2  50F8               	movf	tblptru,w,c
  3741  0006F4  6EFF               	movwf	tosu,c
  3742  0006F6  50FA               	movf	pclath,w,c
  3743  0006F8  0E02               	movlw	2
  3744  0006FA  0012               	return		;indir
  3745  0006FC                     l4149:
  3746                           
  3747                           ;FastTransfer.c: 252: serial_write(rx_buffer[rx_array_inx - 1]);
  3748  0006FC  D801               	call	u4308
  3749  0006FE  D025               	goto	l4151
  3750  000700                     u4308:
  3751  000700  0005               	push	
  3752  000702  6EFA               	movwf	pclath,c
  3753  000704  503E               	movf	_serial_write,w,c
  3754  000706  6EFD               	movwf	tosl,c
  3755  000708  503F               	movf	_serial_write+1,w,c
  3756  00070A  6EFE               	movwf	tosh,c
  3757  00070C  50F8               	movf	tblptru,w,c
  3758  00070E  6EFF               	movwf	tosu,c
  3759  000710  50FA               	movf	pclath,w,c
  3760  000712  0EFF               	movlw	255
  3761  000714  0100               	movlb	0	; () banked
  3762  000716  6FD1               	movwf	??_receiveData& (0+255),b
  3763  000718  0EFF               	movlw	255
  3764  00071A  0100               	movlb	0	; () banked
  3765  00071C  6FD2               	movwf	(??_receiveData+1)& (0+255),b
  3766  00071E  5038               	movf	_rx_array_inx,w,c
  3767  000720  0100               	movlb	0	; () banked
  3768  000722  6FD3               	movwf	(??_receiveData+2)& (0+255),b
  3769  000724  6BD4               	clrf	(??_receiveData+3)& (0+255),b
  3770  000726  0100               	movlb	0	; () banked
  3771  000728  51D1               	movf	??_receiveData& (0+255),w,b
  3772  00072A  0100               	movlb	0	; () banked
  3773  00072C  27D3               	addwf	(??_receiveData+2)& (0+255),f,b
  3774  00072E  0100               	movlb	0	; () banked
  3775  000730  51D2               	movf	(??_receiveData+1)& (0+255),w,b
  3776  000732  0100               	movlb	0	; () banked
  3777  000734  23D4               	addwfc	(??_receiveData+3)& (0+255),f,b
  3778  000736  0E00               	movlw	low _rx_buffer
  3779  000738  0100               	movlb	0	; () banked
  3780  00073A  25D3               	addwf	(??_receiveData+2)& (0+255),w,b
  3781  00073C  6ED9               	movwf	fsr2l,c
  3782  00073E  0E02               	movlw	high _rx_buffer
  3783  000740  0100               	movlb	0	; () banked
  3784  000742  21D4               	addwfc	(??_receiveData+3)& (0+255),w,b
  3785  000744  6EDA               	movwf	fsr2h,c
  3786  000746  50DF               	movf	indf2,w,c
  3787  000748  0012               	return		;indir
  3788  00074A                     l4151:
  3789                           
  3790                           ;FastTransfer.c: 253: serial_write(crcHolder);
  3791  00074A  D801               	call	u4318
  3792  00074C  D00C               	goto	l4153
  3793  00074E                     u4318:
  3794  00074E  0005               	push	
  3795  000750  6EFA               	movwf	pclath,c
  3796  000752  503E               	movf	_serial_write,w,c
  3797  000754  6EFD               	movwf	tosl,c
  3798  000756  503F               	movf	_serial_write+1,w,c
  3799  000758  6EFE               	movwf	tosh,c
  3800  00075A  50F8               	movf	tblptru,w,c
  3801  00075C  6EFF               	movwf	tosu,c
  3802  00075E  50FA               	movf	pclath,w,c
  3803  000760  0100               	movlb	0	; () banked
  3804  000762  51DE               	movf	receiveData@crcHolder_1759& (0+255),w,b
  3805  000764  0012               	return		;indir
  3806  000766                     l4153:
  3807                           
  3808                           ;FastTransfer.c: 254: }
  3809                           ;FastTransfer.c: 257: rx_len = 0;
  3810  000766  0E00               	movlw	0
  3811  000768  6E39               	movwf	_rx_len,c
  3812                           
  3813                           ;FastTransfer.c: 258: rx_array_inx = 0;
  3814  00076A  0E00               	movlw	0
  3815  00076C  6E38               	movwf	_rx_array_inx,c
  3816                           
  3817                           ;FastTransfer.c: 259: return 0;
  3818  00076E  0E00               	movlw	0
  3819  000770  0012               	return	
  3820  000772                     l4161:
  3821                           
  3822                           ;FastTransfer.c: 260: }
  3823                           ;FastTransfer.c: 261: }
  3824                           ;FastTransfer.c: 262: }
  3825                           ;FastTransfer.c: 265: return 0;
  3826  000772  0E00               	movlw	0
  3827  000774  0012               	return	
  3828  000776                     __end_of_receiveData:
  3829                           	opt stack 0
  3830                           tosu	equ	0xFFF
  3831                           tosh	equ	0xFFE
  3832                           tosl	equ	0xFFD
  3833                           pclath	equ	0xFFA
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           intcon	equ	0xFF2
  3841                           postinc0	equ	0xFEE
  3842                           wreg	equ	0xFE8
  3843                           postdec1	equ	0xFE5
  3844                           fsr1h	equ	0xFE2
  3845                           fsr1l	equ	0xFE1
  3846                           indf2	equ	0xFDF
  3847                           postinc2	equ	0xFDE
  3848                           postdec2	equ	0xFDD
  3849                           plusw2	equ	0xFDB
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _Send_put *****************
  3855 ;; Defined at:
  3856 ;;		line 132 in file "UART.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;  _data           1    wreg     unsigned char 
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;  _data           1    0[BANK0 ] unsigned char 
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      void 
  3863 ;; Registers used:
  3864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3870 ;;      Params:         0       0       0       0       0       0       0
  3871 ;;      Locals:         0       1       0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0       0       0
  3873 ;;      Totals:         0       1       0       0       0       0       0
  3874 ;;Total ram usage:        1 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    6
  3877 ;; This function calls:
  3878 ;;		_UART_buff_get
  3879 ;;		_UART_buff_put
  3880 ;; This function is called by:
  3881 ;;		_CommsStart
  3882 ;;		_receiveData
  3883 ;;		_sendData
  3884 ;; This function uses a non-reentrant model
  3885 ;;
  3886                           
  3887                           	psect	text12
  3888  001648                     __ptext12:
  3889                           	opt stack 0
  3890  001648                     _Send_put:
  3891                           	opt stack 21
  3892                           
  3893                           ;incstack = 0
  3894                           ;Send_put@_data stored from wreg
  3895  001648  0100               	movlb	0	; () banked
  3896  00164A  6FC8               	movwf	Send_put@_data& (0+255),b
  3897                           
  3898                           ;UART.c: 133: UART_buff_put(&output_buffer, _data);
  3899  00164C  0E00               	movlw	low _output_buffer
  3900  00164E  6E21               	movwf	UART_buff_put@_this,c
  3901  001650  0E04               	movlw	high _output_buffer
  3902  001652  6E22               	movwf	UART_buff_put@_this+1,c
  3903  001654  C0C8  F023         	movff	Send_put@_data,UART_buff_put@c
  3904  001658  ECCB  F005         	call	_UART_buff_put
  3905                           
  3906                           ;UART.c: 134: if (Transmit_stall == 1) {
  3907  00165C  0444               	decf	_Transmit_stall,w,c
  3908  00165E  A4D8               	btfss	status,2,c
  3909  001660  0012               	return	
  3910                           
  3911                           ;UART.c: 135: Transmit_stall = 0;
  3912  001662  0E00               	movlw	0
  3913  001664  6E44               	movwf	_Transmit_stall,c
  3914                           
  3915                           ;UART.c: 136: TXREG2 = UART_buff_get(&output_buffer);
  3916  001666  0E00               	movlw	low _output_buffer
  3917  001668  6E21               	movwf	UART_buff_get@_this,c
  3918  00166A  0E04               	movlw	high _output_buffer
  3919  00166C  6E22               	movwf	UART_buff_get@_this+1,c
  3920  00166E  EC35  F008         	call	_UART_buff_get	;wreg free
  3921  001672  6E73               	movwf	3955,c	;volatile
  3922                           
  3923                           ;UART.c: 137: PIE3bits.TX2IE = 1;
  3924  001674  88A3               	bsf	4003,4,c	;volatile
  3925  001676  0012               	return	
  3926  001678                     __end_of_Send_put:
  3927                           	opt stack 0
  3928                           tosu	equ	0xFFF
  3929                           tosh	equ	0xFFE
  3930                           tosl	equ	0xFFD
  3931                           pclath	equ	0xFFA
  3932                           tblptru	equ	0xFF8
  3933                           tblptrh	equ	0xFF7
  3934                           tblptrl	equ	0xFF6
  3935                           tablat	equ	0xFF5
  3936                           prodh	equ	0xFF4
  3937                           prodl	equ	0xFF3
  3938                           intcon	equ	0xFF2
  3939                           postinc0	equ	0xFEE
  3940                           wreg	equ	0xFE8
  3941                           postdec1	equ	0xFE5
  3942                           fsr1h	equ	0xFE2
  3943                           fsr1l	equ	0xFE1
  3944                           indf2	equ	0xFDF
  3945                           postinc2	equ	0xFDE
  3946                           postdec2	equ	0xFDD
  3947                           plusw2	equ	0xFDB
  3948                           fsr2h	equ	0xFDA
  3949                           fsr2l	equ	0xFD9
  3950                           status	equ	0xFD8
  3951                           
  3952 ;; *************** function _UART_buff_put *****************
  3953 ;; Defined at:
  3954 ;;		line 70 in file "UART.c"
  3955 ;; Parameters:    Size  Location     Type
  3956 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3957 ;;		 -> output_buffer(206), input_buffer(206), 
  3958 ;;  c               1   34[COMRAM] const unsigned char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;		None
  3961 ;; Return value:  Size  Location     Type
  3962 ;;                  1    wreg      void 
  3963 ;; Registers used:
  3964 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3965 ;; Tracked objects:
  3966 ;;		On entry : 0/0
  3967 ;;		On exit  : 0/0
  3968 ;;		Unchanged: 0/0
  3969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3970 ;;      Params:         3       0       0       0       0       0       0
  3971 ;;      Locals:         0       0       0       0       0       0       0
  3972 ;;      Temps:          2       0       0       0       0       0       0
  3973 ;;      Totals:         5       0       0       0       0       0       0
  3974 ;;Total ram usage:        5 bytes
  3975 ;; Hardware stack levels used:    1
  3976 ;; Hardware stack levels required when called:    5
  3977 ;; This function calls:
  3978 ;;		_UART_buff_modulo_inc
  3979 ;; This function is called by:
  3980 ;;		_Send_put
  3981 ;; This function uses a non-reentrant model
  3982 ;;
  3983                           
  3984                           	psect	text13
  3985  000B96                     __ptext13:
  3986                           	opt stack 0
  3987  000B96                     _UART_buff_put:
  3988                           	opt stack 21
  3989                           
  3990                           ;UART.c: 71: if (_this->count < 200) {
  3991                           
  3992                           ;incstack = 0
  3993  000B96  EE20 F0CC          	lfsr	2,204
  3994  000B9A  5021               	movf	UART_buff_put@_this,w,c
  3995  000B9C  26D9               	addwf	fsr2l,f,c
  3996  000B9E  5022               	movf	UART_buff_put@_this+1,w,c
  3997  000BA0  22DA               	addwfc	fsr2h,f,c
  3998  000BA2  0E01               	movlw	1
  3999  000BA4  BEDB               	btfsc	plusw2,7,c
  4000  000BA6  D007               	goto	l3873
  4001  000BA8  0E01               	movlw	1
  4002  000BAA  50DB               	movf	plusw2,w,c
  4003  000BAC  E13A               	bnz	l3879
  4004  000BAE  0EC8               	movlw	200
  4005  000BB0  5CDE               	subwf	postinc2,w,c
  4006  000BB2  B0D8               	btfsc	status,0,c
  4007  000BB4  D036               	goto	l3879
  4008  000BB6                     l3873:
  4009                           
  4010                           ;UART.c: 72: _this->buf[_this->head] = c;
  4011  000BB6  EE20 F0C8          	lfsr	2,200
  4012  000BBA  5021               	movf	UART_buff_put@_this,w,c
  4013  000BBC  26D9               	addwf	fsr2l,f,c
  4014  000BBE  5022               	movf	UART_buff_put@_this+1,w,c
  4015  000BC0  22DA               	addwfc	fsr2h,f,c
  4016  000BC2  CFDE F024          	movff	postinc2,??_UART_buff_put
  4017  000BC6  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  4018  000BCA  5024               	movf	??_UART_buff_put,w,c
  4019  000BCC  2421               	addwf	UART_buff_put@_this,w,c
  4020  000BCE  6ED9               	movwf	fsr2l,c
  4021  000BD0  5025               	movf	??_UART_buff_put+1,w,c
  4022  000BD2  2022               	addwfc	UART_buff_put@_this+1,w,c
  4023  000BD4  6EDA               	movwf	fsr2h,c
  4024  000BD6  C023  FFDF         	movff	UART_buff_put@c,indf2
  4025                           
  4026                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4027  000BDA  EE20 F0C8          	lfsr	2,200
  4028  000BDE  5021               	movf	UART_buff_put@_this,w,c
  4029  000BE0  26D9               	addwf	fsr2l,f,c
  4030  000BE2  5022               	movf	UART_buff_put@_this+1,w,c
  4031  000BE4  22DA               	addwfc	fsr2h,f,c
  4032  000BE6  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4033  000BEA  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4034  000BEE  0E00               	movlw	0
  4035  000BF0  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4036  000BF2  0EC8               	movlw	200
  4037  000BF4  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4038  000BF6  ECAC  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4039  000BFA  EE20 F0C8          	lfsr	2,200
  4040  000BFE  5021               	movf	UART_buff_put@_this,w,c
  4041  000C00  26D9               	addwf	fsr2l,f,c
  4042  000C02  5022               	movf	UART_buff_put@_this+1,w,c
  4043  000C04  22DA               	addwfc	fsr2h,f,c
  4044  000C06  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4045  000C0A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4046                           
  4047                           ;UART.c: 74: ++_this->count;
  4048  000C0E  EE20 F0CC          	lfsr	2,204
  4049  000C12  5021               	movf	UART_buff_put@_this,w,c
  4050  000C14  26D9               	addwf	fsr2l,f,c
  4051  000C16  5022               	movf	UART_buff_put@_this+1,w,c
  4052  000C18  22DA               	addwfc	fsr2h,f,c
  4053  000C1A  2ADE               	incf	postinc2,f,c
  4054  000C1C  0E00               	movlw	0
  4055  000C1E  22DD               	addwfc	postdec2,f,c
  4056                           
  4057                           ;UART.c: 75: } else {
  4058  000C20  0012               	return	
  4059  000C22                     l3879:
  4060                           
  4061                           ;UART.c: 76: _this->buf[_this->head] = c;
  4062  000C22  EE20 F0C8          	lfsr	2,200
  4063  000C26  5021               	movf	UART_buff_put@_this,w,c
  4064  000C28  26D9               	addwf	fsr2l,f,c
  4065  000C2A  5022               	movf	UART_buff_put@_this+1,w,c
  4066  000C2C  22DA               	addwfc	fsr2h,f,c
  4067  000C2E  CFDE F024          	movff	postinc2,??_UART_buff_put
  4068  000C32  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  4069  000C36  5024               	movf	??_UART_buff_put,w,c
  4070  000C38  2421               	addwf	UART_buff_put@_this,w,c
  4071  000C3A  6ED9               	movwf	fsr2l,c
  4072  000C3C  5025               	movf	??_UART_buff_put+1,w,c
  4073  000C3E  2022               	addwfc	UART_buff_put@_this+1,w,c
  4074  000C40  6EDA               	movwf	fsr2h,c
  4075  000C42  C023  FFDF         	movff	UART_buff_put@c,indf2
  4076                           
  4077                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  4078  000C46  EE20 F0C8          	lfsr	2,200
  4079  000C4A  5021               	movf	UART_buff_put@_this,w,c
  4080  000C4C  26D9               	addwf	fsr2l,f,c
  4081  000C4E  5022               	movf	UART_buff_put@_this+1,w,c
  4082  000C50  22DA               	addwfc	fsr2h,f,c
  4083  000C52  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4084  000C56  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4085  000C5A  0E00               	movlw	0
  4086  000C5C  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4087  000C5E  0EC8               	movlw	200
  4088  000C60  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4089  000C62  ECAC  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4090  000C66  EE20 F0C8          	lfsr	2,200
  4091  000C6A  5021               	movf	UART_buff_put@_this,w,c
  4092  000C6C  26D9               	addwf	fsr2l,f,c
  4093  000C6E  5022               	movf	UART_buff_put@_this+1,w,c
  4094  000C70  22DA               	addwfc	fsr2h,f,c
  4095  000C72  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4096  000C76  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4097                           
  4098                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4099  000C7A  EE20 F0CA          	lfsr	2,202
  4100  000C7E  5021               	movf	UART_buff_put@_this,w,c
  4101  000C80  26D9               	addwf	fsr2l,f,c
  4102  000C82  5022               	movf	UART_buff_put@_this+1,w,c
  4103  000C84  22DA               	addwfc	fsr2h,f,c
  4104  000C86  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4105  000C8A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4106  000C8E  0E00               	movlw	0
  4107  000C90  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4108  000C92  0EC8               	movlw	200
  4109  000C94  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4110  000C96  ECAC  F00B         	call	_UART_buff_modulo_inc	;wreg free
  4111  000C9A  EE20 F0CA          	lfsr	2,202
  4112  000C9E  5021               	movf	UART_buff_put@_this,w,c
  4113  000CA0  26D9               	addwf	fsr2l,f,c
  4114  000CA2  5022               	movf	UART_buff_put@_this+1,w,c
  4115  000CA4  22DA               	addwfc	fsr2h,f,c
  4116  000CA6  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4117  000CAA  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4118  000CAE  0012               	return	
  4119  000CB0                     __end_of_UART_buff_put:
  4120                           	opt stack 0
  4121                           tosu	equ	0xFFF
  4122                           tosh	equ	0xFFE
  4123                           tosl	equ	0xFFD
  4124                           pclath	equ	0xFFA
  4125                           tblptru	equ	0xFF8
  4126                           tblptrh	equ	0xFF7
  4127                           tblptrl	equ	0xFF6
  4128                           tablat	equ	0xFF5
  4129                           prodh	equ	0xFF4
  4130                           prodl	equ	0xFF3
  4131                           intcon	equ	0xFF2
  4132                           postinc0	equ	0xFEE
  4133                           wreg	equ	0xFE8
  4134                           postdec1	equ	0xFE5
  4135                           fsr1h	equ	0xFE2
  4136                           fsr1l	equ	0xFE1
  4137                           indf2	equ	0xFDF
  4138                           postinc2	equ	0xFDE
  4139                           postdec2	equ	0xFDD
  4140                           plusw2	equ	0xFDB
  4141                           fsr2h	equ	0xFDA
  4142                           fsr2l	equ	0xFD9
  4143                           status	equ	0xFD8
  4144                           
  4145 ;; *************** function _Receive_peek *****************
  4146 ;; Defined at:
  4147 ;;		line 120 in file "UART.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;		None
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;		None
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      unsigned char 
  4154 ;; Registers used:
  4155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4161 ;;      Params:         0       0       0       0       0       0       0
  4162 ;;      Locals:         0       0       0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0
  4164 ;;      Totals:         0       0       0       0       0       0       0
  4165 ;;Total ram usage:        0 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    5
  4168 ;; This function calls:
  4169 ;;		_UART_buff_peek
  4170 ;; This function is called by:
  4171 ;;		_CommsStart
  4172 ;;		_receiveData
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text14
  4177  00190E                     __ptext14:
  4178                           	opt stack 0
  4179  00190E                     _Receive_peek:
  4180                           	opt stack 22
  4181                           
  4182                           ;UART.c: 121: return UART_buff_peek(&input_buffer);
  4183                           
  4184                           ;incstack = 0
  4185  00190E  0E00               	movlw	low _input_buffer
  4186  001910  6E1B               	movwf	UART_buff_peek@_this,c
  4187  001912  0E03               	movlw	high _input_buffer
  4188  001914  6E1C               	movwf	UART_buff_peek@_this+1,c
  4189  001916  ECEB  F00B         	call	_UART_buff_peek	;wreg free
  4190  00191A  0012               	return	
  4191  00191C                     __end_of_Receive_peek:
  4192                           	opt stack 0
  4193                           tosu	equ	0xFFF
  4194                           tosh	equ	0xFFE
  4195                           tosl	equ	0xFFD
  4196                           pclath	equ	0xFFA
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           postinc0	equ	0xFEE
  4205                           wreg	equ	0xFE8
  4206                           postdec1	equ	0xFE5
  4207                           fsr1h	equ	0xFE2
  4208                           fsr1l	equ	0xFE1
  4209                           indf2	equ	0xFDF
  4210                           postinc2	equ	0xFDE
  4211                           postdec2	equ	0xFDD
  4212                           plusw2	equ	0xFDB
  4213                           fsr2h	equ	0xFDA
  4214                           fsr2l	equ	0xFD9
  4215                           status	equ	0xFD8
  4216                           
  4217 ;; *************** function _UART_buff_peek *****************
  4218 ;; Defined at:
  4219 ;;		line 116 in file "UART.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4222 ;;		 -> input_buffer(206), 
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      unsigned char 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4234 ;;      Params:         2       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0
  4236 ;;      Temps:          2       0       0       0       0       0       0
  4237 ;;      Totals:         4       0       0       0       0       0       0
  4238 ;;Total ram usage:        4 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    4
  4241 ;; This function calls:
  4242 ;;		Nothing
  4243 ;; This function is called by:
  4244 ;;		_Receive_peek
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text15
  4249  0017D6                     __ptext15:
  4250                           	opt stack 0
  4251  0017D6                     _UART_buff_peek:
  4252                           	opt stack 22
  4253                           
  4254                           ;UART.c: 117: return _this->buf[_this->tail];
  4255                           
  4256                           ;incstack = 0
  4257  0017D6  EE20 F0CA          	lfsr	2,202
  4258  0017DA  501B               	movf	UART_buff_peek@_this,w,c
  4259  0017DC  26D9               	addwf	fsr2l,f,c
  4260  0017DE  501C               	movf	UART_buff_peek@_this+1,w,c
  4261  0017E0  22DA               	addwfc	fsr2h,f,c
  4262  0017E2  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  4263  0017E6  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  4264  0017EA  501D               	movf	??_UART_buff_peek,w,c
  4265  0017EC  241B               	addwf	UART_buff_peek@_this,w,c
  4266  0017EE  6ED9               	movwf	fsr2l,c
  4267  0017F0  501E               	movf	??_UART_buff_peek+1,w,c
  4268  0017F2  201C               	addwfc	UART_buff_peek@_this+1,w,c
  4269  0017F4  6EDA               	movwf	fsr2h,c
  4270  0017F6  50DF               	movf	indf2,w,c
  4271  0017F8  0012               	return	
  4272  0017FA                     __end_of_UART_buff_peek:
  4273                           	opt stack 0
  4274                           tosu	equ	0xFFF
  4275                           tosh	equ	0xFFE
  4276                           tosl	equ	0xFFD
  4277                           pclath	equ	0xFFA
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           prodh	equ	0xFF4
  4283                           prodl	equ	0xFF3
  4284                           intcon	equ	0xFF2
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           postdec1	equ	0xFE5
  4288                           fsr1h	equ	0xFE2
  4289                           fsr1l	equ	0xFE1
  4290                           indf2	equ	0xFDF
  4291                           postinc2	equ	0xFDE
  4292                           postdec2	equ	0xFDD
  4293                           plusw2	equ	0xFDB
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;; *************** function _CRCcheck *****************
  4299 ;; Defined at:
  4300 ;;		line 428 in file "FastTransfer.c"
  4301 ;; Parameters:    Size  Location     Type
  4302 ;;		None
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  rt              2    7[BANK0 ] int 
  4305 ;;  arrayHolder     3    4[BANK0 ] unsigned char [3]
  4306 ;;  calculatedCR    1    3[BANK0 ] unsigned char 
  4307 ;;  SentCRC         1    2[BANK0 ] unsigned char 
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4317 ;;      Params:         0       0       0       0       0       0       0
  4318 ;;      Locals:         0       7       0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0
  4320 ;;      Totals:         0       7       0       0       0       0       0
  4321 ;;Total ram usage:        7 bytes
  4322 ;; Hardware stack levels used:    1
  4323 ;; Hardware stack levels required when called:    7
  4324 ;; This function calls:
  4325 ;;		Absolute function
  4326 ;;		_CRC8
  4327 ;;		_Receive_available
  4328 ;;		_Receive_get
  4329 ;;		_crcBufS_get
  4330 ;;		_crcBufS_status_put
  4331 ;; This function is called by:
  4332 ;;		_receiveData
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text16
  4337  0008EA                     __ptext16:
  4338                           	opt stack 0
  4339  0008EA                     _CRCcheck:
  4340                           	opt stack 20
  4341  0008EA                     l3909:
  4342  0008EA  D801               	call	u3688
  4343  0008EC  D00A               	goto	u3689
  4344  0008EE                     u3688:
  4345  0008EE  0005               	push	
  4346  0008F0  6EFA               	movwf	pclath,c
  4347  0008F2  503A               	movf	_serial_available,w,c
  4348  0008F4  6EFD               	movwf	tosl,c
  4349  0008F6  503B               	movf	_serial_available+1,w,c
  4350  0008F8  6EFE               	movwf	tosh,c
  4351  0008FA  50F8               	movf	tblptru,w,c
  4352  0008FC  6EFF               	movwf	tosu,c
  4353  0008FE  50FA               	movf	pclath,w,c
  4354  000900  0012               	return		;indir
  4355  000902                     u3689:
  4356  000902  BE1E               	btfsc	?_Receive_available+1,7,c
  4357  000904  D7F2               	goto	l3909
  4358  000906  501E               	movf	?_Receive_available+1,w,c
  4359  000908  E104               	bnz	l3911
  4360  00090A  0E04               	movlw	4
  4361  00090C  5C1D               	subwf	?_Receive_available,w,c
  4362  00090E  A0D8               	btfss	status,0,c
  4363  000910  D7EC               	goto	l3909
  4364  000912                     l3911:
  4365                           
  4366                           ;FastTransfer.c: 432: unsigned char arrayHolder[3];
  4367                           ;FastTransfer.c: 433: arrayHolder[0] = serial_read();
  4368  000912  D801               	call	u3708
  4369  000914  D00A               	goto	u3709
  4370  000916                     u3708:
  4371  000916  0005               	push	
  4372  000918  6EFA               	movwf	pclath,c
  4373  00091A  503C               	movf	_serial_read,w,c
  4374  00091C  6EFD               	movwf	tosl,c
  4375  00091E  503D               	movf	_serial_read+1,w,c
  4376  000920  6EFE               	movwf	tosh,c
  4377  000922  50F8               	movf	tblptru,w,c
  4378  000924  6EFF               	movwf	tosu,c
  4379  000926  50FA               	movf	pclath,w,c
  4380  000928  0012               	return		;indir
  4381  00092A                     u3709:
  4382  00092A  0100               	movlb	0	; () banked
  4383  00092C  6FCC               	movwf	CRCcheck@arrayHolder& (0+255),b
  4384                           
  4385                           ;FastTransfer.c: 434: arrayHolder[1] = serial_read();
  4386  00092E  D801               	call	u3718
  4387  000930  D00A               	goto	u3719
  4388  000932                     u3718:
  4389  000932  0005               	push	
  4390  000934  6EFA               	movwf	pclath,c
  4391  000936  503C               	movf	_serial_read,w,c
  4392  000938  6EFD               	movwf	tosl,c
  4393  00093A  503D               	movf	_serial_read+1,w,c
  4394  00093C  6EFE               	movwf	tosh,c
  4395  00093E  50F8               	movf	tblptru,w,c
  4396  000940  6EFF               	movwf	tosu,c
  4397  000942  50FA               	movf	pclath,w,c
  4398  000944  0012               	return		;indir
  4399  000946                     u3719:
  4400  000946  0100               	movlb	0	; () banked
  4401  000948  6FCD               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  4402                           
  4403                           ;FastTransfer.c: 435: arrayHolder[2] = serial_read();
  4404  00094A  D801               	call	u3728
  4405  00094C  D00A               	goto	u3729
  4406  00094E                     u3728:
  4407  00094E  0005               	push	
  4408  000950  6EFA               	movwf	pclath,c
  4409  000952  503C               	movf	_serial_read,w,c
  4410  000954  6EFD               	movwf	tosl,c
  4411  000956  503D               	movf	_serial_read+1,w,c
  4412  000958  6EFE               	movwf	tosh,c
  4413  00095A  50F8               	movf	tblptru,w,c
  4414  00095C  6EFF               	movwf	tosu,c
  4415  00095E  50FA               	movf	pclath,w,c
  4416  000960  0012               	return		;indir
  4417  000962                     u3729:
  4418  000962  0100               	movlb	0	; () banked
  4419  000964  6FCE               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  4420                           
  4421                           ;FastTransfer.c: 436: unsigned char SentCRC = serial_read();
  4422  000966  D801               	call	u3738
  4423  000968  D00A               	goto	u3739
  4424  00096A                     u3738:
  4425  00096A  0005               	push	
  4426  00096C  6EFA               	movwf	pclath,c
  4427  00096E  503C               	movf	_serial_read,w,c
  4428  000970  6EFD               	movwf	tosl,c
  4429  000972  503D               	movf	_serial_read+1,w,c
  4430  000974  6EFE               	movwf	tosh,c
  4431  000976  50F8               	movf	tblptru,w,c
  4432  000978  6EFF               	movwf	tosu,c
  4433  00097A  50FA               	movf	pclath,w,c
  4434  00097C  0012               	return		;indir
  4435  00097E                     u3739:
  4436  00097E  0100               	movlb	0	; () banked
  4437  000980  6FCA               	movwf	CRCcheck@SentCRC& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;FastTransfer.c: 437: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  4441  000982  0ECC               	movlw	low CRCcheck@arrayHolder
  4442  000984  6E1B               	movwf	CRC8@data,c
  4443  000986  0E00               	movlw	high CRCcheck@arrayHolder
  4444  000988  6E1C               	movwf	CRC8@data+1,c
  4445  00098A  0E03               	movlw	3
  4446  00098C  6E1D               	movwf	CRC8@len,c
  4447  00098E  EC33  F00A         	call	_CRC8	;wreg free
  4448  000992  0100               	movlb	0	; () banked
  4449  000994  6FCB               	movwf	CRCcheck@calculatedCRC& (0+255),b
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;FastTransfer.c: 440: if (SentCRC == calculatedCRC) {
  4453  000996  0100               	movlb	0	; () banked
  4454  000998  51CB               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  4455  00099A  0100               	movlb	0	; () banked
  4456  00099C  19CA               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  4457  00099E  A4D8               	btfss	status,2,c
  4458  0009A0  D04E               	goto	l3941
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;FastTransfer.c: 442: int rt;
  4462                           ;FastTransfer.c: 443: for (rt = 0; rt < 5; rt++) {
  4463  0009A2  0E00               	movlw	0
  4464  0009A4  0100               	movlb	0	; () banked
  4465  0009A6  6FD0               	movwf	(CRCcheck@rt+1)& (0+255),b
  4466  0009A8  0E00               	movlw	0
  4467  0009AA  6FCF               	movwf	CRCcheck@rt& (0+255),b
  4468  0009AC                     l3919:
  4469                           
  4470                           ; BSR set to: 0
  4471  0009AC  0100               	movlb	0	; () banked
  4472  0009AE  BFD0               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  4473  0009B0  D008               	goto	l3923
  4474  0009B2  0100               	movlb	0	; () banked
  4475  0009B4  51D0               	movf	(CRCcheck@rt+1)& (0+255),w,b
  4476  0009B6  E147               	bnz	l573
  4477  0009B8  0E05               	movlw	5
  4478  0009BA  0100               	movlb	0	; () banked
  4479  0009BC  5DCF               	subwf	CRCcheck@rt& (0+255),w,b
  4480  0009BE  B0D8               	btfsc	status,0,c
  4481  0009C0  0012               	return	
  4482  0009C2                     l3923:
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;FastTransfer.c: 444: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  4486  0009C2  0EB7               	movlw	low _crc_buffer
  4487  0009C4  6E1B               	movwf	crcBufS_get@_this,c
  4488  0009C6  0E00               	movlw	high _crc_buffer
  4489  0009C8  6E1C               	movwf	crcBufS_get@_this+1,c
  4490  0009CA  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4491  0009CE  0E00               	movlw	0
  4492  0009D0  6E1E               	movwf	crcBufS_get@space,c
  4493  0009D2  ECE5  F006         	call	_crcBufS_get	;wreg free
  4494  0009D6  1836               	xorwf	_returnAddress,w,c
  4495  0009D8  A4D8               	btfss	status,2,c
  4496  0009DA  D02D               	goto	l3937
  4497                           
  4498                           ;FastTransfer.c: 445: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  4499  0009DC  0EB7               	movlw	low _crc_buffer
  4500  0009DE  6E1B               	movwf	crcBufS_get@_this,c
  4501  0009E0  0E00               	movlw	high _crc_buffer
  4502  0009E2  6E1C               	movwf	crcBufS_get@_this+1,c
  4503  0009E4  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  4504  0009E8  0E01               	movlw	1
  4505  0009EA  6E1E               	movwf	crcBufS_get@space,c
  4506  0009EC  ECE5  F006         	call	_crcBufS_get	;wreg free
  4507  0009F0  0100               	movlb	0	; () banked
  4508  0009F2  19CE               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  4509  0009F4  A4D8               	btfss	status,2,c
  4510  0009F6  D01F               	goto	l3937
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;FastTransfer.c: 446: if (arrayHolder[1] == 1) {
  4514  0009F8  0100               	movlb	0	; () banked
  4515  0009FA  05CD               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4516  0009FC  A4D8               	btfss	status,2,c
  4517  0009FE  D00B               	goto	l3933
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;FastTransfer.c: 447: crcBufS_status_put(&crc_buffer, rt, 1);
  4521  000A00  0EB7               	movlw	low _crc_buffer
  4522  000A02  6E1B               	movwf	crcBufS_status_put@_this,c
  4523  000A04  0E00               	movlw	high _crc_buffer
  4524  000A06  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4525  000A08  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4526  000A0C  0E01               	movlw	1
  4527  000A0E  6E1E               	movwf	crcBufS_status_put@status,c
  4528  000A10  ECCA  F007         	call	_crcBufS_status_put	;wreg free
  4529                           
  4530                           ;FastTransfer.c: 448: break;
  4531  000A14  0012               	return	
  4532  000A16                     l3933:
  4533  000A16  0E02               	movlw	2
  4534  000A18  0100               	movlb	0	; () banked
  4535  000A1A  19CD               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  4536  000A1C  A4D8               	btfss	status,2,c
  4537  000A1E  D00B               	goto	l3937
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;FastTransfer.c: 450: crcBufS_status_put(&crc_buffer, rt, 2);
  4541  000A20  0EB7               	movlw	low _crc_buffer
  4542  000A22  6E1B               	movwf	crcBufS_status_put@_this,c
  4543  000A24  0E00               	movlw	high _crc_buffer
  4544  000A26  6E1C               	movwf	crcBufS_status_put@_this+1,c
  4545  000A28  C0CF  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  4546  000A2C  0E02               	movlw	2
  4547  000A2E  6E1E               	movwf	crcBufS_status_put@status,c
  4548  000A30  ECCA  F007         	call	_crcBufS_status_put	;wreg free
  4549                           
  4550                           ;FastTransfer.c: 451: break;
  4551  000A34  0012               	return	
  4552  000A36                     l3937:
  4553  000A36  0100               	movlb	0	; () banked
  4554  000A38  4BCF               	infsnz	CRCcheck@rt& (0+255),f,b
  4555  000A3A  2BD0               	incf	(CRCcheck@rt+1)& (0+255),f,b
  4556  000A3C  D7B7               	goto	l3919
  4557  000A3E                     l3941:
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;FastTransfer.c: 457: crcErrorCounter++;
  4561  000A3E  0100               	movlb	0	; () banked
  4562  000A40  4B8B               	infsnz	_crcErrorCounter& (0+255),f,b
  4563  000A42  2B8C               	incf	(_crcErrorCounter+1)& (0+255),f,b
  4564  000A44  0012               	return	
  4565  000A46                     l573:
  4566  000A46  0012               	return		;funcret
  4567  000A48                     __end_of_CRCcheck:
  4568                           	opt stack 0
  4569                           tosu	equ	0xFFF
  4570                           tosh	equ	0xFFE
  4571                           tosl	equ	0xFFD
  4572                           pclath	equ	0xFFA
  4573                           tblptru	equ	0xFF8
  4574                           tblptrh	equ	0xFF7
  4575                           tblptrl	equ	0xFF6
  4576                           tablat	equ	0xFF5
  4577                           prodh	equ	0xFF4
  4578                           prodl	equ	0xFF3
  4579                           intcon	equ	0xFF2
  4580                           postinc0	equ	0xFEE
  4581                           wreg	equ	0xFE8
  4582                           postdec1	equ	0xFE5
  4583                           fsr1h	equ	0xFE2
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           plusw2	equ	0xFDB
  4589                           fsr2h	equ	0xFDA
  4590                           fsr2l	equ	0xFD9
  4591                           status	equ	0xFD8
  4592                           
  4593 ;; *************** function _crcBufS_status_put *****************
  4594 ;; Defined at:
  4595 ;;		line 391 in file "FastTransfer.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4598 ;;		 -> crc_buffer(17), 
  4599 ;;  time            1   28[COMRAM] unsigned char 
  4600 ;;  status          1   29[COMRAM] unsigned char 
  4601 ;; Auto vars:     Size  Location     Type
  4602 ;;  wantedTime      2   34[COMRAM] int 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  1    wreg      void 
  4605 ;; Registers used:
  4606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4612 ;;      Params:         4       0       0       0       0       0       0
  4613 ;;      Locals:         2       0       0       0       0       0       0
  4614 ;;      Temps:          4       0       0       0       0       0       0
  4615 ;;      Totals:        10       0       0       0       0       0       0
  4616 ;;Total ram usage:       10 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    4
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		_CRCcheck
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text17
  4627  000F94                     __ptext17:
  4628                           	opt stack 0
  4629  000F94                     _crcBufS_status_put:
  4630                           	opt stack 22
  4631                           
  4632                           ;FastTransfer.c: 392: if (time >= 5) {
  4633                           
  4634                           ;incstack = 0
  4635  000F94  0E04               	movlw	4
  4636  000F96  641D               	cpfsgt	crcBufS_status_put@time,c
  4637  000F98  D002               	goto	l3861
  4638                           
  4639                           ;FastTransfer.c: 393: time = 5 - 1;
  4640  000F9A  0E04               	movlw	4
  4641  000F9C  6E1D               	movwf	crcBufS_status_put@time,c
  4642  000F9E                     l3861:
  4643                           
  4644                           ;FastTransfer.c: 394: }
  4645                           ;FastTransfer.c: 395: time = time + 1;
  4646  000F9E  281D               	incf	crcBufS_status_put@time,w,c
  4647  000FA0  6E1D               	movwf	crcBufS_status_put@time,c
  4648                           
  4649                           ;FastTransfer.c: 396: int wantedTime = time * 3;
  4650  000FA2  501D               	movf	crcBufS_status_put@time,w,c
  4651  000FA4  0D03               	mullw	3
  4652  000FA6  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  4653  000FAA  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  4654                           
  4655                           ;FastTransfer.c: 397: if (wantedTime > _this->head) {
  4656  000FAE  EE20 F00F          	lfsr	2,15
  4657  000FB2  501B               	movf	crcBufS_status_put@_this,w,c
  4658  000FB4  26D9               	addwf	fsr2l,f,c
  4659  000FB6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4660  000FB8  22DA               	addwfc	fsr2h,f,c
  4661  000FBA  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4662  000FBC  5CDE               	subwf	postinc2,w,c
  4663  000FBE  50DE               	movf	postinc2,w,c
  4664  000FC0  0A80               	xorlw	128
  4665  000FC2  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4666  000FC4  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4667  000FC6  0A80               	xorlw	128
  4668  000FC8  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4669  000FCA  B0D8               	btfsc	status,0,c
  4670  000FCC  D02B               	goto	l3869
  4671                           
  4672                           ;FastTransfer.c: 398: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4673  000FCE  EE20 F00F          	lfsr	2,15
  4674  000FD2  501B               	movf	crcBufS_status_put@_this,w,c
  4675  000FD4  26D9               	addwf	fsr2l,f,c
  4676  000FD6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4677  000FD8  22DA               	addwfc	fsr2h,f,c
  4678  000FDA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4679  000FDE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4680  000FE2  1E1F               	comf	??_crcBufS_status_put,f,c
  4681  000FE4  1E20               	comf	??_crcBufS_status_put+1,f,c
  4682  000FE6  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4683  000FE8  2A20               	incf	??_crcBufS_status_put+1,f,c
  4684  000FEA  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4685  000FEC  261F               	addwf	??_crcBufS_status_put,f,c
  4686  000FEE  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4687  000FF0  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4688  000FF2  1E1F               	comf	??_crcBufS_status_put,f,c
  4689  000FF4  1E20               	comf	??_crcBufS_status_put+1,f,c
  4690  000FF6  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4691  000FF8  2A20               	incf	??_crcBufS_status_put+1,f,c
  4692  000FFA  0E0F               	movlw	15
  4693  000FFC  241F               	addwf	??_crcBufS_status_put,w,c
  4694  000FFE  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4695  001000  0E00               	movlw	0
  4696  001002  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4697  001004  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4698                           
  4699                           ;FastTransfer.c: 399: _this->buf[(wantedTime + 2)] = status;
  4700  001006  0E02               	movlw	2
  4701  001008  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4702  00100A  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4703  00100C  0E00               	movlw	0
  4704  00100E  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4705  001010  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4706  001012  501F               	movf	??_crcBufS_status_put,w,c
  4707  001014  241B               	addwf	crcBufS_status_put@_this,w,c
  4708  001016  6ED9               	movwf	fsr2l,c
  4709  001018  5020               	movf	??_crcBufS_status_put+1,w,c
  4710  00101A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4711  00101C  6EDA               	movwf	fsr2h,c
  4712  00101E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4713                           
  4714                           ;FastTransfer.c: 400: } else {
  4715  001022  0012               	return	
  4716  001024                     l3869:
  4717                           
  4718                           ;FastTransfer.c: 401: _this->buf[(_this->head - wantedTime) + 2] = status;
  4719  001024  EE20 F00F          	lfsr	2,15
  4720  001028  501B               	movf	crcBufS_status_put@_this,w,c
  4721  00102A  26D9               	addwf	fsr2l,f,c
  4722  00102C  501C               	movf	crcBufS_status_put@_this+1,w,c
  4723  00102E  22DA               	addwfc	fsr2h,f,c
  4724  001030  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4725  001034  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4726  001038  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4727  00103C  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4728  001040  1E21               	comf	??_crcBufS_status_put+2,f,c
  4729  001042  1E22               	comf	??_crcBufS_status_put+3,f,c
  4730  001044  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4731  001046  2A22               	incf	??_crcBufS_status_put+3,f,c
  4732  001048  501F               	movf	??_crcBufS_status_put,w,c
  4733  00104A  2621               	addwf	??_crcBufS_status_put+2,f,c
  4734  00104C  5020               	movf	??_crcBufS_status_put+1,w,c
  4735  00104E  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4736  001050  0E02               	movlw	2
  4737  001052  2621               	addwf	??_crcBufS_status_put+2,f,c
  4738  001054  0E00               	movlw	0
  4739  001056  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4740  001058  5021               	movf	??_crcBufS_status_put+2,w,c
  4741  00105A  241B               	addwf	crcBufS_status_put@_this,w,c
  4742  00105C  6ED9               	movwf	fsr2l,c
  4743  00105E  5022               	movf	??_crcBufS_status_put+3,w,c
  4744  001060  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4745  001062  6EDA               	movwf	fsr2h,c
  4746  001064  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4747  001068  0012               	return	
  4748  00106A                     __end_of_crcBufS_status_put:
  4749                           	opt stack 0
  4750                           tosu	equ	0xFFF
  4751                           tosh	equ	0xFFE
  4752                           tosl	equ	0xFFD
  4753                           pclath	equ	0xFFA
  4754                           tblptru	equ	0xFF8
  4755                           tblptrh	equ	0xFF7
  4756                           tblptrl	equ	0xFF6
  4757                           tablat	equ	0xFF5
  4758                           prodh	equ	0xFF4
  4759                           prodl	equ	0xFF3
  4760                           intcon	equ	0xFF2
  4761                           postinc0	equ	0xFEE
  4762                           wreg	equ	0xFE8
  4763                           postdec1	equ	0xFE5
  4764                           fsr1h	equ	0xFE2
  4765                           fsr1l	equ	0xFE1
  4766                           indf2	equ	0xFDF
  4767                           postinc2	equ	0xFDE
  4768                           postdec2	equ	0xFDD
  4769                           plusw2	equ	0xFDB
  4770                           fsr2h	equ	0xFDA
  4771                           fsr2l	equ	0xFD9
  4772                           status	equ	0xFD8
  4773                           
  4774 ;; *************** function _crcBufS_get *****************
  4775 ;; Defined at:
  4776 ;;		line 408 in file "FastTransfer.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4779 ;;		 -> crc_buffer(17), 
  4780 ;;  time            1   28[COMRAM] unsigned char 
  4781 ;;  space           1   29[COMRAM] unsigned char 
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  wantedTime      2    0[BANK0 ] int 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      unsigned char 
  4786 ;; Registers used:
  4787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4793 ;;      Params:         4       0       0       0       0       0       0
  4794 ;;      Locals:         0       2       0       0       0       0       0
  4795 ;;      Temps:          6       0       0       0       0       0       0
  4796 ;;      Totals:        10       2       0       0       0       0       0
  4797 ;;Total ram usage:       12 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    4
  4800 ;; This function calls:
  4801 ;;		Nothing
  4802 ;; This function is called by:
  4803 ;;		_CRCcheck
  4804 ;;		_AKNAK
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text18
  4809  000DCA                     __ptext18:
  4810                           	opt stack 0
  4811  000DCA                     _crcBufS_get:
  4812                           	opt stack 22
  4813                           
  4814                           ;FastTransfer.c: 409: if (time >= 5) {
  4815                           
  4816                           ;incstack = 0
  4817  000DCA  0E04               	movlw	4
  4818  000DCC  641D               	cpfsgt	crcBufS_get@time,c
  4819  000DCE  D002               	goto	l3837
  4820                           
  4821                           ;FastTransfer.c: 410: time = 5 - 1;
  4822  000DD0  0E04               	movlw	4
  4823  000DD2  6E1D               	movwf	crcBufS_get@time,c
  4824  000DD4                     l3837:
  4825                           
  4826                           ;FastTransfer.c: 411: }
  4827                           ;FastTransfer.c: 412: if (space >= 3) {
  4828  000DD4  0E02               	movlw	2
  4829  000DD6  641E               	cpfsgt	crcBufS_get@space,c
  4830  000DD8  D002               	goto	l3841
  4831                           
  4832                           ;FastTransfer.c: 413: space = 3 - 1;
  4833  000DDA  0E02               	movlw	2
  4834  000DDC  6E1E               	movwf	crcBufS_get@space,c
  4835  000DDE                     l3841:
  4836                           
  4837                           ;FastTransfer.c: 414: }
  4838                           ;FastTransfer.c: 415: time = time + 1;
  4839  000DDE  281D               	incf	crcBufS_get@time,w,c
  4840  000DE0  6E1D               	movwf	crcBufS_get@time,c
  4841                           
  4842                           ;FastTransfer.c: 416: int wantedTime = time * 3;
  4843  000DE2  501D               	movf	crcBufS_get@time,w,c
  4844  000DE4  0D03               	mullw	3
  4845  000DE6  CFF3 F0C8          	movff	prodl,crcBufS_get@wantedTime
  4846  000DEA  CFF4 F0C9          	movff	prodh,crcBufS_get@wantedTime+1
  4847                           
  4848                           ;FastTransfer.c: 417: if (wantedTime > _this->head) {
  4849  000DEE  EE20 F00F          	lfsr	2,15
  4850  000DF2  501B               	movf	crcBufS_get@_this,w,c
  4851  000DF4  26D9               	addwf	fsr2l,f,c
  4852  000DF6  501C               	movf	crcBufS_get@_this+1,w,c
  4853  000DF8  22DA               	addwfc	fsr2h,f,c
  4854  000DFA  0100               	movlb	0	; () banked
  4855  000DFC  51C8               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4856  000DFE  5CDE               	subwf	postinc2,w,c
  4857  000E00  50DE               	movf	postinc2,w,c
  4858  000E02  0A80               	xorlw	128
  4859  000E04  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4860  000E06  0100               	movlb	0	; () banked
  4861  000E08  51C9               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4862  000E0A  0A80               	xorlw	128
  4863  000E0C  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4864  000E0E  B0D8               	btfsc	status,0,c
  4865  000E10  D030               	goto	l3853
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;FastTransfer.c: 418: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4869  000E12  EE20 F00F          	lfsr	2,15
  4870  000E16  501B               	movf	crcBufS_get@_this,w,c
  4871  000E18  26D9               	addwf	fsr2l,f,c
  4872  000E1A  501C               	movf	crcBufS_get@_this+1,w,c
  4873  000E1C  22DA               	addwfc	fsr2h,f,c
  4874  000E1E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4875  000E22  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4876  000E26  1E1F               	comf	??_crcBufS_get,f,c
  4877  000E28  1E20               	comf	??_crcBufS_get+1,f,c
  4878  000E2A  4A1F               	infsnz	??_crcBufS_get,f,c
  4879  000E2C  2A20               	incf	??_crcBufS_get+1,f,c
  4880  000E2E  0100               	movlb	0	; () banked
  4881  000E30  51C8               	movf	crcBufS_get@wantedTime& (0+255),w,b
  4882  000E32  261F               	addwf	??_crcBufS_get,f,c
  4883  000E34  0100               	movlb	0	; () banked
  4884  000E36  51C9               	movf	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4885  000E38  2220               	addwfc	??_crcBufS_get+1,f,c
  4886  000E3A  1E1F               	comf	??_crcBufS_get,f,c
  4887  000E3C  1E20               	comf	??_crcBufS_get+1,f,c
  4888  000E3E  4A1F               	infsnz	??_crcBufS_get,f,c
  4889  000E40  2A20               	incf	??_crcBufS_get+1,f,c
  4890  000E42  0E0F               	movlw	15
  4891  000E44  241F               	addwf	??_crcBufS_get,w,c
  4892  000E46  0100               	movlb	0	; () banked
  4893  000E48  6FC8               	movwf	crcBufS_get@wantedTime& (0+255),b
  4894  000E4A  0E00               	movlw	0
  4895  000E4C  2020               	addwfc	??_crcBufS_get+1,w,c
  4896  000E4E  0100               	movlb	0	; () banked
  4897  000E50  6FC9               	movwf	(crcBufS_get@wantedTime+1)& (0+255),b
  4898                           
  4899                           ;FastTransfer.c: 419: return (_this->buf[(wantedTime + space)]);
  4900  000E52  501E               	movf	crcBufS_get@space,w,c
  4901  000E54  0100               	movlb	0	; () banked
  4902  000E56  25C8               	addwf	crcBufS_get@wantedTime& (0+255),w,b
  4903  000E58  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4904  000E5A  0E00               	movlw	0
  4905  000E5C  0100               	movlb	0	; () banked
  4906  000E5E  21C9               	addwfc	(crcBufS_get@wantedTime+1)& (0+255),w,b
  4907  000E60  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4908  000E62  501F               	movf	??_crcBufS_get,w,c
  4909  000E64  241B               	addwf	crcBufS_get@_this,w,c
  4910  000E66  6ED9               	movwf	fsr2l,c
  4911  000E68  5020               	movf	??_crcBufS_get+1,w,c
  4912  000E6A  201C               	addwfc	crcBufS_get@_this+1,w,c
  4913  000E6C  6EDA               	movwf	fsr2h,c
  4914  000E6E  50DF               	movf	indf2,w,c
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;FastTransfer.c: 420: } else {
  4918                           
  4919                           ; BSR set to: 0
  4920  000E70  0012               	return	
  4921  000E72                     l3853:
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;FastTransfer.c: 421: return (_this->buf[(_this->head - wantedTime) + space]);
  4925  000E72  EE20 F00F          	lfsr	2,15
  4926  000E76  501B               	movf	crcBufS_get@_this,w,c
  4927  000E78  26D9               	addwf	fsr2l,f,c
  4928  000E7A  501C               	movf	crcBufS_get@_this+1,w,c
  4929  000E7C  22DA               	addwfc	fsr2h,f,c
  4930  000E7E  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4931  000E82  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4932  000E86  C0C8  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4933  000E8A  C0C9  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4934  000E8E  1E21               	comf	??_crcBufS_get+2,f,c
  4935  000E90  1E22               	comf	??_crcBufS_get+3,f,c
  4936  000E92  4A21               	infsnz	??_crcBufS_get+2,f,c
  4937  000E94  2A22               	incf	??_crcBufS_get+3,f,c
  4938  000E96  501E               	movf	crcBufS_get@space,w,c
  4939  000E98  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4940  000E9A  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4941  000E9C  5021               	movf	??_crcBufS_get+2,w,c
  4942  000E9E  2623               	addwf	??_crcBufS_get+4,f,c
  4943  000EA0  5022               	movf	??_crcBufS_get+3,w,c
  4944  000EA2  2224               	addwfc	??_crcBufS_get+5,f,c
  4945  000EA4  501F               	movf	??_crcBufS_get,w,c
  4946  000EA6  2623               	addwf	??_crcBufS_get+4,f,c
  4947  000EA8  5020               	movf	??_crcBufS_get+1,w,c
  4948  000EAA  2224               	addwfc	??_crcBufS_get+5,f,c
  4949  000EAC  5023               	movf	??_crcBufS_get+4,w,c
  4950  000EAE  241B               	addwf	crcBufS_get@_this,w,c
  4951  000EB0  6ED9               	movwf	fsr2l,c
  4952  000EB2  5024               	movf	??_crcBufS_get+5,w,c
  4953  000EB4  201C               	addwfc	crcBufS_get@_this+1,w,c
  4954  000EB6  6EDA               	movwf	fsr2h,c
  4955  000EB8  50DF               	movf	indf2,w,c
  4956                           
  4957                           ; BSR set to: 0
  4958  000EBA  0012               	return	
  4959  000EBC                     __end_of_crcBufS_get:
  4960                           	opt stack 0
  4961                           tosu	equ	0xFFF
  4962                           tosh	equ	0xFFE
  4963                           tosl	equ	0xFFD
  4964                           pclath	equ	0xFFA
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           postinc0	equ	0xFEE
  4973                           wreg	equ	0xFE8
  4974                           postdec1	equ	0xFE5
  4975                           fsr1h	equ	0xFE2
  4976                           fsr1l	equ	0xFE1
  4977                           indf2	equ	0xFDF
  4978                           postinc2	equ	0xFDE
  4979                           postdec2	equ	0xFDD
  4980                           plusw2	equ	0xFDB
  4981                           fsr2h	equ	0xFDA
  4982                           fsr2l	equ	0xFD9
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _Receive_get *****************
  4986 ;; Defined at:
  4987 ;;		line 128 in file "UART.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;                  1    wreg      unsigned char 
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5001 ;;      Params:         0       0       0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0
  5004 ;;      Totals:         0       0       0       0       0       0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    6
  5008 ;; This function calls:
  5009 ;;		_UART_buff_get
  5010 ;; This function is called by:
  5011 ;;		_CommsStart
  5012 ;;		_CRCcheck
  5013 ;;		_receiveData
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text19
  5018  00191C                     __ptext19:
  5019                           	opt stack 0
  5020  00191C                     _Receive_get:
  5021                           	opt stack 21
  5022                           
  5023                           ;UART.c: 129: return UART_buff_get(&input_buffer);
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  00191C  0E00               	movlw	low _input_buffer
  5028  00191E  6E21               	movwf	UART_buff_get@_this,c
  5029  001920  0E03               	movlw	high _input_buffer
  5030  001922  6E22               	movwf	UART_buff_get@_this+1,c
  5031  001924  EC35  F008         	call	_UART_buff_get	;wreg free
  5032  001928  0012               	return	
  5033  00192A                     __end_of_Receive_get:
  5034                           	opt stack 0
  5035                           tosu	equ	0xFFF
  5036                           tosh	equ	0xFFE
  5037                           tosl	equ	0xFFD
  5038                           pclath	equ	0xFFA
  5039                           tblptru	equ	0xFF8
  5040                           tblptrh	equ	0xFF7
  5041                           tblptrl	equ	0xFF6
  5042                           tablat	equ	0xFF5
  5043                           prodh	equ	0xFF4
  5044                           prodl	equ	0xFF3
  5045                           intcon	equ	0xFF2
  5046                           postinc0	equ	0xFEE
  5047                           wreg	equ	0xFE8
  5048                           postdec1	equ	0xFE5
  5049                           fsr1h	equ	0xFE2
  5050                           fsr1l	equ	0xFE1
  5051                           indf2	equ	0xFDF
  5052                           postinc2	equ	0xFDE
  5053                           postdec2	equ	0xFDD
  5054                           plusw2	equ	0xFDB
  5055                           fsr2h	equ	0xFDA
  5056                           fsr2l	equ	0xFD9
  5057                           status	equ	0xFD8
  5058                           
  5059 ;; *************** function _UART_buff_get *****************
  5060 ;; Defined at:
  5061 ;;		line 83 in file "UART.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  5064 ;;		 -> output_buffer(206), input_buffer(206), 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  c               1   36[COMRAM] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      unsigned char 
  5069 ;; Registers used:
  5070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5076 ;;      Params:         2       0       0       0       0       0       0
  5077 ;;      Locals:         1       0       0       0       0       0       0
  5078 ;;      Temps:          2       0       0       0       0       0       0
  5079 ;;      Totals:         5       0       0       0       0       0       0
  5080 ;;Total ram usage:        5 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    5
  5083 ;; This function calls:
  5084 ;;		_UART_buff_modulo_inc
  5085 ;; This function is called by:
  5086 ;;		_Receive_get
  5087 ;;		_Send_put
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text20
  5092  00106A                     __ptext20:
  5093                           	opt stack 0
  5094  00106A                     _UART_buff_get:
  5095                           	opt stack 21
  5096                           
  5097                           ;UART.c: 84: unsigned char c;
  5098                           ;UART.c: 85: if (_this->count > 0) {
  5099                           
  5100                           ;incstack = 0
  5101  00106A  EE20 F0CC          	lfsr	2,204
  5102  00106E  5021               	movf	UART_buff_get@_this,w,c
  5103  001070  26D9               	addwf	fsr2l,f,c
  5104  001072  5022               	movf	UART_buff_get@_this+1,w,c
  5105  001074  22DA               	addwfc	fsr2h,f,c
  5106  001076  0E01               	movlw	1
  5107  001078  BEDB               	btfsc	plusw2,7,c
  5108  00107A  D03C               	goto	l3785
  5109  00107C  0E01               	movlw	1
  5110  00107E  50DB               	movf	plusw2,w,c
  5111  001080  E103               	bnz	u3540
  5112  001082  04DE               	decf	postinc2,w,c
  5113  001084  A0D8               	btfss	status,0,c
  5114  001086  D036               	goto	l3785
  5115  001088                     u3540:
  5116                           
  5117                           ;UART.c: 86: c = _this->buf[_this->tail];
  5118  001088  EE20 F0CA          	lfsr	2,202
  5119  00108C  5021               	movf	UART_buff_get@_this,w,c
  5120  00108E  26D9               	addwf	fsr2l,f,c
  5121  001090  5022               	movf	UART_buff_get@_this+1,w,c
  5122  001092  22DA               	addwfc	fsr2h,f,c
  5123  001094  CFDE F023          	movff	postinc2,??_UART_buff_get
  5124  001098  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  5125  00109C  5023               	movf	??_UART_buff_get,w,c
  5126  00109E  2421               	addwf	UART_buff_get@_this,w,c
  5127  0010A0  6ED9               	movwf	fsr2l,c
  5128  0010A2  5024               	movf	??_UART_buff_get+1,w,c
  5129  0010A4  2022               	addwfc	UART_buff_get@_this+1,w,c
  5130  0010A6  6EDA               	movwf	fsr2h,c
  5131  0010A8  50DF               	movf	indf2,w,c
  5132  0010AA  6E25               	movwf	UART_buff_get@c,c
  5133                           
  5134                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  5135  0010AC  EE20 F0CA          	lfsr	2,202
  5136  0010B0  5021               	movf	UART_buff_get@_this,w,c
  5137  0010B2  26D9               	addwf	fsr2l,f,c
  5138  0010B4  5022               	movf	UART_buff_get@_this+1,w,c
  5139  0010B6  22DA               	addwfc	fsr2h,f,c
  5140  0010B8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  5141  0010BC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  5142  0010C0  0E00               	movlw	0
  5143  0010C2  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  5144  0010C4  0EC8               	movlw	200
  5145  0010C6  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  5146  0010C8  ECAC  F00B         	call	_UART_buff_modulo_inc	;wreg free
  5147  0010CC  EE20 F0CA          	lfsr	2,202
  5148  0010D0  5021               	movf	UART_buff_get@_this,w,c
  5149  0010D2  26D9               	addwf	fsr2l,f,c
  5150  0010D4  5022               	movf	UART_buff_get@_this+1,w,c
  5151  0010D6  22DA               	addwfc	fsr2h,f,c
  5152  0010D8  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  5153  0010DC  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  5154                           
  5155                           ;UART.c: 88: --_this->count;
  5156  0010E0  EE20 F0CC          	lfsr	2,204
  5157  0010E4  5021               	movf	UART_buff_get@_this,w,c
  5158  0010E6  26D9               	addwf	fsr2l,f,c
  5159  0010E8  5022               	movf	UART_buff_get@_this+1,w,c
  5160  0010EA  22DA               	addwfc	fsr2h,f,c
  5161  0010EC  06DE               	decf	postinc2,f,c
  5162  0010EE  0E00               	movlw	0
  5163  0010F0  5ADD               	subwfb	postdec2,f,c
  5164                           
  5165                           ;UART.c: 89: } else {
  5166  0010F2  D002               	goto	l618
  5167  0010F4                     l3785:
  5168                           
  5169                           ;UART.c: 90: c = 0;
  5170  0010F4  0E00               	movlw	0
  5171  0010F6  6E25               	movwf	UART_buff_get@c,c
  5172  0010F8                     l618:
  5173                           
  5174                           ;UART.c: 91: }
  5175                           ;UART.c: 92: return (c);
  5176  0010F8  5025               	movf	UART_buff_get@c,w,c
  5177  0010FA  0012               	return	
  5178  0010FC                     __end_of_UART_buff_get:
  5179                           	opt stack 0
  5180                           tosu	equ	0xFFF
  5181                           tosh	equ	0xFFE
  5182                           tosl	equ	0xFFD
  5183                           pclath	equ	0xFFA
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1h	equ	0xFE2
  5195                           fsr1l	equ	0xFE1
  5196                           indf2	equ	0xFDF
  5197                           postinc2	equ	0xFDE
  5198                           postdec2	equ	0xFDD
  5199                           plusw2	equ	0xFDB
  5200                           fsr2h	equ	0xFDA
  5201                           fsr2l	equ	0xFD9
  5202                           status	equ	0xFD8
  5203                           
  5204 ;; *************** function _UART_buff_modulo_inc *****************
  5205 ;; Defined at:
  5206 ;;		line 108 in file "UART.c"
  5207 ;; Parameters:    Size  Location     Type
  5208 ;;  value           2   26[COMRAM] const unsigned int 
  5209 ;;  modulus         2   28[COMRAM] const unsigned int 
  5210 ;; Auto vars:     Size  Location     Type
  5211 ;;  my_value        2   30[COMRAM] unsigned int 
  5212 ;; Return value:  Size  Location     Type
  5213 ;;                  2   26[COMRAM] unsigned int 
  5214 ;; Registers used:
  5215 ;;		wreg, status,2, status,0
  5216 ;; Tracked objects:
  5217 ;;		On entry : 0/0
  5218 ;;		On exit  : 0/0
  5219 ;;		Unchanged: 0/0
  5220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5221 ;;      Params:         4       0       0       0       0       0       0
  5222 ;;      Locals:         2       0       0       0       0       0       0
  5223 ;;      Temps:          0       0       0       0       0       0       0
  5224 ;;      Totals:         6       0       0       0       0       0       0
  5225 ;;Total ram usage:        6 bytes
  5226 ;; Hardware stack levels used:    1
  5227 ;; Hardware stack levels required when called:    4
  5228 ;; This function calls:
  5229 ;;		Nothing
  5230 ;; This function is called by:
  5231 ;;		_UART_buff_put
  5232 ;;		_UART_buff_get
  5233 ;; This function uses a non-reentrant model
  5234 ;;
  5235                           
  5236                           	psect	text21
  5237  001758                     __ptext21:
  5238                           	opt stack 0
  5239  001758                     _UART_buff_modulo_inc:
  5240                           	opt stack 21
  5241                           
  5242                           ;UART.c: 109: unsigned int my_value = value + 1;
  5243                           
  5244                           ;incstack = 0
  5245  001758  0E01               	movlw	1
  5246  00175A  241B               	addwf	UART_buff_modulo_inc@value,w,c
  5247  00175C  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  5248  00175E  0E00               	movlw	0
  5249  001760  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  5250  001762  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  5251                           
  5252                           ;UART.c: 110: if (my_value >= modulus) {
  5253  001764  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  5254  001766  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  5255  001768  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  5256  00176A  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  5257  00176C  A0D8               	btfss	status,0,c
  5258  00176E  D004               	goto	l3773
  5259                           
  5260                           ;UART.c: 111: my_value = 0;
  5261  001770  0E00               	movlw	0
  5262  001772  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  5263  001774  0E00               	movlw	0
  5264  001776  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  5265  001778                     l3773:
  5266                           
  5267                           ;UART.c: 112: }
  5268                           ;UART.c: 113: return (my_value);
  5269  001778  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  5270  00177C  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  5271  001780  0012               	return	
  5272  001782                     __end_of_UART_buff_modulo_inc:
  5273                           	opt stack 0
  5274                           tosu	equ	0xFFF
  5275                           tosh	equ	0xFFE
  5276                           tosl	equ	0xFFD
  5277                           pclath	equ	0xFFA
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           postinc0	equ	0xFEE
  5286                           wreg	equ	0xFE8
  5287                           postdec1	equ	0xFE5
  5288                           fsr1h	equ	0xFE2
  5289                           fsr1l	equ	0xFE1
  5290                           indf2	equ	0xFDF
  5291                           postinc2	equ	0xFDE
  5292                           postdec2	equ	0xFDD
  5293                           plusw2	equ	0xFDB
  5294                           fsr2h	equ	0xFDA
  5295                           fsr2l	equ	0xFD9
  5296                           status	equ	0xFD8
  5297                           
  5298 ;; *************** function _Receive_available *****************
  5299 ;; Defined at:
  5300 ;;		line 124 in file "UART.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;                  2   28[COMRAM] int 
  5307 ;; Registers used:
  5308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5314 ;;      Params:         2       0       0       0       0       0       0
  5315 ;;      Locals:         0       0       0       0       0       0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0
  5317 ;;      Totals:         2       0       0       0       0       0       0
  5318 ;;Total ram usage:        2 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    5
  5321 ;; This function calls:
  5322 ;;		_UART_buff_size
  5323 ;; This function is called by:
  5324 ;;		_CommsStart
  5325 ;;		_CRCcheck
  5326 ;;		_receiveData
  5327 ;; This function uses a non-reentrant model
  5328 ;;
  5329                           
  5330                           	psect	text22
  5331  0018BA                     __ptext22:
  5332                           	opt stack 0
  5333  0018BA                     _Receive_available:
  5334                           	opt stack 22
  5335                           
  5336                           ;UART.c: 125: return UART_buff_size(&input_buffer);
  5337                           
  5338                           ;incstack = 0
  5339  0018BA  0E00               	movlw	low _input_buffer
  5340  0018BC  6E1B               	movwf	UART_buff_size@_this,c
  5341  0018BE  0E03               	movlw	high _input_buffer
  5342  0018C0  6E1C               	movwf	UART_buff_size@_this+1,c
  5343  0018C2  EC68  F00C         	call	_UART_buff_size	;wreg free
  5344  0018C6  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  5345  0018CA  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  5346  0018CE  0012               	return	
  5347  0018D0                     __end_of_Receive_available:
  5348                           	opt stack 0
  5349                           tosu	equ	0xFFF
  5350                           tosh	equ	0xFFE
  5351                           tosl	equ	0xFFD
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           postinc0	equ	0xFEE
  5361                           wreg	equ	0xFE8
  5362                           postdec1	equ	0xFE5
  5363                           fsr1h	equ	0xFE2
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           plusw2	equ	0xFDB
  5369                           fsr2h	equ	0xFDA
  5370                           fsr2l	equ	0xFD9
  5371                           status	equ	0xFD8
  5372                           
  5373 ;; *************** function _UART_buff_size *****************
  5374 ;; Defined at:
  5375 ;;		line 104 in file "UART.c"
  5376 ;; Parameters:    Size  Location     Type
  5377 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  5378 ;;		 -> output_buffer(206), input_buffer(206), 
  5379 ;; Auto vars:     Size  Location     Type
  5380 ;;		None
  5381 ;; Return value:  Size  Location     Type
  5382 ;;                  2   26[COMRAM] int 
  5383 ;; Registers used:
  5384 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5385 ;; Tracked objects:
  5386 ;;		On entry : 0/0
  5387 ;;		On exit  : 0/0
  5388 ;;		Unchanged: 0/0
  5389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5390 ;;      Params:         2       0       0       0       0       0       0
  5391 ;;      Locals:         0       0       0       0       0       0       0
  5392 ;;      Temps:          0       0       0       0       0       0       0
  5393 ;;      Totals:         2       0       0       0       0       0       0
  5394 ;;Total ram usage:        2 bytes
  5395 ;; Hardware stack levels used:    1
  5396 ;; Hardware stack levels required when called:    4
  5397 ;; This function calls:
  5398 ;;		Nothing
  5399 ;; This function is called by:
  5400 ;;		_Receive_available
  5401 ;; This function uses a non-reentrant model
  5402 ;;
  5403                           
  5404                           	psect	text23
  5405  0018D0                     __ptext23:
  5406                           	opt stack 0
  5407  0018D0                     _UART_buff_size:
  5408                           	opt stack 22
  5409                           
  5410                           ;UART.c: 105: return (_this->count);
  5411                           
  5412                           ;incstack = 0
  5413  0018D0  EE20 F0CC          	lfsr	2,204
  5414  0018D4  501B               	movf	UART_buff_size@_this,w,c
  5415  0018D6  26D9               	addwf	fsr2l,f,c
  5416  0018D8  501C               	movf	UART_buff_size@_this+1,w,c
  5417  0018DA  22DA               	addwfc	fsr2h,f,c
  5418  0018DC  CFDE F01B          	movff	postinc2,?_UART_buff_size
  5419  0018E0  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  5420  0018E4  0012               	return	
  5421  0018E6                     __end_of_UART_buff_size:
  5422                           	opt stack 0
  5423                           tosu	equ	0xFFF
  5424                           tosh	equ	0xFFE
  5425                           tosl	equ	0xFFD
  5426                           pclath	equ	0xFFA
  5427                           tblptru	equ	0xFF8
  5428                           tblptrh	equ	0xFF7
  5429                           tblptrl	equ	0xFF6
  5430                           tablat	equ	0xFF5
  5431                           prodh	equ	0xFF4
  5432                           prodl	equ	0xFF3
  5433                           intcon	equ	0xFF2
  5434                           postinc0	equ	0xFEE
  5435                           wreg	equ	0xFE8
  5436                           postdec1	equ	0xFE5
  5437                           fsr1h	equ	0xFE2
  5438                           fsr1l	equ	0xFE1
  5439                           indf2	equ	0xFDF
  5440                           postinc2	equ	0xFDE
  5441                           postdec2	equ	0xFDD
  5442                           plusw2	equ	0xFDB
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _CRC8 *****************
  5448 ;; Defined at:
  5449 ;;		line 89 in file "FastTransfer.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  data            2   26[COMRAM] PTR const unsigned char 
  5452 ;;		 -> CRCcheck@arrayHolder(3), receiveData@holder_1758(3), receiveData@holder(3), rx_buffer(200), 
  5453 ;;		 -> ring_buffer(206), NULL(0), 
  5454 ;;  len             1   28[COMRAM] unsigned char 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  sum             1   29[COMRAM] unsigned char 
  5457 ;;  tempI           1   31[COMRAM] unsigned char 
  5458 ;;  extract         1   30[COMRAM] unsigned char 
  5459 ;;  crc             1   32[COMRAM] unsigned char 
  5460 ;; Return value:  Size  Location     Type
  5461 ;;                  1    wreg      unsigned char 
  5462 ;; Registers used:
  5463 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5464 ;; Tracked objects:
  5465 ;;		On entry : 0/0
  5466 ;;		On exit  : 0/0
  5467 ;;		Unchanged: 0/0
  5468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5469 ;;      Params:         3       0       0       0       0       0       0
  5470 ;;      Locals:         4       0       0       0       0       0       0
  5471 ;;      Temps:          0       0       0       0       0       0       0
  5472 ;;      Totals:         7       0       0       0       0       0       0
  5473 ;;Total ram usage:        7 bytes
  5474 ;; Hardware stack levels used:    1
  5475 ;; Hardware stack levels required when called:    4
  5476 ;; This function calls:
  5477 ;;		Nothing
  5478 ;; This function is called by:
  5479 ;;		_sendData
  5480 ;;		_receiveData
  5481 ;;		_CRCcheck
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text24
  5486  001466                     __ptext24:
  5487                           	opt stack 0
  5488  001466                     _CRC8:
  5489                           	opt stack 22
  5490                           
  5491                           ;FastTransfer.c: 90: unsigned char crc = 0x00;
  5492                           
  5493                           ;incstack = 0
  5494  001466  0E00               	movlw	0
  5495  001468  6E21               	movwf	CRC8@crc,c
  5496                           
  5497                           ;FastTransfer.c: 91: while (len--) {
  5498  00146A  D01C               	goto	l3811
  5499  00146C                     l3795:
  5500                           
  5501                           ;FastTransfer.c: 92: unsigned char extract = *data++;
  5502  00146C  C01B  FFD9         	movff	CRC8@data,fsr2l
  5503  001470  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  5504  001474  50DF               	movf	indf2,w,c
  5505  001476  6E1F               	movwf	CRC8@extract,c
  5506  001478  4A1B               	infsnz	CRC8@data,f,c
  5507  00147A  2A1C               	incf	CRC8@data+1,f,c
  5508                           
  5509                           ;FastTransfer.c: 93: unsigned char tempI;
  5510                           ;FastTransfer.c: 94: for (tempI = 8; tempI; tempI--) {
  5511  00147C  0E08               	movlw	8
  5512  00147E  6E20               	movwf	CRC8@tempI,c
  5513  001480  D00E               	goto	l3809
  5514  001482                     l3801:
  5515                           
  5516                           ;FastTransfer.c: 95: unsigned char sum = (crc ^ extract) & 0x01;
  5517  001482  5021               	movf	CRC8@crc,w,c
  5518  001484  181F               	xorwf	CRC8@extract,w,c
  5519  001486  0B01               	andlw	1
  5520  001488  6E1E               	movwf	CRC8@sum,c
  5521                           
  5522                           ;FastTransfer.c: 96: crc >>= 1;
  5523  00148A  90D8               	bcf	status,0,c
  5524  00148C  3221               	rrcf	CRC8@crc,f,c
  5525                           
  5526                           ;FastTransfer.c: 97: if (sum) {
  5527  00148E  501E               	movf	CRC8@sum,w,c
  5528  001490  B4D8               	btfsc	status,2,c
  5529  001492  D002               	goto	l459
  5530                           
  5531                           ;FastTransfer.c: 98: crc ^= 0x8C;
  5532  001494  0E8C               	movlw	140
  5533  001496  1A21               	xorwf	CRC8@crc,f,c
  5534  001498                     l459:
  5535                           
  5536                           ;FastTransfer.c: 99: }
  5537                           ;FastTransfer.c: 100: extract >>= 1;
  5538  001498  90D8               	bcf	status,0,c
  5539  00149A  321F               	rrcf	CRC8@extract,f,c
  5540  00149C  0620               	decf	CRC8@tempI,f,c
  5541  00149E                     l3809:
  5542  00149E  5020               	movf	CRC8@tempI,w,c
  5543  0014A0  A4D8               	btfss	status,2,c
  5544  0014A2  D7EF               	goto	l3801
  5545  0014A4                     l3811:
  5546  0014A4  061D               	decf	CRC8@len,f,c
  5547  0014A6  281D               	incf	CRC8@len,w,c
  5548  0014A8  A4D8               	btfss	status,2,c
  5549  0014AA  D7E0               	goto	l3795
  5550                           
  5551                           ;FastTransfer.c: 101: }
  5552                           ;FastTransfer.c: 102: }
  5553                           ;FastTransfer.c: 103: return crc;
  5554  0014AC  5021               	movf	CRC8@crc,w,c
  5555  0014AE  0012               	return	
  5556  0014B0                     __end_of_CRC8:
  5557                           	opt stack 0
  5558                           tosu	equ	0xFFF
  5559                           tosh	equ	0xFFE
  5560                           tosl	equ	0xFFD
  5561                           pclath	equ	0xFFA
  5562                           tblptru	equ	0xFF8
  5563                           tblptrh	equ	0xFF7
  5564                           tblptrl	equ	0xFF6
  5565                           tablat	equ	0xFF5
  5566                           prodh	equ	0xFF4
  5567                           prodl	equ	0xFF3
  5568                           intcon	equ	0xFF2
  5569                           postinc0	equ	0xFEE
  5570                           wreg	equ	0xFE8
  5571                           postdec1	equ	0xFE5
  5572                           fsr1h	equ	0xFE2
  5573                           fsr1l	equ	0xFE1
  5574                           indf2	equ	0xFDF
  5575                           postinc2	equ	0xFDE
  5576                           postdec2	equ	0xFDD
  5577                           plusw2	equ	0xFDB
  5578                           fsr2h	equ	0xFDA
  5579                           fsr2l	equ	0xFD9
  5580                           status	equ	0xFD8
  5581                           
  5582 ;; *************** function _ToSend *****************
  5583 ;; Defined at:
  5584 ;;		line 271 in file "FastTransfer.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;  where           1    wreg     unsigned char 
  5587 ;;  what            2    2[BANK0 ] unsigned int 
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  where           1    4[BANK0 ] unsigned char 
  5590 ;; Return value:  Size  Location     Type
  5591 ;;                  1    wreg      void 
  5592 ;; Registers used:
  5593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5594 ;; Tracked objects:
  5595 ;;		On entry : 0/0
  5596 ;;		On exit  : 0/0
  5597 ;;		Unchanged: 0/0
  5598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5599 ;;      Params:         0       2       0       0       0       0       0
  5600 ;;      Locals:         0       1       0       0       0       0       0
  5601 ;;      Temps:          0       0       0       0       0       0       0
  5602 ;;      Totals:         0       3       0       0       0       0       0
  5603 ;;Total ram usage:        3 bytes
  5604 ;; Hardware stack levels used:    1
  5605 ;; Hardware stack levels required when called:    6
  5606 ;; This function calls:
  5607 ;;		_FastTransfer_buffer_put
  5608 ;; This function is called by:
  5609 ;;		_respondChargerAsECU
  5610 ;;		_SetBMM
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           	psect	text25
  5615  001818                     __ptext25:
  5616                           	opt stack 0
  5617  001818                     _ToSend:
  5618                           	opt stack 22
  5619                           
  5620                           ;incstack = 0
  5621                           ;ToSend@where stored from wreg
  5622  001818  0100               	movlb	0	; () banked
  5623  00181A  6FCC               	movwf	ToSend@where& (0+255),b
  5624                           
  5625                           ;FastTransfer.c: 272: FastTransfer_buffer_put(&ring_buffer, where, what);
  5626  00181C  0E00               	movlw	low _ring_buffer
  5627  00181E  6E21               	movwf	FastTransfer_buffer_put@_this,c
  5628  001820  0E01               	movlw	high _ring_buffer
  5629  001822  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  5630  001824  C0CC  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  5631  001828  C0CA  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  5632  00182C  C0CB  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  5633  001830  ECBB  F003         	call	_FastTransfer_buffer_put	;wreg free
  5634  001834  0012               	return		;funcret
  5635  001836                     __end_of_ToSend:
  5636                           	opt stack 0
  5637                           tosu	equ	0xFFF
  5638                           tosh	equ	0xFFE
  5639                           tosl	equ	0xFFD
  5640                           pclath	equ	0xFFA
  5641                           tblptru	equ	0xFF8
  5642                           tblptrh	equ	0xFF7
  5643                           tblptrl	equ	0xFF6
  5644                           tablat	equ	0xFF5
  5645                           prodh	equ	0xFF4
  5646                           prodl	equ	0xFF3
  5647                           intcon	equ	0xFF2
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           postdec1	equ	0xFE5
  5651                           fsr1h	equ	0xFE2
  5652                           fsr1l	equ	0xFE1
  5653                           indf2	equ	0xFDF
  5654                           postinc2	equ	0xFDE
  5655                           postdec2	equ	0xFDD
  5656                           plusw2	equ	0xFDB
  5657                           fsr2h	equ	0xFDA
  5658                           fsr2l	equ	0xFD9
  5659                           status	equ	0xFD8
  5660                           
  5661 ;; *************** function _FastTransfer_buffer_put *****************
  5662 ;; Defined at:
  5663 ;;		line 278 in file "FastTransfer.c"
  5664 ;; Parameters:    Size  Location     Type
  5665 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  5666 ;;		 -> ring_buffer(206), 
  5667 ;;  towhere         1   34[COMRAM] unsigned char 
  5668 ;;  towhat          2   35[COMRAM] unsigned int 
  5669 ;; Auto vars:     Size  Location     Type
  5670 ;;		None
  5671 ;; Return value:  Size  Location     Type
  5672 ;;                  1    wreg      void 
  5673 ;; Registers used:
  5674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5675 ;; Tracked objects:
  5676 ;;		On entry : 0/0
  5677 ;;		On exit  : 0/0
  5678 ;;		Unchanged: 0/0
  5679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5680 ;;      Params:         5       0       0       0       0       0       0
  5681 ;;      Locals:         0       0       0       0       0       0       0
  5682 ;;      Temps:          0       2       0       0       0       0       0
  5683 ;;      Totals:         5       2       0       0       0       0       0
  5684 ;;Total ram usage:        7 bytes
  5685 ;; Hardware stack levels used:    1
  5686 ;; Hardware stack levels required when called:    5
  5687 ;; This function calls:
  5688 ;;		_FastTransfer_buffer_modulo_inc
  5689 ;; This function is called by:
  5690 ;;		_ToSend
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text26
  5695  000776                     __ptext26:
  5696                           	opt stack 0
  5697  000776                     _FastTransfer_buffer_put:
  5698                           	opt stack 22
  5699                           
  5700                           ;FastTransfer.c: 280: group.integer = towhat;
  5701                           
  5702                           ;incstack = 0
  5703  000776  C024  F02C         	movff	FastTransfer_buffer_put@towhat,_group
  5704  00077A  C025  F02D         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  5705                           
  5706                           ;FastTransfer.c: 282: if (_this->count < (200 - 3)) {
  5707  00077E  EE20 F0CC          	lfsr	2,204
  5708  000782  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5709  000784  26D9               	addwf	fsr2l,f,c
  5710  000786  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5711  000788  22DA               	addwfc	fsr2h,f,c
  5712  00078A  0E01               	movlw	1
  5713  00078C  BEDB               	btfsc	plusw2,7,c
  5714  00078E  D007               	goto	l3947
  5715  000790  0E01               	movlw	1
  5716  000792  50DB               	movf	plusw2,w,c
  5717  000794  E103               	bnz	u3811
  5718  000796  0EC5               	movlw	197
  5719  000798  5CDE               	subwf	postinc2,w,c
  5720  00079A  B0D8               	btfsc	status,0,c
  5721  00079C                     u3811:
  5722  00079C  0012               	return	
  5723  00079E                     l3947:
  5724                           
  5725                           ;FastTransfer.c: 283: _this->buf[_this->head] = towhere;
  5726  00079E  EE20 F0C8          	lfsr	2,200
  5727  0007A2  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5728  0007A4  26D9               	addwf	fsr2l,f,c
  5729  0007A6  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5730  0007A8  22DA               	addwfc	fsr2h,f,c
  5731  0007AA  CFDE F0C8          	movff	postinc2,??_FastTransfer_buffer_put
  5732  0007AE  CFDD F0C9          	movff	postdec2,??_FastTransfer_buffer_put+1
  5733  0007B2  0100               	movlb	0	; () banked
  5734  0007B4  51C8               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5735  0007B6  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5736  0007B8  6ED9               	movwf	fsr2l,c
  5737  0007BA  0100               	movlb	0	; () banked
  5738  0007BC  51C9               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5739  0007BE  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5740  0007C0  6EDA               	movwf	fsr2h,c
  5741  0007C2  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  5742                           
  5743                           ; BSR set to: 0
  5744                           ;FastTransfer.c: 284: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5745  0007C6  EE20 F0C8          	lfsr	2,200
  5746  0007CA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5747  0007CC  26D9               	addwf	fsr2l,f,c
  5748  0007CE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5749  0007D0  22DA               	addwfc	fsr2h,f,c
  5750  0007D2  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5751  0007D6  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5752  0007DA  0E00               	movlw	0
  5753  0007DC  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5754  0007DE  0EC8               	movlw	200
  5755  0007E0  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5756  0007E2  ECC1  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5757  0007E6  EE20 F0C8          	lfsr	2,200
  5758  0007EA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5759  0007EC  26D9               	addwf	fsr2l,f,c
  5760  0007EE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5761  0007F0  22DA               	addwfc	fsr2h,f,c
  5762  0007F2  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5763  0007F6  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5764                           
  5765                           ;FastTransfer.c: 285: ++_this->count;
  5766  0007FA  EE20 F0CC          	lfsr	2,204
  5767  0007FE  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5768  000800  26D9               	addwf	fsr2l,f,c
  5769  000802  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5770  000804  22DA               	addwfc	fsr2h,f,c
  5771  000806  2ADE               	incf	postinc2,f,c
  5772  000808  0E00               	movlw	0
  5773  00080A  22DD               	addwfc	postdec2,f,c
  5774                           
  5775                           ;FastTransfer.c: 286: _this->buf[_this->head] = group.parts[0];
  5776  00080C  EE20 F0C8          	lfsr	2,200
  5777  000810  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5778  000812  26D9               	addwf	fsr2l,f,c
  5779  000814  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5780  000816  22DA               	addwfc	fsr2h,f,c
  5781  000818  CFDE F0C8          	movff	postinc2,??_FastTransfer_buffer_put
  5782  00081C  CFDD F0C9          	movff	postdec2,??_FastTransfer_buffer_put+1
  5783  000820  0100               	movlb	0	; () banked
  5784  000822  51C8               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5785  000824  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5786  000826  6ED9               	movwf	fsr2l,c
  5787  000828  0100               	movlb	0	; () banked
  5788  00082A  51C9               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5789  00082C  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5790  00082E  6EDA               	movwf	fsr2h,c
  5791  000830  C02C  FFDF         	movff	_group,indf2
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;FastTransfer.c: 287: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5795  000834  EE20 F0C8          	lfsr	2,200
  5796  000838  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5797  00083A  26D9               	addwf	fsr2l,f,c
  5798  00083C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5799  00083E  22DA               	addwfc	fsr2h,f,c
  5800  000840  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5801  000844  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5802  000848  0E00               	movlw	0
  5803  00084A  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5804  00084C  0EC8               	movlw	200
  5805  00084E  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5806  000850  ECC1  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5807  000854  EE20 F0C8          	lfsr	2,200
  5808  000858  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5809  00085A  26D9               	addwf	fsr2l,f,c
  5810  00085C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5811  00085E  22DA               	addwfc	fsr2h,f,c
  5812  000860  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5813  000864  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5814                           
  5815                           ;FastTransfer.c: 288: ++_this->count;
  5816  000868  EE20 F0CC          	lfsr	2,204
  5817  00086C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5818  00086E  26D9               	addwf	fsr2l,f,c
  5819  000870  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5820  000872  22DA               	addwfc	fsr2h,f,c
  5821  000874  2ADE               	incf	postinc2,f,c
  5822  000876  0E00               	movlw	0
  5823  000878  22DD               	addwfc	postdec2,f,c
  5824                           
  5825                           ;FastTransfer.c: 289: _this->buf[_this->head] = group.parts[1];
  5826  00087A  EE20 F0C8          	lfsr	2,200
  5827  00087E  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5828  000880  26D9               	addwf	fsr2l,f,c
  5829  000882  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5830  000884  22DA               	addwfc	fsr2h,f,c
  5831  000886  CFDE F0C8          	movff	postinc2,??_FastTransfer_buffer_put
  5832  00088A  CFDD F0C9          	movff	postdec2,??_FastTransfer_buffer_put+1
  5833  00088E  0100               	movlb	0	; () banked
  5834  000890  51C8               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  5835  000892  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  5836  000894  6ED9               	movwf	fsr2l,c
  5837  000896  0100               	movlb	0	; () banked
  5838  000898  51C9               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  5839  00089A  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  5840  00089C  6EDA               	movwf	fsr2h,c
  5841  00089E  C02D  FFDF         	movff	_group+1,indf2
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;FastTransfer.c: 290: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  5845  0008A2  EE20 F0C8          	lfsr	2,200
  5846  0008A6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5847  0008A8  26D9               	addwf	fsr2l,f,c
  5848  0008AA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5849  0008AC  22DA               	addwfc	fsr2h,f,c
  5850  0008AE  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  5851  0008B2  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  5852  0008B6  0E00               	movlw	0
  5853  0008B8  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  5854  0008BA  0EC8               	movlw	200
  5855  0008BC  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  5856  0008BE  ECC1  F00B         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  5857  0008C2  EE20 F0C8          	lfsr	2,200
  5858  0008C6  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5859  0008C8  26D9               	addwf	fsr2l,f,c
  5860  0008CA  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5861  0008CC  22DA               	addwfc	fsr2h,f,c
  5862  0008CE  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  5863  0008D2  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  5864                           
  5865                           ;FastTransfer.c: 291: ++_this->count;
  5866  0008D6  EE20 F0CC          	lfsr	2,204
  5867  0008DA  5021               	movf	FastTransfer_buffer_put@_this,w,c
  5868  0008DC  26D9               	addwf	fsr2l,f,c
  5869  0008DE  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  5870  0008E0  22DA               	addwfc	fsr2h,f,c
  5871  0008E2  2ADE               	incf	postinc2,f,c
  5872  0008E4  0E00               	movlw	0
  5873  0008E6  22DD               	addwfc	postdec2,f,c
  5874  0008E8  0012               	return	
  5875  0008EA                     __end_of_FastTransfer_buffer_put:
  5876                           	opt stack 0
  5877                           tosu	equ	0xFFF
  5878                           tosh	equ	0xFFE
  5879                           tosl	equ	0xFFD
  5880                           pclath	equ	0xFFA
  5881                           tblptru	equ	0xFF8
  5882                           tblptrh	equ	0xFF7
  5883                           tblptrl	equ	0xFF6
  5884                           tablat	equ	0xFF5
  5885                           prodh	equ	0xFF4
  5886                           prodl	equ	0xFF3
  5887                           intcon	equ	0xFF2
  5888                           postinc0	equ	0xFEE
  5889                           wreg	equ	0xFE8
  5890                           postdec1	equ	0xFE5
  5891                           fsr1h	equ	0xFE2
  5892                           fsr1l	equ	0xFE1
  5893                           indf2	equ	0xFDF
  5894                           postinc2	equ	0xFDE
  5895                           postdec2	equ	0xFDD
  5896                           plusw2	equ	0xFDB
  5897                           fsr2h	equ	0xFDA
  5898                           fsr2l	equ	0xFD9
  5899                           status	equ	0xFD8
  5900                           
  5901 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  5902 ;; Defined at:
  5903 ;;		line 328 in file "FastTransfer.c"
  5904 ;; Parameters:    Size  Location     Type
  5905 ;;  value           2   26[COMRAM] const unsigned int 
  5906 ;;  modulus         2   28[COMRAM] const unsigned int 
  5907 ;; Auto vars:     Size  Location     Type
  5908 ;;  my_value        2   30[COMRAM] unsigned int 
  5909 ;; Return value:  Size  Location     Type
  5910 ;;                  2   26[COMRAM] unsigned int 
  5911 ;; Registers used:
  5912 ;;		wreg, status,2, status,0
  5913 ;; Tracked objects:
  5914 ;;		On entry : 0/0
  5915 ;;		On exit  : 0/0
  5916 ;;		Unchanged: 0/0
  5917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5918 ;;      Params:         4       0       0       0       0       0       0
  5919 ;;      Locals:         2       0       0       0       0       0       0
  5920 ;;      Temps:          0       0       0       0       0       0       0
  5921 ;;      Totals:         6       0       0       0       0       0       0
  5922 ;;Total ram usage:        6 bytes
  5923 ;; Hardware stack levels used:    1
  5924 ;; Hardware stack levels required when called:    4
  5925 ;; This function calls:
  5926 ;;		Nothing
  5927 ;; This function is called by:
  5928 ;;		_FastTransfer_buffer_put
  5929 ;;		_FastTransfer_buffer_get
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           	psect	text27
  5934  001782                     __ptext27:
  5935                           	opt stack 0
  5936  001782                     _FastTransfer_buffer_modulo_inc:
  5937                           	opt stack 22
  5938                           
  5939                           ;FastTransfer.c: 329: unsigned int my_value = value + 1;
  5940                           
  5941                           ;incstack = 0
  5942  001782  0E01               	movlw	1
  5943  001784  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  5944  001786  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5945  001788  0E00               	movlw	0
  5946  00178A  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  5947  00178C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5948                           
  5949                           ;FastTransfer.c: 330: if (my_value >= modulus) {
  5950  00178E  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  5951  001790  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  5952  001792  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  5953  001794  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  5954  001796  A0D8               	btfss	status,0,c
  5955  001798  D004               	goto	l3821
  5956                           
  5957                           ;FastTransfer.c: 331: my_value = 0;
  5958  00179A  0E00               	movlw	0
  5959  00179C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  5960  00179E  0E00               	movlw	0
  5961  0017A0  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  5962  0017A2                     l3821:
  5963                           
  5964                           ;FastTransfer.c: 332: }
  5965                           ;FastTransfer.c: 333: return (my_value);
  5966  0017A2  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  5967  0017A6  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  5968  0017AA  0012               	return	
  5969  0017AC                     __end_of_FastTransfer_buffer_modulo_inc:
  5970                           	opt stack 0
  5971                           tosu	equ	0xFFF
  5972                           tosh	equ	0xFFE
  5973                           tosl	equ	0xFFD
  5974                           pclath	equ	0xFFA
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           postinc0	equ	0xFEE
  5983                           wreg	equ	0xFE8
  5984                           postdec1	equ	0xFE5
  5985                           fsr1h	equ	0xFE2
  5986                           fsr1l	equ	0xFE1
  5987                           indf2	equ	0xFDF
  5988                           postinc2	equ	0xFDE
  5989                           postdec2	equ	0xFDD
  5990                           plusw2	equ	0xFDB
  5991                           fsr2h	equ	0xFDA
  5992                           fsr2l	equ	0xFD9
  5993                           status	equ	0xFD8
  5994                           
  5995 ;; *************** function _Delay *****************
  5996 ;; Defined at:
  5997 ;;		line 17 in file "Functions.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  wait            2   26[COMRAM] int 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  i               2   29[COMRAM] int 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  1    wreg      void 
  6004 ;; Registers used:
  6005 ;;		wreg, status,2, status,0
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6011 ;;      Params:         2       0       0       0       0       0       0
  6012 ;;      Locals:         2       0       0       0       0       0       0
  6013 ;;      Temps:          1       0       0       0       0       0       0
  6014 ;;      Totals:         5       0       0       0       0       0       0
  6015 ;;Total ram usage:        5 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    4
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_respondChargerAsECU
  6022 ;;		_SetBMM
  6023 ;;		_Precharge
  6024 ;;		_Horn
  6025 ;;		_NokiaStart
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text28
  6030  0015AE                     __ptext28:
  6031                           	opt stack 0
  6032  0015AE                     _Delay:
  6033                           	opt stack 24
  6034                           
  6035                           ;Functions.c: 18: int i = 0;
  6036                           
  6037                           ;incstack = 0
  6038  0015AE  0E00               	movlw	0
  6039  0015B0  6E1F               	movwf	Delay@i+1,c
  6040  0015B2  0E00               	movlw	0
  6041  0015B4  6E1E               	movwf	Delay@i,c
  6042                           
  6043                           ;Functions.c: 19: for (; wait > i; i++) {
  6044  0015B6  D00A               	goto	l694
  6045  0015B8                     l3063:
  6046                           
  6047                           ;Functions.c: 20: _delay((unsigned long)((1)*(16000000/4000.0)));
  6048  0015B8  0E06               	movlw	6
  6049  0015BA  6E1D               	movwf	??_Delay& (0+255),c
  6050  0015BC  0E30               	movlw	48
  6051  0015BE                     u4517:
  6052  0015BE  2EE8               	decfsz	wreg,f,c
  6053  0015C0  D7FE               	goto	u4517
  6054  0015C2  2E1D               	decfsz	??_Delay& (0+255),f,c
  6055  0015C4  D7FC               	goto	u4517
  6056  0015C6  D000               	nop2	
  6057  0015C8  4A1E               	infsnz	Delay@i,f,c
  6058  0015CA  2A1F               	incf	Delay@i+1,f,c
  6059  0015CC                     l694:
  6060  0015CC  501B               	movf	Delay@wait,w,c
  6061  0015CE  5C1E               	subwf	Delay@i,w,c
  6062  0015D0  501F               	movf	Delay@i+1,w,c
  6063  0015D2  0A80               	xorlw	128
  6064  0015D4  6E1D               	movwf	??_Delay& (0+255),c
  6065  0015D6  501C               	movf	Delay@wait+1,w,c
  6066  0015D8  0A80               	xorlw	128
  6067  0015DA  581D               	subwfb	??_Delay& (0+255),w,c
  6068  0015DC  B0D8               	btfsc	status,0,c
  6069  0015DE  0012               	return	
  6070  0015E0  D7EB               	goto	l3063
  6071  0015E2                     __end_of_Delay:
  6072                           	opt stack 0
  6073                           tosu	equ	0xFFF
  6074                           tosh	equ	0xFFE
  6075                           tosl	equ	0xFFD
  6076                           pclath	equ	0xFFA
  6077                           tblptru	equ	0xFF8
  6078                           tblptrh	equ	0xFF7
  6079                           tblptrl	equ	0xFF6
  6080                           tablat	equ	0xFF5
  6081                           prodh	equ	0xFF4
  6082                           prodl	equ	0xFF3
  6083                           intcon	equ	0xFF2
  6084                           postinc0	equ	0xFEE
  6085                           wreg	equ	0xFE8
  6086                           postdec1	equ	0xFE5
  6087                           fsr1h	equ	0xFE2
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           postinc2	equ	0xFDE
  6091                           postdec2	equ	0xFDD
  6092                           plusw2	equ	0xFDB
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function _SYSTEM_Initialize *****************
  6098 ;; Defined at:
  6099 ;;		line 69 in file "mcc_generated_files/mcc.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;		None
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;                  1    wreg      void 
  6106 ;; Registers used:
  6107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6113 ;;      Params:         0       0       0       0       0       0       0
  6114 ;;      Locals:         0       0       0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0       0       0
  6116 ;;      Totals:         0       0       0       0       0       0       0
  6117 ;;Total ram usage:        0 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:    8
  6120 ;; This function calls:
  6121 ;;		_CommsStart
  6122 ;;		_EUSART2_Initialize
  6123 ;;		_INTERRUPT_Initialize
  6124 ;;		_OSCILLATOR_Initialize
  6125 ;;		_PIN_MANAGER_Initialize
  6126 ;;		_TMR0_Initialize
  6127 ;; This function is called by:
  6128 ;;		_main
  6129 ;; This function uses a non-reentrant model
  6130 ;;
  6131                           
  6132                           	psect	text29
  6133  001872                     __ptext29:
  6134                           	opt stack 0
  6135  001872                     _SYSTEM_Initialize:
  6136                           	opt stack 22
  6137                           
  6138                           ;mcc.c: 70: OSCILLATOR_Initialize();
  6139                           
  6140                           ;incstack = 0
  6141  001872  EC95  F00C         	call	_OSCILLATOR_Initialize	;wreg free
  6142                           
  6143                           ;mcc.c: 71: PIN_MANAGER_Initialize();
  6144  001876  ECD9  F009         	call	_PIN_MANAGER_Initialize	;wreg free
  6145                           
  6146                           ;mcc.c: 72: INTERRUPT_Initialize();
  6147  00187A  EC9C  F00C         	call	_INTERRUPT_Initialize	;wreg free
  6148                           
  6149                           ;mcc.c: 73: EUSART2_Initialize();
  6150  00187E  ECF1  F00A         	call	_EUSART2_Initialize	;wreg free
  6151                           
  6152                           ;mcc.c: 74: TMR0_Initialize();
  6153  001882  EC6A  F00B         	call	_TMR0_Initialize	;wreg free
  6154                           
  6155                           ;mcc.c: 75: CommsStart();
  6156  001886  EC07  F00A         	call	_CommsStart	;wreg free
  6157  00188A  0012               	return		;funcret
  6158  00188C                     __end_of_SYSTEM_Initialize:
  6159                           	opt stack 0
  6160                           tosu	equ	0xFFF
  6161                           tosh	equ	0xFFE
  6162                           tosl	equ	0xFFD
  6163                           pclath	equ	0xFFA
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           postinc0	equ	0xFEE
  6172                           wreg	equ	0xFE8
  6173                           postdec1	equ	0xFE5
  6174                           fsr1h	equ	0xFE2
  6175                           fsr1l	equ	0xFE1
  6176                           indf2	equ	0xFDF
  6177                           postinc2	equ	0xFDE
  6178                           postdec2	equ	0xFDD
  6179                           plusw2	equ	0xFDB
  6180                           fsr2h	equ	0xFDA
  6181                           fsr2l	equ	0xFD9
  6182                           status	equ	0xFD8
  6183                           
  6184 ;; *************** function _TMR0_Initialize *****************
  6185 ;; Defined at:
  6186 ;;		line 69 in file "mcc_generated_files/tmr0.c"
  6187 ;; Parameters:    Size  Location     Type
  6188 ;;		None
  6189 ;; Auto vars:     Size  Location     Type
  6190 ;;		None
  6191 ;; Return value:  Size  Location     Type
  6192 ;;                  2  180[None  ] int 
  6193 ;; Registers used:
  6194 ;;		wreg, status,2, status,0, cstack
  6195 ;; Tracked objects:
  6196 ;;		On entry : 0/0
  6197 ;;		On exit  : 0/0
  6198 ;;		Unchanged: 0/0
  6199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6200 ;;      Params:         0       0       0       0       0       0       0
  6201 ;;      Locals:         0       0       0       0       0       0       0
  6202 ;;      Temps:          2       0       0       0       0       0       0
  6203 ;;      Totals:         2       0       0       0       0       0       0
  6204 ;;Total ram usage:        2 bytes
  6205 ;; Hardware stack levels used:    1
  6206 ;; Hardware stack levels required when called:    5
  6207 ;; This function calls:
  6208 ;;		_TMR0_StartTimer
  6209 ;; This function is called by:
  6210 ;;		_SYSTEM_Initialize
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text30
  6215  0016D4                     __ptext30:
  6216                           	opt stack 0
  6217  0016D4                     _TMR0_Initialize:
  6218                           	opt stack 24
  6219                           
  6220                           ;tmr0.c: 74: T0CON = 0x94;
  6221                           
  6222                           ;incstack = 0
  6223  0016D4  0E94               	movlw	148
  6224  0016D6  6ED5               	movwf	4053,c	;volatile
  6225                           
  6226                           ;tmr0.c: 76: TMR0H = 0xCF;
  6227  0016D8  0ECF               	movlw	207
  6228  0016DA  6ED7               	movwf	4055,c	;volatile
  6229                           
  6230                           ;tmr0.c: 78: TMR0L = 0x2C;
  6231  0016DC  0E2C               	movlw	44
  6232  0016DE  6ED6               	movwf	4054,c	;volatile
  6233                           
  6234                           ;tmr0.c: 81: timer0ReloadVal16bit = (TMR0H << 8) | TMR0L;
  6235  0016E0  50D6               	movf	4054,w,c	;volatile
  6236  0016E2  CFD7 F01B          	movff	4055,??_TMR0_Initialize	;volatile
  6237  0016E6  6A1C               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  6238  0016E8  C01B  F01C         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  6239  0016EC  6A1B               	clrf	??_TMR0_Initialize,c
  6240  0016EE  101B               	iorwf	??_TMR0_Initialize,w,c
  6241  0016F0  6E40               	movwf	_timer0ReloadVal16bit,c
  6242  0016F2  501C               	movf	??_TMR0_Initialize+1,w,c
  6243  0016F4  6E41               	movwf	_timer0ReloadVal16bit+1,c
  6244                           
  6245                           ;tmr0.c: 84: INTCONbits.TMR0IF = 0;
  6246  0016F6  94F2               	bcf	intcon,2,c	;volatile
  6247                           
  6248                           ;tmr0.c: 87: INTCONbits.TMR0IE = 1;
  6249  0016F8  8AF2               	bsf	intcon,5,c	;volatile
  6250                           
  6251                           ;tmr0.c: 90: TMR0_StartTimer();
  6252  0016FA  ECA2  F00C         	call	_TMR0_StartTimer	;wreg free
  6253  0016FE  0012               	return		;funcret
  6254  001700                     __end_of_TMR0_Initialize:
  6255                           	opt stack 0
  6256                           tosu	equ	0xFFF
  6257                           tosh	equ	0xFFE
  6258                           tosl	equ	0xFFD
  6259                           pclath	equ	0xFFA
  6260                           tblptru	equ	0xFF8
  6261                           tblptrh	equ	0xFF7
  6262                           tblptrl	equ	0xFF6
  6263                           tablat	equ	0xFF5
  6264                           prodh	equ	0xFF4
  6265                           prodl	equ	0xFF3
  6266                           intcon	equ	0xFF2
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           postdec1	equ	0xFE5
  6270                           fsr1h	equ	0xFE2
  6271                           fsr1l	equ	0xFE1
  6272                           indf2	equ	0xFDF
  6273                           postinc2	equ	0xFDE
  6274                           postdec2	equ	0xFDD
  6275                           plusw2	equ	0xFDB
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _TMR0_StartTimer *****************
  6281 ;; Defined at:
  6282 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;		None
  6285 ;; Auto vars:     Size  Location     Type
  6286 ;;		None
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      void 
  6289 ;; Registers used:
  6290 ;;		None
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6296 ;;      Params:         0       0       0       0       0       0       0
  6297 ;;      Locals:         0       0       0       0       0       0       0
  6298 ;;      Temps:          0       0       0       0       0       0       0
  6299 ;;      Totals:         0       0       0       0       0       0       0
  6300 ;;Total ram usage:        0 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    4
  6303 ;; This function calls:
  6304 ;;		Nothing
  6305 ;; This function is called by:
  6306 ;;		_TMR0_Initialize
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text31
  6311  001944                     __ptext31:
  6312                           	opt stack 0
  6313  001944                     _TMR0_StartTimer:
  6314                           	opt stack 24
  6315                           
  6316                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  6317                           
  6318                           ;incstack = 0
  6319  001944  8ED5               	bsf	4053,7,c	;volatile
  6320  001946  0012               	return		;funcret
  6321  001948                     __end_of_TMR0_StartTimer:
  6322                           	opt stack 0
  6323                           tosu	equ	0xFFF
  6324                           tosh	equ	0xFFE
  6325                           tosl	equ	0xFFD
  6326                           pclath	equ	0xFFA
  6327                           tblptru	equ	0xFF8
  6328                           tblptrh	equ	0xFF7
  6329                           tblptrl	equ	0xFF6
  6330                           tablat	equ	0xFF5
  6331                           prodh	equ	0xFF4
  6332                           prodl	equ	0xFF3
  6333                           intcon	equ	0xFF2
  6334                           postinc0	equ	0xFEE
  6335                           wreg	equ	0xFE8
  6336                           postdec1	equ	0xFE5
  6337                           fsr1h	equ	0xFE2
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           postinc2	equ	0xFDE
  6341                           postdec2	equ	0xFDD
  6342                           plusw2	equ	0xFDB
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;; *************** function _PIN_MANAGER_Initialize *****************
  6348 ;; Defined at:
  6349 ;;		line 49 in file "mcc_generated_files/pin_manager.c"
  6350 ;; Parameters:    Size  Location     Type
  6351 ;;		None
  6352 ;; Auto vars:     Size  Location     Type
  6353 ;;		None
  6354 ;; Return value:  Size  Location     Type
  6355 ;;                  1    wreg      void 
  6356 ;; Registers used:
  6357 ;;		wreg, status,2
  6358 ;; Tracked objects:
  6359 ;;		On entry : 0/0
  6360 ;;		On exit  : 0/0
  6361 ;;		Unchanged: 0/0
  6362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6363 ;;      Params:         0       0       0       0       0       0       0
  6364 ;;      Locals:         0       0       0       0       0       0       0
  6365 ;;      Temps:          0       0       0       0       0       0       0
  6366 ;;      Totals:         0       0       0       0       0       0       0
  6367 ;;Total ram usage:        0 bytes
  6368 ;; Hardware stack levels used:    1
  6369 ;; Hardware stack levels required when called:    4
  6370 ;; This function calls:
  6371 ;;		Nothing
  6372 ;; This function is called by:
  6373 ;;		_SYSTEM_Initialize
  6374 ;; This function uses a non-reentrant model
  6375 ;;
  6376                           
  6377                           	psect	text32
  6378  0013B2                     __ptext32:
  6379                           	opt stack 0
  6380  0013B2                     _PIN_MANAGER_Initialize:
  6381                           	opt stack 25
  6382                           
  6383                           ;pin_manager.c: 51: LATB = 0x0;
  6384                           
  6385                           ;incstack = 0
  6386  0013B2  0E00               	movlw	0
  6387  0013B4  6E8A               	movwf	3978,c	;volatile
  6388                           
  6389                           ;pin_manager.c: 52: LATA = 0x0;
  6390  0013B6  0E00               	movlw	0
  6391  0013B8  6E89               	movwf	3977,c	;volatile
  6392                           
  6393                           ;pin_manager.c: 53: ANSELE = 0x7;
  6394  0013BA  0E07               	movlw	7
  6395  0013BC  010F               	movlb	15	; () banked
  6396  0013BE  6F3C               	movwf	60,b	;volatile
  6397                           
  6398                           ;pin_manager.c: 54: LATE = 0x0;
  6399  0013C0  0E00               	movlw	0
  6400  0013C2  6E8D               	movwf	3981,c	;volatile
  6401                           
  6402                           ;pin_manager.c: 55: LATD = 0x0;
  6403  0013C4  0E00               	movlw	0
  6404  0013C6  6E8C               	movwf	3980,c	;volatile
  6405                           
  6406                           ;pin_manager.c: 56: LATC = 0x0;
  6407  0013C8  0E00               	movlw	0
  6408  0013CA  6E8B               	movwf	3979,c	;volatile
  6409                           
  6410                           ;pin_manager.c: 57: ANSELA = 0x2F;
  6411  0013CC  0E2F               	movlw	47
  6412  0013CE  010F               	movlb	15	; () banked
  6413  0013D0  6F38               	movwf	56,b	;volatile
  6414                           
  6415                           ;pin_manager.c: 58: ANSELB = 0x3F;
  6416  0013D2  0E3F               	movlw	63
  6417  0013D4  010F               	movlb	15	; () banked
  6418  0013D6  6F39               	movwf	57,b	;volatile
  6419                           
  6420                           ;pin_manager.c: 59: ANSELC = 0xEC;
  6421  0013D8  0EEC               	movlw	236
  6422  0013DA  010F               	movlb	15	; () banked
  6423  0013DC  6F3A               	movwf	58,b	;volatile
  6424                           
  6425                           ;pin_manager.c: 60: ANSELD = 0x3F;
  6426  0013DE  0E3F               	movlw	63
  6427  0013E0  010F               	movlb	15	; () banked
  6428  0013E2  6F3B               	movwf	59,b	;volatile
  6429                           
  6430                           ;pin_manager.c: 61: WPUB = 0xFC;
  6431  0013E4  0EFC               	movlw	252
  6432  0013E6  6E61               	movwf	3937,c	;volatile
  6433                           
  6434                           ;pin_manager.c: 62: TRISD = 0xF2;
  6435  0013E8  0EF2               	movlw	242
  6436  0013EA  6E95               	movwf	3989,c	;volatile
  6437                           
  6438                           ;pin_manager.c: 63: TRISE = 0x7;
  6439  0013EC  0E07               	movlw	7
  6440  0013EE  6E96               	movwf	3990,c	;volatile
  6441                           
  6442                           ;pin_manager.c: 64: TRISB = 0xC4;
  6443  0013F0  0EC4               	movlw	196
  6444  0013F2  6E93               	movwf	3987,c	;volatile
  6445                           
  6446                           ;pin_manager.c: 65: TRISC = 0xD4;
  6447  0013F4  0ED4               	movlw	212
  6448  0013F6  6E94               	movwf	3988,c	;volatile
  6449                           
  6450                           ;pin_manager.c: 66: TRISA = 0x37;
  6451  0013F8  0E37               	movlw	55
  6452  0013FA  6E92               	movwf	3986,c	;volatile
  6453                           
  6454                           ; BSR set to: 15
  6455                           ;pin_manager.c: 68: INTCON2bits.nRBPU = 0x0;
  6456  0013FC  9EF1               	bcf	intcon2,7,c	;volatile
  6457                           
  6458                           ; BSR set to: 15
  6459                           
  6460                           ; BSR set to: 15
  6461                           
  6462                           ;pin_manager.c: 70: do { ANSB0 = 0; } while(0);
  6463  0013FE  010F               	movlb	15	; () banked
  6464  001400  9139               	bcf	57,0,b	;volatile
  6465                           
  6466                           ; BSR set to: 15
  6467                           
  6468                           ; BSR set to: 15
  6469                           
  6470                           ;pin_manager.c: 71: do { ANSB1 = 0; } while(0);
  6471                           
  6472                           ; BSR set to: 15
  6473  001402  010F               	movlb	15	; () banked
  6474  001404  9339               	bcf	57,1,b	;volatile
  6475                           
  6476                           ; BSR set to: 15
  6477                           
  6478                           ; BSR set to: 15
  6479                           
  6480                           ;pin_manager.c: 73: do { TRISB0 = 0; } while(0);
  6481                           
  6482                           ; BSR set to: 15
  6483  001406  9093               	bcf	3987,0,c	;volatile
  6484                           
  6485                           ; BSR set to: 15
  6486                           
  6487                           ; BSR set to: 15
  6488                           
  6489                           ;pin_manager.c: 74: do { TRISB1 = 0; } while(0);
  6490                           
  6491                           ; BSR set to: 15
  6492  001408  9293               	bcf	3987,1,c	;volatile
  6493                           
  6494                           ; BSR set to: 15
  6495                           ;pin_manager.c: 78: INTCONbits.RBIE = 0;
  6496                           
  6497                           ; BSR set to: 15
  6498  00140A  96F2               	bcf	intcon,3,c	;volatile
  6499                           
  6500                           ; BSR set to: 15
  6501  00140C  0012               	return		;funcret
  6502  00140E                     __end_of_PIN_MANAGER_Initialize:
  6503                           	opt stack 0
  6504                           tosu	equ	0xFFF
  6505                           tosh	equ	0xFFE
  6506                           tosl	equ	0xFFD
  6507                           pclath	equ	0xFFA
  6508                           tblptru	equ	0xFF8
  6509                           tblptrh	equ	0xFF7
  6510                           tblptrl	equ	0xFF6
  6511                           tablat	equ	0xFF5
  6512                           prodh	equ	0xFF4
  6513                           prodl	equ	0xFF3
  6514                           intcon	equ	0xFF2
  6515                           intcon2	equ	0xFF1
  6516                           postinc0	equ	0xFEE
  6517                           wreg	equ	0xFE8
  6518                           postdec1	equ	0xFE5
  6519                           fsr1h	equ	0xFE2
  6520                           fsr1l	equ	0xFE1
  6521                           indf2	equ	0xFDF
  6522                           postinc2	equ	0xFDE
  6523                           postdec2	equ	0xFDD
  6524                           plusw2	equ	0xFDB
  6525                           fsr2h	equ	0xFDA
  6526                           fsr2l	equ	0xFD9
  6527                           status	equ	0xFD8
  6528                           
  6529 ;; *************** function _OSCILLATOR_Initialize *****************
  6530 ;; Defined at:
  6531 ;;		line 78 in file "mcc_generated_files/mcc.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  1    wreg      void 
  6538 ;; Registers used:
  6539 ;;		wreg, status,2
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6545 ;;      Params:         0       0       0       0       0       0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    4
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_SYSTEM_Initialize
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text33
  6560  00192A                     __ptext33:
  6561                           	opt stack 0
  6562  00192A                     _OSCILLATOR_Initialize:
  6563                           	opt stack 25
  6564                           
  6565                           ;mcc.c: 80: OSCCON = 0x70;
  6566                           
  6567                           ; BSR set to: 15
  6568                           ;incstack = 0
  6569  00192A  0E70               	movlw	112
  6570  00192C  6ED3               	movwf	4051,c	;volatile
  6571                           
  6572                           ;mcc.c: 82: OSCCON2 = 0x04;
  6573  00192E  0E04               	movlw	4
  6574  001930  6ED2               	movwf	4050,c	;volatile
  6575                           
  6576                           ;mcc.c: 84: OSCTUNE = 0x00;
  6577  001932  0E00               	movlw	0
  6578  001934  6E9B               	movwf	3995,c	;volatile
  6579  001936  0012               	return		;funcret
  6580  001938                     __end_of_OSCILLATOR_Initialize:
  6581                           	opt stack 0
  6582                           tosu	equ	0xFFF
  6583                           tosh	equ	0xFFE
  6584                           tosl	equ	0xFFD
  6585                           pclath	equ	0xFFA
  6586                           tblptru	equ	0xFF8
  6587                           tblptrh	equ	0xFF7
  6588                           tblptrl	equ	0xFF6
  6589                           tablat	equ	0xFF5
  6590                           prodh	equ	0xFF4
  6591                           prodl	equ	0xFF3
  6592                           intcon	equ	0xFF2
  6593                           intcon2	equ	0xFF1
  6594                           postinc0	equ	0xFEE
  6595                           wreg	equ	0xFE8
  6596                           postdec1	equ	0xFE5
  6597                           fsr1h	equ	0xFE2
  6598                           fsr1l	equ	0xFE1
  6599                           indf2	equ	0xFDF
  6600                           postinc2	equ	0xFDE
  6601                           postdec2	equ	0xFDD
  6602                           plusw2	equ	0xFDB
  6603                           fsr2h	equ	0xFDA
  6604                           fsr2l	equ	0xFD9
  6605                           status	equ	0xFD8
  6606                           
  6607 ;; *************** function _INTERRUPT_Initialize *****************
  6608 ;; Defined at:
  6609 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6610 ;; Parameters:    Size  Location     Type
  6611 ;;		None
  6612 ;; Auto vars:     Size  Location     Type
  6613 ;;		None
  6614 ;; Return value:  Size  Location     Type
  6615 ;;                  1    wreg      void 
  6616 ;; Registers used:
  6617 ;;		None
  6618 ;; Tracked objects:
  6619 ;;		On entry : 0/0
  6620 ;;		On exit  : 0/0
  6621 ;;		Unchanged: 0/0
  6622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6623 ;;      Params:         0       0       0       0       0       0       0
  6624 ;;      Locals:         0       0       0       0       0       0       0
  6625 ;;      Temps:          0       0       0       0       0       0       0
  6626 ;;      Totals:         0       0       0       0       0       0       0
  6627 ;;Total ram usage:        0 bytes
  6628 ;; Hardware stack levels used:    1
  6629 ;; Hardware stack levels required when called:    4
  6630 ;; This function calls:
  6631 ;;		Nothing
  6632 ;; This function is called by:
  6633 ;;		_SYSTEM_Initialize
  6634 ;; This function uses a non-reentrant model
  6635 ;;
  6636                           
  6637                           	psect	text34
  6638  001938                     __ptext34:
  6639                           	opt stack 0
  6640  001938                     _INTERRUPT_Initialize:
  6641                           	opt stack 25
  6642                           
  6643                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  6644                           
  6645                           ;incstack = 0
  6646  001938  9ED0               	bcf	4048,7,c	;volatile
  6647                           
  6648                           ;interrupt_manager.c: 59: IPR3bits.RC2IP = 0;
  6649  00193A  9AA5               	bcf	4005,5,c	;volatile
  6650                           
  6651                           ;interrupt_manager.c: 61: IPR3bits.TX2IP = 0;
  6652  00193C  98A5               	bcf	4005,4,c	;volatile
  6653                           
  6654                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
  6655  00193E  9A9F               	bcf	3999,5,c	;volatile
  6656                           
  6657                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
  6658  001940  989F               	bcf	3999,4,c	;volatile
  6659  001942  0012               	return		;funcret
  6660  001944                     __end_of_INTERRUPT_Initialize:
  6661                           	opt stack 0
  6662                           tosu	equ	0xFFF
  6663                           tosh	equ	0xFFE
  6664                           tosl	equ	0xFFD
  6665                           pclath	equ	0xFFA
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           intcon2	equ	0xFF1
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           postdec1	equ	0xFE5
  6677                           fsr1h	equ	0xFE2
  6678                           fsr1l	equ	0xFE1
  6679                           indf2	equ	0xFDF
  6680                           postinc2	equ	0xFDE
  6681                           postdec2	equ	0xFDD
  6682                           plusw2	equ	0xFDB
  6683                           fsr2h	equ	0xFDA
  6684                           fsr2l	equ	0xFD9
  6685                           status	equ	0xFD8
  6686                           
  6687 ;; *************** function _EUSART2_Initialize *****************
  6688 ;; Defined at:
  6689 ;;		line 76 in file "mcc_generated_files/eusart2.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;		None
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, status,2
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6703 ;;      Params:         0       0       0       0       0       0       0
  6704 ;;      Locals:         0       0       0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0
  6706 ;;      Totals:         0       0       0       0       0       0       0
  6707 ;;Total ram usage:        0 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    4
  6710 ;; This function calls:
  6711 ;;		Nothing
  6712 ;; This function is called by:
  6713 ;;		_SYSTEM_Initialize
  6714 ;; This function uses a non-reentrant model
  6715 ;;
  6716                           
  6717                           	psect	text35
  6718  0015E2                     __ptext35:
  6719                           	opt stack 0
  6720  0015E2                     _EUSART2_Initialize:
  6721                           	opt stack 25
  6722                           
  6723                           ;eusart2.c: 78: PIE1bits.RC1IE = 0;
  6724                           
  6725                           ;incstack = 0
  6726  0015E2  9A9D               	bcf	3997,5,c	;volatile
  6727                           
  6728                           ;eusart2.c: 79: PIE1bits.TX1IE = 0;
  6729  0015E4  989D               	bcf	3997,4,c	;volatile
  6730                           
  6731                           ;eusart2.c: 84: BAUD1CON = 0x48;
  6732  0015E6  0E48               	movlw	72
  6733  0015E8  6EB8               	movwf	4024,c	;volatile
  6734                           
  6735                           ;eusart2.c: 87: RC1STA = 0x90;
  6736  0015EA  0E90               	movlw	144
  6737  0015EC  6EAB               	movwf	4011,c	;volatile
  6738                           
  6739                           ;eusart2.c: 90: TX1STA = 0x26;
  6740  0015EE  0E26               	movlw	38
  6741  0015F0  6EAC               	movwf	4012,c	;volatile
  6742                           
  6743                           ;eusart2.c: 93: SPBRG1 = 0x33;
  6744  0015F2  0E33               	movlw	51
  6745  0015F4  6EAF               	movwf	4015,c	;volatile
  6746                           
  6747                           ;eusart2.c: 96: SPBRGH1 = 0x00;
  6748  0015F6  0E00               	movlw	0
  6749  0015F8  6EB0               	movwf	4016,c	;volatile
  6750                           
  6751                           ;eusart2.c: 100: eusart1TxHead = 0;
  6752  0015FA  0E00               	movlw	0
  6753  0015FC  6E33               	movwf	_eusart1TxHead,c
  6754                           
  6755                           ;eusart2.c: 101: eusart1TxTail = 0;
  6756  0015FE  0E00               	movlw	0
  6757  001600  6E34               	movwf	_eusart1TxTail,c
  6758                           
  6759                           ;eusart2.c: 102: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  6760  001602  0E08               	movlw	8
  6761  001604  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
  6762                           
  6763                           ;eusart2.c: 104: eusart1RxHead = 0;
  6764  001606  0E00               	movlw	0
  6765  001608  6E31               	movwf	_eusart1RxHead,c
  6766                           
  6767                           ;eusart2.c: 105: eusart1RxTail = 0;
  6768  00160A  0E00               	movlw	0
  6769  00160C  6E32               	movwf	_eusart1RxTail,c
  6770                           
  6771                           ;eusart2.c: 106: eusart1RxCount = 0;
  6772  00160E  0E00               	movlw	0
  6773  001610  6E30               	movwf	_eusart1RxCount,c	;volatile
  6774                           
  6775                           ;eusart2.c: 109: PIE1bits.RC1IE = 1;
  6776  001612  8A9D               	bsf	3997,5,c	;volatile
  6777  001614  0012               	return		;funcret
  6778  001616                     __end_of_EUSART2_Initialize:
  6779                           	opt stack 0
  6780                           tosu	equ	0xFFF
  6781                           tosh	equ	0xFFE
  6782                           tosl	equ	0xFFD
  6783                           pclath	equ	0xFFA
  6784                           tblptru	equ	0xFF8
  6785                           tblptrh	equ	0xFF7
  6786                           tblptrl	equ	0xFF6
  6787                           tablat	equ	0xFF5
  6788                           prodh	equ	0xFF4
  6789                           prodl	equ	0xFF3
  6790                           intcon	equ	0xFF2
  6791                           intcon2	equ	0xFF1
  6792                           postinc0	equ	0xFEE
  6793                           wreg	equ	0xFE8
  6794                           postdec1	equ	0xFE5
  6795                           fsr1h	equ	0xFE2
  6796                           fsr1l	equ	0xFE1
  6797                           indf2	equ	0xFDF
  6798                           postinc2	equ	0xFDE
  6799                           postdec2	equ	0xFDD
  6800                           plusw2	equ	0xFDB
  6801                           fsr2h	equ	0xFDA
  6802                           fsr2l	equ	0xFD9
  6803                           status	equ	0xFD8
  6804                           
  6805 ;; *************** function _CommsStart *****************
  6806 ;; Defined at:
  6807 ;;		line 16 in file "Communications.c"
  6808 ;; Parameters:    Size  Location     Type
  6809 ;;		None
  6810 ;; Auto vars:     Size  Location     Type
  6811 ;;		None
  6812 ;; Return value:  Size  Location     Type
  6813 ;;                  1    wreg      void 
  6814 ;; Registers used:
  6815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6816 ;; Tracked objects:
  6817 ;;		On entry : 0/0
  6818 ;;		On exit  : 0/0
  6819 ;;		Unchanged: 0/0
  6820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6821 ;;      Params:         0       0       0       0       0       0       0
  6822 ;;      Locals:         0       0       0       0       0       0       0
  6823 ;;      Temps:          0       0       0       0       0       0       0
  6824 ;;      Totals:         0       0       0       0       0       0       0
  6825 ;;Total ram usage:        0 bytes
  6826 ;; Hardware stack levels used:    1
  6827 ;; Hardware stack levels required when called:    7
  6828 ;; This function calls:
  6829 ;;		_EUSART1_Initialize
  6830 ;;		_begin
  6831 ;; This function is called by:
  6832 ;;		_SYSTEM_Initialize
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           	psect	text36
  6837  00140E                     __ptext36:
  6838                           	opt stack 0
  6839  00140E                     _CommsStart:
  6840                           	opt stack 22
  6841                           
  6842                           ;Communications.c: 17: begin(receiveArray, sizeof (receiveArray), 1, 0, Send_put, Receiv
      +                          e_get, Receive_available, Receive_peek);
  6843                           
  6844                           ;incstack = 0
  6845  00140E  0ECE               	movlw	low _receiveArray
  6846  001410  0100               	movlb	0	; () banked
  6847  001412  6FC8               	movwf	begin@ptr& (0+255),b
  6848  001414  0E01               	movlw	high _receiveArray
  6849  001416  0100               	movlb	0	; () banked
  6850  001418  6FC9               	movwf	(begin@ptr+1)& (0+255),b
  6851  00141A  0E32               	movlw	50
  6852  00141C  0100               	movlb	0	; () banked
  6853  00141E  6FCA               	movwf	begin@maxSize& (0+255),b
  6854  001420  0E01               	movlw	1
  6855  001422  0100               	movlb	0	; () banked
  6856  001424  6FCB               	movwf	begin@givenAddress& (0+255),b
  6857  001426  0E00               	movlw	0
  6858  001428  0100               	movlb	0	; () banked
  6859  00142A  6FCC               	movwf	begin@error& (0+255),b
  6860  00142C  0E48               	movlw	low _Send_put
  6861  00142E  0100               	movlb	0	; () banked
  6862  001430  6FCD               	movwf	begin@stufftosend& (0+255),b
  6863  001432  0E16               	movlw	high _Send_put
  6864  001434  0100               	movlb	0	; () banked
  6865  001436  6FCE               	movwf	(begin@stufftosend+1)& (0+255),b
  6866  001438  0E1C               	movlw	low _Receive_get
  6867  00143A  0100               	movlb	0	; () banked
  6868  00143C  6FCF               	movwf	begin@stufftoreceive& (0+255),b
  6869  00143E  0E19               	movlw	high _Receive_get
  6870  001440  0100               	movlb	0	; () banked
  6871  001442  6FD0               	movwf	(begin@stufftoreceive+1)& (0+255),b
  6872  001444  0EBA               	movlw	low _Receive_available
  6873  001446  0100               	movlb	0	; () banked
  6874  001448  6FD1               	movwf	begin@stuffavailable& (0+255),b
  6875  00144A  0E18               	movlw	high _Receive_available
  6876  00144C  0100               	movlb	0	; () banked
  6877  00144E  6FD2               	movwf	(begin@stuffavailable+1)& (0+255),b
  6878  001450  0E0E               	movlw	low _Receive_peek
  6879  001452  0100               	movlb	0	; () banked
  6880  001454  6FD3               	movwf	begin@stuffpeek& (0+255),b
  6881  001456  0E19               	movlw	high _Receive_peek
  6882  001458  0100               	movlb	0	; () banked
  6883  00145A  6FD4               	movwf	(begin@stuffpeek+1)& (0+255),b
  6884  00145C  ECA9  F009         	call	_begin	;wreg free
  6885                           
  6886                           ;Communications.c: 18: EUSART1_Initialize();
  6887  001460  EC9D  F00A         	call	_EUSART1_Initialize	;wreg free
  6888  001464  0012               	return		;funcret
  6889  001466                     __end_of_CommsStart:
  6890                           	opt stack 0
  6891                           tosu	equ	0xFFF
  6892                           tosh	equ	0xFFE
  6893                           tosl	equ	0xFFD
  6894                           pclath	equ	0xFFA
  6895                           tblptru	equ	0xFF8
  6896                           tblptrh	equ	0xFF7
  6897                           tblptrl	equ	0xFF6
  6898                           tablat	equ	0xFF5
  6899                           prodh	equ	0xFF4
  6900                           prodl	equ	0xFF3
  6901                           intcon	equ	0xFF2
  6902                           intcon2	equ	0xFF1
  6903                           postinc0	equ	0xFEE
  6904                           wreg	equ	0xFE8
  6905                           postdec1	equ	0xFE5
  6906                           fsr1h	equ	0xFE2
  6907                           fsr1l	equ	0xFE1
  6908                           indf2	equ	0xFDF
  6909                           postinc2	equ	0xFDE
  6910                           postdec2	equ	0xFDD
  6911                           plusw2	equ	0xFDB
  6912                           fsr2h	equ	0xFDA
  6913                           fsr2l	equ	0xFD9
  6914                           status	equ	0xFD8
  6915                           
  6916 ;; *************** function _begin *****************
  6917 ;; Defined at:
  6918 ;;		line 73 in file "FastTransfer.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  ptr             2    0[BANK0 ] PTR volatile int 
  6921 ;;		 -> receiveArray(50), 
  6922 ;;  maxSize         1    2[BANK0 ] unsigned char 
  6923 ;;  givenAddress    1    3[BANK0 ] unsigned char 
  6924 ;;  error           1    4[BANK0 ] unsigned char 
  6925 ;;  stufftosend     2    5[BANK0 ] PTR FTN(unsigned char ,)
  6926 ;;		 -> Send_put(1), 
  6927 ;;  stufftorecei    2    7[BANK0 ] PTR FTN()unsigned char 
  6928 ;;		 -> Receive_get(1), 
  6929 ;;  stuffavailab    2    9[BANK0 ] PTR FTN()int 
  6930 ;;		 -> Receive_available(2), 
  6931 ;;  stuffpeek       2   11[BANK0 ] PTR FTN()unsigned char 
  6932 ;;		 -> Receive_peek(1), 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;                  1    wreg      void 
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0, cstack
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6944 ;;      Params:         0      13       0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0       0       0
  6947 ;;      Totals:         0      13       0       0       0       0       0
  6948 ;;Total ram usage:       13 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:    5
  6951 ;; This function calls:
  6952 ;;		___awdiv
  6953 ;; This function is called by:
  6954 ;;		_CommsStart
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text37
  6959  001352                     __ptext37:
  6960                           	opt stack 0
  6961  001352                     _begin:
  6962                           	opt stack 23
  6963                           
  6964                           ;FastTransfer.c: 74: receiveArrayAddress = ptr;
  6965                           
  6966                           ;incstack = 0
  6967  001352  C0C8  F0E3         	movff	begin@ptr,_receiveArrayAddress
  6968  001356  C0C9  F0E4         	movff	begin@ptr+1,_receiveArrayAddress+1
  6969                           
  6970                           ;FastTransfer.c: 75: moduleAddress = givenAddress;
  6971  00135A  C0CB  F043         	movff	begin@givenAddress,_moduleAddress
  6972                           
  6973                           ;FastTransfer.c: 76: serial_write = stufftosend;
  6974  00135E  C0CD  F03E         	movff	begin@stufftosend,_serial_write
  6975  001362  C0CE  F03F         	movff	begin@stufftosend+1,_serial_write+1
  6976                           
  6977                           ;FastTransfer.c: 77: serial_available = stuffavailable;
  6978  001366  C0D1  F03A         	movff	begin@stuffavailable,_serial_available
  6979  00136A  C0D2  F03B         	movff	begin@stuffavailable+1,_serial_available+1
  6980                           
  6981                           ;FastTransfer.c: 78: serial_peek = stuffpeek;
  6982  00136E  C0D3  F0E7         	movff	begin@stuffpeek,_serial_peek
  6983  001372  C0D4  F0E8         	movff	begin@stuffpeek+1,_serial_peek+1
  6984                           
  6985                           ;FastTransfer.c: 79: serial_read = stufftoreceive;
  6986  001376  C0CF  F03C         	movff	begin@stufftoreceive,_serial_read
  6987  00137A  C0D0  F03D         	movff	begin@stufftoreceive+1,_serial_read+1
  6988                           
  6989                           ;FastTransfer.c: 80: maxDataAddress = maxSize / 2;
  6990  00137E  C0CA  F01B         	movff	begin@maxSize,___awdiv@dividend
  6991  001382  6A1C               	clrf	___awdiv@dividend+1,c
  6992  001384  0E00               	movlw	0
  6993  001386  6E1E               	movwf	___awdiv@divisor+1,c
  6994  001388  0E02               	movlw	2
  6995  00138A  6E1D               	movwf	___awdiv@divisor,c
  6996  00138C  ECC7  F008         	call	___awdiv	;wreg free
  6997  001390  501B               	movf	?___awdiv,w,c
  6998  001392  0100               	movlb	0	; () banked
  6999  001394  6FEA               	movwf	_maxDataAddress& (0+255),b
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;FastTransfer.c: 81: sendStructAddress = (unsigned char*) & ring_buffer;
  7003  001396  0E00               	movlw	low _ring_buffer
  7004  001398  0100               	movlb	0	; () banked
  7005  00139A  6FE5               	movwf	_sendStructAddress& (0+255),b
  7006  00139C  0E01               	movlw	high _ring_buffer
  7007  00139E  0100               	movlb	0	; () banked
  7008  0013A0  6FE6               	movwf	(_sendStructAddress+1)& (0+255),b
  7009                           
  7010                           ; BSR set to: 0
  7011                           ;FastTransfer.c: 82: AKNAKsend = error;
  7012  0013A2  C0CC  F0E9         	movff	begin@error,_AKNAKsend
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;FastTransfer.c: 83: alignErrorCounter = 0;
  7016  0013A6  0E00               	movlw	0
  7017  0013A8  0100               	movlb	0	; () banked
  7018  0013AA  6F8A               	movwf	(_alignErrorCounter+1)& (0+255),b
  7019  0013AC  0E00               	movlw	0
  7020  0013AE  6F89               	movwf	_alignErrorCounter& (0+255),b
  7021                           
  7022                           ; BSR set to: 0
  7023  0013B0  0012               	return		;funcret
  7024  0013B2                     __end_of_begin:
  7025                           	opt stack 0
  7026                           tosu	equ	0xFFF
  7027                           tosh	equ	0xFFE
  7028                           tosl	equ	0xFFD
  7029                           pclath	equ	0xFFA
  7030                           tblptru	equ	0xFF8
  7031                           tblptrh	equ	0xFF7
  7032                           tblptrl	equ	0xFF6
  7033                           tablat	equ	0xFF5
  7034                           prodh	equ	0xFF4
  7035                           prodl	equ	0xFF3
  7036                           intcon	equ	0xFF2
  7037                           intcon2	equ	0xFF1
  7038                           postinc0	equ	0xFEE
  7039                           wreg	equ	0xFE8
  7040                           postdec1	equ	0xFE5
  7041                           fsr1h	equ	0xFE2
  7042                           fsr1l	equ	0xFE1
  7043                           indf2	equ	0xFDF
  7044                           postinc2	equ	0xFDE
  7045                           postdec2	equ	0xFDD
  7046                           plusw2	equ	0xFDB
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function ___awdiv *****************
  7052 ;; Defined at:
  7053 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  dividend        2   26[COMRAM] int 
  7056 ;;  divisor         2   28[COMRAM] int 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  quotient        2   32[COMRAM] int 
  7059 ;;  sign            1   31[COMRAM] unsigned char 
  7060 ;;  counter         1   30[COMRAM] unsigned char 
  7061 ;; Return value:  Size  Location     Type
  7062 ;;                  2   26[COMRAM] int 
  7063 ;; Registers used:
  7064 ;;		wreg, status,2, status,0
  7065 ;; Tracked objects:
  7066 ;;		On entry : 0/0
  7067 ;;		On exit  : 0/0
  7068 ;;		Unchanged: 0/0
  7069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7070 ;;      Params:         4       0       0       0       0       0       0
  7071 ;;      Locals:         4       0       0       0       0       0       0
  7072 ;;      Temps:          0       0       0       0       0       0       0
  7073 ;;      Totals:         8       0       0       0       0       0       0
  7074 ;;Total ram usage:        8 bytes
  7075 ;; Hardware stack levels used:    1
  7076 ;; Hardware stack levels required when called:    4
  7077 ;; This function calls:
  7078 ;;		Nothing
  7079 ;; This function is called by:
  7080 ;;		_begin
  7081 ;; This function uses a non-reentrant model
  7082 ;;
  7083                           
  7084                           	psect	text38
  7085  00118E                     __ptext38:
  7086                           	opt stack 0
  7087  00118E                     ___awdiv:
  7088                           	opt stack 23
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;incstack = 0
  7092  00118E  0E00               	movlw	0
  7093  001190  6E20               	movwf	___awdiv@sign,c
  7094  001192  AE1E               	btfss	___awdiv@divisor+1,7,c
  7095  001194  D006               	goto	l2791
  7096  001196  6C1D               	negf	___awdiv@divisor,c
  7097  001198  1E1E               	comf	___awdiv@divisor+1,f,c
  7098  00119A  B0D8               	btfsc	status,0,c
  7099  00119C  2A1E               	incf	___awdiv@divisor+1,f,c
  7100  00119E  0E01               	movlw	1
  7101  0011A0  6E20               	movwf	___awdiv@sign,c
  7102  0011A2                     l2791:
  7103  0011A2  AE1C               	btfss	___awdiv@dividend+1,7,c
  7104  0011A4  D006               	goto	l2797
  7105  0011A6  6C1B               	negf	___awdiv@dividend,c
  7106  0011A8  1E1C               	comf	___awdiv@dividend+1,f,c
  7107  0011AA  B0D8               	btfsc	status,0,c
  7108  0011AC  2A1C               	incf	___awdiv@dividend+1,f,c
  7109  0011AE  0E01               	movlw	1
  7110  0011B0  1A20               	xorwf	___awdiv@sign,f,c
  7111  0011B2                     l2797:
  7112  0011B2  0E00               	movlw	0
  7113  0011B4  6E22               	movwf	___awdiv@quotient+1,c
  7114  0011B6  0E00               	movlw	0
  7115  0011B8  6E21               	movwf	___awdiv@quotient,c
  7116  0011BA  501D               	movf	___awdiv@divisor,w,c
  7117  0011BC  101E               	iorwf	___awdiv@divisor+1,w,c
  7118  0011BE  B4D8               	btfsc	status,2,c
  7119  0011C0  D01C               	goto	l2819
  7120  0011C2  0E01               	movlw	1
  7121  0011C4  6E1F               	movwf	___awdiv@counter,c
  7122  0011C6  D004               	goto	l2805
  7123  0011C8                     l2803:
  7124  0011C8  90D8               	bcf	status,0,c
  7125  0011CA  361D               	rlcf	___awdiv@divisor,f,c
  7126  0011CC  361E               	rlcf	___awdiv@divisor+1,f,c
  7127  0011CE  2A1F               	incf	___awdiv@counter,f,c
  7128  0011D0                     l2805:
  7129  0011D0  AE1E               	btfss	___awdiv@divisor+1,7,c
  7130  0011D2  D7FA               	goto	l2803
  7131  0011D4                     l2807:
  7132  0011D4  90D8               	bcf	status,0,c
  7133  0011D6  3621               	rlcf	___awdiv@quotient,f,c
  7134  0011D8  3622               	rlcf	___awdiv@quotient+1,f,c
  7135  0011DA  501D               	movf	___awdiv@divisor,w,c
  7136  0011DC  5C1B               	subwf	___awdiv@dividend,w,c
  7137  0011DE  501E               	movf	___awdiv@divisor+1,w,c
  7138  0011E0  581C               	subwfb	___awdiv@dividend+1,w,c
  7139  0011E2  A0D8               	btfss	status,0,c
  7140  0011E4  D005               	goto	l2815
  7141  0011E6  501D               	movf	___awdiv@divisor,w,c
  7142  0011E8  5E1B               	subwf	___awdiv@dividend,f,c
  7143  0011EA  501E               	movf	___awdiv@divisor+1,w,c
  7144  0011EC  5A1C               	subwfb	___awdiv@dividend+1,f,c
  7145  0011EE  8021               	bsf	___awdiv@quotient,0,c
  7146  0011F0                     l2815:
  7147  0011F0  90D8               	bcf	status,0,c
  7148  0011F2  321E               	rrcf	___awdiv@divisor+1,f,c
  7149  0011F4  321D               	rrcf	___awdiv@divisor,f,c
  7150  0011F6  2E1F               	decfsz	___awdiv@counter,f,c
  7151  0011F8  D7ED               	goto	l2807
  7152  0011FA                     l2819:
  7153  0011FA  5020               	movf	___awdiv@sign,w,c
  7154  0011FC  B4D8               	btfsc	status,2,c
  7155  0011FE  D004               	goto	l2823
  7156  001200  6C21               	negf	___awdiv@quotient,c
  7157  001202  1E22               	comf	___awdiv@quotient+1,f,c
  7158  001204  B0D8               	btfsc	status,0,c
  7159  001206  2A22               	incf	___awdiv@quotient+1,f,c
  7160  001208                     l2823:
  7161  001208  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  7162  00120C  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  7163  001210  0012               	return	
  7164  001212                     __end_of___awdiv:
  7165                           	opt stack 0
  7166                           tosu	equ	0xFFF
  7167                           tosh	equ	0xFFE
  7168                           tosl	equ	0xFFD
  7169                           pclath	equ	0xFFA
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           intcon	equ	0xFF2
  7177                           intcon2	equ	0xFF1
  7178                           postinc0	equ	0xFEE
  7179                           wreg	equ	0xFE8
  7180                           postdec1	equ	0xFE5
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           plusw2	equ	0xFDB
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function _EUSART1_Initialize *****************
  7192 ;; Defined at:
  7193 ;;		line 23 in file "UART.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;		None
  7196 ;; Auto vars:     Size  Location     Type
  7197 ;;		None
  7198 ;; Return value:  Size  Location     Type
  7199 ;;                  1    wreg      void 
  7200 ;; Registers used:
  7201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7202 ;; Tracked objects:
  7203 ;;		On entry : 0/0
  7204 ;;		On exit  : 0/0
  7205 ;;		Unchanged: 0/0
  7206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7207 ;;      Params:         0       0       0       0       0       0       0
  7208 ;;      Locals:         0       0       0       0       0       0       0
  7209 ;;      Temps:          0       0       0       0       0       0       0
  7210 ;;      Totals:         0       0       0       0       0       0       0
  7211 ;;Total ram usage:        0 bytes
  7212 ;; Hardware stack levels used:    1
  7213 ;; Hardware stack levels required when called:    6
  7214 ;; This function calls:
  7215 ;;		_UART_buff_init
  7216 ;; This function is called by:
  7217 ;;		_CommsStart
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text39
  7222  00153A                     __ptext39:
  7223                           	opt stack 0
  7224  00153A                     _EUSART1_Initialize:
  7225                           	opt stack 22
  7226                           
  7227                           ;UART.c: 25: PIE3bits.RC2IE = 0;
  7228                           
  7229                           ;incstack = 0
  7230  00153A  9AA3               	bcf	4003,5,c	;volatile
  7231                           
  7232                           ;UART.c: 26: PIE3bits.TX2IE = 0;
  7233  00153C  98A3               	bcf	4003,4,c	;volatile
  7234                           
  7235                           ;UART.c: 31: BAUD2CON = 0x48;
  7236  00153E  0E48               	movlw	72
  7237  001540  6E70               	movwf	3952,c	;volatile
  7238                           
  7239                           ;UART.c: 34: RC2STA = 0x98;
  7240  001542  0E98               	movlw	152
  7241  001544  6E71               	movwf	3953,c	;volatile
  7242                           
  7243                           ;UART.c: 37: TX2STA = 0x26;
  7244  001546  0E26               	movlw	38
  7245  001548  6E72               	movwf	3954,c	;volatile
  7246                           
  7247                           ;UART.c: 40: SPBRG2 = (((16000000/38400)/4)-1);
  7248  00154A  0E67               	movlw	103
  7249  00154C  6E75               	movwf	3957,c	;volatile
  7250                           
  7251                           ;UART.c: 43: SPBRGH2 = 0x00;
  7252  00154E  0E00               	movlw	0
  7253  001550  6E76               	movwf	3958,c	;volatile
  7254                           
  7255                           ;UART.c: 46: TXREG2 = 0x00;
  7256  001552  0E00               	movlw	0
  7257  001554  6E73               	movwf	3955,c	;volatile
  7258                           
  7259                           ;UART.c: 49: RCREG2 = 0x00;
  7260  001556  0E00               	movlw	0
  7261  001558  6E74               	movwf	3956,c	;volatile
  7262                           
  7263                           ;UART.c: 51: UART_buff_init(&input_buffer);
  7264  00155A  0E00               	movlw	low _input_buffer
  7265  00155C  6E23               	movwf	UART_buff_init@_this,c
  7266  00155E  0E03               	movlw	high _input_buffer
  7267  001560  6E24               	movwf	UART_buff_init@_this+1,c
  7268  001562  EC1B  F00C         	call	_UART_buff_init	;wreg free
  7269                           
  7270                           ;UART.c: 52: UART_buff_init(&output_buffer);
  7271  001566  0E00               	movlw	low _output_buffer
  7272  001568  6E23               	movwf	UART_buff_init@_this,c
  7273  00156A  0E04               	movlw	high _output_buffer
  7274  00156C  6E24               	movwf	UART_buff_init@_this+1,c
  7275  00156E  EC1B  F00C         	call	_UART_buff_init	;wreg free
  7276                           
  7277                           ;UART.c: 54: PIE3bits.RC2IE = 1;
  7278  001572  8AA3               	bsf	4003,5,c	;volatile
  7279  001574  0012               	return		;funcret
  7280  001576                     __end_of_EUSART1_Initialize:
  7281                           	opt stack 0
  7282                           tosu	equ	0xFFF
  7283                           tosh	equ	0xFFE
  7284                           tosl	equ	0xFFD
  7285                           pclath	equ	0xFFA
  7286                           tblptru	equ	0xFF8
  7287                           tblptrh	equ	0xFF7
  7288                           tblptrl	equ	0xFF6
  7289                           tablat	equ	0xFF5
  7290                           prodh	equ	0xFF4
  7291                           prodl	equ	0xFF3
  7292                           intcon	equ	0xFF2
  7293                           intcon2	equ	0xFF1
  7294                           postinc0	equ	0xFEE
  7295                           wreg	equ	0xFE8
  7296                           postdec1	equ	0xFE5
  7297                           fsr1h	equ	0xFE2
  7298                           fsr1l	equ	0xFE1
  7299                           indf2	equ	0xFDF
  7300                           postinc2	equ	0xFDE
  7301                           postdec2	equ	0xFDD
  7302                           plusw2	equ	0xFDB
  7303                           fsr2h	equ	0xFDA
  7304                           fsr2l	equ	0xFD9
  7305                           status	equ	0xFD8
  7306                           
  7307 ;; *************** function _UART_buff_init *****************
  7308 ;; Defined at:
  7309 ;;		line 58 in file "UART.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  7312 ;;		 -> output_buffer(206), input_buffer(206), 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7324 ;;      Params:         2       0       0       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0
  7327 ;;      Totals:         2       0       0       0       0       0       0
  7328 ;;Total ram usage:        2 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    5
  7331 ;; This function calls:
  7332 ;;		_memset
  7333 ;; This function is called by:
  7334 ;;		_EUSART1_Initialize
  7335 ;; This function uses a non-reentrant model
  7336 ;;
  7337                           
  7338                           	psect	text40
  7339  001836                     __ptext40:
  7340                           	opt stack 0
  7341  001836                     _UART_buff_init:
  7342                           	opt stack 22
  7343                           
  7344                           ;UART.c: 67: memset(_this, 0, sizeof (*_this));
  7345                           
  7346                           ;incstack = 0
  7347  001836  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  7348  00183A  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  7349  00183E  0E00               	movlw	0
  7350  001840  6E1E               	movwf	memset@c+1,c
  7351  001842  0E00               	movlw	0
  7352  001844  6E1D               	movwf	memset@c,c
  7353  001846  0E00               	movlw	0
  7354  001848  6E20               	movwf	memset@n+1,c
  7355  00184A  0ECE               	movlw	206
  7356  00184C  6E1F               	movwf	memset@n,c
  7357  00184E  EC80  F00B         	call	_memset	;wreg free
  7358  001852  0012               	return		;funcret
  7359  001854                     __end_of_UART_buff_init:
  7360                           	opt stack 0
  7361                           tosu	equ	0xFFF
  7362                           tosh	equ	0xFFE
  7363                           tosl	equ	0xFFD
  7364                           pclath	equ	0xFFA
  7365                           tblptru	equ	0xFF8
  7366                           tblptrh	equ	0xFF7
  7367                           tblptrl	equ	0xFF6
  7368                           tablat	equ	0xFF5
  7369                           prodh	equ	0xFF4
  7370                           prodl	equ	0xFF3
  7371                           intcon	equ	0xFF2
  7372                           intcon2	equ	0xFF1
  7373                           postinc0	equ	0xFEE
  7374                           wreg	equ	0xFE8
  7375                           postdec1	equ	0xFE5
  7376                           fsr1h	equ	0xFE2
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           plusw2	equ	0xFDB
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function _memset *****************
  7387 ;; Defined at:
  7388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;  p1              2   26[COMRAM] PTR void 
  7391 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7392 ;;  c               2   28[COMRAM] int 
  7393 ;;  n               2   30[COMRAM] unsigned int 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  p               2   32[COMRAM] PTR unsigned char 
  7396 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  2   26[COMRAM] PTR void 
  7399 ;; Registers used:
  7400 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7406 ;;      Params:         6       0       0       0       0       0       0
  7407 ;;      Locals:         2       0       0       0       0       0       0
  7408 ;;      Temps:          0       0       0       0       0       0       0
  7409 ;;      Totals:         8       0       0       0       0       0       0
  7410 ;;Total ram usage:        8 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    4
  7413 ;; This function calls:
  7414 ;;		Nothing
  7415 ;; This function is called by:
  7416 ;;		_FastTransfer_buffer_flush
  7417 ;;		_UART_buff_init
  7418 ;;		_UART_buff_flush
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           	psect	text41
  7423  001700                     __ptext41:
  7424                           	opt stack 0
  7425  001700                     _memset:
  7426                           	opt stack 22
  7427                           
  7428                           ;incstack = 0
  7429  001700  C01B  F021         	movff	memset@p1,memset@p
  7430  001704  C01C  F022         	movff	memset@p1+1,memset@p+1
  7431  001708  D008               	goto	l3831
  7432  00170A                     l3827:
  7433  00170A  C021  FFD9         	movff	memset@p,fsr2l
  7434  00170E  C022  FFDA         	movff	memset@p+1,fsr2h
  7435  001712  C01D  FFDF         	movff	memset@c,indf2
  7436  001716  4A21               	infsnz	memset@p,f,c
  7437  001718  2A22               	incf	memset@p+1,f,c
  7438  00171A                     l3831:
  7439  00171A  061F               	decf	memset@n,f,c
  7440  00171C  A0D8               	btfss	status,0,c
  7441  00171E  0620               	decf	memset@n+1,f,c
  7442  001720  281F               	incf	memset@n,w,c
  7443  001722  E1F3               	bnz	l3827
  7444  001724  2820               	incf	memset@n+1,w,c
  7445  001726  B4D8               	btfsc	status,2,c
  7446  001728  0012               	return	
  7447  00172A  D7EF               	goto	l3827
  7448  00172C                     __end_of_memset:
  7449                           	opt stack 0
  7450                           tosu	equ	0xFFF
  7451                           tosh	equ	0xFFE
  7452                           tosl	equ	0xFFD
  7453                           pclath	equ	0xFFA
  7454                           tblptru	equ	0xFF8
  7455                           tblptrh	equ	0xFF7
  7456                           tblptrl	equ	0xFF6
  7457                           tablat	equ	0xFF5
  7458                           prodh	equ	0xFF4
  7459                           prodl	equ	0xFF3
  7460                           intcon	equ	0xFF2
  7461                           intcon2	equ	0xFF1
  7462                           postinc0	equ	0xFEE
  7463                           wreg	equ	0xFE8
  7464                           postdec1	equ	0xFE5
  7465                           fsr1h	equ	0xFE2
  7466                           fsr1l	equ	0xFE1
  7467                           indf2	equ	0xFDF
  7468                           postinc2	equ	0xFDE
  7469                           postdec2	equ	0xFDD
  7470                           plusw2	equ	0xFDB
  7471                           fsr2h	equ	0xFDA
  7472                           fsr2l	equ	0xFD9
  7473                           status	equ	0xFD8
  7474                           
  7475 ;; *************** function _INTERRUPT_InterruptManager *****************
  7476 ;; Defined at:
  7477 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;		None
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  1    wreg      void 
  7484 ;; Registers used:
  7485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : 0/0
  7488 ;;		On exit  : 0/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7491 ;;      Params:         0       0       0       0       0       0       0
  7492 ;;      Locals:         0       0       0       0       0       0       0
  7493 ;;      Temps:         14       0       0       0       0       0       0
  7494 ;;      Totals:        14       0       0       0       0       0       0
  7495 ;;Total ram usage:       14 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:    3
  7498 ;; This function calls:
  7499 ;;		_EUSART1_Receive_ISR
  7500 ;;		_EUSART1_Transmit_ISR
  7501 ;;		_EUSART2_Receive_ISR
  7502 ;;		_EUSART2_Transmit_ISR
  7503 ;;		_TMR0_ISR
  7504 ;; This function is called by:
  7505 ;;		Interrupt level 2
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           	psect	intcode
  7510  000008                     __pintcode:
  7511                           	opt stack 0
  7512  000008                     _INTERRUPT_InterruptManager:
  7513                           	opt stack 20
  7514                           
  7515                           ;incstack = 0
  7516  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7517  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7518  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7519  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7520  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7521  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7522  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7523  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7524  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7525  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7526  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7527  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7528  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7529  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7530  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7531                           
  7532                           ;interrupt_manager.c: 70: if (PIE3bits.RC2IE == 1 && PIR3bits.RC2IF == 1) {
  7533  000042  BAA3               	btfsc	4003,5,c	;volatile
  7534  000044  AAA4               	btfss	4004,5,c	;volatile
  7535  000046  D003               	goto	i2l160
  7536                           
  7537                           ;interrupt_manager.c: 71: EUSART2_Receive_ISR();
  7538  000048  EC2A  F00C         	call	_EUSART2_Receive_ISR	;wreg free
  7539                           
  7540                           ;interrupt_manager.c: 72: } else if (PIE3bits.TX2IE == 1 && PIR3bits.TX2IF == 1) {
  7541  00004C  D017               	goto	i2l170
  7542  00004E                     i2l160:
  7543  00004E  B8A3               	btfsc	4003,4,c	;volatile
  7544  000050  A8A4               	btfss	4004,4,c	;volatile
  7545  000052  D003               	goto	i2l162
  7546                           
  7547                           ;interrupt_manager.c: 73: EUSART2_Transmit_ISR();
  7548  000054  EC0B  F00B         	call	_EUSART2_Transmit_ISR	;wreg free
  7549                           
  7550                           ;interrupt_manager.c: 74: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  7551  000058  D011               	goto	i2l170
  7552  00005A                     i2l162:
  7553  00005A  BA9D               	btfsc	3997,5,c	;volatile
  7554  00005C  AA9E               	btfss	3998,5,c	;volatile
  7555  00005E  D003               	goto	i2l164
  7556                           
  7557                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  7558  000060  EC96  F00B         	call	_EUSART1_Receive_ISR	;wreg free
  7559                           
  7560                           ;interrupt_manager.c: 76: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  7561  000064  D00B               	goto	i2l170
  7562  000066                     i2l164:
  7563  000066  B89D               	btfsc	3997,4,c	;volatile
  7564  000068  A89E               	btfss	3998,4,c	;volatile
  7565  00006A  D003               	goto	i2l166
  7566                           
  7567                           ;interrupt_manager.c: 77: EUSART1_Transmit_ISR();
  7568  00006C  EC53  F00B         	call	_EUSART1_Transmit_ISR	;wreg free
  7569                           
  7570                           ;interrupt_manager.c: 78: } else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1) {
  7571  000070  D005               	goto	i2l170
  7572  000072                     i2l166:
  7573  000072  BAF2               	btfsc	intcon,5,c	;volatile
  7574  000074  A4F2               	btfss	intcon,2,c	;volatile
  7575  000076  D002               	goto	i2l170
  7576                           
  7577                           ;interrupt_manager.c: 79: TMR0_ISR();
  7578  000078  EC46  F00C         	call	_TMR0_ISR	;wreg free
  7579  00007C                     i2l170:
  7580  00007C  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7581  000080  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7582  000084  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7583  000088  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7584  00008C  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7585  000090  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7586  000094  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7587  000098  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7588  00009C  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7589  0000A0  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7590  0000A4  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7591  0000A8  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7592  0000AC  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7593  0000B0  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7594  0000B4  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  7595  0000B6  0011               	retfie		f
  7596  0000B8                     __end_of_INTERRUPT_InterruptManager:
  7597                           	opt stack 0
  7598                           tosu	equ	0xFFF
  7599                           tosh	equ	0xFFE
  7600                           tosl	equ	0xFFD
  7601                           pclatu	equ	0xFFB
  7602                           pclath	equ	0xFFA
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           prodh	equ	0xFF4
  7608                           prodl	equ	0xFF3
  7609                           intcon	equ	0xFF2
  7610                           intcon2	equ	0xFF1
  7611                           postinc0	equ	0xFEE
  7612                           fsr0h	equ	0xFEA
  7613                           fsr0l	equ	0xFE9
  7614                           wreg	equ	0xFE8
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           plusw2	equ	0xFDB
  7622                           fsr2h	equ	0xFDA
  7623                           fsr2l	equ	0xFD9
  7624                           status	equ	0xFD8
  7625                           
  7626 ;; *************** function _TMR0_ISR *****************
  7627 ;; Defined at:
  7628 ;;		line 134 in file "mcc_generated_files/tmr0.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;		None
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;		None
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  2  154[None  ] int 
  7635 ;; Registers used:
  7636 ;;		wreg, status,2, status,0
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7642 ;;      Params:         0       0       0       0       0       0       0
  7643 ;;      Locals:         0       0       0       0       0       0       0
  7644 ;;      Temps:          0       0       0       0       0       0       0
  7645 ;;      Totals:         0       0       0       0       0       0       0
  7646 ;;Total ram usage:        0 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_INTERRUPT_InterruptManager
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text43
  7656  00188C                     __ptext43:
  7657                           	opt stack 0
  7658  00188C                     _TMR0_ISR:
  7659                           	opt stack 22
  7660                           
  7661                           ;tmr0.c: 138: TMR0H = timer0ReloadVal16bit >> 8;
  7662                           
  7663                           ;incstack = 0
  7664  00188C  5041               	movf	_timer0ReloadVal16bit+1,w,c
  7665  00188E  6ED7               	movwf	4055,c	;volatile
  7666                           
  7667                           ;tmr0.c: 139: TMR0L = (uint8_t) timer0ReloadVal16bit;
  7668  001890  C040  FFD6         	movff	_timer0ReloadVal16bit,4054	;volatile
  7669                           
  7670                           ;tmr0.c: 141: time++;
  7671  001894  0E01               	movlw	1
  7672  001896  2626               	addwf	_time,f,c
  7673  001898  0E00               	movlw	0
  7674  00189A  2227               	addwfc	_time+1,f,c
  7675  00189C  2228               	addwfc	_time+2,f,c
  7676  00189E  2229               	addwfc	_time+3,f,c
  7677                           
  7678                           ;tmr0.c: 144: INTCONbits.TMR0IF = 0;
  7679  0018A0  94F2               	bcf	intcon,2,c	;volatile
  7680  0018A2  0012               	return		;funcret
  7681  0018A4                     __end_of_TMR0_ISR:
  7682                           	opt stack 0
  7683                           tosu	equ	0xFFF
  7684                           tosh	equ	0xFFE
  7685                           tosl	equ	0xFFD
  7686                           pclatu	equ	0xFFB
  7687                           pclath	equ	0xFFA
  7688                           tblptru	equ	0xFF8
  7689                           tblptrh	equ	0xFF7
  7690                           tblptrl	equ	0xFF6
  7691                           tablat	equ	0xFF5
  7692                           prodh	equ	0xFF4
  7693                           prodl	equ	0xFF3
  7694                           intcon	equ	0xFF2
  7695                           intcon2	equ	0xFF1
  7696                           postinc0	equ	0xFEE
  7697                           fsr0h	equ	0xFEA
  7698                           fsr0l	equ	0xFE9
  7699                           wreg	equ	0xFE8
  7700                           postdec1	equ	0xFE5
  7701                           fsr1h	equ	0xFE2
  7702                           fsr1l	equ	0xFE1
  7703                           indf2	equ	0xFDF
  7704                           postinc2	equ	0xFDE
  7705                           postdec2	equ	0xFDD
  7706                           plusw2	equ	0xFDB
  7707                           fsr2h	equ	0xFDA
  7708                           fsr2l	equ	0xFD9
  7709                           status	equ	0xFD8
  7710                           
  7711 ;; *************** function _EUSART2_Transmit_ISR *****************
  7712 ;; Defined at:
  7713 ;;		line 152 in file "UART.c"
  7714 ;; Parameters:    Size  Location     Type
  7715 ;;		None
  7716 ;; Auto vars:     Size  Location     Type
  7717 ;;		None
  7718 ;; Return value:  Size  Location     Type
  7719 ;;                  1    wreg      void 
  7720 ;; Registers used:
  7721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7722 ;; Tracked objects:
  7723 ;;		On entry : 0/0
  7724 ;;		On exit  : 0/0
  7725 ;;		Unchanged: 0/0
  7726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7727 ;;      Params:         0       0       0       0       0       0       0
  7728 ;;      Locals:         0       0       0       0       0       0       0
  7729 ;;      Temps:          0       0       0       0       0       0       0
  7730 ;;      Totals:         0       0       0       0       0       0       0
  7731 ;;Total ram usage:        0 bytes
  7732 ;; Hardware stack levels used:    1
  7733 ;; Hardware stack levels required when called:    2
  7734 ;; This function calls:
  7735 ;;		i2_UART_buff_get
  7736 ;;		i2_UART_buff_size
  7737 ;; This function is called by:
  7738 ;;		_INTERRUPT_InterruptManager
  7739 ;; This function uses a non-reentrant model
  7740 ;;
  7741                           
  7742                           	psect	text44
  7743  001616                     __ptext44:
  7744                           	opt stack 0
  7745  001616                     _EUSART2_Transmit_ISR:
  7746                           	opt stack 20
  7747                           
  7748                           ;UART.c: 154: if (UART_buff_size(&output_buffer) > 0) {
  7749                           
  7750                           ;incstack = 0
  7751  001616  0E00               	movlw	low _output_buffer
  7752  001618  6E01               	movwf	i2UART_buff_size@_this,c
  7753  00161A  0E04               	movlw	high _output_buffer
  7754  00161C  6E02               	movwf	i2UART_buff_size@_this+1,c
  7755  00161E  EC73  F00C         	call	i2_UART_buff_size	;wreg free
  7756  001622  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7757  001624  D00D               	goto	i2l3259
  7758  001626  5002               	movf	?i2_UART_buff_size+1,w,c
  7759  001628  E103               	bnz	i2u276_40
  7760  00162A  0401               	decf	?i2_UART_buff_size,w,c
  7761  00162C  A0D8               	btfss	status,0,c
  7762  00162E  D008               	goto	i2l3259
  7763  001630                     i2u276_40:
  7764                           
  7765                           ;UART.c: 155: TXREG2 = UART_buff_get(&output_buffer);
  7766  001630  0E00               	movlw	low _output_buffer
  7767  001632  6E07               	movwf	i2UART_buff_get@_this,c
  7768  001634  0E04               	movlw	high _output_buffer
  7769  001636  6E08               	movwf	i2UART_buff_get@_this+1,c
  7770  001638  EC7E  F008         	call	i2_UART_buff_get	;wreg free
  7771  00163C  6E73               	movwf	3955,c	;volatile
  7772                           
  7773                           ;UART.c: 156: } else {
  7774  00163E  0012               	return	
  7775  001640                     i2l3259:
  7776                           
  7777                           ;UART.c: 157: Transmit_stall = 1;
  7778  001640  0E01               	movlw	1
  7779  001642  6E44               	movwf	_Transmit_stall,c
  7780                           
  7781                           ;UART.c: 158: PIE3bits.TX2IE = 0;
  7782  001644  98A3               	bcf	4003,4,c	;volatile
  7783  001646  0012               	return	
  7784  001648                     __end_of_EUSART2_Transmit_ISR:
  7785                           	opt stack 0
  7786                           tosu	equ	0xFFF
  7787                           tosh	equ	0xFFE
  7788                           tosl	equ	0xFFD
  7789                           pclatu	equ	0xFFB
  7790                           pclath	equ	0xFFA
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           intcon2	equ	0xFF1
  7799                           postinc0	equ	0xFEE
  7800                           fsr0h	equ	0xFEA
  7801                           fsr0l	equ	0xFE9
  7802                           wreg	equ	0xFE8
  7803                           postdec1	equ	0xFE5
  7804                           fsr1h	equ	0xFE2
  7805                           fsr1l	equ	0xFE1
  7806                           indf2	equ	0xFDF
  7807                           postinc2	equ	0xFDE
  7808                           postdec2	equ	0xFDD
  7809                           plusw2	equ	0xFDB
  7810                           fsr2h	equ	0xFDA
  7811                           fsr2l	equ	0xFD9
  7812                           status	equ	0xFD8
  7813                           
  7814 ;; *************** function i2_UART_buff_size *****************
  7815 ;; Defined at:
  7816 ;;		line 104 in file "UART.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7819 ;;		 -> output_buffer(206), input_buffer(206), 
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;		None
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  2    0[COMRAM] int 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7831 ;;      Params:         2       0       0       0       0       0       0
  7832 ;;      Locals:         0       0       0       0       0       0       0
  7833 ;;      Temps:          0       0       0       0       0       0       0
  7834 ;;      Totals:         2       0       0       0       0       0       0
  7835 ;;Total ram usage:        2 bytes
  7836 ;; Hardware stack levels used:    1
  7837 ;; This function calls:
  7838 ;;		Nothing
  7839 ;; This function is called by:
  7840 ;;		_EUSART2_Transmit_ISR
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           	psect	text45
  7845  0018E6                     __ptext45:
  7846                           	opt stack 0
  7847  0018E6                     i2_UART_buff_size:
  7848                           	opt stack 21
  7849                           
  7850                           ;UART.c: 105: return (_this->count);
  7851                           
  7852                           ;incstack = 0
  7853  0018E6  EE20 F0CC          	lfsr	2,204
  7854  0018EA  5001               	movf	i2UART_buff_size@_this,w,c
  7855  0018EC  26D9               	addwf	fsr2l,f,c
  7856  0018EE  5002               	movf	i2UART_buff_size@_this+1,w,c
  7857  0018F0  22DA               	addwfc	fsr2h,f,c
  7858  0018F2  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7859  0018F6  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7860  0018FA  0012               	return	
  7861  0018FC                     __end_ofi2_UART_buff_size:
  7862                           	opt stack 0
  7863                           tosu	equ	0xFFF
  7864                           tosh	equ	0xFFE
  7865                           tosl	equ	0xFFD
  7866                           pclatu	equ	0xFFB
  7867                           pclath	equ	0xFFA
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodh	equ	0xFF4
  7873                           prodl	equ	0xFF3
  7874                           intcon	equ	0xFF2
  7875                           intcon2	equ	0xFF1
  7876                           postinc0	equ	0xFEE
  7877                           fsr0h	equ	0xFEA
  7878                           fsr0l	equ	0xFE9
  7879                           wreg	equ	0xFE8
  7880                           postdec1	equ	0xFE5
  7881                           fsr1h	equ	0xFE2
  7882                           fsr1l	equ	0xFE1
  7883                           indf2	equ	0xFDF
  7884                           postinc2	equ	0xFDE
  7885                           postdec2	equ	0xFDD
  7886                           plusw2	equ	0xFDB
  7887                           fsr2h	equ	0xFDA
  7888                           fsr2l	equ	0xFD9
  7889                           status	equ	0xFD8
  7890                           
  7891 ;; *************** function i2_UART_buff_get *****************
  7892 ;; Defined at:
  7893 ;;		line 83 in file "UART.c"
  7894 ;; Parameters:    Size  Location     Type
  7895 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7896 ;;		 -> output_buffer(206), input_buffer(206), 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7899 ;; Return value:  Size  Location     Type
  7900 ;;                  1    wreg      unsigned char 
  7901 ;; Registers used:
  7902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7903 ;; Tracked objects:
  7904 ;;		On entry : 0/0
  7905 ;;		On exit  : 0/0
  7906 ;;		Unchanged: 0/0
  7907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7908 ;;      Params:         2       0       0       0       0       0       0
  7909 ;;      Locals:         1       0       0       0       0       0       0
  7910 ;;      Temps:          2       0       0       0       0       0       0
  7911 ;;      Totals:         5       0       0       0       0       0       0
  7912 ;;Total ram usage:        5 bytes
  7913 ;; Hardware stack levels used:    1
  7914 ;; Hardware stack levels required when called:    1
  7915 ;; This function calls:
  7916 ;;		i2_UART_buff_modulo_inc
  7917 ;; This function is called by:
  7918 ;;		_EUSART2_Transmit_ISR
  7919 ;; This function uses a non-reentrant model
  7920 ;;
  7921                           
  7922                           	psect	text46
  7923  0010FC                     __ptext46:
  7924                           	opt stack 0
  7925  0010FC                     i2_UART_buff_get:
  7926                           	opt stack 20
  7927                           
  7928                           ;UART.c: 84: unsigned char c;
  7929                           ;UART.c: 85: if (_this->count > 0) {
  7930                           
  7931                           ;incstack = 0
  7932  0010FC  EE20 F0CC          	lfsr	2,204
  7933  001100  5007               	movf	i2UART_buff_get@_this,w,c
  7934  001102  26D9               	addwf	fsr2l,f,c
  7935  001104  5008               	movf	i2UART_buff_get@_this+1,w,c
  7936  001106  22DA               	addwfc	fsr2h,f,c
  7937  001108  0E01               	movlw	1
  7938  00110A  BEDB               	btfsc	plusw2,7,c
  7939  00110C  D03C               	goto	i2l3195
  7940  00110E  0E01               	movlw	1
  7941  001110  50DB               	movf	plusw2,w,c
  7942  001112  E103               	bnz	i2u268_40
  7943  001114  04DE               	decf	postinc2,w,c
  7944  001116  A0D8               	btfss	status,0,c
  7945  001118  D036               	goto	i2l3195
  7946  00111A                     i2u268_40:
  7947                           
  7948                           ;UART.c: 86: c = _this->buf[_this->tail];
  7949  00111A  EE20 F0CA          	lfsr	2,202
  7950  00111E  5007               	movf	i2UART_buff_get@_this,w,c
  7951  001120  26D9               	addwf	fsr2l,f,c
  7952  001122  5008               	movf	i2UART_buff_get@_this+1,w,c
  7953  001124  22DA               	addwfc	fsr2h,f,c
  7954  001126  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7955  00112A  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7956  00112E  5009               	movf	??i2_UART_buff_get,w,c
  7957  001130  2407               	addwf	i2UART_buff_get@_this,w,c
  7958  001132  6ED9               	movwf	fsr2l,c
  7959  001134  500A               	movf	??i2_UART_buff_get+1,w,c
  7960  001136  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7961  001138  6EDA               	movwf	fsr2h,c
  7962  00113A  50DF               	movf	indf2,w,c
  7963  00113C  6E0B               	movwf	i2UART_buff_get@c,c
  7964                           
  7965                           ;UART.c: 87: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7966  00113E  EE20 F0CA          	lfsr	2,202
  7967  001142  5007               	movf	i2UART_buff_get@_this,w,c
  7968  001144  26D9               	addwf	fsr2l,f,c
  7969  001146  5008               	movf	i2UART_buff_get@_this+1,w,c
  7970  001148  22DA               	addwfc	fsr2h,f,c
  7971  00114A  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7972  00114E  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7973  001152  0E00               	movlw	0
  7974  001154  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7975  001156  0EC8               	movlw	200
  7976  001158  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7977  00115A  ECD6  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  7978  00115E  EE20 F0CA          	lfsr	2,202
  7979  001162  5007               	movf	i2UART_buff_get@_this,w,c
  7980  001164  26D9               	addwf	fsr2l,f,c
  7981  001166  5008               	movf	i2UART_buff_get@_this+1,w,c
  7982  001168  22DA               	addwfc	fsr2h,f,c
  7983  00116A  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7984  00116E  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7985                           
  7986                           ;UART.c: 88: --_this->count;
  7987  001172  EE20 F0CC          	lfsr	2,204
  7988  001176  5007               	movf	i2UART_buff_get@_this,w,c
  7989  001178  26D9               	addwf	fsr2l,f,c
  7990  00117A  5008               	movf	i2UART_buff_get@_this+1,w,c
  7991  00117C  22DA               	addwfc	fsr2h,f,c
  7992  00117E  06DE               	decf	postinc2,f,c
  7993  001180  0E00               	movlw	0
  7994  001182  5ADD               	subwfb	postdec2,f,c
  7995                           
  7996                           ;UART.c: 89: } else {
  7997  001184  D002               	goto	i2l618
  7998  001186                     i2l3195:
  7999                           
  8000                           ;UART.c: 90: c = 0;
  8001  001186  0E00               	movlw	0
  8002  001188  6E0B               	movwf	i2UART_buff_get@c,c
  8003  00118A                     i2l618:
  8004                           
  8005                           ;UART.c: 91: }
  8006                           ;UART.c: 92: return (c);
  8007  00118A  500B               	movf	i2UART_buff_get@c,w,c
  8008  00118C  0012               	return	
  8009  00118E                     __end_ofi2_UART_buff_get:
  8010                           	opt stack 0
  8011                           tosu	equ	0xFFF
  8012                           tosh	equ	0xFFE
  8013                           tosl	equ	0xFFD
  8014                           pclatu	equ	0xFFB
  8015                           pclath	equ	0xFFA
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           postinc0	equ	0xFEE
  8025                           fsr0h	equ	0xFEA
  8026                           fsr0l	equ	0xFE9
  8027                           wreg	equ	0xFE8
  8028                           postdec1	equ	0xFE5
  8029                           fsr1h	equ	0xFE2
  8030                           fsr1l	equ	0xFE1
  8031                           indf2	equ	0xFDF
  8032                           postinc2	equ	0xFDE
  8033                           postdec2	equ	0xFDD
  8034                           plusw2	equ	0xFDB
  8035                           fsr2h	equ	0xFDA
  8036                           fsr2l	equ	0xFD9
  8037                           status	equ	0xFD8
  8038                           
  8039 ;; *************** function _EUSART2_Receive_ISR *****************
  8040 ;; Defined at:
  8041 ;;		line 141 in file "UART.c"
  8042 ;; Parameters:    Size  Location     Type
  8043 ;;		None
  8044 ;; Auto vars:     Size  Location     Type
  8045 ;;  data            1   11[COMRAM] unsigned char 
  8046 ;; Return value:  Size  Location     Type
  8047 ;;                  1    wreg      void 
  8048 ;; Registers used:
  8049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8050 ;; Tracked objects:
  8051 ;;		On entry : 0/0
  8052 ;;		On exit  : 0/0
  8053 ;;		Unchanged: 0/0
  8054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8055 ;;      Params:         0       0       0       0       0       0       0
  8056 ;;      Locals:         1       0       0       0       0       0       0
  8057 ;;      Temps:          0       0       0       0       0       0       0
  8058 ;;      Totals:         1       0       0       0       0       0       0
  8059 ;;Total ram usage:        1 bytes
  8060 ;; Hardware stack levels used:    1
  8061 ;; Hardware stack levels required when called:    2
  8062 ;; This function calls:
  8063 ;;		i2_UART_buff_put
  8064 ;; This function is called by:
  8065 ;;		_INTERRUPT_InterruptManager
  8066 ;; This function uses a non-reentrant model
  8067 ;;
  8068                           
  8069                           	psect	text47
  8070  001854                     __ptext47:
  8071                           	opt stack 0
  8072  001854                     _EUSART2_Receive_ISR:
  8073                           	opt stack 20
  8074                           
  8075                           ;UART.c: 142: if (1 == RC2STAbits.OERR) {
  8076                           
  8077                           ;incstack = 0
  8078  001854  A271               	btfss	3953,1,c	;volatile
  8079  001856  D002               	goto	i2l649
  8080                           
  8081                           ;UART.c: 145: RC2STAbits.CREN = 0;
  8082  001858  9871               	bcf	3953,4,c	;volatile
  8083                           
  8084                           ;UART.c: 146: RC2STAbits.CREN = 1;
  8085  00185A  8871               	bsf	3953,4,c	;volatile
  8086  00185C                     i2l649:
  8087                           
  8088                           ;UART.c: 147: }
  8089                           ;UART.c: 148: unsigned char data = RCREG2;
  8090  00185C  CF74 F00C          	movff	3956,EUSART2_Receive_ISR@data	;volatile
  8091                           
  8092                           ;UART.c: 149: UART_buff_put(&input_buffer, data);
  8093  001860  0E00               	movlw	low _input_buffer
  8094  001862  6E07               	movwf	i2UART_buff_put@_this,c
  8095  001864  0E03               	movlw	high _input_buffer
  8096  001866  6E08               	movwf	i2UART_buff_put@_this+1,c
  8097  001868  C00C  F009         	movff	EUSART2_Receive_ISR@data,i2UART_buff_put@c
  8098  00186C  EC58  F006         	call	i2_UART_buff_put	;wreg free
  8099  001870  0012               	return		;funcret
  8100  001872                     __end_of_EUSART2_Receive_ISR:
  8101                           	opt stack 0
  8102                           tosu	equ	0xFFF
  8103                           tosh	equ	0xFFE
  8104                           tosl	equ	0xFFD
  8105                           pclatu	equ	0xFFB
  8106                           pclath	equ	0xFFA
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           intcon	equ	0xFF2
  8114                           intcon2	equ	0xFF1
  8115                           postinc0	equ	0xFEE
  8116                           fsr0h	equ	0xFEA
  8117                           fsr0l	equ	0xFE9
  8118                           wreg	equ	0xFE8
  8119                           postdec1	equ	0xFE5
  8120                           fsr1h	equ	0xFE2
  8121                           fsr1l	equ	0xFE1
  8122                           indf2	equ	0xFDF
  8123                           postinc2	equ	0xFDE
  8124                           postdec2	equ	0xFDD
  8125                           plusw2	equ	0xFDB
  8126                           fsr2h	equ	0xFDA
  8127                           fsr2l	equ	0xFD9
  8128                           status	equ	0xFD8
  8129                           
  8130 ;; *************** function i2_UART_buff_put *****************
  8131 ;; Defined at:
  8132 ;;		line 70 in file "UART.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  8135 ;;		 -> output_buffer(206), input_buffer(206), 
  8136 ;;  c               1    8[COMRAM] const unsigned char 
  8137 ;; Auto vars:     Size  Location     Type
  8138 ;;		None
  8139 ;; Return value:  Size  Location     Type
  8140 ;;                  1    wreg      void 
  8141 ;; Registers used:
  8142 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8143 ;; Tracked objects:
  8144 ;;		On entry : 0/0
  8145 ;;		On exit  : 0/0
  8146 ;;		Unchanged: 0/0
  8147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8148 ;;      Params:         3       0       0       0       0       0       0
  8149 ;;      Locals:         0       0       0       0       0       0       0
  8150 ;;      Temps:          2       0       0       0       0       0       0
  8151 ;;      Totals:         5       0       0       0       0       0       0
  8152 ;;Total ram usage:        5 bytes
  8153 ;; Hardware stack levels used:    1
  8154 ;; Hardware stack levels required when called:    1
  8155 ;; This function calls:
  8156 ;;		i2_UART_buff_modulo_inc
  8157 ;; This function is called by:
  8158 ;;		_EUSART2_Receive_ISR
  8159 ;; This function uses a non-reentrant model
  8160 ;;
  8161                           
  8162                           	psect	text48
  8163  000CB0                     __ptext48:
  8164                           	opt stack 0
  8165  000CB0                     i2_UART_buff_put:
  8166                           	opt stack 20
  8167                           
  8168                           ;UART.c: 71: if (_this->count < 200) {
  8169                           
  8170                           ;incstack = 0
  8171  000CB0  EE20 F0CC          	lfsr	2,204
  8172  000CB4  5007               	movf	i2UART_buff_put@_this,w,c
  8173  000CB6  26D9               	addwf	fsr2l,f,c
  8174  000CB8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8175  000CBA  22DA               	addwfc	fsr2h,f,c
  8176  000CBC  0E01               	movlw	1
  8177  000CBE  BEDB               	btfsc	plusw2,7,c
  8178  000CC0  D007               	goto	i2l3175
  8179  000CC2  0E01               	movlw	1
  8180  000CC4  50DB               	movf	plusw2,w,c
  8181  000CC6  E13A               	bnz	i2l3181
  8182  000CC8  0EC8               	movlw	200
  8183  000CCA  5CDE               	subwf	postinc2,w,c
  8184  000CCC  B0D8               	btfsc	status,0,c
  8185  000CCE  D036               	goto	i2l3181
  8186  000CD0                     i2l3175:
  8187                           
  8188                           ;UART.c: 72: _this->buf[_this->head] = c;
  8189  000CD0  EE20 F0C8          	lfsr	2,200
  8190  000CD4  5007               	movf	i2UART_buff_put@_this,w,c
  8191  000CD6  26D9               	addwf	fsr2l,f,c
  8192  000CD8  5008               	movf	i2UART_buff_put@_this+1,w,c
  8193  000CDA  22DA               	addwfc	fsr2h,f,c
  8194  000CDC  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8195  000CE0  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8196  000CE4  500A               	movf	??i2_UART_buff_put,w,c
  8197  000CE6  2407               	addwf	i2UART_buff_put@_this,w,c
  8198  000CE8  6ED9               	movwf	fsr2l,c
  8199  000CEA  500B               	movf	??i2_UART_buff_put+1,w,c
  8200  000CEC  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8201  000CEE  6EDA               	movwf	fsr2h,c
  8202  000CF0  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8203                           
  8204                           ;UART.c: 73: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8205  000CF4  EE20 F0C8          	lfsr	2,200
  8206  000CF8  5007               	movf	i2UART_buff_put@_this,w,c
  8207  000CFA  26D9               	addwf	fsr2l,f,c
  8208  000CFC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8209  000CFE  22DA               	addwfc	fsr2h,f,c
  8210  000D00  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8211  000D04  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8212  000D08  0E00               	movlw	0
  8213  000D0A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8214  000D0C  0EC8               	movlw	200
  8215  000D0E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8216  000D10  ECD6  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8217  000D14  EE20 F0C8          	lfsr	2,200
  8218  000D18  5007               	movf	i2UART_buff_put@_this,w,c
  8219  000D1A  26D9               	addwf	fsr2l,f,c
  8220  000D1C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8221  000D1E  22DA               	addwfc	fsr2h,f,c
  8222  000D20  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8223  000D24  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8224                           
  8225                           ;UART.c: 74: ++_this->count;
  8226  000D28  EE20 F0CC          	lfsr	2,204
  8227  000D2C  5007               	movf	i2UART_buff_put@_this,w,c
  8228  000D2E  26D9               	addwf	fsr2l,f,c
  8229  000D30  5008               	movf	i2UART_buff_put@_this+1,w,c
  8230  000D32  22DA               	addwfc	fsr2h,f,c
  8231  000D34  2ADE               	incf	postinc2,f,c
  8232  000D36  0E00               	movlw	0
  8233  000D38  22DD               	addwfc	postdec2,f,c
  8234                           
  8235                           ;UART.c: 75: } else {
  8236  000D3A  0012               	return	
  8237  000D3C                     i2l3181:
  8238                           
  8239                           ;UART.c: 76: _this->buf[_this->head] = c;
  8240  000D3C  EE20 F0C8          	lfsr	2,200
  8241  000D40  5007               	movf	i2UART_buff_put@_this,w,c
  8242  000D42  26D9               	addwf	fsr2l,f,c
  8243  000D44  5008               	movf	i2UART_buff_put@_this+1,w,c
  8244  000D46  22DA               	addwfc	fsr2h,f,c
  8245  000D48  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8246  000D4C  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8247  000D50  500A               	movf	??i2_UART_buff_put,w,c
  8248  000D52  2407               	addwf	i2UART_buff_put@_this,w,c
  8249  000D54  6ED9               	movwf	fsr2l,c
  8250  000D56  500B               	movf	??i2_UART_buff_put+1,w,c
  8251  000D58  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8252  000D5A  6EDA               	movwf	fsr2h,c
  8253  000D5C  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8254                           
  8255                           ;UART.c: 77: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8256  000D60  EE20 F0C8          	lfsr	2,200
  8257  000D64  5007               	movf	i2UART_buff_put@_this,w,c
  8258  000D66  26D9               	addwf	fsr2l,f,c
  8259  000D68  5008               	movf	i2UART_buff_put@_this+1,w,c
  8260  000D6A  22DA               	addwfc	fsr2h,f,c
  8261  000D6C  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8262  000D70  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8263  000D74  0E00               	movlw	0
  8264  000D76  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8265  000D78  0EC8               	movlw	200
  8266  000D7A  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8267  000D7C  ECD6  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8268  000D80  EE20 F0C8          	lfsr	2,200
  8269  000D84  5007               	movf	i2UART_buff_put@_this,w,c
  8270  000D86  26D9               	addwf	fsr2l,f,c
  8271  000D88  5008               	movf	i2UART_buff_put@_this+1,w,c
  8272  000D8A  22DA               	addwfc	fsr2h,f,c
  8273  000D8C  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8274  000D90  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8275                           
  8276                           ;UART.c: 78: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8277  000D94  EE20 F0CA          	lfsr	2,202
  8278  000D98  5007               	movf	i2UART_buff_put@_this,w,c
  8279  000D9A  26D9               	addwf	fsr2l,f,c
  8280  000D9C  5008               	movf	i2UART_buff_put@_this+1,w,c
  8281  000D9E  22DA               	addwfc	fsr2h,f,c
  8282  000DA0  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8283  000DA4  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8284  000DA8  0E00               	movlw	0
  8285  000DAA  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8286  000DAC  0EC8               	movlw	200
  8287  000DAE  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8288  000DB0  ECD6  F00B         	call	i2_UART_buff_modulo_inc	;wreg free
  8289  000DB4  EE20 F0CA          	lfsr	2,202
  8290  000DB8  5007               	movf	i2UART_buff_put@_this,w,c
  8291  000DBA  26D9               	addwf	fsr2l,f,c
  8292  000DBC  5008               	movf	i2UART_buff_put@_this+1,w,c
  8293  000DBE  22DA               	addwfc	fsr2h,f,c
  8294  000DC0  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8295  000DC4  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8296  000DC8  0012               	return	
  8297  000DCA                     __end_ofi2_UART_buff_put:
  8298                           	opt stack 0
  8299                           tosu	equ	0xFFF
  8300                           tosh	equ	0xFFE
  8301                           tosl	equ	0xFFD
  8302                           pclatu	equ	0xFFB
  8303                           pclath	equ	0xFFA
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           intcon	equ	0xFF2
  8311                           intcon2	equ	0xFF1
  8312                           postinc0	equ	0xFEE
  8313                           fsr0h	equ	0xFEA
  8314                           fsr0l	equ	0xFE9
  8315                           wreg	equ	0xFE8
  8316                           postdec1	equ	0xFE5
  8317                           fsr1h	equ	0xFE2
  8318                           fsr1l	equ	0xFE1
  8319                           indf2	equ	0xFDF
  8320                           postinc2	equ	0xFDE
  8321                           postdec2	equ	0xFDD
  8322                           plusw2	equ	0xFDB
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function i2_UART_buff_modulo_inc *****************
  8328 ;; Defined at:
  8329 ;;		line 108 in file "UART.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  value           2    0[COMRAM] const unsigned int 
  8332 ;;  modulus         2    2[COMRAM] const unsigned int 
  8333 ;; Auto vars:     Size  Location     Type
  8334 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  2    0[COMRAM] unsigned int 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8344 ;;      Params:         4       0       0       0       0       0       0
  8345 ;;      Locals:         2       0       0       0       0       0       0
  8346 ;;      Temps:          0       0       0       0       0       0       0
  8347 ;;      Totals:         6       0       0       0       0       0       0
  8348 ;;Total ram usage:        6 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		i2_UART_buff_put
  8354 ;;		i2_UART_buff_get
  8355 ;; This function uses a non-reentrant model
  8356 ;;
  8357                           
  8358                           	psect	text49
  8359  0017AC                     __ptext49:
  8360                           	opt stack 0
  8361  0017AC                     i2_UART_buff_modulo_inc:
  8362                           	opt stack 20
  8363                           
  8364                           ;UART.c: 109: unsigned int my_value = value + 1;
  8365                           
  8366                           ;incstack = 0
  8367  0017AC  0E01               	movlw	1
  8368  0017AE  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8369  0017B0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8370  0017B2  0E00               	movlw	0
  8371  0017B4  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8372  0017B6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8373                           
  8374                           ;UART.c: 110: if (my_value >= modulus) {
  8375  0017B8  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8376  0017BA  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8377  0017BC  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8378  0017BE  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8379  0017C0  A0D8               	btfss	status,0,c
  8380  0017C2  D004               	goto	i2l3071
  8381                           
  8382                           ;UART.c: 111: my_value = 0;
  8383  0017C4  0E00               	movlw	0
  8384  0017C6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8385  0017C8  0E00               	movlw	0
  8386  0017CA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8387  0017CC                     i2l3071:
  8388                           
  8389                           ;UART.c: 112: }
  8390                           ;UART.c: 113: return (my_value);
  8391  0017CC  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8392  0017D0  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8393  0017D4  0012               	return	
  8394  0017D6                     __end_ofi2_UART_buff_modulo_inc:
  8395                           	opt stack 0
  8396                           tosu	equ	0xFFF
  8397                           tosh	equ	0xFFE
  8398                           tosl	equ	0xFFD
  8399                           pclatu	equ	0xFFB
  8400                           pclath	equ	0xFFA
  8401                           tblptru	equ	0xFF8
  8402                           tblptrh	equ	0xFF7
  8403                           tblptrl	equ	0xFF6
  8404                           tablat	equ	0xFF5
  8405                           prodh	equ	0xFF4
  8406                           prodl	equ	0xFF3
  8407                           intcon	equ	0xFF2
  8408                           intcon2	equ	0xFF1
  8409                           postinc0	equ	0xFEE
  8410                           fsr0h	equ	0xFEA
  8411                           fsr0l	equ	0xFE9
  8412                           wreg	equ	0xFE8
  8413                           postdec1	equ	0xFE5
  8414                           fsr1h	equ	0xFE2
  8415                           fsr1l	equ	0xFE1
  8416                           indf2	equ	0xFDF
  8417                           postinc2	equ	0xFDE
  8418                           postdec2	equ	0xFDD
  8419                           plusw2	equ	0xFDB
  8420                           fsr2h	equ	0xFDA
  8421                           fsr2l	equ	0xFD9
  8422                           status	equ	0xFD8
  8423                           
  8424 ;; *************** function _EUSART1_Transmit_ISR *****************
  8425 ;; Defined at:
  8426 ;;		line 155 in file "mcc_generated_files/eusart2.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;		None
  8429 ;; Auto vars:     Size  Location     Type
  8430 ;;		None
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  1    wreg      void 
  8433 ;; Registers used:
  8434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8440 ;;      Params:         0       0       0       0       0       0       0
  8441 ;;      Locals:         0       0       0       0       0       0       0
  8442 ;;      Temps:          0       0       0       0       0       0       0
  8443 ;;      Totals:         0       0       0       0       0       0       0
  8444 ;;Total ram usage:        0 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; This function calls:
  8447 ;;		Nothing
  8448 ;; This function is called by:
  8449 ;;		_INTERRUPT_InterruptManager
  8450 ;; This function uses a non-reentrant model
  8451 ;;
  8452                           
  8453                           	psect	text50
  8454  0016A6                     __ptext50:
  8455                           	opt stack 0
  8456  0016A6                     _EUSART1_Transmit_ISR:
  8457                           	opt stack 22
  8458                           
  8459                           ;eusart2.c: 158: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
  8460                           
  8461                           ;incstack = 0
  8462  0016A6  0E08               	movlw	8
  8463  0016A8  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  8464  0016AA  D012               	goto	i2l62
  8465                           
  8466                           ;eusart2.c: 159: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  8467  0016AC  5034               	movf	_eusart1TxTail,w,c
  8468  0016AE  0D01               	mullw	1
  8469  0016B0  0E73               	movlw	low _eusart1TxBuffer
  8470  0016B2  24F3               	addwf	prodl,w,c
  8471  0016B4  6ED9               	movwf	fsr2l,c
  8472  0016B6  0E00               	movlw	high _eusart1TxBuffer
  8473  0016B8  20F4               	addwfc	prodh,w,c
  8474  0016BA  6EDA               	movwf	fsr2h,c
  8475  0016BC  50DF               	movf	indf2,w,c
  8476  0016BE  6EAD               	movwf	4013,c	;volatile
  8477  0016C0  2A34               	incf	_eusart1TxTail,f,c
  8478                           
  8479                           ;eusart2.c: 160: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
  8480  0016C2  0E07               	movlw	7
  8481  0016C4  6434               	cpfsgt	_eusart1TxTail,c
  8482  0016C6  D002               	goto	i2l3233
  8483                           
  8484                           ;eusart2.c: 161: eusart1TxTail = 0;
  8485  0016C8  0E00               	movlw	0
  8486  0016CA  6E34               	movwf	_eusart1TxTail,c
  8487  0016CC                     i2l3233:
  8488                           
  8489                           ;eusart2.c: 162: }
  8490                           ;eusart2.c: 163: eusart1TxBufferRemaining++;
  8491  0016CC  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  8492                           
  8493                           ;eusart2.c: 164: } else {
  8494  0016CE  0012               	return	
  8495  0016D0                     i2l62:
  8496                           
  8497                           ;eusart2.c: 165: PIE1bits.TX1IE = 0;
  8498  0016D0  989D               	bcf	3997,4,c	;volatile
  8499  0016D2  0012               	return	
  8500  0016D4                     __end_of_EUSART1_Transmit_ISR:
  8501                           	opt stack 0
  8502                           tosu	equ	0xFFF
  8503                           tosh	equ	0xFFE
  8504                           tosl	equ	0xFFD
  8505                           pclatu	equ	0xFFB
  8506                           pclath	equ	0xFFA
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           postinc0	equ	0xFEE
  8516                           fsr0h	equ	0xFEA
  8517                           fsr0l	equ	0xFE9
  8518                           wreg	equ	0xFE8
  8519                           postdec1	equ	0xFE5
  8520                           fsr1h	equ	0xFE2
  8521                           fsr1l	equ	0xFE1
  8522                           indf2	equ	0xFDF
  8523                           postinc2	equ	0xFDE
  8524                           postdec2	equ	0xFDD
  8525                           plusw2	equ	0xFDB
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _EUSART1_Receive_ISR *****************
  8531 ;; Defined at:
  8532 ;;		line 169 in file "mcc_generated_files/eusart2.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;		None
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;		None
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  1    wreg      void 
  8539 ;; Registers used:
  8540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8546 ;;      Params:         0       0       0       0       0       0       0
  8547 ;;      Locals:         0       0       0       0       0       0       0
  8548 ;;      Temps:          0       0       0       0       0       0       0
  8549 ;;      Totals:         0       0       0       0       0       0       0
  8550 ;;Total ram usage:        0 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; This function calls:
  8553 ;;		Nothing
  8554 ;; This function is called by:
  8555 ;;		_INTERRUPT_InterruptManager
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text51
  8560  00172C                     __ptext51:
  8561                           	opt stack 0
  8562  00172C                     _EUSART1_Receive_ISR:
  8563                           	opt stack 22
  8564                           
  8565                           ;eusart2.c: 170: if (1 == RC1STAbits.OERR) {
  8566                           
  8567                           ;incstack = 0
  8568  00172C  A2AB               	btfss	4011,1,c	;volatile
  8569  00172E  D002               	goto	i2l3239
  8570                           
  8571                           ;eusart2.c: 173: RC1STAbits.CREN = 0;
  8572  001730  98AB               	bcf	4011,4,c	;volatile
  8573                           
  8574                           ;eusart2.c: 174: RC1STAbits.CREN = 1;
  8575  001732  88AB               	bsf	4011,4,c	;volatile
  8576  001734                     i2l3239:
  8577                           
  8578                           ;eusart2.c: 175: }
  8579                           ;eusart2.c: 178: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  8580  001734  5031               	movf	_eusart1RxHead,w,c
  8581  001736  0D01               	mullw	1
  8582  001738  0E6B               	movlw	low _eusart1RxBuffer
  8583  00173A  24F3               	addwf	prodl,w,c
  8584  00173C  6ED9               	movwf	fsr2l,c
  8585  00173E  0E00               	movlw	high _eusart1RxBuffer
  8586  001740  20F4               	addwfc	prodh,w,c
  8587  001742  6EDA               	movwf	fsr2h,c
  8588  001744  CFAE FFDF          	movff	4014,indf2	;volatile
  8589  001748  2A31               	incf	_eusart1RxHead,f,c
  8590                           
  8591                           ;eusart2.c: 179: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
  8592  00174A  0E07               	movlw	7
  8593  00174C  6431               	cpfsgt	_eusart1RxHead,c
  8594  00174E  D002               	goto	i2l3247
  8595                           
  8596                           ;eusart2.c: 180: eusart1RxHead = 0;
  8597  001750  0E00               	movlw	0
  8598  001752  6E31               	movwf	_eusart1RxHead,c
  8599  001754                     i2l3247:
  8600                           
  8601                           ;eusart2.c: 181: }
  8602                           ;eusart2.c: 182: eusart1RxCount++;
  8603  001754  2A30               	incf	_eusart1RxCount,f,c	;volatile
  8604  001756  0012               	return		;funcret
  8605  001758                     __end_of_EUSART1_Receive_ISR:
  8606                           	opt stack 0
  8607                           tosu	equ	0xFFF
  8608                           tosh	equ	0xFFE
  8609                           tosl	equ	0xFFD
  8610                           pclatu	equ	0xFFB
  8611                           pclath	equ	0xFFA
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           intcon	equ	0xFF2
  8619                           intcon2	equ	0xFF1
  8620                           postinc0	equ	0xFEE
  8621                           fsr0h	equ	0xFEA
  8622                           fsr0l	equ	0xFE9
  8623                           wreg	equ	0xFE8
  8624                           postdec1	equ	0xFE5
  8625                           fsr1h	equ	0xFE2
  8626                           fsr1l	equ	0xFE1
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           plusw2	equ	0xFDB
  8631                           fsr2h	equ	0xFDA
  8632                           fsr2l	equ	0xFD9
  8633                           status	equ	0xFD8
  8634                           tosu	equ	0xFFF
  8635                           tosh	equ	0xFFE
  8636                           tosl	equ	0xFFD
  8637                           pclatu	equ	0xFFB
  8638                           pclath	equ	0xFFA
  8639                           tblptru	equ	0xFF8
  8640                           tblptrh	equ	0xFF7
  8641                           tblptrl	equ	0xFF6
  8642                           tablat	equ	0xFF5
  8643                           prodh	equ	0xFF4
  8644                           prodl	equ	0xFF3
  8645                           intcon	equ	0xFF2
  8646                           intcon2	equ	0xFF1
  8647                           postinc0	equ	0xFEE
  8648                           fsr0h	equ	0xFEA
  8649                           fsr0l	equ	0xFE9
  8650                           wreg	equ	0xFE8
  8651                           postdec1	equ	0xFE5
  8652                           fsr1h	equ	0xFE2
  8653                           fsr1l	equ	0xFE1
  8654                           indf2	equ	0xFDF
  8655                           postinc2	equ	0xFDE
  8656                           postdec2	equ	0xFDD
  8657                           plusw2	equ	0xFDB
  8658                           fsr2h	equ	0xFDA
  8659                           fsr2l	equ	0xFD9
  8660                           status	equ	0xFD8
  8661                           
  8662                           	psect	text52
  8663  000000                     __ptext52:
  8664                           	opt stack 0
  8665                           tosu	equ	0xFFF
  8666                           tosh	equ	0xFFE
  8667                           tosl	equ	0xFFD
  8668                           pclatu	equ	0xFFB
  8669                           pclath	equ	0xFFA
  8670                           tblptru	equ	0xFF8
  8671                           tblptrh	equ	0xFF7
  8672                           tblptrl	equ	0xFF6
  8673                           tablat	equ	0xFF5
  8674                           prodh	equ	0xFF4
  8675                           prodl	equ	0xFF3
  8676                           intcon	equ	0xFF2
  8677                           intcon2	equ	0xFF1
  8678                           postinc0	equ	0xFEE
  8679                           fsr0h	equ	0xFEA
  8680                           fsr0l	equ	0xFE9
  8681                           wreg	equ	0xFE8
  8682                           postdec1	equ	0xFE5
  8683                           fsr1h	equ	0xFE2
  8684                           fsr1l	equ	0xFE1
  8685                           indf2	equ	0xFDF
  8686                           postinc2	equ	0xFDE
  8687                           postdec2	equ	0xFDD
  8688                           plusw2	equ	0xFDB
  8689                           fsr2h	equ	0xFDA
  8690                           fsr2l	equ	0xFD9
  8691                           status	equ	0xFD8
  8692                           
  8693                           	psect	rparam
  8694  0000                     tosu	equ	0xFFF
  8695                           tosh	equ	0xFFE
  8696                           tosl	equ	0xFFD
  8697                           pclatu	equ	0xFFB
  8698                           pclath	equ	0xFFA
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon2	equ	0xFF1
  8707                           postinc0	equ	0xFEE
  8708                           fsr0h	equ	0xFEA
  8709                           fsr0l	equ	0xFE9
  8710                           wreg	equ	0xFE8
  8711                           postdec1	equ	0xFE5
  8712                           fsr1h	equ	0xFE2
  8713                           fsr1l	equ	0xFE1
  8714                           indf2	equ	0xFDF
  8715                           postinc2	equ	0xFDE
  8716                           postdec2	equ	0xFDD
  8717                           plusw2	equ	0xFDB
  8718                           fsr2h	equ	0xFDA
  8719                           fsr2l	equ	0xFD9
  8720                           status	equ	0xFD8
  8721                           
  8722                           	psect	temp
  8723  000045                     btemp:
  8724                           	opt stack 0
  8725  000045                     	ds	1
  8726  0000                     int$flags	set	btemp
  8727                           tosu	equ	0xFFF
  8728                           tosh	equ	0xFFE
  8729                           tosl	equ	0xFFD
  8730                           pclatu	equ	0xFFB
  8731                           pclath	equ	0xFFA
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           intcon	equ	0xFF2
  8739                           intcon2	equ	0xFF1
  8740                           postinc0	equ	0xFEE
  8741                           fsr0h	equ	0xFEA
  8742                           fsr0l	equ	0xFE9
  8743                           wreg	equ	0xFE8
  8744                           postdec1	equ	0xFE5
  8745                           fsr1h	equ	0xFE2
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           postdec2	equ	0xFDD
  8750                           plusw2	equ	0xFDB
  8751                           fsr2h	equ	0xFDA
  8752                           fsr2l	equ	0xFD9
  8753                           status	equ	0xFD8


Data Sizes:
    Strings     46
    Constant    490
    Data        1
    BSS         992
    Persistent  18
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      68
    BANK0           160     27     139
    BANK1           256      0     256
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    S2203__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S2203__prbuf$ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 10
		 -> SetCharger@str(COMRAM[10]), NULL(NULL[0]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 40
		 -> ChargerData(BANK0[40]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> CRCcheck@arrayHolder(BANK0[3]), receiveData@holder_1758(BANK0[3]), receiveData@holder(BANK0[3]), rx_buffer(BANK2[200]), 
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), NULL(NULL[0]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 50
		 -> receiveArray(BANK1[50]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 50
		 -> receiveArray(BANK1[50]), NULL(NULL[0]), 


Critical Paths under _main in COMRAM

    _FastTransfer_buffer_flush->_memset
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART2_Receive_ISR
    _EUSART2_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART2_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _updateComms->_receiveData
    _respondChargerAsECU->_sendData
    _SetBMM->_receiveData
    _sendData->_FastTransfer_buffer_flush
    _receiveData->_CRCcheck
    _CRCcheck->_crcBufS_get
    _ToSend->_FastTransfer_buffer_put
    _CommsStart->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   40047
                  _SYSTEM_Initialize
                             _SetBMM
                           _ledDebug
                       _updateTimers
 ---------------------------------------------------------------------------------
 (1) _updateTimers                                         8     8      0       0
                                             26 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _ledDebug                                             0     0      0   18935
                _respondChargerAsECU
                           _time_Set
                           _time_get
                        _updateComms
 ---------------------------------------------------------------------------------
 (2) _updateComms                                          0     0      0   10715
                        _receiveData
 ---------------------------------------------------------------------------------
 (2) _time_get                                             3     1      2      22
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _time_Set                                             3     1      2     108
                                             26 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _respondChargerAsECU                                  0     0      0    8090
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (1) _SetBMM                                               0     0      0   18805
                              _Delay
                             _ToSend
                        _receiveData
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              4 BANK0      5     5      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                              0 BANK0      4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _receiveData                                         18    18      0   10715
                                              9 BANK0     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                              0 BANK0      1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (4) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (5) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _CRCcheck                                             7     7      0    5114
                                              2 BANK0      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (5) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (5) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    10     6      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (5) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1828
                                              2 BANK0      3     1      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1535
                                             32 COMRAM     5     0      5
                                              0 BANK0      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Delay                                                5     3      2     558
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                         _CommsStart
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0       0
                                             26 COMRAM     2     2      0
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CommsStart                                           0     0      0    2307
                 _EUSART1_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (3) _begin                                               13     0     13    1292
                                              0 BANK0     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (4) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                _EUSART2_Receive_ISR
               _EUSART2_Transmit_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_size                                    2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (9) _EUSART2_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _CommsStart
       _EUSART1_Initialize
         _UART_buff_init
           _memset
       _begin
         ___awdiv
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
   _SetBMM
     _Delay
     _ToSend
       _FastTransfer_buffer_put
         _FastTransfer_buffer_modulo_inc
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _sendData
       Absolute function(Fake) *
       _CRC8 *
       _FastTransfer_buffer_flush *
         _memset
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
       _crcBufS_put *
   _ledDebug
     _respondChargerAsECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *
     _time_Set
     _time_get
     _updateComms
       _receiveData
         Absolute function(Fake) *
         _CRC8 *
         _CRCcheck *
           Absolute function(Fake) *
           _CRC8 *
           _Receive_available *
             _UART_buff_size
           _Receive_get *
             _UART_buff_get
               _UART_buff_modulo_inc
           _crcBufS_get *
           _crcBufS_status_put *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _Receive_peek *
           _UART_buff_peek
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
   _updateTimers

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _EUSART2_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART2_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0     100       6      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      8B       4       86.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     433       9        0.0%
DATA                 0      0     433      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Aug 02 11:52:10 2016

      __end_of_FastTransfer_buffer_flush 12EE                   i2_UART_buff_modulo_inc 17AC  
               _eusart1TxBufferRemaining 0042                                        _i 0035  
                           _rx_array_inx 0038                             ___awdiv@sign 0020  
                EUSART2_Receive_ISR@data 000C                             __CFG_CP0$OFF 000000  
                           __CFG_CP1$OFF 000000                             __CFG_CP2$OFF 000000  
                           __CFG_CP3$OFF 000000                                      l618 10F8  
                                    l459 1498                                      l573 0A46  
                                    l694 15CC                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000     FastTransfer_buffer_flush@clearBuffer 00CA  
                       time_get@WhatTime 001D                                      prod 000FF3  
                                    tosl 000FFD                                      wreg 000FE8  
          i2UART_buff_modulo_inc@modulus 0003                             __CFG_LVP$OFF 000000  
                                   l4101 0502                                     l4005 00EC  
                                   l4013 011E                                     l3063 15B8  
                                   l4111 05B8                                     l4103 051C  
                                   l4105 0536                                     l4113 05D4  
                                   l4025 01C2                                     l4009 011A  
                                   l4107 0550                                     l4123 05E0  
                                   l4043 0226                                     l4027 01DA  
                                   l4141 0694                                     l4109 056A  
                                   l4045 024C                                     l4061 02AE  
                                   l4029 01E0                                     l4037 021A  
                                   l4151 074A                                     l4143 06AE  
                                   l4145 06C8                                     l4137 0660  
                                   l4153 0766                                     l4081 0418  
                                   l4073 0372                                     l4065 02D6  
                                   l4057 027C                                     l4161 0772  
                                   l2803 11C8                                     l4147 06E2  
                                   l4139 067A                                     l4083 042C  
                                   l4171 0A7A                                     l2805 11D0  
                                   l4149 06FC                                     l4181 0AF2  
                                   l4173 0A94                                     l2823 1208  
                                   l2815 11F0                                     l2807 11D4  
                                   l4079 0412                                     l4183 0B20  
                                   l4175 0AB0                                     l4239 1536  
                                   l3801 1482                                     l4097 04CE  
                                   l4185 0B26                                     l4177 0ACA  
                                   l2819 11FA                                     l3811 14A4  
                                   l4099 04E8                                     l4179 0AE6  
                                   l4291 14EC                                     l3821 17A2  
                                   l4189 0B62                                     l3831 171A  
                                   l2791 11A2                                     l3911 0912  
                                   l3809 149E                                     l3841 0DDE  
                                   l4289 14E2                                     l3827 170A  
                                   l3923 09C2                                     l2797 11B2  
                                   l3773 1778                                     l3853 0E72  
                                   l3837 0DD4                                     l3861 0F9E  
                                   l3933 0A16                                     l3941 0A3E  
                                   l3909 08EA                                     l3919 09AC  
                                   l3785 10F4                                     l3937 0A36  
                                   l3873 0BB6                     receiveData@crcHolder 00DD  
                                   l3947 079E                                     l3795 146C  
                                   l3869 1024                                     l3879 0C22  
                                   STR_1 7FF9                                     STR_2 7FFC  
                                   STR_3 7FF3                                     STR_7 7FDD  
                                   _CRC8 1466                                     _LATA 000F89  
                                   _LATB 000F8A                                     _LATC 000F8B  
                                   _LATD 000F8C                                     _LATE 000F8D  
                                   u4008 022A                                     u4009 023E  
                                   u4028 0250                                     u4029 0266  
                                   u4208 056E                                     u4048 0280  
                                   u4081 0316                                     u4049 0294  
                                   u4218 05BC                                     u4138 04B8  
                                   u4058 02B2                                     u4410 18B6  
                                   u4059 02C6                                     u3540 1088  
                                   u4308 0700                                     u4148 04D2  
                                   u4318 074E                                     u4238 064A  
                                   u4158 04EC                                     u4248 0664  
                                   u4168 0506                                     u4328 0A64  
                                   u4440 168E                                     u4258 067E  
                                   u4178 0520                                     u4338 0A7E  
                                   u3811 079C                                     u3708 0916  
                                   u4268 0698                                     u4188 053A  
                                   u3660 0F7E                                     u4348 0A98  
                                   u4517 15BE                                     u3709 092A  
                                   u3718 0932                                     u4278 06B2  
                                   u4198 0554                                     u4358 0AB4  
                                   u3719 0946                                     u3728 094E  
                                   u4288 06CC                                     u4368 0ACE  
                                   u3729 0962                                     u3738 096A  
                                   u4298 06E6                                     u4378 0AF6  
                                   u3739 097E                                     u3908 0140  
                                   u3909 0154                                     u4398 0B4A  
                                   u3688 08EE                                     u3928 015E  
                                   u3848 00C6                                     u3689 0902  
                                   u3929 0172                                     u3849 00DA  
                                   u3938 0178                                     u3939 018C  
                                   u3948 0192                                     u3868 00F6  
                                   u3949 01A6                                     u3869 010A  
                                   i2l62 16D0                                     u3968 01C6  
                                   u3888 0122                                     u3889 0136  
                                   _WPUB 000F61                    ??_EUSART2_Receive_ISR 000C  
                                   _main 14B0                    ??_respondChargerAsECU 0026  
                        _TMR0_StartTimer 1944                                     _time 0026  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0045  
                          __CFG_BORV$190 000000                                     pclat 000FFA  
                                   prodh 000FF4                                     prodl 000FF3  
        __end_of_FastTransfer_buffer_put 08EA                                     start 00B8  
                          __CFG_IESO$OFF 000000             __end_of_EUSART2_Transmit_ISR 1648  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                  __end_of_TMR0_Initialize 1700  
                       __end_of_CRCcheck 0A48           __size_of_OSCILLATOR_Initialize 000E  
          __end_of_OSCILLATOR_Initialize 1938                       crcBufS_put@address 001D  
                                  ?_main 0001                          __end_of___awdiv 1212  
                                  STR_17 7FD1                                    STR_18 7FEC  
                                  STR_19 7FE5                                    _ANSB0 0079C8  
                                  _ANSB1 0079C9                                    _ANSA3 0079C3  
                                  _T0CON 000FD5                          ___awdiv@divisor 001D  
                                  _LATB0 007C50                                    _LATB1 007C51  
                                  _LATA3 007C4B                                    _LATC0 007C58  
                                  _LATC1 007C59                                    _LATB3 007C53  
                                  _LATD0 007C60                                    _LATB4 007C54  
                                  _LATB5 007C55                                    _LATA7 007C4F  
                                  _LATD3 007C63                           __CFG_DEBUG$OFF 000000  
                                  i2l160 004E                                    i2l162 005A  
                                  i2l170 007C                                    i2l164 0066  
                                  i2l166 0072                                    i2l618 118A  
                                  i2l649 185C                          ___awdiv@counter 001F  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _TRISA 000F92                                    _TRISB 000F93  
                                  _TRISC 000F94                                    _TRISD 000F95  
                                  _TRISE 000F96                                    _Delay 15AE  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                              _ChargerData 008F  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 16A6  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         __end_of_TMR0_ISR 18A4  
                                  _Start 002A                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                             _CommsStart 140E                                    _begin 1352  
                                  _ddata 0060                           __CFG_EBTRB$OFF 000000  
                        __end_of_dpowers 7FD1                                    _group 002C  
                     __CFG_MCLRE$EXTMCLR 000000                                    _putch 000000  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00F2  
                                  plusw2 000FDB                           begin@stuffpeek 00D3  
                   __size_of_crcBufS_put 00D8                                    status 000FD8  
                         __CFG_HFOFST$ON 000000                             ?_receiveData 0001  
                         __CFG_PBADEN$ON 000000                             __end_of_CRC8 14B0  
                        CRCcheck@SentCRC 00CA                          __initialization 1212  
             __end_of_EUSART1_Initialize 1576                             __end_of_main 14F6  
                             ToSend@what 00CA                                   ??_CRC8 001E  
            ?_INTERRUPT_InterruptManager 0001                                   ??_main 0026  
                          __activetblptr 000002                         __end_of_Send_put 1678  
              __size_ofi2_UART_buff_size 0016                                   ?_Delay 001B  
                  ?_EUSART1_Transmit_ISR 0001            FastTransfer_buffer_put@towhat 0024  
                          ?_Receive_peek 0001                                   ?_begin 00C8  
                __end_of_TMR0_StartTimer 1948               __end_of_EUSART2_Initialize 1616  
                       ___awdiv@dividend 001B                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                        i2_UART_buff_get 10FC                                   _RC1STA 000FAB  
                                 _RC2STA 000F71                          i2_UART_buff_put 0CB0  
                                 Delay@i 001E                                   i2l3071 17CC  
                                 i2l3233 16CC                                   i2l3181 0D3C  
                         __CFG_WDTEN$OFF 000000                                   i2l3247 1754  
                                 i2l3239 1734                                   i2l3175 0CD0  
                                 i2l3195 1186                                   i2l3259 1640  
            UART_buff_modulo_inc@modulus 001D                                   _RCREG1 000FAE  
                                 _RCREG2 000F74                                   _OSCCON 000FD3  
                                 _SPBRG1 000FAF                                   _SPBRG2 000F75  
                                 _TX1STA 000FAC                                   _TX2STA 000F72  
                                 _TRISB0 007C98                                   _TRISB1 007C99  
                                 _TRISD0 007CA8                                   _TRISD2 007CAA  
                                 _TRISD3 007CAB                                   _TXREG1 000FAD  
                                 _TXREG2 000F73                         __end_of_ledDebug 16A6  
                                 _SetBMM 14F6                           __CFG_XINST$OFF 000000  
                                 _ToSend 1818                      __end_of_Receive_get 192A  
                       crcBufS_get@_this 001B              ??_FastTransfer_buffer_flush 0023  
                          _output_buffer 0400                         crcBufS_get@space 001E  
                              ??___awdiv 001F                                CRC8@tempI 0020  
                         __CFG_STVREN$ON 000000                         ?_TMR0_Initialize 0001  
                                 _memset 1700                                   clear_0 1218  
                                 clear_1 1224                                   clear_2 1230  
                                 clear_3 123E                                   clear_4 1250  
                                 clear_5 125C                         ___awdiv@quotient 0021  
                                 _rx_len 0039                         __end_of_sendData 0B96  
                           __pdataCOMRAM 0044                         __end_of_time_Set 1818  
                       __end_of_time_get 190E                            Send_put@_data 00C8  
                           __mediumconst 7DE6                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0174  
                   _EUSART2_Transmit_ISR 1616                              ?_CommsStart 0001  
           __end_of_UART_buff_modulo_inc 1782                          _eusart1RxBuffer 006B  
          __size_of_INTERRUPT_Initialize 000C                          _eusart1TxBuffer 0073  
                      _SYSTEM_Initialize 1872                               __accesstop 0060  
                __end_of__initialization 1274                                ?_CRCcheck 0001  
                     ?_SYSTEM_Initialize 0001                            ___rparam_used 000001  
                ?i2_UART_buff_modulo_inc 0001                             ?_updateComms 0001  
                          __end_of_Delay 15E2                           __pcstackCOMRAM 0001  
                     _crcBufS_status_put 0F94                      ??_SYSTEM_Initialize 0025  
                       crcBufS_put@_this 001B                            __end_of_begin 13B2  
                              ?_TMR0_ISR 0001   __end_of_FastTransfer_buffer_modulo_inc 17AC  
__size_of_FastTransfer_buffer_modulo_inc 002A           _FastTransfer_buffer_modulo_inc 1782  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 00CC  
                     UART_buff_get@_this 0021                      ?_crcBufS_status_put 001B  
                  __end_of_UART_buff_get 10FC                   ??_EUSART1_Transmit_ISR 0001  
                  __end_of_UART_buff_put 0CB0                                  ??_Delay 001D  
                __end_ofi2_UART_buff_get 118E                  __end_ofi2_UART_buff_put 0DCA  
                  ?_EUSART2_Transmit_ISR 0001              __end_of_EUSART1_Receive_ISR 1758  
              _FastTransfer_buffer_flush 1282                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                         ?_TMR0_StartTimer 0001  
              __end_of_SYSTEM_Initialize 188C                   receiveData@holder_1758 00DA  
                          _eusart1RxHead 0031                      _addressErrorCounter 0087  
                          _eusart1TxHead 0033                            _eusart1RxTail 0032  
                             __pbssBANK0 0060                               __pbssBANK1 0100  
                             __pbssBANK2 0200                               __pbssBANK3 0300  
                             __pbssBANK4 0400                       __end_of_FONTLOOKUP 7FC7  
                          _eusart1TxTail 0034                          __CFG_PLLCFG$OFF 000000  
                            _Receive_get 191C                               ??_CRCcheck 0026  
                   ??_crcBufS_status_put 001F           __end_ofi2_UART_buff_modulo_inc 17D6  
                             __pnvCOMRAM 003A                        begin@givenAddress 00CB  
                __size_of_UART_buff_init 001E                  __size_of_UART_buff_peek 0024  
                __size_of_UART_buff_size 0016                                  ?_SetBMM 0001  
                              ?_Send_put 0001                     __size_of_receiveData 06BA  
                                ?_ToSend 00CA                       __CFG_CCP2MX$PORTC1 000000  
                             ??_TMR0_ISR 0001                      __size_of_CommsStart 0058  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                ?_memset 001B                               _crc_buffer 00B7  
                       time_Set@WhatTime 001D                       UART_buff_put@_this 0021  
                       i2_UART_buff_size 18E6              i2UART_buff_modulo_inc@value 0001  
                                _LEDtime 007B                                  _OSCCON2 000FD2  
            __end_of_EUSART2_Receive_ISR 1872                        _Receive_available 18BA  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                ?_ledDebug 0001  
                                _SPBRGH1 000FB0                                  _SPBRGH2 000F76  
                                _SSP1ADD 000FC8                      sendData@whereToSend 00CD  
                    _receiveArrayAddress 00E3                                  _SSP1BUF 000FC9  
            __end_of_respondChargerAsECU 15AE                       ?_Receive_available 001D  
                             begin@error 00CC                      ??_Receive_available 001F  
                              ?_sendData 0001                        _alignErrorCounter 0089  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                        __size_of_SetBMM 0044                                ?_time_Set 001B  
                        __size_of_ToSend 001E                     __end_of_Receive_peek 191C  
                              ?_time_get 001B                                  _PowerOn 002E  
                              _AKNAKsend 00E9                                  ___awdiv 118E  
                   _UART_buff_modulo_inc 1758                                  _calc_CS 002F  
                                __pcinit 1212                          __size_of_memset 002C  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 14B0                                  __ptext1 12EE  
                                __ptext2 1678                                  __ptext3 18A4  
                                __ptext4 18FC                                  __ptext5 17FA  
                                __ptext6 1576                                  __ptext7 14F6  
                                __ptext8 0A48                                  __ptext9 0EBC  
                              _T0CONbits 000FD5                         i2UART_buff_put@c 0009  
                                _dpowers 7FC7                    _OSCILLATOR_Initialize 192A  
                 ??_EUSART2_Transmit_ISR 000C                __end_of_Receive_available 18D0  
                _FastTransfer_buffer_put 0776                    CRCcheck@calculatedCRC 00CB  
                     _EUSART1_Initialize 153A                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                         ?i2_UART_buff_put 0007  
           crcBufS_status_put@wantedTime 0023                               ??_ledDebug 0026  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 001A                     end_of_initialization 1274  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 7DE6  
                             ??_sendData 00CC                       _EUSART2_Initialize 15E2  
                             ??_time_Set 001D                               ??_time_get 001D  
                  ?_UART_buff_modulo_inc 001B                     __size_of_updateComms 0016  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc2 000FDE  
                       begin@stufftosend 00CD                      CRCcheck@arrayHolder 00CC  
                   ??_EUSART1_Initialize 0025                      ?_EUSART2_Initialize 0001  
                 _dataAdressErrorCounter 008D                               _rx_address 0037  
                              _TRISAbits 000F92                                _TRISBbits 000F93  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                           ??_CommsStart 0025                             begin@maxSize 00CA  
                   ??_EUSART2_Initialize 001B       __size_of_FastTransfer_buffer_flush 006C  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1836  
                         _UART_buff_peek 17D6                           _UART_buff_size 18D0  
                    __end_of_crcBufS_get 0EBC                      __end_of_crcBufS_put 0F94  
                      __size_of_CRCcheck 015E                            ?_updateTimers 0001  
                          _moduleAddress 0043                     _timer0ReloadVal16bit 0040  
                         __end_of_SetBMM 153A                               CRCcheck@rt 00CF  
                         __end_of_ToSend 1836             __end_of_INTERRUPT_Initialize 1944  
                     __end_of_CommsStart 1466                          _crcErrorCounter 008B  
                      crcBufS_put@oldCRC 001E                            __pidataCOMRAM 1948  
                      __size_of_TMR0_ISR 0018                ??_FastTransfer_buffer_put 00C8  
                 ?_OSCILLATOR_Initialize 0001                           __end_of_memset 172C  
                      crcBufS_put@status 001F                             receiveData@r 00E1  
             __size_of_Receive_available 0016                             receiveData@u 00DF  
                    start_initialization 1212                 __size_of_TMR0_Initialize 002C  
        __size_of_PIN_MANAGER_Initialize 005C                    crcBufS_get@wantedTime 00C8  
                 __end_of_UART_buff_init 1854                   __end_of_UART_buff_peek 17FA  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 18E6  
                           ?_Receive_get 0001                           UART_buff_put@c 0023  
                  __size_of_Receive_peek 000E                           ??_updateTimers 001B  
               __end_ofi2_UART_buff_size 18FC                                 ??_SetBMM 0026  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                          crcBufS_get@time 001D  
                      __size_of_Send_put 0030                                 ??_memset 0021  
                         _eusart1RxCount 0030                              __pbssCOMRAM 0026  
          __size_of_EUSART1_Transmit_ISR 002E                            __pcstackBANK0 00C8  
                           _Receive_peek 190E                      UART_buff_init@_this 0023  
                            _crcBufS_get 0DCA                      UART_buff_peek@_this 001B  
                            _crcBufS_put 0EBC                        __size_of_ledDebug 002E  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 002C  
                          ??_receiveData 00D1              __size_of_crcBufS_status_put 00D6  
                             sendData@CS 00CE                                __pnvBANK0 00E3  
               __size_of_TMR0_StartTimer 0004                   __size_of_UART_buff_get 0092  
                 __size_of_UART_buff_put 011A                   _PIN_MANAGER_Initialize 13B2  
                      __size_of_sendData 014E                                __pintcode 0008  
                          __pmediumconst 7DE6                                 ?___awdiv 001B  
                      __size_of_time_Set 001E                        __size_of_time_get 0012  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                                 _BAUD2CON 000F70  
                         __size_of_Delay 0034                           __size_of_begin 0060  
                   _INTERRUPT_Initialize 1938                             _receiveArray 01CE  
                      ??_TMR0_Initialize 001B             __size_of_EUSART2_Receive_ISR 001E  
                               _CRCcheck 08EA                                 _LATBbits 000F8A  
                               _LATDbits 000F8C                      UART_buff_size@_this 001B  
           __size_of_respondChargerAsECU 0038                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D                                 _IPR3bits 000FA5  
                               _PIE3bits 000FA3      __size_of_INTERRUPT_InterruptManager 00B0  
                               _PIR1bits 000F9E                                 i2u268_40 111A  
                               i2u276_40 1630                                 _PIR3bits 000FA4  
                    begin@stuffavailable 00D1                                 _RCONbits 000FD0  
                       __CFG_WDTPS$32768 000000                      __end_of_receiveData 0776  
                               _SSP1CON1 000FC6                                 _TMR0_ISR 188C  
                               _SSP1STAT 000FC7           FastTransfer_buffer_flush@_this 00C8  
                           _input_buffer 0300                                _rx_buffer 0200  
                            _lastLEDTime 007F                     i2UART_buff_put@_this 0007  
                          _UART_buff_get 106A                            _UART_buff_put 0B96  
                   __end_of_updateTimers 1352            __size_of_EUSART2_Transmit_ISR 0032  
               ??i2_UART_buff_modulo_inc 0005                              _INTCON2bits 000FF1  
                  ?_INTERRUPT_Initialize 0001                        _sendStructAddress 00E5  
               __size_ofi2_UART_buff_get 0092                 __size_ofi2_UART_buff_put 011A  
                          ??_updateComms 0026                     __size_of_Receive_get 000E  
                               __Hrparam 0000                                 _Send_put 1648  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                          time_Set@value 001B                        __CFG_P2BMX$PORTD2 000000  
                ??_OSCILLATOR_Initialize 001B                        ??_TMR0_StartTimer 001B  
                       __size_of___awdiv 0084              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 00CF                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 00CF                                 _ledDebug 1678  
               crcBufS_status_put@status 001E                                 __ptext10 1282  
                               __ptext11 00BC                                 __ptext20 106A  
                               __ptext12 1648                                 __ptext21 1758  
                               __ptext13 0B96                                 __ptext30 16D4  
                               __ptext22 18BA                                 __ptext14 190E  
                               __ptext31 1944                                 __ptext23 18D0  
                               __ptext15 17D6                                 __ptext40 1836  
                               __ptext32 13B2                                 __ptext24 1466  
                               __ptext16 08EA                                 __ptext41 1700  
                               __ptext33 192A                                 __ptext25 1818  
                               __ptext17 0F94                                 __ptext50 16A6  
                               __ptext34 1938                                 __ptext26 0776  
                               __ptext18 0DCA                                 __ptext51 172C  
                               __ptext43 188C                                 __ptext35 15E2  
                               __ptext27 1782                                 __ptext19 191C  
                               __ptext52 0000                                 __ptext44 1616  
                               __ptext36 140E                                 __ptext28 15AE  
                               __ptext45 18E6                                 __ptext37 1352  
                               __ptext29 1872                                 __ptext46 10FC  
                               __ptext38 118E                                 __ptext47 1854  
                               __ptext39 153A                                 __ptext48 0CB0  
                               __ptext49 17AC                             _SSP1CON1bits 000FC6  
                          __size_of_CRC8 004A                                 begin@ptr 00C8  
            __size_of_EUSART2_Initialize 0034                            _returnAddress 0036  
                          __size_of_main 0046                              _receiveData 00BC  
                         _Transmit_stall 0044                                 _sendData 0A48  
                               _talkTime 0083                        ?i2_UART_buff_size 0001  
                             _RC1STAbits 000FAB                                 _time_Set 17FA  
                             _RC2STAbits 000F71                                 _time_get 18FC  
                             _FONTLOOKUP 7DE7                       ??i2_UART_buff_size 0003  
                               int$flags 0045                             _serial_write 003E  
                    __end_of_updateComms 18BA       __end_of_INTERRUPT_InterruptManager 00B8  
             _INTERRUPT_InterruptManager 0008                             _SSP1STATbits 000FC7  
                    _EUSART1_Receive_ISR 172C                        receiveData@holder 00D7  
                             _INTCONbits 000FF2                UART_buff_modulo_inc@value 001B  
                       ??_UART_buff_init 0025                         ??_UART_buff_peek 001D  
                       ??_UART_buff_size 001D                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 003A  
        __size_ofi2_UART_buff_modulo_inc 002A                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                     ?_EUSART1_Receive_ISR 0001  
 FastTransfer_buffer_modulo_inc@my_value 001F           FastTransfer_buffer_put@towhere 0023  
                ?_PIN_MANAGER_Initialize 0001             __end_of_EUSART1_Transmit_ISR 16D4  
                            _ring_buffer 0100               ?_FastTransfer_buffer_flush 00C8  
                      ??i2_UART_buff_get 0009                              _serial_peek 00E7  
                            _serial_read 003C                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002A  
                        ??_UART_buff_get 0023                    __size_of_updateTimers 0064  
                        ??_UART_buff_put 0024                      _EUSART2_Receive_ISR 1854  
  FastTransfer_buffer_modulo_inc@modulus 001D                      _respondChargerAsECU 1576  
                 crcBufS_status_put@time 001D                          _TMR0_Initialize 16D4  
              receiveData@crcHolder_1759 00DE                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 00EA               __end_of_crcBufS_status_put 106A  
                  ??_EUSART1_Receive_ISR 0001           __end_of_PIN_MANAGER_Initialize 140E  
       ??_FastTransfer_buffer_modulo_inc 001F          ?_FastTransfer_buffer_modulo_inc 001B  
                   ?_EUSART2_Receive_ISR 0001                        __CFG_FOSC$INTIO67 000000  
                   ?_respondChargerAsECU 0001                              _updateComms 18A4  
                           _updateTimers 12EE  
