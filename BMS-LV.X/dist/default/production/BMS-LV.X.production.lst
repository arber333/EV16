

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Sep 20 00:14:59 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    65  0000                     
    66                           	psect	smallconst
    67  000600                     __psmallconst:
    68                           	opt stack 0
    69  000600  00                 	db	0
    70  000601                     log@coeff:
    71                           	opt stack 0
    72  000601  00                 	db	0
    73  000602  00                 	db	0
    74  000603  00                 	db	0
    75  000604  00                 	db	0
    76  000605  80                 	db	128
    77  000606  3F                 	db	63
    78  000607  F0                 	db	240
    79  000608  FF                 	db	255
    80  000609  BE                 	db	190
    81  00060A  E2                 	db	226
    82  00060B  A9                 	db	169
    83  00060C  3E                 	db	62
    84  00060D  83                 	db	131
    85  00060E  76                 	db	118
    86  00060F  BE                 	db	190
    87  000610  AE                 	db	174
    88  000611  2B                 	db	43
    89  000612  3E                 	db	62
    90  000613  3C                 	db	60
    91  000614  C3                 	db	195
    92  000615  BD                 	db	189
    93  000616  D2                 	db	210
    94  000617  13                 	db	19
    95  000618  3D                 	db	61
    96  000619  78                 	db	120
    97  00061A  D3                 	db	211
    98  00061B  BB                 	db	187
    99  00061C                     __end_oflog@coeff:
   100                           	opt stack 0
   101  0000                     _TMR1	set	4046
   102  0000                     _ADCON0	set	4034
   103  0000                     _ADCON0bits	set	4034
   104  0000                     _ADCON1	set	4033
   105  0000                     _ADCON2	set	4032
   106  0000                     _ADRESH	set	4036
   107  0000                     _ADRESL	set	4035
   108  0000                     _ANSELA	set	3896
   109  0000                     _ANSELB	set	3897
   110  0000                     _ANSELC	set	3898
   111  0000                     _ANSELD	set	3899
   112  0000                     _ANSELE	set	3900
   113  0000                     _BAUD1CON	set	4024
   114  0000                     _INTCON2bits	set	4081
   115  0000                     _INTCONbits	set	4082
   116  0000                     _IPR1bits	set	3999
   117  0000                     _LATA	set	3977
   118  0000                     _LATB	set	3978
   119  0000                     _LATC	set	3979
   120  0000                     _LATCbits	set	3979
   121  0000                     _LATD	set	3980
   122  0000                     _LATE	set	3981
   123  0000                     _OSCCON	set	4051
   124  0000                     _OSCCON2	set	4050
   125  0000                     _OSCTUNE	set	3995
   126  0000                     _PIE1bits	set	3997
   127  0000                     _PIR1bits	set	3998
   128  0000                     _RC1STA	set	4011
   129  0000                     _RC1STAbits	set	4011
   130  0000                     _RCONbits	set	4048
   131  0000                     _RCREG1	set	4014
   132  0000                     _SPBRG1	set	4015
   133  0000                     _SPBRGH1	set	4016
   134  0000                     _T1CON	set	4045
   135  0000                     _T1CONbits	set	4045
   136  0000                     _T1GCON	set	4044
   137  0000                     _T1GCONbits	set	4044
   138  0000                     _TMR1H	set	4047
   139  0000                     _TMR1L	set	4046
   140  0000                     _TRISA	set	3986
   141  0000                     _TRISB	set	3987
   142  0000                     _TRISC	set	3988
   143  0000                     _TRISD	set	3989
   144  0000                     _TRISE	set	3990
   145  0000                     _TX1STA	set	4012
   146  0000                     _TXREG1	set	4013
   147  0000                     _WPUB	set	3937
   148  0000                     _LATA4	set	31820
   149  0000                     _LATA6	set	31822
   150  0000                     _LATA7	set	31823
   151  0000                     _LATB0	set	31824
   152  0000                     _LATB1	set	31825
   153  0000                     _LATB2	set	31826
   154  0000                     _LATC0	set	31832
   155  0000                     _LATC3	set	31835
   156  0000                     _LATD2	set	31842
   157  0000                     _LATD3	set	31843
   158  0000                     _LATD4	set	31844
   159  0000                     _LATD5	set	31845
   160  0000                     _LATD6	set	31846
   161  0000                     _LATD7	set	31847
   162  00061C                     __stringdata:
   163                           	opt stack 0
   164  00061C                     STR_6:
   165  00061C  20                 	db	32
   166  00061D  4F                 	db	79	;'O'
   167  00061E  76                 	db	118	;'v'
   168  00061F  65                 	db	101	;'e'
   169  000620  72                 	db	114	;'r'
   170  000621  20                 	db	32
   171  000622  2F                 	db	47
   172  000623  20                 	db	32
   173  000624  75                 	db	117	;'u'
   174  000625  6E                 	db	110	;'n'
   175  000626  64                 	db	100	;'d'
   176  000627  65                 	db	101	;'e'
   177  000628  72                 	db	114	;'r'
   178  000629  20                 	db	32
   179  00062A  76                 	db	118	;'v'
   180  00062B  6F                 	db	111	;'o'
   181  00062C  6C                 	db	108	;'l'
   182  00062D  74                 	db	116	;'t'
   183  00062E  61                 	db	97	;'a'
   184  00062F  67                 	db	103	;'g'
   185  000630  65                 	db	101	;'e'
   186  000631  00                 	db	0
   187  000632                     STR_3:
   188  000632  46                 	db	70	;'F'
   189  000633  41                 	db	65	;'A'
   190  000634  55                 	db	85	;'U'
   191  000635  4C                 	db	76	;'L'
   192  000636  54                 	db	84	;'T'
   193  000637  20                 	db	32
   194  000638  43                 	db	67	;'C'
   195  000639  4C                 	db	76	;'L'
   196  00063A  45                 	db	69	;'E'
   197  00063B  41                 	db	65	;'A'
   198  00063C  52                 	db	82	;'R'
   199  00063D  45                 	db	69	;'E'
   200  00063E  44                 	db	68	;'D'
   201  00063F  20                 	db	32
   202  000640  0D                 	db	13
   203  000641  0A                 	db	10
   204  000642  00                 	db	0
   205  000643                     STR_2:
   206  000643  46                 	db	70	;'F'
   207  000644  41                 	db	65	;'A'
   208  000645  55                 	db	85	;'U'
   209  000646  4C                 	db	76	;'L'
   210  000647  54                 	db	84	;'T'
   211  000648  20                 	db	32
   212  000649  53                 	db	83	;'S'
   213  00064A  54                 	db	84	;'T'
   214  00064B  41                 	db	65	;'A'
   215  00064C  52                 	db	82	;'R'
   216  00064D  54                 	db	84	;'T'
   217  00064E  20                 	db	32
   218  00064F  0D                 	db	13
   219  000650  0A                 	db	10
   220  000651  00                 	db	0
   221  000652                     STR_7:
   222  000652  20                 	db	32
   223  000653  4F                 	db	79	;'O'
   224  000654  76                 	db	118	;'v'
   225  000655  65                 	db	101	;'e'
   226  000656  72                 	db	114	;'r'
   227  000657  20                 	db	32
   228  000658  63                 	db	99	;'c'
   229  000659  75                 	db	117	;'u'
   230  00065A  72                 	db	114	;'r'
   231  00065B  72                 	db	114	;'r'
   232  00065C  65                 	db	101	;'e'
   233  00065D  6E                 	db	110	;'n'
   234  00065E  74                 	db	116	;'t'
   235  00065F  00                 	db	0
   236  000660                     STR_5:
   237  000660  20                 	db	32
   238  000661  4F                 	db	79	;'O'
   239  000662  76                 	db	118	;'v'
   240  000663  65                 	db	101	;'e'
   241  000664  72                 	db	114	;'r'
   242  000665  20                 	db	32
   243  000666  54                 	db	84	;'T'
   244  000667  65                 	db	101	;'e'
   245  000668  6D                 	db	109	;'m'
   246  000669  70                 	db	112	;'p'
   247  00066A  00                 	db	0
   248  00066B                     STR_4:
   249  00066B  46                 	db	70	;'F'
   250  00066C  61                 	db	97	;'a'
   251  00066D  75                 	db	117	;'u'
   252  00066E  6C                 	db	108	;'l'
   253  00066F  74                 	db	116	;'t'
   254  000670  3A                 	db	58	;':'
   255  000671  00                 	db	0
   256  000672                     STR_1:
   257  000672  42                 	db	66	;'B'
   258  000673  4F                 	db	79	;'O'
   259  000674  4F                 	db	79	;'O'
   260  000675  54                 	db	84	;'T'
   261  000676  00                 	db	0
   262  000677                     __end_of__stringdata:
   263                           	opt stack 0
   264                           
   265                           ; #config settings
   266  000677  00                 	db	0	; dummy byte at the end
   267  0000                     
   268                           	psect	nvCOMRAM
   269  000046                     __pnvCOMRAM:
   270                           	opt stack 0
   271  000046                     _timer1ReloadVal:
   272                           	opt stack 0
   273  000046                     	ds	2
   274  000048                     _eusart1TxBufferRemaining:
   275                           	opt stack 0
   276  000048                     	ds	1
   277                           
   278                           	psect	cinit
   279  0025A4                     __pcinit:
   280                           	opt stack 0
   281  0025A4                     start_initialization:
   282                           	opt stack 0
   283  0025A4                     __initialization:
   284                           	opt stack 0
   285                           
   286                           ; Clear objects allocated to BANK1 (174 bytes)
   287  0025A4  EE01  F000         	lfsr	0,__pbssBANK1
   288  0025A8  0EAE               	movlw	174
   289  0025AA                     clear_0:
   290  0025AA  6AEE               	clrf	postinc0,c
   291  0025AC  06E8               	decf	wreg,f,c
   292  0025AE  E1FD               	bnz	clear_0
   293                           
   294                           ; Clear objects allocated to BANK0 (104 bytes)
   295  0025B0  EE00  F060         	lfsr	0,__pbssBANK0
   296  0025B4  0E68               	movlw	104
   297  0025B6                     clear_1:
   298  0025B6  6AEE               	clrf	postinc0,c
   299  0025B8  06E8               	decf	wreg,f,c
   300  0025BA  E1FD               	bnz	clear_1
   301                           
   302                           ; Clear objects allocated to COMRAM (16 bytes)
   303  0025BC  EE00  F036         	lfsr	0,__pbssCOMRAM
   304  0025C0  0E10               	movlw	16
   305  0025C2                     clear_2:
   306  0025C2  6AEE               	clrf	postinc0,c
   307  0025C4  06E8               	decf	wreg,f,c
   308  0025C6  E1FD               	bnz	clear_2
   309  0025C8                     end_of_initialization:
   310                           	opt stack 0
   311  0025C8                     __end_of__initialization:
   312                           	opt stack 0
   313  0025C8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   314  0025CA  6EF8               	movwf	tblptru,c
   315  0025CC  0100               	movlb	0
   316  0025CE  EF13  F008         	goto	_main	;jump to C main() function
   317                           tblptru	equ	0xFF8
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           
   321                           	psect	bssCOMRAM
   322  000036                     __pbssCOMRAM:
   323                           	opt stack 0
   324  000036                     _Current_Mean:
   325                           	opt stack 0
   326  000036                     	ds	3
   327  000039                     TMR1_ISR@CountCallBack:
   328                           	opt stack 0
   329  000039                     	ds	2
   330  00003B                     _ADC_Buffer_Point:
   331                           	opt stack 0
   332  00003B                     	ds	2
   333  00003D                     _Current_Aquire:
   334                           	opt stack 0
   335  00003D                     	ds	1
   336  00003E                     _Temp_Aquire:
   337                           	opt stack 0
   338  00003E                     	ds	1
   339  00003F                     _Volt_Aquire:
   340                           	opt stack 0
   341  00003F                     	ds	1
   342  000040                     _eusart1RxCount:
   343                           	opt stack 0
   344  000040                     	ds	1
   345  000041                     _eusart1RxHead:
   346                           	opt stack 0
   347  000041                     	ds	1
   348  000042                     _eusart1RxTail:
   349                           	opt stack 0
   350  000042                     	ds	1
   351  000043                     _eusart1TxHead:
   352                           	opt stack 0
   353  000043                     	ds	1
   354  000044                     _eusart1TxTail:
   355                           	opt stack 0
   356  000044                     	ds	1
   357  000045                     _fault_flag:
   358                           	opt stack 0
   359  000045                     	ds	1
   360                           tblptru	equ	0xFF8
   361                           postinc0	equ	0xFEE
   362                           wreg	equ	0xFE8
   363                           
   364                           	psect	bssBANK0
   365  000060                     __pbssBANK0:
   366                           	opt stack 0
   367  000060                     _Battery_Adc:
   368                           	opt stack 0
   369  000060                     	ds	20
   370  000074                     _Current_Adc:
   371                           	opt stack 0
   372  000074                     	ds	20
   373  000088                     _Battery_Current:
   374                           	opt stack 0
   375  000088                     	ds	15
   376  000097                     _eusart1RxBuffer:
   377                           	opt stack 0
   378  000097                     	ds	8
   379  00009F                     _eusart1TxBuffer:
   380                           	opt stack 0
   381  00009F                     	ds	8
   382  0000A7                     _fault:
   383                           	opt stack 0
   384  0000A7                     	ds	3
   385  0000AA                     _Current_Done:
   386                           	opt stack 0
   387  0000AA                     	ds	2
   388  0000AC                     _Temp_Done:
   389                           	opt stack 0
   390  0000AC                     	ds	2
   391  0000AE                     _Volt_Done:
   392                           	opt stack 0
   393  0000AE                     	ds	2
   394  0000B0                     _errno:
   395                           	opt stack 0
   396  0000B0                     	ds	2
   397  0000B2                     _CodeRuning:
   398                           	opt stack 0
   399  0000B2                     	ds	1
   400  0000B3                     _infault:
   401                           	opt stack 0
   402  0000B3                     	ds	1
   403  0000B4                     _Temp_Adc:
   404                           	opt stack 0
   405  0000B4                     	ds	20
   406                           tblptru	equ	0xFF8
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           
   410                           	psect	bssBANK1
   411  000100                     __pbssBANK1:
   412                           	opt stack 0
   413  000100                     _Battery_Volt:
   414                           	opt stack 0
   415  000100                     	ds	24
   416  000118                     _PrevBattery_Volt:
   417                           	opt stack 0
   418  000118                     	ds	24
   419  000130                     _PrevTemp_DegF:
   420                           	opt stack 0
   421  000130                     	ds	24
   422  000148                     _Temp_DegF:
   423                           	opt stack 0
   424  000148                     	ds	24
   425  000160                     _PrevBattery_Current:
   426                           	opt stack 0
   427  000160                     	ds	15
   428  00016F                     _TempBattery_Volt:
   429                           	opt stack 0
   430  00016F                     	ds	24
   431  000187                     _TmpTemp_DegF:
   432                           	opt stack 0
   433  000187                     	ds	24
   434  00019F                     _TempBattery_Current:
   435                           	opt stack 0
   436  00019F                     	ds	15
   437                           tblptru	equ	0xFF8
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           
   441                           	psect	cstackBANK1
   442  0001AE                     __pcstackBANK1:
   443                           	opt stack 0
   444  0001AE                     _Temp_Convert$1785:
   445                           	opt stack 0
   446                           
   447                           ; 3 bytes @ 0x0
   448  0001AE                     	ds	3
   449  0001B1                     _Temp_Convert$1786:
   450                           	opt stack 0
   451                           
   452                           ; 3 bytes @ 0x3
   453  0001B1                     	ds	3
   454  0001B4                     Temp_Convert@x:
   455                           	opt stack 0
   456                           
   457                           ; 2 bytes @ 0x6
   458  0001B4                     	ds	2
   459  0001B6                     Temp_Convert@steinhart:
   460                           	opt stack 0
   461                           
   462                           ; 3 bytes @ 0x8
   463  0001B6                     	ds	3
   464  0001B9                     main@next:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xB
   468  0001B9                     	ds	2
   469                           tblptru	equ	0xFF8
   470                           postinc0	equ	0xFEE
   471                           wreg	equ	0xFE8
   472                           
   473                           	psect	cstackBANK0
   474  0000C8                     __pcstackBANK0:
   475                           	opt stack 0
   476  0000C8                     ___ftdiv@cntr:
   477                           	opt stack 0
   478                           
   479                           ; 1 bytes @ 0x0
   480  0000C8                     	ds	1
   481  0000C9                     ___ftdiv@f3:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x1
   485  0000C9                     	ds	3
   486  0000CC                     ___ftdiv@exp:
   487                           	opt stack 0
   488                           
   489                           ; 1 bytes @ 0x4
   490  0000CC                     	ds	1
   491  0000CD                     ___ftdiv@sign:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x5
   495  0000CD                     	ds	1
   496  0000CE                     ?___ftmul:
   497                           	opt stack 0
   498  0000CE                     ___ftmul@f1:
   499                           	opt stack 0
   500                           
   501                           ; 3 bytes @ 0x6
   502  0000CE                     	ds	3
   503  0000D1                     ___ftmul@f2:
   504                           	opt stack 0
   505                           
   506                           ; 3 bytes @ 0x9
   507  0000D1                     	ds	3
   508  0000D4                     ___ftmul@exp:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0xC
   512  0000D4                     	ds	1
   513  0000D5                     ___ftmul@f3_as_product:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0xD
   517  0000D5                     	ds	3
   518  0000D8                     ___ftmul@cntr:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x10
   522  0000D8                     	ds	1
   523  0000D9                     ___ftmul@sign:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x11
   527  0000D9                     	ds	1
   528  0000DA                     ?___ftadd:
   529                           	opt stack 0
   530  0000DA                     ___ftadd@f1:
   531                           	opt stack 0
   532                           
   533                           ; 3 bytes @ 0x12
   534  0000DA                     	ds	3
   535  0000DD                     ___ftadd@f2:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x15
   539  0000DD                     	ds	3
   540  0000E0                     ??___ftadd:
   541                           
   542                           ; 0 bytes @ 0x18
   543  0000E0                     	ds	3
   544  0000E3                     ___ftadd@sign:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x1B
   548  0000E3                     	ds	1
   549  0000E4                     ___ftadd@exp2:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x1C
   553  0000E4                     	ds	1
   554  0000E5                     ___ftadd@exp1:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x1D
   558  0000E5                     	ds	1
   559  0000E6                     ?___ftsub:
   560                           	opt stack 0
   561  0000E6                     ?_eval_poly:
   562                           	opt stack 0
   563  0000E6                     Battery_Filter@x:
   564                           	opt stack 0
   565  0000E6                     Temp_Filter@x:
   566                           	opt stack 0
   567  0000E6                     Current_Filter@x:
   568                           	opt stack 0
   569  0000E6                     ___ftsub@f1:
   570                           	opt stack 0
   571  0000E6                     eval_poly@x:
   572                           	opt stack 0
   573                           
   574                           ; 3 bytes @ 0x1E
   575  0000E6                     	ds	2
   576  0000E8                     ??_Current_Convert:
   577  0000E8                     ??_Battery_Convert:
   578                           
   579                           ; 0 bytes @ 0x20
   580  0000E8                     	ds	1
   581  0000E9                     eval_poly@d:
   582                           	opt stack 0
   583  0000E9                     ___ftsub@f2:
   584                           	opt stack 0
   585                           
   586                           ; 3 bytes @ 0x21
   587  0000E9                     	ds	1
   588  0000EA                     Battery_Convert@x:
   589                           	opt stack 0
   590  0000EA                     _Current_Convert$1787:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x22
   594  0000EA                     	ds	1
   595  0000EB                     eval_poly@n:
   596                           	opt stack 0
   597                           
   598                           ; 2 bytes @ 0x23
   599  0000EB                     	ds	1
   600  0000EC                     Current_Convert@x:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x24
   604  0000EC                     	ds	1
   605  0000ED                     ??_eval_poly:
   606                           
   607                           ; 0 bytes @ 0x25
   608  0000ED                     	ds	2
   609  0000EF                     eval_poly@res:
   610                           	opt stack 0
   611                           
   612                           ; 3 bytes @ 0x27
   613  0000EF                     	ds	3
   614  0000F2                     ?_log:
   615                           	opt stack 0
   616  0000F2                     log@x:
   617                           	opt stack 0
   618                           
   619                           ; 3 bytes @ 0x2A
   620  0000F2                     	ds	3
   621  0000F5                     log@exponent:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x2D
   625  0000F5                     	ds	2
   626  0000F7                     ??_Temp_Convert:
   627                           
   628                           ; 0 bytes @ 0x2F
   629  0000F7                     	ds	2
   630  0000F9                     
   631                           ; 2 bytes @ 0x31
   632  0000F9                     	ds	2
   633  0000FB                     
   634                           ; 3 bytes @ 0x33
   635  0000FB                     	ds	3
   636  0000FE                     ??_main:
   637                           
   638                           ; 0 bytes @ 0x36
   639  0000FE                     	ds	2
   640                           tblptru	equ	0xFF8
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           
   644                           	psect	cstackCOMRAM
   645  000001                     __pcstackCOMRAM:
   646                           	opt stack 0
   647  000001                     ??_ADC_StartConversion:
   648  000001                     ??_ADC_GetConversion:
   649  000001                     ?_ADC_GetConversionResult:
   650                           	opt stack 0
   651  000001                     Set_4051@Channel:
   652                           	opt stack 0
   653                           
   654                           ; 2 bytes @ 0x0
   655  000001                     	ds	1
   656  000002                     ADC_StartConversion@channel:
   657                           	opt stack 0
   658  000002                     ADC_GetConversion@channel:
   659                           	opt stack 0
   660                           
   661                           ; 1 bytes @ 0x1
   662  000002                     	ds	1
   663  000003                     ??_TMR1_ISR:
   664  000003                     ??_ADC_GetConversionResult:
   665  000003                     Set_4051@enable:
   666                           	opt stack 0
   667                           
   668                           ; 1 bytes @ 0x2
   669  000003                     	ds	1
   670  000004                     ??_Set_4051:
   671                           
   672                           ; 0 bytes @ 0x3
   673  000004                     	ds	2
   674  000006                     ??_ADC_ISR:
   675                           
   676                           ; 0 bytes @ 0x5
   677  000006                     	ds	2
   678  000008                     ADC_ISR@ADC_Result:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x7
   682  000008                     	ds	2
   683  00000A                     ??_INTERRUPT_InterruptManager:
   684                           
   685                           ; 0 bytes @ 0x9
   686  00000A                     	ds	14
   687  000018                     ?___awdiv:
   688                           	opt stack 0
   689  000018                     ?___ftpack:
   690                           	opt stack 0
   691  000018                     ?_frexp:
   692                           	opt stack 0
   693  000018                     EUSART1_Write@txData:
   694                           	opt stack 0
   695  000018                     Delay@wait:
   696                           	opt stack 0
   697  000018                     SetBypas@pin:
   698                           	opt stack 0
   699  000018                     ___awdiv@dividend:
   700                           	opt stack 0
   701  000018                     ___ftpack@arg:
   702                           	opt stack 0
   703  000018                     frexp@value:
   704                           	opt stack 0
   705                           
   706                           ; 3 bytes @ 0x17
   707  000018                     	ds	1
   708  000019                     putch@txData:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x18
   712  000019                     	ds	1
   713  00001A                     ??_Delay:
   714  00001A                     ?_printf:
   715                           	opt stack 0
   716  00001A                     SetBypas@state:
   717                           	opt stack 0
   718  00001A                     printf@f:
   719                           	opt stack 0
   720  00001A                     ___awdiv@divisor:
   721                           	opt stack 0
   722                           
   723                           ; 2 bytes @ 0x19
   724  00001A                     	ds	1
   725  00001B                     ___ftpack@exp:
   726                           	opt stack 0
   727  00001B                     Delay@x:
   728                           	opt stack 0
   729  00001B                     frexp@eptr:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x1A
   733  00001B                     	ds	1
   734  00001C                     ??_SetBypas:
   735  00001C                     ___awdiv@counter:
   736                           	opt stack 0
   737  00001C                     ___ftpack@sign:
   738                           	opt stack 0
   739  00001C                     printf@ap:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x1B
   743  00001C                     	ds	1
   744  00001D                     ??___ftpack:
   745  00001D                     ??_frexp:
   746  00001D                     ___awdiv@sign:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x1C
   750  00001D                     	ds	1
   751  00001E                     printf@c:
   752                           	opt stack 0
   753  00001E                     ___awdiv@quotient:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x1D
   757  00001E                     	ds	2
   758  000020                     ?___wmul:
   759                           	opt stack 0
   760  000020                     ___wmul@multiplier:
   761                           	opt stack 0
   762                           
   763                           ; 2 bytes @ 0x1F
   764  000020                     	ds	2
   765  000022                     ___wmul@multiplicand:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x21
   769  000022                     	ds	2
   770  000024                     ___wmul@product:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x23
   774  000024                     	ds	2
   775  000026                     ?_Battery_Get:
   776                           	opt stack 0
   777  000026                     ?___awtoft:
   778                           	opt stack 0
   779  000026                     Battery_Get@channelnum:
   780                           	opt stack 0
   781  000026                     ___awtoft@c:
   782                           	opt stack 0
   783  000026                     ___ftge@ff1:
   784                           	opt stack 0
   785                           
   786                           ; 3 bytes @ 0x25
   787  000026                     	ds	3
   788  000029                     ___awtoft@sign:
   789                           	opt stack 0
   790  000029                     ___ftge@ff2:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x28
   794  000029                     	ds	1
   795  00002A                     ?___ftdiv:
   796                           	opt stack 0
   797  00002A                     ___ftdiv@f1:
   798                           	opt stack 0
   799                           
   800                           ; 3 bytes @ 0x29
   801  00002A                     	ds	2
   802  00002C                     ??___ftge:
   803                           
   804                           ; 0 bytes @ 0x2B
   805  00002C                     	ds	1
   806  00002D                     ___ftdiv@f2:
   807                           	opt stack 0
   808                           
   809                           ; 3 bytes @ 0x2C
   810  00002D                     	ds	2
   811  00002F                     Battery_Fault@fault:
   812                           	opt stack 0
   813  00002F                     Temp_Fault@fault:
   814                           	opt stack 0
   815  00002F                     Current_Fault@fault:
   816                           	opt stack 0
   817  00002F                     RunBypas@cellbyp:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x2E
   821  00002F                     	ds	1
   822  000030                     ??___ftdiv:
   823  000030                     Battery_Fault@i:
   824                           	opt stack 0
   825  000030                     Temp_Fault@i:
   826                           	opt stack 0
   827  000030                     Current_Fault@i:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x2F
   831  000030                     	ds	1
   832  000031                     RunBypas@batvolt:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x30
   836  000031                     	ds	2
   837  000033                     ??___ftmul:
   838                           
   839                           ; 0 bytes @ 0x32
   840  000033                     	ds	1
   841  000034                     RunBypas@i:
   842                           	opt stack 0
   843                           
   844                           ; 2 bytes @ 0x33
   845  000034                     	ds	2
   846  000036                     tblptru	equ	0xFF8
   847                           postinc0	equ	0xFEE
   848                           wreg	equ	0xFE8
   849                           
   850                           ; 0 bytes @ 0x35
   851 ;;
   852 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   853 ;;
   854 ;; *************** function _main *****************
   855 ;; Defined at:
   856 ;;		line 36 in file "Main.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;  argc            2   49[BANK0 ] int 
   859 ;;  argv            3   51[BANK0 ] PTR PTR unsigned char 
   860 ;; Auto vars:     Size  Location     Type
   861 ;;  next            2   11[BANK1 ] int 
   862 ;; Return value:  Size  Location     Type
   863 ;;                  2   49[BANK0 ] int 
   864 ;; Registers used:
   865 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   866 ;; Tracked objects:
   867 ;;		On entry : 0/0
   868 ;;		On exit  : 0/0
   869 ;;		Unchanged: 0/0
   870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   871 ;;      Params:         0       5       0       0       0       0       0
   872 ;;      Locals:         0       0       2       0       0       0       0
   873 ;;      Temps:          0       2       0       0       0       0       0
   874 ;;      Totals:         0       7       2       0       0       0       0
   875 ;;Total ram usage:        9 bytes
   876 ;; Hardware stack levels required when called:    9
   877 ;; This function calls:
   878 ;;		_Battery_Convert
   879 ;;		_Battery_Fault
   880 ;;		_Current_Convert
   881 ;;		_Current_Fault
   882 ;;		_Delay
   883 ;;		_RunBypas
   884 ;;		_SYSTEM_Initialize
   885 ;;		_Temp_Convert
   886 ;;		_Temp_Fault
   887 ;;		_printf
   888 ;; This function is called by:
   889 ;;		Startup code after reset
   890 ;; This function uses a non-reentrant model
   891 ;;
   892                           
   893                           	psect	text0
   894  001026                     __ptext0:
   895                           	opt stack 0
   896  001026                     _main:
   897                           	opt stack 22
   898                           
   899                           ;Main.c: 38: SYSTEM_Initialize();
   900                           
   901                           ;incstack = 0
   902  001026  EC48  F013         	call	_SYSTEM_Initialize	;wreg free
   903                           
   904                           ;Main.c: 40: do { LATD3 = 1; } while(0);
   905  00102A  868C               	bsf	3980,3,c	;volatile
   906                           
   907                           ;Main.c: 41: Delay(120);
   908  00102C  0E00               	movlw	0
   909  00102E  6E19               	movwf	Delay@wait+1,c
   910  001030  0E78               	movlw	120
   911  001032  6E18               	movwf	Delay@wait,c
   912  001034  ECE9  F012         	call	_Delay	;wreg free
   913                           
   914                           ;Main.c: 42: do { LATD3 = 0; } while(0);
   915  001038  968C               	bcf	3980,3,c	;volatile
   916                           
   917                           ;Main.c: 60: (INTCONbits.GIE = 1);
   918  00103A  8EF2               	bsf	intcon,7,c	;volatile
   919                           
   920                           ;Main.c: 63: (INTCONbits.PEIE = 1);
   921  00103C  8CF2               	bsf	intcon,6,c	;volatile
   922                           
   923                           ;Main.c: 72: LATCbits.LATC5 =1;
   924  00103E  8A8B               	bsf	3979,5,c	;volatile
   925                           
   926                           ;Main.c: 73: printf("BOOT");
   927  001040  0E06               	movlw	high STR_1
   928  001042  6E1B               	movwf	printf@f+1,c
   929  001044  0E72               	movlw	low STR_1
   930  001046  6E1A               	movwf	printf@f,c
   931  001048  ECFF  F012         	call	_printf	;wreg free
   932  00104C                     l4264:
   933                           
   934                           ;Main.c: 75: {
   935                           ;Main.c: 76: if (Temp_Done)
   936  00104C  0100               	movlb	0	; () banked
   937  00104E  51AD               	movf	(_Temp_Done+1)& (0+255),w,b
   938  001050  11AC               	iorwf	_Temp_Done& (0+255),w,b
   939  001052  B4D8               	btfsc	status,2,c
   940  001054  D00F               	goto	l4274
   941                           
   942                           ; BSR set to: 0
   943                           ;Main.c: 77: {
   944                           ;Main.c: 78: Temp_Done = 0;
   945  001056  0E00               	movlw	0
   946  001058  0100               	movlb	0	; () banked
   947  00105A  6FAD               	movwf	(_Temp_Done+1)& (0+255),b
   948  00105C  0E00               	movlw	0
   949  00105E  0100               	movlb	0	; () banked
   950  001060  6FAC               	movwf	_Temp_Done& (0+255),b
   951                           
   952                           ; BSR set to: 0
   953                           ;Main.c: 79: Temp_Convert();
   954  001062  ECF1  F006         	call	_Temp_Convert	;wreg free
   955                           
   956                           ;Main.c: 80: fault[0] = Temp_Fault();
   957  001066  EC89  F011         	call	_Temp_Fault	;wreg free
   958  00106A  0100               	movlb	0	; () banked
   959  00106C  6FA7               	movwf	_fault& (0+255),b
   960                           
   961                           ; BSR set to: 0
   962                           ;Main.c: 87: CodeRuning = 0;
   963  00106E  0E00               	movlw	0
   964  001070  0100               	movlb	0	; () banked
   965  001072  6FB2               	movwf	_CodeRuning& (0+255),b
   966  001074                     l4274:
   967                           
   968                           ; BSR set to: 0
   969                           ;Main.c: 88: }
   970                           ;Main.c: 90: if (Volt_Done)
   971  001074  0100               	movlb	0	; () banked
   972  001076  51AF               	movf	(_Volt_Done+1)& (0+255),w,b
   973  001078  11AE               	iorwf	_Volt_Done& (0+255),w,b
   974  00107A  B4D8               	btfsc	status,2,c
   975  00107C  D011               	goto	l4286
   976                           
   977                           ; BSR set to: 0
   978                           ;Main.c: 91: {
   979                           ;Main.c: 92: Volt_Done = 0;
   980  00107E  0E00               	movlw	0
   981  001080  0100               	movlb	0	; () banked
   982  001082  6FAF               	movwf	(_Volt_Done+1)& (0+255),b
   983  001084  0E00               	movlw	0
   984  001086  0100               	movlb	0	; () banked
   985  001088  6FAE               	movwf	_Volt_Done& (0+255),b
   986                           
   987                           ; BSR set to: 0
   988                           ;Main.c: 93: Battery_Convert();
   989  00108A  EC52  F00E         	call	_Battery_Convert	;wreg free
   990                           
   991                           ;Main.c: 94: fault[1] = Battery_Fault();
   992  00108E  EC1D  F00F         	call	_Battery_Fault	;wreg free
   993  001092  0100               	movlb	0	; () banked
   994  001094  6FA8               	movwf	(_fault+1)& (0+255),b
   995                           
   996                           ; BSR set to: 0
   997                           ;Main.c: 101: RunBypas();
   998  001096  ECB8  F00E         	call	_RunBypas	;wreg free
   999                           
  1000                           ;Main.c: 102: CodeRuning = 0;
  1001  00109A  0E00               	movlw	0
  1002  00109C  0100               	movlb	0	; () banked
  1003  00109E  6FB2               	movwf	_CodeRuning& (0+255),b
  1004  0010A0                     l4286:
  1005                           
  1006                           ; BSR set to: 0
  1007                           ;Main.c: 103: }
  1008                           ;Main.c: 105: if (Current_Done)
  1009  0010A0  0100               	movlb	0	; () banked
  1010  0010A2  51AB               	movf	(_Current_Done+1)& (0+255),w,b
  1011  0010A4  11AA               	iorwf	_Current_Done& (0+255),w,b
  1012  0010A6  B4D8               	btfsc	status,2,c
  1013  0010A8  D00F               	goto	l4296
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;Main.c: 106: {
  1017                           ;Main.c: 107: Current_Done = 0;
  1018  0010AA  0E00               	movlw	0
  1019  0010AC  0100               	movlb	0	; () banked
  1020  0010AE  6FAB               	movwf	(_Current_Done+1)& (0+255),b
  1021  0010B0  0E00               	movlw	0
  1022  0010B2  0100               	movlb	0	; () banked
  1023  0010B4  6FAA               	movwf	_Current_Done& (0+255),b
  1024                           
  1025                           ; BSR set to: 0
  1026                           ;Main.c: 108: Current_Convert();
  1027  0010B6  ECE5  F00D         	call	_Current_Convert	;wreg free
  1028                           
  1029                           ;Main.c: 109: fault[2] = Current_Fault();
  1030  0010BA  EC74  F010         	call	_Current_Fault	;wreg free
  1031  0010BE  0100               	movlb	0	; () banked
  1032  0010C0  6FA9               	movwf	(_fault+2)& (0+255),b
  1033                           
  1034                           ; BSR set to: 0
  1035                           ;Main.c: 113: CodeRuning = 0;
  1036  0010C2  0E00               	movlw	0
  1037  0010C4  0100               	movlb	0	; () banked
  1038  0010C6  6FB2               	movwf	_CodeRuning& (0+255),b
  1039  0010C8                     l4296:
  1040                           
  1041                           ; BSR set to: 0
  1042                           ;Main.c: 114: }
  1043                           ;Main.c: 116: if(((fault[0] == 1) || (fault[1] == 1) || (fault[2] == 1)) && (infault == 
      +                          0))
  1044  0010C8  0100               	movlb	0	; () banked
  1045  0010CA  05A7               	decf	_fault& (0+255),w,b
  1046  0010CC  B4D8               	btfsc	status,2,c
  1047  0010CE  D008               	goto	l524
  1048                           
  1049                           ; BSR set to: 0
  1050  0010D0  0100               	movlb	0	; () banked
  1051  0010D2  05A8               	decf	(_fault+1)& (0+255),w,b
  1052  0010D4  B4D8               	btfsc	status,2,c
  1053  0010D6  D004               	goto	l524
  1054                           
  1055                           ; BSR set to: 0
  1056  0010D8  0100               	movlb	0	; () banked
  1057  0010DA  05A9               	decf	(_fault+2)& (0+255),w,b
  1058  0010DC  A4D8               	btfss	status,2,c
  1059  0010DE  D01A               	goto	l4314
  1060  0010E0                     l524:
  1061                           
  1062                           ; BSR set to: 0
  1063  0010E0  0100               	movlb	0	; () banked
  1064  0010E2  67B3               	tstfsz	_infault& (0+255),b
  1065  0010E4  D017               	goto	l4314
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;Main.c: 117: {
  1069                           ;Main.c: 119: infault = 1;
  1070  0010E6  0E01               	movlw	1
  1071  0010E8  0100               	movlb	0	; () banked
  1072  0010EA  6FB3               	movwf	_infault& (0+255),b
  1073                           
  1074                           ; BSR set to: 0
  1075                           
  1076                           ; BSR set to: 0
  1077                           
  1078                           ;Main.c: 120: do { LATD2 = 1; } while(0);
  1079  0010EC  848C               	bsf	3980,2,c	;volatile
  1080                           
  1081                           ; BSR set to: 0
  1082                           ;Main.c: 121: Delay(40);
  1083                           
  1084                           ; BSR set to: 0
  1085  0010EE  0E00               	movlw	0
  1086  0010F0  6E19               	movwf	Delay@wait+1,c
  1087  0010F2  0E28               	movlw	40
  1088  0010F4  6E18               	movwf	Delay@wait,c
  1089  0010F6  ECE9  F012         	call	_Delay	;wreg free
  1090                           
  1091                           ;Main.c: 122: do { LATD2 = 0; } while(0);
  1092  0010FA  948C               	bcf	3980,2,c	;volatile
  1093                           
  1094                           ;Main.c: 123: Delay(40);
  1095  0010FC  0E00               	movlw	0
  1096  0010FE  6E19               	movwf	Delay@wait+1,c
  1097  001100  0E28               	movlw	40
  1098  001102  6E18               	movwf	Delay@wait,c
  1099  001104  ECE9  F012         	call	_Delay	;wreg free
  1100                           
  1101                           ;Main.c: 124: printf("FAULT START \r\n");
  1102  001108  0E06               	movlw	high STR_2
  1103  00110A  6E1B               	movwf	printf@f+1,c
  1104  00110C  0E43               	movlw	low STR_2
  1105  00110E  6E1A               	movwf	printf@f,c
  1106  001110  ECFF  F012         	call	_printf	;wreg free
  1107  001114                     l4314:
  1108                           
  1109                           ;Main.c: 125: }
  1110                           ;Main.c: 127: if(((fault[0] == 0) && (fault[1] == 0) && (fault[2] == 0)) && (infault == 
      +                          1))
  1111  001114  0100               	movlb	0	; () banked
  1112  001116  67A7               	tstfsz	_fault& (0+255),b
  1113  001118  D021               	goto	l4334
  1114                           
  1115                           ; BSR set to: 0
  1116  00111A  0100               	movlb	0	; () banked
  1117  00111C  67A8               	tstfsz	(_fault+1)& (0+255),b
  1118  00111E  D01E               	goto	l4334
  1119                           
  1120                           ; BSR set to: 0
  1121  001120  0100               	movlb	0	; () banked
  1122  001122  67A9               	tstfsz	(_fault+2)& (0+255),b
  1123  001124  D01B               	goto	l4334
  1124                           
  1125                           ; BSR set to: 0
  1126  001126  0100               	movlb	0	; () banked
  1127  001128  05B3               	decf	_infault& (0+255),w,b
  1128  00112A  A4D8               	btfss	status,2,c
  1129  00112C  D017               	goto	l4334
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;Main.c: 128: {
  1133                           ;Main.c: 130: infault = 0;
  1134  00112E  0E00               	movlw	0
  1135  001130  0100               	movlb	0	; () banked
  1136  001132  6FB3               	movwf	_infault& (0+255),b
  1137                           
  1138                           ; BSR set to: 0
  1139                           
  1140                           ; BSR set to: 0
  1141                           
  1142                           ;Main.c: 131: do { LATD3 = 1; } while(0);
  1143  001134  868C               	bsf	3980,3,c	;volatile
  1144                           
  1145                           ; BSR set to: 0
  1146                           ;Main.c: 132: Delay(40);
  1147                           
  1148                           ; BSR set to: 0
  1149  001136  0E00               	movlw	0
  1150  001138  6E19               	movwf	Delay@wait+1,c
  1151  00113A  0E28               	movlw	40
  1152  00113C  6E18               	movwf	Delay@wait,c
  1153  00113E  ECE9  F012         	call	_Delay	;wreg free
  1154                           
  1155                           ;Main.c: 133: do { LATD3 = 0; } while(0);
  1156  001142  968C               	bcf	3980,3,c	;volatile
  1157                           
  1158                           ;Main.c: 134: Delay(40);
  1159  001144  0E00               	movlw	0
  1160  001146  6E19               	movwf	Delay@wait+1,c
  1161  001148  0E28               	movlw	40
  1162  00114A  6E18               	movwf	Delay@wait,c
  1163  00114C  ECE9  F012         	call	_Delay	;wreg free
  1164                           
  1165                           ;Main.c: 135: printf("FAULT CLEARED \r\n");
  1166  001150  0E06               	movlw	high STR_3
  1167  001152  6E1B               	movwf	printf@f+1,c
  1168  001154  0E32               	movlw	low STR_3
  1169  001156  6E1A               	movwf	printf@f,c
  1170  001158  ECFF  F012         	call	_printf	;wreg free
  1171  00115C                     l4334:
  1172                           
  1173                           ;Main.c: 136: }
  1174                           ;Main.c: 139: if(infault == 1)
  1175  00115C  0100               	movlb	0	; () banked
  1176  00115E  05B3               	decf	_infault& (0+255),w,b
  1177  001160  A4D8               	btfss	status,2,c
  1178  001162  D072               	goto	l4366
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;Main.c: 140: {
  1182                           ;Main.c: 141: printf("Fault:");
  1183  001164  0E06               	movlw	high STR_4
  1184  001166  6E1B               	movwf	printf@f+1,c
  1185  001168  0E6B               	movlw	low STR_4
  1186  00116A  6E1A               	movwf	printf@f,c
  1187  00116C  ECFF  F012         	call	_printf	;wreg free
  1188                           
  1189                           ;Main.c: 142: for(int next = 0 ; next < 3; next++ )
  1190  001170  0E00               	movlw	0
  1191  001172  0101               	movlb	1	; () banked
  1192  001174  6FBA               	movwf	(main@next+1)& (0+255),b
  1193  001176  0E00               	movlw	0
  1194  001178  0101               	movlb	1	; () banked
  1195  00117A  6FB9               	movwf	main@next& (0+255),b
  1196  00117C                     
  1197                           ; BSR set to: 1
  1198  00117C  0101               	movlb	1	; () banked
  1199  00117E  51BA               	movf	(main@next+1)& (0+255),w,b
  1200  001180  0A80               	xorlw	128
  1201  001182  0F80               	addlw	-128
  1202  001184  0E03               	movlw	3
  1203  001186  B4D8               	btfsc	status,2,c
  1204  001188  5DB9               	subwf	main@next& (0+255),w,b
  1205  00118A  B0D8               	btfsc	status,0,c
  1206  00118C  D057               	goto	l4364
  1207  00118E  D03C               	goto	l4358
  1208  001190                     l4344:
  1209                           
  1210                           ;Main.c: 147: if(fault[next] == 1)
  1211  001190  0100               	movlb	0	; () banked
  1212  001192  0EA7               	movlw	low _fault
  1213  001194  0101               	movlb	1	; () banked
  1214  001196  25B9               	addwf	main@next& (0+255),w,b
  1215  001198  6ED9               	movwf	fsr2l,c
  1216  00119A  0100               	movlb	0	; () banked
  1217  00119C  0E00               	movlw	high _fault
  1218  00119E  0101               	movlb	1	; () banked
  1219  0011A0  21BA               	addwfc	(main@next+1)& (0+255),w,b
  1220  0011A2  6EDA               	movwf	fsr2h,c
  1221  0011A4  0E01               	movlw	1
  1222  0011A6  62DF               	cpfseq	indf2,c
  1223  0011A8  D045               	goto	l4360
  1224                           
  1225                           ; BSR set to: 1
  1226                           ;Main.c: 148: {
  1227                           ;Main.c: 149: printf(" Over Temp");
  1228  0011AA  0E06               	movlw	high STR_5
  1229  0011AC  6E1B               	movwf	printf@f+1,c
  1230  0011AE  0E60               	movlw	low STR_5
  1231  0011B0  6E1A               	movwf	printf@f,c
  1232  0011B2  ECFF  F012         	call	_printf	;wreg free
  1233  0011B6  D03E               	goto	l4360
  1234  0011B8                     l4348:
  1235                           
  1236                           ;Main.c: 153: if(fault[next] == 1)
  1237  0011B8  0100               	movlb	0	; () banked
  1238  0011BA  0EA7               	movlw	low _fault
  1239  0011BC  0101               	movlb	1	; () banked
  1240  0011BE  25B9               	addwf	main@next& (0+255),w,b
  1241  0011C0  6ED9               	movwf	fsr2l,c
  1242  0011C2  0100               	movlb	0	; () banked
  1243  0011C4  0E00               	movlw	high _fault
  1244  0011C6  0101               	movlb	1	; () banked
  1245  0011C8  21BA               	addwfc	(main@next+1)& (0+255),w,b
  1246  0011CA  6EDA               	movwf	fsr2h,c
  1247  0011CC  0E01               	movlw	1
  1248  0011CE  62DF               	cpfseq	indf2,c
  1249  0011D0  D031               	goto	l4360
  1250                           
  1251                           ; BSR set to: 1
  1252                           ;Main.c: 154: {
  1253                           ;Main.c: 155: printf(" Over / under voltage");
  1254  0011D2  0E06               	movlw	high STR_6
  1255  0011D4  6E1B               	movwf	printf@f+1,c
  1256  0011D6  0E1C               	movlw	low STR_6
  1257  0011D8  6E1A               	movwf	printf@f,c
  1258  0011DA  ECFF  F012         	call	_printf	;wreg free
  1259  0011DE  D02A               	goto	l4360
  1260  0011E0                     l4352:
  1261                           
  1262                           ;Main.c: 159: if(fault[next] == 1)
  1263  0011E0  0100               	movlb	0	; () banked
  1264  0011E2  0EA7               	movlw	low _fault
  1265  0011E4  0101               	movlb	1	; () banked
  1266  0011E6  25B9               	addwf	main@next& (0+255),w,b
  1267  0011E8  6ED9               	movwf	fsr2l,c
  1268  0011EA  0100               	movlb	0	; () banked
  1269  0011EC  0E00               	movlw	high _fault
  1270  0011EE  0101               	movlb	1	; () banked
  1271  0011F0  21BA               	addwfc	(main@next+1)& (0+255),w,b
  1272  0011F2  6EDA               	movwf	fsr2h,c
  1273  0011F4  0E01               	movlw	1
  1274  0011F6  62DF               	cpfseq	indf2,c
  1275  0011F8  D01D               	goto	l4360
  1276                           
  1277                           ; BSR set to: 1
  1278                           ;Main.c: 160: {
  1279                           ;Main.c: 161: printf(" Over current");
  1280  0011FA  0E06               	movlw	high STR_7
  1281  0011FC  6E1B               	movwf	printf@f+1,c
  1282  0011FE  0E52               	movlw	low STR_7
  1283  001200  6E1A               	movwf	printf@f,c
  1284  001202  ECFF  F012         	call	_printf	;wreg free
  1285  001206  D016               	goto	l4360
  1286  001208                     l4358:
  1287  001208  0101               	movlb	1	; () banked
  1288  00120A  C1B9  F0FE         	movff	main@next,??_main
  1289  00120E  0101               	movlb	1	; () banked
  1290  001210  C1BA  F0FF         	movff	main@next+1,??_main+1
  1291                           
  1292                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1293                           ; Switch size 1, requested type "space"
  1294                           ; Number of cases is 1, Range of values is 0 to 0
  1295                           ; switch strategies available:
  1296                           ; Name         Instructions Cycles
  1297                           ; simple_byte            4     3 (average)
  1298                           ;	Chosen strategy is simple_byte
  1299  001214  0100               	movlb	0	; () banked
  1300  001216  51FF               	movf	(??_main+1)& (0+255),w,b
  1301  001218  0A00               	xorlw	0	; case 0
  1302  00121A  A4D8               	btfss	status,2,c
  1303  00121C  D00B               	goto	l4360
  1304                           
  1305                           ; BSR set to: 0
  1306                           ; Switch size 1, requested type "space"
  1307                           ; Number of cases is 3, Range of values is 0 to 2
  1308                           ; switch strategies available:
  1309                           ; Name         Instructions Cycles
  1310                           ; simple_byte           10     6 (average)
  1311                           ;	Chosen strategy is simple_byte
  1312  00121E  0100               	movlb	0	; () banked
  1313  001220  51FE               	movf	??_main& (0+255),w,b
  1314  001222  0A00               	xorlw	0	; case 0
  1315  001224  B4D8               	btfsc	status,2,c
  1316  001226  D7B4               	goto	l4344
  1317  001228  0A01               	xorlw	1	; case 1
  1318  00122A  B4D8               	btfsc	status,2,c
  1319  00122C  D7C5               	goto	l4348
  1320  00122E  0A03               	xorlw	3	; case 2
  1321  001230  B4D8               	btfsc	status,2,c
  1322  001232  D7D6               	goto	l4352
  1323  001234                     l4360:
  1324  001234  0101               	movlb	1	; () banked
  1325  001236  4BB9               	infsnz	main@next& (0+255),f,b
  1326  001238  2BBA               	incf	(main@next+1)& (0+255),f,b
  1327  00123A  D7A0               	goto	L1
  1328  00123C                     l4364:
  1329                           
  1330                           ; BSR set to: 1
  1331                           ;Main.c: 165: }
  1332                           ;Main.c: 166: printf(" \r\n");
  1333  00123C  0E06               	movlw	high (STR_3+13)
  1334  00123E  6E1B               	movwf	printf@f+1,c
  1335  001240  0E3F               	movlw	low (STR_3+13)
  1336  001242  6E1A               	movwf	printf@f,c
  1337  001244  ECFF  F012         	call	_printf	;wreg free
  1338  001248                     l4366:
  1339                           
  1340                           ;Main.c: 167: }
  1341                           ;Main.c: 169: if(!infault && (CodeRuning == 0))
  1342  001248  0100               	movlb	0	; () banked
  1343  00124A  67B3               	tstfsz	_infault& (0+255),b
  1344  00124C  D6FF               	goto	l4264
  1345                           
  1346                           ; BSR set to: 0
  1347  00124E  0100               	movlb	0	; () banked
  1348  001250  67B2               	tstfsz	_CodeRuning& (0+255),b
  1349  001252  D6FC               	goto	l4264
  1350                           
  1351                           ; BSR set to: 0
  1352  001254  0003               	sleep		;# 
  1353  001256  D6FA               	goto	l4264
  1354  001258                     __end_of_main:
  1355                           	opt stack 0
  1356                           tblptru	equ	0xFF8
  1357                           intcon	equ	0xFF2
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           indf2	equ	0xFDF
  1361                           fsr2h	equ	0xFDA
  1362                           fsr2l	equ	0xFD9
  1363                           status	equ	0xFD8
  1364                           
  1365 ;; *************** function _printf *****************
  1366 ;; Defined at:
  1367 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  f               2   25[COMRAM] PTR const unsigned char 
  1370 ;;		 -> STR_8(4), STR_7(14), STR_6(22), STR_5(11), 
  1371 ;;		 -> STR_4(7), STR_3(17), STR_2(15), STR_1(5), 
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;  _val            5    0        struct .
  1374 ;;  ap              2   27[COMRAM] PTR void [1]
  1375 ;;		 -> ?_printf(2), 
  1376 ;;  c               1   29[COMRAM] char 
  1377 ;;  flag            1    0        unsigned char 
  1378 ;;  prec            1    0        char 
  1379 ;; Return value:  Size  Location     Type
  1380 ;;                  2   25[COMRAM] int 
  1381 ;; Registers used:
  1382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1383 ;; Tracked objects:
  1384 ;;		On entry : 0/0
  1385 ;;		On exit  : 0/0
  1386 ;;		Unchanged: 0/0
  1387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1388 ;;      Params:         2       0       0       0       0       0       0
  1389 ;;      Locals:         3       0       0       0       0       0       0
  1390 ;;      Temps:          0       0       0       0       0       0       0
  1391 ;;      Totals:         5       0       0       0       0       0       0
  1392 ;;Total ram usage:        5 bytes
  1393 ;; Hardware stack levels used:    1
  1394 ;; Hardware stack levels required when called:    6
  1395 ;; This function calls:
  1396 ;;		_putch
  1397 ;; This function is called by:
  1398 ;;		_main
  1399 ;; This function uses a non-reentrant model
  1400 ;;
  1401                           
  1402                           	psect	text1
  1403  0025FE                     __ptext1:
  1404                           	opt stack 0
  1405  0025FE                     _printf:
  1406                           	opt stack 24
  1407                           
  1408                           ;doprnt.c: 466: va_list ap;
  1409                           ;doprnt.c: 499: signed char c;
  1410                           ;doprnt.c: 506: signed char prec;
  1411                           ;doprnt.c: 508: unsigned char flag;
  1412                           ;doprnt.c: 527: union {
  1413                           ;doprnt.c: 528: unsigned int _val;
  1414                           ;doprnt.c: 529: struct {
  1415                           ;doprnt.c: 530: const char * _cp;
  1416                           ;doprnt.c: 531: unsigned _len;
  1417                           ;doprnt.c: 532: } _str;
  1418                           ;doprnt.c: 533: } _val;
  1419                           ;doprnt.c: 542: *ap = __va_start();
  1420                           
  1421                           ;incstack = 0
  1422  0025FE  0E00               	movlw	high (?_printf+2)
  1423  002600  6E1D               	movwf	printf@ap+1,c
  1424  002602  0E1C               	movlw	low (?_printf+2)
  1425  002604  6E1C               	movwf	printf@ap,c
  1426                           
  1427                           ;doprnt.c: 545: while(c = *f++) {
  1428  002606  D003               	goto	l4182
  1429  002608                     l4180:
  1430                           
  1431                           ;doprnt.c: 549: {
  1432                           ;doprnt.c: 550: (putch(c) );
  1433  002608  501E               	movf	printf@c,w,c
  1434  00260A  ECA9  F013         	call	_putch
  1435  00260E                     l4182:
  1436  00260E  C01A  FFF6         	movff	printf@f,tblptrl
  1437  002612  C01B  FFF7         	movff	printf@f+1,tblptrh
  1438  002616  4A1A               	infsnz	printf@f,f,c
  1439  002618  2A1B               	incf	printf@f+1,f,c
  1440  00261A                     	if	0	;tblptru may be non-zero
  1441  00261A                     	endif
  1442  00261A                     	if	0	;tblptru may be non-zero
  1443  00261A                     	endif
  1444  00261A  0008               	tblrd		*
  1445  00261C  CFF5 F01E          	movff	tablat,printf@c
  1446  002620  661E               	tstfsz	printf@c& (0+255),c
  1447  002622  D7F2               	goto	l4180
  1448  002624  0012               	return	
  1449  002626                     __end_of_printf:
  1450                           	opt stack 0
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           intcon	equ	0xFF2
  1456                           postinc0	equ	0xFEE
  1457                           wreg	equ	0xFE8
  1458                           indf2	equ	0xFDF
  1459                           fsr2h	equ	0xFDA
  1460                           fsr2l	equ	0xFD9
  1461                           status	equ	0xFD8
  1462                           
  1463 ;; *************** function _putch *****************
  1464 ;; Defined at:
  1465 ;;		line 151 in file "mcc_generated_files/eusart1.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;  txData          1    wreg     unsigned char 
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  txData          1   24[COMRAM] unsigned char 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;		None               void
  1472 ;; Registers used:
  1473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1479 ;;      Params:         0       0       0       0       0       0       0
  1480 ;;      Locals:         1       0       0       0       0       0       0
  1481 ;;      Temps:          0       0       0       0       0       0       0
  1482 ;;      Totals:         1       0       0       0       0       0       0
  1483 ;;Total ram usage:        1 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    5
  1486 ;; This function calls:
  1487 ;;		_EUSART1_Write
  1488 ;; This function is called by:
  1489 ;;		_printf
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           	psect	text2
  1494  002752                     __ptext2:
  1495                           	opt stack 0
  1496  002752                     _putch:
  1497                           	opt stack 24
  1498                           
  1499                           ;incstack = 0
  1500                           ;putch@txData stored from wreg
  1501  002752  6E19               	movwf	putch@txData,c
  1502                           
  1503                           ;eusart1.c: 152: EUSART1_Write(txData);
  1504  002754  5019               	movf	putch@txData,w,c
  1505  002756  EC30  F012         	call	_EUSART1_Write
  1506  00275A  0012               	return	
  1507  00275C                     __end_of_putch:
  1508                           	opt stack 0
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           intcon	equ	0xFF2
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           indf2	equ	0xFDF
  1517                           fsr2h	equ	0xFDA
  1518                           fsr2l	equ	0xFD9
  1519                           status	equ	0xFD8
  1520                           
  1521 ;; *************** function _EUSART1_Write *****************
  1522 ;; Defined at:
  1523 ;;		line 130 in file "mcc_generated_files/eusart1.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  txData          1    wreg     unsigned char 
  1526 ;; Auto vars:     Size  Location     Type
  1527 ;;  txData          1   23[COMRAM] unsigned char 
  1528 ;; Return value:  Size  Location     Type
  1529 ;;		None               void
  1530 ;; Registers used:
  1531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1532 ;; Tracked objects:
  1533 ;;		On entry : 0/0
  1534 ;;		On exit  : 0/0
  1535 ;;		Unchanged: 0/0
  1536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1537 ;;      Params:         0       0       0       0       0       0       0
  1538 ;;      Locals:         1       0       0       0       0       0       0
  1539 ;;      Temps:          0       0       0       0       0       0       0
  1540 ;;      Totals:         1       0       0       0       0       0       0
  1541 ;;Total ram usage:        1 bytes
  1542 ;; Hardware stack levels used:    1
  1543 ;; Hardware stack levels required when called:    4
  1544 ;; This function calls:
  1545 ;;		Nothing
  1546 ;; This function is called by:
  1547 ;;		_putch
  1548 ;; This function uses a non-reentrant model
  1549 ;;
  1550                           
  1551                           	psect	text3
  1552  002460                     __ptext3:
  1553                           	opt stack 0
  1554  002460                     _EUSART1_Write:
  1555                           	opt stack 24
  1556                           
  1557                           ;incstack = 0
  1558                           ;EUSART1_Write@txData stored from wreg
  1559  002460  6E18               	movwf	EUSART1_Write@txData,c
  1560  002462                     l3790:
  1561  002462  5048               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  1562  002464  B4D8               	btfsc	status,2,c
  1563  002466  D7FD               	goto	l3790
  1564                           
  1565                           ;eusart1.c: 132: }
  1566                           ;eusart1.c: 134: if (0 == PIE1bits.TX1IE) {
  1567  002468  B89D               	btfsc	3997,4,c	;volatile
  1568  00246A  D003               	goto	l304
  1569                           
  1570                           ;eusart1.c: 135: TXREG1 = txData;
  1571  00246C  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  1572                           
  1573                           ;eusart1.c: 136: } else {
  1574  002470  D014               	goto	l3804
  1575  002472                     l304:
  1576                           
  1577                           ;eusart1.c: 137: PIE1bits.TX1IE = 0;
  1578  002472  989D               	bcf	3997,4,c	;volatile
  1579                           
  1580                           ;eusart1.c: 138: eusart1TxBuffer[eusart1TxHead++] = txData;
  1581  002474  5043               	movf	_eusart1TxHead,w,c
  1582  002476  0D01               	mullw	1
  1583  002478  0100               	movlb	0	; () banked
  1584  00247A  0E9F               	movlw	low _eusart1TxBuffer
  1585  00247C  24F3               	addwf	prodl,w,c
  1586  00247E  6ED9               	movwf	fsr2l,c
  1587  002480  0100               	movlb	0	; () banked
  1588  002482  0E00               	movlw	high _eusart1TxBuffer
  1589  002484  20F4               	addwfc	prodh,w,c
  1590  002486  6EDA               	movwf	fsr2h,c
  1591  002488  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  1592                           
  1593                           ; BSR set to: 0
  1594  00248C  2A43               	incf	_eusart1TxHead,f,c
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;eusart1.c: 139: if (sizeof (eusart1TxBuffer) <= eusart1TxHead) {
  1598  00248E  0E07               	movlw	7
  1599  002490  6443               	cpfsgt	_eusart1TxHead,c
  1600  002492  D002               	goto	l3802
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;eusart1.c: 140: eusart1TxHead = 0;
  1604  002494  0E00               	movlw	0
  1605  002496  6E43               	movwf	_eusart1TxHead,c
  1606  002498                     l3802:
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;eusart1.c: 141: }
  1610                           ;eusart1.c: 142: eusart1TxBufferRemaining--;
  1611  002498  0648               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  1612  00249A                     l3804:
  1613                           
  1614                           ;eusart1.c: 143: }
  1615                           ;eusart1.c: 144: PIE1bits.TX1IE = 1;
  1616  00249A  889D               	bsf	3997,4,c	;volatile
  1617  00249C  0012               	return	
  1618  00249E                     __end_of_EUSART1_Write:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           prodh	equ	0xFF4
  1625                           prodl	equ	0xFF3
  1626                           intcon	equ	0xFF2
  1627                           postinc0	equ	0xFEE
  1628                           wreg	equ	0xFE8
  1629                           indf2	equ	0xFDF
  1630                           fsr2h	equ	0xFDA
  1631                           fsr2l	equ	0xFD9
  1632                           status	equ	0xFD8
  1633                           
  1634 ;; *************** function _Temp_Fault *****************
  1635 ;; Defined at:
  1636 ;;		line 12 in file "Tempeture.c"
  1637 ;; Parameters:    Size  Location     Type
  1638 ;;		None
  1639 ;; Auto vars:     Size  Location     Type
  1640 ;;  i               2   47[COMRAM] int 
  1641 ;;  fault           1   46[COMRAM] unsigned char 
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      unsigned char 
  1644 ;; Registers used:
  1645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1651 ;;      Params:         0       0       0       0       0       0       0
  1652 ;;      Locals:         3       0       0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0       0       0
  1654 ;;      Totals:         3       0       0       0       0       0       0
  1655 ;;Total ram usage:        3 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    5
  1658 ;; This function calls:
  1659 ;;		___ftge
  1660 ;;		___wmul
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	text4
  1667  002312                     __ptext4:
  1668                           	opt stack 0
  1669  002312                     _Temp_Fault:
  1670                           	opt stack 25
  1671                           
  1672                           ;Tempeture.c: 15: char fault = 0;
  1673                           
  1674                           ;incstack = 0
  1675  002312  0E00               	movlw	0
  1676  002314  6E2F               	movwf	Temp_Fault@fault,c
  1677                           
  1678                           ;Tempeture.c: 16: for(int i = 0;i<6;i++)
  1679  002316  0E00               	movlw	0
  1680  002318  6E31               	movwf	Temp_Fault@i+1,c
  1681  00231A  0E00               	movlw	0
  1682  00231C  6E30               	movwf	Temp_Fault@i,c
  1683  00231E  5031               	movf	Temp_Fault@i+1,w,c
  1684  002320  0A80               	xorlw	128
  1685  002322  0F80               	addlw	-128
  1686  002324  0E06               	movlw	6
  1687  002326  B4D8               	btfsc	status,2,c
  1688  002328  5C30               	subwf	Temp_Fault@i,w,c
  1689  00232A  B0D8               	btfsc	status,0,c
  1690  00232C  D027               	goto	l4142
  1691                           
  1692                           ;Tempeture.c: 17: {
  1693                           ;Tempeture.c: 18: if (60.5 > Temp_DegF[i])
  1694  00232E  C030  F020         	movff	Temp_Fault@i,___wmul@multiplier
  1695  002332  C031  F021         	movff	Temp_Fault@i+1,___wmul@multiplier+1
  1696  002336  0E00               	movlw	0
  1697  002338  6E23               	movwf	___wmul@multiplicand+1,c
  1698  00233A  0E03               	movlw	3
  1699  00233C  6E22               	movwf	___wmul@multiplicand,c
  1700  00233E  EC13  F013         	call	___wmul	;wreg free
  1701  002342  0101               	movlb	1	; () banked
  1702  002344  0E48               	movlw	low _Temp_DegF
  1703  002346  2420               	addwf	?___wmul,w,c
  1704  002348  6ED9               	movwf	fsr2l,c
  1705  00234A  0101               	movlb	1	; () banked
  1706  00234C  0E01               	movlw	high _Temp_DegF
  1707  00234E  2021               	addwfc	?___wmul+1,w,c
  1708  002350  6EDA               	movwf	fsr2h,c
  1709  002352  CFDE F026          	movff	postinc2,___ftge@ff1
  1710  002356  CFDE F027          	movff	postinc2,___ftge@ff1+1
  1711  00235A  CFDD F028          	movff	postdec2,___ftge@ff1+2
  1712  00235E  0E00               	movlw	0
  1713  002360  6E29               	movwf	___ftge@ff2,c
  1714  002362  0E72               	movlw	114
  1715  002364  6E2A               	movwf	___ftge@ff2+1,c
  1716  002366  0E42               	movlw	66
  1717  002368  6E2B               	movwf	___ftge@ff2+2,c
  1718  00236A  EC09  F011         	call	___ftge	;wreg free
  1719  00236E  B0D8               	btfsc	status,0,c
  1720  002370  D002               	goto	l4138
  1721                           
  1722                           ;Tempeture.c: 19: {
  1723                           ;Tempeture.c: 20: fault = 1;
  1724  002372  0E01               	movlw	1
  1725  002374  6E2F               	movwf	Temp_Fault@fault,c
  1726  002376                     l4138:
  1727  002376  4A30               	infsnz	Temp_Fault@i,f,c
  1728  002378  2A31               	incf	Temp_Fault@i+1,f,c
  1729  00237A  D7D1               	goto	L2
  1730  00237C                     l4142:
  1731                           
  1732                           ;Tempeture.c: 21: }
  1733                           ;Tempeture.c: 22: }
  1734                           ;Tempeture.c: 23: return fault;
  1735  00237C  502F               	movf	Temp_Fault@fault,w,c
  1736  00237E  0012               	return	
  1737  002380                     __end_of_Temp_Fault:
  1738                           	opt stack 0
  1739                           tblptru	equ	0xFF8
  1740                           tblptrh	equ	0xFF7
  1741                           tblptrl	equ	0xFF6
  1742                           tablat	equ	0xFF5
  1743                           prodh	equ	0xFF4
  1744                           prodl	equ	0xFF3
  1745                           intcon	equ	0xFF2
  1746                           postinc0	equ	0xFEE
  1747                           wreg	equ	0xFE8
  1748                           indf2	equ	0xFDF
  1749                           postinc2	equ	0xFDE
  1750                           postdec2	equ	0xFDD
  1751                           fsr2h	equ	0xFDA
  1752                           fsr2l	equ	0xFD9
  1753                           status	equ	0xFD8
  1754                           
  1755 ;; *************** function _Temp_Convert *****************
  1756 ;; Defined at:
  1757 ;;		line 45 in file "Tempeture.c"
  1758 ;; Parameters:    Size  Location     Type
  1759 ;;		None
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  x               2    6[BANK1 ] int 
  1762 ;;  steinhart       3    8[BANK1 ] float 
  1763 ;; Return value:  Size  Location     Type
  1764 ;;		None               void
  1765 ;; Registers used:
  1766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1767 ;; Tracked objects:
  1768 ;;		On entry : 0/0
  1769 ;;		On exit  : 0/0
  1770 ;;		Unchanged: 0/0
  1771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1772 ;;      Params:         0       0       0       0       0       0       0
  1773 ;;      Locals:         0       0      11       0       0       0       0
  1774 ;;      Temps:          0       2       0       0       0       0       0
  1775 ;;      Totals:         0       2      11       0       0       0       0
  1776 ;;Total ram usage:       13 bytes
  1777 ;; Hardware stack levels used:    1
  1778 ;; Hardware stack levels required when called:    8
  1779 ;; This function calls:
  1780 ;;		_Temp_Filter
  1781 ;;		___awtoft
  1782 ;;		___ftadd
  1783 ;;		___ftdiv
  1784 ;;		___ftmul
  1785 ;;		___ftsub
  1786 ;;		___wmul
  1787 ;;		_log
  1788 ;; This function is called by:
  1789 ;;		_main
  1790 ;; This function uses a non-reentrant model
  1791 ;;
  1792                           
  1793                           	psect	text5
  1794  000DE2                     __ptext5:
  1795                           	opt stack 0
  1796  000DE2                     _Temp_Convert:
  1797                           	opt stack 22
  1798                           
  1799                           ;Tempeture.c: 47: float steinhart;
  1800                           ;Tempeture.c: 48: for(int x = 0; x < 6; x++)
  1801                           
  1802                           ;incstack = 0
  1803  000DE2  0E00               	movlw	0
  1804  000DE4  0101               	movlb	1	; () banked
  1805  000DE6  6FB5               	movwf	(Temp_Convert@x+1)& (0+255),b
  1806  000DE8  0E00               	movlw	0
  1807  000DEA  0101               	movlb	1	; () banked
  1808  000DEC  6FB4               	movwf	Temp_Convert@x& (0+255),b
  1809  000DEE                     
  1810                           ; BSR set to: 1
  1811  000DEE  0101               	movlb	1	; () banked
  1812  000DF0  51B5               	movf	(Temp_Convert@x+1)& (0+255),w,b
  1813  000DF2  0A80               	xorlw	128
  1814  000DF4  0F80               	addlw	-128
  1815  000DF6  0E06               	movlw	6
  1816  000DF8  B4D8               	btfsc	status,2,c
  1817  000DFA  5DB4               	subwf	Temp_Convert@x& (0+255),w,b
  1818  000DFC  B0D8               	btfsc	status,0,c
  1819  000DFE  D110               	goto	l4176
  1820                           
  1821                           ; BSR set to: 1
  1822                           ;Tempeture.c: 49: {
  1823                           ;Tempeture.c: 50: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1824                           
  1825                           ; BSR set to: 1
  1826                           
  1827                           ; BSR set to: 1
  1828  000E00  0E00               	movlw	0
  1829  000E02  0100               	movlb	0	; () banked
  1830  000E04  6FDD               	movwf	___ftadd@f2& (0+255),b
  1831  000E06  0E80               	movlw	128
  1832  000E08  0100               	movlb	0	; () banked
  1833  000E0A  6FDE               	movwf	(___ftadd@f2+1)& (0+255),b
  1834  000E0C  0EBF               	movlw	191
  1835  000E0E  0100               	movlb	0	; () banked
  1836  000E10  6FDF               	movwf	(___ftadd@f2+2)& (0+255),b
  1837  000E12  0EB4               	movlw	low _Temp_Adc
  1838  000E14  0100               	movlb	0	; () banked
  1839  000E16  6FF7               	movwf	??_Temp_Convert& (0+255),b
  1840  000E18  0E00               	movlw	high _Temp_Adc
  1841  000E1A  6FF8               	movwf	(??_Temp_Convert+1)& (0+255),b
  1842  000E1C  90D8               	bcf	status,0,c
  1843  000E1E  0101               	movlb	1	; () banked
  1844  000E20  35B4               	rlcf	Temp_Convert@x& (0+255),w,b
  1845  000E22  6ED9               	movwf	fsr2l,c
  1846  000E24  0101               	movlb	1	; () banked
  1847  000E26  35B5               	rlcf	(Temp_Convert@x+1)& (0+255),w,b
  1848  000E28  6EDA               	movwf	fsr2h,c
  1849  000E2A  0100               	movlb	0	; () banked
  1850  000E2C  51F7               	movf	??_Temp_Convert& (0+255),w,b
  1851  000E2E  26D9               	addwf	fsr2l,f,c
  1852  000E30  0100               	movlb	0	; () banked
  1853  000E32  51F8               	movf	(??_Temp_Convert+1)& (0+255),w,b
  1854  000E34  22DA               	addwfc	fsr2h,f,c
  1855  000E36  CFDE F026          	movff	postinc2,___awtoft@c
  1856  000E3A  CFDD F027          	movff	postdec2,___awtoft@c+1
  1857  000E3E  EC0C  F012         	call	___awtoft	;wreg free
  1858  000E42  C026  F02D         	movff	?___awtoft,___ftdiv@f2
  1859  000E46  C027  F02E         	movff	?___awtoft+1,___ftdiv@f2+1
  1860  000E4A  C028  F02F         	movff	?___awtoft+2,___ftdiv@f2+2
  1861  000E4E  0EC0               	movlw	192
  1862  000E50  6E2A               	movwf	___ftdiv@f1,c
  1863  000E52  0E7F               	movlw	127
  1864  000E54  6E2B               	movwf	___ftdiv@f1+1,c
  1865  000E56  0E44               	movlw	68
  1866  000E58  6E2C               	movwf	___ftdiv@f1+2,c
  1867  000E5A  ECE9  F00C         	call	___ftdiv	;wreg free
  1868  000E5E  C02A  F0DA         	movff	?___ftdiv,___ftadd@f1
  1869  000E62  C02B  F0DB         	movff	?___ftdiv+1,___ftadd@f1+1
  1870  000E66  C02C  F0DC         	movff	?___ftdiv+2,___ftadd@f1+2
  1871  000E6A  ECB1  F005         	call	___ftadd	;wreg free
  1872  000E6E  C0DA  F1AE         	movff	?___ftadd,_Temp_Convert$1785
  1873  000E72  C0DB  F1AF         	movff	?___ftadd+1,_Temp_Convert$1785+1
  1874  000E76  C0DC  F1B0         	movff	?___ftadd+2,_Temp_Convert$1785+2
  1875                           
  1876                           ;Tempeture.c: 49: {
  1877                           ;Tempeture.c: 50: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1878  000E7A  C1AE  F02D         	movff	_Temp_Convert$1785,___ftdiv@f2
  1879  000E7E  C1AF  F02E         	movff	_Temp_Convert$1785+1,___ftdiv@f2+1
  1880  000E82  C1B0  F02F         	movff	_Temp_Convert$1785+2,___ftdiv@f2+2
  1881  000E86  0E40               	movlw	64
  1882  000E88  6E2A               	movwf	___ftdiv@f1,c
  1883  000E8A  0E1C               	movlw	28
  1884  000E8C  6E2B               	movwf	___ftdiv@f1+1,c
  1885  000E8E  0E46               	movlw	70
  1886  000E90  6E2C               	movwf	___ftdiv@f1+2,c
  1887  000E92  ECE9  F00C         	call	___ftdiv	;wreg free
  1888  000E96  C02A  F1B1         	movff	?___ftdiv,_Temp_Convert$1786
  1889  000E9A  C02B  F1B2         	movff	?___ftdiv+1,_Temp_Convert$1786+1
  1890  000E9E  C02C  F1B3         	movff	?___ftdiv+2,_Temp_Convert$1786+2
  1891                           
  1892                           ;Tempeture.c: 49: {
  1893                           ;Tempeture.c: 50: steinhart = (10000 / ((1023.0 / Temp_Adc[x]) - 1)) / 10000;
  1894  000EA2  C1B1  F02A         	movff	_Temp_Convert$1786,___ftdiv@f1
  1895  000EA6  C1B2  F02B         	movff	_Temp_Convert$1786+1,___ftdiv@f1+1
  1896  000EAA  C1B3  F02C         	movff	_Temp_Convert$1786+2,___ftdiv@f1+2
  1897  000EAE  0E40               	movlw	64
  1898  000EB0  6E2D               	movwf	___ftdiv@f2,c
  1899  000EB2  0E1C               	movlw	28
  1900  000EB4  6E2E               	movwf	___ftdiv@f2+1,c
  1901  000EB6  0E46               	movlw	70
  1902  000EB8  6E2F               	movwf	___ftdiv@f2+2,c
  1903  000EBA  ECE9  F00C         	call	___ftdiv	;wreg free
  1904  000EBE  C02A  F1B6         	movff	?___ftdiv,Temp_Convert@steinhart
  1905  000EC2  C02B  F1B7         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1906  000EC6  C02C  F1B8         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1907                           
  1908                           ;Tempeture.c: 51: steinhart = log(steinhart);
  1909  000ECA  C1B6  F0F2         	movff	Temp_Convert@steinhart,log@x
  1910  000ECE  C1B7  F0F3         	movff	Temp_Convert@steinhart+1,log@x+1
  1911  000ED2  C1B8  F0F4         	movff	Temp_Convert@steinhart+2,log@x+2
  1912  000ED6  EC1B  F00A         	call	_log	;wreg free
  1913  000EDA  C0F2  F1B6         	movff	?_log,Temp_Convert@steinhart
  1914  000EDE  C0F3  F1B7         	movff	?_log+1,Temp_Convert@steinhart+1
  1915  000EE2  C0F4  F1B8         	movff	?_log+2,Temp_Convert@steinhart+2
  1916                           
  1917                           ;Tempeture.c: 52: steinhart /= 3950;
  1918  000EE6  C1B6  F02A         	movff	Temp_Convert@steinhart,___ftdiv@f1
  1919  000EEA  C1B7  F02B         	movff	Temp_Convert@steinhart+1,___ftdiv@f1+1
  1920  000EEE  C1B8  F02C         	movff	Temp_Convert@steinhart+2,___ftdiv@f1+2
  1921  000EF2  0EE0               	movlw	224
  1922  000EF4  6E2D               	movwf	___ftdiv@f2,c
  1923  000EF6  0E76               	movlw	118
  1924  000EF8  6E2E               	movwf	___ftdiv@f2+1,c
  1925  000EFA  0E45               	movlw	69
  1926  000EFC  6E2F               	movwf	___ftdiv@f2+2,c
  1927  000EFE  ECE9  F00C         	call	___ftdiv	;wreg free
  1928  000F02  C02A  F1B6         	movff	?___ftdiv,Temp_Convert@steinhart
  1929  000F06  C02B  F1B7         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1930  000F0A  C02C  F1B8         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1931                           
  1932                           ;Tempeture.c: 53: steinhart += 1.0 / (25 + 273.15);
  1933  000F0E  C1B6  F0DA         	movff	Temp_Convert@steinhart,___ftadd@f1
  1934  000F12  C1B7  F0DB         	movff	Temp_Convert@steinhart+1,___ftadd@f1+1
  1935  000F16  C1B8  F0DC         	movff	Temp_Convert@steinhart+2,___ftadd@f1+2
  1936  000F1A  0ECF               	movlw	207
  1937  000F1C  0100               	movlb	0	; () banked
  1938  000F1E  6FDD               	movwf	___ftadd@f2& (0+255),b
  1939  000F20  0E5B               	movlw	91
  1940  000F22  0100               	movlb	0	; () banked
  1941  000F24  6FDE               	movwf	(___ftadd@f2+1)& (0+255),b
  1942  000F26  0E3B               	movlw	59
  1943  000F28  0100               	movlb	0	; () banked
  1944  000F2A  6FDF               	movwf	(___ftadd@f2+2)& (0+255),b
  1945  000F2C  ECB1  F005         	call	___ftadd	;wreg free
  1946  000F30  C0DA  F1B6         	movff	?___ftadd,Temp_Convert@steinhart
  1947  000F34  C0DB  F1B7         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  1948  000F38  C0DC  F1B8         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  1949                           
  1950                           ;Tempeture.c: 54: steinhart = 1.0 / steinhart;
  1951  000F3C  0E00               	movlw	0
  1952  000F3E  6E2A               	movwf	___ftdiv@f1,c
  1953  000F40  0E80               	movlw	128
  1954  000F42  6E2B               	movwf	___ftdiv@f1+1,c
  1955  000F44  0E3F               	movlw	63
  1956  000F46  6E2C               	movwf	___ftdiv@f1+2,c
  1957  000F48  C1B6  F02D         	movff	Temp_Convert@steinhart,___ftdiv@f2
  1958  000F4C  C1B7  F02E         	movff	Temp_Convert@steinhart+1,___ftdiv@f2+1
  1959  000F50  C1B8  F02F         	movff	Temp_Convert@steinhart+2,___ftdiv@f2+2
  1960  000F54  ECE9  F00C         	call	___ftdiv	;wreg free
  1961  000F58  C02A  F1B6         	movff	?___ftdiv,Temp_Convert@steinhart
  1962  000F5C  C02B  F1B7         	movff	?___ftdiv+1,Temp_Convert@steinhart+1
  1963  000F60  C02C  F1B8         	movff	?___ftdiv+2,Temp_Convert@steinhart+2
  1964                           
  1965                           ;Tempeture.c: 55: steinhart -= 273.15;
  1966  000F64  C1B6  F0E6         	movff	Temp_Convert@steinhart,___ftsub@f1
  1967  000F68  C1B7  F0E7         	movff	Temp_Convert@steinhart+1,___ftsub@f1+1
  1968  000F6C  C1B8  F0E8         	movff	Temp_Convert@steinhart+2,___ftsub@f1+2
  1969  000F70  0E93               	movlw	147
  1970  000F72  0100               	movlb	0	; () banked
  1971  000F74  6FE9               	movwf	___ftsub@f2& (0+255),b
  1972  000F76  0E88               	movlw	136
  1973  000F78  0100               	movlb	0	; () banked
  1974  000F7A  6FEA               	movwf	(___ftsub@f2+1)& (0+255),b
  1975  000F7C  0E43               	movlw	67
  1976  000F7E  0100               	movlb	0	; () banked
  1977  000F80  6FEB               	movwf	(___ftsub@f2+2)& (0+255),b
  1978  000F82  EC4F  F012         	call	___ftsub	;wreg free
  1979  000F86  C0E6  F1B6         	movff	?___ftsub,Temp_Convert@steinhart
  1980  000F8A  C0E7  F1B7         	movff	?___ftsub+1,Temp_Convert@steinhart+1
  1981  000F8E  C0E8  F1B8         	movff	?___ftsub+2,Temp_Convert@steinhart+2
  1982                           
  1983                           ;Tempeture.c: 56: steinhart = (steinhart*1.8) + 32.0;
  1984  000F92  0E66               	movlw	102
  1985  000F94  0100               	movlb	0	; () banked
  1986  000F96  6FD1               	movwf	___ftmul@f2& (0+255),b
  1987  000F98  0EE6               	movlw	230
  1988  000F9A  0100               	movlb	0	; () banked
  1989  000F9C  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  1990  000F9E  0E3F               	movlw	63
  1991  000FA0  0100               	movlb	0	; () banked
  1992  000FA2  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  1993  000FA4  C1B6  F0CE         	movff	Temp_Convert@steinhart,___ftmul@f1
  1994  000FA8  C1B7  F0CF         	movff	Temp_Convert@steinhart+1,___ftmul@f1+1
  1995  000FAC  C1B8  F0D0         	movff	Temp_Convert@steinhart+2,___ftmul@f1+2
  1996  000FB0  ECD2  F00A         	call	___ftmul	;wreg free
  1997  000FB4  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  1998  000FB8  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  1999  000FBC  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  2000  000FC0  0E00               	movlw	0
  2001  000FC2  0100               	movlb	0	; () banked
  2002  000FC4  6FDD               	movwf	___ftadd@f2& (0+255),b
  2003  000FC6  0E00               	movlw	0
  2004  000FC8  0100               	movlb	0	; () banked
  2005  000FCA  6FDE               	movwf	(___ftadd@f2+1)& (0+255),b
  2006  000FCC  0E42               	movlw	66
  2007  000FCE  0100               	movlb	0	; () banked
  2008  000FD0  6FDF               	movwf	(___ftadd@f2+2)& (0+255),b
  2009  000FD2  ECB1  F005         	call	___ftadd	;wreg free
  2010  000FD6  C0DA  F1B6         	movff	?___ftadd,Temp_Convert@steinhart
  2011  000FDA  C0DB  F1B7         	movff	?___ftadd+1,Temp_Convert@steinhart+1
  2012  000FDE  C0DC  F1B8         	movff	?___ftadd+2,Temp_Convert@steinhart+2
  2013                           
  2014                           ;Tempeture.c: 57: TmpTemp_DegF[x] = steinhart;
  2015  000FE2  C1B4  F020         	movff	Temp_Convert@x,___wmul@multiplier
  2016  000FE6  C1B5  F021         	movff	Temp_Convert@x+1,___wmul@multiplier+1
  2017  000FEA  0E00               	movlw	0
  2018  000FEC  6E23               	movwf	___wmul@multiplicand+1,c
  2019  000FEE  0E03               	movlw	3
  2020  000FF0  6E22               	movwf	___wmul@multiplicand,c
  2021  000FF2  EC13  F013         	call	___wmul	;wreg free
  2022  000FF6  0101               	movlb	1	; () banked
  2023  000FF8  0E87               	movlw	low _TmpTemp_DegF
  2024  000FFA  2420               	addwf	?___wmul,w,c
  2025  000FFC  6ED9               	movwf	fsr2l,c
  2026  000FFE  0101               	movlb	1	; () banked
  2027  001000  0E01               	movlw	high _TmpTemp_DegF
  2028  001002  2021               	addwfc	?___wmul+1,w,c
  2029  001004  6EDA               	movwf	fsr2h,c
  2030  001006  0101               	movlb	1	; () banked
  2031  001008  C1B6  FFDE         	movff	Temp_Convert@steinhart,postinc2
  2032  00100C  0101               	movlb	1	; () banked
  2033  00100E  C1B7  FFDE         	movff	Temp_Convert@steinhart+1,postinc2
  2034  001012  0101               	movlb	1	; () banked
  2035  001014  C1B8  FFDD         	movff	Temp_Convert@steinhart+2,postdec2
  2036                           
  2037                           ; BSR set to: 1
  2038  001018  0101               	movlb	1	; () banked
  2039  00101A  4BB4               	infsnz	Temp_Convert@x& (0+255),f,b
  2040  00101C  2BB5               	incf	(Temp_Convert@x+1)& (0+255),f,b
  2041  00101E  D6E7               	goto	L3
  2042  001020                     l4176:
  2043                           
  2044                           ; BSR set to: 1
  2045                           ;Tempeture.c: 58: }
  2046                           ;Tempeture.c: 59: Temp_Filter();
  2047  001020  EC87  F00B         	call	_Temp_Filter	;wreg free
  2048  001024  0012               	return	
  2049  001026                     __end_of_Temp_Convert:
  2050                           	opt stack 0
  2051                           tblptru	equ	0xFF8
  2052                           tblptrh	equ	0xFF7
  2053                           tblptrl	equ	0xFF6
  2054                           tablat	equ	0xFF5
  2055                           prodh	equ	0xFF4
  2056                           prodl	equ	0xFF3
  2057                           intcon	equ	0xFF2
  2058                           postinc0	equ	0xFEE
  2059                           wreg	equ	0xFE8
  2060                           indf2	equ	0xFDF
  2061                           postinc2	equ	0xFDE
  2062                           postdec2	equ	0xFDD
  2063                           fsr2h	equ	0xFDA
  2064                           fsr2l	equ	0xFD9
  2065                           status	equ	0xFD8
  2066                           
  2067 ;; *************** function _log *****************
  2068 ;; Defined at:
  2069 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\log.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;  x               3   42[BANK0 ] float 
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;  exponent        2   45[BANK0 ] int 
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  3   42[BANK0 ] int 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2083 ;;      Params:         0       3       0       0       0       0       0
  2084 ;;      Locals:         0       2       0       0       0       0       0
  2085 ;;      Temps:          0       0       0       0       0       0       0
  2086 ;;      Totals:         0       5       0       0       0       0       0
  2087 ;;Total ram usage:        5 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    7
  2090 ;; This function calls:
  2091 ;;		___awtoft
  2092 ;;		___ftadd
  2093 ;;		___ftmul
  2094 ;;		_eval_poly
  2095 ;;		_frexp
  2096 ;; This function is called by:
  2097 ;;		_Temp_Convert
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           
  2101                           	psect	text6
  2102  001436                     __ptext6:
  2103                           	opt stack 0
  2104  001436                     _log:
  2105                           	opt stack 22
  2106                           
  2107                           ;incstack = 0
  2108  001436  0100               	movlb	0	; () banked
  2109  001438  51F4               	movf	(log@x+2)& (0+255),w,b
  2110  00143A  0A80               	xorlw	128
  2111  00143C  0F80               	addlw	128
  2112  00143E  E107               	bnz	u3305
  2113  001440  0E00               	movlw	0
  2114  001442  0100               	movlb	0	; () banked
  2115  001444  5DF3               	subwf	(log@x+1)& (0+255),w,b
  2116  001446  E103               	bnz	u3305
  2117  001448  0E00               	movlw	0
  2118  00144A  0100               	movlb	0	; () banked
  2119  00144C  5DF2               	subwf	log@x& (0+255),w,b
  2120  00144E                     u3305:
  2121  00144E  B0D8               	btfsc	status,0,c
  2122  001450  D010               	goto	l3954
  2123                           
  2124                           ; BSR set to: 0
  2125  001452  0E00               	movlw	0
  2126  001454  0100               	movlb	0	; () banked
  2127  001456  6FB1               	movwf	(_errno+1)& (0+255),b
  2128  001458  0E21               	movlw	33
  2129  00145A  0100               	movlb	0	; () banked
  2130  00145C  6FB0               	movwf	_errno& (0+255),b
  2131  00145E  0E00               	movlw	0
  2132  001460  0100               	movlb	0	; () banked
  2133  001462  6FF2               	movwf	?_log& (0+255),b
  2134  001464  0E00               	movlw	0
  2135  001466  0100               	movlb	0	; () banked
  2136  001468  6FF3               	movwf	(?_log+1)& (0+255),b
  2137  00146A  0E00               	movlw	0
  2138  00146C  0100               	movlb	0	; () banked
  2139  00146E  6FF4               	movwf	(?_log+2)& (0+255),b
  2140  001470  0012               	return	
  2141  001472                     l3954:
  2142                           
  2143                           ; BSR set to: 0
  2144  001472  0E7F               	movlw	127
  2145  001474  0100               	movlb	0	; () banked
  2146  001476  15F4               	andwf	(log@x+2)& (0+255),w,b
  2147  001478  0100               	movlb	0	; () banked
  2148  00147A  11F3               	iorwf	(log@x+1)& (0+255),w,b
  2149  00147C  0100               	movlb	0	; () banked
  2150  00147E  11F2               	iorwf	log@x& (0+255),w,b
  2151  001480  A4D8               	btfss	status,2,c
  2152  001482  D010               	goto	l3960
  2153                           
  2154                           ; BSR set to: 0
  2155  001484  0E00               	movlw	0
  2156  001486  0100               	movlb	0	; () banked
  2157  001488  6FB1               	movwf	(_errno+1)& (0+255),b
  2158  00148A  0E22               	movlw	34
  2159  00148C  0100               	movlb	0	; () banked
  2160  00148E  6FB0               	movwf	_errno& (0+255),b
  2161  001490  0E00               	movlw	0
  2162  001492  0100               	movlb	0	; () banked
  2163  001494  6FF2               	movwf	?_log& (0+255),b
  2164  001496  0E00               	movlw	0
  2165  001498  0100               	movlb	0	; () banked
  2166  00149A  6FF3               	movwf	(?_log+1)& (0+255),b
  2167  00149C  0E00               	movlw	0
  2168  00149E  0100               	movlb	0	; () banked
  2169  0014A0  6FF4               	movwf	(?_log+2)& (0+255),b
  2170  0014A2  0012               	return	
  2171  0014A4                     l3960:
  2172                           
  2173                           ; BSR set to: 0
  2174  0014A4  0E00               	movlw	0
  2175  0014A6  0100               	movlb	0	; () banked
  2176  0014A8  6FD1               	movwf	___ftmul@f2& (0+255),b
  2177  0014AA  0E00               	movlw	0
  2178  0014AC  0100               	movlb	0	; () banked
  2179  0014AE  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  2180  0014B0  0E40               	movlw	64
  2181  0014B2  0100               	movlb	0	; () banked
  2182  0014B4  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  2183  0014B6  0100               	movlb	0	; () banked
  2184  0014B8  0E00               	movlw	high log@exponent
  2185  0014BA  6E1C               	movwf	frexp@eptr+1,c
  2186  0014BC  0100               	movlb	0	; () banked
  2187  0014BE  0EF5               	movlw	low log@exponent
  2188  0014C0  6E1B               	movwf	frexp@eptr,c
  2189  0014C2  C0F2  F018         	movff	log@x,frexp@value
  2190  0014C6  C0F3  F019         	movff	log@x+1,frexp@value+1
  2191  0014CA  C0F4  F01A         	movff	log@x+2,frexp@value+2
  2192  0014CE  ECC0  F010         	call	_frexp	;wreg free
  2193  0014D2  C018  F0CE         	movff	?_frexp,___ftmul@f1
  2194  0014D6  C019  F0CF         	movff	?_frexp+1,___ftmul@f1+1
  2195  0014DA  C01A  F0D0         	movff	?_frexp+2,___ftmul@f1+2
  2196  0014DE  ECD2  F00A         	call	___ftmul	;wreg free
  2197  0014E2  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  2198  0014E6  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  2199  0014EA  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  2200  0014EE  0E00               	movlw	0
  2201  0014F0  0100               	movlb	0	; () banked
  2202  0014F2  6FDD               	movwf	___ftadd@f2& (0+255),b
  2203  0014F4  0E80               	movlw	128
  2204  0014F6  0100               	movlb	0	; () banked
  2205  0014F8  6FDE               	movwf	(___ftadd@f2+1)& (0+255),b
  2206  0014FA  0EBF               	movlw	191
  2207  0014FC  0100               	movlb	0	; () banked
  2208  0014FE  6FDF               	movwf	(___ftadd@f2+2)& (0+255),b
  2209  001500  ECB1  F005         	call	___ftadd	;wreg free
  2210  001504  C0DA  F0F2         	movff	?___ftadd,log@x
  2211  001508  C0DB  F0F3         	movff	?___ftadd+1,log@x+1
  2212  00150C  C0DC  F0F4         	movff	?___ftadd+2,log@x+2
  2213  001510  0100               	movlb	0	; () banked
  2214  001512  07F5               	decf	log@exponent& (0+255),f,b
  2215  001514  A0D8               	btfss	status,0,c
  2216  001516  07F6               	decf	(log@exponent+1)& (0+255),f,b
  2217                           
  2218                           ; BSR set to: 0
  2219  001518  C0F2  F0E6         	movff	log@x,eval_poly@x
  2220  00151C  C0F3  F0E7         	movff	log@x+1,eval_poly@x+1
  2221  001520  C0F4  F0E8         	movff	log@x+2,eval_poly@x+2
  2222  001524  0E06               	movlw	high log@coeff
  2223  001526  0100               	movlb	0	; () banked
  2224  001528  6FEA               	movwf	(eval_poly@d+1)& (0+255),b
  2225  00152A  0E01               	movlw	low log@coeff
  2226  00152C  0100               	movlb	0	; () banked
  2227  00152E  6FE9               	movwf	eval_poly@d& (0+255),b
  2228  001530  0E00               	movlw	0
  2229  001532  0100               	movlb	0	; () banked
  2230  001534  6FEC               	movwf	(eval_poly@n+1)& (0+255),b
  2231  001536  0E08               	movlw	8
  2232  001538  0100               	movlb	0	; () banked
  2233  00153A  6FEB               	movwf	eval_poly@n& (0+255),b
  2234  00153C  EC6C  F00D         	call	_eval_poly	;wreg free
  2235  001540  C0E6  F0F2         	movff	?_eval_poly,log@x
  2236  001544  C0E7  F0F3         	movff	?_eval_poly+1,log@x+1
  2237  001548  C0E8  F0F4         	movff	?_eval_poly+2,log@x+2
  2238  00154C  0E72               	movlw	114
  2239  00154E  0100               	movlb	0	; () banked
  2240  001550  6FD1               	movwf	___ftmul@f2& (0+255),b
  2241  001552  0E31               	movlw	49
  2242  001554  0100               	movlb	0	; () banked
  2243  001556  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  2244  001558  0E3F               	movlw	63
  2245  00155A  0100               	movlb	0	; () banked
  2246  00155C  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  2247  00155E  C0F5  F026         	movff	log@exponent,___awtoft@c
  2248  001562  C0F6  F027         	movff	log@exponent+1,___awtoft@c+1
  2249  001566  EC0C  F012         	call	___awtoft	;wreg free
  2250  00156A  C026  F0CE         	movff	?___awtoft,___ftmul@f1
  2251  00156E  C027  F0CF         	movff	?___awtoft+1,___ftmul@f1+1
  2252  001572  C028  F0D0         	movff	?___awtoft+2,___ftmul@f1+2
  2253  001576  ECD2  F00A         	call	___ftmul	;wreg free
  2254  00157A  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  2255  00157E  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  2256  001582  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  2257  001586  C0F2  F0DD         	movff	log@x,___ftadd@f2
  2258  00158A  C0F3  F0DE         	movff	log@x+1,___ftadd@f2+1
  2259  00158E  C0F4  F0DF         	movff	log@x+2,___ftadd@f2+2
  2260  001592  ECB1  F005         	call	___ftadd	;wreg free
  2261  001596  C0DA  F0F2         	movff	?___ftadd,?_log
  2262  00159A  C0DB  F0F3         	movff	?___ftadd+1,?_log+1
  2263  00159E  C0DC  F0F4         	movff	?___ftadd+2,?_log+2
  2264  0015A2  0012               	return	
  2265  0015A4                     __end_of_log:
  2266                           	opt stack 0
  2267                           tblptru	equ	0xFF8
  2268                           tblptrh	equ	0xFF7
  2269                           tblptrl	equ	0xFF6
  2270                           tablat	equ	0xFF5
  2271                           prodh	equ	0xFF4
  2272                           prodl	equ	0xFF3
  2273                           intcon	equ	0xFF2
  2274                           postinc0	equ	0xFEE
  2275                           wreg	equ	0xFE8
  2276                           indf2	equ	0xFDF
  2277                           postinc2	equ	0xFDE
  2278                           postdec2	equ	0xFDD
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function _frexp *****************
  2284 ;; Defined at:
  2285 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\frexp.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  value           3   23[COMRAM] int 
  2288 ;;  eptr            2   26[COMRAM] PTR int 
  2289 ;;		 -> log@exponent(2), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;		None
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  3   23[COMRAM] PTR int 
  2294 ;; Registers used:
  2295 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2301 ;;      Params:         5       0       0       0       0       0       0
  2302 ;;      Locals:         0       0       0       0       0       0       0
  2303 ;;      Temps:          2       0       0       0       0       0       0
  2304 ;;      Totals:         7       0       0       0       0       0       0
  2305 ;;Total ram usage:        7 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; Hardware stack levels required when called:    4
  2308 ;; This function calls:
  2309 ;;		Nothing
  2310 ;; This function is called by:
  2311 ;;		_log
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315                           	psect	text7
  2316  002180                     __ptext7:
  2317                           	opt stack 0
  2318  002180                     _frexp:
  2319                           	opt stack 24
  2320                           
  2321                           ;incstack = 0
  2322  002180  0E7F               	movlw	127
  2323  002182  141A               	andwf	frexp@value+2,w,c
  2324  002184  1019               	iorwf	frexp@value+1,w,c
  2325  002186  1018               	iorwf	frexp@value,w,c
  2326  002188  A4D8               	btfss	status,2,c
  2327  00218A  D00F               	goto	l3872
  2328  00218C  C01B  FFD9         	movff	frexp@eptr,fsr2l
  2329  002190  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  2330  002194  0E00               	movlw	0
  2331  002196  6EDE               	movwf	postinc2,c
  2332  002198  0E00               	movlw	0
  2333  00219A  6EDD               	movwf	postdec2,c
  2334  00219C  0E00               	movlw	0
  2335  00219E  6E18               	movwf	?_frexp,c
  2336  0021A0  0E00               	movlw	0
  2337  0021A2  6E19               	movwf	?_frexp+1,c
  2338  0021A4  0E00               	movlw	0
  2339  0021A6  6E1A               	movwf	?_frexp+2,c
  2340  0021A8  0012               	return	
  2341  0021AA                     l3872:
  2342  0021AA  501A               	movf	frexp@value+2,w,c
  2343  0021AC  0B7F               	andlw	127
  2344  0021AE  6E1D               	movwf	??_frexp& (0+255),c
  2345  0021B0  6A1E               	clrf	(??_frexp+1)& (0+255),c
  2346  0021B2  90D8               	bcf	status,0,c
  2347  0021B4  361D               	rlcf	??_frexp,f,c
  2348  0021B6  361E               	rlcf	??_frexp+1,f,c
  2349  0021B8  C01B  FFD9         	movff	frexp@eptr,fsr2l
  2350  0021BC  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  2351  0021C0  C01D  FFDE         	movff	??_frexp,postinc2
  2352  0021C4  C01E  FFDD         	movff	??_frexp+1,postdec2
  2353  0021C8  AE19               	btfss	frexp@value+1,7,c
  2354  0021CA  D003               	goto	u3240
  2355  0021CC  6A1D               	clrf	??_frexp& (0+255),c
  2356  0021CE  2A1D               	incf	??_frexp& (0+255),f,c
  2357  0021D0  D001               	goto	u3248
  2358  0021D2                     u3240:
  2359  0021D2  6A1D               	clrf	??_frexp& (0+255),c
  2360  0021D4                     u3248:
  2361  0021D4  501D               	movf	??_frexp,w,c
  2362  0021D6  C01B  FFD9         	movff	frexp@eptr,fsr2l
  2363  0021DA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  2364  0021DE  12DE               	iorwf	postinc2,f,c
  2365  0021E0  0E00               	movlw	0
  2366  0021E2  12DD               	iorwf	postdec2,f,c
  2367  0021E4  C01B  FFD9         	movff	frexp@eptr,fsr2l
  2368  0021E8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
  2369  0021EC  0E82               	movlw	130
  2370  0021EE  26DE               	addwf	postinc2,f,c
  2371  0021F0  0EFF               	movlw	255
  2372  0021F2  22DD               	addwfc	postdec2,f,c
  2373  0021F4  801A               	bsf	frexp@value+2,0,c
  2374  0021F6  821A               	bsf	frexp@value+2,1,c
  2375  0021F8  841A               	bsf	frexp@value+2,2,c
  2376  0021FA  861A               	bsf	frexp@value+2,3,c
  2377  0021FC  881A               	bsf	frexp@value+2,4,c
  2378  0021FE  8A1A               	bsf	frexp@value+2,5,c
  2379  002200  9C1A               	bcf	frexp@value+2,6,c
  2380  002202  9E19               	bcf	frexp@value+1,7,c
  2381  002204  C018  F018         	movff	frexp@value,?_frexp
  2382  002208  C019  F019         	movff	frexp@value+1,?_frexp+1
  2383  00220C  C01A  F01A         	movff	frexp@value+2,?_frexp+2
  2384  002210  0012               	return	
  2385  002212                     __end_of_frexp:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           prodh	equ	0xFF4
  2392                           prodl	equ	0xFF3
  2393                           intcon	equ	0xFF2
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           indf2	equ	0xFDF
  2397                           postinc2	equ	0xFDE
  2398                           postdec2	equ	0xFDD
  2399                           fsr2h	equ	0xFDA
  2400                           fsr2l	equ	0xFD9
  2401                           status	equ	0xFD8
  2402                           
  2403 ;; *************** function _eval_poly *****************
  2404 ;; Defined at:
  2405 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\evalpoly.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;  x               3   30[BANK0 ] PTR int 
  2408 ;;  d               2   33[BANK0 ] PTR const 
  2409 ;;		 -> log@coeff(27), 
  2410 ;;  n               2   35[BANK0 ] int 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  res             3   39[BANK0 ] int 
  2413 ;; Return value:  Size  Location     Type
  2414 ;;                  3   30[BANK0 ] int 
  2415 ;; Registers used:
  2416 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2417 ;; Tracked objects:
  2418 ;;		On entry : 0/0
  2419 ;;		On exit  : 0/0
  2420 ;;		Unchanged: 0/0
  2421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2422 ;;      Params:         0       7       0       0       0       0       0
  2423 ;;      Locals:         0       3       0       0       0       0       0
  2424 ;;      Temps:          0       2       0       0       0       0       0
  2425 ;;      Totals:         0      12       0       0       0       0       0
  2426 ;;Total ram usage:       12 bytes
  2427 ;; Hardware stack levels used:    1
  2428 ;; Hardware stack levels required when called:    6
  2429 ;; This function calls:
  2430 ;;		___ftadd
  2431 ;;		___ftmul
  2432 ;;		___wmul
  2433 ;; This function is called by:
  2434 ;;		_log
  2435 ;; This function uses a non-reentrant model
  2436 ;;
  2437                           
  2438                           	psect	text8
  2439  001AD8                     __ptext8:
  2440                           	opt stack 0
  2441  001AD8                     _eval_poly:
  2442                           	opt stack 22
  2443                           
  2444                           ;incstack = 0
  2445  001AD8  C0EB  F020         	movff	eval_poly@n,___wmul@multiplier
  2446  001ADC  C0EC  F021         	movff	eval_poly@n+1,___wmul@multiplier+1
  2447  001AE0  0E00               	movlw	0
  2448  001AE2  6E23               	movwf	___wmul@multiplicand+1,c
  2449  001AE4  0E03               	movlw	3
  2450  001AE6  6E22               	movwf	___wmul@multiplicand,c
  2451  001AE8  EC13  F013         	call	___wmul	;wreg free
  2452  001AEC  0100               	movlb	0	; () banked
  2453  001AEE  C0E9  F0ED         	movff	eval_poly@d,??_eval_poly
  2454  001AF2  0100               	movlb	0	; () banked
  2455  001AF4  C0EA  F0EE         	movff	eval_poly@d+1,??_eval_poly+1
  2456  001AF8  5020               	movf	?___wmul,w,c
  2457  001AFA  0100               	movlb	0	; () banked
  2458  001AFC  27ED               	addwf	??_eval_poly& (0+255),f,b
  2459  001AFE  5021               	movf	?___wmul+1,w,c
  2460  001B00  0100               	movlb	0	; () banked
  2461  001B02  23EE               	addwfc	(??_eval_poly+1)& (0+255),f,b
  2462  001B04  C0ED  FFF6         	movff	??_eval_poly,tblptrl
  2463  001B08  C0EE  FFF7         	movff	??_eval_poly+1,tblptrh
  2464  001B0C                     	if	0	;tblptru may be non-zero
  2465  001B0C                     	endif
  2466  001B0C                     	if	0	;tblptru may be non-zero
  2467  001B0C                     	endif
  2468  001B0C  0009               	tblrd		*+
  2469  001B0E  0100               	movlb	0	; () banked
  2470  001B10  CFF5 F0EF          	movff	tablat,eval_poly@res
  2471  001B14  0009               	tblrd		*+
  2472  001B16  0100               	movlb	0	; () banked
  2473  001B18  CFF5 F0F0          	movff	tablat,eval_poly@res+1
  2474  001B1C  000A               	tblrd		*-
  2475  001B1E  0100               	movlb	0	; () banked
  2476  001B20  CFF5 F0F1          	movff	tablat,eval_poly@res+2
  2477  001B24  D046               	goto	l3888
  2478  001B26                     l3886:
  2479                           
  2480                           ; BSR set to: 0
  2481  001B26  C0EF  F0D1         	movff	eval_poly@res,___ftmul@f2
  2482  001B2A  C0F0  F0D2         	movff	eval_poly@res+1,___ftmul@f2+1
  2483  001B2E  C0F1  F0D3         	movff	eval_poly@res+2,___ftmul@f2+2
  2484  001B32  C0E6  F0CE         	movff	eval_poly@x,___ftmul@f1
  2485  001B36  C0E7  F0CF         	movff	eval_poly@x+1,___ftmul@f1+1
  2486  001B3A  C0E8  F0D0         	movff	eval_poly@x+2,___ftmul@f1+2
  2487  001B3E  ECD2  F00A         	call	___ftmul	;wreg free
  2488  001B42  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  2489  001B46  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  2490  001B4A  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  2491  001B4E  0E00               	movlw	0
  2492  001B50  6E23               	movwf	___wmul@multiplicand+1,c
  2493  001B52  0E03               	movlw	3
  2494  001B54  6E22               	movwf	___wmul@multiplicand,c
  2495  001B56  0100               	movlb	0	; () banked
  2496  001B58  07EB               	decf	eval_poly@n& (0+255),f,b
  2497  001B5A  A0D8               	btfss	status,0,c
  2498  001B5C  07EC               	decf	(eval_poly@n+1)& (0+255),f,b
  2499  001B5E  C0EB  F020         	movff	eval_poly@n,___wmul@multiplier
  2500  001B62  C0EC  F021         	movff	eval_poly@n+1,___wmul@multiplier+1
  2501  001B66  EC13  F013         	call	___wmul	;wreg free
  2502  001B6A  0100               	movlb	0	; () banked
  2503  001B6C  C0E9  F0ED         	movff	eval_poly@d,??_eval_poly
  2504  001B70  0100               	movlb	0	; () banked
  2505  001B72  C0EA  F0EE         	movff	eval_poly@d+1,??_eval_poly+1
  2506  001B76  5020               	movf	?___wmul,w,c
  2507  001B78  0100               	movlb	0	; () banked
  2508  001B7A  27ED               	addwf	??_eval_poly& (0+255),f,b
  2509  001B7C  5021               	movf	?___wmul+1,w,c
  2510  001B7E  0100               	movlb	0	; () banked
  2511  001B80  23EE               	addwfc	(??_eval_poly+1)& (0+255),f,b
  2512  001B82  C0ED  FFF6         	movff	??_eval_poly,tblptrl
  2513  001B86  C0EE  FFF7         	movff	??_eval_poly+1,tblptrh
  2514  001B8A                     	if	0	;tblptru may be non-zero
  2515  001B8A                     	endif
  2516  001B8A                     	if	0	;tblptru may be non-zero
  2517  001B8A                     	endif
  2518  001B8A  0009               	tblrd		*+
  2519  001B8C  0100               	movlb	0	; () banked
  2520  001B8E  CFF5 F0DD          	movff	tablat,___ftadd@f2
  2521  001B92  0009               	tblrd		*+
  2522  001B94  0100               	movlb	0	; () banked
  2523  001B96  CFF5 F0DE          	movff	tablat,___ftadd@f2+1
  2524  001B9A  000A               	tblrd		*-
  2525  001B9C  0100               	movlb	0	; () banked
  2526  001B9E  CFF5 F0DF          	movff	tablat,___ftadd@f2+2
  2527  001BA2  ECB1  F005         	call	___ftadd	;wreg free
  2528  001BA6  C0DA  F0EF         	movff	?___ftadd,eval_poly@res
  2529  001BAA  C0DB  F0F0         	movff	?___ftadd+1,eval_poly@res+1
  2530  001BAE  C0DC  F0F1         	movff	?___ftadd+2,eval_poly@res+2
  2531  001BB2                     l3888:
  2532  001BB2  0100               	movlb	0	; () banked
  2533  001BB4  51EC               	movf	(eval_poly@n+1)& (0+255),w,b
  2534  001BB6  11EB               	iorwf	eval_poly@n& (0+255),w,b
  2535  001BB8  A4D8               	btfss	status,2,c
  2536  001BBA  D7B5               	goto	l3886
  2537                           
  2538                           ; BSR set to: 0
  2539  001BBC  C0EF  F0E6         	movff	eval_poly@res,?_eval_poly
  2540  001BC0  C0F0  F0E7         	movff	eval_poly@res+1,?_eval_poly+1
  2541  001BC4  C0F1  F0E8         	movff	eval_poly@res+2,?_eval_poly+2
  2542                           
  2543                           ; BSR set to: 0
  2544  001BC8  0012               	return	
  2545  001BCA                     __end_of_eval_poly:
  2546                           	opt stack 0
  2547                           tblptru	equ	0xFF8
  2548                           tblptrh	equ	0xFF7
  2549                           tblptrl	equ	0xFF6
  2550                           tablat	equ	0xFF5
  2551                           prodh	equ	0xFF4
  2552                           prodl	equ	0xFF3
  2553                           intcon	equ	0xFF2
  2554                           postinc0	equ	0xFEE
  2555                           wreg	equ	0xFE8
  2556                           indf2	equ	0xFDF
  2557                           postinc2	equ	0xFDE
  2558                           postdec2	equ	0xFDD
  2559                           fsr2h	equ	0xFDA
  2560                           fsr2l	equ	0xFD9
  2561                           status	equ	0xFD8
  2562                           
  2563 ;; *************** function ___ftsub *****************
  2564 ;; Defined at:
  2565 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftsub.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  f1              3   30[BANK0 ] float 
  2568 ;;  f2              3   33[BANK0 ] float 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;		None
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  3   30[BANK0 ] float 
  2573 ;; Registers used:
  2574 ;;		wreg, status,2, status,0, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2580 ;;      Params:         0       6       0       0       0       0       0
  2581 ;;      Locals:         0       0       0       0       0       0       0
  2582 ;;      Temps:          0       0       0       0       0       0       0
  2583 ;;      Totals:         0       6       0       0       0       0       0
  2584 ;;Total ram usage:        6 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    6
  2587 ;; This function calls:
  2588 ;;		___ftadd
  2589 ;; This function is called by:
  2590 ;;		_Temp_Convert
  2591 ;; This function uses a non-reentrant model
  2592 ;;
  2593                           
  2594                           	psect	text9
  2595  00249E                     __ptext9:
  2596                           	opt stack 0
  2597  00249E                     ___ftsub:
  2598                           	opt stack 23
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;incstack = 0
  2602  00249E  0E00               	movlw	0
  2603  0024A0  0100               	movlb	0	; () banked
  2604  0024A2  1BE9               	xorwf	___ftsub@f2& (0+255),f,b
  2605  0024A4  0E00               	movlw	0
  2606  0024A6  0100               	movlb	0	; () banked
  2607  0024A8  1BEA               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  2608  0024AA  0E80               	movlw	128
  2609  0024AC  0100               	movlb	0	; () banked
  2610  0024AE  1BEB               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  2611                           
  2612                           ; BSR set to: 0
  2613  0024B0  C0E6  F0DA         	movff	___ftsub@f1,___ftadd@f1
  2614  0024B4  C0E7  F0DB         	movff	___ftsub@f1+1,___ftadd@f1+1
  2615  0024B8  C0E8  F0DC         	movff	___ftsub@f1+2,___ftadd@f1+2
  2616  0024BC  C0E9  F0DD         	movff	___ftsub@f2,___ftadd@f2
  2617  0024C0  C0EA  F0DE         	movff	___ftsub@f2+1,___ftadd@f2+1
  2618  0024C4  C0EB  F0DF         	movff	___ftsub@f2+2,___ftadd@f2+2
  2619  0024C8  ECB1  F005         	call	___ftadd	;wreg free
  2620  0024CC  C0DA  F0E6         	movff	?___ftadd,?___ftsub
  2621  0024D0  C0DB  F0E7         	movff	?___ftadd+1,?___ftsub+1
  2622  0024D4  C0DC  F0E8         	movff	?___ftadd+2,?___ftsub+2
  2623  0024D8  0012               	return	
  2624  0024DA                     __end_of___ftsub:
  2625                           	opt stack 0
  2626                           tblptru	equ	0xFF8
  2627                           tblptrh	equ	0xFF7
  2628                           tblptrl	equ	0xFF6
  2629                           tablat	equ	0xFF5
  2630                           prodh	equ	0xFF4
  2631                           prodl	equ	0xFF3
  2632                           intcon	equ	0xFF2
  2633                           postinc0	equ	0xFEE
  2634                           wreg	equ	0xFE8
  2635                           indf2	equ	0xFDF
  2636                           postinc2	equ	0xFDE
  2637                           postdec2	equ	0xFDD
  2638                           fsr2h	equ	0xFDA
  2639                           fsr2l	equ	0xFD9
  2640                           status	equ	0xFD8
  2641                           
  2642 ;; *************** function _Temp_Filter *****************
  2643 ;; Defined at:
  2644 ;;		line 35 in file "Tempeture.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;		None
  2647 ;; Auto vars:     Size  Location     Type
  2648 ;;  x               2   30[BANK0 ] int 
  2649 ;; Return value:  Size  Location     Type
  2650 ;;		None               void
  2651 ;; Registers used:
  2652 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2658 ;;      Params:         0       0       0       0       0       0       0
  2659 ;;      Locals:         0       2       0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0
  2661 ;;      Totals:         0       2       0       0       0       0       0
  2662 ;;Total ram usage:        2 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    6
  2665 ;; This function calls:
  2666 ;;		___ftadd
  2667 ;;		___ftmul
  2668 ;;		___wmul
  2669 ;; This function is called by:
  2670 ;;		_Temp_Convert
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           	psect	text10
  2675  00170E                     __ptext10:
  2676                           	opt stack 0
  2677  00170E                     _Temp_Filter:
  2678                           	opt stack 23
  2679                           
  2680                           ;Tempeture.c: 38: for(int x = 0; x < 6; x++)
  2681                           
  2682                           ;incstack = 0
  2683  00170E  0E00               	movlw	0
  2684  001710  0100               	movlb	0	; () banked
  2685  001712  6FE7               	movwf	(Temp_Filter@x+1)& (0+255),b
  2686  001714  0E00               	movlw	0
  2687  001716  0100               	movlb	0	; () banked
  2688  001718  6FE6               	movwf	Temp_Filter@x& (0+255),b
  2689  00171A                     
  2690                           ; BSR set to: 0
  2691  00171A  0100               	movlb	0	; () banked
  2692  00171C  51E7               	movf	(Temp_Filter@x+1)& (0+255),w,b
  2693  00171E  0A80               	xorlw	128
  2694  001720  0F80               	addlw	-128
  2695  001722  0E06               	movlw	6
  2696  001724  B4D8               	btfsc	status,2,c
  2697  001726  5DE6               	subwf	Temp_Filter@x& (0+255),w,b
  2698  001728  B0D8               	btfsc	status,0,c
  2699  00172A  0012               	return	
  2700                           
  2701                           ; BSR set to: 0
  2702                           ;Tempeture.c: 39: {
  2703                           ;Tempeture.c: 40: Temp_DegF[x] = (0.88*TmpTemp_DegF[x] + ((1- 0.88)*PrevTemp_DegF[x]));
  2704                           
  2705                           ; BSR set to: 0
  2706                           
  2707                           ; BSR set to: 0
  2708  00172C  C0E6  F020         	movff	Temp_Filter@x,___wmul@multiplier
  2709  001730  C0E7  F021         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2710  001734  0E00               	movlw	0
  2711  001736  6E23               	movwf	___wmul@multiplicand+1,c
  2712  001738  0E03               	movlw	3
  2713  00173A  6E22               	movwf	___wmul@multiplicand,c
  2714  00173C  EC13  F013         	call	___wmul	;wreg free
  2715  001740  0101               	movlb	1	; () banked
  2716  001742  0E48               	movlw	low _Temp_DegF
  2717  001744  2420               	addwf	?___wmul,w,c
  2718  001746  6ED9               	movwf	fsr2l,c
  2719  001748  0101               	movlb	1	; () banked
  2720  00174A  0E01               	movlw	high _Temp_DegF
  2721  00174C  2021               	addwfc	?___wmul+1,w,c
  2722  00174E  6EDA               	movwf	fsr2h,c
  2723  001750  0E48               	movlw	72
  2724  001752  0100               	movlb	0	; () banked
  2725  001754  6FD1               	movwf	___ftmul@f2& (0+255),b
  2726  001756  0E61               	movlw	97
  2727  001758  0100               	movlb	0	; () banked
  2728  00175A  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  2729  00175C  0E3F               	movlw	63
  2730  00175E  0100               	movlb	0	; () banked
  2731  001760  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  2732  001762  C0E6  F020         	movff	Temp_Filter@x,___wmul@multiplier
  2733  001766  C0E7  F021         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2734  00176A  0E00               	movlw	0
  2735  00176C  6E23               	movwf	___wmul@multiplicand+1,c
  2736  00176E  0E03               	movlw	3
  2737  001770  6E22               	movwf	___wmul@multiplicand,c
  2738  001772  EC13  F013         	call	___wmul	;wreg free
  2739  001776  0101               	movlb	1	; () banked
  2740  001778  0E87               	movlw	low _TmpTemp_DegF
  2741  00177A  2420               	addwf	?___wmul,w,c
  2742  00177C  6EE1               	movwf	fsr1l,c
  2743  00177E  0101               	movlb	1	; () banked
  2744  001780  0E01               	movlw	high _TmpTemp_DegF
  2745  001782  2021               	addwfc	?___wmul+1,w,c
  2746  001784  6EE2               	movwf	fsr1h,c
  2747  001786  0100               	movlb	0	; () banked
  2748  001788  CFE6 F0CE          	movff	postinc1,___ftmul@f1
  2749  00178C  0100               	movlb	0	; () banked
  2750  00178E  CFE6 F0CF          	movff	postinc1,___ftmul@f1+1
  2751  001792  0100               	movlb	0	; () banked
  2752  001794  CFE5 F0D0          	movff	postdec1,___ftmul@f1+2
  2753  001798  ECD2  F00A         	call	___ftmul	;wreg free
  2754  00179C  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  2755  0017A0  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  2756  0017A4  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  2757  0017A8  0EC3               	movlw	195
  2758  0017AA  0100               	movlb	0	; () banked
  2759  0017AC  6FD1               	movwf	___ftmul@f2& (0+255),b
  2760  0017AE  0EF5               	movlw	245
  2761  0017B0  0100               	movlb	0	; () banked
  2762  0017B2  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  2763  0017B4  0E3D               	movlw	61
  2764  0017B6  0100               	movlb	0	; () banked
  2765  0017B8  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  2766  0017BA  0E00               	movlw	0
  2767  0017BC  6E23               	movwf	___wmul@multiplicand+1,c
  2768  0017BE  0E03               	movlw	3
  2769  0017C0  6E22               	movwf	___wmul@multiplicand,c
  2770  0017C2  C0E6  F020         	movff	Temp_Filter@x,___wmul@multiplier
  2771  0017C6  C0E7  F021         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2772  0017CA  EC13  F013         	call	___wmul	;wreg free
  2773  0017CE  0101               	movlb	1	; () banked
  2774  0017D0  0E30               	movlw	low _PrevTemp_DegF
  2775  0017D2  2420               	addwf	?___wmul,w,c
  2776  0017D4  6EE1               	movwf	fsr1l,c
  2777  0017D6  0101               	movlb	1	; () banked
  2778  0017D8  0E01               	movlw	high _PrevTemp_DegF
  2779  0017DA  2021               	addwfc	?___wmul+1,w,c
  2780  0017DC  6EE2               	movwf	fsr1h,c
  2781  0017DE  0100               	movlb	0	; () banked
  2782  0017E0  CFE6 F0CE          	movff	postinc1,___ftmul@f1
  2783  0017E4  0100               	movlb	0	; () banked
  2784  0017E6  CFE6 F0CF          	movff	postinc1,___ftmul@f1+1
  2785  0017EA  0100               	movlb	0	; () banked
  2786  0017EC  CFE5 F0D0          	movff	postdec1,___ftmul@f1+2
  2787  0017F0  ECD2  F00A         	call	___ftmul	;wreg free
  2788  0017F4  C0CE  F0DD         	movff	?___ftmul,___ftadd@f2
  2789  0017F8  C0CF  F0DE         	movff	?___ftmul+1,___ftadd@f2+1
  2790  0017FC  C0D0  F0DF         	movff	?___ftmul+2,___ftadd@f2+2
  2791  001800  ECB1  F005         	call	___ftadd	;wreg free
  2792  001804  C0DA  FFDE         	movff	?___ftadd,postinc2
  2793  001808  C0DB  FFDE         	movff	?___ftadd+1,postinc2
  2794  00180C  C0DC  FFDD         	movff	?___ftadd+2,postdec2
  2795  001810  52DD               	movf	postdec2,f,c
  2796                           
  2797                           ;Tempeture.c: 41: PrevTemp_DegF[x] = Temp_DegF[x];
  2798  001812  C0E6  F020         	movff	Temp_Filter@x,___wmul@multiplier
  2799  001816  C0E7  F021         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2800  00181A  0E00               	movlw	0
  2801  00181C  6E23               	movwf	___wmul@multiplicand+1,c
  2802  00181E  0E03               	movlw	3
  2803  001820  6E22               	movwf	___wmul@multiplicand,c
  2804  001822  EC13  F013         	call	___wmul	;wreg free
  2805  001826  0101               	movlb	1	; () banked
  2806  001828  0E48               	movlw	low _Temp_DegF
  2807  00182A  2420               	addwf	?___wmul,w,c
  2808  00182C  6ED9               	movwf	fsr2l,c
  2809  00182E  0101               	movlb	1	; () banked
  2810  001830  0E01               	movlw	high _Temp_DegF
  2811  001832  2021               	addwfc	?___wmul+1,w,c
  2812  001834  6EDA               	movwf	fsr2h,c
  2813  001836  C0E6  F020         	movff	Temp_Filter@x,___wmul@multiplier
  2814  00183A  C0E7  F021         	movff	Temp_Filter@x+1,___wmul@multiplier+1
  2815  00183E  0E00               	movlw	0
  2816  001840  6E23               	movwf	___wmul@multiplicand+1,c
  2817  001842  0E03               	movlw	3
  2818  001844  6E22               	movwf	___wmul@multiplicand,c
  2819  001846  EC13  F013         	call	___wmul	;wreg free
  2820  00184A  0101               	movlb	1	; () banked
  2821  00184C  0E30               	movlw	low _PrevTemp_DegF
  2822  00184E  2420               	addwf	?___wmul,w,c
  2823  001850  6EE1               	movwf	fsr1l,c
  2824  001852  0101               	movlb	1	; () banked
  2825  001854  0E01               	movlw	high _PrevTemp_DegF
  2826  001856  2021               	addwfc	?___wmul+1,w,c
  2827  001858  6EE2               	movwf	fsr1h,c
  2828  00185A  CFDE FFE6          	movff	postinc2,postinc1
  2829  00185E  CFDE FFE6          	movff	postinc2,postinc1
  2830  001862  CFDE FFE5          	movff	postinc2,postdec1
  2831  001866  52E5               	movf	postdec1,f,c
  2832                           
  2833                           ; BSR set to: 1
  2834  001868  0100               	movlb	0	; () banked
  2835  00186A  4BE6               	infsnz	Temp_Filter@x& (0+255),f,b
  2836  00186C  2BE7               	incf	(Temp_Filter@x+1)& (0+255),f,b
  2837  00186E  D755               	goto	L4
  2838  001870                     __end_of_Temp_Filter:
  2839                           	opt stack 0
  2840                           tblptru	equ	0xFF8
  2841                           tblptrh	equ	0xFF7
  2842                           tblptrl	equ	0xFF6
  2843                           tablat	equ	0xFF5
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           intcon	equ	0xFF2
  2847                           postinc0	equ	0xFEE
  2848                           wreg	equ	0xFE8
  2849                           postinc1	equ	0xFE6
  2850                           postdec1	equ	0xFE5
  2851                           fsr1h	equ	0xFE2
  2852                           fsr1l	equ	0xFE1
  2853                           indf2	equ	0xFDF
  2854                           postinc2	equ	0xFDE
  2855                           postdec2	equ	0xFDD
  2856                           fsr2h	equ	0xFDA
  2857                           fsr2l	equ	0xFD9
  2858                           status	equ	0xFD8
  2859                           
  2860 ;; *************** function _SYSTEM_Initialize *****************
  2861 ;; Defined at:
  2862 ;;		line 112 in file "mcc_generated_files/mcc.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;		None
  2867 ;; Return value:  Size  Location     Type
  2868 ;;		None               void
  2869 ;; Registers used:
  2870 ;;		wreg, status,2, cstack
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2876 ;;      Params:         0       0       0       0       0       0       0
  2877 ;;      Locals:         0       0       0       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0       0       0
  2879 ;;      Totals:         0       0       0       0       0       0       0
  2880 ;;Total ram usage:        0 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    6
  2883 ;; This function calls:
  2884 ;;		_ADC_Initialize
  2885 ;;		_EUSART1_Initialize
  2886 ;;		_INTERRUPT_Initialize
  2887 ;;		_OSCILLATOR_Initialize
  2888 ;;		_PIN_MANAGER_Initialize
  2889 ;;		_TMR1_Initialize
  2890 ;; This function is called by:
  2891 ;;		_main
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text11
  2896  002690                     __ptext11:
  2897                           	opt stack 0
  2898  002690                     _SYSTEM_Initialize:
  2899                           	opt stack 24
  2900                           
  2901                           ;mcc.c: 113: OSCILLATOR_Initialize();
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;incstack = 0
  2905  002690  EC9C  F013         	call	_OSCILLATOR_Initialize	;wreg free
  2906                           
  2907                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  2908  002694  ECC0  F011         	call	_PIN_MANAGER_Initialize	;wreg free
  2909                           
  2910                           ;mcc.c: 115: INTERRUPT_Initialize();
  2911  002698  ECA3  F013         	call	_INTERRUPT_Initialize	;wreg free
  2912                           
  2913                           ;mcc.c: 116: ADC_Initialize();
  2914  00269C  EC62  F013         	call	_ADC_Initialize	;wreg free
  2915                           
  2916                           ;mcc.c: 117: EUSART1_Initialize();
  2917  0026A0  EC6D  F012         	call	_EUSART1_Initialize	;wreg free
  2918                           
  2919                           ;mcc.c: 118: TMR1_Initialize();
  2920  0026A4  EC26  F013         	call	_TMR1_Initialize	;wreg free
  2921  0026A8  0012               	return	
  2922  0026AA                     __end_of_SYSTEM_Initialize:
  2923                           	opt stack 0
  2924                           tblptru	equ	0xFF8
  2925                           tblptrh	equ	0xFF7
  2926                           tblptrl	equ	0xFF6
  2927                           tablat	equ	0xFF5
  2928                           prodh	equ	0xFF4
  2929                           prodl	equ	0xFF3
  2930                           intcon	equ	0xFF2
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           postinc1	equ	0xFE6
  2934                           postdec1	equ	0xFE5
  2935                           fsr1h	equ	0xFE2
  2936                           fsr1l	equ	0xFE1
  2937                           indf2	equ	0xFDF
  2938                           postinc2	equ	0xFDE
  2939                           postdec2	equ	0xFDD
  2940                           fsr2h	equ	0xFDA
  2941                           fsr2l	equ	0xFD9
  2942                           status	equ	0xFD8
  2943                           
  2944 ;; *************** function _TMR1_Initialize *****************
  2945 ;; Defined at:
  2946 ;;		line 24 in file "mcc_generated_files/tmr1.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;		None
  2951 ;; Return value:  Size  Location     Type
  2952 ;;		None               void
  2953 ;; Registers used:
  2954 ;;		wreg, status,2, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2960 ;;      Params:         0       0       0       0       0       0       0
  2961 ;;      Locals:         0       0       0       0       0       0       0
  2962 ;;      Temps:          0       0       0       0       0       0       0
  2963 ;;      Totals:         0       0       0       0       0       0       0
  2964 ;;Total ram usage:        0 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    5
  2967 ;; This function calls:
  2968 ;;		_TMR1_StartTimer
  2969 ;; This function is called by:
  2970 ;;		_SYSTEM_Initialize
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text12
  2975  00264C                     __ptext12:
  2976                           	opt stack 0
  2977  00264C                     _TMR1_Initialize:
  2978                           	opt stack 24
  2979                           
  2980                           ;tmr1.c: 28: T1CON = 0x34;
  2981                           
  2982                           ;incstack = 0
  2983  00264C  0E34               	movlw	52
  2984  00264E  6ECD               	movwf	4045,c	;volatile
  2985                           
  2986                           ;tmr1.c: 31: T1GCON = 0x00;
  2987  002650  0E00               	movlw	0
  2988  002652  6ECC               	movwf	4044,c	;volatile
  2989                           
  2990                           ;tmr1.c: 34: TMR1H = 0x0B;
  2991  002654  0E0B               	movlw	11
  2992  002656  6ECF               	movwf	4047,c	;volatile
  2993                           
  2994                           ;tmr1.c: 37: TMR1L = 0xDC;
  2995  002658  0EDC               	movlw	220
  2996  00265A  6ECE               	movwf	4046,c	;volatile
  2997                           
  2998                           ;tmr1.c: 40: timer1ReloadVal = TMR1;
  2999  00265C  CFCE F046          	movff	4046,_timer1ReloadVal	;volatile
  3000  002660  CFCF F047          	movff	4047,_timer1ReloadVal+1	;volatile
  3001                           
  3002                           ;tmr1.c: 43: PIR1bits.TMR1IF = 0;
  3003  002664  909E               	bcf	3998,0,c	;volatile
  3004                           
  3005                           ;tmr1.c: 46: PIE1bits.TMR1IE = 1;
  3006  002666  809D               	bsf	3997,0,c	;volatile
  3007                           
  3008                           ;tmr1.c: 49: TMR1_StartTimer();
  3009  002668  ECAE  F013         	call	_TMR1_StartTimer	;wreg free
  3010  00266C  0012               	return	
  3011  00266E                     __end_of_TMR1_Initialize:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           prodh	equ	0xFF4
  3018                           prodl	equ	0xFF3
  3019                           intcon	equ	0xFF2
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postinc1	equ	0xFE6
  3023                           postdec1	equ	0xFE5
  3024                           fsr1h	equ	0xFE2
  3025                           fsr1l	equ	0xFE1
  3026                           indf2	equ	0xFDF
  3027                           postinc2	equ	0xFDE
  3028                           postdec2	equ	0xFDD
  3029                           fsr2h	equ	0xFDA
  3030                           fsr2l	equ	0xFD9
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _TMR1_StartTimer *****************
  3034 ;; Defined at:
  3035 ;;		line 52 in file "mcc_generated_files/tmr1.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;		None
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;		None               void
  3042 ;; Registers used:
  3043 ;;		None
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3049 ;;      Params:         0       0       0       0       0       0       0
  3050 ;;      Locals:         0       0       0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0
  3052 ;;      Totals:         0       0       0       0       0       0       0
  3053 ;;Total ram usage:        0 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    4
  3056 ;; This function calls:
  3057 ;;		Nothing
  3058 ;; This function is called by:
  3059 ;;		_TMR1_Initialize
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text13
  3064  00275C                     __ptext13:
  3065                           	opt stack 0
  3066  00275C                     _TMR1_StartTimer:
  3067                           	opt stack 24
  3068                           
  3069                           ;tmr1.c: 54: T1CONbits.TMR1ON = 1;
  3070                           
  3071                           ;incstack = 0
  3072  00275C  80CD               	bsf	4045,0,c	;volatile
  3073  00275E  0012               	return	
  3074  002760                     __end_of_TMR1_StartTimer:
  3075                           	opt stack 0
  3076                           tblptru	equ	0xFF8
  3077                           tblptrh	equ	0xFF7
  3078                           tblptrl	equ	0xFF6
  3079                           tablat	equ	0xFF5
  3080                           prodh	equ	0xFF4
  3081                           prodl	equ	0xFF3
  3082                           intcon	equ	0xFF2
  3083                           postinc0	equ	0xFEE
  3084                           wreg	equ	0xFE8
  3085                           postinc1	equ	0xFE6
  3086                           postdec1	equ	0xFE5
  3087                           fsr1h	equ	0xFE2
  3088                           fsr1l	equ	0xFE1
  3089                           indf2	equ	0xFDF
  3090                           postinc2	equ	0xFDE
  3091                           postdec2	equ	0xFDD
  3092                           fsr2h	equ	0xFDA
  3093                           fsr2l	equ	0xFD9
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _PIN_MANAGER_Initialize *****************
  3097 ;; Defined at:
  3098 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;		None               void
  3105 ;; Registers used:
  3106 ;;		wreg, status,2
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3112 ;;      Params:         0       0       0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0
  3115 ;;      Totals:         0       0       0       0       0       0       0
  3116 ;;Total ram usage:        0 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    4
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_SYSTEM_Initialize
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text14
  3127  002380                     __ptext14:
  3128                           	opt stack 0
  3129  002380                     _PIN_MANAGER_Initialize:
  3130                           	opt stack 25
  3131                           
  3132                           ;pin_manager.c: 51: LATA = 0x00;
  3133                           
  3134                           ;incstack = 0
  3135  002380  0E00               	movlw	0
  3136  002382  6E89               	movwf	3977,c	;volatile
  3137                           
  3138                           ;pin_manager.c: 52: TRISA = 0x2F;
  3139  002384  0E2F               	movlw	47
  3140  002386  6E92               	movwf	3986,c	;volatile
  3141                           
  3142                           ;pin_manager.c: 53: ANSELA = 0x2F;
  3143  002388  0E2F               	movlw	47
  3144  00238A  010F               	movlb	15	; () banked
  3145  00238C  6F38               	movwf	56,b	;volatile
  3146                           
  3147                           ;pin_manager.c: 55: LATB = 0x00;
  3148  00238E  0E00               	movlw	0
  3149  002390  6E8A               	movwf	3978,c	;volatile
  3150                           
  3151                           ;pin_manager.c: 56: TRISB = 0xF8;
  3152  002392  0EF8               	movlw	248
  3153  002394  6E93               	movwf	3987,c	;volatile
  3154                           
  3155                           ;pin_manager.c: 57: ANSELB = 0x38;
  3156  002396  0E38               	movlw	56
  3157  002398  010F               	movlb	15	; () banked
  3158  00239A  6F39               	movwf	57,b	;volatile
  3159                           
  3160                           ;pin_manager.c: 58: WPUB = 0x00;
  3161  00239C  0E00               	movlw	0
  3162  00239E  6E61               	movwf	3937,c	;volatile
  3163                           
  3164                           ;pin_manager.c: 60: LATC = 0x00;
  3165  0023A0  0E00               	movlw	0
  3166  0023A2  6E8B               	movwf	3979,c	;volatile
  3167                           
  3168                           ;pin_manager.c: 61: TRISC = 0xD6;
  3169  0023A4  0ED6               	movlw	214
  3170  0023A6  6E94               	movwf	3988,c	;volatile
  3171                           
  3172                           ;pin_manager.c: 62: ANSELC = 0x14;
  3173  0023A8  0E14               	movlw	20
  3174  0023AA  010F               	movlb	15	; () banked
  3175  0023AC  6F3A               	movwf	58,b	;volatile
  3176                           
  3177                           ;pin_manager.c: 64: LATD = 0x00;
  3178  0023AE  0E00               	movlw	0
  3179  0023B0  6E8C               	movwf	3980,c	;volatile
  3180                           
  3181                           ;pin_manager.c: 65: TRISD = 0x03;
  3182  0023B2  0E03               	movlw	3
  3183  0023B4  6E95               	movwf	3989,c	;volatile
  3184                           
  3185                           ;pin_manager.c: 66: ANSELD = 0x03;
  3186  0023B6  0E03               	movlw	3
  3187  0023B8  010F               	movlb	15	; () banked
  3188  0023BA  6F3B               	movwf	59,b	;volatile
  3189                           
  3190                           ;pin_manager.c: 68: LATE = 0x00;
  3191  0023BC  0E00               	movlw	0
  3192  0023BE  6E8D               	movwf	3981,c	;volatile
  3193                           
  3194                           ;pin_manager.c: 69: TRISE = 0x07;
  3195  0023C0  0E07               	movlw	7
  3196  0023C2  6E96               	movwf	3990,c	;volatile
  3197                           
  3198                           ;pin_manager.c: 70: ANSELE = 0x07;
  3199  0023C4  0E07               	movlw	7
  3200  0023C6  010F               	movlb	15	; () banked
  3201  0023C8  6F3C               	movwf	60,b	;volatile
  3202                           
  3203                           ; BSR set to: 15
  3204                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x01;
  3205  0023CA  8EF1               	bsf	intcon2,7,c	;volatile
  3206                           
  3207                           ; BSR set to: 15
  3208  0023CC  0012               	return	
  3209  0023CE                     __end_of_PIN_MANAGER_Initialize:
  3210                           	opt stack 0
  3211                           tblptru	equ	0xFF8
  3212                           tblptrh	equ	0xFF7
  3213                           tblptrl	equ	0xFF6
  3214                           tablat	equ	0xFF5
  3215                           prodh	equ	0xFF4
  3216                           prodl	equ	0xFF3
  3217                           intcon	equ	0xFF2
  3218                           intcon2	equ	0xFF1
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           postinc1	equ	0xFE6
  3222                           postdec1	equ	0xFE5
  3223                           fsr1h	equ	0xFE2
  3224                           fsr1l	equ	0xFE1
  3225                           indf2	equ	0xFDF
  3226                           postinc2	equ	0xFDE
  3227                           postdec2	equ	0xFDD
  3228                           fsr2h	equ	0xFDA
  3229                           fsr2l	equ	0xFD9
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _OSCILLATOR_Initialize *****************
  3233 ;; Defined at:
  3234 ;;		line 121 in file "mcc_generated_files/mcc.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;		None
  3239 ;; Return value:  Size  Location     Type
  3240 ;;		None               void
  3241 ;; Registers used:
  3242 ;;		wreg, status,2
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3248 ;;      Params:         0       0       0       0       0       0       0
  3249 ;;      Locals:         0       0       0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0
  3251 ;;      Totals:         0       0       0       0       0       0       0
  3252 ;;Total ram usage:        0 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    4
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_SYSTEM_Initialize
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text15
  3263  002738                     __ptext15:
  3264                           	opt stack 0
  3265  002738                     _OSCILLATOR_Initialize:
  3266                           	opt stack 25
  3267                           
  3268                           ;mcc.c: 123: OSCCON = 0x42;
  3269                           
  3270                           ; BSR set to: 15
  3271                           ;incstack = 0
  3272  002738  0E42               	movlw	66
  3273  00273A  6ED3               	movwf	4051,c	;volatile
  3274                           
  3275                           ;mcc.c: 125: OSCCON2 = 0x04;
  3276  00273C  0E04               	movlw	4
  3277  00273E  6ED2               	movwf	4050,c	;volatile
  3278                           
  3279                           ;mcc.c: 127: OSCTUNE = 0x00;
  3280  002740  0E00               	movlw	0
  3281  002742  6E9B               	movwf	3995,c	;volatile
  3282  002744  0012               	return	
  3283  002746                     __end_of_OSCILLATOR_Initialize:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           prodh	equ	0xFF4
  3290                           prodl	equ	0xFF3
  3291                           intcon	equ	0xFF2
  3292                           intcon2	equ	0xFF1
  3293                           postinc0	equ	0xFEE
  3294                           wreg	equ	0xFE8
  3295                           postinc1	equ	0xFE6
  3296                           postdec1	equ	0xFE5
  3297                           fsr1h	equ	0xFE2
  3298                           fsr1l	equ	0xFE1
  3299                           indf2	equ	0xFDF
  3300                           postinc2	equ	0xFDE
  3301                           postdec2	equ	0xFDD
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _INTERRUPT_Initialize *****************
  3307 ;; Defined at:
  3308 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;		None
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;		None
  3313 ;; Return value:  Size  Location     Type
  3314 ;;		None               void
  3315 ;; Registers used:
  3316 ;;		None
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3322 ;;      Params:         0       0       0       0       0       0       0
  3323 ;;      Locals:         0       0       0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0
  3325 ;;      Totals:         0       0       0       0       0       0       0
  3326 ;;Total ram usage:        0 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    4
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_SYSTEM_Initialize
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336                           	psect	text16
  3337  002746                     __ptext16:
  3338                           	opt stack 0
  3339  002746                     _INTERRUPT_Initialize:
  3340                           	opt stack 25
  3341                           
  3342                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  3343                           
  3344                           ;incstack = 0
  3345  002746  9ED0               	bcf	4048,7,c	;volatile
  3346                           
  3347                           ;interrupt_manager.c: 59: IPR1bits.RC1IP = 0;
  3348  002748  9A9F               	bcf	3999,5,c	;volatile
  3349                           
  3350                           ;interrupt_manager.c: 61: IPR1bits.ADIP = 0;
  3351  00274A  9C9F               	bcf	3999,6,c	;volatile
  3352                           
  3353                           ;interrupt_manager.c: 63: IPR1bits.TX1IP = 0;
  3354  00274C  989F               	bcf	3999,4,c	;volatile
  3355                           
  3356                           ;interrupt_manager.c: 65: IPR1bits.TMR1IP = 0;
  3357  00274E  909F               	bcf	3999,0,c	;volatile
  3358  002750  0012               	return	
  3359  002752                     __end_of_INTERRUPT_Initialize:
  3360                           	opt stack 0
  3361                           tblptru	equ	0xFF8
  3362                           tblptrh	equ	0xFF7
  3363                           tblptrl	equ	0xFF6
  3364                           tablat	equ	0xFF5
  3365                           prodh	equ	0xFF4
  3366                           prodl	equ	0xFF3
  3367                           intcon	equ	0xFF2
  3368                           intcon2	equ	0xFF1
  3369                           postinc0	equ	0xFEE
  3370                           wreg	equ	0xFE8
  3371                           postinc1	equ	0xFE6
  3372                           postdec1	equ	0xFE5
  3373                           fsr1h	equ	0xFE2
  3374                           fsr1l	equ	0xFE1
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           postdec2	equ	0xFDD
  3378                           fsr2h	equ	0xFDA
  3379                           fsr2l	equ	0xFD9
  3380                           status	equ	0xFD8
  3381                           
  3382 ;; *************** function _EUSART1_Initialize *****************
  3383 ;; Defined at:
  3384 ;;		line 76 in file "mcc_generated_files/eusart1.c"
  3385 ;; Parameters:    Size  Location     Type
  3386 ;;		None
  3387 ;; Auto vars:     Size  Location     Type
  3388 ;;		None
  3389 ;; Return value:  Size  Location     Type
  3390 ;;		None               void
  3391 ;; Registers used:
  3392 ;;		wreg, status,2
  3393 ;; Tracked objects:
  3394 ;;		On entry : 0/0
  3395 ;;		On exit  : 0/0
  3396 ;;		Unchanged: 0/0
  3397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3398 ;;      Params:         0       0       0       0       0       0       0
  3399 ;;      Locals:         0       0       0       0       0       0       0
  3400 ;;      Temps:          0       0       0       0       0       0       0
  3401 ;;      Totals:         0       0       0       0       0       0       0
  3402 ;;Total ram usage:        0 bytes
  3403 ;; Hardware stack levels used:    1
  3404 ;; Hardware stack levels required when called:    4
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_SYSTEM_Initialize
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           	psect	text17
  3413  0024DA                     __ptext17:
  3414                           	opt stack 0
  3415  0024DA                     _EUSART1_Initialize:
  3416                           	opt stack 25
  3417                           
  3418                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
  3419                           
  3420                           ;incstack = 0
  3421  0024DA  9A9D               	bcf	3997,5,c	;volatile
  3422                           
  3423                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
  3424  0024DC  989D               	bcf	3997,4,c	;volatile
  3425                           
  3426                           ;eusart1.c: 84: BAUD1CON = 0x48;
  3427  0024DE  0E48               	movlw	72
  3428  0024E0  6EB8               	movwf	4024,c	;volatile
  3429                           
  3430                           ;eusart1.c: 87: RC1STA = 0x98;
  3431  0024E2  0E98               	movlw	152
  3432  0024E4  6EAB               	movwf	4011,c	;volatile
  3433                           
  3434                           ;eusart1.c: 90: TX1STA = 0x26;
  3435  0024E6  0E26               	movlw	38
  3436  0024E8  6EAC               	movwf	4012,c	;volatile
  3437                           
  3438                           ;eusart1.c: 93: SPBRG1 = 0x33;
  3439  0024EA  0E33               	movlw	51
  3440  0024EC  6EAF               	movwf	4015,c	;volatile
  3441                           
  3442                           ;eusart1.c: 96: SPBRGH1 = 0x00;
  3443  0024EE  0E00               	movlw	0
  3444  0024F0  6EB0               	movwf	4016,c	;volatile
  3445                           
  3446                           ;eusart1.c: 100: eusart1TxHead = 0;
  3447  0024F2  0E00               	movlw	0
  3448  0024F4  6E43               	movwf	_eusart1TxHead,c
  3449                           
  3450                           ;eusart1.c: 101: eusart1TxTail = 0;
  3451  0024F6  0E00               	movlw	0
  3452  0024F8  6E44               	movwf	_eusart1TxTail,c
  3453                           
  3454                           ;eusart1.c: 102: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  3455  0024FA  0E08               	movlw	8
  3456  0024FC  6E48               	movwf	_eusart1TxBufferRemaining,c	;volatile
  3457                           
  3458                           ;eusart1.c: 104: eusart1RxHead = 0;
  3459  0024FE  0E00               	movlw	0
  3460  002500  6E41               	movwf	_eusart1RxHead,c
  3461                           
  3462                           ;eusart1.c: 105: eusart1RxTail = 0;
  3463  002502  0E00               	movlw	0
  3464  002504  6E42               	movwf	_eusart1RxTail,c
  3465                           
  3466                           ;eusart1.c: 106: eusart1RxCount = 0;
  3467  002506  0E00               	movlw	0
  3468  002508  6E40               	movwf	_eusart1RxCount,c	;volatile
  3469                           
  3470                           ;eusart1.c: 109: PIE1bits.RC1IE = 1;
  3471  00250A  8A9D               	bsf	3997,5,c	;volatile
  3472  00250C  0012               	return	
  3473  00250E                     __end_of_EUSART1_Initialize:
  3474                           	opt stack 0
  3475                           tblptru	equ	0xFF8
  3476                           tblptrh	equ	0xFF7
  3477                           tblptrl	equ	0xFF6
  3478                           tablat	equ	0xFF5
  3479                           prodh	equ	0xFF4
  3480                           prodl	equ	0xFF3
  3481                           intcon	equ	0xFF2
  3482                           intcon2	equ	0xFF1
  3483                           postinc0	equ	0xFEE
  3484                           wreg	equ	0xFE8
  3485                           postinc1	equ	0xFE6
  3486                           postdec1	equ	0xFE5
  3487                           fsr1h	equ	0xFE2
  3488                           fsr1l	equ	0xFE1
  3489                           indf2	equ	0xFDF
  3490                           postinc2	equ	0xFDE
  3491                           postdec2	equ	0xFDD
  3492                           fsr2h	equ	0xFDA
  3493                           fsr2l	equ	0xFD9
  3494                           status	equ	0xFD8
  3495                           
  3496 ;; *************** function _ADC_Initialize *****************
  3497 ;; Defined at:
  3498 ;;		line 15 in file "mcc_generated_files/adc.c"
  3499 ;; Parameters:    Size  Location     Type
  3500 ;;		None
  3501 ;; Auto vars:     Size  Location     Type
  3502 ;;		None
  3503 ;; Return value:  Size  Location     Type
  3504 ;;		None               void
  3505 ;; Registers used:
  3506 ;;		wreg, status,2
  3507 ;; Tracked objects:
  3508 ;;		On entry : 0/0
  3509 ;;		On exit  : 0/0
  3510 ;;		Unchanged: 0/0
  3511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3512 ;;      Params:         0       0       0       0       0       0       0
  3513 ;;      Locals:         0       0       0       0       0       0       0
  3514 ;;      Temps:          0       0       0       0       0       0       0
  3515 ;;      Totals:         0       0       0       0       0       0       0
  3516 ;;Total ram usage:        0 bytes
  3517 ;; Hardware stack levels used:    1
  3518 ;; Hardware stack levels required when called:    4
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		_SYSTEM_Initialize
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525                           
  3526                           	psect	text18
  3527  0026C4                     __ptext18:
  3528                           	opt stack 0
  3529  0026C4                     _ADC_Initialize:
  3530                           	opt stack 25
  3531                           
  3532                           ;adc.c: 19: ADCON0 = 0x01;
  3533                           
  3534                           ;incstack = 0
  3535  0026C4  0E01               	movlw	1
  3536  0026C6  6EC2               	movwf	4034,c	;volatile
  3537                           
  3538                           ;adc.c: 22: ADCON1 = 0x80;
  3539  0026C8  0E80               	movlw	128
  3540  0026CA  6EC1               	movwf	4033,c	;volatile
  3541                           
  3542                           ;adc.c: 25: ADCON2 = 0x0A;
  3543  0026CC  0E0A               	movlw	10
  3544  0026CE  6EC0               	movwf	4032,c	;volatile
  3545                           
  3546                           ;adc.c: 28: ADRESL = 0x00;
  3547  0026D0  0E00               	movlw	0
  3548  0026D2  6EC3               	movwf	4035,c	;volatile
  3549                           
  3550                           ;adc.c: 31: ADRESH = 0x00;
  3551  0026D4  0E00               	movlw	0
  3552  0026D6  6EC4               	movwf	4036,c	;volatile
  3553                           
  3554                           ;adc.c: 34: PIE1bits.ADIE = 1;
  3555  0026D8  8C9D               	bsf	3997,6,c	;volatile
  3556  0026DA  0012               	return	
  3557  0026DC                     __end_of_ADC_Initialize:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           intcon2	equ	0xFF1
  3567                           postinc0	equ	0xFEE
  3568                           wreg	equ	0xFE8
  3569                           postinc1	equ	0xFE6
  3570                           postdec1	equ	0xFE5
  3571                           fsr1h	equ	0xFE2
  3572                           fsr1l	equ	0xFE1
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           fsr2h	equ	0xFDA
  3577                           fsr2l	equ	0xFD9
  3578                           status	equ	0xFD8
  3579                           
  3580 ;; *************** function _RunBypas *****************
  3581 ;; Defined at:
  3582 ;;		line 84 in file "Bypass.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  batvolt         3   48[COMRAM] float 
  3587 ;;  i               2   51[COMRAM] int 
  3588 ;;  cellbyp         2   46[COMRAM] int 
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  2  497[COMRAM] int 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3598 ;;      Params:         0       0       0       0       0       0       0
  3599 ;;      Locals:         7       0       0       0       0       0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0
  3601 ;;      Totals:         7       0       0       0       0       0       0
  3602 ;;Total ram usage:        7 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; Hardware stack levels required when called:    6
  3605 ;; This function calls:
  3606 ;;		_Battery_Get
  3607 ;;		_SetBypas
  3608 ;;		___ftge
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text19
  3615  001D70                     __ptext19:
  3616                           	opt stack 0
  3617  001D70                     _RunBypas:
  3618                           	opt stack 24
  3619                           
  3620                           ;Bypass.c: 86: int cellbyp = 0;
  3621                           
  3622                           ;incstack = 0
  3623  001D70  0E00               	movlw	0
  3624  001D72  6E30               	movwf	RunBypas@cellbyp+1,c
  3625  001D74  0E00               	movlw	0
  3626  001D76  6E2F               	movwf	RunBypas@cellbyp,c
  3627                           
  3628                           ;Bypass.c: 87: int i = 0;
  3629  001D78  0E00               	movlw	0
  3630  001D7A  6E35               	movwf	RunBypas@i+1,c
  3631  001D7C  0E00               	movlw	0
  3632  001D7E  6E34               	movwf	RunBypas@i,c
  3633                           
  3634                           ;Bypass.c: 88: float batvolt = 0;
  3635  001D80  0E00               	movlw	0
  3636  001D82  6E31               	movwf	RunBypas@batvolt,c
  3637  001D84  0E00               	movlw	0
  3638  001D86  6E32               	movwf	RunBypas@batvolt+1,c
  3639  001D88  0E00               	movlw	0
  3640  001D8A  6E33               	movwf	RunBypas@batvolt+2,c
  3641                           
  3642                           ;Bypass.c: 90: for(i = 0; i<6;i++)
  3643  001D8C  0E00               	movlw	0
  3644  001D8E  6E35               	movwf	RunBypas@i+1,c
  3645  001D90  0E00               	movlw	0
  3646  001D92  6E34               	movwf	RunBypas@i,c
  3647  001D94  5035               	movf	RunBypas@i+1,w,c
  3648  001D96  0A80               	xorlw	128
  3649  001D98  0F80               	addlw	-128
  3650  001D9A  0E06               	movlw	6
  3651  001D9C  B4D8               	btfsc	status,2,c
  3652  001D9E  5C34               	subwf	RunBypas@i,w,c
  3653  001DA0  B0D8               	btfsc	status,0,c
  3654  001DA2  0012               	return	
  3655                           
  3656                           ;Bypass.c: 91: {
  3657                           ;Bypass.c: 92: batvolt = Battery_Get(i);
  3658  001DA4  C034  F026         	movff	RunBypas@i,Battery_Get@channelnum
  3659  001DA8  C035  F027         	movff	RunBypas@i+1,Battery_Get@channelnum+1
  3660  001DAC  ECA1  F012         	call	_Battery_Get	;wreg free
  3661  001DB0  C026  F031         	movff	?_Battery_Get,RunBypas@batvolt
  3662  001DB4  C027  F032         	movff	?_Battery_Get+1,RunBypas@batvolt+1
  3663  001DB8  C028  F033         	movff	?_Battery_Get+2,RunBypas@batvolt+2
  3664                           
  3665                           ;Bypass.c: 94: if(batvolt >= 4.18)
  3666  001DBC  C031  F026         	movff	RunBypas@batvolt,___ftge@ff1
  3667  001DC0  C032  F027         	movff	RunBypas@batvolt+1,___ftge@ff1+1
  3668  001DC4  C033  F028         	movff	RunBypas@batvolt+2,___ftge@ff1+2
  3669  001DC8  0EC3               	movlw	195
  3670  001DCA  6E29               	movwf	___ftge@ff2,c
  3671  001DCC  0E85               	movlw	133
  3672  001DCE  6E2A               	movwf	___ftge@ff2+1,c
  3673  001DD0  0E40               	movlw	64
  3674  001DD2  6E2B               	movwf	___ftge@ff2+2,c
  3675  001DD4  EC09  F011         	call	___ftge	;wreg free
  3676  001DD8  A0D8               	btfss	status,0,c
  3677  001DDA  D00E               	goto	l4198
  3678                           
  3679                           ;Bypass.c: 95: {
  3680                           ;Bypass.c: 96: SetBypas(i,1);
  3681  001DDC  C034  F018         	movff	RunBypas@i,SetBypas@pin
  3682  001DE0  C035  F019         	movff	RunBypas@i+1,SetBypas@pin+1
  3683  001DE4  0E00               	movlw	0
  3684  001DE6  6E1B               	movwf	SetBypas@state+1,c
  3685  001DE8  0E01               	movlw	1
  3686  001DEA  6E1A               	movwf	SetBypas@state,c
  3687  001DEC  EC76  F00F         	call	_SetBypas	;wreg free
  3688                           
  3689                           ;Bypass.c: 97: cellbyp = 1;
  3690  001DF0  0E00               	movlw	0
  3691  001DF2  6E30               	movwf	RunBypas@cellbyp+1,c
  3692  001DF4  0E01               	movlw	1
  3693  001DF6  D01D               	goto	L5
  3694  001DF8                     l4198:
  3695                           
  3696                           ;Bypass.c: 99: else if(batvolt <= 4.15)
  3697  001DF8  0ECD               	movlw	205
  3698  001DFA  6E26               	movwf	___ftge@ff1,c
  3699  001DFC  0E84               	movlw	132
  3700  001DFE  6E27               	movwf	___ftge@ff1+1,c
  3701  001E00  0E40               	movlw	64
  3702  001E02  6E28               	movwf	___ftge@ff1+2,c
  3703  001E04  C031  F029         	movff	RunBypas@batvolt,___ftge@ff2
  3704  001E08  C032  F02A         	movff	RunBypas@batvolt+1,___ftge@ff2+1
  3705  001E0C  C033  F02B         	movff	RunBypas@batvolt+2,___ftge@ff2+2
  3706  001E10  EC09  F011         	call	___ftge	;wreg free
  3707  001E14  A0D8               	btfss	status,0,c
  3708  001E16  D00E               	goto	l4204
  3709                           
  3710                           ;Bypass.c: 100: {
  3711                           ;Bypass.c: 101: SetBypas(i,0);
  3712  001E18  C034  F018         	movff	RunBypas@i,SetBypas@pin
  3713  001E1C  C035  F019         	movff	RunBypas@i+1,SetBypas@pin+1
  3714  001E20  0E00               	movlw	0
  3715  001E22  6E1B               	movwf	SetBypas@state+1,c
  3716  001E24  0E00               	movlw	0
  3717  001E26  6E1A               	movwf	SetBypas@state,c
  3718  001E28  EC76  F00F         	call	_SetBypas	;wreg free
  3719                           
  3720                           ;Bypass.c: 102: cellbyp = 0;
  3721  001E2C  0E00               	movlw	0
  3722  001E2E  6E30               	movwf	RunBypas@cellbyp+1,c
  3723  001E30  0E00               	movlw	0
  3724  001E32                     L5:
  3725  001E32  6E2F               	movwf	RunBypas@cellbyp,c
  3726  001E34                     l4204:
  3727  001E34  4A34               	infsnz	RunBypas@i,f,c
  3728  001E36  2A35               	incf	RunBypas@i+1,f,c
  3729  001E38  D7AD               	goto	L6
  3730  001E3A                     __end_of_RunBypas:
  3731                           	opt stack 0
  3732                           tblptru	equ	0xFF8
  3733                           tblptrh	equ	0xFF7
  3734                           tblptrl	equ	0xFF6
  3735                           tablat	equ	0xFF5
  3736                           prodh	equ	0xFF4
  3737                           prodl	equ	0xFF3
  3738                           intcon	equ	0xFF2
  3739                           intcon2	equ	0xFF1
  3740                           postinc0	equ	0xFEE
  3741                           wreg	equ	0xFE8
  3742                           postinc1	equ	0xFE6
  3743                           postdec1	equ	0xFE5
  3744                           fsr1h	equ	0xFE2
  3745                           fsr1l	equ	0xFE1
  3746                           indf2	equ	0xFDF
  3747                           postinc2	equ	0xFDE
  3748                           postdec2	equ	0xFDD
  3749                           fsr2h	equ	0xFDA
  3750                           fsr2l	equ	0xFD9
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function _SetBypas *****************
  3754 ;; Defined at:
  3755 ;;		line 8 in file "Bypass.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  pin             2   23[COMRAM] int 
  3758 ;;  state           2   25[COMRAM] int 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  2   23[COMRAM] int 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3770 ;;      Params:         4       0       0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0
  3772 ;;      Temps:          2       0       0       0       0       0       0
  3773 ;;      Totals:         6       0       0       0       0       0       0
  3774 ;;Total ram usage:        6 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    4
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_RunBypas
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text20
  3785  001EEC                     __ptext20:
  3786                           	opt stack 0
  3787  001EEC                     _SetBypas:
  3788                           	opt stack 25
  3789                           
  3790                           ;Bypass.c: 10: switch (pin) {
  3791                           
  3792                           ;incstack = 0
  3793  001EEC  D038               	goto	l4004
  3794  001EEE                     l3988:
  3795                           
  3796                           ;Bypass.c: 12: if (state)
  3797  001EEE  501B               	movf	SetBypas@state+1,w,c
  3798  001EF0  101A               	iorwf	SetBypas@state,w,c
  3799  001EF2  B4D8               	btfsc	status,2,c
  3800  001EF4  D002               	goto	l615
  3801                           
  3802                           ;Bypass.c: 13: {
  3803                           ;Bypass.c: 14: do { LATD4 = 1; } while(0);
  3804  001EF6  888C               	bsf	3980,4,c	;volatile
  3805  001EF8  0012               	return	
  3806  001EFA                     l615:
  3807  001EFA  988C               	bcf	3980,4,c	;volatile
  3808  001EFC  0012               	return	
  3809  001EFE                     l3990:
  3810                           
  3811                           ;Bypass.c: 22: if (state)
  3812  001EFE  501B               	movf	SetBypas@state+1,w,c
  3813  001F00  101A               	iorwf	SetBypas@state,w,c
  3814  001F02  B4D8               	btfsc	status,2,c
  3815  001F04  D002               	goto	l623
  3816                           
  3817                           ;Bypass.c: 23: {
  3818                           ;Bypass.c: 24: do { LATD5 = 1; } while(0);
  3819  001F06  8A8C               	bsf	3980,5,c	;volatile
  3820  001F08  0012               	return	
  3821  001F0A                     l623:
  3822  001F0A  9A8C               	bcf	3980,5,c	;volatile
  3823  001F0C  0012               	return	
  3824  001F0E                     l3992:
  3825                           
  3826                           ;Bypass.c: 32: if (state)
  3827  001F0E  501B               	movf	SetBypas@state+1,w,c
  3828  001F10  101A               	iorwf	SetBypas@state,w,c
  3829  001F12  B4D8               	btfsc	status,2,c
  3830  001F14  D002               	goto	l630
  3831                           
  3832                           ;Bypass.c: 33: {
  3833                           ;Bypass.c: 34: do { LATD6 = 1; } while(0);
  3834  001F16  8C8C               	bsf	3980,6,c	;volatile
  3835  001F18  0012               	return	
  3836  001F1A                     l630:
  3837  001F1A  9C8C               	bcf	3980,6,c	;volatile
  3838  001F1C  0012               	return	
  3839  001F1E                     l3994:
  3840                           
  3841                           ;Bypass.c: 42: if (state)
  3842  001F1E  501B               	movf	SetBypas@state+1,w,c
  3843  001F20  101A               	iorwf	SetBypas@state,w,c
  3844  001F22  B4D8               	btfsc	status,2,c
  3845  001F24  D002               	goto	l637
  3846                           
  3847                           ;Bypass.c: 43: {
  3848                           ;Bypass.c: 44: do { LATD7 = 1; } while(0);
  3849  001F26  8E8C               	bsf	3980,7,c	;volatile
  3850  001F28  0012               	return	
  3851  001F2A                     l637:
  3852  001F2A  9E8C               	bcf	3980,7,c	;volatile
  3853  001F2C  0012               	return	
  3854  001F2E                     l3996:
  3855                           
  3856                           ;Bypass.c: 52: if (state)
  3857  001F2E  501B               	movf	SetBypas@state+1,w,c
  3858  001F30  101A               	iorwf	SetBypas@state,w,c
  3859  001F32  B4D8               	btfsc	status,2,c
  3860  001F34  D002               	goto	l644
  3861                           
  3862                           ;Bypass.c: 53: {
  3863                           ;Bypass.c: 54: do { LATB0 = 1; } while(0);
  3864  001F36  808A               	bsf	3978,0,c	;volatile
  3865  001F38  0012               	return	
  3866  001F3A                     l644:
  3867  001F3A  908A               	bcf	3978,0,c	;volatile
  3868  001F3C  0012               	return	
  3869  001F3E                     l3998:
  3870                           
  3871                           ;Bypass.c: 62: if (state)
  3872  001F3E  501B               	movf	SetBypas@state+1,w,c
  3873  001F40  101A               	iorwf	SetBypas@state,w,c
  3874  001F42  B4D8               	btfsc	status,2,c
  3875  001F44  D002               	goto	l651
  3876                           
  3877                           ;Bypass.c: 63: {
  3878                           ;Bypass.c: 64: do { LATB1 = 1; } while(0);
  3879  001F46  828A               	bsf	3978,1,c	;volatile
  3880  001F48  0012               	return	
  3881  001F4A                     l651:
  3882  001F4A  928A               	bcf	3978,1,c	;volatile
  3883  001F4C  0012               	return	
  3884  001F4E                     l4000:
  3885                           
  3886                           ;Bypass.c: 72: if (state)
  3887  001F4E  501B               	movf	SetBypas@state+1,w,c
  3888  001F50  101A               	iorwf	SetBypas@state,w,c
  3889  001F52  B4D8               	btfsc	status,2,c
  3890  001F54  D002               	goto	l658
  3891                           
  3892                           ;Bypass.c: 73: {
  3893                           ;Bypass.c: 74: do { LATB2 = 1; } while(0);
  3894  001F56  848A               	bsf	3978,2,c	;volatile
  3895  001F58  0012               	return	
  3896  001F5A                     l658:
  3897  001F5A  948A               	bcf	3978,2,c	;volatile
  3898  001F5C  0012               	return	
  3899  001F5E                     l4004:
  3900  001F5E  C018  F01C         	movff	SetBypas@pin,??_SetBypas
  3901  001F62  C019  F01D         	movff	SetBypas@pin+1,??_SetBypas+1
  3902                           
  3903                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3904                           ; Switch size 1, requested type "space"
  3905                           ; Number of cases is 1, Range of values is 0 to 0
  3906                           ; switch strategies available:
  3907                           ; Name         Instructions Cycles
  3908                           ; simple_byte            4     3 (average)
  3909                           ;	Chosen strategy is simple_byte
  3910  001F66  501D               	movf	??_SetBypas+1,w,c
  3911  001F68  0A00               	xorlw	0	; case 0
  3912  001F6A  A4D8               	btfss	status,2,c
  3913  001F6C  0012               	return	
  3914                           
  3915                           ; Switch size 1, requested type "space"
  3916                           ; Number of cases is 7, Range of values is 0 to 6
  3917                           ; switch strategies available:
  3918                           ; Name         Instructions Cycles
  3919                           ; simple_byte           22    12 (average)
  3920                           ;	Chosen strategy is simple_byte
  3921  001F6E  501C               	movf	??_SetBypas,w,c
  3922  001F70  0A00               	xorlw	0	; case 0
  3923  001F72  B4D8               	btfsc	status,2,c
  3924  001F74  D7BC               	goto	l3988
  3925  001F76  0A01               	xorlw	1	; case 1
  3926  001F78  B4D8               	btfsc	status,2,c
  3927  001F7A  D7C1               	goto	l3990
  3928  001F7C  0A03               	xorlw	3	; case 2
  3929  001F7E  B4D8               	btfsc	status,2,c
  3930  001F80  D7C6               	goto	l3992
  3931  001F82  0A01               	xorlw	1	; case 3
  3932  001F84  B4D8               	btfsc	status,2,c
  3933  001F86  D7CB               	goto	l3994
  3934  001F88  0A07               	xorlw	7	; case 4
  3935  001F8A  B4D8               	btfsc	status,2,c
  3936  001F8C  D7D0               	goto	l3996
  3937  001F8E  0A01               	xorlw	1	; case 5
  3938  001F90  B4D8               	btfsc	status,2,c
  3939  001F92  D7D5               	goto	l3998
  3940  001F94  0A03               	xorlw	3	; case 6
  3941  001F96  A4D8               	btfss	status,2,c
  3942  001F98  0012               	return	
  3943  001F9A  D7D9               	goto	l4000
  3944  001F9C                     __end_of_SetBypas:
  3945                           	opt stack 0
  3946                           tblptru	equ	0xFF8
  3947                           tblptrh	equ	0xFF7
  3948                           tblptrl	equ	0xFF6
  3949                           tablat	equ	0xFF5
  3950                           prodh	equ	0xFF4
  3951                           prodl	equ	0xFF3
  3952                           intcon	equ	0xFF2
  3953                           intcon2	equ	0xFF1
  3954                           postinc0	equ	0xFEE
  3955                           wreg	equ	0xFE8
  3956                           postinc1	equ	0xFE6
  3957                           postdec1	equ	0xFE5
  3958                           fsr1h	equ	0xFE2
  3959                           fsr1l	equ	0xFE1
  3960                           indf2	equ	0xFDF
  3961                           postinc2	equ	0xFDE
  3962                           postdec2	equ	0xFDD
  3963                           fsr2h	equ	0xFDA
  3964                           fsr2l	equ	0xFD9
  3965                           status	equ	0xFD8
  3966                           
  3967 ;; *************** function _Battery_Get *****************
  3968 ;; Defined at:
  3969 ;;		line 52 in file "Battery.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;  channelnum      2   37[COMRAM] int 
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  3   37[COMRAM] float 
  3976 ;; Registers used:
  3977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3983 ;;      Params:         3       0       0       0       0       0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0
  3986 ;;      Totals:         3       0       0       0       0       0       0
  3987 ;;Total ram usage:        3 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    5
  3990 ;; This function calls:
  3991 ;;		___wmul
  3992 ;; This function is called by:
  3993 ;;		_RunBypas
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           	psect	text21
  3998  002542                     __ptext21:
  3999                           	opt stack 0
  4000  002542                     _Battery_Get:
  4001                           	opt stack 24
  4002                           
  4003                           ;Battery.c: 54: return Battery_Volt[channelnum];
  4004                           
  4005                           ;incstack = 0
  4006  002542  C026  F020         	movff	Battery_Get@channelnum,___wmul@multiplier
  4007  002546  C027  F021         	movff	Battery_Get@channelnum+1,___wmul@multiplier+1
  4008  00254A  0E00               	movlw	0
  4009  00254C  6E23               	movwf	___wmul@multiplicand+1,c
  4010  00254E  0E03               	movlw	3
  4011  002550  6E22               	movwf	___wmul@multiplicand,c
  4012  002552  EC13  F013         	call	___wmul	;wreg free
  4013  002556  0101               	movlb	1	; () banked
  4014  002558  0E00               	movlw	low _Battery_Volt
  4015  00255A  2420               	addwf	?___wmul,w,c
  4016  00255C  6ED9               	movwf	fsr2l,c
  4017  00255E  0101               	movlb	1	; () banked
  4018  002560  0E01               	movlw	high _Battery_Volt
  4019  002562  2021               	addwfc	?___wmul+1,w,c
  4020  002564  6EDA               	movwf	fsr2h,c
  4021  002566  CFDE F026          	movff	postinc2,?_Battery_Get
  4022  00256A  CFDE F027          	movff	postinc2,?_Battery_Get+1
  4023  00256E  CFDD F028          	movff	postdec2,?_Battery_Get+2
  4024  002572  0012               	return	
  4025  002574                     __end_of_Battery_Get:
  4026                           	opt stack 0
  4027                           tblptru	equ	0xFF8
  4028                           tblptrh	equ	0xFF7
  4029                           tblptrl	equ	0xFF6
  4030                           tablat	equ	0xFF5
  4031                           prodh	equ	0xFF4
  4032                           prodl	equ	0xFF3
  4033                           intcon	equ	0xFF2
  4034                           intcon2	equ	0xFF1
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postinc1	equ	0xFE6
  4038                           postdec1	equ	0xFE5
  4039                           fsr1h	equ	0xFE2
  4040                           fsr1l	equ	0xFE1
  4041                           indf2	equ	0xFDF
  4042                           postinc2	equ	0xFDE
  4043                           postdec2	equ	0xFDD
  4044                           fsr2h	equ	0xFDA
  4045                           fsr2l	equ	0xFD9
  4046                           status	equ	0xFD8
  4047                           
  4048 ;; *************** function _Delay *****************
  4049 ;; Defined at:
  4050 ;;		line 44 in file "Functions.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  wait            2   23[COMRAM] int 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  x               2   26[COMRAM] int 
  4055 ;; Return value:  Size  Location     Type
  4056 ;;		None               void
  4057 ;; Registers used:
  4058 ;;		wreg, status,2, status,0
  4059 ;; Tracked objects:
  4060 ;;		On entry : 0/0
  4061 ;;		On exit  : 0/0
  4062 ;;		Unchanged: 0/0
  4063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4064 ;;      Params:         2       0       0       0       0       0       0
  4065 ;;      Locals:         2       0       0       0       0       0       0
  4066 ;;      Temps:          1       0       0       0       0       0       0
  4067 ;;      Totals:         5       0       0       0       0       0       0
  4068 ;;Total ram usage:        5 bytes
  4069 ;; Hardware stack levels used:    1
  4070 ;; Hardware stack levels required when called:    4
  4071 ;; This function calls:
  4072 ;;		Nothing
  4073 ;; This function is called by:
  4074 ;;		_main
  4075 ;; This function uses a non-reentrant model
  4076 ;;
  4077                           
  4078                           	psect	text22
  4079  0025D2                     __ptext22:
  4080                           	opt stack 0
  4081  0025D2                     _Delay:
  4082                           	opt stack 26
  4083                           
  4084                           ;Functions.c: 46: int x;
  4085                           ;Functions.c: 47: for(x = 0;x<wait;x++)
  4086                           
  4087                           ; BSR set to: 1
  4088                           ;incstack = 0
  4089  0025D2  0E00               	movlw	0
  4090  0025D4  6E1C               	movwf	Delay@x+1,c
  4091  0025D6  0E00               	movlw	0
  4092  0025D8  6E1B               	movwf	Delay@x,c
  4093  0025DA  D006               	goto	l404
  4094  0025DC                     l4124:
  4095                           
  4096                           ;Functions.c: 48: {
  4097                           ;Functions.c: 49: _delay((unsigned long)((1)*(2000000/4000.0)));
  4098  0025DC  0EA6               	movlw	166
  4099  0025DE                     u3937:
  4100  0025DE  2EE8               	decfsz	wreg,f,c
  4101  0025E0  D7FE               	goto	u3937
  4102  0025E2  D000               	nop2		;nop
  4103  0025E4  4A1B               	infsnz	Delay@x,f,c
  4104  0025E6  2A1C               	incf	Delay@x+1,f,c
  4105  0025E8                     l404:
  4106  0025E8  501C               	movf	Delay@x+1,w,c
  4107  0025EA  0A80               	xorlw	128
  4108  0025EC  6E1A               	movwf	??_Delay& (0+255),c
  4109  0025EE  5018               	movf	Delay@wait,w,c
  4110  0025F0  5C1B               	subwf	Delay@x,w,c
  4111  0025F2  5019               	movf	Delay@wait+1,w,c
  4112  0025F4  0A80               	xorlw	128
  4113  0025F6  581A               	subwfb	??_Delay& (0+255),w,c
  4114  0025F8  B0D8               	btfsc	status,0,c
  4115  0025FA  0012               	return	
  4116  0025FC  D7EF               	goto	l4124
  4117  0025FE                     __end_of_Delay:
  4118                           	opt stack 0
  4119                           tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           intcon2	equ	0xFF1
  4127                           postinc0	equ	0xFEE
  4128                           wreg	equ	0xFE8
  4129                           postinc1	equ	0xFE6
  4130                           postdec1	equ	0xFE5
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140 ;; *************** function _Current_Fault *****************
  4141 ;; Defined at:
  4142 ;;		line 12 in file "Current.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;  i               2   47[COMRAM] int 
  4147 ;;  fault           1   46[COMRAM] unsigned char 
  4148 ;; Return value:  Size  Location     Type
  4149 ;;                  1    wreg      unsigned char 
  4150 ;; Registers used:
  4151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4152 ;; Tracked objects:
  4153 ;;		On entry : 0/0
  4154 ;;		On exit  : 0/0
  4155 ;;		Unchanged: 0/0
  4156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4157 ;;      Params:         0       0       0       0       0       0       0
  4158 ;;      Locals:         3       0       0       0       0       0       0
  4159 ;;      Temps:          0       0       0       0       0       0       0
  4160 ;;      Totals:         3       0       0       0       0       0       0
  4161 ;;Total ram usage:        3 bytes
  4162 ;; Hardware stack levels used:    1
  4163 ;; Hardware stack levels required when called:    5
  4164 ;; This function calls:
  4165 ;;		___ftge
  4166 ;;		___wmul
  4167 ;; This function is called by:
  4168 ;;		_main
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           	psect	text23
  4173  0020E8                     __ptext23:
  4174                           	opt stack 0
  4175  0020E8                     _Current_Fault:
  4176                           	opt stack 25
  4177                           
  4178                           ;Current.c: 14: char fault = 0;
  4179                           
  4180                           ;incstack = 0
  4181  0020E8  0E00               	movlw	0
  4182  0020EA  6E2F               	movwf	Current_Fault@fault,c
  4183                           
  4184                           ;Current.c: 15: for(int i = 0;i<4;i++)
  4185  0020EC  0E00               	movlw	0
  4186  0020EE  6E31               	movwf	Current_Fault@i+1,c
  4187  0020F0  0E00               	movlw	0
  4188  0020F2  6E30               	movwf	Current_Fault@i,c
  4189  0020F4  5031               	movf	Current_Fault@i+1,w,c
  4190  0020F6  0A80               	xorlw	128
  4191  0020F8  0F80               	addlw	-128
  4192  0020FA  0E04               	movlw	4
  4193  0020FC  B4D8               	btfsc	status,2,c
  4194  0020FE  5C30               	subwf	Current_Fault@i,w,c
  4195  002100  B0D8               	btfsc	status,0,c
  4196  002102  D035               	goto	l4236
  4197                           
  4198                           ;Current.c: 16: {
  4199                           ;Current.c: 17: if ((25 < Battery_Current[i]) && (25 < Current_Mean))
  4200  002104  0E00               	movlw	0
  4201  002106  6E26               	movwf	___ftge@ff1,c
  4202  002108  0EC8               	movlw	200
  4203  00210A  6E27               	movwf	___ftge@ff1+1,c
  4204  00210C  0E41               	movlw	65
  4205  00210E  6E28               	movwf	___ftge@ff1+2,c
  4206  002110  C030  F020         	movff	Current_Fault@i,___wmul@multiplier
  4207  002114  C031  F021         	movff	Current_Fault@i+1,___wmul@multiplier+1
  4208  002118  0E00               	movlw	0
  4209  00211A  6E23               	movwf	___wmul@multiplicand+1,c
  4210  00211C  0E03               	movlw	3
  4211  00211E  6E22               	movwf	___wmul@multiplicand,c
  4212  002120  EC13  F013         	call	___wmul	;wreg free
  4213  002124  0100               	movlb	0	; () banked
  4214  002126  0E88               	movlw	low _Battery_Current
  4215  002128  2420               	addwf	?___wmul,w,c
  4216  00212A  6ED9               	movwf	fsr2l,c
  4217  00212C  0100               	movlb	0	; () banked
  4218  00212E  0E00               	movlw	high _Battery_Current
  4219  002130  2021               	addwfc	?___wmul+1,w,c
  4220  002132  6EDA               	movwf	fsr2h,c
  4221  002134  CFDE F029          	movff	postinc2,___ftge@ff2
  4222  002138  CFDE F02A          	movff	postinc2,___ftge@ff2+1
  4223  00213C  CFDD F02B          	movff	postdec2,___ftge@ff2+2
  4224  002140  EC09  F011         	call	___ftge	;wreg free
  4225  002144  B0D8               	btfsc	status,0,c
  4226  002146  D010               	goto	l571
  4227  002148  0E00               	movlw	0
  4228  00214A  6E26               	movwf	___ftge@ff1,c
  4229  00214C  0EC8               	movlw	200
  4230  00214E  6E27               	movwf	___ftge@ff1+1,c
  4231  002150  0E41               	movlw	65
  4232  002152  6E28               	movwf	___ftge@ff1+2,c
  4233  002154  C036  F029         	movff	_Current_Mean,___ftge@ff2
  4234  002158  C037  F02A         	movff	_Current_Mean+1,___ftge@ff2+1
  4235  00215C  C038  F02B         	movff	_Current_Mean+2,___ftge@ff2+2
  4236  002160  EC09  F011         	call	___ftge	;wreg free
  4237  002164  A0D8               	btfss	status,0,c
  4238                           
  4239                           ;Current.c: 18: {
  4240                           ;Current.c: 19: fault++;
  4241  002166  2A2F               	incf	Current_Fault@fault,f,c
  4242  002168                     l571:
  4243  002168  4A30               	infsnz	Current_Fault@i,f,c
  4244  00216A  2A31               	incf	Current_Fault@i+1,f,c
  4245  00216C  D7C3               	goto	L7
  4246  00216E                     l4236:
  4247                           
  4248                           ;Current.c: 20: }
  4249                           ;Current.c: 21: }
  4250                           ;Current.c: 22: if(fault > 6)
  4251  00216E  0E06               	movlw	6
  4252  002170  642F               	cpfsgt	Current_Fault@fault,c
  4253  002172  D002               	goto	l4240
  4254                           
  4255                           ;Current.c: 23: {
  4256                           ;Current.c: 24: fault = 1;
  4257  002174  0E01               	movlw	1
  4258  002176  D001               	goto	L8
  4259  002178                     l4240:
  4260                           
  4261                           ;Current.c: 26: else
  4262                           ;Current.c: 27: {
  4263                           ;Current.c: 28: fault = 0;
  4264  002178  0E00               	movlw	0
  4265  00217A                     L8:
  4266  00217A  6E2F               	movwf	Current_Fault@fault,c
  4267                           
  4268                           ;Current.c: 29: }
  4269                           ;Current.c: 30: return fault;
  4270  00217C  502F               	movf	Current_Fault@fault,w,c
  4271  00217E  0012               	return	
  4272  002180                     __end_of_Current_Fault:
  4273                           	opt stack 0
  4274                           tblptru	equ	0xFF8
  4275                           tblptrh	equ	0xFF7
  4276                           tblptrl	equ	0xFF6
  4277                           tablat	equ	0xFF5
  4278                           prodh	equ	0xFF4
  4279                           prodl	equ	0xFF3
  4280                           intcon	equ	0xFF2
  4281                           intcon2	equ	0xFF1
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postinc1	equ	0xFE6
  4285                           postdec1	equ	0xFE5
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           postinc2	equ	0xFDE
  4290                           postdec2	equ	0xFDD
  4291                           fsr2h	equ	0xFDA
  4292                           fsr2l	equ	0xFD9
  4293                           status	equ	0xFD8
  4294                           
  4295 ;; *************** function _Current_Convert *****************
  4296 ;; Defined at:
  4297 ;;		line 54 in file "Current.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;  x               2   36[BANK0 ] int 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;		None               void
  4304 ;; Registers used:
  4305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4311 ;;      Params:         0       0       0       0       0       0       0
  4312 ;;      Locals:         0       4       0       0       0       0       0
  4313 ;;      Temps:          0       2       0       0       0       0       0
  4314 ;;      Totals:         0       6       0       0       0       0       0
  4315 ;;Total ram usage:        6 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    7
  4318 ;; This function calls:
  4319 ;;		_Current_Filter
  4320 ;;		___awdiv
  4321 ;;		___awtoft
  4322 ;;		___wmul
  4323 ;; This function is called by:
  4324 ;;		_main
  4325 ;; This function uses a non-reentrant model
  4326 ;;
  4327                           
  4328                           	psect	text24
  4329  001BCA                     __ptext24:
  4330                           	opt stack 0
  4331  001BCA                     _Current_Convert:
  4332                           	opt stack 23
  4333                           
  4334                           ;Current.c: 56: for(int x = 0; x < 4; x++)
  4335                           
  4336                           ;incstack = 0
  4337  001BCA  0E00               	movlw	0
  4338  001BCC  0100               	movlb	0	; () banked
  4339  001BCE  6FED               	movwf	(Current_Convert@x+1)& (0+255),b
  4340  001BD0  0E00               	movlw	0
  4341  001BD2  0100               	movlb	0	; () banked
  4342  001BD4  6FEC               	movwf	Current_Convert@x& (0+255),b
  4343  001BD6                     
  4344                           ; BSR set to: 0
  4345  001BD6  0100               	movlb	0	; () banked
  4346  001BD8  51ED               	movf	(Current_Convert@x+1)& (0+255),w,b
  4347  001BDA  0A80               	xorlw	128
  4348  001BDC  0F80               	addlw	-128
  4349  001BDE  0E04               	movlw	4
  4350  001BE0  B4D8               	btfsc	status,2,c
  4351  001BE2  5DEC               	subwf	Current_Convert@x& (0+255),w,b
  4352  001BE4  B0D8               	btfsc	status,0,c
  4353  001BE6  D05B               	goto	l4220
  4354                           
  4355                           ; BSR set to: 0
  4356                           ;Current.c: 57: {
  4357                           ;Current.c: 58: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  4358                           
  4359                           ; BSR set to: 0
  4360                           
  4361                           ; BSR set to: 0
  4362  001BE8  0E04               	movlw	4
  4363  001BEA  6E1B               	movwf	___awdiv@divisor+1,c
  4364  001BEC  0E00               	movlw	0
  4365  001BEE  6E1A               	movwf	___awdiv@divisor,c
  4366  001BF0  0E74               	movlw	low _Current_Adc
  4367  001BF2  0100               	movlb	0	; () banked
  4368  001BF4  6FE8               	movwf	??_Current_Convert& (0+255),b
  4369  001BF6  0E00               	movlw	high _Current_Adc
  4370  001BF8  6FE9               	movwf	(??_Current_Convert+1)& (0+255),b
  4371  001BFA  90D8               	bcf	status,0,c
  4372  001BFC  0100               	movlb	0	; () banked
  4373  001BFE  35EC               	rlcf	Current_Convert@x& (0+255),w,b
  4374  001C00  6ED9               	movwf	fsr2l,c
  4375  001C02  0100               	movlb	0	; () banked
  4376  001C04  35ED               	rlcf	(Current_Convert@x+1)& (0+255),w,b
  4377  001C06  6EDA               	movwf	fsr2h,c
  4378  001C08  0100               	movlb	0	; () banked
  4379  001C0A  51E8               	movf	??_Current_Convert& (0+255),w,b
  4380  001C0C  26D9               	addwf	fsr2l,f,c
  4381  001C0E  0100               	movlb	0	; () banked
  4382  001C10  51E9               	movf	(??_Current_Convert+1)& (0+255),w,b
  4383  001C12  22DA               	addwfc	fsr2h,f,c
  4384  001C14  CFDE F018          	movff	postinc2,___awdiv@dividend
  4385  001C18  CFDD F019          	movff	postdec2,___awdiv@dividend+1
  4386  001C1C  EC22  F010         	call	___awdiv	;wreg free
  4387  001C20  C018  F020         	movff	?___awdiv,___wmul@multiplier
  4388  001C24  C019  F021         	movff	?___awdiv+1,___wmul@multiplier+1
  4389  001C28  0E01               	movlw	1
  4390  001C2A  6E23               	movwf	___wmul@multiplicand+1,c
  4391  001C2C  0EF4               	movlw	244
  4392  001C2E  6E22               	movwf	___wmul@multiplicand,c
  4393  001C30  EC13  F013         	call	___wmul	;wreg free
  4394  001C34  0E3C               	movlw	60
  4395  001C36  2420               	addwf	?___wmul,w,c
  4396  001C38  0100               	movlb	0	; () banked
  4397  001C3A  6FEA               	movwf	_Current_Convert$1787& (0+255),b
  4398  001C3C  0EF6               	movlw	246
  4399  001C3E  2021               	addwfc	?___wmul+1,w,c
  4400  001C40  0100               	movlb	0	; () banked
  4401  001C42  6FEB               	movwf	(_Current_Convert$1787+1)& (0+255),b
  4402                           
  4403                           ;Current.c: 57: {
  4404                           ;Current.c: 58: TempBattery_Current[x] = ((((Current_Adc[x]/1024)*500)-2500)/66);
  4405  001C44  C0EC  F020         	movff	Current_Convert@x,___wmul@multiplier
  4406  001C48  C0ED  F021         	movff	Current_Convert@x+1,___wmul@multiplier+1
  4407  001C4C  0E00               	movlw	0
  4408  001C4E  6E23               	movwf	___wmul@multiplicand+1,c
  4409  001C50  0E03               	movlw	3
  4410  001C52  6E22               	movwf	___wmul@multiplicand,c
  4411  001C54  EC13  F013         	call	___wmul	;wreg free
  4412  001C58  0101               	movlb	1	; () banked
  4413  001C5A  0E9F               	movlw	low _TempBattery_Current
  4414  001C5C  2420               	addwf	?___wmul,w,c
  4415  001C5E  6ED9               	movwf	fsr2l,c
  4416  001C60  0101               	movlb	1	; () banked
  4417  001C62  0E01               	movlw	high _TempBattery_Current
  4418  001C64  2021               	addwfc	?___wmul+1,w,c
  4419  001C66  6EDA               	movwf	fsr2h,c
  4420  001C68  0E00               	movlw	0
  4421  001C6A  6E1B               	movwf	___awdiv@divisor+1,c
  4422  001C6C  0E42               	movlw	66
  4423  001C6E  6E1A               	movwf	___awdiv@divisor,c
  4424  001C70  C0EA  F018         	movff	_Current_Convert$1787,___awdiv@dividend
  4425  001C74  C0EB  F019         	movff	_Current_Convert$1787+1,___awdiv@dividend+1
  4426  001C78  EC22  F010         	call	___awdiv	;wreg free
  4427  001C7C  C018  F026         	movff	?___awdiv,___awtoft@c
  4428  001C80  C019  F027         	movff	?___awdiv+1,___awtoft@c+1
  4429  001C84  EC0C  F012         	call	___awtoft	;wreg free
  4430  001C88  C026  FFDE         	movff	?___awtoft,postinc2
  4431  001C8C  C027  FFDE         	movff	?___awtoft+1,postinc2
  4432  001C90  C028  FFDD         	movff	?___awtoft+2,postdec2
  4433  001C94  52DD               	movf	postdec2,f,c
  4434  001C96  0100               	movlb	0	; () banked
  4435  001C98  4BEC               	infsnz	Current_Convert@x& (0+255),f,b
  4436  001C9A  2BED               	incf	(Current_Convert@x+1)& (0+255),f,b
  4437  001C9C  D79C               	goto	L9
  4438  001C9E                     l4220:
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;Current.c: 59: }
  4442                           ;Current.c: 60: Current_Filter();
  4443  001C9E  EC2C  F009         	call	_Current_Filter	;wreg free
  4444  001CA2  0012               	return	
  4445  001CA4                     __end_of_Current_Convert:
  4446                           	opt stack 0
  4447                           tblptru	equ	0xFF8
  4448                           tblptrh	equ	0xFF7
  4449                           tblptrl	equ	0xFF6
  4450                           tablat	equ	0xFF5
  4451                           prodh	equ	0xFF4
  4452                           prodl	equ	0xFF3
  4453                           intcon	equ	0xFF2
  4454                           intcon2	equ	0xFF1
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           postinc1	equ	0xFE6
  4458                           postdec1	equ	0xFE5
  4459                           fsr1h	equ	0xFE2
  4460                           fsr1l	equ	0xFE1
  4461                           indf2	equ	0xFDF
  4462                           postinc2	equ	0xFDE
  4463                           postdec2	equ	0xFDD
  4464                           fsr2h	equ	0xFDA
  4465                           fsr2l	equ	0xFD9
  4466                           status	equ	0xFD8
  4467                           
  4468 ;; *************** function ___awdiv *****************
  4469 ;; Defined at:
  4470 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4471 ;; Parameters:    Size  Location     Type
  4472 ;;  dividend        2   23[COMRAM] int 
  4473 ;;  divisor         2   25[COMRAM] int 
  4474 ;; Auto vars:     Size  Location     Type
  4475 ;;  quotient        2   29[COMRAM] int 
  4476 ;;  sign            1   28[COMRAM] unsigned char 
  4477 ;;  counter         1   27[COMRAM] unsigned char 
  4478 ;; Return value:  Size  Location     Type
  4479 ;;                  2   23[COMRAM] int 
  4480 ;; Registers used:
  4481 ;;		wreg, status,2, status,0, prodl
  4482 ;; Tracked objects:
  4483 ;;		On entry : 0/0
  4484 ;;		On exit  : 0/0
  4485 ;;		Unchanged: 0/0
  4486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4487 ;;      Params:         4       0       0       0       0       0       0
  4488 ;;      Locals:         4       0       0       0       0       0       0
  4489 ;;      Temps:          0       0       0       0       0       0       0
  4490 ;;      Totals:         8       0       0       0       0       0       0
  4491 ;;Total ram usage:        8 bytes
  4492 ;; Hardware stack levels used:    1
  4493 ;; Hardware stack levels required when called:    4
  4494 ;; This function calls:
  4495 ;;		Nothing
  4496 ;; This function is called by:
  4497 ;;		_Current_Convert
  4498 ;; This function uses a non-reentrant model
  4499 ;;
  4500                           
  4501                           	psect	text25
  4502  002044                     __ptext25:
  4503                           	opt stack 0
  4504  002044                     ___awdiv:
  4505                           	opt stack 25
  4506                           
  4507                           ;incstack = 0
  4508  002044  0E00               	movlw	0
  4509  002046  6E1D               	movwf	___awdiv@sign,c
  4510  002048  501B               	movf	___awdiv@divisor+1,w,c
  4511  00204A  0A80               	xorlw	128
  4512  00204C  6EF3               	movwf	prodl,c
  4513  00204E  0E80               	movlw	128
  4514  002050  5CF3               	subwf	prodl,w,c
  4515  002052  0E00               	movlw	0
  4516  002054  B4D8               	btfsc	status,2,c
  4517  002056  5C1A               	subwf	___awdiv@divisor,w,c
  4518  002058  B0D8               	btfsc	status,0,c
  4519  00205A  D006               	goto	l4024
  4520  00205C  6C1A               	negf	___awdiv@divisor,c
  4521  00205E  1E1B               	comf	___awdiv@divisor+1,f,c
  4522  002060  B0D8               	btfsc	status,0,c
  4523  002062  2A1B               	incf	___awdiv@divisor+1,f,c
  4524  002064  0E01               	movlw	1
  4525  002066  6E1D               	movwf	___awdiv@sign,c
  4526  002068                     l4024:
  4527  002068  5019               	movf	___awdiv@dividend+1,w,c
  4528  00206A  0A80               	xorlw	128
  4529  00206C  6EF3               	movwf	prodl,c
  4530  00206E  0E80               	movlw	128
  4531  002070  5CF3               	subwf	prodl,w,c
  4532  002072  0E00               	movlw	0
  4533  002074  B4D8               	btfsc	status,2,c
  4534  002076  5C18               	subwf	___awdiv@dividend,w,c
  4535  002078  B0D8               	btfsc	status,0,c
  4536  00207A  D006               	goto	l4030
  4537  00207C  6C18               	negf	___awdiv@dividend,c
  4538  00207E  1E19               	comf	___awdiv@dividend+1,f,c
  4539  002080  B0D8               	btfsc	status,0,c
  4540  002082  2A19               	incf	___awdiv@dividend+1,f,c
  4541  002084  0E01               	movlw	1
  4542  002086  1A1D               	xorwf	___awdiv@sign,f,c
  4543  002088                     l4030:
  4544  002088  0E00               	movlw	0
  4545  00208A  6E1F               	movwf	___awdiv@quotient+1,c
  4546  00208C  0E00               	movlw	0
  4547  00208E  6E1E               	movwf	___awdiv@quotient,c
  4548  002090  501B               	movf	___awdiv@divisor+1,w,c
  4549  002092  101A               	iorwf	___awdiv@divisor,w,c
  4550  002094  B4D8               	btfsc	status,2,c
  4551  002096  D01C               	goto	l4052
  4552  002098  0E01               	movlw	1
  4553  00209A  6E1C               	movwf	___awdiv@counter,c
  4554  00209C  D004               	goto	l4038
  4555  00209E                     l4036:
  4556  00209E  90D8               	bcf	status,0,c
  4557  0020A0  361A               	rlcf	___awdiv@divisor,f,c
  4558  0020A2  361B               	rlcf	___awdiv@divisor+1,f,c
  4559  0020A4  2A1C               	incf	___awdiv@counter,f,c
  4560  0020A6                     l4038:
  4561  0020A6  AE1B               	btfss	___awdiv@divisor+1,7,c
  4562  0020A8  D7FA               	goto	l4036
  4563  0020AA                     l4040:
  4564  0020AA  90D8               	bcf	status,0,c
  4565  0020AC  361E               	rlcf	___awdiv@quotient,f,c
  4566  0020AE  361F               	rlcf	___awdiv@quotient+1,f,c
  4567  0020B0  501A               	movf	___awdiv@divisor,w,c
  4568  0020B2  5C18               	subwf	___awdiv@dividend,w,c
  4569  0020B4  501B               	movf	___awdiv@divisor+1,w,c
  4570  0020B6  5819               	subwfb	___awdiv@dividend+1,w,c
  4571  0020B8  A0D8               	btfss	status,0,c
  4572  0020BA  D005               	goto	l4048
  4573  0020BC  501A               	movf	___awdiv@divisor,w,c
  4574  0020BE  5E18               	subwf	___awdiv@dividend,f,c
  4575  0020C0  501B               	movf	___awdiv@divisor+1,w,c
  4576  0020C2  5A19               	subwfb	___awdiv@dividend+1,f,c
  4577  0020C4  801E               	bsf	___awdiv@quotient,0,c
  4578  0020C6                     l4048:
  4579  0020C6  90D8               	bcf	status,0,c
  4580  0020C8  321B               	rrcf	___awdiv@divisor+1,f,c
  4581  0020CA  321A               	rrcf	___awdiv@divisor,f,c
  4582  0020CC  2E1C               	decfsz	___awdiv@counter,f,c
  4583  0020CE  D7ED               	goto	l4040
  4584  0020D0                     l4052:
  4585  0020D0  501D               	movf	___awdiv@sign,w,c
  4586  0020D2  B4D8               	btfsc	status,2,c
  4587  0020D4  D004               	goto	l4056
  4588  0020D6  6C1E               	negf	___awdiv@quotient,c
  4589  0020D8  1E1F               	comf	___awdiv@quotient+1,f,c
  4590  0020DA  B0D8               	btfsc	status,0,c
  4591  0020DC  2A1F               	incf	___awdiv@quotient+1,f,c
  4592  0020DE                     l4056:
  4593  0020DE  C01E  F018         	movff	___awdiv@quotient,?___awdiv
  4594  0020E2  C01F  F019         	movff	___awdiv@quotient+1,?___awdiv+1
  4595  0020E6  0012               	return	
  4596  0020E8                     __end_of___awdiv:
  4597                           	opt stack 0
  4598                           tblptru	equ	0xFF8
  4599                           tblptrh	equ	0xFF7
  4600                           tblptrl	equ	0xFF6
  4601                           tablat	equ	0xFF5
  4602                           prodh	equ	0xFF4
  4603                           prodl	equ	0xFF3
  4604                           intcon	equ	0xFF2
  4605                           intcon2	equ	0xFF1
  4606                           postinc0	equ	0xFEE
  4607                           wreg	equ	0xFE8
  4608                           postinc1	equ	0xFE6
  4609                           postdec1	equ	0xFE5
  4610                           fsr1h	equ	0xFE2
  4611                           fsr1l	equ	0xFE1
  4612                           indf2	equ	0xFDF
  4613                           postinc2	equ	0xFDE
  4614                           postdec2	equ	0xFDD
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619 ;; *************** function _Current_Filter *****************
  4620 ;; Defined at:
  4621 ;;		line 42 in file "Current.c"
  4622 ;; Parameters:    Size  Location     Type
  4623 ;;		None
  4624 ;; Auto vars:     Size  Location     Type
  4625 ;;  x               2   30[BANK0 ] int 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;		None               void
  4628 ;; Registers used:
  4629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4635 ;;      Params:         0       0       0       0       0       0       0
  4636 ;;      Locals:         0       2       0       0       0       0       0
  4637 ;;      Temps:          0       0       0       0       0       0       0
  4638 ;;      Totals:         0       2       0       0       0       0       0
  4639 ;;Total ram usage:        2 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    6
  4642 ;; This function calls:
  4643 ;;		___ftadd
  4644 ;;		___ftdiv
  4645 ;;		___ftmul
  4646 ;;		___wmul
  4647 ;; This function is called by:
  4648 ;;		_Current_Convert
  4649 ;; This function uses a non-reentrant model
  4650 ;;
  4651                           
  4652                           	psect	text26
  4653  001258                     __ptext26:
  4654                           	opt stack 0
  4655  001258                     _Current_Filter:
  4656                           	opt stack 23
  4657                           
  4658                           ;Current.c: 45: for(int x = 0; x < 4; x++)
  4659                           
  4660                           ;incstack = 0
  4661  001258  0E00               	movlw	0
  4662  00125A  0100               	movlb	0	; () banked
  4663  00125C  6FE7               	movwf	(Current_Filter@x+1)& (0+255),b
  4664  00125E  0E00               	movlw	0
  4665  001260  0100               	movlb	0	; () banked
  4666  001262  6FE6               	movwf	Current_Filter@x& (0+255),b
  4667  001264                     
  4668                           ; BSR set to: 0
  4669  001264  0100               	movlb	0	; () banked
  4670  001266  51E7               	movf	(Current_Filter@x+1)& (0+255),w,b
  4671  001268  0A80               	xorlw	128
  4672  00126A  0F80               	addlw	-128
  4673  00126C  0E04               	movlw	4
  4674  00126E  B4D8               	btfsc	status,2,c
  4675  001270  5DE6               	subwf	Current_Filter@x& (0+255),w,b
  4676  001272  B0D8               	btfsc	status,0,c
  4677  001274  D0CB               	goto	l3984
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;Current.c: 46: {
  4681                           ;Current.c: 47: Battery_Current[x] = (0.88*TempBattery_Current[x] + ((1- 0.88)*PrevBatte
      +                          ry_Current[x]));
  4682                           
  4683                           ; BSR set to: 0
  4684                           
  4685                           ; BSR set to: 0
  4686  001276  C0E6  F020         	movff	Current_Filter@x,___wmul@multiplier
  4687  00127A  C0E7  F021         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4688  00127E  0E00               	movlw	0
  4689  001280  6E23               	movwf	___wmul@multiplicand+1,c
  4690  001282  0E03               	movlw	3
  4691  001284  6E22               	movwf	___wmul@multiplicand,c
  4692  001286  EC13  F013         	call	___wmul	;wreg free
  4693  00128A  0100               	movlb	0	; () banked
  4694  00128C  0E88               	movlw	low _Battery_Current
  4695  00128E  2420               	addwf	?___wmul,w,c
  4696  001290  6ED9               	movwf	fsr2l,c
  4697  001292  0100               	movlb	0	; () banked
  4698  001294  0E00               	movlw	high _Battery_Current
  4699  001296  2021               	addwfc	?___wmul+1,w,c
  4700  001298  6EDA               	movwf	fsr2h,c
  4701  00129A  0E48               	movlw	72
  4702  00129C  0100               	movlb	0	; () banked
  4703  00129E  6FD1               	movwf	___ftmul@f2& (0+255),b
  4704  0012A0  0E61               	movlw	97
  4705  0012A2  0100               	movlb	0	; () banked
  4706  0012A4  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  4707  0012A6  0E3F               	movlw	63
  4708  0012A8  0100               	movlb	0	; () banked
  4709  0012AA  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  4710  0012AC  C0E6  F020         	movff	Current_Filter@x,___wmul@multiplier
  4711  0012B0  C0E7  F021         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4712  0012B4  0E00               	movlw	0
  4713  0012B6  6E23               	movwf	___wmul@multiplicand+1,c
  4714  0012B8  0E03               	movlw	3
  4715  0012BA  6E22               	movwf	___wmul@multiplicand,c
  4716  0012BC  EC13  F013         	call	___wmul	;wreg free
  4717  0012C0  0101               	movlb	1	; () banked
  4718  0012C2  0E9F               	movlw	low _TempBattery_Current
  4719  0012C4  2420               	addwf	?___wmul,w,c
  4720  0012C6  6EE1               	movwf	fsr1l,c
  4721  0012C8  0101               	movlb	1	; () banked
  4722  0012CA  0E01               	movlw	high _TempBattery_Current
  4723  0012CC  2021               	addwfc	?___wmul+1,w,c
  4724  0012CE  6EE2               	movwf	fsr1h,c
  4725  0012D0  0100               	movlb	0	; () banked
  4726  0012D2  CFE6 F0CE          	movff	postinc1,___ftmul@f1
  4727  0012D6  0100               	movlb	0	; () banked
  4728  0012D8  CFE6 F0CF          	movff	postinc1,___ftmul@f1+1
  4729  0012DC  0100               	movlb	0	; () banked
  4730  0012DE  CFE5 F0D0          	movff	postdec1,___ftmul@f1+2
  4731  0012E2  ECD2  F00A         	call	___ftmul	;wreg free
  4732  0012E6  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  4733  0012EA  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  4734  0012EE  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  4735  0012F2  0EC3               	movlw	195
  4736  0012F4  0100               	movlb	0	; () banked
  4737  0012F6  6FD1               	movwf	___ftmul@f2& (0+255),b
  4738  0012F8  0EF5               	movlw	245
  4739  0012FA  0100               	movlb	0	; () banked
  4740  0012FC  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  4741  0012FE  0E3D               	movlw	61
  4742  001300  0100               	movlb	0	; () banked
  4743  001302  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  4744  001304  0E00               	movlw	0
  4745  001306  6E23               	movwf	___wmul@multiplicand+1,c
  4746  001308  0E03               	movlw	3
  4747  00130A  6E22               	movwf	___wmul@multiplicand,c
  4748  00130C  C0E6  F020         	movff	Current_Filter@x,___wmul@multiplier
  4749  001310  C0E7  F021         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4750  001314  EC13  F013         	call	___wmul	;wreg free
  4751  001318  0101               	movlb	1	; () banked
  4752  00131A  0E60               	movlw	low _PrevBattery_Current
  4753  00131C  2420               	addwf	?___wmul,w,c
  4754  00131E  6EE1               	movwf	fsr1l,c
  4755  001320  0101               	movlb	1	; () banked
  4756  001322  0E01               	movlw	high _PrevBattery_Current
  4757  001324  2021               	addwfc	?___wmul+1,w,c
  4758  001326  6EE2               	movwf	fsr1h,c
  4759  001328  0100               	movlb	0	; () banked
  4760  00132A  CFE6 F0CE          	movff	postinc1,___ftmul@f1
  4761  00132E  0100               	movlb	0	; () banked
  4762  001330  CFE6 F0CF          	movff	postinc1,___ftmul@f1+1
  4763  001334  0100               	movlb	0	; () banked
  4764  001336  CFE5 F0D0          	movff	postdec1,___ftmul@f1+2
  4765  00133A  ECD2  F00A         	call	___ftmul	;wreg free
  4766  00133E  C0CE  F0DD         	movff	?___ftmul,___ftadd@f2
  4767  001342  C0CF  F0DE         	movff	?___ftmul+1,___ftadd@f2+1
  4768  001346  C0D0  F0DF         	movff	?___ftmul+2,___ftadd@f2+2
  4769  00134A  ECB1  F005         	call	___ftadd	;wreg free
  4770  00134E  C0DA  FFDE         	movff	?___ftadd,postinc2
  4771  001352  C0DB  FFDE         	movff	?___ftadd+1,postinc2
  4772  001356  C0DC  FFDD         	movff	?___ftadd+2,postdec2
  4773  00135A  52DD               	movf	postdec2,f,c
  4774                           
  4775                           ;Current.c: 48: PrevBattery_Current[x] = Battery_Current[x];
  4776  00135C  C0E6  F020         	movff	Current_Filter@x,___wmul@multiplier
  4777  001360  C0E7  F021         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4778  001364  0E00               	movlw	0
  4779  001366  6E23               	movwf	___wmul@multiplicand+1,c
  4780  001368  0E03               	movlw	3
  4781  00136A  6E22               	movwf	___wmul@multiplicand,c
  4782  00136C  EC13  F013         	call	___wmul	;wreg free
  4783  001370  0100               	movlb	0	; () banked
  4784  001372  0E88               	movlw	low _Battery_Current
  4785  001374  2420               	addwf	?___wmul,w,c
  4786  001376  6ED9               	movwf	fsr2l,c
  4787  001378  0100               	movlb	0	; () banked
  4788  00137A  0E00               	movlw	high _Battery_Current
  4789  00137C  2021               	addwfc	?___wmul+1,w,c
  4790  00137E  6EDA               	movwf	fsr2h,c
  4791  001380  C0E6  F020         	movff	Current_Filter@x,___wmul@multiplier
  4792  001384  C0E7  F021         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4793  001388  0E00               	movlw	0
  4794  00138A  6E23               	movwf	___wmul@multiplicand+1,c
  4795  00138C  0E03               	movlw	3
  4796  00138E  6E22               	movwf	___wmul@multiplicand,c
  4797  001390  EC13  F013         	call	___wmul	;wreg free
  4798  001394  0101               	movlb	1	; () banked
  4799  001396  0E60               	movlw	low _PrevBattery_Current
  4800  001398  2420               	addwf	?___wmul,w,c
  4801  00139A  6EE1               	movwf	fsr1l,c
  4802  00139C  0101               	movlb	1	; () banked
  4803  00139E  0E01               	movlw	high _PrevBattery_Current
  4804  0013A0  2021               	addwfc	?___wmul+1,w,c
  4805  0013A2  6EE2               	movwf	fsr1h,c
  4806  0013A4  CFDE FFE6          	movff	postinc2,postinc1
  4807  0013A8  CFDE FFE6          	movff	postinc2,postinc1
  4808  0013AC  CFDE FFE5          	movff	postinc2,postdec1
  4809  0013B0  52E5               	movf	postdec1,f,c
  4810                           
  4811                           ; BSR set to: 1
  4812                           ;Current.c: 49: Current_Mean += Battery_Current[x];
  4813  0013B2  C036  F0DA         	movff	_Current_Mean,___ftadd@f1
  4814  0013B6  C037  F0DB         	movff	_Current_Mean+1,___ftadd@f1+1
  4815  0013BA  C038  F0DC         	movff	_Current_Mean+2,___ftadd@f1+2
  4816  0013BE  C0E6  F020         	movff	Current_Filter@x,___wmul@multiplier
  4817  0013C2  C0E7  F021         	movff	Current_Filter@x+1,___wmul@multiplier+1
  4818  0013C6  0E00               	movlw	0
  4819  0013C8  6E23               	movwf	___wmul@multiplicand+1,c
  4820  0013CA  0E03               	movlw	3
  4821  0013CC  6E22               	movwf	___wmul@multiplicand,c
  4822  0013CE  EC13  F013         	call	___wmul	;wreg free
  4823  0013D2  0100               	movlb	0	; () banked
  4824  0013D4  0E88               	movlw	low _Battery_Current
  4825  0013D6  2420               	addwf	?___wmul,w,c
  4826  0013D8  6ED9               	movwf	fsr2l,c
  4827  0013DA  0100               	movlb	0	; () banked
  4828  0013DC  0E00               	movlw	high _Battery_Current
  4829  0013DE  2021               	addwfc	?___wmul+1,w,c
  4830  0013E0  6EDA               	movwf	fsr2h,c
  4831  0013E2  0100               	movlb	0	; () banked
  4832  0013E4  CFDE F0DD          	movff	postinc2,___ftadd@f2
  4833  0013E8  0100               	movlb	0	; () banked
  4834  0013EA  CFDE F0DE          	movff	postinc2,___ftadd@f2+1
  4835  0013EE  0100               	movlb	0	; () banked
  4836  0013F0  CFDD F0DF          	movff	postdec2,___ftadd@f2+2
  4837  0013F4  ECB1  F005         	call	___ftadd	;wreg free
  4838  0013F8  C0DA  F036         	movff	?___ftadd,_Current_Mean
  4839  0013FC  C0DB  F037         	movff	?___ftadd+1,_Current_Mean+1
  4840  001400  C0DC  F038         	movff	?___ftadd+2,_Current_Mean+2
  4841  001404  0100               	movlb	0	; () banked
  4842  001406  4BE6               	infsnz	Current_Filter@x& (0+255),f,b
  4843  001408  2BE7               	incf	(Current_Filter@x+1)& (0+255),f,b
  4844  00140A  D72C               	goto	L10
  4845  00140C                     l3984:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;Current.c: 50: }
  4849                           ;Current.c: 51: Current_Mean = Current_Mean/5.0;
  4850  00140C  C036  F02A         	movff	_Current_Mean,___ftdiv@f1
  4851  001410  C037  F02B         	movff	_Current_Mean+1,___ftdiv@f1+1
  4852  001414  C038  F02C         	movff	_Current_Mean+2,___ftdiv@f1+2
  4853  001418  0E00               	movlw	0
  4854  00141A  6E2D               	movwf	___ftdiv@f2,c
  4855  00141C  0EA0               	movlw	160
  4856  00141E  6E2E               	movwf	___ftdiv@f2+1,c
  4857  001420  0E40               	movlw	64
  4858  001422  6E2F               	movwf	___ftdiv@f2+2,c
  4859  001424  ECE9  F00C         	call	___ftdiv	;wreg free
  4860  001428  C02A  F036         	movff	?___ftdiv,_Current_Mean
  4861  00142C  C02B  F037         	movff	?___ftdiv+1,_Current_Mean+1
  4862  001430  C02C  F038         	movff	?___ftdiv+2,_Current_Mean+2
  4863  001434  0012               	return	
  4864  001436                     __end_of_Current_Filter:
  4865                           	opt stack 0
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           intcon	equ	0xFF2
  4873                           intcon2	equ	0xFF1
  4874                           postinc0	equ	0xFEE
  4875                           wreg	equ	0xFE8
  4876                           postinc1	equ	0xFE6
  4877                           postdec1	equ	0xFE5
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           indf2	equ	0xFDF
  4881                           postinc2	equ	0xFDE
  4882                           postdec2	equ	0xFDD
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _Battery_Fault *****************
  4888 ;; Defined at:
  4889 ;;		line 11 in file "Battery.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  i               2   47[COMRAM] int 
  4894 ;;  fault           1   46[COMRAM] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;                  1    wreg      unsigned char 
  4897 ;; Registers used:
  4898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4904 ;;      Params:         0       0       0       0       0       0       0
  4905 ;;      Locals:         3       0       0       0       0       0       0
  4906 ;;      Temps:          0       0       0       0       0       0       0
  4907 ;;      Totals:         3       0       0       0       0       0       0
  4908 ;;Total ram usage:        3 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:    5
  4911 ;; This function calls:
  4912 ;;		___ftge
  4913 ;;		___wmul
  4914 ;; This function is called by:
  4915 ;;		_main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           	psect	text27
  4920  001E3A                     __ptext27:
  4921                           	opt stack 0
  4922  001E3A                     _Battery_Fault:
  4923                           	opt stack 25
  4924                           
  4925                           ;Battery.c: 13: char fault = 0;
  4926                           
  4927                           ;incstack = 0
  4928  001E3A  0E00               	movlw	0
  4929  001E3C  6E2F               	movwf	Battery_Fault@fault,c
  4930                           
  4931                           ;Battery.c: 14: for(int i = 0;i<6;i++)
  4932  001E3E  0E00               	movlw	0
  4933  001E40  6E31               	movwf	Battery_Fault@i+1,c
  4934  001E42  0E00               	movlw	0
  4935  001E44  6E30               	movwf	Battery_Fault@i,c
  4936  001E46  5031               	movf	Battery_Fault@i+1,w,c
  4937  001E48  0A80               	xorlw	128
  4938  001E4A  0F80               	addlw	-128
  4939  001E4C  0E06               	movlw	6
  4940  001E4E  B4D8               	btfsc	status,2,c
  4941  001E50  5C30               	subwf	Battery_Fault@i,w,c
  4942  001E52  B0D8               	btfsc	status,0,c
  4943  001E54  D049               	goto	l4104
  4944                           
  4945                           ;Battery.c: 15: {
  4946                           ;Battery.c: 16: if ((3.00 > Battery_Volt[i]) || (4.21 > Battery_Volt[i]))
  4947  001E56  C030  F020         	movff	Battery_Fault@i,___wmul@multiplier
  4948  001E5A  C031  F021         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  4949  001E5E  0E00               	movlw	0
  4950  001E60  6E23               	movwf	___wmul@multiplicand+1,c
  4951  001E62  0E03               	movlw	3
  4952  001E64  6E22               	movwf	___wmul@multiplicand,c
  4953  001E66  EC13  F013         	call	___wmul	;wreg free
  4954  001E6A  0101               	movlb	1	; () banked
  4955  001E6C  0E00               	movlw	low _Battery_Volt
  4956  001E6E  2420               	addwf	?___wmul,w,c
  4957  001E70  6ED9               	movwf	fsr2l,c
  4958  001E72  0101               	movlb	1	; () banked
  4959  001E74  0E01               	movlw	high _Battery_Volt
  4960  001E76  2021               	addwfc	?___wmul+1,w,c
  4961  001E78  6EDA               	movwf	fsr2h,c
  4962  001E7A  CFDE F026          	movff	postinc2,___ftge@ff1
  4963  001E7E  CFDE F027          	movff	postinc2,___ftge@ff1+1
  4964  001E82  CFDD F028          	movff	postdec2,___ftge@ff1+2
  4965  001E86  0E00               	movlw	0
  4966  001E88  6E29               	movwf	___ftge@ff2,c
  4967  001E8A  0E40               	movlw	64
  4968  001E8C  6E2A               	movwf	___ftge@ff2+1,c
  4969  001E8E  0E40               	movlw	64
  4970  001E90  6E2B               	movwf	___ftge@ff2+2,c
  4971  001E92  EC09  F011         	call	___ftge	;wreg free
  4972  001E96  A0D8               	btfss	status,0,c
  4973  001E98  D022               	goto	l4098
  4974  001E9A  C030  F020         	movff	Battery_Fault@i,___wmul@multiplier
  4975  001E9E  C031  F021         	movff	Battery_Fault@i+1,___wmul@multiplier+1
  4976  001EA2  0E00               	movlw	0
  4977  001EA4  6E23               	movwf	___wmul@multiplicand+1,c
  4978  001EA6  0E03               	movlw	3
  4979  001EA8  6E22               	movwf	___wmul@multiplicand,c
  4980  001EAA  EC13  F013         	call	___wmul	;wreg free
  4981  001EAE  0101               	movlb	1	; () banked
  4982  001EB0  0E00               	movlw	low _Battery_Volt
  4983  001EB2  2420               	addwf	?___wmul,w,c
  4984  001EB4  6ED9               	movwf	fsr2l,c
  4985  001EB6  0101               	movlb	1	; () banked
  4986  001EB8  0E01               	movlw	high _Battery_Volt
  4987  001EBA  2021               	addwfc	?___wmul+1,w,c
  4988  001EBC  6EDA               	movwf	fsr2h,c
  4989  001EBE  CFDE F026          	movff	postinc2,___ftge@ff1
  4990  001EC2  CFDE F027          	movff	postinc2,___ftge@ff1+1
  4991  001EC6  CFDD F028          	movff	postdec2,___ftge@ff1+2
  4992  001ECA  0EB8               	movlw	184
  4993  001ECC  6E29               	movwf	___ftge@ff2,c
  4994  001ECE  0E86               	movlw	134
  4995  001ED0  6E2A               	movwf	___ftge@ff2+1,c
  4996  001ED2  0E40               	movlw	64
  4997  001ED4  6E2B               	movwf	___ftge@ff2+2,c
  4998  001ED6  EC09  F011         	call	___ftge	;wreg free
  4999  001EDA  B0D8               	btfsc	status,0,c
  5000  001EDC  D002               	goto	l4100
  5001  001EDE                     l4098:
  5002                           
  5003                           ;Battery.c: 17: {
  5004                           ;Battery.c: 18: fault = 1;
  5005  001EDE  0E01               	movlw	1
  5006  001EE0  6E2F               	movwf	Battery_Fault@fault,c
  5007  001EE2                     l4100:
  5008  001EE2  4A30               	infsnz	Battery_Fault@i,f,c
  5009  001EE4  2A31               	incf	Battery_Fault@i+1,f,c
  5010  001EE6  D7AF               	goto	L11
  5011  001EE8                     l4104:
  5012                           
  5013                           ;Battery.c: 19: }
  5014                           ;Battery.c: 20: }
  5015                           ;Battery.c: 21: return fault;
  5016  001EE8  502F               	movf	Battery_Fault@fault,w,c
  5017  001EEA  0012               	return	
  5018  001EEC                     __end_of_Battery_Fault:
  5019                           	opt stack 0
  5020                           tblptru	equ	0xFF8
  5021                           tblptrh	equ	0xFF7
  5022                           tblptrl	equ	0xFF6
  5023                           tablat	equ	0xFF5
  5024                           prodh	equ	0xFF4
  5025                           prodl	equ	0xFF3
  5026                           intcon	equ	0xFF2
  5027                           intcon2	equ	0xFF1
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           postinc1	equ	0xFE6
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           indf2	equ	0xFDF
  5035                           postinc2	equ	0xFDE
  5036                           postdec2	equ	0xFDD
  5037                           fsr2h	equ	0xFDA
  5038                           fsr2l	equ	0xFD9
  5039                           status	equ	0xFD8
  5040                           
  5041 ;; *************** function ___ftge *****************
  5042 ;; Defined at:
  5043 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftge.c"
  5044 ;; Parameters:    Size  Location     Type
  5045 ;;  ff1             3   37[COMRAM] float 
  5046 ;;  ff2             3   40[COMRAM] float 
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;		None
  5049 ;; Return value:  Size  Location     Type
  5050 ;;		None               void
  5051 ;; Registers used:
  5052 ;;		wreg, status,2, status,0
  5053 ;; Tracked objects:
  5054 ;;		On entry : 0/0
  5055 ;;		On exit  : 0/0
  5056 ;;		Unchanged: 0/0
  5057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5058 ;;      Params:         6       0       0       0       0       0       0
  5059 ;;      Locals:         0       0       0       0       0       0       0
  5060 ;;      Temps:          3       0       0       0       0       0       0
  5061 ;;      Totals:         9       0       0       0       0       0       0
  5062 ;;Total ram usage:        9 bytes
  5063 ;; Hardware stack levels used:    1
  5064 ;; Hardware stack levels required when called:    4
  5065 ;; This function calls:
  5066 ;;		Nothing
  5067 ;; This function is called by:
  5068 ;;		_Battery_Fault
  5069 ;;		_Temp_Fault
  5070 ;;		_Current_Fault
  5071 ;;		_RunBypas
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text28
  5076  002212                     __ptext28:
  5077                           	opt stack 0
  5078  002212                     ___ftge:
  5079                           	opt stack 25
  5080                           
  5081                           ;incstack = 0
  5082  002212  AE28               	btfss	___ftge@ff1+2,7,c
  5083  002214  D016               	goto	l4064
  5084  002216  C026  F02C         	movff	___ftge@ff1,??___ftge
  5085  00221A  C027  F02D         	movff	___ftge@ff1+1,??___ftge+1
  5086  00221E  C028  F02E         	movff	___ftge@ff1+2,??___ftge+2
  5087  002222  1E2C               	comf	??___ftge,f,c
  5088  002224  1E2D               	comf	??___ftge+1,f,c
  5089  002226  1E2E               	comf	??___ftge+2,f,c
  5090  002228  2A2C               	incf	??___ftge,f,c
  5091  00222A  0E00               	movlw	0
  5092  00222C  222D               	addwfc	??___ftge+1,f,c
  5093  00222E  222E               	addwfc	??___ftge+2,f,c
  5094  002230  0E00               	movlw	0
  5095  002232  242C               	addwf	??___ftge,w,c
  5096  002234  6E26               	movwf	___ftge@ff1,c
  5097  002236  0E00               	movlw	0
  5098  002238  202D               	addwfc	??___ftge+1,w,c
  5099  00223A  6E27               	movwf	___ftge@ff1+1,c
  5100  00223C  0E80               	movlw	128
  5101  00223E  202E               	addwfc	??___ftge+2,w,c
  5102  002240  6E28               	movwf	___ftge@ff1+2,c
  5103  002242                     l4064:
  5104  002242  AE2B               	btfss	___ftge@ff2+2,7,c
  5105  002244  D016               	goto	l4068
  5106  002246  C029  F02C         	movff	___ftge@ff2,??___ftge
  5107  00224A  C02A  F02D         	movff	___ftge@ff2+1,??___ftge+1
  5108  00224E  C02B  F02E         	movff	___ftge@ff2+2,??___ftge+2
  5109  002252  1E2C               	comf	??___ftge,f,c
  5110  002254  1E2D               	comf	??___ftge+1,f,c
  5111  002256  1E2E               	comf	??___ftge+2,f,c
  5112  002258  2A2C               	incf	??___ftge,f,c
  5113  00225A  0E00               	movlw	0
  5114  00225C  222D               	addwfc	??___ftge+1,f,c
  5115  00225E  222E               	addwfc	??___ftge+2,f,c
  5116  002260  0E00               	movlw	0
  5117  002262  242C               	addwf	??___ftge,w,c
  5118  002264  6E29               	movwf	___ftge@ff2,c
  5119  002266  0E00               	movlw	0
  5120  002268  202D               	addwfc	??___ftge+1,w,c
  5121  00226A  6E2A               	movwf	___ftge@ff2+1,c
  5122  00226C  0E80               	movlw	128
  5123  00226E  202E               	addwfc	??___ftge+2,w,c
  5124  002270  6E2B               	movwf	___ftge@ff2+2,c
  5125  002272                     l4068:
  5126  002272  0E00               	movlw	0
  5127  002274  1A26               	xorwf	___ftge@ff1,f,c
  5128  002276  0E00               	movlw	0
  5129  002278  1A27               	xorwf	___ftge@ff1+1,f,c
  5130  00227A  0E80               	movlw	128
  5131  00227C  1A28               	xorwf	___ftge@ff1+2,f,c
  5132  00227E  0E00               	movlw	0
  5133  002280  1A29               	xorwf	___ftge@ff2,f,c
  5134  002282  0E00               	movlw	0
  5135  002284  1A2A               	xorwf	___ftge@ff2+1,f,c
  5136  002286  0E80               	movlw	128
  5137  002288  1A2B               	xorwf	___ftge@ff2+2,f,c
  5138  00228A  5029               	movf	___ftge@ff2,w,c
  5139  00228C  5C26               	subwf	___ftge@ff1,w,c
  5140  00228E  502A               	movf	___ftge@ff2+1,w,c
  5141  002290  5827               	subwfb	___ftge@ff1+1,w,c
  5142  002292  502B               	movf	___ftge@ff2+2,w,c
  5143  002294  5828               	subwfb	___ftge@ff1+2,w,c
  5144  002296  B0D8               	btfsc	status,0,c
  5145  002298  D002               	goto	l4074
  5146  00229A  90D8               	bcf	status,0,c
  5147  00229C  0012               	return	
  5148  00229E                     l4074:
  5149  00229E  80D8               	bsf	status,0,c
  5150  0022A0  0012               	return	
  5151  0022A2                     __end_of___ftge:
  5152                           	opt stack 0
  5153                           tblptru	equ	0xFF8
  5154                           tblptrh	equ	0xFF7
  5155                           tblptrl	equ	0xFF6
  5156                           tablat	equ	0xFF5
  5157                           prodh	equ	0xFF4
  5158                           prodl	equ	0xFF3
  5159                           intcon	equ	0xFF2
  5160                           intcon2	equ	0xFF1
  5161                           postinc0	equ	0xFEE
  5162                           wreg	equ	0xFE8
  5163                           postinc1	equ	0xFE6
  5164                           postdec1	equ	0xFE5
  5165                           fsr1h	equ	0xFE2
  5166                           fsr1l	equ	0xFE1
  5167                           indf2	equ	0xFDF
  5168                           postinc2	equ	0xFDE
  5169                           postdec2	equ	0xFDD
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174 ;; *************** function _Battery_Convert *****************
  5175 ;; Defined at:
  5176 ;;		line 43 in file "Battery.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;		None
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  x               2   34[BANK0 ] int 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;		None               void
  5183 ;; Registers used:
  5184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5190 ;;      Params:         0       0       0       0       0       0       0
  5191 ;;      Locals:         0       2       0       0       0       0       0
  5192 ;;      Temps:          0       2       0       0       0       0       0
  5193 ;;      Totals:         0       4       0       0       0       0       0
  5194 ;;Total ram usage:        4 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    7
  5197 ;; This function calls:
  5198 ;;		_Battery_Filter
  5199 ;;		___awtoft
  5200 ;;		___ftdiv
  5201 ;;		___ftmul
  5202 ;;		___wmul
  5203 ;; This function is called by:
  5204 ;;		_main
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           	psect	text29
  5209  001CA4                     __ptext29:
  5210                           	opt stack 0
  5211  001CA4                     _Battery_Convert:
  5212                           	opt stack 23
  5213                           
  5214                           ;Battery.c: 45: for(int x = 0; x < 6; x++)
  5215                           
  5216                           ;incstack = 0
  5217  001CA4  0E00               	movlw	0
  5218  001CA6  0100               	movlb	0	; () banked
  5219  001CA8  6FEB               	movwf	(Battery_Convert@x+1)& (0+255),b
  5220  001CAA  0E00               	movlw	0
  5221  001CAC  0100               	movlb	0	; () banked
  5222  001CAE  6FEA               	movwf	Battery_Convert@x& (0+255),b
  5223  001CB0                     
  5224                           ; BSR set to: 0
  5225  001CB0  0100               	movlb	0	; () banked
  5226  001CB2  51EB               	movf	(Battery_Convert@x+1)& (0+255),w,b
  5227  001CB4  0A80               	xorlw	128
  5228  001CB6  0F80               	addlw	-128
  5229  001CB8  0E06               	movlw	6
  5230  001CBA  B4D8               	btfsc	status,2,c
  5231  001CBC  5DEA               	subwf	Battery_Convert@x& (0+255),w,b
  5232  001CBE  B0D8               	btfsc	status,0,c
  5233  001CC0  D054               	goto	l4120
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;Battery.c: 46: {
  5237                           ;Battery.c: 47: TempBattery_Volt[x] = ((Battery_Adc[x]/1024.0)*5.0);
  5238                           
  5239                           ; BSR set to: 0
  5240                           
  5241                           ; BSR set to: 0
  5242  001CC2  C0EA  F020         	movff	Battery_Convert@x,___wmul@multiplier
  5243  001CC6  C0EB  F021         	movff	Battery_Convert@x+1,___wmul@multiplier+1
  5244  001CCA  0E00               	movlw	0
  5245  001CCC  6E23               	movwf	___wmul@multiplicand+1,c
  5246  001CCE  0E03               	movlw	3
  5247  001CD0  6E22               	movwf	___wmul@multiplicand,c
  5248  001CD2  EC13  F013         	call	___wmul	;wreg free
  5249  001CD6  0101               	movlb	1	; () banked
  5250  001CD8  0E6F               	movlw	low _TempBattery_Volt
  5251  001CDA  2420               	addwf	?___wmul,w,c
  5252  001CDC  6ED9               	movwf	fsr2l,c
  5253  001CDE  0101               	movlb	1	; () banked
  5254  001CE0  0E01               	movlw	high _TempBattery_Volt
  5255  001CE2  2021               	addwfc	?___wmul+1,w,c
  5256  001CE4  6EDA               	movwf	fsr2h,c
  5257  001CE6  0E00               	movlw	0
  5258  001CE8  6E2D               	movwf	___ftdiv@f2,c
  5259  001CEA  0E80               	movlw	128
  5260  001CEC  6E2E               	movwf	___ftdiv@f2+1,c
  5261  001CEE  0E44               	movlw	68
  5262  001CF0  6E2F               	movwf	___ftdiv@f2+2,c
  5263  001CF2  0E60               	movlw	low _Battery_Adc
  5264  001CF4  0100               	movlb	0	; () banked
  5265  001CF6  6FE8               	movwf	??_Battery_Convert& (0+255),b
  5266  001CF8  0E00               	movlw	high _Battery_Adc
  5267  001CFA  6FE9               	movwf	(??_Battery_Convert+1)& (0+255),b
  5268  001CFC  90D8               	bcf	status,0,c
  5269  001CFE  0100               	movlb	0	; () banked
  5270  001D00  35EA               	rlcf	Battery_Convert@x& (0+255),w,b
  5271  001D02  6EE1               	movwf	fsr1l,c
  5272  001D04  0100               	movlb	0	; () banked
  5273  001D06  35EB               	rlcf	(Battery_Convert@x+1)& (0+255),w,b
  5274  001D08  6EE2               	movwf	fsr1h,c
  5275  001D0A  0100               	movlb	0	; () banked
  5276  001D0C  51E8               	movf	??_Battery_Convert& (0+255),w,b
  5277  001D0E  26E1               	addwf	fsr1l,f,c
  5278  001D10  0100               	movlb	0	; () banked
  5279  001D12  51E9               	movf	(??_Battery_Convert+1)& (0+255),w,b
  5280  001D14  22E2               	addwfc	fsr1h,f,c
  5281  001D16  CFE6 F026          	movff	postinc1,___awtoft@c
  5282  001D1A  CFE5 F027          	movff	postdec1,___awtoft@c+1
  5283  001D1E  EC0C  F012         	call	___awtoft	;wreg free
  5284  001D22  C026  F02A         	movff	?___awtoft,___ftdiv@f1
  5285  001D26  C027  F02B         	movff	?___awtoft+1,___ftdiv@f1+1
  5286  001D2A  C028  F02C         	movff	?___awtoft+2,___ftdiv@f1+2
  5287  001D2E  ECE9  F00C         	call	___ftdiv	;wreg free
  5288  001D32  C02A  F0CE         	movff	?___ftdiv,___ftmul@f1
  5289  001D36  C02B  F0CF         	movff	?___ftdiv+1,___ftmul@f1+1
  5290  001D3A  C02C  F0D0         	movff	?___ftdiv+2,___ftmul@f1+2
  5291  001D3E  0E00               	movlw	0
  5292  001D40  0100               	movlb	0	; () banked
  5293  001D42  6FD1               	movwf	___ftmul@f2& (0+255),b
  5294  001D44  0EA0               	movlw	160
  5295  001D46  0100               	movlb	0	; () banked
  5296  001D48  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  5297  001D4A  0E40               	movlw	64
  5298  001D4C  0100               	movlb	0	; () banked
  5299  001D4E  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  5300  001D50  ECD2  F00A         	call	___ftmul	;wreg free
  5301  001D54  C0CE  FFDE         	movff	?___ftmul,postinc2
  5302  001D58  C0CF  FFDE         	movff	?___ftmul+1,postinc2
  5303  001D5C  C0D0  FFDD         	movff	?___ftmul+2,postdec2
  5304  001D60  52DD               	movf	postdec2,f,c
  5305  001D62  0100               	movlb	0	; () banked
  5306  001D64  4BEA               	infsnz	Battery_Convert@x& (0+255),f,b
  5307  001D66  2BEB               	incf	(Battery_Convert@x+1)& (0+255),f,b
  5308  001D68  D7A3               	goto	L12
  5309  001D6A                     l4120:
  5310                           
  5311                           ; BSR set to: 0
  5312                           ;Battery.c: 48: }
  5313                           ;Battery.c: 49: Battery_Filter();
  5314  001D6A  EC38  F00C         	call	_Battery_Filter	;wreg free
  5315  001D6E  0012               	return	
  5316  001D70                     __end_of_Battery_Convert:
  5317                           	opt stack 0
  5318                           tblptru	equ	0xFF8
  5319                           tblptrh	equ	0xFF7
  5320                           tblptrl	equ	0xFF6
  5321                           tablat	equ	0xFF5
  5322                           prodh	equ	0xFF4
  5323                           prodl	equ	0xFF3
  5324                           intcon	equ	0xFF2
  5325                           intcon2	equ	0xFF1
  5326                           postinc0	equ	0xFEE
  5327                           wreg	equ	0xFE8
  5328                           postinc1	equ	0xFE6
  5329                           postdec1	equ	0xFE5
  5330                           fsr1h	equ	0xFE2
  5331                           fsr1l	equ	0xFE1
  5332                           indf2	equ	0xFDF
  5333                           postinc2	equ	0xFDE
  5334                           postdec2	equ	0xFDD
  5335                           fsr2h	equ	0xFDA
  5336                           fsr2l	equ	0xFD9
  5337                           status	equ	0xFD8
  5338                           
  5339 ;; *************** function ___ftdiv *****************
  5340 ;; Defined at:
  5341 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdiv.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  f1              3   41[COMRAM] float 
  5344 ;;  f2              3   44[COMRAM] float 
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;  f3              3    1[BANK0 ] float 
  5347 ;;  sign            1    5[BANK0 ] unsigned char 
  5348 ;;  exp             1    4[BANK0 ] unsigned char 
  5349 ;;  cntr            1    0[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  3   41[COMRAM] float 
  5352 ;; Registers used:
  5353 ;;		wreg, status,2, status,0, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5359 ;;      Params:         6       0       0       0       0       0       0
  5360 ;;      Locals:         0       6       0       0       0       0       0
  5361 ;;      Temps:          3       0       0       0       0       0       0
  5362 ;;      Totals:         9       6       0       0       0       0       0
  5363 ;;Total ram usage:       15 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    5
  5366 ;; This function calls:
  5367 ;;		___ftpack
  5368 ;; This function is called by:
  5369 ;;		_Battery_Convert
  5370 ;;		_Temp_Convert
  5371 ;;		_Current_Filter
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text30
  5376  0019D2                     __ptext30:
  5377                           	opt stack 0
  5378  0019D2                     ___ftdiv:
  5379                           	opt stack 24
  5380                           
  5381                           ;incstack = 0
  5382  0019D2  C02C  F030         	movff	___ftdiv@f1+2,??___ftdiv
  5383  0019D6  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  5384  0019D8  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  5385  0019DA  342B               	rlcf	___ftdiv@f1+1,w,c
  5386  0019DC  3630               	rlcf	??___ftdiv& (0+255),f,c
  5387  0019DE  E301               	bnc	u3171
  5388  0019E0  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  5389  0019E2                     u3171:
  5390  0019E2  5030               	movf	??___ftdiv,w,c
  5391  0019E4  0100               	movlb	0	; () banked
  5392  0019E6  6FCC               	movwf	___ftdiv@exp& (0+255),b
  5393  0019E8  0100               	movlb	0	; () banked
  5394  0019EA  67CC               	tstfsz	___ftdiv@exp& (0+255),b
  5395  0019EC  D007               	goto	l3812
  5396                           
  5397                           ; BSR set to: 0
  5398  0019EE  0E00               	movlw	0
  5399  0019F0  6E2A               	movwf	?___ftdiv,c
  5400  0019F2  0E00               	movlw	0
  5401  0019F4  6E2B               	movwf	?___ftdiv+1,c
  5402  0019F6  0E00               	movlw	0
  5403  0019F8  6E2C               	movwf	?___ftdiv+2,c
  5404  0019FA  0012               	return	
  5405  0019FC                     l3812:
  5406                           
  5407                           ; BSR set to: 0
  5408  0019FC  C02F  F030         	movff	___ftdiv@f2+2,??___ftdiv
  5409  001A00  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  5410  001A02  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  5411  001A04  342E               	rlcf	___ftdiv@f2+1,w,c
  5412  001A06  3630               	rlcf	??___ftdiv& (0+255),f,c
  5413  001A08  E301               	bnc	u3191
  5414  001A0A  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  5415  001A0C                     u3191:
  5416  001A0C  5030               	movf	??___ftdiv,w,c
  5417  001A0E  0100               	movlb	0	; () banked
  5418  001A10  6FCD               	movwf	___ftdiv@sign& (0+255),b
  5419  001A12  0100               	movlb	0	; () banked
  5420  001A14  67CD               	tstfsz	___ftdiv@sign& (0+255),b
  5421  001A16  D007               	goto	l3818
  5422                           
  5423                           ; BSR set to: 0
  5424  001A18  0E00               	movlw	0
  5425  001A1A  6E2A               	movwf	?___ftdiv,c
  5426  001A1C  0E00               	movlw	0
  5427  001A1E  6E2B               	movwf	?___ftdiv+1,c
  5428  001A20  0E00               	movlw	0
  5429  001A22  6E2C               	movwf	?___ftdiv+2,c
  5430  001A24  0012               	return	
  5431  001A26                     l3818:
  5432                           
  5433                           ; BSR set to: 0
  5434  001A26  0E00               	movlw	0
  5435  001A28  0100               	movlb	0	; () banked
  5436  001A2A  6FC9               	movwf	___ftdiv@f3& (0+255),b
  5437  001A2C  0E00               	movlw	0
  5438  001A2E  0100               	movlb	0	; () banked
  5439  001A30  6FCA               	movwf	(___ftdiv@f3+1)& (0+255),b
  5440  001A32  0E00               	movlw	0
  5441  001A34  0100               	movlb	0	; () banked
  5442  001A36  6FCB               	movwf	(___ftdiv@f3+2)& (0+255),b
  5443                           
  5444                           ; BSR set to: 0
  5445  001A38  0100               	movlb	0	; () banked
  5446  001A3A  51CD               	movf	___ftdiv@sign& (0+255),w,b
  5447  001A3C  0F89               	addlw	137
  5448  001A3E  0100               	movlb	0	; () banked
  5449  001A40  5FCC               	subwf	___ftdiv@exp& (0+255),f,b
  5450                           
  5451                           ; BSR set to: 0
  5452  001A42  C02C  F0CD         	movff	___ftdiv@f1+2,___ftdiv@sign
  5453                           
  5454                           ; BSR set to: 0
  5455  001A46  502F               	movf	___ftdiv@f2+2,w,c
  5456  001A48  0100               	movlb	0	; () banked
  5457  001A4A  1BCD               	xorwf	___ftdiv@sign& (0+255),f,b
  5458                           
  5459                           ; BSR set to: 0
  5460  001A4C  0E80               	movlw	128
  5461  001A4E  0100               	movlb	0	; () banked
  5462  001A50  17CD               	andwf	___ftdiv@sign& (0+255),f,b
  5463                           
  5464                           ; BSR set to: 0
  5465  001A52  8E2B               	bsf	___ftdiv@f1+1,7,c
  5466                           
  5467                           ; BSR set to: 0
  5468  001A54  0EFF               	movlw	255
  5469  001A56  162A               	andwf	___ftdiv@f1,f,c
  5470  001A58  0EFF               	movlw	255
  5471  001A5A  162B               	andwf	___ftdiv@f1+1,f,c
  5472  001A5C  0E00               	movlw	0
  5473  001A5E  162C               	andwf	___ftdiv@f1+2,f,c
  5474                           
  5475                           ; BSR set to: 0
  5476  001A60  8E2E               	bsf	___ftdiv@f2+1,7,c
  5477                           
  5478                           ; BSR set to: 0
  5479  001A62  0EFF               	movlw	255
  5480  001A64  162D               	andwf	___ftdiv@f2,f,c
  5481  001A66  0EFF               	movlw	255
  5482  001A68  162E               	andwf	___ftdiv@f2+1,f,c
  5483  001A6A  0E00               	movlw	0
  5484  001A6C  162F               	andwf	___ftdiv@f2+2,f,c
  5485                           
  5486                           ; BSR set to: 0
  5487  001A6E  0E18               	movlw	24
  5488  001A70  0100               	movlb	0	; () banked
  5489  001A72  6FC8               	movwf	___ftdiv@cntr& (0+255),b
  5490  001A74                     l3838:
  5491                           
  5492                           ; BSR set to: 0
  5493  001A74  0100               	movlb	0	; () banked
  5494  001A76  90D8               	bcf	status,0,c
  5495  001A78  0100               	movlb	0	; () banked
  5496  001A7A  37C9               	rlcf	___ftdiv@f3& (0+255),f,b
  5497  001A7C  0100               	movlb	0	; () banked
  5498  001A7E  37CA               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5499  001A80  0100               	movlb	0	; () banked
  5500  001A82  37CB               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5501                           
  5502                           ; BSR set to: 0
  5503  001A84  502D               	movf	___ftdiv@f2,w,c
  5504  001A86  5C2A               	subwf	___ftdiv@f1,w,c
  5505  001A88  502E               	movf	___ftdiv@f2+1,w,c
  5506  001A8A  582B               	subwfb	___ftdiv@f1+1,w,c
  5507  001A8C  502F               	movf	___ftdiv@f2+2,w,c
  5508  001A8E  582C               	subwfb	___ftdiv@f1+2,w,c
  5509  001A90  A0D8               	btfss	status,0,c
  5510  001A92  D008               	goto	l1059
  5511                           
  5512                           ; BSR set to: 0
  5513  001A94  502D               	movf	___ftdiv@f2,w,c
  5514  001A96  5E2A               	subwf	___ftdiv@f1,f,c
  5515  001A98  502E               	movf	___ftdiv@f2+1,w,c
  5516  001A9A  5A2B               	subwfb	___ftdiv@f1+1,f,c
  5517  001A9C  502F               	movf	___ftdiv@f2+2,w,c
  5518  001A9E  5A2C               	subwfb	___ftdiv@f1+2,f,c
  5519                           
  5520                           ; BSR set to: 0
  5521  001AA0  0100               	movlb	0	; () banked
  5522  001AA2  81C9               	bsf	___ftdiv@f3& (0+255),0,b
  5523  001AA4                     l1059:
  5524                           
  5525                           ; BSR set to: 0
  5526  001AA4  90D8               	bcf	status,0,c
  5527  001AA6  362A               	rlcf	___ftdiv@f1,f,c
  5528  001AA8  362B               	rlcf	___ftdiv@f1+1,f,c
  5529  001AAA  362C               	rlcf	___ftdiv@f1+2,f,c
  5530                           
  5531                           ; BSR set to: 0
  5532  001AAC  0100               	movlb	0	; () banked
  5533  001AAE  2FC8               	decfsz	___ftdiv@cntr& (0+255),f,b
  5534  001AB0  D7E1               	goto	l3838
  5535                           
  5536                           ; BSR set to: 0
  5537                           
  5538                           ; BSR set to: 0
  5539  001AB2  C0C9  F018         	movff	___ftdiv@f3,___ftpack@arg
  5540  001AB6  C0CA  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5541  001ABA  C0CB  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5542  001ABE  C0CC  F01B         	movff	___ftdiv@exp,___ftpack@exp
  5543  001AC2  C0CD  F01C         	movff	___ftdiv@sign,___ftpack@sign
  5544  001AC6  ECCE  F00F         	call	___ftpack	;wreg free
  5545  001ACA  C018  F02A         	movff	?___ftpack,?___ftdiv
  5546  001ACE  C019  F02B         	movff	?___ftpack+1,?___ftdiv+1
  5547  001AD2  C01A  F02C         	movff	?___ftpack+2,?___ftdiv+2
  5548  001AD6  0012               	return	
  5549  001AD8                     __end_of___ftdiv:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           postinc0	equ	0xFEE
  5560                           wreg	equ	0xFE8
  5561                           postinc1	equ	0xFE6
  5562                           postdec1	equ	0xFE5
  5563                           fsr1h	equ	0xFE2
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           postinc2	equ	0xFDE
  5567                           postdec2	equ	0xFDD
  5568                           fsr2h	equ	0xFDA
  5569                           fsr2l	equ	0xFD9
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function ___awtoft *****************
  5573 ;; Defined at:
  5574 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtoft.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  c               2   37[COMRAM] int 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;  sign            1   40[COMRAM] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  3   37[COMRAM] float 
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, prodl, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5588 ;;      Params:         3       0       0       0       0       0       0
  5589 ;;      Locals:         1       0       0       0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0
  5591 ;;      Totals:         4       0       0       0       0       0       0
  5592 ;;Total ram usage:        4 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    5
  5595 ;; This function calls:
  5596 ;;		___ftpack
  5597 ;; This function is called by:
  5598 ;;		_Battery_Convert
  5599 ;;		_Temp_Convert
  5600 ;;		_Current_Convert
  5601 ;;		_log
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           	psect	text31
  5606  002418                     __ptext31:
  5607                           	opt stack 0
  5608  002418                     ___awtoft:
  5609                           	opt stack 23
  5610                           
  5611                           ;incstack = 0
  5612  002418  0E00               	movlw	0
  5613  00241A  6E29               	movwf	___awtoft@sign,c
  5614  00241C  5027               	movf	___awtoft@c+1,w,c
  5615  00241E  0A80               	xorlw	128
  5616  002420  6EF3               	movwf	prodl,c
  5617  002422  0E80               	movlw	128
  5618  002424  5CF3               	subwf	prodl,w,c
  5619  002426  0E00               	movlw	0
  5620  002428  B4D8               	btfsc	status,2,c
  5621  00242A  5C26               	subwf	___awtoft@c,w,c
  5622  00242C  B0D8               	btfsc	status,0,c
  5623  00242E  D006               	goto	l3860
  5624  002430  6C26               	negf	___awtoft@c,c
  5625  002432  1E27               	comf	___awtoft@c+1,f,c
  5626  002434  B0D8               	btfsc	status,0,c
  5627  002436  2A27               	incf	___awtoft@c+1,f,c
  5628  002438  0E01               	movlw	1
  5629  00243A  6E29               	movwf	___awtoft@sign,c
  5630  00243C                     l3860:
  5631  00243C  C026  F018         	movff	___awtoft@c,___ftpack@arg
  5632  002440  C027  F019         	movff	___awtoft@c+1,___ftpack@arg+1
  5633  002444  6A1A               	clrf	___ftpack@arg+2,c
  5634  002446  0E8E               	movlw	142
  5635  002448  6E1B               	movwf	___ftpack@exp,c
  5636  00244A  C029  F01C         	movff	___awtoft@sign,___ftpack@sign
  5637  00244E  ECCE  F00F         	call	___ftpack	;wreg free
  5638  002452  C018  F026         	movff	?___ftpack,?___awtoft
  5639  002456  C019  F027         	movff	?___ftpack+1,?___awtoft+1
  5640  00245A  C01A  F028         	movff	?___ftpack+2,?___awtoft+2
  5641  00245E  0012               	return	
  5642  002460                     __end_of___awtoft:
  5643                           	opt stack 0
  5644                           tblptru	equ	0xFF8
  5645                           tblptrh	equ	0xFF7
  5646                           tblptrl	equ	0xFF6
  5647                           tablat	equ	0xFF5
  5648                           prodh	equ	0xFF4
  5649                           prodl	equ	0xFF3
  5650                           intcon	equ	0xFF2
  5651                           intcon2	equ	0xFF1
  5652                           postinc0	equ	0xFEE
  5653                           wreg	equ	0xFE8
  5654                           postinc1	equ	0xFE6
  5655                           postdec1	equ	0xFE5
  5656                           fsr1h	equ	0xFE2
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function _Battery_Filter *****************
  5666 ;; Defined at:
  5667 ;;		line 33 in file "Battery.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;		None
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  x               2   30[BANK0 ] int 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;		None               void
  5674 ;; Registers used:
  5675 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5681 ;;      Params:         0       0       0       0       0       0       0
  5682 ;;      Locals:         0       2       0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0
  5684 ;;      Totals:         0       2       0       0       0       0       0
  5685 ;;Total ram usage:        2 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    6
  5688 ;; This function calls:
  5689 ;;		___ftadd
  5690 ;;		___ftmul
  5691 ;;		___wmul
  5692 ;; This function is called by:
  5693 ;;		_Battery_Convert
  5694 ;; This function uses a non-reentrant model
  5695 ;;
  5696                           
  5697                           	psect	text32
  5698  001870                     __ptext32:
  5699                           	opt stack 0
  5700  001870                     _Battery_Filter:
  5701                           	opt stack 23
  5702                           
  5703                           ;Battery.c: 36: for(int x = 0; x < 6; x++)
  5704                           
  5705                           ;incstack = 0
  5706  001870  0E00               	movlw	0
  5707  001872  0100               	movlb	0	; () banked
  5708  001874  6FE7               	movwf	(Battery_Filter@x+1)& (0+255),b
  5709  001876  0E00               	movlw	0
  5710  001878  0100               	movlb	0	; () banked
  5711  00187A  6FE6               	movwf	Battery_Filter@x& (0+255),b
  5712  00187C                     
  5713                           ; BSR set to: 0
  5714  00187C  0100               	movlb	0	; () banked
  5715  00187E  51E7               	movf	(Battery_Filter@x+1)& (0+255),w,b
  5716  001880  0A80               	xorlw	128
  5717  001882  0F80               	addlw	-128
  5718  001884  0E06               	movlw	6
  5719  001886  B4D8               	btfsc	status,2,c
  5720  001888  5DE6               	subwf	Battery_Filter@x& (0+255),w,b
  5721  00188A  B0D8               	btfsc	status,0,c
  5722  00188C  0012               	return	
  5723                           
  5724                           ; BSR set to: 0
  5725                           ;Battery.c: 37: {
  5726                           ;Battery.c: 38: Battery_Volt[x] = (0.88*TempBattery_Volt[x] + ((1- 0.88)*PrevBattery_Vol
      +                          t[x]));
  5727                           
  5728                           ; BSR set to: 0
  5729                           
  5730                           ; BSR set to: 0
  5731  00188E  C0E6  F020         	movff	Battery_Filter@x,___wmul@multiplier
  5732  001892  C0E7  F021         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  5733  001896  0E00               	movlw	0
  5734  001898  6E23               	movwf	___wmul@multiplicand+1,c
  5735  00189A  0E03               	movlw	3
  5736  00189C  6E22               	movwf	___wmul@multiplicand,c
  5737  00189E  EC13  F013         	call	___wmul	;wreg free
  5738  0018A2  0101               	movlb	1	; () banked
  5739  0018A4  0E00               	movlw	low _Battery_Volt
  5740  0018A6  2420               	addwf	?___wmul,w,c
  5741  0018A8  6ED9               	movwf	fsr2l,c
  5742  0018AA  0101               	movlb	1	; () banked
  5743  0018AC  0E01               	movlw	high _Battery_Volt
  5744  0018AE  2021               	addwfc	?___wmul+1,w,c
  5745  0018B0  6EDA               	movwf	fsr2h,c
  5746  0018B2  0E48               	movlw	72
  5747  0018B4  0100               	movlb	0	; () banked
  5748  0018B6  6FD1               	movwf	___ftmul@f2& (0+255),b
  5749  0018B8  0E61               	movlw	97
  5750  0018BA  0100               	movlb	0	; () banked
  5751  0018BC  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  5752  0018BE  0E3F               	movlw	63
  5753  0018C0  0100               	movlb	0	; () banked
  5754  0018C2  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  5755  0018C4  C0E6  F020         	movff	Battery_Filter@x,___wmul@multiplier
  5756  0018C8  C0E7  F021         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  5757  0018CC  0E00               	movlw	0
  5758  0018CE  6E23               	movwf	___wmul@multiplicand+1,c
  5759  0018D0  0E03               	movlw	3
  5760  0018D2  6E22               	movwf	___wmul@multiplicand,c
  5761  0018D4  EC13  F013         	call	___wmul	;wreg free
  5762  0018D8  0101               	movlb	1	; () banked
  5763  0018DA  0E6F               	movlw	low _TempBattery_Volt
  5764  0018DC  2420               	addwf	?___wmul,w,c
  5765  0018DE  6EE1               	movwf	fsr1l,c
  5766  0018E0  0101               	movlb	1	; () banked
  5767  0018E2  0E01               	movlw	high _TempBattery_Volt
  5768  0018E4  2021               	addwfc	?___wmul+1,w,c
  5769  0018E6  6EE2               	movwf	fsr1h,c
  5770  0018E8  0100               	movlb	0	; () banked
  5771  0018EA  CFE6 F0CE          	movff	postinc1,___ftmul@f1
  5772  0018EE  0100               	movlb	0	; () banked
  5773  0018F0  CFE6 F0CF          	movff	postinc1,___ftmul@f1+1
  5774  0018F4  0100               	movlb	0	; () banked
  5775  0018F6  CFE5 F0D0          	movff	postdec1,___ftmul@f1+2
  5776  0018FA  ECD2  F00A         	call	___ftmul	;wreg free
  5777  0018FE  C0CE  F0DA         	movff	?___ftmul,___ftadd@f1
  5778  001902  C0CF  F0DB         	movff	?___ftmul+1,___ftadd@f1+1
  5779  001906  C0D0  F0DC         	movff	?___ftmul+2,___ftadd@f1+2
  5780  00190A  0EC3               	movlw	195
  5781  00190C  0100               	movlb	0	; () banked
  5782  00190E  6FD1               	movwf	___ftmul@f2& (0+255),b
  5783  001910  0EF5               	movlw	245
  5784  001912  0100               	movlb	0	; () banked
  5785  001914  6FD2               	movwf	(___ftmul@f2+1)& (0+255),b
  5786  001916  0E3D               	movlw	61
  5787  001918  0100               	movlb	0	; () banked
  5788  00191A  6FD3               	movwf	(___ftmul@f2+2)& (0+255),b
  5789  00191C  0E00               	movlw	0
  5790  00191E  6E23               	movwf	___wmul@multiplicand+1,c
  5791  001920  0E03               	movlw	3
  5792  001922  6E22               	movwf	___wmul@multiplicand,c
  5793  001924  C0E6  F020         	movff	Battery_Filter@x,___wmul@multiplier
  5794  001928  C0E7  F021         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  5795  00192C  EC13  F013         	call	___wmul	;wreg free
  5796  001930  0101               	movlb	1	; () banked
  5797  001932  0E18               	movlw	low _PrevBattery_Volt
  5798  001934  2420               	addwf	?___wmul,w,c
  5799  001936  6EE1               	movwf	fsr1l,c
  5800  001938  0101               	movlb	1	; () banked
  5801  00193A  0E01               	movlw	high _PrevBattery_Volt
  5802  00193C  2021               	addwfc	?___wmul+1,w,c
  5803  00193E  6EE2               	movwf	fsr1h,c
  5804  001940  0100               	movlb	0	; () banked
  5805  001942  CFE6 F0CE          	movff	postinc1,___ftmul@f1
  5806  001946  0100               	movlb	0	; () banked
  5807  001948  CFE6 F0CF          	movff	postinc1,___ftmul@f1+1
  5808  00194C  0100               	movlb	0	; () banked
  5809  00194E  CFE5 F0D0          	movff	postdec1,___ftmul@f1+2
  5810  001952  ECD2  F00A         	call	___ftmul	;wreg free
  5811  001956  C0CE  F0DD         	movff	?___ftmul,___ftadd@f2
  5812  00195A  C0CF  F0DE         	movff	?___ftmul+1,___ftadd@f2+1
  5813  00195E  C0D0  F0DF         	movff	?___ftmul+2,___ftadd@f2+2
  5814  001962  ECB1  F005         	call	___ftadd	;wreg free
  5815  001966  C0DA  FFDE         	movff	?___ftadd,postinc2
  5816  00196A  C0DB  FFDE         	movff	?___ftadd+1,postinc2
  5817  00196E  C0DC  FFDD         	movff	?___ftadd+2,postdec2
  5818  001972  52DD               	movf	postdec2,f,c
  5819                           
  5820                           ;Battery.c: 39: PrevBattery_Volt[x] = Battery_Volt[x];
  5821  001974  C0E6  F020         	movff	Battery_Filter@x,___wmul@multiplier
  5822  001978  C0E7  F021         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  5823  00197C  0E00               	movlw	0
  5824  00197E  6E23               	movwf	___wmul@multiplicand+1,c
  5825  001980  0E03               	movlw	3
  5826  001982  6E22               	movwf	___wmul@multiplicand,c
  5827  001984  EC13  F013         	call	___wmul	;wreg free
  5828  001988  0101               	movlb	1	; () banked
  5829  00198A  0E00               	movlw	low _Battery_Volt
  5830  00198C  2420               	addwf	?___wmul,w,c
  5831  00198E  6ED9               	movwf	fsr2l,c
  5832  001990  0101               	movlb	1	; () banked
  5833  001992  0E01               	movlw	high _Battery_Volt
  5834  001994  2021               	addwfc	?___wmul+1,w,c
  5835  001996  6EDA               	movwf	fsr2h,c
  5836  001998  C0E6  F020         	movff	Battery_Filter@x,___wmul@multiplier
  5837  00199C  C0E7  F021         	movff	Battery_Filter@x+1,___wmul@multiplier+1
  5838  0019A0  0E00               	movlw	0
  5839  0019A2  6E23               	movwf	___wmul@multiplicand+1,c
  5840  0019A4  0E03               	movlw	3
  5841  0019A6  6E22               	movwf	___wmul@multiplicand,c
  5842  0019A8  EC13  F013         	call	___wmul	;wreg free
  5843  0019AC  0101               	movlb	1	; () banked
  5844  0019AE  0E18               	movlw	low _PrevBattery_Volt
  5845  0019B0  2420               	addwf	?___wmul,w,c
  5846  0019B2  6EE1               	movwf	fsr1l,c
  5847  0019B4  0101               	movlb	1	; () banked
  5848  0019B6  0E01               	movlw	high _PrevBattery_Volt
  5849  0019B8  2021               	addwfc	?___wmul+1,w,c
  5850  0019BA  6EE2               	movwf	fsr1h,c
  5851  0019BC  CFDE FFE6          	movff	postinc2,postinc1
  5852  0019C0  CFDE FFE6          	movff	postinc2,postinc1
  5853  0019C4  CFDE FFE5          	movff	postinc2,postdec1
  5854  0019C8  52E5               	movf	postdec1,f,c
  5855                           
  5856                           ; BSR set to: 1
  5857  0019CA  0100               	movlb	0	; () banked
  5858  0019CC  4BE6               	infsnz	Battery_Filter@x& (0+255),f,b
  5859  0019CE  2BE7               	incf	(Battery_Filter@x+1)& (0+255),f,b
  5860  0019D0  D755               	goto	L13
  5861  0019D2                     __end_of_Battery_Filter:
  5862                           	opt stack 0
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           intcon2	equ	0xFF1
  5871                           postinc0	equ	0xFEE
  5872                           wreg	equ	0xFE8
  5873                           postinc1	equ	0xFE6
  5874                           postdec1	equ	0xFE5
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function ___wmul *****************
  5885 ;; Defined at:
  5886 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  multiplier      2   31[COMRAM] unsigned int 
  5889 ;;  multiplicand    2   33[COMRAM] unsigned int 
  5890 ;; Auto vars:     Size  Location     Type
  5891 ;;  product         2   35[COMRAM] unsigned int 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  2   31[COMRAM] unsigned int 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0, prodl, prodh
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5901 ;;      Params:         4       0       0       0       0       0       0
  5902 ;;      Locals:         2       0       0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0
  5904 ;;      Totals:         6       0       0       0       0       0       0
  5905 ;;Total ram usage:        6 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; Hardware stack levels required when called:    4
  5908 ;; This function calls:
  5909 ;;		Nothing
  5910 ;; This function is called by:
  5911 ;;		_Battery_Fault
  5912 ;;		_Battery_Filter
  5913 ;;		_Battery_Convert
  5914 ;;		_Battery_Get
  5915 ;;		_Temp_Fault
  5916 ;;		_Temp_Filter
  5917 ;;		_Temp_Convert
  5918 ;;		_Current_Fault
  5919 ;;		_Current_Filter
  5920 ;;		_Current_Convert
  5921 ;;		_eval_poly
  5922 ;;		_Tempeture_Get
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text33
  5927  002626                     __ptext33:
  5928                           	opt stack 0
  5929  002626                     ___wmul:
  5930                           	opt stack 25
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;incstack = 0
  5934  002626  5020               	movf	___wmul@multiplier,w,c
  5935  002628  0222               	mulwf	___wmul@multiplicand,c
  5936  00262A  CFF3 F024          	movff	prodl,___wmul@product
  5937  00262E  CFF4 F025          	movff	prodh,___wmul@product+1
  5938  002632  5020               	movf	___wmul@multiplier,w,c
  5939  002634  0223               	mulwf	___wmul@multiplicand+1,c
  5940  002636  50F3               	movf	prodl,w,c
  5941  002638  2625               	addwf	___wmul@product+1,f,c
  5942  00263A  5021               	movf	___wmul@multiplier+1,w,c
  5943  00263C  0222               	mulwf	___wmul@multiplicand,c
  5944  00263E  50F3               	movf	prodl,w,c
  5945  002640  2625               	addwf	___wmul@product+1,f,c
  5946  002642  C024  F020         	movff	___wmul@product,?___wmul
  5947  002646  C025  F021         	movff	___wmul@product+1,?___wmul+1
  5948  00264A  0012               	return	
  5949  00264C                     __end_of___wmul:
  5950                           	opt stack 0
  5951                           tblptru	equ	0xFF8
  5952                           tblptrh	equ	0xFF7
  5953                           tblptrl	equ	0xFF6
  5954                           tablat	equ	0xFF5
  5955                           prodh	equ	0xFF4
  5956                           prodl	equ	0xFF3
  5957                           intcon	equ	0xFF2
  5958                           intcon2	equ	0xFF1
  5959                           postinc0	equ	0xFEE
  5960                           wreg	equ	0xFE8
  5961                           postinc1	equ	0xFE6
  5962                           postdec1	equ	0xFE5
  5963                           fsr1h	equ	0xFE2
  5964                           fsr1l	equ	0xFE1
  5965                           indf2	equ	0xFDF
  5966                           postinc2	equ	0xFDE
  5967                           postdec2	equ	0xFDD
  5968                           fsr2h	equ	0xFDA
  5969                           fsr2l	equ	0xFD9
  5970                           status	equ	0xFD8
  5971                           
  5972 ;; *************** function ___ftmul *****************
  5973 ;; Defined at:
  5974 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftmul.c"
  5975 ;; Parameters:    Size  Location     Type
  5976 ;;  f1              3    6[BANK0 ] float 
  5977 ;;  f2              3    9[BANK0 ] float 
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  f3_as_produc    3   13[BANK0 ] unsigned um
  5980 ;;  sign            1   17[BANK0 ] unsigned char 
  5981 ;;  cntr            1   16[BANK0 ] unsigned char 
  5982 ;;  exp             1   12[BANK0 ] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  3    6[BANK0 ] float 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5992 ;;      Params:         0       6       0       0       0       0       0
  5993 ;;      Locals:         0       6       0       0       0       0       0
  5994 ;;      Temps:          3       0       0       0       0       0       0
  5995 ;;      Totals:         3      12       0       0       0       0       0
  5996 ;;Total ram usage:       15 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    5
  5999 ;; This function calls:
  6000 ;;		___ftpack
  6001 ;; This function is called by:
  6002 ;;		_Battery_Filter
  6003 ;;		_Battery_Convert
  6004 ;;		_Temp_Filter
  6005 ;;		_Temp_Convert
  6006 ;;		_Current_Filter
  6007 ;;		_log
  6008 ;;		_eval_poly
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           	psect	text34
  6013  0015A4                     __ptext34:
  6014                           	opt stack 0
  6015  0015A4                     ___ftmul:
  6016                           	opt stack 22
  6017                           
  6018                           ;incstack = 0
  6019  0015A4  0100               	movlb	0	; () banked
  6020  0015A6  C0D0  F033         	movff	___ftmul@f1+2,??___ftmul
  6021  0015AA  6A34               	clrf	(??___ftmul+1)& (0+255),c
  6022  0015AC  6A35               	clrf	(??___ftmul+2)& (0+255),c
  6023  0015AE  0100               	movlb	0	; () banked
  6024  0015B0  35CF               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6025  0015B2  3633               	rlcf	??___ftmul& (0+255),f,c
  6026  0015B4  E301               	bnc	u3081
  6027  0015B6  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  6028  0015B8                     u3081:
  6029  0015B8  5033               	movf	??___ftmul,w,c
  6030  0015BA  0100               	movlb	0	; () banked
  6031  0015BC  6FD4               	movwf	___ftmul@exp& (0+255),b
  6032  0015BE  0100               	movlb	0	; () banked
  6033  0015C0  67D4               	tstfsz	___ftmul@exp& (0+255),b
  6034  0015C2  D00A               	goto	l3744
  6035                           
  6036                           ; BSR set to: 0
  6037  0015C4  0E00               	movlw	0
  6038  0015C6  0100               	movlb	0	; () banked
  6039  0015C8  6FCE               	movwf	?___ftmul& (0+255),b
  6040  0015CA  0E00               	movlw	0
  6041  0015CC  0100               	movlb	0	; () banked
  6042  0015CE  6FCF               	movwf	(?___ftmul+1)& (0+255),b
  6043  0015D0  0E00               	movlw	0
  6044  0015D2  0100               	movlb	0	; () banked
  6045  0015D4  6FD0               	movwf	(?___ftmul+2)& (0+255),b
  6046  0015D6  0012               	return	
  6047  0015D8                     l3744:
  6048                           
  6049                           ; BSR set to: 0
  6050  0015D8  0100               	movlb	0	; () banked
  6051  0015DA  C0D3  F033         	movff	___ftmul@f2+2,??___ftmul
  6052  0015DE  6A34               	clrf	(??___ftmul+1)& (0+255),c
  6053  0015E0  6A35               	clrf	(??___ftmul+2)& (0+255),c
  6054  0015E2  0100               	movlb	0	; () banked
  6055  0015E4  35D2               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6056  0015E6  3633               	rlcf	??___ftmul& (0+255),f,c
  6057  0015E8  E301               	bnc	u3101
  6058  0015EA  8034               	bsf	(??___ftmul+1)& (0+255),0,c
  6059  0015EC                     u3101:
  6060  0015EC  5033               	movf	??___ftmul,w,c
  6061  0015EE  0100               	movlb	0	; () banked
  6062  0015F0  6FD9               	movwf	___ftmul@sign& (0+255),b
  6063  0015F2  0100               	movlb	0	; () banked
  6064  0015F4  67D9               	tstfsz	___ftmul@sign& (0+255),b
  6065  0015F6  D00A               	goto	l3750
  6066                           
  6067                           ; BSR set to: 0
  6068  0015F8  0E00               	movlw	0
  6069  0015FA  0100               	movlb	0	; () banked
  6070  0015FC  6FCE               	movwf	?___ftmul& (0+255),b
  6071  0015FE  0E00               	movlw	0
  6072  001600  0100               	movlb	0	; () banked
  6073  001602  6FCF               	movwf	(?___ftmul+1)& (0+255),b
  6074  001604  0E00               	movlw	0
  6075  001606  0100               	movlb	0	; () banked
  6076  001608  6FD0               	movwf	(?___ftmul+2)& (0+255),b
  6077  00160A  0012               	return	
  6078  00160C                     l3750:
  6079                           
  6080                           ; BSR set to: 0
  6081  00160C  0100               	movlb	0	; () banked
  6082  00160E  51D9               	movf	___ftmul@sign& (0+255),w,b
  6083  001610  0F7B               	addlw	123
  6084  001612  0100               	movlb	0	; () banked
  6085  001614  27D4               	addwf	___ftmul@exp& (0+255),f,b
  6086                           
  6087                           ; BSR set to: 0
  6088  001616  C0D0  F0D9         	movff	___ftmul@f1+2,___ftmul@sign
  6089  00161A  0100               	movlb	0	; () banked
  6090  00161C  51D3               	movf	(___ftmul@f2+2)& (0+255),w,b
  6091  00161E  0100               	movlb	0	; () banked
  6092  001620  1BD9               	xorwf	___ftmul@sign& (0+255),f,b
  6093  001622  0E80               	movlw	128
  6094  001624  0100               	movlb	0	; () banked
  6095  001626  17D9               	andwf	___ftmul@sign& (0+255),f,b
  6096                           
  6097                           ; BSR set to: 0
  6098  001628  0100               	movlb	0	; () banked
  6099  00162A  8FCF               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6100                           
  6101                           ; BSR set to: 0
  6102  00162C  0100               	movlb	0	; () banked
  6103  00162E  8FD2               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6104                           
  6105                           ; BSR set to: 0
  6106  001630  0EFF               	movlw	255
  6107  001632  0100               	movlb	0	; () banked
  6108  001634  17D1               	andwf	___ftmul@f2& (0+255),f,b
  6109  001636  0EFF               	movlw	255
  6110  001638  0100               	movlb	0	; () banked
  6111  00163A  17D2               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6112  00163C  0E00               	movlw	0
  6113  00163E  0100               	movlb	0	; () banked
  6114  001640  17D3               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6115                           
  6116                           ; BSR set to: 0
  6117  001642  0E00               	movlw	0
  6118  001644  0100               	movlb	0	; () banked
  6119  001646  6FD5               	movwf	___ftmul@f3_as_product& (0+255),b
  6120  001648  0E00               	movlw	0
  6121  00164A  0100               	movlb	0	; () banked
  6122  00164C  6FD6               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6123  00164E  0E00               	movlw	0
  6124  001650  0100               	movlb	0	; () banked
  6125  001652  6FD7               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6126                           
  6127                           ; BSR set to: 0
  6128  001654  0E07               	movlw	7
  6129  001656  0100               	movlb	0	; () banked
  6130  001658  6FD8               	movwf	___ftmul@cntr& (0+255),b
  6131  00165A                     l3764:
  6132                           
  6133                           ; BSR set to: 0
  6134  00165A  0100               	movlb	0	; () banked
  6135  00165C  A1CE               	btfss	___ftmul@f1& (0+255),0,b
  6136  00165E  D00C               	goto	l3768
  6137                           
  6138                           ; BSR set to: 0
  6139  001660  0100               	movlb	0	; () banked
  6140  001662  51D1               	movf	___ftmul@f2& (0+255),w,b
  6141  001664  0100               	movlb	0	; () banked
  6142  001666  27D5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6143  001668  0100               	movlb	0	; () banked
  6144  00166A  51D2               	movf	(___ftmul@f2+1)& (0+255),w,b
  6145  00166C  0100               	movlb	0	; () banked
  6146  00166E  23D6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6147  001670  0100               	movlb	0	; () banked
  6148  001672  51D3               	movf	(___ftmul@f2+2)& (0+255),w,b
  6149  001674  0100               	movlb	0	; () banked
  6150  001676  23D7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6151  001678                     l3768:
  6152                           
  6153                           ; BSR set to: 0
  6154  001678  0100               	movlb	0	; () banked
  6155  00167A  90D8               	bcf	status,0,c
  6156  00167C  0100               	movlb	0	; () banked
  6157  00167E  33D0               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6158  001680  0100               	movlb	0	; () banked
  6159  001682  33CF               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6160  001684  0100               	movlb	0	; () banked
  6161  001686  33CE               	rrcf	___ftmul@f1& (0+255),f,b
  6162  001688  0100               	movlb	0	; () banked
  6163  00168A  90D8               	bcf	status,0,c
  6164  00168C  0100               	movlb	0	; () banked
  6165  00168E  37D1               	rlcf	___ftmul@f2& (0+255),f,b
  6166  001690  0100               	movlb	0	; () banked
  6167  001692  37D2               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6168  001694  0100               	movlb	0	; () banked
  6169  001696  37D3               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6170                           
  6171                           ; BSR set to: 0
  6172  001698  0100               	movlb	0	; () banked
  6173  00169A  2FD8               	decfsz	___ftmul@cntr& (0+255),f,b
  6174  00169C  D7DE               	goto	l3764
  6175                           
  6176                           ; BSR set to: 0
  6177                           
  6178                           ; BSR set to: 0
  6179  00169E  0E09               	movlw	9
  6180  0016A0  0100               	movlb	0	; () banked
  6181  0016A2  6FD8               	movwf	___ftmul@cntr& (0+255),b
  6182  0016A4                     l3774:
  6183                           
  6184                           ; BSR set to: 0
  6185  0016A4  0100               	movlb	0	; () banked
  6186  0016A6  A1CE               	btfss	___ftmul@f1& (0+255),0,b
  6187  0016A8  D00C               	goto	l3778
  6188                           
  6189                           ; BSR set to: 0
  6190  0016AA  0100               	movlb	0	; () banked
  6191  0016AC  51D1               	movf	___ftmul@f2& (0+255),w,b
  6192  0016AE  0100               	movlb	0	; () banked
  6193  0016B0  27D5               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6194  0016B2  0100               	movlb	0	; () banked
  6195  0016B4  51D2               	movf	(___ftmul@f2+1)& (0+255),w,b
  6196  0016B6  0100               	movlb	0	; () banked
  6197  0016B8  23D6               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6198  0016BA  0100               	movlb	0	; () banked
  6199  0016BC  51D3               	movf	(___ftmul@f2+2)& (0+255),w,b
  6200  0016BE  0100               	movlb	0	; () banked
  6201  0016C0  23D7               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6202  0016C2                     l3778:
  6203                           
  6204                           ; BSR set to: 0
  6205  0016C2  0100               	movlb	0	; () banked
  6206  0016C4  90D8               	bcf	status,0,c
  6207  0016C6  0100               	movlb	0	; () banked
  6208  0016C8  33D0               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6209  0016CA  0100               	movlb	0	; () banked
  6210  0016CC  33CF               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6211  0016CE  0100               	movlb	0	; () banked
  6212  0016D0  33CE               	rrcf	___ftmul@f1& (0+255),f,b
  6213  0016D2  0100               	movlb	0	; () banked
  6214  0016D4  90D8               	bcf	status,0,c
  6215  0016D6  0100               	movlb	0	; () banked
  6216  0016D8  33D7               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6217  0016DA  0100               	movlb	0	; () banked
  6218  0016DC  33D6               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6219  0016DE  0100               	movlb	0	; () banked
  6220  0016E0  33D5               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6221                           
  6222                           ; BSR set to: 0
  6223  0016E2  0100               	movlb	0	; () banked
  6224  0016E4  2FD8               	decfsz	___ftmul@cntr& (0+255),f,b
  6225  0016E6  D7DE               	goto	l3774
  6226                           
  6227                           ; BSR set to: 0
  6228                           
  6229                           ; BSR set to: 0
  6230  0016E8  C0D5  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
  6231  0016EC  C0D6  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6232  0016F0  C0D7  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6233  0016F4  C0D4  F01B         	movff	___ftmul@exp,___ftpack@exp
  6234  0016F8  C0D9  F01C         	movff	___ftmul@sign,___ftpack@sign
  6235  0016FC  ECCE  F00F         	call	___ftpack	;wreg free
  6236  001700  C018  F0CE         	movff	?___ftpack,?___ftmul
  6237  001704  C019  F0CF         	movff	?___ftpack+1,?___ftmul+1
  6238  001708  C01A  F0D0         	movff	?___ftpack+2,?___ftmul+2
  6239  00170C  0012               	return	
  6240  00170E                     __end_of___ftmul:
  6241                           	opt stack 0
  6242                           tblptru	equ	0xFF8
  6243                           tblptrh	equ	0xFF7
  6244                           tblptrl	equ	0xFF6
  6245                           tablat	equ	0xFF5
  6246                           prodh	equ	0xFF4
  6247                           prodl	equ	0xFF3
  6248                           intcon	equ	0xFF2
  6249                           intcon2	equ	0xFF1
  6250                           postinc0	equ	0xFEE
  6251                           wreg	equ	0xFE8
  6252                           postinc1	equ	0xFE6
  6253                           postdec1	equ	0xFE5
  6254                           fsr1h	equ	0xFE2
  6255                           fsr1l	equ	0xFE1
  6256                           indf2	equ	0xFDF
  6257                           postinc2	equ	0xFDE
  6258                           postdec2	equ	0xFDD
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           
  6263 ;; *************** function ___ftadd *****************
  6264 ;; Defined at:
  6265 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftadd.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  f1              3   18[BANK0 ] float 
  6268 ;;  f2              3   21[BANK0 ] float 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  exp1            1   29[BANK0 ] unsigned char 
  6271 ;;  exp2            1   28[BANK0 ] unsigned char 
  6272 ;;  sign            1   27[BANK0 ] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  3   18[BANK0 ] float 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6282 ;;      Params:         0       6       0       0       0       0       0
  6283 ;;      Locals:         0       3       0       0       0       0       0
  6284 ;;      Temps:          0       3       0       0       0       0       0
  6285 ;;      Totals:         0      12       0       0       0       0       0
  6286 ;;Total ram usage:       12 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    5
  6289 ;; This function calls:
  6290 ;;		___ftpack
  6291 ;; This function is called by:
  6292 ;;		_Battery_Filter
  6293 ;;		_Temp_Filter
  6294 ;;		_Temp_Convert
  6295 ;;		_Current_Filter
  6296 ;;		___ftsub
  6297 ;;		_log
  6298 ;;		_eval_poly
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text35
  6303  000B62                     __ptext35:
  6304                           	opt stack 0
  6305  000B62                     ___ftadd:
  6306                           	opt stack 22
  6307                           
  6308                           ;incstack = 0
  6309  000B62  0100               	movlb	0	; () banked
  6310  000B64  C0DC  F0E0         	movff	___ftadd@f1+2,??___ftadd
  6311  000B68  0100               	movlb	0	; () banked
  6312  000B6A  6BE1               	clrf	(??___ftadd+1)& (0+255),b
  6313  000B6C  6BE2               	clrf	(??___ftadd+2)& (0+255),b
  6314  000B6E  0100               	movlb	0	; () banked
  6315  000B70  35DB               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  6316  000B72  0100               	movlb	0	; () banked
  6317  000B74  37E0               	rlcf	??___ftadd& (0+255),f,b
  6318  000B76  E301               	bnc	u2871
  6319  000B78  81E1               	bsf	(??___ftadd+1)& (0+255),0,b
  6320  000B7A                     u2871:
  6321  000B7A  0100               	movlb	0	; () banked
  6322  000B7C  51E0               	movf	??___ftadd& (0+255),w,b
  6323  000B7E  0100               	movlb	0	; () banked
  6324  000B80  6FE5               	movwf	___ftadd@exp1& (0+255),b
  6325  000B82  0100               	movlb	0	; () banked
  6326  000B84  C0DF  F0E0         	movff	___ftadd@f2+2,??___ftadd
  6327  000B88  0100               	movlb	0	; () banked
  6328  000B8A  6BE1               	clrf	(??___ftadd+1)& (0+255),b
  6329  000B8C  6BE2               	clrf	(??___ftadd+2)& (0+255),b
  6330  000B8E  0100               	movlb	0	; () banked
  6331  000B90  35DE               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  6332  000B92  0100               	movlb	0	; () banked
  6333  000B94  37E0               	rlcf	??___ftadd& (0+255),f,b
  6334  000B96  E301               	bnc	u2881
  6335  000B98  81E1               	bsf	(??___ftadd+1)& (0+255),0,b
  6336  000B9A                     u2881:
  6337  000B9A  0100               	movlb	0	; () banked
  6338  000B9C  51E0               	movf	??___ftadd& (0+255),w,b
  6339  000B9E  0100               	movlb	0	; () banked
  6340  000BA0  6FE4               	movwf	___ftadd@exp2& (0+255),b
  6341                           
  6342                           ; BSR set to: 0
  6343  000BA2  0100               	movlb	0	; () banked
  6344  000BA4  51E5               	movf	___ftadd@exp1& (0+255),w,b
  6345  000BA6  B4D8               	btfsc	status,2,c
  6346  000BA8  D012               	goto	l1024
  6347                           
  6348                           ; BSR set to: 0
  6349  000BAA  0100               	movlb	0	; () banked
  6350  000BAC  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6351  000BAE  0100               	movlb	0	; () banked
  6352  000BB0  5DE5               	subwf	___ftadd@exp1& (0+255),w,b
  6353  000BB2  B0D8               	btfsc	status,0,c
  6354  000BB4  D013               	goto	l3676
  6355                           
  6356                           ; BSR set to: 0
  6357  000BB6  0100               	movlb	0	; () banked
  6358  000BB8  51E5               	movf	___ftadd@exp1& (0+255),w,b
  6359  000BBA  0800               	sublw	0
  6360  000BBC  0100               	movlb	0	; () banked
  6361  000BBE  25E4               	addwf	___ftadd@exp2& (0+255),w,b
  6362  000BC0  0100               	movlb	0	; () banked
  6363  000BC2  6FE0               	movwf	??___ftadd& (0+255),b
  6364  000BC4  0E19               	movlw	25
  6365  000BC6  0100               	movlb	0	; () banked
  6366  000BC8  5DE0               	subwf	??___ftadd& (0+255),w,b
  6367  000BCA  A0D8               	btfss	status,0,c
  6368  000BCC  D007               	goto	l3676
  6369  000BCE                     l1024:
  6370                           
  6371                           ; BSR set to: 0
  6372  000BCE  C0DD  F0DA         	movff	___ftadd@f2,?___ftadd
  6373  000BD2  C0DE  F0DB         	movff	___ftadd@f2+1,?___ftadd+1
  6374  000BD6  C0DF  F0DC         	movff	___ftadd@f2+2,?___ftadd+2
  6375  000BDA  0012               	return	
  6376  000BDC                     l3676:
  6377                           
  6378                           ; BSR set to: 0
  6379  000BDC  0100               	movlb	0	; () banked
  6380  000BDE  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6381  000BE0  B4D8               	btfsc	status,2,c
  6382  000BE2  D012               	goto	l1028
  6383                           
  6384                           ; BSR set to: 0
  6385  000BE4  0100               	movlb	0	; () banked
  6386  000BE6  51E5               	movf	___ftadd@exp1& (0+255),w,b
  6387  000BE8  0100               	movlb	0	; () banked
  6388  000BEA  5DE4               	subwf	___ftadd@exp2& (0+255),w,b
  6389  000BEC  B0D8               	btfsc	status,0,c
  6390  000BEE  D013               	goto	l3682
  6391                           
  6392                           ; BSR set to: 0
  6393  000BF0  0100               	movlb	0	; () banked
  6394  000BF2  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6395  000BF4  0800               	sublw	0
  6396  000BF6  0100               	movlb	0	; () banked
  6397  000BF8  25E5               	addwf	___ftadd@exp1& (0+255),w,b
  6398  000BFA  0100               	movlb	0	; () banked
  6399  000BFC  6FE0               	movwf	??___ftadd& (0+255),b
  6400  000BFE  0E19               	movlw	25
  6401  000C00  0100               	movlb	0	; () banked
  6402  000C02  5DE0               	subwf	??___ftadd& (0+255),w,b
  6403  000C04  A0D8               	btfss	status,0,c
  6404  000C06  D007               	goto	l3682
  6405  000C08                     l1028:
  6406                           
  6407                           ; BSR set to: 0
  6408  000C08  C0DA  F0DA         	movff	___ftadd@f1,?___ftadd
  6409  000C0C  C0DB  F0DB         	movff	___ftadd@f1+1,?___ftadd+1
  6410  000C10  C0DC  F0DC         	movff	___ftadd@f1+2,?___ftadd+2
  6411  000C14  0012               	return	
  6412  000C16                     l3682:
  6413                           
  6414                           ; BSR set to: 0
  6415  000C16  0E06               	movlw	6
  6416  000C18  0100               	movlb	0	; () banked
  6417  000C1A  6FE3               	movwf	___ftadd@sign& (0+255),b
  6418                           
  6419                           ; BSR set to: 0
  6420  000C1C  0100               	movlb	0	; () banked
  6421  000C1E  AFDC               	btfss	(___ftadd@f1+2)& (0+255),7,b
  6422  000C20  D002               	goto	l3688
  6423                           
  6424                           ; BSR set to: 0
  6425  000C22  0100               	movlb	0	; () banked
  6426  000C24  8FE3               	bsf	___ftadd@sign& (0+255),7,b
  6427  000C26                     l3688:
  6428                           
  6429                           ; BSR set to: 0
  6430  000C26  0100               	movlb	0	; () banked
  6431  000C28  AFDF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6432  000C2A  D002               	goto	l1030
  6433                           
  6434                           ; BSR set to: 0
  6435  000C2C  0100               	movlb	0	; () banked
  6436  000C2E  8DE3               	bsf	___ftadd@sign& (0+255),6,b
  6437  000C30                     l1030:
  6438                           
  6439                           ; BSR set to: 0
  6440  000C30  0100               	movlb	0	; () banked
  6441  000C32  8FDB               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6442                           
  6443                           ; BSR set to: 0
  6444  000C34  0EFF               	movlw	255
  6445  000C36  0100               	movlb	0	; () banked
  6446  000C38  17DA               	andwf	___ftadd@f1& (0+255),f,b
  6447  000C3A  0EFF               	movlw	255
  6448  000C3C  0100               	movlb	0	; () banked
  6449  000C3E  17DB               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6450  000C40  0E00               	movlw	0
  6451  000C42  0100               	movlb	0	; () banked
  6452  000C44  17DC               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6453  000C46  0100               	movlb	0	; () banked
  6454  000C48  8FDE               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6455                           
  6456                           ; BSR set to: 0
  6457  000C4A  0EFF               	movlw	255
  6458  000C4C  0100               	movlb	0	; () banked
  6459  000C4E  17DD               	andwf	___ftadd@f2& (0+255),f,b
  6460  000C50  0EFF               	movlw	255
  6461  000C52  0100               	movlb	0	; () banked
  6462  000C54  17DE               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6463  000C56  0E00               	movlw	0
  6464  000C58  0100               	movlb	0	; () banked
  6465  000C5A  17DF               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6466                           
  6467                           ; BSR set to: 0
  6468  000C5C  0100               	movlb	0	; () banked
  6469  000C5E  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6470  000C60  0100               	movlb	0	; () banked
  6471  000C62  5DE5               	subwf	___ftadd@exp1& (0+255),w,b
  6472  000C64  B0D8               	btfsc	status,0,c
  6473  000C66  D02A               	goto	l3708
  6474  000C68                     l3698:
  6475                           
  6476                           ; BSR set to: 0
  6477  000C68  0100               	movlb	0	; () banked
  6478  000C6A  90D8               	bcf	status,0,c
  6479  000C6C  0100               	movlb	0	; () banked
  6480  000C6E  37DD               	rlcf	___ftadd@f2& (0+255),f,b
  6481  000C70  0100               	movlb	0	; () banked
  6482  000C72  37DE               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6483  000C74  0100               	movlb	0	; () banked
  6484  000C76  37DF               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6485  000C78  0100               	movlb	0	; () banked
  6486  000C7A  07E4               	decf	___ftadd@exp2& (0+255),f,b
  6487                           
  6488                           ; BSR set to: 0
  6489  000C7C  0100               	movlb	0	; () banked
  6490  000C7E  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6491  000C80  0100               	movlb	0	; () banked
  6492  000C82  19E5               	xorwf	___ftadd@exp1& (0+255),w,b
  6493  000C84  B4D8               	btfsc	status,2,c
  6494  000C86  D014               	goto	l3706
  6495                           
  6496                           ; BSR set to: 0
  6497  000C88  0100               	movlb	0	; () banked
  6498  000C8A  07E3               	decf	___ftadd@sign& (0+255),f,b
  6499  000C8C  C0E3  F0E0         	movff	___ftadd@sign,??___ftadd
  6500  000C90  0E07               	movlw	7
  6501  000C92  0100               	movlb	0	; () banked
  6502  000C94  17E0               	andwf	??___ftadd& (0+255),f,b
  6503  000C96  B4D8               	btfsc	status,2,c
  6504  000C98  D00B               	goto	l3706
  6505  000C9A  D7E6               	goto	l3698
  6506  000C9C                     l3704:
  6507                           
  6508                           ; BSR set to: 0
  6509  000C9C  0100               	movlb	0	; () banked
  6510  000C9E  90D8               	bcf	status,0,c
  6511  000CA0  0100               	movlb	0	; () banked
  6512  000CA2  33DC               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6513  000CA4  0100               	movlb	0	; () banked
  6514  000CA6  33DB               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6515  000CA8  0100               	movlb	0	; () banked
  6516  000CAA  33DA               	rrcf	___ftadd@f1& (0+255),f,b
  6517  000CAC  0100               	movlb	0	; () banked
  6518  000CAE  2BE5               	incf	___ftadd@exp1& (0+255),f,b
  6519  000CB0                     l3706:
  6520                           
  6521                           ; BSR set to: 0
  6522  000CB0  0100               	movlb	0	; () banked
  6523  000CB2  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6524  000CB4  0100               	movlb	0	; () banked
  6525  000CB6  63E5               	cpfseq	___ftadd@exp1& (0+255),b
  6526  000CB8  D7F1               	goto	l3704
  6527  000CBA  D02F               	goto	l1039
  6528  000CBC                     l3708:
  6529                           
  6530                           ; BSR set to: 0
  6531  000CBC  0100               	movlb	0	; () banked
  6532  000CBE  51E5               	movf	___ftadd@exp1& (0+255),w,b
  6533  000CC0  0100               	movlb	0	; () banked
  6534  000CC2  5DE4               	subwf	___ftadd@exp2& (0+255),w,b
  6535  000CC4  B0D8               	btfsc	status,0,c
  6536  000CC6  D029               	goto	l1039
  6537  000CC8                     l3710:
  6538                           
  6539                           ; BSR set to: 0
  6540  000CC8  0100               	movlb	0	; () banked
  6541  000CCA  90D8               	bcf	status,0,c
  6542  000CCC  0100               	movlb	0	; () banked
  6543  000CCE  37DA               	rlcf	___ftadd@f1& (0+255),f,b
  6544  000CD0  0100               	movlb	0	; () banked
  6545  000CD2  37DB               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6546  000CD4  0100               	movlb	0	; () banked
  6547  000CD6  37DC               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6548  000CD8  0100               	movlb	0	; () banked
  6549  000CDA  07E5               	decf	___ftadd@exp1& (0+255),f,b
  6550                           
  6551                           ; BSR set to: 0
  6552  000CDC  0100               	movlb	0	; () banked
  6553  000CDE  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6554  000CE0  0100               	movlb	0	; () banked
  6555  000CE2  19E5               	xorwf	___ftadd@exp1& (0+255),w,b
  6556  000CE4  B4D8               	btfsc	status,2,c
  6557  000CE6  D014               	goto	l3718
  6558                           
  6559                           ; BSR set to: 0
  6560  000CE8  0100               	movlb	0	; () banked
  6561  000CEA  07E3               	decf	___ftadd@sign& (0+255),f,b
  6562  000CEC  C0E3  F0E0         	movff	___ftadd@sign,??___ftadd
  6563  000CF0  0E07               	movlw	7
  6564  000CF2  0100               	movlb	0	; () banked
  6565  000CF4  17E0               	andwf	??___ftadd& (0+255),f,b
  6566  000CF6  B4D8               	btfsc	status,2,c
  6567  000CF8  D00B               	goto	l3718
  6568  000CFA  D7E6               	goto	l3710
  6569  000CFC                     l3716:
  6570                           
  6571                           ; BSR set to: 0
  6572  000CFC  0100               	movlb	0	; () banked
  6573  000CFE  90D8               	bcf	status,0,c
  6574  000D00  0100               	movlb	0	; () banked
  6575  000D02  33DF               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6576  000D04  0100               	movlb	0	; () banked
  6577  000D06  33DE               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6578  000D08  0100               	movlb	0	; () banked
  6579  000D0A  33DD               	rrcf	___ftadd@f2& (0+255),f,b
  6580  000D0C  0100               	movlb	0	; () banked
  6581  000D0E  2BE4               	incf	___ftadd@exp2& (0+255),f,b
  6582  000D10                     l3718:
  6583                           
  6584                           ; BSR set to: 0
  6585  000D10  0100               	movlb	0	; () banked
  6586  000D12  51E4               	movf	___ftadd@exp2& (0+255),w,b
  6587  000D14  0100               	movlb	0	; () banked
  6588  000D16  63E5               	cpfseq	___ftadd@exp1& (0+255),b
  6589  000D18  D7F1               	goto	l3716
  6590  000D1A                     l1039:
  6591                           
  6592                           ; BSR set to: 0
  6593  000D1A  0100               	movlb	0	; () banked
  6594  000D1C  AFE3               	btfss	___ftadd@sign& (0+255),7,b
  6595  000D1E  D012               	goto	l1048
  6596                           
  6597                           ; BSR set to: 0
  6598  000D20  0EFF               	movlw	255
  6599  000D22  0100               	movlb	0	; () banked
  6600  000D24  1BDA               	xorwf	___ftadd@f1& (0+255),f,b
  6601  000D26  0EFF               	movlw	255
  6602  000D28  0100               	movlb	0	; () banked
  6603  000D2A  1BDB               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6604  000D2C  0EFF               	movlw	255
  6605  000D2E  0100               	movlb	0	; () banked
  6606  000D30  1BDC               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6607  000D32  0E01               	movlw	1
  6608  000D34  0100               	movlb	0	; () banked
  6609  000D36  27DA               	addwf	___ftadd@f1& (0+255),f,b
  6610  000D38  0E00               	movlw	0
  6611  000D3A  0100               	movlb	0	; () banked
  6612  000D3C  23DB               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6613  000D3E  0E00               	movlw	0
  6614  000D40  0100               	movlb	0	; () banked
  6615  000D42  23DC               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6616  000D44                     l1048:
  6617                           
  6618                           ; BSR set to: 0
  6619  000D44  0100               	movlb	0	; () banked
  6620  000D46  ADE3               	btfss	___ftadd@sign& (0+255),6,b
  6621  000D48  D012               	goto	l3724
  6622                           
  6623                           ; BSR set to: 0
  6624  000D4A  0EFF               	movlw	255
  6625  000D4C  0100               	movlb	0	; () banked
  6626  000D4E  1BDD               	xorwf	___ftadd@f2& (0+255),f,b
  6627  000D50  0EFF               	movlw	255
  6628  000D52  0100               	movlb	0	; () banked
  6629  000D54  1BDE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6630  000D56  0EFF               	movlw	255
  6631  000D58  0100               	movlb	0	; () banked
  6632  000D5A  1BDF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6633  000D5C  0E01               	movlw	1
  6634  000D5E  0100               	movlb	0	; () banked
  6635  000D60  27DD               	addwf	___ftadd@f2& (0+255),f,b
  6636  000D62  0E00               	movlw	0
  6637  000D64  0100               	movlb	0	; () banked
  6638  000D66  23DE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6639  000D68  0E00               	movlw	0
  6640  000D6A  0100               	movlb	0	; () banked
  6641  000D6C  23DF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6642  000D6E                     l3724:
  6643                           
  6644                           ; BSR set to: 0
  6645  000D6E  0E00               	movlw	0
  6646  000D70  0100               	movlb	0	; () banked
  6647  000D72  6FE3               	movwf	___ftadd@sign& (0+255),b
  6648                           
  6649                           ; BSR set to: 0
  6650  000D74  0100               	movlb	0	; () banked
  6651  000D76  51DA               	movf	___ftadd@f1& (0+255),w,b
  6652  000D78  0100               	movlb	0	; () banked
  6653  000D7A  27DD               	addwf	___ftadd@f2& (0+255),f,b
  6654  000D7C  0100               	movlb	0	; () banked
  6655  000D7E  51DB               	movf	(___ftadd@f1+1)& (0+255),w,b
  6656  000D80  0100               	movlb	0	; () banked
  6657  000D82  23DE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6658  000D84  0100               	movlb	0	; () banked
  6659  000D86  51DC               	movf	(___ftadd@f1+2)& (0+255),w,b
  6660  000D88  0100               	movlb	0	; () banked
  6661  000D8A  23DF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6662                           
  6663                           ; BSR set to: 0
  6664  000D8C  0100               	movlb	0	; () banked
  6665  000D8E  AFDF               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6666  000D90  D015               	goto	l3734
  6667                           
  6668                           ; BSR set to: 0
  6669  000D92  0EFF               	movlw	255
  6670  000D94  0100               	movlb	0	; () banked
  6671  000D96  1BDD               	xorwf	___ftadd@f2& (0+255),f,b
  6672  000D98  0EFF               	movlw	255
  6673  000D9A  0100               	movlb	0	; () banked
  6674  000D9C  1BDE               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6675  000D9E  0EFF               	movlw	255
  6676  000DA0  0100               	movlb	0	; () banked
  6677  000DA2  1BDF               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6678  000DA4  0E01               	movlw	1
  6679  000DA6  0100               	movlb	0	; () banked
  6680  000DA8  27DD               	addwf	___ftadd@f2& (0+255),f,b
  6681  000DAA  0E00               	movlw	0
  6682  000DAC  0100               	movlb	0	; () banked
  6683  000DAE  23DE               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6684  000DB0  0E00               	movlw	0
  6685  000DB2  0100               	movlb	0	; () banked
  6686  000DB4  23DF               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6687                           
  6688                           ; BSR set to: 0
  6689  000DB6  0E01               	movlw	1
  6690  000DB8  0100               	movlb	0	; () banked
  6691  000DBA  6FE3               	movwf	___ftadd@sign& (0+255),b
  6692  000DBC                     l3734:
  6693                           
  6694                           ; BSR set to: 0
  6695  000DBC  C0DD  F018         	movff	___ftadd@f2,___ftpack@arg
  6696  000DC0  C0DE  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
  6697  000DC4  C0DF  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
  6698  000DC8  C0E5  F01B         	movff	___ftadd@exp1,___ftpack@exp
  6699  000DCC  C0E3  F01C         	movff	___ftadd@sign,___ftpack@sign
  6700  000DD0  ECCE  F00F         	call	___ftpack	;wreg free
  6701  000DD4  C018  F0DA         	movff	?___ftpack,?___ftadd
  6702  000DD8  C019  F0DB         	movff	?___ftpack+1,?___ftadd+1
  6703  000DDC  C01A  F0DC         	movff	?___ftpack+2,?___ftadd+2
  6704  000DE0  0012               	return	
  6705  000DE2                     __end_of___ftadd:
  6706                           	opt stack 0
  6707                           tblptru	equ	0xFF8
  6708                           tblptrh	equ	0xFF7
  6709                           tblptrl	equ	0xFF6
  6710                           tablat	equ	0xFF5
  6711                           prodh	equ	0xFF4
  6712                           prodl	equ	0xFF3
  6713                           intcon	equ	0xFF2
  6714                           intcon2	equ	0xFF1
  6715                           postinc0	equ	0xFEE
  6716                           wreg	equ	0xFE8
  6717                           postinc1	equ	0xFE6
  6718                           postdec1	equ	0xFE5
  6719                           fsr1h	equ	0xFE2
  6720                           fsr1l	equ	0xFE1
  6721                           indf2	equ	0xFDF
  6722                           postinc2	equ	0xFDE
  6723                           postdec2	equ	0xFDD
  6724                           fsr2h	equ	0xFDA
  6725                           fsr2l	equ	0xFD9
  6726                           status	equ	0xFD8
  6727                           
  6728 ;; *************** function ___ftpack *****************
  6729 ;; Defined at:
  6730 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\float.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;  arg             3   23[COMRAM] unsigned um
  6733 ;;  exp             1   26[COMRAM] unsigned char 
  6734 ;;  sign            1   27[COMRAM] unsigned char 
  6735 ;; Auto vars:     Size  Location     Type
  6736 ;;		None
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  3   23[COMRAM] float 
  6739 ;; Registers used:
  6740 ;;		wreg, status,2, status,0
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6746 ;;      Params:         5       0       0       0       0       0       0
  6747 ;;      Locals:         0       0       0       0       0       0       0
  6748 ;;      Temps:          3       0       0       0       0       0       0
  6749 ;;      Totals:         8       0       0       0       0       0       0
  6750 ;;Total ram usage:        8 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; Hardware stack levels required when called:    4
  6753 ;; This function calls:
  6754 ;;		Nothing
  6755 ;; This function is called by:
  6756 ;;		___awtoft
  6757 ;;		___ftadd
  6758 ;;		___ftdiv
  6759 ;;		___ftmul
  6760 ;; This function uses a non-reentrant model
  6761 ;;
  6762                           
  6763                           	psect	text36
  6764  001F9C                     __ptext36:
  6765                           	opt stack 0
  6766  001F9C                     ___ftpack:
  6767                           	opt stack 22
  6768                           
  6769                           ;incstack = 0
  6770  001F9C  501B               	movf	___ftpack@exp,w,c
  6771  001F9E  B4D8               	btfsc	status,2,c
  6772  001FA0  D005               	goto	l3632
  6773  001FA2  5018               	movf	___ftpack@arg,w,c
  6774  001FA4  1019               	iorwf	___ftpack@arg+1,w,c
  6775  001FA6  101A               	iorwf	___ftpack@arg+2,w,c
  6776  001FA8  A4D8               	btfss	status,2,c
  6777  001FAA  D00C               	goto	l3638
  6778  001FAC                     l3632:
  6779  001FAC  0E00               	movlw	0
  6780  001FAE  6E18               	movwf	?___ftpack,c
  6781  001FB0  0E00               	movlw	0
  6782  001FB2  6E19               	movwf	?___ftpack+1,c
  6783  001FB4  0E00               	movlw	0
  6784  001FB6  6E1A               	movwf	?___ftpack+2,c
  6785  001FB8  0012               	return	
  6786  001FBA                     l3636:
  6787  001FBA  2A1B               	incf	___ftpack@exp,f,c
  6788  001FBC  90D8               	bcf	status,0,c
  6789  001FBE  321A               	rrcf	___ftpack@arg+2,f,c
  6790  001FC0  3219               	rrcf	___ftpack@arg+1,f,c
  6791  001FC2  3218               	rrcf	___ftpack@arg,f,c
  6792  001FC4                     l3638:
  6793  001FC4  0E00               	movlw	0
  6794  001FC6  1418               	andwf	___ftpack@arg,w,c
  6795  001FC8  6E1D               	movwf	??___ftpack& (0+255),c
  6796  001FCA  0E00               	movlw	0
  6797  001FCC  1419               	andwf	___ftpack@arg+1,w,c
  6798  001FCE  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  6799  001FD0  0EFE               	movlw	254
  6800  001FD2  141A               	andwf	___ftpack@arg+2,w,c
  6801  001FD4  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  6802  001FD6  501D               	movf	??___ftpack,w,c
  6803  001FD8  101E               	iorwf	??___ftpack+1,w,c
  6804  001FDA  101F               	iorwf	??___ftpack+2,w,c
  6805  001FDC  B4D8               	btfsc	status,2,c
  6806  001FDE  D00C               	goto	l3644
  6807  001FE0  D7EC               	goto	l3636
  6808  001FE2                     l3640:
  6809  001FE2  2A1B               	incf	___ftpack@exp,f,c
  6810  001FE4  0E01               	movlw	1
  6811  001FE6  2618               	addwf	___ftpack@arg,f,c
  6812  001FE8  0E00               	movlw	0
  6813  001FEA  2219               	addwfc	___ftpack@arg+1,f,c
  6814  001FEC  0E00               	movlw	0
  6815  001FEE  221A               	addwfc	___ftpack@arg+2,f,c
  6816  001FF0  90D8               	bcf	status,0,c
  6817  001FF2  321A               	rrcf	___ftpack@arg+2,f,c
  6818  001FF4  3219               	rrcf	___ftpack@arg+1,f,c
  6819  001FF6  3218               	rrcf	___ftpack@arg,f,c
  6820  001FF8                     l3644:
  6821  001FF8  0E00               	movlw	0
  6822  001FFA  1418               	andwf	___ftpack@arg,w,c
  6823  001FFC  6E1D               	movwf	??___ftpack& (0+255),c
  6824  001FFE  0E00               	movlw	0
  6825  002000  1419               	andwf	___ftpack@arg+1,w,c
  6826  002002  6E1E               	movwf	(??___ftpack+1)& (0+255),c
  6827  002004  0EFF               	movlw	255
  6828  002006  141A               	andwf	___ftpack@arg+2,w,c
  6829  002008  6E1F               	movwf	(??___ftpack+2)& (0+255),c
  6830  00200A  501D               	movf	??___ftpack,w,c
  6831  00200C  101E               	iorwf	??___ftpack+1,w,c
  6832  00200E  101F               	iorwf	??___ftpack+2,w,c
  6833  002010  B4D8               	btfsc	status,2,c
  6834  002012  D006               	goto	l3648
  6835  002014  D7E6               	goto	l3640
  6836  002016                     l3646:
  6837  002016  061B               	decf	___ftpack@exp,f,c
  6838  002018  90D8               	bcf	status,0,c
  6839  00201A  3618               	rlcf	___ftpack@arg,f,c
  6840  00201C  3619               	rlcf	___ftpack@arg+1,f,c
  6841  00201E  361A               	rlcf	___ftpack@arg+2,f,c
  6842  002020                     l3648:
  6843  002020  AE19               	btfss	___ftpack@arg+1,7,c
  6844  002022  D7F9               	goto	l3646
  6845  002024  A01B               	btfss	___ftpack@exp,0,c
  6846  002026  9E19               	bcf	___ftpack@arg+1,7,c
  6847  002028  90D8               	bcf	status,0,c
  6848  00202A  321B               	rrcf	___ftpack@exp,f,c
  6849  00202C  501B               	movf	___ftpack@exp,w,c
  6850  00202E  121A               	iorwf	___ftpack@arg+2,f,c
  6851  002030  501C               	movf	___ftpack@sign,w,c
  6852  002032  A4D8               	btfss	status,2,c
  6853  002034  8E1A               	bsf	___ftpack@arg+2,7,c
  6854  002036  C018  F018         	movff	___ftpack@arg,?___ftpack
  6855  00203A  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
  6856  00203E  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
  6857  002042  0012               	return	
  6858  002044                     __end_of___ftpack:
  6859                           	opt stack 0
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           intcon	equ	0xFF2
  6867                           intcon2	equ	0xFF1
  6868                           postinc0	equ	0xFEE
  6869                           wreg	equ	0xFE8
  6870                           postinc1	equ	0xFE6
  6871                           postdec1	equ	0xFE5
  6872                           fsr1h	equ	0xFE2
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           postinc2	equ	0xFDE
  6876                           postdec2	equ	0xFDD
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function _INTERRUPT_InterruptManager *****************
  6882 ;; Defined at:
  6883 ;;		line 68 in file "mcc_generated_files/interrupt_manager.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;		None
  6886 ;; Auto vars:     Size  Location     Type
  6887 ;;		None
  6888 ;; Return value:  Size  Location     Type
  6889 ;;		None               void
  6890 ;; Registers used:
  6891 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6892 ;; Tracked objects:
  6893 ;;		On entry : 0/0
  6894 ;;		On exit  : 0/0
  6895 ;;		Unchanged: 0/0
  6896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6897 ;;      Params:         0       0       0       0       0       0       0
  6898 ;;      Locals:         0       0       0       0       0       0       0
  6899 ;;      Temps:         14       0       0       0       0       0       0
  6900 ;;      Totals:        14       0       0       0       0       0       0
  6901 ;;Total ram usage:       14 bytes
  6902 ;; Hardware stack levels used:    1
  6903 ;; Hardware stack levels required when called:    3
  6904 ;; This function calls:
  6905 ;;		_ADC_ISR
  6906 ;;		_EUSART1_Receive_ISR
  6907 ;;		_EUSART1_Transmit_ISR
  6908 ;;		_TMR1_ISR
  6909 ;; This function is called by:
  6910 ;;		Interrupt level 2
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	intcode
  6915  000008                     __pintcode:
  6916                           	opt stack 0
  6917  000008                     _INTERRUPT_InterruptManager:
  6918                           	opt stack 22
  6919                           
  6920                           ;incstack = 0
  6921  000008  CFFA F00A          	movff	pclath,??_INTERRUPT_InterruptManager
  6922  00000C  CFFB F00B          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  6923  000010  CFE9 F00C          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  6924  000014  CFEA F00D          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  6925  000018  CFE1 F00E          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  6926  00001C  CFE2 F00F          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  6927  000020  CFD9 F010          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  6928  000024  CFDA F011          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  6929  000028  CFF3 F012          	movff	prodl,??_INTERRUPT_InterruptManager+8
  6930  00002C  CFF4 F013          	movff	prodh,??_INTERRUPT_InterruptManager+9
  6931  000030  CFF6 F014          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  6932  000034  CFF7 F015          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  6933  000038  CFF8 F016          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  6934  00003C  CFF5 F017          	movff	tablat,??_INTERRUPT_InterruptManager+13
  6935                           
  6936                           ;interrupt_manager.c: 70: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  6937  000040  BA9D               	btfsc	3997,5,c	;volatile
  6938  000042  AA9E               	btfss	3998,5,c	;volatile
  6939  000044  D003               	goto	i2l222
  6940                           
  6941                           ;interrupt_manager.c: 71: EUSART1_Receive_ISR();
  6942  000046  ECBA  F012         	call	_EUSART1_Receive_ISR	;wreg free
  6943                           
  6944                           ;interrupt_manager.c: 72: } else if (PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1) {
  6945  00004A  D011               	goto	i2l230
  6946  00004C                     i2l222:
  6947  00004C  BC9D               	btfsc	3997,6,c	;volatile
  6948  00004E  AC9E               	btfss	3998,6,c	;volatile
  6949  000050  D003               	goto	i2l224
  6950                           
  6951                           ;interrupt_manager.c: 73: ADC_ISR();
  6952  000052  EC3C  F003         	call	_ADC_ISR	;wreg free
  6953                           
  6954                           ;interrupt_manager.c: 74: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  6955  000056  D00B               	goto	i2l230
  6956  000058                     i2l224:
  6957  000058  B89D               	btfsc	3997,4,c	;volatile
  6958  00005A  A89E               	btfss	3998,4,c	;volatile
  6959  00005C  D003               	goto	i2l226
  6960                           
  6961                           ;interrupt_manager.c: 75: EUSART1_Transmit_ISR();
  6962  00005E  EC87  F012         	call	_EUSART1_Transmit_ISR	;wreg free
  6963                           
  6964                           ;interrupt_manager.c: 76: } else if (PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1) {
  6965  000062  D005               	goto	i2l230
  6966  000064                     i2l226:
  6967  000064  B09D               	btfsc	3997,0,c	;volatile
  6968  000066  A09E               	btfss	3998,0,c	;volatile
  6969  000068  D002               	goto	i2l230
  6970                           
  6971                           ;interrupt_manager.c: 77: TMR1_ISR();
  6972  00006A  EC51  F011         	call	_TMR1_ISR	;wreg free
  6973  00006E                     i2l230:
  6974  00006E  C017  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  6975  000072  C016  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  6976  000076  C015  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  6977  00007A  C014  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  6978  00007E  C013  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  6979  000082  C012  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  6980  000086  C011  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  6981  00008A  C010  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  6982  00008E  C00F  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  6983  000092  C00E  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  6984  000096  C00D  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  6985  00009A  C00C  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  6986  00009E  C00B  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  6987  0000A2  C00A  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  6988  0000A6  0011               	retfie		f
  6989  0000A8                     __end_of_INTERRUPT_InterruptManager:
  6990                           	opt stack 0
  6991                           pclatu	equ	0xFFB
  6992                           pclath	equ	0xFFA
  6993                           tblptru	equ	0xFF8
  6994                           tblptrh	equ	0xFF7
  6995                           tblptrl	equ	0xFF6
  6996                           tablat	equ	0xFF5
  6997                           prodh	equ	0xFF4
  6998                           prodl	equ	0xFF3
  6999                           intcon	equ	0xFF2
  7000                           intcon2	equ	0xFF1
  7001                           postinc0	equ	0xFEE
  7002                           fsr0h	equ	0xFEA
  7003                           fsr0l	equ	0xFE9
  7004                           wreg	equ	0xFE8
  7005                           postinc1	equ	0xFE6
  7006                           postdec1	equ	0xFE5
  7007                           fsr1h	equ	0xFE2
  7008                           fsr1l	equ	0xFE1
  7009                           indf2	equ	0xFDF
  7010                           postinc2	equ	0xFDE
  7011                           postdec2	equ	0xFDD
  7012                           fsr2h	equ	0xFDA
  7013                           fsr2l	equ	0xFD9
  7014                           status	equ	0xFD8
  7015                           
  7016 ;; *************** function _TMR1_ISR *****************
  7017 ;; Defined at:
  7018 ;;		line 107 in file "mcc_generated_files/tmr1.c"
  7019 ;; Parameters:    Size  Location     Type
  7020 ;;		None
  7021 ;; Auto vars:     Size  Location     Type
  7022 ;;		None
  7023 ;; Return value:  Size  Location     Type
  7024 ;;		None               void
  7025 ;; Registers used:
  7026 ;;		wreg, status,2, status,0, cstack
  7027 ;; Tracked objects:
  7028 ;;		On entry : 0/0
  7029 ;;		On exit  : 0/0
  7030 ;;		Unchanged: 0/0
  7031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7032 ;;      Params:         0       0       0       0       0       0       0
  7033 ;;      Locals:         0       0       0       0       0       0       0
  7034 ;;      Temps:          3       0       0       0       0       0       0
  7035 ;;      Totals:         3       0       0       0       0       0       0
  7036 ;;Total ram usage:        3 bytes
  7037 ;; Hardware stack levels used:    1
  7038 ;; Hardware stack levels required when called:    2
  7039 ;; This function calls:
  7040 ;;		_Battery_Read
  7041 ;;		_Current_Read
  7042 ;;		_Temp_Read
  7043 ;; This function is called by:
  7044 ;;		_INTERRUPT_InterruptManager
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text38
  7049  0022A2                     __ptext38:
  7050                           	opt stack 0
  7051  0022A2                     _TMR1_ISR:
  7052                           	opt stack 22
  7053                           
  7054                           ;tmr1.c: 108: static volatile unsigned int CountCallBack = 0;
  7055                           ;tmr1.c: 111: PIR1bits.TMR1IF = 0;
  7056                           
  7057                           ;incstack = 0
  7058  0022A2  909E               	bcf	3998,0,c	;volatile
  7059                           
  7060                           ;tmr1.c: 114: TMR1H = (timer1ReloadVal >> 8);
  7061  0022A4  C047  F003         	movff	_timer1ReloadVal+1,??_TMR1_ISR	;volatile
  7062  0022A8  C003  F004         	movff	??_TMR1_ISR,??_TMR1_ISR+1
  7063  0022AC  6A05               	clrf	(??_TMR1_ISR+2)& (0+255),c
  7064  0022AE  5004               	movf	??_TMR1_ISR+1,w,c
  7065  0022B0  6ECF               	movwf	4047,c	;volatile
  7066                           
  7067                           ;tmr1.c: 115: TMR1L = (uint8_t) timer1ReloadVal;
  7068  0022B2  C046  FFCE         	movff	_timer1ReloadVal,4046	;volatile
  7069                           
  7070                           ;tmr1.c: 118: if (++CountCallBack >= 4)
  7071  0022B6  4A39               	infsnz	TMR1_ISR@CountCallBack,f,c	;volatile
  7072  0022B8  2A3A               	incf	TMR1_ISR@CountCallBack+1,f,c	;volatile
  7073  0022BA  0E04               	movlw	4
  7074  0022BC  5C39               	subwf	TMR1_ISR@CountCallBack& (0+255),w,c	;volatile
  7075  0022BE  0E00               	movlw	0
  7076  0022C0  583A               	subwfb	(TMR1_ISR@CountCallBack+1)& (0+255),w,c	;volatile
  7077  0022C2  A0D8               	btfss	status,0,c
  7078  0022C4  D006               	goto	i2l2994
  7079                           
  7080                           ;tmr1.c: 119: {
  7081                           ;tmr1.c: 121: do { LATA4 = ~LATA4; } while(0);
  7082  0022C6  7889               	btg	3977,4,c	;volatile
  7083                           
  7084                           ;tmr1.c: 123: CountCallBack = 0;
  7085  0022C8  0E00               	movlw	0
  7086  0022CA  6E3A               	movwf	TMR1_ISR@CountCallBack+1,c	;volatile
  7087  0022CC  0E00               	movlw	0
  7088  0022CE  6E39               	movwf	TMR1_ISR@CountCallBack,c	;volatile
  7089                           
  7090                           ;tmr1.c: 124: }
  7091  0022D0  0012               	return	
  7092  0022D2                     i2l2994:
  7093                           
  7094                           ;tmr1.c: 125: else if(CountCallBack == 1)
  7095  0022D2  0439               	decf	TMR1_ISR@CountCallBack,w,c	;volatile
  7096  0022D4  103A               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  7097  0022D6  A4D8               	btfss	status,2,c
  7098  0022D8  D006               	goto	i2l3000
  7099                           
  7100                           ;tmr1.c: 126: {
  7101                           ;tmr1.c: 127: CodeRuning = 1;
  7102  0022DA  0E01               	movlw	1
  7103  0022DC  0100               	movlb	0	; () banked
  7104  0022DE  6FB2               	movwf	_CodeRuning& (0+255),b
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;tmr1.c: 128: Current_Read();
  7108  0022E0  EC7A  F013         	call	_Current_Read	;wreg free
  7109                           
  7110                           ;tmr1.c: 129: }
  7111  0022E4  0012               	return	
  7112  0022E6                     i2l3000:
  7113                           
  7114                           ;tmr1.c: 130: else if(CountCallBack == 2)
  7115  0022E6  5039               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  7116  0022E8  0A02               	xorlw	2
  7117  0022EA  103A               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  7118  0022EC  A4D8               	btfss	status,2,c
  7119  0022EE  D006               	goto	i2l3006
  7120                           
  7121                           ;tmr1.c: 131: {
  7122                           ;tmr1.c: 132: CodeRuning = 1;
  7123  0022F0  0E01               	movlw	1
  7124  0022F2  0100               	movlb	0	; () banked
  7125  0022F4  6FB2               	movwf	_CodeRuning& (0+255),b
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;tmr1.c: 133: Battery_Read();
  7129  0022F6  EC86  F013         	call	_Battery_Read	;wreg free
  7130                           
  7131                           ;tmr1.c: 134: }
  7132  0022FA  0012               	return	
  7133  0022FC                     i2l3006:
  7134                           
  7135                           ;tmr1.c: 135: else if(CountCallBack == 3)
  7136  0022FC  5039               	movf	TMR1_ISR@CountCallBack,w,c	;volatile
  7137  0022FE  0A03               	xorlw	3
  7138  002300  103A               	iorwf	TMR1_ISR@CountCallBack+1,w,c	;volatile
  7139  002302  A4D8               	btfss	status,2,c
  7140  002304  0012               	return	
  7141                           
  7142                           ;tmr1.c: 136: {
  7143                           ;tmr1.c: 137: CodeRuning = 1;
  7144  002306  0E01               	movlw	1
  7145  002308  0100               	movlb	0	; () banked
  7146  00230A  6FB2               	movwf	_CodeRuning& (0+255),b
  7147                           
  7148                           ; BSR set to: 0
  7149                           ;tmr1.c: 138: Temp_Read();
  7150  00230C  EC6E  F013         	call	_Temp_Read	;wreg free
  7151  002310  0012               	return	
  7152  002312                     __end_of_TMR1_ISR:
  7153                           	opt stack 0
  7154                           pclatu	equ	0xFFB
  7155                           pclath	equ	0xFFA
  7156                           tblptru	equ	0xFF8
  7157                           tblptrh	equ	0xFF7
  7158                           tblptrl	equ	0xFF6
  7159                           tablat	equ	0xFF5
  7160                           prodh	equ	0xFF4
  7161                           prodl	equ	0xFF3
  7162                           intcon	equ	0xFF2
  7163                           intcon2	equ	0xFF1
  7164                           postinc0	equ	0xFEE
  7165                           fsr0h	equ	0xFEA
  7166                           fsr0l	equ	0xFE9
  7167                           wreg	equ	0xFE8
  7168                           postinc1	equ	0xFE6
  7169                           postdec1	equ	0xFE5
  7170                           fsr1h	equ	0xFE2
  7171                           fsr1l	equ	0xFE1
  7172                           indf2	equ	0xFDF
  7173                           postinc2	equ	0xFDE
  7174                           postdec2	equ	0xFDD
  7175                           fsr2h	equ	0xFDA
  7176                           fsr2l	equ	0xFD9
  7177                           status	equ	0xFD8
  7178                           
  7179 ;; *************** function _Temp_Read *****************
  7180 ;; Defined at:
  7181 ;;		line 26 in file "Tempeture.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;		None
  7186 ;; Return value:  Size  Location     Type
  7187 ;;		None               void
  7188 ;; Registers used:
  7189 ;;		wreg, status,2, status,0, cstack
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/0
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7195 ;;      Params:         0       0       0       0       0       0       0
  7196 ;;      Locals:         0       0       0       0       0       0       0
  7197 ;;      Temps:          0       0       0       0       0       0       0
  7198 ;;      Totals:         0       0       0       0       0       0       0
  7199 ;;Total ram usage:        0 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    1
  7202 ;; This function calls:
  7203 ;;		_ADC_StartConversion
  7204 ;; This function is called by:
  7205 ;;		_TMR1_ISR
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	text39
  7210  0026DC                     __ptext39:
  7211                           	opt stack 0
  7212  0026DC                     _Temp_Read:
  7213                           	opt stack 22
  7214                           
  7215                           ;Tempeture.c: 29: ADC_Buffer_Point = 0;
  7216                           
  7217                           ;incstack = 0
  7218  0026DC  0E00               	movlw	0
  7219  0026DE  6E3C               	movwf	_ADC_Buffer_Point+1,c
  7220  0026E0  0E00               	movlw	0
  7221  0026E2  6E3B               	movwf	_ADC_Buffer_Point,c
  7222                           
  7223                           ;Tempeture.c: 30: Temp_Aquire = 1;
  7224  0026E4  0E01               	movlw	1
  7225  0026E6  6E3E               	movwf	_Temp_Aquire,c
  7226                           
  7227                           ;Tempeture.c: 31: ADCON1 = 0x80;
  7228  0026E8  0E80               	movlw	128
  7229  0026EA  6EC1               	movwf	4033,c	;volatile
  7230                           
  7231                           ;Tempeture.c: 32: ADC_StartConversion(Temp1);
  7232  0026EC  0E0E               	movlw	14
  7233  0026EE  EC55  F013         	call	_ADC_StartConversion
  7234  0026F2  0012               	return	
  7235  0026F4                     __end_of_Temp_Read:
  7236                           	opt stack 0
  7237                           pclatu	equ	0xFFB
  7238                           pclath	equ	0xFFA
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           intcon	equ	0xFF2
  7246                           intcon2	equ	0xFF1
  7247                           postinc0	equ	0xFEE
  7248                           fsr0h	equ	0xFEA
  7249                           fsr0l	equ	0xFE9
  7250                           wreg	equ	0xFE8
  7251                           postinc1	equ	0xFE6
  7252                           postdec1	equ	0xFE5
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _Current_Read *****************
  7263 ;; Defined at:
  7264 ;;		line 33 in file "Current.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;		None
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;		None               void
  7271 ;; Registers used:
  7272 ;;		wreg, status,2, status,0, cstack
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7278 ;;      Params:         0       0       0       0       0       0       0
  7279 ;;      Locals:         0       0       0       0       0       0       0
  7280 ;;      Temps:          0       0       0       0       0       0       0
  7281 ;;      Totals:         0       0       0       0       0       0       0
  7282 ;;Total ram usage:        0 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    1
  7285 ;; This function calls:
  7286 ;;		_ADC_GetConversion
  7287 ;; This function is called by:
  7288 ;;		_TMR1_ISR
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           	psect	text40
  7293  0026F4                     __ptext40:
  7294                           	opt stack 0
  7295  0026F4                     _Current_Read:
  7296                           	opt stack 22
  7297                           
  7298                           ;Current.c: 36: ADC_Buffer_Point = 0;
  7299                           
  7300                           ;incstack = 0
  7301  0026F4  0E00               	movlw	0
  7302  0026F6  6E3C               	movwf	_ADC_Buffer_Point+1,c
  7303  0026F8  0E00               	movlw	0
  7304  0026FA  6E3B               	movwf	_ADC_Buffer_Point,c
  7305                           
  7306                           ;Current.c: 37: Current_Aquire = 1;
  7307  0026FC  0E01               	movlw	1
  7308  0026FE  6E3D               	movwf	_Current_Aquire,c
  7309                           
  7310                           ;Current.c: 38: ADCON1 = 0x80;
  7311  002700  0E80               	movlw	128
  7312  002702  6EC1               	movwf	4033,c	;volatile
  7313                           
  7314                           ;Current.c: 39: ADC_GetConversion(Asen);
  7315  002704  0E0B               	movlw	11
  7316  002706  EC37  F013         	call	_ADC_GetConversion
  7317  00270A  0012               	return	
  7318  00270C                     __end_of_Current_Read:
  7319                           	opt stack 0
  7320                           pclatu	equ	0xFFB
  7321                           pclath	equ	0xFFA
  7322                           tblptru	equ	0xFF8
  7323                           tblptrh	equ	0xFF7
  7324                           tblptrl	equ	0xFF6
  7325                           tablat	equ	0xFF5
  7326                           prodh	equ	0xFF4
  7327                           prodl	equ	0xFF3
  7328                           intcon	equ	0xFF2
  7329                           intcon2	equ	0xFF1
  7330                           postinc0	equ	0xFEE
  7331                           fsr0h	equ	0xFEA
  7332                           fsr0l	equ	0xFE9
  7333                           wreg	equ	0xFE8
  7334                           postinc1	equ	0xFE6
  7335                           postdec1	equ	0xFE5
  7336                           fsr1h	equ	0xFE2
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8
  7344                           
  7345 ;; *************** function _ADC_GetConversion *****************
  7346 ;; Defined at:
  7347 ;;		line 59 in file "mcc_generated_files/adc.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  channel         1    wreg     enum E8837
  7350 ;; Auto vars:     Size  Location     Type
  7351 ;;  channel         1    1[COMRAM] enum E8837
  7352 ;; Return value:  Size  Location     Type
  7353 ;;                  2  127[COMRAM] unsigned int 
  7354 ;; Registers used:
  7355 ;;		wreg, status,2, status,0
  7356 ;; Tracked objects:
  7357 ;;		On entry : 0/0
  7358 ;;		On exit  : 0/0
  7359 ;;		Unchanged: 0/0
  7360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7361 ;;      Params:         0       0       0       0       0       0       0
  7362 ;;      Locals:         1       0       0       0       0       0       0
  7363 ;;      Temps:          1       0       0       0       0       0       0
  7364 ;;      Totals:         2       0       0       0       0       0       0
  7365 ;;Total ram usage:        2 bytes
  7366 ;; Hardware stack levels used:    1
  7367 ;; This function calls:
  7368 ;;		Nothing
  7369 ;; This function is called by:
  7370 ;;		_Current_Read
  7371 ;; This function uses a non-reentrant model
  7372 ;;
  7373                           
  7374                           	psect	text41
  7375  00266E                     __ptext41:
  7376                           	opt stack 0
  7377  00266E                     _ADC_GetConversion:
  7378                           	opt stack 22
  7379                           
  7380                           ;incstack = 0
  7381                           ;ADC_GetConversion@channel stored from wreg
  7382  00266E  6E02               	movwf	ADC_GetConversion@channel,c
  7383                           
  7384                           ;adc.c: 61: ADCON0bits.CHS = channel;
  7385  002670  C002  F001         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  7386  002674  4601               	rlncf	??_ADC_GetConversion,f,c
  7387  002676  4601               	rlncf	??_ADC_GetConversion,f,c
  7388  002678  50C2               	movf	4034,w,c	;volatile
  7389  00267A  1801               	xorwf	??_ADC_GetConversion,w,c
  7390  00267C  0B83               	andlw	-125
  7391  00267E  1801               	xorwf	??_ADC_GetConversion,w,c
  7392  002680  6EC2               	movwf	4034,c	;volatile
  7393                           
  7394                           ;adc.c: 64: ADCON0bits.ADON = 1;
  7395  002682  80C2               	bsf	4034,0,c	;volatile
  7396                           
  7397                           ;adc.c: 68: ADCON0bits.GO_nDONE = 1;
  7398  002684  82C2               	bsf	4034,1,c	;volatile
  7399  002686                     i2l128:
  7400  002686  B2C2               	btfsc	4034,1,c	;volatile
  7401  002688  D7FE               	goto	i2l128
  7402                           
  7403                           ;adc.c: 72: }
  7404                           ;adc.c: 75: return ((ADRESH << 8) + ADRESL);
  7405                           ;	Return value of _ADC_GetConversion is never used
  7406  00268A  50C4               	movf	4036,w,c	;volatile
  7407  00268C  50C3               	movf	4035,w,c	;volatile
  7408  00268E  0012               	return	
  7409  002690                     __end_of_ADC_GetConversion:
  7410                           	opt stack 0
  7411                           pclatu	equ	0xFFB
  7412                           pclath	equ	0xFFA
  7413                           tblptru	equ	0xFF8
  7414                           tblptrh	equ	0xFF7
  7415                           tblptrl	equ	0xFF6
  7416                           tablat	equ	0xFF5
  7417                           prodh	equ	0xFF4
  7418                           prodl	equ	0xFF3
  7419                           intcon	equ	0xFF2
  7420                           intcon2	equ	0xFF1
  7421                           postinc0	equ	0xFEE
  7422                           fsr0h	equ	0xFEA
  7423                           fsr0l	equ	0xFE9
  7424                           wreg	equ	0xFE8
  7425                           postinc1	equ	0xFE6
  7426                           postdec1	equ	0xFE5
  7427                           fsr1h	equ	0xFE2
  7428                           fsr1l	equ	0xFE1
  7429                           indf2	equ	0xFDF
  7430                           postinc2	equ	0xFDE
  7431                           postdec2	equ	0xFDD
  7432                           fsr2h	equ	0xFDA
  7433                           fsr2l	equ	0xFD9
  7434                           status	equ	0xFD8
  7435                           
  7436 ;; *************** function _Battery_Read *****************
  7437 ;; Defined at:
  7438 ;;		line 24 in file "Battery.c"
  7439 ;; Parameters:    Size  Location     Type
  7440 ;;		None
  7441 ;; Auto vars:     Size  Location     Type
  7442 ;;		None
  7443 ;; Return value:  Size  Location     Type
  7444 ;;		None               void
  7445 ;; Registers used:
  7446 ;;		wreg, status,2, status,0, cstack
  7447 ;; Tracked objects:
  7448 ;;		On entry : 0/0
  7449 ;;		On exit  : 0/0
  7450 ;;		Unchanged: 0/0
  7451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7452 ;;      Params:         0       0       0       0       0       0       0
  7453 ;;      Locals:         0       0       0       0       0       0       0
  7454 ;;      Temps:          0       0       0       0       0       0       0
  7455 ;;      Totals:         0       0       0       0       0       0       0
  7456 ;;Total ram usage:        0 bytes
  7457 ;; Hardware stack levels used:    1
  7458 ;; Hardware stack levels required when called:    1
  7459 ;; This function calls:
  7460 ;;		_ADC_StartConversion
  7461 ;; This function is called by:
  7462 ;;		_TMR1_ISR
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           	psect	text42
  7467  00270C                     __ptext42:
  7468                           	opt stack 0
  7469  00270C                     _Battery_Read:
  7470                           	opt stack 22
  7471                           
  7472                           ;Battery.c: 27: ADC_Buffer_Point = 0;
  7473                           
  7474                           ;incstack = 0
  7475  00270C  0E00               	movlw	0
  7476  00270E  6E3C               	movwf	_ADC_Buffer_Point+1,c
  7477  002710  0E00               	movlw	0
  7478  002712  6E3B               	movwf	_ADC_Buffer_Point,c
  7479                           
  7480                           ;Battery.c: 28: Volt_Aquire = 1;
  7481  002714  0E01               	movlw	1
  7482  002716  6E3F               	movwf	_Volt_Aquire,c
  7483                           
  7484                           ;Battery.c: 29: ADCON1 = 0x80;
  7485  002718  0E80               	movlw	128
  7486  00271A  6EC1               	movwf	4033,c	;volatile
  7487                           
  7488                           ;Battery.c: 30: ADC_StartConversion(AN_CELL1);
  7489  00271C  0E07               	movlw	7
  7490  00271E  EC55  F013         	call	_ADC_StartConversion
  7491  002722  0012               	return	
  7492  002724                     __end_of_Battery_Read:
  7493                           	opt stack 0
  7494                           pclatu	equ	0xFFB
  7495                           pclath	equ	0xFFA
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           intcon	equ	0xFF2
  7503                           intcon2	equ	0xFF1
  7504                           postinc0	equ	0xFEE
  7505                           fsr0h	equ	0xFEA
  7506                           fsr0l	equ	0xFE9
  7507                           wreg	equ	0xFE8
  7508                           postinc1	equ	0xFE6
  7509                           postdec1	equ	0xFE5
  7510                           fsr1h	equ	0xFE2
  7511                           fsr1l	equ	0xFE1
  7512                           indf2	equ	0xFDF
  7513                           postinc2	equ	0xFDE
  7514                           postdec2	equ	0xFDD
  7515                           fsr2h	equ	0xFDA
  7516                           fsr2l	equ	0xFD9
  7517                           status	equ	0xFD8
  7518                           
  7519 ;; *************** function _EUSART1_Transmit_ISR *****************
  7520 ;; Defined at:
  7521 ;;		line 155 in file "mcc_generated_files/eusart1.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;		None
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;		None
  7526 ;; Return value:  Size  Location     Type
  7527 ;;		None               void
  7528 ;; Registers used:
  7529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7535 ;;      Params:         0       0       0       0       0       0       0
  7536 ;;      Locals:         0       0       0       0       0       0       0
  7537 ;;      Temps:          0       0       0       0       0       0       0
  7538 ;;      Totals:         0       0       0       0       0       0       0
  7539 ;;Total ram usage:        0 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; This function calls:
  7542 ;;		Nothing
  7543 ;; This function is called by:
  7544 ;;		_INTERRUPT_InterruptManager
  7545 ;; This function uses a non-reentrant model
  7546 ;;
  7547                           
  7548                           	psect	text43
  7549  00250E                     __ptext43:
  7550                           	opt stack 0
  7551  00250E                     _EUSART1_Transmit_ISR:
  7552                           	opt stack 24
  7553                           
  7554                           ;eusart1.c: 158: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
  7555                           
  7556                           ;incstack = 0
  7557  00250E  0E08               	movlw	8
  7558  002510  5C48               	subwf	_eusart1TxBufferRemaining,w,c	;volatile
  7559  002512  B0D8               	btfsc	status,0,c
  7560  002514  D014               	goto	i2l316
  7561                           
  7562                           ;eusart1.c: 159: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  7563  002516  5044               	movf	_eusart1TxTail,w,c
  7564  002518  0D01               	mullw	1
  7565  00251A  0100               	movlb	0	; () banked
  7566  00251C  0E9F               	movlw	low _eusart1TxBuffer
  7567  00251E  24F3               	addwf	prodl,w,c
  7568  002520  6ED9               	movwf	fsr2l,c
  7569  002522  0100               	movlb	0	; () banked
  7570  002524  0E00               	movlw	high _eusart1TxBuffer
  7571  002526  20F4               	addwfc	prodh,w,c
  7572  002528  6EDA               	movwf	fsr2h,c
  7573  00252A  50DF               	movf	indf2,w,c
  7574  00252C  6EAD               	movwf	4013,c	;volatile
  7575                           
  7576                           ; BSR set to: 0
  7577  00252E  2A44               	incf	_eusart1TxTail,f,c
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;eusart1.c: 160: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
  7581  002530  0E07               	movlw	7
  7582  002532  6444               	cpfsgt	_eusart1TxTail,c
  7583  002534  D002               	goto	i2l3182
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;eusart1.c: 161: eusart1TxTail = 0;
  7587  002536  0E00               	movlw	0
  7588  002538  6E44               	movwf	_eusart1TxTail,c
  7589  00253A                     i2l3182:
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;eusart1.c: 162: }
  7593                           ;eusart1.c: 163: eusart1TxBufferRemaining++;
  7594  00253A  2A48               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  7595                           
  7596                           ;eusart1.c: 164: } else {
  7597  00253C  0012               	return	
  7598  00253E                     i2l316:
  7599                           
  7600                           ;eusart1.c: 165: PIE1bits.TX1IE = 0;
  7601  00253E  989D               	bcf	3997,4,c	;volatile
  7602  002540  0012               	return	
  7603  002542                     __end_of_EUSART1_Transmit_ISR:
  7604                           	opt stack 0
  7605                           pclatu	equ	0xFFB
  7606                           pclath	equ	0xFFA
  7607                           tblptru	equ	0xFF8
  7608                           tblptrh	equ	0xFF7
  7609                           tblptrl	equ	0xFF6
  7610                           tablat	equ	0xFF5
  7611                           prodh	equ	0xFF4
  7612                           prodl	equ	0xFF3
  7613                           intcon	equ	0xFF2
  7614                           intcon2	equ	0xFF1
  7615                           postinc0	equ	0xFEE
  7616                           fsr0h	equ	0xFEA
  7617                           fsr0l	equ	0xFE9
  7618                           wreg	equ	0xFE8
  7619                           postinc1	equ	0xFE6
  7620                           postdec1	equ	0xFE5
  7621                           fsr1h	equ	0xFE2
  7622                           fsr1l	equ	0xFE1
  7623                           indf2	equ	0xFDF
  7624                           postinc2	equ	0xFDE
  7625                           postdec2	equ	0xFDD
  7626                           fsr2h	equ	0xFDA
  7627                           fsr2l	equ	0xFD9
  7628                           status	equ	0xFD8
  7629                           
  7630 ;; *************** function _EUSART1_Receive_ISR *****************
  7631 ;; Defined at:
  7632 ;;		line 169 in file "mcc_generated_files/eusart1.c"
  7633 ;; Parameters:    Size  Location     Type
  7634 ;;		None
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;		None
  7637 ;; Return value:  Size  Location     Type
  7638 ;;		None               void
  7639 ;; Registers used:
  7640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7641 ;; Tracked objects:
  7642 ;;		On entry : 0/0
  7643 ;;		On exit  : 0/0
  7644 ;;		Unchanged: 0/0
  7645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7646 ;;      Params:         0       0       0       0       0       0       0
  7647 ;;      Locals:         0       0       0       0       0       0       0
  7648 ;;      Temps:          0       0       0       0       0       0       0
  7649 ;;      Totals:         0       0       0       0       0       0       0
  7650 ;;Total ram usage:        0 bytes
  7651 ;; Hardware stack levels used:    1
  7652 ;; This function calls:
  7653 ;;		Nothing
  7654 ;; This function is called by:
  7655 ;;		_INTERRUPT_InterruptManager
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text44
  7660  002574                     __ptext44:
  7661                           	opt stack 0
  7662  002574                     _EUSART1_Receive_ISR:
  7663                           	opt stack 24
  7664                           
  7665                           ;eusart1.c: 170: if (1 == RC1STAbits.OERR) {
  7666                           
  7667                           ;incstack = 0
  7668  002574  A2AB               	btfss	4011,1,c	;volatile
  7669  002576  D002               	goto	i2l3162
  7670                           
  7671                           ;eusart1.c: 173: RC1STAbits.CREN = 0;
  7672  002578  98AB               	bcf	4011,4,c	;volatile
  7673                           
  7674                           ;eusart1.c: 174: RC1STAbits.CREN = 1;
  7675  00257A  88AB               	bsf	4011,4,c	;volatile
  7676  00257C                     i2l3162:
  7677                           
  7678                           ;eusart1.c: 175: }
  7679                           ;eusart1.c: 178: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  7680  00257C  5041               	movf	_eusart1RxHead,w,c
  7681  00257E  0D01               	mullw	1
  7682  002580  0100               	movlb	0	; () banked
  7683  002582  0E97               	movlw	low _eusart1RxBuffer
  7684  002584  24F3               	addwf	prodl,w,c
  7685  002586  6ED9               	movwf	fsr2l,c
  7686  002588  0100               	movlb	0	; () banked
  7687  00258A  0E00               	movlw	high _eusart1RxBuffer
  7688  00258C  20F4               	addwfc	prodh,w,c
  7689  00258E  6EDA               	movwf	fsr2h,c
  7690  002590  CFAE FFDF          	movff	4014,indf2	;volatile
  7691                           
  7692                           ; BSR set to: 0
  7693  002594  2A41               	incf	_eusart1RxHead,f,c
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;eusart1.c: 179: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
  7697  002596  0E07               	movlw	7
  7698  002598  6441               	cpfsgt	_eusart1RxHead,c
  7699  00259A  D002               	goto	i2l3170
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;eusart1.c: 180: eusart1RxHead = 0;
  7703  00259C  0E00               	movlw	0
  7704  00259E  6E41               	movwf	_eusart1RxHead,c
  7705  0025A0                     i2l3170:
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;eusart1.c: 181: }
  7709                           ;eusart1.c: 182: eusart1RxCount++;
  7710  0025A0  2A40               	incf	_eusart1RxCount,f,c	;volatile
  7711                           
  7712                           ; BSR set to: 0
  7713  0025A2  0012               	return	
  7714  0025A4                     __end_of_EUSART1_Receive_ISR:
  7715                           	opt stack 0
  7716                           pclatu	equ	0xFFB
  7717                           pclath	equ	0xFFA
  7718                           tblptru	equ	0xFF8
  7719                           tblptrh	equ	0xFF7
  7720                           tblptrl	equ	0xFF6
  7721                           tablat	equ	0xFF5
  7722                           prodh	equ	0xFF4
  7723                           prodl	equ	0xFF3
  7724                           intcon	equ	0xFF2
  7725                           intcon2	equ	0xFF1
  7726                           postinc0	equ	0xFEE
  7727                           fsr0h	equ	0xFEA
  7728                           fsr0l	equ	0xFE9
  7729                           wreg	equ	0xFE8
  7730                           postinc1	equ	0xFE6
  7731                           postdec1	equ	0xFE5
  7732                           fsr1h	equ	0xFE2
  7733                           fsr1l	equ	0xFE1
  7734                           indf2	equ	0xFDF
  7735                           postinc2	equ	0xFDE
  7736                           postdec2	equ	0xFDD
  7737                           fsr2h	equ	0xFDA
  7738                           fsr2l	equ	0xFD9
  7739                           status	equ	0xFD8
  7740                           
  7741 ;; *************** function _ADC_ISR *****************
  7742 ;; Defined at:
  7743 ;;		line 78 in file "mcc_generated_files/adc.c"
  7744 ;; Parameters:    Size  Location     Type
  7745 ;;		None
  7746 ;; Auto vars:     Size  Location     Type
  7747 ;;  ADC_Result      2    7[COMRAM] int 
  7748 ;; Return value:  Size  Location     Type
  7749 ;;		None               void
  7750 ;; Registers used:
  7751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7752 ;; Tracked objects:
  7753 ;;		On entry : 0/0
  7754 ;;		On exit  : 0/0
  7755 ;;		Unchanged: 0/0
  7756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7757 ;;      Params:         0       0       0       0       0       0       0
  7758 ;;      Locals:         2       0       0       0       0       0       0
  7759 ;;      Temps:          2       0       0       0       0       0       0
  7760 ;;      Totals:         4       0       0       0       0       0       0
  7761 ;;Total ram usage:        4 bytes
  7762 ;; Hardware stack levels used:    1
  7763 ;; Hardware stack levels required when called:    1
  7764 ;; This function calls:
  7765 ;;		_ADC_GetConversionResult
  7766 ;;		_ADC_StartConversion
  7767 ;;		_Set_4051
  7768 ;; This function is called by:
  7769 ;;		_INTERRUPT_InterruptManager
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text45
  7774  000678                     __ptext45:
  7775                           	opt stack 0
  7776  000678                     _ADC_ISR:
  7777                           	opt stack 23
  7778                           
  7779                           ;adc.c: 80: PIR1bits.ADIF = 0;
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;incstack = 0
  7783  000678  9C9E               	bcf	3998,6,c	;volatile
  7784                           
  7785                           ;adc.c: 81: int ADC_Result = 0;
  7786  00067A  0E00               	movlw	0
  7787  00067C  6E09               	movwf	ADC_ISR@ADC_Result+1,c
  7788  00067E  0E00               	movlw	0
  7789  000680  6E08               	movwf	ADC_ISR@ADC_Result,c
  7790                           
  7791                           ;adc.c: 82: if (Temp_Aquire){
  7792  000682  503E               	movf	_Temp_Aquire,w,c
  7793  000684  B4D8               	btfsc	status,2,c
  7794  000686  D117               	goto	i2l3074
  7795                           
  7796                           ;adc.c: 84: ADC_Result = ADC_GetConversionResult();
  7797  000688  EC92  F013         	call	_ADC_GetConversionResult	;wreg free
  7798  00068C  C001  F008         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  7799  000690  C002  F009         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  7800                           
  7801                           ;adc.c: 85: switch ( ADC_Buffer_Point )
  7802  000694  D0ED               	goto	i2l3070
  7803  000696                     i2l3018:
  7804                           
  7805                           ;adc.c: 88: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  7806  000696  0EB4               	movlw	low _Temp_Adc
  7807  000698  6E06               	movwf	??_ADC_ISR& (0+255),c
  7808  00069A  0E00               	movlw	high _Temp_Adc
  7809  00069C  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  7810  00069E  90D8               	bcf	status,0,c
  7811  0006A0  343B               	rlcf	_ADC_Buffer_Point,w,c
  7812  0006A2  6ED9               	movwf	fsr2l,c
  7813  0006A4  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  7814  0006A6  6EDA               	movwf	fsr2h,c
  7815  0006A8  5006               	movf	??_ADC_ISR,w,c
  7816  0006AA  26D9               	addwf	fsr2l,f,c
  7817  0006AC  5007               	movf	??_ADC_ISR+1,w,c
  7818  0006AE  22DA               	addwfc	fsr2h,f,c
  7819  0006B0  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7820  0006B4  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7821                           
  7822                           ;adc.c: 89: Set_4051(1,1);
  7823  0006B8  0E00               	movlw	0
  7824  0006BA  6E02               	movwf	Set_4051@Channel+1,c
  7825  0006BC  0E01               	movlw	1
  7826  0006BE  6E01               	movwf	Set_4051@Channel,c
  7827  0006C0  0E01               	movlw	1
  7828  0006C2  6E03               	movwf	Set_4051@enable,c
  7829  0006C4  ECE7  F011         	call	_Set_4051	;wreg free
  7830                           
  7831                           ;adc.c: 90: ADC_StartConversion(Temp1);
  7832  0006C8  0E0E               	movlw	14
  7833  0006CA  EC55  F013         	call	_ADC_StartConversion
  7834                           
  7835                           ;adc.c: 91: break;
  7836  0006CE  D0F1               	goto	i2l3072
  7837  0006D0                     i2l3024:
  7838                           
  7839                           ;adc.c: 93: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  7840  0006D0  0EB4               	movlw	low _Temp_Adc
  7841  0006D2  6E06               	movwf	??_ADC_ISR& (0+255),c
  7842  0006D4  0E00               	movlw	high _Temp_Adc
  7843  0006D6  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  7844  0006D8  90D8               	bcf	status,0,c
  7845  0006DA  343B               	rlcf	_ADC_Buffer_Point,w,c
  7846  0006DC  6ED9               	movwf	fsr2l,c
  7847  0006DE  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  7848  0006E0  6EDA               	movwf	fsr2h,c
  7849  0006E2  5006               	movf	??_ADC_ISR,w,c
  7850  0006E4  26D9               	addwf	fsr2l,f,c
  7851  0006E6  5007               	movf	??_ADC_ISR+1,w,c
  7852  0006E8  22DA               	addwfc	fsr2h,f,c
  7853  0006EA  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7854  0006EE  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7855                           
  7856                           ;adc.c: 94: Set_4051(2,1);
  7857  0006F2  0E00               	movlw	0
  7858  0006F4  6E02               	movwf	Set_4051@Channel+1,c
  7859  0006F6  0E02               	movlw	2
  7860  0006F8  6E01               	movwf	Set_4051@Channel,c
  7861  0006FA  0E01               	movlw	1
  7862  0006FC  6E03               	movwf	Set_4051@enable,c
  7863  0006FE  ECE7  F011         	call	_Set_4051	;wreg free
  7864                           
  7865                           ;adc.c: 95: ADC_StartConversion(Temp1);
  7866  000702  0E0E               	movlw	14
  7867  000704  EC55  F013         	call	_ADC_StartConversion
  7868                           
  7869                           ;adc.c: 96: break;
  7870  000708  D0D4               	goto	i2l3072
  7871  00070A                     i2l3030:
  7872                           
  7873                           ;adc.c: 98: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  7874  00070A  0EB4               	movlw	low _Temp_Adc
  7875  00070C  6E06               	movwf	??_ADC_ISR& (0+255),c
  7876  00070E  0E00               	movlw	high _Temp_Adc
  7877  000710  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  7878  000712  90D8               	bcf	status,0,c
  7879  000714  343B               	rlcf	_ADC_Buffer_Point,w,c
  7880  000716  6ED9               	movwf	fsr2l,c
  7881  000718  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  7882  00071A  6EDA               	movwf	fsr2h,c
  7883  00071C  5006               	movf	??_ADC_ISR,w,c
  7884  00071E  26D9               	addwf	fsr2l,f,c
  7885  000720  5007               	movf	??_ADC_ISR+1,w,c
  7886  000722  22DA               	addwfc	fsr2h,f,c
  7887  000724  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7888  000728  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7889                           
  7890                           ;adc.c: 99: Set_4051(3,1);
  7891  00072C  0E00               	movlw	0
  7892  00072E  6E02               	movwf	Set_4051@Channel+1,c
  7893  000730  0E03               	movlw	3
  7894  000732  6E01               	movwf	Set_4051@Channel,c
  7895  000734  0E01               	movlw	1
  7896  000736  6E03               	movwf	Set_4051@enable,c
  7897  000738  ECE7  F011         	call	_Set_4051	;wreg free
  7898                           
  7899                           ;adc.c: 100: ADC_StartConversion(Temp1);
  7900  00073C  0E0E               	movlw	14
  7901  00073E  EC55  F013         	call	_ADC_StartConversion
  7902                           
  7903                           ;adc.c: 101: break;
  7904  000742  D0B7               	goto	i2l3072
  7905  000744                     i2l3036:
  7906                           
  7907                           ;adc.c: 103: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  7908  000744  0EB4               	movlw	low _Temp_Adc
  7909  000746  6E06               	movwf	??_ADC_ISR& (0+255),c
  7910  000748  0E00               	movlw	high _Temp_Adc
  7911  00074A  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  7912  00074C  90D8               	bcf	status,0,c
  7913  00074E  343B               	rlcf	_ADC_Buffer_Point,w,c
  7914  000750  6ED9               	movwf	fsr2l,c
  7915  000752  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  7916  000754  6EDA               	movwf	fsr2h,c
  7917  000756  5006               	movf	??_ADC_ISR,w,c
  7918  000758  26D9               	addwf	fsr2l,f,c
  7919  00075A  5007               	movf	??_ADC_ISR+1,w,c
  7920  00075C  22DA               	addwfc	fsr2h,f,c
  7921  00075E  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7922  000762  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7923                           
  7924                           ;adc.c: 104: Set_4051(4,1);
  7925  000766  0E00               	movlw	0
  7926  000768  6E02               	movwf	Set_4051@Channel+1,c
  7927  00076A  0E04               	movlw	4
  7928  00076C  6E01               	movwf	Set_4051@Channel,c
  7929  00076E  0E01               	movlw	1
  7930  000770  6E03               	movwf	Set_4051@enable,c
  7931  000772  ECE7  F011         	call	_Set_4051	;wreg free
  7932                           
  7933                           ;adc.c: 105: ADC_StartConversion(Temp1);
  7934  000776  0E0E               	movlw	14
  7935  000778  EC55  F013         	call	_ADC_StartConversion
  7936                           
  7937                           ;adc.c: 106: break;
  7938  00077C  D09A               	goto	i2l3072
  7939  00077E                     i2l3042:
  7940                           
  7941                           ;adc.c: 108: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  7942  00077E  0EB4               	movlw	low _Temp_Adc
  7943  000780  6E06               	movwf	??_ADC_ISR& (0+255),c
  7944  000782  0E00               	movlw	high _Temp_Adc
  7945  000784  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  7946  000786  90D8               	bcf	status,0,c
  7947  000788  343B               	rlcf	_ADC_Buffer_Point,w,c
  7948  00078A  6ED9               	movwf	fsr2l,c
  7949  00078C  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  7950  00078E  6EDA               	movwf	fsr2h,c
  7951  000790  5006               	movf	??_ADC_ISR,w,c
  7952  000792  26D9               	addwf	fsr2l,f,c
  7953  000794  5007               	movf	??_ADC_ISR+1,w,c
  7954  000796  22DA               	addwfc	fsr2h,f,c
  7955  000798  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7956  00079C  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7957                           
  7958                           ;adc.c: 109: Set_4051(5,1);
  7959  0007A0  0E00               	movlw	0
  7960  0007A2  6E02               	movwf	Set_4051@Channel+1,c
  7961  0007A4  0E05               	movlw	5
  7962  0007A6  6E01               	movwf	Set_4051@Channel,c
  7963  0007A8  0E01               	movlw	1
  7964  0007AA  6E03               	movwf	Set_4051@enable,c
  7965  0007AC  ECE7  F011         	call	_Set_4051	;wreg free
  7966                           
  7967                           ;adc.c: 110: ADC_StartConversion(Temp1);
  7968  0007B0  0E0E               	movlw	14
  7969  0007B2  EC55  F013         	call	_ADC_StartConversion
  7970                           
  7971                           ;adc.c: 111: break;
  7972  0007B6  D07D               	goto	i2l3072
  7973  0007B8                     i2l3048:
  7974                           
  7975                           ;adc.c: 113: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  7976  0007B8  0EB4               	movlw	low _Temp_Adc
  7977  0007BA  6E06               	movwf	??_ADC_ISR& (0+255),c
  7978  0007BC  0E00               	movlw	high _Temp_Adc
  7979  0007BE  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  7980  0007C0  90D8               	bcf	status,0,c
  7981  0007C2  343B               	rlcf	_ADC_Buffer_Point,w,c
  7982  0007C4  6ED9               	movwf	fsr2l,c
  7983  0007C6  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  7984  0007C8  6EDA               	movwf	fsr2h,c
  7985  0007CA  5006               	movf	??_ADC_ISR,w,c
  7986  0007CC  26D9               	addwf	fsr2l,f,c
  7987  0007CE  5007               	movf	??_ADC_ISR+1,w,c
  7988  0007D0  22DA               	addwfc	fsr2h,f,c
  7989  0007D2  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  7990  0007D6  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  7991                           
  7992                           ;adc.c: 114: Set_4051(6,1);
  7993  0007DA  0E00               	movlw	0
  7994  0007DC  6E02               	movwf	Set_4051@Channel+1,c
  7995  0007DE  0E06               	movlw	6
  7996  0007E0  6E01               	movwf	Set_4051@Channel,c
  7997  0007E2  0E01               	movlw	1
  7998  0007E4  6E03               	movwf	Set_4051@enable,c
  7999  0007E6  ECE7  F011         	call	_Set_4051	;wreg free
  8000                           
  8001                           ;adc.c: 115: ADC_StartConversion(Temp1);
  8002  0007EA  0E0E               	movlw	14
  8003  0007EC  EC55  F013         	call	_ADC_StartConversion
  8004                           
  8005                           ;adc.c: 116: break;
  8006  0007F0  D060               	goto	i2l3072
  8007  0007F2                     i2l3054:
  8008                           
  8009                           ;adc.c: 118: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8010  0007F2  0EB4               	movlw	low _Temp_Adc
  8011  0007F4  6E06               	movwf	??_ADC_ISR& (0+255),c
  8012  0007F6  0E00               	movlw	high _Temp_Adc
  8013  0007F8  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8014  0007FA  90D8               	bcf	status,0,c
  8015  0007FC  343B               	rlcf	_ADC_Buffer_Point,w,c
  8016  0007FE  6ED9               	movwf	fsr2l,c
  8017  000800  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8018  000802  6EDA               	movwf	fsr2h,c
  8019  000804  5006               	movf	??_ADC_ISR,w,c
  8020  000806  26D9               	addwf	fsr2l,f,c
  8021  000808  5007               	movf	??_ADC_ISR+1,w,c
  8022  00080A  22DA               	addwfc	fsr2h,f,c
  8023  00080C  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8024  000810  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8025                           
  8026                           ;adc.c: 119: Set_4051(7,1);
  8027  000814  0E00               	movlw	0
  8028  000816  6E02               	movwf	Set_4051@Channel+1,c
  8029  000818  0E07               	movlw	7
  8030  00081A  6E01               	movwf	Set_4051@Channel,c
  8031  00081C  0E01               	movlw	1
  8032  00081E  6E03               	movwf	Set_4051@enable,c
  8033  000820  ECE7  F011         	call	_Set_4051	;wreg free
  8034                           
  8035                           ;adc.c: 120: ADC_StartConversion(Temp1);
  8036  000824  0E0E               	movlw	14
  8037  000826  EC55  F013         	call	_ADC_StartConversion
  8038                           
  8039                           ;adc.c: 121: break;
  8040  00082A  D043               	goto	i2l3072
  8041  00082C                     i2l3060:
  8042                           
  8043                           ;adc.c: 123: Temp_Adc[ADC_Buffer_Point] = ADC_Result;
  8044  00082C  0EB4               	movlw	low _Temp_Adc
  8045  00082E  6E06               	movwf	??_ADC_ISR& (0+255),c
  8046  000830  0E00               	movlw	high _Temp_Adc
  8047  000832  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8048  000834  90D8               	bcf	status,0,c
  8049  000836  343B               	rlcf	_ADC_Buffer_Point,w,c
  8050  000838  6ED9               	movwf	fsr2l,c
  8051  00083A  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8052  00083C  6EDA               	movwf	fsr2h,c
  8053  00083E  5006               	movf	??_ADC_ISR,w,c
  8054  000840  26D9               	addwf	fsr2l,f,c
  8055  000842  5007               	movf	??_ADC_ISR+1,w,c
  8056  000844  22DA               	addwfc	fsr2h,f,c
  8057  000846  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8058  00084A  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8059                           
  8060                           ;adc.c: 124: Temp_Aquire = 0;
  8061  00084E  0E00               	movlw	0
  8062  000850  6E3E               	movwf	_Temp_Aquire,c
  8063                           
  8064                           ;adc.c: 125: Temp_Done = 1;
  8065  000852  0E00               	movlw	0
  8066  000854  0100               	movlb	0	; () banked
  8067  000856  6FAD               	movwf	(_Temp_Done+1)& (0+255),b
  8068  000858  0E01               	movlw	1
  8069  00085A  0100               	movlb	0	; () banked
  8070  00085C  6FAC               	movwf	_Temp_Done& (0+255),b
  8071                           
  8072                           ; BSR set to: 0
  8073                           ;adc.c: 126: Set_4051(0,0);
  8074  00085E  0E00               	movlw	0
  8075  000860  6E02               	movwf	Set_4051@Channel+1,c
  8076  000862  0E00               	movlw	0
  8077  000864  6E01               	movwf	Set_4051@Channel,c
  8078  000866  0E00               	movlw	0
  8079  000868  6E03               	movwf	Set_4051@enable,c
  8080  00086A  ECE7  F011         	call	_Set_4051	;wreg free
  8081                           
  8082                           ;adc.c: 127: break;
  8083  00086E  D021               	goto	i2l3072
  8084  000870                     i2l3070:
  8085  000870  C03B  F006         	movff	_ADC_Buffer_Point,??_ADC_ISR
  8086  000874  C03C  F007         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  8087                           
  8088                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8089                           ; Switch size 1, requested type "space"
  8090                           ; Number of cases is 1, Range of values is 0 to 0
  8091                           ; switch strategies available:
  8092                           ; Name         Instructions Cycles
  8093                           ; simple_byte            4     3 (average)
  8094                           ;	Chosen strategy is simple_byte
  8095  000878  5007               	movf	??_ADC_ISR+1,w,c
  8096  00087A  0A00               	xorlw	0	; case 0
  8097  00087C  A4D8               	btfss	status,2,c
  8098  00087E  D019               	goto	i2l3072
  8099                           
  8100                           ; Switch size 1, requested type "space"
  8101                           ; Number of cases is 8, Range of values is 0 to 7
  8102                           ; switch strategies available:
  8103                           ; Name         Instructions Cycles
  8104                           ; simple_byte           25    13 (average)
  8105                           ;	Chosen strategy is simple_byte
  8106  000880  5006               	movf	??_ADC_ISR,w,c
  8107  000882  0A00               	xorlw	0	; case 0
  8108  000884  B4D8               	btfsc	status,2,c
  8109  000886  D707               	goto	i2l3018
  8110  000888  0A01               	xorlw	1	; case 1
  8111  00088A  B4D8               	btfsc	status,2,c
  8112  00088C  D721               	goto	i2l3024
  8113  00088E  0A03               	xorlw	3	; case 2
  8114  000890  B4D8               	btfsc	status,2,c
  8115  000892  D73B               	goto	i2l3030
  8116  000894  0A01               	xorlw	1	; case 3
  8117  000896  B4D8               	btfsc	status,2,c
  8118  000898  D755               	goto	i2l3036
  8119  00089A  0A07               	xorlw	7	; case 4
  8120  00089C  B4D8               	btfsc	status,2,c
  8121  00089E  D76F               	goto	i2l3042
  8122  0008A0  0A01               	xorlw	1	; case 5
  8123  0008A2  B4D8               	btfsc	status,2,c
  8124  0008A4  D789               	goto	i2l3048
  8125  0008A6  0A03               	xorlw	3	; case 6
  8126  0008A8  B4D8               	btfsc	status,2,c
  8127  0008AA  D7A3               	goto	i2l3054
  8128  0008AC  0A01               	xorlw	1	; case 7
  8129  0008AE  B4D8               	btfsc	status,2,c
  8130  0008B0  D7BD               	goto	i2l3060
  8131  0008B2                     i2l3072:
  8132                           
  8133                           ;adc.c: 129: ADC_Buffer_Point++;
  8134  0008B2  4A3B               	infsnz	_ADC_Buffer_Point,f,c
  8135  0008B4  2A3C               	incf	_ADC_Buffer_Point+1,f,c
  8136  0008B6                     i2l3074:
  8137                           
  8138                           ;adc.c: 130: }
  8139                           ;adc.c: 131: if (Current_Aquire){
  8140  0008B6  503D               	movf	_Current_Aquire,w,c
  8141  0008B8  B4D8               	btfsc	status,2,c
  8142  0008BA  D08F               	goto	i2l3106
  8143                           
  8144                           ;adc.c: 133: ADC_Result = ADC_GetConversionResult();
  8145  0008BC  EC92  F013         	call	_ADC_GetConversionResult	;wreg free
  8146  0008C0  C001  F008         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  8147  0008C4  C002  F009         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  8148                           
  8149                           ;adc.c: 134: switch ( ADC_Buffer_Point )
  8150  0008C8  D06E               	goto	i2l3102
  8151  0008CA                     i2l3078:
  8152                           
  8153                           ;adc.c: 137: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  8154  0008CA  0E74               	movlw	low _Current_Adc
  8155  0008CC  6E06               	movwf	??_ADC_ISR& (0+255),c
  8156  0008CE  0E00               	movlw	high _Current_Adc
  8157  0008D0  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8158  0008D2  90D8               	bcf	status,0,c
  8159  0008D4  343B               	rlcf	_ADC_Buffer_Point,w,c
  8160  0008D6  6ED9               	movwf	fsr2l,c
  8161  0008D8  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8162  0008DA  6EDA               	movwf	fsr2h,c
  8163  0008DC  5006               	movf	??_ADC_ISR,w,c
  8164  0008DE  26D9               	addwf	fsr2l,f,c
  8165  0008E0  5007               	movf	??_ADC_ISR+1,w,c
  8166  0008E2  22DA               	addwfc	fsr2h,f,c
  8167  0008E4  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8168  0008E8  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8169                           
  8170                           ;adc.c: 138: ADC_StartConversion(Asen);
  8171  0008EC  0E0B               	movlw	11
  8172  0008EE  EC55  F013         	call	_ADC_StartConversion
  8173                           
  8174                           ;adc.c: 139: break;
  8175  0008F2  D071               	goto	i2l3104
  8176  0008F4                     i2l3082:
  8177                           
  8178                           ;adc.c: 141: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  8179  0008F4  0E74               	movlw	low _Current_Adc
  8180  0008F6  6E06               	movwf	??_ADC_ISR& (0+255),c
  8181  0008F8  0E00               	movlw	high _Current_Adc
  8182  0008FA  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8183  0008FC  90D8               	bcf	status,0,c
  8184  0008FE  343B               	rlcf	_ADC_Buffer_Point,w,c
  8185  000900  6ED9               	movwf	fsr2l,c
  8186  000902  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8187  000904  6EDA               	movwf	fsr2h,c
  8188  000906  5006               	movf	??_ADC_ISR,w,c
  8189  000908  26D9               	addwf	fsr2l,f,c
  8190  00090A  5007               	movf	??_ADC_ISR+1,w,c
  8191  00090C  22DA               	addwfc	fsr2h,f,c
  8192  00090E  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8193  000912  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8194                           
  8195                           ;adc.c: 142: ADC_StartConversion(Asen);
  8196  000916  0E0B               	movlw	11
  8197  000918  EC55  F013         	call	_ADC_StartConversion
  8198                           
  8199                           ;adc.c: 143: break;
  8200  00091C  D05C               	goto	i2l3104
  8201  00091E                     i2l3086:
  8202                           
  8203                           ;adc.c: 145: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  8204  00091E  0E74               	movlw	low _Current_Adc
  8205  000920  6E06               	movwf	??_ADC_ISR& (0+255),c
  8206  000922  0E00               	movlw	high _Current_Adc
  8207  000924  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8208  000926  90D8               	bcf	status,0,c
  8209  000928  343B               	rlcf	_ADC_Buffer_Point,w,c
  8210  00092A  6ED9               	movwf	fsr2l,c
  8211  00092C  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8212  00092E  6EDA               	movwf	fsr2h,c
  8213  000930  5006               	movf	??_ADC_ISR,w,c
  8214  000932  26D9               	addwf	fsr2l,f,c
  8215  000934  5007               	movf	??_ADC_ISR+1,w,c
  8216  000936  22DA               	addwfc	fsr2h,f,c
  8217  000938  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8218  00093C  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8219                           
  8220                           ;adc.c: 146: ADC_StartConversion(Asen);
  8221  000940  0E0B               	movlw	11
  8222  000942  EC55  F013         	call	_ADC_StartConversion
  8223                           
  8224                           ;adc.c: 147: break;
  8225  000946  D047               	goto	i2l3104
  8226  000948                     i2l3090:
  8227                           
  8228                           ;adc.c: 149: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  8229  000948  0E74               	movlw	low _Current_Adc
  8230  00094A  6E06               	movwf	??_ADC_ISR& (0+255),c
  8231  00094C  0E00               	movlw	high _Current_Adc
  8232  00094E  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8233  000950  90D8               	bcf	status,0,c
  8234  000952  343B               	rlcf	_ADC_Buffer_Point,w,c
  8235  000954  6ED9               	movwf	fsr2l,c
  8236  000956  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8237  000958  6EDA               	movwf	fsr2h,c
  8238  00095A  5006               	movf	??_ADC_ISR,w,c
  8239  00095C  26D9               	addwf	fsr2l,f,c
  8240  00095E  5007               	movf	??_ADC_ISR+1,w,c
  8241  000960  22DA               	addwfc	fsr2h,f,c
  8242  000962  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8243  000966  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8244                           
  8245                           ;adc.c: 150: ADC_StartConversion(Asen);
  8246  00096A  0E0B               	movlw	11
  8247  00096C  EC55  F013         	call	_ADC_StartConversion
  8248                           
  8249                           ;adc.c: 151: break;
  8250  000970  D032               	goto	i2l3104
  8251  000972                     i2l3094:
  8252                           
  8253                           ;adc.c: 153: Current_Adc[ADC_Buffer_Point] = ADC_Result;
  8254  000972  0E74               	movlw	low _Current_Adc
  8255  000974  6E06               	movwf	??_ADC_ISR& (0+255),c
  8256  000976  0E00               	movlw	high _Current_Adc
  8257  000978  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8258  00097A  90D8               	bcf	status,0,c
  8259  00097C  343B               	rlcf	_ADC_Buffer_Point,w,c
  8260  00097E  6ED9               	movwf	fsr2l,c
  8261  000980  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8262  000982  6EDA               	movwf	fsr2h,c
  8263  000984  5006               	movf	??_ADC_ISR,w,c
  8264  000986  26D9               	addwf	fsr2l,f,c
  8265  000988  5007               	movf	??_ADC_ISR+1,w,c
  8266  00098A  22DA               	addwfc	fsr2h,f,c
  8267  00098C  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8268  000990  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8269                           
  8270                           ;adc.c: 154: Current_Aquire = 0;
  8271  000994  0E00               	movlw	0
  8272  000996  6E3D               	movwf	_Current_Aquire,c
  8273                           
  8274                           ;adc.c: 155: Current_Done = 1;
  8275  000998  0E00               	movlw	0
  8276  00099A  0100               	movlb	0	; () banked
  8277  00099C  6FAB               	movwf	(_Current_Done+1)& (0+255),b
  8278  00099E  0E01               	movlw	1
  8279  0009A0  0100               	movlb	0	; () banked
  8280  0009A2  6FAA               	movwf	_Current_Done& (0+255),b
  8281                           
  8282                           ;adc.c: 156: break;
  8283  0009A4  D018               	goto	i2l3104
  8284  0009A6                     i2l3102:
  8285  0009A6  C03B  F006         	movff	_ADC_Buffer_Point,??_ADC_ISR
  8286  0009AA  C03C  F007         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  8287                           
  8288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8289                           ; Switch size 1, requested type "space"
  8290                           ; Number of cases is 1, Range of values is 0 to 0
  8291                           ; switch strategies available:
  8292                           ; Name         Instructions Cycles
  8293                           ; simple_byte            4     3 (average)
  8294                           ;	Chosen strategy is simple_byte
  8295  0009AE  5007               	movf	??_ADC_ISR+1,w,c
  8296  0009B0  0A00               	xorlw	0	; case 0
  8297  0009B2  A4D8               	btfss	status,2,c
  8298  0009B4  D010               	goto	i2l3104
  8299                           
  8300                           ; Switch size 1, requested type "space"
  8301                           ; Number of cases is 5, Range of values is 0 to 4
  8302                           ; switch strategies available:
  8303                           ; Name         Instructions Cycles
  8304                           ; simple_byte           16     9 (average)
  8305                           ;	Chosen strategy is simple_byte
  8306  0009B6  5006               	movf	??_ADC_ISR,w,c
  8307  0009B8  0A00               	xorlw	0	; case 0
  8308  0009BA  B4D8               	btfsc	status,2,c
  8309  0009BC  D786               	goto	i2l3078
  8310  0009BE  0A01               	xorlw	1	; case 1
  8311  0009C0  B4D8               	btfsc	status,2,c
  8312  0009C2  D798               	goto	i2l3082
  8313  0009C4  0A03               	xorlw	3	; case 2
  8314  0009C6  B4D8               	btfsc	status,2,c
  8315  0009C8  D7AA               	goto	i2l3086
  8316  0009CA  0A01               	xorlw	1	; case 3
  8317  0009CC  B4D8               	btfsc	status,2,c
  8318  0009CE  D7BC               	goto	i2l3090
  8319  0009D0  0A07               	xorlw	7	; case 4
  8320  0009D2  B4D8               	btfsc	status,2,c
  8321  0009D4  D7CE               	goto	i2l3094
  8322  0009D6                     i2l3104:
  8323                           
  8324                           ;adc.c: 158: ADC_Buffer_Point++;
  8325  0009D6  4A3B               	infsnz	_ADC_Buffer_Point,f,c
  8326  0009D8  2A3C               	incf	_ADC_Buffer_Point+1,f,c
  8327  0009DA                     i2l3106:
  8328                           
  8329                           ;adc.c: 159: }
  8330                           ;adc.c: 160: if (Volt_Aquire){
  8331  0009DA  503F               	movf	_Volt_Aquire,w,c
  8332  0009DC  B4D8               	btfsc	status,2,c
  8333  0009DE  D0BF               	goto	i2l153
  8334                           
  8335                           ;adc.c: 162: ADC_Result = ADC_GetConversionResult();
  8336  0009E0  EC92  F013         	call	_ADC_GetConversionResult	;wreg free
  8337  0009E4  C001  F008         	movff	?_ADC_GetConversionResult,ADC_ISR@ADC_Result
  8338  0009E8  C002  F009         	movff	?_ADC_GetConversionResult+1,ADC_ISR@ADC_Result+1
  8339                           
  8340                           ;adc.c: 163: switch ( ADC_Buffer_Point )
  8341  0009EC  D098               	goto	i2l3142
  8342  0009EE                     i2l3110:
  8343                           
  8344                           ;adc.c: 166: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8345  0009EE  0E60               	movlw	low _Battery_Adc
  8346  0009F0  6E06               	movwf	??_ADC_ISR& (0+255),c
  8347  0009F2  0E00               	movlw	high _Battery_Adc
  8348  0009F4  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8349  0009F6  90D8               	bcf	status,0,c
  8350  0009F8  343B               	rlcf	_ADC_Buffer_Point,w,c
  8351  0009FA  6ED9               	movwf	fsr2l,c
  8352  0009FC  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8353  0009FE  6EDA               	movwf	fsr2h,c
  8354  000A00  5006               	movf	??_ADC_ISR,w,c
  8355  000A02  26D9               	addwf	fsr2l,f,c
  8356  000A04  5007               	movf	??_ADC_ISR+1,w,c
  8357  000A06  22DA               	addwfc	fsr2h,f,c
  8358  000A08  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8359  000A0C  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8360                           
  8361                           ;adc.c: 167: ADC_StartConversion(AN_CELL2);
  8362  000A10  0E06               	movlw	6
  8363  000A12  EC55  F013         	call	_ADC_StartConversion
  8364                           
  8365                           ;adc.c: 168: break;
  8366  000A16  D0A1               	goto	i2l3144
  8367  000A18                     i2l3114:
  8368                           
  8369                           ;adc.c: 170: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8370  000A18  0E60               	movlw	low _Battery_Adc
  8371  000A1A  6E06               	movwf	??_ADC_ISR& (0+255),c
  8372  000A1C  0E00               	movlw	high _Battery_Adc
  8373  000A1E  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8374  000A20  90D8               	bcf	status,0,c
  8375  000A22  343B               	rlcf	_ADC_Buffer_Point,w,c
  8376  000A24  6ED9               	movwf	fsr2l,c
  8377  000A26  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8378  000A28  6EDA               	movwf	fsr2h,c
  8379  000A2A  5006               	movf	??_ADC_ISR,w,c
  8380  000A2C  26D9               	addwf	fsr2l,f,c
  8381  000A2E  5007               	movf	??_ADC_ISR+1,w,c
  8382  000A30  22DA               	addwfc	fsr2h,f,c
  8383  000A32  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8384  000A36  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8385                           
  8386                           ;adc.c: 171: ADC_StartConversion(AN_CELL3);
  8387  000A3A  0E05               	movlw	5
  8388  000A3C  EC55  F013         	call	_ADC_StartConversion
  8389                           
  8390                           ;adc.c: 172: break;
  8391  000A40  D08C               	goto	i2l3144
  8392  000A42                     i2l3118:
  8393                           
  8394                           ;adc.c: 174: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8395  000A42  0E60               	movlw	low _Battery_Adc
  8396  000A44  6E06               	movwf	??_ADC_ISR& (0+255),c
  8397  000A46  0E00               	movlw	high _Battery_Adc
  8398  000A48  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8399  000A4A  90D8               	bcf	status,0,c
  8400  000A4C  343B               	rlcf	_ADC_Buffer_Point,w,c
  8401  000A4E  6ED9               	movwf	fsr2l,c
  8402  000A50  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8403  000A52  6EDA               	movwf	fsr2h,c
  8404  000A54  5006               	movf	??_ADC_ISR,w,c
  8405  000A56  26D9               	addwf	fsr2l,f,c
  8406  000A58  5007               	movf	??_ADC_ISR+1,w,c
  8407  000A5A  22DA               	addwfc	fsr2h,f,c
  8408  000A5C  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8409  000A60  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8410                           
  8411                           ;adc.c: 175: ADC_StartConversion(AN_CELL4);
  8412  000A64  0E04               	movlw	4
  8413  000A66  EC55  F013         	call	_ADC_StartConversion
  8414                           
  8415                           ;adc.c: 176: break;
  8416  000A6A  D077               	goto	i2l3144
  8417  000A6C                     i2l3122:
  8418                           
  8419                           ;adc.c: 178: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8420  000A6C  0E60               	movlw	low _Battery_Adc
  8421  000A6E  6E06               	movwf	??_ADC_ISR& (0+255),c
  8422  000A70  0E00               	movlw	high _Battery_Adc
  8423  000A72  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8424  000A74  90D8               	bcf	status,0,c
  8425  000A76  343B               	rlcf	_ADC_Buffer_Point,w,c
  8426  000A78  6ED9               	movwf	fsr2l,c
  8427  000A7A  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8428  000A7C  6EDA               	movwf	fsr2h,c
  8429  000A7E  5006               	movf	??_ADC_ISR,w,c
  8430  000A80  26D9               	addwf	fsr2l,f,c
  8431  000A82  5007               	movf	??_ADC_ISR+1,w,c
  8432  000A84  22DA               	addwfc	fsr2h,f,c
  8433  000A86  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8434  000A8A  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8435                           
  8436                           ;adc.c: 179: ADC_StartConversion(AN_CELL5);
  8437  000A8E  0E03               	movlw	3
  8438  000A90  EC55  F013         	call	_ADC_StartConversion
  8439                           
  8440                           ;adc.c: 180: break;
  8441  000A94  D062               	goto	i2l3144
  8442  000A96                     i2l3126:
  8443                           
  8444                           ;adc.c: 182: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8445  000A96  0E60               	movlw	low _Battery_Adc
  8446  000A98  6E06               	movwf	??_ADC_ISR& (0+255),c
  8447  000A9A  0E00               	movlw	high _Battery_Adc
  8448  000A9C  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8449  000A9E  90D8               	bcf	status,0,c
  8450  000AA0  343B               	rlcf	_ADC_Buffer_Point,w,c
  8451  000AA2  6ED9               	movwf	fsr2l,c
  8452  000AA4  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8453  000AA6  6EDA               	movwf	fsr2h,c
  8454  000AA8  5006               	movf	??_ADC_ISR,w,c
  8455  000AAA  26D9               	addwf	fsr2l,f,c
  8456  000AAC  5007               	movf	??_ADC_ISR+1,w,c
  8457  000AAE  22DA               	addwfc	fsr2h,f,c
  8458  000AB0  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8459  000AB4  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8460                           
  8461                           ;adc.c: 183: ADC_StartConversion(AN_CELL6);
  8462  000AB8  0E01               	movlw	1
  8463  000ABA  EC55  F013         	call	_ADC_StartConversion
  8464                           
  8465                           ;adc.c: 184: break;
  8466  000ABE  D04D               	goto	i2l3144
  8467  000AC0                     i2l3130:
  8468                           
  8469                           ;adc.c: 186: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8470  000AC0  0E60               	movlw	low _Battery_Adc
  8471  000AC2  6E06               	movwf	??_ADC_ISR& (0+255),c
  8472  000AC4  0E00               	movlw	high _Battery_Adc
  8473  000AC6  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8474  000AC8  90D8               	bcf	status,0,c
  8475  000ACA  343B               	rlcf	_ADC_Buffer_Point,w,c
  8476  000ACC  6ED9               	movwf	fsr2l,c
  8477  000ACE  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8478  000AD0  6EDA               	movwf	fsr2h,c
  8479  000AD2  5006               	movf	??_ADC_ISR,w,c
  8480  000AD4  26D9               	addwf	fsr2l,f,c
  8481  000AD6  5007               	movf	??_ADC_ISR+1,w,c
  8482  000AD8  22DA               	addwfc	fsr2h,f,c
  8483  000ADA  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8484  000ADE  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8485                           
  8486                           ;adc.c: 187: ADC_StartConversion(AN_CELL7);
  8487  000AE2  0E00               	movlw	0
  8488  000AE4  EC55  F013         	call	_ADC_StartConversion
  8489                           
  8490                           ;adc.c: 188: break;
  8491  000AE8  D038               	goto	i2l3144
  8492  000AEA                     i2l3134:
  8493                           
  8494                           ;adc.c: 190: Battery_Adc[ADC_Buffer_Point] = ADC_Result;
  8495  000AEA  0E60               	movlw	low _Battery_Adc
  8496  000AEC  6E06               	movwf	??_ADC_ISR& (0+255),c
  8497  000AEE  0E00               	movlw	high _Battery_Adc
  8498  000AF0  6E07               	movwf	(??_ADC_ISR+1)& (0+255),c
  8499  000AF2  90D8               	bcf	status,0,c
  8500  000AF4  343B               	rlcf	_ADC_Buffer_Point,w,c
  8501  000AF6  6ED9               	movwf	fsr2l,c
  8502  000AF8  343C               	rlcf	_ADC_Buffer_Point+1,w,c
  8503  000AFA  6EDA               	movwf	fsr2h,c
  8504  000AFC  5006               	movf	??_ADC_ISR,w,c
  8505  000AFE  26D9               	addwf	fsr2l,f,c
  8506  000B00  5007               	movf	??_ADC_ISR+1,w,c
  8507  000B02  22DA               	addwfc	fsr2h,f,c
  8508  000B04  C008  FFDE         	movff	ADC_ISR@ADC_Result,postinc2
  8509  000B08  C009  FFDD         	movff	ADC_ISR@ADC_Result+1,postdec2
  8510                           
  8511                           ;adc.c: 191: Volt_Aquire = 0;
  8512  000B0C  0E00               	movlw	0
  8513  000B0E  6E3F               	movwf	_Volt_Aquire,c
  8514                           
  8515                           ;adc.c: 192: Volt_Done = 1;
  8516  000B10  0E00               	movlw	0
  8517  000B12  0100               	movlb	0	; () banked
  8518  000B14  6FAF               	movwf	(_Volt_Done+1)& (0+255),b
  8519  000B16  0E01               	movlw	1
  8520  000B18  0100               	movlb	0	; () banked
  8521  000B1A  6FAE               	movwf	_Volt_Done& (0+255),b
  8522                           
  8523                           ;adc.c: 193: break;
  8524  000B1C  D01E               	goto	i2l3144
  8525  000B1E                     i2l3142:
  8526  000B1E  C03B  F006         	movff	_ADC_Buffer_Point,??_ADC_ISR
  8527  000B22  C03C  F007         	movff	_ADC_Buffer_Point+1,??_ADC_ISR+1
  8528                           
  8529                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8530                           ; Switch size 1, requested type "space"
  8531                           ; Number of cases is 1, Range of values is 0 to 0
  8532                           ; switch strategies available:
  8533                           ; Name         Instructions Cycles
  8534                           ; simple_byte            4     3 (average)
  8535                           ;	Chosen strategy is simple_byte
  8536  000B26  5007               	movf	??_ADC_ISR+1,w,c
  8537  000B28  0A00               	xorlw	0	; case 0
  8538  000B2A  A4D8               	btfss	status,2,c
  8539  000B2C  D016               	goto	i2l3144
  8540                           
  8541                           ; Switch size 1, requested type "space"
  8542                           ; Number of cases is 7, Range of values is 0 to 6
  8543                           ; switch strategies available:
  8544                           ; Name         Instructions Cycles
  8545                           ; simple_byte           22    12 (average)
  8546                           ;	Chosen strategy is simple_byte
  8547  000B2E  5006               	movf	??_ADC_ISR,w,c
  8548  000B30  0A00               	xorlw	0	; case 0
  8549  000B32  B4D8               	btfsc	status,2,c
  8550  000B34  D75C               	goto	i2l3110
  8551  000B36  0A01               	xorlw	1	; case 1
  8552  000B38  B4D8               	btfsc	status,2,c
  8553  000B3A  D76E               	goto	i2l3114
  8554  000B3C  0A03               	xorlw	3	; case 2
  8555  000B3E  B4D8               	btfsc	status,2,c
  8556  000B40  D780               	goto	i2l3118
  8557  000B42  0A01               	xorlw	1	; case 3
  8558  000B44  B4D8               	btfsc	status,2,c
  8559  000B46  D792               	goto	i2l3122
  8560  000B48  0A07               	xorlw	7	; case 4
  8561  000B4A  B4D8               	btfsc	status,2,c
  8562  000B4C  D7A4               	goto	i2l3126
  8563  000B4E  0A01               	xorlw	1	; case 5
  8564  000B50  B4D8               	btfsc	status,2,c
  8565  000B52  D7B6               	goto	i2l3130
  8566  000B54  0A03               	xorlw	3	; case 6
  8567  000B56  B4D8               	btfsc	status,2,c
  8568  000B58  D7C8               	goto	i2l3134
  8569  000B5A                     i2l3144:
  8570                           
  8571                           ;adc.c: 195: ADC_Buffer_Point++;
  8572  000B5A  4A3B               	infsnz	_ADC_Buffer_Point,f,c
  8573  000B5C  2A3C               	incf	_ADC_Buffer_Point+1,f,c
  8574  000B5E                     i2l153:
  8575  000B5E  0003               	sleep		;# 
  8576  000B60  0012               	return	
  8577  000B62                     __end_of_ADC_ISR:
  8578                           	opt stack 0
  8579                           pclatu	equ	0xFFB
  8580                           pclath	equ	0xFFA
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           intcon2	equ	0xFF1
  8589                           postinc0	equ	0xFEE
  8590                           fsr0h	equ	0xFEA
  8591                           fsr0l	equ	0xFE9
  8592                           wreg	equ	0xFE8
  8593                           postinc1	equ	0xFE6
  8594                           postdec1	equ	0xFE5
  8595                           fsr1h	equ	0xFE2
  8596                           fsr1l	equ	0xFE1
  8597                           indf2	equ	0xFDF
  8598                           postinc2	equ	0xFDE
  8599                           postdec2	equ	0xFDD
  8600                           fsr2h	equ	0xFDA
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function _Set_4051 *****************
  8605 ;; Defined at:
  8606 ;;		line 8 in file "Functions.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  Channel         2    0[COMRAM] int 
  8609 ;;  enable          1    2[COMRAM] unsigned char 
  8610 ;; Auto vars:     Size  Location     Type
  8611 ;;		None
  8612 ;; Return value:  Size  Location     Type
  8613 ;;		None               void
  8614 ;; Registers used:
  8615 ;;		wreg, status,2, status,0
  8616 ;; Tracked objects:
  8617 ;;		On entry : 0/0
  8618 ;;		On exit  : 0/0
  8619 ;;		Unchanged: 0/0
  8620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8621 ;;      Params:         3       0       0       0       0       0       0
  8622 ;;      Locals:         0       0       0       0       0       0       0
  8623 ;;      Temps:          2       0       0       0       0       0       0
  8624 ;;      Totals:         5       0       0       0       0       0       0
  8625 ;;Total ram usage:        5 bytes
  8626 ;; Hardware stack levels used:    1
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_ADC_ISR
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text46
  8635  0023CE                     __ptext46:
  8636                           	opt stack 0
  8637  0023CE                     _Set_4051:
  8638                           	opt stack 23
  8639                           
  8640                           ;Functions.c: 10: if (Channel & 0x01)
  8641                           
  8642                           ;incstack = 0
  8643  0023CE  A001               	btfss	Set_4051@Channel,0,c
  8644  0023D0  D002               	goto	i2l381
  8645                           
  8646                           ;Functions.c: 11: {
  8647                           ;Functions.c: 12: do { LATA7 = 1; } while(0);
  8648  0023D2  8E89               	bsf	3977,7,c	;volatile
  8649  0023D4  D001               	goto	i2l2804
  8650  0023D6                     i2l381:
  8651  0023D6  9E89               	bcf	3977,7,c	;volatile
  8652  0023D8                     i2l2804:
  8653                           
  8654                           ;Functions.c: 17: }
  8655                           ;Functions.c: 18: if ((Channel>>1) & 0x01)
  8656  0023D8  3402               	rlcf	Set_4051@Channel+1,w,c
  8657  0023DA  3002               	rrcf	Set_4051@Channel+1,w,c
  8658  0023DC  6E05               	movwf	(??_Set_4051+1)& (0+255),c
  8659  0023DE  3001               	rrcf	Set_4051@Channel,w,c
  8660  0023E0  6E04               	movwf	??_Set_4051& (0+255),c
  8661  0023E2  A004               	btfss	??_Set_4051,0,c
  8662  0023E4  D002               	goto	i2l387
  8663                           
  8664                           ;Functions.c: 19: {
  8665                           ;Functions.c: 20: do { LATA6 = 1; } while(0);
  8666  0023E6  8C89               	bsf	3977,6,c	;volatile
  8667  0023E8  D001               	goto	i2l2806
  8668  0023EA                     i2l387:
  8669  0023EA  9C89               	bcf	3977,6,c	;volatile
  8670  0023EC                     i2l2806:
  8671                           
  8672                           ;Functions.c: 25: }
  8673                           ;Functions.c: 26: if ((Channel>>2) & 0x01)
  8674  0023EC  C001  F004         	movff	Set_4051@Channel,??_Set_4051
  8675  0023F0  C002  F005         	movff	Set_4051@Channel+1,??_Set_4051+1
  8676  0023F4  3405               	rlcf	??_Set_4051+1,w,c
  8677  0023F6  3205               	rrcf	??_Set_4051+1,f,c
  8678  0023F8  3204               	rrcf	??_Set_4051,f,c
  8679  0023FA  3405               	rlcf	??_Set_4051+1,w,c
  8680  0023FC  3205               	rrcf	??_Set_4051+1,f,c
  8681  0023FE  3204               	rrcf	??_Set_4051,f,c
  8682  002400  A004               	btfss	??_Set_4051,0,c
  8683  002402  D002               	goto	i2l393
  8684                           
  8685                           ;Functions.c: 27: {
  8686                           ;Functions.c: 28: do { LATC0 = 1; } while(0);
  8687  002404  808B               	bsf	3979,0,c	;volatile
  8688  002406  D001               	goto	i2l2808
  8689  002408                     i2l393:
  8690  002408  908B               	bcf	3979,0,c	;volatile
  8691  00240A                     i2l2808:
  8692                           
  8693                           ;Functions.c: 33: }
  8694                           ;Functions.c: 34: if(enable == 1)
  8695  00240A  0403               	decf	Set_4051@enable,w,c
  8696  00240C  A4D8               	btfss	status,2,c
  8697  00240E  D002               	goto	i2l399
  8698                           
  8699                           ;Functions.c: 35: {
  8700                           ;Functions.c: 36: do { LATC3 = 0; } while(0);
  8701  002410  968B               	bcf	3979,3,c	;volatile
  8702  002412  0012               	return	
  8703  002414                     i2l399:
  8704  002414  868B               	bsf	3979,3,c	;volatile
  8705  002416  0012               	return	
  8706  002418                     __end_of_Set_4051:
  8707                           	opt stack 0
  8708                           pclatu	equ	0xFFB
  8709                           pclath	equ	0xFFA
  8710                           tblptru	equ	0xFF8
  8711                           tblptrh	equ	0xFF7
  8712                           tblptrl	equ	0xFF6
  8713                           tablat	equ	0xFF5
  8714                           prodh	equ	0xFF4
  8715                           prodl	equ	0xFF3
  8716                           intcon	equ	0xFF2
  8717                           intcon2	equ	0xFF1
  8718                           postinc0	equ	0xFEE
  8719                           fsr0h	equ	0xFEA
  8720                           fsr0l	equ	0xFE9
  8721                           wreg	equ	0xFE8
  8722                           postinc1	equ	0xFE6
  8723                           postdec1	equ	0xFE5
  8724                           fsr1h	equ	0xFE2
  8725                           fsr1l	equ	0xFE1
  8726                           indf2	equ	0xFDF
  8727                           postinc2	equ	0xFDE
  8728                           postdec2	equ	0xFDD
  8729                           fsr2h	equ	0xFDA
  8730                           fsr2l	equ	0xFD9
  8731                           status	equ	0xFD8
  8732                           
  8733 ;; *************** function _ADC_StartConversion *****************
  8734 ;; Defined at:
  8735 ;;		line 37 in file "mcc_generated_files/adc.c"
  8736 ;; Parameters:    Size  Location     Type
  8737 ;;  channel         1    wreg     enum E8837
  8738 ;; Auto vars:     Size  Location     Type
  8739 ;;  channel         1    1[COMRAM] enum E8837
  8740 ;; Return value:  Size  Location     Type
  8741 ;;		None               void
  8742 ;; Registers used:
  8743 ;;		wreg, status,2, status,0
  8744 ;; Tracked objects:
  8745 ;;		On entry : 0/0
  8746 ;;		On exit  : 0/0
  8747 ;;		Unchanged: 0/0
  8748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8749 ;;      Params:         0       0       0       0       0       0       0
  8750 ;;      Locals:         1       0       0       0       0       0       0
  8751 ;;      Temps:          1       0       0       0       0       0       0
  8752 ;;      Totals:         2       0       0       0       0       0       0
  8753 ;;Total ram usage:        2 bytes
  8754 ;; Hardware stack levels used:    1
  8755 ;; This function calls:
  8756 ;;		Nothing
  8757 ;; This function is called by:
  8758 ;;		_ADC_ISR
  8759 ;;		_Battery_Read
  8760 ;;		_Temp_Read
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           	psect	text47
  8765  0026AA                     __ptext47:
  8766                           	opt stack 0
  8767  0026AA                     _ADC_StartConversion:
  8768                           	opt stack 22
  8769                           
  8770                           ;incstack = 0
  8771                           ;ADC_StartConversion@channel stored from wreg
  8772  0026AA  6E02               	movwf	ADC_StartConversion@channel,c
  8773                           
  8774                           ;adc.c: 39: ADCON0bits.CHS = channel;
  8775  0026AC  C002  F001         	movff	ADC_StartConversion@channel,??_ADC_StartConversion
  8776  0026B0  4601               	rlncf	??_ADC_StartConversion,f,c
  8777  0026B2  4601               	rlncf	??_ADC_StartConversion,f,c
  8778  0026B4  50C2               	movf	4034,w,c	;volatile
  8779  0026B6  1801               	xorwf	??_ADC_StartConversion,w,c
  8780  0026B8  0B83               	andlw	-125
  8781  0026BA  1801               	xorwf	??_ADC_StartConversion,w,c
  8782  0026BC  6EC2               	movwf	4034,c	;volatile
  8783                           
  8784                           ;adc.c: 42: ADCON0bits.ADON = 1;
  8785  0026BE  80C2               	bsf	4034,0,c	;volatile
  8786                           
  8787                           ;adc.c: 46: ADCON0bits.GO_nDONE = 1;
  8788  0026C0  82C2               	bsf	4034,1,c	;volatile
  8789  0026C2  0012               	return	
  8790  0026C4                     __end_of_ADC_StartConversion:
  8791                           	opt stack 0
  8792                           pclatu	equ	0xFFB
  8793                           pclath	equ	0xFFA
  8794                           tblptru	equ	0xFF8
  8795                           tblptrh	equ	0xFF7
  8796                           tblptrl	equ	0xFF6
  8797                           tablat	equ	0xFF5
  8798                           prodh	equ	0xFF4
  8799                           prodl	equ	0xFF3
  8800                           intcon	equ	0xFF2
  8801                           intcon2	equ	0xFF1
  8802                           postinc0	equ	0xFEE
  8803                           fsr0h	equ	0xFEA
  8804                           fsr0l	equ	0xFE9
  8805                           wreg	equ	0xFE8
  8806                           postinc1	equ	0xFE6
  8807                           postdec1	equ	0xFE5
  8808                           fsr1h	equ	0xFE2
  8809                           fsr1l	equ	0xFE1
  8810                           indf2	equ	0xFDF
  8811                           postinc2	equ	0xFDE
  8812                           postdec2	equ	0xFDD
  8813                           fsr2h	equ	0xFDA
  8814                           fsr2l	equ	0xFD9
  8815                           status	equ	0xFD8
  8816                           
  8817 ;; *************** function _ADC_GetConversionResult *****************
  8818 ;; Defined at:
  8819 ;;		line 54 in file "mcc_generated_files/adc.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;		None
  8822 ;; Auto vars:     Size  Location     Type
  8823 ;;		None
  8824 ;; Return value:  Size  Location     Type
  8825 ;;                  2    0[COMRAM] unsigned int 
  8826 ;; Registers used:
  8827 ;;		wreg, status,2, status,0
  8828 ;; Tracked objects:
  8829 ;;		On entry : 0/0
  8830 ;;		On exit  : 0/0
  8831 ;;		Unchanged: 0/0
  8832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8833 ;;      Params:         2       0       0       0       0       0       0
  8834 ;;      Locals:         0       0       0       0       0       0       0
  8835 ;;      Temps:          2       0       0       0       0       0       0
  8836 ;;      Totals:         4       0       0       0       0       0       0
  8837 ;;Total ram usage:        4 bytes
  8838 ;; Hardware stack levels used:    1
  8839 ;; This function calls:
  8840 ;;		Nothing
  8841 ;; This function is called by:
  8842 ;;		_ADC_ISR
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           	psect	text48
  8847  002724                     __ptext48:
  8848                           	opt stack 0
  8849  002724                     _ADC_GetConversionResult:
  8850                           	opt stack 23
  8851                           
  8852                           ;adc.c: 56: return ((ADRESH << 8) + ADRESL);
  8853                           
  8854                           ;incstack = 0
  8855  002724  50C4               	movf	4036,w,c	;volatile
  8856  002726  6E04               	movwf	(??_ADC_GetConversionResult+1)& (0+255),c
  8857  002728  6A03               	clrf	??_ADC_GetConversionResult& (0+255),c
  8858  00272A  50C3               	movf	4035,w,c	;volatile
  8859  00272C  2403               	addwf	??_ADC_GetConversionResult,w,c
  8860  00272E  6E01               	movwf	?_ADC_GetConversionResult,c
  8861  002730  0E00               	movlw	0
  8862  002732  2004               	addwfc	??_ADC_GetConversionResult+1,w,c
  8863  002734  6E02               	movwf	?_ADC_GetConversionResult+1,c
  8864  002736  0012               	return	
  8865  002738                     __end_of_ADC_GetConversionResult:
  8866                           	opt stack 0
  8867                           pclatu	equ	0xFFB
  8868                           pclath	equ	0xFFA
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodh	equ	0xFF4
  8874                           prodl	equ	0xFF3
  8875                           intcon	equ	0xFF2
  8876                           intcon2	equ	0xFF1
  8877                           postinc0	equ	0xFEE
  8878                           fsr0h	equ	0xFEA
  8879                           fsr0l	equ	0xFE9
  8880                           wreg	equ	0xFE8
  8881                           postinc1	equ	0xFE6
  8882                           postdec1	equ	0xFE5
  8883                           fsr1h	equ	0xFE2
  8884                           fsr1l	equ	0xFE1
  8885                           indf2	equ	0xFDF
  8886                           postinc2	equ	0xFDE
  8887                           postdec2	equ	0xFDD
  8888                           fsr2h	equ	0xFDA
  8889                           fsr2l	equ	0xFD9
  8890                           status	equ	0xFD8
  8891                           pclatu	equ	0xFFB
  8892                           pclath	equ	0xFFA
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           intcon	equ	0xFF2
  8900                           intcon2	equ	0xFF1
  8901                           postinc0	equ	0xFEE
  8902                           fsr0h	equ	0xFEA
  8903                           fsr0l	equ	0xFE9
  8904                           wreg	equ	0xFE8
  8905                           postinc1	equ	0xFE6
  8906                           postdec1	equ	0xFE5
  8907                           fsr1h	equ	0xFE2
  8908                           fsr1l	equ	0xFE1
  8909                           indf2	equ	0xFDF
  8910                           postinc2	equ	0xFDE
  8911                           postdec2	equ	0xFDD
  8912                           fsr2h	equ	0xFDA
  8913                           fsr2l	equ	0xFD9
  8914                           status	equ	0xFD8
  8915                           
  8916                           	psect	rparam
  8917  0000                     pclatu	equ	0xFFB
  8918                           pclath	equ	0xFFA
  8919                           tblptru	equ	0xFF8
  8920                           tblptrh	equ	0xFF7
  8921                           tblptrl	equ	0xFF6
  8922                           tablat	equ	0xFF5
  8923                           prodh	equ	0xFF4
  8924                           prodl	equ	0xFF3
  8925                           intcon	equ	0xFF2
  8926                           intcon2	equ	0xFF1
  8927                           postinc0	equ	0xFEE
  8928                           fsr0h	equ	0xFEA
  8929                           fsr0l	equ	0xFE9
  8930                           wreg	equ	0xFE8
  8931                           postinc1	equ	0xFE6
  8932                           postdec1	equ	0xFE5
  8933                           fsr1h	equ	0xFE2
  8934                           fsr1l	equ	0xFE1
  8935                           indf2	equ	0xFDF
  8936                           postinc2	equ	0xFDE
  8937                           postdec2	equ	0xFDD
  8938                           fsr2h	equ	0xFDA
  8939                           fsr2l	equ	0xFD9
  8940                           status	equ	0xFD8


Data Sizes:
    Strings     91
    Constant    27
    Data        0
    BSS         294
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     53      72
    BANK0           160     56     160
    BANK1           256     13     187
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_8(CODE[4]), STR_7(CODE[14]), STR_6(CODE[22]), STR_5(CODE[11]), 
		 -> STR_4(CODE[7]), STR_3(CODE[17]), STR_2(CODE[15]), STR_1(CODE[5]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S1150$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_RunBypas
    _printf->_putch
    _putch->_EUSART1_Write
    _Temp_Fault->___ftge
    _Temp_Convert->___ftmul
    _log->___ftmul
    _eval_poly->___ftmul
    _Temp_Filter->___ftmul
    _RunBypas->___ftge
    _Battery_Get->___wmul
    _Current_Fault->___ftge
    _Current_Filter->___ftmul
    _Battery_Fault->___ftge
    ___ftge->___wmul
    _Battery_Convert->___ftmul
    ___ftdiv->___awtoft
    ___awtoft->___wmul
    _Battery_Filter->___ftmul
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_ADC_ISR
    _Temp_Read->_ADC_StartConversion
    _Current_Read->_ADC_GetConversion
    _Battery_Read->_ADC_StartConversion
    _ADC_ISR->_Set_4051

Critical Paths under _main in BANK0

    _main->_Temp_Convert
    _Temp_Convert->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    _Temp_Filter->___ftadd
    _Current_Convert->_Current_Filter
    _Current_Filter->___ftadd
    _Battery_Convert->_Battery_Filter
    _Battery_Filter->___ftadd
    ___ftmul->___ftdiv
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Temp_Convert

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5  157231
                                             49 BANK0      7     2      5
                                             11 BANK1      2     2      0
                    _Battery_Convert
                      _Battery_Fault
                    _Current_Convert
                      _Current_Fault
                              _Delay
                           _RunBypas
                  _SYSTEM_Initialize
                       _Temp_Convert
                         _Temp_Fault
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              12    10      2     777
                                             25 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      93
                                             24 COMRAM     1     1      0
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Fault                                           3     3      0    5956
                                             46 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Temp_Convert                                        13    13      0   72234
                                             47 BANK0      2     2      0
                                              0 BANK1     11    11      0
                        _Temp_Filter
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                             ___wmul
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  5     2      3   29289
                                             42 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                7     2      5     476
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           12     5      7   15292
                                             30 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    5753
                                             30 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _Temp_Filter                                          2     2      0   15030
                                             30 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RunBypas                                             7     7      0    6732
                                             46 COMRAM     7     7      0
                        _Battery_Get
                           _SetBypas
                             ___ftge
 ---------------------------------------------------------------------------------
 (2) _SetBypas                                             6     2      4     556
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _Battery_Get                                          3     0      3    4652
                                             37 COMRAM     3     0      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Delay                                                5     3      2     453
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _Current_Fault                                        3     3      0    5993
                                             46 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Current_Convert                                      6     6      0   27441
                                             32 BANK0      6     6      0
                     _Current_Filter
                            ___awdiv
                           ___awtoft
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                             23 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Current_Filter                                       2     2      0   19106
                                             30 BANK0      2     2      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Battery_Fault                                        3     3      0    5987
                                             46 COMRAM     3     3      0
                             ___ftge
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1276
                                             37 COMRAM     9     3      6
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Battery_Convert                                      4     4      0   31466
                                             32 BANK0      4     4      0
                     _Battery_Filter
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4045
                                             41 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2874
                                             37 COMRAM     4     1      3
                            ___awdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _Battery_Filter                                       2     2      0   15030
                                             30 BANK0      2     2      0
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    4544
                                             31 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    4843
                                             50 COMRAM     3     3      0
                                              6 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    5420
                                             18 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2433
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          14    14      0    1644
                                              9 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             3     3      0      66
                                              2 COMRAM     3     3      0
                       _Battery_Read
                       _Current_Read
                          _Temp_Read
 ---------------------------------------------------------------------------------
 (8) _Temp_Read                                            0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (8) _Current_Read                                         0     0      0      22
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (9) _ADC_GetConversion                                    2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Battery_Read                                         0     0      0      22
                _ADC_StartConversion
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              4     4      0    1578
                                              5 COMRAM     4     4      0
            _ADC_GetConversionResult
                _ADC_StartConversion
                           _Set_4051
 ---------------------------------------------------------------------------------
 (8) _Set_4051                                             5     2      3    1112
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (9) _ADC_StartConversion                                  2     2      0      22
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _ADC_GetConversionResult                              4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Battery_Convert
     _Battery_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
   _Battery_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Current_Convert
     _Current_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awdiv
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Current_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _Delay
   _RunBypas
     _Battery_Get
       ___wmul
         ___awdiv (ARG)
     _SetBypas
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer
   _Temp_Convert
     _Temp_Filter
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___wmul
         ___awdiv (ARG)
     ___awtoft
       ___awdiv (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
     ___ftadd
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
       _frexp (ARG)
     ___ftsub
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
     ___wmul
       ___awdiv (ARG)
     _log
       ___awtoft
         ___awdiv (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       ___ftmul
         ___awtoft (ARG)
           ___awdiv (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___awdiv (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___awdiv (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___awdiv (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
           _frexp (ARG)
         ___wmul
           ___awdiv (ARG)
       _frexp
   _Temp_Fault
     ___ftge
       ___wmul (ARG)
         ___awdiv (ARG)
     ___wmul
       ___awdiv (ARG)
   _printf
     _putch
       _EUSART1_Write

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     _ADC_GetConversionResult
     _ADC_StartConversion
     _Set_4051
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR1_ISR
     _Battery_Read
       _ADC_StartConversion
     _Current_Read
       _ADC_GetConversion
     _Temp_Read
       _ADC_StartConversion

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      D      BB       6       73.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     38      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     35      48       1       75.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A3       9        0.0%
DATA                 0      0     1A3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Sep 20 00:14:59 2015

           _eusart1TxBufferRemaining 0048                         ___awdiv@sign 001D  
                ___wmul@multiplicand 0022                         __CFG_CP0$OFF 000000  
                       __CFG_CP1$OFF 000000                         __CFG_CP2$OFF 000000  
                       __CFG_CP3$OFF 000000                       Set_4051@enable 0003  
                       ___ftadd@exp1 00E5                         ___ftadd@exp2 00E4  
                       ___ftadd@sign 00E3                                  l304 2472  
                                l404 25E8                                  l524 10E0  
                                l630 1F1A                                  l623 1F0A  
                                l615 1EFA                                  l571 2168  
                                l651 1F4A                                  l644 1F3A  
                                l637 1F2A                                  l658 1F5A  
                       __CFG_CPB$OFF 000000                         __CFG_CPD$OFF 000000  
                    _timer1ReloadVal 0046                                  _log 1436  
                    __end_of_ADC_ISR 0B62                                  prod 000FF3  
                                wreg 000FE8               __size_of_Current_Fault 0098  
                       __CFG_LVP$OFF 000000                      ?_Battery_Filter 0001  
                       ___ftdiv@cntr 00C8                        SetBypas@state 001A  
                       ___ftdiv@sign 00CD                                 l1030 0C30  
                               l1024 0BCE                                 l1028 0C08  
                               l1039 0D1A                                 l1048 0D44  
                               l1059 1AA4                                 l4000 1F4E  
                               l4100 1EE2                                 l4004 1F5E  
                               l4030 2088                                 l4120 1D6A  
                               l4104 1EE8                                 l4040 20AA  
                               l4024 2068                                 l4036 209E  
                               l4052 20D0                                 l4220 1C9E  
                               l4124 25DC                                 l4204 1E34  
                               l4038 20A6                                 l4142 237C  
                               l4064 2242                                 l4056 20DE  
                               l4048 20C6                                 l4240 2178  
                               l4074 229E                                 l4138 2376  
                               l4314 1114                                 l4068 2272  
                               l4236 216E                                 l4180 2608  
                               l3710 0CC8                                 l4182 260E  
                               l4334 115C                                 l3640 1FE2  
                               l3632 1FAC                                 l3704 0C9C  
                               l4176 1020                                 l4352 11E0  
                               l4360 1234                                 l4344 1190  
                               l4264 104C                                 l3706 0CB0  
                               l4098 1EDE                                 l3802 2498  
                               l4274 1074                                 l3644 1FF8  
                               l3636 1FBA                                 l3724 0D6E  
                               l3716 0CFC                                 l3708 0CBC  
                               l3812 19FC                                 l3804 249A  
                               l4348 11B8                                 l4364 123C  
                               l3646 2016                                 l3638 1FC4  
                               l3734 0DBC                                 l3718 0D10  
                               l3750 160C                                 l4198 1DF8  
                               l4358 1208                                 l4366 1248  
                               l4286 10A0                                 l3648 2020  
                               l3744 15D8                                 l4296 10C8  
                               l3682 0C16                                 l3818 1A26  
                               l3676 0BDC                                 l3764 165A  
                               l3860 243C                                 l3774 16A4  
                               l3838 1A74                                 l3790 2462  
                               l3688 0C26                                 l3768 1678  
                               l3872 21AA                                 l3960 14A4  
                               l3698 0C68                                 l3778 16C2  
                               l3954 1472                                 ?_log 00F2  
                               l3990 1EFE                                 l3886 1B26  
                               l3984 140C                                 l3992 1F0E  
                               l3888 1BB2                                 l3994 1F1E  
                               l3996 1F2E                                 l3988 1EEE  
                               l3998 1F3E                                 STR_1 0672  
                               STR_2 0643                                 STR_3 0632  
                               STR_4 066B                                 STR_5 0660  
                               STR_6 061C                                 STR_7 0652  
                               STR_8 063F                                 u3101 15EC  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                                 u3240 21D2  
                               u3081 15B8                                 u3305 144E  
                               u3171 19E2                                 u3191 1A0C  
                               u3248 21D4                                 u2871 0B7A  
                               u2881 0B9A                                 u3937 25DE  
                               _TMR1 000FCE                                 _WPUB 000F61  
                      _EUSART1_Write 2460                                 _main 1026  
                       ___ftpack@arg 0018                         ___ftpack@exp 001B  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                        __CFG_BORV$190 000000  
                               log@x 00F2                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00A8                        __CFG_IESO$OFF 000000  
                         _CodeRuning 00B2                         ___ftmul@cntr 00D8  
                       ___ftmul@sign 00D9                    ADC_ISR@ADC_Result 0008  
                              ??_log 0036              __size_of_Current_Filter 01DE  
                   ?_Battery_Convert 0001       __size_of_OSCILLATOR_Initialize 000E  
      __end_of_OSCILLATOR_Initialize 2746                       Current_Fault@i 0030  
                              ?_main 00F9                      __end_of___awdiv 20E8  
                    __end_of___ftadd 0DE2                      __end_of___ftdiv 1AD8  
                    _TMR1_StartTimer 275C                      __end_of___ftmul 170E  
                    ___awdiv@divisor 001A                                _T1CON 000FCD  
                    __end_of___ftsub 24DA                                _LATB0 007C50  
                              _LATB1 007C51                                _LATC0 007C58  
                              _LATB2 007C52                                _LATA4 007C4C  
                              _LATA6 007C4E                                _LATC3 007C5B  
                              _LATA7 007C4F                                _LATD2 007C62  
                              _LATD3 007C63                                _LATD4 007C64  
                              _LATD5 007C65                                _LATD6 007C66  
                              _LATD7 007C67                       __CFG_DEBUG$OFF 000000  
                              i2l230 006E                                i2l222 004C  
                              i2l128 2686                                i2l224 0058  
                              i2l153 0B5E                                i2l226 0064  
                              i2l316 253E                                i2l381 23D6  
                              i2l393 2408                                i2l387 23EA  
                              i2l399 2414                      ___awdiv@counter 001C  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96     __size_of_ADC_GetConversionResult 0014  
                              _Delay 25D2                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                 _EUSART1_Transmit_ISR 250E  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
                     __CFG_EBTR1$OFF 000000                       __CFG_EBTR2$OFF 000000  
                     __CFG_EBTR3$OFF 000000                        ?_Current_Read 0001  
                   __end_of_TMR1_ISR 2312                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0029  
                              _fault 00A7                                _frexp 2180  
                              _errno 00B0                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001C                                _putch 2752  
                     ?_EUSART1_Write 0001              __end_of_TMR1_Initialize 266E  
                        _Battery_Adc 0060                                tablat 000FF5  
                        _Battery_Get 2542                                status 000FD8  
                     __CFG_HFOFST$ON 000000                      RunBypas@cellbyp 002F  
                    RunBypas@batvolt 0031                       __CFG_PBADEN$ON 000000  
                    __initialization 25A4                          log@exponent 00F5  
                      _Current_Fault 20E8           __end_of_EUSART1_Initialize 250E  
                       __end_of_main 1258                     __end_of_Set_4051 2418  
                          ??_ADC_ISR 0006          ?_INTERRUPT_InterruptManager 0001  
                             ??_main 00FE                     __end_of_SetBypas 1F9C  
           __size_of_Current_Convert 00DA                        __activetblptr 000002  
         ADC_StartConversion@channel 0002                               ?_Delay 0018  
              ?_EUSART1_Transmit_ISR 0001                       ??_Current_Read 0003  
                   __end_of_RunBypas 1E3A                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                             ?_frexp 0018                               _ADRESH 000FC4  
                             _ADRESL 000FC3                     ___awdiv@dividend 0018  
                   __end_of___awtoft 2460                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 2044  
                    Current_Filter@x 00E6                               _T1GCON 000FCC  
                             _RC1STA 000FAB                __size_of_Battery_Read 0018  
                             i2l3000 22E6                               i2l3110 09EE  
                             i2l3102 09A6                               i2l3030 070A  
                             i2l3006 22FC                               i2l3104 09D6  
                             i2l3024 06D0                               i2l3130 0AC0  
                             i2l3122 0A6C                               i2l3114 0A18  
                             i2l3106 09DA                               i2l3042 077E  
                             i2l3018 0696                               i2l3060 082C  
                             i2l3036 0744                               i2l3134 0AEA  
                             i2l3126 0A96                               i2l3118 0A42  
                             i2l3142 0B1E                               i2l3054 07F2  
                             i2l3070 0870                               i2l3144 0B5A  
                             i2l3048 07B8                               i2l3072 08B2  
                             i2l3090 0948                               i2l3082 08F4  
                             i2l3074 08B6                               i2l3170 25A0  
                             i2l3162 257C                               i2l3094 0972  
                             i2l3086 091E                               i2l3078 08CA  
                             i2l3182 253A                       __CFG_WDTEN$OFF 000000  
                             i2l2804 23D8                               Delay@x 001B  
                             i2l2806 23EC                               i2l2808 240A  
                             i2l2994 22D2                               _RCREG1 000FAE  
                      ??_Temp_Filter 0036                               _OSCCON 000FD3  
                             _SPBRG1 000FAF                               _TX1STA 000FAC  
                             _TXREG1 000FAD                           _Temp_Fault 2312  
                     __CFG_XINST$OFF 000000                       ?_Current_Fault 0001  
                             ___ftge 2212              __end_of_TMR1_StartTimer 2760  
                             ___wmul 2626                            ??___awdiv 001C  
                          ??___ftadd 00E0                       __CFG_STVREN$ON 000000  
                          ??___ftdiv 0030                            ??___ftmul 0033  
                          ??___ftsub 0036                               clear_0 25AA  
                             clear_1 25B6                               clear_2 25C2  
                   ___awdiv@quotient 001E                   __size_of_Temp_Read 0018  
                             _printf 25FE                ___ftmul@f3_as_product 00D5  
                       _Battery_Read 270C                         _Battery_Volt 0100  
                       __mediumconst 0000                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
           ADC_GetConversion@channel 0002                      ??_EUSART1_Write 0018  
                    _eusart1RxBuffer 0097        __size_of_INTERRUPT_Initialize 000C  
                    _eusart1TxBuffer 009F                     ?_TMR1_Initialize 0001  
                  _SYSTEM_Initialize 2690                     __end_oflog@coeff 061C  
                         __accesstop 0060              __end_of__initialization 25C8  
                         ___ftadd@f1 00DA                           ___ftadd@f2 00DD  
                         ___ftge@ff1 0026                           ___ftge@ff2 0029  
                 ?_SYSTEM_Initialize 0001                         eval_poly@res 00EF  
                         ___ftdiv@f1 002A                           ___ftdiv@f2 002D  
                         ___ftdiv@f3 00C9                          SetBypas@pin 0018  
                         ___awtoft@c 0026                        __end_of_Delay 25FE  
                         ___ftmul@f1 00CE                           ___ftmul@f2 00D1  
                         ___ftsub@f1 00E6                           ___ftsub@f2 00E9  
                __end_of_Temp_Filter 1870         __size_of_ADC_StartConversion 001A  
                     __pcstackCOMRAM 0001                  ??_SYSTEM_Initialize 0018  
                          ?_TMR1_ISR 0001                       _Current_Filter 1258  
                     _Current_Aquire 003D                        __end_of_frexp 2212  
                      __end_of_putch 275C                          _Current_Adc 0074  
              Battery_Get@channelnum 0026               ??_EUSART1_Transmit_ISR 0001  
            _ADC_GetConversionResult 2724                     ??_Battery_Filter 0036  
                            ??_Delay 001A          __end_of_EUSART1_Receive_ISR 25A4  
                      ?_Temp_Convert 0001                    ??_Current_Convert 00E8  
                            ??_frexp 001D            __end_of_SYSTEM_Initialize 26AA  
                            ??_putch 0019                        _eusart1RxHead 0041  
                      _eusart1TxHead 0043                        _eusart1RxTail 0042  
                         __pbssBANK0 0060                           __pbssBANK1 0100  
                      _eusart1TxTail 0044                   __size_of_eval_poly 00F2  
                    __CFG_PLLCFG$OFF 000000                    __end_of_Temp_Read 26F4  
                          ?_Set_4051 0001                           __pnvCOMRAM 0046  
              Temp_Convert@steinhart 01B6                          ?_Temp_Fault 0001  
                    ??_Current_Fault 002F                            ?_SetBypas 0018  
                 __CFG_CCP2MX$PORTC1 000000               __end_of_Current_Filter 1436  
               __end_of_Current_Read 270C                          Temp_Fault@i 0030  
                _TempBattery_Current 019F                              ?___ftge 0026  
                          ?_RunBypas 0001                              ?___wmul 0020  
                   ?_TMR1_StartTimer 0001                           ??_TMR1_ISR 0003  
                 __CFG_CCP3MX$PORTB5 000000                              _ADC_ISR 0678  
                          ?___awtoft 0026                            ?___ftpack 0018  
                            ?_printf 001A              __size_of_ADC_Initialize 0018  
                      Temp_Convert@x 01B4                           _fault_flag 0045  
             __size_of_Battery_Fault 00B2                      Temp_Fault@fault 002F  
                   Current_Convert@x 00EC                       Battery_Fault@i 0030  
                            _OSCCON2 000FD2                       ??_Temp_Convert 00F7  
                 Current_Fault@fault 002F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                       ?_Battery_Get 0026                           ??_Set_4051 0004  
                        _Temp_Filter 170E                          _Temp_Aquire 003E  
                         ??_SetBypas 001C                      __CFG_PWRTEN$OFF 000000  
                            __Hparam 0000                              __Lparam 0000  
                    ?_Current_Filter 0001                           ??_RunBypas 002F  
                    __size_of___ftge 0090                              ___awdiv 2044  
                            ___ftadd 0B62                              ___ftdiv 19D2  
                    __size_of___wmul 0026                              ___ftmul 15A4  
                            ___ftsub 249E                         __psmallconst 0600  
          ??_ADC_GetConversionResult 0003                              __pcinit 25A4  
                         ??___awtoft 0029                           ??___ftpack 001D  
                  __end_of_eval_poly 1BCA                              __ramtop 0600  
                            __ptext0 1026                              __ptext1 25FE  
                            __ptext2 2752                              __ptext3 2460  
                            __ptext4 2312                              __ptext5 0DE2  
                            __ptext6 1436                              __ptext7 2180  
                            __ptext8 1AD8                              __ptext9 249E  
                    __size_of_printf 0028                            _T1CONbits 000FCD  
                            _infault 00B3                _OSCILLATOR_Initialize 2738  
                       __size_of_log 016E                  __size_of_Temp_Fault 006E  
                 _EUSART1_Initialize 24DA             ??_PIN_MANAGER_Initialize 0018  
           __size_of_Battery_Convert 00CC           __size_of_SYSTEM_Initialize 001A  
               end_of_initialization 25C8                            Delay@wait 0018  
                ?_EUSART1_Initialize 0001                        __Lmediumconst 0000  
                      _Battery_Fault 1E3A                              printf@c 001E  
                            printf@f 001A                              postdec1 000FE5  
                            postdec2 000FDD                              postinc0 000FEE  
                            postinc1 000FE6                              postinc2 000FDE  
                   Battery_Convert@x 00EA                 ??_EUSART1_Initialize 0018  
                _ADC_StartConversion 26AA                  EUSART1_Write@txData 0018  
                        _Volt_Aquire 003F                       ?_Battery_Fault 0001  
              __size_of_Current_Read 0018                          ___ftdiv@exp 00CC  
                        ___ftmul@exp 00D4                 ?_ADC_StartConversion 0001  
               __end_of_Temp_Convert 1026         __end_of_INTERRUPT_Initialize 2752  
                     __end_of___ftge 22A2                       __end_of___wmul 264C  
                    _Current_Convert 1BCA                    __size_of_TMR1_ISR 0070  
                     _ADC_Initialize 26C4               ?_OSCILLATOR_Initialize 0001  
                     __end_of_printf 2626                  start_initialization 25A4  
                         eval_poly@d 00E9                           eval_poly@n 00EB  
                         eval_poly@x 00E6                 _Current_Convert$1787 00EA  
    __size_of_PIN_MANAGER_Initialize 004E                         _Current_Done 00AA  
                       _Current_Mean 0036                         _Current_Read 26F4  
                        __end_of_log 15A4                          putch@txData 0019  
              __end_of_EUSART1_Write 249E                           frexp@value 0018  
                  ??_Battery_Convert 00E8                 __size_of_Battery_Get 0032  
                       ??_Temp_Fault 002F                    __size_of_Set_4051 004A  
                          _Temp_DegF 0148                     _PrevBattery_Volt 0118  
                          _Temp_Done 00AC                            _Temp_Read 26DC  
              ??_ADC_StartConversion 0001             __size_of_TMR1_Initialize 0022  
                  __size_of_SetBypas 00B0                             ??___ftge 002C  
                           ??___wmul 0024               __end_of_ADC_Initialize 26DC  
                          RunBypas@i 0034                             ?_ADC_ISR 0001  
                  __size_of_RunBypas 00CA                             ??_printf 001C  
                     _eusart1RxCount 0040                    __size_of___awtoft 0048  
                  __size_of___ftpack 00A8                            _Volt_Done 00AE  
              TMR1_ISR@CountCallBack 0039                          __pbssCOMRAM 0036  
      __size_of_EUSART1_Transmit_ISR 0034                        __pcstackBANK0 00C8  
                      __pcstackBANK1 01AE                   __end_of_Temp_Fault 2380  
                __end_of__stringdata 0677                        _PrevTemp_DegF 0130  
                    ??_Battery_Fault 002F         __size_of_EUSART1_Receive_ISR 0030  
                       ?_Temp_Filter 0001                     ??_Current_Filter 0036  
                         ?_Temp_Read 0001               _PIN_MANAGER_Initialize 2380  
              __end_of_Current_Fault 2180              __end_of_Current_Convert 1CA4  
                          __pintcode 0008                    _Temp_Convert$1785 01AE  
                  _Temp_Convert$1786 01B1                             ?___awdiv 0018  
                           ?___ftadd 00DA                             ?___ftdiv 002A  
                           ?___ftmul 00CE                             ?___ftsub 00E6  
                       Temp_Filter@x 00E6                      ?_ADC_Initialize 0001  
       ??_INTERRUPT_InterruptManager 000A                             _BAUD1CON 000FB8  
                        __smallconst 0600             __size_of_TMR1_StartTimer 0004  
                          _eval_poly 1AD8                       __size_of_Delay 002C  
                     __size_of_frexp 0092                       __size_of_putch 000A  
               _INTERRUPT_Initialize 2746              __size_of_Battery_Filter 0162  
                     ___wmul@product 0024                             _LATCbits 000F8B  
              __size_of_Temp_Convert 0244                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D  __size_of_INTERRUPT_InterruptManager 00A0  
                           _PIR1bits 000F9E                      Battery_Filter@x 00E6  
                           _RCONbits 000FD0                     __CFG_WDTPS$32768 000000  
                           _TMR1_ISR 22A2                    ??_TMR1_Initialize 0018  
                   __size_of_ADC_ISR 04EA                  _PrevBattery_Current 0160  
                         _ADCON0bits 000FC2                          __stringdata 061C  
                  ___wmul@multiplier 0020                        ?_Battery_Read 0001  
                         ?_eval_poly 00E6                         _Temp_Convert 0DE2  
                        _INTCON2bits 000FF1                ?_INTERRUPT_Initialize 0001  
                           _Set_4051 23CE                            frexp@eptr 001B  
                           _SetBypas 1EEC                             __Hrparam 0000  
                        ??_Temp_Read 0003                             _Temp_Adc 00B4  
                           __Lrparam 0000             ?_ADC_GetConversionResult 0001  
                  _ADC_GetConversion 266E                     ?_Current_Convert 0001  
                 __CFG_BOREN$SBORDIS 000000                             _RunBypas 1D70  
                  __CFG_P2BMX$PORTD2 000000              ??_OSCILLATOR_Initialize 0018  
                 ?_ADC_GetConversion 0001                     __size_of___awdiv 00A4  
                   __size_of___ftadd 0280                     __size_of___ftdiv 0106  
                   __size_of___ftmul 016A                     __size_of___ftsub 003C  
        __size_of_EUSART1_Initialize 0034                             ___awtoft 2418  
                           ___ftpack 1F9C                       ??_Battery_Read 0003  
                ??_ADC_GetConversion 0001                      _Battery_Convert 1CA4  
                 Battery_Fault@fault 002F                      _Battery_Current 0088  
                           __ptext10 170E                             __ptext11 2690  
                           __ptext20 1EEC                             __ptext12 264C  
                           __ptext21 2542                             __ptext13 275C  
                         _T1GCONbits 000FCC                             __ptext30 19D2  
                           __ptext22 25D2                             __ptext14 2380  
                           __ptext31 2418                             __ptext23 20E8  
                           __ptext15 2738                             __ptext40 26F4  
                           __ptext32 1870                             __ptext24 1BCA  
                           __ptext16 2746                             __ptext41 266E  
                           __ptext33 2626                             __ptext25 2044  
                           __ptext17 24DA                             __ptext42 270C  
                           __ptext34 15A4                             __ptext26 1258  
                           __ptext18 26C4                             __ptext43 250E  
                           __ptext35 0B62                             __ptext27 1E3A  
                           __ptext19 1D70                             __ptext44 2574  
                           __ptext36 1F9C                             __ptext28 2212  
                           __ptext45 0678                             __ptext29 1CA4  
                           __ptext46 23CE                             __ptext38 22A2  
                           __ptext47 26AA                             __ptext39 26DC  
                           __ptext48 2724                    ??_TMR1_StartTimer 0018  
                      __size_of_main 0232            __end_of_ADC_GetConversion 2690  
                       _TmpTemp_DegF 0187                 __size_of_Temp_Filter 0162  
                         _RC1STAbits 000FAB   __end_of_INTERRUPT_InterruptManager 00A8  
         _INTERRUPT_InterruptManager 0008                             main@argc 00F9  
                           main@argv 00FB                             main@next 01B9  
                _EUSART1_Receive_ISR 2574                             log@coeff 0601  
                         _INTCONbits 000FF2                          ??_eval_poly 00ED  
             ??_INTERRUPT_Initialize 0018                        ??_Battery_Get 0029  
                           intlevel2 0000                       _Battery_Filter 1870  
               ?_EUSART1_Receive_ISR 0001          __end_of_ADC_StartConversion 26C4  
                   _TempBattery_Volt 016F              ?_PIN_MANAGER_Initialize 0001  
    __end_of_ADC_GetConversionResult 2738         __end_of_EUSART1_Transmit_ISR 2542  
                   ??_ADC_Initialize 0018                             printf@ap 001C  
            __end_of_Battery_Convert 1D70               __size_of_EUSART1_Write 003E  
                  __CFG_T3CMX$PORTC0 000000               __end_of_Battery_Filter 19D2  
              ??_EUSART1_Receive_ISR 0001       __end_of_PIN_MANAGER_Initialize 23CE  
              __end_of_Battery_Fault 1EEC                    __CFG_FOSC$INTIO67 000000  
         __size_of_ADC_GetConversion 0022                 __end_of_Battery_Read 2724  
                    _TMR1_Initialize 264C                     _ADC_Buffer_Point 003B  
                __end_of_Battery_Get 2574                      Set_4051@Channel 0001  
