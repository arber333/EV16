
# 1 "BNO055.c"

# 4 "bno055.h"
void readAccelData(int * destination);
void readGyroData(int * destination);
char readGyroTempData();
void readMagData(int * destination);
void readQuatData(int * destination);
void readEulData(int * destination);
void readLIAData(int * destination);
void readGRVData(int * destination);
void initBNO055();
void accelgyroCalBNO055(float * dest1, float * dest2);
void magCalBNO055(float * dest1);
char readByte(char address, char subAddress);
void readBytes(char address, char subAddress, char count, char * dest);
char writeByte(char address, char subAddress, char data);
void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz);

# 147
enum Ascale {
AFS_2G = 0,
AFS_4G,
AFS_8G,
AFS_18G
};

enum Abw {
ABW_7_81Hz = 0,
ABW_15_63Hz,
ABW_31_25Hz,
ABW_62_5Hz,
ABW_125Hz,
ABW_250Hz,
ABW_500Hz,
ABW_1000Hz,
};

enum APwrMode {
NormalA = 0,
SuspendA,
LowPower1A,
StandbyA,
LowPower2A,
DeepSuspendA
};

enum Gscale {
GFS_2000DPS = 0,
GFS_1000DPS,
GFS_500DPS,
GFS_250DPS,
GFS_125DPS
};

enum GPwrMode {
NormalG = 0,
FastPowerUpG,
DeepSuspendedG,
SuspendG,
AdvancedPowerSaveG
};

enum Gbw {
GBW_523Hz = 0,
GBW_230Hz,
GBW_116Hz,
GBW_47Hz,
GBW_23Hz,
GBW_12Hz,
GBW_64Hz,
GBW_32Hz
};

enum OPRMode {
CONFIGMODE = 0x00,

ACCONLY,
MAGONLY,
GYROONLY,
ACCMAG,
ACCGYRO,
MAGGYRO,
AMG,

IMU,
COMPASS,
M4G,
NDOF_FMC_OFF,
NDOF
};

enum PWRMode {
Normalpwr = 0,
Lowpower,
Suspendpwr
};

enum Modr {
MODR_2Hz = 0,
MODR_6Hz,
MODR_8Hz,
MODR_10Hz,
MODR_15Hz,
MODR_20Hz,
MODR_25Hz,
MODR_30Hz
};

enum MOpMode {
LowPower = 0,
Regular,
EnhancedRegular,
HighAccuracy
};

enum MPwrMode {
Normal = 0,
Sleep,
Suspend,
ForceMode
};

char GPwrMode = NormalG;
char Gscale = GFS_250DPS;

char Gbw = GBW_23Hz;

char Ascale = AFS_2G;

char APwrMode = NormalA;
char Abw = ABW_31_25Hz;


char MOpMode = Regular;
char MPwrMode = Normal;
char Modr = MODR_10Hz;

char PWRMode = Normalpwr;
char OPRMode = NDOF;
char status;
float aRes, gRes, mRes;

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 7 "BNO055.c"
char intPin = 8;
char myLed = 13;

int accelCount[3];
int gyroCount[3];
int magCount[3];
int quatCount[4];
int EulCount[3];
int LIACount[3];
int GRVCount[3];
float gyroBias[3] = {0, 0, 0}, accelBias[3] = {0, 0, 0}, magBias[3] = {0, 0, 0};
int tempGCount, tempMCount;
float Gtemperature, Mtemperature;


float GyroMeasError = 3.1425 * (40.0f / 180.0f);
float GyroMeasDrift = 3.1425 * (0.0f / 180.0f);

# 32
float beta = sqrt(3.0f / 4.0f) * GyroMeasError;
float zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;



long delt_t = 0, count = 0, sumCount = 0;
float pitch, yaw, roll;
float Pitch, Yaw, Roll;
float LIAx, LIAy, LIAz, GRVx, GRVy, GRVz;
float deltat = 0.0f, sum = 0.0f;
long lastUpdate = 0, firstUpdate = 0;
long Now = 0;

float ax, ay, az, gx, gy, gz, mx, my, mz;
float q[4] = {1.0f, 0.0f, 0.0f, 0.0f};
float quat[4] = {1.0f, 0.0f, 0.0f, 0.0f};
float eInt[3] = {0.0f, 0.0f, 0.0f};

void setup()
{




Delay(4000);


Delay(1000);


printf("BNO055 9-axis motion sensor...");
char c = readByte(0x29, 0x00);
printf("BNO055 Address = 0x%c",0x29);
printf("BNO055 WHO_AM_I = 0x%c ", 0x00);
printf("BNO055 - I AM %c  - I should be 0xA0",c);

Delay(1000);



char d = readByte(0x29, 0x01);
printf("BNO055 ACC I AM %c I should be 0xFB",d);

Delay(1000);


char e = readByte(0x29, 0x02);
printf("BNO055 MAG I AM %c I should be 0x32",e);

Delay(1000);


char f = readByte(0x29, 0x03);
printf("BNO055 GYRO I AM %f  I should be 0x0F",f);

Delay(1000);

if (c == 0xA0)
{
printf("BNO055 is online...");


char swlsb = readByte(0x29, 0x04);
char swmsb = readByte(0x29, 0x05);
printf("BNO055 SW Revision ID: %c.%c",swmsb,swlsb);
printf("Should be 03.04");


char blid = readByte(0x29, 0x06);
printf("BNO055 bootloader Version: %c", blid);


char selftest = readByte(0x29, 0x36);

if(selftest & 0x01) {
printf("accelerometer passed self test");
} else {
printf("accelerometer failed self test");
}
if(selftest & 0x02) {
printf("magnetometer passed self test");
} else {
printf("magnetometer failed self test");
}
if(selftest & 0x04) {
printf("gyroscope passed self test");
} else {
printf("gyroscope failed self test");
}
if(selftest & 0x08) {
printf("MCU passed self test");
} else {
printf("MCU failed self test");
}

Delay(1000);

accelgyroCalBNO055(accelBias, gyroBias);

printf("Average accelerometer bias (mg) = "); printf(accelBias[0]); printf(accelBias[1]); printf(accelBias[2]);
printf("Average gyro bias (dps) = "); printf(gyroBias[0]); printf(gyroBias[1]); printf(gyroBias[2]);

Delay(1000);

magCalBNO055(magBias);

printf("Average magnetometer bias (mG) = "); printf(magBias[0]); printf(magBias[1]); printf(magBias[2]);

Delay(1000);


char calstat = readByte(0x29, 0x35);
printf("Not calibrated = 0, fully calibrated = 3");
printf("System calibration status "); printf( (0xC0 & calstat) >> 6);
printf("Gyro   calibration status "); printf( (0x30 & calstat) >> 4);
printf("Accel  calibration status "); printf( (0x0C & calstat) >> 2);
printf("Mag    calibration status "); printf( (0x03 & calstat) >> 0);

initBNO055();
printf("BNO055 initialized for sensor mode....");

}
else
{
printf("Could not connect to BNO055: 0x%c",c);
while(1) ;
}
}

void loop()
{
readAccelData(accelCount);

ax = (float)accelCount[0];
ay = (float)accelCount[1];
az = (float)accelCount[2];

readGyroData(gyroCount);

gx = (float)gyroCount[0]/16.;
gy = (float)gyroCount[1]/16.;
gz = (float)gyroCount[2]/16.;

readMagData(magCount);

mx = (float)magCount[0]/1.6;
my = (float)magCount[1]/1.6;
mz = (float)magCount[2]/1.6;

readQuatData(quatCount);

quat[0] = (float)(quatCount[0])/16384.;
quat[1] = (float)(quatCount[1])/16384.;
quat[2] = (float)(quatCount[2])/16384.;
quat[3] = (float)(quatCount[3])/16384.;

readEulData(EulCount);

Yaw = (float)EulCount[0]/16.;
Roll = (float)EulCount[1]/16.;
Pitch = (float)EulCount[2]/16.;

readLIAData(LIACount);

LIAx = (float)LIACount[0];
LIAy = (float)LIACount[1];
LIAz = (float)LIACount[2];

readGRVData(GRVCount);

GRVx = (float)GRVCount[0];
GRVy = (float)GRVCount[1];
GRVz = (float)GRVCount[2];



deltat = ((Now - lastUpdate)/1000000.0f);
lastUpdate = Now;

sum += deltat;
sumCount++;

# 220
MadgwickQuaternionUpdate(ax, ay, az, gx*3.1425/180.0f, gy*3.1425/180.0f, gz*3.1425/180.0f, mx, my, mz);




if (delt_t > 500) {


char sysstat = readByte(0x29, 0x39);
printf("System Status = 0x5c",sysstat);
if(sysstat == 0x05) printf("Sensor fusion algorithm running");
if(sysstat == 0x06) printf("Sensor fusion not algorithm running");

if(sysstat == 0x01) {
char syserr = readByte(0x29, 0x3A);
if(syserr == 0x01) printf("Peripheral initialization error");
if(syserr == 0x02) printf("System initialization error");
if(syserr == 0x03) printf("Self test result failed");
if(syserr == 0x04) printf("Register map value out of range");
if(syserr == 0x05) printf("Register map address out of range");
if(syserr == 0x06) printf("Register map write error");
if(syserr == 0x07) printf("BNO low power mode no available for selected operation mode");
if(syserr == 0x08) printf("Accelerometer power mode not available");
if(syserr == 0x09) printf("Fusion algorithm configuration error");
if(syserr == 0x0A) printf("Sensor configuration error");
}

if(1) {
printf("ax = "); printf((int)ax);
printf(" ay = "); printf((int)ay);
printf(" az = "); printf((int)az); printf(" mg");
printf("gx = "); printf( gx, 2);
printf(" gy = "); printf( gy, 2);
printf(" gz = "); printf( gz, 2); printf(" deg/s");
printf("mx = "); printf( (int)mx );
printf(" my = "); printf( (int)my );
printf(" mz = "); printf( (int)mz ); printf(" mG");

printf("qx = "); printf(q[0]);
printf(" qy = "); printf(q[1]);
printf(" qz = "); printf(q[2]);
printf(" qw = "); printf(q[3]);
printf("quatw = "); printf(quat[0]);
printf(" quatx = "); printf(quat[1]);
printf(" quaty = "); printf(quat[2]);
printf(" quatz = "); printf(quat[3]);
}

tempGCount = readGyroTempData();
Gtemperature = (float) tempGCount;

printf("Gyro temperature is "); printf(Gtemperature, 1); printf(" degrees C");

# 282
yaw = atan2(2.0f * (q[1] * q[2] + q[0] * q[3]), q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3]);
pitch = -asin(2.0f * (q[1] * q[3] - q[0] * q[2]));
roll = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
pitch *= 180.0f / 3.1425;
yaw *= 180.0f / 3.1425;

roll *= 180.0f / 3.1425;

if(1) {
printf("Software Yaw, Pitch, Roll: ");
printf(yaw, 2);
printf(", ");
printf(pitch, 2);
printf(", ");
printf(roll, 2);

printf("Hardware Yaw, Pitch, Roll: ");
printf(Yaw, 2);
printf(", ");
printf(Pitch, 2);
printf(", ");
printf(Roll, 2);

printf("Hardware x, y, z linear acceleration: ");
printf(LIAx, 2);
printf(", ");
printf(LIAy, 2);
printf(", ");
printf(LIAz, 2);

printf("Hardware x, y, z gravity vector: ");
printf(GRVx, 2);
printf(", ");
printf(GRVy, 2);
printf(", ");
printf(GRVz, 2);


printf("rate = "); printf((float)sumCount/sum, 2); printf(" Hz");
}



sumCount = 0;
sum = 0;
}

}

# 335
void readAccelData(int * destination){
char rawData[6];
readBytes(0x29, 0x08, 6, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
}


void readGyroData(int * destination){
char rawData[6];
readBytes(0x29, 0x14, 6, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
}

char readGyroTempData(){
return readByte(0x29, 0x34);
}

void readMagData(int * destination){
char rawData[6];
readBytes(0x29, 0x0E, 6, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
}

void readQuatData(int * destination){
char rawData[8];
readBytes(0x29, 0x20, 8, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
destination[3] = ((int)rawData[7] << 8) | rawData[6] ;
}

void readEulData(int * destination){
char rawData[6];
readBytes(0x29, 0x1A, 6, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
}

void readLIAData(int * destination){
char rawData[6];
readBytes(0x29, 0x28, 6, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
}

void readGRVData(int * destination){
char rawData[6];
readBytes(0x29, 0x2E, 6, &rawData[0]);
destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
}

void initBNO055() {

writeByte(0x29, 0x3D, CONFIGMODE );
Delay(25);

writeByte(0x29, 0x07, 0x01);

writeByte(0x29, 0x08, APwrMode << 5 | Abw << 2 | Ascale );

writeByte(0x29, 0x0A, Gbw << 3 | Gscale );
writeByte(0x29, 0x0B, GPwrMode);

writeByte(0x29, 0x09, MPwrMode << 5 | MOpMode << 3 | Modr );


writeByte(0x29, 0x07, 0x00);


writeByte(0x29, 0x40, 0x01 );


writeByte(0x29, 0x3B, 0x01 );


writeByte(0x29, 0x3E, PWRMode );


writeByte(0x29, 0x3D, OPRMode );
Delay(25);
}

void accelgyroCalBNO055(float * dest1, float * dest2) {
char data[6];
long ii = 0, sample_count = 0;
long gyro_bias[3] = {0, 0, 0};
long accel_bias[3] = {0, 0, 0};

printf("Accel/Gyro Calibration: Put device on a level surface and keep motionless! Wait......");
Delay(4000);


writeByte(0x29, 0x07, 0x00);

writeByte(0x29, 0x3D, CONFIGMODE );
Delay(25);
writeByte(0x29, 0x3D, AMG);


writeByte(0x29, 0x08, APwrMode << 5 | Abw << 2 | AFS_4G );
sample_count = 256;
for(ii = 0; ii < sample_count; ii++) {
int accel_temp[3] = {0, 0, 0};
readBytes(0x29, 0x08, 6, &data[0]);
accel_temp[0] = (int) (((int)data[1] << 8) | data[0]) ;
accel_temp[1] = (int) (((int)data[3] << 8) | data[2]) ;
accel_temp[2] = (int) (((int)data[5] << 8) | data[4]) ;
accel_bias[0] += (long) accel_temp[0];
accel_bias[1] += (long) accel_temp[1];
accel_bias[2] += (long) accel_temp[2];
Delay(20);
}
accel_bias[0] /= (long) sample_count;
accel_bias[1] /= (long) sample_count;
accel_bias[2] /= (long) sample_count;

if(accel_bias[2] > 0L) {accel_bias[2] -= (long[]'[]'[]'[]'[]'[]'7]]]') 1000;}  // Remove gravity from the z-axis accelerometer bias calculation
else {accel_bias[2] += (long) 1000;}

dest1[0] = (float) accel_bias[0];
dest1[1] = (float) accel_bias[1];
dest1[2] = (float) accel_bias[2];


writeByte(0x29, 0x0A, Gbw << 3 | GFS_2000DPS );
writeByte(0x29, 0x0B, GPwrMode);for(ii = 0; ii < sample_count; ii++) {
int gyro_temp[3] = {0, 0, 0};
readBytes(0x29, 0x14, 6, &data[0]);
gyro_temp[0] = (int) (((int)data[1] << 8) | data[0]) ;
gyro_temp[1] = (int) (((int)data[3] << 8) | data[2]) ;
gyro_temp[2] = (int) (((int)data[5] << 8) | data[4]) ;
gyro_bias[0] += (int32_t) gyro_temp[0];
gyro_bias[1] += (int32_t) gyro_temp[1];
gyro_bias[2] += (int32_t) gyro_temp[2];
Delay(35);
}
gyro_bias[0] /= (int32_t) sample_count;
gyro_bias[1] /= (int32_t) sample_count;
gyro_bias[2] /= (int32_t) sample_count;

dest2[0] = (float) gyro_bias[0]/16.;
dest2[1] = (float) gyro_bias[1]/16.;
dest2[2] = (float) gyro_bias[2]/16.;



writeByte(0x29, 0x3D, CONFIGMODE );
Delay(25);


writeByte(0x29, 0x55, (int)accel_bias[0] & 0xFF);
writeByte(0x29, 0x56, ((int)accel_bias[0] >> 8) & 0xFF);
writeByte(0x29, 0x57, (int)accel_bias[1] & 0xFF);
writeByte(0x29, 0x58, ((int)accel_bias[1] >> 8) & 0xFF);
writeByte(0x29, 0x59, (int)accel_bias[2] & 0xFF);
writeByte(0x29, 0x5A, ((int)accel_bias[2] >> 8) & 0xFF);

# 510
writeByte(0x29, 0x61, (int)gyro_bias[0] & 0xFF);
writeByte(0x29, 0x62, ((int)gyro_bias[0] >> 8) & 0xFF);
writeByte(0x29, 0x63, (int)gyro_bias[1] & 0xFF);
writeByte(0x29, 0x64, ((int)gyro_bias[1] >> 8) & 0xFF);
writeByte(0x29, 0x65, (int)gyro_bias[2] & 0xFF);
writeByte(0x29, 0x66, ((int)gyro_bias[2] >> 8) & 0xFF);


writeByte(0x29, 0x3D, OPRMode );

# 526
printf("Accel/Gyro Calibration done!");
}

void magCalBNO055(float * dest1){
char data[6];
uint ii = 0, sample_count = 0;
int32_t mag_bias[3] = {0, 0, 0};
int mag_max[3] = {0, 0, 0}, mag_min[3] = {0, 0, 0};

printf("Mag Calibration: Wave device in a figure eight until done!");
Delay(4000);


writeByte(0x29, 0x07, 0x00);

writeByte(0x29, 0x3D, CONFIGMODE );
Delay(25);
writeByte(0x29, 0x3D, AMG );


sample_count = 256;
for(ii = 0; ii < sample_count; ii++) {
int mag_temp[3] = {0, 0, 0};
readBytes(0x29, 0x0E, 6, &data[0]);
mag_temp[0] = (int) (((int)data[1] << 8) | data[0]) ;
mag_temp[1] = (int) (((int)data[3] << 8) | data[2]) ;
mag_temp[2] = (int) (((int)data[5] << 8) | data[4]) ;
for (int jj = 0; jj < 3; jj++) {
if (ii == 0) {
mag_max[jj] = mag_temp[jj];
mag_min[jj] = mag_temp[jj];
} else {
if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
}
}
Delay(105);
}

# 569
mag_bias[0] = (mag_max[0] + mag_min[0])/2;
mag_bias[1] = (mag_max[1] + mag_min[1])/2;
mag_bias[2] = (mag_max[2] + mag_min[2])/2;

dest1[0] = (float) mag_bias[0] / 1.6;
dest1[1] = (float) mag_bias[1] / 1.6;
dest1[2] = (float) mag_bias[2] / 1.6;



writeByte(0x29, 0x3D, CONFIGMODE );
Delay(25);


writeByte(0x29, 0x5B, (int)mag_bias[0] & 0xFF);
writeByte(0x29, 0x5C, ((int)mag_bias[0] >> 8) & 0xFF);
writeByte(0x29, 0x5D, (int)mag_bias[1] & 0xFF);
writeByte(0x29, 0x5E, ((int)mag_bias[1] >> 8) & 0xFF);
writeByte(0x29, 0x5F, (int)mag_bias[2] & 0xFF);
writeByte(0x29, 0x60, ((int)mag_bias[2] >> 8) & 0xFF);

# 596
writeByte(0x29, 0x3D, OPRMode );
Delay(25);

printf("Mag Calibration done!");
}



char writeByte(char address, char subAddress, char data)
{




}

char readByte(char address, char subAddress)
{
char data;

# 622
return data;
}

void readBytes(char address, char subAddress, char count, char * dest)
{

# 636
}

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz)
{
float q1 = q[0], q2 = q[1], q3 = q[2], q4 = q[3];
float norm;
float hx, hy, _2bx, _2bz;
float s1, s2, s3, s4;
float qDot1, qDot2, qDot3, qDot4;


float _2q1mx;
float _2q1my;
float _2q1mz;
float _2q2mx;
float _4bx;
float _4bz;
float _2q1 = 2.0f * q1;
float _2q2 = 2.0f * q2;
float _2q3 = 2.0f * q3;
float _2q4 = 2.0f * q4;
float _2q1q3 = 2.0f * q1 * q3;
float _2q3q4 = 2.0f * q3 * q4;
float q1q1 = q1 * q1;
float q1q2 = q1 * q2;
float q1q3 = q1 * q3;
float q1q4 = q1 * q4;
float q2q2 = q2 * q2;
float q2q3 = q2 * q3;
float q2q4 = q2 * q4;
float q3q3 = q3 * q3;
float q3q4 = q3 * q4;
float q4q4 = q4 * q4;


norm = sqrt(ax * ax + ay * ay + az * az);
if (norm == 0.0f) return;
norm = 1.0f/norm;
ax *= norm;
ay *= norm;
az *= norm;


norm = sqrt(mx * mx + my * my + mz * mz);
if (norm == 0.0f) return;
norm = 1.0f/norm;
mx *= norm;
my *= norm;
mz *= norm;


_2q1mx = 2.0f * q1 * mx;
_2q1my = 2.0f * q1 * my;
_2q1mz = 2.0f * q1 * mz;
_2q2mx = 2.0f * q2 * mx;
hx = mx * q1q1 - _2q1my * q4 + _2q1mz * q3 + mx * q2q2 + _2q2 * my * q3 + _2q2 * mz * q4 - mx * q3q3 - mx * q4q4;
hy = _2q1mx * q4 + my * q1q1 - _2q1mz * q2 + _2q2mx * q3 - my * q2q2 + my * q3q3 + _2q3 * mz * q4 - my * q4q4;
_2bx = sqrt(hx * hx + hy * hy);
_2bz = -_2q1mx * q3 + _2q1my * q2 + mz * q1q1 + _2q2mx * q4 - mz * q2q2 + _2q3 * my * q4 - mz * q3q3 + mz * q4q4;
_4bx = 2.0f * _2bx;
_4bz = 2.0f * _2bz;


s1 = -_2q3 * (2.0f * q2q4 - _2q1q3 - ax) + _2q2 * (2.0f * q1q2 + _2q3q4 - ay) - _2bz * q3 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q4 + _2bz * q2) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q3 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
s2 = _2q4 * (2.0f * q2q4 - _2q1q3 - ax) + _2q1 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q2 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + _2bz * q4 * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q3 + _2bz * q1) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q4 - _4bz * q2) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
s3 = -_2q1 * (2.0f * q2q4 - _2q1q3 - ax) + _2q4 * (2.0f * q1q2 + _2q3q4 - ay) - 4.0f * q3 * (1.0f - 2.0f * q2q2 - 2.0f * q3q3 - az) + (-_4bx * q3 - _2bz * q1) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (_2bx * q2 + _2bz * q4) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + (_2bx * q1 - _4bz * q3) * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
s4 = _2q2 * (2.0f * q2q4 - _2q1q3 - ax) + _2q3 * (2.0f * q1q2 + _2q3q4 - ay) + (-_4bx * q4 + _2bz * q2) * (_2bx * (0.5f - q3q3 - q4q4) + _2bz * (q2q4 - q1q3) - mx) + (-_2bx * q1 + _2bz * q3) * (_2bx * (q2q3 - q1q4) + _2bz * (q1q2 + q3q4) - my) + _2bx * q2 * (_2bx * (q1q3 + q2q4) + _2bz * (0.5f - q2q2 - q3q3) - mz);
norm = sqrt(s1 * s1 + s2 * s2 + s3 * s3 + s4 * s4);
norm = 1.0f/norm;
s1 *= norm;
s2 *= norm;
s3 *= norm;
s4 *= norm;


qDot1 = 0.5f * (-q2 * gx - q3 * gy - q4 * gz) - beta * s1;
qDot2 = 0.5f * (q1 * gx + q3 * gz - q4 * gy) - beta * s2;
qDot3 = 0.5f * (q1 * gy - q2 * gz + q4 * gx) - beta * s3;
qDot4 = 0.5f * (q1 * gz + q2 * gy - q3 * gx) - beta * s4;


q1 += qDot1 * deltat;
q2 += qDot2 * deltat;
q3 += qDot3 * deltat;
q4 += qDot4 * deltat;
norm = sqrt(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
norm = 1.0f/norm;
q[0] = q1 * norm;
q[1] = q2 * norm;
q[2] = q3 * norm;
q[3] = q4 * norm;

}
