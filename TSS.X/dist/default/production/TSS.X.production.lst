

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Aug 14 04:45:39 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	idataBANK2,global,class=CODE,delta=1
     9                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    22                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    26                           	psect	text0,global,reloc=2,class=CODE,delta=1
    27                           	psect	text1,global,reloc=2,class=CODE,delta=1
    28                           	psect	text2,global,reloc=2,class=CODE,delta=1
    29                           	psect	text3,global,reloc=2,class=CODE,delta=1
    30                           	psect	text4,global,reloc=2,class=CODE,delta=1
    31                           	psect	text5,global,reloc=2,class=CODE,delta=1
    32                           	psect	text6,global,reloc=2,class=CODE,delta=1
    33                           	psect	text7,global,reloc=2,class=CODE,delta=1
    34                           	psect	text8,global,reloc=2,class=CODE,delta=1
    35                           	psect	text9,global,reloc=2,class=CODE,delta=1
    36                           	psect	text10,global,reloc=2,class=CODE,delta=1
    37                           	psect	text11,global,reloc=2,class=CODE,delta=1
    38                           	psect	text12,global,reloc=2,class=CODE,delta=1
    39                           	psect	text13,global,reloc=2,class=CODE,delta=1
    40                           	psect	text14,global,reloc=2,class=CODE,delta=1
    41                           	psect	text15,global,reloc=2,class=CODE,delta=1
    42                           	psect	text16,global,reloc=2,class=CODE,delta=1
    43                           	psect	text17,global,reloc=2,class=CODE,delta=1
    44                           	psect	text18,global,reloc=2,class=CODE,delta=1
    45                           	psect	text19,global,reloc=2,class=CODE,delta=1
    46                           	psect	text20,global,reloc=2,class=CODE,delta=1
    47                           	psect	text21,global,reloc=2,class=CODE,delta=1
    48                           	psect	text22,global,reloc=2,class=CODE,delta=1
    49                           	psect	text23,global,reloc=2,class=CODE,delta=1
    50                           	psect	text24,global,reloc=2,class=CODE,delta=1
    51                           	psect	text25,global,reloc=2,class=CODE,delta=1
    52                           	psect	text26,global,reloc=2,class=CODE,delta=1
    53                           	psect	text27,global,reloc=2,class=CODE,delta=1
    54                           	psect	text28,global,reloc=2,class=CODE,delta=1
    55                           	psect	text29,global,reloc=2,class=CODE,delta=1
    56                           	psect	text30,global,reloc=2,class=CODE,delta=1
    57                           	psect	text31,global,reloc=2,class=CODE,delta=1
    58                           	psect	text32,global,reloc=2,class=CODE,delta=1
    59                           	psect	text33,global,reloc=2,class=CODE,delta=1
    60                           	psect	text34,global,reloc=2,class=CODE,delta=1
    61                           	psect	text35,global,reloc=2,class=CODE,delta=1
    62                           	psect	text36,global,reloc=2,class=CODE,delta=1
    63                           	psect	text37,global,reloc=2,class=CODE,delta=1
    64                           	psect	text38,global,reloc=2,class=CODE,delta=1
    65                           	psect	text39,global,reloc=2,class=CODE,delta=1
    66                           	psect	text40,global,reloc=2,class=CODE,delta=1
    67                           	psect	text41,global,reloc=2,class=CODE,delta=1
    68                           	psect	text42,global,reloc=2,class=CODE,delta=1
    69                           	psect	text43,global,reloc=2,class=CODE,delta=1
    70                           	psect	text44,global,reloc=2,class=CODE,delta=1
    71                           	psect	text45,global,reloc=2,class=CODE,delta=1
    72                           	psect	text46,global,reloc=2,class=CODE,delta=1
    73                           	psect	text47,global,reloc=2,class=CODE,delta=1
    74                           	psect	text48,global,reloc=2,class=CODE,delta=1
    75                           	psect	text49,global,reloc=2,class=CODE,delta=1
    76                           	psect	text50,global,reloc=2,class=CODE,delta=1
    77                           	psect	text51,global,reloc=2,class=CODE,delta=1
    78                           	psect	text52,global,reloc=2,class=CODE,delta=1
    79                           	psect	text53,global,reloc=2,class=CODE,delta=1
    80                           	psect	text54,global,reloc=2,class=CODE,delta=1
    81                           	psect	text55,global,reloc=2,class=CODE,delta=1
    82                           	psect	text56,global,reloc=2,class=CODE,delta=1
    83                           	psect	text57,global,reloc=2,class=CODE,delta=1
    84                           	psect	text58,global,reloc=2,class=CODE,delta=1
    85                           	psect	text59,global,reloc=2,class=CODE,delta=1
    86                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    87                           	psect	text61,global,reloc=2,class=CODE,delta=1
    88                           	psect	text62,global,reloc=2,class=CODE,delta=1
    89                           	psect	text63,global,reloc=2,class=CODE,delta=1
    90                           	psect	text64,global,reloc=2,class=CODE,delta=1
    91                           	psect	text65,global,reloc=2,class=CODE,delta=1
    92                           	psect	text66,global,reloc=2,class=CODE,delta=1
    93                           	psect	text67,global,reloc=2,class=CODE,delta=1
    94                           	psect	text68,global,reloc=2,class=CODE,delta=1
    95                           	psect	text69,global,reloc=2,class=CODE,delta=1
    96                           	psect	text70,global,reloc=2,class=CODE,delta=1
    97                           	psect	text71,global,reloc=2,class=CODE,delta=1
    98                           	psect	text72,global,reloc=2,class=CODE,delta=1
    99                           	psect	text73,global,reloc=2,class=CODE,delta=1
   100                           	psect	text74,global,reloc=2,class=CODE,delta=1
   101                           	psect	text75,global,reloc=2,class=CODE,delta=1
   102                           	psect	text76,global,reloc=2,class=CODE,delta=1
   103                           	psect	text77,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   105                           	psect	text78,global,reloc=2,class=CODE,delta=1
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   107                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   108  0000                     
   109 ;; Function _Receive_peek is unused but had its address taken
   110  0000                     
   111 ;; Function _Receive_available is unused but had its address taken
   112  0000                     
   113 ;; Function _Receive_get is unused but had its address taken
   114  0000                     
   115                           	psect	idataCOMRAM
   116  00594C                     __pidataCOMRAM:
   117                           	opt stack 0
   118                           
   119                           ;initializer for _Abw
   120  00594C  02                 	db	2
   121                           
   122                           ;initializer for _Gbw
   123  00594D  04                 	db	4
   124                           
   125                           ;initializer for _OPRMode
   126  00594E  0C                 	db	12
   127                           
   128                           ;initializer for _Transmit_stall
   129  00594F  01                 	db	1
   130                           
   131                           	psect	idataBANK0
   132  005954                     __pidataBANK0:
   133                           	opt stack 0
   134                           
   135                           ;initializer for _Gscale
   136  005954  03                 	db	3
   137                           
   138                           ;initializer for _MOpMode
   139  005955  01                 	db	1
   140                           
   141                           	psect	idataBANK1
   142  005946                     __pidataBANK1:
   143                           	opt stack 0
   144                           
   145                           ;initializer for _GyroMeasError
   146  005946  C6                 	db	198
   147  005947  32                 	db	50
   148  005948  3F                 	db	63
   149                           
   150                           ;initializer for _Modr
   151  005949  03                 	db	3
   152                           
   153                           ;initializer for _intPin
   154  00594A  08                 	db	8
   155                           
   156                           ;initializer for _myLed
   157  00594B  0D                 	db	13
   158                           
   159                           	psect	idataBANK2
   160  005898                     __pidataBANK2:
   161                           	opt stack 0
   162                           
   163                           ;initializer for _q
   164  005898  00                 	db	0
   165  005899  80                 	db	128
   166  00589A  3F                 	db	63
   167  00589B  00                 	db	0
   168  00589C  00                 	db	0
   169  00589D  00                 	db	0
   170  00589E  00                 	db	0
   171  00589F  00                 	db	0
   172  0058A0  00                 	db	0
   173  0058A1  00                 	db	0
   174  0058A2  00                 	db	0
   175  0058A3  00                 	db	0
   176                           
   177                           ;initializer for _quat
   178  0058A4  00                 	db	0
   179  0058A5  80                 	db	128
   180  0058A6  3F                 	db	63
   181  0058A7  00                 	db	0
   182  0058A8  00                 	db	0
   183  0058A9  00                 	db	0
   184  0058AA  00                 	db	0
   185  0058AB  00                 	db	0
   186  0058AC  00                 	db	0
   187  0058AD  00                 	db	0
   188  0058AE  00                 	db	0
   189  0058AF  00                 	db	0
   190                           
   191                           	psect	mediumconst
   192  007878                     __pmediumconst:
   193                           	opt stack 0
   194  007878  00                 	db	0
   195  007879                     _octpowers:
   196                           	opt stack 0
   197  007879  0001               	dw	1
   198  00787B  0000               	dw	0
   199  00787D  0008               	dw	8
   200  00787F  0000               	dw	0
   201  007881  0040               	dw	64
   202  007883  0000               	dw	0
   203  007885  0200               	dw	512
   204  007887  0000               	dw	0
   205  007889  1000               	dw	4096
   206  00788B  0000               	dw	0
   207  00788D  8000               	dw	32768
   208  00788F  0000               	dw	0
   209  007891  0000               	dw	0
   210  007893  0004               	dw	4
   211  007895  0000               	dw	0
   212  007897  0020               	dw	32
   213  007899  0000               	dw	0
   214  00789B  0100               	dw	256
   215  00789D  0000               	dw	0
   216  00789F  0800               	dw	2048
   217  0078A1  0000               	dw	0
   218  0078A3  4000               	dw	16384
   219  0078A5  0000               	dw	0
   220  0078A7  0000               	dw	0
   221  0078A9                     __end_of_octpowers:
   222                           	opt stack 0
   223  0078A9                     _dpowers:
   224                           	opt stack 0
   225  0078A9  0001               	dw	1
   226  0078AB  0000               	dw	0
   227  0078AD  000A               	dw	10
   228  0078AF  0000               	dw	0
   229  0078B1  0064               	dw	100
   230  0078B3  0000               	dw	0
   231  0078B5  03E8               	dw	1000
   232  0078B7  0000               	dw	0
   233  0078B9  2710               	dw	10000
   234  0078BB  0000               	dw	0
   235  0078BD  86A0               	dw	34464
   236  0078BF  0001               	dw	1
   237  0078C1  4240               	dw	16960
   238  0078C3  000F               	dw	15
   239  0078C5  9680               	dw	38528
   240  0078C7  0098               	dw	152
   241  0078C9  E100               	dw	57600
   242  0078CB  05F5               	dw	1525
   243  0078CD  CA00               	dw	51712
   244  0078CF  3B9A               	dw	15258
   245  0078D1                     __end_of_dpowers:
   246                           	opt stack 0
   247  0078D1                     __npowers_:
   248                           	opt stack 0
   249  0078D1  00                 	db	0
   250  0078D2  80                 	db	128
   251  0078D3  3F                 	db	63
   252  0078D4  CD                 	db	205
   253  0078D5  CC                 	db	204
   254  0078D6  3D                 	db	61
   255  0078D7  D7                 	db	215
   256  0078D8  23                 	db	35
   257  0078D9  3C                 	db	60
   258  0078DA  12                 	db	18
   259  0078DB  83                 	db	131
   260  0078DC  3A                 	db	58
   261  0078DD  B7                 	db	183
   262  0078DE  D1                 	db	209
   263  0078DF  38                 	db	56
   264  0078E0  C6                 	db	198
   265  0078E1  27                 	db	39
   266  0078E2  37                 	db	55
   267  0078E3  38                 	db	56
   268  0078E4  86                 	db	134
   269  0078E5  35                 	db	53
   270  0078E6  C0                 	db	192
   271  0078E7  D6                 	db	214
   272  0078E8  33                 	db	51
   273  0078E9  CC                 	db	204
   274  0078EA  2B                 	db	43
   275  0078EB  32                 	db	50
   276  0078EC  70                 	db	112
   277  0078ED  89                 	db	137
   278  0078EE  30                 	db	48
   279  0078EF  E7                 	db	231
   280  0078F0  DB                 	db	219
   281  0078F1  2E                 	db	46
   282  0078F2  E5                 	db	229
   283  0078F3  3C                 	db	60
   284  0078F4  1E                 	db	30
   285  0078F5  42                 	db	66
   286  0078F6  A2                 	db	162
   287  0078F7  0D                 	db	13
   288  0078F8                     __end_of__npowers_:
   289                           	opt stack 0
   290  0078F8                     __powers_:
   291                           	opt stack 0
   292  0078F8  00                 	db	0
   293  0078F9  80                 	db	128
   294  0078FA  3F                 	db	63
   295  0078FB  00                 	db	0
   296  0078FC  20                 	db	32
   297  0078FD  41                 	db	65
   298  0078FE  00                 	db	0
   299  0078FF  C8                 	db	200
   300  007900  42                 	db	66
   301  007901  00                 	db	0
   302  007902  7A                 	db	122
   303  007903  44                 	db	68
   304  007904  40                 	db	64
   305  007905  1C                 	db	28
   306  007906  46                 	db	70
   307  007907  50                 	db	80
   308  007908  C3                 	db	195
   309  007909  47                 	db	71
   310  00790A  24                 	db	36
   311  00790B  74                 	db	116
   312  00790C  49                 	db	73
   313  00790D  97                 	db	151
   314  00790E  18                 	db	24
   315  00790F  4B                 	db	75
   316  007910  BC                 	db	188
   317  007911  BE                 	db	190
   318  007912  4C                 	db	76
   319  007913  6B                 	db	107
   320  007914  6E                 	db	110
   321  007915  4E                 	db	78
   322  007916  03                 	db	3
   323  007917  15                 	db	21
   324  007918  50                 	db	80
   325  007919  79                 	db	121
   326  00791A  AD                 	db	173
   327  00791B  60                 	db	96
   328  00791C  F3                 	db	243
   329  00791D  49                 	db	73
   330  00791E  71                 	db	113
   331  00791F                     __end_of__powers_:
   332                           	opt stack 0
   333  00791F                     _hexpowers:
   334                           	opt stack 0
   335  00791F  0001               	dw	1
   336  007921  0000               	dw	0
   337  007923  0010               	dw	16
   338  007925  0000               	dw	0
   339  007927  0100               	dw	256
   340  007929  0000               	dw	0
   341  00792B  1000               	dw	4096
   342  00792D  0000               	dw	0
   343  00792F  0000               	dw	0
   344  007931  0001               	dw	1
   345  007933  0000               	dw	0
   346  007935  0010               	dw	16
   347  007937  0000               	dw	0
   348  007939  0100               	dw	256
   349  00793B  0000               	dw	0
   350  00793D  1000               	dw	4096
   351  00793F                     __end_of_hexpowers:
   352                           	opt stack 0
   353  0000                     _ANSELA	set	3896
   354  0000                     _ANSELB	set	3897
   355  0000                     _ANSELC	set	3898
   356  0000                     _ANSELD	set	3899
   357  0000                     _ANSELE	set	3900
   358  0000                     _CCPTMRS0bits	set	3913
   359  0000                     _TMR1	set	4046
   360  0000                     _ADCON0	set	4034
   361  0000                     _ADCON0bits	set	4034
   362  0000                     _ADCON1	set	4033
   363  0000                     _ADCON2	set	4032
   364  0000                     _ADRESH	set	4036
   365  0000                     _ADRESL	set	4035
   366  0000                     _BAUD1CON	set	4024
   367  0000                     _CCP1CON	set	4029
   368  0000                     _CCP2CON	set	3942
   369  0000                     _CCPR1H	set	4031
   370  0000                     _CCPR1L	set	4030
   371  0000                     _CCPR2H	set	3944
   372  0000                     _CCPR2L	set	3943
   373  0000                     _INTCON2bits	set	4081
   374  0000                     _INTCONbits	set	4082
   375  0000                     _IPR1bits	set	3999
   376  0000                     _IPR2bits	set	4002
   377  0000                     _LATA	set	3977
   378  0000                     _LATB	set	3978
   379  0000                     _LATC	set	3979
   380  0000                     _LATCbits	set	3979
   381  0000                     _LATD	set	3980
   382  0000                     _LATE	set	3981
   383  0000                     _OSCCON	set	4051
   384  0000                     _OSCCON2	set	4050
   385  0000                     _OSCTUNE	set	3995
   386  0000                     _PIE1bits	set	3997
   387  0000                     _PIE2bits	set	4000
   388  0000                     _PIR1bits	set	3998
   389  0000                     _PIR2bits	set	4001
   390  0000                     _PR2	set	4027
   391  0000                     _RC1STA	set	4011
   392  0000                     _RC1STAbits	set	4011
   393  0000                     _RCONbits	set	4048
   394  0000                     _RCREG1	set	4014
   395  0000                     _SPBRG1	set	4015
   396  0000                     _SPBRGH1	set	4016
   397  0000                     _SSP1ADD	set	4040
   398  0000                     _SSP1BUF	set	4041
   399  0000                     _SSP1CON1	set	4038
   400  0000                     _SSP1CON1bits	set	4038
   401  0000                     _SSP1CON2bits	set	4037
   402  0000                     _SSP1CON3	set	4043
   403  0000                     _SSP1STAT	set	4039
   404  0000                     _T1CON	set	4045
   405  0000                     _T1CONbits	set	4045
   406  0000                     _T1GCON	set	4044
   407  0000                     _T1GCONbits	set	4044
   408  0000                     _T2CON	set	4026
   409  0000                     _T2CONbits	set	4026
   410  0000                     _TMR1H	set	4047
   411  0000                     _TMR1L	set	4046
   412  0000                     _TMR2	set	4028
   413  0000                     _TRISA	set	3986
   414  0000                     _TRISB	set	3987
   415  0000                     _TRISC	set	3988
   416  0000                     _TRISD	set	3989
   417  0000                     _TRISE	set	3990
   418  0000                     _TX1STA	set	4012
   419  0000                     _TXREG1	set	4013
   420  0000                     _WPUB	set	3937
   421  00793F                     STR_49:
   422  00793F  41                 	db	65	;'A'
   423  007940  63                 	db	99	;'c'
   424  007941  63                 	db	99	;'c'
   425  007942  65                 	db	101	;'e'
   426  007943  6C                 	db	108	;'l'
   427  007944  2F                 	db	47
   428  007945  47                 	db	71	;'G'
   429  007946  79                 	db	121	;'y'
   430  007947  72                 	db	114	;'r'
   431  007948  6F                 	db	111	;'o'
   432  007949  20                 	db	32
   433  00794A  43                 	db	67	;'C'
   434  00794B  61                 	db	97	;'a'
   435  00794C  6C                 	db	108	;'l'
   436  00794D  69                 	db	105	;'i'
   437  00794E  62                 	db	98	;'b'
   438  00794F  72                 	db	114	;'r'
   439  007950  61                 	db	97	;'a'
   440  007951  74                 	db	116	;'t'
   441  007952  69                 	db	105	;'i'
   442  007953  6F                 	db	111	;'o'
   443  007954  6E                 	db	110	;'n'
   444  007955  3A                 	db	58	;':'
   445  007956  20                 	db	32
   446  007957  50                 	db	80	;'P'
   447  007958  75                 	db	117	;'u'
   448  007959  74                 	db	116	;'t'
   449  00795A  20                 	db	32
   450  00795B  64                 	db	100	;'d'
   451  00795C  65                 	db	101	;'e'
   452  00795D  76                 	db	118	;'v'
   453  00795E  69                 	db	105	;'i'
   454  00795F  63                 	db	99	;'c'
   455  007960  65                 	db	101	;'e'
   456  007961  20                 	db	32
   457  007962  6F                 	db	111	;'o'
   458  007963  6E                 	db	110	;'n'
   459  007964  20                 	db	32
   460  007965  61                 	db	97	;'a'
   461  007966  20                 	db	32
   462  007967  6C                 	db	108	;'l'
   463  007968  65                 	db	101	;'e'
   464  007969  76                 	db	118	;'v'
   465  00796A  65                 	db	101	;'e'
   466  00796B  6C                 	db	108	;'l'
   467  00796C  20                 	db	32
   468  00796D  73                 	db	115	;'s'
   469  00796E  75                 	db	117	;'u'
   470  00796F  72                 	db	114	;'r'
   471  007970  66                 	db	102	;'f'
   472  007971  61                 	db	97	;'a'
   473  007972  63                 	db	99	;'c'
   474  007973  65                 	db	101	;'e'
   475  007974  20                 	db	32
   476  007975  61                 	db	97	;'a'
   477  007976  6E                 	db	110	;'n'
   478  007977  64                 	db	100	;'d'
   479  007978  20                 	db	32
   480  007979  6B                 	db	107	;'k'
   481  00797A  65                 	db	101	;'e'
   482  00797B  65                 	db	101	;'e'
   483  00797C  70                 	db	112	;'p'
   484  00797D  20                 	db	32
   485  00797E  6D                 	db	109	;'m'
   486  00797F  6F                 	db	111	;'o'
   487  007980  74                 	db	116	;'t'
   488  007981  69                 	db	105	;'i'
   489  007982  6F                 	db	111	;'o'
   490  007983  6E                 	db	110	;'n'
   491  007984  6C                 	db	108	;'l'
   492  007985  65                 	db	101	;'e'
   493  007986  73                 	db	115	;'s'
   494  007987  73                 	db	115	;'s'
   495  007988  21                 	db	33
   496  007989  20                 	db	32
   497  00798A  57                 	db	87	;'W'
   498  00798B  61                 	db	97	;'a'
   499  00798C  69                 	db	105	;'i'
   500  00798D  74                 	db	116	;'t'
   501  00798E  2E                 	db	46
   502  00798F  2E                 	db	46
   503  007990  2E                 	db	46
   504  007991  2E                 	db	46
   505  007992  2E                 	db	46
   506  007993  2E                 	db	46
   507  007994  00                 	db	0
   508  007995                     STR_39:
   509  007995  42                 	db	66	;'B'
   510  007996  4E                 	db	78	;'N'
   511  007997  4F                 	db	79	;'O'
   512  007998  20                 	db	32
   513  007999  6C                 	db	108	;'l'
   514  00799A  6F                 	db	111	;'o'
   515  00799B  77                 	db	119	;'w'
   516  00799C  20                 	db	32
   517  00799D  70                 	db	112	;'p'
   518  00799E  6F                 	db	111	;'o'
   519  00799F  77                 	db	119	;'w'
   520  0079A0  65                 	db	101	;'e'
   521  0079A1  72                 	db	114	;'r'
   522  0079A2  20                 	db	32
   523  0079A3  6D                 	db	109	;'m'
   524  0079A4  6F                 	db	111	;'o'
   525  0079A5  64                 	db	100	;'d'
   526  0079A6  65                 	db	101	;'e'
   527  0079A7  20                 	db	32
   528  0079A8  6E                 	db	110	;'n'
   529  0079A9  6F                 	db	111	;'o'
   530  0079AA  20                 	db	32
   531  0079AB  61                 	db	97	;'a'
   532  0079AC  76                 	db	118	;'v'
   533  0079AD  61                 	db	97	;'a'
   534  0079AE  69                 	db	105	;'i'
   535  0079AF  6C                 	db	108	;'l'
   536  0079B0  61                 	db	97	;'a'
   537  0079B1  62                 	db	98	;'b'
   538  0079B2  6C                 	db	108	;'l'
   539  0079B3  65                 	db	101	;'e'
   540  0079B4  20                 	db	32
   541  0079B5  66                 	db	102	;'f'
   542  0079B6  6F                 	db	111	;'o'
   543  0079B7  72                 	db	114	;'r'
   544  0079B8  20                 	db	32
   545  0079B9  73                 	db	115	;'s'
   546  0079BA  65                 	db	101	;'e'
   547  0079BB  6C                 	db	108	;'l'
   548  0079BC  65                 	db	101	;'e'
   549  0079BD  63                 	db	99	;'c'
   550  0079BE  74                 	db	116	;'t'
   551  0079BF  65                 	db	101	;'e'
   552  0079C0  64                 	db	100	;'d'
   553  0079C1  20                 	db	32
   554  0079C2  6F                 	db	111	;'o'
   555  0079C3  70                 	db	112	;'p'
   556  0079C4  65                 	db	101	;'e'
   557  0079C5  72                 	db	114	;'r'
   558  0079C6  61                 	db	97	;'a'
   559  0079C7  74                 	db	116	;'t'
   560  0079C8  69                 	db	105	;'i'
   561  0079C9  6F                 	db	111	;'o'
   562  0079CA  6E                 	db	110	;'n'
   563  0079CB  20                 	db	32
   564  0079CC  6D                 	db	109	;'m'
   565  0079CD  6F                 	db	111	;'o'
   566  0079CE  64                 	db	100	;'d'
   567  0079CF  65                 	db	101	;'e'
   568  0079D0  00                 	db	0
   569  0079D1                     STR_51:
   570  0079D1  4D                 	db	77	;'M'
   571  0079D2  61                 	db	97	;'a'
   572  0079D3  67                 	db	103	;'g'
   573  0079D4  20                 	db	32
   574  0079D5  43                 	db	67	;'C'
   575  0079D6  61                 	db	97	;'a'
   576  0079D7  6C                 	db	108	;'l'
   577  0079D8  69                 	db	105	;'i'
   578  0079D9  62                 	db	98	;'b'
   579  0079DA  72                 	db	114	;'r'
   580  0079DB  61                 	db	97	;'a'
   581  0079DC  74                 	db	116	;'t'
   582  0079DD  69                 	db	105	;'i'
   583  0079DE  6F                 	db	111	;'o'
   584  0079DF  6E                 	db	110	;'n'
   585  0079E0  3A                 	db	58	;':'
   586  0079E1  20                 	db	32
   587  0079E2  57                 	db	87	;'W'
   588  0079E3  61                 	db	97	;'a'
   589  0079E4  76                 	db	118	;'v'
   590  0079E5  65                 	db	101	;'e'
   591  0079E6  20                 	db	32
   592  0079E7  64                 	db	100	;'d'
   593  0079E8  65                 	db	101	;'e'
   594  0079E9  76                 	db	118	;'v'
   595  0079EA  69                 	db	105	;'i'
   596  0079EB  63                 	db	99	;'c'
   597  0079EC  65                 	db	101	;'e'
   598  0079ED  20                 	db	32
   599  0079EE  69                 	db	105	;'i'
   600  0079EF  6E                 	db	110	;'n'
   601  0079F0  20                 	db	32
   602  0079F1  61                 	db	97	;'a'
   603  0079F2  20                 	db	32
   604  0079F3  66                 	db	102	;'f'
   605  0079F4  69                 	db	105	;'i'
   606  0079F5  67                 	db	103	;'g'
   607  0079F6  75                 	db	117	;'u'
   608  0079F7  72                 	db	114	;'r'
   609  0079F8  65                 	db	101	;'e'
   610  0079F9  20                 	db	32
   611  0079FA  65                 	db	101	;'e'
   612  0079FB  69                 	db	105	;'i'
   613  0079FC  67                 	db	103	;'g'
   614  0079FD  68                 	db	104	;'h'
   615  0079FE  74                 	db	116	;'t'
   616  0079FF  20                 	db	32
   617  007A00  75                 	db	117	;'u'
   618  007A01  6E                 	db	110	;'n'
   619  007A02  74                 	db	116	;'t'
   620  007A03  69                 	db	105	;'i'
   621  007A04  6C                 	db	108	;'l'
   622  007A05  20                 	db	32
   623  007A06  64                 	db	100	;'d'
   624  007A07  6F                 	db	111	;'o'
   625  007A08  6E                 	db	110	;'n'
   626  007A09  65                 	db	101	;'e'
   627  007A0A  21                 	db	33
   628  007A0B  00                 	db	0
   629  007A0C                     STR_23:
   630  007A0C  4E                 	db	78	;'N'
   631  007A0D  6F                 	db	111	;'o'
   632  007A0E  74                 	db	116	;'t'
   633  007A0F  20                 	db	32
   634  007A10  63                 	db	99	;'c'
   635  007A11  61                 	db	97	;'a'
   636  007A12  6C                 	db	108	;'l'
   637  007A13  69                 	db	105	;'i'
   638  007A14  62                 	db	98	;'b'
   639  007A15  72                 	db	114	;'r'
   640  007A16  61                 	db	97	;'a'
   641  007A17  74                 	db	116	;'t'
   642  007A18  65                 	db	101	;'e'
   643  007A19  64                 	db	100	;'d'
   644  007A1A  20                 	db	32
   645  007A1B  3D                 	db	61	;'='
   646  007A1C  20                 	db	32
   647  007A1D  30                 	db	48	;'0'
   648  007A1E  2C                 	db	44
   649  007A1F  20                 	db	32
   650  007A20  66                 	db	102	;'f'
   651  007A21  75                 	db	117	;'u'
   652  007A22  6C                 	db	108	;'l'
   653  007A23  6C                 	db	108	;'l'
   654  007A24  79                 	db	121	;'y'
   655  007A25  20                 	db	32
   656  007A26  63                 	db	99	;'c'
   657  007A27  61                 	db	97	;'a'
   658  007A28  6C                 	db	108	;'l'
   659  007A29  69                 	db	105	;'i'
   660  007A2A  62                 	db	98	;'b'
   661  007A2B  72                 	db	114	;'r'
   662  007A2C  61                 	db	97	;'a'
   663  007A2D  74                 	db	116	;'t'
   664  007A2E  65                 	db	101	;'e'
   665  007A2F  64                 	db	100	;'d'
   666  007A30  20                 	db	32
   667  007A31  3D                 	db	61	;'='
   668  007A32  20                 	db	32
   669  007A33  33                 	db	51	;'3'
   670  007A34  00                 	db	0
   671  007A35                     STR_7:
   672  007A35  42                 	db	66	;'B'
   673  007A36  4E                 	db	78	;'N'
   674  007A37  4F                 	db	79	;'O'
   675  007A38  30                 	db	48	;'0'
   676  007A39  35                 	db	53	;'5'
   677  007A3A  35                 	db	53	;'5'
   678  007A3B  20                 	db	32
   679  007A3C  47                 	db	71	;'G'
   680  007A3D  59                 	db	89	;'Y'
   681  007A3E  52                 	db	82	;'R'
   682  007A3F  4F                 	db	79	;'O'
   683  007A40  20                 	db	32
   684  007A41  49                 	db	73	;'I'
   685  007A42  20                 	db	32
   686  007A43  41                 	db	65	;'A'
   687  007A44  4D                 	db	77	;'M'
   688  007A45  20                 	db	32
   689  007A46  25                 	db	37
   690  007A47  63                 	db	99	;'c'
   691  007A48  20                 	db	32
   692  007A49  20                 	db	32
   693  007A4A  49                 	db	73	;'I'
   694  007A4B  20                 	db	32
   695  007A4C  73                 	db	115	;'s'
   696  007A4D  68                 	db	104	;'h'
   697  007A4E  6F                 	db	111	;'o'
   698  007A4F  75                 	db	117	;'u'
   699  007A50  6C                 	db	108	;'l'
   700  007A51  64                 	db	100	;'d'
   701  007A52  20                 	db	32
   702  007A53  62                 	db	98	;'b'
   703  007A54  65                 	db	101	;'e'
   704  007A55  20                 	db	32
   705  007A56  30                 	db	48	;'0'
   706  007A57  78                 	db	120	;'x'
   707  007A58  30                 	db	48	;'0'
   708  007A59  46                 	db	70	;'F'
   709  007A5A  2F                 	db	47
   710  007A5B  6E                 	db	110	;'n'
   711  007A5C  00                 	db	0
   712  007A5D                     STR_28:
   713  007A5D  42                 	db	66	;'B'
   714  007A5E  4E                 	db	78	;'N'
   715  007A5F  4F                 	db	79	;'O'
   716  007A60  30                 	db	48	;'0'
   717  007A61  35                 	db	53	;'5'
   718  007A62  35                 	db	53	;'5'
   719  007A63  20                 	db	32
   720  007A64  69                 	db	105	;'i'
   721  007A65  6E                 	db	110	;'n'
   722  007A66  69                 	db	105	;'i'
   723  007A67  74                 	db	116	;'t'
   724  007A68  69                 	db	105	;'i'
   725  007A69  61                 	db	97	;'a'
   726  007A6A  6C                 	db	108	;'l'
   727  007A6B  69                 	db	105	;'i'
   728  007A6C  7A                 	db	122	;'z'
   729  007A6D  65                 	db	101	;'e'
   730  007A6E  64                 	db	100	;'d'
   731  007A6F  20                 	db	32
   732  007A70  66                 	db	102	;'f'
   733  007A71  6F                 	db	111	;'o'
   734  007A72  72                 	db	114	;'r'
   735  007A73  20                 	db	32
   736  007A74  73                 	db	115	;'s'
   737  007A75  65                 	db	101	;'e'
   738  007A76  6E                 	db	110	;'n'
   739  007A77  73                 	db	115	;'s'
   740  007A78  6F                 	db	111	;'o'
   741  007A79  72                 	db	114	;'r'
   742  007A7A  20                 	db	32
   743  007A7B  6D                 	db	109	;'m'
   744  007A7C  6F                 	db	111	;'o'
   745  007A7D  64                 	db	100	;'d'
   746  007A7E  65                 	db	101	;'e'
   747  007A7F  2E                 	db	46
   748  007A80  2E                 	db	46
   749  007A81  2E                 	db	46
   750  007A82  2E                 	db	46
   751  007A83  00                 	db	0
   752  007A84                     STR_40:
   753  007A84  41                 	db	65	;'A'
   754  007A85  63                 	db	99	;'c'
   755  007A86  63                 	db	99	;'c'
   756  007A87  65                 	db	101	;'e'
   757  007A88  6C                 	db	108	;'l'
   758  007A89  65                 	db	101	;'e'
   759  007A8A  72                 	db	114	;'r'
   760  007A8B  6F                 	db	111	;'o'
   761  007A8C  6D                 	db	109	;'m'
   762  007A8D  65                 	db	101	;'e'
   763  007A8E  74                 	db	116	;'t'
   764  007A8F  65                 	db	101	;'e'
   765  007A90  72                 	db	114	;'r'
   766  007A91  20                 	db	32
   767  007A92  70                 	db	112	;'p'
   768  007A93  6F                 	db	111	;'o'
   769  007A94  77                 	db	119	;'w'
   770  007A95  65                 	db	101	;'e'
   771  007A96  72                 	db	114	;'r'
   772  007A97  20                 	db	32
   773  007A98  6D                 	db	109	;'m'
   774  007A99  6F                 	db	111	;'o'
   775  007A9A  64                 	db	100	;'d'
   776  007A9B  65                 	db	101	;'e'
   777  007A9C  20                 	db	32
   778  007A9D  6E                 	db	110	;'n'
   779  007A9E  6F                 	db	111	;'o'
   780  007A9F  74                 	db	116	;'t'
   781  007AA0  20                 	db	32
   782  007AA1  61                 	db	97	;'a'
   783  007AA2  76                 	db	118	;'v'
   784  007AA3  61                 	db	97	;'a'
   785  007AA4  69                 	db	105	;'i'
   786  007AA5  6C                 	db	108	;'l'
   787  007AA6  61                 	db	97	;'a'
   788  007AA7  62                 	db	98	;'b'
   789  007AA8  6C                 	db	108	;'l'
   790  007AA9  65                 	db	101	;'e'
   791  007AAA  00                 	db	0
   792  007AAB                     STR_4:
   793  007AAB  42                 	db	66	;'B'
   794  007AAC  4E                 	db	78	;'N'
   795  007AAD  4F                 	db	79	;'O'
   796  007AAE  30                 	db	48	;'0'
   797  007AAF  35                 	db	53	;'5'
   798  007AB0  35                 	db	53	;'5'
   799  007AB1  20                 	db	32
   800  007AB2  2D                 	db	45
   801  007AB3  20                 	db	32
   802  007AB4  49                 	db	73	;'I'
   803  007AB5  20                 	db	32
   804  007AB6  41                 	db	65	;'A'
   805  007AB7  4D                 	db	77	;'M'
   806  007AB8  20                 	db	32
   807  007AB9  25                 	db	37
   808  007ABA  73                 	db	115	;'s'
   809  007ABB  20                 	db	32
   810  007ABC  20                 	db	32
   811  007ABD  2D                 	db	45
   812  007ABE  20                 	db	32
   813  007ABF  49                 	db	73	;'I'
   814  007AC0  20                 	db	32
   815  007AC1  73                 	db	115	;'s'
   816  007AC2  68                 	db	104	;'h'
   817  007AC3  6F                 	db	111	;'o'
   818  007AC4  75                 	db	117	;'u'
   819  007AC5  6C                 	db	108	;'l'
   820  007AC6  64                 	db	100	;'d'
   821  007AC7  20                 	db	32
   822  007AC8  62                 	db	98	;'b'
   823  007AC9  65                 	db	101	;'e'
   824  007ACA  20                 	db	32
   825  007ACB  30                 	db	48	;'0'
   826  007ACC  78                 	db	120	;'x'
   827  007ACD  41                 	db	65	;'A'
   828  007ACE  30                 	db	48	;'0'
   829  007ACF  2F                 	db	47
   830  007AD0  6E                 	db	110	;'n'
   831  007AD1  00                 	db	0
   832  007AD2                     STR_44:
   833  007AD2  48                 	db	72	;'H'
   834  007AD3  61                 	db	97	;'a'
   835  007AD4  72                 	db	114	;'r'
   836  007AD5  64                 	db	100	;'d'
   837  007AD6  77                 	db	119	;'w'
   838  007AD7  61                 	db	97	;'a'
   839  007AD8  72                 	db	114	;'r'
   840  007AD9  65                 	db	101	;'e'
   841  007ADA  20                 	db	32
   842  007ADB  78                 	db	120	;'x'
   843  007ADC  2C                 	db	44
   844  007ADD  20                 	db	32
   845  007ADE  79                 	db	121	;'y'
   846  007ADF  2C                 	db	44
   847  007AE0  20                 	db	32
   848  007AE1  7A                 	db	122	;'z'
   849  007AE2  20                 	db	32
   850  007AE3  6C                 	db	108	;'l'
   851  007AE4  69                 	db	105	;'i'
   852  007AE5  6E                 	db	110	;'n'
   853  007AE6  65                 	db	101	;'e'
   854  007AE7  61                 	db	97	;'a'
   855  007AE8  72                 	db	114	;'r'
   856  007AE9  20                 	db	32
   857  007AEA  61                 	db	97	;'a'
   858  007AEB  63                 	db	99	;'c'
   859  007AEC  63                 	db	99	;'c'
   860  007AED  65                 	db	101	;'e'
   861  007AEE  6C                 	db	108	;'l'
   862  007AEF  65                 	db	101	;'e'
   863  007AF0  72                 	db	114	;'r'
   864  007AF1  61                 	db	97	;'a'
   865  007AF2  74                 	db	116	;'t'
   866  007AF3  69                 	db	105	;'i'
   867  007AF4  6F                 	db	111	;'o'
   868  007AF5  6E                 	db	110	;'n'
   869  007AF6  3A                 	db	58	;':'
   870  007AF7  00                 	db	0
   871  007AF8                     STR_6:
   872  007AF8  42                 	db	66	;'B'
   873  007AF9  4E                 	db	78	;'N'
   874  007AFA  4F                 	db	79	;'O'
   875  007AFB  30                 	db	48	;'0'
   876  007AFC  35                 	db	53	;'5'
   877  007AFD  35                 	db	53	;'5'
   878  007AFE  20                 	db	32
   879  007AFF  4D                 	db	77	;'M'
   880  007B00  41                 	db	65	;'A'
   881  007B01  47                 	db	71	;'G'
   882  007B02  20                 	db	32
   883  007B03  49                 	db	73	;'I'
   884  007B04  20                 	db	32
   885  007B05  41                 	db	65	;'A'
   886  007B06  4D                 	db	77	;'M'
   887  007B07  20                 	db	32
   888  007B08  25                 	db	37
   889  007B09  63                 	db	99	;'c'
   890  007B0A  20                 	db	32
   891  007B0B  49                 	db	73	;'I'
   892  007B0C  20                 	db	32
   893  007B0D  73                 	db	115	;'s'
   894  007B0E  68                 	db	104	;'h'
   895  007B0F  6F                 	db	111	;'o'
   896  007B10  75                 	db	117	;'u'
   897  007B11  6C                 	db	108	;'l'
   898  007B12  64                 	db	100	;'d'
   899  007B13  20                 	db	32
   900  007B14  62                 	db	98	;'b'
   901  007B15  65                 	db	101	;'e'
   902  007B16  20                 	db	32
   903  007B17  30                 	db	48	;'0'
   904  007B18  78                 	db	120	;'x'
   905  007B19  33                 	db	51	;'3'
   906  007B1A  32                 	db	50	;'2'
   907  007B1B  2F                 	db	47
   908  007B1C  6E                 	db	110	;'n'
   909  007B1D  00                 	db	0
   910  007B1E                     STR_5:
   911  007B1E  42                 	db	66	;'B'
   912  007B1F  4E                 	db	78	;'N'
   913  007B20  4F                 	db	79	;'O'
   914  007B21  30                 	db	48	;'0'
   915  007B22  35                 	db	53	;'5'
   916  007B23  35                 	db	53	;'5'
   917  007B24  20                 	db	32
   918  007B25  41                 	db	65	;'A'
   919  007B26  43                 	db	67	;'C'
   920  007B27  43                 	db	67	;'C'
   921  007B28  20                 	db	32
   922  007B29  49                 	db	73	;'I'
   923  007B2A  20                 	db	32
   924  007B2B  41                 	db	65	;'A'
   925  007B2C  4D                 	db	77	;'M'
   926  007B2D  20                 	db	32
   927  007B2E  25                 	db	37
   928  007B2F  63                 	db	99	;'c'
   929  007B30  20                 	db	32
   930  007B31  49                 	db	73	;'I'
   931  007B32  20                 	db	32
   932  007B33  73                 	db	115	;'s'
   933  007B34  68                 	db	104	;'h'
   934  007B35  6F                 	db	111	;'o'
   935  007B36  75                 	db	117	;'u'
   936  007B37  6C                 	db	108	;'l'
   937  007B38  64                 	db	100	;'d'
   938  007B39  20                 	db	32
   939  007B3A  62                 	db	98	;'b'
   940  007B3B  65                 	db	101	;'e'
   941  007B3C  20                 	db	32
   942  007B3D  30                 	db	48	;'0'
   943  007B3E  78                 	db	120	;'x'
   944  007B3F  46                 	db	70	;'F'
   945  007B40  42                 	db	66	;'B'
   946  007B41  2F                 	db	47
   947  007B42  6E                 	db	110	;'n'
   948  007B43  00                 	db	0
   949  007B44                     STR_20:
   950  007B44  41                 	db	65	;'A'
   951  007B45  76                 	db	118	;'v'
   952  007B46  65                 	db	101	;'e'
   953  007B47  72                 	db	114	;'r'
   954  007B48  61                 	db	97	;'a'
   955  007B49  67                 	db	103	;'g'
   956  007B4A  65                 	db	101	;'e'
   957  007B4B  20                 	db	32
   958  007B4C  61                 	db	97	;'a'
   959  007B4D  63                 	db	99	;'c'
   960  007B4E  63                 	db	99	;'c'
   961  007B4F  65                 	db	101	;'e'
   962  007B50  6C                 	db	108	;'l'
   963  007B51  65                 	db	101	;'e'
   964  007B52  72                 	db	114	;'r'
   965  007B53  6F                 	db	111	;'o'
   966  007B54  6D                 	db	109	;'m'
   967  007B55  65                 	db	101	;'e'
   968  007B56  74                 	db	116	;'t'
   969  007B57  65                 	db	101	;'e'
   970  007B58  72                 	db	114	;'r'
   971  007B59  20                 	db	32
   972  007B5A  62                 	db	98	;'b'
   973  007B5B  69                 	db	105	;'i'
   974  007B5C  61                 	db	97	;'a'
   975  007B5D  73                 	db	115	;'s'
   976  007B5E  20                 	db	32
   977  007B5F  28                 	db	40
   978  007B60  6D                 	db	109	;'m'
   979  007B61  67                 	db	103	;'g'
   980  007B62  29                 	db	41
   981  007B63  20                 	db	32
   982  007B64  3D                 	db	61	;'='
   983  007B65  20                 	db	32
   984  007B66  25                 	db	37
   985  007B67  66                 	db	102	;'f'
   986  007B68  00                 	db	0
   987  007B69                     STR_41:
   988  007B69  46                 	db	70	;'F'
   989  007B6A  75                 	db	117	;'u'
   990  007B6B  73                 	db	115	;'s'
   991  007B6C  69                 	db	105	;'i'
   992  007B6D  6F                 	db	111	;'o'
   993  007B6E  6E                 	db	110	;'n'
   994  007B6F  20                 	db	32
   995  007B70  61                 	db	97	;'a'
   996  007B71  6C                 	db	108	;'l'
   997  007B72  67                 	db	103	;'g'
   998  007B73  6F                 	db	111	;'o'
   999  007B74  72                 	db	114	;'r'
  1000  007B75  69                 	db	105	;'i'
  1001  007B76  74                 	db	116	;'t'
  1002  007B77  68                 	db	104	;'h'
  1003  007B78  6D                 	db	109	;'m'
  1004  007B79  20                 	db	32
  1005  007B7A  63                 	db	99	;'c'
  1006  007B7B  6F                 	db	111	;'o'
  1007  007B7C  6E                 	db	110	;'n'
  1008  007B7D  66                 	db	102	;'f'
  1009  007B7E  69                 	db	105	;'i'
  1010  007B7F  67                 	db	103	;'g'
  1011  007B80  75                 	db	117	;'u'
  1012  007B81  72                 	db	114	;'r'
  1013  007B82  61                 	db	97	;'a'
  1014  007B83  74                 	db	116	;'t'
  1015  007B84  69                 	db	105	;'i'
  1016  007B85  6F                 	db	111	;'o'
  1017  007B86  6E                 	db	110	;'n'
  1018  007B87  20                 	db	32
  1019  007B88  65                 	db	101	;'e'
  1020  007B89  72                 	db	114	;'r'
  1021  007B8A  72                 	db	114	;'r'
  1022  007B8B  6F                 	db	111	;'o'
  1023  007B8C  72                 	db	114	;'r'
  1024  007B8D  00                 	db	0
  1025  007B8E                     STR_43:
  1026  007B8E  47                 	db	71	;'G'
  1027  007B8F  79                 	db	121	;'y'
  1028  007B90  72                 	db	114	;'r'
  1029  007B91  6F                 	db	111	;'o'
  1030  007B92  20                 	db	32
  1031  007B93  74                 	db	116	;'t'
  1032  007B94  65                 	db	101	;'e'
  1033  007B95  6D                 	db	109	;'m'
  1034  007B96  70                 	db	112	;'p'
  1035  007B97  65                 	db	101	;'e'
  1036  007B98  72                 	db	114	;'r'
  1037  007B99  61                 	db	97	;'a'
  1038  007B9A  74                 	db	116	;'t'
  1039  007B9B  75                 	db	117	;'u'
  1040  007B9C  72                 	db	114	;'r'
  1041  007B9D  65                 	db	101	;'e'
  1042  007B9E  20                 	db	32
  1043  007B9F  69                 	db	105	;'i'
  1044  007BA0  73                 	db	115	;'s'
  1045  007BA1  20                 	db	32
  1046  007BA2  3D                 	db	61	;'='
  1047  007BA3  20                 	db	32
  1048  007BA4  25                 	db	37
  1049  007BA5  66                 	db	102	;'f'
  1050  007BA6  20                 	db	32
  1051  007BA7  64                 	db	100	;'d'
  1052  007BA8  65                 	db	101	;'e'
  1053  007BA9  67                 	db	103	;'g'
  1054  007BAA  72                 	db	114	;'r'
  1055  007BAB  65                 	db	101	;'e'
  1056  007BAC  65                 	db	101	;'e'
  1057  007BAD  73                 	db	115	;'s'
  1058  007BAE  20                 	db	32
  1059  007BAF  43                 	db	67	;'C'
  1060  007BB0  0A                 	db	10
  1061  007BB1  00                 	db	0
  1062  007BB2                     STR_22:
  1063  007BB2  41                 	db	65	;'A'
  1064  007BB3  76                 	db	118	;'v'
  1065  007BB4  65                 	db	101	;'e'
  1066  007BB5  72                 	db	114	;'r'
  1067  007BB6  61                 	db	97	;'a'
  1068  007BB7  67                 	db	103	;'g'
  1069  007BB8  65                 	db	101	;'e'
  1070  007BB9  20                 	db	32
  1071  007BBA  6D                 	db	109	;'m'
  1072  007BBB  61                 	db	97	;'a'
  1073  007BBC  67                 	db	103	;'g'
  1074  007BBD  6E                 	db	110	;'n'
  1075  007BBE  65                 	db	101	;'e'
  1076  007BBF  74                 	db	116	;'t'
  1077  007BC0  6F                 	db	111	;'o'
  1078  007BC1  6D                 	db	109	;'m'
  1079  007BC2  65                 	db	101	;'e'
  1080  007BC3  74                 	db	116	;'t'
  1081  007BC4  65                 	db	101	;'e'
  1082  007BC5  72                 	db	114	;'r'
  1083  007BC6  20                 	db	32
  1084  007BC7  62                 	db	98	;'b'
  1085  007BC8  69                 	db	105	;'i'
  1086  007BC9  61                 	db	97	;'a'
  1087  007BCA  73                 	db	115	;'s'
  1088  007BCB  20                 	db	32
  1089  007BCC  28                 	db	40
  1090  007BCD  6D                 	db	109	;'m'
  1091  007BCE  47                 	db	71	;'G'
  1092  007BCF  29                 	db	41
  1093  007BD0  20                 	db	32
  1094  007BD1  3D                 	db	61	;'='
  1095  007BD2  20                 	db	32
  1096  007BD3  25                 	db	37
  1097  007BD4  66                 	db	102	;'f'
  1098  007BD5  00                 	db	0
  1099  007BD6                     STR_32:
  1100  007BD6  53                 	db	83	;'S'
  1101  007BD7  65                 	db	101	;'e'
  1102  007BD8  6E                 	db	110	;'n'
  1103  007BD9  73                 	db	115	;'s'
  1104  007BDA  6F                 	db	111	;'o'
  1105  007BDB  72                 	db	114	;'r'
  1106  007BDC  20                 	db	32
  1107  007BDD  66                 	db	102	;'f'
  1108  007BDE  75                 	db	117	;'u'
  1109  007BDF  73                 	db	115	;'s'
  1110  007BE0  69                 	db	105	;'i'
  1111  007BE1  6F                 	db	111	;'o'
  1112  007BE2  6E                 	db	110	;'n'
  1113  007BE3  20                 	db	32
  1114  007BE4  6E                 	db	110	;'n'
  1115  007BE5  6F                 	db	111	;'o'
  1116  007BE6  74                 	db	116	;'t'
  1117  007BE7  20                 	db	32
  1118  007BE8  61                 	db	97	;'a'
  1119  007BE9  6C                 	db	108	;'l'
  1120  007BEA  67                 	db	103	;'g'
  1121  007BEB  6F                 	db	111	;'o'
  1122  007BEC  72                 	db	114	;'r'
  1123  007BED  69                 	db	105	;'i'
  1124  007BEE  74                 	db	116	;'t'
  1125  007BEF  68                 	db	104	;'h'
  1126  007BF0  6D                 	db	109	;'m'
  1127  007BF1  20                 	db	32
  1128  007BF2  72                 	db	114	;'r'
  1129  007BF3  75                 	db	117	;'u'
  1130  007BF4  6E                 	db	110	;'n'
  1131  007BF5  6E                 	db	110	;'n'
  1132  007BF6  69                 	db	105	;'i'
  1133  007BF7  6E                 	db	110	;'n'
  1134  007BF8  67                 	db	103	;'g'
  1135  007BF9  00                 	db	0
  1136  007BFA                     STR_46:
  1137  007BFA  48                 	db	72	;'H'
  1138  007BFB  61                 	db	97	;'a'
  1139  007BFC  72                 	db	114	;'r'
  1140  007BFD  64                 	db	100	;'d'
  1141  007BFE  77                 	db	119	;'w'
  1142  007BFF  61                 	db	97	;'a'
  1143  007C00  72                 	db	114	;'r'
  1144  007C01  65                 	db	101	;'e'
  1145  007C02  20                 	db	32
  1146  007C03  78                 	db	120	;'x'
  1147  007C04  2C                 	db	44
  1148  007C05  20                 	db	32
  1149  007C06  79                 	db	121	;'y'
  1150  007C07  2C                 	db	44
  1151  007C08  20                 	db	32
  1152  007C09  7A                 	db	122	;'z'
  1153  007C0A  20                 	db	32
  1154  007C0B  67                 	db	103	;'g'
  1155  007C0C  72                 	db	114	;'r'
  1156  007C0D  61                 	db	97	;'a'
  1157  007C0E  76                 	db	118	;'v'
  1158  007C0F  69                 	db	105	;'i'
  1159  007C10  74                 	db	116	;'t'
  1160  007C11  79                 	db	121	;'y'
  1161  007C12  20                 	db	32
  1162  007C13  76                 	db	118	;'v'
  1163  007C14  65                 	db	101	;'e'
  1164  007C15  63                 	db	99	;'c'
  1165  007C16  74                 	db	116	;'t'
  1166  007C17  6F                 	db	111	;'o'
  1167  007C18  72                 	db	114	;'r'
  1168  007C19  3A                 	db	58	;':'
  1169  007C1A  20                 	db	32
  1170  007C1B  00                 	db	0
  1171  007C1C                     STR_29:
  1172  007C1C  43                 	db	67	;'C'
  1173  007C1D  6F                 	db	111	;'o'
  1174  007C1E  75                 	db	117	;'u'
  1175  007C1F  6C                 	db	108	;'l'
  1176  007C20  64                 	db	100	;'d'
  1177  007C21  20                 	db	32
  1178  007C22  6E                 	db	110	;'n'
  1179  007C23  6F                 	db	111	;'o'
  1180  007C24  74                 	db	116	;'t'
  1181  007C25  20                 	db	32
  1182  007C26  63                 	db	99	;'c'
  1183  007C27  6F                 	db	111	;'o'
  1184  007C28  6E                 	db	110	;'n'
  1185  007C29  6E                 	db	110	;'n'
  1186  007C2A  65                 	db	101	;'e'
  1187  007C2B  63                 	db	99	;'c'
  1188  007C2C  74                 	db	116	;'t'
  1189  007C2D  20                 	db	32
  1190  007C2E  74                 	db	116	;'t'
  1191  007C2F  6F                 	db	111	;'o'
  1192  007C30  20                 	db	32
  1193  007C31  42                 	db	66	;'B'
  1194  007C32  4E                 	db	78	;'N'
  1195  007C33  4F                 	db	79	;'O'
  1196  007C34  30                 	db	48	;'0'
  1197  007C35  35                 	db	53	;'5'
  1198  007C36  35                 	db	53	;'5'
  1199  007C37  3A                 	db	58	;':'
  1200  007C38  20                 	db	32
  1201  007C39  30                 	db	48	;'0'
  1202  007C3A  78                 	db	120	;'x'
  1203  007C3B  25                 	db	37
  1204  007C3C  63                 	db	99	;'c'
  1205  007C3D  00                 	db	0
  1206  007C3E                     STR_37:
  1207  007C3E  52                 	db	82	;'R'
  1208  007C3F  65                 	db	101	;'e'
  1209  007C40  67                 	db	103	;'g'
  1210  007C41  69                 	db	105	;'i'
  1211  007C42  73                 	db	115	;'s'
  1212  007C43  74                 	db	116	;'t'
  1213  007C44  65                 	db	101	;'e'
  1214  007C45  72                 	db	114	;'r'
  1215  007C46  20                 	db	32
  1216  007C47  6D                 	db	109	;'m'
  1217  007C48  61                 	db	97	;'a'
  1218  007C49  70                 	db	112	;'p'
  1219  007C4A  20                 	db	32
  1220  007C4B  61                 	db	97	;'a'
  1221  007C4C  64                 	db	100	;'d'
  1222  007C4D  64                 	db	100	;'d'
  1223  007C4E  72                 	db	114	;'r'
  1224  007C4F  65                 	db	101	;'e'
  1225  007C50  73                 	db	115	;'s'
  1226  007C51  73                 	db	115	;'s'
  1227  007C52  20                 	db	32
  1228  007C53  6F                 	db	111	;'o'
  1229  007C54  75                 	db	117	;'u'
  1230  007C55  74                 	db	116	;'t'
  1231  007C56  20                 	db	32
  1232  007C57  6F                 	db	111	;'o'
  1233  007C58  66                 	db	102	;'f'
  1234  007C59  20                 	db	32
  1235  007C5A  72                 	db	114	;'r'
  1236  007C5B  61                 	db	97	;'a'
  1237  007C5C  6E                 	db	110	;'n'
  1238  007C5D  67                 	db	103	;'g'
  1239  007C5E  65                 	db	101	;'e'
  1240  007C5F  00                 	db	0
  1241  007C60                     STR_31:
  1242  007C60  53                 	db	83	;'S'
  1243  007C61  65                 	db	101	;'e'
  1244  007C62  6E                 	db	110	;'n'
  1245  007C63  73                 	db	115	;'s'
  1246  007C64  6F                 	db	111	;'o'
  1247  007C65  72                 	db	114	;'r'
  1248  007C66  20                 	db	32
  1249  007C67  66                 	db	102	;'f'
  1250  007C68  75                 	db	117	;'u'
  1251  007C69  73                 	db	115	;'s'
  1252  007C6A  69                 	db	105	;'i'
  1253  007C6B  6F                 	db	111	;'o'
  1254  007C6C  6E                 	db	110	;'n'
  1255  007C6D  20                 	db	32
  1256  007C6E  61                 	db	97	;'a'
  1257  007C6F  6C                 	db	108	;'l'
  1258  007C70  67                 	db	103	;'g'
  1259  007C71  6F                 	db	111	;'o'
  1260  007C72  72                 	db	114	;'r'
  1261  007C73  69                 	db	105	;'i'
  1262  007C74  74                 	db	116	;'t'
  1263  007C75  68                 	db	104	;'h'
  1264  007C76  6D                 	db	109	;'m'
  1265  007C77  20                 	db	32
  1266  007C78  72                 	db	114	;'r'
  1267  007C79  75                 	db	117	;'u'
  1268  007C7A  6E                 	db	110	;'n'
  1269  007C7B  6E                 	db	110	;'n'
  1270  007C7C  69                 	db	105	;'i'
  1271  007C7D  6E                 	db	110	;'n'
  1272  007C7E  67                 	db	103	;'g'
  1273  007C7F  0A                 	db	10
  1274  007C80  00                 	db	0
  1275  007C81                     STR_1:
  1276  007C81  42                 	db	66	;'B'
  1277  007C82  4E                 	db	78	;'N'
  1278  007C83  4F                 	db	79	;'O'
  1279  007C84  30                 	db	48	;'0'
  1280  007C85  35                 	db	53	;'5'
  1281  007C86  35                 	db	53	;'5'
  1282  007C87  20                 	db	32
  1283  007C88  39                 	db	57	;'9'
  1284  007C89  2D                 	db	45
  1285  007C8A  61                 	db	97	;'a'
  1286  007C8B  78                 	db	120	;'x'
  1287  007C8C  69                 	db	105	;'i'
  1288  007C8D  73                 	db	115	;'s'
  1289  007C8E  20                 	db	32
  1290  007C8F  6D                 	db	109	;'m'
  1291  007C90  6F                 	db	111	;'o'
  1292  007C91  74                 	db	116	;'t'
  1293  007C92  69                 	db	105	;'i'
  1294  007C93  6F                 	db	111	;'o'
  1295  007C94  6E                 	db	110	;'n'
  1296  007C95  20                 	db	32
  1297  007C96  73                 	db	115	;'s'
  1298  007C97  65                 	db	101	;'e'
  1299  007C98  6E                 	db	110	;'n'
  1300  007C99  73                 	db	115	;'s'
  1301  007C9A  6F                 	db	111	;'o'
  1302  007C9B  72                 	db	114	;'r'
  1303  007C9C  2E                 	db	46
  1304  007C9D  2E                 	db	46
  1305  007C9E  2E                 	db	46
  1306  007C9F  2F                 	db	47
  1307  007CA0  6E                 	db	110	;'n'
  1308  007CA1  00                 	db	0
  1309  007CA2                     STR_12:
  1310  007CA2  61                 	db	97	;'a'
  1311  007CA3  63                 	db	99	;'c'
  1312  007CA4  63                 	db	99	;'c'
  1313  007CA5  65                 	db	101	;'e'
  1314  007CA6  6C                 	db	108	;'l'
  1315  007CA7  65                 	db	101	;'e'
  1316  007CA8  72                 	db	114	;'r'
  1317  007CA9  6F                 	db	111	;'o'
  1318  007CAA  6D                 	db	109	;'m'
  1319  007CAB  65                 	db	101	;'e'
  1320  007CAC  74                 	db	116	;'t'
  1321  007CAD  65                 	db	101	;'e'
  1322  007CAE  72                 	db	114	;'r'
  1323  007CAF  20                 	db	32
  1324  007CB0  70                 	db	112	;'p'
  1325  007CB1  61                 	db	97	;'a'
  1326  007CB2  73                 	db	115	;'s'
  1327  007CB3  73                 	db	115	;'s'
  1328  007CB4  65                 	db	101	;'e'
  1329  007CB5  64                 	db	100	;'d'
  1330  007CB6  20                 	db	32
  1331  007CB7  73                 	db	115	;'s'
  1332  007CB8  65                 	db	101	;'e'
  1333  007CB9  6C                 	db	108	;'l'
  1334  007CBA  66                 	db	102	;'f'
  1335  007CBB  20                 	db	32
  1336  007CBC  74                 	db	116	;'t'
  1337  007CBD  65                 	db	101	;'e'
  1338  007CBE  73                 	db	115	;'s'
  1339  007CBF  74                 	db	116	;'t'
  1340  007CC0  2F                 	db	47
  1341  007CC1  6E                 	db	110	;'n'
  1342  007CC2  00                 	db	0
  1343  007CC3                     STR_36:
  1344  007CC3  52                 	db	82	;'R'
  1345  007CC4  65                 	db	101	;'e'
  1346  007CC5  67                 	db	103	;'g'
  1347  007CC6  69                 	db	105	;'i'
  1348  007CC7  73                 	db	115	;'s'
  1349  007CC8  74                 	db	116	;'t'
  1350  007CC9  65                 	db	101	;'e'
  1351  007CCA  72                 	db	114	;'r'
  1352  007CCB  20                 	db	32
  1353  007CCC  6D                 	db	109	;'m'
  1354  007CCD  61                 	db	97	;'a'
  1355  007CCE  70                 	db	112	;'p'
  1356  007CCF  20                 	db	32
  1357  007CD0  76                 	db	118	;'v'
  1358  007CD1  61                 	db	97	;'a'
  1359  007CD2  6C                 	db	108	;'l'
  1360  007CD3  75                 	db	117	;'u'
  1361  007CD4  65                 	db	101	;'e'
  1362  007CD5  20                 	db	32
  1363  007CD6  6F                 	db	111	;'o'
  1364  007CD7  75                 	db	117	;'u'
  1365  007CD8  74                 	db	116	;'t'
  1366  007CD9  20                 	db	32
  1367  007CDA  6F                 	db	111	;'o'
  1368  007CDB  66                 	db	102	;'f'
  1369  007CDC  20                 	db	32
  1370  007CDD  72                 	db	114	;'r'
  1371  007CDE  61                 	db	97	;'a'
  1372  007CDF  6E                 	db	110	;'n'
  1373  007CE0  67                 	db	103	;'g'
  1374  007CE1  65                 	db	101	;'e'
  1375  007CE2  00                 	db	0
  1376  007CE3                     STR_14:
  1377  007CE3  6D                 	db	109	;'m'
  1378  007CE4  61                 	db	97	;'a'
  1379  007CE5  67                 	db	103	;'g'
  1380  007CE6  6E                 	db	110	;'n'
  1381  007CE7  65                 	db	101	;'e'
  1382  007CE8  74                 	db	116	;'t'
  1383  007CE9  6F                 	db	111	;'o'
  1384  007CEA  6D                 	db	109	;'m'
  1385  007CEB  65                 	db	101	;'e'
  1386  007CEC  74                 	db	116	;'t'
  1387  007CED  65                 	db	101	;'e'
  1388  007CEE  72                 	db	114	;'r'
  1389  007CEF  20                 	db	32
  1390  007CF0  70                 	db	112	;'p'
  1391  007CF1  61                 	db	97	;'a'
  1392  007CF2  73                 	db	115	;'s'
  1393  007CF3  73                 	db	115	;'s'
  1394  007CF4  65                 	db	101	;'e'
  1395  007CF5  64                 	db	100	;'d'
  1396  007CF6  20                 	db	32
  1397  007CF7  73                 	db	115	;'s'
  1398  007CF8  65                 	db	101	;'e'
  1399  007CF9  6C                 	db	108	;'l'
  1400  007CFA  66                 	db	102	;'f'
  1401  007CFB  20                 	db	32
  1402  007CFC  74                 	db	116	;'t'
  1403  007CFD  65                 	db	101	;'e'
  1404  007CFE  73                 	db	115	;'s'
  1405  007CFF  74                 	db	116	;'t'
  1406  007D00  2F                 	db	47
  1407  007D01  6E                 	db	110	;'n'
  1408  007D02  00                 	db	0
  1409  007D03                     STR_33:
  1410  007D03  50                 	db	80	;'P'
  1411  007D04  65                 	db	101	;'e'
  1412  007D05  72                 	db	114	;'r'
  1413  007D06  69                 	db	105	;'i'
  1414  007D07  70                 	db	112	;'p'
  1415  007D08  68                 	db	104	;'h'
  1416  007D09  65                 	db	101	;'e'
  1417  007D0A  72                 	db	114	;'r'
  1418  007D0B  61                 	db	97	;'a'
  1419  007D0C  6C                 	db	108	;'l'
  1420  007D0D  20                 	db	32
  1421  007D0E  69                 	db	105	;'i'
  1422  007D0F  6E                 	db	110	;'n'
  1423  007D10  69                 	db	105	;'i'
  1424  007D11  74                 	db	116	;'t'
  1425  007D12  69                 	db	105	;'i'
  1426  007D13  61                 	db	97	;'a'
  1427  007D14  6C                 	db	108	;'l'
  1428  007D15  69                 	db	105	;'i'
  1429  007D16  7A                 	db	122	;'z'
  1430  007D17  61                 	db	97	;'a'
  1431  007D18  74                 	db	116	;'t'
  1432  007D19  69                 	db	105	;'i'
  1433  007D1A  6F                 	db	111	;'o'
  1434  007D1B  6E                 	db	110	;'n'
  1435  007D1C  20                 	db	32
  1436  007D1D  65                 	db	101	;'e'
  1437  007D1E  72                 	db	114	;'r'
  1438  007D1F  72                 	db	114	;'r'
  1439  007D20  6F                 	db	111	;'o'
  1440  007D21  72                 	db	114	;'r'
  1441  007D22  00                 	db	0
  1442  007D23                     STR_27:
  1443  007D23  4D                 	db	77	;'M'
  1444  007D24  61                 	db	97	;'a'
  1445  007D25  67                 	db	103	;'g'
  1446  007D26  20                 	db	32
  1447  007D27  20                 	db	32
  1448  007D28  20                 	db	32
  1449  007D29  20                 	db	32
  1450  007D2A  63                 	db	99	;'c'
  1451  007D2B  61                 	db	97	;'a'
  1452  007D2C  6C                 	db	108	;'l'
  1453  007D2D  69                 	db	105	;'i'
  1454  007D2E  62                 	db	98	;'b'
  1455  007D2F  72                 	db	114	;'r'
  1456  007D30  61                 	db	97	;'a'
  1457  007D31  74                 	db	116	;'t'
  1458  007D32  69                 	db	105	;'i'
  1459  007D33  6F                 	db	111	;'o'
  1460  007D34  6E                 	db	110	;'n'
  1461  007D35  20                 	db	32
  1462  007D36  73                 	db	115	;'s'
  1463  007D37  74                 	db	116	;'t'
  1464  007D38  61                 	db	97	;'a'
  1465  007D39  74                 	db	116	;'t'
  1466  007D3A  75                 	db	117	;'u'
  1467  007D3B  73                 	db	115	;'s'
  1468  007D3C  20                 	db	32
  1469  007D3D  3D                 	db	61	;'='
  1470  007D3E  20                 	db	32
  1471  007D3F  25                 	db	37
  1472  007D40  63                 	db	99	;'c'
  1473  007D41  00                 	db	0
  1474  007D42                     STR_25:
  1475  007D42  47                 	db	71	;'G'
  1476  007D43  79                 	db	121	;'y'
  1477  007D44  72                 	db	114	;'r'
  1478  007D45  6F                 	db	111	;'o'
  1479  007D46  20                 	db	32
  1480  007D47  20                 	db	32
  1481  007D48  20                 	db	32
  1482  007D49  63                 	db	99	;'c'
  1483  007D4A  61                 	db	97	;'a'
  1484  007D4B  6C                 	db	108	;'l'
  1485  007D4C  69                 	db	105	;'i'
  1486  007D4D  62                 	db	98	;'b'
  1487  007D4E  72                 	db	114	;'r'
  1488  007D4F  61                 	db	97	;'a'
  1489  007D50  74                 	db	116	;'t'
  1490  007D51  69                 	db	105	;'i'
  1491  007D52  6F                 	db	111	;'o'
  1492  007D53  6E                 	db	110	;'n'
  1493  007D54  20                 	db	32
  1494  007D55  73                 	db	115	;'s'
  1495  007D56  74                 	db	116	;'t'
  1496  007D57  61                 	db	97	;'a'
  1497  007D58  74                 	db	116	;'t'
  1498  007D59  75                 	db	117	;'u'
  1499  007D5A  73                 	db	115	;'s'
  1500  007D5B  20                 	db	32
  1501  007D5C  3D                 	db	61	;'='
  1502  007D5D  20                 	db	32
  1503  007D5E  25                 	db	37
  1504  007D5F  63                 	db	99	;'c'
  1505  007D60  00                 	db	0
  1506  007D61                     STR_26:
  1507  007D61  41                 	db	65	;'A'
  1508  007D62  63                 	db	99	;'c'
  1509  007D63  63                 	db	99	;'c'
  1510  007D64  65                 	db	101	;'e'
  1511  007D65  6C                 	db	108	;'l'
  1512  007D66  20                 	db	32
  1513  007D67  20                 	db	32
  1514  007D68  63                 	db	99	;'c'
  1515  007D69  61                 	db	97	;'a'
  1516  007D6A  6C                 	db	108	;'l'
  1517  007D6B  69                 	db	105	;'i'
  1518  007D6C  62                 	db	98	;'b'
  1519  007D6D  72                 	db	114	;'r'
  1520  007D6E  61                 	db	97	;'a'
  1521  007D6F  74                 	db	116	;'t'
  1522  007D70  69                 	db	105	;'i'
  1523  007D71  6F                 	db	111	;'o'
  1524  007D72  6E                 	db	110	;'n'
  1525  007D73  20                 	db	32
  1526  007D74  73                 	db	115	;'s'
  1527  007D75  74                 	db	116	;'t'
  1528  007D76  61                 	db	97	;'a'
  1529  007D77  74                 	db	116	;'t'
  1530  007D78  75                 	db	117	;'u'
  1531  007D79  73                 	db	115	;'s'
  1532  007D7A  20                 	db	32
  1533  007D7B  3D                 	db	61	;'='
  1534  007D7C  20                 	db	32
  1535  007D7D  25                 	db	37
  1536  007D7E  63                 	db	99	;'c'
  1537  007D7F  00                 	db	0
  1538  007D80                     STR_24:
  1539  007D80  53                 	db	83	;'S'
  1540  007D81  79                 	db	121	;'y'
  1541  007D82  73                 	db	115	;'s'
  1542  007D83  74                 	db	116	;'t'
  1543  007D84  65                 	db	101	;'e'
  1544  007D85  6D                 	db	109	;'m'
  1545  007D86  20                 	db	32
  1546  007D87  63                 	db	99	;'c'
  1547  007D88  61                 	db	97	;'a'
  1548  007D89  6C                 	db	108	;'l'
  1549  007D8A  69                 	db	105	;'i'
  1550  007D8B  62                 	db	98	;'b'
  1551  007D8C  72                 	db	114	;'r'
  1552  007D8D  61                 	db	97	;'a'
  1553  007D8E  74                 	db	116	;'t'
  1554  007D8F  69                 	db	105	;'i'
  1555  007D90  6F                 	db	111	;'o'
  1556  007D91  6E                 	db	110	;'n'
  1557  007D92  20                 	db	32
  1558  007D93  73                 	db	115	;'s'
  1559  007D94  74                 	db	116	;'t'
  1560  007D95  61                 	db	97	;'a'
  1561  007D96  74                 	db	116	;'t'
  1562  007D97  75                 	db	117	;'u'
  1563  007D98  73                 	db	115	;'s'
  1564  007D99  20                 	db	32
  1565  007D9A  3D                 	db	61	;'='
  1566  007D9B  20                 	db	32
  1567  007D9C  25                 	db	37
  1568  007D9D  63                 	db	99	;'c'
  1569  007D9E  00                 	db	0
  1570  007D9F                     STR_9:
  1571  007D9F  42                 	db	66	;'B'
  1572  007DA0  4E                 	db	78	;'N'
  1573  007DA1  4F                 	db	79	;'O'
  1574  007DA2  30                 	db	48	;'0'
  1575  007DA3  35                 	db	53	;'5'
  1576  007DA4  35                 	db	53	;'5'
  1577  007DA5  20                 	db	32
  1578  007DA6  53                 	db	83	;'S'
  1579  007DA7  57                 	db	87	;'W'
  1580  007DA8  20                 	db	32
  1581  007DA9  52                 	db	82	;'R'
  1582  007DAA  65                 	db	101	;'e'
  1583  007DAB  76                 	db	118	;'v'
  1584  007DAC  69                 	db	105	;'i'
  1585  007DAD  73                 	db	115	;'s'
  1586  007DAE  69                 	db	105	;'i'
  1587  007DAF  6F                 	db	111	;'o'
  1588  007DB0  6E                 	db	110	;'n'
  1589  007DB1  20                 	db	32
  1590  007DB2  49                 	db	73	;'I'
  1591  007DB3  44                 	db	68	;'D'
  1592  007DB4  3A                 	db	58	;':'
  1593  007DB5  20                 	db	32
  1594  007DB6  25                 	db	37
  1595  007DB7  63                 	db	99	;'c'
  1596  007DB8  2E                 	db	46
  1597  007DB9  25                 	db	37
  1598  007DBA  63                 	db	99	;'c'
  1599  007DBB  2F                 	db	47
  1600  007DBC  6E                 	db	110	;'n'
  1601  007DBD  00                 	db	0
  1602  007DBE                     STR_13:
  1603  007DBE  61                 	db	97	;'a'
  1604  007DBF  63                 	db	99	;'c'
  1605  007DC0  63                 	db	99	;'c'
  1606  007DC1  65                 	db	101	;'e'
  1607  007DC2  6C                 	db	108	;'l'
  1608  007DC3  65                 	db	101	;'e'
  1609  007DC4  72                 	db	114	;'r'
  1610  007DC5  6F                 	db	111	;'o'
  1611  007DC6  6D                 	db	109	;'m'
  1612  007DC7  65                 	db	101	;'e'
  1613  007DC8  74                 	db	116	;'t'
  1614  007DC9  65                 	db	101	;'e'
  1615  007DCA  72                 	db	114	;'r'
  1616  007DCB  20                 	db	32
  1617  007DCC  66                 	db	102	;'f'
  1618  007DCD  61                 	db	97	;'a'
  1619  007DCE  69                 	db	105	;'i'
  1620  007DCF  6C                 	db	108	;'l'
  1621  007DD0  65                 	db	101	;'e'
  1622  007DD1  64                 	db	100	;'d'
  1623  007DD2  20                 	db	32
  1624  007DD3  73                 	db	115	;'s'
  1625  007DD4  65                 	db	101	;'e'
  1626  007DD5  6C                 	db	108	;'l'
  1627  007DD6  66                 	db	102	;'f'
  1628  007DD7  20                 	db	32
  1629  007DD8  74                 	db	116	;'t'
  1630  007DD9  65                 	db	101	;'e'
  1631  007DDA  73                 	db	115	;'s'
  1632  007DDB  74                 	db	116	;'t'
  1633  007DDC  00                 	db	0
  1634  007DDD                     STR_11:
  1635  007DDD  42                 	db	66	;'B'
  1636  007DDE  4E                 	db	78	;'N'
  1637  007DDF  4F                 	db	79	;'O'
  1638  007DE0  30                 	db	48	;'0'
  1639  007DE1  35                 	db	53	;'5'
  1640  007DE2  35                 	db	53	;'5'
  1641  007DE3  20                 	db	32
  1642  007DE4  62                 	db	98	;'b'
  1643  007DE5  6F                 	db	111	;'o'
  1644  007DE6  6F                 	db	111	;'o'
  1645  007DE7  74                 	db	116	;'t'
  1646  007DE8  6C                 	db	108	;'l'
  1647  007DE9  6F                 	db	111	;'o'
  1648  007DEA  61                 	db	97	;'a'
  1649  007DEB  64                 	db	100	;'d'
  1650  007DEC  65                 	db	101	;'e'
  1651  007DED  72                 	db	114	;'r'
  1652  007DEE  20                 	db	32
  1653  007DEF  56                 	db	86	;'V'
  1654  007DF0  65                 	db	101	;'e'
  1655  007DF1  72                 	db	114	;'r'
  1656  007DF2  73                 	db	115	;'s'
  1657  007DF3  69                 	db	105	;'i'
  1658  007DF4  6F                 	db	111	;'o'
  1659  007DF5  6E                 	db	110	;'n'
  1660  007DF6  3A                 	db	58	;':'
  1661  007DF7  20                 	db	32
  1662  007DF8  25                 	db	37
  1663  007DF9  63                 	db	99	;'c'
  1664  007DFA  00                 	db	0
  1665  007DFB                     STR_15:
  1666  007DFB  6D                 	db	109	;'m'
  1667  007DFC  61                 	db	97	;'a'
  1668  007DFD  67                 	db	103	;'g'
  1669  007DFE  6E                 	db	110	;'n'
  1670  007DFF  65                 	db	101	;'e'
  1671  007E00  74                 	db	116	;'t'
  1672  007E01  6F                 	db	111	;'o'
  1673  007E02  6D                 	db	109	;'m'
  1674  007E03  65                 	db	101	;'e'
  1675  007E04  74                 	db	116	;'t'
  1676  007E05  65                 	db	101	;'e'
  1677  007E06  72                 	db	114	;'r'
  1678  007E07  20                 	db	32
  1679  007E08  66                 	db	102	;'f'
  1680  007E09  61                 	db	97	;'a'
  1681  007E0A  69                 	db	105	;'i'
  1682  007E0B  6C                 	db	108	;'l'
  1683  007E0C  65                 	db	101	;'e'
  1684  007E0D  64                 	db	100	;'d'
  1685  007E0E  20                 	db	32
  1686  007E0F  73                 	db	115	;'s'
  1687  007E10  65                 	db	101	;'e'
  1688  007E11  6C                 	db	108	;'l'
  1689  007E12  66                 	db	102	;'f'
  1690  007E13  20                 	db	32
  1691  007E14  74                 	db	116	;'t'
  1692  007E15  65                 	db	101	;'e'
  1693  007E16  73                 	db	115	;'s'
  1694  007E17  74                 	db	116	;'t'
  1695  007E18  00                 	db	0
  1696  007E19                     STR_50:
  1697  007E19  41                 	db	65	;'A'
  1698  007E1A  63                 	db	99	;'c'
  1699  007E1B  63                 	db	99	;'c'
  1700  007E1C  65                 	db	101	;'e'
  1701  007E1D  6C                 	db	108	;'l'
  1702  007E1E  2F                 	db	47
  1703  007E1F  47                 	db	71	;'G'
  1704  007E20  79                 	db	121	;'y'
  1705  007E21  72                 	db	114	;'r'
  1706  007E22  6F                 	db	111	;'o'
  1707  007E23  20                 	db	32
  1708  007E24  43                 	db	67	;'C'
  1709  007E25  61                 	db	97	;'a'
  1710  007E26  6C                 	db	108	;'l'
  1711  007E27  69                 	db	105	;'i'
  1712  007E28  62                 	db	98	;'b'
  1713  007E29  72                 	db	114	;'r'
  1714  007E2A  61                 	db	97	;'a'
  1715  007E2B  74                 	db	116	;'t'
  1716  007E2C  69                 	db	105	;'i'
  1717  007E2D  6F                 	db	111	;'o'
  1718  007E2E  6E                 	db	110	;'n'
  1719  007E2F  20                 	db	32
  1720  007E30  64                 	db	100	;'d'
  1721  007E31  6F                 	db	111	;'o'
  1722  007E32  6E                 	db	110	;'n'
  1723  007E33  65                 	db	101	;'e'
  1724  007E34  21                 	db	33
  1725  007E35  00                 	db	0
  1726  007E36                     STR_21:
  1727  007E36  41                 	db	65	;'A'
  1728  007E37  76                 	db	118	;'v'
  1729  007E38  65                 	db	101	;'e'
  1730  007E39  72                 	db	114	;'r'
  1731  007E3A  61                 	db	97	;'a'
  1732  007E3B  67                 	db	103	;'g'
  1733  007E3C  65                 	db	101	;'e'
  1734  007E3D  20                 	db	32
  1735  007E3E  67                 	db	103	;'g'
  1736  007E3F  79                 	db	121	;'y'
  1737  007E40  72                 	db	114	;'r'
  1738  007E41  6F                 	db	111	;'o'
  1739  007E42  20                 	db	32
  1740  007E43  62                 	db	98	;'b'
  1741  007E44  69                 	db	105	;'i'
  1742  007E45  61                 	db	97	;'a'
  1743  007E46  73                 	db	115	;'s'
  1744  007E47  20                 	db	32
  1745  007E48  28                 	db	40
  1746  007E49  64                 	db	100	;'d'
  1747  007E4A  70                 	db	112	;'p'
  1748  007E4B  73                 	db	115	;'s'
  1749  007E4C  29                 	db	41
  1750  007E4D  20                 	db	32
  1751  007E4E  3D                 	db	61	;'='
  1752  007E4F  20                 	db	32
  1753  007E50  25                 	db	37
  1754  007E51  66                 	db	102	;'f'
  1755  007E52  00                 	db	0
  1756  007E53                     STR_16:
  1757  007E53  67                 	db	103	;'g'
  1758  007E54  79                 	db	121	;'y'
  1759  007E55  72                 	db	114	;'r'
  1760  007E56  6F                 	db	111	;'o'
  1761  007E57  73                 	db	115	;'s'
  1762  007E58  63                 	db	99	;'c'
  1763  007E59  6F                 	db	111	;'o'
  1764  007E5A  70                 	db	112	;'p'
  1765  007E5B  65                 	db	101	;'e'
  1766  007E5C  20                 	db	32
  1767  007E5D  70                 	db	112	;'p'
  1768  007E5E  61                 	db	97	;'a'
  1769  007E5F  73                 	db	115	;'s'
  1770  007E60  73                 	db	115	;'s'
  1771  007E61  65                 	db	101	;'e'
  1772  007E62  64                 	db	100	;'d'
  1773  007E63  20                 	db	32
  1774  007E64  73                 	db	115	;'s'
  1775  007E65  65                 	db	101	;'e'
  1776  007E66  6C                 	db	108	;'l'
  1777  007E67  66                 	db	102	;'f'
  1778  007E68  20                 	db	32
  1779  007E69  74                 	db	116	;'t'
  1780  007E6A  65                 	db	101	;'e'
  1781  007E6B  73                 	db	115	;'s'
  1782  007E6C  74                 	db	116	;'t'
  1783  007E6D  2F                 	db	47
  1784  007E6E  6E                 	db	110	;'n'
  1785  007E6F  00                 	db	0
  1786  007E70                     STR_34:
  1787  007E70  53                 	db	83	;'S'
  1788  007E71  79                 	db	121	;'y'
  1789  007E72  73                 	db	115	;'s'
  1790  007E73  74                 	db	116	;'t'
  1791  007E74  65                 	db	101	;'e'
  1792  007E75  6D                 	db	109	;'m'
  1793  007E76  20                 	db	32
  1794  007E77  69                 	db	105	;'i'
  1795  007E78  6E                 	db	110	;'n'
  1796  007E79  69                 	db	105	;'i'
  1797  007E7A  74                 	db	116	;'t'
  1798  007E7B  69                 	db	105	;'i'
  1799  007E7C  61                 	db	97	;'a'
  1800  007E7D  6C                 	db	108	;'l'
  1801  007E7E  69                 	db	105	;'i'
  1802  007E7F  7A                 	db	122	;'z'
  1803  007E80  61                 	db	97	;'a'
  1804  007E81  74                 	db	116	;'t'
  1805  007E82  69                 	db	105	;'i'
  1806  007E83  6F                 	db	111	;'o'
  1807  007E84  6E                 	db	110	;'n'
  1808  007E85  20                 	db	32
  1809  007E86  65                 	db	101	;'e'
  1810  007E87  72                 	db	114	;'r'
  1811  007E88  72                 	db	114	;'r'
  1812  007E89  6F                 	db	111	;'o'
  1813  007E8A  72                 	db	114	;'r'
  1814  007E8B  00                 	db	0
  1815  007E8C                     STR_42:
  1816  007E8C  53                 	db	83	;'S'
  1817  007E8D  65                 	db	101	;'e'
  1818  007E8E  6E                 	db	110	;'n'
  1819  007E8F  73                 	db	115	;'s'
  1820  007E90  6F                 	db	111	;'o'
  1821  007E91  72                 	db	114	;'r'
  1822  007E92  20                 	db	32
  1823  007E93  63                 	db	99	;'c'
  1824  007E94  6F                 	db	111	;'o'
  1825  007E95  6E                 	db	110	;'n'
  1826  007E96  66                 	db	102	;'f'
  1827  007E97  69                 	db	105	;'i'
  1828  007E98  67                 	db	103	;'g'
  1829  007E99  75                 	db	117	;'u'
  1830  007E9A  72                 	db	114	;'r'
  1831  007E9B  61                 	db	97	;'a'
  1832  007E9C  74                 	db	116	;'t'
  1833  007E9D  69                 	db	105	;'i'
  1834  007E9E  6F                 	db	111	;'o'
  1835  007E9F  6E                 	db	110	;'n'
  1836  007EA0  20                 	db	32
  1837  007EA1  65                 	db	101	;'e'
  1838  007EA2  72                 	db	114	;'r'
  1839  007EA3  72                 	db	114	;'r'
  1840  007EA4  6F                 	db	111	;'o'
  1841  007EA5  72                 	db	114	;'r'
  1842  007EA6  00                 	db	0
  1843  007EA7                     STR_17:
  1844  007EA7  67                 	db	103	;'g'
  1845  007EA8  79                 	db	121	;'y'
  1846  007EA9  72                 	db	114	;'r'
  1847  007EAA  6F                 	db	111	;'o'
  1848  007EAB  73                 	db	115	;'s'
  1849  007EAC  63                 	db	99	;'c'
  1850  007EAD  6F                 	db	111	;'o'
  1851  007EAE  70                 	db	112	;'p'
  1852  007EAF  65                 	db	101	;'e'
  1853  007EB0  20                 	db	32
  1854  007EB1  66                 	db	102	;'f'
  1855  007EB2  61                 	db	97	;'a'
  1856  007EB3  69                 	db	105	;'i'
  1857  007EB4  6C                 	db	108	;'l'
  1858  007EB5  65                 	db	101	;'e'
  1859  007EB6  64                 	db	100	;'d'
  1860  007EB7  20                 	db	32
  1861  007EB8  73                 	db	115	;'s'
  1862  007EB9  65                 	db	101	;'e'
  1863  007EBA  6C                 	db	108	;'l'
  1864  007EBB  66                 	db	102	;'f'
  1865  007EBC  20                 	db	32
  1866  007EBD  74                 	db	116	;'t'
  1867  007EBE  65                 	db	101	;'e'
  1868  007EBF  73                 	db	115	;'s'
  1869  007EC0  74                 	db	116	;'t'
  1870  007EC1  00                 	db	0
  1871  007EC2                     STR_3:
  1872  007EC2  42                 	db	66	;'B'
  1873  007EC3  4E                 	db	78	;'N'
  1874  007EC4  4F                 	db	79	;'O'
  1875  007EC5  30                 	db	48	;'0'
  1876  007EC6  35                 	db	53	;'5'
  1877  007EC7  35                 	db	53	;'5'
  1878  007EC8  20                 	db	32
  1879  007EC9  57                 	db	87	;'W'
  1880  007ECA  48                 	db	72	;'H'
  1881  007ECB  4F                 	db	79	;'O'
  1882  007ECC  5F                 	db	95	;'_'
  1883  007ECD  41                 	db	65	;'A'
  1884  007ECE  4D                 	db	77	;'M'
  1885  007ECF  5F                 	db	95	;'_'
  1886  007ED0  49                 	db	73	;'I'
  1887  007ED1  20                 	db	32
  1888  007ED2  3D                 	db	61	;'='
  1889  007ED3  20                 	db	32
  1890  007ED4  30                 	db	48	;'0'
  1891  007ED5  78                 	db	120	;'x'
  1892  007ED6  25                 	db	37
  1893  007ED7  73                 	db	115	;'s'
  1894  007ED8  2F                 	db	47
  1895  007ED9  6E                 	db	110	;'n'
  1896  007EDA  00                 	db	0
  1897  007EDB                     STR_38:
  1898  007EDB  52                 	db	82	;'R'
  1899  007EDC  65                 	db	101	;'e'
  1900  007EDD  67                 	db	103	;'g'
  1901  007EDE  69                 	db	105	;'i'
  1902  007EDF  73                 	db	115	;'s'
  1903  007EE0  74                 	db	116	;'t'
  1904  007EE1  65                 	db	101	;'e'
  1905  007EE2  72                 	db	114	;'r'
  1906  007EE3  20                 	db	32
  1907  007EE4  6D                 	db	109	;'m'
  1908  007EE5  61                 	db	97	;'a'
  1909  007EE6  70                 	db	112	;'p'
  1910  007EE7  20                 	db	32
  1911  007EE8  77                 	db	119	;'w'
  1912  007EE9  72                 	db	114	;'r'
  1913  007EEA  69                 	db	105	;'i'
  1914  007EEB  74                 	db	116	;'t'
  1915  007EEC  65                 	db	101	;'e'
  1916  007EED  20                 	db	32
  1917  007EEE  65                 	db	101	;'e'
  1918  007EEF  72                 	db	114	;'r'
  1919  007EF0  72                 	db	114	;'r'
  1920  007EF1  6F                 	db	111	;'o'
  1921  007EF2  72                 	db	114	;'r'
  1922  007EF3  00                 	db	0
  1923  007EF4                     STR_35:
  1924  007EF4  53                 	db	83	;'S'
  1925  007EF5  65                 	db	101	;'e'
  1926  007EF6  6C                 	db	108	;'l'
  1927  007EF7  66                 	db	102	;'f'
  1928  007EF8  20                 	db	32
  1929  007EF9  74                 	db	116	;'t'
  1930  007EFA  65                 	db	101	;'e'
  1931  007EFB  73                 	db	115	;'s'
  1932  007EFC  74                 	db	116	;'t'
  1933  007EFD  20                 	db	32
  1934  007EFE  72                 	db	114	;'r'
  1935  007EFF  65                 	db	101	;'e'
  1936  007F00  73                 	db	115	;'s'
  1937  007F01  75                 	db	117	;'u'
  1938  007F02  6C                 	db	108	;'l'
  1939  007F03  74                 	db	116	;'t'
  1940  007F04  20                 	db	32
  1941  007F05  66                 	db	102	;'f'
  1942  007F06  61                 	db	97	;'a'
  1943  007F07  69                 	db	105	;'i'
  1944  007F08  6C                 	db	108	;'l'
  1945  007F09  65                 	db	101	;'e'
  1946  007F0A  64                 	db	100	;'d'
  1947  007F0B  00                 	db	0
  1948  007F0C                     STR_2:
  1949  007F0C  42                 	db	66	;'B'
  1950  007F0D  4E                 	db	78	;'N'
  1951  007F0E  4F                 	db	79	;'O'
  1952  007F0F  30                 	db	48	;'0'
  1953  007F10  35                 	db	53	;'5'
  1954  007F11  35                 	db	53	;'5'
  1955  007F12  20                 	db	32
  1956  007F13  41                 	db	65	;'A'
  1957  007F14  64                 	db	100	;'d'
  1958  007F15  64                 	db	100	;'d'
  1959  007F16  72                 	db	114	;'r'
  1960  007F17  65                 	db	101	;'e'
  1961  007F18  73                 	db	115	;'s'
  1962  007F19  73                 	db	115	;'s'
  1963  007F1A  20                 	db	32
  1964  007F1B  3D                 	db	61	;'='
  1965  007F1C  20                 	db	32
  1966  007F1D  30                 	db	48	;'0'
  1967  007F1E  78                 	db	120	;'x'
  1968  007F1F  25                 	db	37
  1969  007F20  73                 	db	115	;'s'
  1970  007F21  2F                 	db	47
  1971  007F22  6E                 	db	110	;'n'
  1972  007F23  00                 	db	0
  1973  007F24                     STR_18:
  1974  007F24  4D                 	db	77	;'M'
  1975  007F25  43                 	db	67	;'C'
  1976  007F26  55                 	db	85	;'U'
  1977  007F27  20                 	db	32
  1978  007F28  70                 	db	112	;'p'
  1979  007F29  61                 	db	97	;'a'
  1980  007F2A  73                 	db	115	;'s'
  1981  007F2B  73                 	db	115	;'s'
  1982  007F2C  65                 	db	101	;'e'
  1983  007F2D  64                 	db	100	;'d'
  1984  007F2E  20                 	db	32
  1985  007F2F  73                 	db	115	;'s'
  1986  007F30  65                 	db	101	;'e'
  1987  007F31  6C                 	db	108	;'l'
  1988  007F32  66                 	db	102	;'f'
  1989  007F33  20                 	db	32
  1990  007F34  74                 	db	116	;'t'
  1991  007F35  65                 	db	101	;'e'
  1992  007F36  73                 	db	115	;'s'
  1993  007F37  74                 	db	116	;'t'
  1994  007F38  2F                 	db	47
  1995  007F39  6E                 	db	110	;'n'
  1996  007F3A  00                 	db	0
  1997  007F3B                     STR_30:
  1998  007F3B  53                 	db	83	;'S'
  1999  007F3C  79                 	db	121	;'y'
  2000  007F3D  73                 	db	115	;'s'
  2001  007F3E  74                 	db	116	;'t'
  2002  007F3F  65                 	db	101	;'e'
  2003  007F40  6D                 	db	109	;'m'
  2004  007F41  20                 	db	32
  2005  007F42  53                 	db	83	;'S'
  2006  007F43  74                 	db	116	;'t'
  2007  007F44  61                 	db	97	;'a'
  2008  007F45  74                 	db	116	;'t'
  2009  007F46  75                 	db	117	;'u'
  2010  007F47  73                 	db	115	;'s'
  2011  007F48  20                 	db	32
  2012  007F49  3D                 	db	61	;'='
  2013  007F4A  20                 	db	32
  2014  007F4B  30                 	db	48	;'0'
  2015  007F4C  78                 	db	120	;'x'
  2016  007F4D  35                 	db	53	;'5'
  2017  007F4E  63                 	db	99	;'c'
  2018  007F4F  0A                 	db	10
  2019  007F50  00                 	db	0
  2020  007F51                     STR_52:
  2021  007F51  4D                 	db	77	;'M'
  2022  007F52  61                 	db	97	;'a'
  2023  007F53  67                 	db	103	;'g'
  2024  007F54  20                 	db	32
  2025  007F55  43                 	db	67	;'C'
  2026  007F56  61                 	db	97	;'a'
  2027  007F57  6C                 	db	108	;'l'
  2028  007F58  69                 	db	105	;'i'
  2029  007F59  62                 	db	98	;'b'
  2030  007F5A  72                 	db	114	;'r'
  2031  007F5B  61                 	db	97	;'a'
  2032  007F5C  74                 	db	116	;'t'
  2033  007F5D  69                 	db	105	;'i'
  2034  007F5E  6F                 	db	111	;'o'
  2035  007F5F  6E                 	db	110	;'n'
  2036  007F60  20                 	db	32
  2037  007F61  64                 	db	100	;'d'
  2038  007F62  6F                 	db	111	;'o'
  2039  007F63  6E                 	db	110	;'n'
  2040  007F64  65                 	db	101	;'e'
  2041  007F65  21                 	db	33
  2042  007F66  00                 	db	0
  2043  007F67                     STR_19:
  2044  007F67  4D                 	db	77	;'M'
  2045  007F68  43                 	db	67	;'C'
  2046  007F69  55                 	db	85	;'U'
  2047  007F6A  20                 	db	32
  2048  007F6B  66                 	db	102	;'f'
  2049  007F6C  61                 	db	97	;'a'
  2050  007F6D  69                 	db	105	;'i'
  2051  007F6E  6C                 	db	108	;'l'
  2052  007F6F  65                 	db	101	;'e'
  2053  007F70  64                 	db	100	;'d'
  2054  007F71  20                 	db	32
  2055  007F72  73                 	db	115	;'s'
  2056  007F73  65                 	db	101	;'e'
  2057  007F74  6C                 	db	108	;'l'
  2058  007F75  66                 	db	102	;'f'
  2059  007F76  20                 	db	32
  2060  007F77  74                 	db	116	;'t'
  2061  007F78  65                 	db	101	;'e'
  2062  007F79  73                 	db	115	;'s'
  2063  007F7A  74                 	db	116	;'t'
  2064  007F7B  00                 	db	0
  2065  007F7C                     STR_8:
  2066  007F7C  42                 	db	66	;'B'
  2067  007F7D  4E                 	db	78	;'N'
  2068  007F7E  4F                 	db	79	;'O'
  2069  007F7F  30                 	db	48	;'0'
  2070  007F80  35                 	db	53	;'5'
  2071  007F81  35                 	db	53	;'5'
  2072  007F82  20                 	db	32
  2073  007F83  69                 	db	105	;'i'
  2074  007F84  73                 	db	115	;'s'
  2075  007F85  20                 	db	32
  2076  007F86  6F                 	db	111	;'o'
  2077  007F87  6E                 	db	110	;'n'
  2078  007F88  6C                 	db	108	;'l'
  2079  007F89  69                 	db	105	;'i'
  2080  007F8A  6E                 	db	110	;'n'
  2081  007F8B  65                 	db	101	;'e'
  2082  007F8C  2E                 	db	46
  2083  007F8D  2E                 	db	46
  2084  007F8E  2E                 	db	46
  2085  007F8F  00                 	db	0
  2086  007F90                     STR_47:
  2087  007F90  20                 	db	32
  2088  007F91  25                 	db	37
  2089  007F92  66                 	db	102	;'f'
  2090  007F93  2E                 	db	46
  2091  007F94  31                 	db	49	;'1'
  2092  007F95  2C                 	db	44
  2093  007F96  20                 	db	32
  2094  007F97  25                 	db	37
  2095  007F98  66                 	db	102	;'f'
  2096  007F99  2E                 	db	46
  2097  007F9A  31                 	db	49	;'1'
  2098  007F9B  2C                 	db	44
  2099  007F9C  25                 	db	37
  2100  007F9D  66                 	db	102	;'f'
  2101  007F9E  2E                 	db	46
  2102  007F9F  31                 	db	49	;'1'
  2103  007FA0  0A                 	db	10
  2104  007FA1  00                 	db	0
  2105  007FA2                     STR_10:
  2106  007FA2  53                 	db	83	;'S'
  2107  007FA3  68                 	db	104	;'h'
  2108  007FA4  6F                 	db	111	;'o'
  2109  007FA5  75                 	db	117	;'u'
  2110  007FA6  6C                 	db	108	;'l'
  2111  007FA7  64                 	db	100	;'d'
  2112  007FA8  20                 	db	32
  2113  007FA9  62                 	db	98	;'b'
  2114  007FAA  65                 	db	101	;'e'
  2115  007FAB  20                 	db	32
  2116  007FAC  30                 	db	48	;'0'
  2117  007FAD  33                 	db	51	;'3'
  2118  007FAE  2E                 	db	46
  2119  007FAF  30                 	db	48	;'0'
  2120  007FB0  34                 	db	52	;'4'
  2121  007FB1  2F                 	db	47
  2122  007FB2  6E                 	db	110	;'n'
  2123  007FB3  00                 	db	0
  2124  007FB4                     STR_54:
  2125  007FB4  30                 	db	48	;'0'
  2126  007FB5  31                 	db	49	;'1'
  2127  007FB6  32                 	db	50	;'2'
  2128  007FB7  33                 	db	51	;'3'
  2129  007FB8  34                 	db	52	;'4'
  2130  007FB9  35                 	db	53	;'5'
  2131  007FBA  36                 	db	54	;'6'
  2132  007FBB  37                 	db	55	;'7'
  2133  007FBC  38                 	db	56	;'8'
  2134  007FBD  39                 	db	57	;'9'
  2135  007FBE  41                 	db	65	;'A'
  2136  007FBF  42                 	db	66	;'B'
  2137  007FC0  43                 	db	67	;'C'
  2138  007FC1  44                 	db	68	;'D'
  2139  007FC2  45                 	db	69	;'E'
  2140  007FC3  46                 	db	70	;'F'
  2141  007FC4  00                 	db	0
  2142  007FC5                     STR_55:
  2143  007FC5  30                 	db	48	;'0'
  2144  007FC6  31                 	db	49	;'1'
  2145  007FC7  32                 	db	50	;'2'
  2146  007FC8  33                 	db	51	;'3'
  2147  007FC9  34                 	db	52	;'4'
  2148  007FCA  35                 	db	53	;'5'
  2149  007FCB  36                 	db	54	;'6'
  2150  007FCC  37                 	db	55	;'7'
  2151  007FCD  38                 	db	56	;'8'
  2152  007FCE  39                 	db	57	;'9'
  2153  007FCF  61                 	db	97	;'a'
  2154  007FD0  62                 	db	98	;'b'
  2155  007FD1  63                 	db	99	;'c'
  2156  007FD2  64                 	db	100	;'d'
  2157  007FD3  65                 	db	101	;'e'
  2158  007FD4  66                 	db	102	;'f'
  2159  007FD5  00                 	db	0
  2160  007FD6                     STR_45:
  2161  007FD6  20                 	db	32
  2162  007FD7  25                 	db	37
  2163  007FD8  66                 	db	102	;'f'
  2164  007FD9  2E                 	db	46
  2165  007FDA  31                 	db	49	;'1'
  2166  007FDB  2C                 	db	44
  2167  007FDC  20                 	db	32
  2168  007FDD  25                 	db	37
  2169  007FDE  66                 	db	102	;'f'
  2170  007FDF  2E                 	db	46
  2171  007FE0  31                 	db	49	;'1'
  2172  007FE1  2C                 	db	44
  2173  007FE2  25                 	db	37
  2174  007FE3  66                 	db	102	;'f'
  2175  007FE4  2E                 	db	46
  2176  007FE5  31                 	db	49	;'1'
  2177  007FE6  00                 	db	0
  2178  007FE7                     STR_48:
  2179  007FE7  72                 	db	114	;'r'
  2180  007FE8  61                 	db	97	;'a'
  2181  007FE9  74                 	db	116	;'t'
  2182  007FEA  65                 	db	101	;'e'
  2183  007FEB  20                 	db	32
  2184  007FEC  3D                 	db	61	;'='
  2185  007FED  20                 	db	32
  2186  007FEE  25                 	db	37
  2187  007FEF  66                 	db	102	;'f'
  2188  007FF0  2E                 	db	46
  2189  007FF1  31                 	db	49	;'1'
  2190  007FF2  20                 	db	32
  2191  007FF3  48                 	db	72	;'H'
  2192  007FF4  7A                 	db	122	;'z'
  2193  007FF5  0A                 	db	10
  2194  007FF6  00                 	db	0
  2195  007FF7                     STR_53:
  2196  007FF7  28                 	db	40
  2197  007FF8  6E                 	db	110	;'n'
  2198  007FF9  75                 	db	117	;'u'
  2199  007FFA  6C                 	db	108	;'l'
  2200  007FFB  6C                 	db	108	;'l'
  2201  007FFC  29                 	db	41
  2202  007FFD  00                 	db	0
  2203                           
  2204                           ; #config settings
  2205  007FFE  00                 	db	0	; dummy byte at the end
  2206  0000                     
  2207                           	psect	cinit
  2208  00461E                     __pcinit:
  2209                           	opt stack 0
  2210  00461E                     start_initialization:
  2211                           	opt stack 0
  2212  00461E                     __initialization:
  2213                           	opt stack 0
  2214                           
  2215                           ; Clear objects allocated to BANK5 (200 bytes)
  2216  00461E  EE05  F000         	lfsr	0,__pbssBANK5
  2217  004622  0EC8               	movlw	200
  2218  004624                     clear_0:
  2219  004624  6AEE               	clrf	postinc0,c
  2220  004626  06E8               	decf	wreg,f,c
  2221  004628  E1FD               	bnz	clear_0
  2222                           
  2223                           ; Clear objects allocated to BANK4 (206 bytes)
  2224  00462A  EE04  F000         	lfsr	0,__pbssBANK4
  2225  00462E  0ECE               	movlw	206
  2226  004630                     clear_1:
  2227  004630  6AEE               	clrf	postinc0,c
  2228  004632  06E8               	decf	wreg,f,c
  2229  004634  E1FD               	bnz	clear_1
  2230                           
  2231                           ; Clear objects allocated to BANK3 (86 bytes)
  2232  004636  EE03  F000         	lfsr	0,__pbssBANK3
  2233  00463A  0E56               	movlw	86
  2234  00463C                     clear_2:
  2235  00463C  6AEE               	clrf	postinc0,c
  2236  00463E  06E8               	decf	wreg,f,c
  2237  004640  E1FD               	bnz	clear_2
  2238                           
  2239                           ; Clear objects allocated to BANK2 (217 bytes)
  2240  004642  EE02  F000         	lfsr	0,__pbssBANK2
  2241  004646  0ED9               	movlw	217
  2242  004648                     clear_3:
  2243  004648  6AEE               	clrf	postinc0,c
  2244  00464A  06E8               	decf	wreg,f,c
  2245  00464C  E1FD               	bnz	clear_3
  2246                           
  2247                           ; Clear objects allocated to BANK1 (249 bytes)
  2248  00464E  EE01  F000         	lfsr	0,__pbssBANK1
  2249  004652  0EF9               	movlw	249
  2250  004654                     clear_4:
  2251  004654  6AEE               	clrf	postinc0,c
  2252  004656  06E8               	decf	wreg,f,c
  2253  004658  E1FD               	bnz	clear_4
  2254                           
  2255                           ; Clear objects allocated to BANK0 (6 bytes)
  2256  00465A  0100               	movlb	0
  2257  00465C  6BFD               	clrf	(__pbssBANK0+5)& (0+255),b
  2258  00465E  6BFC               	clrf	(__pbssBANK0+4)& (0+255),b
  2259  004660  6BFB               	clrf	(__pbssBANK0+3)& (0+255),b
  2260  004662  6BFA               	clrf	(__pbssBANK0+2)& (0+255),b
  2261  004664  6BF9               	clrf	(__pbssBANK0+1)& (0+255),b
  2262  004666  6BF8               	clrf	__pbssBANK0& (0+255),b
  2263                           
  2264                           ; Clear objects allocated to COMRAM (22 bytes)
  2265  004668  EE00  F02B         	lfsr	0,__pbssCOMRAM
  2266  00466C  0E16               	movlw	22
  2267  00466E                     clear_5:
  2268  00466E  6AEE               	clrf	postinc0,c
  2269  004670  06E8               	decf	wreg,f,c
  2270  004672  E1FD               	bnz	clear_5
  2271                           
  2272                           ; Initialize objects allocated to BANK2 (24 bytes)
  2273                           ; load TBLPTR registers with __pidataBANK2
  2274  004674  0E98               	movlw	low __pidataBANK2
  2275  004676  6EF6               	movwf	tblptrl,c
  2276  004678  0E58               	movlw	high __pidataBANK2
  2277  00467A  6EF7               	movwf	tblptrh,c
  2278  00467C  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  2279  00467E  6EF8               	movwf	tblptru,c
  2280  004680  EE02  F0D9         	lfsr	0,__pdataBANK2
  2281  004684  EE10 F018          	lfsr	1,24
  2282  004688                     copy_data0:
  2283  004688  0009               	tblrd		*+
  2284  00468A  CFF5 FFEE          	movff	tablat,postinc0
  2285  00468E  50E5               	movf	postdec1,w,c
  2286  004690  50E1               	movf	fsr1l,w,c
  2287  004692  E1FA               	bnz	copy_data0
  2288                           
  2289                           ; Initialize objects allocated to BANK1 (6 bytes)
  2290                           ; load TBLPTR registers with __pidataBANK1
  2291  004694  0E46               	movlw	low __pidataBANK1
  2292  004696  6EF6               	movwf	tblptrl,c
  2293  004698  0E59               	movlw	high __pidataBANK1
  2294  00469A  6EF7               	movwf	tblptrh,c
  2295  00469C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  2296  00469E  6EF8               	movwf	tblptru,c
  2297  0046A0  EE01  F0F9         	lfsr	0,__pdataBANK1
  2298  0046A4  EE10 F006          	lfsr	1,6
  2299  0046A8                     copy_data1:
  2300  0046A8  0009               	tblrd		*+
  2301  0046AA  CFF5 FFEE          	movff	tablat,postinc0
  2302  0046AE  50E5               	movf	postdec1,w,c
  2303  0046B0  50E1               	movf	fsr1l,w,c
  2304  0046B2  E1FA               	bnz	copy_data1
  2305                           
  2306                           ; Initialize objects allocated to BANK0 (2 bytes)
  2307                           ; load TBLPTR registers with __pidataBANK0
  2308  0046B4  0E54               	movlw	low __pidataBANK0
  2309  0046B6  6EF6               	movwf	tblptrl,c
  2310  0046B8  0E59               	movlw	high __pidataBANK0
  2311  0046BA  6EF7               	movwf	tblptrh,c
  2312  0046BC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  2313  0046BE  6EF8               	movwf	tblptru,c
  2314  0046C0  0009               	tblrd		*+	;fetch initializer
  2315  0046C2  CFF5 F0FE          	movff	tablat,__pdataBANK0
  2316  0046C6  0009               	tblrd		*+	;fetch initializer
  2317  0046C8  CFF5 F0FF          	movff	tablat,__pdataBANK0+1
  2318                           
  2319                           ; Initialize objects allocated to COMRAM (4 bytes)
  2320                           ; load TBLPTR registers with __pidataCOMRAM
  2321  0046CC  0E4C               	movlw	low __pidataCOMRAM
  2322  0046CE  6EF6               	movwf	tblptrl,c
  2323  0046D0  0E59               	movlw	high __pidataCOMRAM
  2324  0046D2  6EF7               	movwf	tblptrh,c
  2325  0046D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  2326  0046D6  6EF8               	movwf	tblptru,c
  2327  0046D8  EE00  F041         	lfsr	0,__pdataCOMRAM
  2328  0046DC  EE10 F004          	lfsr	1,4
  2329  0046E0                     copy_data2:
  2330  0046E0  0009               	tblrd		*+
  2331  0046E2  CFF5 FFEE          	movff	tablat,postinc0
  2332  0046E6  50E5               	movf	postdec1,w,c
  2333  0046E8  50E1               	movf	fsr1l,w,c
  2334  0046EA  E1FA               	bnz	copy_data2
  2335  0046EC                     end_of_initialization:
  2336                           	opt stack 0
  2337  0046EC                     __end_of__initialization:
  2338                           	opt stack 0
  2339  0046EC  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2340  0046EE  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2341  0046F0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2342  0046F2  6EF8               	movwf	tblptru,c
  2343  0046F4  0100               	movlb	0
  2344  0046F6  EFAA  F02B         	goto	_main	;jump to C main() function
  2345                           tblptru	equ	0xFF8
  2346                           tblptrh	equ	0xFF7
  2347                           tblptrl	equ	0xFF6
  2348                           tablat	equ	0xFF5
  2349                           postinc0	equ	0xFEE
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           fsr1l	equ	0xFE1
  2353                           
  2354                           	psect	bssCOMRAM
  2355  00002B                     __pbssCOMRAM:
  2356                           	opt stack 0
  2357  00002B                     _group:
  2358                           	opt stack 0
  2359  00002B                     	ds	2
  2360  00002D                     _serial_available:
  2361                           	opt stack 0
  2362  00002D                     	ds	2
  2363  00002F                     _serial_read:
  2364                           	opt stack 0
  2365  00002F                     	ds	2
  2366  000031                     _serial_write:
  2367                           	opt stack 0
  2368  000031                     	ds	2
  2369  000033                     _timer1ReloadVal:
  2370                           	opt stack 0
  2371  000033                     	ds	2
  2372  000035                     I2C1_ISR@i2c_10bit_address_restart:
  2373                           	opt stack 0
  2374  000035                     	ds	1
  2375  000036                     I2C1_ISR@i2c_bytes_left:
  2376                           	opt stack 0
  2377  000036                     	ds	1
  2378  000037                     _AKNAKsend:
  2379                           	opt stack 0
  2380  000037                     	ds	1
  2381  000038                     _APwrMode:
  2382                           	opt stack 0
  2383  000038                     	ds	1
  2384  000039                     _GPwrMode:
  2385                           	opt stack 0
  2386  000039                     	ds	1
  2387  00003A                     _calc_CS:
  2388                           	opt stack 0
  2389  00003A                     	ds	1
  2390  00003B                     _i2c1_state:
  2391                           	opt stack 0
  2392  00003B                     	ds	1
  2393  00003C                     _i2c1_trb_count:
  2394                           	opt stack 0
  2395  00003C                     	ds	1
  2396  00003D                     _moduleAddress:
  2397                           	opt stack 0
  2398  00003D                     	ds	1
  2399  00003E                     _returnAddress:
  2400                           	opt stack 0
  2401  00003E                     	ds	1
  2402  00003F                     _rx_array_inx:
  2403                           	opt stack 0
  2404  00003F                     	ds	1
  2405  000040                     _rx_len:
  2406                           	opt stack 0
  2407  000040                     	ds	1
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           postinc0	equ	0xFEE
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1l	equ	0xFE1
  2416                           
  2417                           	psect	dataCOMRAM
  2418  000041                     __pdataCOMRAM:
  2419                           	opt stack 0
  2420  000041                     _Abw:
  2421                           	opt stack 0
  2422  000041                     	ds	1
  2423  000042                     _Gbw:
  2424                           	opt stack 0
  2425  000042                     	ds	1
  2426  000043                     _OPRMode:
  2427                           	opt stack 0
  2428  000043                     	ds	1
  2429  000044                     _Transmit_stall:
  2430                           	opt stack 0
  2431  000044                     	ds	1
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           postdec1	equ	0xFE5
  2439                           fsr1l	equ	0xFE1
  2440                           
  2441                           	psect	bssBANK0
  2442  0000F8                     __pbssBANK0:
  2443                           	opt stack 0
  2444  0000F8                     _Ascale:
  2445                           	opt stack 0
  2446  0000F8                     	ds	1
  2447  0000F9                     _MPwrMode:
  2448                           	opt stack 0
  2449  0000F9                     	ds	1
  2450  0000FA                     _maxDataAddress:
  2451                           	opt stack 0
  2452  0000FA                     	ds	1
  2453  0000FB                     _rx_address:
  2454                           	opt stack 0
  2455  0000FB                     	ds	1
  2456  0000FC                     I2C1_ISR@i2c_address:
  2457                           	opt stack 0
  2458  0000FC                     	ds	2
  2459                           tblptru	equ	0xFF8
  2460                           tblptrh	equ	0xFF7
  2461                           tblptrl	equ	0xFF6
  2462                           tablat	equ	0xFF5
  2463                           postinc0	equ	0xFEE
  2464                           wreg	equ	0xFE8
  2465                           postdec1	equ	0xFE5
  2466                           fsr1l	equ	0xFE1
  2467                           
  2468                           	psect	dataBANK0
  2469  0000FE                     __pdataBANK0:
  2470                           	opt stack 0
  2471  0000FE                     _Gscale:
  2472                           	opt stack 0
  2473  0000FE                     	ds	1
  2474  0000FF                     _MOpMode:
  2475                           	opt stack 0
  2476  0000FF                     	ds	1
  2477                           tblptru	equ	0xFF8
  2478                           tblptrh	equ	0xFF7
  2479                           tblptrl	equ	0xFF6
  2480                           tablat	equ	0xFF5
  2481                           postinc0	equ	0xFEE
  2482                           wreg	equ	0xFE8
  2483                           postdec1	equ	0xFE5
  2484                           fsr1l	equ	0xFE1
  2485                           
  2486                           	psect	bssBANK1
  2487  000100                     __pbssBANK1:
  2488                           	opt stack 0
  2489  000100                     _i2c1_object:
  2490                           	opt stack 0
  2491  000100                     	ds	7
  2492  000107                     accelgyroCalBNO055@F8181:
  2493                           	opt stack 0
  2494  000107                     	ds	6
  2495  00010D                     _Now:
  2496                           	opt stack 0
  2497  00010D                     	ds	4
  2498  000111                     _count:
  2499                           	opt stack 0
  2500  000111                     	ds	4
  2501  000115                     _delt_t:
  2502                           	opt stack 0
  2503  000115                     	ds	4
  2504  000119                     _firstUpdate:
  2505                           	opt stack 0
  2506  000119                     	ds	4
  2507  00011D                     _lastUpdate:
  2508                           	opt stack 0
  2509  00011D                     	ds	4
  2510  000121                     _sumCount:
  2511                           	opt stack 0
  2512  000121                     	ds	4
  2513  000125                     _GRVx:
  2514                           	opt stack 0
  2515  000125                     	ds	3
  2516  000128                     _GRVy:
  2517                           	opt stack 0
  2518  000128                     	ds	3
  2519  00012B                     _GRVz:
  2520                           	opt stack 0
  2521  00012B                     	ds	3
  2522  00012E                     _Gtemperature:
  2523                           	opt stack 0
  2524  00012E                     	ds	3
  2525  000131                     _GyroMeasDrift:
  2526                           	opt stack 0
  2527  000131                     	ds	3
  2528  000134                     _LIAx:
  2529                           	opt stack 0
  2530  000134                     	ds	3
  2531  000137                     _LIAy:
  2532                           	opt stack 0
  2533  000137                     	ds	3
  2534  00013A                     _LIAz:
  2535                           	opt stack 0
  2536  00013A                     	ds	3
  2537  00013D                     _Mtemperature:
  2538                           	opt stack 0
  2539  00013D                     	ds	3
  2540  000140                     _Pitch:
  2541                           	opt stack 0
  2542  000140                     	ds	3
  2543  000143                     _Roll:
  2544                           	opt stack 0
  2545  000143                     	ds	3
  2546  000146                     _Yaw:
  2547                           	opt stack 0
  2548  000146                     	ds	3
  2549  000149                     _aRes:
  2550                           	opt stack 0
  2551  000149                     	ds	3
  2552  00014C                     _ax:
  2553                           	opt stack 0
  2554  00014C                     	ds	3
  2555  00014F                     _ay:
  2556                           	opt stack 0
  2557  00014F                     	ds	3
  2558  000152                     _az:
  2559                           	opt stack 0
  2560  000152                     	ds	3
  2561  000155                     _beta:
  2562                           	opt stack 0
  2563  000155                     	ds	3
  2564  000158                     _deltat:
  2565                           	opt stack 0
  2566  000158                     	ds	3
  2567  00015B                     _gRes:
  2568                           	opt stack 0
  2569  00015B                     	ds	3
  2570  00015E                     _gx:
  2571                           	opt stack 0
  2572  00015E                     	ds	3
  2573  000161                     _gy:
  2574                           	opt stack 0
  2575  000161                     	ds	3
  2576  000164                     _gz:
  2577                           	opt stack 0
  2578  000164                     	ds	3
  2579  000167                     _mRes:
  2580                           	opt stack 0
  2581  000167                     	ds	3
  2582  00016A                     _mx:
  2583                           	opt stack 0
  2584  00016A                     	ds	3
  2585  00016D                     _my:
  2586                           	opt stack 0
  2587  00016D                     	ds	3
  2588  000170                     _mz:
  2589                           	opt stack 0
  2590  000170                     	ds	3
  2591  000173                     _pitch:
  2592                           	opt stack 0
  2593  000173                     	ds	3
  2594  000176                     _roll:
  2595                           	opt stack 0
  2596  000176                     	ds	3
  2597  000179                     _sum:
  2598                           	opt stack 0
  2599  000179                     	ds	3
  2600  00017C                     _yaw:
  2601                           	opt stack 0
  2602  00017C                     	ds	3
  2603  00017F                     _zeta:
  2604                           	opt stack 0
  2605  00017F                     	ds	3
  2606  000182                     I2C1_ISR@pi2c_buf_ptr:
  2607                           	opt stack 0
  2608  000182                     	ds	2
  2609  000184                     _TempOne:
  2610                           	opt stack 0
  2611  000184                     	ds	2
  2612  000186                     _TempTwo:
  2613                           	opt stack 0
  2614  000186                     	ds	2
  2615  000188                     _addressErrorCounter:
  2616                           	opt stack 0
  2617  000188                     	ds	2
  2618  00018A                     _alignErrorCounter:
  2619                           	opt stack 0
  2620  00018A                     	ds	2
  2621  00018C                     _brake:
  2622                           	opt stack 0
  2623  00018C                     	ds	2
  2624  00018E                     _crcErrorCounter:
  2625                           	opt stack 0
  2626  00018E                     	ds	2
  2627  000190                     _dataAdressErrorCounter:
  2628                           	opt stack 0
  2629  000190                     	ds	2
  2630  000192                     _errno:
  2631                           	opt stack 0
  2632  000192                     	ds	2
  2633  000194                     _p_i2c1_current:
  2634                           	opt stack 0
  2635  000194                     	ds	2
  2636  000196                     _p_i2c1_trb_current:
  2637                           	opt stack 0
  2638  000196                     	ds	2
  2639  000198                     _receiveArrayAddress:
  2640                           	opt stack 0
  2641  000198                     	ds	2
  2642  00019A                     _sendStructAddress:
  2643                           	opt stack 0
  2644  00019A                     	ds	2
  2645  00019C                     _serial_peek:
  2646                           	opt stack 0
  2647  00019C                     	ds	2
  2648  00019E                     _tempGCount:
  2649                           	opt stack 0
  2650  00019E                     	ds	2
  2651  0001A0                     _tempMCount:
  2652                           	opt stack 0
  2653  0001A0                     	ds	2
  2654  0001A2                     _throttle:
  2655                           	opt stack 0
  2656  0001A2                     	ds	2
  2657  0001A4                     _PWRMode:
  2658                           	opt stack 0
  2659  0001A4                     	ds	1
  2660  0001A5                     _eusart1RxCount:
  2661                           	opt stack 0
  2662  0001A5                     	ds	1
  2663  0001A6                     	ds	1
  2664  0001A7                     	ds	1
  2665  0001A8                     _eusart1TxBufferRemaining:
  2666                           	opt stack 0
  2667  0001A8                     	ds	1
  2668  0001A9                     	ds	1
  2669  0001AA                     	ds	1
  2670  0001AB                     _status:
  2671                           	opt stack 0
  2672  0001AB                     	ds	1
  2673  0001AC                     _accelBias:
  2674                           	opt stack 0
  2675  0001AC                     	ds	9
  2676  0001B5                     _gyroBias:
  2677                           	opt stack 0
  2678  0001B5                     	ds	9
  2679  0001BE                     _quatCount:
  2680                           	opt stack 0
  2681  0001BE                     	ds	8
  2682  0001C6                     _EulCount:
  2683                           	opt stack 0
  2684  0001C6                     	ds	6
  2685  0001CC                     _GRVCount:
  2686                           	opt stack 0
  2687  0001CC                     	ds	6
  2688  0001D2                     _LIACount:
  2689                           	opt stack 0
  2690  0001D2                     	ds	6
  2691  0001D8                     _accelCount:
  2692                           	opt stack 0
  2693  0001D8                     	ds	6
  2694  0001DE                     _gyroCount:
  2695                           	opt stack 0
  2696  0001DE                     	ds	6
  2697  0001E4                     _magCount:
  2698                           	opt stack 0
  2699  0001E4                     	ds	6
  2700  0001EA                     I2C1_MasterRead@trBlock:
  2701                           	opt stack 0
  2702  0001EA                     	ds	5
  2703  0001EF                     I2C1_MasterWrite@trBlock:
  2704                           	opt stack 0
  2705  0001EF                     	ds	5
  2706  0001F4                     _i2c1_tr_queue:
  2707                           	opt stack 0
  2708  0001F4                     	ds	5
  2709                           tblptru	equ	0xFF8
  2710                           tblptrh	equ	0xFF7
  2711                           tblptrl	equ	0xFF6
  2712                           tablat	equ	0xFF5
  2713                           postinc0	equ	0xFEE
  2714                           wreg	equ	0xFE8
  2715                           postdec1	equ	0xFE5
  2716                           fsr1l	equ	0xFE1
  2717                           
  2718                           	psect	dataBANK1
  2719  0001F9                     __pdataBANK1:
  2720                           	opt stack 0
  2721  0001F9                     _GyroMeasError:
  2722                           	opt stack 0
  2723  0001F9                     	ds	3
  2724  0001FC                     _Modr:
  2725                           	opt stack 0
  2726  0001FC                     	ds	1
  2727  0001FD                     _intPin:
  2728                           	opt stack 0
  2729  0001FD                     	ds	1
  2730  0001FE                     _myLed:
  2731                           	opt stack 0
  2732  0001FE                     	ds	1
  2733                           tblptru	equ	0xFF8
  2734                           tblptrh	equ	0xFF7
  2735                           tblptrl	equ	0xFF6
  2736                           tablat	equ	0xFF5
  2737                           postinc0	equ	0xFEE
  2738                           wreg	equ	0xFE8
  2739                           postdec1	equ	0xFE5
  2740                           fsr1l	equ	0xFE1
  2741                           
  2742                           	psect	bssBANK2
  2743  000200                     __pbssBANK2:
  2744                           	opt stack 0
  2745  000200                     accelgyroCalBNO055@F8177:
  2746                           	opt stack 0
  2747  000200                     	ds	12
  2748  00020C                     accelgyroCalBNO055@F8179:
  2749                           	opt stack 0
  2750  00020C                     	ds	12
  2751  000218                     magCalBNO055@F8233:
  2752                           	opt stack 0
  2753  000218                     	ds	12
  2754  000224                     _TempData:
  2755                           	opt stack 0
  2756  000224                     	ds	10
  2757  00022E                     _eInt:
  2758                           	opt stack 0
  2759  00022E                     	ds	9
  2760  000237                     	ds	8
  2761  00023F                     	ds	8
  2762  000247                     accelgyroCalBNO055@F8200:
  2763                           	opt stack 0
  2764  000247                     	ds	6
  2765  00024D                     magCalBNO055@F8235:
  2766                           	opt stack 0
  2767  00024D                     	ds	6
  2768  000253                     magCalBNO055@F8237:
  2769                           	opt stack 0
  2770  000253                     	ds	6
  2771  000259                     magCalBNO055@F8239:
  2772                           	opt stack 0
  2773  000259                     	ds	6
  2774  00025F                     _input_buffer:
  2775                           	opt stack 0
  2776  00025F                     	ds	86
  2777  0002B5                     _crc_buffer:
  2778                           	opt stack 0
  2779  0002B5                     	ds	17
  2780  0002C6                     _receiveArray:
  2781                           	opt stack 0
  2782  0002C6                     	ds	10
  2783  0002D0                     _magBias:
  2784                           	opt stack 0
  2785  0002D0                     	ds	9
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           postinc0	equ	0xFEE
  2791                           wreg	equ	0xFE8
  2792                           postdec1	equ	0xFE5
  2793                           fsr1l	equ	0xFE1
  2794                           
  2795                           	psect	dataBANK2
  2796  0002D9                     __pdataBANK2:
  2797                           	opt stack 0
  2798  0002D9                     _q:
  2799                           	opt stack 0
  2800  0002D9                     	ds	12
  2801  0002E5                     _quat:
  2802                           	opt stack 0
  2803  0002E5                     	ds	12
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           postinc0	equ	0xFEE
  2809                           wreg	equ	0xFE8
  2810                           postdec1	equ	0xFE5
  2811                           fsr1l	equ	0xFE1
  2812                           
  2813                           	psect	bssBANK3
  2814  000300                     __pbssBANK3:
  2815                           	opt stack 0
  2816  000300                     _output_buffer:
  2817                           	opt stack 0
  2818  000300                     	ds	86
  2819                           tblptru	equ	0xFF8
  2820                           tblptrh	equ	0xFF7
  2821                           tblptrl	equ	0xFF6
  2822                           tablat	equ	0xFF5
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1l	equ	0xFE1
  2827                           
  2828                           	psect	bssBANK4
  2829  000400                     __pbssBANK4:
  2830                           	opt stack 0
  2831  000400                     _ring_buffer:
  2832                           	opt stack 0
  2833  000400                     	ds	206
  2834                           tblptru	equ	0xFF8
  2835                           tblptrh	equ	0xFF7
  2836                           tblptrl	equ	0xFF6
  2837                           tablat	equ	0xFF5
  2838                           postinc0	equ	0xFEE
  2839                           wreg	equ	0xFE8
  2840                           postdec1	equ	0xFE5
  2841                           fsr1l	equ	0xFE1
  2842                           
  2843                           	psect	bssBANK5
  2844  000500                     __pbssBANK5:
  2845                           	opt stack 0
  2846  000500                     _rx_buffer:
  2847                           	opt stack 0
  2848  000500                     	ds	200
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           
  2858                           	psect	cstackBANK3
  2859  000356                     __pcstackBANK3:
  2860                           	opt stack 0
  2861  000356                     accelgyroCalBNO055@accel_temp:
  2862                           	opt stack 0
  2863                           
  2864                           ; 6 bytes @ 0x0
  2865  000356                     	ds	6
  2866  00035C                     accelgyroCalBNO055@gyro_temp:
  2867                           	opt stack 0
  2868                           
  2869                           ; 6 bytes @ 0x6
  2870  00035C                     	ds	6
  2871  000362                     accelgyroCalBNO055@data:
  2872                           	opt stack 0
  2873                           
  2874                           ; 6 bytes @ 0xC
  2875  000362                     	ds	6
  2876  000368                     accelgyroCalBNO055@ii:
  2877                           	opt stack 0
  2878                           
  2879                           ; 4 bytes @ 0x12
  2880  000368                     	ds	4
  2881  00036C                     accelgyroCalBNO055@gyro_bias:
  2882                           	opt stack 0
  2883                           
  2884                           ; 12 bytes @ 0x16
  2885  00036C                     	ds	12
  2886  000378                     accelgyroCalBNO055@sample_count:
  2887                           	opt stack 0
  2888                           
  2889                           ; 4 bytes @ 0x22
  2890  000378                     	ds	4
  2891  00037C                     accelgyroCalBNO055@accel_bias:
  2892                           	opt stack 0
  2893                           
  2894                           ; 12 bytes @ 0x26
  2895  00037C                     	ds	12
  2896                           tblptru	equ	0xFF8
  2897                           tblptrh	equ	0xFF7
  2898                           tblptrl	equ	0xFF6
  2899                           tablat	equ	0xFF5
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           
  2905                           	psect	cstackBANK2
  2906  0002F1                     __pcstackBANK2:
  2907                           	opt stack 0
  2908  0002F1                     ??_Setup:
  2909                           
  2910                           ; 1 bytes @ 0x0
  2911  0002F1                     	ds	2
  2912  0002F3                     Setup@d:
  2913                           	opt stack 0
  2914                           
  2915                           ; 1 bytes @ 0x2
  2916  0002F3                     	ds	1
  2917  0002F4                     Setup@e:
  2918                           	opt stack 0
  2919                           
  2920                           ; 1 bytes @ 0x3
  2921  0002F4                     	ds	1
  2922  0002F5                     Setup@f:
  2923                           	opt stack 0
  2924                           
  2925                           ; 1 bytes @ 0x4
  2926  0002F5                     	ds	1
  2927  0002F6                     Setup@swlsb:
  2928                           	opt stack 0
  2929                           
  2930                           ; 1 bytes @ 0x5
  2931  0002F6                     	ds	1
  2932  0002F7                     Setup@swmsb:
  2933                           	opt stack 0
  2934                           
  2935                           ; 1 bytes @ 0x6
  2936  0002F7                     	ds	1
  2937  0002F8                     Setup@blid:
  2938                           	opt stack 0
  2939                           
  2940                           ; 1 bytes @ 0x7
  2941  0002F8                     	ds	1
  2942  0002F9                     _Setup$3454:
  2943                           	opt stack 0
  2944                           
  2945                           ; 3 bytes @ 0x8
  2946  0002F9                     	ds	3
  2947  0002FC                     Setup@c:
  2948                           	opt stack 0
  2949                           
  2950                           ; 1 bytes @ 0xB
  2951  0002FC                     	ds	1
  2952  0002FD                     Setup@selftest:
  2953                           	opt stack 0
  2954                           
  2955                           ; 1 bytes @ 0xC
  2956  0002FD                     	ds	1
  2957  0002FE                     Setup@calstat:
  2958                           	opt stack 0
  2959                           
  2960                           ; 1 bytes @ 0xD
  2961  0002FE                     	ds	1
  2962                           tblptru	equ	0xFF8
  2963                           tblptrh	equ	0xFF7
  2964                           tblptrl	equ	0xFF6
  2965                           tablat	equ	0xFF5
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           postdec1	equ	0xFE5
  2969                           fsr1l	equ	0xFE1
  2970                           
  2971                           	psect	cstackBANK0
  2972  000060                     __pcstackBANK0:
  2973                           	opt stack 0
  2974  000060                     ?___wmul:
  2975                           	opt stack 0
  2976  000060                     ?___llmod:
  2977                           	opt stack 0
  2978  000060                     writeByte@subAddress:
  2979                           	opt stack 0
  2980  000060                     readByte@subAddress:
  2981                           	opt stack 0
  2982  000060                     readBytes@subAddress:
  2983                           	opt stack 0
  2984  000060                     ___altoft@exp:
  2985                           	opt stack 0
  2986  000060                     ___lltoft@exp:
  2987                           	opt stack 0
  2988  000060                     ___wmul@multiplier:
  2989                           	opt stack 0
  2990  000060                     ___llmod@dividend:
  2991                           	opt stack 0
  2992                           
  2993                           ; 4 bytes @ 0x0
  2994  000060                     	ds	1
  2995  000061                     writeByte@data:
  2996                           	opt stack 0
  2997  000061                     readBytes@count:
  2998                           	opt stack 0
  2999  000061                     ___altoft@sign:
  3000                           	opt stack 0
  3001  000061                     readByte@Data:
  3002                           	opt stack 0
  3003                           
  3004                           ; 3 bytes @ 0x1
  3005  000061                     	ds	1
  3006  000062                     ?___ftdiv:
  3007                           	opt stack 0
  3008  000062                     readBytes@dest:
  3009                           	opt stack 0
  3010  000062                     ___wmul@multiplicand:
  3011                           	opt stack 0
  3012  000062                     writeByte@Data:
  3013                           	opt stack 0
  3014  000062                     ___ftdiv@f1:
  3015                           	opt stack 0
  3016  000062                     ___ftge@ff1:
  3017                           	opt stack 0
  3018                           
  3019                           ; 3 bytes @ 0x2
  3020  000062                     	ds	2
  3021  000064                     ?___ftmul:
  3022                           	opt stack 0
  3023  000064                     readByte@address:
  3024                           	opt stack 0
  3025  000064                     readBytes@Data:
  3026                           	opt stack 0
  3027  000064                     ___ftmul@f1:
  3028                           	opt stack 0
  3029  000064                     ___llmod@divisor:
  3030                           	opt stack 0
  3031                           
  3032                           ; 4 bytes @ 0x4
  3033  000064                     	ds	1
  3034  000065                     writeByte@address:
  3035                           	opt stack 0
  3036  000065                     readByte@timeOut:
  3037                           	opt stack 0
  3038  000065                     ___ftdiv@f2:
  3039                           	opt stack 0
  3040  000065                     ___ftge@ff2:
  3041                           	opt stack 0
  3042                           
  3043                           ; 3 bytes @ 0x5
  3044  000065                     	ds	1
  3045  000066                     writeByte@timeOut:
  3046                           	opt stack 0
  3047  000066                     readByte@status:
  3048                           	opt stack 0
  3049                           
  3050                           ; 1 bytes @ 0x6
  3051  000066                     	ds	1
  3052  000067                     writeByte@status:
  3053                           	opt stack 0
  3054  000067                     readBytes@address:
  3055                           	opt stack 0
  3056  000067                     ___ftmul@f2:
  3057                           	opt stack 0
  3058                           
  3059                           ; 3 bytes @ 0x7
  3060  000067                     	ds	1
  3061  000068                     ??_initBNO055:
  3062  000068                     ??___ftdiv:
  3063  000068                     ??___ftge:
  3064  000068                     readBytes@timeOut:
  3065                           	opt stack 0
  3066                           
  3067                           ; 1 bytes @ 0x8
  3068  000068                     	ds	1
  3069  000069                     readBytes@status:
  3070                           	opt stack 0
  3071                           
  3072                           ; 1 bytes @ 0x9
  3073  000069                     	ds	1
  3074  00006A                     ??___ftmul:
  3075  00006A                     readAccelData@destination:
  3076                           	opt stack 0
  3077  00006A                     readGyroData@destination:
  3078                           	opt stack 0
  3079  00006A                     readMagData@destination:
  3080                           	opt stack 0
  3081  00006A                     readQuatData@destination:
  3082                           	opt stack 0
  3083  00006A                     readEulData@destination:
  3084                           	opt stack 0
  3085  00006A                     readLIAData@destination:
  3086                           	opt stack 0
  3087  00006A                     readGRVData@destination:
  3088                           	opt stack 0
  3089                           
  3090                           ; 2 bytes @ 0xA
  3091  00006A                     	ds	1
  3092  00006B                     ___ftdiv@cntr:
  3093                           	opt stack 0
  3094                           
  3095                           ; 1 bytes @ 0xB
  3096  00006B                     	ds	1
  3097  00006C                     ??_readAccelData:
  3098  00006C                     ??_readGyroData:
  3099  00006C                     ??_readMagData:
  3100  00006C                     ??_readQuatData:
  3101  00006C                     ??_readEulData:
  3102  00006C                     ??_readLIAData:
  3103  00006C                     ??_readGRVData:
  3104  00006C                     ___ftdiv@f3:
  3105                           	opt stack 0
  3106                           
  3107                           ; 3 bytes @ 0xC
  3108  00006C                     	ds	1
  3109  00006D                     ___ftmul@exp:
  3110                           	opt stack 0
  3111                           
  3112                           ; 1 bytes @ 0xD
  3113  00006D                     	ds	1
  3114  00006E                     ___ftmul@f3_as_product:
  3115                           	opt stack 0
  3116  00006E                     readAccelData@rawData:
  3117                           	opt stack 0
  3118  00006E                     readGyroData@rawData:
  3119                           	opt stack 0
  3120  00006E                     readMagData@rawData:
  3121                           	opt stack 0
  3122  00006E                     readEulData@rawData:
  3123                           	opt stack 0
  3124  00006E                     readLIAData@rawData:
  3125                           	opt stack 0
  3126  00006E                     readGRVData@rawData:
  3127                           	opt stack 0
  3128  00006E                     readQuatData@rawData:
  3129                           	opt stack 0
  3130                           
  3131                           ; 8 bytes @ 0xE
  3132  00006E                     	ds	1
  3133  00006F                     ___ftdiv@exp:
  3134                           	opt stack 0
  3135                           
  3136                           ; 1 bytes @ 0xF
  3137  00006F                     	ds	1
  3138  000070                     ___ftdiv@sign:
  3139                           	opt stack 0
  3140                           
  3141                           ; 1 bytes @ 0x10
  3142  000070                     	ds	1
  3143  000071                     ___ftmul@cntr:
  3144                           	opt stack 0
  3145                           
  3146                           ; 1 bytes @ 0x11
  3147  000071                     	ds	1
  3148  000072                     ___ftmul@sign:
  3149                           	opt stack 0
  3150                           
  3151                           ; 1 bytes @ 0x12
  3152  000072                     	ds	1
  3153  000073                     ?_fround:
  3154                           	opt stack 0
  3155  000073                     ?_scale:
  3156                           	opt stack 0
  3157                           
  3158                           ; 3 bytes @ 0x13
  3159  000073                     	ds	3
  3160  000076                     _fround$3456:
  3161                           	opt stack 0
  3162  000076                     _scale$3457:
  3163                           	opt stack 0
  3164                           
  3165                           ; 3 bytes @ 0x16
  3166  000076                     	ds	3
  3167  000079                     scale@scl:
  3168                           	opt stack 0
  3169  000079                     _fround$3455:
  3170                           	opt stack 0
  3171                           
  3172                           ; 3 bytes @ 0x19
  3173  000079                     	ds	1
  3174  00007A                     ?___fttol:
  3175                           	opt stack 0
  3176  00007A                     ___fttol@f1:
  3177                           	opt stack 0
  3178                           
  3179                           ; 3 bytes @ 0x1A
  3180  00007A                     	ds	2
  3181  00007C                     fround@prec:
  3182                           	opt stack 0
  3183                           
  3184                           ; 1 bytes @ 0x1C
  3185  00007C                     	ds	1
  3186  00007D                     ?___ftadd:
  3187                           	opt stack 0
  3188  00007D                     ___ftadd@f1:
  3189                           	opt stack 0
  3190                           
  3191                           ; 3 bytes @ 0x1D
  3192  00007D                     	ds	1
  3193  00007E                     ??___fttol:
  3194                           
  3195                           ; 1 bytes @ 0x1E
  3196  00007E                     	ds	2
  3197  000080                     ___ftadd@f2:
  3198                           	opt stack 0
  3199                           
  3200                           ; 3 bytes @ 0x20
  3201  000080                     	ds	3
  3202  000083                     ??___ftadd:
  3203  000083                     ___fttol@sign1:
  3204                           	opt stack 0
  3205                           
  3206                           ; 1 bytes @ 0x23
  3207  000083                     	ds	1
  3208  000084                     ___fttol@lval:
  3209                           	opt stack 0
  3210                           
  3211                           ; 4 bytes @ 0x24
  3212  000084                     	ds	2
  3213  000086                     ___ftadd@sign:
  3214                           	opt stack 0
  3215                           
  3216                           ; 1 bytes @ 0x26
  3217  000086                     	ds	1
  3218  000087                     ___ftadd@exp2:
  3219                           	opt stack 0
  3220                           
  3221                           ; 1 bytes @ 0x27
  3222  000087                     	ds	1
  3223  000088                     ___ftadd@exp1:
  3224                           	opt stack 0
  3225  000088                     ___fttol@exp1:
  3226                           	opt stack 0
  3227                           
  3228                           ; 1 bytes @ 0x28
  3229  000088                     	ds	1
  3230  000089                     ?___ftsub:
  3231                           	opt stack 0
  3232  000089                     ___ftsub@f1:
  3233                           	opt stack 0
  3234                           
  3235                           ; 3 bytes @ 0x29
  3236  000089                     	ds	3
  3237  00008C                     ___ftsub@f2:
  3238                           	opt stack 0
  3239                           
  3240                           ; 3 bytes @ 0x2C
  3241  00008C                     	ds	3
  3242  00008F                     ?_printf:
  3243                           	opt stack 0
  3244  00008F                     ?_sqrt:
  3245                           	opt stack 0
  3246  00008F                     printf@f:
  3247                           	opt stack 0
  3248  00008F                     sqrt@a:
  3249                           	opt stack 0
  3250                           
  3251                           ; 3 bytes @ 0x2F
  3252  00008F                     	ds	3
  3253  000092                     ??_sqrt:
  3254                           
  3255                           ; 1 bytes @ 0x32
  3256  000092                     	ds	3
  3257  000095                     sqrt@og:
  3258                           	opt stack 0
  3259                           
  3260                           ; 3 bytes @ 0x35
  3261  000095                     	ds	3
  3262  000098                     sqrt@z:
  3263                           	opt stack 0
  3264                           
  3265                           ; 3 bytes @ 0x38
  3266  000098                     	ds	2
  3267  00009A                     ??_printf:
  3268                           
  3269                           ; 1 bytes @ 0x3A
  3270  00009A                     	ds	1
  3271  00009B                     sqrt@i:
  3272                           	opt stack 0
  3273                           
  3274                           ; 1 bytes @ 0x3B
  3275  00009B                     	ds	1
  3276  00009C                     sqrt@q:
  3277                           	opt stack 0
  3278                           
  3279                           ; 3 bytes @ 0x3C
  3280  00009C                     	ds	3
  3281  00009F                     sqrt@x:
  3282                           	opt stack 0
  3283                           
  3284                           ; 3 bytes @ 0x3F
  3285  00009F                     	ds	1
  3286  0000A0                     _printf$3458:
  3287                           	opt stack 0
  3288                           
  3289                           ; 3 bytes @ 0x40
  3290  0000A0                     	ds	3
  3291  0000A3                     printf@idx:
  3292                           	opt stack 0
  3293                           
  3294                           ; 1 bytes @ 0x43
  3295  0000A3                     	ds	1
  3296  0000A4                     _printf$2718:
  3297                           	opt stack 0
  3298                           
  3299                           ; 2 bytes @ 0x44
  3300  0000A4                     	ds	2
  3301  0000A6                     _printf$2719:
  3302                           	opt stack 0
  3303                           
  3304                           ; 2 bytes @ 0x46
  3305  0000A6                     	ds	2
  3306  0000A8                     _printf$2720:
  3307                           	opt stack 0
  3308                           
  3309                           ; 2 bytes @ 0x48
  3310  0000A8                     	ds	2
  3311  0000AA                     _printf$2721:
  3312                           	opt stack 0
  3313                           
  3314                           ; 2 bytes @ 0x4A
  3315  0000AA                     	ds	2
  3316  0000AC                     _printf$2727:
  3317                           	opt stack 0
  3318                           
  3319                           ; 2 bytes @ 0x4C
  3320  0000AC                     	ds	2
  3321  0000AE                     printf@cp:
  3322                           	opt stack 0
  3323                           
  3324                           ; 2 bytes @ 0x4E
  3325  0000AE                     	ds	2
  3326  0000B0                     printf@len:
  3327                           	opt stack 0
  3328                           
  3329                           ; 2 bytes @ 0x50
  3330  0000B0                     	ds	2
  3331  0000B2                     printf@ap:
  3332                           	opt stack 0
  3333                           
  3334                           ; 2 bytes @ 0x52
  3335  0000B2                     	ds	2
  3336  0000B4                     printf@tmpval:
  3337                           	opt stack 0
  3338                           
  3339                           ; 4 bytes @ 0x54
  3340  0000B4                     	ds	4
  3341  0000B8                     printf@exp:
  3342                           	opt stack 0
  3343                           
  3344                           ; 2 bytes @ 0x58
  3345  0000B8                     	ds	2
  3346  0000BA                     printf@fval:
  3347                           	opt stack 0
  3348                           
  3349                           ; 3 bytes @ 0x5A
  3350  0000BA                     	ds	3
  3351  0000BD                     printf@val:
  3352                           	opt stack 0
  3353                           
  3354                           ; 4 bytes @ 0x5D
  3355  0000BD                     	ds	4
  3356  0000C1                     printf@prec:
  3357                           	opt stack 0
  3358                           
  3359                           ; 2 bytes @ 0x61
  3360  0000C1                     	ds	2
  3361  0000C3                     printf@width:
  3362                           	opt stack 0
  3363                           
  3364                           ; 2 bytes @ 0x63
  3365  0000C3                     	ds	2
  3366  0000C5                     printf@c:
  3367                           	opt stack 0
  3368                           
  3369                           ; 1 bytes @ 0x65
  3370  0000C5                     	ds	1
  3371  0000C6                     printf@flag:
  3372                           	opt stack 0
  3373                           
  3374                           ; 2 bytes @ 0x66
  3375  0000C6                     	ds	2
  3376  0000C8                     ??_loop:
  3377  0000C8                     accelgyroCalBNO055@dest1:
  3378                           	opt stack 0
  3379  0000C8                     magCalBNO055@dest1:
  3380                           	opt stack 0
  3381                           
  3382                           ; 2 bytes @ 0x68
  3383  0000C8                     	ds	2
  3384  0000CA                     ??_magCalBNO055:
  3385  0000CA                     accelgyroCalBNO055@dest2:
  3386                           	opt stack 0
  3387                           
  3388                           ; 2 bytes @ 0x6A
  3389  0000CA                     	ds	2
  3390  0000CC                     ??_accelgyroCalBNO055:
  3391  0000CC                     loop@sysstat:
  3392                           	opt stack 0
  3393                           
  3394                           ; 1 bytes @ 0x6C
  3395  0000CC                     	ds	1
  3396  0000CD                     loop@syserr:
  3397                           	opt stack 0
  3398                           
  3399                           ; 1 bytes @ 0x6D
  3400  0000CD                     	ds	2
  3401  0000CF                     magCalBNO055@data:
  3402                           	opt stack 0
  3403                           
  3404                           ; 6 bytes @ 0x6F
  3405  0000CF                     	ds	6
  3406  0000D5                     magCalBNO055@sample_count:
  3407                           	opt stack 0
  3408                           
  3409                           ; 1 bytes @ 0x75
  3410  0000D5                     	ds	1
  3411  0000D6                     magCalBNO055@mag_max:
  3412                           	opt stack 0
  3413                           
  3414                           ; 6 bytes @ 0x76
  3415  0000D6                     	ds	6
  3416  0000DC                     magCalBNO055@mag_min:
  3417                           	opt stack 0
  3418                           
  3419                           ; 6 bytes @ 0x7C
  3420  0000DC                     	ds	6
  3421  0000E2                     magCalBNO055@ii:
  3422                           	opt stack 0
  3423                           
  3424                           ; 1 bytes @ 0x82
  3425  0000E2                     	ds	1
  3426  0000E3                     magCalBNO055@mag_temp:
  3427                           	opt stack 0
  3428                           
  3429                           ; 6 bytes @ 0x83
  3430  0000E3                     	ds	6
  3431  0000E9                     magCalBNO055@mag_bias:
  3432                           	opt stack 0
  3433                           
  3434                           ; 12 bytes @ 0x89
  3435  0000E9                     	ds	12
  3436  0000F5                     magCalBNO055@jj:
  3437                           	opt stack 0
  3438                           
  3439                           ; 2 bytes @ 0x95
  3440  0000F5                     	ds	2
  3441  0000F7                     main@address:
  3442                           	opt stack 0
  3443                           
  3444                           ; 1 bytes @ 0x97
  3445  0000F7                     	ds	1
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           postinc0	equ	0xFEE
  3451                           wreg	equ	0xFE8
  3452                           postdec1	equ	0xFE5
  3453                           fsr1l	equ	0xFE1
  3454                           
  3455                           	psect	cstackCOMRAM
  3456  000001                     __pcstackCOMRAM:
  3457                           	opt stack 0
  3458  000001                     ??_I2C1_Stop:
  3459  000001                     ?_UART_buff_size:
  3460                           	opt stack 0
  3461  000001                     ?i2_UART_buff_modulo_inc:
  3462                           	opt stack 0
  3463  000001                     ECCP2_CallBack@capturedValue:
  3464                           	opt stack 0
  3465  000001                     ECCP1_CallBack@capturedValue:
  3466                           	opt stack 0
  3467  000001                     UART_buff_size@_this:
  3468                           	opt stack 0
  3469  000001                     i2UART_buff_modulo_inc@value:
  3470                           	opt stack 0
  3471                           
  3472                           ; 2 bytes @ 0x0
  3473  000001                     	ds	2
  3474  000003                     I2C1_Stop@completion_code:
  3475                           	opt stack 0
  3476  000003                     ECCP2_CaptureISR@module:
  3477                           	opt stack 0
  3478  000003                     ECCP1_CaptureISR@module:
  3479                           	opt stack 0
  3480  000003                     i2UART_buff_modulo_inc@modulus:
  3481                           	opt stack 0
  3482                           
  3483                           ; 2 bytes @ 0x2
  3484  000003                     	ds	1
  3485  000004                     ??_I2C1_ISR:
  3486                           
  3487                           ; 1 bytes @ 0x3
  3488  000004                     	ds	1
  3489  000005                     i2UART_buff_modulo_inc@my_value:
  3490                           	opt stack 0
  3491                           
  3492                           ; 2 bytes @ 0x4
  3493  000005                     	ds	2
  3494  000007                     i2UART_buff_put@_this:
  3495                           	opt stack 0
  3496  000007                     i2UART_buff_get@_this:
  3497                           	opt stack 0
  3498                           
  3499                           ; 2 bytes @ 0x6
  3500  000007                     	ds	2
  3501  000009                     ??i2_UART_buff_get:
  3502  000009                     i2UART_buff_put@c:
  3503                           	opt stack 0
  3504                           
  3505                           ; 1 bytes @ 0x8
  3506  000009                     	ds	1
  3507  00000A                     ??i2_UART_buff_put:
  3508                           
  3509                           ; 1 bytes @ 0x9
  3510  00000A                     	ds	1
  3511  00000B                     i2UART_buff_get@c:
  3512                           	opt stack 0
  3513                           
  3514                           ; 1 bytes @ 0xA
  3515  00000B                     	ds	1
  3516  00000C                     EUSART1_Receive_ISR@data:
  3517                           	opt stack 0
  3518                           
  3519                           ; 1 bytes @ 0xB
  3520  00000C                     	ds	1
  3521  00000D                     ??_INTERRUPT_InterruptManager:
  3522                           
  3523                           ; 1 bytes @ 0xC
  3524  00000D                     	ds	14
  3525  00001B                     ??_isdigit:
  3526  00001B                     ?_UART_buff_modulo_inc:
  3527                           	opt stack 0
  3528  00001B                     ?___awmod:
  3529                           	opt stack 0
  3530  00001B                     ?___ftpack:
  3531                           	opt stack 0
  3532  00001B                     ?___ftneg:
  3533                           	opt stack 0
  3534  00001B                     ?__tdiv_to_l_:
  3535                           	opt stack 0
  3536  00001B                     ?__div_to_l_:
  3537                           	opt stack 0
  3538  00001B                     ?___aldiv:
  3539                           	opt stack 0
  3540  00001B                     ?___lldiv:
  3541                           	opt stack 0
  3542  00001B                     I2C1_MasterTRBInsert@ptrb_list:
  3543                           	opt stack 0
  3544  00001B                     I2C1_MasterReadTRBBuild@ptrb:
  3545                           	opt stack 0
  3546  00001B                     I2C1_MasterWriteTRBBuild@ptrb:
  3547                           	opt stack 0
  3548  00001B                     UART_buff_modulo_inc@value:
  3549                           	opt stack 0
  3550  00001B                     Delay@wait:
  3551                           	opt stack 0
  3552  00001B                     ___awmod@dividend:
  3553                           	opt stack 0
  3554  00001B                     memset@p1:
  3555                           	opt stack 0
  3556  00001B                     __div_to_l_@f1:
  3557                           	opt stack 0
  3558  00001B                     ___ftpack@arg:
  3559                           	opt stack 0
  3560  00001B                     __tdiv_to_l_@f1:
  3561                           	opt stack 0
  3562  00001B                     ___ftneg@f1:
  3563                           	opt stack 0
  3564  00001B                     ___aldiv@dividend:
  3565                           	opt stack 0
  3566  00001B                     ___lldiv@dividend:
  3567                           	opt stack 0
  3568                           
  3569                           ; 4 bytes @ 0x1A
  3570  00001B                     	ds	1
  3571  00001C                     _isdigit$2953:
  3572                           	opt stack 0
  3573                           
  3574                           ; 1 bytes @ 0x1B
  3575  00001C                     	ds	1
  3576  00001D                     ??_Delay:
  3577  00001D                     isdigit@c:
  3578                           	opt stack 0
  3579  00001D                     I2C1_MasterTRBInsert@pflag:
  3580                           	opt stack 0
  3581  00001D                     I2C1_MasterReadTRBBuild@pdata:
  3582                           	opt stack 0
  3583  00001D                     I2C1_MasterWriteTRBBuild@pdata:
  3584                           	opt stack 0
  3585  00001D                     UART_buff_modulo_inc@modulus:
  3586                           	opt stack 0
  3587  00001D                     ___awmod@divisor:
  3588                           	opt stack 0
  3589  00001D                     memset@c:
  3590                           	opt stack 0
  3591                           
  3592                           ; 2 bytes @ 0x1C
  3593  00001D                     	ds	1
  3594  00001E                     ___ftpack@exp:
  3595                           	opt stack 0
  3596  00001E                     Delay@x:
  3597                           	opt stack 0
  3598  00001E                     __div_to_l_@f2:
  3599                           	opt stack 0
  3600  00001E                     __tdiv_to_l_@f2:
  3601                           	opt stack 0
  3602                           
  3603                           ; 3 bytes @ 0x1D
  3604  00001E                     	ds	1
  3605  00001F                     I2C1_MasterReadTRBBuild@length:
  3606                           	opt stack 0
  3607  00001F                     I2C1_MasterWriteTRBBuild@length:
  3608                           	opt stack 0
  3609  00001F                     ___awmod@counter:
  3610                           	opt stack 0
  3611  00001F                     ___ftpack@sign:
  3612                           	opt stack 0
  3613  00001F                     UART_buff_modulo_inc@my_value:
  3614                           	opt stack 0
  3615  00001F                     memset@n:
  3616                           	opt stack 0
  3617  00001F                     ___aldiv@divisor:
  3618                           	opt stack 0
  3619  00001F                     ___lldiv@divisor:
  3620                           	opt stack 0
  3621                           
  3622                           ; 4 bytes @ 0x1E
  3623  00001F                     	ds	1
  3624  000020                     ??___ftpack:
  3625  000020                     I2C1_MasterTRBInsert@count:
  3626                           	opt stack 0
  3627  000020                     ___awmod@sign:
  3628                           	opt stack 0
  3629  000020                     I2C1_MasterReadTRBBuild@address:
  3630                           	opt stack 0
  3631  000020                     I2C1_MasterWriteTRBBuild@address:
  3632                           	opt stack 0
  3633                           
  3634                           ; 2 bytes @ 0x1F
  3635  000020                     	ds	1
  3636  000021                     ??__tdiv_to_l_:
  3637  000021                     ?___awdiv:
  3638                           	opt stack 0
  3639  000021                     UART_buff_put@_this:
  3640                           	opt stack 0
  3641  000021                     UART_buff_get@_this:
  3642                           	opt stack 0
  3643  000021                     ___awdiv@dividend:
  3644                           	opt stack 0
  3645  000021                     memset@p:
  3646                           	opt stack 0
  3647  000021                     __div_to_l_@quot:
  3648                           	opt stack 0
  3649                           
  3650                           ; 4 bytes @ 0x20
  3651  000021                     	ds	1
  3652  000022                     ??_I2C1_MasterWriteTRBBuild:
  3653  000022                     ??_I2C1_MasterReadTRBBuild:
  3654                           
  3655                           ; 1 bytes @ 0x21
  3656  000022                     	ds	1
  3657  000023                     ??_UART_buff_get:
  3658  000023                     ?___altoft:
  3659                           	opt stack 0
  3660  000023                     ?___awtoft:
  3661                           	opt stack 0
  3662  000023                     ?___lltoft:
  3663                           	opt stack 0
  3664  000023                     UART_buff_put@c:
  3665                           	opt stack 0
  3666  000023                     ___aldiv@counter:
  3667                           	opt stack 0
  3668  000023                     UART_buff_init@_this:
  3669                           	opt stack 0
  3670  000023                     ___awdiv@divisor:
  3671                           	opt stack 0
  3672  000023                     ___awtoft@c:
  3673                           	opt stack 0
  3674  000023                     ___altoft@c:
  3675                           	opt stack 0
  3676  000023                     ___lldiv@quotient:
  3677                           	opt stack 0
  3678  000023                     ___lltoft@c:
  3679                           	opt stack 0
  3680                           
  3681                           ; 4 bytes @ 0x22
  3682  000023                     	ds	1
  3683  000024                     ??_UART_buff_put:
  3684  000024                     ___aldiv@sign:
  3685                           	opt stack 0
  3686  000024                     I2C1_MasterWrite@pdata:
  3687                           	opt stack 0
  3688  000024                     I2C1_MasterRead@pdata:
  3689                           	opt stack 0
  3690  000024                     __tdiv_to_l_@quot:
  3691                           	opt stack 0
  3692                           
  3693                           ; 4 bytes @ 0x23
  3694  000024                     	ds	1
  3695  000025                     UART_buff_get@c:
  3696                           	opt stack 0
  3697  000025                     ___awdiv@counter:
  3698                           	opt stack 0
  3699  000025                     __div_to_l_@cntr:
  3700                           	opt stack 0
  3701  000025                     ___aldiv@quotient:
  3702                           	opt stack 0
  3703                           
  3704                           ; 4 bytes @ 0x24
  3705  000025                     	ds	1
  3706  000026                     I2C1_MasterWrite@length:
  3707                           	opt stack 0
  3708  000026                     I2C1_MasterRead@length:
  3709                           	opt stack 0
  3710  000026                     Send_put@_data:
  3711                           	opt stack 0
  3712  000026                     ___awdiv@sign:
  3713                           	opt stack 0
  3714  000026                     ___awtoft@sign:
  3715                           	opt stack 0
  3716  000026                     __div_to_l_@exp1:
  3717                           	opt stack 0
  3718                           
  3719                           ; 1 bytes @ 0x25
  3720  000026                     	ds	1
  3721  000027                     ??___altoft:
  3722  000027                     ??___lltoft:
  3723  000027                     putch@txData:
  3724                           	opt stack 0
  3725  000027                     ___lldiv@counter:
  3726                           	opt stack 0
  3727  000027                     I2C1_MasterWrite@address:
  3728                           	opt stack 0
  3729  000027                     I2C1_MasterRead@address:
  3730                           	opt stack 0
  3731  000027                     ___awdiv@quotient:
  3732                           	opt stack 0
  3733                           
  3734                           ; 2 bytes @ 0x26
  3735  000027                     	ds	1
  3736  000028                     __tdiv_to_l_@cntr:
  3737                           	opt stack 0
  3738  000028                     ___llmod@counter:
  3739                           	opt stack 0
  3740                           
  3741                           ; 1 bytes @ 0x27
  3742  000028                     	ds	1
  3743  000029                     __tdiv_to_l_@exp1:
  3744                           	opt stack 0
  3745  000029                     I2C1_MasterWrite@pflag:
  3746                           	opt stack 0
  3747  000029                     I2C1_MasterRead@pflag:
  3748                           	opt stack 0
  3749  000029                     ___wmul@product:
  3750                           	opt stack 0
  3751                           
  3752                           ; 2 bytes @ 0x28
  3753  000029                     	ds	2
  3754  00002B                     tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           postinc0	equ	0xFEE
  3759                           wreg	equ	0xFE8
  3760                           postdec1	equ	0xFE5
  3761                           fsr1l	equ	0xFE1
  3762                           
  3763                           ; 1 bytes @ 0x2A
  3764 ;;
  3765 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3766 ;;
  3767 ;; *************** function _main *****************
  3768 ;; Defined at:
  3769 ;;		line 42 in file "main.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  address         1  151[BANK0 ] unsigned char 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3783 ;;      Params:         0       0       0       0       0       0       0
  3784 ;;      Locals:         0       1       0       0       0       0       0
  3785 ;;      Temps:          0       0       0       0       0       0       0
  3786 ;;      Totals:         0       1       0       0       0       0       0
  3787 ;;Total ram usage:        1 bytes
  3788 ;; Hardware stack levels required when called:   11
  3789 ;; This function calls:
  3790 ;;		_Delay
  3791 ;;		_EUSART1_Initialize
  3792 ;;		_I2C1_Initialize
  3793 ;;		_SYSTEM_Initialize
  3794 ;;		_Setup
  3795 ;;		_loop
  3796 ;; This function is called by:
  3797 ;;		Startup code after reset
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           	psect	text0
  3802  005754                     __ptext0:
  3803                           	opt stack 0
  3804  005754                     _main:
  3805                           	opt stack 20
  3806                           
  3807                           ;main.c: 44: SYSTEM_Initialize();
  3808                           
  3809                           ;incstack = 0
  3810  005754  EC8C  F02C         	call	_SYSTEM_Initialize	;wreg free
  3811                           
  3812                           ;main.c: 63: (INTCONbits.GIE = 1);
  3813  005758  8EF2               	bsf	intcon,7,c	;volatile
  3814                           
  3815                           ;main.c: 66: (INTCONbits.PEIE = 1);
  3816  00575A  8CF2               	bsf	intcon,6,c	;volatile
  3817                           
  3818                           ;main.c: 70: EUSART1_Initialize();
  3819  00575C  EC0D  F02B         	call	_EUSART1_Initialize	;wreg free
  3820                           
  3821                           ;main.c: 71: I2C1_Initialize();
  3822  005760  ECEF  F02A         	call	_I2C1_Initialize	;wreg free
  3823                           
  3824                           ;main.c: 73: char address = 0;
  3825  005764  0E00               	movlw	0
  3826  005766  0100               	movlb	0	; () banked
  3827  005768  6FF7               	movwf	main@address& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;main.c: 74: Setup();
  3831  00576A  EC87  F014         	call	_Setup	;wreg free
  3832  00576E                     l10429:
  3833                           
  3834                           ;main.c: 81: loop();
  3835  00576E  EC15  F00E         	call	_loop	;wreg free
  3836                           
  3837                           ;main.c: 82: Delay(1000);
  3838  005772  0E03               	movlw	3
  3839  005774  6E1C               	movwf	Delay@wait+1,c
  3840  005776  0EE8               	movlw	232
  3841  005778  6E1B               	movwf	Delay@wait,c
  3842  00577A  EC47  F02B         	call	_Delay	;wreg free
  3843  00577E  D7F7               	goto	l10429
  3844  005780                     __end_of_main:
  3845                           	opt stack 0
  3846                           tblptru	equ	0xFF8
  3847                           tblptrh	equ	0xFF7
  3848                           tblptrl	equ	0xFF6
  3849                           tablat	equ	0xFF5
  3850                           intcon	equ	0xFF2
  3851                           postinc0	equ	0xFEE
  3852                           wreg	equ	0xFE8
  3853                           postdec1	equ	0xFE5
  3854                           fsr1l	equ	0xFE1
  3855                           
  3856 ;; *************** function _loop *****************
  3857 ;; Defined at:
  3858 ;;		line 165 in file "BNO055.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  syserr          1  109[BANK0 ] unsigned char 
  3863 ;;  sysstat         1  108[BANK0 ] unsigned char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3873 ;;      Params:         0       0       0       0       0       0       0
  3874 ;;      Locals:         0       2       0       0       0       0       0
  3875 ;;      Temps:          0       4       0       0       0       0       0
  3876 ;;      Totals:         0       6       0       0       0       0       0
  3877 ;;Total ram usage:        6 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    9
  3880 ;; This function calls:
  3881 ;;		_Delay
  3882 ;;		___altoft
  3883 ;;		___awtoft
  3884 ;;		___ftadd
  3885 ;;		___ftdiv
  3886 ;;		_printf
  3887 ;;		_readAccelData
  3888 ;;		_readByte
  3889 ;;		_readEulData
  3890 ;;		_readGRVData
  3891 ;;		_readGyroData
  3892 ;;		_readGyroTempData
  3893 ;;		_readLIAData
  3894 ;;		_readMagData
  3895 ;;		_readQuatData
  3896 ;; This function is called by:
  3897 ;;		_main
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text1
  3902  001C2A                     __ptext1:
  3903                           	opt stack 0
  3904  001C2A                     _loop:
  3905                           	opt stack 21
  3906                           
  3907                           ;BNO055.c: 167: readAccelData(accelCount);
  3908                           
  3909                           ;incstack = 0
  3910  001C2A  0ED8               	movlw	low _accelCount
  3911  001C2C  0100               	movlb	0	; () banked
  3912  001C2E  6F6A               	movwf	readAccelData@destination& (0+255),b
  3913  001C30  0E01               	movlw	high _accelCount
  3914  001C32  0100               	movlb	0	; () banked
  3915  001C34  6F6B               	movwf	(readAccelData@destination+1)& (0+255),b
  3916  001C36  EC5C  F026         	call	_readAccelData	;wreg free
  3917                           
  3918                           ;BNO055.c: 169: ax = (float)accelCount[0];
  3919  001C3A  C1D8  F023         	movff	_accelCount,___awtoft@c
  3920  001C3E  C1D9  F024         	movff	_accelCount+1,___awtoft@c+1
  3921  001C42  EC2B  F02B         	call	___awtoft	;wreg free
  3922  001C46  C023  F14C         	movff	?___awtoft,_ax
  3923  001C4A  C024  F14D         	movff	?___awtoft+1,_ax+1
  3924  001C4E  C025  F14E         	movff	?___awtoft+2,_ax+2
  3925                           
  3926                           ;BNO055.c: 170: ay = (float)accelCount[1];
  3927  001C52  C1DA  F023         	movff	_accelCount+2,___awtoft@c
  3928  001C56  C1DB  F024         	movff	_accelCount+3,___awtoft@c+1
  3929  001C5A  EC2B  F02B         	call	___awtoft	;wreg free
  3930  001C5E  C023  F14F         	movff	?___awtoft,_ay
  3931  001C62  C024  F150         	movff	?___awtoft+1,_ay+1
  3932  001C66  C025  F151         	movff	?___awtoft+2,_ay+2
  3933                           
  3934                           ;BNO055.c: 171: az = (float)accelCount[2];
  3935  001C6A  C1DC  F023         	movff	_accelCount+4,___awtoft@c
  3936  001C6E  C1DD  F024         	movff	_accelCount+5,___awtoft@c+1
  3937  001C72  EC2B  F02B         	call	___awtoft	;wreg free
  3938  001C76  C023  F152         	movff	?___awtoft,_az
  3939  001C7A  C024  F153         	movff	?___awtoft+1,_az+1
  3940  001C7E  C025  F154         	movff	?___awtoft+2,_az+2
  3941                           
  3942                           ;BNO055.c: 173: readGyroData(gyroCount);
  3943  001C82  0EDE               	movlw	low _gyroCount
  3944  001C84  0100               	movlb	0	; () banked
  3945  001C86  6F6A               	movwf	readGyroData@destination& (0+255),b
  3946  001C88  0E01               	movlw	high _gyroCount
  3947  001C8A  0100               	movlb	0	; () banked
  3948  001C8C  6F6B               	movwf	(readGyroData@destination+1)& (0+255),b
  3949  001C8E  EC54  F025         	call	_readGyroData	;wreg free
  3950                           
  3951                           ;BNO055.c: 175: gx = (float)gyroCount[0]/16.;
  3952  001C92  C1DE  F023         	movff	_gyroCount,___awtoft@c
  3953  001C96  C1DF  F024         	movff	_gyroCount+1,___awtoft@c+1
  3954  001C9A  EC2B  F02B         	call	___awtoft	;wreg free
  3955  001C9E  C023  F062         	movff	?___awtoft,___ftdiv@f1
  3956  001CA2  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  3957  001CA6  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  3958  001CAA  0E00               	movlw	0
  3959  001CAC  0100               	movlb	0	; () banked
  3960  001CAE  6F65               	movwf	___ftdiv@f2& (0+255),b
  3961  001CB0  0E80               	movlw	128
  3962  001CB2  0100               	movlb	0	; () banked
  3963  001CB4  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  3964  001CB6  0E41               	movlw	65
  3965  001CB8  0100               	movlb	0	; () banked
  3966  001CBA  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  3967  001CBC  EC7E  F01E         	call	___ftdiv	;wreg free
  3968  001CC0  C062  F15E         	movff	?___ftdiv,_gx
  3969  001CC4  C063  F15F         	movff	?___ftdiv+1,_gx+1
  3970  001CC8  C064  F160         	movff	?___ftdiv+2,_gx+2
  3971                           
  3972                           ;BNO055.c: 176: gy = (float)gyroCount[1]/16.;
  3973  001CCC  C1E0  F023         	movff	_gyroCount+2,___awtoft@c
  3974  001CD0  C1E1  F024         	movff	_gyroCount+3,___awtoft@c+1
  3975  001CD4  EC2B  F02B         	call	___awtoft	;wreg free
  3976  001CD8  C023  F062         	movff	?___awtoft,___ftdiv@f1
  3977  001CDC  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  3978  001CE0  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  3979  001CE4  0E00               	movlw	0
  3980  001CE6  0100               	movlb	0	; () banked
  3981  001CE8  6F65               	movwf	___ftdiv@f2& (0+255),b
  3982  001CEA  0E80               	movlw	128
  3983  001CEC  0100               	movlb	0	; () banked
  3984  001CEE  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  3985  001CF0  0E41               	movlw	65
  3986  001CF2  0100               	movlb	0	; () banked
  3987  001CF4  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  3988  001CF6  EC7E  F01E         	call	___ftdiv	;wreg free
  3989  001CFA  C062  F161         	movff	?___ftdiv,_gy
  3990  001CFE  C063  F162         	movff	?___ftdiv+1,_gy+1
  3991  001D02  C064  F163         	movff	?___ftdiv+2,_gy+2
  3992                           
  3993                           ;BNO055.c: 177: gz = (float)gyroCount[2]/16.;
  3994  001D06  C1E2  F023         	movff	_gyroCount+4,___awtoft@c
  3995  001D0A  C1E3  F024         	movff	_gyroCount+5,___awtoft@c+1
  3996  001D0E  EC2B  F02B         	call	___awtoft	;wreg free
  3997  001D12  C023  F062         	movff	?___awtoft,___ftdiv@f1
  3998  001D16  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  3999  001D1A  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4000  001D1E  0E00               	movlw	0
  4001  001D20  0100               	movlb	0	; () banked
  4002  001D22  6F65               	movwf	___ftdiv@f2& (0+255),b
  4003  001D24  0E80               	movlw	128
  4004  001D26  0100               	movlb	0	; () banked
  4005  001D28  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4006  001D2A  0E41               	movlw	65
  4007  001D2C  0100               	movlb	0	; () banked
  4008  001D2E  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4009  001D30  EC7E  F01E         	call	___ftdiv	;wreg free
  4010  001D34  C062  F164         	movff	?___ftdiv,_gz
  4011  001D38  C063  F165         	movff	?___ftdiv+1,_gz+1
  4012  001D3C  C064  F166         	movff	?___ftdiv+2,_gz+2
  4013                           
  4014                           ;BNO055.c: 179: readMagData(magCount);
  4015  001D40  0EE4               	movlw	low _magCount
  4016  001D42  0100               	movlb	0	; () banked
  4017  001D44  6F6A               	movwf	readMagData@destination& (0+255),b
  4018  001D46  0E01               	movlw	high _magCount
  4019  001D48  0100               	movlb	0	; () banked
  4020  001D4A  6F6B               	movwf	(readMagData@destination+1)& (0+255),b
  4021  001D4C  ECA4  F024         	call	_readMagData	;wreg free
  4022                           
  4023                           ;BNO055.c: 181: mx = (float)magCount[0]/1.6;
  4024  001D50  C1E4  F023         	movff	_magCount,___awtoft@c
  4025  001D54  C1E5  F024         	movff	_magCount+1,___awtoft@c+1
  4026  001D58  EC2B  F02B         	call	___awtoft	;wreg free
  4027  001D5C  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4028  001D60  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4029  001D64  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4030  001D68  0ECD               	movlw	205
  4031  001D6A  0100               	movlb	0	; () banked
  4032  001D6C  6F65               	movwf	___ftdiv@f2& (0+255),b
  4033  001D6E  0ECC               	movlw	204
  4034  001D70  0100               	movlb	0	; () banked
  4035  001D72  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4036  001D74  0E3F               	movlw	63
  4037  001D76  0100               	movlb	0	; () banked
  4038  001D78  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4039  001D7A  EC7E  F01E         	call	___ftdiv	;wreg free
  4040  001D7E  C062  F16A         	movff	?___ftdiv,_mx
  4041  001D82  C063  F16B         	movff	?___ftdiv+1,_mx+1
  4042  001D86  C064  F16C         	movff	?___ftdiv+2,_mx+2
  4043                           
  4044                           ;BNO055.c: 182: my = (float)magCount[1]/1.6;
  4045  001D8A  C1E6  F023         	movff	_magCount+2,___awtoft@c
  4046  001D8E  C1E7  F024         	movff	_magCount+3,___awtoft@c+1
  4047  001D92  EC2B  F02B         	call	___awtoft	;wreg free
  4048  001D96  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4049  001D9A  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4050  001D9E  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4051  001DA2  0ECD               	movlw	205
  4052  001DA4  0100               	movlb	0	; () banked
  4053  001DA6  6F65               	movwf	___ftdiv@f2& (0+255),b
  4054  001DA8  0ECC               	movlw	204
  4055  001DAA  0100               	movlb	0	; () banked
  4056  001DAC  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4057  001DAE  0E3F               	movlw	63
  4058  001DB0  0100               	movlb	0	; () banked
  4059  001DB2  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4060  001DB4  EC7E  F01E         	call	___ftdiv	;wreg free
  4061  001DB8  C062  F16D         	movff	?___ftdiv,_my
  4062  001DBC  C063  F16E         	movff	?___ftdiv+1,_my+1
  4063  001DC0  C064  F16F         	movff	?___ftdiv+2,_my+2
  4064                           
  4065                           ;BNO055.c: 183: mz = (float)magCount[2]/1.6;
  4066  001DC4  C1E8  F023         	movff	_magCount+4,___awtoft@c
  4067  001DC8  C1E9  F024         	movff	_magCount+5,___awtoft@c+1
  4068  001DCC  EC2B  F02B         	call	___awtoft	;wreg free
  4069  001DD0  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4070  001DD4  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4071  001DD8  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4072  001DDC  0ECD               	movlw	205
  4073  001DDE  0100               	movlb	0	; () banked
  4074  001DE0  6F65               	movwf	___ftdiv@f2& (0+255),b
  4075  001DE2  0ECC               	movlw	204
  4076  001DE4  0100               	movlb	0	; () banked
  4077  001DE6  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4078  001DE8  0E3F               	movlw	63
  4079  001DEA  0100               	movlb	0	; () banked
  4080  001DEC  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4081  001DEE  EC7E  F01E         	call	___ftdiv	;wreg free
  4082  001DF2  C062  F170         	movff	?___ftdiv,_mz
  4083  001DF6  C063  F171         	movff	?___ftdiv+1,_mz+1
  4084  001DFA  C064  F172         	movff	?___ftdiv+2,_mz+2
  4085                           
  4086                           ;BNO055.c: 185: readQuatData(quatCount);
  4087  001DFE  0EBE               	movlw	low _quatCount
  4088  001E00  0100               	movlb	0	; () banked
  4089  001E02  6F6A               	movwf	readQuatData@destination& (0+255),b
  4090  001E04  0E01               	movlw	high _quatCount
  4091  001E06  0100               	movlb	0	; () banked
  4092  001E08  6F6B               	movwf	(readQuatData@destination+1)& (0+255),b
  4093  001E0A  EC9E  F022         	call	_readQuatData	;wreg free
  4094                           
  4095                           ;BNO055.c: 187: quat[0] = (float)(quatCount[0])/16384.;
  4096  001E0E  C1BE  F023         	movff	_quatCount,___awtoft@c
  4097  001E12  C1BF  F024         	movff	_quatCount+1,___awtoft@c+1
  4098  001E16  EC2B  F02B         	call	___awtoft	;wreg free
  4099  001E1A  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4100  001E1E  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4101  001E22  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4102  001E26  0E00               	movlw	0
  4103  001E28  0100               	movlb	0	; () banked
  4104  001E2A  6F65               	movwf	___ftdiv@f2& (0+255),b
  4105  001E2C  0E80               	movlw	128
  4106  001E2E  0100               	movlb	0	; () banked
  4107  001E30  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4108  001E32  0E46               	movlw	70
  4109  001E34  0100               	movlb	0	; () banked
  4110  001E36  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4111  001E38  EC7E  F01E         	call	___ftdiv	;wreg free
  4112  001E3C  C062  F2E5         	movff	?___ftdiv,_quat
  4113  001E40  C063  F2E6         	movff	?___ftdiv+1,_quat+1
  4114  001E44  C064  F2E7         	movff	?___ftdiv+2,_quat+2
  4115                           
  4116                           ;BNO055.c: 188: quat[1] = (float)(quatCount[1])/16384.;
  4117  001E48  C1C0  F023         	movff	_quatCount+2,___awtoft@c
  4118  001E4C  C1C1  F024         	movff	_quatCount+3,___awtoft@c+1
  4119  001E50  EC2B  F02B         	call	___awtoft	;wreg free
  4120  001E54  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4121  001E58  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4122  001E5C  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4123  001E60  0E00               	movlw	0
  4124  001E62  0100               	movlb	0	; () banked
  4125  001E64  6F65               	movwf	___ftdiv@f2& (0+255),b
  4126  001E66  0E80               	movlw	128
  4127  001E68  0100               	movlb	0	; () banked
  4128  001E6A  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4129  001E6C  0E46               	movlw	70
  4130  001E6E  0100               	movlb	0	; () banked
  4131  001E70  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4132  001E72  EC7E  F01E         	call	___ftdiv	;wreg free
  4133  001E76  C062  F2E8         	movff	?___ftdiv,_quat+3
  4134  001E7A  C063  F2E9         	movff	?___ftdiv+1,_quat+4
  4135  001E7E  C064  F2EA         	movff	?___ftdiv+2,_quat+5
  4136                           
  4137                           ;BNO055.c: 189: quat[2] = (float)(quatCount[2])/16384.;
  4138  001E82  C1C2  F023         	movff	_quatCount+4,___awtoft@c
  4139  001E86  C1C3  F024         	movff	_quatCount+5,___awtoft@c+1
  4140  001E8A  EC2B  F02B         	call	___awtoft	;wreg free
  4141  001E8E  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4142  001E92  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4143  001E96  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4144  001E9A  0E00               	movlw	0
  4145  001E9C  0100               	movlb	0	; () banked
  4146  001E9E  6F65               	movwf	___ftdiv@f2& (0+255),b
  4147  001EA0  0E80               	movlw	128
  4148  001EA2  0100               	movlb	0	; () banked
  4149  001EA4  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4150  001EA6  0E46               	movlw	70
  4151  001EA8  0100               	movlb	0	; () banked
  4152  001EAA  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4153  001EAC  EC7E  F01E         	call	___ftdiv	;wreg free
  4154  001EB0  C062  F2EB         	movff	?___ftdiv,_quat+6
  4155  001EB4  C063  F2EC         	movff	?___ftdiv+1,_quat+7
  4156  001EB8  C064  F2ED         	movff	?___ftdiv+2,_quat+8
  4157                           
  4158                           ;BNO055.c: 190: quat[3] = (float)(quatCount[3])/16384.;
  4159  001EBC  C1C4  F023         	movff	_quatCount+6,___awtoft@c
  4160  001EC0  C1C5  F024         	movff	_quatCount+7,___awtoft@c+1
  4161  001EC4  EC2B  F02B         	call	___awtoft	;wreg free
  4162  001EC8  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4163  001ECC  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4164  001ED0  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4165  001ED4  0E00               	movlw	0
  4166  001ED6  0100               	movlb	0	; () banked
  4167  001ED8  6F65               	movwf	___ftdiv@f2& (0+255),b
  4168  001EDA  0E80               	movlw	128
  4169  001EDC  0100               	movlb	0	; () banked
  4170  001EDE  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4171  001EE0  0E46               	movlw	70
  4172  001EE2  0100               	movlb	0	; () banked
  4173  001EE4  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4174  001EE6  EC7E  F01E         	call	___ftdiv	;wreg free
  4175  001EEA  C062  F2EE         	movff	?___ftdiv,_quat+9
  4176  001EEE  C063  F2EF         	movff	?___ftdiv+1,_quat+10
  4177  001EF2  C064  F2F0         	movff	?___ftdiv+2,_quat+11
  4178                           
  4179                           ;BNO055.c: 192: readEulData(EulCount);
  4180  001EF6  0EC6               	movlw	low _EulCount
  4181  001EF8  0100               	movlb	0	; () banked
  4182  001EFA  6F6A               	movwf	readEulData@destination& (0+255),b
  4183  001EFC  0E01               	movlw	high _EulCount
  4184  001EFE  0100               	movlb	0	; () banked
  4185  001F00  6F6B               	movwf	(readEulData@destination+1)& (0+255),b
  4186  001F02  EC04  F026         	call	_readEulData	;wreg free
  4187                           
  4188                           ;BNO055.c: 194: Yaw = (float)EulCount[0]/16.;
  4189  001F06  C1C6  F023         	movff	_EulCount,___awtoft@c
  4190  001F0A  C1C7  F024         	movff	_EulCount+1,___awtoft@c+1
  4191  001F0E  EC2B  F02B         	call	___awtoft	;wreg free
  4192  001F12  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4193  001F16  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4194  001F1A  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4195  001F1E  0E00               	movlw	0
  4196  001F20  0100               	movlb	0	; () banked
  4197  001F22  6F65               	movwf	___ftdiv@f2& (0+255),b
  4198  001F24  0E80               	movlw	128
  4199  001F26  0100               	movlb	0	; () banked
  4200  001F28  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4201  001F2A  0E41               	movlw	65
  4202  001F2C  0100               	movlb	0	; () banked
  4203  001F2E  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4204  001F30  EC7E  F01E         	call	___ftdiv	;wreg free
  4205  001F34  C062  F146         	movff	?___ftdiv,_Yaw
  4206  001F38  C063  F147         	movff	?___ftdiv+1,_Yaw+1
  4207  001F3C  C064  F148         	movff	?___ftdiv+2,_Yaw+2
  4208                           
  4209                           ;BNO055.c: 195: Roll = (float)EulCount[1]/16.;
  4210  001F40  C1C8  F023         	movff	_EulCount+2,___awtoft@c
  4211  001F44  C1C9  F024         	movff	_EulCount+3,___awtoft@c+1
  4212  001F48  EC2B  F02B         	call	___awtoft	;wreg free
  4213  001F4C  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4214  001F50  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4215  001F54  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4216  001F58  0E00               	movlw	0
  4217  001F5A  0100               	movlb	0	; () banked
  4218  001F5C  6F65               	movwf	___ftdiv@f2& (0+255),b
  4219  001F5E  0E80               	movlw	128
  4220  001F60  0100               	movlb	0	; () banked
  4221  001F62  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4222  001F64  0E41               	movlw	65
  4223  001F66  0100               	movlb	0	; () banked
  4224  001F68  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4225  001F6A  EC7E  F01E         	call	___ftdiv	;wreg free
  4226  001F6E  C062  F143         	movff	?___ftdiv,_Roll
  4227  001F72  C063  F144         	movff	?___ftdiv+1,_Roll+1
  4228  001F76  C064  F145         	movff	?___ftdiv+2,_Roll+2
  4229                           
  4230                           ;BNO055.c: 196: Pitch = (float)EulCount[2]/16.;
  4231  001F7A  C1CA  F023         	movff	_EulCount+4,___awtoft@c
  4232  001F7E  C1CB  F024         	movff	_EulCount+5,___awtoft@c+1
  4233  001F82  EC2B  F02B         	call	___awtoft	;wreg free
  4234  001F86  C023  F062         	movff	?___awtoft,___ftdiv@f1
  4235  001F8A  C024  F063         	movff	?___awtoft+1,___ftdiv@f1+1
  4236  001F8E  C025  F064         	movff	?___awtoft+2,___ftdiv@f1+2
  4237  001F92  0E00               	movlw	0
  4238  001F94  0100               	movlb	0	; () banked
  4239  001F96  6F65               	movwf	___ftdiv@f2& (0+255),b
  4240  001F98  0E80               	movlw	128
  4241  001F9A  0100               	movlb	0	; () banked
  4242  001F9C  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4243  001F9E  0E41               	movlw	65
  4244  001FA0  0100               	movlb	0	; () banked
  4245  001FA2  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4246  001FA4  EC7E  F01E         	call	___ftdiv	;wreg free
  4247  001FA8  C062  F140         	movff	?___ftdiv,_Pitch
  4248  001FAC  C063  F141         	movff	?___ftdiv+1,_Pitch+1
  4249  001FB0  C064  F142         	movff	?___ftdiv+2,_Pitch+2
  4250                           
  4251                           ;BNO055.c: 198: readLIAData(LIACount);
  4252  001FB4  0ED2               	movlw	low _LIACount
  4253  001FB6  0100               	movlb	0	; () banked
  4254  001FB8  6F6A               	movwf	readLIAData@destination& (0+255),b
  4255  001FBA  0E01               	movlw	high _LIACount
  4256  001FBC  0100               	movlb	0	; () banked
  4257  001FBE  6F6B               	movwf	(readLIAData@destination+1)& (0+255),b
  4258  001FC0  ECFC  F024         	call	_readLIAData	;wreg free
  4259                           
  4260                           ;BNO055.c: 200: LIAx = (float)LIACount[0];
  4261  001FC4  C1D2  F023         	movff	_LIACount,___awtoft@c
  4262  001FC8  C1D3  F024         	movff	_LIACount+1,___awtoft@c+1
  4263  001FCC  EC2B  F02B         	call	___awtoft	;wreg free
  4264  001FD0  C023  F134         	movff	?___awtoft,_LIAx
  4265  001FD4  C024  F135         	movff	?___awtoft+1,_LIAx+1
  4266  001FD8  C025  F136         	movff	?___awtoft+2,_LIAx+2
  4267                           
  4268                           ;BNO055.c: 201: LIAy = (float)LIACount[1];
  4269  001FDC  C1D4  F023         	movff	_LIACount+2,___awtoft@c
  4270  001FE0  C1D5  F024         	movff	_LIACount+3,___awtoft@c+1
  4271  001FE4  EC2B  F02B         	call	___awtoft	;wreg free
  4272  001FE8  C023  F137         	movff	?___awtoft,_LIAy
  4273  001FEC  C024  F138         	movff	?___awtoft+1,_LIAy+1
  4274  001FF0  C025  F139         	movff	?___awtoft+2,_LIAy+2
  4275                           
  4276                           ;BNO055.c: 202: LIAz = (float)LIACount[2];
  4277  001FF4  C1D6  F023         	movff	_LIACount+4,___awtoft@c
  4278  001FF8  C1D7  F024         	movff	_LIACount+5,___awtoft@c+1
  4279  001FFC  EC2B  F02B         	call	___awtoft	;wreg free
  4280  002000  C023  F13A         	movff	?___awtoft,_LIAz
  4281  002004  C024  F13B         	movff	?___awtoft+1,_LIAz+1
  4282  002008  C025  F13C         	movff	?___awtoft+2,_LIAz+2
  4283                           
  4284                           ;BNO055.c: 204: readGRVData(GRVCount);
  4285  00200C  0ECC               	movlw	low _GRVCount
  4286  00200E  0100               	movlb	0	; () banked
  4287  002010  6F6A               	movwf	readGRVData@destination& (0+255),b
  4288  002012  0E01               	movlw	high _GRVCount
  4289  002014  0100               	movlb	0	; () banked
  4290  002016  6F6B               	movwf	(readGRVData@destination+1)& (0+255),b
  4291  002018  ECAC  F025         	call	_readGRVData	;wreg free
  4292                           
  4293                           ;BNO055.c: 206: GRVx = (float)GRVCount[0];
  4294  00201C  C1CC  F023         	movff	_GRVCount,___awtoft@c
  4295  002020  C1CD  F024         	movff	_GRVCount+1,___awtoft@c+1
  4296  002024  EC2B  F02B         	call	___awtoft	;wreg free
  4297  002028  C023  F125         	movff	?___awtoft,_GRVx
  4298  00202C  C024  F126         	movff	?___awtoft+1,_GRVx+1
  4299  002030  C025  F127         	movff	?___awtoft+2,_GRVx+2
  4300                           
  4301                           ;BNO055.c: 207: GRVy = (float)GRVCount[1];
  4302  002034  C1CE  F023         	movff	_GRVCount+2,___awtoft@c
  4303  002038  C1CF  F024         	movff	_GRVCount+3,___awtoft@c+1
  4304  00203C  EC2B  F02B         	call	___awtoft	;wreg free
  4305  002040  C023  F128         	movff	?___awtoft,_GRVy
  4306  002044  C024  F129         	movff	?___awtoft+1,_GRVy+1
  4307  002048  C025  F12A         	movff	?___awtoft+2,_GRVy+2
  4308                           
  4309                           ;BNO055.c: 208: GRVz = (float)GRVCount[2];
  4310  00204C  C1D0  F023         	movff	_GRVCount+4,___awtoft@c
  4311  002050  C1D1  F024         	movff	_GRVCount+5,___awtoft@c+1
  4312  002054  EC2B  F02B         	call	___awtoft	;wreg free
  4313  002058  C023  F12B         	movff	?___awtoft,_GRVz
  4314  00205C  C024  F12C         	movff	?___awtoft+1,_GRVz+1
  4315  002060  C025  F12D         	movff	?___awtoft+2,_GRVz+2
  4316                           
  4317                           ;BNO055.c: 212: deltat = ((Now - lastUpdate)/1000000.0);
  4318  002064  C11D  F0C8         	movff	_lastUpdate,??_loop
  4319  002068  C11E  F0C9         	movff	_lastUpdate+1,??_loop+1
  4320  00206C  C11F  F0CA         	movff	_lastUpdate+2,??_loop+2
  4321  002070  C120  F0CB         	movff	_lastUpdate+3,??_loop+3
  4322  002074  0100               	movlb	0	; () banked
  4323  002076  1FC8               	comf	??_loop& (0+255),f,b
  4324  002078  1FC9               	comf	(??_loop+1)& (0+255),f,b
  4325  00207A  1FCA               	comf	(??_loop+2)& (0+255),f,b
  4326  00207C  1FCB               	comf	(??_loop+3)& (0+255),f,b
  4327  00207E  2BC8               	incf	??_loop& (0+255),f,b
  4328  002080  0E00               	movlw	0
  4329  002082  23C9               	addwfc	(??_loop+1)& (0+255),f,b
  4330  002084  23CA               	addwfc	(??_loop+2)& (0+255),f,b
  4331  002086  23CB               	addwfc	(??_loop+3)& (0+255),f,b
  4332  002088  0101               	movlb	1	; () banked
  4333  00208A  510D               	movf	_Now& (0+255),w,b
  4334  00208C  0100               	movlb	0	; () banked
  4335  00208E  25C8               	addwf	??_loop& (0+255),w,b
  4336  002090  6E23               	movwf	___altoft@c,c
  4337  002092  0101               	movlb	1	; () banked
  4338  002094  510E               	movf	(_Now+1)& (0+255),w,b
  4339  002096  0100               	movlb	0	; () banked
  4340  002098  21C9               	addwfc	(??_loop+1)& (0+255),w,b
  4341  00209A  6E24               	movwf	___altoft@c+1,c
  4342  00209C  0101               	movlb	1	; () banked
  4343  00209E  510F               	movf	(_Now+2)& (0+255),w,b
  4344  0020A0  0100               	movlb	0	; () banked
  4345  0020A2  21CA               	addwfc	(??_loop+2)& (0+255),w,b
  4346  0020A4  6E25               	movwf	___altoft@c+2,c
  4347  0020A6  0101               	movlb	1	; () banked
  4348  0020A8  5110               	movf	(_Now+3)& (0+255),w,b
  4349  0020AA  0100               	movlb	0	; () banked
  4350  0020AC  21CB               	addwfc	(??_loop+3)& (0+255),w,b
  4351  0020AE  6E26               	movwf	___altoft@c+3,c
  4352  0020B0  EC16  F029         	call	___altoft	;wreg free
  4353  0020B4  C023  F062         	movff	?___altoft,___ftdiv@f1
  4354  0020B8  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  4355  0020BC  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  4356  0020C0  0E24               	movlw	36
  4357  0020C2  0100               	movlb	0	; () banked
  4358  0020C4  6F65               	movwf	___ftdiv@f2& (0+255),b
  4359  0020C6  0E74               	movlw	116
  4360  0020C8  0100               	movlb	0	; () banked
  4361  0020CA  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  4362  0020CC  0E49               	movlw	73
  4363  0020CE  0100               	movlb	0	; () banked
  4364  0020D0  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  4365  0020D2  EC7E  F01E         	call	___ftdiv	;wreg free
  4366  0020D6  C062  F158         	movff	?___ftdiv,_deltat
  4367  0020DA  C063  F159         	movff	?___ftdiv+1,_deltat+1
  4368  0020DE  C064  F15A         	movff	?___ftdiv+2,_deltat+2
  4369                           
  4370                           ;BNO055.c: 213: lastUpdate = Now;
  4371  0020E2  C10D  F11D         	movff	_Now,_lastUpdate
  4372  0020E6  C10E  F11E         	movff	_Now+1,_lastUpdate+1
  4373  0020EA  C10F  F11F         	movff	_Now+2,_lastUpdate+2
  4374  0020EE  C110  F120         	movff	_Now+3,_lastUpdate+3
  4375                           
  4376                           ;BNO055.c: 215: sum += deltat;
  4377  0020F2  C179  F07D         	movff	_sum,___ftadd@f1
  4378  0020F6  C17A  F07E         	movff	_sum+1,___ftadd@f1+1
  4379  0020FA  C17B  F07F         	movff	_sum+2,___ftadd@f1+2
  4380  0020FE  C158  F080         	movff	_deltat,___ftadd@f2
  4381  002102  C159  F081         	movff	_deltat+1,___ftadd@f2+1
  4382  002106  C15A  F082         	movff	_deltat+2,___ftadd@f2+2
  4383  00210A  ECBC  F01B         	call	___ftadd	;wreg free
  4384  00210E  C07D  F179         	movff	?___ftadd,_sum
  4385  002112  C07E  F17A         	movff	?___ftadd+1,_sum+1
  4386  002116  C07F  F17B         	movff	?___ftadd+2,_sum+2
  4387                           
  4388                           ;BNO055.c: 229: if (1) {
  4389  00211A  0E01               	movlw	1
  4390  00211C  0101               	movlb	1	; () banked
  4391  00211E  2721               	addwf	_sumCount& (0+255),f,b
  4392  002120  0E00               	movlw	0
  4393  002122  2322               	addwfc	(_sumCount+1)& (0+255),f,b
  4394  002124  2323               	addwfc	(_sumCount+2)& (0+255),f,b
  4395  002126  2324               	addwfc	(_sumCount+3)& (0+255),f,b
  4396                           
  4397                           ; BSR set to: 1
  4398                           ;BNO055.c: 232: char sysstat = readByte(0x29, 0x39);
  4399  002128  0E39               	movlw	57
  4400  00212A  0100               	movlb	0	; () banked
  4401  00212C  6F60               	movwf	readByte@subAddress& (0+255),b
  4402  00212E  0E29               	movlw	41
  4403  002130  ECB4  F026         	call	_readByte
  4404  002134  0100               	movlb	0	; () banked
  4405  002136  6FCC               	movwf	loop@sysstat& (0+255),b
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;BNO055.c: 233: Delay(50);
  4409  002138  0E00               	movlw	0
  4410  00213A  6E1C               	movwf	Delay@wait+1,c
  4411  00213C  0E32               	movlw	50
  4412  00213E  6E1B               	movwf	Delay@wait,c
  4413  002140  EC47  F02B         	call	_Delay	;wreg free
  4414                           
  4415                           ;BNO055.c: 234: printf("System Status = 0x5c\n",sysstat);
  4416  002144  0E3B               	movlw	low STR_30
  4417  002146  0100               	movlb	0	; () banked
  4418  002148  6F8F               	movwf	printf@f& (0+255),b
  4419  00214A  0E7F               	movlw	high STR_30
  4420  00214C  0100               	movlb	0	; () banked
  4421  00214E  6F90               	movwf	(printf@f+1)& (0+255),b
  4422  002150  C0CC  F091         	movff	loop@sysstat,?_printf+2
  4423  002154  0100               	movlb	0	; () banked
  4424  002156  6B92               	clrf	(?_printf+3)& (0+255),b
  4425  002158  EC70  F000         	call	_printf	;wreg free
  4426                           
  4427                           ;BNO055.c: 235: if(sysstat == 0x05){
  4428  00215C  0E05               	movlw	5
  4429  00215E  0100               	movlb	0	; () banked
  4430  002160  19CC               	xorwf	loop@sysstat& (0+255),w,b
  4431  002162  A4D8               	btfss	status,2,c
  4432  002164  D008               	goto	l10045
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;BNO055.c: 236: printf("Sensor fusion algorithm running\n");
  4436  002166  0E60               	movlw	low STR_31
  4437  002168  0100               	movlb	0	; () banked
  4438  00216A  6F8F               	movwf	printf@f& (0+255),b
  4439  00216C  0E7C               	movlw	high STR_31
  4440  00216E  0100               	movlb	0	; () banked
  4441  002170  6F90               	movwf	(printf@f+1)& (0+255),b
  4442  002172  EC70  F000         	call	_printf	;wreg free
  4443  002176                     l10045:
  4444                           
  4445                           ;BNO055.c: 237: }
  4446                           ;BNO055.c: 238: if(sysstat == 0x06) {
  4447  002176  0E06               	movlw	6
  4448  002178  0100               	movlb	0	; () banked
  4449  00217A  19CC               	xorwf	loop@sysstat& (0+255),w,b
  4450  00217C  A4D8               	btfss	status,2,c
  4451  00217E  D008               	goto	l10049
  4452                           
  4453                           ; BSR set to: 0
  4454                           ;BNO055.c: 239: printf("Sensor fusion not algorithm running");
  4455  002180  0ED6               	movlw	low STR_32
  4456  002182  0100               	movlb	0	; () banked
  4457  002184  6F8F               	movwf	printf@f& (0+255),b
  4458  002186  0E7B               	movlw	high STR_32
  4459  002188  0100               	movlb	0	; () banked
  4460  00218A  6F90               	movwf	(printf@f+1)& (0+255),b
  4461  00218C  EC70  F000         	call	_printf	;wreg free
  4462  002190                     l10049:
  4463                           
  4464                           ;BNO055.c: 240: }
  4465                           ;BNO055.c: 242: if(sysstat == 0x01) {
  4466  002190  0100               	movlb	0	; () banked
  4467  002192  05CC               	decf	loop@sysstat& (0+255),w,b
  4468  002194  A4D8               	btfss	status,2,c
  4469  002196  D089               	goto	l10093
  4470                           
  4471                           ; BSR set to: 0
  4472                           ;BNO055.c: 243: char syserr = readByte(0x29, 0x3A);
  4473  002198  0E3A               	movlw	58
  4474  00219A  0100               	movlb	0	; () banked
  4475  00219C  6F60               	movwf	readByte@subAddress& (0+255),b
  4476  00219E  0E29               	movlw	41
  4477  0021A0  ECB4  F026         	call	_readByte
  4478  0021A4  0100               	movlb	0	; () banked
  4479  0021A6  6FCD               	movwf	loop@syserr& (0+255),b
  4480                           
  4481                           ; BSR set to: 0
  4482                           ;BNO055.c: 244: if(syserr == 0x01) printf("Peripheral initialization error");
  4483  0021A8  0100               	movlb	0	; () banked
  4484  0021AA  05CD               	decf	loop@syserr& (0+255),w,b
  4485  0021AC  A4D8               	btfss	status,2,c
  4486  0021AE  D008               	goto	l10057
  4487                           
  4488                           ; BSR set to: 0
  4489  0021B0  0E03               	movlw	low STR_33
  4490  0021B2  0100               	movlb	0	; () banked
  4491  0021B4  6F8F               	movwf	printf@f& (0+255),b
  4492  0021B6  0E7D               	movlw	high STR_33
  4493  0021B8  0100               	movlb	0	; () banked
  4494  0021BA  6F90               	movwf	(printf@f+1)& (0+255),b
  4495  0021BC  EC70  F000         	call	_printf	;wreg free
  4496  0021C0                     l10057:
  4497                           
  4498                           ;BNO055.c: 245: if(syserr == 0x02) printf("System initialization error");
  4499  0021C0  0E02               	movlw	2
  4500  0021C2  0100               	movlb	0	; () banked
  4501  0021C4  19CD               	xorwf	loop@syserr& (0+255),w,b
  4502  0021C6  A4D8               	btfss	status,2,c
  4503  0021C8  D008               	goto	l10061
  4504                           
  4505                           ; BSR set to: 0
  4506  0021CA  0E70               	movlw	low STR_34
  4507  0021CC  0100               	movlb	0	; () banked
  4508  0021CE  6F8F               	movwf	printf@f& (0+255),b
  4509  0021D0  0E7E               	movlw	high STR_34
  4510  0021D2  0100               	movlb	0	; () banked
  4511  0021D4  6F90               	movwf	(printf@f+1)& (0+255),b
  4512  0021D6  EC70  F000         	call	_printf	;wreg free
  4513  0021DA                     l10061:
  4514                           
  4515                           ;BNO055.c: 246: if(syserr == 0x03) printf("Self test result failed");
  4516  0021DA  0E03               	movlw	3
  4517  0021DC  0100               	movlb	0	; () banked
  4518  0021DE  19CD               	xorwf	loop@syserr& (0+255),w,b
  4519  0021E0  A4D8               	btfss	status,2,c
  4520  0021E2  D008               	goto	l10065
  4521                           
  4522                           ; BSR set to: 0
  4523  0021E4  0EF4               	movlw	low STR_35
  4524  0021E6  0100               	movlb	0	; () banked
  4525  0021E8  6F8F               	movwf	printf@f& (0+255),b
  4526  0021EA  0E7E               	movlw	high STR_35
  4527  0021EC  0100               	movlb	0	; () banked
  4528  0021EE  6F90               	movwf	(printf@f+1)& (0+255),b
  4529  0021F0  EC70  F000         	call	_printf	;wreg free
  4530  0021F4                     l10065:
  4531                           
  4532                           ;BNO055.c: 247: if(syserr == 0x04) printf("Register map value out of range");
  4533  0021F4  0E04               	movlw	4
  4534  0021F6  0100               	movlb	0	; () banked
  4535  0021F8  19CD               	xorwf	loop@syserr& (0+255),w,b
  4536  0021FA  A4D8               	btfss	status,2,c
  4537  0021FC  D008               	goto	l10069
  4538                           
  4539                           ; BSR set to: 0
  4540  0021FE  0EC3               	movlw	low STR_36
  4541  002200  0100               	movlb	0	; () banked
  4542  002202  6F8F               	movwf	printf@f& (0+255),b
  4543  002204  0E7C               	movlw	high STR_36
  4544  002206  0100               	movlb	0	; () banked
  4545  002208  6F90               	movwf	(printf@f+1)& (0+255),b
  4546  00220A  EC70  F000         	call	_printf	;wreg free
  4547  00220E                     l10069:
  4548                           
  4549                           ;BNO055.c: 248: if(syserr == 0x05) printf("Register map address out of range");
  4550  00220E  0E05               	movlw	5
  4551  002210  0100               	movlb	0	; () banked
  4552  002212  19CD               	xorwf	loop@syserr& (0+255),w,b
  4553  002214  A4D8               	btfss	status,2,c
  4554  002216  D008               	goto	l10073
  4555                           
  4556                           ; BSR set to: 0
  4557  002218  0E3E               	movlw	low STR_37
  4558  00221A  0100               	movlb	0	; () banked
  4559  00221C  6F8F               	movwf	printf@f& (0+255),b
  4560  00221E  0E7C               	movlw	high STR_37
  4561  002220  0100               	movlb	0	; () banked
  4562  002222  6F90               	movwf	(printf@f+1)& (0+255),b
  4563  002224  EC70  F000         	call	_printf	;wreg free
  4564  002228                     l10073:
  4565                           
  4566                           ;BNO055.c: 249: if(syserr == 0x06) printf("Register map write error");
  4567  002228  0E06               	movlw	6
  4568  00222A  0100               	movlb	0	; () banked
  4569  00222C  19CD               	xorwf	loop@syserr& (0+255),w,b
  4570  00222E  A4D8               	btfss	status,2,c
  4571  002230  D008               	goto	l10077
  4572                           
  4573                           ; BSR set to: 0
  4574  002232  0EDB               	movlw	low STR_38
  4575  002234  0100               	movlb	0	; () banked
  4576  002236  6F8F               	movwf	printf@f& (0+255),b
  4577  002238  0E7E               	movlw	high STR_38
  4578  00223A  0100               	movlb	0	; () banked
  4579  00223C  6F90               	movwf	(printf@f+1)& (0+255),b
  4580  00223E  EC70  F000         	call	_printf	;wreg free
  4581  002242                     l10077:
  4582                           
  4583                           ;BNO055.c: 250: if(syserr == 0x07) printf("BNO low power mode no available for selected 
      +                          operation mode");
  4584  002242  0E07               	movlw	7
  4585  002244  0100               	movlb	0	; () banked
  4586  002246  19CD               	xorwf	loop@syserr& (0+255),w,b
  4587  002248  A4D8               	btfss	status,2,c
  4588  00224A  D008               	goto	l10081
  4589                           
  4590                           ; BSR set to: 0
  4591  00224C  0E95               	movlw	low STR_39
  4592  00224E  0100               	movlb	0	; () banked
  4593  002250  6F8F               	movwf	printf@f& (0+255),b
  4594  002252  0E79               	movlw	high STR_39
  4595  002254  0100               	movlb	0	; () banked
  4596  002256  6F90               	movwf	(printf@f+1)& (0+255),b
  4597  002258  EC70  F000         	call	_printf	;wreg free
  4598  00225C                     l10081:
  4599                           
  4600                           ;BNO055.c: 251: if(syserr == 0x08) printf("Accelerometer power mode not available");
  4601  00225C  0E08               	movlw	8
  4602  00225E  0100               	movlb	0	; () banked
  4603  002260  19CD               	xorwf	loop@syserr& (0+255),w,b
  4604  002262  A4D8               	btfss	status,2,c
  4605  002264  D008               	goto	l10085
  4606                           
  4607                           ; BSR set to: 0
  4608  002266  0E84               	movlw	low STR_40
  4609  002268  0100               	movlb	0	; () banked
  4610  00226A  6F8F               	movwf	printf@f& (0+255),b
  4611  00226C  0E7A               	movlw	high STR_40
  4612  00226E  0100               	movlb	0	; () banked
  4613  002270  6F90               	movwf	(printf@f+1)& (0+255),b
  4614  002272  EC70  F000         	call	_printf	;wreg free
  4615  002276                     l10085:
  4616                           
  4617                           ;BNO055.c: 252: if(syserr == 0x09) printf("Fusion algorithm configuration error");
  4618  002276  0E09               	movlw	9
  4619  002278  0100               	movlb	0	; () banked
  4620  00227A  19CD               	xorwf	loop@syserr& (0+255),w,b
  4621  00227C  A4D8               	btfss	status,2,c
  4622  00227E  D008               	goto	l10089
  4623                           
  4624                           ; BSR set to: 0
  4625  002280  0E69               	movlw	low STR_41
  4626  002282  0100               	movlb	0	; () banked
  4627  002284  6F8F               	movwf	printf@f& (0+255),b
  4628  002286  0E7B               	movlw	high STR_41
  4629  002288  0100               	movlb	0	; () banked
  4630  00228A  6F90               	movwf	(printf@f+1)& (0+255),b
  4631  00228C  EC70  F000         	call	_printf	;wreg free
  4632  002290                     l10089:
  4633                           
  4634                           ;BNO055.c: 253: if(syserr == 0x0A) printf("Sensor configuration error");
  4635  002290  0E0A               	movlw	10
  4636  002292  0100               	movlb	0	; () banked
  4637  002294  19CD               	xorwf	loop@syserr& (0+255),w,b
  4638  002296  A4D8               	btfss	status,2,c
  4639  002298  D008               	goto	l10093
  4640                           
  4641                           ; BSR set to: 0
  4642  00229A  0E8C               	movlw	low STR_42
  4643  00229C  0100               	movlb	0	; () banked
  4644  00229E  6F8F               	movwf	printf@f& (0+255),b
  4645  0022A0  0E7E               	movlw	high STR_42
  4646  0022A2  0100               	movlb	0	; () banked
  4647  0022A4  6F90               	movwf	(printf@f+1)& (0+255),b
  4648  0022A6  EC70  F000         	call	_printf	;wreg free
  4649  0022AA                     l10093:
  4650                           
  4651                           ;BNO055.c: 254: }
  4652                           ;BNO055.c: 277: tempGCount = readGyroTempData();
  4653  0022AA  EC85  F02C         	call	_readGyroTempData	;wreg free
  4654  0022AE  0100               	movlb	0	; () banked
  4655  0022B0  6FC8               	movwf	??_loop& (0+255),b
  4656  0022B2  0100               	movlb	0	; () banked
  4657  0022B4  51C8               	movf	??_loop& (0+255),w,b
  4658  0022B6  0101               	movlb	1	; () banked
  4659  0022B8  6F9E               	movwf	_tempGCount& (0+255),b
  4660  0022BA  6B9F               	clrf	(_tempGCount+1)& (0+255),b
  4661                           
  4662                           ; BSR set to: 1
  4663                           ;BNO055.c: 278: Gtemperature = (float) tempGCount;
  4664  0022BC  C19E  F023         	movff	_tempGCount,___awtoft@c
  4665  0022C0  C19F  F024         	movff	_tempGCount+1,___awtoft@c+1
  4666  0022C4  EC2B  F02B         	call	___awtoft	;wreg free
  4667  0022C8  C023  F12E         	movff	?___awtoft,_Gtemperature
  4668  0022CC  C024  F12F         	movff	?___awtoft+1,_Gtemperature+1
  4669  0022D0  C025  F130         	movff	?___awtoft+2,_Gtemperature+2
  4670                           
  4671                           ;BNO055.c: 299: if(1) {
  4672  0022D4  0E8E               	movlw	low STR_43
  4673  0022D6  0100               	movlb	0	; () banked
  4674  0022D8  6F8F               	movwf	printf@f& (0+255),b
  4675  0022DA  0E7B               	movlw	high STR_43
  4676  0022DC  0100               	movlb	0	; () banked
  4677  0022DE  6F90               	movwf	(printf@f+1)& (0+255),b
  4678  0022E0  C12E  F091         	movff	_Gtemperature,?_printf+2
  4679  0022E4  C12F  F092         	movff	_Gtemperature+1,?_printf+3
  4680  0022E8  C130  F093         	movff	_Gtemperature+2,?_printf+4
  4681  0022EC  EC70  F000         	call	_printf	;wreg free
  4682                           
  4683                           ;BNO055.c: 306: printf("Hardware x, y, z linear acceleration:");
  4684  0022F0  0ED2               	movlw	low STR_44
  4685  0022F2  0100               	movlb	0	; () banked
  4686  0022F4  6F8F               	movwf	printf@f& (0+255),b
  4687  0022F6  0E7A               	movlw	high STR_44
  4688  0022F8  0100               	movlb	0	; () banked
  4689  0022FA  6F90               	movwf	(printf@f+1)& (0+255),b
  4690  0022FC  EC70  F000         	call	_printf	;wreg free
  4691                           
  4692                           ;BNO055.c: 307: printf(" %f.1, %f.1,%f.1",LIAx, LIAy, LIAz);
  4693  002300  0ED6               	movlw	low STR_45
  4694  002302  0100               	movlb	0	; () banked
  4695  002304  6F8F               	movwf	printf@f& (0+255),b
  4696  002306  0E7F               	movlw	high STR_45
  4697  002308  0100               	movlb	0	; () banked
  4698  00230A  6F90               	movwf	(printf@f+1)& (0+255),b
  4699  00230C  C134  F091         	movff	_LIAx,?_printf+2
  4700  002310  C135  F092         	movff	_LIAx+1,?_printf+3
  4701  002314  C136  F093         	movff	_LIAx+2,?_printf+4
  4702  002318  C137  F094         	movff	_LIAy,?_printf+5
  4703  00231C  C138  F095         	movff	_LIAy+1,?_printf+6
  4704  002320  C139  F096         	movff	_LIAy+2,?_printf+7
  4705  002324  C13A  F097         	movff	_LIAz,?_printf+8
  4706  002328  C13B  F098         	movff	_LIAz+1,?_printf+9
  4707  00232C  C13C  F099         	movff	_LIAz+2,?_printf+10
  4708  002330  EC70  F000         	call	_printf	;wreg free
  4709                           
  4710                           ;BNO055.c: 308: Delay(50);
  4711  002334  0E00               	movlw	0
  4712  002336  6E1C               	movwf	Delay@wait+1,c
  4713  002338  0E32               	movlw	50
  4714  00233A  6E1B               	movwf	Delay@wait,c
  4715  00233C  EC47  F02B         	call	_Delay	;wreg free
  4716                           
  4717                           ;BNO055.c: 309: printf("Hardware x, y, z gravity vector: ");
  4718  002340  0EFA               	movlw	low STR_46
  4719  002342  0100               	movlb	0	; () banked
  4720  002344  6F8F               	movwf	printf@f& (0+255),b
  4721  002346  0E7B               	movlw	high STR_46
  4722  002348  0100               	movlb	0	; () banked
  4723  00234A  6F90               	movwf	(printf@f+1)& (0+255),b
  4724  00234C  EC70  F000         	call	_printf	;wreg free
  4725                           
  4726                           ;BNO055.c: 310: printf(" %f.1, %f.1,%f.1\n",GRVx, GRVy, GRVz);
  4727  002350  0E90               	movlw	low STR_47
  4728  002352  0100               	movlb	0	; () banked
  4729  002354  6F8F               	movwf	printf@f& (0+255),b
  4730  002356  0E7F               	movlw	high STR_47
  4731  002358  0100               	movlb	0	; () banked
  4732  00235A  6F90               	movwf	(printf@f+1)& (0+255),b
  4733  00235C  C125  F091         	movff	_GRVx,?_printf+2
  4734  002360  C126  F092         	movff	_GRVx+1,?_printf+3
  4735  002364  C127  F093         	movff	_GRVx+2,?_printf+4
  4736  002368  C128  F094         	movff	_GRVy,?_printf+5
  4737  00236C  C129  F095         	movff	_GRVy+1,?_printf+6
  4738  002370  C12A  F096         	movff	_GRVy+2,?_printf+7
  4739  002374  C12B  F097         	movff	_GRVz,?_printf+8
  4740  002378  C12C  F098         	movff	_GRVz+1,?_printf+9
  4741  00237C  C12D  F099         	movff	_GRVz+2,?_printf+10
  4742  002380  EC70  F000         	call	_printf	;wreg free
  4743                           
  4744                           ;BNO055.c: 311: Delay(50);
  4745  002384  0E00               	movlw	0
  4746  002386  6E1C               	movwf	Delay@wait+1,c
  4747  002388  0E32               	movlw	50
  4748  00238A  6E1B               	movwf	Delay@wait,c
  4749  00238C  EC47  F02B         	call	_Delay	;wreg free
  4750                           
  4751                           ;BNO055.c: 312: printf("rate = %f.1 Hz\n", sumCount/sum);
  4752  002390  0EE7               	movlw	low STR_48
  4753  002392  0100               	movlb	0	; () banked
  4754  002394  6F8F               	movwf	printf@f& (0+255),b
  4755  002396  0E7F               	movlw	high STR_48
  4756  002398  0100               	movlb	0	; () banked
  4757  00239A  6F90               	movwf	(printf@f+1)& (0+255),b
  4758  00239C  C121  F023         	movff	_sumCount,___altoft@c
  4759  0023A0  C122  F024         	movff	_sumCount+1,___altoft@c+1
  4760  0023A4  C123  F025         	movff	_sumCount+2,___altoft@c+2
  4761  0023A8  C124  F026         	movff	_sumCount+3,___altoft@c+3
  4762  0023AC  EC16  F029         	call	___altoft	;wreg free
  4763  0023B0  C023  F062         	movff	?___altoft,___ftdiv@f1
  4764  0023B4  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  4765  0023B8  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  4766  0023BC  C179  F065         	movff	_sum,___ftdiv@f2
  4767  0023C0  C17A  F066         	movff	_sum+1,___ftdiv@f2+1
  4768  0023C4  C17B  F067         	movff	_sum+2,___ftdiv@f2+2
  4769  0023C8  EC7E  F01E         	call	___ftdiv	;wreg free
  4770  0023CC  C062  F091         	movff	?___ftdiv,?_printf+2
  4771  0023D0  C063  F092         	movff	?___ftdiv+1,?_printf+3
  4772  0023D4  C064  F093         	movff	?___ftdiv+2,?_printf+4
  4773  0023D8  EC70  F000         	call	_printf	;wreg free
  4774                           
  4775                           ;BNO055.c: 313: }
  4776                           ;BNO055.c: 317: sumCount = 0;
  4777  0023DC  0E00               	movlw	0
  4778  0023DE  0101               	movlb	1	; () banked
  4779  0023E0  6F21               	movwf	_sumCount& (0+255),b
  4780  0023E2  0E00               	movlw	0
  4781  0023E4  6F22               	movwf	(_sumCount+1)& (0+255),b
  4782  0023E6  0E00               	movlw	0
  4783  0023E8  6F23               	movwf	(_sumCount+2)& (0+255),b
  4784  0023EA  0E00               	movlw	0
  4785  0023EC  6F24               	movwf	(_sumCount+3)& (0+255),b
  4786                           
  4787                           ; BSR set to: 1
  4788                           ;BNO055.c: 318: sum = 0;
  4789  0023EE  0E00               	movlw	0
  4790  0023F0  0101               	movlb	1	; () banked
  4791  0023F2  6F79               	movwf	_sum& (0+255),b
  4792  0023F4  0E00               	movlw	0
  4793  0023F6  0101               	movlb	1	; () banked
  4794  0023F8  6F7A               	movwf	(_sum+1)& (0+255),b
  4795  0023FA  0E00               	movlw	0
  4796  0023FC  0101               	movlb	1	; () banked
  4797  0023FE  6F7B               	movwf	(_sum+2)& (0+255),b
  4798  002400  0012               	return	
  4799  002402                     __end_of_loop:
  4800                           	opt stack 0
  4801                           tblptru	equ	0xFF8
  4802                           tblptrh	equ	0xFF7
  4803                           tblptrl	equ	0xFF6
  4804                           tablat	equ	0xFF5
  4805                           intcon	equ	0xFF2
  4806                           postinc0	equ	0xFEE
  4807                           wreg	equ	0xFE8
  4808                           postdec1	equ	0xFE5
  4809                           fsr1l	equ	0xFE1
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _readQuatData *****************
  4813 ;; Defined at:
  4814 ;;		line 356 in file "BNO055.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;  destination     2   10[BANK0 ] PTR int 
  4817 ;;		 -> quatCount(8), 
  4818 ;; Auto vars:     Size  Location     Type
  4819 ;;  rawData         8   14[BANK0 ] unsigned char [8]
  4820 ;; Return value:  Size  Location     Type
  4821 ;;                  1    wreg      void 
  4822 ;; Registers used:
  4823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4824 ;; Tracked objects:
  4825 ;;		On entry : 0/0
  4826 ;;		On exit  : 0/0
  4827 ;;		Unchanged: 0/0
  4828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4829 ;;      Params:         0       2       0       0       0       0       0
  4830 ;;      Locals:         0       8       0       0       0       0       0
  4831 ;;      Temps:          0       2       0       0       0       0       0
  4832 ;;      Totals:         0      12       0       0       0       0       0
  4833 ;;Total ram usage:       12 bytes
  4834 ;; Hardware stack levels used:    1
  4835 ;; Hardware stack levels required when called:    7
  4836 ;; This function calls:
  4837 ;;		_readBytes
  4838 ;; This function is called by:
  4839 ;;		_loop
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text2
  4844  00453C                     __ptext2:
  4845                           	opt stack 0
  4846  00453C                     _readQuatData:
  4847                           	opt stack 22
  4848                           
  4849                           ;BNO055.c: 357: char rawData[8];
  4850                           ;BNO055.c: 358: readBytes(0x29, 0x20, 8, &rawData[0]);
  4851                           
  4852                           ; BSR set to: 1
  4853                           ;incstack = 0
  4854  00453C  0E20               	movlw	32
  4855  00453E  0100               	movlb	0	; () banked
  4856  004540  6F60               	movwf	readBytes@subAddress& (0+255),b
  4857  004542  0E08               	movlw	8
  4858  004544  0100               	movlb	0	; () banked
  4859  004546  6F61               	movwf	readBytes@count& (0+255),b
  4860  004548  0E6E               	movlw	low readQuatData@rawData
  4861  00454A  0100               	movlb	0	; () banked
  4862  00454C  6F62               	movwf	readBytes@dest& (0+255),b
  4863  00454E  0E00               	movlw	high readQuatData@rawData
  4864  004550  0100               	movlb	0	; () banked
  4865  004552  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  4866  004554  0E29               	movlw	41
  4867  004556  EC62  F027         	call	_readBytes
  4868                           
  4869                           ;BNO055.c: 359: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  4870  00455A  0100               	movlb	0	; () banked
  4871  00455C  516E               	movf	readQuatData@rawData& (0+255),w,b
  4872  00455E  C06F  F06C         	movff	readQuatData@rawData+1,??_readQuatData
  4873  004562  0100               	movlb	0	; () banked
  4874  004564  6B6D               	clrf	(??_readQuatData+1)& (0+255),b
  4875  004566  C06C  F06D         	movff	??_readQuatData,??_readQuatData+1
  4876  00456A  0100               	movlb	0	; () banked
  4877  00456C  6B6C               	clrf	??_readQuatData& (0+255),b
  4878  00456E  0100               	movlb	0	; () banked
  4879  004570  136C               	iorwf	??_readQuatData& (0+255),f,b
  4880  004572  0E00               	movlw	0
  4881  004574  136D               	iorwf	(??_readQuatData+1)& (0+255),f,b
  4882  004576  C06A  FFD9         	movff	readQuatData@destination,fsr2l
  4883  00457A  C06B  FFDA         	movff	readQuatData@destination+1,fsr2h
  4884  00457E  C06C  FFDE         	movff	??_readQuatData,postinc2
  4885  004582  C06D  FFDD         	movff	??_readQuatData+1,postdec2
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;BNO055.c: 360: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  4889  004586  0100               	movlb	0	; () banked
  4890  004588  5170               	movf	(readQuatData@rawData+2)& (0+255),w,b
  4891  00458A  C071  F06C         	movff	readQuatData@rawData+3,??_readQuatData
  4892  00458E  0100               	movlb	0	; () banked
  4893  004590  6B6D               	clrf	(??_readQuatData+1)& (0+255),b
  4894  004592  C06C  F06D         	movff	??_readQuatData,??_readQuatData+1
  4895  004596  0100               	movlb	0	; () banked
  4896  004598  6B6C               	clrf	??_readQuatData& (0+255),b
  4897  00459A  0100               	movlb	0	; () banked
  4898  00459C  136C               	iorwf	??_readQuatData& (0+255),f,b
  4899  00459E  0E00               	movlw	0
  4900  0045A0  136D               	iorwf	(??_readQuatData+1)& (0+255),f,b
  4901  0045A2  0100               	movlb	0	; () banked
  4902  0045A4  EE20 F002          	lfsr	2,2
  4903  0045A8  516A               	movf	readQuatData@destination& (0+255),w,b
  4904  0045AA  26D9               	addwf	fsr2l,f,c
  4905  0045AC  516B               	movf	(readQuatData@destination+1)& (0+255),w,b
  4906  0045AE  22DA               	addwfc	fsr2h,f,c
  4907  0045B0  C06C  FFDE         	movff	??_readQuatData,postinc2
  4908  0045B4  C06D  FFDD         	movff	??_readQuatData+1,postdec2
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;BNO055.c: 361: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  4912  0045B8  0100               	movlb	0	; () banked
  4913  0045BA  5172               	movf	(readQuatData@rawData+4)& (0+255),w,b
  4914  0045BC  C073  F06C         	movff	readQuatData@rawData+5,??_readQuatData
  4915  0045C0  0100               	movlb	0	; () banked
  4916  0045C2  6B6D               	clrf	(??_readQuatData+1)& (0+255),b
  4917  0045C4  C06C  F06D         	movff	??_readQuatData,??_readQuatData+1
  4918  0045C8  0100               	movlb	0	; () banked
  4919  0045CA  6B6C               	clrf	??_readQuatData& (0+255),b
  4920  0045CC  0100               	movlb	0	; () banked
  4921  0045CE  136C               	iorwf	??_readQuatData& (0+255),f,b
  4922  0045D0  0E00               	movlw	0
  4923  0045D2  136D               	iorwf	(??_readQuatData+1)& (0+255),f,b
  4924  0045D4  0100               	movlb	0	; () banked
  4925  0045D6  EE20 F004          	lfsr	2,4
  4926  0045DA  516A               	movf	readQuatData@destination& (0+255),w,b
  4927  0045DC  26D9               	addwf	fsr2l,f,c
  4928  0045DE  516B               	movf	(readQuatData@destination+1)& (0+255),w,b
  4929  0045E0  22DA               	addwfc	fsr2h,f,c
  4930  0045E2  C06C  FFDE         	movff	??_readQuatData,postinc2
  4931  0045E6  C06D  FFDD         	movff	??_readQuatData+1,postdec2
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;BNO055.c: 362: destination[3] = ((int)rawData[7] << 8) | rawData[6] ;
  4935  0045EA  0100               	movlb	0	; () banked
  4936  0045EC  5174               	movf	(readQuatData@rawData+6)& (0+255),w,b
  4937  0045EE  C075  F06C         	movff	readQuatData@rawData+7,??_readQuatData
  4938  0045F2  0100               	movlb	0	; () banked
  4939  0045F4  6B6D               	clrf	(??_readQuatData+1)& (0+255),b
  4940  0045F6  C06C  F06D         	movff	??_readQuatData,??_readQuatData+1
  4941  0045FA  0100               	movlb	0	; () banked
  4942  0045FC  6B6C               	clrf	??_readQuatData& (0+255),b
  4943  0045FE  0100               	movlb	0	; () banked
  4944  004600  136C               	iorwf	??_readQuatData& (0+255),f,b
  4945  004602  0E00               	movlw	0
  4946  004604  136D               	iorwf	(??_readQuatData+1)& (0+255),f,b
  4947  004606  0100               	movlb	0	; () banked
  4948  004608  EE20 F006          	lfsr	2,6
  4949  00460C  516A               	movf	readQuatData@destination& (0+255),w,b
  4950  00460E  26D9               	addwf	fsr2l,f,c
  4951  004610  516B               	movf	(readQuatData@destination+1)& (0+255),w,b
  4952  004612  22DA               	addwfc	fsr2h,f,c
  4953  004614  C06C  FFDE         	movff	??_readQuatData,postinc2
  4954  004618  C06D  FFDD         	movff	??_readQuatData+1,postdec2
  4955                           
  4956                           ; BSR set to: 0
  4957  00461C  0012               	return		;funcret
  4958  00461E                     __end_of_readQuatData:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           intcon	equ	0xFF2
  4965                           postinc0	equ	0xFEE
  4966                           wreg	equ	0xFE8
  4967                           postdec1	equ	0xFE5
  4968                           fsr1l	equ	0xFE1
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _readMagData *****************
  4976 ;; Defined at:
  4977 ;;		line 348 in file "BNO055.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;  destination     2   10[BANK0 ] PTR int 
  4980 ;;		 -> magCount(6), 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  rawData         6   14[BANK0 ] unsigned char [6]
  4983 ;; Return value:  Size  Location     Type
  4984 ;;                  1    wreg      void 
  4985 ;; Registers used:
  4986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4992 ;;      Params:         0       2       0       0       0       0       0
  4993 ;;      Locals:         0       6       0       0       0       0       0
  4994 ;;      Temps:          0       2       0       0       0       0       0
  4995 ;;      Totals:         0      10       0       0       0       0       0
  4996 ;;Total ram usage:       10 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    7
  4999 ;; This function calls:
  5000 ;;		_readBytes
  5001 ;; This function is called by:
  5002 ;;		_loop
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text3
  5007  004948                     __ptext3:
  5008                           	opt stack 0
  5009  004948                     _readMagData:
  5010                           	opt stack 22
  5011                           
  5012                           ;BNO055.c: 349: char rawData[6];
  5013                           ;BNO055.c: 350: readBytes(0x29, 0x0E, 6, &rawData[0]);
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;incstack = 0
  5017  004948  0E0E               	movlw	14
  5018  00494A  0100               	movlb	0	; () banked
  5019  00494C  6F60               	movwf	readBytes@subAddress& (0+255),b
  5020  00494E  0E06               	movlw	6
  5021  004950  0100               	movlb	0	; () banked
  5022  004952  6F61               	movwf	readBytes@count& (0+255),b
  5023  004954  0E6E               	movlw	low readMagData@rawData
  5024  004956  0100               	movlb	0	; () banked
  5025  004958  6F62               	movwf	readBytes@dest& (0+255),b
  5026  00495A  0E00               	movlw	high readMagData@rawData
  5027  00495C  0100               	movlb	0	; () banked
  5028  00495E  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  5029  004960  0E29               	movlw	41
  5030  004962  EC62  F027         	call	_readBytes
  5031                           
  5032                           ;BNO055.c: 351: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  5033  004966  0100               	movlb	0	; () banked
  5034  004968  516E               	movf	readMagData@rawData& (0+255),w,b
  5035  00496A  C06F  F06C         	movff	readMagData@rawData+1,??_readMagData
  5036  00496E  0100               	movlb	0	; () banked
  5037  004970  6B6D               	clrf	(??_readMagData+1)& (0+255),b
  5038  004972  C06C  F06D         	movff	??_readMagData,??_readMagData+1
  5039  004976  0100               	movlb	0	; () banked
  5040  004978  6B6C               	clrf	??_readMagData& (0+255),b
  5041  00497A  0100               	movlb	0	; () banked
  5042  00497C  136C               	iorwf	??_readMagData& (0+255),f,b
  5043  00497E  0E00               	movlw	0
  5044  004980  136D               	iorwf	(??_readMagData+1)& (0+255),f,b
  5045  004982  C06A  FFD9         	movff	readMagData@destination,fsr2l
  5046  004986  C06B  FFDA         	movff	readMagData@destination+1,fsr2h
  5047  00498A  C06C  FFDE         	movff	??_readMagData,postinc2
  5048  00498E  C06D  FFDD         	movff	??_readMagData+1,postdec2
  5049                           
  5050                           ; BSR set to: 0
  5051                           ;BNO055.c: 352: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  5052  004992  0100               	movlb	0	; () banked
  5053  004994  5170               	movf	(readMagData@rawData+2)& (0+255),w,b
  5054  004996  C071  F06C         	movff	readMagData@rawData+3,??_readMagData
  5055  00499A  0100               	movlb	0	; () banked
  5056  00499C  6B6D               	clrf	(??_readMagData+1)& (0+255),b
  5057  00499E  C06C  F06D         	movff	??_readMagData,??_readMagData+1
  5058  0049A2  0100               	movlb	0	; () banked
  5059  0049A4  6B6C               	clrf	??_readMagData& (0+255),b
  5060  0049A6  0100               	movlb	0	; () banked
  5061  0049A8  136C               	iorwf	??_readMagData& (0+255),f,b
  5062  0049AA  0E00               	movlw	0
  5063  0049AC  136D               	iorwf	(??_readMagData+1)& (0+255),f,b
  5064  0049AE  0100               	movlb	0	; () banked
  5065  0049B0  EE20 F002          	lfsr	2,2
  5066  0049B4  516A               	movf	readMagData@destination& (0+255),w,b
  5067  0049B6  26D9               	addwf	fsr2l,f,c
  5068  0049B8  516B               	movf	(readMagData@destination+1)& (0+255),w,b
  5069  0049BA  22DA               	addwfc	fsr2h,f,c
  5070  0049BC  C06C  FFDE         	movff	??_readMagData,postinc2
  5071  0049C0  C06D  FFDD         	movff	??_readMagData+1,postdec2
  5072                           
  5073                           ; BSR set to: 0
  5074                           ;BNO055.c: 353: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  5075  0049C4  0100               	movlb	0	; () banked
  5076  0049C6  5172               	movf	(readMagData@rawData+4)& (0+255),w,b
  5077  0049C8  C073  F06C         	movff	readMagData@rawData+5,??_readMagData
  5078  0049CC  0100               	movlb	0	; () banked
  5079  0049CE  6B6D               	clrf	(??_readMagData+1)& (0+255),b
  5080  0049D0  C06C  F06D         	movff	??_readMagData,??_readMagData+1
  5081  0049D4  0100               	movlb	0	; () banked
  5082  0049D6  6B6C               	clrf	??_readMagData& (0+255),b
  5083  0049D8  0100               	movlb	0	; () banked
  5084  0049DA  136C               	iorwf	??_readMagData& (0+255),f,b
  5085  0049DC  0E00               	movlw	0
  5086  0049DE  136D               	iorwf	(??_readMagData+1)& (0+255),f,b
  5087  0049E0  0100               	movlb	0	; () banked
  5088  0049E2  EE20 F004          	lfsr	2,4
  5089  0049E6  516A               	movf	readMagData@destination& (0+255),w,b
  5090  0049E8  26D9               	addwf	fsr2l,f,c
  5091  0049EA  516B               	movf	(readMagData@destination+1)& (0+255),w,b
  5092  0049EC  22DA               	addwfc	fsr2h,f,c
  5093  0049EE  C06C  FFDE         	movff	??_readMagData,postinc2
  5094  0049F2  C06D  FFDD         	movff	??_readMagData+1,postdec2
  5095                           
  5096                           ; BSR set to: 0
  5097  0049F6  0012               	return		;funcret
  5098  0049F8                     __end_of_readMagData:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           intcon	equ	0xFF2
  5105                           postinc0	equ	0xFEE
  5106                           wreg	equ	0xFE8
  5107                           postdec1	equ	0xFE5
  5108                           fsr1l	equ	0xFE1
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _readLIAData *****************
  5116 ;; Defined at:
  5117 ;;		line 373 in file "BNO055.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  destination     2   10[BANK0 ] PTR int 
  5120 ;;		 -> LIACount(6), 
  5121 ;; Auto vars:     Size  Location     Type
  5122 ;;  rawData         6   14[BANK0 ] unsigned char [6]
  5123 ;; Return value:  Size  Location     Type
  5124 ;;                  1    wreg      void 
  5125 ;; Registers used:
  5126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5132 ;;      Params:         0       2       0       0       0       0       0
  5133 ;;      Locals:         0       6       0       0       0       0       0
  5134 ;;      Temps:          0       2       0       0       0       0       0
  5135 ;;      Totals:         0      10       0       0       0       0       0
  5136 ;;Total ram usage:       10 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    7
  5139 ;; This function calls:
  5140 ;;		_readBytes
  5141 ;; This function is called by:
  5142 ;;		_loop
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text4
  5147  0049F8                     __ptext4:
  5148                           	opt stack 0
  5149  0049F8                     _readLIAData:
  5150                           	opt stack 22
  5151                           
  5152                           ;BNO055.c: 374: char rawData[6];
  5153                           ;BNO055.c: 375: readBytes(0x29, 0x28, 6, &rawData[0]);
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;incstack = 0
  5157  0049F8  0E28               	movlw	40
  5158  0049FA  0100               	movlb	0	; () banked
  5159  0049FC  6F60               	movwf	readBytes@subAddress& (0+255),b
  5160  0049FE  0E06               	movlw	6
  5161  004A00  0100               	movlb	0	; () banked
  5162  004A02  6F61               	movwf	readBytes@count& (0+255),b
  5163  004A04  0E6E               	movlw	low readLIAData@rawData
  5164  004A06  0100               	movlb	0	; () banked
  5165  004A08  6F62               	movwf	readBytes@dest& (0+255),b
  5166  004A0A  0E00               	movlw	high readLIAData@rawData
  5167  004A0C  0100               	movlb	0	; () banked
  5168  004A0E  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  5169  004A10  0E29               	movlw	41
  5170  004A12  EC62  F027         	call	_readBytes
  5171                           
  5172                           ;BNO055.c: 376: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  5173  004A16  0100               	movlb	0	; () banked
  5174  004A18  516E               	movf	readLIAData@rawData& (0+255),w,b
  5175  004A1A  C06F  F06C         	movff	readLIAData@rawData+1,??_readLIAData
  5176  004A1E  0100               	movlb	0	; () banked
  5177  004A20  6B6D               	clrf	(??_readLIAData+1)& (0+255),b
  5178  004A22  C06C  F06D         	movff	??_readLIAData,??_readLIAData+1
  5179  004A26  0100               	movlb	0	; () banked
  5180  004A28  6B6C               	clrf	??_readLIAData& (0+255),b
  5181  004A2A  0100               	movlb	0	; () banked
  5182  004A2C  136C               	iorwf	??_readLIAData& (0+255),f,b
  5183  004A2E  0E00               	movlw	0
  5184  004A30  136D               	iorwf	(??_readLIAData+1)& (0+255),f,b
  5185  004A32  C06A  FFD9         	movff	readLIAData@destination,fsr2l
  5186  004A36  C06B  FFDA         	movff	readLIAData@destination+1,fsr2h
  5187  004A3A  C06C  FFDE         	movff	??_readLIAData,postinc2
  5188  004A3E  C06D  FFDD         	movff	??_readLIAData+1,postdec2
  5189                           
  5190                           ; BSR set to: 0
  5191                           ;BNO055.c: 377: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  5192  004A42  0100               	movlb	0	; () banked
  5193  004A44  5170               	movf	(readLIAData@rawData+2)& (0+255),w,b
  5194  004A46  C071  F06C         	movff	readLIAData@rawData+3,??_readLIAData
  5195  004A4A  0100               	movlb	0	; () banked
  5196  004A4C  6B6D               	clrf	(??_readLIAData+1)& (0+255),b
  5197  004A4E  C06C  F06D         	movff	??_readLIAData,??_readLIAData+1
  5198  004A52  0100               	movlb	0	; () banked
  5199  004A54  6B6C               	clrf	??_readLIAData& (0+255),b
  5200  004A56  0100               	movlb	0	; () banked
  5201  004A58  136C               	iorwf	??_readLIAData& (0+255),f,b
  5202  004A5A  0E00               	movlw	0
  5203  004A5C  136D               	iorwf	(??_readLIAData+1)& (0+255),f,b
  5204  004A5E  0100               	movlb	0	; () banked
  5205  004A60  EE20 F002          	lfsr	2,2
  5206  004A64  516A               	movf	readLIAData@destination& (0+255),w,b
  5207  004A66  26D9               	addwf	fsr2l,f,c
  5208  004A68  516B               	movf	(readLIAData@destination+1)& (0+255),w,b
  5209  004A6A  22DA               	addwfc	fsr2h,f,c
  5210  004A6C  C06C  FFDE         	movff	??_readLIAData,postinc2
  5211  004A70  C06D  FFDD         	movff	??_readLIAData+1,postdec2
  5212                           
  5213                           ; BSR set to: 0
  5214                           ;BNO055.c: 378: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  5215  004A74  0100               	movlb	0	; () banked
  5216  004A76  5172               	movf	(readLIAData@rawData+4)& (0+255),w,b
  5217  004A78  C073  F06C         	movff	readLIAData@rawData+5,??_readLIAData
  5218  004A7C  0100               	movlb	0	; () banked
  5219  004A7E  6B6D               	clrf	(??_readLIAData+1)& (0+255),b
  5220  004A80  C06C  F06D         	movff	??_readLIAData,??_readLIAData+1
  5221  004A84  0100               	movlb	0	; () banked
  5222  004A86  6B6C               	clrf	??_readLIAData& (0+255),b
  5223  004A88  0100               	movlb	0	; () banked
  5224  004A8A  136C               	iorwf	??_readLIAData& (0+255),f,b
  5225  004A8C  0E00               	movlw	0
  5226  004A8E  136D               	iorwf	(??_readLIAData+1)& (0+255),f,b
  5227  004A90  0100               	movlb	0	; () banked
  5228  004A92  EE20 F004          	lfsr	2,4
  5229  004A96  516A               	movf	readLIAData@destination& (0+255),w,b
  5230  004A98  26D9               	addwf	fsr2l,f,c
  5231  004A9A  516B               	movf	(readLIAData@destination+1)& (0+255),w,b
  5232  004A9C  22DA               	addwfc	fsr2h,f,c
  5233  004A9E  C06C  FFDE         	movff	??_readLIAData,postinc2
  5234  004AA2  C06D  FFDD         	movff	??_readLIAData+1,postdec2
  5235                           
  5236                           ; BSR set to: 0
  5237  004AA6  0012               	return		;funcret
  5238  004AA8                     __end_of_readLIAData:
  5239                           	opt stack 0
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           intcon	equ	0xFF2
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           postdec1	equ	0xFE5
  5248                           fsr1l	equ	0xFE1
  5249                           postinc2	equ	0xFDE
  5250                           postdec2	equ	0xFDD
  5251                           fsr2h	equ	0xFDA
  5252                           fsr2l	equ	0xFD9
  5253                           status	equ	0xFD8
  5254                           
  5255 ;; *************** function _readGyroTempData *****************
  5256 ;; Defined at:
  5257 ;;		line 344 in file "BNO055.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;                  1    wreg      unsigned char 
  5264 ;; Registers used:
  5265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5271 ;;      Params:         0       0       0       0       0       0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0
  5273 ;;      Temps:          0       0       0       0       0       0       0
  5274 ;;      Totals:         0       0       0       0       0       0       0
  5275 ;;Total ram usage:        0 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    7
  5278 ;; This function calls:
  5279 ;;		_readByte
  5280 ;; This function is called by:
  5281 ;;		_loop
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           	psect	text5
  5286  00590A                     __ptext5:
  5287                           	opt stack 0
  5288  00590A                     _readGyroTempData:
  5289                           	opt stack 22
  5290                           
  5291                           ;BNO055.c: 345: return readByte(0x29, 0x34);
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;incstack = 0
  5295  00590A  0E34               	movlw	52
  5296  00590C  0100               	movlb	0	; () banked
  5297  00590E  6F60               	movwf	readByte@subAddress& (0+255),b
  5298  005910  0E29               	movlw	41
  5299  005912  ECB4  F026         	call	_readByte
  5300  005916  0012               	return	
  5301  005918                     __end_of_readGyroTempData:
  5302                           	opt stack 0
  5303                           tblptru	equ	0xFF8
  5304                           tblptrh	equ	0xFF7
  5305                           tblptrl	equ	0xFF6
  5306                           tablat	equ	0xFF5
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1l	equ	0xFE1
  5312                           postinc2	equ	0xFDE
  5313                           postdec2	equ	0xFDD
  5314                           fsr2h	equ	0xFDA
  5315                           fsr2l	equ	0xFD9
  5316                           status	equ	0xFD8
  5317                           
  5318 ;; *************** function _readGyroData *****************
  5319 ;; Defined at:
  5320 ;;		line 336 in file "BNO055.c"
  5321 ;; Parameters:    Size  Location     Type
  5322 ;;  destination     2   10[BANK0 ] PTR int 
  5323 ;;		 -> gyroCount(6), 
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  rawData         6   14[BANK0 ] unsigned char [6]
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  1    wreg      void 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5330 ;; Tracked objects:
  5331 ;;		On entry : 0/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5335 ;;      Params:         0       2       0       0       0       0       0
  5336 ;;      Locals:         0       6       0       0       0       0       0
  5337 ;;      Temps:          0       2       0       0       0       0       0
  5338 ;;      Totals:         0      10       0       0       0       0       0
  5339 ;;Total ram usage:       10 bytes
  5340 ;; Hardware stack levels used:    1
  5341 ;; Hardware stack levels required when called:    7
  5342 ;; This function calls:
  5343 ;;		_readBytes
  5344 ;; This function is called by:
  5345 ;;		_loop
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text6
  5350  004AA8                     __ptext6:
  5351                           	opt stack 0
  5352  004AA8                     _readGyroData:
  5353                           	opt stack 22
  5354                           
  5355                           ;BNO055.c: 337: char rawData[6];
  5356                           ;BNO055.c: 338: readBytes(0x29, 0x14, 6, &rawData[0]);
  5357                           
  5358                           ;incstack = 0
  5359  004AA8  0E14               	movlw	20
  5360  004AAA  0100               	movlb	0	; () banked
  5361  004AAC  6F60               	movwf	readBytes@subAddress& (0+255),b
  5362  004AAE  0E06               	movlw	6
  5363  004AB0  0100               	movlb	0	; () banked
  5364  004AB2  6F61               	movwf	readBytes@count& (0+255),b
  5365  004AB4  0E6E               	movlw	low readGyroData@rawData
  5366  004AB6  0100               	movlb	0	; () banked
  5367  004AB8  6F62               	movwf	readBytes@dest& (0+255),b
  5368  004ABA  0E00               	movlw	high readGyroData@rawData
  5369  004ABC  0100               	movlb	0	; () banked
  5370  004ABE  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  5371  004AC0  0E29               	movlw	41
  5372  004AC2  EC62  F027         	call	_readBytes
  5373                           
  5374                           ;BNO055.c: 339: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  5375  004AC6  0100               	movlb	0	; () banked
  5376  004AC8  516E               	movf	readGyroData@rawData& (0+255),w,b
  5377  004ACA  C06F  F06C         	movff	readGyroData@rawData+1,??_readGyroData
  5378  004ACE  0100               	movlb	0	; () banked
  5379  004AD0  6B6D               	clrf	(??_readGyroData+1)& (0+255),b
  5380  004AD2  C06C  F06D         	movff	??_readGyroData,??_readGyroData+1
  5381  004AD6  0100               	movlb	0	; () banked
  5382  004AD8  6B6C               	clrf	??_readGyroData& (0+255),b
  5383  004ADA  0100               	movlb	0	; () banked
  5384  004ADC  136C               	iorwf	??_readGyroData& (0+255),f,b
  5385  004ADE  0E00               	movlw	0
  5386  004AE0  136D               	iorwf	(??_readGyroData+1)& (0+255),f,b
  5387  004AE2  C06A  FFD9         	movff	readGyroData@destination,fsr2l
  5388  004AE6  C06B  FFDA         	movff	readGyroData@destination+1,fsr2h
  5389  004AEA  C06C  FFDE         	movff	??_readGyroData,postinc2
  5390  004AEE  C06D  FFDD         	movff	??_readGyroData+1,postdec2
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;BNO055.c: 340: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  5394  004AF2  0100               	movlb	0	; () banked
  5395  004AF4  5170               	movf	(readGyroData@rawData+2)& (0+255),w,b
  5396  004AF6  C071  F06C         	movff	readGyroData@rawData+3,??_readGyroData
  5397  004AFA  0100               	movlb	0	; () banked
  5398  004AFC  6B6D               	clrf	(??_readGyroData+1)& (0+255),b
  5399  004AFE  C06C  F06D         	movff	??_readGyroData,??_readGyroData+1
  5400  004B02  0100               	movlb	0	; () banked
  5401  004B04  6B6C               	clrf	??_readGyroData& (0+255),b
  5402  004B06  0100               	movlb	0	; () banked
  5403  004B08  136C               	iorwf	??_readGyroData& (0+255),f,b
  5404  004B0A  0E00               	movlw	0
  5405  004B0C  136D               	iorwf	(??_readGyroData+1)& (0+255),f,b
  5406  004B0E  0100               	movlb	0	; () banked
  5407  004B10  EE20 F002          	lfsr	2,2
  5408  004B14  516A               	movf	readGyroData@destination& (0+255),w,b
  5409  004B16  26D9               	addwf	fsr2l,f,c
  5410  004B18  516B               	movf	(readGyroData@destination+1)& (0+255),w,b
  5411  004B1A  22DA               	addwfc	fsr2h,f,c
  5412  004B1C  C06C  FFDE         	movff	??_readGyroData,postinc2
  5413  004B20  C06D  FFDD         	movff	??_readGyroData+1,postdec2
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;BNO055.c: 341: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  5417  004B24  0100               	movlb	0	; () banked
  5418  004B26  5172               	movf	(readGyroData@rawData+4)& (0+255),w,b
  5419  004B28  C073  F06C         	movff	readGyroData@rawData+5,??_readGyroData
  5420  004B2C  0100               	movlb	0	; () banked
  5421  004B2E  6B6D               	clrf	(??_readGyroData+1)& (0+255),b
  5422  004B30  C06C  F06D         	movff	??_readGyroData,??_readGyroData+1
  5423  004B34  0100               	movlb	0	; () banked
  5424  004B36  6B6C               	clrf	??_readGyroData& (0+255),b
  5425  004B38  0100               	movlb	0	; () banked
  5426  004B3A  136C               	iorwf	??_readGyroData& (0+255),f,b
  5427  004B3C  0E00               	movlw	0
  5428  004B3E  136D               	iorwf	(??_readGyroData+1)& (0+255),f,b
  5429  004B40  0100               	movlb	0	; () banked
  5430  004B42  EE20 F004          	lfsr	2,4
  5431  004B46  516A               	movf	readGyroData@destination& (0+255),w,b
  5432  004B48  26D9               	addwf	fsr2l,f,c
  5433  004B4A  516B               	movf	(readGyroData@destination+1)& (0+255),w,b
  5434  004B4C  22DA               	addwfc	fsr2h,f,c
  5435  004B4E  C06C  FFDE         	movff	??_readGyroData,postinc2
  5436  004B52  C06D  FFDD         	movff	??_readGyroData+1,postdec2
  5437                           
  5438                           ; BSR set to: 0
  5439  004B56  0012               	return		;funcret
  5440  004B58                     __end_of_readGyroData:
  5441                           	opt stack 0
  5442                           tblptru	equ	0xFF8
  5443                           tblptrh	equ	0xFF7
  5444                           tblptrl	equ	0xFF6
  5445                           tablat	equ	0xFF5
  5446                           intcon	equ	0xFF2
  5447                           postinc0	equ	0xFEE
  5448                           wreg	equ	0xFE8
  5449                           postdec1	equ	0xFE5
  5450                           fsr1l	equ	0xFE1
  5451                           postinc2	equ	0xFDE
  5452                           postdec2	equ	0xFDD
  5453                           fsr2h	equ	0xFDA
  5454                           fsr2l	equ	0xFD9
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function _readGRVData *****************
  5458 ;; Defined at:
  5459 ;;		line 381 in file "BNO055.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  destination     2   10[BANK0 ] PTR int 
  5462 ;;		 -> GRVCount(6), 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  rawData         6   14[BANK0 ] unsigned char [6]
  5465 ;; Return value:  Size  Location     Type
  5466 ;;                  1    wreg      void 
  5467 ;; Registers used:
  5468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5469 ;; Tracked objects:
  5470 ;;		On entry : 0/0
  5471 ;;		On exit  : 0/0
  5472 ;;		Unchanged: 0/0
  5473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5474 ;;      Params:         0       2       0       0       0       0       0
  5475 ;;      Locals:         0       6       0       0       0       0       0
  5476 ;;      Temps:          0       2       0       0       0       0       0
  5477 ;;      Totals:         0      10       0       0       0       0       0
  5478 ;;Total ram usage:       10 bytes
  5479 ;; Hardware stack levels used:    1
  5480 ;; Hardware stack levels required when called:    7
  5481 ;; This function calls:
  5482 ;;		_readBytes
  5483 ;; This function is called by:
  5484 ;;		_loop
  5485 ;; This function uses a non-reentrant model
  5486 ;;
  5487                           
  5488                           	psect	text7
  5489  004B58                     __ptext7:
  5490                           	opt stack 0
  5491  004B58                     _readGRVData:
  5492                           	opt stack 22
  5493                           
  5494                           ;BNO055.c: 382: char rawData[6];
  5495                           ;BNO055.c: 383: readBytes(0x29, 0x2E, 6, &rawData[0]);
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;incstack = 0
  5499  004B58  0E2E               	movlw	46
  5500  004B5A  0100               	movlb	0	; () banked
  5501  004B5C  6F60               	movwf	readBytes@subAddress& (0+255),b
  5502  004B5E  0E06               	movlw	6
  5503  004B60  0100               	movlb	0	; () banked
  5504  004B62  6F61               	movwf	readBytes@count& (0+255),b
  5505  004B64  0E6E               	movlw	low readGRVData@rawData
  5506  004B66  0100               	movlb	0	; () banked
  5507  004B68  6F62               	movwf	readBytes@dest& (0+255),b
  5508  004B6A  0E00               	movlw	high readGRVData@rawData
  5509  004B6C  0100               	movlb	0	; () banked
  5510  004B6E  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  5511  004B70  0E29               	movlw	41
  5512  004B72  EC62  F027         	call	_readBytes
  5513                           
  5514                           ;BNO055.c: 384: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  5515  004B76  0100               	movlb	0	; () banked
  5516  004B78  516E               	movf	readGRVData@rawData& (0+255),w,b
  5517  004B7A  C06F  F06C         	movff	readGRVData@rawData+1,??_readGRVData
  5518  004B7E  0100               	movlb	0	; () banked
  5519  004B80  6B6D               	clrf	(??_readGRVData+1)& (0+255),b
  5520  004B82  C06C  F06D         	movff	??_readGRVData,??_readGRVData+1
  5521  004B86  0100               	movlb	0	; () banked
  5522  004B88  6B6C               	clrf	??_readGRVData& (0+255),b
  5523  004B8A  0100               	movlb	0	; () banked
  5524  004B8C  136C               	iorwf	??_readGRVData& (0+255),f,b
  5525  004B8E  0E00               	movlw	0
  5526  004B90  136D               	iorwf	(??_readGRVData+1)& (0+255),f,b
  5527  004B92  C06A  FFD9         	movff	readGRVData@destination,fsr2l
  5528  004B96  C06B  FFDA         	movff	readGRVData@destination+1,fsr2h
  5529  004B9A  C06C  FFDE         	movff	??_readGRVData,postinc2
  5530  004B9E  C06D  FFDD         	movff	??_readGRVData+1,postdec2
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;BNO055.c: 385: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  5534  004BA2  0100               	movlb	0	; () banked
  5535  004BA4  5170               	movf	(readGRVData@rawData+2)& (0+255),w,b
  5536  004BA6  C071  F06C         	movff	readGRVData@rawData+3,??_readGRVData
  5537  004BAA  0100               	movlb	0	; () banked
  5538  004BAC  6B6D               	clrf	(??_readGRVData+1)& (0+255),b
  5539  004BAE  C06C  F06D         	movff	??_readGRVData,??_readGRVData+1
  5540  004BB2  0100               	movlb	0	; () banked
  5541  004BB4  6B6C               	clrf	??_readGRVData& (0+255),b
  5542  004BB6  0100               	movlb	0	; () banked
  5543  004BB8  136C               	iorwf	??_readGRVData& (0+255),f,b
  5544  004BBA  0E00               	movlw	0
  5545  004BBC  136D               	iorwf	(??_readGRVData+1)& (0+255),f,b
  5546  004BBE  0100               	movlb	0	; () banked
  5547  004BC0  EE20 F002          	lfsr	2,2
  5548  004BC4  516A               	movf	readGRVData@destination& (0+255),w,b
  5549  004BC6  26D9               	addwf	fsr2l,f,c
  5550  004BC8  516B               	movf	(readGRVData@destination+1)& (0+255),w,b
  5551  004BCA  22DA               	addwfc	fsr2h,f,c
  5552  004BCC  C06C  FFDE         	movff	??_readGRVData,postinc2
  5553  004BD0  C06D  FFDD         	movff	??_readGRVData+1,postdec2
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;BNO055.c: 386: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  5557  004BD4  0100               	movlb	0	; () banked
  5558  004BD6  5172               	movf	(readGRVData@rawData+4)& (0+255),w,b
  5559  004BD8  C073  F06C         	movff	readGRVData@rawData+5,??_readGRVData
  5560  004BDC  0100               	movlb	0	; () banked
  5561  004BDE  6B6D               	clrf	(??_readGRVData+1)& (0+255),b
  5562  004BE0  C06C  F06D         	movff	??_readGRVData,??_readGRVData+1
  5563  004BE4  0100               	movlb	0	; () banked
  5564  004BE6  6B6C               	clrf	??_readGRVData& (0+255),b
  5565  004BE8  0100               	movlb	0	; () banked
  5566  004BEA  136C               	iorwf	??_readGRVData& (0+255),f,b
  5567  004BEC  0E00               	movlw	0
  5568  004BEE  136D               	iorwf	(??_readGRVData+1)& (0+255),f,b
  5569  004BF0  0100               	movlb	0	; () banked
  5570  004BF2  EE20 F004          	lfsr	2,4
  5571  004BF6  516A               	movf	readGRVData@destination& (0+255),w,b
  5572  004BF8  26D9               	addwf	fsr2l,f,c
  5573  004BFA  516B               	movf	(readGRVData@destination+1)& (0+255),w,b
  5574  004BFC  22DA               	addwfc	fsr2h,f,c
  5575  004BFE  C06C  FFDE         	movff	??_readGRVData,postinc2
  5576  004C02  C06D  FFDD         	movff	??_readGRVData+1,postdec2
  5577                           
  5578                           ; BSR set to: 0
  5579  004C06  0012               	return		;funcret
  5580  004C08                     __end_of_readGRVData:
  5581                           	opt stack 0
  5582                           tblptru	equ	0xFF8
  5583                           tblptrh	equ	0xFF7
  5584                           tblptrl	equ	0xFF6
  5585                           tablat	equ	0xFF5
  5586                           intcon	equ	0xFF2
  5587                           postinc0	equ	0xFEE
  5588                           wreg	equ	0xFE8
  5589                           postdec1	equ	0xFE5
  5590                           fsr1l	equ	0xFE1
  5591                           postinc2	equ	0xFDE
  5592                           postdec2	equ	0xFDD
  5593                           fsr2h	equ	0xFDA
  5594                           fsr2l	equ	0xFD9
  5595                           status	equ	0xFD8
  5596                           
  5597 ;; *************** function _readEulData *****************
  5598 ;; Defined at:
  5599 ;;		line 365 in file "BNO055.c"
  5600 ;; Parameters:    Size  Location     Type
  5601 ;;  destination     2   10[BANK0 ] PTR int 
  5602 ;;		 -> EulCount(6), 
  5603 ;; Auto vars:     Size  Location     Type
  5604 ;;  rawData         6   14[BANK0 ] unsigned char [6]
  5605 ;; Return value:  Size  Location     Type
  5606 ;;                  1    wreg      void 
  5607 ;; Registers used:
  5608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5609 ;; Tracked objects:
  5610 ;;		On entry : 0/0
  5611 ;;		On exit  : 0/0
  5612 ;;		Unchanged: 0/0
  5613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5614 ;;      Params:         0       2       0       0       0       0       0
  5615 ;;      Locals:         0       6       0       0       0       0       0
  5616 ;;      Temps:          0       2       0       0       0       0       0
  5617 ;;      Totals:         0      10       0       0       0       0       0
  5618 ;;Total ram usage:       10 bytes
  5619 ;; Hardware stack levels used:    1
  5620 ;; Hardware stack levels required when called:    7
  5621 ;; This function calls:
  5622 ;;		_readBytes
  5623 ;; This function is called by:
  5624 ;;		_loop
  5625 ;; This function uses a non-reentrant model
  5626 ;;
  5627                           
  5628                           	psect	text8
  5629  004C08                     __ptext8:
  5630                           	opt stack 0
  5631  004C08                     _readEulData:
  5632                           	opt stack 22
  5633                           
  5634                           ;BNO055.c: 366: char rawData[6];
  5635                           ;BNO055.c: 367: readBytes(0x29, 0x1A, 6, &rawData[0]);
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;incstack = 0
  5639  004C08  0E1A               	movlw	26
  5640  004C0A  0100               	movlb	0	; () banked
  5641  004C0C  6F60               	movwf	readBytes@subAddress& (0+255),b
  5642  004C0E  0E06               	movlw	6
  5643  004C10  0100               	movlb	0	; () banked
  5644  004C12  6F61               	movwf	readBytes@count& (0+255),b
  5645  004C14  0E6E               	movlw	low readEulData@rawData
  5646  004C16  0100               	movlb	0	; () banked
  5647  004C18  6F62               	movwf	readBytes@dest& (0+255),b
  5648  004C1A  0E00               	movlw	high readEulData@rawData
  5649  004C1C  0100               	movlb	0	; () banked
  5650  004C1E  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  5651  004C20  0E29               	movlw	41
  5652  004C22  EC62  F027         	call	_readBytes
  5653                           
  5654                           ;BNO055.c: 368: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  5655  004C26  0100               	movlb	0	; () banked
  5656  004C28  516E               	movf	readEulData@rawData& (0+255),w,b
  5657  004C2A  C06F  F06C         	movff	readEulData@rawData+1,??_readEulData
  5658  004C2E  0100               	movlb	0	; () banked
  5659  004C30  6B6D               	clrf	(??_readEulData+1)& (0+255),b
  5660  004C32  C06C  F06D         	movff	??_readEulData,??_readEulData+1
  5661  004C36  0100               	movlb	0	; () banked
  5662  004C38  6B6C               	clrf	??_readEulData& (0+255),b
  5663  004C3A  0100               	movlb	0	; () banked
  5664  004C3C  136C               	iorwf	??_readEulData& (0+255),f,b
  5665  004C3E  0E00               	movlw	0
  5666  004C40  136D               	iorwf	(??_readEulData+1)& (0+255),f,b
  5667  004C42  C06A  FFD9         	movff	readEulData@destination,fsr2l
  5668  004C46  C06B  FFDA         	movff	readEulData@destination+1,fsr2h
  5669  004C4A  C06C  FFDE         	movff	??_readEulData,postinc2
  5670  004C4E  C06D  FFDD         	movff	??_readEulData+1,postdec2
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;BNO055.c: 369: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  5674  004C52  0100               	movlb	0	; () banked
  5675  004C54  5170               	movf	(readEulData@rawData+2)& (0+255),w,b
  5676  004C56  C071  F06C         	movff	readEulData@rawData+3,??_readEulData
  5677  004C5A  0100               	movlb	0	; () banked
  5678  004C5C  6B6D               	clrf	(??_readEulData+1)& (0+255),b
  5679  004C5E  C06C  F06D         	movff	??_readEulData,??_readEulData+1
  5680  004C62  0100               	movlb	0	; () banked
  5681  004C64  6B6C               	clrf	??_readEulData& (0+255),b
  5682  004C66  0100               	movlb	0	; () banked
  5683  004C68  136C               	iorwf	??_readEulData& (0+255),f,b
  5684  004C6A  0E00               	movlw	0
  5685  004C6C  136D               	iorwf	(??_readEulData+1)& (0+255),f,b
  5686  004C6E  0100               	movlb	0	; () banked
  5687  004C70  EE20 F002          	lfsr	2,2
  5688  004C74  516A               	movf	readEulData@destination& (0+255),w,b
  5689  004C76  26D9               	addwf	fsr2l,f,c
  5690  004C78  516B               	movf	(readEulData@destination+1)& (0+255),w,b
  5691  004C7A  22DA               	addwfc	fsr2h,f,c
  5692  004C7C  C06C  FFDE         	movff	??_readEulData,postinc2
  5693  004C80  C06D  FFDD         	movff	??_readEulData+1,postdec2
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;BNO055.c: 370: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  5697  004C84  0100               	movlb	0	; () banked
  5698  004C86  5172               	movf	(readEulData@rawData+4)& (0+255),w,b
  5699  004C88  C073  F06C         	movff	readEulData@rawData+5,??_readEulData
  5700  004C8C  0100               	movlb	0	; () banked
  5701  004C8E  6B6D               	clrf	(??_readEulData+1)& (0+255),b
  5702  004C90  C06C  F06D         	movff	??_readEulData,??_readEulData+1
  5703  004C94  0100               	movlb	0	; () banked
  5704  004C96  6B6C               	clrf	??_readEulData& (0+255),b
  5705  004C98  0100               	movlb	0	; () banked
  5706  004C9A  136C               	iorwf	??_readEulData& (0+255),f,b
  5707  004C9C  0E00               	movlw	0
  5708  004C9E  136D               	iorwf	(??_readEulData+1)& (0+255),f,b
  5709  004CA0  0100               	movlb	0	; () banked
  5710  004CA2  EE20 F004          	lfsr	2,4
  5711  004CA6  516A               	movf	readEulData@destination& (0+255),w,b
  5712  004CA8  26D9               	addwf	fsr2l,f,c
  5713  004CAA  516B               	movf	(readEulData@destination+1)& (0+255),w,b
  5714  004CAC  22DA               	addwfc	fsr2h,f,c
  5715  004CAE  C06C  FFDE         	movff	??_readEulData,postinc2
  5716  004CB2  C06D  FFDD         	movff	??_readEulData+1,postdec2
  5717                           
  5718                           ; BSR set to: 0
  5719  004CB6  0012               	return		;funcret
  5720  004CB8                     __end_of_readEulData:
  5721                           	opt stack 0
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           intcon	equ	0xFF2
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           postdec1	equ	0xFE5
  5730                           fsr1l	equ	0xFE1
  5731                           postinc2	equ	0xFDE
  5732                           postdec2	equ	0xFDD
  5733                           fsr2h	equ	0xFDA
  5734                           fsr2l	equ	0xFD9
  5735                           status	equ	0xFD8
  5736                           
  5737 ;; *************** function _readAccelData *****************
  5738 ;; Defined at:
  5739 ;;		line 327 in file "BNO055.c"
  5740 ;; Parameters:    Size  Location     Type
  5741 ;;  destination     2   10[BANK0 ] PTR int 
  5742 ;;		 -> accelCount(6), 
  5743 ;; Auto vars:     Size  Location     Type
  5744 ;;  rawData         6   14[BANK0 ] unsigned char [6]
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  1    wreg      void 
  5747 ;; Registers used:
  5748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5754 ;;      Params:         0       2       0       0       0       0       0
  5755 ;;      Locals:         0       6       0       0       0       0       0
  5756 ;;      Temps:          0       2       0       0       0       0       0
  5757 ;;      Totals:         0      10       0       0       0       0       0
  5758 ;;Total ram usage:       10 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    7
  5761 ;; This function calls:
  5762 ;;		_readBytes
  5763 ;; This function is called by:
  5764 ;;		_loop
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           	psect	text9
  5769  004CB8                     __ptext9:
  5770                           	opt stack 0
  5771  004CB8                     _readAccelData:
  5772                           	opt stack 22
  5773                           
  5774                           ;BNO055.c: 328: char rawData[6];
  5775                           ;BNO055.c: 329: readBytes(0x29, 0x08, 6, &rawData[0]);
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;incstack = 0
  5779  004CB8  0E08               	movlw	8
  5780  004CBA  0100               	movlb	0	; () banked
  5781  004CBC  6F60               	movwf	readBytes@subAddress& (0+255),b
  5782  004CBE  0E06               	movlw	6
  5783  004CC0  0100               	movlb	0	; () banked
  5784  004CC2  6F61               	movwf	readBytes@count& (0+255),b
  5785  004CC4  0E6E               	movlw	low readAccelData@rawData
  5786  004CC6  0100               	movlb	0	; () banked
  5787  004CC8  6F62               	movwf	readBytes@dest& (0+255),b
  5788  004CCA  0E00               	movlw	high readAccelData@rawData
  5789  004CCC  0100               	movlb	0	; () banked
  5790  004CCE  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  5791  004CD0  0E29               	movlw	41
  5792  004CD2  EC62  F027         	call	_readBytes
  5793                           
  5794                           ;BNO055.c: 330: destination[0] = ((int)rawData[1] << 8) | rawData[0] ;
  5795  004CD6  0100               	movlb	0	; () banked
  5796  004CD8  516E               	movf	readAccelData@rawData& (0+255),w,b
  5797  004CDA  C06F  F06C         	movff	readAccelData@rawData+1,??_readAccelData
  5798  004CDE  0100               	movlb	0	; () banked
  5799  004CE0  6B6D               	clrf	(??_readAccelData+1)& (0+255),b
  5800  004CE2  C06C  F06D         	movff	??_readAccelData,??_readAccelData+1
  5801  004CE6  0100               	movlb	0	; () banked
  5802  004CE8  6B6C               	clrf	??_readAccelData& (0+255),b
  5803  004CEA  0100               	movlb	0	; () banked
  5804  004CEC  136C               	iorwf	??_readAccelData& (0+255),f,b
  5805  004CEE  0E00               	movlw	0
  5806  004CF0  136D               	iorwf	(??_readAccelData+1)& (0+255),f,b
  5807  004CF2  C06A  FFD9         	movff	readAccelData@destination,fsr2l
  5808  004CF6  C06B  FFDA         	movff	readAccelData@destination+1,fsr2h
  5809  004CFA  C06C  FFDE         	movff	??_readAccelData,postinc2
  5810  004CFE  C06D  FFDD         	movff	??_readAccelData+1,postdec2
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;BNO055.c: 331: destination[1] = ((int)rawData[3] << 8) | rawData[2] ;
  5814  004D02  0100               	movlb	0	; () banked
  5815  004D04  5170               	movf	(readAccelData@rawData+2)& (0+255),w,b
  5816  004D06  C071  F06C         	movff	readAccelData@rawData+3,??_readAccelData
  5817  004D0A  0100               	movlb	0	; () banked
  5818  004D0C  6B6D               	clrf	(??_readAccelData+1)& (0+255),b
  5819  004D0E  C06C  F06D         	movff	??_readAccelData,??_readAccelData+1
  5820  004D12  0100               	movlb	0	; () banked
  5821  004D14  6B6C               	clrf	??_readAccelData& (0+255),b
  5822  004D16  0100               	movlb	0	; () banked
  5823  004D18  136C               	iorwf	??_readAccelData& (0+255),f,b
  5824  004D1A  0E00               	movlw	0
  5825  004D1C  136D               	iorwf	(??_readAccelData+1)& (0+255),f,b
  5826  004D1E  0100               	movlb	0	; () banked
  5827  004D20  EE20 F002          	lfsr	2,2
  5828  004D24  516A               	movf	readAccelData@destination& (0+255),w,b
  5829  004D26  26D9               	addwf	fsr2l,f,c
  5830  004D28  516B               	movf	(readAccelData@destination+1)& (0+255),w,b
  5831  004D2A  22DA               	addwfc	fsr2h,f,c
  5832  004D2C  C06C  FFDE         	movff	??_readAccelData,postinc2
  5833  004D30  C06D  FFDD         	movff	??_readAccelData+1,postdec2
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;BNO055.c: 332: destination[2] = ((int)rawData[5] << 8) | rawData[4] ;
  5837  004D34  0100               	movlb	0	; () banked
  5838  004D36  5172               	movf	(readAccelData@rawData+4)& (0+255),w,b
  5839  004D38  C073  F06C         	movff	readAccelData@rawData+5,??_readAccelData
  5840  004D3C  0100               	movlb	0	; () banked
  5841  004D3E  6B6D               	clrf	(??_readAccelData+1)& (0+255),b
  5842  004D40  C06C  F06D         	movff	??_readAccelData,??_readAccelData+1
  5843  004D44  0100               	movlb	0	; () banked
  5844  004D46  6B6C               	clrf	??_readAccelData& (0+255),b
  5845  004D48  0100               	movlb	0	; () banked
  5846  004D4A  136C               	iorwf	??_readAccelData& (0+255),f,b
  5847  004D4C  0E00               	movlw	0
  5848  004D4E  136D               	iorwf	(??_readAccelData+1)& (0+255),f,b
  5849  004D50  0100               	movlb	0	; () banked
  5850  004D52  EE20 F004          	lfsr	2,4
  5851  004D56  516A               	movf	readAccelData@destination& (0+255),w,b
  5852  004D58  26D9               	addwf	fsr2l,f,c
  5853  004D5A  516B               	movf	(readAccelData@destination+1)& (0+255),w,b
  5854  004D5C  22DA               	addwfc	fsr2h,f,c
  5855  004D5E  C06C  FFDE         	movff	??_readAccelData,postinc2
  5856  004D62  C06D  FFDD         	movff	??_readAccelData+1,postdec2
  5857                           
  5858                           ; BSR set to: 0
  5859  004D66  0012               	return		;funcret
  5860  004D68                     __end_of_readAccelData:
  5861                           	opt stack 0
  5862                           tblptru	equ	0xFF8
  5863                           tblptrh	equ	0xFF7
  5864                           tblptrl	equ	0xFF6
  5865                           tablat	equ	0xFF5
  5866                           intcon	equ	0xFF2
  5867                           postinc0	equ	0xFEE
  5868                           wreg	equ	0xFE8
  5869                           postdec1	equ	0xFE5
  5870                           fsr1l	equ	0xFE1
  5871                           postinc2	equ	0xFDE
  5872                           postdec2	equ	0xFDD
  5873                           fsr2h	equ	0xFDA
  5874                           fsr2l	equ	0xFD9
  5875                           status	equ	0xFD8
  5876                           
  5877 ;; *************** function ___awtoft *****************
  5878 ;; Defined at:
  5879 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  5880 ;; Parameters:    Size  Location     Type
  5881 ;;  c               2   34[COMRAM] int 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  sign            1   37[COMRAM] unsigned char 
  5884 ;; Return value:  Size  Location     Type
  5885 ;;                  3   34[COMRAM] float 
  5886 ;; Registers used:
  5887 ;;		wreg, status,2, status,0, cstack
  5888 ;; Tracked objects:
  5889 ;;		On entry : 0/0
  5890 ;;		On exit  : 0/0
  5891 ;;		Unchanged: 0/0
  5892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5893 ;;      Params:         3       0       0       0       0       0       0
  5894 ;;      Locals:         1       0       0       0       0       0       0
  5895 ;;      Temps:          0       0       0       0       0       0       0
  5896 ;;      Totals:         4       0       0       0       0       0       0
  5897 ;;Total ram usage:        4 bytes
  5898 ;; Hardware stack levels used:    1
  5899 ;; Hardware stack levels required when called:    5
  5900 ;; This function calls:
  5901 ;;		___ftpack
  5902 ;; This function is called by:
  5903 ;;		_loop
  5904 ;; This function uses a non-reentrant model
  5905 ;;
  5906                           
  5907                           	psect	text10
  5908  005656                     __ptext10:
  5909                           	opt stack 0
  5910  005656                     ___awtoft:
  5911                           	opt stack 24
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;incstack = 0
  5915  005656  0E00               	movlw	0
  5916  005658  6E26               	movwf	___awtoft@sign,c
  5917  00565A  AE24               	btfss	___awtoft@c+1,7,c
  5918  00565C  D006               	goto	l9727
  5919  00565E  6C23               	negf	___awtoft@c,c
  5920  005660  1E24               	comf	___awtoft@c+1,f,c
  5921  005662  B0D8               	btfsc	status,0,c
  5922  005664  2A24               	incf	___awtoft@c+1,f,c
  5923  005666  0E01               	movlw	1
  5924  005668  6E26               	movwf	___awtoft@sign,c
  5925  00566A                     l9727:
  5926  00566A  C023  F01B         	movff	___awtoft@c,___ftpack@arg
  5927  00566E  C024  F01C         	movff	___awtoft@c+1,___ftpack@arg+1
  5928  005672  6A1D               	clrf	___ftpack@arg+2,c
  5929  005674  0E8E               	movlw	142
  5930  005676  6E1E               	movwf	___ftpack@exp,c
  5931  005678  C026  F01F         	movff	___awtoft@sign,___ftpack@sign
  5932  00567C  EC0B  F027         	call	___ftpack	;wreg free
  5933  005680  C01B  F023         	movff	?___ftpack,?___awtoft
  5934  005684  C01C  F024         	movff	?___ftpack+1,?___awtoft+1
  5935  005688  C01D  F025         	movff	?___ftpack+2,?___awtoft+2
  5936  00568C  0012               	return	
  5937  00568E                     __end_of___awtoft:
  5938                           	opt stack 0
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           intcon	equ	0xFF2
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           postdec1	equ	0xFE5
  5947                           fsr1l	equ	0xFE1
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           fsr2h	equ	0xFDA
  5951                           fsr2l	equ	0xFD9
  5952                           status	equ	0xFD8
  5953                           
  5954 ;; *************** function _Setup *****************
  5955 ;; Defined at:
  5956 ;;		line 55 in file "BNO055.c"
  5957 ;; Parameters:    Size  Location     Type
  5958 ;;		None
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  calstat         1   13[BANK2 ] unsigned char 
  5961 ;;  selftest        1   12[BANK2 ] unsigned char 
  5962 ;;  blid            1    7[BANK2 ] unsigned char 
  5963 ;;  swmsb           1    6[BANK2 ] unsigned char 
  5964 ;;  swlsb           1    5[BANK2 ] unsigned char 
  5965 ;;  c               1   11[BANK2 ] unsigned char 
  5966 ;;  f               1    4[BANK2 ] unsigned char 
  5967 ;;  e               1    3[BANK2 ] unsigned char 
  5968 ;;  d               1    2[BANK2 ] unsigned char 
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5978 ;;      Params:         0       0       0       0       0       0       0
  5979 ;;      Locals:         0       0       0      12       0       0       0
  5980 ;;      Temps:          0       0       0       2       0       0       0
  5981 ;;      Totals:         0       0       0      14       0       0       0
  5982 ;;Total ram usage:       14 bytes
  5983 ;; Hardware stack levels used:    1
  5984 ;; Hardware stack levels required when called:   10
  5985 ;; This function calls:
  5986 ;;		_Delay
  5987 ;;		___ftmul
  5988 ;;		_accelgyroCalBNO055
  5989 ;;		_initBNO055
  5990 ;;		_magCalBNO055
  5991 ;;		_printf
  5992 ;;		_readByte
  5993 ;;		_sqrt
  5994 ;; This function is called by:
  5995 ;;		_main
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           	psect	text11
  6000  00290E                     __ptext11:
  6001                           	opt stack 0
  6002  00290E                     _Setup:
  6003                           	opt stack 20
  6004                           
  6005                           ;BNO055.c: 58: beta = sqrt(3.0 / 4.0) * GyroMeasError;
  6006                           
  6007                           ;incstack = 0
  6008  00290E  0E00               	movlw	0
  6009  002910  0100               	movlb	0	; () banked
  6010  002912  6F8F               	movwf	sqrt@a& (0+255),b
  6011  002914  0E40               	movlw	64
  6012  002916  0100               	movlb	0	; () banked
  6013  002918  6F90               	movwf	(sqrt@a+1)& (0+255),b
  6014  00291A  0E3F               	movlw	63
  6015  00291C  0100               	movlb	0	; () banked
  6016  00291E  6F91               	movwf	(sqrt@a+2)& (0+255),b
  6017  002920  ECF0  F01C         	call	_sqrt	;wreg free
  6018  002924  C08F  F2F9         	movff	?_sqrt,_Setup$3454
  6019  002928  C090  F2FA         	movff	?_sqrt+1,_Setup$3454+1
  6020  00292C  C091  F2FB         	movff	?_sqrt+2,_Setup$3454+2
  6021                           
  6022                           ;BNO055.c: 58: beta = sqrt(3.0 / 4.0) * GyroMeasError;
  6023  002930  C2F9  F064         	movff	_Setup$3454,___ftmul@f1
  6024  002934  C2FA  F065         	movff	_Setup$3454+1,___ftmul@f1+1
  6025  002938  C2FB  F066         	movff	_Setup$3454+2,___ftmul@f1+2
  6026  00293C  C1F9  F067         	movff	_GyroMeasError,___ftmul@f2
  6027  002940  C1FA  F068         	movff	_GyroMeasError+1,___ftmul@f2+1
  6028  002944  C1FB  F069         	movff	_GyroMeasError+2,___ftmul@f2+2
  6029  002948  ECCF  F01D         	call	___ftmul	;wreg free
  6030  00294C  C064  F155         	movff	?___ftmul,_beta
  6031  002950  C065  F156         	movff	?___ftmul+1,_beta+1
  6032  002954  C066  F157         	movff	?___ftmul+2,_beta+2
  6033                           
  6034                           ;BNO055.c: 59: zeta = sqrt(3.0 / 4.0) * GyroMeasDrift;
  6035  002958  0E00               	movlw	0
  6036  00295A  0100               	movlb	0	; () banked
  6037  00295C  6F8F               	movwf	sqrt@a& (0+255),b
  6038  00295E  0E40               	movlw	64
  6039  002960  0100               	movlb	0	; () banked
  6040  002962  6F90               	movwf	(sqrt@a+1)& (0+255),b
  6041  002964  0E3F               	movlw	63
  6042  002966  0100               	movlb	0	; () banked
  6043  002968  6F91               	movwf	(sqrt@a+2)& (0+255),b
  6044  00296A  ECF0  F01C         	call	_sqrt	;wreg free
  6045  00296E  C08F  F2F9         	movff	?_sqrt,_Setup$3454
  6046  002972  C090  F2FA         	movff	?_sqrt+1,_Setup$3454+1
  6047  002976  C091  F2FB         	movff	?_sqrt+2,_Setup$3454+2
  6048                           
  6049                           ;BNO055.c: 59: zeta = sqrt(3.0 / 4.0) * GyroMeasDrift;
  6050  00297A  C2F9  F064         	movff	_Setup$3454,___ftmul@f1
  6051  00297E  C2FA  F065         	movff	_Setup$3454+1,___ftmul@f1+1
  6052  002982  C2FB  F066         	movff	_Setup$3454+2,___ftmul@f1+2
  6053  002986  C131  F067         	movff	_GyroMeasDrift,___ftmul@f2
  6054  00298A  C132  F068         	movff	_GyroMeasDrift+1,___ftmul@f2+1
  6055  00298E  C133  F069         	movff	_GyroMeasDrift+2,___ftmul@f2+2
  6056  002992  ECCF  F01D         	call	___ftmul	;wreg free
  6057  002996  C064  F17F         	movff	?___ftmul,_zeta
  6058  00299A  C065  F180         	movff	?___ftmul+1,_zeta+1
  6059  00299E  C066  F181         	movff	?___ftmul+2,_zeta+2
  6060                           
  6061                           ;BNO055.c: 67: printf("BNO055 9-axis motion sensor.../n");
  6062  0029A2  0E81               	movlw	low STR_1
  6063  0029A4  0100               	movlb	0	; () banked
  6064  0029A6  6F8F               	movwf	printf@f& (0+255),b
  6065  0029A8  0E7C               	movlw	high STR_1
  6066  0029AA  0100               	movlb	0	; () banked
  6067  0029AC  6F90               	movwf	(printf@f+1)& (0+255),b
  6068  0029AE  EC70  F000         	call	_printf	;wreg free
  6069                           
  6070                           ;BNO055.c: 68: Delay(200);
  6071  0029B2  0E00               	movlw	0
  6072  0029B4  6E1C               	movwf	Delay@wait+1,c
  6073  0029B6  0EC8               	movlw	200
  6074  0029B8  6E1B               	movwf	Delay@wait,c
  6075  0029BA  EC47  F02B         	call	_Delay	;wreg free
  6076                           
  6077                           ;BNO055.c: 69: char c = readByte(0x29, 0x00);
  6078  0029BE  0E00               	movlw	0
  6079  0029C0  0100               	movlb	0	; () banked
  6080  0029C2  6F60               	movwf	readByte@subAddress& (0+255),b
  6081  0029C4  0E29               	movlw	41
  6082  0029C6  ECB4  F026         	call	_readByte
  6083  0029CA  0102               	movlb	2	; () banked
  6084  0029CC  6FFC               	movwf	Setup@c& (0+255),b
  6085                           
  6086                           ; BSR set to: 2
  6087                           ;BNO055.c: 70: Delay(200);
  6088  0029CE  0E00               	movlw	0
  6089  0029D0  6E1C               	movwf	Delay@wait+1,c
  6090  0029D2  0EC8               	movlw	200
  6091  0029D4  6E1B               	movwf	Delay@wait,c
  6092  0029D6  EC47  F02B         	call	_Delay	;wreg free
  6093                           
  6094                           ;BNO055.c: 71: printf("BNO055 Address = 0x%s/n",0x29);
  6095  0029DA  0E0C               	movlw	low STR_2
  6096  0029DC  0100               	movlb	0	; () banked
  6097  0029DE  6F8F               	movwf	printf@f& (0+255),b
  6098  0029E0  0E7F               	movlw	high STR_2
  6099  0029E2  0100               	movlb	0	; () banked
  6100  0029E4  6F90               	movwf	(printf@f+1)& (0+255),b
  6101  0029E6  0E00               	movlw	0
  6102  0029E8  0100               	movlb	0	; () banked
  6103  0029EA  6F92               	movwf	(?_printf+3)& (0+255),b
  6104  0029EC  0E29               	movlw	41
  6105  0029EE  6F91               	movwf	(?_printf+2)& (0+255),b
  6106  0029F0  EC70  F000         	call	_printf	;wreg free
  6107                           
  6108                           ;BNO055.c: 72: Delay(200);
  6109  0029F4  0E00               	movlw	0
  6110  0029F6  6E1C               	movwf	Delay@wait+1,c
  6111  0029F8  0EC8               	movlw	200
  6112  0029FA  6E1B               	movwf	Delay@wait,c
  6113  0029FC  EC47  F02B         	call	_Delay	;wreg free
  6114                           
  6115                           ;BNO055.c: 73: printf("BNO055 WHO_AM_I = 0x%s/n", 0x00);
  6116  002A00  0EC2               	movlw	low STR_3
  6117  002A02  0100               	movlb	0	; () banked
  6118  002A04  6F8F               	movwf	printf@f& (0+255),b
  6119  002A06  0E7E               	movlw	high STR_3
  6120  002A08  0100               	movlb	0	; () banked
  6121  002A0A  6F90               	movwf	(printf@f+1)& (0+255),b
  6122  002A0C  0E00               	movlw	0
  6123  002A0E  0100               	movlb	0	; () banked
  6124  002A10  6F92               	movwf	(?_printf+3)& (0+255),b
  6125  002A12  0E00               	movlw	0
  6126  002A14  6F91               	movwf	(?_printf+2)& (0+255),b
  6127  002A16  EC70  F000         	call	_printf	;wreg free
  6128                           
  6129                           ;BNO055.c: 74: Delay(200);
  6130  002A1A  0E00               	movlw	0
  6131  002A1C  6E1C               	movwf	Delay@wait+1,c
  6132  002A1E  0EC8               	movlw	200
  6133  002A20  6E1B               	movwf	Delay@wait,c
  6134  002A22  EC47  F02B         	call	_Delay	;wreg free
  6135                           
  6136                           ;BNO055.c: 75: printf("BNO055 - I AM %s  - I should be 0xA0/n",c);
  6137  002A26  0EAB               	movlw	low STR_4
  6138  002A28  0100               	movlb	0	; () banked
  6139  002A2A  6F8F               	movwf	printf@f& (0+255),b
  6140  002A2C  0E7A               	movlw	high STR_4
  6141  002A2E  0100               	movlb	0	; () banked
  6142  002A30  6F90               	movwf	(printf@f+1)& (0+255),b
  6143  002A32  C2FC  F091         	movff	Setup@c,?_printf+2
  6144  002A36  0100               	movlb	0	; () banked
  6145  002A38  6B92               	clrf	(?_printf+3)& (0+255),b
  6146  002A3A  EC70  F000         	call	_printf	;wreg free
  6147                           
  6148                           ;BNO055.c: 76: Delay(200);
  6149  002A3E  0E00               	movlw	0
  6150  002A40  6E1C               	movwf	Delay@wait+1,c
  6151  002A42  0EC8               	movlw	200
  6152  002A44  6E1B               	movwf	Delay@wait,c
  6153  002A46  EC47  F02B         	call	_Delay	;wreg free
  6154                           
  6155                           ;BNO055.c: 80: char d = readByte(0x29, 0x01);
  6156  002A4A  0E01               	movlw	1
  6157  002A4C  0100               	movlb	0	; () banked
  6158  002A4E  6F60               	movwf	readByte@subAddress& (0+255),b
  6159  002A50  0E29               	movlw	41
  6160  002A52  ECB4  F026         	call	_readByte
  6161  002A56  0102               	movlb	2	; () banked
  6162  002A58  6FF3               	movwf	Setup@d& (0+255),b
  6163                           
  6164                           ; BSR set to: 2
  6165                           ;BNO055.c: 81: printf("BNO055 ACC I AM %c I should be 0xFB/n",d);
  6166  002A5A  0E1E               	movlw	low STR_5
  6167  002A5C  0100               	movlb	0	; () banked
  6168  002A5E  6F8F               	movwf	printf@f& (0+255),b
  6169  002A60  0E7B               	movlw	high STR_5
  6170  002A62  0100               	movlb	0	; () banked
  6171  002A64  6F90               	movwf	(printf@f+1)& (0+255),b
  6172  002A66  C2F3  F091         	movff	Setup@d,?_printf+2
  6173  002A6A  0100               	movlb	0	; () banked
  6174  002A6C  6B92               	clrf	(?_printf+3)& (0+255),b
  6175  002A6E  EC70  F000         	call	_printf	;wreg free
  6176                           
  6177                           ;BNO055.c: 82: Delay(200);
  6178  002A72  0E00               	movlw	0
  6179  002A74  6E1C               	movwf	Delay@wait+1,c
  6180  002A76  0EC8               	movlw	200
  6181  002A78  6E1B               	movwf	Delay@wait,c
  6182  002A7A  EC47  F02B         	call	_Delay	;wreg free
  6183                           
  6184                           ;BNO055.c: 84: char e = readByte(0x29, 0x02);
  6185  002A7E  0E02               	movlw	2
  6186  002A80  0100               	movlb	0	; () banked
  6187  002A82  6F60               	movwf	readByte@subAddress& (0+255),b
  6188  002A84  0E29               	movlw	41
  6189  002A86  ECB4  F026         	call	_readByte
  6190  002A8A  0102               	movlb	2	; () banked
  6191  002A8C  6FF4               	movwf	Setup@e& (0+255),b
  6192                           
  6193                           ; BSR set to: 2
  6194                           ;BNO055.c: 85: printf("BNO055 MAG I AM %c I should be 0x32/n",e);
  6195  002A8E  0EF8               	movlw	low STR_6
  6196  002A90  0100               	movlb	0	; () banked
  6197  002A92  6F8F               	movwf	printf@f& (0+255),b
  6198  002A94  0E7A               	movlw	high STR_6
  6199  002A96  0100               	movlb	0	; () banked
  6200  002A98  6F90               	movwf	(printf@f+1)& (0+255),b
  6201  002A9A  C2F4  F091         	movff	Setup@e,?_printf+2
  6202  002A9E  0100               	movlb	0	; () banked
  6203  002AA0  6B92               	clrf	(?_printf+3)& (0+255),b
  6204  002AA2  EC70  F000         	call	_printf	;wreg free
  6205                           
  6206                           ;BNO055.c: 86: Delay(200);
  6207  002AA6  0E00               	movlw	0
  6208  002AA8  6E1C               	movwf	Delay@wait+1,c
  6209  002AAA  0EC8               	movlw	200
  6210  002AAC  6E1B               	movwf	Delay@wait,c
  6211  002AAE  EC47  F02B         	call	_Delay	;wreg free
  6212                           
  6213                           ;BNO055.c: 88: char f = readByte(0x29, 0x03);
  6214  002AB2  0E03               	movlw	3
  6215  002AB4  0100               	movlb	0	; () banked
  6216  002AB6  6F60               	movwf	readByte@subAddress& (0+255),b
  6217  002AB8  0E29               	movlw	41
  6218  002ABA  ECB4  F026         	call	_readByte
  6219  002ABE  0102               	movlb	2	; () banked
  6220  002AC0  6FF5               	movwf	Setup@f& (0+255),b
  6221                           
  6222                           ; BSR set to: 2
  6223                           ;BNO055.c: 89: printf("BNO055 GYRO I AM %c  I should be 0x0F/n",f);
  6224  002AC2  0E35               	movlw	low STR_7
  6225  002AC4  0100               	movlb	0	; () banked
  6226  002AC6  6F8F               	movwf	printf@f& (0+255),b
  6227  002AC8  0E7A               	movlw	high STR_7
  6228  002ACA  0100               	movlb	0	; () banked
  6229  002ACC  6F90               	movwf	(printf@f+1)& (0+255),b
  6230  002ACE  C2F5  F091         	movff	Setup@f,?_printf+2
  6231  002AD2  0100               	movlb	0	; () banked
  6232  002AD4  6B92               	clrf	(?_printf+3)& (0+255),b
  6233  002AD6  EC70  F000         	call	_printf	;wreg free
  6234                           
  6235                           ;BNO055.c: 90: Delay(200);
  6236  002ADA  0E00               	movlw	0
  6237  002ADC  6E1C               	movwf	Delay@wait+1,c
  6238  002ADE  0EC8               	movlw	200
  6239  002AE0  6E1B               	movwf	Delay@wait,c
  6240  002AE2  EC47  F02B         	call	_Delay	;wreg free
  6241                           
  6242                           ;BNO055.c: 91: if (c == 0xA0)
  6243  002AE6  0EA0               	movlw	160
  6244  002AE8  0102               	movlb	2	; () banked
  6245  002AEA  19FC               	xorwf	Setup@c& (0+255),w,b
  6246  002AEC  A4D8               	btfss	status,2,c
  6247  002AEE  D17C               	goto	l9983
  6248                           
  6249                           ; BSR set to: 2
  6250                           ;BNO055.c: 92: {
  6251                           ;BNO055.c: 93: printf("BNO055 is online...");
  6252  002AF0  0E7C               	movlw	low STR_8
  6253  002AF2  0100               	movlb	0	; () banked
  6254  002AF4  6F8F               	movwf	printf@f& (0+255),b
  6255  002AF6  0E7F               	movlw	high STR_8
  6256  002AF8  0100               	movlb	0	; () banked
  6257  002AFA  6F90               	movwf	(printf@f+1)& (0+255),b
  6258  002AFC  EC70  F000         	call	_printf	;wreg free
  6259                           
  6260                           ;BNO055.c: 94: Delay(200);
  6261  002B00  0E00               	movlw	0
  6262  002B02  6E1C               	movwf	Delay@wait+1,c
  6263  002B04  0EC8               	movlw	200
  6264  002B06  6E1B               	movwf	Delay@wait,c
  6265  002B08  EC47  F02B         	call	_Delay	;wreg free
  6266                           
  6267                           ;BNO055.c: 96: char swlsb = readByte(0x29, 0x04);
  6268  002B0C  0E04               	movlw	4
  6269  002B0E  0100               	movlb	0	; () banked
  6270  002B10  6F60               	movwf	readByte@subAddress& (0+255),b
  6271  002B12  0E29               	movlw	41
  6272  002B14  ECB4  F026         	call	_readByte
  6273  002B18  0102               	movlb	2	; () banked
  6274  002B1A  6FF6               	movwf	Setup@swlsb& (0+255),b
  6275                           
  6276                           ; BSR set to: 2
  6277                           ;BNO055.c: 97: Delay(10);
  6278  002B1C  0E00               	movlw	0
  6279  002B1E  6E1C               	movwf	Delay@wait+1,c
  6280  002B20  0E0A               	movlw	10
  6281  002B22  6E1B               	movwf	Delay@wait,c
  6282  002B24  EC47  F02B         	call	_Delay	;wreg free
  6283                           
  6284                           ;BNO055.c: 98: char swmsb = readByte(0x29, 0x05);
  6285  002B28  0E05               	movlw	5
  6286  002B2A  0100               	movlb	0	; () banked
  6287  002B2C  6F60               	movwf	readByte@subAddress& (0+255),b
  6288  002B2E  0E29               	movlw	41
  6289  002B30  ECB4  F026         	call	_readByte
  6290  002B34  0102               	movlb	2	; () banked
  6291  002B36  6FF7               	movwf	Setup@swmsb& (0+255),b
  6292                           
  6293                           ; BSR set to: 2
  6294                           ;BNO055.c: 99: Delay(200);
  6295  002B38  0E00               	movlw	0
  6296  002B3A  6E1C               	movwf	Delay@wait+1,c
  6297  002B3C  0EC8               	movlw	200
  6298  002B3E  6E1B               	movwf	Delay@wait,c
  6299  002B40  EC47  F02B         	call	_Delay	;wreg free
  6300                           
  6301                           ;BNO055.c: 100: printf("BNO055 SW Revision ID: %c.%c/n",swmsb,swlsb);
  6302  002B44  0E9F               	movlw	low STR_9
  6303  002B46  0100               	movlb	0	; () banked
  6304  002B48  6F8F               	movwf	printf@f& (0+255),b
  6305  002B4A  0E7D               	movlw	high STR_9
  6306  002B4C  0100               	movlb	0	; () banked
  6307  002B4E  6F90               	movwf	(printf@f+1)& (0+255),b
  6308  002B50  C2F7  F091         	movff	Setup@swmsb,?_printf+2
  6309  002B54  0100               	movlb	0	; () banked
  6310  002B56  6B92               	clrf	(?_printf+3)& (0+255),b
  6311  002B58  C2F6  F093         	movff	Setup@swlsb,?_printf+4
  6312  002B5C  0100               	movlb	0	; () banked
  6313  002B5E  6B94               	clrf	(?_printf+5)& (0+255),b
  6314  002B60  EC70  F000         	call	_printf	;wreg free
  6315                           
  6316                           ;BNO055.c: 101: printf("Should be 03.04/n");
  6317  002B64  0EA2               	movlw	low STR_10
  6318  002B66  0100               	movlb	0	; () banked
  6319  002B68  6F8F               	movwf	printf@f& (0+255),b
  6320  002B6A  0E7F               	movlw	high STR_10
  6321  002B6C  0100               	movlb	0	; () banked
  6322  002B6E  6F90               	movwf	(printf@f+1)& (0+255),b
  6323  002B70  EC70  F000         	call	_printf	;wreg free
  6324                           
  6325                           ;BNO055.c: 102: Delay(200);
  6326  002B74  0E00               	movlw	0
  6327  002B76  6E1C               	movwf	Delay@wait+1,c
  6328  002B78  0EC8               	movlw	200
  6329  002B7A  6E1B               	movwf	Delay@wait,c
  6330  002B7C  EC47  F02B         	call	_Delay	;wreg free
  6331                           
  6332                           ;BNO055.c: 104: char blid = readByte(0x29, 0x06);
  6333  002B80  0E06               	movlw	6
  6334  002B82  0100               	movlb	0	; () banked
  6335  002B84  6F60               	movwf	readByte@subAddress& (0+255),b
  6336  002B86  0E29               	movlw	41
  6337  002B88  ECB4  F026         	call	_readByte
  6338  002B8C  0102               	movlb	2	; () banked
  6339  002B8E  6FF8               	movwf	Setup@blid& (0+255),b
  6340                           
  6341                           ; BSR set to: 2
  6342                           ;BNO055.c: 105: printf("BNO055 bootloader Version: %c", blid);
  6343  002B90  0EDD               	movlw	low STR_11
  6344  002B92  0100               	movlb	0	; () banked
  6345  002B94  6F8F               	movwf	printf@f& (0+255),b
  6346  002B96  0E7D               	movlw	high STR_11
  6347  002B98  0100               	movlb	0	; () banked
  6348  002B9A  6F90               	movwf	(printf@f+1)& (0+255),b
  6349  002B9C  C2F8  F091         	movff	Setup@blid,?_printf+2
  6350  002BA0  0100               	movlb	0	; () banked
  6351  002BA2  6B92               	clrf	(?_printf+3)& (0+255),b
  6352  002BA4  EC70  F000         	call	_printf	;wreg free
  6353                           
  6354                           ;BNO055.c: 108: char selftest = readByte(0x29, 0x36);
  6355  002BA8  0E36               	movlw	54
  6356  002BAA  0100               	movlb	0	; () banked
  6357  002BAC  6F60               	movwf	readByte@subAddress& (0+255),b
  6358  002BAE  0E29               	movlw	41
  6359  002BB0  ECB4  F026         	call	_readByte
  6360  002BB4  0102               	movlb	2	; () banked
  6361  002BB6  6FFD               	movwf	Setup@selftest& (0+255),b
  6362                           
  6363                           ; BSR set to: 2
  6364                           ;BNO055.c: 110: if(selftest & 0x01) {
  6365  002BB8  0102               	movlb	2	; () banked
  6366  002BBA  A1FD               	btfss	Setup@selftest& (0+255),0,b
  6367  002BBC  D009               	goto	l9933
  6368                           
  6369                           ; BSR set to: 2
  6370                           ;BNO055.c: 111: printf("accelerometer passed self test/n");
  6371  002BBE  0EA2               	movlw	low STR_12
  6372  002BC0  0100               	movlb	0	; () banked
  6373  002BC2  6F8F               	movwf	printf@f& (0+255),b
  6374  002BC4  0E7C               	movlw	high STR_12
  6375  002BC6  0100               	movlb	0	; () banked
  6376  002BC8  6F90               	movwf	(printf@f+1)& (0+255),b
  6377  002BCA  EC70  F000         	call	_printf	;wreg free
  6378                           
  6379                           ;BNO055.c: 112: } else {
  6380  002BCE  D008               	goto	l9935
  6381  002BD0                     l9933:
  6382                           
  6383                           ;BNO055.c: 113: printf("accelerometer failed self test");
  6384  002BD0  0EBE               	movlw	low STR_13
  6385  002BD2  0100               	movlb	0	; () banked
  6386  002BD4  6F8F               	movwf	printf@f& (0+255),b
  6387  002BD6  0E7D               	movlw	high STR_13
  6388  002BD8  0100               	movlb	0	; () banked
  6389  002BDA  6F90               	movwf	(printf@f+1)& (0+255),b
  6390  002BDC  EC70  F000         	call	_printf	;wreg free
  6391  002BE0                     l9935:
  6392                           
  6393                           ;BNO055.c: 114: }
  6394                           ;BNO055.c: 115: if(selftest & 0x02) {
  6395  002BE0  0102               	movlb	2	; () banked
  6396  002BE2  A3FD               	btfss	Setup@selftest& (0+255),1,b
  6397  002BE4  D009               	goto	l9939
  6398                           
  6399                           ; BSR set to: 2
  6400                           ;BNO055.c: 116: printf("magnetometer passed self test/n");
  6401  002BE6  0EE3               	movlw	low STR_14
  6402  002BE8  0100               	movlb	0	; () banked
  6403  002BEA  6F8F               	movwf	printf@f& (0+255),b
  6404  002BEC  0E7C               	movlw	high STR_14
  6405  002BEE  0100               	movlb	0	; () banked
  6406  002BF0  6F90               	movwf	(printf@f+1)& (0+255),b
  6407  002BF2  EC70  F000         	call	_printf	;wreg free
  6408                           
  6409                           ;BNO055.c: 117: } else {
  6410  002BF6  D008               	goto	l9941
  6411  002BF8                     l9939:
  6412                           
  6413                           ;BNO055.c: 118: printf("magnetometer failed self test");
  6414  002BF8  0EFB               	movlw	low STR_15
  6415  002BFA  0100               	movlb	0	; () banked
  6416  002BFC  6F8F               	movwf	printf@f& (0+255),b
  6417  002BFE  0E7D               	movlw	high STR_15
  6418  002C00  0100               	movlb	0	; () banked
  6419  002C02  6F90               	movwf	(printf@f+1)& (0+255),b
  6420  002C04  EC70  F000         	call	_printf	;wreg free
  6421  002C08                     l9941:
  6422                           
  6423                           ;BNO055.c: 119: }
  6424                           ;BNO055.c: 120: if(selftest & 0x04) {
  6425  002C08  0102               	movlb	2	; () banked
  6426  002C0A  A5FD               	btfss	Setup@selftest& (0+255),2,b
  6427  002C0C  D009               	goto	l9945
  6428                           
  6429                           ; BSR set to: 2
  6430                           ;BNO055.c: 121: printf("gyroscope passed self test/n");
  6431  002C0E  0E53               	movlw	low STR_16
  6432  002C10  0100               	movlb	0	; () banked
  6433  002C12  6F8F               	movwf	printf@f& (0+255),b
  6434  002C14  0E7E               	movlw	high STR_16
  6435  002C16  0100               	movlb	0	; () banked
  6436  002C18  6F90               	movwf	(printf@f+1)& (0+255),b
  6437  002C1A  EC70  F000         	call	_printf	;wreg free
  6438                           
  6439                           ;BNO055.c: 122: } else {
  6440  002C1E  D008               	goto	l9947
  6441  002C20                     l9945:
  6442                           
  6443                           ;BNO055.c: 123: printf("gyroscope failed self test");
  6444  002C20  0EA7               	movlw	low STR_17
  6445  002C22  0100               	movlb	0	; () banked
  6446  002C24  6F8F               	movwf	printf@f& (0+255),b
  6447  002C26  0E7E               	movlw	high STR_17
  6448  002C28  0100               	movlb	0	; () banked
  6449  002C2A  6F90               	movwf	(printf@f+1)& (0+255),b
  6450  002C2C  EC70  F000         	call	_printf	;wreg free
  6451  002C30                     l9947:
  6452                           
  6453                           ;BNO055.c: 124: }
  6454                           ;BNO055.c: 125: if(selftest & 0x08) {
  6455  002C30  0102               	movlb	2	; () banked
  6456  002C32  A7FD               	btfss	Setup@selftest& (0+255),3,b
  6457  002C34  D009               	goto	l9951
  6458                           
  6459                           ; BSR set to: 2
  6460                           ;BNO055.c: 126: printf("MCU passed self test/n");
  6461  002C36  0E24               	movlw	low STR_18
  6462  002C38  0100               	movlb	0	; () banked
  6463  002C3A  6F8F               	movwf	printf@f& (0+255),b
  6464  002C3C  0E7F               	movlw	high STR_18
  6465  002C3E  0100               	movlb	0	; () banked
  6466  002C40  6F90               	movwf	(printf@f+1)& (0+255),b
  6467  002C42  EC70  F000         	call	_printf	;wreg free
  6468                           
  6469                           ;BNO055.c: 127: } else {
  6470  002C46  D008               	goto	l9953
  6471  002C48                     l9951:
  6472                           
  6473                           ;BNO055.c: 128: printf("MCU failed self test");
  6474  002C48  0E67               	movlw	low STR_19
  6475  002C4A  0100               	movlb	0	; () banked
  6476  002C4C  6F8F               	movwf	printf@f& (0+255),b
  6477  002C4E  0E7F               	movlw	high STR_19
  6478  002C50  0100               	movlb	0	; () banked
  6479  002C52  6F90               	movwf	(printf@f+1)& (0+255),b
  6480  002C54  EC70  F000         	call	_printf	;wreg free
  6481  002C58                     l9953:
  6482                           
  6483                           ;BNO055.c: 129: }
  6484                           ;BNO055.c: 131: Delay(1000);
  6485  002C58  0E03               	movlw	3
  6486  002C5A  6E1C               	movwf	Delay@wait+1,c
  6487  002C5C  0EE8               	movlw	232
  6488  002C5E  6E1B               	movwf	Delay@wait,c
  6489  002C60  EC47  F02B         	call	_Delay	;wreg free
  6490                           
  6491                           ;BNO055.c: 133: accelgyroCalBNO055(accelBias, gyroBias);
  6492  002C64  0EAC               	movlw	low _accelBias
  6493  002C66  0100               	movlb	0	; () banked
  6494  002C68  6FC8               	movwf	accelgyroCalBNO055@dest1& (0+255),b
  6495  002C6A  0E01               	movlw	high _accelBias
  6496  002C6C  0100               	movlb	0	; () banked
  6497  002C6E  6FC9               	movwf	(accelgyroCalBNO055@dest1+1)& (0+255),b
  6498  002C70  0EB5               	movlw	low _gyroBias
  6499  002C72  0100               	movlb	0	; () banked
  6500  002C74  6FCA               	movwf	accelgyroCalBNO055@dest2& (0+255),b
  6501  002C76  0E01               	movlw	high _gyroBias
  6502  002C78  0100               	movlb	0	; () banked
  6503  002C7A  6FCB               	movwf	(accelgyroCalBNO055@dest2+1)& (0+255),b
  6504  002C7C  ECEB  F009         	call	_accelgyroCalBNO055	;wreg free
  6505                           
  6506                           ;BNO055.c: 135: printf("Average accelerometer bias (mg) = %f", accelBias);
  6507  002C80  0E44               	movlw	low STR_20
  6508  002C82  0100               	movlb	0	; () banked
  6509  002C84  6F8F               	movwf	printf@f& (0+255),b
  6510  002C86  0E7B               	movlw	high STR_20
  6511  002C88  0100               	movlb	0	; () banked
  6512  002C8A  6F90               	movwf	(printf@f+1)& (0+255),b
  6513  002C8C  0EAC               	movlw	low _accelBias
  6514  002C8E  0100               	movlb	0	; () banked
  6515  002C90  6F91               	movwf	(?_printf+2)& (0+255),b
  6516  002C92  0E01               	movlw	high _accelBias
  6517  002C94  0100               	movlb	0	; () banked
  6518  002C96  6F92               	movwf	(?_printf+3)& (0+255),b
  6519  002C98  EC70  F000         	call	_printf	;wreg free
  6520                           
  6521                           ;BNO055.c: 136: printf("Average gyro bias (dps) = %f",gyroBias);
  6522  002C9C  0E36               	movlw	low STR_21
  6523  002C9E  0100               	movlb	0	; () banked
  6524  002CA0  6F8F               	movwf	printf@f& (0+255),b
  6525  002CA2  0E7E               	movlw	high STR_21
  6526  002CA4  0100               	movlb	0	; () banked
  6527  002CA6  6F90               	movwf	(printf@f+1)& (0+255),b
  6528  002CA8  0EB5               	movlw	low _gyroBias
  6529  002CAA  0100               	movlb	0	; () banked
  6530  002CAC  6F91               	movwf	(?_printf+2)& (0+255),b
  6531  002CAE  0E01               	movlw	high _gyroBias
  6532  002CB0  0100               	movlb	0	; () banked
  6533  002CB2  6F92               	movwf	(?_printf+3)& (0+255),b
  6534  002CB4  EC70  F000         	call	_printf	;wreg free
  6535                           
  6536                           ;BNO055.c: 138: Delay(1000);
  6537  002CB8  0E03               	movlw	3
  6538  002CBA  6E1C               	movwf	Delay@wait+1,c
  6539  002CBC  0EE8               	movlw	232
  6540  002CBE  6E1B               	movwf	Delay@wait,c
  6541  002CC0  EC47  F02B         	call	_Delay	;wreg free
  6542                           
  6543                           ;BNO055.c: 140: magCalBNO055(magBias);
  6544  002CC4  0ED0               	movlw	low _magBias
  6545  002CC6  0100               	movlb	0	; () banked
  6546  002CC8  6FC8               	movwf	magCalBNO055@dest1& (0+255),b
  6547  002CCA  0E02               	movlw	high _magBias
  6548  002CCC  0100               	movlb	0	; () banked
  6549  002CCE  6FC9               	movwf	(magCalBNO055@dest1+1)& (0+255),b
  6550  002CD0  EC01  F012         	call	_magCalBNO055	;wreg free
  6551                           
  6552                           ;BNO055.c: 142: printf("Average magnetometer bias (mG) = %f", magBias);
  6553  002CD4  0EB2               	movlw	low STR_22
  6554  002CD6  0100               	movlb	0	; () banked
  6555  002CD8  6F8F               	movwf	printf@f& (0+255),b
  6556  002CDA  0E7B               	movlw	high STR_22
  6557  002CDC  0100               	movlb	0	; () banked
  6558  002CDE  6F90               	movwf	(printf@f+1)& (0+255),b
  6559  002CE0  0ED0               	movlw	low _magBias
  6560  002CE2  0100               	movlb	0	; () banked
  6561  002CE4  6F91               	movwf	(?_printf+2)& (0+255),b
  6562  002CE6  0E02               	movlw	high _magBias
  6563  002CE8  0100               	movlb	0	; () banked
  6564  002CEA  6F92               	movwf	(?_printf+3)& (0+255),b
  6565  002CEC  EC70  F000         	call	_printf	;wreg free
  6566                           
  6567                           ;BNO055.c: 144: Delay(1000);
  6568  002CF0  0E03               	movlw	3
  6569  002CF2  6E1C               	movwf	Delay@wait+1,c
  6570  002CF4  0EE8               	movlw	232
  6571  002CF6  6E1B               	movwf	Delay@wait,c
  6572  002CF8  EC47  F02B         	call	_Delay	;wreg free
  6573                           
  6574                           ;BNO055.c: 147: char calstat = readByte(0x29, 0x35);
  6575  002CFC  0E35               	movlw	53
  6576  002CFE  0100               	movlb	0	; () banked
  6577  002D00  6F60               	movwf	readByte@subAddress& (0+255),b
  6578  002D02  0E29               	movlw	41
  6579  002D04  ECB4  F026         	call	_readByte
  6580  002D08  0102               	movlb	2	; () banked
  6581  002D0A  6FFE               	movwf	Setup@calstat& (0+255),b
  6582                           
  6583                           ; BSR set to: 2
  6584                           ;BNO055.c: 148: printf("Not calibrated = 0, fully calibrated = 3");
  6585  002D0C  0E0C               	movlw	low STR_23
  6586  002D0E  0100               	movlb	0	; () banked
  6587  002D10  6F8F               	movwf	printf@f& (0+255),b
  6588  002D12  0E7A               	movlw	high STR_23
  6589  002D14  0100               	movlb	0	; () banked
  6590  002D16  6F90               	movwf	(printf@f+1)& (0+255),b
  6591  002D18  EC70  F000         	call	_printf	;wreg free
  6592                           
  6593                           ;BNO055.c: 149: printf("System calibration status = %c", (0xC0 & calstat) >> 6);
  6594  002D1C  0E80               	movlw	low STR_24
  6595  002D1E  0100               	movlb	0	; () banked
  6596  002D20  6F8F               	movwf	printf@f& (0+255),b
  6597  002D22  0E7D               	movlw	high STR_24
  6598  002D24  0100               	movlb	0	; () banked
  6599  002D26  6F90               	movwf	(printf@f+1)& (0+255),b
  6600  002D28  C2FE  F2F1         	movff	Setup@calstat,??_Setup
  6601  002D2C  0E06               	movlw	6
  6602  002D2E  0102               	movlb	2	; () banked
  6603  002D30  6FF2               	movwf	(??_Setup+1)& (0+255),b
  6604  002D32                     u11285:
  6605  002D32  0102               	movlb	2	; () banked
  6606  002D34  90D8               	bcf	status,0,c
  6607  002D36  33F1               	rrcf	??_Setup& (0+255),f,b
  6608  002D38  0102               	movlb	2	; () banked
  6609  002D3A  2FF2               	decfsz	(??_Setup+1)& (0+255),f,b
  6610  002D3C  D7FA               	goto	u11285
  6611  002D3E  0E03               	movlw	3
  6612  002D40  0102               	movlb	2	; () banked
  6613  002D42  17F1               	andwf	??_Setup& (0+255),f,b
  6614  002D44  0102               	movlb	2	; () banked
  6615  002D46  51F1               	movf	??_Setup& (0+255),w,b
  6616  002D48  0100               	movlb	0	; () banked
  6617  002D4A  6F91               	movwf	(?_printf+2)& (0+255),b
  6618  002D4C  6B92               	clrf	(?_printf+3)& (0+255),b
  6619  002D4E  EC70  F000         	call	_printf	;wreg free
  6620                           
  6621                           ;BNO055.c: 150: printf("Gyro   calibration status = %c", (0x30 & calstat) >> 4);
  6622  002D52  0E42               	movlw	low STR_25
  6623  002D54  0100               	movlb	0	; () banked
  6624  002D56  6F8F               	movwf	printf@f& (0+255),b
  6625  002D58  0E7D               	movlw	high STR_25
  6626  002D5A  0100               	movlb	0	; () banked
  6627  002D5C  6F90               	movwf	(printf@f+1)& (0+255),b
  6628  002D5E  C2FE  F2F1         	movff	Setup@calstat,??_Setup
  6629  002D62  0102               	movlb	2	; () banked
  6630  002D64  3BF1               	swapf	??_Setup& (0+255),f,b
  6631  002D66  0E0F               	movlw	15
  6632  002D68  17F1               	andwf	??_Setup& (0+255),f,b
  6633  002D6A  0E03               	movlw	3
  6634  002D6C  0102               	movlb	2	; () banked
  6635  002D6E  17F1               	andwf	??_Setup& (0+255),f,b
  6636  002D70  0102               	movlb	2	; () banked
  6637  002D72  51F1               	movf	??_Setup& (0+255),w,b
  6638  002D74  0100               	movlb	0	; () banked
  6639  002D76  6F91               	movwf	(?_printf+2)& (0+255),b
  6640  002D78  6B92               	clrf	(?_printf+3)& (0+255),b
  6641  002D7A  EC70  F000         	call	_printf	;wreg free
  6642                           
  6643                           ;BNO055.c: 151: printf("Accel  calibration status = %c", (0x0C & calstat) >> 2);
  6644  002D7E  0E61               	movlw	low STR_26
  6645  002D80  0100               	movlb	0	; () banked
  6646  002D82  6F8F               	movwf	printf@f& (0+255),b
  6647  002D84  0E7D               	movlw	high STR_26
  6648  002D86  0100               	movlb	0	; () banked
  6649  002D88  6F90               	movwf	(printf@f+1)& (0+255),b
  6650  002D8A  C2FE  F2F1         	movff	Setup@calstat,??_Setup
  6651  002D8E  0102               	movlb	2	; () banked
  6652  002D90  90D8               	bcf	status,0,c
  6653  002D92  33F1               	rrcf	??_Setup& (0+255),f,b
  6654  002D94  0102               	movlb	2	; () banked
  6655  002D96  90D8               	bcf	status,0,c
  6656  002D98  33F1               	rrcf	??_Setup& (0+255),f,b
  6657  002D9A  0E03               	movlw	3
  6658  002D9C  0102               	movlb	2	; () banked
  6659  002D9E  17F1               	andwf	??_Setup& (0+255),f,b
  6660  002DA0  0102               	movlb	2	; () banked
  6661  002DA2  51F1               	movf	??_Setup& (0+255),w,b
  6662  002DA4  0100               	movlb	0	; () banked
  6663  002DA6  6F91               	movwf	(?_printf+2)& (0+255),b
  6664  002DA8  6B92               	clrf	(?_printf+3)& (0+255),b
  6665  002DAA  EC70  F000         	call	_printf	;wreg free
  6666                           
  6667                           ;BNO055.c: 152: printf("Mag    calibration status = %c", (0x03 & calstat) >> 0);
  6668  002DAE  0E23               	movlw	low STR_27
  6669  002DB0  0100               	movlb	0	; () banked
  6670  002DB2  6F8F               	movwf	printf@f& (0+255),b
  6671  002DB4  0E7D               	movlw	high STR_27
  6672  002DB6  0100               	movlb	0	; () banked
  6673  002DB8  6F90               	movwf	(printf@f+1)& (0+255),b
  6674  002DBA  C2FE  F2F1         	movff	Setup@calstat,??_Setup
  6675  002DBE  0E03               	movlw	3
  6676  002DC0  0102               	movlb	2	; () banked
  6677  002DC2  17F1               	andwf	??_Setup& (0+255),f,b
  6678  002DC4  0102               	movlb	2	; () banked
  6679  002DC6  51F1               	movf	??_Setup& (0+255),w,b
  6680  002DC8  0100               	movlb	0	; () banked
  6681  002DCA  6F91               	movwf	(?_printf+2)& (0+255),b
  6682  002DCC  6B92               	clrf	(?_printf+3)& (0+255),b
  6683  002DCE  EC70  F000         	call	_printf	;wreg free
  6684                           
  6685                           ;BNO055.c: 154: initBNO055();
  6686  002DD2  ECF3  F020         	call	_initBNO055	;wreg free
  6687                           
  6688                           ;BNO055.c: 155: printf("BNO055 initialized for sensor mode....");
  6689  002DD6  0E5D               	movlw	low STR_28
  6690  002DD8  0100               	movlb	0	; () banked
  6691  002DDA  6F8F               	movwf	printf@f& (0+255),b
  6692  002DDC  0E7A               	movlw	high STR_28
  6693  002DDE  0100               	movlb	0	; () banked
  6694  002DE0  6F90               	movwf	(printf@f+1)& (0+255),b
  6695  002DE2  EC70  F000         	call	_printf	;wreg free
  6696                           
  6697                           ;BNO055.c: 157: }
  6698  002DE6  0012               	return	
  6699  002DE8                     l9983:
  6700                           
  6701                           ;BNO055.c: 158: else
  6702                           ;BNO055.c: 159: {
  6703                           ;BNO055.c: 160: printf("Could not connect to BNO055: 0x%c",c);
  6704  002DE8  0E1C               	movlw	low STR_29
  6705  002DEA  0100               	movlb	0	; () banked
  6706  002DEC  6F8F               	movwf	printf@f& (0+255),b
  6707  002DEE  0E7C               	movlw	high STR_29
  6708  002DF0  0100               	movlb	0	; () banked
  6709  002DF2  6F90               	movwf	(printf@f+1)& (0+255),b
  6710  002DF4  C2FC  F091         	movff	Setup@c,?_printf+2
  6711  002DF8  0100               	movlb	0	; () banked
  6712  002DFA  6B92               	clrf	(?_printf+3)& (0+255),b
  6713  002DFC  EC70  F000         	call	_printf	;wreg free
  6714  002E00                     l1127:
  6715  002E00  D7FF               	goto	l1127
  6716  002E02                     __end_of_Setup:
  6717                           	opt stack 0
  6718                           tblptru	equ	0xFF8
  6719                           tblptrh	equ	0xFF7
  6720                           tblptrl	equ	0xFF6
  6721                           tablat	equ	0xFF5
  6722                           intcon	equ	0xFF2
  6723                           postinc0	equ	0xFEE
  6724                           wreg	equ	0xFE8
  6725                           postdec1	equ	0xFE5
  6726                           fsr1l	equ	0xFE1
  6727                           postinc2	equ	0xFDE
  6728                           postdec2	equ	0xFDD
  6729                           fsr2h	equ	0xFDA
  6730                           fsr2l	equ	0xFD9
  6731                           status	equ	0xFD8
  6732                           
  6733 ;; *************** function _sqrt *****************
  6734 ;; Defined at:
  6735 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcsqrt.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  a               3   47[BANK0 ] void 
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  x               3   63[BANK0 ] void 
  6740 ;;  q               3   60[BANK0 ] void 
  6741 ;;  z               3   56[BANK0 ] void 
  6742 ;;  og              3   53[BANK0 ] void 
  6743 ;;  i               1   59[BANK0 ] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  3   47[BANK0 ] unsigned char 
  6746 ;; Registers used:
  6747 ;;		wreg, status,2, status,0, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6753 ;;      Params:         0       3       0       0       0       0       0
  6754 ;;      Locals:         0      13       0       0       0       0       0
  6755 ;;      Temps:          0       3       0       0       0       0       0
  6756 ;;      Totals:         0      19       0       0       0       0       0
  6757 ;;Total ram usage:       19 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:    7
  6760 ;; This function calls:
  6761 ;;		___ftge
  6762 ;;		___ftmul
  6763 ;;		___ftsub
  6764 ;; This function is called by:
  6765 ;;		_Setup
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           	psect	text12
  6770  0039E0                     __ptext12:
  6771                           	opt stack 0
  6772  0039E0                     _sqrt:
  6773                           	opt stack 22
  6774                           
  6775                           ;incstack = 0
  6776  0039E0  0E00               	movlw	0
  6777  0039E2  0100               	movlb	0	; () banked
  6778  0039E4  6F62               	movwf	___ftge@ff1& (0+255),b
  6779  0039E6  0E00               	movlw	0
  6780  0039E8  0100               	movlb	0	; () banked
  6781  0039EA  6F63               	movwf	(___ftge@ff1+1)& (0+255),b
  6782  0039EC  0E00               	movlw	0
  6783  0039EE  0100               	movlb	0	; () banked
  6784  0039F0  6F64               	movwf	(___ftge@ff1+2)& (0+255),b
  6785  0039F2  C08F  F065         	movff	sqrt@a,___ftge@ff2
  6786  0039F6  C090  F066         	movff	sqrt@a+1,___ftge@ff2+1
  6787  0039FA  C091  F067         	movff	sqrt@a+2,___ftge@ff2+2
  6788  0039FE  ECE3  F023         	call	___ftge	;wreg free
  6789  003A02  0100               	movlb	0	; () banked
  6790  003A04  A0D8               	btfss	status,0,c
  6791  003A06  D012               	goto	l2112
  6792                           
  6793                           ; BSR set to: 0
  6794  003A08  0100               	movlb	0	; () banked
  6795  003A0A  AF91               	btfss	(sqrt@a+2)& (0+255),7,b
  6796  003A0C  D005               	goto	l2113
  6797                           
  6798                           ; BSR set to: 0
  6799  003A0E  0E00               	movlw	0
  6800  003A10  0101               	movlb	1	; () banked
  6801  003A12  6F93               	movwf	(_errno+1)& (0+255),b
  6802  003A14  0E21               	movlw	33
  6803  003A16  6F92               	movwf	_errno& (0+255),b
  6804  003A18                     l2113:
  6805  003A18  0E00               	movlw	0
  6806  003A1A  0100               	movlb	0	; () banked
  6807  003A1C  6F8F               	movwf	?_sqrt& (0+255),b
  6808  003A1E  0E00               	movlw	0
  6809  003A20  0100               	movlb	0	; () banked
  6810  003A22  6F90               	movwf	(?_sqrt+1)& (0+255),b
  6811  003A24  0E00               	movlw	0
  6812  003A26  0100               	movlb	0	; () banked
  6813  003A28  6F91               	movwf	(?_sqrt+2)& (0+255),b
  6814                           
  6815                           ; BSR set to: 0
  6816  003A2A  0012               	return	
  6817  003A2C                     l2112:
  6818                           
  6819                           ; BSR set to: 0
  6820  003A2C  C08F  F098         	movff	sqrt@a,sqrt@z
  6821  003A30  C090  F099         	movff	sqrt@a+1,sqrt@z+1
  6822  003A34  C091  F09A         	movff	sqrt@a+2,sqrt@z+2
  6823                           
  6824                           ; BSR set to: 0
  6825  003A38  C08F  F092         	movff	sqrt@a,??_sqrt
  6826  003A3C  C090  F093         	movff	sqrt@a+1,??_sqrt+1
  6827  003A40  C091  F094         	movff	sqrt@a+2,??_sqrt+2
  6828  003A44  0100               	movlb	0	; () banked
  6829  003A46  1F92               	comf	??_sqrt& (0+255),f,b
  6830  003A48  1F93               	comf	(??_sqrt+1)& (0+255),f,b
  6831  003A4A  1F94               	comf	(??_sqrt+2)& (0+255),f,b
  6832  003A4C  2B92               	incf	??_sqrt& (0+255),f,b
  6833  003A4E  0E00               	movlw	0
  6834  003A50  2393               	addwfc	(??_sqrt+1)& (0+255),f,b
  6835  003A52  2394               	addwfc	(??_sqrt+2)& (0+255),f,b
  6836  003A54  0EC8               	movlw	200
  6837  003A56  0100               	movlb	0	; () banked
  6838  003A58  2592               	addwf	??_sqrt& (0+255),w,b
  6839  003A5A  0100               	movlb	0	; () banked
  6840  003A5C  6F9F               	movwf	sqrt@x& (0+255),b
  6841  003A5E  0E6E               	movlw	110
  6842  003A60  0100               	movlb	0	; () banked
  6843  003A62  2193               	addwfc	(??_sqrt+1)& (0+255),w,b
  6844  003A64  0100               	movlb	0	; () banked
  6845  003A66  6FA0               	movwf	(sqrt@x+1)& (0+255),b
  6846  003A68  0EBE               	movlw	190
  6847  003A6A  0100               	movlb	0	; () banked
  6848  003A6C  2194               	addwfc	(??_sqrt+2)& (0+255),w,b
  6849  003A6E  0100               	movlb	0	; () banked
  6850  003A70  6FA1               	movwf	(sqrt@x+2)& (0+255),b
  6851                           
  6852                           ; BSR set to: 0
  6853  003A72  0100               	movlb	0	; () banked
  6854  003A74  90D8               	bcf	status,0,c
  6855  003A76  33A1               	rrcf	(sqrt@x+2)& (0+255),f,b
  6856  003A78  33A0               	rrcf	(sqrt@x+1)& (0+255),f,b
  6857  003A7A  339F               	rrcf	sqrt@x& (0+255),f,b
  6858                           
  6859                           ; BSR set to: 0
  6860  003A7C  0E00               	movlw	0
  6861  003A7E  0100               	movlb	0	; () banked
  6862  003A80  5F98               	subwf	sqrt@z& (0+255),f,b
  6863  003A82  0E80               	movlw	128
  6864  003A84  0100               	movlb	0	; () banked
  6865  003A86  5B99               	subwfb	(sqrt@z+1)& (0+255),f,b
  6866  003A88  0E00               	movlw	0
  6867  003A8A  0100               	movlb	0	; () banked
  6868  003A8C  5B9A               	subwfb	(sqrt@z+2)& (0+255),f,b
  6869                           
  6870                           ; BSR set to: 0
  6871  003A8E  0E04               	movlw	4
  6872  003A90  0100               	movlb	0	; () banked
  6873  003A92  6F9B               	movwf	sqrt@i& (0+255),b
  6874  003A94                     l9399:
  6875                           
  6876                           ; BSR set to: 0
  6877  003A94  C09F  F095         	movff	sqrt@x,sqrt@og
  6878  003A98  C0A0  F096         	movff	sqrt@x+1,sqrt@og+1
  6879  003A9C  C0A1  F097         	movff	sqrt@x+2,sqrt@og+2
  6880                           
  6881                           ; BSR set to: 0
  6882  003AA0  C09F  F064         	movff	sqrt@x,___ftmul@f1
  6883  003AA4  C0A0  F065         	movff	sqrt@x+1,___ftmul@f1+1
  6884  003AA8  C0A1  F066         	movff	sqrt@x+2,___ftmul@f1+2
  6885  003AAC  C098  F067         	movff	sqrt@z,___ftmul@f2
  6886  003AB0  C099  F068         	movff	sqrt@z+1,___ftmul@f2+1
  6887  003AB4  C09A  F069         	movff	sqrt@z+2,___ftmul@f2+2
  6888  003AB8  ECCF  F01D         	call	___ftmul	;wreg free
  6889  003ABC  C064  F09C         	movff	?___ftmul,sqrt@q
  6890  003AC0  C065  F09D         	movff	?___ftmul+1,sqrt@q+1
  6891  003AC4  C066  F09E         	movff	?___ftmul+2,sqrt@q+2
  6892  003AC8  C09C  F064         	movff	sqrt@q,___ftmul@f1
  6893  003ACC  C09D  F065         	movff	sqrt@q+1,___ftmul@f1+1
  6894  003AD0  C09E  F066         	movff	sqrt@q+2,___ftmul@f1+2
  6895  003AD4  C09F  F067         	movff	sqrt@x,___ftmul@f2
  6896  003AD8  C0A0  F068         	movff	sqrt@x+1,___ftmul@f2+1
  6897  003ADC  C0A1  F069         	movff	sqrt@x+2,___ftmul@f2+2
  6898  003AE0  ECCF  F01D         	call	___ftmul	;wreg free
  6899  003AE4  C064  F09C         	movff	?___ftmul,sqrt@q
  6900  003AE8  C065  F09D         	movff	?___ftmul+1,sqrt@q+1
  6901  003AEC  C066  F09E         	movff	?___ftmul+2,sqrt@q+2
  6902  003AF0  C09C  F064         	movff	sqrt@q,___ftmul@f1
  6903  003AF4  C09D  F065         	movff	sqrt@q+1,___ftmul@f1+1
  6904  003AF8  C09E  F066         	movff	sqrt@q+2,___ftmul@f1+2
  6905  003AFC  C09F  F067         	movff	sqrt@x,___ftmul@f2
  6906  003B00  C0A0  F068         	movff	sqrt@x+1,___ftmul@f2+1
  6907  003B04  C0A1  F069         	movff	sqrt@x+2,___ftmul@f2+2
  6908  003B08  ECCF  F01D         	call	___ftmul	;wreg free
  6909  003B0C  C064  F09C         	movff	?___ftmul,sqrt@q
  6910  003B10  C065  F09D         	movff	?___ftmul+1,sqrt@q+1
  6911  003B14  C066  F09E         	movff	?___ftmul+2,sqrt@q+2
  6912  003B18  C09F  F064         	movff	sqrt@x,___ftmul@f1
  6913  003B1C  C0A0  F065         	movff	sqrt@x+1,___ftmul@f1+1
  6914  003B20  C0A1  F066         	movff	sqrt@x+2,___ftmul@f1+2
  6915  003B24  0E00               	movlw	0
  6916  003B26  0100               	movlb	0	; () banked
  6917  003B28  6F67               	movwf	___ftmul@f2& (0+255),b
  6918  003B2A  0EC0               	movlw	192
  6919  003B2C  0100               	movlb	0	; () banked
  6920  003B2E  6F68               	movwf	(___ftmul@f2+1)& (0+255),b
  6921  003B30  0E3F               	movlw	63
  6922  003B32  0100               	movlb	0	; () banked
  6923  003B34  6F69               	movwf	(___ftmul@f2+2)& (0+255),b
  6924  003B36  ECCF  F01D         	call	___ftmul	;wreg free
  6925  003B3A  C064  F09F         	movff	?___ftmul,sqrt@x
  6926  003B3E  C065  F0A0         	movff	?___ftmul+1,sqrt@x+1
  6927  003B42  C066  F0A1         	movff	?___ftmul+2,sqrt@x+2
  6928  003B46  C09F  F089         	movff	sqrt@x,___ftsub@f1
  6929  003B4A  C0A0  F08A         	movff	sqrt@x+1,___ftsub@f1+1
  6930  003B4E  C0A1  F08B         	movff	sqrt@x+2,___ftsub@f1+2
  6931  003B52  C09C  F08C         	movff	sqrt@q,___ftsub@f2
  6932  003B56  C09D  F08D         	movff	sqrt@q+1,___ftsub@f2+1
  6933  003B5A  C09E  F08E         	movff	sqrt@q+2,___ftsub@f2+2
  6934  003B5E  EC64  F02A         	call	___ftsub	;wreg free
  6935  003B62  C089  F09F         	movff	?___ftsub,sqrt@x
  6936  003B66  C08A  F0A0         	movff	?___ftsub+1,sqrt@x+1
  6937  003B6A  C08B  F0A1         	movff	?___ftsub+2,sqrt@x+2
  6938  003B6E  0100               	movlb	0	; () banked
  6939  003B70  2F9B               	decfsz	sqrt@i& (0+255),f,b
  6940  003B72  D790               	goto	l9399
  6941                           
  6942                           ; BSR set to: 0
  6943                           
  6944                           ; BSR set to: 0
  6945  003B74  C09F  F064         	movff	sqrt@x,___ftmul@f1
  6946  003B78  C0A0  F065         	movff	sqrt@x+1,___ftmul@f1+1
  6947  003B7C  C0A1  F066         	movff	sqrt@x+2,___ftmul@f1+2
  6948  003B80  C08F  F067         	movff	sqrt@a,___ftmul@f2
  6949  003B84  C090  F068         	movff	sqrt@a+1,___ftmul@f2+1
  6950  003B88  C091  F069         	movff	sqrt@a+2,___ftmul@f2+2
  6951  003B8C  ECCF  F01D         	call	___ftmul	;wreg free
  6952  003B90  C064  F08F         	movff	?___ftmul,?_sqrt
  6953  003B94  C065  F090         	movff	?___ftmul+1,?_sqrt+1
  6954  003B98  C066  F091         	movff	?___ftmul+2,?_sqrt+2
  6955  003B9C  0012               	return	
  6956  003B9E                     __end_of_sqrt:
  6957                           	opt stack 0
  6958                           tblptru	equ	0xFF8
  6959                           tblptrh	equ	0xFF7
  6960                           tblptrl	equ	0xFF6
  6961                           tablat	equ	0xFF5
  6962                           intcon	equ	0xFF2
  6963                           postinc0	equ	0xFEE
  6964                           wreg	equ	0xFE8
  6965                           postdec1	equ	0xFE5
  6966                           fsr1l	equ	0xFE1
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _readByte *****************
  6974 ;; Defined at:
  6975 ;;		line 638 in file "BNO055.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  address         1    wreg     unsigned char 
  6978 ;;  subAddress      1    0[BANK0 ] unsigned char 
  6979 ;; Auto vars:     Size  Location     Type
  6980 ;;  address         1    4[BANK0 ] unsigned char 
  6981 ;;  Data            3    1[BANK0 ] unsigned char [3]
  6982 ;;  status          1    6[BANK0 ] enum E8001
  6983 ;;  timeOut         1    5[BANK0 ] unsigned char 
  6984 ;;  data            1    0        unsigned char 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  1    wreg      unsigned char 
  6987 ;; Registers used:
  6988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6994 ;;      Params:         0       1       0       0       0       0       0
  6995 ;;      Locals:         0       6       0       0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0
  6997 ;;      Totals:         0       7       0       0       0       0       0
  6998 ;;Total ram usage:        7 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    6
  7001 ;; This function calls:
  7002 ;;		_I2C1_MasterRead
  7003 ;;		_I2C1_MasterWrite
  7004 ;; This function is called by:
  7005 ;;		_Setup
  7006 ;;		_loop
  7007 ;;		_readGyroTempData
  7008 ;; This function uses a non-reentrant model
  7009 ;;
  7010                           
  7011                           	psect	text13
  7012  004D68                     __ptext13:
  7013                           	opt stack 0
  7014  004D68                     _readByte:
  7015                           	opt stack 22
  7016                           
  7017                           ;incstack = 0
  7018                           ;readByte@address stored from wreg
  7019  004D68  0100               	movlb	0	; () banked
  7020  004D6A  6F64               	movwf	readByte@address& (0+255),b
  7021                           
  7022                           ;BNO055.c: 640: char data;
  7023                           ;BNO055.c: 648: I2C1_MESSAGE_STATUS status;
  7024                           ;BNO055.c: 649: char Data[3];
  7025                           ;BNO055.c: 650: Data[0] = subAddress;
  7026  004D6C  C060  F061         	movff	readByte@subAddress,readByte@Data
  7027                           
  7028                           ;BNO055.c: 651: char timeOut = 0;
  7029  004D70  0E00               	movlw	0
  7030  004D72  0100               	movlb	0	; () banked
  7031  004D74  6F65               	movwf	readByte@timeOut& (0+255),b
  7032                           
  7033                           ;BNO055.c: 652: while(status != I2C1_MESSAGE_FAIL)
  7034  004D76  D020               	goto	l9167
  7035  004D78                     l9151:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;BNO055.c: 653: {
  7039                           ;BNO055.c: 655: I2C1_MasterWrite(Data,1,address,&status);
  7040  004D78  0E61               	movlw	low readByte@Data
  7041  004D7A  6E24               	movwf	I2C1_MasterWrite@pdata,c
  7042  004D7C  0E00               	movlw	high readByte@Data
  7043  004D7E  6E25               	movwf	I2C1_MasterWrite@pdata+1,c
  7044  004D80  0E01               	movlw	1
  7045  004D82  6E26               	movwf	I2C1_MasterWrite@length,c
  7046  004D84  C064  F027         	movff	readByte@address,I2C1_MasterWrite@address
  7047  004D88  6A28               	clrf	I2C1_MasterWrite@address+1,c
  7048  004D8A  0E66               	movlw	low readByte@status
  7049  004D8C  6E29               	movwf	I2C1_MasterWrite@pflag,c
  7050  004D8E  0E00               	movlw	high readByte@status
  7051  004D90  6E2A               	movwf	I2C1_MasterWrite@pflag+1,c
  7052  004D92  EC18  F02A         	call	_I2C1_MasterWrite	;wreg free
  7053  004D96                     l9153:
  7054  004D96  0E02               	movlw	2
  7055  004D98  0100               	movlb	0	; () banked
  7056  004D9A  1966               	xorwf	readByte@status& (0+255),w,b
  7057  004D9C  B4D8               	btfsc	status,2,c
  7058  004D9E  D7FB               	goto	l9153
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;BNO055.c: 660: if (status == I2C1_MESSAGE_COMPLETE)
  7062                           
  7063                           ; BSR set to: 0
  7064  004DA0  0100               	movlb	0	; () banked
  7065  004DA2  5166               	movf	readByte@status& (0+255),w,b
  7066  004DA4  0100               	movlb	0	; () banked
  7067  004DA6  B4D8               	btfsc	status,2,c
  7068  004DA8  D00B               	goto	l9169
  7069                           
  7070                           ; BSR set to: 0
  7071                           ;BNO055.c: 670: if (timeOut == 2)
  7072                           
  7073                           ; BSR set to: 0
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;BNO055.c: 661: break;
  7077  004DAA  0E02               	movlw	2
  7078  004DAC  0100               	movlb	0	; () banked
  7079  004DAE  1965               	xorwf	readByte@timeOut& (0+255),w,b
  7080  004DB0  B4D8               	btfsc	status,2,c
  7081  004DB2  D006               	goto	l9169
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;BNO055.c: 672: else
  7085                           ;BNO055.c: 673: timeOut++;
  7086                           
  7087                           ; BSR set to: 0
  7088                           
  7089                           ; BSR set to: 0
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;BNO055.c: 671: break;
  7093  004DB4  0100               	movlb	0	; () banked
  7094  004DB6  2B65               	incf	readByte@timeOut& (0+255),f,b
  7095  004DB8                     l9167:
  7096                           
  7097                           ; BSR set to: 0
  7098  004DB8  0100               	movlb	0	; () banked
  7099  004DBA  0566               	decf	readByte@status& (0+255),w,b
  7100  004DBC  A4D8               	btfss	status,2,c
  7101  004DBE  D7DC               	goto	l9151
  7102  004DC0                     l9169:
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;BNO055.c: 674: }
  7106                           ;BNO055.c: 675: timeOut = 0;
  7107  004DC0  0E00               	movlw	0
  7108  004DC2  0100               	movlb	0	; () banked
  7109  004DC4  6F65               	movwf	readByte@timeOut& (0+255),b
  7110                           
  7111                           ;BNO055.c: 676: while(status != I2C1_MESSAGE_FAIL)
  7112  004DC6  D020               	goto	l9187
  7113  004DC8                     l9171:
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;BNO055.c: 677: {
  7117                           ;BNO055.c: 679: I2C1_MasterRead( Data,
  7118                           ;BNO055.c: 680: 1,
  7119                           ;BNO055.c: 681: address,
  7120                           ;BNO055.c: 682: &status);
  7121  004DC8  0E61               	movlw	low readByte@Data
  7122  004DCA  6E24               	movwf	I2C1_MasterRead@pdata,c
  7123  004DCC  0E00               	movlw	high readByte@Data
  7124  004DCE  6E25               	movwf	I2C1_MasterRead@pdata+1,c
  7125  004DD0  0E01               	movlw	1
  7126  004DD2  6E26               	movwf	I2C1_MasterRead@length,c
  7127  004DD4  C064  F027         	movff	readByte@address,I2C1_MasterRead@address
  7128  004DD8  6A28               	clrf	I2C1_MasterRead@address+1,c
  7129  004DDA  0E66               	movlw	low readByte@status
  7130  004DDC  6E29               	movwf	I2C1_MasterRead@pflag,c
  7131  004DDE  0E00               	movlw	high readByte@status
  7132  004DE0  6E2A               	movwf	I2C1_MasterRead@pflag+1,c
  7133  004DE2  EC3E  F02A         	call	_I2C1_MasterRead	;wreg free
  7134  004DE6                     l9173:
  7135  004DE6  0E02               	movlw	2
  7136  004DE8  0100               	movlb	0	; () banked
  7137  004DEA  1966               	xorwf	readByte@status& (0+255),w,b
  7138  004DEC  B4D8               	btfsc	status,2,c
  7139  004DEE  D7FB               	goto	l9173
  7140                           
  7141                           ; BSR set to: 0
  7142                           ;BNO055.c: 687: if (status == I2C1_MESSAGE_COMPLETE)
  7143                           
  7144                           ; BSR set to: 0
  7145  004DF0  0100               	movlb	0	; () banked
  7146  004DF2  5166               	movf	readByte@status& (0+255),w,b
  7147  004DF4  0100               	movlb	0	; () banked
  7148  004DF6  B4D8               	btfsc	status,2,c
  7149  004DF8  D00B               	goto	l9189
  7150                           
  7151                           ; BSR set to: 0
  7152                           ;BNO055.c: 697: if (timeOut == 2)
  7153                           
  7154                           ; BSR set to: 0
  7155                           
  7156                           ; BSR set to: 0
  7157                           ;BNO055.c: 688: break;
  7158  004DFA  0E02               	movlw	2
  7159  004DFC  0100               	movlb	0	; () banked
  7160  004DFE  1965               	xorwf	readByte@timeOut& (0+255),w,b
  7161  004E00  B4D8               	btfsc	status,2,c
  7162  004E02  D006               	goto	l9189
  7163                           
  7164                           ; BSR set to: 0
  7165                           ;BNO055.c: 699: else
  7166                           ;BNO055.c: 700: timeOut++;
  7167                           
  7168                           ; BSR set to: 0
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;BNO055.c: 698: break;
  7174  004E04  0100               	movlb	0	; () banked
  7175  004E06  2B65               	incf	readByte@timeOut& (0+255),f,b
  7176  004E08                     l9187:
  7177                           
  7178                           ; BSR set to: 0
  7179  004E08  0100               	movlb	0	; () banked
  7180  004E0A  0566               	decf	readByte@status& (0+255),w,b
  7181  004E0C  A4D8               	btfss	status,2,c
  7182  004E0E  D7DC               	goto	l9171
  7183  004E10                     l9189:
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;BNO055.c: 701: }
  7187                           ;BNO055.c: 702: return Data[0];
  7188  004E10  0100               	movlb	0	; () banked
  7189  004E12  5161               	movf	readByte@Data& (0+255),w,b
  7190  004E14  0012               	return	
  7191  004E16                     __end_of_readByte:
  7192                           	opt stack 0
  7193                           tblptru	equ	0xFF8
  7194                           tblptrh	equ	0xFF7
  7195                           tblptrl	equ	0xFF6
  7196                           tablat	equ	0xFF5
  7197                           intcon	equ	0xFF2
  7198                           postinc0	equ	0xFEE
  7199                           wreg	equ	0xFE8
  7200                           postdec1	equ	0xFE5
  7201                           fsr1l	equ	0xFE1
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _magCalBNO055 *****************
  7209 ;; Defined at:
  7210 ;;		line 526 in file "BNO055.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;  dest1           2  104[BANK0 ] PTR float 
  7213 ;;		 -> magBias(9), 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;  jj              2  149[BANK0 ] int 
  7216 ;;  mag_temp        6  131[BANK0 ] int [3]
  7217 ;;  mag_bias       12  137[BANK0 ] long [3]
  7218 ;;  data            6  111[BANK0 ] unsigned char [6]
  7219 ;;  mag_min         6  124[BANK0 ] int [3]
  7220 ;;  mag_max         6  118[BANK0 ] int [3]
  7221 ;;  ii              1  130[BANK0 ] unsigned char 
  7222 ;;  sample_count    1  117[BANK0 ] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      void 
  7225 ;; Registers used:
  7226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7232 ;;      Params:         0       2       0       0       0       0       0
  7233 ;;      Locals:         0      40       0       0       0       0       0
  7234 ;;      Temps:          0       5       0       0       0       0       0
  7235 ;;      Totals:         0      47       0       0       0       0       0
  7236 ;;Total ram usage:       47 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    9
  7239 ;; This function calls:
  7240 ;;		_Delay
  7241 ;;		___altoft
  7242 ;;		___awdiv
  7243 ;;		___ftdiv
  7244 ;;		_printf
  7245 ;;		_readBytes
  7246 ;;		_writeByte
  7247 ;; This function is called by:
  7248 ;;		_Setup
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252                           	psect	text14
  7253  002402                     __ptext14:
  7254                           	opt stack 0
  7255  002402                     _magCalBNO055:
  7256                           	opt stack 20
  7257                           
  7258                           ;BNO055.c: 527: char data[6];
  7259                           ;BNO055.c: 528: char ii = 0, sample_count = 0;
  7260                           
  7261                           ; BSR set to: 0
  7262                           ;incstack = 0
  7263  002402  0E00               	movlw	0
  7264  002404  0100               	movlb	0	; () banked
  7265  002406  6FE2               	movwf	magCalBNO055@ii& (0+255),b
  7266  002408  0E00               	movlw	0
  7267  00240A  0100               	movlb	0	; () banked
  7268  00240C  6FD5               	movwf	magCalBNO055@sample_count& (0+255),b
  7269                           
  7270                           ; BSR set to: 0
  7271                           ;BNO055.c: 529: long mag_bias[3] = {0, 0, 0};
  7272  00240E  EE22  F018         	lfsr	2,magCalBNO055@F8233
  7273  002412  EE10  F0E9         	lfsr	1,magCalBNO055@mag_bias
  7274  002416  0E0B               	movlw	11
  7275  002418                     u10971:
  7276  002418  CFDB FFE3          	movff	plusw2,plusw1
  7277  00241C  06E8               	decf	wreg,f,c
  7278  00241E  E2FC               	bc	u10971
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;BNO055.c: 530: int mag_max[3] = {0, 0, 0}, mag_min[3] = {0, 0, 0};
  7282  002420  EE22  F04D         	lfsr	2,magCalBNO055@F8235
  7283  002424  EE10  F0D6         	lfsr	1,magCalBNO055@mag_max
  7284  002428  0E05               	movlw	5
  7285  00242A                     u10981:
  7286  00242A  CFDB FFE3          	movff	plusw2,plusw1
  7287  00242E  06E8               	decf	wreg,f,c
  7288  002430  E2FC               	bc	u10981
  7289                           
  7290                           ; BSR set to: 0
  7291  002432  EE22  F053         	lfsr	2,magCalBNO055@F8237
  7292  002436  EE10  F0DC         	lfsr	1,magCalBNO055@mag_min
  7293  00243A  0E05               	movlw	5
  7294  00243C                     u10991:
  7295  00243C  CFDB FFE3          	movff	plusw2,plusw1
  7296  002440  06E8               	decf	wreg,f,c
  7297  002442  E2FC               	bc	u10991
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;BNO055.c: 532: printf("Mag Calibration: Wave device in a figure eight until done!");
  7301  002444  0ED1               	movlw	low STR_51
  7302  002446  0100               	movlb	0	; () banked
  7303  002448  6F8F               	movwf	printf@f& (0+255),b
  7304  00244A  0E79               	movlw	high STR_51
  7305  00244C  0100               	movlb	0	; () banked
  7306  00244E  6F90               	movwf	(printf@f+1)& (0+255),b
  7307  002450  EC70  F000         	call	_printf	;wreg free
  7308                           
  7309                           ;BNO055.c: 533: Delay(4000);
  7310  002454  0E0F               	movlw	15
  7311  002456  6E1C               	movwf	Delay@wait+1,c
  7312  002458  0EA0               	movlw	160
  7313  00245A  6E1B               	movwf	Delay@wait,c
  7314  00245C  EC47  F02B         	call	_Delay	;wreg free
  7315                           
  7316                           ;BNO055.c: 536: writeByte(0x29, 0x07, 0x00);
  7317  002460  0E07               	movlw	7
  7318  002462  0100               	movlb	0	; () banked
  7319  002464  6F60               	movwf	writeByte@subAddress& (0+255),b
  7320  002466  0E00               	movlw	0
  7321  002468  0100               	movlb	0	; () banked
  7322  00246A  6F61               	movwf	writeByte@data& (0+255),b
  7323  00246C  0E29               	movlw	41
  7324  00246E  EC8E  F029         	call	_writeByte
  7325                           
  7326                           ;BNO055.c: 538: writeByte(0x29, 0x3D, CONFIGMODE );
  7327  002472  0E3D               	movlw	61
  7328  002474  0100               	movlb	0	; () banked
  7329  002476  6F60               	movwf	writeByte@subAddress& (0+255),b
  7330  002478  0E00               	movlw	0
  7331  00247A  0100               	movlb	0	; () banked
  7332  00247C  6F61               	movwf	writeByte@data& (0+255),b
  7333  00247E  0E29               	movlw	41
  7334  002480  EC8E  F029         	call	_writeByte
  7335                           
  7336                           ;BNO055.c: 539: Delay(25);
  7337  002484  0E00               	movlw	0
  7338  002486  6E1C               	movwf	Delay@wait+1,c
  7339  002488  0E19               	movlw	25
  7340  00248A  6E1B               	movwf	Delay@wait,c
  7341  00248C  EC47  F02B         	call	_Delay	;wreg free
  7342                           
  7343                           ;BNO055.c: 540: writeByte(0x29, 0x3D, AMG );
  7344  002490  0E3D               	movlw	61
  7345  002492  0100               	movlb	0	; () banked
  7346  002494  6F60               	movwf	writeByte@subAddress& (0+255),b
  7347  002496  0E07               	movlw	7
  7348  002498  0100               	movlb	0	; () banked
  7349  00249A  6F61               	movwf	writeByte@data& (0+255),b
  7350  00249C  0E29               	movlw	41
  7351  00249E  EC8E  F029         	call	_writeByte
  7352                           
  7353                           ;BNO055.c: 543: sample_count = 256;
  7354  0024A2  0E00               	movlw	0
  7355  0024A4  0100               	movlb	0	; () banked
  7356  0024A6  6FD5               	movwf	magCalBNO055@sample_count& (0+255),b
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;BNO055.c: 544: for(ii = 0; ii < sample_count; ii++) {
  7360  0024A8  0E00               	movlw	0
  7361  0024AA  0100               	movlb	0	; () banked
  7362  0024AC  6FE2               	movwf	magCalBNO055@ii& (0+255),b
  7363  0024AE  D10A               	goto	l9601
  7364  0024B0                     l9565:
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;BNO055.c: 545: int mag_temp[3] = {0, 0, 0};
  7368  0024B0  EE22  F059         	lfsr	2,magCalBNO055@F8239
  7369  0024B4  EE10  F0E3         	lfsr	1,magCalBNO055@mag_temp
  7370  0024B8  0E05               	movlw	5
  7371  0024BA                     u11001:
  7372  0024BA  CFDB FFE3          	movff	plusw2,plusw1
  7373  0024BE  06E8               	decf	wreg,f,c
  7374  0024C0  E2FC               	bc	u11001
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;BNO055.c: 546: readBytes(0x29, 0x0E, 6, &data[0]);
  7378  0024C2  0E0E               	movlw	14
  7379  0024C4  0100               	movlb	0	; () banked
  7380  0024C6  6F60               	movwf	readBytes@subAddress& (0+255),b
  7381  0024C8  0E06               	movlw	6
  7382  0024CA  0100               	movlb	0	; () banked
  7383  0024CC  6F61               	movwf	readBytes@count& (0+255),b
  7384  0024CE  0ECF               	movlw	low magCalBNO055@data
  7385  0024D0  0100               	movlb	0	; () banked
  7386  0024D2  6F62               	movwf	readBytes@dest& (0+255),b
  7387  0024D4  0E00               	movlw	high magCalBNO055@data
  7388  0024D6  0100               	movlb	0	; () banked
  7389  0024D8  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  7390  0024DA  0E29               	movlw	41
  7391  0024DC  EC62  F027         	call	_readBytes
  7392                           
  7393                           ;BNO055.c: 547: mag_temp[0] = (int) (((int)data[1] << 8) | data[0]) ;
  7394  0024E0  0100               	movlb	0	; () banked
  7395  0024E2  51CF               	movf	magCalBNO055@data& (0+255),w,b
  7396  0024E4  C0D0  F0CA         	movff	magCalBNO055@data+1,??_magCalBNO055
  7397  0024E8  0100               	movlb	0	; () banked
  7398  0024EA  6BCB               	clrf	(??_magCalBNO055+1)& (0+255),b
  7399  0024EC  C0CA  F0CB         	movff	??_magCalBNO055,??_magCalBNO055+1
  7400  0024F0  0100               	movlb	0	; () banked
  7401  0024F2  6BCA               	clrf	??_magCalBNO055& (0+255),b
  7402  0024F4  0100               	movlb	0	; () banked
  7403  0024F6  11CA               	iorwf	??_magCalBNO055& (0+255),w,b
  7404  0024F8  0100               	movlb	0	; () banked
  7405  0024FA  6FE3               	movwf	magCalBNO055@mag_temp& (0+255),b
  7406  0024FC  0100               	movlb	0	; () banked
  7407  0024FE  51CB               	movf	(??_magCalBNO055+1)& (0+255),w,b
  7408  002500  0100               	movlb	0	; () banked
  7409  002502  6FE4               	movwf	(magCalBNO055@mag_temp+1)& (0+255),b
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;BNO055.c: 548: mag_temp[1] = (int) (((int)data[3] << 8) | data[2]) ;
  7413  002504  0100               	movlb	0	; () banked
  7414  002506  51D1               	movf	(magCalBNO055@data+2)& (0+255),w,b
  7415  002508  C0D2  F0CA         	movff	magCalBNO055@data+3,??_magCalBNO055
  7416  00250C  0100               	movlb	0	; () banked
  7417  00250E  6BCB               	clrf	(??_magCalBNO055+1)& (0+255),b
  7418  002510  C0CA  F0CB         	movff	??_magCalBNO055,??_magCalBNO055+1
  7419  002514  0100               	movlb	0	; () banked
  7420  002516  6BCA               	clrf	??_magCalBNO055& (0+255),b
  7421  002518  0100               	movlb	0	; () banked
  7422  00251A  11CA               	iorwf	??_magCalBNO055& (0+255),w,b
  7423  00251C  0100               	movlb	0	; () banked
  7424  00251E  6FE5               	movwf	(magCalBNO055@mag_temp+2)& (0+255),b
  7425  002520  0100               	movlb	0	; () banked
  7426  002522  51CB               	movf	(??_magCalBNO055+1)& (0+255),w,b
  7427  002524  0100               	movlb	0	; () banked
  7428  002526  6FE6               	movwf	(magCalBNO055@mag_temp+3)& (0+255),b
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;BNO055.c: 549: mag_temp[2] = (int) (((int)data[5] << 8) | data[4]) ;
  7432  002528  0100               	movlb	0	; () banked
  7433  00252A  51D3               	movf	(magCalBNO055@data+4)& (0+255),w,b
  7434  00252C  C0D4  F0CA         	movff	magCalBNO055@data+5,??_magCalBNO055
  7435  002530  0100               	movlb	0	; () banked
  7436  002532  6BCB               	clrf	(??_magCalBNO055+1)& (0+255),b
  7437  002534  C0CA  F0CB         	movff	??_magCalBNO055,??_magCalBNO055+1
  7438  002538  0100               	movlb	0	; () banked
  7439  00253A  6BCA               	clrf	??_magCalBNO055& (0+255),b
  7440  00253C  0100               	movlb	0	; () banked
  7441  00253E  11CA               	iorwf	??_magCalBNO055& (0+255),w,b
  7442  002540  0100               	movlb	0	; () banked
  7443  002542  6FE7               	movwf	(magCalBNO055@mag_temp+4)& (0+255),b
  7444  002544  0100               	movlb	0	; () banked
  7445  002546  51CB               	movf	(??_magCalBNO055+1)& (0+255),w,b
  7446  002548  0100               	movlb	0	; () banked
  7447  00254A  6FE8               	movwf	(magCalBNO055@mag_temp+5)& (0+255),b
  7448                           
  7449                           ; BSR set to: 0
  7450                           ;BNO055.c: 550: for (int jj = 0; jj < 3; jj++) {
  7451  00254C  0E00               	movlw	0
  7452  00254E  0100               	movlb	0	; () banked
  7453  002550  6FF6               	movwf	(magCalBNO055@jj+1)& (0+255),b
  7454  002552  0E00               	movlw	0
  7455  002554  6FF5               	movwf	magCalBNO055@jj& (0+255),b
  7456                           
  7457                           ; BSR set to: 0
  7458  002556  0100               	movlb	0	; () banked
  7459  002558  BFF6               	btfsc	(magCalBNO055@jj+1)& (0+255),7,b
  7460  00255A  D00A               	goto	l9581
  7461  00255C  0100               	movlb	0	; () banked
  7462  00255E  51F6               	movf	(magCalBNO055@jj+1)& (0+255),w,b
  7463  002560  E106               	bnz	u11010
  7464  002562  0E03               	movlw	3
  7465  002564  0100               	movlb	0	; () banked
  7466  002566  5DF5               	subwf	magCalBNO055@jj& (0+255),w,b
  7467  002568  B0D8               	btfsc	status,0,c
  7468  00256A  D0A4               	goto	l9597
  7469  00256C  D001               	goto	l9581
  7470  00256E                     u11010:
  7471                           
  7472                           ; BSR set to: 0
  7473  00256E  D0A2               	goto	l9597
  7474  002570                     l9581:
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;BNO055.c: 551: if (ii == 0) {
  7478  002570  0100               	movlb	0	; () banked
  7479  002572  51E2               	movf	magCalBNO055@ii& (0+255),w,b
  7480  002574  0100               	movlb	0	; () banked
  7481  002576  A4D8               	btfss	status,2,c
  7482  002578  D01B               	goto	l9585
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;BNO055.c: 552: mag_max[jj] = mag_temp[jj];
  7486  00257A  90D8               	bcf	status,0,c
  7487  00257C  0100               	movlb	0	; () banked
  7488  00257E  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7489  002580  6ED9               	movwf	fsr2l,c
  7490  002582  0100               	movlb	0	; () banked
  7491  002584  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7492  002586  6EDA               	movwf	fsr2h,c
  7493  002588  0EE3               	movlw	low magCalBNO055@mag_temp
  7494  00258A  26D9               	addwf	fsr2l,f,c
  7495  00258C  0E00               	movlw	high magCalBNO055@mag_temp
  7496  00258E  22DA               	addwfc	fsr2h,f,c
  7497  002590  90D8               	bcf	status,0,c
  7498  002592  0100               	movlb	0	; () banked
  7499  002594  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7500  002596  6EE1               	movwf	fsr1l,c
  7501  002598  0100               	movlb	0	; () banked
  7502  00259A  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7503  00259C  6EE2               	movwf	fsr1h,c
  7504  00259E  0ED6               	movlw	low magCalBNO055@mag_max
  7505  0025A0  26E1               	addwf	fsr1l,f,c
  7506  0025A2  0E00               	movlw	high magCalBNO055@mag_max
  7507  0025A4  22E2               	addwfc	fsr1h,f,c
  7508  0025A6  CFDE FFE6          	movff	postinc2,postinc1
  7509  0025AA  CFDD FFE5          	movff	postdec2,postdec1
  7510  0025AE  D05E               	goto	l9591
  7511  0025B0                     l9585:
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;BNO055.c: 555: if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
  7515  0025B0  90D8               	bcf	status,0,c
  7516  0025B2  0100               	movlb	0	; () banked
  7517  0025B4  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7518  0025B6  6ED9               	movwf	fsr2l,c
  7519  0025B8  0100               	movlb	0	; () banked
  7520  0025BA  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7521  0025BC  6EDA               	movwf	fsr2h,c
  7522  0025BE  0EE3               	movlw	low magCalBNO055@mag_temp
  7523  0025C0  26D9               	addwf	fsr2l,f,c
  7524  0025C2  0E00               	movlw	high magCalBNO055@mag_temp
  7525  0025C4  22DA               	addwfc	fsr2h,f,c
  7526  0025C6  90D8               	bcf	status,0,c
  7527  0025C8  0100               	movlb	0	; () banked
  7528  0025CA  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7529  0025CC  6EE1               	movwf	fsr1l,c
  7530  0025CE  0100               	movlb	0	; () banked
  7531  0025D0  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7532  0025D2  6EE2               	movwf	fsr1h,c
  7533  0025D4  0ED6               	movlw	low magCalBNO055@mag_max
  7534  0025D6  26E1               	addwf	fsr1l,f,c
  7535  0025D8  0E00               	movlw	high magCalBNO055@mag_max
  7536  0025DA  22E2               	addwfc	fsr1h,f,c
  7537  0025DC  50DE               	movf	postinc2,w,c
  7538  0025DE  5CE6               	subwf	postinc1,w,c
  7539  0025E0  50E6               	movf	postinc1,w,c
  7540  0025E2  0A80               	xorlw	128
  7541  0025E4  0100               	movlb	0	; () banked
  7542  0025E6  6FCE               	movwf	(??_magCalBNO055+4)& (0+255),b
  7543  0025E8  50DE               	movf	postinc2,w,c
  7544  0025EA  0A80               	xorlw	128
  7545  0025EC  0100               	movlb	0	; () banked
  7546  0025EE  59CE               	subwfb	(??_magCalBNO055+4)& (0+255),w,b
  7547  0025F0  B0D8               	btfsc	status,0,c
  7548  0025F2  D01A               	goto	l9589
  7549                           
  7550                           ; BSR set to: 0
  7551  0025F4  90D8               	bcf	status,0,c
  7552  0025F6  0100               	movlb	0	; () banked
  7553  0025F8  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7554  0025FA  6ED9               	movwf	fsr2l,c
  7555  0025FC  0100               	movlb	0	; () banked
  7556  0025FE  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7557  002600  6EDA               	movwf	fsr2h,c
  7558  002602  0EE3               	movlw	low magCalBNO055@mag_temp
  7559  002604  26D9               	addwf	fsr2l,f,c
  7560  002606  0E00               	movlw	high magCalBNO055@mag_temp
  7561  002608  22DA               	addwfc	fsr2h,f,c
  7562  00260A  90D8               	bcf	status,0,c
  7563  00260C  0100               	movlb	0	; () banked
  7564  00260E  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7565  002610  6EE1               	movwf	fsr1l,c
  7566  002612  0100               	movlb	0	; () banked
  7567  002614  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7568  002616  6EE2               	movwf	fsr1h,c
  7569  002618  0ED6               	movlw	low magCalBNO055@mag_max
  7570  00261A  26E1               	addwf	fsr1l,f,c
  7571  00261C  0E00               	movlw	high magCalBNO055@mag_max
  7572  00261E  22E2               	addwfc	fsr1h,f,c
  7573  002620  CFDE FFE6          	movff	postinc2,postinc1
  7574  002624  CFDD FFE5          	movff	postdec2,postdec1
  7575  002628                     l9589:
  7576                           
  7577                           ; BSR set to: 0
  7578                           ;BNO055.c: 556: if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
  7579  002628  90D8               	bcf	status,0,c
  7580  00262A  0100               	movlb	0	; () banked
  7581  00262C  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7582  00262E  6ED9               	movwf	fsr2l,c
  7583  002630  0100               	movlb	0	; () banked
  7584  002632  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7585  002634  6EDA               	movwf	fsr2h,c
  7586  002636  0EDC               	movlw	low magCalBNO055@mag_min
  7587  002638  26D9               	addwf	fsr2l,f,c
  7588  00263A  0E00               	movlw	high magCalBNO055@mag_min
  7589  00263C  22DA               	addwfc	fsr2h,f,c
  7590  00263E  90D8               	bcf	status,0,c
  7591  002640  0100               	movlb	0	; () banked
  7592  002642  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7593  002644  6EE1               	movwf	fsr1l,c
  7594  002646  0100               	movlb	0	; () banked
  7595  002648  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7596  00264A  6EE2               	movwf	fsr1h,c
  7597  00264C  0EE3               	movlw	low magCalBNO055@mag_temp
  7598  00264E  26E1               	addwf	fsr1l,f,c
  7599  002650  0E00               	movlw	high magCalBNO055@mag_temp
  7600  002652  22E2               	addwfc	fsr1h,f,c
  7601  002654  50DE               	movf	postinc2,w,c
  7602  002656  5CE6               	subwf	postinc1,w,c
  7603  002658  50E6               	movf	postinc1,w,c
  7604  00265A  0A80               	xorlw	128
  7605  00265C  0100               	movlb	0	; () banked
  7606  00265E  6FCE               	movwf	(??_magCalBNO055+4)& (0+255),b
  7607  002660  50DE               	movf	postinc2,w,c
  7608  002662  0A80               	xorlw	128
  7609  002664  0100               	movlb	0	; () banked
  7610  002666  59CE               	subwfb	(??_magCalBNO055+4)& (0+255),w,b
  7611  002668  B0D8               	btfsc	status,0,c
  7612  00266A  D01A               	goto	l9593
  7613  00266C                     l9591:
  7614                           
  7615                           ; BSR set to: 0
  7616  00266C  90D8               	bcf	status,0,c
  7617  00266E  0100               	movlb	0	; () banked
  7618  002670  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7619  002672  6ED9               	movwf	fsr2l,c
  7620  002674  0100               	movlb	0	; () banked
  7621  002676  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7622  002678  6EDA               	movwf	fsr2h,c
  7623  00267A  0EE3               	movlw	low magCalBNO055@mag_temp
  7624  00267C  26D9               	addwf	fsr2l,f,c
  7625  00267E  0E00               	movlw	high magCalBNO055@mag_temp
  7626  002680  22DA               	addwfc	fsr2h,f,c
  7627  002682  90D8               	bcf	status,0,c
  7628  002684  0100               	movlb	0	; () banked
  7629  002686  35F5               	rlcf	magCalBNO055@jj& (0+255),w,b
  7630  002688  6EE1               	movwf	fsr1l,c
  7631  00268A  0100               	movlb	0	; () banked
  7632  00268C  35F6               	rlcf	(magCalBNO055@jj+1)& (0+255),w,b
  7633  00268E  6EE2               	movwf	fsr1h,c
  7634  002690  0EDC               	movlw	low magCalBNO055@mag_min
  7635  002692  26E1               	addwf	fsr1l,f,c
  7636  002694  0E00               	movlw	high magCalBNO055@mag_min
  7637  002696  22E2               	addwfc	fsr1h,f,c
  7638  002698  CFDE FFE6          	movff	postinc2,postinc1
  7639  00269C  CFDD FFE5          	movff	postdec2,postdec1
  7640  0026A0                     l9593:
  7641                           
  7642                           ; BSR set to: 0
  7643  0026A0  0100               	movlb	0	; () banked
  7644  0026A2  4BF5               	infsnz	magCalBNO055@jj& (0+255),f,b
  7645  0026A4  2BF6               	incf	(magCalBNO055@jj+1)& (0+255),f,b
  7646                           
  7647                           ; BSR set to: 0
  7648  0026A6  0100               	movlb	0	; () banked
  7649  0026A8  BFF6               	btfsc	(magCalBNO055@jj+1)& (0+255),7,b
  7650  0026AA  D762               	goto	l9581
  7651  0026AC  0100               	movlb	0	; () banked
  7652  0026AE  51F6               	movf	(magCalBNO055@jj+1)& (0+255),w,b
  7653  0026B0  E101               	bnz	l9597
  7654  0026B2  D757               	goto	L1
  7655  0026B4                     l9597:
  7656                           
  7657                           ; BSR set to: 0
  7658                           ;BNO055.c: 557: }
  7659                           ;BNO055.c: 558: }
  7660                           ;BNO055.c: 559: Delay(105);
  7661  0026B4  0E00               	movlw	0
  7662  0026B6  6E1C               	movwf	Delay@wait+1,c
  7663  0026B8  0E69               	movlw	105
  7664  0026BA  6E1B               	movwf	Delay@wait,c
  7665  0026BC  EC47  F02B         	call	_Delay	;wreg free
  7666  0026C0  0100               	movlb	0	; () banked
  7667  0026C2  2BE2               	incf	magCalBNO055@ii& (0+255),f,b
  7668  0026C4                     l9601:
  7669                           
  7670                           ; BSR set to: 0
  7671  0026C4  0100               	movlb	0	; () banked
  7672  0026C6  51D5               	movf	magCalBNO055@sample_count& (0+255),w,b
  7673  0026C8  0100               	movlb	0	; () banked
  7674  0026CA  5DE2               	subwf	magCalBNO055@ii& (0+255),w,b
  7675  0026CC  A0D8               	btfss	status,0,c
  7676  0026CE  D6F0               	goto	l9565
  7677                           
  7678                           ; BSR set to: 0
  7679                           ;BNO055.c: 560: }
  7680                           ;BNO055.c: 566: mag_bias[0] = (mag_max[0] + mag_min[0])/2;
  7681                           
  7682                           ; BSR set to: 0
  7683  0026D0  0100               	movlb	0	; () banked
  7684  0026D2  51DC               	movf	magCalBNO055@mag_min& (0+255),w,b
  7685  0026D4  0100               	movlb	0	; () banked
  7686  0026D6  25D6               	addwf	magCalBNO055@mag_max& (0+255),w,b
  7687  0026D8  6E21               	movwf	___awdiv@dividend,c
  7688  0026DA  0100               	movlb	0	; () banked
  7689  0026DC  51DD               	movf	(magCalBNO055@mag_min+1)& (0+255),w,b
  7690  0026DE  0100               	movlb	0	; () banked
  7691  0026E0  21D7               	addwfc	(magCalBNO055@mag_max+1)& (0+255),w,b
  7692  0026E2  6E22               	movwf	___awdiv@dividend+1,c
  7693  0026E4  0E00               	movlw	0
  7694  0026E6  6E24               	movwf	___awdiv@divisor+1,c
  7695  0026E8  0E02               	movlw	2
  7696  0026EA  6E23               	movwf	___awdiv@divisor,c
  7697  0026EC  EC93  F028         	call	___awdiv	;wreg free
  7698  0026F0  C021  F0E9         	movff	?___awdiv,magCalBNO055@mag_bias
  7699  0026F4  C022  F0EA         	movff	?___awdiv+1,magCalBNO055@mag_bias+1
  7700  0026F8  0100               	movlb	0	; () banked
  7701  0026FA  0E00               	movlw	0
  7702  0026FC  BFEA               	btfsc	(magCalBNO055@mag_bias+1)& (0+255),7,b
  7703  0026FE  0EFF               	movlw	-1
  7704  002700  6FEB               	movwf	(magCalBNO055@mag_bias+2)& (0+255),b
  7705  002702  6FEC               	movwf	(magCalBNO055@mag_bias+3)& (0+255),b
  7706                           
  7707                           ;BNO055.c: 567: mag_bias[1] = (mag_max[1] + mag_min[1])/2;
  7708  002704  0100               	movlb	0	; () banked
  7709  002706  51DE               	movf	(magCalBNO055@mag_min+2)& (0+255),w,b
  7710  002708  0100               	movlb	0	; () banked
  7711  00270A  25D8               	addwf	(magCalBNO055@mag_max+2)& (0+255),w,b
  7712  00270C  6E21               	movwf	___awdiv@dividend,c
  7713  00270E  0100               	movlb	0	; () banked
  7714  002710  51DF               	movf	(magCalBNO055@mag_min+3)& (0+255),w,b
  7715  002712  0100               	movlb	0	; () banked
  7716  002714  21D9               	addwfc	(magCalBNO055@mag_max+3)& (0+255),w,b
  7717  002716  6E22               	movwf	___awdiv@dividend+1,c
  7718  002718  0E00               	movlw	0
  7719  00271A  6E24               	movwf	___awdiv@divisor+1,c
  7720  00271C  0E02               	movlw	2
  7721  00271E  6E23               	movwf	___awdiv@divisor,c
  7722  002720  EC93  F028         	call	___awdiv	;wreg free
  7723  002724  C021  F0ED         	movff	?___awdiv,magCalBNO055@mag_bias+4
  7724  002728  C022  F0EE         	movff	?___awdiv+1,magCalBNO055@mag_bias+5
  7725  00272C  0100               	movlb	0	; () banked
  7726  00272E  0E00               	movlw	0
  7727  002730  BFEE               	btfsc	(magCalBNO055@mag_bias+5)& (0+255),7,b
  7728  002732  0EFF               	movlw	-1
  7729  002734  6FEF               	movwf	(magCalBNO055@mag_bias+6)& (0+255),b
  7730  002736  6FF0               	movwf	(magCalBNO055@mag_bias+7)& (0+255),b
  7731                           
  7732                           ;BNO055.c: 568: mag_bias[2] = (mag_max[2] + mag_min[2])/2;
  7733  002738  0100               	movlb	0	; () banked
  7734  00273A  51E0               	movf	(magCalBNO055@mag_min+4)& (0+255),w,b
  7735  00273C  0100               	movlb	0	; () banked
  7736  00273E  25DA               	addwf	(magCalBNO055@mag_max+4)& (0+255),w,b
  7737  002740  6E21               	movwf	___awdiv@dividend,c
  7738  002742  0100               	movlb	0	; () banked
  7739  002744  51E1               	movf	(magCalBNO055@mag_min+5)& (0+255),w,b
  7740  002746  0100               	movlb	0	; () banked
  7741  002748  21DB               	addwfc	(magCalBNO055@mag_max+5)& (0+255),w,b
  7742  00274A  6E22               	movwf	___awdiv@dividend+1,c
  7743  00274C  0E00               	movlw	0
  7744  00274E  6E24               	movwf	___awdiv@divisor+1,c
  7745  002750  0E02               	movlw	2
  7746  002752  6E23               	movwf	___awdiv@divisor,c
  7747  002754  EC93  F028         	call	___awdiv	;wreg free
  7748  002758  C021  F0F1         	movff	?___awdiv,magCalBNO055@mag_bias+8
  7749  00275C  C022  F0F2         	movff	?___awdiv+1,magCalBNO055@mag_bias+9
  7750  002760  0100               	movlb	0	; () banked
  7751  002762  0E00               	movlw	0
  7752  002764  BFF2               	btfsc	(magCalBNO055@mag_bias+9)& (0+255),7,b
  7753  002766  0EFF               	movlw	-1
  7754  002768  6FF3               	movwf	(magCalBNO055@mag_bias+10)& (0+255),b
  7755  00276A  6FF4               	movwf	(magCalBNO055@mag_bias+11)& (0+255),b
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;BNO055.c: 570: dest1[0] = (float) mag_bias[0] / 1.6;
  7759  00276C  C0E9  F023         	movff	magCalBNO055@mag_bias,___altoft@c
  7760  002770  C0EA  F024         	movff	magCalBNO055@mag_bias+1,___altoft@c+1
  7761  002774  C0EB  F025         	movff	magCalBNO055@mag_bias+2,___altoft@c+2
  7762  002778  C0EC  F026         	movff	magCalBNO055@mag_bias+3,___altoft@c+3
  7763  00277C  EC16  F029         	call	___altoft	;wreg free
  7764  002780  C023  F062         	movff	?___altoft,___ftdiv@f1
  7765  002784  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  7766  002788  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  7767  00278C  0ECD               	movlw	205
  7768  00278E  0100               	movlb	0	; () banked
  7769  002790  6F65               	movwf	___ftdiv@f2& (0+255),b
  7770  002792  0ECC               	movlw	204
  7771  002794  0100               	movlb	0	; () banked
  7772  002796  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  7773  002798  0E3F               	movlw	63
  7774  00279A  0100               	movlb	0	; () banked
  7775  00279C  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  7776  00279E  EC7E  F01E         	call	___ftdiv	;wreg free
  7777  0027A2  C0C8  FFD9         	movff	magCalBNO055@dest1,fsr2l
  7778  0027A6  C0C9  FFDA         	movff	magCalBNO055@dest1+1,fsr2h
  7779  0027AA  C062  FFDE         	movff	?___ftdiv,postinc2
  7780  0027AE  C063  FFDE         	movff	?___ftdiv+1,postinc2
  7781  0027B2  C064  FFDE         	movff	?___ftdiv+2,postinc2
  7782                           
  7783                           ;BNO055.c: 571: dest1[1] = (float) mag_bias[1] / 1.6;
  7784  0027B6  C0ED  F023         	movff	magCalBNO055@mag_bias+4,___altoft@c
  7785  0027BA  C0EE  F024         	movff	magCalBNO055@mag_bias+5,___altoft@c+1
  7786  0027BE  C0EF  F025         	movff	magCalBNO055@mag_bias+6,___altoft@c+2
  7787  0027C2  C0F0  F026         	movff	magCalBNO055@mag_bias+7,___altoft@c+3
  7788  0027C6  EC16  F029         	call	___altoft	;wreg free
  7789  0027CA  C023  F062         	movff	?___altoft,___ftdiv@f1
  7790  0027CE  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  7791  0027D2  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  7792  0027D6  0ECD               	movlw	205
  7793  0027D8  0100               	movlb	0	; () banked
  7794  0027DA  6F65               	movwf	___ftdiv@f2& (0+255),b
  7795  0027DC  0ECC               	movlw	204
  7796  0027DE  0100               	movlb	0	; () banked
  7797  0027E0  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  7798  0027E2  0E3F               	movlw	63
  7799  0027E4  0100               	movlb	0	; () banked
  7800  0027E6  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  7801  0027E8  EC7E  F01E         	call	___ftdiv	;wreg free
  7802  0027EC  0100               	movlb	0	; () banked
  7803  0027EE  EE20 F003          	lfsr	2,3
  7804  0027F2  51C8               	movf	magCalBNO055@dest1& (0+255),w,b
  7805  0027F4  26D9               	addwf	fsr2l,f,c
  7806  0027F6  51C9               	movf	(magCalBNO055@dest1+1)& (0+255),w,b
  7807  0027F8  22DA               	addwfc	fsr2h,f,c
  7808  0027FA  C062  FFDE         	movff	?___ftdiv,postinc2
  7809  0027FE  C063  FFDE         	movff	?___ftdiv+1,postinc2
  7810  002802  C064  FFDE         	movff	?___ftdiv+2,postinc2
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;BNO055.c: 572: dest1[2] = (float) mag_bias[2] / 1.6;
  7814  002806  C0F1  F023         	movff	magCalBNO055@mag_bias+8,___altoft@c
  7815  00280A  C0F2  F024         	movff	magCalBNO055@mag_bias+9,___altoft@c+1
  7816  00280E  C0F3  F025         	movff	magCalBNO055@mag_bias+10,___altoft@c+2
  7817  002812  C0F4  F026         	movff	magCalBNO055@mag_bias+11,___altoft@c+3
  7818  002816  EC16  F029         	call	___altoft	;wreg free
  7819  00281A  C023  F062         	movff	?___altoft,___ftdiv@f1
  7820  00281E  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  7821  002822  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  7822  002826  0ECD               	movlw	205
  7823  002828  0100               	movlb	0	; () banked
  7824  00282A  6F65               	movwf	___ftdiv@f2& (0+255),b
  7825  00282C  0ECC               	movlw	204
  7826  00282E  0100               	movlb	0	; () banked
  7827  002830  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  7828  002832  0E3F               	movlw	63
  7829  002834  0100               	movlb	0	; () banked
  7830  002836  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  7831  002838  EC7E  F01E         	call	___ftdiv	;wreg free
  7832  00283C  0100               	movlb	0	; () banked
  7833  00283E  EE20 F006          	lfsr	2,6
  7834  002842  51C8               	movf	magCalBNO055@dest1& (0+255),w,b
  7835  002844  26D9               	addwf	fsr2l,f,c
  7836  002846  51C9               	movf	(magCalBNO055@dest1+1)& (0+255),w,b
  7837  002848  22DA               	addwfc	fsr2h,f,c
  7838  00284A  C062  FFDE         	movff	?___ftdiv,postinc2
  7839  00284E  C063  FFDE         	movff	?___ftdiv+1,postinc2
  7840  002852  C064  FFDE         	movff	?___ftdiv+2,postinc2
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;BNO055.c: 576: writeByte(0x29, 0x3D, CONFIGMODE );
  7844  002856  0E3D               	movlw	61
  7845  002858  0100               	movlb	0	; () banked
  7846  00285A  6F60               	movwf	writeByte@subAddress& (0+255),b
  7847  00285C  0E00               	movlw	0
  7848  00285E  0100               	movlb	0	; () banked
  7849  002860  6F61               	movwf	writeByte@data& (0+255),b
  7850  002862  0E29               	movlw	41
  7851  002864  EC8E  F029         	call	_writeByte
  7852                           
  7853                           ;BNO055.c: 577: Delay(25);
  7854  002868  0E00               	movlw	0
  7855  00286A  6E1C               	movwf	Delay@wait+1,c
  7856  00286C  0E19               	movlw	25
  7857  00286E  6E1B               	movwf	Delay@wait,c
  7858  002870  EC47  F02B         	call	_Delay	;wreg free
  7859                           
  7860                           ;BNO055.c: 580: writeByte(0x29, 0x5B, (int)mag_bias[0] & 0xFF);
  7861  002874  0E5B               	movlw	91
  7862  002876  0100               	movlb	0	; () banked
  7863  002878  6F60               	movwf	writeByte@subAddress& (0+255),b
  7864  00287A  C0E9  F061         	movff	magCalBNO055@mag_bias,writeByte@data
  7865  00287E  0E29               	movlw	41
  7866  002880  EC8E  F029         	call	_writeByte
  7867                           
  7868                           ;BNO055.c: 581: writeByte(0x29, 0x5C, ((int)mag_bias[0] >> 8) & 0xFF);
  7869  002884  0E5C               	movlw	92
  7870  002886  0100               	movlb	0	; () banked
  7871  002888  6F60               	movwf	writeByte@subAddress& (0+255),b
  7872  00288A  0100               	movlb	0	; () banked
  7873  00288C  51EA               	movf	(magCalBNO055@mag_bias+1)& (0+255),w,b
  7874  00288E  0100               	movlb	0	; () banked
  7875  002890  6F61               	movwf	writeByte@data& (0+255),b
  7876  002892  0E29               	movlw	41
  7877  002894  EC8E  F029         	call	_writeByte
  7878                           
  7879                           ;BNO055.c: 582: writeByte(0x29, 0x5D, (int)mag_bias[1] & 0xFF);
  7880  002898  0E5D               	movlw	93
  7881  00289A  0100               	movlb	0	; () banked
  7882  00289C  6F60               	movwf	writeByte@subAddress& (0+255),b
  7883  00289E  C0ED  F061         	movff	magCalBNO055@mag_bias+4,writeByte@data
  7884  0028A2  0E29               	movlw	41
  7885  0028A4  EC8E  F029         	call	_writeByte
  7886                           
  7887                           ;BNO055.c: 583: writeByte(0x29, 0x5E, ((int)mag_bias[1] >> 8) & 0xFF);
  7888  0028A8  0E5E               	movlw	94
  7889  0028AA  0100               	movlb	0	; () banked
  7890  0028AC  6F60               	movwf	writeByte@subAddress& (0+255),b
  7891  0028AE  0100               	movlb	0	; () banked
  7892  0028B0  51EE               	movf	(magCalBNO055@mag_bias+5)& (0+255),w,b
  7893  0028B2  0100               	movlb	0	; () banked
  7894  0028B4  6F61               	movwf	writeByte@data& (0+255),b
  7895  0028B6  0E29               	movlw	41
  7896  0028B8  EC8E  F029         	call	_writeByte
  7897                           
  7898                           ;BNO055.c: 584: writeByte(0x29, 0x5F, (int)mag_bias[2] & 0xFF);
  7899  0028BC  0E5F               	movlw	95
  7900  0028BE  0100               	movlb	0	; () banked
  7901  0028C0  6F60               	movwf	writeByte@subAddress& (0+255),b
  7902  0028C2  C0F1  F061         	movff	magCalBNO055@mag_bias+8,writeByte@data
  7903  0028C6  0E29               	movlw	41
  7904  0028C8  EC8E  F029         	call	_writeByte
  7905                           
  7906                           ;BNO055.c: 585: writeByte(0x29, 0x60, ((int)mag_bias[2] >> 8) & 0xFF);
  7907  0028CC  0E60               	movlw	96
  7908  0028CE  0100               	movlb	0	; () banked
  7909  0028D0  6F60               	movwf	writeByte@subAddress& (0+255),b
  7910  0028D2  0100               	movlb	0	; () banked
  7911  0028D4  51F2               	movf	(magCalBNO055@mag_bias+9)& (0+255),w,b
  7912  0028D6  0100               	movlb	0	; () banked
  7913  0028D8  6F61               	movwf	writeByte@data& (0+255),b
  7914  0028DA  0E29               	movlw	41
  7915  0028DC  EC8E  F029         	call	_writeByte
  7916                           
  7917                           ;BNO055.c: 593: writeByte(0x29, 0x3D, OPRMode );
  7918  0028E0  0E3D               	movlw	61
  7919  0028E2  0100               	movlb	0	; () banked
  7920  0028E4  6F60               	movwf	writeByte@subAddress& (0+255),b
  7921  0028E6  C043  F061         	movff	_OPRMode,writeByte@data
  7922  0028EA  0E29               	movlw	41
  7923  0028EC  EC8E  F029         	call	_writeByte
  7924                           
  7925                           ;BNO055.c: 594: Delay(25);
  7926  0028F0  0E00               	movlw	0
  7927  0028F2  6E1C               	movwf	Delay@wait+1,c
  7928  0028F4  0E19               	movlw	25
  7929  0028F6  6E1B               	movwf	Delay@wait,c
  7930  0028F8  EC47  F02B         	call	_Delay	;wreg free
  7931                           
  7932                           ;BNO055.c: 596: printf("Mag Calibration done!");
  7933  0028FC  0E51               	movlw	low STR_52
  7934  0028FE  0100               	movlb	0	; () banked
  7935  002900  6F8F               	movwf	printf@f& (0+255),b
  7936  002902  0E7F               	movlw	high STR_52
  7937  002904  0100               	movlb	0	; () banked
  7938  002906  6F90               	movwf	(printf@f+1)& (0+255),b
  7939  002908  EC70  F000         	call	_printf	;wreg free
  7940  00290C  0012               	return		;funcret
  7941  00290E                     __end_of_magCalBNO055:
  7942                           	opt stack 0
  7943                           tblptru	equ	0xFF8
  7944                           tblptrh	equ	0xFF7
  7945                           tblptrl	equ	0xFF6
  7946                           tablat	equ	0xFF5
  7947                           intcon	equ	0xFF2
  7948                           postinc0	equ	0xFEE
  7949                           wreg	equ	0xFE8
  7950                           postinc1	equ	0xFE6
  7951                           postdec1	equ	0xFE5
  7952                           plusw1	equ	0xFE3
  7953                           fsr1h	equ	0xFE2
  7954                           fsr1l	equ	0xFE1
  7955                           postinc2	equ	0xFDE
  7956                           postdec2	equ	0xFDD
  7957                           plusw2	equ	0xFDB
  7958                           fsr2h	equ	0xFDA
  7959                           fsr2l	equ	0xFD9
  7960                           status	equ	0xFD8
  7961                           
  7962 ;; *************** function _initBNO055 *****************
  7963 ;; Defined at:
  7964 ;;		line 389 in file "BNO055.c"
  7965 ;; Parameters:    Size  Location     Type
  7966 ;;		None
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;		None
  7969 ;; Return value:  Size  Location     Type
  7970 ;;                  1    wreg      void 
  7971 ;; Registers used:
  7972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7978 ;;      Params:         0       0       0       0       0       0       0
  7979 ;;      Locals:         0       0       0       0       0       0       0
  7980 ;;      Temps:          0       1       0       0       0       0       0
  7981 ;;      Totals:         0       1       0       0       0       0       0
  7982 ;;Total ram usage:        1 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; Hardware stack levels required when called:    7
  7985 ;; This function calls:
  7986 ;;		_Delay
  7987 ;;		_writeByte
  7988 ;; This function is called by:
  7989 ;;		_Setup
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text15
  7994  0041E6                     __ptext15:
  7995                           	opt stack 0
  7996  0041E6                     _initBNO055:
  7997                           	opt stack 22
  7998                           
  7999                           ;BNO055.c: 391: writeByte(0x29, 0x3D, CONFIGMODE );
  8000                           
  8001                           ;incstack = 0
  8002  0041E6  0E3D               	movlw	61
  8003  0041E8  0100               	movlb	0	; () banked
  8004  0041EA  6F60               	movwf	writeByte@subAddress& (0+255),b
  8005  0041EC  0E00               	movlw	0
  8006  0041EE  0100               	movlb	0	; () banked
  8007  0041F0  6F61               	movwf	writeByte@data& (0+255),b
  8008  0041F2  0E29               	movlw	41
  8009  0041F4  EC8E  F029         	call	_writeByte
  8010                           
  8011                           ;BNO055.c: 392: Delay(25);
  8012  0041F8  0E00               	movlw	0
  8013  0041FA  6E1C               	movwf	Delay@wait+1,c
  8014  0041FC  0E19               	movlw	25
  8015  0041FE  6E1B               	movwf	Delay@wait,c
  8016  004200  EC47  F02B         	call	_Delay	;wreg free
  8017                           
  8018                           ;BNO055.c: 394: writeByte(0x29, 0x07, 0x01);
  8019  004204  0E07               	movlw	7
  8020  004206  0100               	movlb	0	; () banked
  8021  004208  6F60               	movwf	writeByte@subAddress& (0+255),b
  8022  00420A  0E01               	movlw	1
  8023  00420C  0100               	movlb	0	; () banked
  8024  00420E  6F61               	movwf	writeByte@data& (0+255),b
  8025  004210  0E29               	movlw	41
  8026  004212  EC8E  F029         	call	_writeByte
  8027                           
  8028                           ;BNO055.c: 396: writeByte(0x29, 0x08, APwrMode << 5 | Abw << 2 | Ascale );
  8029  004216  0E08               	movlw	8
  8030  004218  0100               	movlb	0	; () banked
  8031  00421A  6F60               	movwf	writeByte@subAddress& (0+255),b
  8032  00421C  C041  F068         	movff	_Abw,??_initBNO055
  8033  004220  0100               	movlb	0	; () banked
  8034  004222  90D8               	bcf	status,0,c
  8035  004224  3768               	rlcf	??_initBNO055& (0+255),f,b
  8036  004226  0100               	movlb	0	; () banked
  8037  004228  90D8               	bcf	status,0,c
  8038  00422A  3768               	rlcf	??_initBNO055& (0+255),f,b
  8039  00422C  3838               	swapf	_APwrMode,w,c
  8040  00422E  46E8               	rlncf	wreg,f,c
  8041  004230  0BE0               	andlw	224
  8042  004232  0100               	movlb	0	; () banked
  8043  004234  1168               	iorwf	??_initBNO055& (0+255),w,b
  8044  004236  0100               	movlb	0	; () banked
  8045  004238  11F8               	iorwf	_Ascale& (0+255),w,b
  8046  00423A  0100               	movlb	0	; () banked
  8047  00423C  6F61               	movwf	writeByte@data& (0+255),b
  8048  00423E  0E29               	movlw	41
  8049  004240  EC8E  F029         	call	_writeByte
  8050                           
  8051                           ;BNO055.c: 398: writeByte(0x29, 0x0A, Gbw << 3 | Gscale );
  8052  004244  0E0A               	movlw	10
  8053  004246  0100               	movlb	0	; () banked
  8054  004248  6F60               	movwf	writeByte@subAddress& (0+255),b
  8055  00424A  3842               	swapf	_Gbw,w,c
  8056  00424C  42E8               	rrncf	wreg,f,c
  8057  00424E  0BF8               	andlw	248
  8058  004250  0100               	movlb	0	; () banked
  8059  004252  11FE               	iorwf	_Gscale& (0+255),w,b
  8060  004254  0100               	movlb	0	; () banked
  8061  004256  6F61               	movwf	writeByte@data& (0+255),b
  8062  004258  0E29               	movlw	41
  8063  00425A  EC8E  F029         	call	_writeByte
  8064                           
  8065                           ;BNO055.c: 399: writeByte(0x29, 0x0B, GPwrMode);
  8066  00425E  0E0B               	movlw	11
  8067  004260  0100               	movlb	0	; () banked
  8068  004262  6F60               	movwf	writeByte@subAddress& (0+255),b
  8069  004264  C039  F061         	movff	_GPwrMode,writeByte@data
  8070  004268  0E29               	movlw	41
  8071  00426A  EC8E  F029         	call	_writeByte
  8072                           
  8073                           ;BNO055.c: 401: writeByte(0x29, 0x09, MPwrMode << 5 | MOpMode << 3 | Modr );
  8074  00426E  0E09               	movlw	9
  8075  004270  0100               	movlb	0	; () banked
  8076  004272  6F60               	movwf	writeByte@subAddress& (0+255),b
  8077  004274  C0FF  F068         	movff	_MOpMode,??_initBNO055
  8078  004278  0100               	movlb	0	; () banked
  8079  00427A  90D8               	bcf	status,0,c
  8080  00427C  3768               	rlcf	??_initBNO055& (0+255),f,b
  8081  00427E  0100               	movlb	0	; () banked
  8082  004280  90D8               	bcf	status,0,c
  8083  004282  3768               	rlcf	??_initBNO055& (0+255),f,b
  8084  004284  0100               	movlb	0	; () banked
  8085  004286  90D8               	bcf	status,0,c
  8086  004288  3768               	rlcf	??_initBNO055& (0+255),f,b
  8087  00428A  0100               	movlb	0	; () banked
  8088  00428C  39F9               	swapf	_MPwrMode& (0+255),w,b
  8089  00428E  46E8               	rlncf	wreg,f,c
  8090  004290  0BE0               	andlw	224
  8091  004292  0100               	movlb	0	; () banked
  8092  004294  1168               	iorwf	??_initBNO055& (0+255),w,b
  8093  004296  0101               	movlb	1	; () banked
  8094  004298  11FC               	iorwf	_Modr& (0+255),w,b
  8095  00429A  0100               	movlb	0	; () banked
  8096  00429C  6F61               	movwf	writeByte@data& (0+255),b
  8097  00429E  0E29               	movlw	41
  8098  0042A0  EC8E  F029         	call	_writeByte
  8099                           
  8100                           ;BNO055.c: 404: writeByte(0x29, 0x07, 0x00);
  8101  0042A4  0E07               	movlw	7
  8102  0042A6  0100               	movlb	0	; () banked
  8103  0042A8  6F60               	movwf	writeByte@subAddress& (0+255),b
  8104  0042AA  0E00               	movlw	0
  8105  0042AC  0100               	movlb	0	; () banked
  8106  0042AE  6F61               	movwf	writeByte@data& (0+255),b
  8107  0042B0  0E29               	movlw	41
  8108  0042B2  EC8E  F029         	call	_writeByte
  8109                           
  8110                           ;BNO055.c: 407: writeByte(0x29, 0x40, 0x01 );
  8111  0042B6  0E40               	movlw	64
  8112  0042B8  0100               	movlb	0	; () banked
  8113  0042BA  6F60               	movwf	writeByte@subAddress& (0+255),b
  8114  0042BC  0E01               	movlw	1
  8115  0042BE  0100               	movlb	0	; () banked
  8116  0042C0  6F61               	movwf	writeByte@data& (0+255),b
  8117  0042C2  0E29               	movlw	41
  8118  0042C4  EC8E  F029         	call	_writeByte
  8119                           
  8120                           ;BNO055.c: 410: writeByte(0x29, 0x3B, 0x01 );
  8121  0042C8  0E3B               	movlw	59
  8122  0042CA  0100               	movlb	0	; () banked
  8123  0042CC  6F60               	movwf	writeByte@subAddress& (0+255),b
  8124  0042CE  0E01               	movlw	1
  8125  0042D0  0100               	movlb	0	; () banked
  8126  0042D2  6F61               	movwf	writeByte@data& (0+255),b
  8127  0042D4  0E29               	movlw	41
  8128  0042D6  EC8E  F029         	call	_writeByte
  8129                           
  8130                           ;BNO055.c: 413: writeByte(0x29, 0x3E, PWRMode );
  8131  0042DA  0E3E               	movlw	62
  8132  0042DC  0100               	movlb	0	; () banked
  8133  0042DE  6F60               	movwf	writeByte@subAddress& (0+255),b
  8134  0042E0  C1A4  F061         	movff	_PWRMode,writeByte@data
  8135  0042E4  0E29               	movlw	41
  8136  0042E6  EC8E  F029         	call	_writeByte
  8137                           
  8138                           ;BNO055.c: 416: writeByte(0x29, 0x3D, OPRMode );
  8139  0042EA  0E3D               	movlw	61
  8140  0042EC  0100               	movlb	0	; () banked
  8141  0042EE  6F60               	movwf	writeByte@subAddress& (0+255),b
  8142  0042F0  C043  F061         	movff	_OPRMode,writeByte@data
  8143  0042F4  0E29               	movlw	41
  8144  0042F6  EC8E  F029         	call	_writeByte
  8145                           
  8146                           ;BNO055.c: 417: Delay(25);
  8147  0042FA  0E00               	movlw	0
  8148  0042FC  6E1C               	movwf	Delay@wait+1,c
  8149  0042FE  0E19               	movlw	25
  8150  004300  6E1B               	movwf	Delay@wait,c
  8151  004302  EC47  F02B         	call	_Delay	;wreg free
  8152  004306  0012               	return		;funcret
  8153  004308                     __end_of_initBNO055:
  8154                           	opt stack 0
  8155                           tblptru	equ	0xFF8
  8156                           tblptrh	equ	0xFF7
  8157                           tblptrl	equ	0xFF6
  8158                           tablat	equ	0xFF5
  8159                           intcon	equ	0xFF2
  8160                           postinc0	equ	0xFEE
  8161                           wreg	equ	0xFE8
  8162                           postinc1	equ	0xFE6
  8163                           postdec1	equ	0xFE5
  8164                           plusw1	equ	0xFE3
  8165                           fsr1h	equ	0xFE2
  8166                           fsr1l	equ	0xFE1
  8167                           postinc2	equ	0xFDE
  8168                           postdec2	equ	0xFDD
  8169                           plusw2	equ	0xFDB
  8170                           fsr2h	equ	0xFDA
  8171                           fsr2l	equ	0xFD9
  8172                           status	equ	0xFD8
  8173                           
  8174 ;; *************** function _accelgyroCalBNO055 *****************
  8175 ;; Defined at:
  8176 ;;		line 420 in file "BNO055.c"
  8177 ;; Parameters:    Size  Location     Type
  8178 ;;  dest1           2  104[BANK0 ] PTR float 
  8179 ;;		 -> accelBias(9), 
  8180 ;;  dest2           2  106[BANK0 ] PTR float 
  8181 ;;		 -> gyroBias(9), 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  gyro_temp       6    6[BANK3 ] int [3]
  8184 ;;  accel_temp      6    0[BANK3 ] int [3]
  8185 ;;  accel_bias     12   38[BANK3 ] long [3]
  8186 ;;  gyro_bias      12   22[BANK3 ] long [3]
  8187 ;;  data            6   12[BANK3 ] unsigned char [6]
  8188 ;;  sample_count    4   34[BANK3 ] long 
  8189 ;;  ii              4   18[BANK3 ] long 
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8199 ;;      Params:         0       4       0       0       0       0       0
  8200 ;;      Locals:         0       0       0       0      50       0       0
  8201 ;;      Temps:          0       4       0       0       0       0       0
  8202 ;;      Totals:         0       8       0       0      50       0       0
  8203 ;;Total ram usage:       58 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    9
  8206 ;; This function calls:
  8207 ;;		_Delay
  8208 ;;		___aldiv
  8209 ;;		___altoft
  8210 ;;		___ftdiv
  8211 ;;		___ftge
  8212 ;;		_printf
  8213 ;;		_readBytes
  8214 ;;		_writeByte
  8215 ;; This function is called by:
  8216 ;;		_Setup
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           	psect	text16
  8221  0013D6                     __ptext16:
  8222                           	opt stack 0
  8223  0013D6                     _accelgyroCalBNO055:
  8224                           	opt stack 20
  8225                           
  8226                           ;BNO055.c: 421: char data[6];
  8227                           ;BNO055.c: 422: long ii = 0;
  8228                           
  8229                           ;incstack = 0
  8230  0013D6  0E00               	movlw	0
  8231  0013D8  0103               	movlb	3	; () banked
  8232  0013DA  6F68               	movwf	accelgyroCalBNO055@ii& (0+255),b
  8233  0013DC  0E00               	movlw	0
  8234  0013DE  6F69               	movwf	(accelgyroCalBNO055@ii+1)& (0+255),b
  8235  0013E0  0E00               	movlw	0
  8236  0013E2  6F6A               	movwf	(accelgyroCalBNO055@ii+2)& (0+255),b
  8237  0013E4  0E00               	movlw	0
  8238  0013E6  6F6B               	movwf	(accelgyroCalBNO055@ii+3)& (0+255),b
  8239                           
  8240                           ;BNO055.c: 423: long sample_count = 0;
  8241  0013E8  0E00               	movlw	0
  8242  0013EA  0103               	movlb	3	; () banked
  8243  0013EC  6F78               	movwf	accelgyroCalBNO055@sample_count& (0+255),b
  8244  0013EE  0E00               	movlw	0
  8245  0013F0  6F79               	movwf	(accelgyroCalBNO055@sample_count+1)& (0+255),b
  8246  0013F2  0E00               	movlw	0
  8247  0013F4  6F7A               	movwf	(accelgyroCalBNO055@sample_count+2)& (0+255),b
  8248  0013F6  0E00               	movlw	0
  8249  0013F8  6F7B               	movwf	(accelgyroCalBNO055@sample_count+3)& (0+255),b
  8250                           
  8251                           ; BSR set to: 3
  8252                           ;BNO055.c: 424: long gyro_bias[3] = {0, 0, 0};
  8253  0013FA  EE22  F000         	lfsr	2,accelgyroCalBNO055@F8177
  8254  0013FE  EE13  F06C         	lfsr	1,accelgyroCalBNO055@gyro_bias
  8255  001402  0E0B               	movlw	11
  8256  001404                     u10901:
  8257  001404  CFDB FFE3          	movff	plusw2,plusw1
  8258  001408  06E8               	decf	wreg,f,c
  8259  00140A  E2FC               	bc	u10901
  8260                           
  8261                           ; BSR set to: 3
  8262                           ;BNO055.c: 425: long accel_bias[3] = {0, 0, 0};
  8263  00140C  EE22  F00C         	lfsr	2,accelgyroCalBNO055@F8179
  8264  001410  EE13  F07C         	lfsr	1,accelgyroCalBNO055@accel_bias
  8265  001414  0E0B               	movlw	11
  8266  001416                     u10911:
  8267  001416  CFDB FFE3          	movff	plusw2,plusw1
  8268  00141A  06E8               	decf	wreg,f,c
  8269  00141C  E2FC               	bc	u10911
  8270                           
  8271                           ; BSR set to: 3
  8272                           ;BNO055.c: 427: printf("Accel/Gyro Calibration: Put device on a level surface and keep m
      +                          otionless! Wait......");
  8273  00141E  0E3F               	movlw	low STR_49
  8274  001420  0100               	movlb	0	; () banked
  8275  001422  6F8F               	movwf	printf@f& (0+255),b
  8276  001424  0E79               	movlw	high STR_49
  8277  001426  0100               	movlb	0	; () banked
  8278  001428  6F90               	movwf	(printf@f+1)& (0+255),b
  8279  00142A  EC70  F000         	call	_printf	;wreg free
  8280                           
  8281                           ;BNO055.c: 428: Delay(4000);
  8282  00142E  0E0F               	movlw	15
  8283  001430  6E1C               	movwf	Delay@wait+1,c
  8284  001432  0EA0               	movlw	160
  8285  001434  6E1B               	movwf	Delay@wait,c
  8286  001436  EC47  F02B         	call	_Delay	;wreg free
  8287                           
  8288                           ;BNO055.c: 431: writeByte(0x29, 0x07, 0x00);
  8289  00143A  0E07               	movlw	7
  8290  00143C  0100               	movlb	0	; () banked
  8291  00143E  6F60               	movwf	writeByte@subAddress& (0+255),b
  8292  001440  0E00               	movlw	0
  8293  001442  0100               	movlb	0	; () banked
  8294  001444  6F61               	movwf	writeByte@data& (0+255),b
  8295  001446  0E29               	movlw	41
  8296  001448  EC8E  F029         	call	_writeByte
  8297                           
  8298                           ;BNO055.c: 433: writeByte(0x29, 0x3D, CONFIGMODE );
  8299  00144C  0E3D               	movlw	61
  8300  00144E  0100               	movlb	0	; () banked
  8301  001450  6F60               	movwf	writeByte@subAddress& (0+255),b
  8302  001452  0E00               	movlw	0
  8303  001454  0100               	movlb	0	; () banked
  8304  001456  6F61               	movwf	writeByte@data& (0+255),b
  8305  001458  0E29               	movlw	41
  8306  00145A  EC8E  F029         	call	_writeByte
  8307                           
  8308                           ;BNO055.c: 434: Delay(25);
  8309  00145E  0E00               	movlw	0
  8310  001460  6E1C               	movwf	Delay@wait+1,c
  8311  001462  0E19               	movlw	25
  8312  001464  6E1B               	movwf	Delay@wait,c
  8313  001466  EC47  F02B         	call	_Delay	;wreg free
  8314                           
  8315                           ;BNO055.c: 435: writeByte(0x29, 0x3D, AMG);
  8316  00146A  0E3D               	movlw	61
  8317  00146C  0100               	movlb	0	; () banked
  8318  00146E  6F60               	movwf	writeByte@subAddress& (0+255),b
  8319  001470  0E07               	movlw	7
  8320  001472  0100               	movlb	0	; () banked
  8321  001474  6F61               	movwf	writeByte@data& (0+255),b
  8322  001476  0E29               	movlw	41
  8323  001478  EC8E  F029         	call	_writeByte
  8324                           
  8325                           ;BNO055.c: 438: writeByte(0x29, 0x08, APwrMode << 5 | Abw << 2 | AFS_4G );
  8326  00147C  0E08               	movlw	8
  8327  00147E  0100               	movlb	0	; () banked
  8328  001480  6F60               	movwf	writeByte@subAddress& (0+255),b
  8329  001482  C041  F0CC         	movff	_Abw,??_accelgyroCalBNO055
  8330  001486  0100               	movlb	0	; () banked
  8331  001488  90D8               	bcf	status,0,c
  8332  00148A  37CC               	rlcf	??_accelgyroCalBNO055& (0+255),f,b
  8333  00148C  0100               	movlb	0	; () banked
  8334  00148E  90D8               	bcf	status,0,c
  8335  001490  37CC               	rlcf	??_accelgyroCalBNO055& (0+255),f,b
  8336  001492  3838               	swapf	_APwrMode,w,c
  8337  001494  46E8               	rlncf	wreg,f,c
  8338  001496  0BE0               	andlw	224
  8339  001498  0100               	movlb	0	; () banked
  8340  00149A  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8341  00149C  0901               	iorlw	1
  8342  00149E  0100               	movlb	0	; () banked
  8343  0014A0  6F61               	movwf	writeByte@data& (0+255),b
  8344  0014A2  0E29               	movlw	41
  8345  0014A4  EC8E  F029         	call	_writeByte
  8346                           
  8347                           ;BNO055.c: 439: sample_count = 256;
  8348  0014A8  0E00               	movlw	0
  8349  0014AA  0103               	movlb	3	; () banked
  8350  0014AC  6F78               	movwf	accelgyroCalBNO055@sample_count& (0+255),b
  8351  0014AE  0E01               	movlw	1
  8352  0014B0  6F79               	movwf	(accelgyroCalBNO055@sample_count+1)& (0+255),b
  8353  0014B2  0E00               	movlw	0
  8354  0014B4  6F7A               	movwf	(accelgyroCalBNO055@sample_count+2)& (0+255),b
  8355  0014B6  0E00               	movlw	0
  8356  0014B8  6F7B               	movwf	(accelgyroCalBNO055@sample_count+3)& (0+255),b
  8357                           
  8358                           ; BSR set to: 3
  8359                           ;BNO055.c: 440: for(ii = 0; ii < sample_count; ii++) {
  8360  0014BA  0E00               	movlw	0
  8361  0014BC  0103               	movlb	3	; () banked
  8362  0014BE  6F68               	movwf	accelgyroCalBNO055@ii& (0+255),b
  8363  0014C0  0E00               	movlw	0
  8364  0014C2  6F69               	movwf	(accelgyroCalBNO055@ii+1)& (0+255),b
  8365  0014C4  0E00               	movlw	0
  8366  0014C6  6F6A               	movwf	(accelgyroCalBNO055@ii+2)& (0+255),b
  8367  0014C8  0E00               	movlw	0
  8368  0014CA  6F6B               	movwf	(accelgyroCalBNO055@ii+3)& (0+255),b
  8369  0014CC  D0A9               	goto	l9461
  8370  0014CE                     l9441:
  8371                           
  8372                           ;BNO055.c: 441: int accel_temp[3] = {0, 0, 0};
  8373  0014CE  EE21  F007         	lfsr	2,accelgyroCalBNO055@F8181
  8374  0014D2  EE13  F056         	lfsr	1,accelgyroCalBNO055@accel_temp
  8375  0014D6  0E05               	movlw	5
  8376  0014D8                     u10921:
  8377  0014D8  CFDB FFE3          	movff	plusw2,plusw1
  8378  0014DC  06E8               	decf	wreg,f,c
  8379  0014DE  E2FC               	bc	u10921
  8380                           
  8381                           ;BNO055.c: 442: readBytes(0x29, 0x08, 6, &data[0]);
  8382  0014E0  0E08               	movlw	8
  8383  0014E2  0100               	movlb	0	; () banked
  8384  0014E4  6F60               	movwf	readBytes@subAddress& (0+255),b
  8385  0014E6  0E06               	movlw	6
  8386  0014E8  0100               	movlb	0	; () banked
  8387  0014EA  6F61               	movwf	readBytes@count& (0+255),b
  8388  0014EC  0E62               	movlw	low accelgyroCalBNO055@data
  8389  0014EE  0100               	movlb	0	; () banked
  8390  0014F0  6F62               	movwf	readBytes@dest& (0+255),b
  8391  0014F2  0E03               	movlw	high accelgyroCalBNO055@data
  8392  0014F4  0100               	movlb	0	; () banked
  8393  0014F6  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  8394  0014F8  0E29               	movlw	41
  8395  0014FA  EC62  F027         	call	_readBytes
  8396                           
  8397                           ;BNO055.c: 443: accel_temp[0] = (int) (((int)data[1] << 8) | data[0]) ;
  8398  0014FE  0103               	movlb	3	; () banked
  8399  001500  5162               	movf	accelgyroCalBNO055@data& (0+255),w,b
  8400  001502  C363  F0CC         	movff	accelgyroCalBNO055@data+1,??_accelgyroCalBNO055
  8401  001506  0100               	movlb	0	; () banked
  8402  001508  6BCD               	clrf	(??_accelgyroCalBNO055+1)& (0+255),b
  8403  00150A  C0CC  F0CD         	movff	??_accelgyroCalBNO055,??_accelgyroCalBNO055+1
  8404  00150E  0100               	movlb	0	; () banked
  8405  001510  6BCC               	clrf	??_accelgyroCalBNO055& (0+255),b
  8406  001512  0100               	movlb	0	; () banked
  8407  001514  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8408  001516  0103               	movlb	3	; () banked
  8409  001518  6F56               	movwf	accelgyroCalBNO055@accel_temp& (0+255),b
  8410  00151A  0100               	movlb	0	; () banked
  8411  00151C  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8412  00151E  0103               	movlb	3	; () banked
  8413  001520  6F57               	movwf	(accelgyroCalBNO055@accel_temp+1)& (0+255),b
  8414                           
  8415                           ; BSR set to: 3
  8416                           ;BNO055.c: 444: accel_temp[1] = (int) (((int)data[3] << 8) | data[2]) ;
  8417  001522  0103               	movlb	3	; () banked
  8418  001524  5164               	movf	(accelgyroCalBNO055@data+2)& (0+255),w,b
  8419  001526  C365  F0CC         	movff	accelgyroCalBNO055@data+3,??_accelgyroCalBNO055
  8420  00152A  0100               	movlb	0	; () banked
  8421  00152C  6BCD               	clrf	(??_accelgyroCalBNO055+1)& (0+255),b
  8422  00152E  C0CC  F0CD         	movff	??_accelgyroCalBNO055,??_accelgyroCalBNO055+1
  8423  001532  0100               	movlb	0	; () banked
  8424  001534  6BCC               	clrf	??_accelgyroCalBNO055& (0+255),b
  8425  001536  0100               	movlb	0	; () banked
  8426  001538  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8427  00153A  0103               	movlb	3	; () banked
  8428  00153C  6F58               	movwf	(accelgyroCalBNO055@accel_temp+2)& (0+255),b
  8429  00153E  0100               	movlb	0	; () banked
  8430  001540  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8431  001542  0103               	movlb	3	; () banked
  8432  001544  6F59               	movwf	(accelgyroCalBNO055@accel_temp+3)& (0+255),b
  8433                           
  8434                           ; BSR set to: 3
  8435                           ;BNO055.c: 445: accel_temp[2] = (int) (((int)data[5] << 8) | data[4]) ;
  8436  001546  0103               	movlb	3	; () banked
  8437  001548  5166               	movf	(accelgyroCalBNO055@data+4)& (0+255),w,b
  8438  00154A  C367  F0CC         	movff	accelgyroCalBNO055@data+5,??_accelgyroCalBNO055
  8439  00154E  0100               	movlb	0	; () banked
  8440  001550  6BCD               	clrf	(??_accelgyroCalBNO055+1)& (0+255),b
  8441  001552  C0CC  F0CD         	movff	??_accelgyroCalBNO055,??_accelgyroCalBNO055+1
  8442  001556  0100               	movlb	0	; () banked
  8443  001558  6BCC               	clrf	??_accelgyroCalBNO055& (0+255),b
  8444  00155A  0100               	movlb	0	; () banked
  8445  00155C  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8446  00155E  0103               	movlb	3	; () banked
  8447  001560  6F5A               	movwf	(accelgyroCalBNO055@accel_temp+4)& (0+255),b
  8448  001562  0100               	movlb	0	; () banked
  8449  001564  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8450  001566  0103               	movlb	3	; () banked
  8451  001568  6F5B               	movwf	(accelgyroCalBNO055@accel_temp+5)& (0+255),b
  8452                           
  8453                           ; BSR set to: 3
  8454                           ;BNO055.c: 446: accel_bias[0] += (long) accel_temp[0];
  8455  00156A  C356  F0CC         	movff	accelgyroCalBNO055@accel_temp,??_accelgyroCalBNO055
  8456  00156E  C357  F0CD         	movff	accelgyroCalBNO055@accel_temp+1,??_accelgyroCalBNO055+1
  8457  001572  0E00               	movlw	0
  8458  001574  0100               	movlb	0	; () banked
  8459  001576  BFCD               	btfsc	(??_accelgyroCalBNO055+1)& (0+255),7,b
  8460  001578  0EFF               	movlw	255
  8461  00157A  6FCE               	movwf	(??_accelgyroCalBNO055+2)& (0+255),b
  8462  00157C  6FCF               	movwf	(??_accelgyroCalBNO055+3)& (0+255),b
  8463  00157E  0100               	movlb	0	; () banked
  8464  001580  51CC               	movf	??_accelgyroCalBNO055& (0+255),w,b
  8465  001582  0103               	movlb	3	; () banked
  8466  001584  277C               	addwf	accelgyroCalBNO055@accel_bias& (0+255),f,b
  8467  001586  0100               	movlb	0	; () banked
  8468  001588  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8469  00158A  0103               	movlb	3	; () banked
  8470  00158C  237D               	addwfc	(accelgyroCalBNO055@accel_bias+1)& (0+255),f,b
  8471  00158E  0100               	movlb	0	; () banked
  8472  001590  51CE               	movf	(??_accelgyroCalBNO055+2)& (0+255),w,b
  8473  001592  0103               	movlb	3	; () banked
  8474  001594  237E               	addwfc	(accelgyroCalBNO055@accel_bias+2)& (0+255),f,b
  8475  001596  0100               	movlb	0	; () banked
  8476  001598  51CF               	movf	(??_accelgyroCalBNO055+3)& (0+255),w,b
  8477  00159A  0103               	movlb	3	; () banked
  8478  00159C  237F               	addwfc	(accelgyroCalBNO055@accel_bias+3)& (0+255),f,b
  8479                           
  8480                           ; BSR set to: 3
  8481                           ;BNO055.c: 447: accel_bias[1] += (long) accel_temp[1];
  8482  00159E  C358  F0CC         	movff	accelgyroCalBNO055@accel_temp+2,??_accelgyroCalBNO055
  8483  0015A2  C359  F0CD         	movff	accelgyroCalBNO055@accel_temp+3,??_accelgyroCalBNO055+1
  8484  0015A6  0E00               	movlw	0
  8485  0015A8  0100               	movlb	0	; () banked
  8486  0015AA  BFCD               	btfsc	(??_accelgyroCalBNO055+1)& (0+255),7,b
  8487  0015AC  0EFF               	movlw	255
  8488  0015AE  6FCE               	movwf	(??_accelgyroCalBNO055+2)& (0+255),b
  8489  0015B0  6FCF               	movwf	(??_accelgyroCalBNO055+3)& (0+255),b
  8490  0015B2  0100               	movlb	0	; () banked
  8491  0015B4  51CC               	movf	??_accelgyroCalBNO055& (0+255),w,b
  8492  0015B6  0103               	movlb	3	; () banked
  8493  0015B8  2780               	addwf	(accelgyroCalBNO055@accel_bias+4)& (0+255),f,b
  8494  0015BA  0100               	movlb	0	; () banked
  8495  0015BC  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8496  0015BE  0103               	movlb	3	; () banked
  8497  0015C0  2381               	addwfc	(accelgyroCalBNO055@accel_bias+5)& (0+255),f,b
  8498  0015C2  0100               	movlb	0	; () banked
  8499  0015C4  51CE               	movf	(??_accelgyroCalBNO055+2)& (0+255),w,b
  8500  0015C6  0103               	movlb	3	; () banked
  8501  0015C8  2382               	addwfc	(accelgyroCalBNO055@accel_bias+6)& (0+255),f,b
  8502  0015CA  0100               	movlb	0	; () banked
  8503  0015CC  51CF               	movf	(??_accelgyroCalBNO055+3)& (0+255),w,b
  8504  0015CE  0103               	movlb	3	; () banked
  8505  0015D0  2383               	addwfc	(accelgyroCalBNO055@accel_bias+7)& (0+255),f,b
  8506                           
  8507                           ; BSR set to: 3
  8508                           ;BNO055.c: 448: accel_bias[2] += (long) accel_temp[2];
  8509  0015D2  C35A  F0CC         	movff	accelgyroCalBNO055@accel_temp+4,??_accelgyroCalBNO055
  8510  0015D6  C35B  F0CD         	movff	accelgyroCalBNO055@accel_temp+5,??_accelgyroCalBNO055+1
  8511  0015DA  0E00               	movlw	0
  8512  0015DC  0100               	movlb	0	; () banked
  8513  0015DE  BFCD               	btfsc	(??_accelgyroCalBNO055+1)& (0+255),7,b
  8514  0015E0  0EFF               	movlw	255
  8515  0015E2  6FCE               	movwf	(??_accelgyroCalBNO055+2)& (0+255),b
  8516  0015E4  6FCF               	movwf	(??_accelgyroCalBNO055+3)& (0+255),b
  8517  0015E6  0100               	movlb	0	; () banked
  8518  0015E8  51CC               	movf	??_accelgyroCalBNO055& (0+255),w,b
  8519  0015EA  0103               	movlb	3	; () banked
  8520  0015EC  2784               	addwf	(accelgyroCalBNO055@accel_bias+8)& (0+255),f,b
  8521  0015EE  0100               	movlb	0	; () banked
  8522  0015F0  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8523  0015F2  0103               	movlb	3	; () banked
  8524  0015F4  2385               	addwfc	(accelgyroCalBNO055@accel_bias+9)& (0+255),f,b
  8525  0015F6  0100               	movlb	0	; () banked
  8526  0015F8  51CE               	movf	(??_accelgyroCalBNO055+2)& (0+255),w,b
  8527  0015FA  0103               	movlb	3	; () banked
  8528  0015FC  2386               	addwfc	(accelgyroCalBNO055@accel_bias+10)& (0+255),f,b
  8529  0015FE  0100               	movlb	0	; () banked
  8530  001600  51CF               	movf	(??_accelgyroCalBNO055+3)& (0+255),w,b
  8531  001602  0103               	movlb	3	; () banked
  8532  001604  2387               	addwfc	(accelgyroCalBNO055@accel_bias+11)& (0+255),f,b
  8533                           
  8534                           ; BSR set to: 3
  8535                           ;BNO055.c: 449: Delay(20);
  8536  001606  0E00               	movlw	0
  8537  001608  6E1C               	movwf	Delay@wait+1,c
  8538  00160A  0E14               	movlw	20
  8539  00160C  6E1B               	movwf	Delay@wait,c
  8540  00160E  EC47  F02B         	call	_Delay	;wreg free
  8541  001612  0E01               	movlw	1
  8542  001614  0103               	movlb	3	; () banked
  8543  001616  2768               	addwf	accelgyroCalBNO055@ii& (0+255),f,b
  8544  001618  0E00               	movlw	0
  8545  00161A  2369               	addwfc	(accelgyroCalBNO055@ii+1)& (0+255),f,b
  8546  00161C  236A               	addwfc	(accelgyroCalBNO055@ii+2)& (0+255),f,b
  8547  00161E  236B               	addwfc	(accelgyroCalBNO055@ii+3)& (0+255),f,b
  8548  001620                     l9461:
  8549                           
  8550                           ; BSR set to: 3
  8551  001620  0103               	movlb	3	; () banked
  8552  001622  5178               	movf	accelgyroCalBNO055@sample_count& (0+255),w,b
  8553  001624  0103               	movlb	3	; () banked
  8554  001626  5D68               	subwf	accelgyroCalBNO055@ii& (0+255),w,b
  8555  001628  0103               	movlb	3	; () banked
  8556  00162A  5179               	movf	(accelgyroCalBNO055@sample_count+1)& (0+255),w,b
  8557  00162C  0103               	movlb	3	; () banked
  8558  00162E  5969               	subwfb	(accelgyroCalBNO055@ii+1)& (0+255),w,b
  8559  001630  0103               	movlb	3	; () banked
  8560  001632  517A               	movf	(accelgyroCalBNO055@sample_count+2)& (0+255),w,b
  8561  001634  0103               	movlb	3	; () banked
  8562  001636  596A               	subwfb	(accelgyroCalBNO055@ii+2)& (0+255),w,b
  8563  001638  0103               	movlb	3	; () banked
  8564  00163A  516B               	movf	(accelgyroCalBNO055@ii+3)& (0+255),w,b
  8565  00163C  0A80               	xorlw	128
  8566  00163E  0100               	movlb	0	; () banked
  8567  001640  6FCC               	movwf	??_accelgyroCalBNO055& (0+255),b
  8568  001642  0103               	movlb	3	; () banked
  8569  001644  517B               	movf	(accelgyroCalBNO055@sample_count+3)& (0+255),w,b
  8570  001646  0A80               	xorlw	128
  8571  001648  0100               	movlb	0	; () banked
  8572  00164A  59CC               	subwfb	??_accelgyroCalBNO055& (0+255),w,b
  8573  00164C  A0D8               	btfss	status,0,c
  8574  00164E  D73F               	goto	l9441
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;BNO055.c: 450: }
  8578                           ;BNO055.c: 451: accel_bias[0] /= (long) sample_count;
  8579                           
  8580                           ; BSR set to: 0
  8581  001650  C37C  F01B         	movff	accelgyroCalBNO055@accel_bias,___aldiv@dividend
  8582  001654  C37D  F01C         	movff	accelgyroCalBNO055@accel_bias+1,___aldiv@dividend+1
  8583  001658  C37E  F01D         	movff	accelgyroCalBNO055@accel_bias+2,___aldiv@dividend+2
  8584  00165C  C37F  F01E         	movff	accelgyroCalBNO055@accel_bias+3,___aldiv@dividend+3
  8585  001660  C378  F01F         	movff	accelgyroCalBNO055@sample_count,___aldiv@divisor
  8586  001664  C379  F020         	movff	accelgyroCalBNO055@sample_count+1,___aldiv@divisor+1
  8587  001668  C37A  F021         	movff	accelgyroCalBNO055@sample_count+2,___aldiv@divisor+2
  8588  00166C  C37B  F022         	movff	accelgyroCalBNO055@sample_count+3,___aldiv@divisor+3
  8589  001670  EC7D  F023         	call	___aldiv	;wreg free
  8590  001674  C01B  F37C         	movff	?___aldiv,accelgyroCalBNO055@accel_bias
  8591  001678  C01C  F37D         	movff	?___aldiv+1,accelgyroCalBNO055@accel_bias+1
  8592  00167C  C01D  F37E         	movff	?___aldiv+2,accelgyroCalBNO055@accel_bias+2
  8593  001680  C01E  F37F         	movff	?___aldiv+3,accelgyroCalBNO055@accel_bias+3
  8594                           
  8595                           ;BNO055.c: 452: accel_bias[1] /= (long) sample_count;
  8596  001684  C380  F01B         	movff	accelgyroCalBNO055@accel_bias+4,___aldiv@dividend
  8597  001688  C381  F01C         	movff	accelgyroCalBNO055@accel_bias+5,___aldiv@dividend+1
  8598  00168C  C382  F01D         	movff	accelgyroCalBNO055@accel_bias+6,___aldiv@dividend+2
  8599  001690  C383  F01E         	movff	accelgyroCalBNO055@accel_bias+7,___aldiv@dividend+3
  8600  001694  C378  F01F         	movff	accelgyroCalBNO055@sample_count,___aldiv@divisor
  8601  001698  C379  F020         	movff	accelgyroCalBNO055@sample_count+1,___aldiv@divisor+1
  8602  00169C  C37A  F021         	movff	accelgyroCalBNO055@sample_count+2,___aldiv@divisor+2
  8603  0016A0  C37B  F022         	movff	accelgyroCalBNO055@sample_count+3,___aldiv@divisor+3
  8604  0016A4  EC7D  F023         	call	___aldiv	;wreg free
  8605  0016A8  C01B  F380         	movff	?___aldiv,accelgyroCalBNO055@accel_bias+4
  8606  0016AC  C01C  F381         	movff	?___aldiv+1,accelgyroCalBNO055@accel_bias+5
  8607  0016B0  C01D  F382         	movff	?___aldiv+2,accelgyroCalBNO055@accel_bias+6
  8608  0016B4  C01E  F383         	movff	?___aldiv+3,accelgyroCalBNO055@accel_bias+7
  8609                           
  8610                           ;BNO055.c: 453: accel_bias[2] /= (long) sample_count;
  8611  0016B8  C384  F01B         	movff	accelgyroCalBNO055@accel_bias+8,___aldiv@dividend
  8612  0016BC  C385  F01C         	movff	accelgyroCalBNO055@accel_bias+9,___aldiv@dividend+1
  8613  0016C0  C386  F01D         	movff	accelgyroCalBNO055@accel_bias+10,___aldiv@dividend+2
  8614  0016C4  C387  F01E         	movff	accelgyroCalBNO055@accel_bias+11,___aldiv@dividend+3
  8615  0016C8  C378  F01F         	movff	accelgyroCalBNO055@sample_count,___aldiv@divisor
  8616  0016CC  C379  F020         	movff	accelgyroCalBNO055@sample_count+1,___aldiv@divisor+1
  8617  0016D0  C37A  F021         	movff	accelgyroCalBNO055@sample_count+2,___aldiv@divisor+2
  8618  0016D4  C37B  F022         	movff	accelgyroCalBNO055@sample_count+3,___aldiv@divisor+3
  8619  0016D8  EC7D  F023         	call	___aldiv	;wreg free
  8620  0016DC  C01B  F384         	movff	?___aldiv,accelgyroCalBNO055@accel_bias+8
  8621  0016E0  C01C  F385         	movff	?___aldiv+1,accelgyroCalBNO055@accel_bias+9
  8622  0016E4  C01D  F386         	movff	?___aldiv+2,accelgyroCalBNO055@accel_bias+10
  8623  0016E8  C01E  F387         	movff	?___aldiv+3,accelgyroCalBNO055@accel_bias+11
  8624                           
  8625                           ;BNO055.c: 455: if(accel_bias[2] > 0.0) {
  8626  0016EC  0E00               	movlw	0
  8627  0016EE  0100               	movlb	0	; () banked
  8628  0016F0  6F62               	movwf	___ftge@ff1& (0+255),b
  8629  0016F2  0E00               	movlw	0
  8630  0016F4  0100               	movlb	0	; () banked
  8631  0016F6  6F63               	movwf	(___ftge@ff1+1)& (0+255),b
  8632  0016F8  0E00               	movlw	0
  8633  0016FA  0100               	movlb	0	; () banked
  8634  0016FC  6F64               	movwf	(___ftge@ff1+2)& (0+255),b
  8635  0016FE  C384  F023         	movff	accelgyroCalBNO055@accel_bias+8,___altoft@c
  8636  001702  C385  F024         	movff	accelgyroCalBNO055@accel_bias+9,___altoft@c+1
  8637  001706  C386  F025         	movff	accelgyroCalBNO055@accel_bias+10,___altoft@c+2
  8638  00170A  C387  F026         	movff	accelgyroCalBNO055@accel_bias+11,___altoft@c+3
  8639  00170E  EC16  F029         	call	___altoft	;wreg free
  8640  001712  C023  F065         	movff	?___altoft,___ftge@ff2
  8641  001716  C024  F066         	movff	?___altoft+1,___ftge@ff2+1
  8642  00171A  C025  F067         	movff	?___altoft+2,___ftge@ff2+2
  8643  00171E  ECE3  F023         	call	___ftge	;wreg free
  8644  001722  0100               	movlb	0	; () banked
  8645  001724  B0D8               	btfsc	status,0,c
  8646  001726  D009               	goto	l9467
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;BNO055.c: 456: accel_bias[2] -= (long) 1000;
  8650  001728  0E18               	movlw	24
  8651  00172A  0103               	movlb	3	; () banked
  8652  00172C  2784               	addwf	(accelgyroCalBNO055@accel_bias+8)& (0+255),f,b
  8653  00172E  0EFC               	movlw	252
  8654  001730  2385               	addwfc	(accelgyroCalBNO055@accel_bias+9)& (0+255),f,b
  8655  001732  0EFF               	movlw	255
  8656  001734  2386               	addwfc	(accelgyroCalBNO055@accel_bias+10)& (0+255),f,b
  8657  001736  0EFF               	movlw	255
  8658  001738  D008               	goto	L2
  8659  00173A                     l9467:
  8660                           
  8661                           ;BNO055.c: 458: else {
  8662                           ;BNO055.c: 459: accel_bias[2] += (long) 1000;
  8663  00173A  0EE8               	movlw	232
  8664  00173C  0103               	movlb	3	; () banked
  8665  00173E  2784               	addwf	(accelgyroCalBNO055@accel_bias+8)& (0+255),f,b
  8666  001740  0E03               	movlw	3
  8667  001742  2385               	addwfc	(accelgyroCalBNO055@accel_bias+9)& (0+255),f,b
  8668  001744  0E00               	movlw	0
  8669  001746  2386               	addwfc	(accelgyroCalBNO055@accel_bias+10)& (0+255),f,b
  8670  001748  0E00               	movlw	0
  8671  00174A                     L2:
  8672  00174A  2387               	addwfc	(accelgyroCalBNO055@accel_bias+11)& (0+255),f,b
  8673                           
  8674                           ; BSR set to: 3
  8675                           ;BNO055.c: 460: }
  8676                           ;BNO055.c: 462: dest1[0] = (float) accel_bias[0];
  8677                           
  8678                           ; BSR set to: 3
  8679  00174C  C37C  F023         	movff	accelgyroCalBNO055@accel_bias,___altoft@c
  8680  001750  C37D  F024         	movff	accelgyroCalBNO055@accel_bias+1,___altoft@c+1
  8681  001754  C37E  F025         	movff	accelgyroCalBNO055@accel_bias+2,___altoft@c+2
  8682  001758  C37F  F026         	movff	accelgyroCalBNO055@accel_bias+3,___altoft@c+3
  8683  00175C  EC16  F029         	call	___altoft	;wreg free
  8684  001760  C0C8  FFD9         	movff	accelgyroCalBNO055@dest1,fsr2l
  8685  001764  C0C9  FFDA         	movff	accelgyroCalBNO055@dest1+1,fsr2h
  8686  001768  C023  FFDE         	movff	?___altoft,postinc2
  8687  00176C  C024  FFDE         	movff	?___altoft+1,postinc2
  8688  001770  C025  FFDE         	movff	?___altoft+2,postinc2
  8689                           
  8690                           ;BNO055.c: 463: dest1[1] = (float) accel_bias[1];
  8691  001774  C380  F023         	movff	accelgyroCalBNO055@accel_bias+4,___altoft@c
  8692  001778  C381  F024         	movff	accelgyroCalBNO055@accel_bias+5,___altoft@c+1
  8693  00177C  C382  F025         	movff	accelgyroCalBNO055@accel_bias+6,___altoft@c+2
  8694  001780  C383  F026         	movff	accelgyroCalBNO055@accel_bias+7,___altoft@c+3
  8695  001784  EC16  F029         	call	___altoft	;wreg free
  8696  001788  0100               	movlb	0	; () banked
  8697  00178A  EE20 F003          	lfsr	2,3
  8698  00178E  51C8               	movf	accelgyroCalBNO055@dest1& (0+255),w,b
  8699  001790  26D9               	addwf	fsr2l,f,c
  8700  001792  51C9               	movf	(accelgyroCalBNO055@dest1+1)& (0+255),w,b
  8701  001794  22DA               	addwfc	fsr2h,f,c
  8702  001796  C023  FFDE         	movff	?___altoft,postinc2
  8703  00179A  C024  FFDE         	movff	?___altoft+1,postinc2
  8704  00179E  C025  FFDE         	movff	?___altoft+2,postinc2
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;BNO055.c: 464: dest1[2] = (float) accel_bias[2];
  8708  0017A2  C384  F023         	movff	accelgyroCalBNO055@accel_bias+8,___altoft@c
  8709  0017A6  C385  F024         	movff	accelgyroCalBNO055@accel_bias+9,___altoft@c+1
  8710  0017AA  C386  F025         	movff	accelgyroCalBNO055@accel_bias+10,___altoft@c+2
  8711  0017AE  C387  F026         	movff	accelgyroCalBNO055@accel_bias+11,___altoft@c+3
  8712  0017B2  EC16  F029         	call	___altoft	;wreg free
  8713  0017B6  0100               	movlb	0	; () banked
  8714  0017B8  EE20 F006          	lfsr	2,6
  8715  0017BC  51C8               	movf	accelgyroCalBNO055@dest1& (0+255),w,b
  8716  0017BE  26D9               	addwf	fsr2l,f,c
  8717  0017C0  51C9               	movf	(accelgyroCalBNO055@dest1+1)& (0+255),w,b
  8718  0017C2  22DA               	addwfc	fsr2h,f,c
  8719  0017C4  C023  FFDE         	movff	?___altoft,postinc2
  8720  0017C8  C024  FFDE         	movff	?___altoft+1,postinc2
  8721  0017CC  C025  FFDE         	movff	?___altoft+2,postinc2
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;BNO055.c: 467: writeByte(0x29, 0x0A, Gbw << 3 | GFS_2000DPS );
  8725  0017D0  0E0A               	movlw	10
  8726  0017D2  0100               	movlb	0	; () banked
  8727  0017D4  6F60               	movwf	writeByte@subAddress& (0+255),b
  8728  0017D6  3842               	swapf	_Gbw,w,c
  8729  0017D8  42E8               	rrncf	wreg,f,c
  8730  0017DA  0BF8               	andlw	248
  8731  0017DC  0100               	movlb	0	; () banked
  8732  0017DE  6F61               	movwf	writeByte@data& (0+255),b
  8733  0017E0  0E29               	movlw	41
  8734  0017E2  EC8E  F029         	call	_writeByte
  8735                           
  8736                           ;BNO055.c: 468: writeByte(0x29, 0x0B, GPwrMode);for(ii = 0; ii < sample_count; ii++) {
  8737  0017E6  0E0B               	movlw	11
  8738  0017E8  0100               	movlb	0	; () banked
  8739  0017EA  6F60               	movwf	writeByte@subAddress& (0+255),b
  8740  0017EC  C039  F061         	movff	_GPwrMode,writeByte@data
  8741  0017F0  0E29               	movlw	41
  8742  0017F2  EC8E  F029         	call	_writeByte
  8743  0017F6  0E00               	movlw	0
  8744  0017F8  0103               	movlb	3	; () banked
  8745  0017FA  6F68               	movwf	accelgyroCalBNO055@ii& (0+255),b
  8746  0017FC  0E00               	movlw	0
  8747  0017FE  6F69               	movwf	(accelgyroCalBNO055@ii+1)& (0+255),b
  8748  001800  0E00               	movlw	0
  8749  001802  6F6A               	movwf	(accelgyroCalBNO055@ii+2)& (0+255),b
  8750  001804  0E00               	movlw	0
  8751  001806  6F6B               	movwf	(accelgyroCalBNO055@ii+3)& (0+255),b
  8752  001808  D0A9               	goto	l9501
  8753  00180A                     l9481:
  8754                           
  8755                           ;BNO055.c: 469: int gyro_temp[3] = {0, 0, 0};
  8756  00180A  EE22  F047         	lfsr	2,accelgyroCalBNO055@F8200
  8757  00180E  EE13  F05C         	lfsr	1,accelgyroCalBNO055@gyro_temp
  8758  001812  0E05               	movlw	5
  8759  001814                     u10951:
  8760  001814  CFDB FFE3          	movff	plusw2,plusw1
  8761  001818  06E8               	decf	wreg,f,c
  8762  00181A  E2FC               	bc	u10951
  8763                           
  8764                           ;BNO055.c: 470: readBytes(0x29, 0x14, 6, &data[0]);
  8765  00181C  0E14               	movlw	20
  8766  00181E  0100               	movlb	0	; () banked
  8767  001820  6F60               	movwf	readBytes@subAddress& (0+255),b
  8768  001822  0E06               	movlw	6
  8769  001824  0100               	movlb	0	; () banked
  8770  001826  6F61               	movwf	readBytes@count& (0+255),b
  8771  001828  0E62               	movlw	low accelgyroCalBNO055@data
  8772  00182A  0100               	movlb	0	; () banked
  8773  00182C  6F62               	movwf	readBytes@dest& (0+255),b
  8774  00182E  0E03               	movlw	high accelgyroCalBNO055@data
  8775  001830  0100               	movlb	0	; () banked
  8776  001832  6F63               	movwf	(readBytes@dest+1)& (0+255),b
  8777  001834  0E29               	movlw	41
  8778  001836  EC62  F027         	call	_readBytes
  8779                           
  8780                           ;BNO055.c: 471: gyro_temp[0] = (int) (((int)data[1] << 8) | data[0]) ;
  8781  00183A  0103               	movlb	3	; () banked
  8782  00183C  5162               	movf	accelgyroCalBNO055@data& (0+255),w,b
  8783  00183E  C363  F0CC         	movff	accelgyroCalBNO055@data+1,??_accelgyroCalBNO055
  8784  001842  0100               	movlb	0	; () banked
  8785  001844  6BCD               	clrf	(??_accelgyroCalBNO055+1)& (0+255),b
  8786  001846  C0CC  F0CD         	movff	??_accelgyroCalBNO055,??_accelgyroCalBNO055+1
  8787  00184A  0100               	movlb	0	; () banked
  8788  00184C  6BCC               	clrf	??_accelgyroCalBNO055& (0+255),b
  8789  00184E  0100               	movlb	0	; () banked
  8790  001850  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8791  001852  0103               	movlb	3	; () banked
  8792  001854  6F5C               	movwf	accelgyroCalBNO055@gyro_temp& (0+255),b
  8793  001856  0100               	movlb	0	; () banked
  8794  001858  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8795  00185A  0103               	movlb	3	; () banked
  8796  00185C  6F5D               	movwf	(accelgyroCalBNO055@gyro_temp+1)& (0+255),b
  8797                           
  8798                           ; BSR set to: 3
  8799                           ;BNO055.c: 472: gyro_temp[1] = (int) (((int)data[3] << 8) | data[2]) ;
  8800  00185E  0103               	movlb	3	; () banked
  8801  001860  5164               	movf	(accelgyroCalBNO055@data+2)& (0+255),w,b
  8802  001862  C365  F0CC         	movff	accelgyroCalBNO055@data+3,??_accelgyroCalBNO055
  8803  001866  0100               	movlb	0	; () banked
  8804  001868  6BCD               	clrf	(??_accelgyroCalBNO055+1)& (0+255),b
  8805  00186A  C0CC  F0CD         	movff	??_accelgyroCalBNO055,??_accelgyroCalBNO055+1
  8806  00186E  0100               	movlb	0	; () banked
  8807  001870  6BCC               	clrf	??_accelgyroCalBNO055& (0+255),b
  8808  001872  0100               	movlb	0	; () banked
  8809  001874  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8810  001876  0103               	movlb	3	; () banked
  8811  001878  6F5E               	movwf	(accelgyroCalBNO055@gyro_temp+2)& (0+255),b
  8812  00187A  0100               	movlb	0	; () banked
  8813  00187C  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8814  00187E  0103               	movlb	3	; () banked
  8815  001880  6F5F               	movwf	(accelgyroCalBNO055@gyro_temp+3)& (0+255),b
  8816                           
  8817                           ; BSR set to: 3
  8818                           ;BNO055.c: 473: gyro_temp[2] = (int) (((int)data[5] << 8) | data[4]) ;
  8819  001882  0103               	movlb	3	; () banked
  8820  001884  5166               	movf	(accelgyroCalBNO055@data+4)& (0+255),w,b
  8821  001886  C367  F0CC         	movff	accelgyroCalBNO055@data+5,??_accelgyroCalBNO055
  8822  00188A  0100               	movlb	0	; () banked
  8823  00188C  6BCD               	clrf	(??_accelgyroCalBNO055+1)& (0+255),b
  8824  00188E  C0CC  F0CD         	movff	??_accelgyroCalBNO055,??_accelgyroCalBNO055+1
  8825  001892  0100               	movlb	0	; () banked
  8826  001894  6BCC               	clrf	??_accelgyroCalBNO055& (0+255),b
  8827  001896  0100               	movlb	0	; () banked
  8828  001898  11CC               	iorwf	??_accelgyroCalBNO055& (0+255),w,b
  8829  00189A  0103               	movlb	3	; () banked
  8830  00189C  6F60               	movwf	(accelgyroCalBNO055@gyro_temp+4)& (0+255),b
  8831  00189E  0100               	movlb	0	; () banked
  8832  0018A0  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8833  0018A2  0103               	movlb	3	; () banked
  8834  0018A4  6F61               	movwf	(accelgyroCalBNO055@gyro_temp+5)& (0+255),b
  8835                           
  8836                           ; BSR set to: 3
  8837                           ;BNO055.c: 474: gyro_bias[0] += (long) gyro_temp[0];
  8838  0018A6  C35C  F0CC         	movff	accelgyroCalBNO055@gyro_temp,??_accelgyroCalBNO055
  8839  0018AA  C35D  F0CD         	movff	accelgyroCalBNO055@gyro_temp+1,??_accelgyroCalBNO055+1
  8840  0018AE  0E00               	movlw	0
  8841  0018B0  0100               	movlb	0	; () banked
  8842  0018B2  BFCD               	btfsc	(??_accelgyroCalBNO055+1)& (0+255),7,b
  8843  0018B4  0EFF               	movlw	255
  8844  0018B6  6FCE               	movwf	(??_accelgyroCalBNO055+2)& (0+255),b
  8845  0018B8  6FCF               	movwf	(??_accelgyroCalBNO055+3)& (0+255),b
  8846  0018BA  0100               	movlb	0	; () banked
  8847  0018BC  51CC               	movf	??_accelgyroCalBNO055& (0+255),w,b
  8848  0018BE  0103               	movlb	3	; () banked
  8849  0018C0  276C               	addwf	accelgyroCalBNO055@gyro_bias& (0+255),f,b
  8850  0018C2  0100               	movlb	0	; () banked
  8851  0018C4  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8852  0018C6  0103               	movlb	3	; () banked
  8853  0018C8  236D               	addwfc	(accelgyroCalBNO055@gyro_bias+1)& (0+255),f,b
  8854  0018CA  0100               	movlb	0	; () banked
  8855  0018CC  51CE               	movf	(??_accelgyroCalBNO055+2)& (0+255),w,b
  8856  0018CE  0103               	movlb	3	; () banked
  8857  0018D0  236E               	addwfc	(accelgyroCalBNO055@gyro_bias+2)& (0+255),f,b
  8858  0018D2  0100               	movlb	0	; () banked
  8859  0018D4  51CF               	movf	(??_accelgyroCalBNO055+3)& (0+255),w,b
  8860  0018D6  0103               	movlb	3	; () banked
  8861  0018D8  236F               	addwfc	(accelgyroCalBNO055@gyro_bias+3)& (0+255),f,b
  8862                           
  8863                           ; BSR set to: 3
  8864                           ;BNO055.c: 475: gyro_bias[1] += (long) gyro_temp[1];
  8865  0018DA  C35E  F0CC         	movff	accelgyroCalBNO055@gyro_temp+2,??_accelgyroCalBNO055
  8866  0018DE  C35F  F0CD         	movff	accelgyroCalBNO055@gyro_temp+3,??_accelgyroCalBNO055+1
  8867  0018E2  0E00               	movlw	0
  8868  0018E4  0100               	movlb	0	; () banked
  8869  0018E6  BFCD               	btfsc	(??_accelgyroCalBNO055+1)& (0+255),7,b
  8870  0018E8  0EFF               	movlw	255
  8871  0018EA  6FCE               	movwf	(??_accelgyroCalBNO055+2)& (0+255),b
  8872  0018EC  6FCF               	movwf	(??_accelgyroCalBNO055+3)& (0+255),b
  8873  0018EE  0100               	movlb	0	; () banked
  8874  0018F0  51CC               	movf	??_accelgyroCalBNO055& (0+255),w,b
  8875  0018F2  0103               	movlb	3	; () banked
  8876  0018F4  2770               	addwf	(accelgyroCalBNO055@gyro_bias+4)& (0+255),f,b
  8877  0018F6  0100               	movlb	0	; () banked
  8878  0018F8  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8879  0018FA  0103               	movlb	3	; () banked
  8880  0018FC  2371               	addwfc	(accelgyroCalBNO055@gyro_bias+5)& (0+255),f,b
  8881  0018FE  0100               	movlb	0	; () banked
  8882  001900  51CE               	movf	(??_accelgyroCalBNO055+2)& (0+255),w,b
  8883  001902  0103               	movlb	3	; () banked
  8884  001904  2372               	addwfc	(accelgyroCalBNO055@gyro_bias+6)& (0+255),f,b
  8885  001906  0100               	movlb	0	; () banked
  8886  001908  51CF               	movf	(??_accelgyroCalBNO055+3)& (0+255),w,b
  8887  00190A  0103               	movlb	3	; () banked
  8888  00190C  2373               	addwfc	(accelgyroCalBNO055@gyro_bias+7)& (0+255),f,b
  8889                           
  8890                           ; BSR set to: 3
  8891                           ;BNO055.c: 476: gyro_bias[2] += (long) gyro_temp[2];
  8892  00190E  C360  F0CC         	movff	accelgyroCalBNO055@gyro_temp+4,??_accelgyroCalBNO055
  8893  001912  C361  F0CD         	movff	accelgyroCalBNO055@gyro_temp+5,??_accelgyroCalBNO055+1
  8894  001916  0E00               	movlw	0
  8895  001918  0100               	movlb	0	; () banked
  8896  00191A  BFCD               	btfsc	(??_accelgyroCalBNO055+1)& (0+255),7,b
  8897  00191C  0EFF               	movlw	255
  8898  00191E  6FCE               	movwf	(??_accelgyroCalBNO055+2)& (0+255),b
  8899  001920  6FCF               	movwf	(??_accelgyroCalBNO055+3)& (0+255),b
  8900  001922  0100               	movlb	0	; () banked
  8901  001924  51CC               	movf	??_accelgyroCalBNO055& (0+255),w,b
  8902  001926  0103               	movlb	3	; () banked
  8903  001928  2774               	addwf	(accelgyroCalBNO055@gyro_bias+8)& (0+255),f,b
  8904  00192A  0100               	movlb	0	; () banked
  8905  00192C  51CD               	movf	(??_accelgyroCalBNO055+1)& (0+255),w,b
  8906  00192E  0103               	movlb	3	; () banked
  8907  001930  2375               	addwfc	(accelgyroCalBNO055@gyro_bias+9)& (0+255),f,b
  8908  001932  0100               	movlb	0	; () banked
  8909  001934  51CE               	movf	(??_accelgyroCalBNO055+2)& (0+255),w,b
  8910  001936  0103               	movlb	3	; () banked
  8911  001938  2376               	addwfc	(accelgyroCalBNO055@gyro_bias+10)& (0+255),f,b
  8912  00193A  0100               	movlb	0	; () banked
  8913  00193C  51CF               	movf	(??_accelgyroCalBNO055+3)& (0+255),w,b
  8914  00193E  0103               	movlb	3	; () banked
  8915  001940  2377               	addwfc	(accelgyroCalBNO055@gyro_bias+11)& (0+255),f,b
  8916                           
  8917                           ; BSR set to: 3
  8918                           ;BNO055.c: 477: Delay(35);
  8919  001942  0E00               	movlw	0
  8920  001944  6E1C               	movwf	Delay@wait+1,c
  8921  001946  0E23               	movlw	35
  8922  001948  6E1B               	movwf	Delay@wait,c
  8923  00194A  EC47  F02B         	call	_Delay	;wreg free
  8924  00194E  0E01               	movlw	1
  8925  001950  0103               	movlb	3	; () banked
  8926  001952  2768               	addwf	accelgyroCalBNO055@ii& (0+255),f,b
  8927  001954  0E00               	movlw	0
  8928  001956  2369               	addwfc	(accelgyroCalBNO055@ii+1)& (0+255),f,b
  8929  001958  236A               	addwfc	(accelgyroCalBNO055@ii+2)& (0+255),f,b
  8930  00195A  236B               	addwfc	(accelgyroCalBNO055@ii+3)& (0+255),f,b
  8931  00195C                     l9501:
  8932                           
  8933                           ; BSR set to: 3
  8934  00195C  0103               	movlb	3	; () banked
  8935  00195E  5178               	movf	accelgyroCalBNO055@sample_count& (0+255),w,b
  8936  001960  0103               	movlb	3	; () banked
  8937  001962  5D68               	subwf	accelgyroCalBNO055@ii& (0+255),w,b
  8938  001964  0103               	movlb	3	; () banked
  8939  001966  5179               	movf	(accelgyroCalBNO055@sample_count+1)& (0+255),w,b
  8940  001968  0103               	movlb	3	; () banked
  8941  00196A  5969               	subwfb	(accelgyroCalBNO055@ii+1)& (0+255),w,b
  8942  00196C  0103               	movlb	3	; () banked
  8943  00196E  517A               	movf	(accelgyroCalBNO055@sample_count+2)& (0+255),w,b
  8944  001970  0103               	movlb	3	; () banked
  8945  001972  596A               	subwfb	(accelgyroCalBNO055@ii+2)& (0+255),w,b
  8946  001974  0103               	movlb	3	; () banked
  8947  001976  516B               	movf	(accelgyroCalBNO055@ii+3)& (0+255),w,b
  8948  001978  0A80               	xorlw	128
  8949  00197A  0100               	movlb	0	; () banked
  8950  00197C  6FCC               	movwf	??_accelgyroCalBNO055& (0+255),b
  8951  00197E  0103               	movlb	3	; () banked
  8952  001980  517B               	movf	(accelgyroCalBNO055@sample_count+3)& (0+255),w,b
  8953  001982  0A80               	xorlw	128
  8954  001984  0100               	movlb	0	; () banked
  8955  001986  59CC               	subwfb	??_accelgyroCalBNO055& (0+255),w,b
  8956  001988  A0D8               	btfss	status,0,c
  8957  00198A  D73F               	goto	l9481
  8958                           
  8959                           ; BSR set to: 0
  8960                           ;BNO055.c: 478: }
  8961                           ;BNO055.c: 479: gyro_bias[0] /= (long) sample_count;
  8962                           
  8963                           ; BSR set to: 0
  8964  00198C  C36C  F01B         	movff	accelgyroCalBNO055@gyro_bias,___aldiv@dividend
  8965  001990  C36D  F01C         	movff	accelgyroCalBNO055@gyro_bias+1,___aldiv@dividend+1
  8966  001994  C36E  F01D         	movff	accelgyroCalBNO055@gyro_bias+2,___aldiv@dividend+2
  8967  001998  C36F  F01E         	movff	accelgyroCalBNO055@gyro_bias+3,___aldiv@dividend+3
  8968  00199C  C378  F01F         	movff	accelgyroCalBNO055@sample_count,___aldiv@divisor
  8969  0019A0  C379  F020         	movff	accelgyroCalBNO055@sample_count+1,___aldiv@divisor+1
  8970  0019A4  C37A  F021         	movff	accelgyroCalBNO055@sample_count+2,___aldiv@divisor+2
  8971  0019A8  C37B  F022         	movff	accelgyroCalBNO055@sample_count+3,___aldiv@divisor+3
  8972  0019AC  EC7D  F023         	call	___aldiv	;wreg free
  8973  0019B0  C01B  F36C         	movff	?___aldiv,accelgyroCalBNO055@gyro_bias
  8974  0019B4  C01C  F36D         	movff	?___aldiv+1,accelgyroCalBNO055@gyro_bias+1
  8975  0019B8  C01D  F36E         	movff	?___aldiv+2,accelgyroCalBNO055@gyro_bias+2
  8976  0019BC  C01E  F36F         	movff	?___aldiv+3,accelgyroCalBNO055@gyro_bias+3
  8977                           
  8978                           ;BNO055.c: 480: gyro_bias[1] /= (long) sample_count;
  8979  0019C0  C370  F01B         	movff	accelgyroCalBNO055@gyro_bias+4,___aldiv@dividend
  8980  0019C4  C371  F01C         	movff	accelgyroCalBNO055@gyro_bias+5,___aldiv@dividend+1
  8981  0019C8  C372  F01D         	movff	accelgyroCalBNO055@gyro_bias+6,___aldiv@dividend+2
  8982  0019CC  C373  F01E         	movff	accelgyroCalBNO055@gyro_bias+7,___aldiv@dividend+3
  8983  0019D0  C378  F01F         	movff	accelgyroCalBNO055@sample_count,___aldiv@divisor
  8984  0019D4  C379  F020         	movff	accelgyroCalBNO055@sample_count+1,___aldiv@divisor+1
  8985  0019D8  C37A  F021         	movff	accelgyroCalBNO055@sample_count+2,___aldiv@divisor+2
  8986  0019DC  C37B  F022         	movff	accelgyroCalBNO055@sample_count+3,___aldiv@divisor+3
  8987  0019E0  EC7D  F023         	call	___aldiv	;wreg free
  8988  0019E4  C01B  F370         	movff	?___aldiv,accelgyroCalBNO055@gyro_bias+4
  8989  0019E8  C01C  F371         	movff	?___aldiv+1,accelgyroCalBNO055@gyro_bias+5
  8990  0019EC  C01D  F372         	movff	?___aldiv+2,accelgyroCalBNO055@gyro_bias+6
  8991  0019F0  C01E  F373         	movff	?___aldiv+3,accelgyroCalBNO055@gyro_bias+7
  8992                           
  8993                           ;BNO055.c: 481: gyro_bias[2] /= (long) sample_count;
  8994  0019F4  C374  F01B         	movff	accelgyroCalBNO055@gyro_bias+8,___aldiv@dividend
  8995  0019F8  C375  F01C         	movff	accelgyroCalBNO055@gyro_bias+9,___aldiv@dividend+1
  8996  0019FC  C376  F01D         	movff	accelgyroCalBNO055@gyro_bias+10,___aldiv@dividend+2
  8997  001A00  C377  F01E         	movff	accelgyroCalBNO055@gyro_bias+11,___aldiv@dividend+3
  8998  001A04  C378  F01F         	movff	accelgyroCalBNO055@sample_count,___aldiv@divisor
  8999  001A08  C379  F020         	movff	accelgyroCalBNO055@sample_count+1,___aldiv@divisor+1
  9000  001A0C  C37A  F021         	movff	accelgyroCalBNO055@sample_count+2,___aldiv@divisor+2
  9001  001A10  C37B  F022         	movff	accelgyroCalBNO055@sample_count+3,___aldiv@divisor+3
  9002  001A14  EC7D  F023         	call	___aldiv	;wreg free
  9003  001A18  C01B  F374         	movff	?___aldiv,accelgyroCalBNO055@gyro_bias+8
  9004  001A1C  C01C  F375         	movff	?___aldiv+1,accelgyroCalBNO055@gyro_bias+9
  9005  001A20  C01D  F376         	movff	?___aldiv+2,accelgyroCalBNO055@gyro_bias+10
  9006  001A24  C01E  F377         	movff	?___aldiv+3,accelgyroCalBNO055@gyro_bias+11
  9007                           
  9008                           ;BNO055.c: 483: dest2[0] = (float) gyro_bias[0]/16.;
  9009  001A28  C36C  F023         	movff	accelgyroCalBNO055@gyro_bias,___altoft@c
  9010  001A2C  C36D  F024         	movff	accelgyroCalBNO055@gyro_bias+1,___altoft@c+1
  9011  001A30  C36E  F025         	movff	accelgyroCalBNO055@gyro_bias+2,___altoft@c+2
  9012  001A34  C36F  F026         	movff	accelgyroCalBNO055@gyro_bias+3,___altoft@c+3
  9013  001A38  EC16  F029         	call	___altoft	;wreg free
  9014  001A3C  C023  F062         	movff	?___altoft,___ftdiv@f1
  9015  001A40  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  9016  001A44  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  9017  001A48  0E00               	movlw	0
  9018  001A4A  0100               	movlb	0	; () banked
  9019  001A4C  6F65               	movwf	___ftdiv@f2& (0+255),b
  9020  001A4E  0E80               	movlw	128
  9021  001A50  0100               	movlb	0	; () banked
  9022  001A52  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  9023  001A54  0E41               	movlw	65
  9024  001A56  0100               	movlb	0	; () banked
  9025  001A58  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  9026  001A5A  EC7E  F01E         	call	___ftdiv	;wreg free
  9027  001A5E  C0CA  FFD9         	movff	accelgyroCalBNO055@dest2,fsr2l
  9028  001A62  C0CB  FFDA         	movff	accelgyroCalBNO055@dest2+1,fsr2h
  9029  001A66  C062  FFDE         	movff	?___ftdiv,postinc2
  9030  001A6A  C063  FFDE         	movff	?___ftdiv+1,postinc2
  9031  001A6E  C064  FFDE         	movff	?___ftdiv+2,postinc2
  9032                           
  9033                           ;BNO055.c: 484: dest2[1] = (float) gyro_bias[1]/16.;
  9034  001A72  C370  F023         	movff	accelgyroCalBNO055@gyro_bias+4,___altoft@c
  9035  001A76  C371  F024         	movff	accelgyroCalBNO055@gyro_bias+5,___altoft@c+1
  9036  001A7A  C372  F025         	movff	accelgyroCalBNO055@gyro_bias+6,___altoft@c+2
  9037  001A7E  C373  F026         	movff	accelgyroCalBNO055@gyro_bias+7,___altoft@c+3
  9038  001A82  EC16  F029         	call	___altoft	;wreg free
  9039  001A86  C023  F062         	movff	?___altoft,___ftdiv@f1
  9040  001A8A  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  9041  001A8E  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  9042  001A92  0E00               	movlw	0
  9043  001A94  0100               	movlb	0	; () banked
  9044  001A96  6F65               	movwf	___ftdiv@f2& (0+255),b
  9045  001A98  0E80               	movlw	128
  9046  001A9A  0100               	movlb	0	; () banked
  9047  001A9C  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  9048  001A9E  0E41               	movlw	65
  9049  001AA0  0100               	movlb	0	; () banked
  9050  001AA2  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  9051  001AA4  EC7E  F01E         	call	___ftdiv	;wreg free
  9052  001AA8  0100               	movlb	0	; () banked
  9053  001AAA  EE20 F003          	lfsr	2,3
  9054  001AAE  51CA               	movf	accelgyroCalBNO055@dest2& (0+255),w,b
  9055  001AB0  26D9               	addwf	fsr2l,f,c
  9056  001AB2  51CB               	movf	(accelgyroCalBNO055@dest2+1)& (0+255),w,b
  9057  001AB4  22DA               	addwfc	fsr2h,f,c
  9058  001AB6  C062  FFDE         	movff	?___ftdiv,postinc2
  9059  001ABA  C063  FFDE         	movff	?___ftdiv+1,postinc2
  9060  001ABE  C064  FFDE         	movff	?___ftdiv+2,postinc2
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;BNO055.c: 485: dest2[2] = (float) gyro_bias[2]/16.;
  9064  001AC2  C374  F023         	movff	accelgyroCalBNO055@gyro_bias+8,___altoft@c
  9065  001AC6  C375  F024         	movff	accelgyroCalBNO055@gyro_bias+9,___altoft@c+1
  9066  001ACA  C376  F025         	movff	accelgyroCalBNO055@gyro_bias+10,___altoft@c+2
  9067  001ACE  C377  F026         	movff	accelgyroCalBNO055@gyro_bias+11,___altoft@c+3
  9068  001AD2  EC16  F029         	call	___altoft	;wreg free
  9069  001AD6  C023  F062         	movff	?___altoft,___ftdiv@f1
  9070  001ADA  C024  F063         	movff	?___altoft+1,___ftdiv@f1+1
  9071  001ADE  C025  F064         	movff	?___altoft+2,___ftdiv@f1+2
  9072  001AE2  0E00               	movlw	0
  9073  001AE4  0100               	movlb	0	; () banked
  9074  001AE6  6F65               	movwf	___ftdiv@f2& (0+255),b
  9075  001AE8  0E80               	movlw	128
  9076  001AEA  0100               	movlb	0	; () banked
  9077  001AEC  6F66               	movwf	(___ftdiv@f2+1)& (0+255),b
  9078  001AEE  0E41               	movlw	65
  9079  001AF0  0100               	movlb	0	; () banked
  9080  001AF2  6F67               	movwf	(___ftdiv@f2+2)& (0+255),b
  9081  001AF4  EC7E  F01E         	call	___ftdiv	;wreg free
  9082  001AF8  0100               	movlb	0	; () banked
  9083  001AFA  EE20 F006          	lfsr	2,6
  9084  001AFE  51CA               	movf	accelgyroCalBNO055@dest2& (0+255),w,b
  9085  001B00  26D9               	addwf	fsr2l,f,c
  9086  001B02  51CB               	movf	(accelgyroCalBNO055@dest2+1)& (0+255),w,b
  9087  001B04  22DA               	addwfc	fsr2h,f,c
  9088  001B06  C062  FFDE         	movff	?___ftdiv,postinc2
  9089  001B0A  C063  FFDE         	movff	?___ftdiv+1,postinc2
  9090  001B0E  C064  FFDE         	movff	?___ftdiv+2,postinc2
  9091                           
  9092                           ; BSR set to: 0
  9093                           ;BNO055.c: 489: writeByte(0x29, 0x3D, CONFIGMODE );
  9094  001B12  0E3D               	movlw	61
  9095  001B14  0100               	movlb	0	; () banked
  9096  001B16  6F60               	movwf	writeByte@subAddress& (0+255),b
  9097  001B18  0E00               	movlw	0
  9098  001B1A  0100               	movlb	0	; () banked
  9099  001B1C  6F61               	movwf	writeByte@data& (0+255),b
  9100  001B1E  0E29               	movlw	41
  9101  001B20  EC8E  F029         	call	_writeByte
  9102                           
  9103                           ;BNO055.c: 490: Delay(25);
  9104  001B24  0E00               	movlw	0
  9105  001B26  6E1C               	movwf	Delay@wait+1,c
  9106  001B28  0E19               	movlw	25
  9107  001B2A  6E1B               	movwf	Delay@wait,c
  9108  001B2C  EC47  F02B         	call	_Delay	;wreg free
  9109                           
  9110                           ;BNO055.c: 493: writeByte(0x29, 0x55, (int)accel_bias[0] & 0xFF);
  9111  001B30  0E55               	movlw	85
  9112  001B32  0100               	movlb	0	; () banked
  9113  001B34  6F60               	movwf	writeByte@subAddress& (0+255),b
  9114  001B36  C37C  F061         	movff	accelgyroCalBNO055@accel_bias,writeByte@data
  9115  001B3A  0E29               	movlw	41
  9116  001B3C  EC8E  F029         	call	_writeByte
  9117                           
  9118                           ;BNO055.c: 494: writeByte(0x29, 0x56, ((int)accel_bias[0] >> 8) & 0xFF);
  9119  001B40  0E56               	movlw	86
  9120  001B42  0100               	movlb	0	; () banked
  9121  001B44  6F60               	movwf	writeByte@subAddress& (0+255),b
  9122  001B46  0103               	movlb	3	; () banked
  9123  001B48  517D               	movf	(accelgyroCalBNO055@accel_bias+1)& (0+255),w,b
  9124  001B4A  0100               	movlb	0	; () banked
  9125  001B4C  6F61               	movwf	writeByte@data& (0+255),b
  9126  001B4E  0E29               	movlw	41
  9127  001B50  EC8E  F029         	call	_writeByte
  9128                           
  9129                           ;BNO055.c: 495: writeByte(0x29, 0x57, (int)accel_bias[1] & 0xFF);
  9130  001B54  0E57               	movlw	87
  9131  001B56  0100               	movlb	0	; () banked
  9132  001B58  6F60               	movwf	writeByte@subAddress& (0+255),b
  9133  001B5A  C380  F061         	movff	accelgyroCalBNO055@accel_bias+4,writeByte@data
  9134  001B5E  0E29               	movlw	41
  9135  001B60  EC8E  F029         	call	_writeByte
  9136                           
  9137                           ;BNO055.c: 496: writeByte(0x29, 0x58, ((int)accel_bias[1] >> 8) & 0xFF);
  9138  001B64  0E58               	movlw	88
  9139  001B66  0100               	movlb	0	; () banked
  9140  001B68  6F60               	movwf	writeByte@subAddress& (0+255),b
  9141  001B6A  0103               	movlb	3	; () banked
  9142  001B6C  5181               	movf	(accelgyroCalBNO055@accel_bias+5)& (0+255),w,b
  9143  001B6E  0100               	movlb	0	; () banked
  9144  001B70  6F61               	movwf	writeByte@data& (0+255),b
  9145  001B72  0E29               	movlw	41
  9146  001B74  EC8E  F029         	call	_writeByte
  9147                           
  9148                           ;BNO055.c: 497: writeByte(0x29, 0x59, (int)accel_bias[2] & 0xFF);
  9149  001B78  0E59               	movlw	89
  9150  001B7A  0100               	movlb	0	; () banked
  9151  001B7C  6F60               	movwf	writeByte@subAddress& (0+255),b
  9152  001B7E  C384  F061         	movff	accelgyroCalBNO055@accel_bias+8,writeByte@data
  9153  001B82  0E29               	movlw	41
  9154  001B84  EC8E  F029         	call	_writeByte
  9155                           
  9156                           ;BNO055.c: 498: writeByte(0x29, 0x5A, ((int)accel_bias[2] >> 8) & 0xFF);
  9157  001B88  0E5A               	movlw	90
  9158  001B8A  0100               	movlb	0	; () banked
  9159  001B8C  6F60               	movwf	writeByte@subAddress& (0+255),b
  9160  001B8E  0103               	movlb	3	; () banked
  9161  001B90  5185               	movf	(accelgyroCalBNO055@accel_bias+9)& (0+255),w,b
  9162  001B92  0100               	movlb	0	; () banked
  9163  001B94  6F61               	movwf	writeByte@data& (0+255),b
  9164  001B96  0E29               	movlw	41
  9165  001B98  EC8E  F029         	call	_writeByte
  9166                           
  9167                           ;BNO055.c: 507: writeByte(0x29, 0x61, (int)gyro_bias[0] & 0xFF);
  9168  001B9C  0E61               	movlw	97
  9169  001B9E  0100               	movlb	0	; () banked
  9170  001BA0  6F60               	movwf	writeByte@subAddress& (0+255),b
  9171  001BA2  C36C  F061         	movff	accelgyroCalBNO055@gyro_bias,writeByte@data
  9172  001BA6  0E29               	movlw	41
  9173  001BA8  EC8E  F029         	call	_writeByte
  9174                           
  9175                           ;BNO055.c: 508: writeByte(0x29, 0x62, ((int)gyro_bias[0] >> 8) & 0xFF);
  9176  001BAC  0E62               	movlw	98
  9177  001BAE  0100               	movlb	0	; () banked
  9178  001BB0  6F60               	movwf	writeByte@subAddress& (0+255),b
  9179  001BB2  0103               	movlb	3	; () banked
  9180  001BB4  516D               	movf	(accelgyroCalBNO055@gyro_bias+1)& (0+255),w,b
  9181  001BB6  0100               	movlb	0	; () banked
  9182  001BB8  6F61               	movwf	writeByte@data& (0+255),b
  9183  001BBA  0E29               	movlw	41
  9184  001BBC  EC8E  F029         	call	_writeByte
  9185                           
  9186                           ;BNO055.c: 509: writeByte(0x29, 0x63, (int)gyro_bias[1] & 0xFF);
  9187  001BC0  0E63               	movlw	99
  9188  001BC2  0100               	movlb	0	; () banked
  9189  001BC4  6F60               	movwf	writeByte@subAddress& (0+255),b
  9190  001BC6  C370  F061         	movff	accelgyroCalBNO055@gyro_bias+4,writeByte@data
  9191  001BCA  0E29               	movlw	41
  9192  001BCC  EC8E  F029         	call	_writeByte
  9193                           
  9194                           ;BNO055.c: 510: writeByte(0x29, 0x64, ((int)gyro_bias[1] >> 8) & 0xFF);
  9195  001BD0  0E64               	movlw	100
  9196  001BD2  0100               	movlb	0	; () banked
  9197  001BD4  6F60               	movwf	writeByte@subAddress& (0+255),b
  9198  001BD6  0103               	movlb	3	; () banked
  9199  001BD8  5171               	movf	(accelgyroCalBNO055@gyro_bias+5)& (0+255),w,b
  9200  001BDA  0100               	movlb	0	; () banked
  9201  001BDC  6F61               	movwf	writeByte@data& (0+255),b
  9202  001BDE  0E29               	movlw	41
  9203  001BE0  EC8E  F029         	call	_writeByte
  9204                           
  9205                           ;BNO055.c: 511: writeByte(0x29, 0x65, (int)gyro_bias[2] & 0xFF);
  9206  001BE4  0E65               	movlw	101
  9207  001BE6  0100               	movlb	0	; () banked
  9208  001BE8  6F60               	movwf	writeByte@subAddress& (0+255),b
  9209  001BEA  C374  F061         	movff	accelgyroCalBNO055@gyro_bias+8,writeByte@data
  9210  001BEE  0E29               	movlw	41
  9211  001BF0  EC8E  F029         	call	_writeByte
  9212                           
  9213                           ;BNO055.c: 512: writeByte(0x29, 0x66, ((int)gyro_bias[2] >> 8) & 0xFF);
  9214  001BF4  0E66               	movlw	102
  9215  001BF6  0100               	movlb	0	; () banked
  9216  001BF8  6F60               	movwf	writeByte@subAddress& (0+255),b
  9217  001BFA  0103               	movlb	3	; () banked
  9218  001BFC  5175               	movf	(accelgyroCalBNO055@gyro_bias+9)& (0+255),w,b
  9219  001BFE  0100               	movlb	0	; () banked
  9220  001C00  6F61               	movwf	writeByte@data& (0+255),b
  9221  001C02  0E29               	movlw	41
  9222  001C04  EC8E  F029         	call	_writeByte
  9223                           
  9224                           ;BNO055.c: 515: writeByte(0x29, 0x3D, OPRMode );
  9225  001C08  0E3D               	movlw	61
  9226  001C0A  0100               	movlb	0	; () banked
  9227  001C0C  6F60               	movwf	writeByte@subAddress& (0+255),b
  9228  001C0E  C043  F061         	movff	_OPRMode,writeByte@data
  9229  001C12  0E29               	movlw	41
  9230  001C14  EC8E  F029         	call	_writeByte
  9231                           
  9232                           ;BNO055.c: 523: printf("Accel/Gyro Calibration done!");
  9233  001C18  0E19               	movlw	low STR_50
  9234  001C1A  0100               	movlb	0	; () banked
  9235  001C1C  6F8F               	movwf	printf@f& (0+255),b
  9236  001C1E  0E7E               	movlw	high STR_50
  9237  001C20  0100               	movlb	0	; () banked
  9238  001C22  6F90               	movwf	(printf@f+1)& (0+255),b
  9239  001C24  EC70  F000         	call	_printf	;wreg free
  9240  001C28  0012               	return		;funcret
  9241  001C2A                     __end_of_accelgyroCalBNO055:
  9242                           	opt stack 0
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           intcon	equ	0xFF2
  9248                           postinc0	equ	0xFEE
  9249                           wreg	equ	0xFE8
  9250                           postinc1	equ	0xFE6
  9251                           postdec1	equ	0xFE5
  9252                           plusw1	equ	0xFE3
  9253                           fsr1h	equ	0xFE2
  9254                           fsr1l	equ	0xFE1
  9255                           postinc2	equ	0xFDE
  9256                           postdec2	equ	0xFDD
  9257                           plusw2	equ	0xFDB
  9258                           fsr2h	equ	0xFDA
  9259                           fsr2l	equ	0xFD9
  9260                           status	equ	0xFD8
  9261                           
  9262 ;; *************** function _writeByte *****************
  9263 ;; Defined at:
  9264 ;;		line 601 in file "BNO055.c"
  9265 ;; Parameters:    Size  Location     Type
  9266 ;;  address         1    wreg     unsigned char 
  9267 ;;  subAddress      1    0[BANK0 ] unsigned char 
  9268 ;;  data            1    1[BANK0 ] unsigned char 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  address         1    5[BANK0 ] unsigned char 
  9271 ;;  Data            3    2[BANK0 ] unsigned char [3]
  9272 ;;  status          1    7[BANK0 ] enum E8001
  9273 ;;  timeOut         1    6[BANK0 ] unsigned char 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  1    wreg      unsigned char 
  9276 ;; Registers used:
  9277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9283 ;;      Params:         0       2       0       0       0       0       0
  9284 ;;      Locals:         0       6       0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0
  9286 ;;      Totals:         0       8       0       0       0       0       0
  9287 ;;Total ram usage:        8 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    6
  9290 ;; This function calls:
  9291 ;;		_I2C1_MasterWrite
  9292 ;; This function is called by:
  9293 ;;		_initBNO055
  9294 ;;		_accelgyroCalBNO055
  9295 ;;		_magCalBNO055
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text17
  9300  00531C                     __ptext17:
  9301                           	opt stack 0
  9302  00531C                     _writeByte:
  9303                           	opt stack 22
  9304                           
  9305                           ;incstack = 0
  9306                           ;writeByte@address stored from wreg
  9307  00531C  0100               	movlb	0	; () banked
  9308  00531E  6F65               	movwf	writeByte@address& (0+255),b
  9309                           
  9310                           ;BNO055.c: 607: I2C1_MESSAGE_STATUS status;
  9311                           ;BNO055.c: 608: char timeOut = 0;
  9312  005320  0E00               	movlw	0
  9313  005322  0100               	movlb	0	; () banked
  9314  005324  6F66               	movwf	writeByte@timeOut& (0+255),b
  9315                           
  9316                           ; BSR set to: 0
  9317                           ;BNO055.c: 609: char Data[3];
  9318                           ;BNO055.c: 610: Data[0] = subAddress;
  9319  005326  C060  F062         	movff	writeByte@subAddress,writeByte@Data
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;BNO055.c: 611: Data[1] = data;
  9323  00532A  C061  F063         	movff	writeByte@data,writeByte@Data+1
  9324                           
  9325                           ;BNO055.c: 612: while(status != I2C1_MESSAGE_FAIL)
  9326  00532E  D020               	goto	l9257
  9327  005330                     l9241:
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;BNO055.c: 613: {
  9331                           ;BNO055.c: 615: I2C1_MasterWrite( Data,2,address,&status);
  9332  005330  0E62               	movlw	low writeByte@Data
  9333  005332  6E24               	movwf	I2C1_MasterWrite@pdata,c
  9334  005334  0E00               	movlw	high writeByte@Data
  9335  005336  6E25               	movwf	I2C1_MasterWrite@pdata+1,c
  9336  005338  0E02               	movlw	2
  9337  00533A  6E26               	movwf	I2C1_MasterWrite@length,c
  9338  00533C  C065  F027         	movff	writeByte@address,I2C1_MasterWrite@address
  9339  005340  6A28               	clrf	I2C1_MasterWrite@address+1,c
  9340  005342  0E67               	movlw	low writeByte@status
  9341  005344  6E29               	movwf	I2C1_MasterWrite@pflag,c
  9342  005346  0E00               	movlw	high writeByte@status
  9343  005348  6E2A               	movwf	I2C1_MasterWrite@pflag+1,c
  9344  00534A  EC18  F02A         	call	_I2C1_MasterWrite	;wreg free
  9345  00534E                     l9243:
  9346  00534E  0E02               	movlw	2
  9347  005350  0100               	movlb	0	; () banked
  9348  005352  1967               	xorwf	writeByte@status& (0+255),w,b
  9349  005354  B4D8               	btfsc	status,2,c
  9350  005356  D7FB               	goto	l9243
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;BNO055.c: 620: if (status == I2C1_MESSAGE_COMPLETE)
  9354                           
  9355                           ; BSR set to: 0
  9356  005358  0100               	movlb	0	; () banked
  9357  00535A  5167               	movf	writeByte@status& (0+255),w,b
  9358  00535C  0100               	movlb	0	; () banked
  9359  00535E  B4D8               	btfsc	status,2,c
  9360  005360  D00B               	goto	l9259
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;BNO055.c: 630: if (timeOut == 2)
  9364                           
  9365                           ; BSR set to: 0
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;BNO055.c: 621: break;
  9369  005362  0E02               	movlw	2
  9370  005364  0100               	movlb	0	; () banked
  9371  005366  1966               	xorwf	writeByte@timeOut& (0+255),w,b
  9372  005368  B4D8               	btfsc	status,2,c
  9373  00536A  D006               	goto	l9259
  9374                           
  9375                           ; BSR set to: 0
  9376                           ;BNO055.c: 632: else
  9377                           ;BNO055.c: 633: timeOut++;
  9378                           
  9379                           ; BSR set to: 0
  9380                           
  9381                           ; BSR set to: 0
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;BNO055.c: 631: break;
  9385  00536C  0100               	movlb	0	; () banked
  9386  00536E  2B66               	incf	writeByte@timeOut& (0+255),f,b
  9387  005370                     l9257:
  9388                           
  9389                           ; BSR set to: 0
  9390  005370  0100               	movlb	0	; () banked
  9391  005372  0567               	decf	writeByte@status& (0+255),w,b
  9392  005374  A4D8               	btfss	status,2,c
  9393  005376  D7DC               	goto	l9241
  9394  005378                     l9259:
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;BNO055.c: 634: }
  9398                           ;BNO055.c: 635: timeOut = 0;
  9399  005378  0E00               	movlw	0
  9400  00537A  0100               	movlb	0	; () banked
  9401  00537C  6F66               	movwf	writeByte@timeOut& (0+255),b
  9402                           
  9403                           ; BSR set to: 0
  9404  00537E  0012               	return		;funcret
  9405  005380                     __end_of_writeByte:
  9406                           	opt stack 0
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           intcon	equ	0xFF2
  9412                           postinc0	equ	0xFEE
  9413                           wreg	equ	0xFE8
  9414                           postinc1	equ	0xFE6
  9415                           postdec1	equ	0xFE5
  9416                           plusw1	equ	0xFE3
  9417                           fsr1h	equ	0xFE2
  9418                           fsr1l	equ	0xFE1
  9419                           postinc2	equ	0xFDE
  9420                           postdec2	equ	0xFDD
  9421                           plusw2	equ	0xFDB
  9422                           fsr2h	equ	0xFDA
  9423                           fsr2l	equ	0xFD9
  9424                           status	equ	0xFD8
  9425                           
  9426 ;; *************** function _readBytes *****************
  9427 ;; Defined at:
  9428 ;;		line 705 in file "BNO055.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;  address         1    wreg     unsigned char 
  9431 ;;  subAddress      1    0[BANK0 ] unsigned char 
  9432 ;;  count           1    1[BANK0 ] unsigned char 
  9433 ;;  dest            2    2[BANK0 ] PTR unsigned char 
  9434 ;;		 -> magCalBNO055@data(6), accelgyroCalBNO055@data(6), readGRVData@rawData(6), readLIAData@rawData(6), 
  9435 ;;		 -> readEulData@rawData(6), readQuatData@rawData(8), readMagData@rawData(6), readGyroData@rawData(6), 
  9436 ;;		 -> readAccelData@rawData(6), 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  address         1    7[BANK0 ] unsigned char 
  9439 ;;  Data            3    4[BANK0 ] unsigned char [3]
  9440 ;;  status          1    9[BANK0 ] enum E8001
  9441 ;;  timeOut         1    8[BANK0 ] unsigned char 
  9442 ;; Return value:  Size  Location     Type
  9443 ;;                  1    wreg      void 
  9444 ;; Registers used:
  9445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9446 ;; Tracked objects:
  9447 ;;		On entry : 0/0
  9448 ;;		On exit  : 0/0
  9449 ;;		Unchanged: 0/0
  9450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9451 ;;      Params:         0       4       0       0       0       0       0
  9452 ;;      Locals:         0       6       0       0       0       0       0
  9453 ;;      Temps:          0       0       0       0       0       0       0
  9454 ;;      Totals:         0      10       0       0       0       0       0
  9455 ;;Total ram usage:       10 bytes
  9456 ;; Hardware stack levels used:    1
  9457 ;; Hardware stack levels required when called:    6
  9458 ;; This function calls:
  9459 ;;		_I2C1_MasterRead
  9460 ;;		_I2C1_MasterWrite
  9461 ;; This function is called by:
  9462 ;;		_readAccelData
  9463 ;;		_readGyroData
  9464 ;;		_readMagData
  9465 ;;		_readQuatData
  9466 ;;		_readEulData
  9467 ;;		_readLIAData
  9468 ;;		_readGRVData
  9469 ;;		_accelgyroCalBNO055
  9470 ;;		_magCalBNO055
  9471 ;; This function uses a non-reentrant model
  9472 ;;
  9473                           
  9474                           	psect	text18
  9475  004EC4                     __ptext18:
  9476                           	opt stack 0
  9477  004EC4                     _readBytes:
  9478                           	opt stack 22
  9479                           
  9480                           ; BSR set to: 0
  9481                           ;incstack = 0
  9482                           ;readBytes@address stored from wreg
  9483  004EC4  0100               	movlb	0	; () banked
  9484  004EC6  6F67               	movwf	readBytes@address& (0+255),b
  9485                           
  9486                           ;BNO055.c: 716: I2C1_MESSAGE_STATUS status;
  9487                           ;BNO055.c: 717: char timeOut = 0;
  9488  004EC8  0E00               	movlw	0
  9489  004ECA  0100               	movlb	0	; () banked
  9490  004ECC  6F68               	movwf	readBytes@timeOut& (0+255),b
  9491                           
  9492                           ; BSR set to: 0
  9493                           ;BNO055.c: 718: char Data[3];
  9494                           ;BNO055.c: 719: Data[0] = subAddress;
  9495  004ECE  C060  F064         	movff	readBytes@subAddress,readBytes@Data
  9496                           
  9497                           ;BNO055.c: 720: while(status != I2C1_MESSAGE_FAIL)
  9498  004ED2  D020               	goto	l9213
  9499  004ED4                     l9197:
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;BNO055.c: 721: {
  9503                           ;BNO055.c: 723: I2C1_MasterWrite(Data,1,address,&status);
  9504  004ED4  0E64               	movlw	low readBytes@Data
  9505  004ED6  6E24               	movwf	I2C1_MasterWrite@pdata,c
  9506  004ED8  0E00               	movlw	high readBytes@Data
  9507  004EDA  6E25               	movwf	I2C1_MasterWrite@pdata+1,c
  9508  004EDC  0E01               	movlw	1
  9509  004EDE  6E26               	movwf	I2C1_MasterWrite@length,c
  9510  004EE0  C067  F027         	movff	readBytes@address,I2C1_MasterWrite@address
  9511  004EE4  6A28               	clrf	I2C1_MasterWrite@address+1,c
  9512  004EE6  0E69               	movlw	low readBytes@status
  9513  004EE8  6E29               	movwf	I2C1_MasterWrite@pflag,c
  9514  004EEA  0E00               	movlw	high readBytes@status
  9515  004EEC  6E2A               	movwf	I2C1_MasterWrite@pflag+1,c
  9516  004EEE  EC18  F02A         	call	_I2C1_MasterWrite	;wreg free
  9517  004EF2                     l9199:
  9518  004EF2  0E02               	movlw	2
  9519  004EF4  0100               	movlb	0	; () banked
  9520  004EF6  1969               	xorwf	readBytes@status& (0+255),w,b
  9521  004EF8  B4D8               	btfsc	status,2,c
  9522  004EFA  D7FB               	goto	l9199
  9523                           
  9524                           ; BSR set to: 0
  9525                           ;BNO055.c: 728: if (status == I2C1_MESSAGE_COMPLETE)
  9526                           
  9527                           ; BSR set to: 0
  9528  004EFC  0100               	movlb	0	; () banked
  9529  004EFE  5169               	movf	readBytes@status& (0+255),w,b
  9530  004F00  0100               	movlb	0	; () banked
  9531  004F02  B4D8               	btfsc	status,2,c
  9532  004F04  D00B               	goto	l9215
  9533                           
  9534                           ; BSR set to: 0
  9535                           ;BNO055.c: 738: if (timeOut == 2)
  9536                           
  9537                           ; BSR set to: 0
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;BNO055.c: 729: break;
  9541  004F06  0E02               	movlw	2
  9542  004F08  0100               	movlb	0	; () banked
  9543  004F0A  1968               	xorwf	readBytes@timeOut& (0+255),w,b
  9544  004F0C  B4D8               	btfsc	status,2,c
  9545  004F0E  D006               	goto	l9215
  9546                           
  9547                           ; BSR set to: 0
  9548                           ;BNO055.c: 740: else
  9549                           ;BNO055.c: 741: timeOut++;
  9550                           
  9551                           ; BSR set to: 0
  9552                           
  9553                           ; BSR set to: 0
  9554                           
  9555                           ; BSR set to: 0
  9556                           ;BNO055.c: 739: break;
  9557  004F10  0100               	movlb	0	; () banked
  9558  004F12  2B68               	incf	readBytes@timeOut& (0+255),f,b
  9559  004F14                     l9213:
  9560                           
  9561                           ; BSR set to: 0
  9562  004F14  0100               	movlb	0	; () banked
  9563  004F16  0569               	decf	readBytes@status& (0+255),w,b
  9564  004F18  A4D8               	btfss	status,2,c
  9565  004F1A  D7DC               	goto	l9197
  9566  004F1C                     l9215:
  9567                           
  9568                           ; BSR set to: 0
  9569                           ;BNO055.c: 742: }
  9570                           ;BNO055.c: 743: timeOut = 0;
  9571  004F1C  0E00               	movlw	0
  9572  004F1E  0100               	movlb	0	; () banked
  9573  004F20  6F68               	movwf	readBytes@timeOut& (0+255),b
  9574                           
  9575                           ;BNO055.c: 744: while(status != I2C1_MESSAGE_FAIL)
  9576  004F22  D020               	goto	l9233
  9577  004F24                     l9217:
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;BNO055.c: 745: {
  9581                           ;BNO055.c: 747: I2C1_MasterRead( dest,
  9582                           ;BNO055.c: 748: count,
  9583                           ;BNO055.c: 749: address,
  9584                           ;BNO055.c: 750: &status);
  9585  004F24  C062  F024         	movff	readBytes@dest,I2C1_MasterRead@pdata
  9586  004F28  C063  F025         	movff	readBytes@dest+1,I2C1_MasterRead@pdata+1
  9587  004F2C  C061  F026         	movff	readBytes@count,I2C1_MasterRead@length
  9588  004F30  C067  F027         	movff	readBytes@address,I2C1_MasterRead@address
  9589  004F34  6A28               	clrf	I2C1_MasterRead@address+1,c
  9590  004F36  0E69               	movlw	low readBytes@status
  9591  004F38  6E29               	movwf	I2C1_MasterRead@pflag,c
  9592  004F3A  0E00               	movlw	high readBytes@status
  9593  004F3C  6E2A               	movwf	I2C1_MasterRead@pflag+1,c
  9594  004F3E  EC3E  F02A         	call	_I2C1_MasterRead	;wreg free
  9595  004F42                     l9219:
  9596  004F42  0E02               	movlw	2
  9597  004F44  0100               	movlb	0	; () banked
  9598  004F46  1969               	xorwf	readBytes@status& (0+255),w,b
  9599  004F48  B4D8               	btfsc	status,2,c
  9600  004F4A  D7FB               	goto	l9219
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;BNO055.c: 755: if (status == I2C1_MESSAGE_COMPLETE)
  9604                           
  9605                           ; BSR set to: 0
  9606  004F4C  0100               	movlb	0	; () banked
  9607  004F4E  5169               	movf	readBytes@status& (0+255),w,b
  9608  004F50  0100               	movlb	0	; () banked
  9609  004F52  B4D8               	btfsc	status,2,c
  9610  004F54  0012               	return	
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;BNO055.c: 765: if (timeOut == 2)
  9614                           
  9615                           ; BSR set to: 0
  9616                           
  9617                           ; BSR set to: 0
  9618                           ;BNO055.c: 756: break;
  9619  004F56  0E02               	movlw	2
  9620  004F58  0100               	movlb	0	; () banked
  9621  004F5A  1968               	xorwf	readBytes@timeOut& (0+255),w,b
  9622  004F5C  B4D8               	btfsc	status,2,c
  9623  004F5E  0012               	return	
  9624                           
  9625                           ; BSR set to: 0
  9626                           ;BNO055.c: 767: else
  9627                           ;BNO055.c: 768: timeOut++;
  9628                           
  9629                           ; BSR set to: 0
  9630                           
  9631                           ; BSR set to: 0
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;BNO055.c: 766: break;
  9635  004F60  0100               	movlb	0	; () banked
  9636  004F62  2B68               	incf	readBytes@timeOut& (0+255),f,b
  9637  004F64                     l9233:
  9638                           
  9639                           ; BSR set to: 0
  9640  004F64  0100               	movlb	0	; () banked
  9641  004F66  0569               	decf	readBytes@status& (0+255),w,b
  9642  004F68  B4D8               	btfsc	status,2,c
  9643  004F6A  0012               	return	
  9644  004F6C  D7DB               	goto	l9217
  9645  004F6E                     __end_of_readBytes:
  9646                           	opt stack 0
  9647                           tblptru	equ	0xFF8
  9648                           tblptrh	equ	0xFF7
  9649                           tblptrl	equ	0xFF6
  9650                           tablat	equ	0xFF5
  9651                           intcon	equ	0xFF2
  9652                           postinc0	equ	0xFEE
  9653                           wreg	equ	0xFE8
  9654                           postinc1	equ	0xFE6
  9655                           postdec1	equ	0xFE5
  9656                           plusw1	equ	0xFE3
  9657                           fsr1h	equ	0xFE2
  9658                           fsr1l	equ	0xFE1
  9659                           postinc2	equ	0xFDE
  9660                           postdec2	equ	0xFDD
  9661                           plusw2	equ	0xFDB
  9662                           fsr2h	equ	0xFDA
  9663                           fsr2l	equ	0xFD9
  9664                           status	equ	0xFD8
  9665                           
  9666 ;; *************** function _I2C1_MasterWrite *****************
  9667 ;; Defined at:
  9668 ;;		line 545 in file "mcc_generated_files/i2c1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;  pdata           2   35[COMRAM] PTR unsigned char 
  9671 ;;		 -> readBytes@Data(3), readByte@Data(3), writeByte@Data(3), I2CwriteByte@Data(3), 
  9672 ;;  length          1   37[COMRAM] unsigned char 
  9673 ;;  address         2   38[COMRAM] unsigned int 
  9674 ;;  pflag           2   40[COMRAM] PTR enum E7739
  9675 ;;		 -> readBytes@status(1), readByte@status(1), writeByte@status(1), I2CwriteByte@status(1), 
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;                  1    wreg      void 
  9680 ;; Registers used:
  9681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9687 ;;      Params:         7       0       0       0       0       0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0
  9690 ;;      Totals:         7       0       0       0       0       0       0
  9691 ;;Total ram usage:        7 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    5
  9694 ;; This function calls:
  9695 ;;		_I2C1_MasterTRBInsert
  9696 ;;		_I2C1_MasterWriteTRBBuild
  9697 ;; This function is called by:
  9698 ;;		_writeByte
  9699 ;;		_readByte
  9700 ;;		_readBytes
  9701 ;;		_I2CwriteByte
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text19
  9706  005430                     __ptext19:
  9707                           	opt stack 0
  9708  005430                     _I2C1_MasterWrite:
  9709                           	opt stack 22
  9710                           
  9711                           ;i2c1.c: 550: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9712                           ;i2c1.c: 553: if (i2c1_object.trStatus.s.full != 1) {
  9713                           
  9714                           ; BSR set to: 0
  9715                           ;incstack = 0
  9716  005430  0101               	movlb	1	; () banked
  9717  005432  B104               	btfsc	(_i2c1_object+4)& (0+255),0,b
  9718  005434  D01C               	goto	l8297
  9719                           
  9720                           ; BSR set to: 1
  9721                           ;i2c1.c: 554: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  9722  005436  0EEF               	movlw	low I2C1_MasterWrite@trBlock
  9723  005438  6E1B               	movwf	I2C1_MasterWriteTRBBuild@ptrb,c
  9724  00543A  0E01               	movlw	high I2C1_MasterWrite@trBlock
  9725  00543C  6E1C               	movwf	I2C1_MasterWriteTRBBuild@ptrb+1,c
  9726  00543E  C024  F01D         	movff	I2C1_MasterWrite@pdata,I2C1_MasterWriteTRBBuild@pdata
  9727  005442  C025  F01E         	movff	I2C1_MasterWrite@pdata+1,I2C1_MasterWriteTRBBuild@pdata+1
  9728  005446  C026  F01F         	movff	I2C1_MasterWrite@length,I2C1_MasterWriteTRBBuild@length
  9729  00544A  C027  F020         	movff	I2C1_MasterWrite@address,I2C1_MasterWriteTRBBuild@address
  9730  00544E  C028  F021         	movff	I2C1_MasterWrite@address+1,I2C1_MasterWriteTRBBuild@address+1
  9731  005452  EC8A  F02A         	call	_I2C1_MasterWriteTRBBuild	;wreg free
  9732                           
  9733                           ;i2c1.c: 555: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9734  005456  0EEF               	movlw	low I2C1_MasterWrite@trBlock
  9735  005458  6E1B               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  9736  00545A  0E01               	movlw	high I2C1_MasterWrite@trBlock
  9737  00545C  6E1C               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  9738  00545E  C029  F01D         	movff	I2C1_MasterWrite@pflag,I2C1_MasterTRBInsert@pflag
  9739  005462  C02A  F01E         	movff	I2C1_MasterWrite@pflag+1,I2C1_MasterTRBInsert@pflag+1
  9740  005466  0E01               	movlw	1
  9741  005468  EC47  F024         	call	_I2C1_MasterTRBInsert
  9742                           
  9743                           ;i2c1.c: 556: } else {
  9744  00546C  0012               	return	
  9745  00546E                     l8297:
  9746                           
  9747                           ;i2c1.c: 557: *pflag = I2C1_MESSAGE_FAIL;
  9748  00546E  C029  FFD9         	movff	I2C1_MasterWrite@pflag,fsr2l
  9749  005472  C02A  FFDA         	movff	I2C1_MasterWrite@pflag+1,fsr2h
  9750  005476  0E01               	movlw	1
  9751  005478  6EDF               	movwf	indf2,c
  9752  00547A  0012               	return	
  9753  00547C                     __end_of_I2C1_MasterWrite:
  9754                           	opt stack 0
  9755                           tblptru	equ	0xFF8
  9756                           tblptrh	equ	0xFF7
  9757                           tblptrl	equ	0xFF6
  9758                           tablat	equ	0xFF5
  9759                           intcon	equ	0xFF2
  9760                           postinc0	equ	0xFEE
  9761                           wreg	equ	0xFE8
  9762                           postinc1	equ	0xFE6
  9763                           postdec1	equ	0xFE5
  9764                           plusw1	equ	0xFE3
  9765                           fsr1h	equ	0xFE2
  9766                           fsr1l	equ	0xFE1
  9767                           indf2	equ	0xFDF
  9768                           postinc2	equ	0xFDE
  9769                           postdec2	equ	0xFDD
  9770                           plusw2	equ	0xFDB
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  9776 ;; Defined at:
  9777 ;;		line 638 in file "mcc_generated_files/i2c1.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  ptrb            2   26[COMRAM] PTR struct .
  9780 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  9781 ;;  pdata           2   28[COMRAM] PTR unsigned char 
  9782 ;;		 -> readBytes@Data(3), readByte@Data(3), writeByte@Data(3), I2CwriteByte@Data(3), 
  9783 ;;  length          1   30[COMRAM] unsigned char 
  9784 ;;  address         2   31[COMRAM] unsigned int 
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;		None
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      void 
  9789 ;; Registers used:
  9790 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9796 ;;      Params:         7       0       0       0       0       0       0
  9797 ;;      Locals:         0       0       0       0       0       0       0
  9798 ;;      Temps:          2       0       0       0       0       0       0
  9799 ;;      Totals:         9       0       0       0       0       0       0
  9800 ;;Total ram usage:        9 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    4
  9803 ;; This function calls:
  9804 ;;		Nothing
  9805 ;; This function is called by:
  9806 ;;		_I2C1_MasterWrite
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           	psect	text20
  9811  005514                     __ptext20:
  9812                           	opt stack 0
  9813  005514                     _I2C1_MasterWriteTRBBuild:
  9814                           	opt stack 22
  9815                           
  9816                           ;i2c1.c: 643: ptrb->address = address << 1;
  9817                           
  9818                           ;incstack = 0
  9819  005514  C020  F022         	movff	I2C1_MasterWriteTRBBuild@address,??_I2C1_MasterWriteTRBBuild
  9820  005518  C021  F023         	movff	I2C1_MasterWriteTRBBuild@address+1,??_I2C1_MasterWriteTRBBuild+1
  9821  00551C  90D8               	bcf	status,0,c
  9822  00551E  3622               	rlcf	??_I2C1_MasterWriteTRBBuild,f,c
  9823  005520  3623               	rlcf	??_I2C1_MasterWriteTRBBuild+1,f,c
  9824  005522  C01B  FFD9         	movff	I2C1_MasterWriteTRBBuild@ptrb,fsr2l
  9825  005526  C01C  FFDA         	movff	I2C1_MasterWriteTRBBuild@ptrb+1,fsr2h
  9826  00552A  C022  FFDE         	movff	??_I2C1_MasterWriteTRBBuild,postinc2
  9827  00552E  C023  FFDD         	movff	??_I2C1_MasterWriteTRBBuild+1,postdec2
  9828                           
  9829                           ;i2c1.c: 644: ptrb->length = length;
  9830  005532  EE20 F002          	lfsr	2,2
  9831  005536  501B               	movf	I2C1_MasterWriteTRBBuild@ptrb,w,c
  9832  005538  26D9               	addwf	fsr2l,f,c
  9833  00553A  501C               	movf	I2C1_MasterWriteTRBBuild@ptrb+1,w,c
  9834  00553C  22DA               	addwfc	fsr2h,f,c
  9835  00553E  C01F  FFDF         	movff	I2C1_MasterWriteTRBBuild@length,indf2
  9836                           
  9837                           ;i2c1.c: 645: ptrb->pbuffer = pdata;
  9838  005542  EE20 F003          	lfsr	2,3
  9839  005546  501B               	movf	I2C1_MasterWriteTRBBuild@ptrb,w,c
  9840  005548  26D9               	addwf	fsr2l,f,c
  9841  00554A  501C               	movf	I2C1_MasterWriteTRBBuild@ptrb+1,w,c
  9842  00554C  22DA               	addwfc	fsr2h,f,c
  9843  00554E  C01D  FFDE         	movff	I2C1_MasterWriteTRBBuild@pdata,postinc2
  9844  005552  C01E  FFDD         	movff	I2C1_MasterWriteTRBBuild@pdata+1,postdec2
  9845  005556  0012               	return		;funcret
  9846  005558                     __end_of_I2C1_MasterWriteTRBBuild:
  9847                           	opt stack 0
  9848                           tblptru	equ	0xFF8
  9849                           tblptrh	equ	0xFF7
  9850                           tblptrl	equ	0xFF6
  9851                           tablat	equ	0xFF5
  9852                           intcon	equ	0xFF2
  9853                           postinc0	equ	0xFEE
  9854                           wreg	equ	0xFE8
  9855                           postinc1	equ	0xFE6
  9856                           postdec1	equ	0xFE5
  9857                           plusw1	equ	0xFE3
  9858                           fsr1h	equ	0xFE2
  9859                           fsr1l	equ	0xFE1
  9860                           indf2	equ	0xFDF
  9861                           postinc2	equ	0xFDE
  9862                           postdec2	equ	0xFDD
  9863                           plusw2	equ	0xFDB
  9864                           fsr2h	equ	0xFDA
  9865                           fsr2l	equ	0xFD9
  9866                           status	equ	0xFD8
  9867                           
  9868 ;; *************** function _I2C1_MasterRead *****************
  9869 ;; Defined at:
  9870 ;;		line 562 in file "mcc_generated_files/i2c1.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  pdata           2   35[COMRAM] PTR unsigned char 
  9873 ;;		 -> readByte@Data(3), magCalBNO055@data(6), accelgyroCalBNO055@data(6), readGRVData@rawData(6), 
  9874 ;;		 -> readLIAData@rawData(6), readEulData@rawData(6), readQuatData@rawData(8), readMagData@rawData(6), 
  9875 ;;		 -> readGyroData@rawData(6), readAccelData@rawData(6), RAM(1535), 
  9876 ;;  length          1   37[COMRAM] unsigned char 
  9877 ;;  address         2   38[COMRAM] unsigned int 
  9878 ;;  pflag           2   40[COMRAM] PTR enum E7739
  9879 ;;		 -> readBytes@status(1), readByte@status(1), I2CreadByte@status(1), 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;		None
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  1    wreg      void 
  9884 ;; Registers used:
  9885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9891 ;;      Params:         7       0       0       0       0       0       0
  9892 ;;      Locals:         0       0       0       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0
  9894 ;;      Totals:         7       0       0       0       0       0       0
  9895 ;;Total ram usage:        7 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    5
  9898 ;; This function calls:
  9899 ;;		_I2C1_MasterReadTRBBuild
  9900 ;;		_I2C1_MasterTRBInsert
  9901 ;; This function is called by:
  9902 ;;		_readByte
  9903 ;;		_readBytes
  9904 ;;		_I2CreadByte
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           	psect	text21
  9909  00547C                     __ptext21:
  9910                           	opt stack 0
  9911  00547C                     _I2C1_MasterRead:
  9912                           	opt stack 22
  9913                           
  9914                           ;i2c1.c: 567: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9915                           ;i2c1.c: 571: if (i2c1_object.trStatus.s.full != 1) {
  9916                           
  9917                           ;incstack = 0
  9918  00547C  0101               	movlb	1	; () banked
  9919  00547E  B104               	btfsc	(_i2c1_object+4)& (0+255),0,b
  9920  005480  D01C               	goto	l8303
  9921                           
  9922                           ; BSR set to: 1
  9923                           ;i2c1.c: 572: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  9924  005482  0EEA               	movlw	low I2C1_MasterRead@trBlock
  9925  005484  6E1B               	movwf	I2C1_MasterReadTRBBuild@ptrb,c
  9926  005486  0E01               	movlw	high I2C1_MasterRead@trBlock
  9927  005488  6E1C               	movwf	I2C1_MasterReadTRBBuild@ptrb+1,c
  9928  00548A  C024  F01D         	movff	I2C1_MasterRead@pdata,I2C1_MasterReadTRBBuild@pdata
  9929  00548E  C025  F01E         	movff	I2C1_MasterRead@pdata+1,I2C1_MasterReadTRBBuild@pdata+1
  9930  005492  C026  F01F         	movff	I2C1_MasterRead@length,I2C1_MasterReadTRBBuild@length
  9931  005496  C027  F020         	movff	I2C1_MasterRead@address,I2C1_MasterReadTRBBuild@address
  9932  00549A  C028  F021         	movff	I2C1_MasterRead@address+1,I2C1_MasterReadTRBBuild@address+1
  9933  00549E  ECF0  F029         	call	_I2C1_MasterReadTRBBuild	;wreg free
  9934                           
  9935                           ;i2c1.c: 573: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9936  0054A2  0EEA               	movlw	low I2C1_MasterRead@trBlock
  9937  0054A4  6E1B               	movwf	I2C1_MasterTRBInsert@ptrb_list,c
  9938  0054A6  0E01               	movlw	high I2C1_MasterRead@trBlock
  9939  0054A8  6E1C               	movwf	I2C1_MasterTRBInsert@ptrb_list+1,c
  9940  0054AA  C029  F01D         	movff	I2C1_MasterRead@pflag,I2C1_MasterTRBInsert@pflag
  9941  0054AE  C02A  F01E         	movff	I2C1_MasterRead@pflag+1,I2C1_MasterTRBInsert@pflag+1
  9942  0054B2  0E01               	movlw	1
  9943  0054B4  EC47  F024         	call	_I2C1_MasterTRBInsert
  9944                           
  9945                           ;i2c1.c: 574: } else {
  9946  0054B8  0012               	return	
  9947  0054BA                     l8303:
  9948                           
  9949                           ;i2c1.c: 575: *pflag = I2C1_MESSAGE_FAIL;
  9950  0054BA  C029  FFD9         	movff	I2C1_MasterRead@pflag,fsr2l
  9951  0054BE  C02A  FFDA         	movff	I2C1_MasterRead@pflag+1,fsr2h
  9952  0054C2  0E01               	movlw	1
  9953  0054C4  6EDF               	movwf	indf2,c
  9954  0054C6  0012               	return	
  9955  0054C8                     __end_of_I2C1_MasterRead:
  9956                           	opt stack 0
  9957                           tblptru	equ	0xFF8
  9958                           tblptrh	equ	0xFF7
  9959                           tblptrl	equ	0xFF6
  9960                           tablat	equ	0xFF5
  9961                           intcon	equ	0xFF2
  9962                           postinc0	equ	0xFEE
  9963                           wreg	equ	0xFE8
  9964                           postinc1	equ	0xFE6
  9965                           postdec1	equ	0xFE5
  9966                           plusw1	equ	0xFE3
  9967                           fsr1h	equ	0xFE2
  9968                           fsr1l	equ	0xFE1
  9969                           indf2	equ	0xFDF
  9970                           postinc2	equ	0xFDE
  9971                           postdec2	equ	0xFDD
  9972                           plusw2	equ	0xFDB
  9973                           fsr2h	equ	0xFDA
  9974                           fsr2l	equ	0xFD9
  9975                           status	equ	0xFD8
  9976                           
  9977 ;; *************** function _I2C1_MasterTRBInsert *****************
  9978 ;; Defined at:
  9979 ;;		line 580 in file "mcc_generated_files/i2c1.c"
  9980 ;; Parameters:    Size  Location     Type
  9981 ;;  count           1    wreg     unsigned char 
  9982 ;;  ptrb_list       2   26[COMRAM] PTR struct .
  9983 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  9984 ;;  pflag           2   28[COMRAM] PTR enum E7739
  9985 ;;		 -> readBytes@status(1), readByte@status(1), writeByte@status(1), I2CwriteByte@status(1), 
  9986 ;;		 -> I2CreadByte@status(1), 
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;  count           1   31[COMRAM] unsigned char 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  1    wreg      void 
  9991 ;; Registers used:
  9992 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9998 ;;      Params:         4       0       0       0       0       0       0
  9999 ;;      Locals:         1       0       0       0       0       0       0
 10000 ;;      Temps:          1       0       0       0       0       0       0
 10001 ;;      Totals:         6       0       0       0       0       0       0
 10002 ;;Total ram usage:        6 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    4
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_I2C1_MasterWrite
 10009 ;;		_I2C1_MasterRead
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           	psect	text22
 10014  00488E                     __ptext22:
 10015                           	opt stack 0
 10016  00488E                     _I2C1_MasterTRBInsert:
 10017                           	opt stack 22
 10018                           
 10019                           ;incstack = 0
 10020                           ;I2C1_MasterTRBInsert@count stored from wreg
 10021  00488E  6E20               	movwf	I2C1_MasterTRBInsert@count,c
 10022                           
 10023                           ;i2c1.c: 586: if (i2c1_object.trStatus.s.full != 1) {
 10024  004890  0101               	movlb	1	; () banked
 10025  004892  B104               	btfsc	(_i2c1_object+4)& (0+255),0,b
 10026  004894  D046               	goto	l8063
 10027                           
 10028                           ; BSR set to: 1
 10029                           ;i2c1.c: 587: *pflag = I2C1_MESSAGE_PENDING;
 10030  004896  C01D  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 10031  00489A  C01E  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 10032  00489E  0E02               	movlw	2
 10033  0048A0  6EDF               	movwf	indf2,c
 10034                           
 10035                           ; BSR set to: 1
 10036                           ;i2c1.c: 589: i2c1_object.pTrTail->ptrb_list = ptrb_list;
 10037  0048A2  0101               	movlb	1	; () banked
 10038  0048A4  EE20 F001          	lfsr	2,1
 10039  0048A8  5100               	movf	_i2c1_object& (0+255),w,b
 10040  0048AA  26D9               	addwf	fsr2l,f,c
 10041  0048AC  5101               	movf	(_i2c1_object+1)& (0+255),w,b
 10042  0048AE  22DA               	addwfc	fsr2h,f,c
 10043  0048B0  C01B  FFDE         	movff	I2C1_MasterTRBInsert@ptrb_list,postinc2
 10044  0048B4  C01C  FFDD         	movff	I2C1_MasterTRBInsert@ptrb_list+1,postdec2
 10045                           
 10046                           ; BSR set to: 1
 10047                           ;i2c1.c: 590: i2c1_object.pTrTail->count = count;
 10048  0048B8  C100  FFD9         	movff	_i2c1_object,fsr2l
 10049  0048BC  C101  FFDA         	movff	_i2c1_object+1,fsr2h
 10050  0048C0  C020  FFDF         	movff	I2C1_MasterTRBInsert@count,indf2
 10051                           
 10052                           ; BSR set to: 1
 10053                           ;i2c1.c: 591: i2c1_object.pTrTail->pTrFlag = pflag;
 10054  0048C4  0101               	movlb	1	; () banked
 10055  0048C6  EE20 F003          	lfsr	2,3
 10056  0048CA  5100               	movf	_i2c1_object& (0+255),w,b
 10057  0048CC  26D9               	addwf	fsr2l,f,c
 10058  0048CE  5101               	movf	(_i2c1_object+1)& (0+255),w,b
 10059  0048D0  22DA               	addwfc	fsr2h,f,c
 10060  0048D2  C01D  FFDE         	movff	I2C1_MasterTRBInsert@pflag,postinc2
 10061  0048D6  C01E  FFDD         	movff	I2C1_MasterTRBInsert@pflag+1,postdec2
 10062                           
 10063                           ; BSR set to: 1
 10064                           ;i2c1.c: 592: i2c1_object.pTrTail++;
 10065  0048DA  0E05               	movlw	5
 10066  0048DC  0101               	movlb	1	; () banked
 10067  0048DE  2700               	addwf	_i2c1_object& (0+255),f,b
 10068  0048E0  0E00               	movlw	0
 10069  0048E2  2301               	addwfc	(_i2c1_object+1)& (0+255),f,b
 10070                           
 10071                           ; BSR set to: 1
 10072                           ;i2c1.c: 595: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1)) {
 10073  0048E4  0EF9               	movlw	low (_i2c1_tr_queue+5)
 10074  0048E6  0101               	movlb	1	; () banked
 10075  0048E8  1900               	xorwf	_i2c1_object& (0+255),w,b
 10076  0048EA  E10B               	bnz	l8059
 10077  0048EC  0E01               	movlw	high (_i2c1_tr_queue+5)
 10078  0048EE  0101               	movlb	1	; () banked
 10079  0048F0  1901               	xorwf	(_i2c1_object+1)& (0+255),w,b
 10080  0048F2  A4D8               	btfss	status,2,c
 10081  0048F4  D006               	goto	l8059
 10082                           
 10083                           ; BSR set to: 1
 10084                           ;i2c1.c: 597: i2c1_object.pTrTail = i2c1_tr_queue;
 10085  0048F6  0EF4               	movlw	low _i2c1_tr_queue
 10086  0048F8  0101               	movlb	1	; () banked
 10087  0048FA  6F00               	movwf	_i2c1_object& (0+255),b
 10088  0048FC  0E01               	movlw	high _i2c1_tr_queue
 10089  0048FE  0101               	movlb	1	; () banked
 10090  004900  6F01               	movwf	(_i2c1_object+1)& (0+255),b
 10091  004902                     l8059:
 10092                           
 10093                           ; BSR set to: 1
 10094                           ;i2c1.c: 598: }
 10095                           ;i2c1.c: 602: i2c1_object.trStatus.s.empty = 0;
 10096  004902  0101               	movlb	1	; () banked
 10097  004904  9304               	bcf	(_i2c1_object+4)& (0+255),1,b
 10098                           
 10099                           ;i2c1.c: 605: if (i2c1_object.pTrHead == i2c1_object.pTrTail) {
 10100  004906  0101               	movlb	1	; () banked
 10101  004908  5100               	movf	_i2c1_object& (0+255),w,b
 10102  00490A  0101               	movlb	1	; () banked
 10103  00490C  1902               	xorwf	(_i2c1_object+2)& (0+255),w,b
 10104  00490E  E10F               	bnz	l8065
 10105  004910  0101               	movlb	1	; () banked
 10106  004912  5101               	movf	(_i2c1_object+1)& (0+255),w,b
 10107  004914  0101               	movlb	1	; () banked
 10108  004916  1903               	xorwf	(_i2c1_object+3)& (0+255),w,b
 10109  004918  A4D8               	btfss	status,2,c
 10110  00491A  D009               	goto	l8065
 10111                           
 10112                           ; BSR set to: 1
 10113                           ;i2c1.c: 607: i2c1_object.trStatus.s.full = 1;
 10114  00491C  0101               	movlb	1	; () banked
 10115  00491E  8104               	bsf	(_i2c1_object+4)& (0+255),0,b
 10116                           
 10117                           ; BSR set to: 1
 10118                           ;i2c1.c: 608: }
 10119                           ;i2c1.c: 610: } else {
 10120  004920  D006               	goto	l8065
 10121  004922                     l8063:
 10122                           
 10123                           ; BSR set to: 1
 10124                           ;i2c1.c: 611: *pflag = I2C1_MESSAGE_FAIL;
 10125  004922  C01D  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 10126  004926  C01E  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 10127  00492A  0E01               	movlw	1
 10128  00492C  6EDF               	movwf	indf2,c
 10129  00492E                     l8065:
 10130                           
 10131                           ; BSR set to: 1
 10132                           ;i2c1.c: 612: }
 10133                           ;i2c1.c: 615: if (*pflag == I2C1_MESSAGE_PENDING) {
 10134  00492E  C01D  FFD9         	movff	I2C1_MasterTRBInsert@pflag,fsr2l
 10135  004932  C01E  FFDA         	movff	I2C1_MasterTRBInsert@pflag+1,fsr2h
 10136  004936  0E02               	movlw	2
 10137  004938  18DE               	xorwf	postinc2,w,c
 10138  00493A  A4D8               	btfss	status,2,c
 10139  00493C  0012               	return	
 10140  00493E                     l8069:
 10141  00493E  503B               	movf	_i2c1_state,w,c
 10142  004940  A4D8               	btfss	status,2,c
 10143  004942  D7FD               	goto	l8069
 10144                           
 10145                           ;i2c1.c: 617: {
 10146                           ;i2c1.c: 620: PIR1bits.SSP1IF = 1;
 10147  004944  869E               	bsf	3998,3,c	;volatile
 10148  004946  0012               	return	
 10149  004948                     __end_of_I2C1_MasterTRBInsert:
 10150                           	opt stack 0
 10151                           tblptru	equ	0xFF8
 10152                           tblptrh	equ	0xFF7
 10153                           tblptrl	equ	0xFF6
 10154                           tablat	equ	0xFF5
 10155                           intcon	equ	0xFF2
 10156                           postinc0	equ	0xFEE
 10157                           wreg	equ	0xFE8
 10158                           postinc1	equ	0xFE6
 10159                           postdec1	equ	0xFE5
 10160                           plusw1	equ	0xFE3
 10161                           fsr1h	equ	0xFE2
 10162                           fsr1l	equ	0xFE1
 10163                           indf2	equ	0xFDF
 10164                           postinc2	equ	0xFDE
 10165                           postdec2	equ	0xFDD
 10166                           plusw2	equ	0xFDB
 10167                           fsr2h	equ	0xFDA
 10168                           fsr2l	equ	0xFD9
 10169                           status	equ	0xFD8
 10170                           
 10171 ;; *************** function _I2C1_MasterReadTRBBuild *****************
 10172 ;; Defined at:
 10173 ;;		line 626 in file "mcc_generated_files/i2c1.c"
 10174 ;; Parameters:    Size  Location     Type
 10175 ;;  ptrb            2   26[COMRAM] PTR struct .
 10176 ;;		 -> I2C1_MasterRead@trBlock(5), 
 10177 ;;  pdata           2   28[COMRAM] PTR unsigned char 
 10178 ;;		 -> readByte@Data(3), magCalBNO055@data(6), accelgyroCalBNO055@data(6), readGRVData@rawData(6), 
 10179 ;;		 -> readLIAData@rawData(6), readEulData@rawData(6), readQuatData@rawData(8), readMagData@rawData(6), 
 10180 ;;		 -> readGyroData@rawData(6), readAccelData@rawData(6), RAM(1535), 
 10181 ;;  length          1   30[COMRAM] unsigned char 
 10182 ;;  address         2   31[COMRAM] unsigned int 
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10194 ;;      Params:         7       0       0       0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0       0
 10196 ;;      Temps:          2       0       0       0       0       0       0
 10197 ;;      Totals:         9       0       0       0       0       0       0
 10198 ;;Total ram usage:        9 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    4
 10201 ;; This function calls:
 10202 ;;		Nothing
 10203 ;; This function is called by:
 10204 ;;		_I2C1_MasterRead
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text23
 10209  0053E0                     __ptext23:
 10210                           	opt stack 0
 10211  0053E0                     _I2C1_MasterReadTRBBuild:
 10212                           	opt stack 22
 10213                           
 10214                           ;i2c1.c: 631: ptrb->address = address << 1;
 10215                           
 10216                           ;incstack = 0
 10217  0053E0  C020  F022         	movff	I2C1_MasterReadTRBBuild@address,??_I2C1_MasterReadTRBBuild
 10218  0053E4  C021  F023         	movff	I2C1_MasterReadTRBBuild@address+1,??_I2C1_MasterReadTRBBuild+1
 10219  0053E8  90D8               	bcf	status,0,c
 10220  0053EA  3622               	rlcf	??_I2C1_MasterReadTRBBuild,f,c
 10221  0053EC  3623               	rlcf	??_I2C1_MasterReadTRBBuild+1,f,c
 10222  0053EE  C01B  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
 10223  0053F2  C01C  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
 10224  0053F6  C022  FFDE         	movff	??_I2C1_MasterReadTRBBuild,postinc2
 10225  0053FA  C023  FFDD         	movff	??_I2C1_MasterReadTRBBuild+1,postdec2
 10226                           
 10227                           ;i2c1.c: 633: ptrb->address |= 0x01;
 10228  0053FE  C01B  FFD9         	movff	I2C1_MasterReadTRBBuild@ptrb,fsr2l
 10229  005402  C01C  FFDA         	movff	I2C1_MasterReadTRBBuild@ptrb+1,fsr2h
 10230  005406  0E00               	movlw	0
 10231  005408  80DB               	bsf	plusw2,0,c
 10232                           
 10233                           ;i2c1.c: 634: ptrb->length = length;
 10234  00540A  EE20 F002          	lfsr	2,2
 10235  00540E  501B               	movf	I2C1_MasterReadTRBBuild@ptrb,w,c
 10236  005410  26D9               	addwf	fsr2l,f,c
 10237  005412  501C               	movf	I2C1_MasterReadTRBBuild@ptrb+1,w,c
 10238  005414  22DA               	addwfc	fsr2h,f,c
 10239  005416  C01F  FFDF         	movff	I2C1_MasterReadTRBBuild@length,indf2
 10240                           
 10241                           ;i2c1.c: 635: ptrb->pbuffer = pdata;
 10242  00541A  EE20 F003          	lfsr	2,3
 10243  00541E  501B               	movf	I2C1_MasterReadTRBBuild@ptrb,w,c
 10244  005420  26D9               	addwf	fsr2l,f,c
 10245  005422  501C               	movf	I2C1_MasterReadTRBBuild@ptrb+1,w,c
 10246  005424  22DA               	addwfc	fsr2h,f,c
 10247  005426  C01D  FFDE         	movff	I2C1_MasterReadTRBBuild@pdata,postinc2
 10248  00542A  C01E  FFDD         	movff	I2C1_MasterReadTRBBuild@pdata+1,postdec2
 10249  00542E  0012               	return		;funcret
 10250  005430                     __end_of_I2C1_MasterReadTRBBuild:
 10251                           	opt stack 0
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           intcon	equ	0xFF2
 10257                           postinc0	equ	0xFEE
 10258                           wreg	equ	0xFE8
 10259                           postinc1	equ	0xFE6
 10260                           postdec1	equ	0xFE5
 10261                           plusw1	equ	0xFE3
 10262                           fsr1h	equ	0xFE2
 10263                           fsr1l	equ	0xFE1
 10264                           indf2	equ	0xFDF
 10265                           postinc2	equ	0xFDE
 10266                           postdec2	equ	0xFDD
 10267                           plusw2	equ	0xFDB
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _printf *****************
 10273 ;; Defined at:
 10274 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;  f               2   47[BANK0 ] PTR const unsigned char 
 10277 ;;		 -> STR_52(22), STR_51(59), STR_50(29), STR_49(86), 
 10278 ;;		 -> STR_48(16), STR_47(18), STR_46(34), STR_45(17), 
 10279 ;;		 -> STR_44(38), STR_43(36), STR_42(27), STR_41(37), 
 10280 ;;		 -> STR_40(39), STR_39(60), STR_38(25), STR_37(34), 
 10281 ;;		 -> STR_36(32), STR_35(24), STR_34(28), STR_33(32), 
 10282 ;;		 -> STR_32(36), STR_31(33), STR_30(22), STR_29(34), 
 10283 ;;		 -> STR_28(39), STR_27(31), STR_26(31), STR_25(31), 
 10284 ;;		 -> STR_24(31), STR_23(41), STR_22(36), STR_21(29), 
 10285 ;;		 -> STR_20(37), STR_19(21), STR_18(23), STR_17(27), 
 10286 ;;		 -> STR_16(29), STR_15(30), STR_14(32), STR_13(31), 
 10287 ;;		 -> STR_12(33), STR_11(30), STR_10(18), STR_9(31), 
 10288 ;;		 -> STR_8(20), STR_7(40), STR_6(38), STR_5(38), 
 10289 ;;		 -> STR_4(39), STR_3(25), STR_2(24), STR_1(33), 
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;  idx             1   67[BANK0 ] unsigned char 
 10292 ;;  val             4   93[BANK0 ] unsigned long 
 10293 ;;  tmpval          4   84[BANK0 ] struct .
 10294 ;;  fval            3   90[BANK0 ] struct .
 10295 ;;  flag            2  102[BANK0 ] unsigned short 
 10296 ;;  width           2   99[BANK0 ] int 
 10297 ;;  prec            2   97[BANK0 ] int 
 10298 ;;  exp             2   88[BANK0 ] int 
 10299 ;;  ap              2   82[BANK0 ] PTR void [1]
 10300 ;;		 -> ?_printf(2), 
 10301 ;;  len             2   80[BANK0 ] unsigned int 
 10302 ;;  cp              2   78[BANK0 ] PTR const unsigned char 
 10303 ;;		 -> STR_53(7), printf@c(1), magBias(9), gyroBias(9), 
 10304 ;;		 -> accelBias(9), I2C1_ISR@i2c_address(2), 
 10305 ;;  c               1  101[BANK0 ] char 
 10306 ;;  d               1    0        unsigned char 
 10307 ;; Return value:  Size  Location     Type
 10308 ;;                  2   47[BANK0 ] int 
 10309 ;; Registers used:
 10310 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10316 ;;      Params:         0      11       0       0       0       0       0
 10317 ;;      Locals:         0      40       0       0       0       0       0
 10318 ;;      Temps:          0       6       0       0       0       0       0
 10319 ;;      Totals:         0      57       0       0       0       0       0
 10320 ;;Total ram usage:       57 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    8
 10323 ;; This function calls:
 10324 ;;		___awdiv
 10325 ;;		___ftadd
 10326 ;;		___ftge
 10327 ;;		___ftmul
 10328 ;;		___ftneg
 10329 ;;		___ftsub
 10330 ;;		___fttol
 10331 ;;		___lldiv
 10332 ;;		___llmod
 10333 ;;		___lltoft
 10334 ;;		___wmul
 10335 ;;		__div_to_l_
 10336 ;;		__tdiv_to_l_
 10337 ;;		_fround
 10338 ;;		_isdigit
 10339 ;;		_putch
 10340 ;;		_scale
 10341 ;; This function is called by:
 10342 ;;		_Setup
 10343 ;;		_loop
 10344 ;;		_accelgyroCalBNO055
 10345 ;;		_magCalBNO055
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           	psect	text24
 10350  0000E0                     __ptext24:
 10351                           	opt stack 0
 10352  0000E0                     _printf:
 10353                           	opt stack 21
 10354                           
 10355                           ;doprnt.c: 466: va_list ap;
 10356                           ;doprnt.c: 499: signed char c;
 10357                           ;doprnt.c: 501: int width;
 10358                           ;doprnt.c: 504: int prec;
 10359                           ;doprnt.c: 508: unsigned short flag;
 10360                           ;doprnt.c: 515: char d;
 10361                           ;doprnt.c: 516: double fval;
 10362                           ;doprnt.c: 517: int exp;
 10363                           ;doprnt.c: 523: union {
 10364                           ;doprnt.c: 524: unsigned long vd;
 10365                           ;doprnt.c: 525: double integ;
 10366                           ;doprnt.c: 526: } tmpval;
 10367                           ;doprnt.c: 528: unsigned long val;
 10368                           ;doprnt.c: 529: unsigned len;
 10369                           ;doprnt.c: 530: const char * cp;
 10370                           ;doprnt.c: 533: *ap = __va_start();
 10371                           
 10372                           ;incstack = 0
 10373  0000E0  0E91               	movlw	low (?_printf+2)
 10374  0000E2  0100               	movlb	0	; () banked
 10375  0000E4  6FB2               	movwf	printf@ap& (0+255),b
 10376  0000E6  0E00               	movlw	high (?_printf+2)
 10377  0000E8  0100               	movlb	0	; () banked
 10378  0000EA  6FB3               	movwf	(printf@ap+1)& (0+255),b
 10379                           
 10380                           ;doprnt.c: 536: while(c = *f++) {
 10381  0000EC  EFDB  F009         	goto	l9145
 10382  0000F0                     l8627:
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;doprnt.c: 538: if(c != '%')
 10386  0000F0  0E25               	movlw	37
 10387  0000F2  0100               	movlb	0	; () banked
 10388  0000F4  19C5               	xorwf	printf@c& (0+255),w,b
 10389  0000F6  B4D8               	btfsc	status,2,c
 10390  0000F8  D006               	goto	l8631
 10391                           
 10392                           ; BSR set to: 0
 10393                           ;doprnt.c: 540: {
 10394                           ;doprnt.c: 541: (putch(c) );
 10395  0000FA  0100               	movlb	0	; () banked
 10396  0000FC  51C5               	movf	printf@c& (0+255),w,b
 10397  0000FE  EC9A  F02C         	call	_putch
 10398                           
 10399                           ;doprnt.c: 542: continue;
 10400  000102  EFDB  F009         	goto	l9145
 10401  000106                     l8631:
 10402                           
 10403                           ;doprnt.c: 543: }
 10404                           ;doprnt.c: 546: width = 0;
 10405  000106  0E00               	movlw	0
 10406  000108  0100               	movlb	0	; () banked
 10407  00010A  6FC4               	movwf	(printf@width+1)& (0+255),b
 10408  00010C  0E00               	movlw	0
 10409  00010E  6FC3               	movwf	printf@width& (0+255),b
 10410                           
 10411                           ;doprnt.c: 548: flag = 0;
 10412  000110  0E00               	movlw	0
 10413  000112  0100               	movlb	0	; () banked
 10414  000114  6FC7               	movwf	(printf@flag+1)& (0+255),b
 10415  000116  0E00               	movlw	0
 10416  000118  6FC6               	movwf	printf@flag& (0+255),b
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;doprnt.c: 551: switch(*f) {
 10420                           
 10421                           ;doprnt.c: 550: for(;;) {
 10422  00011A  D00E               	goto	l8643
 10423  00011C                     l8633:
 10424                           
 10425                           ;doprnt.c: 554: flag |= 0x08;
 10426  00011C  0100               	movlb	0	; () banked
 10427  00011E  87C6               	bsf	printf@flag& (0+255),3,b
 10428  000120  D008               	goto	L5
 10429  000122                     l8635:
 10430                           
 10431                           ;doprnt.c: 561: flag |= 0x01;
 10432  000122  0100               	movlb	0	; () banked
 10433  000124  81C6               	bsf	printf@flag& (0+255),0,b
 10434  000126  D005               	goto	L5
 10435  000128                     l8637:
 10436                           
 10437                           ;doprnt.c: 574: flag |= 0x800;
 10438  000128  0100               	movlb	0	; () banked
 10439  00012A  87C7               	bsf	(printf@flag+1)& (0+255),3,b
 10440  00012C  D002               	goto	L5
 10441  00012E                     l8639:
 10442                           
 10443                           ;doprnt.c: 580: flag |= 0x04;
 10444  00012E  0100               	movlb	0	; () banked
 10445  000130  85C6               	bsf	printf@flag& (0+255),2,b
 10446  000132                     L5:
 10447                           
 10448                           ;doprnt.c: 581: f++;
 10449  000132  0100               	movlb	0	; () banked
 10450  000134  4B8F               	infsnz	printf@f& (0+255),f,b
 10451  000136  2B90               	incf	(printf@f+1)& (0+255),f,b
 10452  000138                     l8643:
 10453  000138  C08F  FFF6         	movff	printf@f,tblptrl
 10454  00013C  C090  FFF7         	movff	printf@f+1,tblptrh
 10455  000140                     	if	0	;tblptru may be non-zero
 10456  000140                     	endif
 10457  000140                     	if	0	;tblptru may be non-zero
 10458  000140                     	endif
 10459  000140  0008               	tblrd		*
 10460  000142  50F5               	movf	tablat,w,c
 10461                           
 10462                           ; Switch size 1, requested type "space"
 10463                           ; Number of cases is 4, Range of values is 32 to 48
 10464                           ; switch strategies available:
 10465                           ; Name         Instructions Cycles
 10466                           ; simple_byte           13     7 (average)
 10467                           ;	Chosen strategy is simple_byte
 10468  000144  0A20               	xorlw	32	; case 32
 10469  000146  B4D8               	btfsc	status,2,c
 10470  000148  D7EC               	goto	l8635
 10471  00014A  0A03               	xorlw	3	; case 35
 10472  00014C  B4D8               	btfsc	status,2,c
 10473  00014E  D7EC               	goto	l8637
 10474  000150  0A0E               	xorlw	14	; case 45
 10475  000152  B4D8               	btfsc	status,2,c
 10476  000154  D7E3               	goto	l8633
 10477  000156  0A1D               	xorlw	29	; case 48
 10478  000158  B4D8               	btfsc	status,2,c
 10479  00015A  D7E9               	goto	l8639
 10480                           
 10481                           ;doprnt.c: 593: if(flag & 0x08)
 10482                           
 10483                           ;doprnt.c: 586: }
 10484                           
 10485                           ;doprnt.c: 585: break;
 10486  00015C  0100               	movlb	0	; () banked
 10487  00015E  A7C6               	btfss	printf@flag& (0+255),3,b
 10488  000160  D002               	goto	l8647
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;doprnt.c: 594: flag &= ~0x04;
 10492  000162  0100               	movlb	0	; () banked
 10493  000164  95C6               	bcf	printf@flag& (0+255),2,b
 10494  000166                     l8647:
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10498  000166  C08F  FFF6         	movff	printf@f,tblptrl
 10499  00016A  C090  FFF7         	movff	printf@f+1,tblptrh
 10500  00016E                     	if	0	;tblptru may be non-zero
 10501  00016E                     	endif
 10502  00016E                     	if	0	;tblptru may be non-zero
 10503  00016E                     	endif
 10504  00016E  0008               	tblrd		*
 10505  000170  50F5               	movf	tablat,w,c
 10506  000172  EC12  F02C         	call	_isdigit
 10507  000176  A0D8               	btfss	status,0,c
 10508  000178  D041               	goto	l8659
 10509                           
 10510                           ;doprnt.c: 598: width = 0;
 10511  00017A  0E00               	movlw	0
 10512  00017C  0100               	movlb	0	; () banked
 10513  00017E  6FC4               	movwf	(printf@width+1)& (0+255),b
 10514  000180  0E00               	movlw	0
 10515  000182  6FC3               	movwf	printf@width& (0+255),b
 10516  000184                     l8651:
 10517                           
 10518                           ;doprnt.c: 600: width *= 10;
 10519  000184  C0C3  F060         	movff	printf@width,___wmul@multiplier
 10520  000188  C0C4  F061         	movff	printf@width+1,___wmul@multiplier+1
 10521  00018C  0E00               	movlw	0
 10522  00018E  0100               	movlb	0	; () banked
 10523  000190  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10524  000192  0E0A               	movlw	10
 10525  000194  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10526  000196  EC61  F02B         	call	___wmul	;wreg free
 10527  00019A  C060  F0C3         	movff	?___wmul,printf@width
 10528  00019E  C061  F0C4         	movff	?___wmul+1,printf@width+1
 10529                           
 10530                           ;doprnt.c: 601: width += *f++ - '0';
 10531  0001A2  0ED0               	movlw	208
 10532  0001A4  0100               	movlb	0	; () banked
 10533  0001A6  6F9A               	movwf	??_printf& (0+255),b
 10534  0001A8  0EFF               	movlw	255
 10535  0001AA  0100               	movlb	0	; () banked
 10536  0001AC  6F9B               	movwf	(??_printf+1)& (0+255),b
 10537  0001AE  C08F  FFF6         	movff	printf@f,tblptrl
 10538  0001B2  C090  FFF7         	movff	printf@f+1,tblptrh
 10539  0001B6                     	if	0	;tblptru may be non-zero
 10540  0001B6                     	endif
 10541  0001B6                     	if	0	;tblptru may be non-zero
 10542  0001B6                     	endif
 10543  0001B6  0008               	tblrd		*
 10544  0001B8  50F5               	movf	tablat,w,c
 10545  0001BA  0100               	movlb	0	; () banked
 10546  0001BC  6F9C               	movwf	(??_printf+2)& (0+255),b
 10547  0001BE  6B9D               	clrf	(??_printf+3)& (0+255),b
 10548  0001C0  0100               	movlb	0	; () banked
 10549  0001C2  519A               	movf	??_printf& (0+255),w,b
 10550  0001C4  0100               	movlb	0	; () banked
 10551  0001C6  279C               	addwf	(??_printf+2)& (0+255),f,b
 10552  0001C8  0100               	movlb	0	; () banked
 10553  0001CA  519B               	movf	(??_printf+1)& (0+255),w,b
 10554  0001CC  0100               	movlb	0	; () banked
 10555  0001CE  239D               	addwfc	(??_printf+3)& (0+255),f,b
 10556  0001D0  0100               	movlb	0	; () banked
 10557  0001D2  519C               	movf	(??_printf+2)& (0+255),w,b
 10558  0001D4  0100               	movlb	0	; () banked
 10559  0001D6  27C3               	addwf	printf@width& (0+255),f,b
 10560  0001D8  0100               	movlb	0	; () banked
 10561  0001DA  519D               	movf	(??_printf+3)& (0+255),w,b
 10562  0001DC  0100               	movlb	0	; () banked
 10563  0001DE  23C4               	addwfc	(printf@width+1)& (0+255),f,b
 10564                           
 10565                           ; BSR set to: 0
 10566  0001E0  0100               	movlb	0	; () banked
 10567  0001E2  4B8F               	infsnz	printf@f& (0+255),f,b
 10568  0001E4  2B90               	incf	(printf@f+1)& (0+255),f,b
 10569                           
 10570                           ; BSR set to: 0
 10571                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10572  0001E6  C08F  FFF6         	movff	printf@f,tblptrl
 10573  0001EA  C090  FFF7         	movff	printf@f+1,tblptrh
 10574  0001EE                     	if	0	;tblptru may be non-zero
 10575  0001EE                     	endif
 10576  0001EE                     	if	0	;tblptru may be non-zero
 10577  0001EE                     	endif
 10578  0001EE  0008               	tblrd		*
 10579  0001F0  50F5               	movf	tablat,w,c
 10580  0001F2  EC12  F02C         	call	_isdigit
 10581  0001F6  A0D8               	btfss	status,0,c
 10582  0001F8  D01A               	goto	l8667
 10583  0001FA  D7C4               	goto	l8651
 10584  0001FC                     l8659:
 10585  0001FC  C08F  FFF6         	movff	printf@f,tblptrl
 10586  000200  C090  FFF7         	movff	printf@f+1,tblptrh
 10587  000204                     	if	0	;tblptru may be non-zero
 10588  000204                     	endif
 10589  000204                     	if	0	;tblptru may be non-zero
 10590  000204                     	endif
 10591  000204  0008               	tblrd		*
 10592  000206  50F5               	movf	tablat,w,c
 10593  000208  0A2A               	xorlw	42
 10594  00020A  A4D8               	btfss	status,2,c
 10595  00020C  D010               	goto	l8667
 10596                           
 10597                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 10598  00020E  C0B2  FFD9         	movff	printf@ap,fsr2l
 10599  000212  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 10600  000216  CFDE F0C3          	movff	postinc2,printf@width
 10601  00021A  CFDD F0C4          	movff	postdec2,printf@width+1
 10602  00021E  0E02               	movlw	2
 10603  000220  0100               	movlb	0	; () banked
 10604  000222  27B2               	addwf	printf@ap& (0+255),f,b
 10605  000224  0E00               	movlw	0
 10606  000226  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;doprnt.c: 606: f++;
 10610  000228  0100               	movlb	0	; () banked
 10611  00022A  4B8F               	infsnz	printf@f& (0+255),f,b
 10612  00022C  2B90               	incf	(printf@f+1)& (0+255),f,b
 10613  00022E                     l8667:
 10614                           
 10615                           ;doprnt.c: 608: }
 10616                           ;doprnt.c: 611: if(*f == '.') {
 10617  00022E  C08F  FFF6         	movff	printf@f,tblptrl
 10618  000232  C090  FFF7         	movff	printf@f+1,tblptrh
 10619  000236                     	if	0	;tblptru may be non-zero
 10620  000236                     	endif
 10621  000236                     	if	0	;tblptru may be non-zero
 10622  000236                     	endif
 10623  000236  0008               	tblrd		*
 10624  000238  50F5               	movf	tablat,w,c
 10625  00023A  0A2E               	xorlw	46
 10626  00023C  A4D8               	btfss	status,2,c
 10627  00023E  D053               	goto	l8687
 10628                           
 10629                           ;doprnt.c: 612: flag |= 0x4000;
 10630  000240  0100               	movlb	0	; () banked
 10631  000242  8DC7               	bsf	(printf@flag+1)& (0+255),6,b
 10632                           
 10633                           ;doprnt.c: 613: f++;
 10634  000244  0100               	movlb	0	; () banked
 10635  000246  4B8F               	infsnz	printf@f& (0+255),f,b
 10636  000248  2B90               	incf	(printf@f+1)& (0+255),f,b
 10637                           
 10638                           ; BSR set to: 0
 10639                           ;doprnt.c: 615: if(*f == '*') {
 10640  00024A  C08F  FFF6         	movff	printf@f,tblptrl
 10641  00024E  C090  FFF7         	movff	printf@f+1,tblptrh
 10642  000252                     	if	0	;tblptru may be non-zero
 10643  000252                     	endif
 10644  000252                     	if	0	;tblptru may be non-zero
 10645  000252                     	endif
 10646  000252  0008               	tblrd		*
 10647  000254  50F5               	movf	tablat,w,c
 10648  000256  0A2A               	xorlw	42
 10649  000258  A4D8               	btfss	status,2,c
 10650  00025A  D011               	goto	l8679
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 10654  00025C  C0B2  FFD9         	movff	printf@ap,fsr2l
 10655  000260  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 10656  000264  CFDE F0C1          	movff	postinc2,printf@prec
 10657  000268  CFDD F0C2          	movff	postdec2,printf@prec+1
 10658                           
 10659                           ; BSR set to: 0
 10660  00026C  0E02               	movlw	2
 10661  00026E  0100               	movlb	0	; () banked
 10662  000270  27B2               	addwf	printf@ap& (0+255),f,b
 10663  000272  0E00               	movlw	0
 10664  000274  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;doprnt.c: 617: f++;
 10668  000276  0100               	movlb	0	; () banked
 10669  000278  4B8F               	infsnz	printf@f& (0+255),f,b
 10670  00027A  2B90               	incf	(printf@f+1)& (0+255),f,b
 10671                           
 10672                           ;doprnt.c: 618: } else
 10673  00027C  D118               	goto	l8755
 10674  00027E                     l8679:
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;doprnt.c: 620: {
 10678                           ;doprnt.c: 621: prec = 0;
 10679  00027E  0E00               	movlw	0
 10680  000280  0100               	movlb	0	; () banked
 10681  000282  6FC2               	movwf	(printf@prec+1)& (0+255),b
 10682  000284  0E00               	movlw	0
 10683  000286  6FC1               	movwf	printf@prec& (0+255),b
 10684                           
 10685                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
 10686  000288  D023               	goto	l8685
 10687  00028A                     l8681:
 10688                           
 10689                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
 10690  00028A  C0C1  F060         	movff	printf@prec,___wmul@multiplier
 10691  00028E  C0C2  F061         	movff	printf@prec+1,___wmul@multiplier+1
 10692  000292  0E00               	movlw	0
 10693  000294  0100               	movlb	0	; () banked
 10694  000296  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10695  000298  0E0A               	movlw	10
 10696  00029A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10697  00029C  EC61  F02B         	call	___wmul	;wreg free
 10698  0002A0  C08F  FFF6         	movff	printf@f,tblptrl
 10699  0002A4  C090  FFF7         	movff	printf@f+1,tblptrh
 10700  0002A8                     	if	0	;tblptru may be non-zero
 10701  0002A8                     	endif
 10702  0002A8                     	if	0	;tblptru may be non-zero
 10703  0002A8                     	endif
 10704  0002A8  0008               	tblrd		*
 10705  0002AA  50F5               	movf	tablat,w,c
 10706  0002AC  0100               	movlb	0	; () banked
 10707  0002AE  2760               	addwf	?___wmul& (0+255),f,b
 10708  0002B0  0E00               	movlw	0
 10709  0002B2  0100               	movlb	0	; () banked
 10710  0002B4  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 10711  0002B6  0ED0               	movlw	208
 10712  0002B8  0100               	movlb	0	; () banked
 10713  0002BA  2560               	addwf	?___wmul& (0+255),w,b
 10714  0002BC  0100               	movlb	0	; () banked
 10715  0002BE  6FC1               	movwf	printf@prec& (0+255),b
 10716  0002C0  0EFF               	movlw	255
 10717  0002C2  0100               	movlb	0	; () banked
 10718  0002C4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10719  0002C6  0100               	movlb	0	; () banked
 10720  0002C8  6FC2               	movwf	(printf@prec+1)& (0+255),b
 10721                           
 10722                           ; BSR set to: 0
 10723  0002CA  0100               	movlb	0	; () banked
 10724  0002CC  4B8F               	infsnz	printf@f& (0+255),f,b
 10725  0002CE  2B90               	incf	(printf@f+1)& (0+255),f,b
 10726  0002D0                     l8685:
 10727                           
 10728                           ; BSR set to: 0
 10729  0002D0  C08F  FFF6         	movff	printf@f,tblptrl
 10730  0002D4  C090  FFF7         	movff	printf@f+1,tblptrh
 10731  0002D8                     	if	0	;tblptru may be non-zero
 10732  0002D8                     	endif
 10733  0002D8                     	if	0	;tblptru may be non-zero
 10734  0002D8                     	endif
 10735  0002D8  0008               	tblrd		*
 10736  0002DA  50F5               	movf	tablat,w,c
 10737  0002DC  EC12  F02C         	call	_isdigit
 10738  0002E0  A0D8               	btfss	status,0,c
 10739  0002E2  D0E5               	goto	l8755
 10740  0002E4  D7D2               	goto	l8681
 10741  0002E6                     l8687:
 10742                           
 10743                           ;doprnt.c: 626: prec = 0;
 10744  0002E6  0E00               	movlw	0
 10745  0002E8  0100               	movlb	0	; () banked
 10746  0002EA  6FC2               	movwf	(printf@prec+1)& (0+255),b
 10747  0002EC  0E00               	movlw	0
 10748  0002EE  6FC1               	movwf	printf@prec& (0+255),b
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;doprnt.c: 628: flag |= 0x1000;
 10752  0002F0  0100               	movlb	0	; () banked
 10753  0002F2  89C7               	bsf	(printf@flag+1)& (0+255),4,b
 10754                           
 10755                           ; BSR set to: 0
 10756                           ;doprnt.c: 630: }
 10757                           ;doprnt.c: 635: switch(c = *f++) {
 10758  0002F4  D0DC               	goto	l8755
 10759  0002F6                     l8691:
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;doprnt.c: 663: flag |= 0x400;
 10763  0002F6  0100               	movlb	0	; () banked
 10764  0002F8  85C7               	bsf	(printf@flag+1)& (0+255),2,b
 10765                           
 10766                           ;doprnt.c: 664: break;
 10767  0002FA  D104               	goto	l8757
 10768  0002FC                     l8693:
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;doprnt.c: 691: flag |= 0x40;
 10772  0002FC  0100               	movlb	0	; () banked
 10773  0002FE  8DC6               	bsf	printf@flag& (0+255),6,b
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;doprnt.c: 698: case 'i':
 10777                           ;doprnt.c: 699: break;
 10778                           
 10779                           ; BSR set to: 0
 10780                           
 10781                           ;doprnt.c: 697: case 'd':
 10782                           
 10783                           ;doprnt.c: 693: break;
 10784  000300  D101               	goto	l8757
 10785  000302                     l8695:
 10786                           
 10787                           ; BSR set to: 0
 10788                           ;doprnt.c: 714: flag |= 0x20;
 10789  000302  0100               	movlb	0	; () banked
 10790  000304  8BC6               	bsf	printf@flag& (0+255),5,b
 10791  000306                     l1343:
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;doprnt.c: 721: flag |= 0x80;
 10795  000306  0100               	movlb	0	; () banked
 10796  000308  8FC6               	bsf	printf@flag& (0+255),7,b
 10797                           
 10798                           ;doprnt.c: 723: break;
 10799  00030A  D0FC               	goto	l8757
 10800  00030C                     l8697:
 10801                           
 10802                           ; BSR set to: 0
 10803                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10804  00030C  C0B2  FFD9         	movff	printf@ap,fsr2l
 10805  000310  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 10806  000314  CFDE F0AE          	movff	postinc2,printf@cp
 10807  000318  CFDD F0AF          	movff	postdec2,printf@cp+1
 10808                           
 10809                           ; BSR set to: 0
 10810  00031C  0E02               	movlw	2
 10811  00031E  0100               	movlb	0	; () banked
 10812  000320  27B2               	addwf	printf@ap& (0+255),f,b
 10813  000322  0E00               	movlw	0
 10814  000324  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;doprnt.c: 740: if(!cp)
 10818  000326  0100               	movlb	0	; () banked
 10819  000328  51AE               	movf	printf@cp& (0+255),w,b
 10820  00032A  0100               	movlb	0	; () banked
 10821  00032C  11AF               	iorwf	(printf@cp+1)& (0+255),w,b
 10822  00032E  A4D8               	btfss	status,2,c
 10823  000330  D006               	goto	l8705
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;doprnt.c: 741: cp = "(null)";
 10827  000332  0EF7               	movlw	low STR_53
 10828  000334  0100               	movlb	0	; () banked
 10829  000336  6FAE               	movwf	printf@cp& (0+255),b
 10830  000338  0E7F               	movlw	high STR_53
 10831  00033A  0100               	movlb	0	; () banked
 10832  00033C  6FAF               	movwf	(printf@cp+1)& (0+255),b
 10833  00033E                     l8705:
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;doprnt.c: 745: len = 0;
 10837  00033E  0E00               	movlw	0
 10838  000340  0100               	movlb	0	; () banked
 10839  000342  6FB1               	movwf	(printf@len+1)& (0+255),b
 10840  000344  0E00               	movlw	0
 10841  000346  6FB0               	movwf	printf@len& (0+255),b
 10842                           
 10843                           ;doprnt.c: 746: while(cp[len])
 10844  000348  D003               	goto	l8709
 10845  00034A                     l8707:
 10846                           
 10847                           ;doprnt.c: 747: len++;
 10848  00034A  0100               	movlb	0	; () banked
 10849  00034C  4BB0               	infsnz	printf@len& (0+255),f,b
 10850  00034E  2BB1               	incf	(printf@len+1)& (0+255),f,b
 10851  000350                     l8709:
 10852                           
 10853                           ; BSR set to: 0
 10854  000350  0100               	movlb	0	; () banked
 10855  000352  51B0               	movf	printf@len& (0+255),w,b
 10856  000354  0100               	movlb	0	; () banked
 10857  000356  25AE               	addwf	printf@cp& (0+255),w,b
 10858  000358  0100               	movlb	0	; () banked
 10859  00035A  6F9A               	movwf	??_printf& (0+255),b
 10860  00035C  0100               	movlb	0	; () banked
 10861  00035E  51B1               	movf	(printf@len+1)& (0+255),w,b
 10862  000360  0100               	movlb	0	; () banked
 10863  000362  21AF               	addwfc	(printf@cp+1)& (0+255),w,b
 10864  000364  0100               	movlb	0	; () banked
 10865  000366  6F9B               	movwf	(??_printf+1)& (0+255),b
 10866  000368  C09A  FFF6         	movff	??_printf,tblptrl
 10867  00036C  C09B  FFF7         	movff	??_printf+1,tblptrh
 10868  000370  6AF8               	clrf	tblptru,c
 10869  000372  0E05               	movlw	(high __ramtop+-1)
 10870  000374  64F7               	cpfsgt	tblptrh,c
 10871  000376  D003               	bra	u9587
 10872  000378  0008               	tblrd		*
 10873  00037A  50F5               	movf	tablat,w,c
 10874  00037C  D005               	bra	u9580
 10875  00037E                     u9587:
 10876  00037E  CFF6 FFE9          	movff	tblptrl,fsr0l
 10877  000382  CFF7 FFEA          	movff	tblptrh,fsr0h
 10878  000386  50EF               	movf	indf0,w,c
 10879  000388                     u9580:
 10880  000388  0900               	iorlw	0
 10881  00038A  A4D8               	btfss	status,2,c
 10882  00038C  D7DE               	goto	l8707
 10883  00038E                     l8711:
 10884                           
 10885                           ;doprnt.c: 753: if(prec && prec < len)
 10886  00038E  0100               	movlb	0	; () banked
 10887  000390  51C1               	movf	printf@prec& (0+255),w,b
 10888  000392  0100               	movlb	0	; () banked
 10889  000394  11C2               	iorwf	(printf@prec+1)& (0+255),w,b
 10890  000396  B4D8               	btfsc	status,2,c
 10891  000398  D00E               	goto	l8717
 10892                           
 10893                           ; BSR set to: 0
 10894  00039A  0100               	movlb	0	; () banked
 10895  00039C  51B0               	movf	printf@len& (0+255),w,b
 10896  00039E  0100               	movlb	0	; () banked
 10897  0003A0  5DC1               	subwf	printf@prec& (0+255),w,b
 10898  0003A2  0100               	movlb	0	; () banked
 10899  0003A4  51B1               	movf	(printf@len+1)& (0+255),w,b
 10900  0003A6  0100               	movlb	0	; () banked
 10901  0003A8  59C2               	subwfb	(printf@prec+1)& (0+255),w,b
 10902  0003AA  B0D8               	btfsc	status,0,c
 10903  0003AC  D004               	goto	l8717
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;doprnt.c: 754: len = prec;
 10907  0003AE  C0C1  F0B0         	movff	printf@prec,printf@len
 10908  0003B2  C0C2  F0B1         	movff	printf@prec+1,printf@len+1
 10909  0003B6                     l8717:
 10910                           
 10911                           ; BSR set to: 0
 10912                           ;doprnt.c: 757: if(width > len)
 10913  0003B6  0100               	movlb	0	; () banked
 10914  0003B8  51C3               	movf	printf@width& (0+255),w,b
 10915  0003BA  0100               	movlb	0	; () banked
 10916  0003BC  5DB0               	subwf	printf@len& (0+255),w,b
 10917  0003BE  0100               	movlb	0	; () banked
 10918  0003C0  51C4               	movf	(printf@width+1)& (0+255),w,b
 10919  0003C2  0100               	movlb	0	; () banked
 10920  0003C4  59B1               	subwfb	(printf@len+1)& (0+255),w,b
 10921  0003C6  B0D8               	btfsc	status,0,c
 10922  0003C8  D009               	goto	l8721
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;doprnt.c: 758: width -= len;
 10926  0003CA  0100               	movlb	0	; () banked
 10927  0003CC  51B0               	movf	printf@len& (0+255),w,b
 10928  0003CE  0100               	movlb	0	; () banked
 10929  0003D0  5FC3               	subwf	printf@width& (0+255),f,b
 10930  0003D2  0100               	movlb	0	; () banked
 10931  0003D4  51B1               	movf	(printf@len+1)& (0+255),w,b
 10932  0003D6  0100               	movlb	0	; () banked
 10933  0003D8  5BC4               	subwfb	(printf@width+1)& (0+255),f,b
 10934  0003DA  D005               	goto	l8723
 10935  0003DC                     l8721:
 10936                           
 10937                           ; BSR set to: 0
 10938                           ;doprnt.c: 759: else
 10939                           ;doprnt.c: 760: width = 0;
 10940  0003DC  0E00               	movlw	0
 10941  0003DE  0100               	movlb	0	; () banked
 10942  0003E0  6FC4               	movwf	(printf@width+1)& (0+255),b
 10943  0003E2  0E00               	movlw	0
 10944  0003E4  6FC3               	movwf	printf@width& (0+255),b
 10945  0003E6                     l8723:
 10946                           
 10947                           ; BSR set to: 0
 10948                           ;doprnt.c: 762: if(!(flag & 0x08))
 10949  0003E6  0100               	movlb	0	; () banked
 10950  0003E8  A7C6               	btfss	printf@flag& (0+255),3,b
 10951  0003EA  D004               	goto	l8729
 10952  0003EC  D024               	goto	l8735
 10953  0003EE                     l8727:
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;doprnt.c: 765: (putch(' ') );
 10957  0003EE  0E20               	movlw	32
 10958  0003F0  EC9A  F02C         	call	_putch
 10959  0003F4                     l8729:
 10960  0003F4  0100               	movlb	0	; () banked
 10961  0003F6  07C3               	decf	printf@width& (0+255),f,b
 10962  0003F8  A0D8               	btfss	status,0,c
 10963  0003FA  07C4               	decf	(printf@width+1)& (0+255),f,b
 10964  0003FC  0100               	movlb	0	; () banked
 10965  0003FE  29C3               	incf	printf@width& (0+255),w,b
 10966  000400  E1F6               	bnz	l8727
 10967  000402  0100               	movlb	0	; () banked
 10968  000404  29C4               	incf	(printf@width+1)& (0+255),w,b
 10969  000406  B4D8               	btfsc	status,2,c
 10970  000408  D016               	goto	l8735
 10971  00040A  D7F1               	goto	l8727
 10972  00040C                     l8731:
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;doprnt.c: 768: (putch(*cp++) );
 10976  00040C  C0AE  FFF6         	movff	printf@cp,tblptrl
 10977  000410  C0AF  FFF7         	movff	printf@cp+1,tblptrh
 10978  000414  6AF8               	clrf	tblptru,c
 10979  000416  0E05               	movlw	(high __ramtop+-1)
 10980  000418  64F7               	cpfsgt	tblptrh,c
 10981  00041A  D003               	bra	u9657
 10982  00041C  0008               	tblrd		*
 10983  00041E  50F5               	movf	tablat,w,c
 10984  000420  D005               	bra	u9650
 10985  000422                     u9657:
 10986  000422  CFF6 FFE9          	movff	tblptrl,fsr0l
 10987  000426  CFF7 FFEA          	movff	tblptrh,fsr0h
 10988  00042A  50EF               	movf	indf0,w,c
 10989  00042C                     u9650:
 10990  00042C  EC9A  F02C         	call	_putch
 10991  000430  0100               	movlb	0	; () banked
 10992  000432  4BAE               	infsnz	printf@cp& (0+255),f,b
 10993  000434  2BAF               	incf	(printf@cp+1)& (0+255),f,b
 10994  000436                     l8735:
 10995                           
 10996                           ; BSR set to: 0
 10997  000436  0100               	movlb	0	; () banked
 10998  000438  07B0               	decf	printf@len& (0+255),f,b
 10999  00043A  A0D8               	btfss	status,0,c
 11000  00043C  07B1               	decf	(printf@len+1)& (0+255),f,b
 11001  00043E  0100               	movlb	0	; () banked
 11002  000440  29B0               	incf	printf@len& (0+255),w,b
 11003  000442  E1E4               	bnz	l8731
 11004  000444  0100               	movlb	0	; () banked
 11005  000446  29B1               	incf	(printf@len+1)& (0+255),w,b
 11006  000448  A4D8               	btfss	status,2,c
 11007  00044A  D7E0               	goto	l8731
 11008                           
 11009                           ; BSR set to: 0
 11010                           ;doprnt.c: 770: if(flag & 0x08)
 11011  00044C  0100               	movlb	0	; () banked
 11012  00044E  B7C6               	btfsc	printf@flag& (0+255),3,b
 11013  000450  D005               	goto	l8741
 11014  000452  EFDB  F009         	goto	l9145
 11015  000456                     l8739:
 11016                           
 11017                           ; BSR set to: 0
 11018                           ;doprnt.c: 772: (putch(' ') );
 11019  000456  0E20               	movlw	32
 11020  000458  EC9A  F02C         	call	_putch
 11021  00045C                     l8741:
 11022  00045C  0100               	movlb	0	; () banked
 11023  00045E  07C3               	decf	printf@width& (0+255),f,b
 11024  000460  A0D8               	btfss	status,0,c
 11025  000462  07C4               	decf	(printf@width+1)& (0+255),f,b
 11026  000464  0100               	movlb	0	; () banked
 11027  000466  29C3               	incf	printf@width& (0+255),w,b
 11028  000468  E1F6               	bnz	l8739
 11029  00046A  0100               	movlb	0	; () banked
 11030  00046C  29C4               	incf	(printf@width+1)& (0+255),w,b
 11031  00046E  B4D8               	btfsc	status,2,c
 11032  000470  EFDB  F009         	goto	l9145
 11033  000474  D7F0               	goto	l8739
 11034  000476                     l8743:
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 11038  000476  C0B2  FFD9         	movff	printf@ap,fsr2l
 11039  00047A  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 11040  00047E  50DF               	movf	indf2,w,c
 11041  000480  0100               	movlb	0	; () banked
 11042  000482  6FC5               	movwf	printf@c& (0+255),b
 11043                           
 11044                           ; BSR set to: 0
 11045  000484  0E02               	movlw	2
 11046  000486  0100               	movlb	0	; () banked
 11047  000488  27B2               	addwf	printf@ap& (0+255),f,b
 11048  00048A  0E00               	movlw	0
 11049  00048C  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 11050  00048E                     l8747:
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;doprnt.c: 805: cp = (char *)&c;
 11054  00048E  0EC5               	movlw	low printf@c
 11055  000490  0100               	movlb	0	; () banked
 11056  000492  6FAE               	movwf	printf@cp& (0+255),b
 11057  000494  0E00               	movlw	high printf@c
 11058  000496  0100               	movlb	0	; () banked
 11059  000498  6FAF               	movwf	(printf@cp+1)& (0+255),b
 11060                           
 11061                           ; BSR set to: 0
 11062                           ;doprnt.c: 806: len = 1;
 11063  00049A  0E00               	movlw	0
 11064  00049C  0100               	movlb	0	; () banked
 11065  00049E  6FB1               	movwf	(printf@len+1)& (0+255),b
 11066  0004A0  0E01               	movlw	1
 11067  0004A2  6FB0               	movwf	printf@len& (0+255),b
 11068                           
 11069                           ;doprnt.c: 807: goto dostring;
 11070  0004A4  D774               	goto	l8711
 11071  0004A6                     l8751:
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;doprnt.c: 818: flag |= 0xC0;
 11075  0004A6  0EC0               	movlw	192
 11076  0004A8  0100               	movlb	0	; () banked
 11077  0004AA  13C6               	iorwf	printf@flag& (0+255),f,b
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;doprnt.c: 822: }
 11081                           
 11082                           ;doprnt.c: 819: break;
 11083  0004AC  D02B               	goto	l8757
 11084  0004AE                     l8755:
 11085  0004AE  C08F  FFF6         	movff	printf@f,tblptrl
 11086  0004B2  C090  FFF7         	movff	printf@f+1,tblptrh
 11087  0004B6  0100               	movlb	0	; () banked
 11088  0004B8  4B8F               	infsnz	printf@f& (0+255),f,b
 11089  0004BA  2B90               	incf	(printf@f+1)& (0+255),f,b
 11090  0004BC                     	if	0	;tblptru may be non-zero
 11091  0004BC                     	endif
 11092  0004BC                     	if	0	;tblptru may be non-zero
 11093  0004BC                     	endif
 11094  0004BC  0008               	tblrd		*
 11095  0004BE  CFF5 F0C5          	movff	tablat,printf@c
 11096  0004C2  0100               	movlb	0	; () banked
 11097  0004C4  51C5               	movf	printf@c& (0+255),w,b
 11098                           
 11099                           ; Switch size 1, requested type "space"
 11100                           ; Number of cases is 10, Range of values is 0 to 120
 11101                           ; switch strategies available:
 11102                           ; Name         Instructions Cycles
 11103                           ; simple_byte           31    16 (average)
 11104                           ;	Chosen strategy is simple_byte
 11105  0004C6  0A00               	xorlw	0	; case 0
 11106  0004C8  B4D8               	btfsc	status,2,c
 11107  0004CA  0012               	return	
 11108  0004CC  0A58               	xorlw	88	; case 88
 11109  0004CE  B4D8               	btfsc	status,2,c
 11110  0004D0  D718               	goto	l8695
 11111  0004D2  0A3B               	xorlw	59	; case 99
 11112  0004D4  B4D8               	btfsc	status,2,c
 11113  0004D6  D7CF               	goto	l8743
 11114  0004D8  0A07               	xorlw	7	; case 100
 11115  0004DA  B4D8               	btfsc	status,2,c
 11116  0004DC  D013               	goto	l8757
 11117  0004DE  0A02               	xorlw	2	; case 102
 11118  0004E0  B4D8               	btfsc	status,2,c
 11119  0004E2  D709               	goto	l8691
 11120  0004E4  0A0F               	xorlw	15	; case 105
 11121  0004E6  B4D8               	btfsc	status,2,c
 11122  0004E8  D00D               	goto	l8757
 11123  0004EA  0A06               	xorlw	6	; case 111
 11124  0004EC  B4D8               	btfsc	status,2,c
 11125  0004EE  D706               	goto	l8693
 11126  0004F0  0A1C               	xorlw	28	; case 115
 11127  0004F2  B4D8               	btfsc	status,2,c
 11128  0004F4  D70B               	goto	l8697
 11129  0004F6  0A06               	xorlw	6	; case 117
 11130  0004F8  B4D8               	btfsc	status,2,c
 11131  0004FA  D7D5               	goto	l8751
 11132  0004FC  0A0D               	xorlw	13	; case 120
 11133  0004FE  B4D8               	btfsc	status,2,c
 11134  000500  D702               	goto	l1343
 11135  000502  D7C5               	goto	l8747
 11136  000504                     l8757:
 11137                           
 11138                           ; BSR set to: 0
 11139                           ;doprnt.c: 825: if(flag & (0x700)) {
 11140  000504  0E07               	movlw	7
 11141  000506  0100               	movlb	0	; () banked
 11142  000508  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 11143  00050A  B4D8               	btfsc	status,2,c
 11144  00050C  D3C9               	goto	l8951
 11145                           
 11146                           ; BSR set to: 0
 11147                           ;doprnt.c: 827: if(flag & 0x1000)
 11148  00050E  0100               	movlb	0	; () banked
 11149  000510  A9C7               	btfss	(printf@flag+1)& (0+255),4,b
 11150  000512  D005               	goto	l8763
 11151                           
 11152                           ; BSR set to: 0
 11153                           ;doprnt.c: 829: prec = 6;
 11154  000514  0E00               	movlw	0
 11155  000516  0100               	movlb	0	; () banked
 11156  000518  6FC2               	movwf	(printf@prec+1)& (0+255),b
 11157  00051A  0E06               	movlw	6
 11158  00051C  6FC1               	movwf	printf@prec& (0+255),b
 11159  00051E                     l8763:
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 11163  00051E  C0B2  FFD9         	movff	printf@ap,fsr2l
 11164  000522  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 11165  000526  CFDE F0BA          	movff	postinc2,printf@fval
 11166  00052A  CFDE F0BB          	movff	postinc2,printf@fval+1
 11167  00052E  CFDD F0BC          	movff	postdec2,printf@fval+2
 11168                           
 11169                           ; BSR set to: 0
 11170  000532  0E03               	movlw	3
 11171  000534  0100               	movlb	0	; () banked
 11172  000536  27B2               	addwf	printf@ap& (0+255),f,b
 11173  000538  0E00               	movlw	0
 11174  00053A  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 11175                           
 11176                           ; BSR set to: 0
 11177                           ;doprnt.c: 831: if(fval < 0.0) {
 11178  00053C  0100               	movlb	0	; () banked
 11179  00053E  AFBC               	btfss	(printf@fval+2)& (0+255),7,b
 11180  000540  D011               	goto	l8773
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;doprnt.c: 832: fval = -fval;
 11184  000542  C0BA  F01B         	movff	printf@fval,___ftneg@f1
 11185  000546  C0BB  F01C         	movff	printf@fval+1,___ftneg@f1+1
 11186  00054A  C0BC  F01D         	movff	printf@fval+2,___ftneg@f1+2
 11187  00054E  EC00  F02C         	call	___ftneg	;wreg free
 11188  000552  C01B  F0BA         	movff	?___ftneg,printf@fval
 11189  000556  C01C  F0BB         	movff	?___ftneg+1,printf@fval+1
 11190  00055A  C01D  F0BC         	movff	?___ftneg+2,printf@fval+2
 11191                           
 11192                           ;doprnt.c: 833: flag |= 0x03;
 11193  00055E  0E03               	movlw	3
 11194  000560  0100               	movlb	0	; () banked
 11195  000562  13C6               	iorwf	printf@flag& (0+255),f,b
 11196  000564                     l8773:
 11197                           
 11198                           ; BSR set to: 0
 11199                           ;doprnt.c: 834: }
 11200                           ;doprnt.c: 835: exp = 0;
 11201  000564  0E00               	movlw	0
 11202  000566  0100               	movlb	0	; () banked
 11203  000568  6FB9               	movwf	(printf@exp+1)& (0+255),b
 11204  00056A  0E00               	movlw	0
 11205  00056C  6FB8               	movwf	printf@exp& (0+255),b
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;doprnt.c: 836: if( fval!=0) {
 11209  00056E  0100               	movlb	0	; () banked
 11210  000570  51BA               	movf	printf@fval& (0+255),w,b
 11211  000572  0100               	movlb	0	; () banked
 11212  000574  11BB               	iorwf	(printf@fval+1)& (0+255),w,b
 11213  000576  0100               	movlb	0	; () banked
 11214  000578  11BC               	iorwf	(printf@fval+2)& (0+255),w,b
 11215  00057A  B4D8               	btfsc	status,2,c
 11216  00057C  D09A               	goto	l8801
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 11220  00057E  0E82               	movlw	130
 11221  000580  0100               	movlb	0	; () banked
 11222  000582  6F9A               	movwf	??_printf& (0+255),b
 11223  000584  0EFF               	movlw	255
 11224  000586  0100               	movlb	0	; () banked
 11225  000588  6F9B               	movwf	(??_printf+1)& (0+255),b
 11226  00058A  C0BA  F09C         	movff	printf@fval,??_printf+2
 11227  00058E  C0BB  F09D         	movff	printf@fval+1,??_printf+3
 11228  000592  C0BC  F09E         	movff	printf@fval+2,??_printf+4
 11229  000596  C0BD  F09F         	movff	printf@fval+3,??_printf+5
 11230  00059A  0E10               	movlw	16
 11231  00059C  D006               	goto	u9730
 11232  00059E                     u9735:
 11233  00059E  0100               	movlb	0	; () banked
 11234  0005A0  90D8               	bcf	status,0,c
 11235  0005A2  339F               	rrcf	(??_printf+5)& (0+255),f,b
 11236  0005A4  339E               	rrcf	(??_printf+4)& (0+255),f,b
 11237  0005A6  339D               	rrcf	(??_printf+3)& (0+255),f,b
 11238  0005A8  339C               	rrcf	(??_printf+2)& (0+255),f,b
 11239  0005AA                     u9730:
 11240  0005AA  2EE8               	decfsz	wreg,f,c
 11241  0005AC  D7F8               	goto	u9735
 11242  0005AE  0100               	movlb	0	; () banked
 11243  0005B0  519C               	movf	(??_printf+2)& (0+255),w,b
 11244  0005B2  0100               	movlb	0	; () banked
 11245  0005B4  259A               	addwf	??_printf& (0+255),w,b
 11246  0005B6  0100               	movlb	0	; () banked
 11247  0005B8  6FB8               	movwf	printf@exp& (0+255),b
 11248  0005BA  0E00               	movlw	0
 11249  0005BC  0100               	movlb	0	; () banked
 11250  0005BE  219B               	addwfc	(??_printf+1)& (0+255),w,b
 11251  0005C0  0100               	movlb	0	; () banked
 11252  0005C2  6FB9               	movwf	(printf@exp+1)& (0+255),b
 11253                           
 11254                           ; BSR set to: 0
 11255                           ;doprnt.c: 838: exp--;
 11256  0005C4  0100               	movlb	0	; () banked
 11257  0005C6  07B8               	decf	printf@exp& (0+255),f,b
 11258  0005C8  A0D8               	btfss	status,0,c
 11259  0005CA  07B9               	decf	(printf@exp+1)& (0+255),f,b
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;doprnt.c: 839: exp *= 3;
 11263  0005CC  C0B8  F060         	movff	printf@exp,___wmul@multiplier
 11264  0005D0  C0B9  F061         	movff	printf@exp+1,___wmul@multiplier+1
 11265  0005D4  0E00               	movlw	0
 11266  0005D6  0100               	movlb	0	; () banked
 11267  0005D8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11268  0005DA  0E03               	movlw	3
 11269  0005DC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11270  0005DE  EC61  F02B         	call	___wmul	;wreg free
 11271  0005E2  C060  F0B8         	movff	?___wmul,printf@exp
 11272  0005E6  C061  F0B9         	movff	?___wmul+1,printf@exp+1
 11273                           
 11274                           ;doprnt.c: 840: exp /= 10;
 11275  0005EA  C0B8  F021         	movff	printf@exp,___awdiv@dividend
 11276  0005EE  C0B9  F022         	movff	printf@exp+1,___awdiv@dividend+1
 11277  0005F2  0E00               	movlw	0
 11278  0005F4  6E24               	movwf	___awdiv@divisor+1,c
 11279  0005F6  0E0A               	movlw	10
 11280  0005F8  6E23               	movwf	___awdiv@divisor,c
 11281  0005FA  EC93  F028         	call	___awdiv	;wreg free
 11282  0005FE  C021  F0B8         	movff	?___awdiv,printf@exp
 11283  000602  C022  F0B9         	movff	?___awdiv+1,printf@exp+1
 11284                           
 11285                           ;doprnt.c: 841: if(exp < 0)
 11286  000606  0100               	movlb	0	; () banked
 11287  000608  AFB9               	btfss	(printf@exp+1)& (0+255),7,b
 11288  00060A  D004               	goto	l8789
 11289                           
 11290                           ; BSR set to: 0
 11291                           ;doprnt.c: 842: exp--;
 11292  00060C  0100               	movlb	0	; () banked
 11293  00060E  07B8               	decf	printf@exp& (0+255),f,b
 11294  000610  A0D8               	btfss	status,0,c
 11295  000612  07B9               	decf	(printf@exp+1)& (0+255),f,b
 11296  000614                     l8789:
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 11300  000614  0100               	movlb	0	; () banked
 11301  000616  51B8               	movf	printf@exp& (0+255),w,b
 11302  000618  0800               	sublw	0
 11303  00061A  EC01  F017         	call	_scale
 11304  00061E  C073  F0B4         	movff	?_scale,printf@tmpval
 11305  000622  C074  F0B5         	movff	?_scale+1,printf@tmpval+1
 11306  000626  C075  F0B6         	movff	?_scale+2,printf@tmpval+2
 11307                           
 11308                           ;doprnt.c: 847: tmpval.integ *= fval;
 11309  00062A  C0B4  F064         	movff	printf@tmpval,___ftmul@f1
 11310  00062E  C0B5  F065         	movff	printf@tmpval+1,___ftmul@f1+1
 11311  000632  C0B6  F066         	movff	printf@tmpval+2,___ftmul@f1+2
 11312  000636  C0BA  F067         	movff	printf@fval,___ftmul@f2
 11313  00063A  C0BB  F068         	movff	printf@fval+1,___ftmul@f2+1
 11314  00063E  C0BC  F069         	movff	printf@fval+2,___ftmul@f2+2
 11315  000642  ECCF  F01D         	call	___ftmul	;wreg free
 11316  000646  C064  F0B4         	movff	?___ftmul,printf@tmpval
 11317  00064A  C065  F0B5         	movff	?___ftmul+1,printf@tmpval+1
 11318  00064E  C066  F0B6         	movff	?___ftmul+2,printf@tmpval+2
 11319                           
 11320                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 11321  000652  C0B4  F062         	movff	printf@tmpval,___ftge@ff1
 11322  000656  C0B5  F063         	movff	printf@tmpval+1,___ftge@ff1+1
 11323  00065A  C0B6  F064         	movff	printf@tmpval+2,___ftge@ff1+2
 11324  00065E  0E00               	movlw	0
 11325  000660  0100               	movlb	0	; () banked
 11326  000662  6F65               	movwf	___ftge@ff2& (0+255),b
 11327  000664  0E80               	movlw	128
 11328  000666  0100               	movlb	0	; () banked
 11329  000668  6F66               	movwf	(___ftge@ff2+1)& (0+255),b
 11330  00066A  0E3F               	movlw	63
 11331  00066C  0100               	movlb	0	; () banked
 11332  00066E  6F67               	movwf	(___ftge@ff2+2)& (0+255),b
 11333  000670  ECE3  F023         	call	___ftge	;wreg free
 11334  000674  0100               	movlb	0	; () banked
 11335  000676  B0D8               	btfsc	status,0,c
 11336  000678  D005               	goto	l8797
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;doprnt.c: 849: exp--;
 11340  00067A  0100               	movlb	0	; () banked
 11341  00067C  07B8               	decf	printf@exp& (0+255),f,b
 11342  00067E  A0D8               	btfss	status,0,c
 11343  000680  07B9               	decf	(printf@exp+1)& (0+255),f,b
 11344  000682  D017               	goto	l8801
 11345  000684                     l8797:
 11346                           
 11347                           ; BSR set to: 0
 11348                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 11349  000684  C0B4  F062         	movff	printf@tmpval,___ftge@ff1
 11350  000688  C0B5  F063         	movff	printf@tmpval+1,___ftge@ff1+1
 11351  00068C  C0B6  F064         	movff	printf@tmpval+2,___ftge@ff1+2
 11352  000690  0E00               	movlw	0
 11353  000692  0100               	movlb	0	; () banked
 11354  000694  6F65               	movwf	___ftge@ff2& (0+255),b
 11355  000696  0E20               	movlw	32
 11356  000698  0100               	movlb	0	; () banked
 11357  00069A  6F66               	movwf	(___ftge@ff2+1)& (0+255),b
 11358  00069C  0E41               	movlw	65
 11359  00069E  0100               	movlb	0	; () banked
 11360  0006A0  6F67               	movwf	(___ftge@ff2+2)& (0+255),b
 11361  0006A2  ECE3  F023         	call	___ftge	;wreg free
 11362  0006A6  0100               	movlb	0	; () banked
 11363  0006A8  A0D8               	btfss	status,0,c
 11364  0006AA  D003               	goto	l8801
 11365                           
 11366                           ; BSR set to: 0
 11367                           ;doprnt.c: 851: exp++;
 11368  0006AC  0100               	movlb	0	; () banked
 11369  0006AE  4BB8               	infsnz	printf@exp& (0+255),f,b
 11370  0006B0  2BB9               	incf	(printf@exp+1)& (0+255),f,b
 11371  0006B2                     l8801:
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;doprnt.c: 852: }
 11375                           ;doprnt.c: 1112: if(prec <= 12)
 11376  0006B2  0100               	movlb	0	; () banked
 11377  0006B4  BFC2               	btfsc	(printf@prec+1)& (0+255),7,b
 11378  0006B6  D008               	goto	l8803
 11379  0006B8  0100               	movlb	0	; () banked
 11380  0006BA  51C2               	movf	(printf@prec+1)& (0+255),w,b
 11381  0006BC  E11D               	bnz	l8805
 11382  0006BE  0E0D               	movlw	13
 11383  0006C0  0100               	movlb	0	; () banked
 11384  0006C2  5DC1               	subwf	printf@prec& (0+255),w,b
 11385  0006C4  B0D8               	btfsc	status,0,c
 11386  0006C6  D018               	goto	l8805
 11387  0006C8                     l8803:
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;doprnt.c: 1113: fval += fround(prec);
 11391  0006C8  C0BA  F07D         	movff	printf@fval,___ftadd@f1
 11392  0006CC  C0BB  F07E         	movff	printf@fval+1,___ftadd@f1+1
 11393  0006D0  C0BC  F07F         	movff	printf@fval+2,___ftadd@f1+2
 11394  0006D4  0100               	movlb	0	; () banked
 11395  0006D6  51C1               	movf	printf@prec& (0+255),w,b
 11396  0006D8  EC36  F019         	call	_fround
 11397  0006DC  C073  F080         	movff	?_fround,___ftadd@f2
 11398  0006E0  C074  F081         	movff	?_fround+1,___ftadd@f2+1
 11399  0006E4  C075  F082         	movff	?_fround+2,___ftadd@f2+2
 11400  0006E8  ECBC  F01B         	call	___ftadd	;wreg free
 11401  0006EC  C07D  F0BA         	movff	?___ftadd,printf@fval
 11402  0006F0  C07E  F0BB         	movff	?___ftadd+1,printf@fval+1
 11403  0006F4  C07F  F0BC         	movff	?___ftadd+2,printf@fval+2
 11404  0006F8                     l8805:
 11405                           
 11406                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 11407  0006F8  0100               	movlb	0	; () banked
 11408  0006FA  BFB9               	btfsc	(printf@exp+1)& (0+255),7,b
 11409  0006FC  D008               	goto	l8807
 11410  0006FE  0100               	movlb	0	; () banked
 11411  000700  51B9               	movf	(printf@exp+1)& (0+255),w,b
 11412  000702  E12A               	bnz	l8813
 11413  000704  0E0A               	movlw	10
 11414  000706  0100               	movlb	0	; () banked
 11415  000708  5DB8               	subwf	printf@exp& (0+255),w,b
 11416  00070A  B0D8               	btfsc	status,0,c
 11417  00070C  D025               	goto	l8813
 11418  00070E                     l8807:
 11419                           
 11420                           ; BSR set to: 0
 11421  00070E  0100               	movlb	0	; () banked
 11422  000710  51BA               	movf	printf@fval& (0+255),w,b
 11423  000712  0100               	movlb	0	; () banked
 11424  000714  11BB               	iorwf	(printf@fval+1)& (0+255),w,b
 11425  000716  0100               	movlb	0	; () banked
 11426  000718  11BC               	iorwf	(printf@fval+2)& (0+255),w,b
 11427  00071A  B4D8               	btfsc	status,2,c
 11428  00071C  D063               	goto	l8827
 11429                           
 11430                           ; BSR set to: 0
 11431  00071E  C0BA  F07A         	movff	printf@fval,___fttol@f1
 11432  000722  C0BB  F07B         	movff	printf@fval+1,___fttol@f1+1
 11433  000726  C0BC  F07C         	movff	printf@fval+2,___fttol@f1+2
 11434  00072A  EC24  F01F         	call	___fttol	;wreg free
 11435  00072E  0100               	movlb	0	; () banked
 11436  000730  517A               	movf	?___fttol& (0+255),w,b
 11437  000732  0100               	movlb	0	; () banked
 11438  000734  117B               	iorwf	(?___fttol+1)& (0+255),w,b
 11439  000736  0100               	movlb	0	; () banked
 11440  000738  117C               	iorwf	(?___fttol+2)& (0+255),w,b
 11441  00073A  0100               	movlb	0	; () banked
 11442  00073C  117D               	iorwf	(?___fttol+3)& (0+255),w,b
 11443  00073E  A4D8               	btfss	status,2,c
 11444  000740  D051               	goto	l8827
 11445                           
 11446                           ; BSR set to: 0
 11447  000742  0100               	movlb	0	; () banked
 11448  000744  BFB9               	btfsc	(printf@exp+1)& (0+255),7,b
 11449  000746  D04E               	goto	l8827
 11450  000748  0100               	movlb	0	; () banked
 11451  00074A  51B9               	movf	(printf@exp+1)& (0+255),w,b
 11452  00074C  E105               	bnz	l8813
 11453  00074E  0E02               	movlw	2
 11454  000750  0100               	movlb	0	; () banked
 11455  000752  5DB8               	subwf	printf@exp& (0+255),w,b
 11456  000754  A0D8               	btfss	status,0,c
 11457  000756  D046               	goto	l8827
 11458  000758                     l8813:
 11459                           
 11460                           ; BSR set to: 0
 11461                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 11462  000758  C0B4  F062         	movff	printf@tmpval,___ftge@ff1
 11463  00075C  C0B5  F063         	movff	printf@tmpval+1,___ftge@ff1+1
 11464  000760  C0B6  F064         	movff	printf@tmpval+2,___ftge@ff1+2
 11465  000764  0E70               	movlw	112
 11466  000766  0100               	movlb	0	; () banked
 11467  000768  6F65               	movwf	___ftge@ff2& (0+255),b
 11468  00076A  0E89               	movlw	137
 11469  00076C  0100               	movlb	0	; () banked
 11470  00076E  6F66               	movwf	(___ftge@ff2+1)& (0+255),b
 11471  000770  0E40               	movlw	64
 11472  000772  0100               	movlb	0	; () banked
 11473  000774  6F67               	movwf	(___ftge@ff2+2)& (0+255),b
 11474  000776  ECE3  F023         	call	___ftge	;wreg free
 11475  00077A  0100               	movlb	0	; () banked
 11476  00077C  B0D8               	btfsc	status,0,c
 11477  00077E  D003               	goto	l8817
 11478                           
 11479                           ; BSR set to: 0
 11480                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 11481  000780  0100               	movlb	0	; () banked
 11482  000782  0EF7               	movlw	247
 11483  000784  D002               	goto	L6
 11484  000786                     l8817:
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 11488  000786  0100               	movlb	0	; () banked
 11489  000788  0EF8               	movlw	248
 11490  00078A                     L6:
 11491  00078A  27B8               	addwf	printf@exp& (0+255),f,b
 11492  00078C  0EFF               	movlw	255
 11493  00078E  23B9               	addwfc	(printf@exp+1)& (0+255),f,b
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;doprnt.c: 1124: }
 11497                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 11498                           
 11499                           ; BSR set to: 0
 11500  000790  0100               	movlb	0	; () banked
 11501  000792  51B8               	movf	printf@exp& (0+255),w,b
 11502  000794  EC01  F017         	call	_scale
 11503  000798  C073  F0B4         	movff	?_scale,printf@tmpval
 11504  00079C  C074  F0B5         	movff	?_scale+1,printf@tmpval+1
 11505  0007A0  C075  F0B6         	movff	?_scale+2,printf@tmpval+2
 11506                           
 11507                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 11508  0007A4  C0BA  F01B         	movff	printf@fval,__tdiv_to_l_@f1
 11509  0007A8  C0BB  F01C         	movff	printf@fval+1,__tdiv_to_l_@f1+1
 11510  0007AC  C0BC  F01D         	movff	printf@fval+2,__tdiv_to_l_@f1+2
 11511  0007B0  C0B4  F01E         	movff	printf@tmpval,__tdiv_to_l_@f2
 11512  0007B4  C0B5  F01F         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
 11513  0007B8  C0B6  F020         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
 11514  0007BC  ECC6  F01F         	call	__tdiv_to_l_	;wreg free
 11515  0007C0  C01B  F0BD         	movff	?__tdiv_to_l_,printf@val
 11516  0007C4  C01C  F0BE         	movff	?__tdiv_to_l_+1,printf@val+1
 11517  0007C8  C01D  F0BF         	movff	?__tdiv_to_l_+2,printf@val+2
 11518  0007CC  C01E  F0C0         	movff	?__tdiv_to_l_+3,printf@val+3
 11519                           
 11520                           ;doprnt.c: 1129: fval = 0.0;
 11521  0007D0  0E00               	movlw	0
 11522  0007D2  0100               	movlb	0	; () banked
 11523  0007D4  6FBA               	movwf	printf@fval& (0+255),b
 11524  0007D6  0E00               	movlw	0
 11525  0007D8  0100               	movlb	0	; () banked
 11526  0007DA  6FBB               	movwf	(printf@fval+1)& (0+255),b
 11527  0007DC  0E00               	movlw	0
 11528  0007DE  0100               	movlb	0	; () banked
 11529  0007E0  6FBC               	movwf	(printf@fval+2)& (0+255),b
 11530                           
 11531                           ;doprnt.c: 1130: } else {
 11532  0007E2  D033               	goto	l8831
 11533  0007E4                     l8827:
 11534                           
 11535                           ; BSR set to: 0
 11536                           ;doprnt.c: 1131: val = (unsigned long)fval;
 11537  0007E4  C0BA  F07A         	movff	printf@fval,___fttol@f1
 11538  0007E8  C0BB  F07B         	movff	printf@fval+1,___fttol@f1+1
 11539  0007EC  C0BC  F07C         	movff	printf@fval+2,___fttol@f1+2
 11540  0007F0  EC24  F01F         	call	___fttol	;wreg free
 11541  0007F4  C07A  F0BD         	movff	?___fttol,printf@val
 11542  0007F8  C07B  F0BE         	movff	?___fttol+1,printf@val+1
 11543  0007FC  C07C  F0BF         	movff	?___fttol+2,printf@val+2
 11544  000800  C07D  F0C0         	movff	?___fttol+3,printf@val+3
 11545                           
 11546                           ;doprnt.c: 1132: fval -= (double)val;
 11547  000804  C0BA  F089         	movff	printf@fval,___ftsub@f1
 11548  000808  C0BB  F08A         	movff	printf@fval+1,___ftsub@f1+1
 11549  00080C  C0BC  F08B         	movff	printf@fval+2,___ftsub@f1+2
 11550  000810  C0BD  F023         	movff	printf@val,___lltoft@c
 11551  000814  C0BE  F024         	movff	printf@val+1,___lltoft@c+1
 11552  000818  C0BF  F025         	movff	printf@val+2,___lltoft@c+2
 11553  00081C  C0C0  F026         	movff	printf@val+3,___lltoft@c+3
 11554  000820  ECC0  F029         	call	___lltoft	;wreg free
 11555  000824  C023  F08C         	movff	?___lltoft,___ftsub@f2
 11556  000828  C024  F08D         	movff	?___lltoft+1,___ftsub@f2+1
 11557  00082C  C025  F08E         	movff	?___lltoft+2,___ftsub@f2+2
 11558  000830  EC64  F02A         	call	___ftsub	;wreg free
 11559  000834  C089  F0BA         	movff	?___ftsub,printf@fval
 11560  000838  C08A  F0BB         	movff	?___ftsub+1,printf@fval+1
 11561  00083C  C08B  F0BC         	movff	?___ftsub+2,printf@fval+2
 11562                           
 11563                           ;doprnt.c: 1133: exp = 0;
 11564  000840  0E00               	movlw	0
 11565  000842  0100               	movlb	0	; () banked
 11566  000844  6FB9               	movwf	(printf@exp+1)& (0+255),b
 11567  000846  0E00               	movlw	0
 11568  000848  6FB8               	movwf	printf@exp& (0+255),b
 11569  00084A                     l8831:
 11570                           
 11571                           ; BSR set to: 0
 11572                           ;doprnt.c: 1134: }
 11573                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 11574  00084A  0E01               	movlw	1
 11575  00084C  0100               	movlb	0	; () banked
 11576  00084E  6FC5               	movwf	printf@c& (0+255),b
 11577  000850                     l8833:
 11578                           
 11579                           ; BSR set to: 0
 11580  000850  0E0A               	movlw	10
 11581  000852  0100               	movlb	0	; () banked
 11582  000854  19C5               	xorwf	printf@c& (0+255),w,b
 11583  000856  B4D8               	btfsc	status,2,c
 11584  000858  D01E               	goto	l8845
 11585                           
 11586                           ; BSR set to: 0
 11587                           ;doprnt.c: 1137: if(val < dpowers[c])
 11588                           
 11589                           ; BSR set to: 0
 11590                           
 11591                           ; BSR set to: 0
 11592  00085A  0100               	movlb	0	; () banked
 11593  00085C  51C5               	movf	printf@c& (0+255),w,b
 11594  00085E  0D04               	mullw	4
 11595  000860  0EA9               	movlw	low _dpowers
 11596  000862  24F3               	addwf	prodl,w,c
 11597  000864  6EF6               	movwf	tblptrl,c
 11598  000866  0E78               	movlw	high _dpowers
 11599  000868  20F4               	addwfc	prodh,w,c
 11600  00086A  6EF7               	movwf	tblptrh,c
 11601  00086C                     	if	0	;There are less than 3 active tblptr bytes
 11602  00086C                     	endif
 11603  00086C  0009               	tblrd		*+
 11604  00086E  50F5               	movf	tablat,w,c
 11605  000870  0100               	movlb	0	; () banked
 11606  000872  5DBD               	subwf	printf@val& (0+255),w,b
 11607  000874  0009               	tblrd		*+
 11608  000876  50F5               	movf	tablat,w,c
 11609  000878  0100               	movlb	0	; () banked
 11610  00087A  59BE               	subwfb	(printf@val+1)& (0+255),w,b
 11611  00087C  0009               	tblrd		*+
 11612  00087E  50F5               	movf	tablat,w,c
 11613  000880  0100               	movlb	0	; () banked
 11614  000882  59BF               	subwfb	(printf@val+2)& (0+255),w,b
 11615  000884  0009               	tblrd		*+
 11616  000886  50F5               	movf	tablat,w,c
 11617  000888  0100               	movlb	0	; () banked
 11618  00088A  59C0               	subwfb	(printf@val+3)& (0+255),w,b
 11619  00088C  A0D8               	btfss	status,0,c
 11620  00088E  D003               	goto	l8845
 11621                           
 11622                           ; BSR set to: 0
 11623                           
 11624                           ; BSR set to: 0
 11625                           
 11626                           ; BSR set to: 0
 11627                           ;doprnt.c: 1138: break;
 11628  000890  0100               	movlb	0	; () banked
 11629  000892  2BC5               	incf	printf@c& (0+255),f,b
 11630  000894  D7DD               	goto	l8833
 11631  000896                     l8845:
 11632                           
 11633                           ; BSR set to: 0
 11634                           ;doprnt.c: 1142: width -= prec + c + exp;
 11635  000896  C0C5  F09A         	movff	printf@c,??_printf
 11636  00089A  0100               	movlb	0	; () banked
 11637  00089C  6B9B               	clrf	(??_printf+1)& (0+255),b
 11638  00089E  BF9A               	btfsc	??_printf& (0+255),7,b
 11639  0008A0  079B               	decf	(??_printf+1)& (0+255),f,b
 11640  0008A2  0100               	movlb	0	; () banked
 11641  0008A4  51C1               	movf	printf@prec& (0+255),w,b
 11642  0008A6  0100               	movlb	0	; () banked
 11643  0008A8  279A               	addwf	??_printf& (0+255),f,b
 11644  0008AA  0100               	movlb	0	; () banked
 11645  0008AC  51C2               	movf	(printf@prec+1)& (0+255),w,b
 11646  0008AE  0100               	movlb	0	; () banked
 11647  0008B0  239B               	addwfc	(??_printf+1)& (0+255),f,b
 11648  0008B2  0100               	movlb	0	; () banked
 11649  0008B4  51B8               	movf	printf@exp& (0+255),w,b
 11650  0008B6  0100               	movlb	0	; () banked
 11651  0008B8  279A               	addwf	??_printf& (0+255),f,b
 11652  0008BA  0100               	movlb	0	; () banked
 11653  0008BC  51B9               	movf	(printf@exp+1)& (0+255),w,b
 11654  0008BE  0100               	movlb	0	; () banked
 11655  0008C0  239B               	addwfc	(??_printf+1)& (0+255),f,b
 11656  0008C2  0100               	movlb	0	; () banked
 11657  0008C4  519A               	movf	??_printf& (0+255),w,b
 11658  0008C6  0100               	movlb	0	; () banked
 11659  0008C8  5FC3               	subwf	printf@width& (0+255),f,b
 11660  0008CA  0100               	movlb	0	; () banked
 11661  0008CC  519B               	movf	(??_printf+1)& (0+255),w,b
 11662  0008CE  0100               	movlb	0	; () banked
 11663  0008D0  5BC4               	subwfb	(printf@width+1)& (0+255),f,b
 11664                           
 11665                           ; BSR set to: 0
 11666                           ;doprnt.c: 1143: if(
 11667                           ;doprnt.c: 1145: flag & 0x800 ||
 11668                           ;doprnt.c: 1147: prec)
 11669  0008D2  0100               	movlb	0	; () banked
 11670  0008D4  B7C7               	btfsc	(printf@flag+1)& (0+255),3,b
 11671  0008D6  D006               	goto	l8851
 11672                           
 11673                           ; BSR set to: 0
 11674  0008D8  0100               	movlb	0	; () banked
 11675  0008DA  51C1               	movf	printf@prec& (0+255),w,b
 11676  0008DC  0100               	movlb	0	; () banked
 11677  0008DE  11C2               	iorwf	(printf@prec+1)& (0+255),w,b
 11678  0008E0  B4D8               	btfsc	status,2,c
 11679  0008E2  D004               	goto	l8853
 11680  0008E4                     l8851:
 11681                           
 11682                           ; BSR set to: 0
 11683                           ;doprnt.c: 1148: width--;
 11684  0008E4  0100               	movlb	0	; () banked
 11685  0008E6  07C3               	decf	printf@width& (0+255),f,b
 11686  0008E8  A0D8               	btfss	status,0,c
 11687  0008EA  07C4               	decf	(printf@width+1)& (0+255),f,b
 11688  0008EC                     l8853:
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;doprnt.c: 1149: if(flag & 0x03)
 11692  0008EC  0E03               	movlw	3
 11693  0008EE  0100               	movlb	0	; () banked
 11694  0008F0  15C6               	andwf	printf@flag& (0+255),w,b
 11695  0008F2  0100               	movlb	0	; () banked
 11696  0008F4  6F9A               	movwf	??_printf& (0+255),b
 11697  0008F6  0E00               	movlw	0
 11698  0008F8  0100               	movlb	0	; () banked
 11699  0008FA  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 11700  0008FC  0100               	movlb	0	; () banked
 11701  0008FE  6F9B               	movwf	(??_printf+1)& (0+255),b
 11702  000900  0100               	movlb	0	; () banked
 11703  000902  519A               	movf	??_printf& (0+255),w,b
 11704  000904  0100               	movlb	0	; () banked
 11705  000906  119B               	iorwf	(??_printf+1)& (0+255),w,b
 11706  000908  B4D8               	btfsc	status,2,c
 11707  00090A  D004               	goto	l8857
 11708                           
 11709                           ; BSR set to: 0
 11710                           ;doprnt.c: 1150: width--;
 11711  00090C  0100               	movlb	0	; () banked
 11712  00090E  07C3               	decf	printf@width& (0+255),f,b
 11713  000910  A0D8               	btfss	status,0,c
 11714  000912  07C4               	decf	(printf@width+1)& (0+255),f,b
 11715  000914                     l8857:
 11716                           
 11717                           ; BSR set to: 0
 11718                           ;doprnt.c: 1153: if(flag & 0x04) {
 11719  000914  0100               	movlb	0	; () banked
 11720  000916  A5C6               	btfss	printf@flag& (0+255),2,b
 11721  000918  D03A               	goto	l1393
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;doprnt.c: 1157: if(flag & 0x03)
 11725  00091A  0E03               	movlw	3
 11726  00091C  0100               	movlb	0	; () banked
 11727  00091E  15C6               	andwf	printf@flag& (0+255),w,b
 11728  000920  0100               	movlb	0	; () banked
 11729  000922  6F9A               	movwf	??_printf& (0+255),b
 11730  000924  0E00               	movlw	0
 11731  000926  0100               	movlb	0	; () banked
 11732  000928  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 11733  00092A  0100               	movlb	0	; () banked
 11734  00092C  6F9B               	movwf	(??_printf+1)& (0+255),b
 11735  00092E  0100               	movlb	0	; () banked
 11736  000930  519A               	movf	??_printf& (0+255),w,b
 11737  000932  0100               	movlb	0	; () banked
 11738  000934  119B               	iorwf	(??_printf+1)& (0+255),w,b
 11739  000936  B4D8               	btfsc	status,2,c
 11740  000938  D011               	goto	l8869
 11741                           
 11742                           ; BSR set to: 0
 11743                           ;doprnt.c: 1159: (putch(flag & 0x01 ? '-' : '+') );
 11744  00093A  0100               	movlb	0	; () banked
 11745  00093C  B1C6               	btfsc	printf@flag& (0+255),0,b
 11746  00093E  D005               	goto	l8865
 11747                           
 11748                           ; BSR set to: 0
 11749  000940  0E00               	movlw	0
 11750  000942  0100               	movlb	0	; () banked
 11751  000944  6FA5               	movwf	(_printf$2718+1)& (0+255),b
 11752  000946  0E2B               	movlw	43
 11753  000948  D004               	goto	L7
 11754  00094A                     l8865:
 11755                           
 11756                           ; BSR set to: 0
 11757  00094A  0E00               	movlw	0
 11758  00094C  0100               	movlb	0	; () banked
 11759  00094E  6FA5               	movwf	(_printf$2718+1)& (0+255),b
 11760  000950  0E2D               	movlw	45
 11761  000952                     L7:
 11762  000952  6FA4               	movwf	_printf$2718& (0+255),b
 11763                           
 11764                           ; BSR set to: 0
 11765                           
 11766                           ; BSR set to: 0
 11767  000954  0100               	movlb	0	; () banked
 11768  000956  51A4               	movf	_printf$2718& (0+255),w,b
 11769  000958  EC9A  F02C         	call	_putch
 11770  00095C                     l8869:
 11771                           
 11772                           ;doprnt.c: 1164: if(flag & 0x01)
 11773  00095C  0100               	movlb	0	; () banked
 11774  00095E  A1C6               	btfss	printf@flag& (0+255),0,b
 11775  000960  D00B               	goto	l8877
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;doprnt.c: 1165: (putch(' ') );
 11779  000962  0E20               	movlw	32
 11780  000964  EC9A  F02C         	call	_putch
 11781                           
 11782                           ;doprnt.c: 1168: while(width > 0) {
 11783  000968  D007               	goto	l8877
 11784  00096A                     l8873:
 11785                           
 11786                           ;doprnt.c: 1169: (putch('0') );
 11787  00096A  0E30               	movlw	48
 11788  00096C  EC9A  F02C         	call	_putch
 11789                           
 11790                           ;doprnt.c: 1170: width--;
 11791  000970  0100               	movlb	0	; () banked
 11792  000972  07C3               	decf	printf@width& (0+255),f,b
 11793  000974  A0D8               	btfss	status,0,c
 11794  000976  07C4               	decf	(printf@width+1)& (0+255),f,b
 11795  000978                     l8877:
 11796  000978  0100               	movlb	0	; () banked
 11797  00097A  BFC4               	btfsc	(printf@width+1)& (0+255),7,b
 11798  00097C  D08D               	goto	l8905
 11799  00097E  0100               	movlb	0	; () banked
 11800  000980  51C4               	movf	(printf@width+1)& (0+255),w,b
 11801  000982  E1F3               	bnz	l8873
 11802  000984  0100               	movlb	0	; () banked
 11803  000986  05C3               	decf	printf@width& (0+255),w,b
 11804  000988  A0D8               	btfss	status,0,c
 11805  00098A  D086               	goto	l8905
 11806  00098C  D7EE               	goto	l8873
 11807  00098E                     l1393:
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;doprnt.c: 1175: {
 11811                           ;doprnt.c: 1177: if(!(flag & 0x08))
 11812  00098E  0100               	movlb	0	; () banked
 11813  000990  A7C6               	btfss	printf@flag& (0+255),3,b
 11814  000992  D008               	goto	l8885
 11815  000994  D011               	goto	l8887
 11816  000996                     l8881:
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;doprnt.c: 1181: (putch(' ') );
 11820  000996  0E20               	movlw	32
 11821  000998  EC9A  F02C         	call	_putch
 11822                           
 11823                           ;doprnt.c: 1182: width--;
 11824  00099C  0100               	movlb	0	; () banked
 11825  00099E  07C3               	decf	printf@width& (0+255),f,b
 11826  0009A0  A0D8               	btfss	status,0,c
 11827  0009A2  07C4               	decf	(printf@width+1)& (0+255),f,b
 11828  0009A4                     l8885:
 11829                           
 11830                           ; BSR set to: 0
 11831  0009A4  0100               	movlb	0	; () banked
 11832  0009A6  BFC4               	btfsc	(printf@width+1)& (0+255),7,b
 11833  0009A8  D007               	goto	l8887
 11834  0009AA  0100               	movlb	0	; () banked
 11835  0009AC  51C4               	movf	(printf@width+1)& (0+255),w,b
 11836  0009AE  E1F3               	bnz	l8881
 11837  0009B0  0100               	movlb	0	; () banked
 11838  0009B2  05C3               	decf	printf@width& (0+255),w,b
 11839  0009B4  B0D8               	btfsc	status,0,c
 11840  0009B6  D7EF               	goto	l8881
 11841  0009B8                     l8887:
 11842                           
 11843                           ; BSR set to: 0
 11844                           ;doprnt.c: 1183: }
 11845                           ;doprnt.c: 1188: if(flag & 0x03)
 11846  0009B8  0E03               	movlw	3
 11847  0009BA  0100               	movlb	0	; () banked
 11848  0009BC  15C6               	andwf	printf@flag& (0+255),w,b
 11849  0009BE  0100               	movlb	0	; () banked
 11850  0009C0  6F9A               	movwf	??_printf& (0+255),b
 11851  0009C2  0E00               	movlw	0
 11852  0009C4  0100               	movlb	0	; () banked
 11853  0009C6  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 11854  0009C8  0100               	movlb	0	; () banked
 11855  0009CA  6F9B               	movwf	(??_printf+1)& (0+255),b
 11856  0009CC  0100               	movlb	0	; () banked
 11857  0009CE  519A               	movf	??_printf& (0+255),w,b
 11858  0009D0  0100               	movlb	0	; () banked
 11859  0009D2  119B               	iorwf	(??_printf+1)& (0+255),w,b
 11860  0009D4  B4D8               	btfsc	status,2,c
 11861  0009D6  D012               	goto	l1408
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;doprnt.c: 1190: (putch(flag & 0x01 ? '-' : '+') );
 11865  0009D8  0100               	movlb	0	; () banked
 11866  0009DA  B1C6               	btfsc	printf@flag& (0+255),0,b
 11867  0009DC  D005               	goto	l8893
 11868                           
 11869                           ; BSR set to: 0
 11870  0009DE  0E00               	movlw	0
 11871  0009E0  0100               	movlb	0	; () banked
 11872  0009E2  6FA7               	movwf	(_printf$2719+1)& (0+255),b
 11873  0009E4  0E2B               	movlw	43
 11874  0009E6  D004               	goto	L8
 11875  0009E8                     l8893:
 11876                           
 11877                           ; BSR set to: 0
 11878  0009E8  0E00               	movlw	0
 11879  0009EA  0100               	movlb	0	; () banked
 11880  0009EC  6FA7               	movwf	(_printf$2719+1)& (0+255),b
 11881  0009EE  0E2D               	movlw	45
 11882  0009F0                     L8:
 11883  0009F0  6FA6               	movwf	_printf$2719& (0+255),b
 11884                           
 11885                           ; BSR set to: 0
 11886                           
 11887                           ; BSR set to: 0
 11888  0009F2  0100               	movlb	0	; () banked
 11889  0009F4  51A6               	movf	_printf$2719& (0+255),w,b
 11890  0009F6  EC9A  F02C         	call	_putch
 11891  0009FA  D04E               	goto	l8905
 11892  0009FC                     l1408:
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;doprnt.c: 1192: else if(flag & 0x01)
 11896  0009FC  0100               	movlb	0	; () banked
 11897  0009FE  A1C6               	btfss	printf@flag& (0+255),0,b
 11898  000A00  D04B               	goto	l8905
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;doprnt.c: 1193: (putch(' ') );
 11902  000A02  0E20               	movlw	32
 11903  000A04  EC9A  F02C         	call	_putch
 11904                           
 11905                           ;doprnt.c: 1195: }
 11906                           ;doprnt.c: 1196: while(c--) {
 11907  000A08  D047               	goto	l8905
 11908  000A0A                     l8899:
 11909                           
 11910                           ;doprnt.c: 1200: {
 11911                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 11912  000A0A  C0BD  F01B         	movff	printf@val,___lldiv@dividend
 11913  000A0E  C0BE  F01C         	movff	printf@val+1,___lldiv@dividend+1
 11914  000A12  C0BF  F01D         	movff	printf@val+2,___lldiv@dividend+2
 11915  000A16  C0C0  F01E         	movff	printf@val+3,___lldiv@dividend+3
 11916  000A1A  0100               	movlb	0	; () banked
 11917  000A1C  51C5               	movf	printf@c& (0+255),w,b
 11918  000A1E  0D04               	mullw	4
 11919  000A20  0EA9               	movlw	low _dpowers
 11920  000A22  24F3               	addwf	prodl,w,c
 11921  000A24  6EF6               	movwf	tblptrl,c
 11922  000A26  0E78               	movlw	high _dpowers
 11923  000A28  20F4               	addwfc	prodh,w,c
 11924  000A2A  6EF7               	movwf	tblptrh,c
 11925  000A2C                     	if	0	;There are less than 3 active tblptr bytes
 11926  000A2C                     	endif
 11927  000A2C  0009               	tblrd		*+
 11928  000A2E  CFF5 F01F          	movff	tablat,___lldiv@divisor
 11929  000A32  0009               	tblrd		*+
 11930  000A34  CFF5 F020          	movff	tablat,___lldiv@divisor+1
 11931  000A38  0009               	tblrd		*+
 11932  000A3A  CFF5 F021          	movff	tablat,___lldiv@divisor+2
 11933  000A3E  000A               	tblrd		*-
 11934  000A40  CFF5 F022          	movff	tablat,___lldiv@divisor+3
 11935  000A44  ECD5  F028         	call	___lldiv	;wreg free
 11936  000A48  C01B  F0B4         	movff	?___lldiv,printf@tmpval
 11937  000A4C  C01C  F0B5         	movff	?___lldiv+1,printf@tmpval+1
 11938  000A50  C01D  F0B6         	movff	?___lldiv+2,printf@tmpval+2
 11939  000A54  C01E  F0B7         	movff	?___lldiv+3,printf@tmpval+3
 11940                           
 11941                           ;doprnt.c: 1202: tmpval.vd %= 10;
 11942  000A58  C0B4  F060         	movff	printf@tmpval,___llmod@dividend
 11943  000A5C  C0B5  F061         	movff	printf@tmpval+1,___llmod@dividend+1
 11944  000A60  C0B6  F062         	movff	printf@tmpval+2,___llmod@dividend+2
 11945  000A64  C0B7  F063         	movff	printf@tmpval+3,___llmod@dividend+3
 11946  000A68  0E0A               	movlw	10
 11947  000A6A  0100               	movlb	0	; () banked
 11948  000A6C  6F64               	movwf	___llmod@divisor& (0+255),b
 11949  000A6E  0E00               	movlw	0
 11950  000A70  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 11951  000A72  0E00               	movlw	0
 11952  000A74  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 11953  000A76  0E00               	movlw	0
 11954  000A78  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 11955  000A7A  ECB7  F027         	call	___llmod	;wreg free
 11956  000A7E  C060  F0B4         	movff	?___llmod,printf@tmpval
 11957  000A82  C061  F0B5         	movff	?___llmod+1,printf@tmpval+1
 11958  000A86  C062  F0B6         	movff	?___llmod+2,printf@tmpval+2
 11959  000A8A  C063  F0B7         	movff	?___llmod+3,printf@tmpval+3
 11960                           
 11961                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 11962  000A8E  0100               	movlb	0	; () banked
 11963  000A90  51B4               	movf	printf@tmpval& (0+255),w,b
 11964  000A92  0F30               	addlw	48
 11965  000A94  EC9A  F02C         	call	_putch
 11966  000A98                     l8905:
 11967  000A98  0100               	movlb	0	; () banked
 11968  000A9A  07C5               	decf	printf@c& (0+255),f,b
 11969  000A9C  0100               	movlb	0	; () banked
 11970  000A9E  29C5               	incf	printf@c& (0+255),w,b
 11971  000AA0  B4D8               	btfsc	status,2,c
 11972  000AA2  D008               	goto	l8911
 11973  000AA4  D7B2               	goto	l8899
 11974  000AA6                     l8907:
 11975                           
 11976                           ; BSR set to: 0
 11977                           ;doprnt.c: 1208: (putch('0') );
 11978  000AA6  0E30               	movlw	48
 11979  000AA8  EC9A  F02C         	call	_putch
 11980                           
 11981                           ;doprnt.c: 1209: exp--;
 11982  000AAC  0100               	movlb	0	; () banked
 11983  000AAE  07B8               	decf	printf@exp& (0+255),f,b
 11984  000AB0  A0D8               	btfss	status,0,c
 11985  000AB2  07B9               	decf	(printf@exp+1)& (0+255),f,b
 11986  000AB4                     l8911:
 11987                           
 11988                           ; BSR set to: 0
 11989  000AB4  0100               	movlb	0	; () banked
 11990  000AB6  BFB9               	btfsc	(printf@exp+1)& (0+255),7,b
 11991  000AB8  D007               	goto	l8913
 11992  000ABA  0100               	movlb	0	; () banked
 11993  000ABC  51B9               	movf	(printf@exp+1)& (0+255),w,b
 11994  000ABE  E1F3               	bnz	l8907
 11995  000AC0  0100               	movlb	0	; () banked
 11996  000AC2  05B8               	decf	printf@exp& (0+255),w,b
 11997  000AC4  B0D8               	btfsc	status,0,c
 11998  000AC6  D7EF               	goto	l8907
 11999  000AC8                     l8913:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;doprnt.c: 1210: }
 12003                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 12004  000AC8  0100               	movlb	0	; () banked
 12005  000ACA  BFC2               	btfsc	(printf@prec+1)& (0+255),7,b
 12006  000ACC  D00C               	goto	l1421
 12007  000ACE  0100               	movlb	0	; () banked
 12008  000AD0  51C2               	movf	(printf@prec+1)& (0+255),w,b
 12009  000AD2  E105               	bnz	u10010
 12010  000AD4  0E09               	movlw	9
 12011  000AD6  0100               	movlb	0	; () banked
 12012  000AD8  5DC1               	subwf	printf@prec& (0+255),w,b
 12013  000ADA  A0D8               	btfss	status,0,c
 12014  000ADC  D004               	goto	l1421
 12015  000ADE                     u10010:
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 12019  000ADE  0E08               	movlw	8
 12020  000AE0  0100               	movlb	0	; () banked
 12021  000AE2  6FC5               	movwf	printf@c& (0+255),b
 12022  000AE4  D002               	goto	l8917
 12023  000AE6                     l1421:
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;doprnt.c: 1213: else
 12027                           ;doprnt.c: 1214: c = prec;
 12028  000AE6  C0C1  F0C5         	movff	printf@prec,printf@c
 12029  000AEA                     l8917:
 12030                           
 12031                           ; BSR set to: 0
 12032                           ;doprnt.c: 1215: prec -= c;
 12033  000AEA  0100               	movlb	0	; () banked
 12034  000AEC  51C5               	movf	printf@c& (0+255),w,b
 12035  000AEE  0100               	movlb	0	; () banked
 12036  000AF0  5FC1               	subwf	printf@prec& (0+255),f,b
 12037  000AF2  0E00               	movlw	0
 12038  000AF4  0100               	movlb	0	; () banked
 12039  000AF6  BFC5               	btfsc	printf@c& (0+255),7,b
 12040  000AF8  0EFF               	movlw	255
 12041  000AFA  0100               	movlb	0	; () banked
 12042  000AFC  5BC2               	subwfb	(printf@prec+1)& (0+255),f,b
 12043                           
 12044                           ; BSR set to: 0
 12045                           ;doprnt.c: 1217: if(c || flag & 0x800)
 12046  000AFE  0100               	movlb	0	; () banked
 12047  000B00  51C5               	movf	printf@c& (0+255),w,b
 12048  000B02  0100               	movlb	0	; () banked
 12049  000B04  A4D8               	btfss	status,2,c
 12050  000B06  D003               	goto	l8923
 12051                           
 12052                           ; BSR set to: 0
 12053  000B08  0100               	movlb	0	; () banked
 12054  000B0A  A7C7               	btfss	(printf@flag+1)& (0+255),3,b
 12055  000B0C  D003               	goto	l8925
 12056  000B0E                     l8923:
 12057                           
 12058                           ; BSR set to: 0
 12059                           ;doprnt.c: 1221: (putch('.') );
 12060  000B0E  0E2E               	movlw	46
 12061  000B10  EC9A  F02C         	call	_putch
 12062  000B14                     l8925:
 12063                           
 12064                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12065  000B14  0100               	movlb	0	; () banked
 12066  000B16  51C5               	movf	printf@c& (0+255),w,b
 12067  000B18  EC01  F017         	call	_scale
 12068  000B1C  C073  F0A0         	movff	?_scale,_printf$3458
 12069  000B20  C074  F0A1         	movff	?_scale+1,_printf$3458+1
 12070  000B24  C075  F0A2         	movff	?_scale+2,_printf$3458+2
 12071                           
 12072                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 12073  000B28  C0BA  F067         	movff	printf@fval,___ftmul@f2
 12074  000B2C  C0BB  F068         	movff	printf@fval+1,___ftmul@f2+1
 12075  000B30  C0BC  F069         	movff	printf@fval+2,___ftmul@f2+2
 12076  000B34  C0A0  F064         	movff	_printf$3458,___ftmul@f1
 12077  000B38  C0A1  F065         	movff	_printf$3458+1,___ftmul@f1+1
 12078  000B3C  C0A2  F066         	movff	_printf$3458+2,___ftmul@f1+2
 12079  000B40  ECCF  F01D         	call	___ftmul	;wreg free
 12080  000B44  C064  F07A         	movff	?___ftmul,___fttol@f1
 12081  000B48  C065  F07B         	movff	?___ftmul+1,___fttol@f1+1
 12082  000B4C  C066  F07C         	movff	?___ftmul+2,___fttol@f1+2
 12083  000B50  EC24  F01F         	call	___fttol	;wreg free
 12084  000B54  C07A  F0BD         	movff	?___fttol,printf@val
 12085  000B58  C07B  F0BE         	movff	?___fttol+1,printf@val+1
 12086  000B5C  C07C  F0BF         	movff	?___fttol+2,printf@val+2
 12087  000B60  C07D  F0C0         	movff	?___fttol+3,printf@val+3
 12088                           
 12089                           ;doprnt.c: 1228: while(c--) {
 12090  000B64  D06E               	goto	l8937
 12091  000B66                     l8929:
 12092                           
 12093                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 12094  000B66  C0BD  F01B         	movff	printf@val,___lldiv@dividend
 12095  000B6A  C0BE  F01C         	movff	printf@val+1,___lldiv@dividend+1
 12096  000B6E  C0BF  F01D         	movff	printf@val+2,___lldiv@dividend+2
 12097  000B72  C0C0  F01E         	movff	printf@val+3,___lldiv@dividend+3
 12098  000B76  0100               	movlb	0	; () banked
 12099  000B78  51C5               	movf	printf@c& (0+255),w,b
 12100  000B7A  0D04               	mullw	4
 12101  000B7C  0EA9               	movlw	low _dpowers
 12102  000B7E  24F3               	addwf	prodl,w,c
 12103  000B80  6EF6               	movwf	tblptrl,c
 12104  000B82  0E78               	movlw	high _dpowers
 12105  000B84  20F4               	addwfc	prodh,w,c
 12106  000B86  6EF7               	movwf	tblptrh,c
 12107  000B88                     	if	0	;There are less than 3 active tblptr bytes
 12108  000B88                     	endif
 12109  000B88  0009               	tblrd		*+
 12110  000B8A  CFF5 F01F          	movff	tablat,___lldiv@divisor
 12111  000B8E  0009               	tblrd		*+
 12112  000B90  CFF5 F020          	movff	tablat,___lldiv@divisor+1
 12113  000B94  0009               	tblrd		*+
 12114  000B96  CFF5 F021          	movff	tablat,___lldiv@divisor+2
 12115  000B9A  000A               	tblrd		*-
 12116  000B9C  CFF5 F022          	movff	tablat,___lldiv@divisor+3
 12117  000BA0  ECD5  F028         	call	___lldiv	;wreg free
 12118  000BA4  C01B  F0B4         	movff	?___lldiv,printf@tmpval
 12119  000BA8  C01C  F0B5         	movff	?___lldiv+1,printf@tmpval+1
 12120  000BAC  C01D  F0B6         	movff	?___lldiv+2,printf@tmpval+2
 12121  000BB0  C01E  F0B7         	movff	?___lldiv+3,printf@tmpval+3
 12122                           
 12123                           ;doprnt.c: 1230: tmpval.vd %= 10;
 12124  000BB4  C0B4  F060         	movff	printf@tmpval,___llmod@dividend
 12125  000BB8  C0B5  F061         	movff	printf@tmpval+1,___llmod@dividend+1
 12126  000BBC  C0B6  F062         	movff	printf@tmpval+2,___llmod@dividend+2
 12127  000BC0  C0B7  F063         	movff	printf@tmpval+3,___llmod@dividend+3
 12128  000BC4  0E0A               	movlw	10
 12129  000BC6  0100               	movlb	0	; () banked
 12130  000BC8  6F64               	movwf	___llmod@divisor& (0+255),b
 12131  000BCA  0E00               	movlw	0
 12132  000BCC  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 12133  000BCE  0E00               	movlw	0
 12134  000BD0  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 12135  000BD2  0E00               	movlw	0
 12136  000BD4  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 12137  000BD6  ECB7  F027         	call	___llmod	;wreg free
 12138  000BDA  C060  F0B4         	movff	?___llmod,printf@tmpval
 12139  000BDE  C061  F0B5         	movff	?___llmod+1,printf@tmpval+1
 12140  000BE2  C062  F0B6         	movff	?___llmod+2,printf@tmpval+2
 12141  000BE6  C063  F0B7         	movff	?___llmod+3,printf@tmpval+3
 12142                           
 12143                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 12144  000BEA  0100               	movlb	0	; () banked
 12145  000BEC  51B4               	movf	printf@tmpval& (0+255),w,b
 12146  000BEE  0F30               	addlw	48
 12147  000BF0  EC9A  F02C         	call	_putch
 12148                           
 12149                           ;doprnt.c: 1232: val %= dpowers[c];
 12150  000BF4  C0BD  F060         	movff	printf@val,___llmod@dividend
 12151  000BF8  C0BE  F061         	movff	printf@val+1,___llmod@dividend+1
 12152  000BFC  C0BF  F062         	movff	printf@val+2,___llmod@dividend+2
 12153  000C00  C0C0  F063         	movff	printf@val+3,___llmod@dividend+3
 12154  000C04  0100               	movlb	0	; () banked
 12155  000C06  51C5               	movf	printf@c& (0+255),w,b
 12156  000C08  0D04               	mullw	4
 12157  000C0A  0EA9               	movlw	low _dpowers
 12158  000C0C  24F3               	addwf	prodl,w,c
 12159  000C0E  6EF6               	movwf	tblptrl,c
 12160  000C10  0E78               	movlw	high _dpowers
 12161  000C12  20F4               	addwfc	prodh,w,c
 12162  000C14  6EF7               	movwf	tblptrh,c
 12163  000C16                     	if	0	;There are less than 3 active tblptr bytes
 12164  000C16                     	endif
 12165  000C16  0009               	tblrd		*+
 12166  000C18  CFF5 F064          	movff	tablat,___llmod@divisor
 12167  000C1C  0009               	tblrd		*+
 12168  000C1E  CFF5 F065          	movff	tablat,___llmod@divisor+1
 12169  000C22  0009               	tblrd		*+
 12170  000C24  CFF5 F066          	movff	tablat,___llmod@divisor+2
 12171  000C28  000A               	tblrd		*-
 12172  000C2A  CFF5 F067          	movff	tablat,___llmod@divisor+3
 12173  000C2E  ECB7  F027         	call	___llmod	;wreg free
 12174  000C32  C060  F0BD         	movff	?___llmod,printf@val
 12175  000C36  C061  F0BE         	movff	?___llmod+1,printf@val+1
 12176  000C3A  C062  F0BF         	movff	?___llmod+2,printf@val+2
 12177  000C3E  C063  F0C0         	movff	?___llmod+3,printf@val+3
 12178  000C42                     l8937:
 12179  000C42  0100               	movlb	0	; () banked
 12180  000C44  07C5               	decf	printf@c& (0+255),f,b
 12181  000C46  0100               	movlb	0	; () banked
 12182  000C48  29C5               	incf	printf@c& (0+255),w,b
 12183  000C4A  B4D8               	btfsc	status,2,c
 12184  000C4C  D008               	goto	l8943
 12185  000C4E  D78B               	goto	l8929
 12186  000C50                     l8939:
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;doprnt.c: 1236: (putch('0') );
 12190  000C50  0E30               	movlw	48
 12191  000C52  EC9A  F02C         	call	_putch
 12192                           
 12193                           ;doprnt.c: 1237: prec--;
 12194  000C56  0100               	movlb	0	; () banked
 12195  000C58  07C1               	decf	printf@prec& (0+255),f,b
 12196  000C5A  A0D8               	btfss	status,0,c
 12197  000C5C  07C2               	decf	(printf@prec+1)& (0+255),f,b
 12198  000C5E                     l8943:
 12199                           
 12200                           ; BSR set to: 0
 12201  000C5E  0100               	movlb	0	; () banked
 12202  000C60  51C1               	movf	printf@prec& (0+255),w,b
 12203  000C62  0100               	movlb	0	; () banked
 12204  000C64  11C2               	iorwf	(printf@prec+1)& (0+255),w,b
 12205  000C66  A4D8               	btfss	status,2,c
 12206  000C68  D7F3               	goto	l8939
 12207                           
 12208                           ; BSR set to: 0
 12209                           ;doprnt.c: 1238: }
 12210                           ;doprnt.c: 1240: if((flag & 0x08) && width > 0)
 12211  000C6A  0100               	movlb	0	; () banked
 12212  000C6C  A7C6               	btfss	printf@flag& (0+255),3,b
 12213  000C6E  D3A3               	goto	l9145
 12214                           
 12215                           ; BSR set to: 0
 12216  000C70  0100               	movlb	0	; () banked
 12217  000C72  BFC4               	btfsc	(printf@width+1)& (0+255),7,b
 12218  000C74  D3A0               	goto	l9145
 12219  000C76  0100               	movlb	0	; () banked
 12220  000C78  51C4               	movf	(printf@width+1)& (0+255),w,b
 12221  000C7A  E104               	bnz	l8947
 12222  000C7C  0100               	movlb	0	; () banked
 12223  000C7E  05C3               	decf	printf@width& (0+255),w,b
 12224  000C80  A0D8               	btfss	status,0,c
 12225  000C82  D399               	goto	l9145
 12226  000C84                     l8947:
 12227                           
 12228                           ; BSR set to: 0
 12229                           ;doprnt.c: 1242: (putch(' ') );
 12230  000C84  0E20               	movlw	32
 12231  000C86  EC9A  F02C         	call	_putch
 12232                           
 12233                           ;doprnt.c: 1243: while(--width);
 12234  000C8A  0100               	movlb	0	; () banked
 12235  000C8C  07C3               	decf	printf@width& (0+255),f,b
 12236  000C8E  A0D8               	btfss	status,0,c
 12237  000C90  07C4               	decf	(printf@width+1)& (0+255),f,b
 12238  000C92  0100               	movlb	0	; () banked
 12239  000C94  51C3               	movf	printf@width& (0+255),w,b
 12240  000C96  0100               	movlb	0	; () banked
 12241  000C98  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 12242  000C9A  B4D8               	btfsc	status,2,c
 12243  000C9C  D38C               	goto	l9145
 12244  000C9E  D7F2               	goto	l8947
 12245  000CA0                     l8951:
 12246                           
 12247                           ; BSR set to: 0
 12248                           ;doprnt.c: 1246: }
 12249                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 12250  000CA0  0EC0               	movlw	192
 12251  000CA2  0100               	movlb	0	; () banked
 12252  000CA4  15C6               	andwf	printf@flag& (0+255),w,b
 12253  000CA6  0100               	movlb	0	; () banked
 12254  000CA8  6F9A               	movwf	??_printf& (0+255),b
 12255  000CAA  0E00               	movlw	0
 12256  000CAC  0100               	movlb	0	; () banked
 12257  000CAE  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 12258  000CB0  0100               	movlb	0	; () banked
 12259  000CB2  6F9B               	movwf	(??_printf+1)& (0+255),b
 12260  000CB4  0100               	movlb	0	; () banked
 12261  000CB6  519A               	movf	??_printf& (0+255),w,b
 12262  000CB8  0100               	movlb	0	; () banked
 12263  000CBA  119B               	iorwf	(??_printf+1)& (0+255),w,b
 12264  000CBC  A4D8               	btfss	status,2,c
 12265  000CBE  D023               	goto	l8963
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;doprnt.c: 1253: {
 12269                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 12270  000CC0  C0B2  FFD9         	movff	printf@ap,fsr2l
 12271  000CC4  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 12272  000CC8  CFDE F0BD          	movff	postinc2,printf@val
 12273  000CCC  CFDD F0BE          	movff	postdec2,printf@val+1
 12274  000CD0  0100               	movlb	0	; () banked
 12275  000CD2  0E00               	movlw	0
 12276  000CD4  BFBE               	btfsc	(printf@val+1)& (0+255),7,b
 12277  000CD6  0EFF               	movlw	-1
 12278  000CD8  6FBF               	movwf	(printf@val+2)& (0+255),b
 12279  000CDA  6FC0               	movwf	(printf@val+3)& (0+255),b
 12280                           
 12281                           ; BSR set to: 0
 12282  000CDC  0E02               	movlw	2
 12283  000CDE  0100               	movlb	0	; () banked
 12284  000CE0  27B2               	addwf	printf@ap& (0+255),f,b
 12285  000CE2  0E00               	movlw	0
 12286  000CE4  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 12287                           
 12288                           ; BSR set to: 0
 12289                           ;doprnt.c: 1261: if((long)val < 0) {
 12290  000CE6  0100               	movlb	0	; () banked
 12291  000CE8  AFC0               	btfss	(printf@val+3)& (0+255),7,b
 12292  000CEA  D021               	goto	l8967
 12293                           
 12294                           ; BSR set to: 0
 12295                           ;doprnt.c: 1262: flag |= 0x03;
 12296  000CEC  0E03               	movlw	3
 12297  000CEE  0100               	movlb	0	; () banked
 12298  000CF0  13C6               	iorwf	printf@flag& (0+255),f,b
 12299                           
 12300                           ; BSR set to: 0
 12301                           ;doprnt.c: 1263: val = -val;
 12302  000CF2  0100               	movlb	0	; () banked
 12303  000CF4  1FC0               	comf	(printf@val+3)& (0+255),f,b
 12304  000CF6  1FBF               	comf	(printf@val+2)& (0+255),f,b
 12305  000CF8  1FBE               	comf	(printf@val+1)& (0+255),f,b
 12306  000CFA  6DBD               	negf	printf@val& (0+255),b
 12307  000CFC  0E00               	movlw	0
 12308  000CFE  23BE               	addwfc	(printf@val+1)& (0+255),f,b
 12309  000D00  23BF               	addwfc	(printf@val+2)& (0+255),f,b
 12310  000D02  23C0               	addwfc	(printf@val+3)& (0+255),f,b
 12311                           
 12312                           ; BSR set to: 0
 12313                           ;doprnt.c: 1264: }
 12314                           ;doprnt.c: 1266: }
 12315  000D04  D014               	goto	l8967
 12316  000D06                     l8963:
 12317                           
 12318                           ; BSR set to: 0
 12319                           ;doprnt.c: 1268: else
 12320                           ;doprnt.c: 1273: {
 12321                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12322  000D06  C0B2  FFD9         	movff	printf@ap,fsr2l
 12323  000D0A  C0B3  FFDA         	movff	printf@ap+1,fsr2h
 12324  000D0E  CFDE F09A          	movff	postinc2,??_printf
 12325  000D12  CFDD F09B          	movff	postdec2,??_printf+1
 12326  000D16  C09A  F0BD         	movff	??_printf,printf@val
 12327  000D1A  C09B  F0BE         	movff	??_printf+1,printf@val+1
 12328  000D1E  0100               	movlb	0	; () banked
 12329  000D20  6BBF               	clrf	(printf@val+2)& (0+255),b
 12330  000D22  6BC0               	clrf	(printf@val+3)& (0+255),b
 12331                           
 12332                           ; BSR set to: 0
 12333  000D24  0E02               	movlw	2
 12334  000D26  0100               	movlb	0	; () banked
 12335  000D28  27B2               	addwf	printf@ap& (0+255),f,b
 12336  000D2A  0E00               	movlw	0
 12337  000D2C  23B3               	addwfc	(printf@ap+1)& (0+255),f,b
 12338  000D2E                     l8967:
 12339                           
 12340                           ; BSR set to: 0
 12341                           ;doprnt.c: 1287: }
 12342                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
 12343  000D2E  0100               	movlb	0	; () banked
 12344  000D30  51C1               	movf	printf@prec& (0+255),w,b
 12345  000D32  0100               	movlb	0	; () banked
 12346  000D34  11C2               	iorwf	(printf@prec+1)& (0+255),w,b
 12347  000D36  A4D8               	btfss	status,2,c
 12348  000D38  D080               	goto	l9017
 12349                           
 12350                           ; BSR set to: 0
 12351  000D3A  0100               	movlb	0	; () banked
 12352  000D3C  51BD               	movf	printf@val& (0+255),w,b
 12353  000D3E  0100               	movlb	0	; () banked
 12354  000D40  11BE               	iorwf	(printf@val+1)& (0+255),w,b
 12355  000D42  0100               	movlb	0	; () banked
 12356  000D44  11BF               	iorwf	(printf@val+2)& (0+255),w,b
 12357  000D46  0100               	movlb	0	; () banked
 12358  000D48  11C0               	iorwf	(printf@val+3)& (0+255),w,b
 12359  000D4A  A4D8               	btfss	status,2,c
 12360  000D4C  D076               	goto	l9017
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;doprnt.c: 1291: prec++;
 12364  000D4E  0100               	movlb	0	; () banked
 12365  000D50  4BC1               	infsnz	printf@prec& (0+255),f,b
 12366  000D52  2BC2               	incf	(printf@prec+1)& (0+255),f,b
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 12370  000D54  D072               	goto	l9017
 12371  000D56                     l8973:
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;doprnt.c: 1302: case 0xC0:
 12375                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12376  000D56  0E01               	movlw	1
 12377  000D58  0100               	movlb	0	; () banked
 12378  000D5A  6FC5               	movwf	printf@c& (0+255),b
 12379  000D5C                     l8975:
 12380                           
 12381                           ; BSR set to: 0
 12382  000D5C  0E0A               	movlw	10
 12383  000D5E  0100               	movlb	0	; () banked
 12384  000D60  19C5               	xorwf	printf@c& (0+255),w,b
 12385  000D62  B4D8               	btfsc	status,2,c
 12386  000D64  D079               	goto	l9019
 12387                           
 12388                           ; BSR set to: 0
 12389                           ;doprnt.c: 1306: if(val < dpowers[c])
 12390                           
 12391                           ; BSR set to: 0
 12392                           
 12393                           ; BSR set to: 0
 12394  000D66  0100               	movlb	0	; () banked
 12395  000D68  51C5               	movf	printf@c& (0+255),w,b
 12396  000D6A  0D04               	mullw	4
 12397  000D6C  0EA9               	movlw	low _dpowers
 12398  000D6E  24F3               	addwf	prodl,w,c
 12399  000D70  6EF6               	movwf	tblptrl,c
 12400  000D72  0E78               	movlw	high _dpowers
 12401  000D74  20F4               	addwfc	prodh,w,c
 12402  000D76  6EF7               	movwf	tblptrh,c
 12403  000D78                     	if	0	;There are less than 3 active tblptr bytes
 12404  000D78                     	endif
 12405  000D78  0009               	tblrd		*+
 12406  000D7A  50F5               	movf	tablat,w,c
 12407  000D7C  0100               	movlb	0	; () banked
 12408  000D7E  5DBD               	subwf	printf@val& (0+255),w,b
 12409  000D80  0009               	tblrd		*+
 12410  000D82  50F5               	movf	tablat,w,c
 12411  000D84  0100               	movlb	0	; () banked
 12412  000D86  59BE               	subwfb	(printf@val+1)& (0+255),w,b
 12413  000D88  0009               	tblrd		*+
 12414  000D8A  50F5               	movf	tablat,w,c
 12415  000D8C  0100               	movlb	0	; () banked
 12416  000D8E  59BF               	subwfb	(printf@val+2)& (0+255),w,b
 12417  000D90  0009               	tblrd		*+
 12418  000D92  50F5               	movf	tablat,w,c
 12419  000D94  0100               	movlb	0	; () banked
 12420  000D96  59C0               	subwfb	(printf@val+3)& (0+255),w,b
 12421  000D98  A0D8               	btfss	status,0,c
 12422  000D9A  D05E               	goto	l9019
 12423                           
 12424                           ; BSR set to: 0
 12425                           
 12426                           ; BSR set to: 0
 12427                           
 12428                           ; BSR set to: 0
 12429                           ;doprnt.c: 1307: break;
 12430  000D9C  0100               	movlb	0	; () banked
 12431  000D9E  2BC5               	incf	printf@c& (0+255),f,b
 12432  000DA0  D7DD               	goto	l8975
 12433  000DA2                     l8987:
 12434                           
 12435                           ; BSR set to: 0
 12436                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12437  000DA2  0E01               	movlw	1
 12438  000DA4  0100               	movlb	0	; () banked
 12439  000DA6  6FC5               	movwf	printf@c& (0+255),b
 12440  000DA8                     l8989:
 12441                           
 12442                           ; BSR set to: 0
 12443  000DA8  0E08               	movlw	8
 12444  000DAA  0100               	movlb	0	; () banked
 12445  000DAC  19C5               	xorwf	printf@c& (0+255),w,b
 12446  000DAE  B4D8               	btfsc	status,2,c
 12447  000DB0  D053               	goto	l9019
 12448                           
 12449                           ; BSR set to: 0
 12450                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12451                           
 12452                           ; BSR set to: 0
 12453                           
 12454                           ; BSR set to: 0
 12455  000DB2  0100               	movlb	0	; () banked
 12456  000DB4  51C5               	movf	printf@c& (0+255),w,b
 12457  000DB6  0D04               	mullw	4
 12458  000DB8  0E1F               	movlw	low _hexpowers
 12459  000DBA  24F3               	addwf	prodl,w,c
 12460  000DBC  6EF6               	movwf	tblptrl,c
 12461  000DBE  0E79               	movlw	high _hexpowers
 12462  000DC0  20F4               	addwfc	prodh,w,c
 12463  000DC2  6EF7               	movwf	tblptrh,c
 12464  000DC4                     	if	0	;There are less than 3 active tblptr bytes
 12465  000DC4                     	endif
 12466  000DC4  0009               	tblrd		*+
 12467  000DC6  50F5               	movf	tablat,w,c
 12468  000DC8  0100               	movlb	0	; () banked
 12469  000DCA  5DBD               	subwf	printf@val& (0+255),w,b
 12470  000DCC  0009               	tblrd		*+
 12471  000DCE  50F5               	movf	tablat,w,c
 12472  000DD0  0100               	movlb	0	; () banked
 12473  000DD2  59BE               	subwfb	(printf@val+1)& (0+255),w,b
 12474  000DD4  0009               	tblrd		*+
 12475  000DD6  50F5               	movf	tablat,w,c
 12476  000DD8  0100               	movlb	0	; () banked
 12477  000DDA  59BF               	subwfb	(printf@val+2)& (0+255),w,b
 12478  000DDC  0009               	tblrd		*+
 12479  000DDE  50F5               	movf	tablat,w,c
 12480  000DE0  0100               	movlb	0	; () banked
 12481  000DE2  59C0               	subwfb	(printf@val+3)& (0+255),w,b
 12482  000DE4  A0D8               	btfss	status,0,c
 12483  000DE6  D038               	goto	l9019
 12484                           
 12485                           ; BSR set to: 0
 12486                           
 12487                           ; BSR set to: 0
 12488                           
 12489                           ; BSR set to: 0
 12490                           ;doprnt.c: 1318: break;
 12491  000DE8  0100               	movlb	0	; () banked
 12492  000DEA  2BC5               	incf	printf@c& (0+255),f,b
 12493  000DEC  D7DD               	goto	l8989
 12494  000DEE                     l9001:
 12495                           
 12496                           ; BSR set to: 0
 12497                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 12498  000DEE  0E01               	movlw	1
 12499  000DF0  0100               	movlb	0	; () banked
 12500  000DF2  6FC5               	movwf	printf@c& (0+255),b
 12501  000DF4                     l9003:
 12502                           
 12503                           ; BSR set to: 0
 12504  000DF4  0E0C               	movlw	12
 12505  000DF6  0100               	movlb	0	; () banked
 12506  000DF8  19C5               	xorwf	printf@c& (0+255),w,b
 12507  000DFA  B4D8               	btfsc	status,2,c
 12508  000DFC  D02D               	goto	l9019
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;doprnt.c: 1329: if(val < octpowers[c])
 12512                           
 12513                           ; BSR set to: 0
 12514                           
 12515                           ; BSR set to: 0
 12516  000DFE  0100               	movlb	0	; () banked
 12517  000E00  51C5               	movf	printf@c& (0+255),w,b
 12518  000E02  0D04               	mullw	4
 12519  000E04  0E79               	movlw	low _octpowers
 12520  000E06  24F3               	addwf	prodl,w,c
 12521  000E08  6EF6               	movwf	tblptrl,c
 12522  000E0A  0E78               	movlw	high _octpowers
 12523  000E0C  20F4               	addwfc	prodh,w,c
 12524  000E0E  6EF7               	movwf	tblptrh,c
 12525  000E10                     	if	0	;There are less than 3 active tblptr bytes
 12526  000E10                     	endif
 12527  000E10  0009               	tblrd		*+
 12528  000E12  50F5               	movf	tablat,w,c
 12529  000E14  0100               	movlb	0	; () banked
 12530  000E16  5DBD               	subwf	printf@val& (0+255),w,b
 12531  000E18  0009               	tblrd		*+
 12532  000E1A  50F5               	movf	tablat,w,c
 12533  000E1C  0100               	movlb	0	; () banked
 12534  000E1E  59BE               	subwfb	(printf@val+1)& (0+255),w,b
 12535  000E20  0009               	tblrd		*+
 12536  000E22  50F5               	movf	tablat,w,c
 12537  000E24  0100               	movlb	0	; () banked
 12538  000E26  59BF               	subwfb	(printf@val+2)& (0+255),w,b
 12539  000E28  0009               	tblrd		*+
 12540  000E2A  50F5               	movf	tablat,w,c
 12541  000E2C  0100               	movlb	0	; () banked
 12542  000E2E  59C0               	subwfb	(printf@val+3)& (0+255),w,b
 12543  000E30  A0D8               	btfss	status,0,c
 12544  000E32  D012               	goto	l9019
 12545                           
 12546                           ; BSR set to: 0
 12547                           
 12548                           ; BSR set to: 0
 12549                           
 12550                           ; BSR set to: 0
 12551                           ;doprnt.c: 1330: break;
 12552  000E34  0100               	movlb	0	; () banked
 12553  000E36  2BC5               	incf	printf@c& (0+255),f,b
 12554  000E38  D7DD               	goto	l9003
 12555  000E3A                     l9017:
 12556                           
 12557                           ; BSR set to: 0
 12558  000E3A  0100               	movlb	0	; () banked
 12559  000E3C  51C6               	movf	printf@flag& (0+255),w,b
 12560  000E3E  0BC0               	andlw	192
 12561                           
 12562                           ; Switch size 1, requested type "space"
 12563                           ; Number of cases is 4, Range of values is 0 to 192
 12564                           ; switch strategies available:
 12565                           ; Name         Instructions Cycles
 12566                           ; simple_byte           13     7 (average)
 12567                           ;	Chosen strategy is simple_byte
 12568  000E40  0A00               	xorlw	0	; case 0
 12569  000E42  B4D8               	btfsc	status,2,c
 12570  000E44  D788               	goto	l8973
 12571  000E46  0A40               	xorlw	64	; case 64
 12572  000E48  B4D8               	btfsc	status,2,c
 12573  000E4A  D7D1               	goto	l9001
 12574  000E4C  0AC0               	xorlw	192	; case 128
 12575  000E4E  B4D8               	btfsc	status,2,c
 12576  000E50  D7A8               	goto	l8987
 12577  000E52  0A40               	xorlw	64	; case 192
 12578  000E54  B4D8               	btfsc	status,2,c
 12579  000E56  D77F               	goto	l8973
 12580  000E58                     l9019:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;doprnt.c: 1339: if(c < prec)
 12584  000E58  0E80               	movlw	128
 12585  000E5A  0100               	movlb	0	; () banked
 12586  000E5C  BFC5               	btfsc	printf@c& (0+255),7,b
 12587  000E5E  0E7F               	movlw	127
 12588  000E60  0100               	movlb	0	; () banked
 12589  000E62  6F9A               	movwf	??_printf& (0+255),b
 12590  000E64  0100               	movlb	0	; () banked
 12591  000E66  51C1               	movf	printf@prec& (0+255),w,b
 12592  000E68  0100               	movlb	0	; () banked
 12593  000E6A  5DC5               	subwf	printf@c& (0+255),w,b
 12594  000E6C  0100               	movlb	0	; () banked
 12595  000E6E  51C2               	movf	(printf@prec+1)& (0+255),w,b
 12596  000E70  0A80               	xorlw	128
 12597  000E72  0100               	movlb	0	; () banked
 12598  000E74  599A               	subwfb	??_printf& (0+255),w,b
 12599  000E76  B0D8               	btfsc	status,0,c
 12600  000E78  D003               	goto	l9023
 12601                           
 12602                           ; BSR set to: 0
 12603                           ;doprnt.c: 1340: c = prec;
 12604  000E7A  C0C1  F0C5         	movff	printf@prec,printf@c
 12605  000E7E  D018               	goto	l9027
 12606  000E80                     l9023:
 12607                           
 12608                           ; BSR set to: 0
 12609                           ;doprnt.c: 1341: else if(prec < c)
 12610  000E80  0100               	movlb	0	; () banked
 12611  000E82  51C2               	movf	(printf@prec+1)& (0+255),w,b
 12612  000E84  0A80               	xorlw	128
 12613  000E86  0100               	movlb	0	; () banked
 12614  000E88  6F9A               	movwf	??_printf& (0+255),b
 12615  000E8A  0100               	movlb	0	; () banked
 12616  000E8C  51C5               	movf	printf@c& (0+255),w,b
 12617  000E8E  0100               	movlb	0	; () banked
 12618  000E90  5DC1               	subwf	printf@prec& (0+255),w,b
 12619  000E92  0E80               	movlw	128
 12620  000E94  0100               	movlb	0	; () banked
 12621  000E96  BFC5               	btfsc	printf@c& (0+255),7,b
 12622  000E98  0E7F               	movlw	127
 12623  000E9A  0100               	movlb	0	; () banked
 12624  000E9C  599A               	subwfb	??_printf& (0+255),w,b
 12625  000E9E  B0D8               	btfsc	status,0,c
 12626  000EA0  D007               	goto	l9027
 12627                           
 12628                           ; BSR set to: 0
 12629                           ;doprnt.c: 1342: prec = c;
 12630  000EA2  0100               	movlb	0	; () banked
 12631  000EA4  51C5               	movf	printf@c& (0+255),w,b
 12632  000EA6  0100               	movlb	0	; () banked
 12633  000EA8  6FC1               	movwf	printf@prec& (0+255),b
 12634  000EAA  6BC2               	clrf	(printf@prec+1)& (0+255),b
 12635  000EAC  BFC1               	btfsc	printf@prec& (0+255),7,b
 12636  000EAE  07C2               	decf	(printf@prec+1)& (0+255),f,b
 12637  000EB0                     l9027:
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12641  000EB0  0100               	movlb	0	; () banked
 12642  000EB2  51C3               	movf	printf@width& (0+255),w,b
 12643  000EB4  0100               	movlb	0	; () banked
 12644  000EB6  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 12645  000EB8  B4D8               	btfsc	status,2,c
 12646  000EBA  D014               	goto	l9033
 12647                           
 12648                           ; BSR set to: 0
 12649  000EBC  0E03               	movlw	3
 12650  000EBE  0100               	movlb	0	; () banked
 12651  000EC0  15C6               	andwf	printf@flag& (0+255),w,b
 12652  000EC2  0100               	movlb	0	; () banked
 12653  000EC4  6F9A               	movwf	??_printf& (0+255),b
 12654  000EC6  0E00               	movlw	0
 12655  000EC8  0100               	movlb	0	; () banked
 12656  000ECA  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 12657  000ECC  0100               	movlb	0	; () banked
 12658  000ECE  6F9B               	movwf	(??_printf+1)& (0+255),b
 12659  000ED0  0100               	movlb	0	; () banked
 12660  000ED2  519A               	movf	??_printf& (0+255),w,b
 12661  000ED4  0100               	movlb	0	; () banked
 12662  000ED6  119B               	iorwf	(??_printf+1)& (0+255),w,b
 12663  000ED8  B4D8               	btfsc	status,2,c
 12664  000EDA  D004               	goto	l9033
 12665                           
 12666                           ; BSR set to: 0
 12667                           ;doprnt.c: 1346: width--;
 12668  000EDC  0100               	movlb	0	; () banked
 12669  000EDE  07C3               	decf	printf@width& (0+255),f,b
 12670  000EE0  A0D8               	btfss	status,0,c
 12671  000EE2  07C4               	decf	(printf@width+1)& (0+255),f,b
 12672  000EE4                     l9033:
 12673                           
 12674                           ; BSR set to: 0
 12675                           ;doprnt.c: 1348: if(flag & 0x4000) {
 12676  000EE4  0100               	movlb	0	; () banked
 12677  000EE6  ADC7               	btfss	(printf@flag+1)& (0+255),6,b
 12678  000EE8  D01E               	goto	l9041
 12679                           
 12680                           ; BSR set to: 0
 12681                           ;doprnt.c: 1349: if(width > prec)
 12682  000EEA  0100               	movlb	0	; () banked
 12683  000EEC  51C3               	movf	printf@width& (0+255),w,b
 12684  000EEE  0100               	movlb	0	; () banked
 12685  000EF0  5DC1               	subwf	printf@prec& (0+255),w,b
 12686  000EF2  0100               	movlb	0	; () banked
 12687  000EF4  51C2               	movf	(printf@prec+1)& (0+255),w,b
 12688  000EF6  0A80               	xorlw	128
 12689  000EF8  0100               	movlb	0	; () banked
 12690  000EFA  6F9A               	movwf	??_printf& (0+255),b
 12691  000EFC  0100               	movlb	0	; () banked
 12692  000EFE  51C4               	movf	(printf@width+1)& (0+255),w,b
 12693  000F00  0A80               	xorlw	128
 12694  000F02  0100               	movlb	0	; () banked
 12695  000F04  599A               	subwfb	??_printf& (0+255),w,b
 12696  000F06  B0D8               	btfsc	status,0,c
 12697  000F08  D009               	goto	l9039
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;doprnt.c: 1350: width -= prec;
 12701  000F0A  0100               	movlb	0	; () banked
 12702  000F0C  51C1               	movf	printf@prec& (0+255),w,b
 12703  000F0E  0100               	movlb	0	; () banked
 12704  000F10  5FC3               	subwf	printf@width& (0+255),f,b
 12705  000F12  0100               	movlb	0	; () banked
 12706  000F14  51C2               	movf	(printf@prec+1)& (0+255),w,b
 12707  000F16  0100               	movlb	0	; () banked
 12708  000F18  5BC4               	subwfb	(printf@width+1)& (0+255),f,b
 12709  000F1A  D005               	goto	l9041
 12710  000F1C                     l9039:
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;doprnt.c: 1351: else
 12714                           ;doprnt.c: 1352: width = 0;
 12715  000F1C  0E00               	movlw	0
 12716  000F1E  0100               	movlb	0	; () banked
 12717  000F20  6FC4               	movwf	(printf@width+1)& (0+255),b
 12718  000F22  0E00               	movlw	0
 12719  000F24  6FC3               	movwf	printf@width& (0+255),b
 12720  000F26                     l9041:
 12721                           
 12722                           ; BSR set to: 0
 12723                           ;doprnt.c: 1353: }
 12724                           ;doprnt.c: 1357: if((flag & (
 12725                           ;doprnt.c: 1359: 0x04|
 12726                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
 12727  000F26  0EC4               	movlw	196
 12728  000F28  0100               	movlb	0	; () banked
 12729  000F2A  6F9A               	movwf	??_printf& (0+255),b
 12730  000F2C  0E08               	movlw	8
 12731  000F2E  0100               	movlb	0	; () banked
 12732  000F30  6F9B               	movwf	(??_printf+1)& (0+255),b
 12733  000F32  C0C6  F09C         	movff	printf@flag,??_printf+2
 12734  000F36  C0C7  F09D         	movff	printf@flag+1,??_printf+3
 12735  000F3A  0100               	movlb	0	; () banked
 12736  000F3C  519A               	movf	??_printf& (0+255),w,b
 12737  000F3E  0100               	movlb	0	; () banked
 12738  000F40  179C               	andwf	(??_printf+2)& (0+255),f,b
 12739  000F42  0100               	movlb	0	; () banked
 12740  000F44  519B               	movf	(??_printf+1)& (0+255),w,b
 12741  000F46  0100               	movlb	0	; () banked
 12742  000F48  179D               	andwf	(??_printf+3)& (0+255),f,b
 12743  000F4A  0E40               	movlw	64
 12744  000F4C  0100               	movlb	0	; () banked
 12745  000F4E  199C               	xorwf	(??_printf+2)& (0+255),w,b
 12746  000F50  E110               	bnz	l9047
 12747  000F52  0E08               	movlw	8
 12748  000F54  0100               	movlb	0	; () banked
 12749  000F56  199D               	xorwf	(??_printf+3)& (0+255),w,b
 12750  000F58  A4D8               	btfss	status,2,c
 12751  000F5A  D00B               	goto	l9047
 12752                           
 12753                           ; BSR set to: 0
 12754                           ;doprnt.c: 1362: if(width)
 12755  000F5C  0100               	movlb	0	; () banked
 12756  000F5E  51C3               	movf	printf@width& (0+255),w,b
 12757  000F60  0100               	movlb	0	; () banked
 12758  000F62  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 12759  000F64  B4D8               	btfsc	status,2,c
 12760  000F66  D036               	goto	l9055
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;doprnt.c: 1363: width--;
 12764  000F68  0100               	movlb	0	; () banked
 12765  000F6A  07C3               	decf	printf@width& (0+255),f,b
 12766  000F6C  A0D8               	btfss	status,0,c
 12767  000F6E  07C4               	decf	(printf@width+1)& (0+255),f,b
 12768                           
 12769                           ; BSR set to: 0
 12770                           ;doprnt.c: 1364: } else
 12771  000F70  D031               	goto	l9055
 12772  000F72                     l9047:
 12773                           
 12774                           ; BSR set to: 0
 12775                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 12776  000F72  0EC0               	movlw	192
 12777  000F74  0100               	movlb	0	; () banked
 12778  000F76  6F9A               	movwf	??_printf& (0+255),b
 12779  000F78  0E08               	movlw	8
 12780  000F7A  0100               	movlb	0	; () banked
 12781  000F7C  6F9B               	movwf	(??_printf+1)& (0+255),b
 12782  000F7E  C0C6  F09C         	movff	printf@flag,??_printf+2
 12783  000F82  C0C7  F09D         	movff	printf@flag+1,??_printf+3
 12784  000F86  0100               	movlb	0	; () banked
 12785  000F88  519A               	movf	??_printf& (0+255),w,b
 12786  000F8A  0100               	movlb	0	; () banked
 12787  000F8C  179C               	andwf	(??_printf+2)& (0+255),f,b
 12788  000F8E  0100               	movlb	0	; () banked
 12789  000F90  519B               	movf	(??_printf+1)& (0+255),w,b
 12790  000F92  0100               	movlb	0	; () banked
 12791  000F94  179D               	andwf	(??_printf+3)& (0+255),f,b
 12792  000F96  0E80               	movlw	128
 12793  000F98  0100               	movlb	0	; () banked
 12794  000F9A  199C               	xorwf	(??_printf+2)& (0+255),w,b
 12795  000F9C  E11B               	bnz	l9055
 12796  000F9E  0E08               	movlw	8
 12797  000FA0  0100               	movlb	0	; () banked
 12798  000FA2  199D               	xorwf	(??_printf+3)& (0+255),w,b
 12799  000FA4  A4D8               	btfss	status,2,c
 12800  000FA6  D016               	goto	l9055
 12801                           
 12802                           ; BSR set to: 0
 12803                           ;doprnt.c: 1372: if(width > 2)
 12804  000FA8  0100               	movlb	0	; () banked
 12805  000FAA  BFC4               	btfsc	(printf@width+1)& (0+255),7,b
 12806  000FAC  D00E               	goto	l9053
 12807  000FAE  0100               	movlb	0	; () banked
 12808  000FB0  51C4               	movf	(printf@width+1)& (0+255),w,b
 12809  000FB2  E105               	bnz	u10310
 12810  000FB4  0E03               	movlw	3
 12811  000FB6  0100               	movlb	0	; () banked
 12812  000FB8  5DC3               	subwf	printf@width& (0+255),w,b
 12813  000FBA  A0D8               	btfss	status,0,c
 12814  000FBC  D006               	goto	l9053
 12815  000FBE                     u10310:
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;doprnt.c: 1373: width -= 2;
 12819  000FBE  0100               	movlb	0	; () banked
 12820  000FC0  0EFE               	movlw	254
 12821  000FC2  27C3               	addwf	printf@width& (0+255),f,b
 12822  000FC4  0EFF               	movlw	255
 12823  000FC6  23C4               	addwfc	(printf@width+1)& (0+255),f,b
 12824  000FC8  D005               	goto	l9055
 12825  000FCA                     l9053:
 12826                           
 12827                           ; BSR set to: 0
 12828                           ;doprnt.c: 1374: else
 12829                           ;doprnt.c: 1375: width = 0;
 12830  000FCA  0E00               	movlw	0
 12831  000FCC  0100               	movlb	0	; () banked
 12832  000FCE  6FC4               	movwf	(printf@width+1)& (0+255),b
 12833  000FD0  0E00               	movlw	0
 12834  000FD2  6FC3               	movwf	printf@width& (0+255),b
 12835  000FD4                     l9055:
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;doprnt.c: 1376: }
 12839                           ;doprnt.c: 1381: if(width > c)
 12840  000FD4  0E80               	movlw	128
 12841  000FD6  0100               	movlb	0	; () banked
 12842  000FD8  BFC5               	btfsc	printf@c& (0+255),7,b
 12843  000FDA  0E7F               	movlw	127
 12844  000FDC  0100               	movlb	0	; () banked
 12845  000FDE  6F9A               	movwf	??_printf& (0+255),b
 12846  000FE0  0100               	movlb	0	; () banked
 12847  000FE2  51C3               	movf	printf@width& (0+255),w,b
 12848  000FE4  0100               	movlb	0	; () banked
 12849  000FE6  5DC5               	subwf	printf@c& (0+255),w,b
 12850  000FE8  0100               	movlb	0	; () banked
 12851  000FEA  51C4               	movf	(printf@width+1)& (0+255),w,b
 12852  000FEC  0A80               	xorlw	128
 12853  000FEE  0100               	movlb	0	; () banked
 12854  000FF0  599A               	subwfb	??_printf& (0+255),w,b
 12855  000FF2  B0D8               	btfsc	status,0,c
 12856  000FF4  D00B               	goto	l9059
 12857                           
 12858                           ; BSR set to: 0
 12859                           ;doprnt.c: 1382: width -= c;
 12860  000FF6  0100               	movlb	0	; () banked
 12861  000FF8  51C5               	movf	printf@c& (0+255),w,b
 12862  000FFA  0100               	movlb	0	; () banked
 12863  000FFC  5FC3               	subwf	printf@width& (0+255),f,b
 12864  000FFE  0E00               	movlw	0
 12865  001000  0100               	movlb	0	; () banked
 12866  001002  BFC5               	btfsc	printf@c& (0+255),7,b
 12867  001004  0EFF               	movlw	255
 12868  001006  0100               	movlb	0	; () banked
 12869  001008  5BC4               	subwfb	(printf@width+1)& (0+255),f,b
 12870  00100A  D005               	goto	l9061
 12871  00100C                     l9059:
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;doprnt.c: 1383: else
 12875                           ;doprnt.c: 1384: width = 0;
 12876  00100C  0E00               	movlw	0
 12877  00100E  0100               	movlb	0	; () banked
 12878  001010  6FC4               	movwf	(printf@width+1)& (0+255),b
 12879  001012  0E00               	movlw	0
 12880  001014  6FC3               	movwf	printf@width& (0+255),b
 12881  001016                     l9061:
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;doprnt.c: 1387: if(flag & 0x04) {
 12885  001016  0100               	movlb	0	; () banked
 12886  001018  A5C6               	btfss	printf@flag& (0+255),2,b
 12887  00101A  D058               	goto	l9087
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;doprnt.c: 1392: if(flag & 0x03)
 12891  00101C  0E03               	movlw	3
 12892  00101E  0100               	movlb	0	; () banked
 12893  001020  15C6               	andwf	printf@flag& (0+255),w,b
 12894  001022  0100               	movlb	0	; () banked
 12895  001024  6F9A               	movwf	??_printf& (0+255),b
 12896  001026  0E00               	movlw	0
 12897  001028  0100               	movlb	0	; () banked
 12898  00102A  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 12899  00102C  0100               	movlb	0	; () banked
 12900  00102E  6F9B               	movwf	(??_printf+1)& (0+255),b
 12901  001030  0100               	movlb	0	; () banked
 12902  001032  519A               	movf	??_printf& (0+255),w,b
 12903  001034  0100               	movlb	0	; () banked
 12904  001036  119B               	iorwf	(??_printf+1)& (0+255),w,b
 12905  001038  B4D8               	btfsc	status,2,c
 12906  00103A  D004               	goto	l1470
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;doprnt.c: 1393: (putch('-') );
 12910  00103C  0E2D               	movlw	45
 12911  00103E  EC9A  F02C         	call	_putch
 12912  001042  D036               	goto	l9081
 12913  001044                     l1470:
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;doprnt.c: 1396: else
 12917                           ;doprnt.c: 1399: if(flag & 0x01)
 12918  001044  0100               	movlb	0	; () banked
 12919  001046  A1C6               	btfss	printf@flag& (0+255),0,b
 12920  001048  D004               	goto	l9069
 12921                           
 12922                           ; BSR set to: 0
 12923                           ;doprnt.c: 1400: (putch(' ') );
 12924  00104A  0E20               	movlw	32
 12925  00104C  EC9A  F02C         	call	_putch
 12926  001050  D02F               	goto	l9081
 12927  001052                     l9069:
 12928                           
 12929                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 12930  001052  0EC0               	movlw	192
 12931  001054  0100               	movlb	0	; () banked
 12932  001056  6F9A               	movwf	??_printf& (0+255),b
 12933  001058  0E08               	movlw	8
 12934  00105A  0100               	movlb	0	; () banked
 12935  00105C  6F9B               	movwf	(??_printf+1)& (0+255),b
 12936  00105E  C0C6  F09C         	movff	printf@flag,??_printf+2
 12937  001062  C0C7  F09D         	movff	printf@flag+1,??_printf+3
 12938  001066  0100               	movlb	0	; () banked
 12939  001068  519A               	movf	??_printf& (0+255),w,b
 12940  00106A  0100               	movlb	0	; () banked
 12941  00106C  179C               	andwf	(??_printf+2)& (0+255),f,b
 12942  00106E  0100               	movlb	0	; () banked
 12943  001070  519B               	movf	(??_printf+1)& (0+255),w,b
 12944  001072  0100               	movlb	0	; () banked
 12945  001074  179D               	andwf	(??_printf+3)& (0+255),f,b
 12946  001076  0E80               	movlw	128
 12947  001078  0100               	movlb	0	; () banked
 12948  00107A  199C               	xorwf	(??_printf+2)& (0+255),w,b
 12949  00107C  E119               	bnz	l9081
 12950  00107E  0E08               	movlw	8
 12951  001080  0100               	movlb	0	; () banked
 12952  001082  199D               	xorwf	(??_printf+3)& (0+255),w,b
 12953  001084  A4D8               	btfss	status,2,c
 12954  001086  D014               	goto	l9081
 12955                           
 12956                           ; BSR set to: 0
 12957                           ;doprnt.c: 1404: (putch('0') );
 12958  001088  0E30               	movlw	48
 12959  00108A  EC9A  F02C         	call	_putch
 12960                           
 12961                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
 12962  00108E  0100               	movlb	0	; () banked
 12963  001090  BBC6               	btfsc	printf@flag& (0+255),5,b
 12964  001092  D005               	goto	l9077
 12965                           
 12966                           ; BSR set to: 0
 12967  001094  0E00               	movlw	0
 12968  001096  0100               	movlb	0	; () banked
 12969  001098  6FA9               	movwf	(_printf$2720+1)& (0+255),b
 12970  00109A  0E78               	movlw	120
 12971  00109C  D004               	goto	L9
 12972  00109E                     l9077:
 12973                           
 12974                           ; BSR set to: 0
 12975  00109E  0E00               	movlw	0
 12976  0010A0  0100               	movlb	0	; () banked
 12977  0010A2  6FA9               	movwf	(_printf$2720+1)& (0+255),b
 12978  0010A4  0E58               	movlw	88
 12979  0010A6                     L9:
 12980  0010A6  6FA8               	movwf	_printf$2720& (0+255),b
 12981                           
 12982                           ; BSR set to: 0
 12983                           
 12984                           ; BSR set to: 0
 12985  0010A8  0100               	movlb	0	; () banked
 12986  0010AA  51A8               	movf	_printf$2720& (0+255),w,b
 12987  0010AC  EC9A  F02C         	call	_putch
 12988  0010B0                     l9081:
 12989                           
 12990                           ;doprnt.c: 1412: }
 12991                           ;doprnt.c: 1415: if(width)
 12992  0010B0  0100               	movlb	0	; () banked
 12993  0010B2  51C3               	movf	printf@width& (0+255),w,b
 12994  0010B4  0100               	movlb	0	; () banked
 12995  0010B6  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 12996  0010B8  B4D8               	btfsc	status,2,c
 12997  0010BA  D158               	goto	l9137
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;doprnt.c: 1417: (putch('0') );
 13001                           
 13002                           ; BSR set to: 0
 13003                           
 13004                           ;doprnt.c: 1416: do
 13005  0010BC  0E30               	movlw	48
 13006  0010BE  EC9A  F02C         	call	_putch
 13007                           
 13008                           ;doprnt.c: 1418: while(--width);
 13009  0010C2  0100               	movlb	0	; () banked
 13010  0010C4  07C3               	decf	printf@width& (0+255),f,b
 13011  0010C6  A0D8               	btfss	status,0,c
 13012  0010C8  07C4               	decf	(printf@width+1)& (0+255),f,b
 13013  0010CA  D7F2               	goto	l9081
 13014  0010CC                     l9087:
 13015                           
 13016                           ; BSR set to: 0
 13017                           ;doprnt.c: 1422: {
 13018                           ;doprnt.c: 1424: if(width
 13019                           ;doprnt.c: 1426: && !(flag & 0x08)
 13020                           ;doprnt.c: 1428: )
 13021  0010CC  0100               	movlb	0	; () banked
 13022  0010CE  51C3               	movf	printf@width& (0+255),w,b
 13023  0010D0  0100               	movlb	0	; () banked
 13024  0010D2  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 13025  0010D4  B4D8               	btfsc	status,2,c
 13026  0010D6  D010               	goto	l9095
 13027                           
 13028                           ; BSR set to: 0
 13029  0010D8  0100               	movlb	0	; () banked
 13030  0010DA  B7C6               	btfsc	printf@flag& (0+255),3,b
 13031  0010DC  D00D               	goto	l9095
 13032  0010DE                     l9091:
 13033                           
 13034                           ; BSR set to: 0
 13035                           ;doprnt.c: 1430: (putch(' ') );
 13036  0010DE  0E20               	movlw	32
 13037  0010E0  EC9A  F02C         	call	_putch
 13038                           
 13039                           ;doprnt.c: 1431: while(--width);
 13040  0010E4  0100               	movlb	0	; () banked
 13041  0010E6  07C3               	decf	printf@width& (0+255),f,b
 13042  0010E8  A0D8               	btfss	status,0,c
 13043  0010EA  07C4               	decf	(printf@width+1)& (0+255),f,b
 13044  0010EC  0100               	movlb	0	; () banked
 13045  0010EE  51C3               	movf	printf@width& (0+255),w,b
 13046  0010F0  0100               	movlb	0	; () banked
 13047  0010F2  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 13048  0010F4  A4D8               	btfss	status,2,c
 13049  0010F6  D7F3               	goto	l9091
 13050  0010F8                     l9095:
 13051                           
 13052                           ; BSR set to: 0
 13053                           ;doprnt.c: 1438: if(flag & 0x03)
 13054  0010F8  0E03               	movlw	3
 13055  0010FA  0100               	movlb	0	; () banked
 13056  0010FC  15C6               	andwf	printf@flag& (0+255),w,b
 13057  0010FE  0100               	movlb	0	; () banked
 13058  001100  6F9A               	movwf	??_printf& (0+255),b
 13059  001102  0E00               	movlw	0
 13060  001104  0100               	movlb	0	; () banked
 13061  001106  15C7               	andwf	(printf@flag+1)& (0+255),w,b
 13062  001108  0100               	movlb	0	; () banked
 13063  00110A  6F9B               	movwf	(??_printf+1)& (0+255),b
 13064  00110C  0100               	movlb	0	; () banked
 13065  00110E  519A               	movf	??_printf& (0+255),w,b
 13066  001110  0100               	movlb	0	; () banked
 13067  001112  119B               	iorwf	(??_printf+1)& (0+255),w,b
 13068  001114  B4D8               	btfsc	status,2,c
 13069  001116  D004               	goto	l1486
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;doprnt.c: 1439: (putch('-') );
 13073  001118  0E2D               	movlw	45
 13074  00111A  EC9A  F02C         	call	_putch
 13075  00111E  D006               	goto	l9101
 13076  001120                     l1486:
 13077                           
 13078                           ; BSR set to: 0
 13079                           ;doprnt.c: 1443: else if(flag & 0x01)
 13080  001120  0100               	movlb	0	; () banked
 13081  001122  A1C6               	btfss	printf@flag& (0+255),0,b
 13082  001124  D003               	goto	l9101
 13083                           
 13084                           ; BSR set to: 0
 13085                           ;doprnt.c: 1444: (putch(' ') );
 13086  001126  0E20               	movlw	32
 13087  001128  EC9A  F02C         	call	_putch
 13088  00112C                     l9101:
 13089                           
 13090                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 13091  00112C  0EC0               	movlw	192
 13092  00112E  0100               	movlb	0	; () banked
 13093  001130  6F9A               	movwf	??_printf& (0+255),b
 13094  001132  0E08               	movlw	8
 13095  001134  0100               	movlb	0	; () banked
 13096  001136  6F9B               	movwf	(??_printf+1)& (0+255),b
 13097  001138  C0C6  F09C         	movff	printf@flag,??_printf+2
 13098  00113C  C0C7  F09D         	movff	printf@flag+1,??_printf+3
 13099  001140  0100               	movlb	0	; () banked
 13100  001142  519A               	movf	??_printf& (0+255),w,b
 13101  001144  0100               	movlb	0	; () banked
 13102  001146  179C               	andwf	(??_printf+2)& (0+255),f,b
 13103  001148  0100               	movlb	0	; () banked
 13104  00114A  519B               	movf	(??_printf+1)& (0+255),w,b
 13105  00114C  0100               	movlb	0	; () banked
 13106  00114E  179D               	andwf	(??_printf+3)& (0+255),f,b
 13107  001150  0E40               	movlw	64
 13108  001152  0100               	movlb	0	; () banked
 13109  001154  199C               	xorwf	(??_printf+2)& (0+255),w,b
 13110  001156  E109               	bnz	l9105
 13111  001158  0E08               	movlw	8
 13112  00115A  0100               	movlb	0	; () banked
 13113  00115C  199D               	xorwf	(??_printf+3)& (0+255),w,b
 13114  00115E  A4D8               	btfss	status,2,c
 13115  001160  D004               	goto	l9105
 13116                           
 13117                           ; BSR set to: 0
 13118                           ;doprnt.c: 1449: (putch('0') );
 13119  001162  0E30               	movlw	48
 13120  001164  EC9A  F02C         	call	_putch
 13121  001168  D101               	goto	l9137
 13122  00116A                     l9105:
 13123                           
 13124                           ;doprnt.c: 1450: else
 13125                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 13126  00116A  0EC0               	movlw	192
 13127  00116C  0100               	movlb	0	; () banked
 13128  00116E  6F9A               	movwf	??_printf& (0+255),b
 13129  001170  0E08               	movlw	8
 13130  001172  0100               	movlb	0	; () banked
 13131  001174  6F9B               	movwf	(??_printf+1)& (0+255),b
 13132  001176  C0C6  F09C         	movff	printf@flag,??_printf+2
 13133  00117A  C0C7  F09D         	movff	printf@flag+1,??_printf+3
 13134  00117E  0100               	movlb	0	; () banked
 13135  001180  519A               	movf	??_printf& (0+255),w,b
 13136  001182  0100               	movlb	0	; () banked
 13137  001184  179C               	andwf	(??_printf+2)& (0+255),f,b
 13138  001186  0100               	movlb	0	; () banked
 13139  001188  519B               	movf	(??_printf+1)& (0+255),w,b
 13140  00118A  0100               	movlb	0	; () banked
 13141  00118C  179D               	andwf	(??_printf+3)& (0+255),f,b
 13142  00118E  0E80               	movlw	128
 13143  001190  0100               	movlb	0	; () banked
 13144  001192  199C               	xorwf	(??_printf+2)& (0+255),w,b
 13145  001194  E104               	bnz	u10461
 13146  001196  0E08               	movlw	8
 13147  001198  0100               	movlb	0	; () banked
 13148  00119A  199D               	xorwf	(??_printf+3)& (0+255),w,b
 13149  00119C  A4D8               	btfss	status,2,c
 13150  00119E                     u10461:
 13151  00119E  D0E6               	goto	l9137
 13152                           
 13153                           ; BSR set to: 0
 13154                           ;doprnt.c: 1458: (putch('0') );
 13155  0011A0  0E30               	movlw	48
 13156  0011A2  EC9A  F02C         	call	_putch
 13157                           
 13158                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
 13159  0011A6  0100               	movlb	0	; () banked
 13160  0011A8  BBC6               	btfsc	printf@flag& (0+255),5,b
 13161  0011AA  D005               	goto	l9113
 13162                           
 13163                           ; BSR set to: 0
 13164  0011AC  0E00               	movlw	0
 13165  0011AE  0100               	movlb	0	; () banked
 13166  0011B0  6FAB               	movwf	(_printf$2721+1)& (0+255),b
 13167  0011B2  0E78               	movlw	120
 13168  0011B4  D004               	goto	L10
 13169  0011B6                     l9113:
 13170                           
 13171                           ; BSR set to: 0
 13172  0011B6  0E00               	movlw	0
 13173  0011B8  0100               	movlb	0	; () banked
 13174  0011BA  6FAB               	movwf	(_printf$2721+1)& (0+255),b
 13175  0011BC  0E58               	movlw	88
 13176  0011BE                     L10:
 13177  0011BE  6FAA               	movwf	_printf$2721& (0+255),b
 13178                           
 13179                           ; BSR set to: 0
 13180                           
 13181                           ; BSR set to: 0
 13182  0011C0  0100               	movlb	0	; () banked
 13183  0011C2  51AA               	movf	_printf$2721& (0+255),w,b
 13184  0011C4  EC9A  F02C         	call	_putch
 13185                           
 13186                           ;doprnt.c: 1466: }
 13187                           ;doprnt.c: 1469: }
 13188                           ;doprnt.c: 1474: while(prec--) {
 13189  0011C8  D0D1               	goto	l9137
 13190  0011CA                     l9117:
 13191                           
 13192                           ;doprnt.c: 1486: case 0xC0:
 13193                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13194  0011CA  C0C1  F09A         	movff	printf@prec,??_printf
 13195  0011CE  C0C2  F09B         	movff	printf@prec+1,??_printf+1
 13196  0011D2  0100               	movlb	0	; () banked
 13197  0011D4  90D8               	bcf	status,0,c
 13198  0011D6  379A               	rlcf	??_printf& (0+255),f,b
 13199  0011D8  379B               	rlcf	(??_printf+1)& (0+255),f,b
 13200  0011DA  0100               	movlb	0	; () banked
 13201  0011DC  90D8               	bcf	status,0,c
 13202  0011DE  379A               	rlcf	??_printf& (0+255),f,b
 13203  0011E0  379B               	rlcf	(??_printf+1)& (0+255),f,b
 13204  0011E2  0EA9               	movlw	low _dpowers
 13205  0011E4  0100               	movlb	0	; () banked
 13206  0011E6  259A               	addwf	??_printf& (0+255),w,b
 13207  0011E8  6EF6               	movwf	tblptrl,c
 13208  0011EA  0E78               	movlw	high _dpowers
 13209  0011EC  219B               	addwfc	(??_printf+1)& (0+255),w,b
 13210  0011EE  6EF7               	movwf	tblptrh,c
 13211  0011F0                     	if	0	;There are less than 3 active tblptr bytes
 13212  0011F0                     	endif
 13213  0011F0  0009               	tblrd		*+
 13214  0011F2  CFF5 F01F          	movff	tablat,___lldiv@divisor
 13215  0011F6  0009               	tblrd		*+
 13216  0011F8  CFF5 F020          	movff	tablat,___lldiv@divisor+1
 13217  0011FC  0009               	tblrd		*+
 13218  0011FE  CFF5 F021          	movff	tablat,___lldiv@divisor+2
 13219  001202  000A               	tblrd		*-
 13220  001204  CFF5 F022          	movff	tablat,___lldiv@divisor+3
 13221  001208  C0BD  F01B         	movff	printf@val,___lldiv@dividend
 13222  00120C  C0BE  F01C         	movff	printf@val+1,___lldiv@dividend+1
 13223  001210  C0BF  F01D         	movff	printf@val+2,___lldiv@dividend+2
 13224  001214  C0C0  F01E         	movff	printf@val+3,___lldiv@dividend+3
 13225  001218  ECD5  F028         	call	___lldiv	;wreg free
 13226  00121C  C01B  F060         	movff	?___lldiv,___llmod@dividend
 13227  001220  C01C  F061         	movff	?___lldiv+1,___llmod@dividend+1
 13228  001224  C01D  F062         	movff	?___lldiv+2,___llmod@dividend+2
 13229  001228  C01E  F063         	movff	?___lldiv+3,___llmod@dividend+3
 13230  00122C  0E0A               	movlw	10
 13231  00122E  0100               	movlb	0	; () banked
 13232  001230  6F64               	movwf	___llmod@divisor& (0+255),b
 13233  001232  0E00               	movlw	0
 13234  001234  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
 13235  001236  0E00               	movlw	0
 13236  001238  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 13237  00123A  0E00               	movlw	0
 13238  00123C  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 13239  00123E  ECB7  F027         	call	___llmod	;wreg free
 13240  001242  0100               	movlb	0	; () banked
 13241  001244  5160               	movf	?___llmod& (0+255),w,b
 13242  001246  D07B               	goto	L11
 13243  001248                     l9119:
 13244                           
 13245                           ; BSR set to: 0
 13246                           ;doprnt.c: 1499: {
 13247                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13248  001248  C0BD  F01B         	movff	printf@val,___lldiv@dividend
 13249  00124C  C0BE  F01C         	movff	printf@val+1,___lldiv@dividend+1
 13250  001250  C0BF  F01D         	movff	printf@val+2,___lldiv@dividend+2
 13251  001254  C0C0  F01E         	movff	printf@val+3,___lldiv@dividend+3
 13252  001258  C0C1  F09A         	movff	printf@prec,??_printf
 13253  00125C  C0C2  F09B         	movff	printf@prec+1,??_printf+1
 13254  001260  0100               	movlb	0	; () banked
 13255  001262  90D8               	bcf	status,0,c
 13256  001264  379A               	rlcf	??_printf& (0+255),f,b
 13257  001266  379B               	rlcf	(??_printf+1)& (0+255),f,b
 13258  001268  0100               	movlb	0	; () banked
 13259  00126A  90D8               	bcf	status,0,c
 13260  00126C  379A               	rlcf	??_printf& (0+255),f,b
 13261  00126E  379B               	rlcf	(??_printf+1)& (0+255),f,b
 13262  001270  0E1F               	movlw	low _hexpowers
 13263  001272  0100               	movlb	0	; () banked
 13264  001274  259A               	addwf	??_printf& (0+255),w,b
 13265  001276  6EF6               	movwf	tblptrl,c
 13266  001278  0E79               	movlw	high _hexpowers
 13267  00127A  219B               	addwfc	(??_printf+1)& (0+255),w,b
 13268  00127C  6EF7               	movwf	tblptrh,c
 13269  00127E                     	if	0	;There are less than 3 active tblptr bytes
 13270  00127E                     	endif
 13271  00127E  0009               	tblrd		*+
 13272  001280  CFF5 F01F          	movff	tablat,___lldiv@divisor
 13273  001284  0009               	tblrd		*+
 13274  001286  CFF5 F020          	movff	tablat,___lldiv@divisor+1
 13275  00128A  0009               	tblrd		*+
 13276  00128C  CFF5 F021          	movff	tablat,___lldiv@divisor+2
 13277  001290  000A               	tblrd		*-
 13278  001292  CFF5 F022          	movff	tablat,___lldiv@divisor+3
 13279  001296  ECD5  F028         	call	___lldiv	;wreg free
 13280  00129A  501B               	movf	?___lldiv,w,c
 13281  00129C  0B0F               	andlw	15
 13282  00129E  0100               	movlb	0	; () banked
 13283  0012A0  6FA3               	movwf	printf@idx& (0+255),b
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 13287  0012A2  0100               	movlb	0	; () banked
 13288  0012A4  BBC6               	btfsc	printf@flag& (0+255),5,b
 13289  0012A6  D005               	goto	l9125
 13290                           
 13291                           ; BSR set to: 0
 13292  0012A8  0EC5               	movlw	low STR_55
 13293  0012AA  0100               	movlb	0	; () banked
 13294  0012AC  6FAC               	movwf	_printf$2727& (0+255),b
 13295  0012AE  0E7F               	movlw	high STR_55
 13296  0012B0  D004               	goto	L12
 13297  0012B2                     l9125:
 13298                           
 13299                           ; BSR set to: 0
 13300  0012B2  0EB4               	movlw	low STR_54
 13301  0012B4  0100               	movlb	0	; () banked
 13302  0012B6  6FAC               	movwf	_printf$2727& (0+255),b
 13303  0012B8  0E7F               	movlw	high STR_54
 13304  0012BA                     L12:
 13305  0012BA  0100               	movlb	0	; () banked
 13306  0012BC  6FAD               	movwf	(_printf$2727+1)& (0+255),b
 13307                           
 13308                           ; BSR set to: 0
 13309                           
 13310                           ; BSR set to: 0
 13311  0012BE  0100               	movlb	0	; () banked
 13312  0012C0  51A3               	movf	printf@idx& (0+255),w,b
 13313  0012C2  0D01               	mullw	1
 13314  0012C4  C0AC  F09A         	movff	_printf$2727,??_printf
 13315  0012C8  C0AD  F09B         	movff	_printf$2727+1,??_printf+1
 13316  0012CC  50F3               	movf	prodl,w,c
 13317  0012CE  0100               	movlb	0	; () banked
 13318  0012D0  279A               	addwf	??_printf& (0+255),f,b
 13319  0012D2  50F4               	movf	prodh,w,c
 13320  0012D4  0100               	movlb	0	; () banked
 13321  0012D6  239B               	addwfc	(??_printf+1)& (0+255),f,b
 13322  0012D8  C09A  FFF6         	movff	??_printf,tblptrl
 13323  0012DC  C09B  FFF7         	movff	??_printf+1,tblptrh
 13324  0012E0                     	if	0	;tblptru may be non-zero
 13325  0012E0                     	endif
 13326  0012E0                     	if	0	;tblptru may be non-zero
 13327  0012E0                     	endif
 13328  0012E0  0008               	tblrd		*
 13329  0012E2  CFF5 F0C5          	movff	tablat,printf@c
 13330                           
 13331                           ;doprnt.c: 1508: }
 13332                           ;doprnt.c: 1510: break;
 13333  0012E6  D03E               	goto	l9135
 13334  0012E8                     l9129:
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
 13338  0012E8  C0BD  F01B         	movff	printf@val,___lldiv@dividend
 13339  0012EC  C0BE  F01C         	movff	printf@val+1,___lldiv@dividend+1
 13340  0012F0  C0BF  F01D         	movff	printf@val+2,___lldiv@dividend+2
 13341  0012F4  C0C0  F01E         	movff	printf@val+3,___lldiv@dividend+3
 13342  0012F8  C0C1  F09A         	movff	printf@prec,??_printf
 13343  0012FC  C0C2  F09B         	movff	printf@prec+1,??_printf+1
 13344  001300  0100               	movlb	0	; () banked
 13345  001302  90D8               	bcf	status,0,c
 13346  001304  379A               	rlcf	??_printf& (0+255),f,b
 13347  001306  379B               	rlcf	(??_printf+1)& (0+255),f,b
 13348  001308  0100               	movlb	0	; () banked
 13349  00130A  90D8               	bcf	status,0,c
 13350  00130C  379A               	rlcf	??_printf& (0+255),f,b
 13351  00130E  379B               	rlcf	(??_printf+1)& (0+255),f,b
 13352  001310  0E79               	movlw	low _octpowers
 13353  001312  0100               	movlb	0	; () banked
 13354  001314  259A               	addwf	??_printf& (0+255),w,b
 13355  001316  6EF6               	movwf	tblptrl,c
 13356  001318  0E78               	movlw	high _octpowers
 13357  00131A  219B               	addwfc	(??_printf+1)& (0+255),w,b
 13358  00131C  6EF7               	movwf	tblptrh,c
 13359  00131E                     	if	0	;There are less than 3 active tblptr bytes
 13360  00131E                     	endif
 13361  00131E  0009               	tblrd		*+
 13362  001320  CFF5 F01F          	movff	tablat,___lldiv@divisor
 13363  001324  0009               	tblrd		*+
 13364  001326  CFF5 F020          	movff	tablat,___lldiv@divisor+1
 13365  00132A  0009               	tblrd		*+
 13366  00132C  CFF5 F021          	movff	tablat,___lldiv@divisor+2
 13367  001330  000A               	tblrd		*-
 13368  001332  CFF5 F022          	movff	tablat,___lldiv@divisor+3
 13369  001336  ECD5  F028         	call	___lldiv	;wreg free
 13370  00133A  501B               	movf	?___lldiv,w,c
 13371  00133C  0B07               	andlw	7
 13372  00133E                     L11:
 13373  00133E  0F30               	addlw	48
 13374  001340  0100               	movlb	0	; () banked
 13375  001342  6FC5               	movwf	printf@c& (0+255),b
 13376                           
 13377                           ; BSR set to: 0
 13378                           ;doprnt.c: 1523: }
 13379                           
 13380                           ;doprnt.c: 1520: break;
 13381  001344  D00F               	goto	l9135
 13382  001346                     l9133:
 13383  001346  0100               	movlb	0	; () banked
 13384  001348  51C6               	movf	printf@flag& (0+255),w,b
 13385  00134A  0BC0               	andlw	192
 13386                           
 13387                           ; Switch size 1, requested type "space"
 13388                           ; Number of cases is 4, Range of values is 0 to 192
 13389                           ; switch strategies available:
 13390                           ; Name         Instructions Cycles
 13391                           ; simple_byte           13     7 (average)
 13392                           ;	Chosen strategy is simple_byte
 13393  00134C  0A00               	xorlw	0	; case 0
 13394  00134E  B4D8               	btfsc	status,2,c
 13395  001350  D73C               	goto	l9117
 13396  001352  0A40               	xorlw	64	; case 64
 13397  001354  B4D8               	btfsc	status,2,c
 13398  001356  D7C8               	goto	l9129
 13399  001358  0AC0               	xorlw	192	; case 128
 13400  00135A  B4D8               	btfsc	status,2,c
 13401  00135C  D775               	goto	l9119
 13402  00135E  0A40               	xorlw	64	; case 192
 13403  001360  B4D8               	btfsc	status,2,c
 13404  001362  D733               	goto	l9117
 13405  001364                     l9135:
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;doprnt.c: 1524: (putch(c) );
 13409  001364  0100               	movlb	0	; () banked
 13410  001366  51C5               	movf	printf@c& (0+255),w,b
 13411  001368  EC9A  F02C         	call	_putch
 13412  00136C                     l9137:
 13413  00136C  0100               	movlb	0	; () banked
 13414  00136E  07C1               	decf	printf@prec& (0+255),f,b
 13415  001370  A0D8               	btfss	status,0,c
 13416  001372  07C2               	decf	(printf@prec+1)& (0+255),f,b
 13417  001374  0100               	movlb	0	; () banked
 13418  001376  29C1               	incf	printf@prec& (0+255),w,b
 13419  001378  E1E6               	bnz	l9133
 13420  00137A  0100               	movlb	0	; () banked
 13421  00137C  29C2               	incf	(printf@prec+1)& (0+255),w,b
 13422  00137E  A4D8               	btfss	status,2,c
 13423  001380  D7E2               	goto	l9133
 13424                           
 13425                           ; BSR set to: 0
 13426                           ;doprnt.c: 1525: }
 13427                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
 13428  001382  0100               	movlb	0	; () banked
 13429  001384  A7C6               	btfss	printf@flag& (0+255),3,b
 13430  001386  D017               	goto	l9145
 13431                           
 13432                           ; BSR set to: 0
 13433  001388  0100               	movlb	0	; () banked
 13434  00138A  BFC4               	btfsc	(printf@width+1)& (0+255),7,b
 13435  00138C  D014               	goto	l9145
 13436  00138E  0100               	movlb	0	; () banked
 13437  001390  51C4               	movf	(printf@width+1)& (0+255),w,b
 13438  001392  E104               	bnz	l9141
 13439  001394  0100               	movlb	0	; () banked
 13440  001396  05C3               	decf	printf@width& (0+255),w,b
 13441  001398  A0D8               	btfss	status,0,c
 13442  00139A  D00D               	goto	l9145
 13443  00139C                     l9141:
 13444                           
 13445                           ; BSR set to: 0
 13446                           ;doprnt.c: 1530: (putch(' ') );
 13447  00139C  0E20               	movlw	32
 13448  00139E  EC9A  F02C         	call	_putch
 13449                           
 13450                           ;doprnt.c: 1531: while(--width);
 13451  0013A2  0100               	movlb	0	; () banked
 13452  0013A4  07C3               	decf	printf@width& (0+255),f,b
 13453  0013A6  A0D8               	btfss	status,0,c
 13454  0013A8  07C4               	decf	(printf@width+1)& (0+255),f,b
 13455  0013AA  0100               	movlb	0	; () banked
 13456  0013AC  51C3               	movf	printf@width& (0+255),w,b
 13457  0013AE  0100               	movlb	0	; () banked
 13458  0013B0  11C4               	iorwf	(printf@width+1)& (0+255),w,b
 13459  0013B2  A4D8               	btfss	status,2,c
 13460  0013B4  D7F3               	goto	l9141
 13461  0013B6                     l9145:
 13462  0013B6  C08F  FFF6         	movff	printf@f,tblptrl
 13463  0013BA  C090  FFF7         	movff	printf@f+1,tblptrh
 13464  0013BE  0100               	movlb	0	; () banked
 13465  0013C0  4B8F               	infsnz	printf@f& (0+255),f,b
 13466  0013C2  2B90               	incf	(printf@f+1)& (0+255),f,b
 13467  0013C4                     	if	0	;tblptru may be non-zero
 13468  0013C4                     	endif
 13469  0013C4                     	if	0	;tblptru may be non-zero
 13470  0013C4                     	endif
 13471  0013C4  0008               	tblrd		*
 13472  0013C6  CFF5 F0C5          	movff	tablat,printf@c
 13473  0013CA  0100               	movlb	0	; () banked
 13474  0013CC  51C5               	movf	printf@c& (0+255),w,b
 13475  0013CE  B4D8               	btfsc	status,2,c
 13476  0013D0  0012               	return	
 13477  0013D2  EF78  F000         	goto	l8627
 13478  0013D6                     __end_of_printf:
 13479                           	opt stack 0
 13480                           tblptru	equ	0xFF8
 13481                           tblptrh	equ	0xFF7
 13482                           tblptrl	equ	0xFF6
 13483                           tablat	equ	0xFF5
 13484                           prodh	equ	0xFF4
 13485                           prodl	equ	0xFF3
 13486                           intcon	equ	0xFF2
 13487                           indf0	equ	0xFEF
 13488                           postinc0	equ	0xFEE
 13489                           fsr0h	equ	0xFEA
 13490                           fsr0l	equ	0xFE9
 13491                           wreg	equ	0xFE8
 13492                           postinc1	equ	0xFE6
 13493                           postdec1	equ	0xFE5
 13494                           plusw1	equ	0xFE3
 13495                           fsr1h	equ	0xFE2
 13496                           fsr1l	equ	0xFE1
 13497                           indf2	equ	0xFDF
 13498                           postinc2	equ	0xFDE
 13499                           postdec2	equ	0xFDD
 13500                           plusw2	equ	0xFDB
 13501                           fsr2h	equ	0xFDA
 13502                           fsr2l	equ	0xFD9
 13503                           status	equ	0xFD8
 13504                           
 13505 ;; *************** function _scale *****************
 13506 ;; Defined at:
 13507 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 13508 ;; Parameters:    Size  Location     Type
 13509 ;;  scl             1    wreg     char 
 13510 ;; Auto vars:     Size  Location     Type
 13511 ;;  scl             1   25[BANK0 ] char 
 13512 ;; Return value:  Size  Location     Type
 13513 ;;                  3   19[BANK0 ] char 
 13514 ;; Registers used:
 13515 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13516 ;; Tracked objects:
 13517 ;;		On entry : 0/0
 13518 ;;		On exit  : 0/0
 13519 ;;		Unchanged: 0/0
 13520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13521 ;;      Params:         0       3       0       0       0       0       0
 13522 ;;      Locals:         0       4       0       0       0       0       0
 13523 ;;      Temps:          0       0       0       0       0       0       0
 13524 ;;      Totals:         0       7       0       0       0       0       0
 13525 ;;Total ram usage:        7 bytes
 13526 ;; Hardware stack levels used:    1
 13527 ;; Hardware stack levels required when called:    6
 13528 ;; This function calls:
 13529 ;;		___awdiv
 13530 ;;		___awmod
 13531 ;;		___ftmul
 13532 ;;		___wmul
 13533 ;; This function is called by:
 13534 ;;		_printf
 13535 ;; This function uses a non-reentrant model
 13536 ;;
 13537                           
 13538                           	psect	text25
 13539  002E02                     __ptext25:
 13540                           	opt stack 0
 13541  002E02                     _scale:
 13542                           	opt stack 22
 13543                           
 13544                           ; BSR set to: 0
 13545                           ;incstack = 0
 13546                           ;scale@scl stored from wreg
 13547  002E02  0100               	movlb	0	; () banked
 13548  002E04  6F79               	movwf	scale@scl& (0+255),b
 13549                           
 13550                           ;doprnt.c: 428: if(scl < 0) {
 13551  002E06  0100               	movlb	0	; () banked
 13552  002E08  AF79               	btfss	scale@scl& (0+255),7,b
 13553  002E0A  D119               	goto	l8349
 13554                           
 13555                           ; BSR set to: 0
 13556                           ;doprnt.c: 429: scl = -scl;
 13557  002E0C  0100               	movlb	0	; () banked
 13558  002E0E  6D79               	negf	scale@scl& (0+255),b
 13559                           
 13560                           ;doprnt.c: 430: if(scl>=110)
 13561  002E10  0100               	movlb	0	; () banked
 13562  002E12  5179               	movf	scale@scl& (0+255),w,b
 13563  002E14  0A80               	xorlw	128
 13564  002E16  0F12               	addlw	-238
 13565  002E18  A0D8               	btfss	status,0,c
 13566  002E1A  D0A1               	goto	l8339
 13567                           
 13568                           ; BSR set to: 0
 13569                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13570  002E1C  0E00               	movlw	0
 13571  002E1E  0100               	movlb	0	; () banked
 13572  002E20  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13573  002E22  0E03               	movlw	3
 13574  002E24  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13575  002E26  0E00               	movlw	0
 13576  002E28  6E24               	movwf	___awdiv@divisor+1,c
 13577  002E2A  0E0A               	movlw	10
 13578  002E2C  6E23               	movwf	___awdiv@divisor,c
 13579  002E2E  0E00               	movlw	0
 13580  002E30  6E1E               	movwf	___awmod@divisor+1,c
 13581  002E32  0E64               	movlw	100
 13582  002E34  6E1D               	movwf	___awmod@divisor,c
 13583  002E36  0100               	movlb	0	; () banked
 13584  002E38  5179               	movf	scale@scl& (0+255),w,b
 13585  002E3A  6E1B               	movwf	___awmod@dividend,c
 13586  002E3C  6A1C               	clrf	___awmod@dividend+1,c
 13587  002E3E  BE1B               	btfsc	___awmod@dividend,7,c
 13588  002E40  061C               	decf	___awmod@dividend+1,f,c
 13589  002E42  EC56  F029         	call	___awmod	;wreg free
 13590  002E46  C01B  F021         	movff	?___awmod,___awdiv@dividend
 13591  002E4A  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
 13592  002E4E  EC93  F028         	call	___awdiv	;wreg free
 13593  002E52  0E09               	movlw	9
 13594  002E54  2421               	addwf	?___awdiv,w,c
 13595  002E56  0100               	movlb	0	; () banked
 13596  002E58  6F60               	movwf	___wmul@multiplier& (0+255),b
 13597  002E5A  0E00               	movlw	0
 13598  002E5C  2022               	addwfc	?___awdiv+1,w,c
 13599  002E5E  0100               	movlb	0	; () banked
 13600  002E60  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 13601  002E62  EC61  F02B         	call	___wmul	;wreg free
 13602  002E66  0ED1               	movlw	low __npowers_
 13603  002E68  0100               	movlb	0	; () banked
 13604  002E6A  2560               	addwf	?___wmul& (0+255),w,b
 13605  002E6C  6EF6               	movwf	tblptrl,c
 13606  002E6E  0E78               	movlw	high __npowers_
 13607  002E70  0100               	movlb	0	; () banked
 13608  002E72  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13609  002E74  6EF7               	movwf	tblptrh,c
 13610  002E76                     	if	0	;There are less than 3 active tblptr bytes
 13611  002E76                     	endif
 13612  002E76  0009               	tblrd		*+
 13613  002E78  CFF5 F067          	movff	tablat,___ftmul@f2
 13614  002E7C  0009               	tblrd		*+
 13615  002E7E  CFF5 F068          	movff	tablat,___ftmul@f2+1
 13616  002E82  000A               	tblrd		*-
 13617  002E84  CFF5 F069          	movff	tablat,___ftmul@f2+2
 13618  002E88  0E00               	movlw	0
 13619  002E8A  6E24               	movwf	___awdiv@divisor+1,c
 13620  002E8C  0E64               	movlw	100
 13621  002E8E  6E23               	movwf	___awdiv@divisor,c
 13622  002E90  0100               	movlb	0	; () banked
 13623  002E92  5179               	movf	scale@scl& (0+255),w,b
 13624  002E94  6E21               	movwf	___awdiv@dividend,c
 13625  002E96  6A22               	clrf	___awdiv@dividend+1,c
 13626  002E98  BE21               	btfsc	___awdiv@dividend,7,c
 13627  002E9A  0622               	decf	___awdiv@dividend+1,f,c
 13628  002E9C  EC93  F028         	call	___awdiv	;wreg free
 13629  002EA0  0E12               	movlw	18
 13630  002EA2  2421               	addwf	?___awdiv,w,c
 13631  002EA4  0100               	movlb	0	; () banked
 13632  002EA6  6F60               	movwf	___wmul@multiplier& (0+255),b
 13633  002EA8  0E00               	movlw	0
 13634  002EAA  2022               	addwfc	?___awdiv+1,w,c
 13635  002EAC  0100               	movlb	0	; () banked
 13636  002EAE  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 13637  002EB0  0E00               	movlw	0
 13638  002EB2  0100               	movlb	0	; () banked
 13639  002EB4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13640  002EB6  0E03               	movlw	3
 13641  002EB8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13642  002EBA  EC61  F02B         	call	___wmul	;wreg free
 13643  002EBE  0ED1               	movlw	low __npowers_
 13644  002EC0  0100               	movlb	0	; () banked
 13645  002EC2  2560               	addwf	?___wmul& (0+255),w,b
 13646  002EC4  6EF6               	movwf	tblptrl,c
 13647  002EC6  0E78               	movlw	high __npowers_
 13648  002EC8  0100               	movlb	0	; () banked
 13649  002ECA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13650  002ECC  6EF7               	movwf	tblptrh,c
 13651  002ECE                     	if	0	;There are less than 3 active tblptr bytes
 13652  002ECE                     	endif
 13653  002ECE  0009               	tblrd		*+
 13654  002ED0  CFF5 F064          	movff	tablat,___ftmul@f1
 13655  002ED4  0009               	tblrd		*+
 13656  002ED6  CFF5 F065          	movff	tablat,___ftmul@f1+1
 13657  002EDA  000A               	tblrd		*-
 13658  002EDC  CFF5 F066          	movff	tablat,___ftmul@f1+2
 13659  002EE0  ECCF  F01D         	call	___ftmul	;wreg free
 13660  002EE4  C064  F076         	movff	?___ftmul,_scale$3457
 13661  002EE8  C065  F077         	movff	?___ftmul+1,_scale$3457+1
 13662  002EEC  C066  F078         	movff	?___ftmul+2,_scale$3457+2
 13663                           
 13664                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 13665  002EF0  C076  F064         	movff	_scale$3457,___ftmul@f1
 13666  002EF4  C077  F065         	movff	_scale$3457+1,___ftmul@f1+1
 13667  002EF8  C078  F066         	movff	_scale$3457+2,___ftmul@f1+2
 13668  002EFC  0E00               	movlw	0
 13669  002EFE  0100               	movlb	0	; () banked
 13670  002F00  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13671  002F02  0E03               	movlw	3
 13672  002F04  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13673  002F06  0E00               	movlw	0
 13674  002F08  6E1E               	movwf	___awmod@divisor+1,c
 13675  002F0A  0E0A               	movlw	10
 13676  002F0C  6E1D               	movwf	___awmod@divisor,c
 13677  002F0E  0100               	movlb	0	; () banked
 13678  002F10  5179               	movf	scale@scl& (0+255),w,b
 13679  002F12  6E1B               	movwf	___awmod@dividend,c
 13680  002F14  6A1C               	clrf	___awmod@dividend+1,c
 13681  002F16  BE1B               	btfsc	___awmod@dividend,7,c
 13682  002F18  061C               	decf	___awmod@dividend+1,f,c
 13683  002F1A  EC56  F029         	call	___awmod	;wreg free
 13684  002F1E  C01B  F060         	movff	?___awmod,___wmul@multiplier
 13685  002F22  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
 13686  002F26  EC61  F02B         	call	___wmul	;wreg free
 13687  002F2A  0ED1               	movlw	low __npowers_
 13688  002F2C  0100               	movlb	0	; () banked
 13689  002F2E  2560               	addwf	?___wmul& (0+255),w,b
 13690  002F30  6EF6               	movwf	tblptrl,c
 13691  002F32  0E78               	movlw	high __npowers_
 13692  002F34  0100               	movlb	0	; () banked
 13693  002F36  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13694  002F38  6EF7               	movwf	tblptrh,c
 13695  002F3A                     	if	0	;There are less than 3 active tblptr bytes
 13696  002F3A                     	endif
 13697  002F3A  0009               	tblrd		*+
 13698  002F3C  CFF5 F067          	movff	tablat,___ftmul@f2
 13699  002F40  0009               	tblrd		*+
 13700  002F42  CFF5 F068          	movff	tablat,___ftmul@f2+1
 13701  002F46  000A               	tblrd		*-
 13702  002F48  CFF5 F069          	movff	tablat,___ftmul@f2+2
 13703  002F4C  ECCF  F01D         	call	___ftmul	;wreg free
 13704  002F50  C064  F073         	movff	?___ftmul,?_scale
 13705  002F54  C065  F074         	movff	?___ftmul+1,?_scale+1
 13706  002F58  C066  F075         	movff	?___ftmul+2,?_scale+2
 13707  002F5C  0012               	return	
 13708  002F5E                     l8339:
 13709                           
 13710                           ;doprnt.c: 432: else if(scl > 10)
 13711  002F5E  0100               	movlb	0	; () banked
 13712  002F60  5179               	movf	scale@scl& (0+255),w,b
 13713  002F62  0A80               	xorlw	128
 13714  002F64  0F75               	addlw	-139
 13715  002F66  A0D8               	btfss	status,0,c
 13716  002F68  D057               	goto	l8345
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 13720  002F6A  0E00               	movlw	0
 13721  002F6C  6E24               	movwf	___awdiv@divisor+1,c
 13722  002F6E  0E0A               	movlw	10
 13723  002F70  6E23               	movwf	___awdiv@divisor,c
 13724  002F72  0100               	movlb	0	; () banked
 13725  002F74  5179               	movf	scale@scl& (0+255),w,b
 13726  002F76  6E21               	movwf	___awdiv@dividend,c
 13727  002F78  6A22               	clrf	___awdiv@dividend+1,c
 13728  002F7A  BE21               	btfsc	___awdiv@dividend,7,c
 13729  002F7C  0622               	decf	___awdiv@dividend+1,f,c
 13730  002F7E  EC93  F028         	call	___awdiv	;wreg free
 13731  002F82  0E09               	movlw	9
 13732  002F84  2421               	addwf	?___awdiv,w,c
 13733  002F86  0100               	movlb	0	; () banked
 13734  002F88  6F60               	movwf	___wmul@multiplier& (0+255),b
 13735  002F8A  0E00               	movlw	0
 13736  002F8C  2022               	addwfc	?___awdiv+1,w,c
 13737  002F8E  0100               	movlb	0	; () banked
 13738  002F90  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 13739  002F92  0E00               	movlw	0
 13740  002F94  0100               	movlb	0	; () banked
 13741  002F96  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13742  002F98  0E03               	movlw	3
 13743  002F9A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13744  002F9C  EC61  F02B         	call	___wmul	;wreg free
 13745  002FA0  0ED1               	movlw	low __npowers_
 13746  002FA2  0100               	movlb	0	; () banked
 13747  002FA4  2560               	addwf	?___wmul& (0+255),w,b
 13748  002FA6  6EF6               	movwf	tblptrl,c
 13749  002FA8  0E78               	movlw	high __npowers_
 13750  002FAA  0100               	movlb	0	; () banked
 13751  002FAC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13752  002FAE  6EF7               	movwf	tblptrh,c
 13753  002FB0                     	if	0	;There are less than 3 active tblptr bytes
 13754  002FB0                     	endif
 13755  002FB0  0009               	tblrd		*+
 13756  002FB2  CFF5 F064          	movff	tablat,___ftmul@f1
 13757  002FB6  0009               	tblrd		*+
 13758  002FB8  CFF5 F065          	movff	tablat,___ftmul@f1+1
 13759  002FBC  000A               	tblrd		*-
 13760  002FBE  CFF5 F066          	movff	tablat,___ftmul@f1+2
 13761  002FC2  0E00               	movlw	0
 13762  002FC4  0100               	movlb	0	; () banked
 13763  002FC6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13764  002FC8  0E03               	movlw	3
 13765  002FCA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13766  002FCC  0E00               	movlw	0
 13767  002FCE  6E1E               	movwf	___awmod@divisor+1,c
 13768  002FD0  0E0A               	movlw	10
 13769  002FD2  6E1D               	movwf	___awmod@divisor,c
 13770  002FD4  0100               	movlb	0	; () banked
 13771  002FD6  5179               	movf	scale@scl& (0+255),w,b
 13772  002FD8  6E1B               	movwf	___awmod@dividend,c
 13773  002FDA  6A1C               	clrf	___awmod@dividend+1,c
 13774  002FDC  BE1B               	btfsc	___awmod@dividend,7,c
 13775  002FDE  061C               	decf	___awmod@dividend+1,f,c
 13776  002FE0  EC56  F029         	call	___awmod	;wreg free
 13777  002FE4  C01B  F060         	movff	?___awmod,___wmul@multiplier
 13778  002FE8  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
 13779  002FEC  EC61  F02B         	call	___wmul	;wreg free
 13780  002FF0  0ED1               	movlw	low __npowers_
 13781  002FF2  0100               	movlb	0	; () banked
 13782  002FF4  2560               	addwf	?___wmul& (0+255),w,b
 13783  002FF6  6EF6               	movwf	tblptrl,c
 13784  002FF8  0E78               	movlw	high __npowers_
 13785  002FFA  0100               	movlb	0	; () banked
 13786  002FFC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13787  002FFE  6EF7               	movwf	tblptrh,c
 13788  003000                     	if	0	;There are less than 3 active tblptr bytes
 13789  003000                     	endif
 13790  003000  0009               	tblrd		*+
 13791  003002  CFF5 F067          	movff	tablat,___ftmul@f2
 13792  003006  0009               	tblrd		*+
 13793  003008  CFF5 F068          	movff	tablat,___ftmul@f2+1
 13794  00300C  000A               	tblrd		*-
 13795  00300E  CFF5 F069          	movff	tablat,___ftmul@f2+2
 13796  003012  ECCF  F01D         	call	___ftmul	;wreg free
 13797  003016  D79C               	goto	L13
 13798  003018                     l8345:
 13799                           
 13800                           ;doprnt.c: 434: return _npowers_[scl];
 13801  003018  0100               	movlb	0	; () banked
 13802  00301A  5179               	movf	scale@scl& (0+255),w,b
 13803  00301C  0D03               	mullw	3
 13804  00301E  0ED1               	movlw	low __npowers_
 13805  003020  24F3               	addwf	prodl,w,c
 13806  003022  6EF6               	movwf	tblptrl,c
 13807  003024  0E78               	movlw	high __npowers_
 13808  003026  20F4               	addwfc	prodh,w,c
 13809  003028  6EF7               	movwf	tblptrh,c
 13810  00302A                     	if	0	;There are less than 3 active tblptr bytes
 13811  00302A                     	endif
 13812  00302A  0009               	tblrd		*+
 13813  00302C  CFF5 F073          	movff	tablat,?_scale
 13814  003030  0009               	tblrd		*+
 13815  003032  CFF5 F074          	movff	tablat,?_scale+1
 13816  003036  000A               	tblrd		*-
 13817  003038  CFF5 F075          	movff	tablat,?_scale+2
 13818                           
 13819                           ; BSR set to: 0
 13820  00303C  0012               	return	
 13821  00303E                     l8349:
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;doprnt.c: 435: }
 13825                           ;doprnt.c: 436: if(scl>=110)
 13826  00303E  0100               	movlb	0	; () banked
 13827  003040  5179               	movf	scale@scl& (0+255),w,b
 13828  003042  0A80               	xorlw	128
 13829  003044  0F12               	addlw	-238
 13830  003046  A0D8               	btfss	status,0,c
 13831  003048  D0A1               	goto	l8357
 13832                           
 13833                           ; BSR set to: 0
 13834                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13835  00304A  0E00               	movlw	0
 13836  00304C  0100               	movlb	0	; () banked
 13837  00304E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13838  003050  0E03               	movlw	3
 13839  003052  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13840  003054  0E00               	movlw	0
 13841  003056  6E24               	movwf	___awdiv@divisor+1,c
 13842  003058  0E0A               	movlw	10
 13843  00305A  6E23               	movwf	___awdiv@divisor,c
 13844  00305C  0E00               	movlw	0
 13845  00305E  6E1E               	movwf	___awmod@divisor+1,c
 13846  003060  0E64               	movlw	100
 13847  003062  6E1D               	movwf	___awmod@divisor,c
 13848  003064  0100               	movlb	0	; () banked
 13849  003066  5179               	movf	scale@scl& (0+255),w,b
 13850  003068  6E1B               	movwf	___awmod@dividend,c
 13851  00306A  6A1C               	clrf	___awmod@dividend+1,c
 13852  00306C  BE1B               	btfsc	___awmod@dividend,7,c
 13853  00306E  061C               	decf	___awmod@dividend+1,f,c
 13854  003070  EC56  F029         	call	___awmod	;wreg free
 13855  003074  C01B  F021         	movff	?___awmod,___awdiv@dividend
 13856  003078  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
 13857  00307C  EC93  F028         	call	___awdiv	;wreg free
 13858  003080  0E09               	movlw	9
 13859  003082  2421               	addwf	?___awdiv,w,c
 13860  003084  0100               	movlb	0	; () banked
 13861  003086  6F60               	movwf	___wmul@multiplier& (0+255),b
 13862  003088  0E00               	movlw	0
 13863  00308A  2022               	addwfc	?___awdiv+1,w,c
 13864  00308C  0100               	movlb	0	; () banked
 13865  00308E  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 13866  003090  EC61  F02B         	call	___wmul	;wreg free
 13867  003094  0EF8               	movlw	low __powers_
 13868  003096  0100               	movlb	0	; () banked
 13869  003098  2560               	addwf	?___wmul& (0+255),w,b
 13870  00309A  6EF6               	movwf	tblptrl,c
 13871  00309C  0E78               	movlw	high __powers_
 13872  00309E  0100               	movlb	0	; () banked
 13873  0030A0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13874  0030A2  6EF7               	movwf	tblptrh,c
 13875  0030A4                     	if	0	;There are less than 3 active tblptr bytes
 13876  0030A4                     	endif
 13877  0030A4  0009               	tblrd		*+
 13878  0030A6  CFF5 F067          	movff	tablat,___ftmul@f2
 13879  0030AA  0009               	tblrd		*+
 13880  0030AC  CFF5 F068          	movff	tablat,___ftmul@f2+1
 13881  0030B0  000A               	tblrd		*-
 13882  0030B2  CFF5 F069          	movff	tablat,___ftmul@f2+2
 13883  0030B6  0E00               	movlw	0
 13884  0030B8  6E24               	movwf	___awdiv@divisor+1,c
 13885  0030BA  0E64               	movlw	100
 13886  0030BC  6E23               	movwf	___awdiv@divisor,c
 13887  0030BE  0100               	movlb	0	; () banked
 13888  0030C0  5179               	movf	scale@scl& (0+255),w,b
 13889  0030C2  6E21               	movwf	___awdiv@dividend,c
 13890  0030C4  6A22               	clrf	___awdiv@dividend+1,c
 13891  0030C6  BE21               	btfsc	___awdiv@dividend,7,c
 13892  0030C8  0622               	decf	___awdiv@dividend+1,f,c
 13893  0030CA  EC93  F028         	call	___awdiv	;wreg free
 13894  0030CE  0E12               	movlw	18
 13895  0030D0  2421               	addwf	?___awdiv,w,c
 13896  0030D2  0100               	movlb	0	; () banked
 13897  0030D4  6F60               	movwf	___wmul@multiplier& (0+255),b
 13898  0030D6  0E00               	movlw	0
 13899  0030D8  2022               	addwfc	?___awdiv+1,w,c
 13900  0030DA  0100               	movlb	0	; () banked
 13901  0030DC  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 13902  0030DE  0E00               	movlw	0
 13903  0030E0  0100               	movlb	0	; () banked
 13904  0030E2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13905  0030E4  0E03               	movlw	3
 13906  0030E6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13907  0030E8  EC61  F02B         	call	___wmul	;wreg free
 13908  0030EC  0EF8               	movlw	low __powers_
 13909  0030EE  0100               	movlb	0	; () banked
 13910  0030F0  2560               	addwf	?___wmul& (0+255),w,b
 13911  0030F2  6EF6               	movwf	tblptrl,c
 13912  0030F4  0E78               	movlw	high __powers_
 13913  0030F6  0100               	movlb	0	; () banked
 13914  0030F8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13915  0030FA  6EF7               	movwf	tblptrh,c
 13916  0030FC                     	if	0	;There are less than 3 active tblptr bytes
 13917  0030FC                     	endif
 13918  0030FC  0009               	tblrd		*+
 13919  0030FE  CFF5 F064          	movff	tablat,___ftmul@f1
 13920  003102  0009               	tblrd		*+
 13921  003104  CFF5 F065          	movff	tablat,___ftmul@f1+1
 13922  003108  000A               	tblrd		*-
 13923  00310A  CFF5 F066          	movff	tablat,___ftmul@f1+2
 13924  00310E  ECCF  F01D         	call	___ftmul	;wreg free
 13925  003112  C064  F076         	movff	?___ftmul,_scale$3457
 13926  003116  C065  F077         	movff	?___ftmul+1,_scale$3457+1
 13927  00311A  C066  F078         	movff	?___ftmul+2,_scale$3457+2
 13928                           
 13929                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 13930  00311E  C076  F064         	movff	_scale$3457,___ftmul@f1
 13931  003122  C077  F065         	movff	_scale$3457+1,___ftmul@f1+1
 13932  003126  C078  F066         	movff	_scale$3457+2,___ftmul@f1+2
 13933  00312A  0E00               	movlw	0
 13934  00312C  0100               	movlb	0	; () banked
 13935  00312E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13936  003130  0E03               	movlw	3
 13937  003132  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13938  003134  0E00               	movlw	0
 13939  003136  6E1E               	movwf	___awmod@divisor+1,c
 13940  003138  0E0A               	movlw	10
 13941  00313A  6E1D               	movwf	___awmod@divisor,c
 13942  00313C  0100               	movlb	0	; () banked
 13943  00313E  5179               	movf	scale@scl& (0+255),w,b
 13944  003140  6E1B               	movwf	___awmod@dividend,c
 13945  003142  6A1C               	clrf	___awmod@dividend+1,c
 13946  003144  BE1B               	btfsc	___awmod@dividend,7,c
 13947  003146  061C               	decf	___awmod@dividend+1,f,c
 13948  003148  EC56  F029         	call	___awmod	;wreg free
 13949  00314C  C01B  F060         	movff	?___awmod,___wmul@multiplier
 13950  003150  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
 13951  003154  EC61  F02B         	call	___wmul	;wreg free
 13952  003158  0EF8               	movlw	low __powers_
 13953  00315A  0100               	movlb	0	; () banked
 13954  00315C  2560               	addwf	?___wmul& (0+255),w,b
 13955  00315E  6EF6               	movwf	tblptrl,c
 13956  003160  0E78               	movlw	high __powers_
 13957  003162  0100               	movlb	0	; () banked
 13958  003164  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13959  003166  6EF7               	movwf	tblptrh,c
 13960  003168                     	if	0	;There are less than 3 active tblptr bytes
 13961  003168                     	endif
 13962  003168  0009               	tblrd		*+
 13963  00316A  CFF5 F067          	movff	tablat,___ftmul@f2
 13964  00316E  0009               	tblrd		*+
 13965  003170  CFF5 F068          	movff	tablat,___ftmul@f2+1
 13966  003174  000A               	tblrd		*-
 13967  003176  CFF5 F069          	movff	tablat,___ftmul@f2+2
 13968  00317A  ECCF  F01D         	call	___ftmul	;wreg free
 13969  00317E  C064  F073         	movff	?___ftmul,?_scale
 13970  003182  C065  F074         	movff	?___ftmul+1,?_scale+1
 13971  003186  C066  F075         	movff	?___ftmul+2,?_scale+2
 13972  00318A  0012               	return	
 13973  00318C                     l8357:
 13974                           
 13975                           ;doprnt.c: 438: else if(scl > 10)
 13976  00318C  0100               	movlb	0	; () banked
 13977  00318E  5179               	movf	scale@scl& (0+255),w,b
 13978  003190  0A80               	xorlw	128
 13979  003192  0F75               	addlw	-139
 13980  003194  A0D8               	btfss	status,0,c
 13981  003196  D057               	goto	l8363
 13982                           
 13983                           ; BSR set to: 0
 13984                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 13985  003198  0E00               	movlw	0
 13986  00319A  6E24               	movwf	___awdiv@divisor+1,c
 13987  00319C  0E0A               	movlw	10
 13988  00319E  6E23               	movwf	___awdiv@divisor,c
 13989  0031A0  0100               	movlb	0	; () banked
 13990  0031A2  5179               	movf	scale@scl& (0+255),w,b
 13991  0031A4  6E21               	movwf	___awdiv@dividend,c
 13992  0031A6  6A22               	clrf	___awdiv@dividend+1,c
 13993  0031A8  BE21               	btfsc	___awdiv@dividend,7,c
 13994  0031AA  0622               	decf	___awdiv@dividend+1,f,c
 13995  0031AC  EC93  F028         	call	___awdiv	;wreg free
 13996  0031B0  0E09               	movlw	9
 13997  0031B2  2421               	addwf	?___awdiv,w,c
 13998  0031B4  0100               	movlb	0	; () banked
 13999  0031B6  6F60               	movwf	___wmul@multiplier& (0+255),b
 14000  0031B8  0E00               	movlw	0
 14001  0031BA  2022               	addwfc	?___awdiv+1,w,c
 14002  0031BC  0100               	movlb	0	; () banked
 14003  0031BE  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 14004  0031C0  0E00               	movlw	0
 14005  0031C2  0100               	movlb	0	; () banked
 14006  0031C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14007  0031C6  0E03               	movlw	3
 14008  0031C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14009  0031CA  EC61  F02B         	call	___wmul	;wreg free
 14010  0031CE  0EF8               	movlw	low __powers_
 14011  0031D0  0100               	movlb	0	; () banked
 14012  0031D2  2560               	addwf	?___wmul& (0+255),w,b
 14013  0031D4  6EF6               	movwf	tblptrl,c
 14014  0031D6  0E78               	movlw	high __powers_
 14015  0031D8  0100               	movlb	0	; () banked
 14016  0031DA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14017  0031DC  6EF7               	movwf	tblptrh,c
 14018  0031DE                     	if	0	;There are less than 3 active tblptr bytes
 14019  0031DE                     	endif
 14020  0031DE  0009               	tblrd		*+
 14021  0031E0  CFF5 F064          	movff	tablat,___ftmul@f1
 14022  0031E4  0009               	tblrd		*+
 14023  0031E6  CFF5 F065          	movff	tablat,___ftmul@f1+1
 14024  0031EA  000A               	tblrd		*-
 14025  0031EC  CFF5 F066          	movff	tablat,___ftmul@f1+2
 14026  0031F0  0E00               	movlw	0
 14027  0031F2  0100               	movlb	0	; () banked
 14028  0031F4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14029  0031F6  0E03               	movlw	3
 14030  0031F8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14031  0031FA  0E00               	movlw	0
 14032  0031FC  6E1E               	movwf	___awmod@divisor+1,c
 14033  0031FE  0E0A               	movlw	10
 14034  003200  6E1D               	movwf	___awmod@divisor,c
 14035  003202  0100               	movlb	0	; () banked
 14036  003204  5179               	movf	scale@scl& (0+255),w,b
 14037  003206  6E1B               	movwf	___awmod@dividend,c
 14038  003208  6A1C               	clrf	___awmod@dividend+1,c
 14039  00320A  BE1B               	btfsc	___awmod@dividend,7,c
 14040  00320C  061C               	decf	___awmod@dividend+1,f,c
 14041  00320E  EC56  F029         	call	___awmod	;wreg free
 14042  003212  C01B  F060         	movff	?___awmod,___wmul@multiplier
 14043  003216  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
 14044  00321A  EC61  F02B         	call	___wmul	;wreg free
 14045  00321E  0EF8               	movlw	low __powers_
 14046  003220  0100               	movlb	0	; () banked
 14047  003222  2560               	addwf	?___wmul& (0+255),w,b
 14048  003224  6EF6               	movwf	tblptrl,c
 14049  003226  0E78               	movlw	high __powers_
 14050  003228  0100               	movlb	0	; () banked
 14051  00322A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14052  00322C  6EF7               	movwf	tblptrh,c
 14053  00322E                     	if	0	;There are less than 3 active tblptr bytes
 14054  00322E                     	endif
 14055  00322E  0009               	tblrd		*+
 14056  003230  CFF5 F067          	movff	tablat,___ftmul@f2
 14057  003234  0009               	tblrd		*+
 14058  003236  CFF5 F068          	movff	tablat,___ftmul@f2+1
 14059  00323A  000A               	tblrd		*-
 14060  00323C  CFF5 F069          	movff	tablat,___ftmul@f2+2
 14061  003240  ECCF  F01D         	call	___ftmul	;wreg free
 14062  003244  D79C               	goto	L14
 14063  003246                     l8363:
 14064                           
 14065                           ;doprnt.c: 440: return _powers_[scl];
 14066  003246  0100               	movlb	0	; () banked
 14067  003248  5179               	movf	scale@scl& (0+255),w,b
 14068  00324A  0D03               	mullw	3
 14069  00324C  0EF8               	movlw	low __powers_
 14070  00324E  24F3               	addwf	prodl,w,c
 14071  003250  6EF6               	movwf	tblptrl,c
 14072  003252  0E78               	movlw	high __powers_
 14073  003254  20F4               	addwfc	prodh,w,c
 14074  003256  6EF7               	movwf	tblptrh,c
 14075  003258                     	if	0	;There are less than 3 active tblptr bytes
 14076  003258                     	endif
 14077  003258  0009               	tblrd		*+
 14078  00325A  CFF5 F073          	movff	tablat,?_scale
 14079  00325E  0009               	tblrd		*+
 14080  003260  CFF5 F074          	movff	tablat,?_scale+1
 14081  003264  000A               	tblrd		*-
 14082  003266  CFF5 F075          	movff	tablat,?_scale+2
 14083  00326A  0012               	return	
 14084  00326C                     __end_of_scale:
 14085                           	opt stack 0
 14086                           tblptru	equ	0xFF8
 14087                           tblptrh	equ	0xFF7
 14088                           tblptrl	equ	0xFF6
 14089                           tablat	equ	0xFF5
 14090                           prodh	equ	0xFF4
 14091                           prodl	equ	0xFF3
 14092                           intcon	equ	0xFF2
 14093                           indf0	equ	0xFEF
 14094                           postinc0	equ	0xFEE
 14095                           fsr0h	equ	0xFEA
 14096                           fsr0l	equ	0xFE9
 14097                           wreg	equ	0xFE8
 14098                           postinc1	equ	0xFE6
 14099                           postdec1	equ	0xFE5
 14100                           plusw1	equ	0xFE3
 14101                           fsr1h	equ	0xFE2
 14102                           fsr1l	equ	0xFE1
 14103                           indf2	equ	0xFDF
 14104                           postinc2	equ	0xFDE
 14105                           postdec2	equ	0xFDD
 14106                           plusw2	equ	0xFDB
 14107                           fsr2h	equ	0xFDA
 14108                           fsr2l	equ	0xFD9
 14109                           status	equ	0xFD8
 14110                           
 14111 ;; *************** function _putch *****************
 14112 ;; Defined at:
 14113 ;;		line 198 in file "mcc_generated_files/eusart1.c"
 14114 ;; Parameters:    Size  Location     Type
 14115 ;;  txData          1    wreg     unsigned char 
 14116 ;; Auto vars:     Size  Location     Type
 14117 ;;  txData          1   38[COMRAM] unsigned char 
 14118 ;; Return value:  Size  Location     Type
 14119 ;;                  1    wreg      void 
 14120 ;; Registers used:
 14121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14122 ;; Tracked objects:
 14123 ;;		On entry : 0/0
 14124 ;;		On exit  : 0/0
 14125 ;;		Unchanged: 0/0
 14126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14127 ;;      Params:         0       0       0       0       0       0       0
 14128 ;;      Locals:         1       0       0       0       0       0       0
 14129 ;;      Temps:          0       0       0       0       0       0       0
 14130 ;;      Totals:         1       0       0       0       0       0       0
 14131 ;;Total ram usage:        1 bytes
 14132 ;; Hardware stack levels used:    1
 14133 ;; Hardware stack levels required when called:    7
 14134 ;; This function calls:
 14135 ;;		_Send_put
 14136 ;; This function is called by:
 14137 ;;		_printf
 14138 ;; This function uses a non-reentrant model
 14139 ;;
 14140                           
 14141                           	psect	text26
 14142  005934                     __ptext26:
 14143                           	opt stack 0
 14144  005934                     _putch:
 14145                           	opt stack 21
 14146                           
 14147                           ;incstack = 0
 14148                           ;putch@txData stored from wreg
 14149  005934  6E27               	movwf	putch@txData,c
 14150                           
 14151                           ;eusart1.c: 199: Send_put(txData);
 14152  005936  5027               	movf	putch@txData,w,c
 14153  005938  EC93  F02B         	call	_Send_put
 14154  00593C  0012               	return		;funcret
 14155  00593E                     __end_of_putch:
 14156                           	opt stack 0
 14157                           tblptru	equ	0xFF8
 14158                           tblptrh	equ	0xFF7
 14159                           tblptrl	equ	0xFF6
 14160                           tablat	equ	0xFF5
 14161                           prodh	equ	0xFF4
 14162                           prodl	equ	0xFF3
 14163                           intcon	equ	0xFF2
 14164                           indf0	equ	0xFEF
 14165                           postinc0	equ	0xFEE
 14166                           fsr0h	equ	0xFEA
 14167                           fsr0l	equ	0xFE9
 14168                           wreg	equ	0xFE8
 14169                           postinc1	equ	0xFE6
 14170                           postdec1	equ	0xFE5
 14171                           plusw1	equ	0xFE3
 14172                           fsr1h	equ	0xFE2
 14173                           fsr1l	equ	0xFE1
 14174                           indf2	equ	0xFDF
 14175                           postinc2	equ	0xFDE
 14176                           postdec2	equ	0xFDD
 14177                           plusw2	equ	0xFDB
 14178                           fsr2h	equ	0xFDA
 14179                           fsr2l	equ	0xFD9
 14180                           status	equ	0xFD8
 14181                           
 14182 ;; *************** function _Send_put *****************
 14183 ;; Defined at:
 14184 ;;		line 185 in file "mcc_generated_files/eusart1.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;  _data           1    wreg     unsigned char 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  _data           1   37[COMRAM] unsigned char 
 14189 ;; Return value:  Size  Location     Type
 14190 ;;                  1    wreg      void 
 14191 ;; Registers used:
 14192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14193 ;; Tracked objects:
 14194 ;;		On entry : 0/0
 14195 ;;		On exit  : 0/0
 14196 ;;		Unchanged: 0/0
 14197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14198 ;;      Params:         0       0       0       0       0       0       0
 14199 ;;      Locals:         1       0       0       0       0       0       0
 14200 ;;      Temps:          0       0       0       0       0       0       0
 14201 ;;      Totals:         1       0       0       0       0       0       0
 14202 ;;Total ram usage:        1 bytes
 14203 ;; Hardware stack levels used:    1
 14204 ;; Hardware stack levels required when called:    6
 14205 ;; This function calls:
 14206 ;;		_UART_buff_get
 14207 ;;		_UART_buff_put
 14208 ;; This function is called by:
 14209 ;;		_putch
 14210 ;;		_CommsStart
 14211 ;;		_receiveData
 14212 ;;		_sendData
 14213 ;; This function uses a non-reentrant model
 14214 ;;
 14215                           
 14216                           	psect	text27
 14217  005726                     __ptext27:
 14218                           	opt stack 0
 14219  005726                     _Send_put:
 14220                           	opt stack 21
 14221                           
 14222                           ;incstack = 0
 14223                           ;Send_put@_data stored from wreg
 14224  005726  6E26               	movwf	Send_put@_data,c
 14225                           
 14226                           ;eusart1.c: 186: UART_buff_put(&output_buffer, _data);
 14227  005728  0E00               	movlw	low _output_buffer
 14228  00572A  6E21               	movwf	UART_buff_put@_this,c
 14229  00572C  0E03               	movlw	high _output_buffer
 14230  00572E  6E22               	movwf	UART_buff_put@_this+1,c
 14231  005730  C026  F023         	movff	Send_put@_data,UART_buff_put@c
 14232  005734  EC84  F021         	call	_UART_buff_put	;wreg free
 14233                           
 14234                           ;eusart1.c: 187: if (Transmit_stall == 1) {
 14235  005738  0444               	decf	_Transmit_stall,w,c
 14236  00573A  A4D8               	btfss	status,2,c
 14237  00573C  0012               	return	
 14238                           
 14239                           ;eusart1.c: 188: Transmit_stall = 0;
 14240  00573E  0E00               	movlw	0
 14241  005740  6E44               	movwf	_Transmit_stall,c
 14242                           
 14243                           ;eusart1.c: 189: TXREG1 = UART_buff_get(&output_buffer);
 14244  005742  0E00               	movlw	low _output_buffer
 14245  005744  6E21               	movwf	UART_buff_get@_this,c
 14246  005746  0E03               	movlw	high _output_buffer
 14247  005748  6E22               	movwf	UART_buff_get@_this+1,c
 14248  00574A  EC01  F028         	call	_UART_buff_get	;wreg free
 14249  00574E  6EAD               	movwf	4013,c	;volatile
 14250                           
 14251                           ;eusart1.c: 190: PIE1bits.TX1IE = 1;
 14252  005750  889D               	bsf	3997,4,c	;volatile
 14253  005752  0012               	return	
 14254  005754                     __end_of_Send_put:
 14255                           	opt stack 0
 14256                           tblptru	equ	0xFF8
 14257                           tblptrh	equ	0xFF7
 14258                           tblptrl	equ	0xFF6
 14259                           tablat	equ	0xFF5
 14260                           prodh	equ	0xFF4
 14261                           prodl	equ	0xFF3
 14262                           intcon	equ	0xFF2
 14263                           indf0	equ	0xFEF
 14264                           postinc0	equ	0xFEE
 14265                           fsr0h	equ	0xFEA
 14266                           fsr0l	equ	0xFE9
 14267                           wreg	equ	0xFE8
 14268                           postinc1	equ	0xFE6
 14269                           postdec1	equ	0xFE5
 14270                           plusw1	equ	0xFE3
 14271                           fsr1h	equ	0xFE2
 14272                           fsr1l	equ	0xFE1
 14273                           indf2	equ	0xFDF
 14274                           postinc2	equ	0xFDE
 14275                           postdec2	equ	0xFDD
 14276                           plusw2	equ	0xFDB
 14277                           fsr2h	equ	0xFDA
 14278                           fsr2l	equ	0xFD9
 14279                           status	equ	0xFD8
 14280                           
 14281 ;; *************** function _UART_buff_put *****************
 14282 ;; Defined at:
 14283 ;;		line 123 in file "mcc_generated_files/eusart1.c"
 14284 ;; Parameters:    Size  Location     Type
 14285 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
 14286 ;;		 -> output_buffer(86), input_buffer(86), 
 14287 ;;  c               1   34[COMRAM] const unsigned char 
 14288 ;; Auto vars:     Size  Location     Type
 14289 ;;		None
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      void 
 14292 ;; Registers used:
 14293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14299 ;;      Params:         3       0       0       0       0       0       0
 14300 ;;      Locals:         0       0       0       0       0       0       0
 14301 ;;      Temps:          2       0       0       0       0       0       0
 14302 ;;      Totals:         5       0       0       0       0       0       0
 14303 ;;Total ram usage:        5 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    5
 14306 ;; This function calls:
 14307 ;;		_UART_buff_modulo_inc
 14308 ;; This function is called by:
 14309 ;;		_Send_put
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           	psect	text28
 14314  004308                     __ptext28:
 14315                           	opt stack 0
 14316  004308                     _UART_buff_put:
 14317                           	opt stack 21
 14318                           
 14319                           ;eusart1.c: 124: if (_this->count < 80) {
 14320                           
 14321                           ;incstack = 0
 14322  004308  EE20 F054          	lfsr	2,84
 14323  00430C  5021               	movf	UART_buff_put@_this,w,c
 14324  00430E  26D9               	addwf	fsr2l,f,c
 14325  004310  5022               	movf	UART_buff_put@_this+1,w,c
 14326  004312  22DA               	addwfc	fsr2h,f,c
 14327  004314  0E01               	movlw	1
 14328  004316  BEDB               	btfsc	plusw2,7,c
 14329  004318  D007               	goto	l7977
 14330  00431A  0E01               	movlw	1
 14331  00431C  50DB               	movf	plusw2,w,c
 14332  00431E  E13A               	bnz	l7983
 14333  004320  0E50               	movlw	80
 14334  004322  5CDE               	subwf	postinc2,w,c
 14335  004324  B0D8               	btfsc	status,0,c
 14336  004326  D036               	goto	l7983
 14337  004328                     l7977:
 14338                           
 14339                           ;eusart1.c: 125: _this->buf[_this->head] = c;
 14340  004328  EE20 F050          	lfsr	2,80
 14341  00432C  5021               	movf	UART_buff_put@_this,w,c
 14342  00432E  26D9               	addwf	fsr2l,f,c
 14343  004330  5022               	movf	UART_buff_put@_this+1,w,c
 14344  004332  22DA               	addwfc	fsr2h,f,c
 14345  004334  CFDE F024          	movff	postinc2,??_UART_buff_put
 14346  004338  CFDD F025          	movff	postdec2,??_UART_buff_put+1
 14347  00433C  5024               	movf	??_UART_buff_put,w,c
 14348  00433E  2421               	addwf	UART_buff_put@_this,w,c
 14349  004340  6ED9               	movwf	fsr2l,c
 14350  004342  5025               	movf	??_UART_buff_put+1,w,c
 14351  004344  2022               	addwfc	UART_buff_put@_this+1,w,c
 14352  004346  6EDA               	movwf	fsr2h,c
 14353  004348  C023  FFDF         	movff	UART_buff_put@c,indf2
 14354                           
 14355                           ;eusart1.c: 126: _this->head = UART_buff_modulo_inc(_this->head, 80);
 14356  00434C  EE20 F050          	lfsr	2,80
 14357  004350  5021               	movf	UART_buff_put@_this,w,c
 14358  004352  26D9               	addwf	fsr2l,f,c
 14359  004354  5022               	movf	UART_buff_put@_this+1,w,c
 14360  004356  22DA               	addwfc	fsr2h,f,c
 14361  004358  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
 14362  00435C  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
 14363  004360  0E00               	movlw	0
 14364  004362  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
 14365  004364  0E50               	movlw	80
 14366  004366  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
 14367  004368  ECD6  F02B         	call	_UART_buff_modulo_inc	;wreg free
 14368  00436C  EE20 F050          	lfsr	2,80
 14369  004370  5021               	movf	UART_buff_put@_this,w,c
 14370  004372  26D9               	addwf	fsr2l,f,c
 14371  004374  5022               	movf	UART_buff_put@_this+1,w,c
 14372  004376  22DA               	addwfc	fsr2h,f,c
 14373  004378  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
 14374  00437C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
 14375                           
 14376                           ;eusart1.c: 127: ++_this->count;
 14377  004380  EE20 F054          	lfsr	2,84
 14378  004384  5021               	movf	UART_buff_put@_this,w,c
 14379  004386  26D9               	addwf	fsr2l,f,c
 14380  004388  5022               	movf	UART_buff_put@_this+1,w,c
 14381  00438A  22DA               	addwfc	fsr2h,f,c
 14382  00438C  2ADE               	incf	postinc2,f,c
 14383  00438E  0E00               	movlw	0
 14384  004390  22DD               	addwfc	postdec2,f,c
 14385                           
 14386                           ;eusart1.c: 128: } else {
 14387  004392  0012               	return	
 14388  004394                     l7983:
 14389                           
 14390                           ;eusart1.c: 129: _this->buf[_this->head] = c;
 14391  004394  EE20 F050          	lfsr	2,80
 14392  004398  5021               	movf	UART_buff_put@_this,w,c
 14393  00439A  26D9               	addwf	fsr2l,f,c
 14394  00439C  5022               	movf	UART_buff_put@_this+1,w,c
 14395  00439E  22DA               	addwfc	fsr2h,f,c
 14396  0043A0  CFDE F024          	movff	postinc2,??_UART_buff_put
 14397  0043A4  CFDD F025          	movff	postdec2,??_UART_buff_put+1
 14398  0043A8  5024               	movf	??_UART_buff_put,w,c
 14399  0043AA  2421               	addwf	UART_buff_put@_this,w,c
 14400  0043AC  6ED9               	movwf	fsr2l,c
 14401  0043AE  5025               	movf	??_UART_buff_put+1,w,c
 14402  0043B0  2022               	addwfc	UART_buff_put@_this+1,w,c
 14403  0043B2  6EDA               	movwf	fsr2h,c
 14404  0043B4  C023  FFDF         	movff	UART_buff_put@c,indf2
 14405                           
 14406                           ;eusart1.c: 130: _this->head = UART_buff_modulo_inc(_this->head, 80);
 14407  0043B8  EE20 F050          	lfsr	2,80
 14408  0043BC  5021               	movf	UART_buff_put@_this,w,c
 14409  0043BE  26D9               	addwf	fsr2l,f,c
 14410  0043C0  5022               	movf	UART_buff_put@_this+1,w,c
 14411  0043C2  22DA               	addwfc	fsr2h,f,c
 14412  0043C4  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
 14413  0043C8  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
 14414  0043CC  0E00               	movlw	0
 14415  0043CE  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
 14416  0043D0  0E50               	movlw	80
 14417  0043D2  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
 14418  0043D4  ECD6  F02B         	call	_UART_buff_modulo_inc	;wreg free
 14419  0043D8  EE20 F050          	lfsr	2,80
 14420  0043DC  5021               	movf	UART_buff_put@_this,w,c
 14421  0043DE  26D9               	addwf	fsr2l,f,c
 14422  0043E0  5022               	movf	UART_buff_put@_this+1,w,c
 14423  0043E2  22DA               	addwfc	fsr2h,f,c
 14424  0043E4  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
 14425  0043E8  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
 14426                           
 14427                           ;eusart1.c: 131: _this->tail = UART_buff_modulo_inc(_this->tail, 80);
 14428  0043EC  EE20 F052          	lfsr	2,82
 14429  0043F0  5021               	movf	UART_buff_put@_this,w,c
 14430  0043F2  26D9               	addwf	fsr2l,f,c
 14431  0043F4  5022               	movf	UART_buff_put@_this+1,w,c
 14432  0043F6  22DA               	addwfc	fsr2h,f,c
 14433  0043F8  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
 14434  0043FC  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
 14435  004400  0E00               	movlw	0
 14436  004402  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
 14437  004404  0E50               	movlw	80
 14438  004406  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
 14439  004408  ECD6  F02B         	call	_UART_buff_modulo_inc	;wreg free
 14440  00440C  EE20 F052          	lfsr	2,82
 14441  004410  5021               	movf	UART_buff_put@_this,w,c
 14442  004412  26D9               	addwf	fsr2l,f,c
 14443  004414  5022               	movf	UART_buff_put@_this+1,w,c
 14444  004416  22DA               	addwfc	fsr2h,f,c
 14445  004418  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
 14446  00441C  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
 14447  004420  0012               	return	
 14448  004422                     __end_of_UART_buff_put:
 14449                           	opt stack 0
 14450                           tblptru	equ	0xFF8
 14451                           tblptrh	equ	0xFF7
 14452                           tblptrl	equ	0xFF6
 14453                           tablat	equ	0xFF5
 14454                           prodh	equ	0xFF4
 14455                           prodl	equ	0xFF3
 14456                           intcon	equ	0xFF2
 14457                           indf0	equ	0xFEF
 14458                           postinc0	equ	0xFEE
 14459                           fsr0h	equ	0xFEA
 14460                           fsr0l	equ	0xFE9
 14461                           wreg	equ	0xFE8
 14462                           postinc1	equ	0xFE6
 14463                           postdec1	equ	0xFE5
 14464                           plusw1	equ	0xFE3
 14465                           fsr1h	equ	0xFE2
 14466                           fsr1l	equ	0xFE1
 14467                           indf2	equ	0xFDF
 14468                           postinc2	equ	0xFDE
 14469                           postdec2	equ	0xFDD
 14470                           plusw2	equ	0xFDB
 14471                           fsr2h	equ	0xFDA
 14472                           fsr2l	equ	0xFD9
 14473                           status	equ	0xFD8
 14474                           
 14475 ;; *************** function _UART_buff_get *****************
 14476 ;; Defined at:
 14477 ;;		line 136 in file "mcc_generated_files/eusart1.c"
 14478 ;; Parameters:    Size  Location     Type
 14479 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
 14480 ;;		 -> output_buffer(86), input_buffer(86), 
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;  c               1   36[COMRAM] unsigned char 
 14483 ;; Return value:  Size  Location     Type
 14484 ;;                  1    wreg      unsigned char 
 14485 ;; Registers used:
 14486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14487 ;; Tracked objects:
 14488 ;;		On entry : 0/0
 14489 ;;		On exit  : 0/0
 14490 ;;		Unchanged: 0/0
 14491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14492 ;;      Params:         2       0       0       0       0       0       0
 14493 ;;      Locals:         1       0       0       0       0       0       0
 14494 ;;      Temps:          2       0       0       0       0       0       0
 14495 ;;      Totals:         5       0       0       0       0       0       0
 14496 ;;Total ram usage:        5 bytes
 14497 ;; Hardware stack levels used:    1
 14498 ;; Hardware stack levels required when called:    5
 14499 ;; This function calls:
 14500 ;;		_UART_buff_modulo_inc
 14501 ;; This function is called by:
 14502 ;;		_Send_put
 14503 ;;		_Receive_get
 14504 ;; This function uses a non-reentrant model
 14505 ;;
 14506                           
 14507                           	psect	text29
 14508  005002                     __ptext29:
 14509                           	opt stack 0
 14510  005002                     _UART_buff_get:
 14511                           	opt stack 21
 14512                           
 14513                           ;eusart1.c: 137: unsigned char c;
 14514                           ;eusart1.c: 138: if (_this->count > 0) {
 14515                           
 14516                           ;incstack = 0
 14517  005002  EE20 F054          	lfsr	2,84
 14518  005006  5021               	movf	UART_buff_get@_this,w,c
 14519  005008  26D9               	addwf	fsr2l,f,c
 14520  00500A  5022               	movf	UART_buff_get@_this+1,w,c
 14521  00500C  22DA               	addwfc	fsr2h,f,c
 14522  00500E  0E01               	movlw	1
 14523  005010  BEDB               	btfsc	plusw2,7,c
 14524  005012  D03C               	goto	l7997
 14525  005014  0E01               	movlw	1
 14526  005016  50DB               	movf	plusw2,w,c
 14527  005018  E103               	bnz	u8470
 14528  00501A  04DE               	decf	postinc2,w,c
 14529  00501C  A0D8               	btfss	status,0,c
 14530  00501E  D036               	goto	l7997
 14531  005020                     u8470:
 14532                           
 14533                           ;eusart1.c: 139: c = _this->buf[_this->tail];
 14534  005020  EE20 F052          	lfsr	2,82
 14535  005024  5021               	movf	UART_buff_get@_this,w,c
 14536  005026  26D9               	addwf	fsr2l,f,c
 14537  005028  5022               	movf	UART_buff_get@_this+1,w,c
 14538  00502A  22DA               	addwfc	fsr2h,f,c
 14539  00502C  CFDE F023          	movff	postinc2,??_UART_buff_get
 14540  005030  CFDD F024          	movff	postdec2,??_UART_buff_get+1
 14541  005034  5023               	movf	??_UART_buff_get,w,c
 14542  005036  2421               	addwf	UART_buff_get@_this,w,c
 14543  005038  6ED9               	movwf	fsr2l,c
 14544  00503A  5024               	movf	??_UART_buff_get+1,w,c
 14545  00503C  2022               	addwfc	UART_buff_get@_this+1,w,c
 14546  00503E  6EDA               	movwf	fsr2h,c
 14547  005040  50DF               	movf	indf2,w,c
 14548  005042  6E25               	movwf	UART_buff_get@c,c
 14549                           
 14550                           ;eusart1.c: 140: _this->tail = UART_buff_modulo_inc(_this->tail, 80);
 14551  005044  EE20 F052          	lfsr	2,82
 14552  005048  5021               	movf	UART_buff_get@_this,w,c
 14553  00504A  26D9               	addwf	fsr2l,f,c
 14554  00504C  5022               	movf	UART_buff_get@_this+1,w,c
 14555  00504E  22DA               	addwfc	fsr2h,f,c
 14556  005050  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
 14557  005054  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
 14558  005058  0E00               	movlw	0
 14559  00505A  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
 14560  00505C  0E50               	movlw	80
 14561  00505E  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
 14562  005060  ECD6  F02B         	call	_UART_buff_modulo_inc	;wreg free
 14563  005064  EE20 F052          	lfsr	2,82
 14564  005068  5021               	movf	UART_buff_get@_this,w,c
 14565  00506A  26D9               	addwf	fsr2l,f,c
 14566  00506C  5022               	movf	UART_buff_get@_this+1,w,c
 14567  00506E  22DA               	addwfc	fsr2h,f,c
 14568  005070  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
 14569  005074  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
 14570                           
 14571                           ;eusart1.c: 141: --_this->count;
 14572  005078  EE20 F054          	lfsr	2,84
 14573  00507C  5021               	movf	UART_buff_get@_this,w,c
 14574  00507E  26D9               	addwf	fsr2l,f,c
 14575  005080  5022               	movf	UART_buff_get@_this+1,w,c
 14576  005082  22DA               	addwfc	fsr2h,f,c
 14577  005084  06DE               	decf	postinc2,f,c
 14578  005086  0E00               	movlw	0
 14579  005088  5ADD               	subwfb	postdec2,f,c
 14580                           
 14581                           ;eusart1.c: 142: } else {
 14582  00508A  D002               	goto	l303
 14583  00508C                     l7997:
 14584                           
 14585                           ;eusart1.c: 143: c = 0;
 14586  00508C  0E00               	movlw	0
 14587  00508E  6E25               	movwf	UART_buff_get@c,c
 14588  005090                     l303:
 14589                           
 14590                           ;eusart1.c: 144: }
 14591                           ;eusart1.c: 145: return (c);
 14592  005090  5025               	movf	UART_buff_get@c,w,c
 14593  005092  0012               	return	
 14594  005094                     __end_of_UART_buff_get:
 14595                           	opt stack 0
 14596                           tblptru	equ	0xFF8
 14597                           tblptrh	equ	0xFF7
 14598                           tblptrl	equ	0xFF6
 14599                           tablat	equ	0xFF5
 14600                           prodh	equ	0xFF4
 14601                           prodl	equ	0xFF3
 14602                           intcon	equ	0xFF2
 14603                           indf0	equ	0xFEF
 14604                           postinc0	equ	0xFEE
 14605                           fsr0h	equ	0xFEA
 14606                           fsr0l	equ	0xFE9
 14607                           wreg	equ	0xFE8
 14608                           postinc1	equ	0xFE6
 14609                           postdec1	equ	0xFE5
 14610                           plusw1	equ	0xFE3
 14611                           fsr1h	equ	0xFE2
 14612                           fsr1l	equ	0xFE1
 14613                           indf2	equ	0xFDF
 14614                           postinc2	equ	0xFDE
 14615                           postdec2	equ	0xFDD
 14616                           plusw2	equ	0xFDB
 14617                           fsr2h	equ	0xFDA
 14618                           fsr2l	equ	0xFD9
 14619                           status	equ	0xFD8
 14620                           
 14621 ;; *************** function _UART_buff_modulo_inc *****************
 14622 ;; Defined at:
 14623 ;;		line 161 in file "mcc_generated_files/eusart1.c"
 14624 ;; Parameters:    Size  Location     Type
 14625 ;;  value           2   26[COMRAM] const unsigned int 
 14626 ;;  modulus         2   28[COMRAM] const unsigned int 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  my_value        2   30[COMRAM] unsigned int 
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  2   26[COMRAM] unsigned int 
 14631 ;; Registers used:
 14632 ;;		wreg, status,2, status,0
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14638 ;;      Params:         4       0       0       0       0       0       0
 14639 ;;      Locals:         2       0       0       0       0       0       0
 14640 ;;      Temps:          0       0       0       0       0       0       0
 14641 ;;      Totals:         6       0       0       0       0       0       0
 14642 ;;Total ram usage:        6 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    4
 14645 ;; This function calls:
 14646 ;;		Nothing
 14647 ;; This function is called by:
 14648 ;;		_UART_buff_put
 14649 ;;		_UART_buff_get
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           	psect	text30
 14654  0057AC                     __ptext30:
 14655                           	opt stack 0
 14656  0057AC                     _UART_buff_modulo_inc:
 14657                           	opt stack 21
 14658                           
 14659                           ;eusart1.c: 162: unsigned int my_value = value + 1;
 14660                           
 14661                           ;incstack = 0
 14662  0057AC  0E01               	movlw	1
 14663  0057AE  241B               	addwf	UART_buff_modulo_inc@value,w,c
 14664  0057B0  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
 14665  0057B2  0E00               	movlw	0
 14666  0057B4  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
 14667  0057B6  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
 14668                           
 14669                           ;eusart1.c: 163: if (my_value >= modulus) {
 14670  0057B8  501D               	movf	UART_buff_modulo_inc@modulus,w,c
 14671  0057BA  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
 14672  0057BC  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
 14673  0057BE  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
 14674  0057C0  A0D8               	btfss	status,0,c
 14675  0057C2  D004               	goto	l7971
 14676                           
 14677                           ;eusart1.c: 164: my_value = 0;
 14678  0057C4  0E00               	movlw	0
 14679  0057C6  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
 14680  0057C8  0E00               	movlw	0
 14681  0057CA  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
 14682  0057CC                     l7971:
 14683                           
 14684                           ;eusart1.c: 165: }
 14685                           ;eusart1.c: 166: return (my_value);
 14686  0057CC  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
 14687  0057D0  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
 14688  0057D4  0012               	return	
 14689  0057D6                     __end_of_UART_buff_modulo_inc:
 14690                           	opt stack 0
 14691                           tblptru	equ	0xFF8
 14692                           tblptrh	equ	0xFF7
 14693                           tblptrl	equ	0xFF6
 14694                           tablat	equ	0xFF5
 14695                           prodh	equ	0xFF4
 14696                           prodl	equ	0xFF3
 14697                           intcon	equ	0xFF2
 14698                           indf0	equ	0xFEF
 14699                           postinc0	equ	0xFEE
 14700                           fsr0h	equ	0xFEA
 14701                           fsr0l	equ	0xFE9
 14702                           wreg	equ	0xFE8
 14703                           postinc1	equ	0xFE6
 14704                           postdec1	equ	0xFE5
 14705                           plusw1	equ	0xFE3
 14706                           fsr1h	equ	0xFE2
 14707                           fsr1l	equ	0xFE1
 14708                           indf2	equ	0xFDF
 14709                           postinc2	equ	0xFDE
 14710                           postdec2	equ	0xFDD
 14711                           plusw2	equ	0xFDB
 14712                           fsr2h	equ	0xFDA
 14713                           fsr2l	equ	0xFD9
 14714                           status	equ	0xFD8
 14715                           
 14716 ;; *************** function _isdigit *****************
 14717 ;; Defined at:
 14718 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;  c               1    wreg     unsigned char 
 14721 ;; Auto vars:     Size  Location     Type
 14722 ;;  c               1   28[COMRAM] unsigned char 
 14723 ;; Return value:  Size  Location     Type
 14724 ;;		None               void
 14725 ;; Registers used:
 14726 ;;		wreg, status,2, status,0
 14727 ;; Tracked objects:
 14728 ;;		On entry : 0/0
 14729 ;;		On exit  : 0/0
 14730 ;;		Unchanged: 0/0
 14731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14732 ;;      Params:         0       0       0       0       0       0       0
 14733 ;;      Locals:         2       0       0       0       0       0       0
 14734 ;;      Temps:          1       0       0       0       0       0       0
 14735 ;;      Totals:         3       0       0       0       0       0       0
 14736 ;;Total ram usage:        3 bytes
 14737 ;; Hardware stack levels used:    1
 14738 ;; Hardware stack levels required when called:    4
 14739 ;; This function calls:
 14740 ;;		Nothing
 14741 ;; This function is called by:
 14742 ;;		_printf
 14743 ;; This function uses a non-reentrant model
 14744 ;;
 14745                           
 14746                           	psect	text31
 14747  005824                     __ptext31:
 14748                           	opt stack 0
 14749  005824                     _isdigit:
 14750                           	opt stack 24
 14751                           
 14752                           ;incstack = 0
 14753                           ;isdigit@c stored from wreg
 14754  005824  6E1D               	movwf	isdigit@c,c
 14755  005826  0E00               	movlw	0
 14756  005828  6E1C               	movwf	_isdigit$2953,c
 14757  00582A  0E3A               	movlw	58
 14758  00582C  601D               	cpfslt	isdigit@c,c
 14759  00582E  D005               	goto	l8375
 14760  005830  0E2F               	movlw	47
 14761  005832  641D               	cpfsgt	isdigit@c,c
 14762  005834  D002               	goto	l8375
 14763  005836  0E01               	movlw	1
 14764  005838  6E1C               	movwf	_isdigit$2953,c
 14765  00583A                     l8375:
 14766  00583A  C01C  F01B         	movff	_isdigit$2953,??_isdigit
 14767  00583E  301B               	rrcf	??_isdigit,w,c
 14768  005840  0012               	return	
 14769  005842                     __end_of_isdigit:
 14770                           	opt stack 0
 14771                           tblptru	equ	0xFF8
 14772                           tblptrh	equ	0xFF7
 14773                           tblptrl	equ	0xFF6
 14774                           tablat	equ	0xFF5
 14775                           prodh	equ	0xFF4
 14776                           prodl	equ	0xFF3
 14777                           intcon	equ	0xFF2
 14778                           indf0	equ	0xFEF
 14779                           postinc0	equ	0xFEE
 14780                           fsr0h	equ	0xFEA
 14781                           fsr0l	equ	0xFE9
 14782                           wreg	equ	0xFE8
 14783                           postinc1	equ	0xFE6
 14784                           postdec1	equ	0xFE5
 14785                           plusw1	equ	0xFE3
 14786                           fsr1h	equ	0xFE2
 14787                           fsr1l	equ	0xFE1
 14788                           indf2	equ	0xFDF
 14789                           postinc2	equ	0xFDE
 14790                           postdec2	equ	0xFDD
 14791                           plusw2	equ	0xFDB
 14792                           fsr2h	equ	0xFDA
 14793                           fsr2l	equ	0xFD9
 14794                           status	equ	0xFD8
 14795                           
 14796 ;; *************** function _fround *****************
 14797 ;; Defined at:
 14798 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 14799 ;; Parameters:    Size  Location     Type
 14800 ;;  prec            1    wreg     unsigned char 
 14801 ;; Auto vars:     Size  Location     Type
 14802 ;;  prec            1   28[BANK0 ] unsigned char 
 14803 ;; Return value:  Size  Location     Type
 14804 ;;                  3   19[BANK0 ] unsigned char 
 14805 ;; Registers used:
 14806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14807 ;; Tracked objects:
 14808 ;;		On entry : 0/0
 14809 ;;		On exit  : 0/0
 14810 ;;		Unchanged: 0/0
 14811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14812 ;;      Params:         0       3       0       0       0       0       0
 14813 ;;      Locals:         0       7       0       0       0       0       0
 14814 ;;      Temps:          0       0       0       0       0       0       0
 14815 ;;      Totals:         0      10       0       0       0       0       0
 14816 ;;Total ram usage:       10 bytes
 14817 ;; Hardware stack levels used:    1
 14818 ;; Hardware stack levels required when called:    6
 14819 ;; This function calls:
 14820 ;;		___awdiv
 14821 ;;		___awmod
 14822 ;;		___ftmul
 14823 ;;		___wmul
 14824 ;; This function is called by:
 14825 ;;		_printf
 14826 ;; This function uses a non-reentrant model
 14827 ;;
 14828                           
 14829                           	psect	text32
 14830  00326C                     __ptext32:
 14831                           	opt stack 0
 14832  00326C                     _fround:
 14833                           	opt stack 22
 14834                           
 14835                           ;incstack = 0
 14836                           ;fround@prec stored from wreg
 14837  00326C  0100               	movlb	0	; () banked
 14838  00326E  6F7C               	movwf	fround@prec& (0+255),b
 14839                           
 14840                           ;doprnt.c: 413: if(prec>=110)
 14841  003270  0E6D               	movlw	109
 14842  003272  0100               	movlb	0	; () banked
 14843  003274  657C               	cpfsgt	fround@prec& (0+255),b
 14844  003276  D0AF               	goto	l8317
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14848  003278  0E00               	movlw	0
 14849  00327A  0100               	movlb	0	; () banked
 14850  00327C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14851  00327E  0E03               	movlw	3
 14852  003280  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14853  003282  0E00               	movlw	0
 14854  003284  6E24               	movwf	___awdiv@divisor+1,c
 14855  003286  0E0A               	movlw	10
 14856  003288  6E23               	movwf	___awdiv@divisor,c
 14857  00328A  0E00               	movlw	0
 14858  00328C  6E1E               	movwf	___awmod@divisor+1,c
 14859  00328E  0E64               	movlw	100
 14860  003290  6E1D               	movwf	___awmod@divisor,c
 14861  003292  C07C  F01B         	movff	fround@prec,___awmod@dividend
 14862  003296  6A1C               	clrf	___awmod@dividend+1,c
 14863  003298  EC56  F029         	call	___awmod	;wreg free
 14864  00329C  C01B  F021         	movff	?___awmod,___awdiv@dividend
 14865  0032A0  C01C  F022         	movff	?___awmod+1,___awdiv@dividend+1
 14866  0032A4  EC93  F028         	call	___awdiv	;wreg free
 14867  0032A8  0E09               	movlw	9
 14868  0032AA  2421               	addwf	?___awdiv,w,c
 14869  0032AC  0100               	movlb	0	; () banked
 14870  0032AE  6F60               	movwf	___wmul@multiplier& (0+255),b
 14871  0032B0  0E00               	movlw	0
 14872  0032B2  2022               	addwfc	?___awdiv+1,w,c
 14873  0032B4  0100               	movlb	0	; () banked
 14874  0032B6  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 14875  0032B8  EC61  F02B         	call	___wmul	;wreg free
 14876  0032BC  0ED1               	movlw	low __npowers_
 14877  0032BE  0100               	movlb	0	; () banked
 14878  0032C0  2560               	addwf	?___wmul& (0+255),w,b
 14879  0032C2  6EF6               	movwf	tblptrl,c
 14880  0032C4  0E78               	movlw	high __npowers_
 14881  0032C6  0100               	movlb	0	; () banked
 14882  0032C8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14883  0032CA  6EF7               	movwf	tblptrh,c
 14884  0032CC                     	if	0	;There are less than 3 active tblptr bytes
 14885  0032CC                     	endif
 14886  0032CC  0009               	tblrd		*+
 14887  0032CE  CFF5 F067          	movff	tablat,___ftmul@f2
 14888  0032D2  0009               	tblrd		*+
 14889  0032D4  CFF5 F068          	movff	tablat,___ftmul@f2+1
 14890  0032D8  000A               	tblrd		*-
 14891  0032DA  CFF5 F069          	movff	tablat,___ftmul@f2+2
 14892  0032DE  0E00               	movlw	0
 14893  0032E0  6E24               	movwf	___awdiv@divisor+1,c
 14894  0032E2  0E64               	movlw	100
 14895  0032E4  6E23               	movwf	___awdiv@divisor,c
 14896  0032E6  C07C  F021         	movff	fround@prec,___awdiv@dividend
 14897  0032EA  6A22               	clrf	___awdiv@dividend+1,c
 14898  0032EC  EC93  F028         	call	___awdiv	;wreg free
 14899  0032F0  0E12               	movlw	18
 14900  0032F2  2421               	addwf	?___awdiv,w,c
 14901  0032F4  0100               	movlb	0	; () banked
 14902  0032F6  6F60               	movwf	___wmul@multiplier& (0+255),b
 14903  0032F8  0E00               	movlw	0
 14904  0032FA  2022               	addwfc	?___awdiv+1,w,c
 14905  0032FC  0100               	movlb	0	; () banked
 14906  0032FE  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 14907  003300  0E00               	movlw	0
 14908  003302  0100               	movlb	0	; () banked
 14909  003304  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14910  003306  0E03               	movlw	3
 14911  003308  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14912  00330A  EC61  F02B         	call	___wmul	;wreg free
 14913  00330E  0ED1               	movlw	low __npowers_
 14914  003310  0100               	movlb	0	; () banked
 14915  003312  2560               	addwf	?___wmul& (0+255),w,b
 14916  003314  6EF6               	movwf	tblptrl,c
 14917  003316  0E78               	movlw	high __npowers_
 14918  003318  0100               	movlb	0	; () banked
 14919  00331A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14920  00331C  6EF7               	movwf	tblptrh,c
 14921  00331E                     	if	0	;There are less than 3 active tblptr bytes
 14922  00331E                     	endif
 14923  00331E  0009               	tblrd		*+
 14924  003320  CFF5 F064          	movff	tablat,___ftmul@f1
 14925  003324  0009               	tblrd		*+
 14926  003326  CFF5 F065          	movff	tablat,___ftmul@f1+1
 14927  00332A  000A               	tblrd		*-
 14928  00332C  CFF5 F066          	movff	tablat,___ftmul@f1+2
 14929  003330  ECCF  F01D         	call	___ftmul	;wreg free
 14930  003334  C064  F079         	movff	?___ftmul,_fround$3455
 14931  003338  C065  F07A         	movff	?___ftmul+1,_fround$3455+1
 14932  00333C  C066  F07B         	movff	?___ftmul+2,_fround$3455+2
 14933                           
 14934                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14935  003340  0E00               	movlw	0
 14936  003342  0100               	movlb	0	; () banked
 14937  003344  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14938  003346  0E03               	movlw	3
 14939  003348  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14940  00334A  0E00               	movlw	0
 14941  00334C  6E1E               	movwf	___awmod@divisor+1,c
 14942  00334E  0E0A               	movlw	10
 14943  003350  6E1D               	movwf	___awmod@divisor,c
 14944  003352  C07C  F01B         	movff	fround@prec,___awmod@dividend
 14945  003356  6A1C               	clrf	___awmod@dividend+1,c
 14946  003358  EC56  F029         	call	___awmod	;wreg free
 14947  00335C  C01B  F060         	movff	?___awmod,___wmul@multiplier
 14948  003360  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
 14949  003364  EC61  F02B         	call	___wmul	;wreg free
 14950  003368  0ED1               	movlw	low __npowers_
 14951  00336A  0100               	movlb	0	; () banked
 14952  00336C  2560               	addwf	?___wmul& (0+255),w,b
 14953  00336E  6EF6               	movwf	tblptrl,c
 14954  003370  0E78               	movlw	high __npowers_
 14955  003372  0100               	movlb	0	; () banked
 14956  003374  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14957  003376  6EF7               	movwf	tblptrh,c
 14958  003378                     	if	0	;There are less than 3 active tblptr bytes
 14959  003378                     	endif
 14960  003378  0009               	tblrd		*+
 14961  00337A  CFF5 F067          	movff	tablat,___ftmul@f2
 14962  00337E  0009               	tblrd		*+
 14963  003380  CFF5 F068          	movff	tablat,___ftmul@f2+1
 14964  003384  000A               	tblrd		*-
 14965  003386  CFF5 F069          	movff	tablat,___ftmul@f2+2
 14966  00338A  C079  F064         	movff	_fround$3455,___ftmul@f1
 14967  00338E  C07A  F065         	movff	_fround$3455+1,___ftmul@f1+1
 14968  003392  C07B  F066         	movff	_fround$3455+2,___ftmul@f1+2
 14969  003396  ECCF  F01D         	call	___ftmul	;wreg free
 14970  00339A  C064  F076         	movff	?___ftmul,_fround$3456
 14971  00339E  C065  F077         	movff	?___ftmul+1,_fround$3456+1
 14972  0033A2  C066  F078         	movff	?___ftmul+2,_fround$3456+2
 14973                           
 14974                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 14975  0033A6  C076  F064         	movff	_fround$3456,___ftmul@f1
 14976  0033AA  C077  F065         	movff	_fround$3456+1,___ftmul@f1+1
 14977  0033AE  C078  F066         	movff	_fround$3456+2,___ftmul@f1+2
 14978  0033B2  0E00               	movlw	0
 14979  0033B4  0100               	movlb	0	; () banked
 14980  0033B6  6F67               	movwf	___ftmul@f2& (0+255),b
 14981  0033B8  0E00               	movlw	0
 14982  0033BA  0100               	movlb	0	; () banked
 14983  0033BC  6F68               	movwf	(___ftmul@f2+1)& (0+255),b
 14984  0033BE  0E3F               	movlw	63
 14985  0033C0  0100               	movlb	0	; () banked
 14986  0033C2  6F69               	movwf	(___ftmul@f2+2)& (0+255),b
 14987  0033C4  ECCF  F01D         	call	___ftmul	;wreg free
 14988  0033C8  C064  F073         	movff	?___ftmul,?_fround
 14989  0033CC  C065  F074         	movff	?___ftmul+1,?_fround+1
 14990  0033D0  C066  F075         	movff	?___ftmul+2,?_fround+2
 14991  0033D4  0012               	return	
 14992  0033D6                     l8317:
 14993                           
 14994                           ;doprnt.c: 415: else if(prec > 10)
 14995  0033D6  0E0A               	movlw	10
 14996  0033D8  0100               	movlb	0	; () banked
 14997  0033DA  657C               	cpfsgt	fround@prec& (0+255),b
 14998  0033DC  D068               	goto	l8325
 14999                           
 15000                           ; BSR set to: 0
 15001                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15002  0033DE  0E00               	movlw	0
 15003  0033E0  0100               	movlb	0	; () banked
 15004  0033E2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15005  0033E4  0E03               	movlw	3
 15006  0033E6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15007  0033E8  0E00               	movlw	0
 15008  0033EA  6E1E               	movwf	___awmod@divisor+1,c
 15009  0033EC  0E0A               	movlw	10
 15010  0033EE  6E1D               	movwf	___awmod@divisor,c
 15011  0033F0  C07C  F01B         	movff	fround@prec,___awmod@dividend
 15012  0033F4  6A1C               	clrf	___awmod@dividend+1,c
 15013  0033F6  EC56  F029         	call	___awmod	;wreg free
 15014  0033FA  C01B  F060         	movff	?___awmod,___wmul@multiplier
 15015  0033FE  C01C  F061         	movff	?___awmod+1,___wmul@multiplier+1
 15016  003402  EC61  F02B         	call	___wmul	;wreg free
 15017  003406  0ED1               	movlw	low __npowers_
 15018  003408  0100               	movlb	0	; () banked
 15019  00340A  2560               	addwf	?___wmul& (0+255),w,b
 15020  00340C  6EF6               	movwf	tblptrl,c
 15021  00340E  0E78               	movlw	high __npowers_
 15022  003410  0100               	movlb	0	; () banked
 15023  003412  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15024  003414  6EF7               	movwf	tblptrh,c
 15025  003416                     	if	0	;There are less than 3 active tblptr bytes
 15026  003416                     	endif
 15027  003416  0009               	tblrd		*+
 15028  003418  CFF5 F067          	movff	tablat,___ftmul@f2
 15029  00341C  0009               	tblrd		*+
 15030  00341E  CFF5 F068          	movff	tablat,___ftmul@f2+1
 15031  003422  000A               	tblrd		*-
 15032  003424  CFF5 F069          	movff	tablat,___ftmul@f2+2
 15033  003428  0E00               	movlw	0
 15034  00342A  6E24               	movwf	___awdiv@divisor+1,c
 15035  00342C  0E0A               	movlw	10
 15036  00342E  6E23               	movwf	___awdiv@divisor,c
 15037  003430  C07C  F021         	movff	fround@prec,___awdiv@dividend
 15038  003434  6A22               	clrf	___awdiv@dividend+1,c
 15039  003436  EC93  F028         	call	___awdiv	;wreg free
 15040  00343A  0E09               	movlw	9
 15041  00343C  2421               	addwf	?___awdiv,w,c
 15042  00343E  0100               	movlb	0	; () banked
 15043  003440  6F60               	movwf	___wmul@multiplier& (0+255),b
 15044  003442  0E00               	movlw	0
 15045  003444  2022               	addwfc	?___awdiv+1,w,c
 15046  003446  0100               	movlb	0	; () banked
 15047  003448  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 15048  00344A  0E00               	movlw	0
 15049  00344C  0100               	movlb	0	; () banked
 15050  00344E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15051  003450  0E03               	movlw	3
 15052  003452  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15053  003454  EC61  F02B         	call	___wmul	;wreg free
 15054  003458  0ED1               	movlw	low __npowers_
 15055  00345A  0100               	movlb	0	; () banked
 15056  00345C  2560               	addwf	?___wmul& (0+255),w,b
 15057  00345E  6EF6               	movwf	tblptrl,c
 15058  003460  0E78               	movlw	high __npowers_
 15059  003462  0100               	movlb	0	; () banked
 15060  003464  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15061  003466  6EF7               	movwf	tblptrh,c
 15062  003468                     	if	0	;There are less than 3 active tblptr bytes
 15063  003468                     	endif
 15064  003468  0009               	tblrd		*+
 15065  00346A  CFF5 F064          	movff	tablat,___ftmul@f1
 15066  00346E  0009               	tblrd		*+
 15067  003470  CFF5 F065          	movff	tablat,___ftmul@f1+1
 15068  003474  000A               	tblrd		*-
 15069  003476  CFF5 F066          	movff	tablat,___ftmul@f1+2
 15070  00347A  ECCF  F01D         	call	___ftmul	;wreg free
 15071  00347E  C064  F079         	movff	?___ftmul,_fround$3455
 15072  003482  C065  F07A         	movff	?___ftmul+1,_fround$3455+1
 15073  003486  C066  F07B         	movff	?___ftmul+2,_fround$3455+2
 15074                           
 15075                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 15076  00348A  C079  F064         	movff	_fround$3455,___ftmul@f1
 15077  00348E  C07A  F065         	movff	_fround$3455+1,___ftmul@f1+1
 15078  003492  C07B  F066         	movff	_fround$3455+2,___ftmul@f1+2
 15079  003496  0E00               	movlw	0
 15080  003498  0100               	movlb	0	; () banked
 15081  00349A  6F67               	movwf	___ftmul@f2& (0+255),b
 15082  00349C  0E00               	movlw	0
 15083  00349E  0100               	movlb	0	; () banked
 15084  0034A0  6F68               	movwf	(___ftmul@f2+1)& (0+255),b
 15085  0034A2  0E3F               	movlw	63
 15086  0034A4  0100               	movlb	0	; () banked
 15087  0034A6  6F69               	movwf	(___ftmul@f2+2)& (0+255),b
 15088  0034A8  ECCF  F01D         	call	___ftmul	;wreg free
 15089  0034AC  D78D               	goto	L15
 15090  0034AE                     l8325:
 15091                           
 15092                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 15093  0034AE  0100               	movlb	0	; () banked
 15094  0034B0  517C               	movf	fround@prec& (0+255),w,b
 15095  0034B2  0D03               	mullw	3
 15096  0034B4  0ED1               	movlw	low __npowers_
 15097  0034B6  24F3               	addwf	prodl,w,c
 15098  0034B8  6EF6               	movwf	tblptrl,c
 15099  0034BA  0E78               	movlw	high __npowers_
 15100  0034BC  20F4               	addwfc	prodh,w,c
 15101  0034BE  6EF7               	movwf	tblptrh,c
 15102  0034C0                     	if	0	;There are less than 3 active tblptr bytes
 15103  0034C0                     	endif
 15104  0034C0  0009               	tblrd		*+
 15105  0034C2  CFF5 F064          	movff	tablat,___ftmul@f1
 15106  0034C6  0009               	tblrd		*+
 15107  0034C8  CFF5 F065          	movff	tablat,___ftmul@f1+1
 15108  0034CC  000A               	tblrd		*-
 15109  0034CE  CFF5 F066          	movff	tablat,___ftmul@f1+2
 15110  0034D2  0E00               	movlw	0
 15111  0034D4  0100               	movlb	0	; () banked
 15112  0034D6  6F67               	movwf	___ftmul@f2& (0+255),b
 15113  0034D8  0E00               	movlw	0
 15114  0034DA  0100               	movlb	0	; () banked
 15115  0034DC  6F68               	movwf	(___ftmul@f2+1)& (0+255),b
 15116  0034DE  0E3F               	movlw	63
 15117  0034E0  0100               	movlb	0	; () banked
 15118  0034E2  6F69               	movwf	(___ftmul@f2+2)& (0+255),b
 15119  0034E4  ECCF  F01D         	call	___ftmul	;wreg free
 15120  0034E8  C064  F073         	movff	?___ftmul,?_fround
 15121  0034EC  C065  F074         	movff	?___ftmul+1,?_fround+1
 15122  0034F0  C066  F075         	movff	?___ftmul+2,?_fround+2
 15123  0034F4  0012               	return	
 15124  0034F6                     __end_of_fround:
 15125                           	opt stack 0
 15126                           tblptru	equ	0xFF8
 15127                           tblptrh	equ	0xFF7
 15128                           tblptrl	equ	0xFF6
 15129                           tablat	equ	0xFF5
 15130                           prodh	equ	0xFF4
 15131                           prodl	equ	0xFF3
 15132                           intcon	equ	0xFF2
 15133                           indf0	equ	0xFEF
 15134                           postinc0	equ	0xFEE
 15135                           fsr0h	equ	0xFEA
 15136                           fsr0l	equ	0xFE9
 15137                           wreg	equ	0xFE8
 15138                           postinc1	equ	0xFE6
 15139                           postdec1	equ	0xFE5
 15140                           plusw1	equ	0xFE3
 15141                           fsr1h	equ	0xFE2
 15142                           fsr1l	equ	0xFE1
 15143                           indf2	equ	0xFDF
 15144                           postinc2	equ	0xFDE
 15145                           postdec2	equ	0xFDD
 15146                           plusw2	equ	0xFDB
 15147                           fsr2h	equ	0xFDA
 15148                           fsr2l	equ	0xFD9
 15149                           status	equ	0xFD8
 15150                           
 15151 ;; *************** function ___wmul *****************
 15152 ;; Defined at:
 15153 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 15154 ;; Parameters:    Size  Location     Type
 15155 ;;  multiplier      2    0[BANK0 ] unsigned int 
 15156 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;  product         2   40[COMRAM] unsigned int 
 15159 ;; Return value:  Size  Location     Type
 15160 ;;                  2    0[BANK0 ] unsigned int 
 15161 ;; Registers used:
 15162 ;;		wreg, status,2, status,0, prodl, prodh
 15163 ;; Tracked objects:
 15164 ;;		On entry : 0/0
 15165 ;;		On exit  : 0/0
 15166 ;;		Unchanged: 0/0
 15167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15168 ;;      Params:         0       4       0       0       0       0       0
 15169 ;;      Locals:         2       0       0       0       0       0       0
 15170 ;;      Temps:          0       0       0       0       0       0       0
 15171 ;;      Totals:         2       4       0       0       0       0       0
 15172 ;;Total ram usage:        6 bytes
 15173 ;; Hardware stack levels used:    1
 15174 ;; Hardware stack levels required when called:    4
 15175 ;; This function calls:
 15176 ;;		Nothing
 15177 ;; This function is called by:
 15178 ;;		_fround
 15179 ;;		_scale
 15180 ;;		_printf
 15181 ;; This function uses a non-reentrant model
 15182 ;;
 15183                           
 15184                           	psect	text33
 15185  0056C2                     __ptext33:
 15186                           	opt stack 0
 15187  0056C2                     ___wmul:
 15188                           	opt stack 23
 15189                           
 15190                           ;incstack = 0
 15191  0056C2  0100               	movlb	0	; () banked
 15192  0056C4  5160               	movf	___wmul@multiplier& (0+255),w,b
 15193  0056C6  0100               	movlb	0	; () banked
 15194  0056C8  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15195  0056CA  CFF3 F029          	movff	prodl,___wmul@product
 15196  0056CE  CFF4 F02A          	movff	prodh,___wmul@product+1
 15197  0056D2  0100               	movlb	0	; () banked
 15198  0056D4  5160               	movf	___wmul@multiplier& (0+255),w,b
 15199  0056D6  0100               	movlb	0	; () banked
 15200  0056D8  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 15201  0056DA  50F3               	movf	prodl,w,c
 15202  0056DC  262A               	addwf	___wmul@product+1,f,c
 15203  0056DE  0100               	movlb	0	; () banked
 15204  0056E0  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 15205  0056E2  0100               	movlb	0	; () banked
 15206  0056E4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 15207  0056E6  50F3               	movf	prodl,w,c
 15208  0056E8  262A               	addwf	___wmul@product+1,f,c
 15209                           
 15210                           ; BSR set to: 0
 15211  0056EA  C029  F060         	movff	___wmul@product,?___wmul
 15212  0056EE  C02A  F061         	movff	___wmul@product+1,?___wmul+1
 15213  0056F2  0012               	return	
 15214  0056F4                     __end_of___wmul:
 15215                           	opt stack 0
 15216                           tblptru	equ	0xFF8
 15217                           tblptrh	equ	0xFF7
 15218                           tblptrl	equ	0xFF6
 15219                           tablat	equ	0xFF5
 15220                           prodh	equ	0xFF4
 15221                           prodl	equ	0xFF3
 15222                           intcon	equ	0xFF2
 15223                           indf0	equ	0xFEF
 15224                           postinc0	equ	0xFEE
 15225                           fsr0h	equ	0xFEA
 15226                           fsr0l	equ	0xFE9
 15227                           wreg	equ	0xFE8
 15228                           postinc1	equ	0xFE6
 15229                           postdec1	equ	0xFE5
 15230                           plusw1	equ	0xFE3
 15231                           fsr1h	equ	0xFE2
 15232                           fsr1l	equ	0xFE1
 15233                           indf2	equ	0xFDF
 15234                           postinc2	equ	0xFDE
 15235                           postdec2	equ	0xFDD
 15236                           plusw2	equ	0xFDB
 15237                           fsr2h	equ	0xFDA
 15238                           fsr2l	equ	0xFD9
 15239                           status	equ	0xFD8
 15240                           
 15241 ;; *************** function ___ftmul *****************
 15242 ;; Defined at:
 15243 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 15244 ;; Parameters:    Size  Location     Type
 15245 ;;  f1              3    4[BANK0 ] float 
 15246 ;;  f2              3    7[BANK0 ] float 
 15247 ;; Auto vars:     Size  Location     Type
 15248 ;;  f3_as_produc    3   14[BANK0 ] unsigned um
 15249 ;;  sign            1   18[BANK0 ] unsigned char 
 15250 ;;  cntr            1   17[BANK0 ] unsigned char 
 15251 ;;  exp             1   13[BANK0 ] unsigned char 
 15252 ;; Return value:  Size  Location     Type
 15253 ;;                  3    4[BANK0 ] float 
 15254 ;; Registers used:
 15255 ;;		wreg, status,2, status,0, cstack
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/0
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15261 ;;      Params:         0       6       0       0       0       0       0
 15262 ;;      Locals:         0       6       0       0       0       0       0
 15263 ;;      Temps:          0       3       0       0       0       0       0
 15264 ;;      Totals:         0      15       0       0       0       0       0
 15265 ;;Total ram usage:       15 bytes
 15266 ;; Hardware stack levels used:    1
 15267 ;; Hardware stack levels required when called:    5
 15268 ;; This function calls:
 15269 ;;		___ftpack
 15270 ;; This function is called by:
 15271 ;;		_Setup
 15272 ;;		_fround
 15273 ;;		_scale
 15274 ;;		_printf
 15275 ;;		_sqrt
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text34
 15280  003B9E                     __ptext34:
 15281                           	opt stack 0
 15282  003B9E                     ___ftmul:
 15283                           	opt stack 22
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;incstack = 0
 15287  003B9E  C066  F06A         	movff	___ftmul@f1+2,??___ftmul
 15288  003BA2  0100               	movlb	0	; () banked
 15289  003BA4  6B6B               	clrf	(??___ftmul+1)& (0+255),b
 15290  003BA6  6B6C               	clrf	(??___ftmul+2)& (0+255),b
 15291  003BA8  0100               	movlb	0	; () banked
 15292  003BAA  3565               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 15293  003BAC  0100               	movlb	0	; () banked
 15294  003BAE  376A               	rlcf	??___ftmul& (0+255),f,b
 15295  003BB0  E301               	bnc	u8831
 15296  003BB2  816B               	bsf	(??___ftmul+1)& (0+255),0,b
 15297  003BB4                     u8831:
 15298  003BB4  0100               	movlb	0	; () banked
 15299  003BB6  516A               	movf	??___ftmul& (0+255),w,b
 15300  003BB8  0100               	movlb	0	; () banked
 15301  003BBA  6F6D               	movwf	___ftmul@exp& (0+255),b
 15302  003BBC  0100               	movlb	0	; () banked
 15303  003BBE  516D               	movf	___ftmul@exp& (0+255),w,b
 15304  003BC0  A4D8               	btfss	status,2,c
 15305  003BC2  D00A               	goto	l8171
 15306                           
 15307                           ; BSR set to: 0
 15308  003BC4  0E00               	movlw	0
 15309  003BC6  0100               	movlb	0	; () banked
 15310  003BC8  6F64               	movwf	?___ftmul& (0+255),b
 15311  003BCA  0E00               	movlw	0
 15312  003BCC  0100               	movlb	0	; () banked
 15313  003BCE  6F65               	movwf	(?___ftmul+1)& (0+255),b
 15314  003BD0  0E00               	movlw	0
 15315  003BD2  0100               	movlb	0	; () banked
 15316  003BD4  6F66               	movwf	(?___ftmul+2)& (0+255),b
 15317                           
 15318                           ; BSR set to: 0
 15319  003BD6  0012               	return	
 15320  003BD8                     l8171:
 15321                           
 15322                           ; BSR set to: 0
 15323  003BD8  C069  F06A         	movff	___ftmul@f2+2,??___ftmul
 15324  003BDC  0100               	movlb	0	; () banked
 15325  003BDE  6B6B               	clrf	(??___ftmul+1)& (0+255),b
 15326  003BE0  6B6C               	clrf	(??___ftmul+2)& (0+255),b
 15327  003BE2  0100               	movlb	0	; () banked
 15328  003BE4  3568               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 15329  003BE6  0100               	movlb	0	; () banked
 15330  003BE8  376A               	rlcf	??___ftmul& (0+255),f,b
 15331  003BEA  E301               	bnc	u8851
 15332  003BEC  816B               	bsf	(??___ftmul+1)& (0+255),0,b
 15333  003BEE                     u8851:
 15334  003BEE  0100               	movlb	0	; () banked
 15335  003BF0  516A               	movf	??___ftmul& (0+255),w,b
 15336  003BF2  0100               	movlb	0	; () banked
 15337  003BF4  6F72               	movwf	___ftmul@sign& (0+255),b
 15338  003BF6  0100               	movlb	0	; () banked
 15339  003BF8  5172               	movf	___ftmul@sign& (0+255),w,b
 15340  003BFA  A4D8               	btfss	status,2,c
 15341  003BFC  D00A               	goto	l8177
 15342                           
 15343                           ; BSR set to: 0
 15344  003BFE  0E00               	movlw	0
 15345  003C00  0100               	movlb	0	; () banked
 15346  003C02  6F64               	movwf	?___ftmul& (0+255),b
 15347  003C04  0E00               	movlw	0
 15348  003C06  0100               	movlb	0	; () banked
 15349  003C08  6F65               	movwf	(?___ftmul+1)& (0+255),b
 15350  003C0A  0E00               	movlw	0
 15351  003C0C  0100               	movlb	0	; () banked
 15352  003C0E  6F66               	movwf	(?___ftmul+2)& (0+255),b
 15353                           
 15354                           ; BSR set to: 0
 15355  003C10  0012               	return	
 15356  003C12                     l8177:
 15357                           
 15358                           ; BSR set to: 0
 15359  003C12  0100               	movlb	0	; () banked
 15360  003C14  5172               	movf	___ftmul@sign& (0+255),w,b
 15361  003C16  0F7B               	addlw	123
 15362  003C18  0100               	movlb	0	; () banked
 15363  003C1A  276D               	addwf	___ftmul@exp& (0+255),f,b
 15364                           
 15365                           ; BSR set to: 0
 15366  003C1C  C066  F072         	movff	___ftmul@f1+2,___ftmul@sign
 15367  003C20  0100               	movlb	0	; () banked
 15368  003C22  5169               	movf	(___ftmul@f2+2)& (0+255),w,b
 15369  003C24  0100               	movlb	0	; () banked
 15370  003C26  1B72               	xorwf	___ftmul@sign& (0+255),f,b
 15371  003C28  0E80               	movlw	128
 15372  003C2A  0100               	movlb	0	; () banked
 15373  003C2C  1772               	andwf	___ftmul@sign& (0+255),f,b
 15374                           
 15375                           ; BSR set to: 0
 15376  003C2E  0100               	movlb	0	; () banked
 15377  003C30  8F65               	bsf	(___ftmul@f1+1)& (0+255),7,b
 15378                           
 15379                           ; BSR set to: 0
 15380  003C32  0100               	movlb	0	; () banked
 15381  003C34  8F68               	bsf	(___ftmul@f2+1)& (0+255),7,b
 15382                           
 15383                           ; BSR set to: 0
 15384  003C36  0EFF               	movlw	255
 15385  003C38  0100               	movlb	0	; () banked
 15386  003C3A  1767               	andwf	___ftmul@f2& (0+255),f,b
 15387  003C3C  0EFF               	movlw	255
 15388  003C3E  0100               	movlb	0	; () banked
 15389  003C40  1768               	andwf	(___ftmul@f2+1)& (0+255),f,b
 15390  003C42  0E00               	movlw	0
 15391  003C44  0100               	movlb	0	; () banked
 15392  003C46  1769               	andwf	(___ftmul@f2+2)& (0+255),f,b
 15393                           
 15394                           ; BSR set to: 0
 15395  003C48  0E00               	movlw	0
 15396  003C4A  0100               	movlb	0	; () banked
 15397  003C4C  6F6E               	movwf	___ftmul@f3_as_product& (0+255),b
 15398  003C4E  0E00               	movlw	0
 15399  003C50  0100               	movlb	0	; () banked
 15400  003C52  6F6F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 15401  003C54  0E00               	movlw	0
 15402  003C56  0100               	movlb	0	; () banked
 15403  003C58  6F70               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 15404                           
 15405                           ; BSR set to: 0
 15406  003C5A  0E07               	movlw	7
 15407  003C5C  0100               	movlb	0	; () banked
 15408  003C5E  6F71               	movwf	___ftmul@cntr& (0+255),b
 15409  003C60                     l8191:
 15410                           
 15411                           ; BSR set to: 0
 15412  003C60  0100               	movlb	0	; () banked
 15413  003C62  A164               	btfss	___ftmul@f1& (0+255),0,b
 15414  003C64  D00C               	goto	l8195
 15415                           
 15416                           ; BSR set to: 0
 15417  003C66  0100               	movlb	0	; () banked
 15418  003C68  5167               	movf	___ftmul@f2& (0+255),w,b
 15419  003C6A  0100               	movlb	0	; () banked
 15420  003C6C  276E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15421  003C6E  0100               	movlb	0	; () banked
 15422  003C70  5168               	movf	(___ftmul@f2+1)& (0+255),w,b
 15423  003C72  0100               	movlb	0	; () banked
 15424  003C74  236F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15425  003C76  0100               	movlb	0	; () banked
 15426  003C78  5169               	movf	(___ftmul@f2+2)& (0+255),w,b
 15427  003C7A  0100               	movlb	0	; () banked
 15428  003C7C  2370               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15429  003C7E                     l8195:
 15430                           
 15431                           ; BSR set to: 0
 15432  003C7E  0100               	movlb	0	; () banked
 15433  003C80  90D8               	bcf	status,0,c
 15434  003C82  3366               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15435  003C84  3365               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15436  003C86  3364               	rrcf	___ftmul@f1& (0+255),f,b
 15437  003C88  0100               	movlb	0	; () banked
 15438  003C8A  90D8               	bcf	status,0,c
 15439  003C8C  3767               	rlcf	___ftmul@f2& (0+255),f,b
 15440  003C8E  3768               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 15441  003C90  3769               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 15442                           
 15443                           ; BSR set to: 0
 15444  003C92  0100               	movlb	0	; () banked
 15445  003C94  2F71               	decfsz	___ftmul@cntr& (0+255),f,b
 15446  003C96  D7E4               	goto	l8191
 15447                           
 15448                           ; BSR set to: 0
 15449                           
 15450                           ; BSR set to: 0
 15451  003C98  0E09               	movlw	9
 15452  003C9A  0100               	movlb	0	; () banked
 15453  003C9C  6F71               	movwf	___ftmul@cntr& (0+255),b
 15454  003C9E                     l8201:
 15455                           
 15456                           ; BSR set to: 0
 15457  003C9E  0100               	movlb	0	; () banked
 15458  003CA0  A164               	btfss	___ftmul@f1& (0+255),0,b
 15459  003CA2  D00C               	goto	l8205
 15460                           
 15461                           ; BSR set to: 0
 15462  003CA4  0100               	movlb	0	; () banked
 15463  003CA6  5167               	movf	___ftmul@f2& (0+255),w,b
 15464  003CA8  0100               	movlb	0	; () banked
 15465  003CAA  276E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15466  003CAC  0100               	movlb	0	; () banked
 15467  003CAE  5168               	movf	(___ftmul@f2+1)& (0+255),w,b
 15468  003CB0  0100               	movlb	0	; () banked
 15469  003CB2  236F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15470  003CB4  0100               	movlb	0	; () banked
 15471  003CB6  5169               	movf	(___ftmul@f2+2)& (0+255),w,b
 15472  003CB8  0100               	movlb	0	; () banked
 15473  003CBA  2370               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15474  003CBC                     l8205:
 15475                           
 15476                           ; BSR set to: 0
 15477  003CBC  0100               	movlb	0	; () banked
 15478  003CBE  90D8               	bcf	status,0,c
 15479  003CC0  3366               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15480  003CC2  3365               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15481  003CC4  3364               	rrcf	___ftmul@f1& (0+255),f,b
 15482  003CC6  0100               	movlb	0	; () banked
 15483  003CC8  90D8               	bcf	status,0,c
 15484  003CCA  3370               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15485  003CCC  336F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15486  003CCE  336E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15487                           
 15488                           ; BSR set to: 0
 15489  003CD0  0100               	movlb	0	; () banked
 15490  003CD2  2F71               	decfsz	___ftmul@cntr& (0+255),f,b
 15491  003CD4  D7E4               	goto	l8201
 15492                           
 15493                           ; BSR set to: 0
 15494                           
 15495                           ; BSR set to: 0
 15496  003CD6  C06E  F01B         	movff	___ftmul@f3_as_product,___ftpack@arg
 15497  003CDA  C06F  F01C         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15498  003CDE  C070  F01D         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15499  003CE2  C06D  F01E         	movff	___ftmul@exp,___ftpack@exp
 15500  003CE6  C072  F01F         	movff	___ftmul@sign,___ftpack@sign
 15501  003CEA  EC0B  F027         	call	___ftpack	;wreg free
 15502  003CEE  C01B  F064         	movff	?___ftpack,?___ftmul
 15503  003CF2  C01C  F065         	movff	?___ftpack+1,?___ftmul+1
 15504  003CF6  C01D  F066         	movff	?___ftpack+2,?___ftmul+2
 15505  003CFA  0012               	return	
 15506  003CFC                     __end_of___ftmul:
 15507                           	opt stack 0
 15508                           tblptru	equ	0xFF8
 15509                           tblptrh	equ	0xFF7
 15510                           tblptrl	equ	0xFF6
 15511                           tablat	equ	0xFF5
 15512                           prodh	equ	0xFF4
 15513                           prodl	equ	0xFF3
 15514                           intcon	equ	0xFF2
 15515                           indf0	equ	0xFEF
 15516                           postinc0	equ	0xFEE
 15517                           fsr0h	equ	0xFEA
 15518                           fsr0l	equ	0xFE9
 15519                           wreg	equ	0xFE8
 15520                           postinc1	equ	0xFE6
 15521                           postdec1	equ	0xFE5
 15522                           plusw1	equ	0xFE3
 15523                           fsr1h	equ	0xFE2
 15524                           fsr1l	equ	0xFE1
 15525                           indf2	equ	0xFDF
 15526                           postinc2	equ	0xFDE
 15527                           postdec2	equ	0xFDD
 15528                           plusw2	equ	0xFDB
 15529                           fsr2h	equ	0xFDA
 15530                           fsr2l	equ	0xFD9
 15531                           status	equ	0xFD8
 15532                           
 15533 ;; *************** function ___awmod *****************
 15534 ;; Defined at:
 15535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;  dividend        2   26[COMRAM] int 
 15538 ;;  divisor         2   28[COMRAM] int 
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;  sign            1   31[COMRAM] unsigned char 
 15541 ;;  counter         1   30[COMRAM] unsigned char 
 15542 ;; Return value:  Size  Location     Type
 15543 ;;                  2   26[COMRAM] int 
 15544 ;; Registers used:
 15545 ;;		wreg, status,2, status,0
 15546 ;; Tracked objects:
 15547 ;;		On entry : 0/0
 15548 ;;		On exit  : 0/0
 15549 ;;		Unchanged: 0/0
 15550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15551 ;;      Params:         4       0       0       0       0       0       0
 15552 ;;      Locals:         2       0       0       0       0       0       0
 15553 ;;      Temps:          0       0       0       0       0       0       0
 15554 ;;      Totals:         6       0       0       0       0       0       0
 15555 ;;Total ram usage:        6 bytes
 15556 ;; Hardware stack levels used:    1
 15557 ;; Hardware stack levels required when called:    4
 15558 ;; This function calls:
 15559 ;;		Nothing
 15560 ;; This function is called by:
 15561 ;;		_fround
 15562 ;;		_scale
 15563 ;; This function uses a non-reentrant model
 15564 ;;
 15565                           
 15566                           	psect	text35
 15567  0052AC                     __ptext35:
 15568                           	opt stack 0
 15569  0052AC                     ___awmod:
 15570                           	opt stack 23
 15571                           
 15572                           ;incstack = 0
 15573  0052AC  0E00               	movlw	0
 15574  0052AE  6E20               	movwf	___awmod@sign,c
 15575  0052B0  AE1C               	btfss	___awmod@dividend+1,7,c
 15576  0052B2  D006               	goto	l8265
 15577  0052B4  6C1B               	negf	___awmod@dividend,c
 15578  0052B6  1E1C               	comf	___awmod@dividend+1,f,c
 15579  0052B8  B0D8               	btfsc	status,0,c
 15580  0052BA  2A1C               	incf	___awmod@dividend+1,f,c
 15581  0052BC  0E01               	movlw	1
 15582  0052BE  6E20               	movwf	___awmod@sign,c
 15583  0052C0                     l8265:
 15584  0052C0  AE1E               	btfss	___awmod@divisor+1,7,c
 15585  0052C2  D004               	goto	l8269
 15586  0052C4  6C1D               	negf	___awmod@divisor,c
 15587  0052C6  1E1E               	comf	___awmod@divisor+1,f,c
 15588  0052C8  B0D8               	btfsc	status,0,c
 15589  0052CA  2A1E               	incf	___awmod@divisor+1,f,c
 15590  0052CC                     l8269:
 15591  0052CC  501D               	movf	___awmod@divisor,w,c
 15592  0052CE  101E               	iorwf	___awmod@divisor+1,w,c
 15593  0052D0  B4D8               	btfsc	status,2,c
 15594  0052D2  D018               	goto	l8285
 15595  0052D4  0E01               	movlw	1
 15596  0052D6  6E1F               	movwf	___awmod@counter,c
 15597  0052D8  D004               	goto	l8275
 15598  0052DA                     l8273:
 15599  0052DA  90D8               	bcf	status,0,c
 15600  0052DC  361D               	rlcf	___awmod@divisor,f,c
 15601  0052DE  361E               	rlcf	___awmod@divisor+1,f,c
 15602  0052E0  2A1F               	incf	___awmod@counter,f,c
 15603  0052E2                     l8275:
 15604  0052E2  AE1E               	btfss	___awmod@divisor+1,7,c
 15605  0052E4  D7FA               	goto	l8273
 15606  0052E6                     l8277:
 15607  0052E6  501D               	movf	___awmod@divisor,w,c
 15608  0052E8  5C1B               	subwf	___awmod@dividend,w,c
 15609  0052EA  501E               	movf	___awmod@divisor+1,w,c
 15610  0052EC  581C               	subwfb	___awmod@dividend+1,w,c
 15611  0052EE  A0D8               	btfss	status,0,c
 15612  0052F0  D004               	goto	l8281
 15613  0052F2  501D               	movf	___awmod@divisor,w,c
 15614  0052F4  5E1B               	subwf	___awmod@dividend,f,c
 15615  0052F6  501E               	movf	___awmod@divisor+1,w,c
 15616  0052F8  5A1C               	subwfb	___awmod@dividend+1,f,c
 15617  0052FA                     l8281:
 15618  0052FA  90D8               	bcf	status,0,c
 15619  0052FC  321E               	rrcf	___awmod@divisor+1,f,c
 15620  0052FE  321D               	rrcf	___awmod@divisor,f,c
 15621  005300  2E1F               	decfsz	___awmod@counter,f,c
 15622  005302  D7F1               	goto	l8277
 15623  005304                     l8285:
 15624  005304  5020               	movf	___awmod@sign,w,c
 15625  005306  B4D8               	btfsc	status,2,c
 15626  005308  D004               	goto	l8289
 15627  00530A  6C1B               	negf	___awmod@dividend,c
 15628  00530C  1E1C               	comf	___awmod@dividend+1,f,c
 15629  00530E  B0D8               	btfsc	status,0,c
 15630  005310  2A1C               	incf	___awmod@dividend+1,f,c
 15631  005312                     l8289:
 15632  005312  C01B  F01B         	movff	___awmod@dividend,?___awmod
 15633  005316  C01C  F01C         	movff	___awmod@dividend+1,?___awmod+1
 15634  00531A  0012               	return	
 15635  00531C                     __end_of___awmod:
 15636                           	opt stack 0
 15637                           tblptru	equ	0xFF8
 15638                           tblptrh	equ	0xFF7
 15639                           tblptrl	equ	0xFF6
 15640                           tablat	equ	0xFF5
 15641                           prodh	equ	0xFF4
 15642                           prodl	equ	0xFF3
 15643                           intcon	equ	0xFF2
 15644                           indf0	equ	0xFEF
 15645                           postinc0	equ	0xFEE
 15646                           fsr0h	equ	0xFEA
 15647                           fsr0l	equ	0xFE9
 15648                           wreg	equ	0xFE8
 15649                           postinc1	equ	0xFE6
 15650                           postdec1	equ	0xFE5
 15651                           plusw1	equ	0xFE3
 15652                           fsr1h	equ	0xFE2
 15653                           fsr1l	equ	0xFE1
 15654                           indf2	equ	0xFDF
 15655                           postinc2	equ	0xFDE
 15656                           postdec2	equ	0xFDD
 15657                           plusw2	equ	0xFDB
 15658                           fsr2h	equ	0xFDA
 15659                           fsr2l	equ	0xFD9
 15660                           status	equ	0xFD8
 15661                           
 15662 ;; *************** function ___awdiv *****************
 15663 ;; Defined at:
 15664 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 15665 ;; Parameters:    Size  Location     Type
 15666 ;;  dividend        2   32[COMRAM] int 
 15667 ;;  divisor         2   34[COMRAM] int 
 15668 ;; Auto vars:     Size  Location     Type
 15669 ;;  quotient        2   38[COMRAM] int 
 15670 ;;  sign            1   37[COMRAM] unsigned char 
 15671 ;;  counter         1   36[COMRAM] unsigned char 
 15672 ;; Return value:  Size  Location     Type
 15673 ;;                  2   32[COMRAM] int 
 15674 ;; Registers used:
 15675 ;;		wreg, status,2, status,0
 15676 ;; Tracked objects:
 15677 ;;		On entry : 0/0
 15678 ;;		On exit  : 0/0
 15679 ;;		Unchanged: 0/0
 15680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15681 ;;      Params:         4       0       0       0       0       0       0
 15682 ;;      Locals:         4       0       0       0       0       0       0
 15683 ;;      Temps:          0       0       0       0       0       0       0
 15684 ;;      Totals:         8       0       0       0       0       0       0
 15685 ;;Total ram usage:        8 bytes
 15686 ;; Hardware stack levels used:    1
 15687 ;; Hardware stack levels required when called:    4
 15688 ;; This function calls:
 15689 ;;		Nothing
 15690 ;; This function is called by:
 15691 ;;		_magCalBNO055
 15692 ;;		_fround
 15693 ;;		_scale
 15694 ;;		_printf
 15695 ;;		_begin
 15696 ;; This function uses a non-reentrant model
 15697 ;;
 15698                           
 15699                           	psect	text36
 15700  005126                     __ptext36:
 15701                           	opt stack 0
 15702  005126                     ___awdiv:
 15703                           	opt stack 23
 15704                           
 15705                           ;incstack = 0
 15706  005126  0E00               	movlw	0
 15707  005128  6E26               	movwf	___awdiv@sign,c
 15708  00512A  AE24               	btfss	___awdiv@divisor+1,7,c
 15709  00512C  D006               	goto	l8221
 15710  00512E  6C23               	negf	___awdiv@divisor,c
 15711  005130  1E24               	comf	___awdiv@divisor+1,f,c
 15712  005132  B0D8               	btfsc	status,0,c
 15713  005134  2A24               	incf	___awdiv@divisor+1,f,c
 15714  005136  0E01               	movlw	1
 15715  005138  6E26               	movwf	___awdiv@sign,c
 15716  00513A                     l8221:
 15717  00513A  AE22               	btfss	___awdiv@dividend+1,7,c
 15718  00513C  D006               	goto	l8227
 15719  00513E  6C21               	negf	___awdiv@dividend,c
 15720  005140  1E22               	comf	___awdiv@dividend+1,f,c
 15721  005142  B0D8               	btfsc	status,0,c
 15722  005144  2A22               	incf	___awdiv@dividend+1,f,c
 15723  005146  0E01               	movlw	1
 15724  005148  1A26               	xorwf	___awdiv@sign,f,c
 15725  00514A                     l8227:
 15726  00514A  0E00               	movlw	0
 15727  00514C  6E28               	movwf	___awdiv@quotient+1,c
 15728  00514E  0E00               	movlw	0
 15729  005150  6E27               	movwf	___awdiv@quotient,c
 15730  005152  5023               	movf	___awdiv@divisor,w,c
 15731  005154  1024               	iorwf	___awdiv@divisor+1,w,c
 15732  005156  B4D8               	btfsc	status,2,c
 15733  005158  D01C               	goto	l8249
 15734  00515A  0E01               	movlw	1
 15735  00515C  6E25               	movwf	___awdiv@counter,c
 15736  00515E  D004               	goto	l8235
 15737  005160                     l8233:
 15738  005160  90D8               	bcf	status,0,c
 15739  005162  3623               	rlcf	___awdiv@divisor,f,c
 15740  005164  3624               	rlcf	___awdiv@divisor+1,f,c
 15741  005166  2A25               	incf	___awdiv@counter,f,c
 15742  005168                     l8235:
 15743  005168  AE24               	btfss	___awdiv@divisor+1,7,c
 15744  00516A  D7FA               	goto	l8233
 15745  00516C                     l8237:
 15746  00516C  90D8               	bcf	status,0,c
 15747  00516E  3627               	rlcf	___awdiv@quotient,f,c
 15748  005170  3628               	rlcf	___awdiv@quotient+1,f,c
 15749  005172  5023               	movf	___awdiv@divisor,w,c
 15750  005174  5C21               	subwf	___awdiv@dividend,w,c
 15751  005176  5024               	movf	___awdiv@divisor+1,w,c
 15752  005178  5822               	subwfb	___awdiv@dividend+1,w,c
 15753  00517A  A0D8               	btfss	status,0,c
 15754  00517C  D005               	goto	l8245
 15755  00517E  5023               	movf	___awdiv@divisor,w,c
 15756  005180  5E21               	subwf	___awdiv@dividend,f,c
 15757  005182  5024               	movf	___awdiv@divisor+1,w,c
 15758  005184  5A22               	subwfb	___awdiv@dividend+1,f,c
 15759  005186  8027               	bsf	___awdiv@quotient,0,c
 15760  005188                     l8245:
 15761  005188  90D8               	bcf	status,0,c
 15762  00518A  3224               	rrcf	___awdiv@divisor+1,f,c
 15763  00518C  3223               	rrcf	___awdiv@divisor,f,c
 15764  00518E  2E25               	decfsz	___awdiv@counter,f,c
 15765  005190  D7ED               	goto	l8237
 15766  005192                     l8249:
 15767  005192  5026               	movf	___awdiv@sign,w,c
 15768  005194  B4D8               	btfsc	status,2,c
 15769  005196  D004               	goto	l8253
 15770  005198  6C27               	negf	___awdiv@quotient,c
 15771  00519A  1E28               	comf	___awdiv@quotient+1,f,c
 15772  00519C  B0D8               	btfsc	status,0,c
 15773  00519E  2A28               	incf	___awdiv@quotient+1,f,c
 15774  0051A0                     l8253:
 15775  0051A0  C027  F021         	movff	___awdiv@quotient,?___awdiv
 15776  0051A4  C028  F022         	movff	___awdiv@quotient+1,?___awdiv+1
 15777  0051A8  0012               	return	
 15778  0051AA                     __end_of___awdiv:
 15779                           	opt stack 0
 15780                           tblptru	equ	0xFF8
 15781                           tblptrh	equ	0xFF7
 15782                           tblptrl	equ	0xFF6
 15783                           tablat	equ	0xFF5
 15784                           prodh	equ	0xFF4
 15785                           prodl	equ	0xFF3
 15786                           intcon	equ	0xFF2
 15787                           indf0	equ	0xFEF
 15788                           postinc0	equ	0xFEE
 15789                           fsr0h	equ	0xFEA
 15790                           fsr0l	equ	0xFE9
 15791                           wreg	equ	0xFE8
 15792                           postinc1	equ	0xFE6
 15793                           postdec1	equ	0xFE5
 15794                           plusw1	equ	0xFE3
 15795                           fsr1h	equ	0xFE2
 15796                           fsr1l	equ	0xFE1
 15797                           indf2	equ	0xFDF
 15798                           postinc2	equ	0xFDE
 15799                           postdec2	equ	0xFDD
 15800                           plusw2	equ	0xFDB
 15801                           fsr2h	equ	0xFDA
 15802                           fsr2l	equ	0xFD9
 15803                           status	equ	0xFD8
 15804                           
 15805 ;; *************** function __tdiv_to_l_ *****************
 15806 ;; Defined at:
 15807 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
 15808 ;; Parameters:    Size  Location     Type
 15809 ;;  f1              3   26[COMRAM] float 
 15810 ;;  f2              3   29[COMRAM] float 
 15811 ;; Auto vars:     Size  Location     Type
 15812 ;;  quot            4   35[COMRAM] unsigned long 
 15813 ;;  exp1            1   40[COMRAM] unsigned char 
 15814 ;;  cntr            1   39[COMRAM] unsigned char 
 15815 ;; Return value:  Size  Location     Type
 15816 ;;                  4   26[COMRAM] unsigned long 
 15817 ;; Registers used:
 15818 ;;		wreg, status,2, status,0
 15819 ;; Tracked objects:
 15820 ;;		On entry : 0/0
 15821 ;;		On exit  : 0/0
 15822 ;;		Unchanged: 0/0
 15823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15824 ;;      Params:         6       0       0       0       0       0       0
 15825 ;;      Locals:         6       0       0       0       0       0       0
 15826 ;;      Temps:          3       0       0       0       0       0       0
 15827 ;;      Totals:        15       0       0       0       0       0       0
 15828 ;;Total ram usage:       15 bytes
 15829 ;; Hardware stack levels used:    1
 15830 ;; Hardware stack levels required when called:    4
 15831 ;; This function calls:
 15832 ;;		Nothing
 15833 ;; This function is called by:
 15834 ;;		_printf
 15835 ;; This function uses a non-reentrant model
 15836 ;;
 15837                           
 15838                           	psect	text37
 15839  003F8C                     __ptext37:
 15840                           	opt stack 0
 15841  003F8C                     __tdiv_to_l_:
 15842                           	opt stack 24
 15843                           
 15844                           ;incstack = 0
 15845  003F8C  C01D  F021         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 15846  003F90  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 15847  003F92  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 15848  003F94  341C               	rlcf	__tdiv_to_l_@f1+1,w,c
 15849  003F96  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
 15850  003F98  E301               	bnc	u9121
 15851  003F9A  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 15852  003F9C                     u9121:
 15853  003F9C  5021               	movf	??__tdiv_to_l_,w,c
 15854  003F9E  6E29               	movwf	__tdiv_to_l_@exp1,c
 15855  003FA0  5029               	movf	__tdiv_to_l_@exp1,w,c
 15856  003FA2  A4D8               	btfss	status,2,c
 15857  003FA4  D009               	goto	l8385
 15858  003FA6  0E00               	movlw	0
 15859  003FA8  6E1B               	movwf	?__tdiv_to_l_,c
 15860  003FAA  0E00               	movlw	0
 15861  003FAC  6E1C               	movwf	?__tdiv_to_l_+1,c
 15862  003FAE  0E00               	movlw	0
 15863  003FB0  6E1D               	movwf	?__tdiv_to_l_+2,c
 15864  003FB2  0E00               	movlw	0
 15865  003FB4  6E1E               	movwf	?__tdiv_to_l_+3,c
 15866  003FB6  0012               	return	
 15867  003FB8                     l8385:
 15868  003FB8  C020  F021         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 15869  003FBC  6A22               	clrf	(??__tdiv_to_l_+1)& (0+255),c
 15870  003FBE  6A23               	clrf	(??__tdiv_to_l_+2)& (0+255),c
 15871  003FC0  341F               	rlcf	__tdiv_to_l_@f2+1,w,c
 15872  003FC2  3621               	rlcf	??__tdiv_to_l_& (0+255),f,c
 15873  003FC4  E301               	bnc	u9141
 15874  003FC6  8022               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
 15875  003FC8                     u9141:
 15876  003FC8  5021               	movf	??__tdiv_to_l_,w,c
 15877  003FCA  6E28               	movwf	__tdiv_to_l_@cntr,c
 15878  003FCC  5028               	movf	__tdiv_to_l_@cntr,w,c
 15879  003FCE  A4D8               	btfss	status,2,c
 15880  003FD0  D009               	goto	l8391
 15881  003FD2  0E00               	movlw	0
 15882  003FD4  6E1B               	movwf	?__tdiv_to_l_,c
 15883  003FD6  0E00               	movlw	0
 15884  003FD8  6E1C               	movwf	?__tdiv_to_l_+1,c
 15885  003FDA  0E00               	movlw	0
 15886  003FDC  6E1D               	movwf	?__tdiv_to_l_+2,c
 15887  003FDE  0E00               	movlw	0
 15888  003FE0  6E1E               	movwf	?__tdiv_to_l_+3,c
 15889  003FE2  0012               	return	
 15890  003FE4                     l8391:
 15891  003FE4  8E1C               	bsf	__tdiv_to_l_@f1+1,7,c
 15892  003FE6  0EFF               	movlw	255
 15893  003FE8  161B               	andwf	__tdiv_to_l_@f1,f,c
 15894  003FEA  0EFF               	movlw	255
 15895  003FEC  161C               	andwf	__tdiv_to_l_@f1+1,f,c
 15896  003FEE  0E00               	movlw	0
 15897  003FF0  161D               	andwf	__tdiv_to_l_@f1+2,f,c
 15898  003FF2  8E1F               	bsf	__tdiv_to_l_@f2+1,7,c
 15899  003FF4  0EFF               	movlw	255
 15900  003FF6  161E               	andwf	__tdiv_to_l_@f2,f,c
 15901  003FF8  0EFF               	movlw	255
 15902  003FFA  161F               	andwf	__tdiv_to_l_@f2+1,f,c
 15903  003FFC  0E00               	movlw	0
 15904  003FFE  1620               	andwf	__tdiv_to_l_@f2+2,f,c
 15905  004000  0E00               	movlw	0
 15906  004002  6E24               	movwf	__tdiv_to_l_@quot,c
 15907  004004  0E00               	movlw	0
 15908  004006  6E25               	movwf	__tdiv_to_l_@quot+1,c
 15909  004008  0E00               	movlw	0
 15910  00400A  6E26               	movwf	__tdiv_to_l_@quot+2,c
 15911  00400C  0E00               	movlw	0
 15912  00400E  6E27               	movwf	__tdiv_to_l_@quot+3,c
 15913  004010  0E7F               	movlw	127
 15914  004012  5E29               	subwf	__tdiv_to_l_@exp1,f,c
 15915  004014  5028               	movf	__tdiv_to_l_@cntr,w,c
 15916  004016  0F98               	addlw	152
 15917  004018  5E29               	subwf	__tdiv_to_l_@exp1,f,c
 15918  00401A  0E18               	movlw	24
 15919  00401C  6E28               	movwf	__tdiv_to_l_@cntr,c
 15920  00401E                     l1820:
 15921  00401E  90D8               	bcf	status,0,c
 15922  004020  3624               	rlcf	__tdiv_to_l_@quot,f,c
 15923  004022  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
 15924  004024  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
 15925  004026  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
 15926  004028  501E               	movf	__tdiv_to_l_@f2,w,c
 15927  00402A  5C1B               	subwf	__tdiv_to_l_@f1,w,c
 15928  00402C  501F               	movf	__tdiv_to_l_@f2+1,w,c
 15929  00402E  581C               	subwfb	__tdiv_to_l_@f1+1,w,c
 15930  004030  5020               	movf	__tdiv_to_l_@f2+2,w,c
 15931  004032  581D               	subwfb	__tdiv_to_l_@f1+2,w,c
 15932  004034  A0D8               	btfss	status,0,c
 15933  004036  D007               	goto	l1821
 15934  004038  501E               	movf	__tdiv_to_l_@f2,w,c
 15935  00403A  5E1B               	subwf	__tdiv_to_l_@f1,f,c
 15936  00403C  501F               	movf	__tdiv_to_l_@f2+1,w,c
 15937  00403E  5A1C               	subwfb	__tdiv_to_l_@f1+1,f,c
 15938  004040  5020               	movf	__tdiv_to_l_@f2+2,w,c
 15939  004042  5A1D               	subwfb	__tdiv_to_l_@f1+2,f,c
 15940  004044  8024               	bsf	__tdiv_to_l_@quot,0,c
 15941  004046                     l1821:
 15942  004046  90D8               	bcf	status,0,c
 15943  004048  361B               	rlcf	__tdiv_to_l_@f1,f,c
 15944  00404A  361C               	rlcf	__tdiv_to_l_@f1+1,f,c
 15945  00404C  361D               	rlcf	__tdiv_to_l_@f1+2,f,c
 15946  00404E  2E28               	decfsz	__tdiv_to_l_@cntr,f,c
 15947  004050  D7E6               	goto	l1820
 15948  004052  AE29               	btfss	__tdiv_to_l_@exp1,7,c
 15949  004054  D016               	goto	l8425
 15950  004056  5029               	movf	__tdiv_to_l_@exp1,w,c
 15951  004058  0A80               	xorlw	128
 15952  00405A  0F97               	addlw	151
 15953  00405C  B0D8               	btfsc	status,0,c
 15954  00405E  D009               	goto	l8421
 15955  004060  0E00               	movlw	0
 15956  004062  6E1B               	movwf	?__tdiv_to_l_,c
 15957  004064  0E00               	movlw	0
 15958  004066  6E1C               	movwf	?__tdiv_to_l_+1,c
 15959  004068  0E00               	movlw	0
 15960  00406A  6E1D               	movwf	?__tdiv_to_l_+2,c
 15961  00406C  0E00               	movlw	0
 15962  00406E  6E1E               	movwf	?__tdiv_to_l_+3,c
 15963  004070  0012               	return	
 15964  004072                     l8421:
 15965  004072  90D8               	bcf	status,0,c
 15966  004074  3227               	rrcf	__tdiv_to_l_@quot+3,f,c
 15967  004076  3226               	rrcf	__tdiv_to_l_@quot+2,f,c
 15968  004078  3225               	rrcf	__tdiv_to_l_@quot+1,f,c
 15969  00407A  3224               	rrcf	__tdiv_to_l_@quot,f,c
 15970  00407C  3E29               	incfsz	__tdiv_to_l_@exp1,f,c
 15971  00407E  D7F9               	goto	l8421
 15972  004080  D015               	goto	l1827
 15973  004082                     l8425:
 15974  004082  0E17               	movlw	23
 15975  004084  6429               	cpfsgt	__tdiv_to_l_@exp1,c
 15976  004086  D00F               	goto	l8433
 15977  004088  0E00               	movlw	0
 15978  00408A  6E1B               	movwf	?__tdiv_to_l_,c
 15979  00408C  0E00               	movlw	0
 15980  00408E  6E1C               	movwf	?__tdiv_to_l_+1,c
 15981  004090  0E00               	movlw	0
 15982  004092  6E1D               	movwf	?__tdiv_to_l_+2,c
 15983  004094  0E00               	movlw	0
 15984  004096  6E1E               	movwf	?__tdiv_to_l_+3,c
 15985  004098  0012               	return	
 15986  00409A                     l8431:
 15987  00409A  90D8               	bcf	status,0,c
 15988  00409C  3624               	rlcf	__tdiv_to_l_@quot,f,c
 15989  00409E  3625               	rlcf	__tdiv_to_l_@quot+1,f,c
 15990  0040A0  3626               	rlcf	__tdiv_to_l_@quot+2,f,c
 15991  0040A2  3627               	rlcf	__tdiv_to_l_@quot+3,f,c
 15992  0040A4  0629               	decf	__tdiv_to_l_@exp1,f,c
 15993  0040A6                     l8433:
 15994  0040A6  5029               	movf	__tdiv_to_l_@exp1,w,c
 15995  0040A8  A4D8               	btfss	status,2,c
 15996  0040AA  D7F7               	goto	l8431
 15997  0040AC                     l1827:
 15998  0040AC  C024  F01B         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 15999  0040B0  C025  F01C         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 16000  0040B4  C026  F01D         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 16001  0040B8  C027  F01E         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 16002  0040BC  0012               	return		;funcret
 16003  0040BE                     __end_of__tdiv_to_l_:
 16004                           	opt stack 0
 16005                           tblptru	equ	0xFF8
 16006                           tblptrh	equ	0xFF7
 16007                           tblptrl	equ	0xFF6
 16008                           tablat	equ	0xFF5
 16009                           prodh	equ	0xFF4
 16010                           prodl	equ	0xFF3
 16011                           intcon	equ	0xFF2
 16012                           indf0	equ	0xFEF
 16013                           postinc0	equ	0xFEE
 16014                           fsr0h	equ	0xFEA
 16015                           fsr0l	equ	0xFE9
 16016                           wreg	equ	0xFE8
 16017                           postinc1	equ	0xFE6
 16018                           postdec1	equ	0xFE5
 16019                           plusw1	equ	0xFE3
 16020                           fsr1h	equ	0xFE2
 16021                           fsr1l	equ	0xFE1
 16022                           indf2	equ	0xFDF
 16023                           postinc2	equ	0xFDE
 16024                           postdec2	equ	0xFDD
 16025                           plusw2	equ	0xFDB
 16026                           fsr2h	equ	0xFDA
 16027                           fsr2l	equ	0xFD9
 16028                           status	equ	0xFD8
 16029                           
 16030 ;; *************** function __div_to_l_ *****************
 16031 ;; Defined at:
 16032 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
 16033 ;; Parameters:    Size  Location     Type
 16034 ;;  f1              3   26[COMRAM] unsigned long 
 16035 ;;  f2              3   29[COMRAM] unsigned long 
 16036 ;; Auto vars:     Size  Location     Type
 16037 ;;  quot            4   32[COMRAM] unsigned long 
 16038 ;;  exp1            1   37[COMRAM] unsigned char 
 16039 ;;  cntr            1   36[COMRAM] unsigned char 
 16040 ;; Return value:  Size  Location     Type
 16041 ;;                  4   26[COMRAM] unsigned long 
 16042 ;; Registers used:
 16043 ;;		wreg, status,2, status,0
 16044 ;; Tracked objects:
 16045 ;;		On entry : 0/0
 16046 ;;		On exit  : 0/0
 16047 ;;		Unchanged: 0/0
 16048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16049 ;;      Params:         6       0       0       0       0       0       0
 16050 ;;      Locals:         6       0       0       0       0       0       0
 16051 ;;      Temps:          0       0       0       0       0       0       0
 16052 ;;      Totals:        12       0       0       0       0       0       0
 16053 ;;Total ram usage:       12 bytes
 16054 ;; Hardware stack levels used:    1
 16055 ;; Hardware stack levels required when called:    4
 16056 ;; This function calls:
 16057 ;;		Nothing
 16058 ;; This function is called by:
 16059 ;;		_printf
 16060 ;; This function uses a non-reentrant model
 16061 ;;
 16062                           
 16063                           	psect	text38
 16064  0040BE                     __ptext38:
 16065                           	opt stack 0
 16066  0040BE                     __div_to_l_:
 16067                           	opt stack 24
 16068                           
 16069                           ;incstack = 0
 16070  0040BE  341D               	rlcf	__div_to_l_@f1+2,w,c
 16071  0040C0  341E               	rlcf	__div_to_l_@f1+3,w,c
 16072  0040C2  6E26               	movwf	__div_to_l_@exp1,c
 16073  0040C4  5026               	movf	__div_to_l_@exp1,w,c
 16074  0040C6  A4D8               	btfss	status,2,c
 16075  0040C8  D009               	goto	l8441
 16076  0040CA  0E00               	movlw	0
 16077  0040CC  6E1B               	movwf	?__div_to_l_,c
 16078  0040CE  0E00               	movlw	0
 16079  0040D0  6E1C               	movwf	?__div_to_l_+1,c
 16080  0040D2  0E00               	movlw	0
 16081  0040D4  6E1D               	movwf	?__div_to_l_+2,c
 16082  0040D6  0E00               	movlw	0
 16083  0040D8  6E1E               	movwf	?__div_to_l_+3,c
 16084  0040DA  0012               	return	
 16085  0040DC                     l8441:
 16086  0040DC  3420               	rlcf	__div_to_l_@f2+2,w,c
 16087  0040DE  3421               	rlcf	__div_to_l_@f2+3,w,c
 16088  0040E0  6E25               	movwf	__div_to_l_@cntr,c
 16089  0040E2  5025               	movf	__div_to_l_@cntr,w,c
 16090  0040E4  A4D8               	btfss	status,2,c
 16091  0040E6  D009               	goto	l8447
 16092  0040E8  0E00               	movlw	0
 16093  0040EA  6E1B               	movwf	?__div_to_l_,c
 16094  0040EC  0E00               	movlw	0
 16095  0040EE  6E1C               	movwf	?__div_to_l_+1,c
 16096  0040F0  0E00               	movlw	0
 16097  0040F2  6E1D               	movwf	?__div_to_l_+2,c
 16098  0040F4  0E00               	movlw	0
 16099  0040F6  6E1E               	movwf	?__div_to_l_+3,c
 16100  0040F8  0012               	return	
 16101  0040FA                     l8447:
 16102  0040FA  8E1D               	bsf	__div_to_l_@f1+2,7,c
 16103  0040FC  0EFF               	movlw	255
 16104  0040FE  161B               	andwf	__div_to_l_@f1,f,c
 16105  004100  0EFF               	movlw	255
 16106  004102  161C               	andwf	__div_to_l_@f1+1,f,c
 16107  004104  0EFF               	movlw	255
 16108  004106  161D               	andwf	__div_to_l_@f1+2,f,c
 16109  004108  0E00               	movlw	0
 16110  00410A  161E               	andwf	__div_to_l_@f1+3,f,c
 16111  00410C  8E20               	bsf	__div_to_l_@f2+2,7,c
 16112  00410E  0EFF               	movlw	255
 16113  004110  161E               	andwf	__div_to_l_@f2,f,c
 16114  004112  0EFF               	movlw	255
 16115  004114  161F               	andwf	__div_to_l_@f2+1,f,c
 16116  004116  0EFF               	movlw	255
 16117  004118  1620               	andwf	__div_to_l_@f2+2,f,c
 16118  00411A  0E00               	movlw	0
 16119  00411C  1621               	andwf	__div_to_l_@f2+3,f,c
 16120  00411E  0E00               	movlw	0
 16121  004120  6E21               	movwf	__div_to_l_@quot,c
 16122  004122  0E00               	movlw	0
 16123  004124  6E22               	movwf	__div_to_l_@quot+1,c
 16124  004126  0E00               	movlw	0
 16125  004128  6E23               	movwf	__div_to_l_@quot+2,c
 16126  00412A  0E00               	movlw	0
 16127  00412C  6E24               	movwf	__div_to_l_@quot+3,c
 16128  00412E  0E7F               	movlw	127
 16129  004130  5E26               	subwf	__div_to_l_@exp1,f,c
 16130  004132  5025               	movf	__div_to_l_@cntr,w,c
 16131  004134  0FA0               	addlw	160
 16132  004136  5E26               	subwf	__div_to_l_@exp1,f,c
 16133  004138  0E20               	movlw	32
 16134  00413A  6E25               	movwf	__div_to_l_@cntr,c
 16135  00413C                     l8461:
 16136  00413C  90D8               	bcf	status,0,c
 16137  00413E  3621               	rlcf	__div_to_l_@quot,f,c
 16138  004140  3622               	rlcf	__div_to_l_@quot+1,f,c
 16139  004142  3623               	rlcf	__div_to_l_@quot+2,f,c
 16140  004144  3624               	rlcf	__div_to_l_@quot+3,f,c
 16141  004146  501E               	movf	__div_to_l_@f2,w,c
 16142  004148  5C1B               	subwf	__div_to_l_@f1,w,c
 16143  00414A  501F               	movf	__div_to_l_@f2+1,w,c
 16144  00414C  581C               	subwfb	__div_to_l_@f1+1,w,c
 16145  00414E  5020               	movf	__div_to_l_@f2+2,w,c
 16146  004150  581D               	subwfb	__div_to_l_@f1+2,w,c
 16147  004152  5021               	movf	__div_to_l_@f2+3,w,c
 16148  004154  581E               	subwfb	__div_to_l_@f1+3,w,c
 16149  004156  A0D8               	btfss	status,0,c
 16150  004158  D009               	goto	l8469
 16151  00415A  501E               	movf	__div_to_l_@f2,w,c
 16152  00415C  5E1B               	subwf	__div_to_l_@f1,f,c
 16153  00415E  501F               	movf	__div_to_l_@f2+1,w,c
 16154  004160  5A1C               	subwfb	__div_to_l_@f1+1,f,c
 16155  004162  5020               	movf	__div_to_l_@f2+2,w,c
 16156  004164  5A1D               	subwfb	__div_to_l_@f1+2,f,c
 16157  004166  5021               	movf	__div_to_l_@f2+3,w,c
 16158  004168  5A1E               	subwfb	__div_to_l_@f1+3,f,c
 16159  00416A  8021               	bsf	__div_to_l_@quot,0,c
 16160  00416C                     l8469:
 16161  00416C  90D8               	bcf	status,0,c
 16162  00416E  361B               	rlcf	__div_to_l_@f1,f,c
 16163  004170  361C               	rlcf	__div_to_l_@f1+1,f,c
 16164  004172  361D               	rlcf	__div_to_l_@f1+2,f,c
 16165  004174  361E               	rlcf	__div_to_l_@f1+3,f,c
 16166  004176  2E25               	decfsz	__div_to_l_@cntr,f,c
 16167  004178  D7E1               	goto	l8461
 16168  00417A  AE26               	btfss	__div_to_l_@exp1,7,c
 16169  00417C  D016               	goto	l8485
 16170  00417E  5026               	movf	__div_to_l_@exp1,w,c
 16171  004180  0A80               	xorlw	128
 16172  004182  0F9F               	addlw	159
 16173  004184  B0D8               	btfsc	status,0,c
 16174  004186  D009               	goto	l8481
 16175  004188  0E00               	movlw	0
 16176  00418A  6E1B               	movwf	?__div_to_l_,c
 16177  00418C  0E00               	movlw	0
 16178  00418E  6E1C               	movwf	?__div_to_l_+1,c
 16179  004190  0E00               	movlw	0
 16180  004192  6E1D               	movwf	?__div_to_l_+2,c
 16181  004194  0E00               	movlw	0
 16182  004196  6E1E               	movwf	?__div_to_l_+3,c
 16183  004198  0012               	return	
 16184  00419A                     l8481:
 16185  00419A  90D8               	bcf	status,0,c
 16186  00419C  3224               	rrcf	__div_to_l_@quot+3,f,c
 16187  00419E  3223               	rrcf	__div_to_l_@quot+2,f,c
 16188  0041A0  3222               	rrcf	__div_to_l_@quot+1,f,c
 16189  0041A2  3221               	rrcf	__div_to_l_@quot,f,c
 16190  0041A4  3E26               	incfsz	__div_to_l_@exp1,f,c
 16191  0041A6  D7F9               	goto	l8481
 16192  0041A8  D015               	goto	l1723
 16193  0041AA                     l8485:
 16194  0041AA  0E1F               	movlw	31
 16195  0041AC  6426               	cpfsgt	__div_to_l_@exp1,c
 16196  0041AE  D00F               	goto	l8493
 16197  0041B0  0E00               	movlw	0
 16198  0041B2  6E1B               	movwf	?__div_to_l_,c
 16199  0041B4  0E00               	movlw	0
 16200  0041B6  6E1C               	movwf	?__div_to_l_+1,c
 16201  0041B8  0E00               	movlw	0
 16202  0041BA  6E1D               	movwf	?__div_to_l_+2,c
 16203  0041BC  0E00               	movlw	0
 16204  0041BE  6E1E               	movwf	?__div_to_l_+3,c
 16205  0041C0  0012               	return	
 16206  0041C2                     l8491:
 16207  0041C2  90D8               	bcf	status,0,c
 16208  0041C4  3621               	rlcf	__div_to_l_@quot,f,c
 16209  0041C6  3622               	rlcf	__div_to_l_@quot+1,f,c
 16210  0041C8  3623               	rlcf	__div_to_l_@quot+2,f,c
 16211  0041CA  3624               	rlcf	__div_to_l_@quot+3,f,c
 16212  0041CC  0626               	decf	__div_to_l_@exp1,f,c
 16213  0041CE                     l8493:
 16214  0041CE  5026               	movf	__div_to_l_@exp1,w,c
 16215  0041D0  A4D8               	btfss	status,2,c
 16216  0041D2  D7F7               	goto	l8491
 16217  0041D4                     l1723:
 16218  0041D4  C021  F01B         	movff	__div_to_l_@quot,?__div_to_l_
 16219  0041D8  C022  F01C         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 16220  0041DC  C023  F01D         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 16221  0041E0  C024  F01E         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 16222  0041E4  0012               	return		;funcret
 16223  0041E6                     __end_of__div_to_l_:
 16224                           	opt stack 0
 16225                           tblptru	equ	0xFF8
 16226                           tblptrh	equ	0xFF7
 16227                           tblptrl	equ	0xFF6
 16228                           tablat	equ	0xFF5
 16229                           prodh	equ	0xFF4
 16230                           prodl	equ	0xFF3
 16231                           intcon	equ	0xFF2
 16232                           indf0	equ	0xFEF
 16233                           postinc0	equ	0xFEE
 16234                           fsr0h	equ	0xFEA
 16235                           fsr0l	equ	0xFE9
 16236                           wreg	equ	0xFE8
 16237                           postinc1	equ	0xFE6
 16238                           postdec1	equ	0xFE5
 16239                           plusw1	equ	0xFE3
 16240                           fsr1h	equ	0xFE2
 16241                           fsr1l	equ	0xFE1
 16242                           indf2	equ	0xFDF
 16243                           postinc2	equ	0xFDE
 16244                           postdec2	equ	0xFDD
 16245                           plusw2	equ	0xFDB
 16246                           fsr2h	equ	0xFDA
 16247                           fsr2l	equ	0xFD9
 16248                           status	equ	0xFD8
 16249                           
 16250 ;; *************** function ___lltoft *****************
 16251 ;; Defined at:
 16252 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lltoft.c"
 16253 ;; Parameters:    Size  Location     Type
 16254 ;;  c               4   34[COMRAM] unsigned long 
 16255 ;; Auto vars:     Size  Location     Type
 16256 ;;  exp             1    0[BANK0 ] unsigned char 
 16257 ;; Return value:  Size  Location     Type
 16258 ;;                  3   34[COMRAM] float 
 16259 ;; Registers used:
 16260 ;;		wreg, status,2, status,0, cstack
 16261 ;; Tracked objects:
 16262 ;;		On entry : 0/0
 16263 ;;		On exit  : 0/0
 16264 ;;		Unchanged: 0/0
 16265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16266 ;;      Params:         4       0       0       0       0       0       0
 16267 ;;      Locals:         0       1       0       0       0       0       0
 16268 ;;      Temps:          4       0       0       0       0       0       0
 16269 ;;      Totals:         8       1       0       0       0       0       0
 16270 ;;Total ram usage:        9 bytes
 16271 ;; Hardware stack levels used:    1
 16272 ;; Hardware stack levels required when called:    5
 16273 ;; This function calls:
 16274 ;;		___ftpack
 16275 ;; This function is called by:
 16276 ;;		_printf
 16277 ;; This function uses a non-reentrant model
 16278 ;;
 16279                           
 16280                           	psect	text39
 16281  005380                     __ptext39:
 16282                           	opt stack 0
 16283  005380                     ___lltoft:
 16284                           	opt stack 23
 16285                           
 16286                           ;incstack = 0
 16287  005380  0E8E               	movlw	142
 16288  005382  0100               	movlb	0	; () banked
 16289  005384  6F60               	movwf	___lltoft@exp& (0+255),b
 16290  005386  D007               	goto	l8613
 16291  005388                     l8611:
 16292                           
 16293                           ; BSR set to: 0
 16294  005388  90D8               	bcf	status,0,c
 16295  00538A  3226               	rrcf	___lltoft@c+3,f,c
 16296  00538C  3225               	rrcf	___lltoft@c+2,f,c
 16297  00538E  3224               	rrcf	___lltoft@c+1,f,c
 16298  005390  3223               	rrcf	___lltoft@c,f,c
 16299  005392  0100               	movlb	0	; () banked
 16300  005394  2B60               	incf	___lltoft@exp& (0+255),f,b
 16301  005396                     l8613:
 16302                           
 16303                           ; BSR set to: 0
 16304  005396  0E00               	movlw	0
 16305  005398  1423               	andwf	___lltoft@c,w,c
 16306  00539A  6E27               	movwf	??___lltoft& (0+255),c
 16307  00539C  0E00               	movlw	0
 16308  00539E  1424               	andwf	___lltoft@c+1,w,c
 16309  0053A0  6E28               	movwf	(??___lltoft+1)& (0+255),c
 16310  0053A2  0E00               	movlw	0
 16311  0053A4  1425               	andwf	___lltoft@c+2,w,c
 16312  0053A6  6E29               	movwf	(??___lltoft+2)& (0+255),c
 16313  0053A8  0EFF               	movlw	255
 16314  0053AA  1426               	andwf	___lltoft@c+3,w,c
 16315  0053AC  6E2A               	movwf	(??___lltoft+3)& (0+255),c
 16316  0053AE  5027               	movf	??___lltoft,w,c
 16317  0053B0  1028               	iorwf	??___lltoft+1,w,c
 16318  0053B2  1029               	iorwf	??___lltoft+2,w,c
 16319  0053B4  102A               	iorwf	??___lltoft+3,w,c
 16320  0053B6  A4D8               	btfss	status,2,c
 16321  0053B8  D7E7               	goto	l8611
 16322                           
 16323                           ; BSR set to: 0
 16324                           
 16325                           ; BSR set to: 0
 16326  0053BA  C023  F01B         	movff	___lltoft@c,___ftpack@arg
 16327  0053BE  C024  F01C         	movff	___lltoft@c+1,___ftpack@arg+1
 16328  0053C2  C025  F01D         	movff	___lltoft@c+2,___ftpack@arg+2
 16329  0053C6  C060  F01E         	movff	___lltoft@exp,___ftpack@exp
 16330  0053CA  0E00               	movlw	0
 16331  0053CC  6E1F               	movwf	___ftpack@sign,c
 16332  0053CE  EC0B  F027         	call	___ftpack	;wreg free
 16333  0053D2  C01B  F023         	movff	?___ftpack,?___lltoft
 16334  0053D6  C01C  F024         	movff	?___ftpack+1,?___lltoft+1
 16335  0053DA  C01D  F025         	movff	?___ftpack+2,?___lltoft+2
 16336  0053DE  0012               	return	
 16337  0053E0                     __end_of___lltoft:
 16338                           	opt stack 0
 16339                           tblptru	equ	0xFF8
 16340                           tblptrh	equ	0xFF7
 16341                           tblptrl	equ	0xFF6
 16342                           tablat	equ	0xFF5
 16343                           prodh	equ	0xFF4
 16344                           prodl	equ	0xFF3
 16345                           intcon	equ	0xFF2
 16346                           indf0	equ	0xFEF
 16347                           postinc0	equ	0xFEE
 16348                           fsr0h	equ	0xFEA
 16349                           fsr0l	equ	0xFE9
 16350                           wreg	equ	0xFE8
 16351                           postinc1	equ	0xFE6
 16352                           postdec1	equ	0xFE5
 16353                           plusw1	equ	0xFE3
 16354                           fsr1h	equ	0xFE2
 16355                           fsr1l	equ	0xFE1
 16356                           indf2	equ	0xFDF
 16357                           postinc2	equ	0xFDE
 16358                           postdec2	equ	0xFDD
 16359                           plusw2	equ	0xFDB
 16360                           fsr2h	equ	0xFDA
 16361                           fsr2l	equ	0xFD9
 16362                           status	equ	0xFD8
 16363                           
 16364 ;; *************** function ___llmod *****************
 16365 ;; Defined at:
 16366 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
 16367 ;; Parameters:    Size  Location     Type
 16368 ;;  dividend        4    0[BANK0 ] unsigned long 
 16369 ;;  divisor         4    4[BANK0 ] unsigned long 
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;  counter         1   39[COMRAM] unsigned char 
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  4    0[BANK0 ] unsigned long 
 16374 ;; Registers used:
 16375 ;;		wreg, status,2, status,0
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16381 ;;      Params:         0       8       0       0       0       0       0
 16382 ;;      Locals:         1       0       0       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0
 16384 ;;      Totals:         1       8       0       0       0       0       0
 16385 ;;Total ram usage:        9 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    4
 16388 ;; This function calls:
 16389 ;;		Nothing
 16390 ;; This function is called by:
 16391 ;;		_printf
 16392 ;; This function uses a non-reentrant model
 16393 ;;
 16394                           
 16395                           	psect	text40
 16396  004F6E                     __ptext40:
 16397                           	opt stack 0
 16398  004F6E                     ___llmod:
 16399                           	opt stack 24
 16400                           
 16401                           ;incstack = 0
 16402  004F6E  0100               	movlb	0	; () banked
 16403  004F70  5164               	movf	___llmod@divisor& (0+255),w,b
 16404  004F72  0100               	movlb	0	; () banked
 16405  004F74  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 16406  004F76  0100               	movlb	0	; () banked
 16407  004F78  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 16408  004F7A  0100               	movlb	0	; () banked
 16409  004F7C  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 16410  004F7E  B4D8               	btfsc	status,2,c
 16411  004F80  D037               	goto	l1912
 16412                           
 16413                           ; BSR set to: 0
 16414  004F82  0E01               	movlw	1
 16415  004F84  6E28               	movwf	___llmod@counter,c
 16416  004F86  D007               	goto	l8599
 16417  004F88                     l8597:
 16418                           
 16419                           ; BSR set to: 0
 16420  004F88  0100               	movlb	0	; () banked
 16421  004F8A  90D8               	bcf	status,0,c
 16422  004F8C  3764               	rlcf	___llmod@divisor& (0+255),f,b
 16423  004F8E  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 16424  004F90  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 16425  004F92  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 16426  004F94  2A28               	incf	___llmod@counter,f,c
 16427  004F96                     l8599:
 16428                           
 16429                           ; BSR set to: 0
 16430  004F96  0100               	movlb	0	; () banked
 16431  004F98  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 16432  004F9A  D7F6               	goto	l8597
 16433  004F9C                     l8601:
 16434                           
 16435                           ; BSR set to: 0
 16436  004F9C  0100               	movlb	0	; () banked
 16437  004F9E  5164               	movf	___llmod@divisor& (0+255),w,b
 16438  004FA0  0100               	movlb	0	; () banked
 16439  004FA2  5D60               	subwf	___llmod@dividend& (0+255),w,b
 16440  004FA4  0100               	movlb	0	; () banked
 16441  004FA6  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 16442  004FA8  0100               	movlb	0	; () banked
 16443  004FAA  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 16444  004FAC  0100               	movlb	0	; () banked
 16445  004FAE  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 16446  004FB0  0100               	movlb	0	; () banked
 16447  004FB2  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 16448  004FB4  0100               	movlb	0	; () banked
 16449  004FB6  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 16450  004FB8  0100               	movlb	0	; () banked
 16451  004FBA  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 16452  004FBC  A0D8               	btfss	status,0,c
 16453  004FBE  D010               	goto	l8605
 16454                           
 16455                           ; BSR set to: 0
 16456  004FC0  0100               	movlb	0	; () banked
 16457  004FC2  5164               	movf	___llmod@divisor& (0+255),w,b
 16458  004FC4  0100               	movlb	0	; () banked
 16459  004FC6  5F60               	subwf	___llmod@dividend& (0+255),f,b
 16460  004FC8  0100               	movlb	0	; () banked
 16461  004FCA  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 16462  004FCC  0100               	movlb	0	; () banked
 16463  004FCE  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 16464  004FD0  0100               	movlb	0	; () banked
 16465  004FD2  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 16466  004FD4  0100               	movlb	0	; () banked
 16467  004FD6  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 16468  004FD8  0100               	movlb	0	; () banked
 16469  004FDA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 16470  004FDC  0100               	movlb	0	; () banked
 16471  004FDE  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 16472  004FE0                     l8605:
 16473                           
 16474                           ; BSR set to: 0
 16475  004FE0  0100               	movlb	0	; () banked
 16476  004FE2  90D8               	bcf	status,0,c
 16477  004FE4  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 16478  004FE6  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 16479  004FE8  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 16480  004FEA  3364               	rrcf	___llmod@divisor& (0+255),f,b
 16481                           
 16482                           ; BSR set to: 0
 16483  004FEC  2E28               	decfsz	___llmod@counter,f,c
 16484  004FEE  D7D6               	goto	l8601
 16485  004FF0                     l1912:
 16486                           
 16487                           ; BSR set to: 0
 16488  004FF0  C060  F060         	movff	___llmod@dividend,?___llmod
 16489  004FF4  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 16490  004FF8  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 16491  004FFC  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 16492                           
 16493                           ; BSR set to: 0
 16494  005000  0012               	return		;funcret
 16495  005002                     __end_of___llmod:
 16496                           	opt stack 0
 16497                           tblptru	equ	0xFF8
 16498                           tblptrh	equ	0xFF7
 16499                           tblptrl	equ	0xFF6
 16500                           tablat	equ	0xFF5
 16501                           prodh	equ	0xFF4
 16502                           prodl	equ	0xFF3
 16503                           intcon	equ	0xFF2
 16504                           indf0	equ	0xFEF
 16505                           postinc0	equ	0xFEE
 16506                           fsr0h	equ	0xFEA
 16507                           fsr0l	equ	0xFE9
 16508                           wreg	equ	0xFE8
 16509                           postinc1	equ	0xFE6
 16510                           postdec1	equ	0xFE5
 16511                           plusw1	equ	0xFE3
 16512                           fsr1h	equ	0xFE2
 16513                           fsr1l	equ	0xFE1
 16514                           indf2	equ	0xFDF
 16515                           postinc2	equ	0xFDE
 16516                           postdec2	equ	0xFDD
 16517                           plusw2	equ	0xFDB
 16518                           fsr2h	equ	0xFDA
 16519                           fsr2l	equ	0xFD9
 16520                           status	equ	0xFD8
 16521                           
 16522 ;; *************** function ___lldiv *****************
 16523 ;; Defined at:
 16524 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
 16525 ;; Parameters:    Size  Location     Type
 16526 ;;  dividend        4   26[COMRAM] unsigned long 
 16527 ;;  divisor         4   30[COMRAM] unsigned long 
 16528 ;; Auto vars:     Size  Location     Type
 16529 ;;  quotient        4   34[COMRAM] unsigned long 
 16530 ;;  counter         1   38[COMRAM] unsigned char 
 16531 ;; Return value:  Size  Location     Type
 16532 ;;                  4   26[COMRAM] unsigned long 
 16533 ;; Registers used:
 16534 ;;		wreg, status,2, status,0
 16535 ;; Tracked objects:
 16536 ;;		On entry : 0/0
 16537 ;;		On exit  : 0/0
 16538 ;;		Unchanged: 0/0
 16539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16540 ;;      Params:         8       0       0       0       0       0       0
 16541 ;;      Locals:         5       0       0       0       0       0       0
 16542 ;;      Temps:          0       0       0       0       0       0       0
 16543 ;;      Totals:        13       0       0       0       0       0       0
 16544 ;;Total ram usage:       13 bytes
 16545 ;; Hardware stack levels used:    1
 16546 ;; Hardware stack levels required when called:    4
 16547 ;; This function calls:
 16548 ;;		Nothing
 16549 ;; This function is called by:
 16550 ;;		_printf
 16551 ;; This function uses a non-reentrant model
 16552 ;;
 16553                           
 16554                           	psect	text41
 16555  0051AA                     __ptext41:
 16556                           	opt stack 0
 16557  0051AA                     ___lldiv:
 16558                           	opt stack 24
 16559                           
 16560                           ; BSR set to: 0
 16561                           ;incstack = 0
 16562  0051AA  0E00               	movlw	0
 16563  0051AC  6E23               	movwf	___lldiv@quotient,c
 16564  0051AE  0E00               	movlw	0
 16565  0051B0  6E24               	movwf	___lldiv@quotient+1,c
 16566  0051B2  0E00               	movlw	0
 16567  0051B4  6E25               	movwf	___lldiv@quotient+2,c
 16568  0051B6  0E00               	movlw	0
 16569  0051B8  6E26               	movwf	___lldiv@quotient+3,c
 16570  0051BA  501F               	movf	___lldiv@divisor,w,c
 16571  0051BC  1020               	iorwf	___lldiv@divisor+1,w,c
 16572  0051BE  1021               	iorwf	___lldiv@divisor+2,w,c
 16573  0051C0  1022               	iorwf	___lldiv@divisor+3,w,c
 16574  0051C2  B4D8               	btfsc	status,2,c
 16575  0051C4  D02A               	goto	l1902
 16576  0051C6  0E01               	movlw	1
 16577  0051C8  6E27               	movwf	___lldiv@counter,c
 16578  0051CA  D006               	goto	l8579
 16579  0051CC                     l8577:
 16580  0051CC  90D8               	bcf	status,0,c
 16581  0051CE  361F               	rlcf	___lldiv@divisor,f,c
 16582  0051D0  3620               	rlcf	___lldiv@divisor+1,f,c
 16583  0051D2  3621               	rlcf	___lldiv@divisor+2,f,c
 16584  0051D4  3622               	rlcf	___lldiv@divisor+3,f,c
 16585  0051D6  2A27               	incf	___lldiv@counter,f,c
 16586  0051D8                     l8579:
 16587  0051D8  AE22               	btfss	___lldiv@divisor+3,7,c
 16588  0051DA  D7F8               	goto	l8577
 16589  0051DC                     l8581:
 16590  0051DC  90D8               	bcf	status,0,c
 16591  0051DE  3623               	rlcf	___lldiv@quotient,f,c
 16592  0051E0  3624               	rlcf	___lldiv@quotient+1,f,c
 16593  0051E2  3625               	rlcf	___lldiv@quotient+2,f,c
 16594  0051E4  3626               	rlcf	___lldiv@quotient+3,f,c
 16595  0051E6  501F               	movf	___lldiv@divisor,w,c
 16596  0051E8  5C1B               	subwf	___lldiv@dividend,w,c
 16597  0051EA  5020               	movf	___lldiv@divisor+1,w,c
 16598  0051EC  581C               	subwfb	___lldiv@dividend+1,w,c
 16599  0051EE  5021               	movf	___lldiv@divisor+2,w,c
 16600  0051F0  581D               	subwfb	___lldiv@dividend+2,w,c
 16601  0051F2  5022               	movf	___lldiv@divisor+3,w,c
 16602  0051F4  581E               	subwfb	___lldiv@dividend+3,w,c
 16603  0051F6  A0D8               	btfss	status,0,c
 16604  0051F8  D009               	goto	l8589
 16605  0051FA  501F               	movf	___lldiv@divisor,w,c
 16606  0051FC  5E1B               	subwf	___lldiv@dividend,f,c
 16607  0051FE  5020               	movf	___lldiv@divisor+1,w,c
 16608  005200  5A1C               	subwfb	___lldiv@dividend+1,f,c
 16609  005202  5021               	movf	___lldiv@divisor+2,w,c
 16610  005204  5A1D               	subwfb	___lldiv@dividend+2,f,c
 16611  005206  5022               	movf	___lldiv@divisor+3,w,c
 16612  005208  5A1E               	subwfb	___lldiv@dividend+3,f,c
 16613  00520A  8023               	bsf	___lldiv@quotient,0,c
 16614  00520C                     l8589:
 16615  00520C  90D8               	bcf	status,0,c
 16616  00520E  3222               	rrcf	___lldiv@divisor+3,f,c
 16617  005210  3221               	rrcf	___lldiv@divisor+2,f,c
 16618  005212  3220               	rrcf	___lldiv@divisor+1,f,c
 16619  005214  321F               	rrcf	___lldiv@divisor,f,c
 16620  005216  2E27               	decfsz	___lldiv@counter,f,c
 16621  005218  D7E1               	goto	l8581
 16622  00521A                     l1902:
 16623  00521A  C023  F01B         	movff	___lldiv@quotient,?___lldiv
 16624  00521E  C024  F01C         	movff	___lldiv@quotient+1,?___lldiv+1
 16625  005222  C025  F01D         	movff	___lldiv@quotient+2,?___lldiv+2
 16626  005226  C026  F01E         	movff	___lldiv@quotient+3,?___lldiv+3
 16627  00522A  0012               	return		;funcret
 16628  00522C                     __end_of___lldiv:
 16629                           	opt stack 0
 16630                           tblptru	equ	0xFF8
 16631                           tblptrh	equ	0xFF7
 16632                           tblptrl	equ	0xFF6
 16633                           tablat	equ	0xFF5
 16634                           prodh	equ	0xFF4
 16635                           prodl	equ	0xFF3
 16636                           intcon	equ	0xFF2
 16637                           indf0	equ	0xFEF
 16638                           postinc0	equ	0xFEE
 16639                           fsr0h	equ	0xFEA
 16640                           fsr0l	equ	0xFE9
 16641                           wreg	equ	0xFE8
 16642                           postinc1	equ	0xFE6
 16643                           postdec1	equ	0xFE5
 16644                           plusw1	equ	0xFE3
 16645                           fsr1h	equ	0xFE2
 16646                           fsr1l	equ	0xFE1
 16647                           indf2	equ	0xFDF
 16648                           postinc2	equ	0xFDE
 16649                           postdec2	equ	0xFDD
 16650                           plusw2	equ	0xFDB
 16651                           fsr2h	equ	0xFDA
 16652                           fsr2l	equ	0xFD9
 16653                           status	equ	0xFD8
 16654                           
 16655 ;; *************** function ___fttol *****************
 16656 ;; Defined at:
 16657 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
 16658 ;; Parameters:    Size  Location     Type
 16659 ;;  f1              3   26[BANK0 ] float 
 16660 ;; Auto vars:     Size  Location     Type
 16661 ;;  lval            4   36[BANK0 ] unsigned long 
 16662 ;;  exp1            1   40[BANK0 ] unsigned char 
 16663 ;;  sign1           1   35[BANK0 ] unsigned char 
 16664 ;; Return value:  Size  Location     Type
 16665 ;;                  4   26[BANK0 ] long 
 16666 ;; Registers used:
 16667 ;;		wreg, status,2, status,0
 16668 ;; Tracked objects:
 16669 ;;		On entry : 0/0
 16670 ;;		On exit  : 0/0
 16671 ;;		Unchanged: 0/0
 16672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16673 ;;      Params:         0       4       0       0       0       0       0
 16674 ;;      Locals:         0       6       0       0       0       0       0
 16675 ;;      Temps:          0       5       0       0       0       0       0
 16676 ;;      Totals:         0      15       0       0       0       0       0
 16677 ;;Total ram usage:       15 bytes
 16678 ;; Hardware stack levels used:    1
 16679 ;; Hardware stack levels required when called:    4
 16680 ;; This function calls:
 16681 ;;		Nothing
 16682 ;; This function is called by:
 16683 ;;		_printf
 16684 ;; This function uses a non-reentrant model
 16685 ;;
 16686                           
 16687                           	psect	text42
 16688  003E48                     __ptext42:
 16689                           	opt stack 0
 16690  003E48                     ___fttol:
 16691                           	opt stack 24
 16692                           
 16693                           ;incstack = 0
 16694  003E48  C07C  F07E         	movff	___fttol@f1+2,??___fttol
 16695  003E4C  0100               	movlb	0	; () banked
 16696  003E4E  6B7F               	clrf	(??___fttol+1)& (0+255),b
 16697  003E50  6B80               	clrf	(??___fttol+2)& (0+255),b
 16698  003E52  0100               	movlb	0	; () banked
 16699  003E54  357B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16700  003E56  0100               	movlb	0	; () banked
 16701  003E58  377E               	rlcf	??___fttol& (0+255),f,b
 16702  003E5A  E301               	bnc	u9331
 16703  003E5C  817F               	bsf	(??___fttol+1)& (0+255),0,b
 16704  003E5E                     u9331:
 16705  003E5E  0100               	movlb	0	; () banked
 16706  003E60  517E               	movf	??___fttol& (0+255),w,b
 16707  003E62  0100               	movlb	0	; () banked
 16708  003E64  6F88               	movwf	___fttol@exp1& (0+255),b
 16709  003E66  0100               	movlb	0	; () banked
 16710  003E68  5188               	movf	___fttol@exp1& (0+255),w,b
 16711  003E6A  A4D8               	btfss	status,2,c
 16712  003E6C  D00A               	goto	l8531
 16713                           
 16714                           ; BSR set to: 0
 16715  003E6E  0E00               	movlw	0
 16716  003E70  0100               	movlb	0	; () banked
 16717  003E72  6F7A               	movwf	?___fttol& (0+255),b
 16718  003E74  0E00               	movlw	0
 16719  003E76  6F7B               	movwf	(?___fttol+1)& (0+255),b
 16720  003E78  0E00               	movlw	0
 16721  003E7A  6F7C               	movwf	(?___fttol+2)& (0+255),b
 16722  003E7C  0E00               	movlw	0
 16723  003E7E  6F7D               	movwf	(?___fttol+3)& (0+255),b
 16724                           
 16725                           ; BSR set to: 0
 16726  003E80  0012               	return	
 16727  003E82                     l8531:
 16728                           
 16729                           ; BSR set to: 0
 16730  003E82  0E17               	movlw	23
 16731  003E84  0100               	movlb	0	; () banked
 16732  003E86  6F7E               	movwf	??___fttol& (0+255),b
 16733  003E88  C07A  F07F         	movff	___fttol@f1,??___fttol+1
 16734  003E8C  C07B  F080         	movff	___fttol@f1+1,??___fttol+2
 16735  003E90  C07C  F081         	movff	___fttol@f1+2,??___fttol+3
 16736  003E94  0100               	movlb	0	; () banked
 16737  003E96  297E               	incf	??___fttol& (0+255),w,b
 16738  003E98  0100               	movlb	0	; () banked
 16739  003E9A  6F82               	movwf	(??___fttol+4)& (0+255),b
 16740  003E9C  D005               	goto	u9350
 16741  003E9E                     u9355:
 16742  003E9E  0100               	movlb	0	; () banked
 16743  003EA0  90D8               	bcf	status,0,c
 16744  003EA2  3381               	rrcf	(??___fttol+3)& (0+255),f,b
 16745  003EA4  3380               	rrcf	(??___fttol+2)& (0+255),f,b
 16746  003EA6  337F               	rrcf	(??___fttol+1)& (0+255),f,b
 16747  003EA8                     u9350:
 16748  003EA8  0100               	movlb	0	; () banked
 16749  003EAA  2F82               	decfsz	(??___fttol+4)& (0+255),f,b
 16750  003EAC  D7F8               	goto	u9355
 16751  003EAE  0100               	movlb	0	; () banked
 16752  003EB0  517F               	movf	(??___fttol+1)& (0+255),w,b
 16753  003EB2  0100               	movlb	0	; () banked
 16754  003EB4  6F83               	movwf	___fttol@sign1& (0+255),b
 16755                           
 16756                           ; BSR set to: 0
 16757  003EB6  0100               	movlb	0	; () banked
 16758  003EB8  8F7B               	bsf	(___fttol@f1+1)& (0+255),7,b
 16759                           
 16760                           ; BSR set to: 0
 16761  003EBA  0EFF               	movlw	255
 16762  003EBC  0100               	movlb	0	; () banked
 16763  003EBE  177A               	andwf	___fttol@f1& (0+255),f,b
 16764  003EC0  0EFF               	movlw	255
 16765  003EC2  0100               	movlb	0	; () banked
 16766  003EC4  177B               	andwf	(___fttol@f1+1)& (0+255),f,b
 16767  003EC6  0E00               	movlw	0
 16768  003EC8  0100               	movlb	0	; () banked
 16769  003ECA  177C               	andwf	(___fttol@f1+2)& (0+255),f,b
 16770                           
 16771                           ; BSR set to: 0
 16772  003ECC  0100               	movlb	0	; () banked
 16773  003ECE  517A               	movf	___fttol@f1& (0+255),w,b
 16774  003ED0  0100               	movlb	0	; () banked
 16775  003ED2  6F84               	movwf	___fttol@lval& (0+255),b
 16776  003ED4  0100               	movlb	0	; () banked
 16777  003ED6  517B               	movf	(___fttol@f1+1)& (0+255),w,b
 16778  003ED8  0100               	movlb	0	; () banked
 16779  003EDA  6F85               	movwf	(___fttol@lval+1)& (0+255),b
 16780  003EDC  0100               	movlb	0	; () banked
 16781  003EDE  517C               	movf	(___fttol@f1+2)& (0+255),w,b
 16782  003EE0  0100               	movlb	0	; () banked
 16783  003EE2  6F86               	movwf	(___fttol@lval+2)& (0+255),b
 16784  003EE4  0100               	movlb	0	; () banked
 16785  003EE6  6B87               	clrf	(___fttol@lval+3)& (0+255),b
 16786                           
 16787                           ; BSR set to: 0
 16788  003EE8  0E8E               	movlw	142
 16789  003EEA  0100               	movlb	0	; () banked
 16790  003EEC  5F88               	subwf	___fttol@exp1& (0+255),f,b
 16791                           
 16792                           ; BSR set to: 0
 16793  003EEE  0100               	movlb	0	; () banked
 16794  003EF0  AF88               	btfss	___fttol@exp1& (0+255),7,b
 16795  003EF2  D01A               	goto	l8553
 16796                           
 16797                           ; BSR set to: 0
 16798  003EF4  0100               	movlb	0	; () banked
 16799  003EF6  5188               	movf	___fttol@exp1& (0+255),w,b
 16800  003EF8  0A80               	xorlw	128
 16801  003EFA  0F8F               	addlw	143
 16802  003EFC  B0D8               	btfsc	status,0,c
 16803  003EFE  D00A               	goto	l8549
 16804                           
 16805                           ; BSR set to: 0
 16806  003F00  0E00               	movlw	0
 16807  003F02  0100               	movlb	0	; () banked
 16808  003F04  6F7A               	movwf	?___fttol& (0+255),b
 16809  003F06  0E00               	movlw	0
 16810  003F08  6F7B               	movwf	(?___fttol+1)& (0+255),b
 16811  003F0A  0E00               	movlw	0
 16812  003F0C  6F7C               	movwf	(?___fttol+2)& (0+255),b
 16813  003F0E  0E00               	movlw	0
 16814  003F10  6F7D               	movwf	(?___fttol+3)& (0+255),b
 16815                           
 16816                           ; BSR set to: 0
 16817  003F12  0012               	return	
 16818  003F14                     l8549:
 16819                           
 16820                           ; BSR set to: 0
 16821  003F14  0100               	movlb	0	; () banked
 16822  003F16  90D8               	bcf	status,0,c
 16823  003F18  3387               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16824  003F1A  3386               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16825  003F1C  3385               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16826  003F1E  3384               	rrcf	___fttol@lval& (0+255),f,b
 16827                           
 16828                           ; BSR set to: 0
 16829  003F20  0100               	movlb	0	; () banked
 16830  003F22  3F88               	incfsz	___fttol@exp1& (0+255),f,b
 16831  003F24  D7F7               	goto	l8549
 16832                           
 16833                           ; BSR set to: 0
 16834  003F26  D01B               	goto	l8563
 16835  003F28                     l8553:
 16836                           
 16837                           ; BSR set to: 0
 16838  003F28  0E17               	movlw	23
 16839  003F2A  0100               	movlb	0	; () banked
 16840  003F2C  6588               	cpfsgt	___fttol@exp1& (0+255),b
 16841  003F2E  D012               	goto	l8561
 16842                           
 16843                           ; BSR set to: 0
 16844  003F30  0E00               	movlw	0
 16845  003F32  0100               	movlb	0	; () banked
 16846  003F34  6F7A               	movwf	?___fttol& (0+255),b
 16847  003F36  0E00               	movlw	0
 16848  003F38  6F7B               	movwf	(?___fttol+1)& (0+255),b
 16849  003F3A  0E00               	movlw	0
 16850  003F3C  6F7C               	movwf	(?___fttol+2)& (0+255),b
 16851  003F3E  0E00               	movlw	0
 16852  003F40  6F7D               	movwf	(?___fttol+3)& (0+255),b
 16853                           
 16854                           ; BSR set to: 0
 16855  003F42  0012               	return	
 16856  003F44                     l8559:
 16857                           
 16858                           ; BSR set to: 0
 16859  003F44  0100               	movlb	0	; () banked
 16860  003F46  90D8               	bcf	status,0,c
 16861  003F48  3784               	rlcf	___fttol@lval& (0+255),f,b
 16862  003F4A  3785               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16863  003F4C  3786               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16864  003F4E  3787               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16865  003F50  0100               	movlb	0	; () banked
 16866  003F52  0788               	decf	___fttol@exp1& (0+255),f,b
 16867  003F54                     l8561:
 16868                           
 16869                           ; BSR set to: 0
 16870  003F54  0100               	movlb	0	; () banked
 16871  003F56  5188               	movf	___fttol@exp1& (0+255),w,b
 16872  003F58  0100               	movlb	0	; () banked
 16873  003F5A  A4D8               	btfss	status,2,c
 16874  003F5C  D7F3               	goto	l8559
 16875  003F5E                     l8563:
 16876                           
 16877                           ; BSR set to: 0
 16878  003F5E  0100               	movlb	0	; () banked
 16879  003F60  5183               	movf	___fttol@sign1& (0+255),w,b
 16880  003F62  0100               	movlb	0	; () banked
 16881  003F64  B4D8               	btfsc	status,2,c
 16882  003F66  D009               	goto	l8567
 16883                           
 16884                           ; BSR set to: 0
 16885  003F68  0100               	movlb	0	; () banked
 16886  003F6A  1F87               	comf	(___fttol@lval+3)& (0+255),f,b
 16887  003F6C  1F86               	comf	(___fttol@lval+2)& (0+255),f,b
 16888  003F6E  1F85               	comf	(___fttol@lval+1)& (0+255),f,b
 16889  003F70  6D84               	negf	___fttol@lval& (0+255),b
 16890  003F72  0E00               	movlw	0
 16891  003F74  2385               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16892  003F76  2386               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16893  003F78  2387               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16894  003F7A                     l8567:
 16895                           
 16896                           ; BSR set to: 0
 16897  003F7A  C084  F07A         	movff	___fttol@lval,?___fttol
 16898  003F7E  C085  F07B         	movff	___fttol@lval+1,?___fttol+1
 16899  003F82  C086  F07C         	movff	___fttol@lval+2,?___fttol+2
 16900  003F86  C087  F07D         	movff	___fttol@lval+3,?___fttol+3
 16901  003F8A  0012               	return	
 16902  003F8C                     __end_of___fttol:
 16903                           	opt stack 0
 16904                           tblptru	equ	0xFF8
 16905                           tblptrh	equ	0xFF7
 16906                           tblptrl	equ	0xFF6
 16907                           tablat	equ	0xFF5
 16908                           prodh	equ	0xFF4
 16909                           prodl	equ	0xFF3
 16910                           intcon	equ	0xFF2
 16911                           indf0	equ	0xFEF
 16912                           postinc0	equ	0xFEE
 16913                           fsr0h	equ	0xFEA
 16914                           fsr0l	equ	0xFE9
 16915                           wreg	equ	0xFE8
 16916                           postinc1	equ	0xFE6
 16917                           postdec1	equ	0xFE5
 16918                           plusw1	equ	0xFE3
 16919                           fsr1h	equ	0xFE2
 16920                           fsr1l	equ	0xFE1
 16921                           indf2	equ	0xFDF
 16922                           postinc2	equ	0xFDE
 16923                           postdec2	equ	0xFDD
 16924                           plusw2	equ	0xFDB
 16925                           fsr2h	equ	0xFDA
 16926                           fsr2l	equ	0xFD9
 16927                           status	equ	0xFD8
 16928                           
 16929 ;; *************** function ___ftsub *****************
 16930 ;; Defined at:
 16931 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftsub.c"
 16932 ;; Parameters:    Size  Location     Type
 16933 ;;  f1              3   41[BANK0 ] float 
 16934 ;;  f2              3   44[BANK0 ] float 
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;		None
 16937 ;; Return value:  Size  Location     Type
 16938 ;;                  3   41[BANK0 ] float 
 16939 ;; Registers used:
 16940 ;;		wreg, status,2, status,0, cstack
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/0
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16946 ;;      Params:         0       6       0       0       0       0       0
 16947 ;;      Locals:         0       0       0       0       0       0       0
 16948 ;;      Temps:          0       0       0       0       0       0       0
 16949 ;;      Totals:         0       6       0       0       0       0       0
 16950 ;;Total ram usage:        6 bytes
 16951 ;; Hardware stack levels used:    1
 16952 ;; Hardware stack levels required when called:    6
 16953 ;; This function calls:
 16954 ;;		___ftadd
 16955 ;; This function is called by:
 16956 ;;		_printf
 16957 ;;		_sqrt
 16958 ;; This function uses a non-reentrant model
 16959 ;;
 16960                           
 16961                           	psect	text43
 16962  0054C8                     __ptext43:
 16963                           	opt stack 0
 16964  0054C8                     ___ftsub:
 16965                           	opt stack 22
 16966                           
 16967                           ; BSR set to: 0
 16968                           ;incstack = 0
 16969  0054C8  0100               	movlb	0	; () banked
 16970  0054CA  518C               	movf	___ftsub@f2& (0+255),w,b
 16971  0054CC  0100               	movlb	0	; () banked
 16972  0054CE  118D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 16973  0054D0  0100               	movlb	0	; () banked
 16974  0054D2  118E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 16975  0054D4  B4D8               	btfsc	status,2,c
 16976  0054D6  D009               	goto	l8499
 16977                           
 16978                           ; BSR set to: 0
 16979  0054D8  0E00               	movlw	0
 16980  0054DA  0100               	movlb	0	; () banked
 16981  0054DC  1B8C               	xorwf	___ftsub@f2& (0+255),f,b
 16982  0054DE  0E00               	movlw	0
 16983  0054E0  0100               	movlb	0	; () banked
 16984  0054E2  1B8D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 16985  0054E4  0E80               	movlw	128
 16986  0054E6  0100               	movlb	0	; () banked
 16987  0054E8  1B8E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 16988  0054EA                     l8499:
 16989                           
 16990                           ; BSR set to: 0
 16991  0054EA  C089  F07D         	movff	___ftsub@f1,___ftadd@f1
 16992  0054EE  C08A  F07E         	movff	___ftsub@f1+1,___ftadd@f1+1
 16993  0054F2  C08B  F07F         	movff	___ftsub@f1+2,___ftadd@f1+2
 16994  0054F6  C08C  F080         	movff	___ftsub@f2,___ftadd@f2
 16995  0054FA  C08D  F081         	movff	___ftsub@f2+1,___ftadd@f2+1
 16996  0054FE  C08E  F082         	movff	___ftsub@f2+2,___ftadd@f2+2
 16997  005502  ECBC  F01B         	call	___ftadd	;wreg free
 16998  005506  C07D  F089         	movff	?___ftadd,?___ftsub
 16999  00550A  C07E  F08A         	movff	?___ftadd+1,?___ftsub+1
 17000  00550E  C07F  F08B         	movff	?___ftadd+2,?___ftsub+2
 17001  005512  0012               	return	
 17002  005514                     __end_of___ftsub:
 17003                           	opt stack 0
 17004                           tblptru	equ	0xFF8
 17005                           tblptrh	equ	0xFF7
 17006                           tblptrl	equ	0xFF6
 17007                           tablat	equ	0xFF5
 17008                           prodh	equ	0xFF4
 17009                           prodl	equ	0xFF3
 17010                           intcon	equ	0xFF2
 17011                           indf0	equ	0xFEF
 17012                           postinc0	equ	0xFEE
 17013                           fsr0h	equ	0xFEA
 17014                           fsr0l	equ	0xFE9
 17015                           wreg	equ	0xFE8
 17016                           postinc1	equ	0xFE6
 17017                           postdec1	equ	0xFE5
 17018                           plusw1	equ	0xFE3
 17019                           fsr1h	equ	0xFE2
 17020                           fsr1l	equ	0xFE1
 17021                           indf2	equ	0xFDF
 17022                           postinc2	equ	0xFDE
 17023                           postdec2	equ	0xFDD
 17024                           plusw2	equ	0xFDB
 17025                           fsr2h	equ	0xFDA
 17026                           fsr2l	equ	0xFD9
 17027                           status	equ	0xFD8
 17028                           
 17029 ;; *************** function ___ftadd *****************
 17030 ;; Defined at:
 17031 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 17032 ;; Parameters:    Size  Location     Type
 17033 ;;  f1              3   29[BANK0 ] float 
 17034 ;;  f2              3   32[BANK0 ] float 
 17035 ;; Auto vars:     Size  Location     Type
 17036 ;;  exp1            1   40[BANK0 ] unsigned char 
 17037 ;;  exp2            1   39[BANK0 ] unsigned char 
 17038 ;;  sign            1   38[BANK0 ] unsigned char 
 17039 ;; Return value:  Size  Location     Type
 17040 ;;                  3   29[BANK0 ] float 
 17041 ;; Registers used:
 17042 ;;		wreg, status,2, status,0, cstack
 17043 ;; Tracked objects:
 17044 ;;		On entry : 0/0
 17045 ;;		On exit  : 0/0
 17046 ;;		Unchanged: 0/0
 17047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17048 ;;      Params:         0       6       0       0       0       0       0
 17049 ;;      Locals:         0       3       0       0       0       0       0
 17050 ;;      Temps:          0       3       0       0       0       0       0
 17051 ;;      Totals:         0      12       0       0       0       0       0
 17052 ;;Total ram usage:       12 bytes
 17053 ;; Hardware stack levels used:    1
 17054 ;; Hardware stack levels required when called:    5
 17055 ;; This function calls:
 17056 ;;		___ftpack
 17057 ;; This function is called by:
 17058 ;;		_loop
 17059 ;;		_printf
 17060 ;;		___ftsub
 17061 ;; This function uses a non-reentrant model
 17062 ;;
 17063                           
 17064                           	psect	text44
 17065  003778                     __ptext44:
 17066                           	opt stack 0
 17067  003778                     ___ftadd:
 17068                           	opt stack 22
 17069                           
 17070                           ;incstack = 0
 17071  003778  C07F  F083         	movff	___ftadd@f1+2,??___ftadd
 17072  00377C  0100               	movlb	0	; () banked
 17073  00377E  6B84               	clrf	(??___ftadd+1)& (0+255),b
 17074  003780  6B85               	clrf	(??___ftadd+2)& (0+255),b
 17075  003782  0100               	movlb	0	; () banked
 17076  003784  357E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17077  003786  0100               	movlb	0	; () banked
 17078  003788  3783               	rlcf	??___ftadd& (0+255),f,b
 17079  00378A  E301               	bnc	u8621
 17080  00378C  8184               	bsf	(??___ftadd+1)& (0+255),0,b
 17081  00378E                     u8621:
 17082  00378E  0100               	movlb	0	; () banked
 17083  003790  5183               	movf	??___ftadd& (0+255),w,b
 17084  003792  0100               	movlb	0	; () banked
 17085  003794  6F88               	movwf	___ftadd@exp1& (0+255),b
 17086  003796  C082  F083         	movff	___ftadd@f2+2,??___ftadd
 17087  00379A  0100               	movlb	0	; () banked
 17088  00379C  6B84               	clrf	(??___ftadd+1)& (0+255),b
 17089  00379E  6B85               	clrf	(??___ftadd+2)& (0+255),b
 17090  0037A0  0100               	movlb	0	; () banked
 17091  0037A2  3581               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17092  0037A4  0100               	movlb	0	; () banked
 17093  0037A6  3783               	rlcf	??___ftadd& (0+255),f,b
 17094  0037A8  E301               	bnc	u8631
 17095  0037AA  8184               	bsf	(??___ftadd+1)& (0+255),0,b
 17096  0037AC                     u8631:
 17097  0037AC  0100               	movlb	0	; () banked
 17098  0037AE  5183               	movf	??___ftadd& (0+255),w,b
 17099  0037B0  0100               	movlb	0	; () banked
 17100  0037B2  6F87               	movwf	___ftadd@exp2& (0+255),b
 17101                           
 17102                           ; BSR set to: 0
 17103  0037B4  0100               	movlb	0	; () banked
 17104  0037B6  5188               	movf	___ftadd@exp1& (0+255),w,b
 17105  0037B8  0100               	movlb	0	; () banked
 17106  0037BA  B4D8               	btfsc	status,2,c
 17107  0037BC  D011               	goto	l1778
 17108                           
 17109                           ; BSR set to: 0
 17110  0037BE  0100               	movlb	0	; () banked
 17111  0037C0  5187               	movf	___ftadd@exp2& (0+255),w,b
 17112  0037C2  0100               	movlb	0	; () banked
 17113  0037C4  5D88               	subwf	___ftadd@exp1& (0+255),w,b
 17114  0037C6  B0D8               	btfsc	status,0,c
 17115  0037C8  D012               	goto	l8103
 17116                           
 17117                           ; BSR set to: 0
 17118  0037CA  0100               	movlb	0	; () banked
 17119  0037CC  5188               	movf	___ftadd@exp1& (0+255),w,b
 17120  0037CE  0800               	sublw	0
 17121  0037D0  0100               	movlb	0	; () banked
 17122  0037D2  2587               	addwf	___ftadd@exp2& (0+255),w,b
 17123  0037D4  0100               	movlb	0	; () banked
 17124  0037D6  6F83               	movwf	??___ftadd& (0+255),b
 17125  0037D8  0E18               	movlw	24
 17126  0037DA  0100               	movlb	0	; () banked
 17127  0037DC  6583               	cpfsgt	??___ftadd& (0+255),b
 17128  0037DE  D007               	goto	l8103
 17129  0037E0                     l1778:
 17130                           
 17131                           ; BSR set to: 0
 17132  0037E0  C080  F07D         	movff	___ftadd@f2,?___ftadd
 17133  0037E4  C081  F07E         	movff	___ftadd@f2+1,?___ftadd+1
 17134  0037E8  C082  F07F         	movff	___ftadd@f2+2,?___ftadd+2
 17135  0037EC  0012               	return	
 17136  0037EE                     l8103:
 17137                           
 17138                           ; BSR set to: 0
 17139  0037EE  0100               	movlb	0	; () banked
 17140  0037F0  5187               	movf	___ftadd@exp2& (0+255),w,b
 17141  0037F2  0100               	movlb	0	; () banked
 17142  0037F4  B4D8               	btfsc	status,2,c
 17143  0037F6  D011               	goto	l1782
 17144                           
 17145                           ; BSR set to: 0
 17146  0037F8  0100               	movlb	0	; () banked
 17147  0037FA  5188               	movf	___ftadd@exp1& (0+255),w,b
 17148  0037FC  0100               	movlb	0	; () banked
 17149  0037FE  5D87               	subwf	___ftadd@exp2& (0+255),w,b
 17150  003800  B0D8               	btfsc	status,0,c
 17151  003802  D012               	goto	l8109
 17152                           
 17153                           ; BSR set to: 0
 17154  003804  0100               	movlb	0	; () banked
 17155  003806  5187               	movf	___ftadd@exp2& (0+255),w,b
 17156  003808  0800               	sublw	0
 17157  00380A  0100               	movlb	0	; () banked
 17158  00380C  2588               	addwf	___ftadd@exp1& (0+255),w,b
 17159  00380E  0100               	movlb	0	; () banked
 17160  003810  6F83               	movwf	??___ftadd& (0+255),b
 17161  003812  0E18               	movlw	24
 17162  003814  0100               	movlb	0	; () banked
 17163  003816  6583               	cpfsgt	??___ftadd& (0+255),b
 17164  003818  D007               	goto	l8109
 17165  00381A                     l1782:
 17166                           
 17167                           ; BSR set to: 0
 17168  00381A  C07D  F07D         	movff	___ftadd@f1,?___ftadd
 17169  00381E  C07E  F07E         	movff	___ftadd@f1+1,?___ftadd+1
 17170  003822  C07F  F07F         	movff	___ftadd@f1+2,?___ftadd+2
 17171  003826  0012               	return	
 17172  003828                     l8109:
 17173                           
 17174                           ; BSR set to: 0
 17175  003828  0E06               	movlw	6
 17176  00382A  0100               	movlb	0	; () banked
 17177  00382C  6F86               	movwf	___ftadd@sign& (0+255),b
 17178                           
 17179                           ; BSR set to: 0
 17180  00382E  0100               	movlb	0	; () banked
 17181  003830  AF7F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 17182  003832  D002               	goto	l8115
 17183                           
 17184                           ; BSR set to: 0
 17185  003834  0100               	movlb	0	; () banked
 17186  003836  8F86               	bsf	___ftadd@sign& (0+255),7,b
 17187  003838                     l8115:
 17188                           
 17189                           ; BSR set to: 0
 17190  003838  0100               	movlb	0	; () banked
 17191  00383A  AF82               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17192  00383C  D002               	goto	l1784
 17193                           
 17194                           ; BSR set to: 0
 17195  00383E  0100               	movlb	0	; () banked
 17196  003840  8D86               	bsf	___ftadd@sign& (0+255),6,b
 17197  003842                     l1784:
 17198                           
 17199                           ; BSR set to: 0
 17200  003842  0100               	movlb	0	; () banked
 17201  003844  8F7E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17202                           
 17203                           ; BSR set to: 0
 17204  003846  0EFF               	movlw	255
 17205  003848  0100               	movlb	0	; () banked
 17206  00384A  177D               	andwf	___ftadd@f1& (0+255),f,b
 17207  00384C  0EFF               	movlw	255
 17208  00384E  0100               	movlb	0	; () banked
 17209  003850  177E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17210  003852  0E00               	movlw	0
 17211  003854  0100               	movlb	0	; () banked
 17212  003856  177F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17213  003858  0100               	movlb	0	; () banked
 17214  00385A  8F81               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17215                           
 17216                           ; BSR set to: 0
 17217  00385C  0EFF               	movlw	255
 17218  00385E  0100               	movlb	0	; () banked
 17219  003860  1780               	andwf	___ftadd@f2& (0+255),f,b
 17220  003862  0EFF               	movlw	255
 17221  003864  0100               	movlb	0	; () banked
 17222  003866  1781               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17223  003868  0E00               	movlw	0
 17224  00386A  0100               	movlb	0	; () banked
 17225  00386C  1782               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17226                           
 17227                           ; BSR set to: 0
 17228  00386E  0100               	movlb	0	; () banked
 17229  003870  5187               	movf	___ftadd@exp2& (0+255),w,b
 17230  003872  0100               	movlb	0	; () banked
 17231  003874  5D88               	subwf	___ftadd@exp1& (0+255),w,b
 17232  003876  B0D8               	btfsc	status,0,c
 17233  003878  D025               	goto	l8135
 17234  00387A                     l8125:
 17235                           
 17236                           ; BSR set to: 0
 17237  00387A  0100               	movlb	0	; () banked
 17238  00387C  90D8               	bcf	status,0,c
 17239  00387E  3780               	rlcf	___ftadd@f2& (0+255),f,b
 17240  003880  3781               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17241  003882  3782               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17242  003884  0100               	movlb	0	; () banked
 17243  003886  0787               	decf	___ftadd@exp2& (0+255),f,b
 17244                           
 17245                           ; BSR set to: 0
 17246  003888  0100               	movlb	0	; () banked
 17247  00388A  5188               	movf	___ftadd@exp1& (0+255),w,b
 17248  00388C  0100               	movlb	0	; () banked
 17249  00388E  1987               	xorwf	___ftadd@exp2& (0+255),w,b
 17250  003890  B4D8               	btfsc	status,2,c
 17251  003892  D011               	goto	l8133
 17252                           
 17253                           ; BSR set to: 0
 17254  003894  0100               	movlb	0	; () banked
 17255  003896  0786               	decf	___ftadd@sign& (0+255),f,b
 17256  003898  C086  F083         	movff	___ftadd@sign,??___ftadd
 17257  00389C  0E07               	movlw	7
 17258  00389E  0100               	movlb	0	; () banked
 17259  0038A0  1783               	andwf	??___ftadd& (0+255),f,b
 17260  0038A2  B4D8               	btfsc	status,2,c
 17261  0038A4  D008               	goto	l8133
 17262  0038A6  D7E9               	goto	l8125
 17263  0038A8                     l8131:
 17264                           
 17265                           ; BSR set to: 0
 17266  0038A8  0100               	movlb	0	; () banked
 17267  0038AA  90D8               	bcf	status,0,c
 17268  0038AC  337F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17269  0038AE  337E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17270  0038B0  337D               	rrcf	___ftadd@f1& (0+255),f,b
 17271  0038B2  0100               	movlb	0	; () banked
 17272  0038B4  2B88               	incf	___ftadd@exp1& (0+255),f,b
 17273  0038B6                     l8133:
 17274                           
 17275                           ; BSR set to: 0
 17276  0038B6  0100               	movlb	0	; () banked
 17277  0038B8  5187               	movf	___ftadd@exp2& (0+255),w,b
 17278  0038BA  0100               	movlb	0	; () banked
 17279  0038BC  1988               	xorwf	___ftadd@exp1& (0+255),w,b
 17280  0038BE  B4D8               	btfsc	status,2,c
 17281  0038C0  D02B               	goto	l1793
 17282  0038C2  D7F2               	goto	l8131
 17283  0038C4                     l8135:
 17284                           
 17285                           ; BSR set to: 0
 17286  0038C4  0100               	movlb	0	; () banked
 17287  0038C6  5188               	movf	___ftadd@exp1& (0+255),w,b
 17288  0038C8  0100               	movlb	0	; () banked
 17289  0038CA  5D87               	subwf	___ftadd@exp2& (0+255),w,b
 17290  0038CC  B0D8               	btfsc	status,0,c
 17291  0038CE  D024               	goto	l1793
 17292  0038D0                     l8137:
 17293                           
 17294                           ; BSR set to: 0
 17295  0038D0  0100               	movlb	0	; () banked
 17296  0038D2  90D8               	bcf	status,0,c
 17297  0038D4  377D               	rlcf	___ftadd@f1& (0+255),f,b
 17298  0038D6  377E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17299  0038D8  377F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17300  0038DA  0100               	movlb	0	; () banked
 17301  0038DC  0788               	decf	___ftadd@exp1& (0+255),f,b
 17302                           
 17303                           ; BSR set to: 0
 17304  0038DE  0100               	movlb	0	; () banked
 17305  0038E0  5188               	movf	___ftadd@exp1& (0+255),w,b
 17306  0038E2  0100               	movlb	0	; () banked
 17307  0038E4  1987               	xorwf	___ftadd@exp2& (0+255),w,b
 17308  0038E6  B4D8               	btfsc	status,2,c
 17309  0038E8  D011               	goto	l8145
 17310                           
 17311                           ; BSR set to: 0
 17312  0038EA  0100               	movlb	0	; () banked
 17313  0038EC  0786               	decf	___ftadd@sign& (0+255),f,b
 17314  0038EE  C086  F083         	movff	___ftadd@sign,??___ftadd
 17315  0038F2  0E07               	movlw	7
 17316  0038F4  0100               	movlb	0	; () banked
 17317  0038F6  1783               	andwf	??___ftadd& (0+255),f,b
 17318  0038F8  B4D8               	btfsc	status,2,c
 17319  0038FA  D008               	goto	l8145
 17320  0038FC  D7E9               	goto	l8137
 17321  0038FE                     l8143:
 17322                           
 17323                           ; BSR set to: 0
 17324  0038FE  0100               	movlb	0	; () banked
 17325  003900  90D8               	bcf	status,0,c
 17326  003902  3382               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17327  003904  3381               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17328  003906  3380               	rrcf	___ftadd@f2& (0+255),f,b
 17329  003908  0100               	movlb	0	; () banked
 17330  00390A  2B87               	incf	___ftadd@exp2& (0+255),f,b
 17331  00390C                     l8145:
 17332                           
 17333                           ; BSR set to: 0
 17334  00390C  0100               	movlb	0	; () banked
 17335  00390E  5187               	movf	___ftadd@exp2& (0+255),w,b
 17336  003910  0100               	movlb	0	; () banked
 17337  003912  1988               	xorwf	___ftadd@exp1& (0+255),w,b
 17338  003914  A4D8               	btfss	status,2,c
 17339  003916  D7F3               	goto	l8143
 17340  003918                     l1793:
 17341                           
 17342                           ; BSR set to: 0
 17343  003918  0100               	movlb	0	; () banked
 17344  00391A  AF86               	btfss	___ftadd@sign& (0+255),7,b
 17345  00391C  D012               	goto	l1802
 17346                           
 17347                           ; BSR set to: 0
 17348  00391E  0EFF               	movlw	255
 17349  003920  0100               	movlb	0	; () banked
 17350  003922  1B7D               	xorwf	___ftadd@f1& (0+255),f,b
 17351  003924  0EFF               	movlw	255
 17352  003926  0100               	movlb	0	; () banked
 17353  003928  1B7E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17354  00392A  0EFF               	movlw	255
 17355  00392C  0100               	movlb	0	; () banked
 17356  00392E  1B7F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17357  003930  0E01               	movlw	1
 17358  003932  0100               	movlb	0	; () banked
 17359  003934  277D               	addwf	___ftadd@f1& (0+255),f,b
 17360  003936  0E00               	movlw	0
 17361  003938  0100               	movlb	0	; () banked
 17362  00393A  237E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17363  00393C  0E00               	movlw	0
 17364  00393E  0100               	movlb	0	; () banked
 17365  003940  237F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17366  003942                     l1802:
 17367                           
 17368                           ; BSR set to: 0
 17369  003942  0100               	movlb	0	; () banked
 17370  003944  AD86               	btfss	___ftadd@sign& (0+255),6,b
 17371  003946  D012               	goto	l8151
 17372                           
 17373                           ; BSR set to: 0
 17374  003948  0EFF               	movlw	255
 17375  00394A  0100               	movlb	0	; () banked
 17376  00394C  1B80               	xorwf	___ftadd@f2& (0+255),f,b
 17377  00394E  0EFF               	movlw	255
 17378  003950  0100               	movlb	0	; () banked
 17379  003952  1B81               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17380  003954  0EFF               	movlw	255
 17381  003956  0100               	movlb	0	; () banked
 17382  003958  1B82               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17383  00395A  0E01               	movlw	1
 17384  00395C  0100               	movlb	0	; () banked
 17385  00395E  2780               	addwf	___ftadd@f2& (0+255),f,b
 17386  003960  0E00               	movlw	0
 17387  003962  0100               	movlb	0	; () banked
 17388  003964  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17389  003966  0E00               	movlw	0
 17390  003968  0100               	movlb	0	; () banked
 17391  00396A  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17392  00396C                     l8151:
 17393                           
 17394                           ; BSR set to: 0
 17395  00396C  0E00               	movlw	0
 17396  00396E  0100               	movlb	0	; () banked
 17397  003970  6F86               	movwf	___ftadd@sign& (0+255),b
 17398                           
 17399                           ; BSR set to: 0
 17400  003972  0100               	movlb	0	; () banked
 17401  003974  517D               	movf	___ftadd@f1& (0+255),w,b
 17402  003976  0100               	movlb	0	; () banked
 17403  003978  2780               	addwf	___ftadd@f2& (0+255),f,b
 17404  00397A  0100               	movlb	0	; () banked
 17405  00397C  517E               	movf	(___ftadd@f1+1)& (0+255),w,b
 17406  00397E  0100               	movlb	0	; () banked
 17407  003980  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17408  003982  0100               	movlb	0	; () banked
 17409  003984  517F               	movf	(___ftadd@f1+2)& (0+255),w,b
 17410  003986  0100               	movlb	0	; () banked
 17411  003988  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17412                           
 17413                           ; BSR set to: 0
 17414  00398A  0100               	movlb	0	; () banked
 17415  00398C  AF82               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17416  00398E  D015               	goto	l8161
 17417                           
 17418                           ; BSR set to: 0
 17419  003990  0EFF               	movlw	255
 17420  003992  0100               	movlb	0	; () banked
 17421  003994  1B80               	xorwf	___ftadd@f2& (0+255),f,b
 17422  003996  0EFF               	movlw	255
 17423  003998  0100               	movlb	0	; () banked
 17424  00399A  1B81               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17425  00399C  0EFF               	movlw	255
 17426  00399E  0100               	movlb	0	; () banked
 17427  0039A0  1B82               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17428  0039A2  0E01               	movlw	1
 17429  0039A4  0100               	movlb	0	; () banked
 17430  0039A6  2780               	addwf	___ftadd@f2& (0+255),f,b
 17431  0039A8  0E00               	movlw	0
 17432  0039AA  0100               	movlb	0	; () banked
 17433  0039AC  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17434  0039AE  0E00               	movlw	0
 17435  0039B0  0100               	movlb	0	; () banked
 17436  0039B2  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17437                           
 17438                           ; BSR set to: 0
 17439  0039B4  0E01               	movlw	1
 17440  0039B6  0100               	movlb	0	; () banked
 17441  0039B8  6F86               	movwf	___ftadd@sign& (0+255),b
 17442  0039BA                     l8161:
 17443                           
 17444                           ; BSR set to: 0
 17445  0039BA  C080  F01B         	movff	___ftadd@f2,___ftpack@arg
 17446  0039BE  C081  F01C         	movff	___ftadd@f2+1,___ftpack@arg+1
 17447  0039C2  C082  F01D         	movff	___ftadd@f2+2,___ftpack@arg+2
 17448  0039C6  C088  F01E         	movff	___ftadd@exp1,___ftpack@exp
 17449  0039CA  C086  F01F         	movff	___ftadd@sign,___ftpack@sign
 17450  0039CE  EC0B  F027         	call	___ftpack	;wreg free
 17451  0039D2  C01B  F07D         	movff	?___ftpack,?___ftadd
 17452  0039D6  C01C  F07E         	movff	?___ftpack+1,?___ftadd+1
 17453  0039DA  C01D  F07F         	movff	?___ftpack+2,?___ftadd+2
 17454  0039DE  0012               	return	
 17455  0039E0                     __end_of___ftadd:
 17456                           	opt stack 0
 17457                           tblptru	equ	0xFF8
 17458                           tblptrh	equ	0xFF7
 17459                           tblptrl	equ	0xFF6
 17460                           tablat	equ	0xFF5
 17461                           prodh	equ	0xFF4
 17462                           prodl	equ	0xFF3
 17463                           intcon	equ	0xFF2
 17464                           indf0	equ	0xFEF
 17465                           postinc0	equ	0xFEE
 17466                           fsr0h	equ	0xFEA
 17467                           fsr0l	equ	0xFE9
 17468                           wreg	equ	0xFE8
 17469                           postinc1	equ	0xFE6
 17470                           postdec1	equ	0xFE5
 17471                           plusw1	equ	0xFE3
 17472                           fsr1h	equ	0xFE2
 17473                           fsr1l	equ	0xFE1
 17474                           indf2	equ	0xFDF
 17475                           postinc2	equ	0xFDE
 17476                           postdec2	equ	0xFDD
 17477                           plusw2	equ	0xFDB
 17478                           fsr2h	equ	0xFDA
 17479                           fsr2l	equ	0xFD9
 17480                           status	equ	0xFD8
 17481                           
 17482 ;; *************** function ___ftneg *****************
 17483 ;; Defined at:
 17484 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 17485 ;; Parameters:    Size  Location     Type
 17486 ;;  f1              3   26[COMRAM] float 
 17487 ;; Auto vars:     Size  Location     Type
 17488 ;;		None
 17489 ;; Return value:  Size  Location     Type
 17490 ;;                  3   26[COMRAM] float 
 17491 ;; Registers used:
 17492 ;;		wreg, status,2, status,0
 17493 ;; Tracked objects:
 17494 ;;		On entry : 0/0
 17495 ;;		On exit  : 0/0
 17496 ;;		Unchanged: 0/0
 17497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17498 ;;      Params:         3       0       0       0       0       0       0
 17499 ;;      Locals:         0       0       0       0       0       0       0
 17500 ;;      Temps:          0       0       0       0       0       0       0
 17501 ;;      Totals:         3       0       0       0       0       0       0
 17502 ;;Total ram usage:        3 bytes
 17503 ;; Hardware stack levels used:    1
 17504 ;; Hardware stack levels required when called:    4
 17505 ;; This function calls:
 17506 ;;		Nothing
 17507 ;; This function is called by:
 17508 ;;		_printf
 17509 ;; This function uses a non-reentrant model
 17510 ;;
 17511                           
 17512                           	psect	text45
 17513  005800                     __ptext45:
 17514                           	opt stack 0
 17515  005800                     ___ftneg:
 17516                           	opt stack 24
 17517                           
 17518                           ;incstack = 0
 17519  005800  501B               	movf	___ftneg@f1,w,c
 17520  005802  101C               	iorwf	___ftneg@f1+1,w,c
 17521  005804  101D               	iorwf	___ftneg@f1+2,w,c
 17522  005806  B4D8               	btfsc	status,2,c
 17523  005808  D006               	goto	l1852
 17524  00580A  0E00               	movlw	0
 17525  00580C  1A1B               	xorwf	___ftneg@f1,f,c
 17526  00580E  0E00               	movlw	0
 17527  005810  1A1C               	xorwf	___ftneg@f1+1,f,c
 17528  005812  0E80               	movlw	128
 17529  005814  1A1D               	xorwf	___ftneg@f1+2,f,c
 17530  005816                     l1852:
 17531  005816  C01B  F01B         	movff	___ftneg@f1,?___ftneg
 17532  00581A  C01C  F01C         	movff	___ftneg@f1+1,?___ftneg+1
 17533  00581E  C01D  F01D         	movff	___ftneg@f1+2,?___ftneg+2
 17534  005822  0012               	return		;funcret
 17535  005824                     __end_of___ftneg:
 17536                           	opt stack 0
 17537                           tblptru	equ	0xFF8
 17538                           tblptrh	equ	0xFF7
 17539                           tblptrl	equ	0xFF6
 17540                           tablat	equ	0xFF5
 17541                           prodh	equ	0xFF4
 17542                           prodl	equ	0xFF3
 17543                           intcon	equ	0xFF2
 17544                           indf0	equ	0xFEF
 17545                           postinc0	equ	0xFEE
 17546                           fsr0h	equ	0xFEA
 17547                           fsr0l	equ	0xFE9
 17548                           wreg	equ	0xFE8
 17549                           postinc1	equ	0xFE6
 17550                           postdec1	equ	0xFE5
 17551                           plusw1	equ	0xFE3
 17552                           fsr1h	equ	0xFE2
 17553                           fsr1l	equ	0xFE1
 17554                           indf2	equ	0xFDF
 17555                           postinc2	equ	0xFDE
 17556                           postdec2	equ	0xFDD
 17557                           plusw2	equ	0xFDB
 17558                           fsr2h	equ	0xFDA
 17559                           fsr2l	equ	0xFD9
 17560                           status	equ	0xFD8
 17561                           
 17562 ;; *************** function ___ftge *****************
 17563 ;; Defined at:
 17564 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftge.c"
 17565 ;; Parameters:    Size  Location     Type
 17566 ;;  ff1             3    2[BANK0 ] float 
 17567 ;;  ff2             3    5[BANK0 ] float 
 17568 ;; Auto vars:     Size  Location     Type
 17569 ;;		None
 17570 ;; Return value:  Size  Location     Type
 17571 ;;		None               void
 17572 ;; Registers used:
 17573 ;;		wreg, status,2, status,0
 17574 ;; Tracked objects:
 17575 ;;		On entry : 0/0
 17576 ;;		On exit  : 0/0
 17577 ;;		Unchanged: 0/0
 17578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17579 ;;      Params:         0       6       0       0       0       0       0
 17580 ;;      Locals:         0       0       0       0       0       0       0
 17581 ;;      Temps:          0       3       0       0       0       0       0
 17582 ;;      Totals:         0       9       0       0       0       0       0
 17583 ;;Total ram usage:        9 bytes
 17584 ;; Hardware stack levels used:    1
 17585 ;; Hardware stack levels required when called:    4
 17586 ;; This function calls:
 17587 ;;		Nothing
 17588 ;; This function is called by:
 17589 ;;		_accelgyroCalBNO055
 17590 ;;		_printf
 17591 ;;		_sqrt
 17592 ;; This function uses a non-reentrant model
 17593 ;;
 17594                           
 17595                           	psect	text46
 17596  0047C6                     __ptext46:
 17597                           	opt stack 0
 17598  0047C6                     ___ftge:
 17599                           	opt stack 24
 17600                           
 17601                           ;incstack = 0
 17602  0047C6  0100               	movlb	0	; () banked
 17603  0047C8  AF64               	btfss	(___ftge@ff1+2)& (0+255),7,b
 17604  0047CA  D01D               	goto	l8507
 17605                           
 17606                           ; BSR set to: 0
 17607  0047CC  C062  F068         	movff	___ftge@ff1,??___ftge
 17608  0047D0  C063  F069         	movff	___ftge@ff1+1,??___ftge+1
 17609  0047D4  C064  F06A         	movff	___ftge@ff1+2,??___ftge+2
 17610  0047D8  0100               	movlb	0	; () banked
 17611  0047DA  1F68               	comf	??___ftge& (0+255),f,b
 17612  0047DC  1F69               	comf	(??___ftge+1)& (0+255),f,b
 17613  0047DE  1F6A               	comf	(??___ftge+2)& (0+255),f,b
 17614  0047E0  2B68               	incf	??___ftge& (0+255),f,b
 17615  0047E2  0E00               	movlw	0
 17616  0047E4  2369               	addwfc	(??___ftge+1)& (0+255),f,b
 17617  0047E6  236A               	addwfc	(??___ftge+2)& (0+255),f,b
 17618  0047E8  0E00               	movlw	0
 17619  0047EA  0100               	movlb	0	; () banked
 17620  0047EC  2568               	addwf	??___ftge& (0+255),w,b
 17621  0047EE  0100               	movlb	0	; () banked
 17622  0047F0  6F62               	movwf	___ftge@ff1& (0+255),b
 17623  0047F2  0E00               	movlw	0
 17624  0047F4  0100               	movlb	0	; () banked
 17625  0047F6  2169               	addwfc	(??___ftge+1)& (0+255),w,b
 17626  0047F8  0100               	movlb	0	; () banked
 17627  0047FA  6F63               	movwf	(___ftge@ff1+1)& (0+255),b
 17628  0047FC  0E80               	movlw	128
 17629  0047FE  0100               	movlb	0	; () banked
 17630  004800  216A               	addwfc	(??___ftge+2)& (0+255),w,b
 17631  004802  0100               	movlb	0	; () banked
 17632  004804  6F64               	movwf	(___ftge@ff1+2)& (0+255),b
 17633  004806                     l8507:
 17634                           
 17635                           ; BSR set to: 0
 17636  004806  0100               	movlb	0	; () banked
 17637  004808  AF67               	btfss	(___ftge@ff2+2)& (0+255),7,b
 17638  00480A  D01D               	goto	l8511
 17639                           
 17640                           ; BSR set to: 0
 17641  00480C  C065  F068         	movff	___ftge@ff2,??___ftge
 17642  004810  C066  F069         	movff	___ftge@ff2+1,??___ftge+1
 17643  004814  C067  F06A         	movff	___ftge@ff2+2,??___ftge+2
 17644  004818  0100               	movlb	0	; () banked
 17645  00481A  1F68               	comf	??___ftge& (0+255),f,b
 17646  00481C  1F69               	comf	(??___ftge+1)& (0+255),f,b
 17647  00481E  1F6A               	comf	(??___ftge+2)& (0+255),f,b
 17648  004820  2B68               	incf	??___ftge& (0+255),f,b
 17649  004822  0E00               	movlw	0
 17650  004824  2369               	addwfc	(??___ftge+1)& (0+255),f,b
 17651  004826  236A               	addwfc	(??___ftge+2)& (0+255),f,b
 17652  004828  0E00               	movlw	0
 17653  00482A  0100               	movlb	0	; () banked
 17654  00482C  2568               	addwf	??___ftge& (0+255),w,b
 17655  00482E  0100               	movlb	0	; () banked
 17656  004830  6F65               	movwf	___ftge@ff2& (0+255),b
 17657  004832  0E00               	movlw	0
 17658  004834  0100               	movlb	0	; () banked
 17659  004836  2169               	addwfc	(??___ftge+1)& (0+255),w,b
 17660  004838  0100               	movlb	0	; () banked
 17661  00483A  6F66               	movwf	(___ftge@ff2+1)& (0+255),b
 17662  00483C  0E80               	movlw	128
 17663  00483E  0100               	movlb	0	; () banked
 17664  004840  216A               	addwfc	(??___ftge+2)& (0+255),w,b
 17665  004842  0100               	movlb	0	; () banked
 17666  004844  6F67               	movwf	(___ftge@ff2+2)& (0+255),b
 17667  004846                     l8511:
 17668                           
 17669                           ; BSR set to: 0
 17670  004846  0E00               	movlw	0
 17671  004848  0100               	movlb	0	; () banked
 17672  00484A  1B62               	xorwf	___ftge@ff1& (0+255),f,b
 17673  00484C  0E00               	movlw	0
 17674  00484E  0100               	movlb	0	; () banked
 17675  004850  1B63               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 17676  004852  0E80               	movlw	128
 17677  004854  0100               	movlb	0	; () banked
 17678  004856  1B64               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 17679                           
 17680                           ; BSR set to: 0
 17681  004858  0E00               	movlw	0
 17682  00485A  0100               	movlb	0	; () banked
 17683  00485C  1B65               	xorwf	___ftge@ff2& (0+255),f,b
 17684  00485E  0E00               	movlw	0
 17685  004860  0100               	movlb	0	; () banked
 17686  004862  1B66               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 17687  004864  0E80               	movlw	128
 17688  004866  0100               	movlb	0	; () banked
 17689  004868  1B67               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 17690  00486A  0100               	movlb	0	; () banked
 17691  00486C  5165               	movf	___ftge@ff2& (0+255),w,b
 17692  00486E  0100               	movlb	0	; () banked
 17693  004870  5D62               	subwf	___ftge@ff1& (0+255),w,b
 17694  004872  0100               	movlb	0	; () banked
 17695  004874  5166               	movf	(___ftge@ff2+1)& (0+255),w,b
 17696  004876  0100               	movlb	0	; () banked
 17697  004878  5963               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 17698  00487A  0100               	movlb	0	; () banked
 17699  00487C  5167               	movf	(___ftge@ff2+2)& (0+255),w,b
 17700  00487E  0100               	movlb	0	; () banked
 17701  004880  5964               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 17702  004882  B0D8               	btfsc	status,0,c
 17703  004884  D002               	goto	l8517
 17704                           
 17705                           ; BSR set to: 0
 17706  004886  90D8               	bcf	status,0,c
 17707  004888  0012               	return	
 17708  00488A                     l8517:
 17709                           
 17710                           ; BSR set to: 0
 17711  00488A  80D8               	bsf	status,0,c
 17712                           
 17713                           ; BSR set to: 0
 17714  00488C  0012               	return	
 17715  00488E                     __end_of___ftge:
 17716                           	opt stack 0
 17717                           tblptru	equ	0xFF8
 17718                           tblptrh	equ	0xFF7
 17719                           tblptrl	equ	0xFF6
 17720                           tablat	equ	0xFF5
 17721                           prodh	equ	0xFF4
 17722                           prodl	equ	0xFF3
 17723                           intcon	equ	0xFF2
 17724                           indf0	equ	0xFEF
 17725                           postinc0	equ	0xFEE
 17726                           fsr0h	equ	0xFEA
 17727                           fsr0l	equ	0xFE9
 17728                           wreg	equ	0xFE8
 17729                           postinc1	equ	0xFE6
 17730                           postdec1	equ	0xFE5
 17731                           plusw1	equ	0xFE3
 17732                           fsr1h	equ	0xFE2
 17733                           fsr1l	equ	0xFE1
 17734                           indf2	equ	0xFDF
 17735                           postinc2	equ	0xFDE
 17736                           postdec2	equ	0xFDD
 17737                           plusw2	equ	0xFDB
 17738                           fsr2h	equ	0xFDA
 17739                           fsr2l	equ	0xFD9
 17740                           status	equ	0xFD8
 17741                           
 17742 ;; *************** function ___ftdiv *****************
 17743 ;; Defined at:
 17744 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 17745 ;; Parameters:    Size  Location     Type
 17746 ;;  f1              3    2[BANK0 ] float 
 17747 ;;  f2              3    5[BANK0 ] float 
 17748 ;; Auto vars:     Size  Location     Type
 17749 ;;  f3              3   12[BANK0 ] float 
 17750 ;;  sign            1   16[BANK0 ] unsigned char 
 17751 ;;  exp             1   15[BANK0 ] unsigned char 
 17752 ;;  cntr            1   11[BANK0 ] unsigned char 
 17753 ;; Return value:  Size  Location     Type
 17754 ;;                  3    2[BANK0 ] float 
 17755 ;; Registers used:
 17756 ;;		wreg, status,2, status,0, cstack
 17757 ;; Tracked objects:
 17758 ;;		On entry : 0/0
 17759 ;;		On exit  : 0/0
 17760 ;;		Unchanged: 0/0
 17761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17762 ;;      Params:         0       6       0       0       0       0       0
 17763 ;;      Locals:         0       6       0       0       0       0       0
 17764 ;;      Temps:          0       3       0       0       0       0       0
 17765 ;;      Totals:         0      15       0       0       0       0       0
 17766 ;;Total ram usage:       15 bytes
 17767 ;; Hardware stack levels used:    1
 17768 ;; Hardware stack levels required when called:    5
 17769 ;; This function calls:
 17770 ;;		___ftpack
 17771 ;; This function is called by:
 17772 ;;		_loop
 17773 ;;		_accelgyroCalBNO055
 17774 ;;		_magCalBNO055
 17775 ;; This function uses a non-reentrant model
 17776 ;;
 17777                           
 17778                           	psect	text47
 17779  003CFC                     __ptext47:
 17780                           	opt stack 0
 17781  003CFC                     ___ftdiv:
 17782                           	opt stack 24
 17783                           
 17784                           ; BSR set to: 0
 17785                           ;incstack = 0
 17786  003CFC  C064  F068         	movff	___ftdiv@f1+2,??___ftdiv
 17787  003D00  0100               	movlb	0	; () banked
 17788  003D02  6B69               	clrf	(??___ftdiv+1)& (0+255),b
 17789  003D04  6B6A               	clrf	(??___ftdiv+2)& (0+255),b
 17790  003D06  0100               	movlb	0	; () banked
 17791  003D08  3563               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 17792  003D0A  0100               	movlb	0	; () banked
 17793  003D0C  3768               	rlcf	??___ftdiv& (0+255),f,b
 17794  003D0E  E301               	bnc	u10821
 17795  003D10  8169               	bsf	(??___ftdiv+1)& (0+255),0,b
 17796  003D12                     u10821:
 17797  003D12  0100               	movlb	0	; () banked
 17798  003D14  5168               	movf	??___ftdiv& (0+255),w,b
 17799  003D16  0100               	movlb	0	; () banked
 17800  003D18  6F6F               	movwf	___ftdiv@exp& (0+255),b
 17801  003D1A  0100               	movlb	0	; () banked
 17802  003D1C  516F               	movf	___ftdiv@exp& (0+255),w,b
 17803  003D1E  A4D8               	btfss	status,2,c
 17804  003D20  D00A               	goto	l9327
 17805                           
 17806                           ; BSR set to: 0
 17807  003D22  0E00               	movlw	0
 17808  003D24  0100               	movlb	0	; () banked
 17809  003D26  6F62               	movwf	?___ftdiv& (0+255),b
 17810  003D28  0E00               	movlw	0
 17811  003D2A  0100               	movlb	0	; () banked
 17812  003D2C  6F63               	movwf	(?___ftdiv+1)& (0+255),b
 17813  003D2E  0E00               	movlw	0
 17814  003D30  0100               	movlb	0	; () banked
 17815  003D32  6F64               	movwf	(?___ftdiv+2)& (0+255),b
 17816                           
 17817                           ; BSR set to: 0
 17818  003D34  0012               	return	
 17819  003D36                     l9327:
 17820                           
 17821                           ; BSR set to: 0
 17822  003D36  C067  F068         	movff	___ftdiv@f2+2,??___ftdiv
 17823  003D3A  0100               	movlb	0	; () banked
 17824  003D3C  6B69               	clrf	(??___ftdiv+1)& (0+255),b
 17825  003D3E  6B6A               	clrf	(??___ftdiv+2)& (0+255),b
 17826  003D40  0100               	movlb	0	; () banked
 17827  003D42  3566               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 17828  003D44  0100               	movlb	0	; () banked
 17829  003D46  3768               	rlcf	??___ftdiv& (0+255),f,b
 17830  003D48  E301               	bnc	u10841
 17831  003D4A  8169               	bsf	(??___ftdiv+1)& (0+255),0,b
 17832  003D4C                     u10841:
 17833  003D4C  0100               	movlb	0	; () banked
 17834  003D4E  5168               	movf	??___ftdiv& (0+255),w,b
 17835  003D50  0100               	movlb	0	; () banked
 17836  003D52  6F70               	movwf	___ftdiv@sign& (0+255),b
 17837  003D54  0100               	movlb	0	; () banked
 17838  003D56  5170               	movf	___ftdiv@sign& (0+255),w,b
 17839  003D58  A4D8               	btfss	status,2,c
 17840  003D5A  D00A               	goto	l9333
 17841                           
 17842                           ; BSR set to: 0
 17843  003D5C  0E00               	movlw	0
 17844  003D5E  0100               	movlb	0	; () banked
 17845  003D60  6F62               	movwf	?___ftdiv& (0+255),b
 17846  003D62  0E00               	movlw	0
 17847  003D64  0100               	movlb	0	; () banked
 17848  003D66  6F63               	movwf	(?___ftdiv+1)& (0+255),b
 17849  003D68  0E00               	movlw	0
 17850  003D6A  0100               	movlb	0	; () banked
 17851  003D6C  6F64               	movwf	(?___ftdiv+2)& (0+255),b
 17852                           
 17853                           ; BSR set to: 0
 17854  003D6E  0012               	return	
 17855  003D70                     l9333:
 17856                           
 17857                           ; BSR set to: 0
 17858  003D70  0E00               	movlw	0
 17859  003D72  0100               	movlb	0	; () banked
 17860  003D74  6F6C               	movwf	___ftdiv@f3& (0+255),b
 17861  003D76  0E00               	movlw	0
 17862  003D78  0100               	movlb	0	; () banked
 17863  003D7A  6F6D               	movwf	(___ftdiv@f3+1)& (0+255),b
 17864  003D7C  0E00               	movlw	0
 17865  003D7E  0100               	movlb	0	; () banked
 17866  003D80  6F6E               	movwf	(___ftdiv@f3+2)& (0+255),b
 17867                           
 17868                           ; BSR set to: 0
 17869  003D82  0100               	movlb	0	; () banked
 17870  003D84  5170               	movf	___ftdiv@sign& (0+255),w,b
 17871  003D86  0F89               	addlw	137
 17872  003D88  0100               	movlb	0	; () banked
 17873  003D8A  5F6F               	subwf	___ftdiv@exp& (0+255),f,b
 17874                           
 17875                           ; BSR set to: 0
 17876  003D8C  C064  F070         	movff	___ftdiv@f1+2,___ftdiv@sign
 17877                           
 17878                           ; BSR set to: 0
 17879  003D90  0100               	movlb	0	; () banked
 17880  003D92  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17881  003D94  0100               	movlb	0	; () banked
 17882  003D96  1B70               	xorwf	___ftdiv@sign& (0+255),f,b
 17883                           
 17884                           ; BSR set to: 0
 17885  003D98  0E80               	movlw	128
 17886  003D9A  0100               	movlb	0	; () banked
 17887  003D9C  1770               	andwf	___ftdiv@sign& (0+255),f,b
 17888                           
 17889                           ; BSR set to: 0
 17890  003D9E  0100               	movlb	0	; () banked
 17891  003DA0  8F63               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 17892                           
 17893                           ; BSR set to: 0
 17894  003DA2  0EFF               	movlw	255
 17895  003DA4  0100               	movlb	0	; () banked
 17896  003DA6  1762               	andwf	___ftdiv@f1& (0+255),f,b
 17897  003DA8  0EFF               	movlw	255
 17898  003DAA  0100               	movlb	0	; () banked
 17899  003DAC  1763               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 17900  003DAE  0E00               	movlw	0
 17901  003DB0  0100               	movlb	0	; () banked
 17902  003DB2  1764               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 17903                           
 17904                           ; BSR set to: 0
 17905  003DB4  0100               	movlb	0	; () banked
 17906  003DB6  8F66               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 17907                           
 17908                           ; BSR set to: 0
 17909  003DB8  0EFF               	movlw	255
 17910  003DBA  0100               	movlb	0	; () banked
 17911  003DBC  1765               	andwf	___ftdiv@f2& (0+255),f,b
 17912  003DBE  0EFF               	movlw	255
 17913  003DC0  0100               	movlb	0	; () banked
 17914  003DC2  1766               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 17915  003DC4  0E00               	movlw	0
 17916  003DC6  0100               	movlb	0	; () banked
 17917  003DC8  1767               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 17918                           
 17919                           ; BSR set to: 0
 17920  003DCA  0E18               	movlw	24
 17921  003DCC  0100               	movlb	0	; () banked
 17922  003DCE  6F6B               	movwf	___ftdiv@cntr& (0+255),b
 17923  003DD0                     l9353:
 17924                           
 17925                           ; BSR set to: 0
 17926  003DD0  0100               	movlb	0	; () banked
 17927  003DD2  90D8               	bcf	status,0,c
 17928  003DD4  376C               	rlcf	___ftdiv@f3& (0+255),f,b
 17929  003DD6  376D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17930  003DD8  376E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17931                           
 17932                           ; BSR set to: 0
 17933  003DDA  0100               	movlb	0	; () banked
 17934  003DDC  5165               	movf	___ftdiv@f2& (0+255),w,b
 17935  003DDE  0100               	movlb	0	; () banked
 17936  003DE0  5D62               	subwf	___ftdiv@f1& (0+255),w,b
 17937  003DE2  0100               	movlb	0	; () banked
 17938  003DE4  5166               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17939  003DE6  0100               	movlb	0	; () banked
 17940  003DE8  5963               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 17941  003DEA  0100               	movlb	0	; () banked
 17942  003DEC  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17943  003DEE  0100               	movlb	0	; () banked
 17944  003DF0  5964               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 17945  003DF2  A0D8               	btfss	status,0,c
 17946  003DF4  D00E               	goto	l1813
 17947                           
 17948                           ; BSR set to: 0
 17949  003DF6  0100               	movlb	0	; () banked
 17950  003DF8  5165               	movf	___ftdiv@f2& (0+255),w,b
 17951  003DFA  0100               	movlb	0	; () banked
 17952  003DFC  5F62               	subwf	___ftdiv@f1& (0+255),f,b
 17953  003DFE  0100               	movlb	0	; () banked
 17954  003E00  5166               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17955  003E02  0100               	movlb	0	; () banked
 17956  003E04  5B63               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 17957  003E06  0100               	movlb	0	; () banked
 17958  003E08  5167               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17959  003E0A  0100               	movlb	0	; () banked
 17960  003E0C  5B64               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 17961                           
 17962                           ; BSR set to: 0
 17963  003E0E  0100               	movlb	0	; () banked
 17964  003E10  816C               	bsf	___ftdiv@f3& (0+255),0,b
 17965  003E12                     l1813:
 17966                           
 17967                           ; BSR set to: 0
 17968  003E12  0100               	movlb	0	; () banked
 17969  003E14  90D8               	bcf	status,0,c
 17970  003E16  3762               	rlcf	___ftdiv@f1& (0+255),f,b
 17971  003E18  3763               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 17972  003E1A  3764               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 17973                           
 17974                           ; BSR set to: 0
 17975  003E1C  0100               	movlb	0	; () banked
 17976  003E1E  2F6B               	decfsz	___ftdiv@cntr& (0+255),f,b
 17977  003E20  D7D7               	goto	l9353
 17978                           
 17979                           ; BSR set to: 0
 17980                           
 17981                           ; BSR set to: 0
 17982  003E22  C06C  F01B         	movff	___ftdiv@f3,___ftpack@arg
 17983  003E26  C06D  F01C         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17984  003E2A  C06E  F01D         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17985  003E2E  C06F  F01E         	movff	___ftdiv@exp,___ftpack@exp
 17986  003E32  C070  F01F         	movff	___ftdiv@sign,___ftpack@sign
 17987  003E36  EC0B  F027         	call	___ftpack	;wreg free
 17988  003E3A  C01B  F062         	movff	?___ftpack,?___ftdiv
 17989  003E3E  C01C  F063         	movff	?___ftpack+1,?___ftdiv+1
 17990  003E42  C01D  F064         	movff	?___ftpack+2,?___ftdiv+2
 17991  003E46  0012               	return	
 17992  003E48                     __end_of___ftdiv:
 17993                           	opt stack 0
 17994                           tblptru	equ	0xFF8
 17995                           tblptrh	equ	0xFF7
 17996                           tblptrl	equ	0xFF6
 17997                           tablat	equ	0xFF5
 17998                           prodh	equ	0xFF4
 17999                           prodl	equ	0xFF3
 18000                           intcon	equ	0xFF2
 18001                           indf0	equ	0xFEF
 18002                           postinc0	equ	0xFEE
 18003                           fsr0h	equ	0xFEA
 18004                           fsr0l	equ	0xFE9
 18005                           wreg	equ	0xFE8
 18006                           postinc1	equ	0xFE6
 18007                           postdec1	equ	0xFE5
 18008                           plusw1	equ	0xFE3
 18009                           fsr1h	equ	0xFE2
 18010                           fsr1l	equ	0xFE1
 18011                           indf2	equ	0xFDF
 18012                           postinc2	equ	0xFDE
 18013                           postdec2	equ	0xFDD
 18014                           plusw2	equ	0xFDB
 18015                           fsr2h	equ	0xFDA
 18016                           fsr2l	equ	0xFD9
 18017                           status	equ	0xFD8
 18018                           
 18019 ;; *************** function ___altoft *****************
 18020 ;; Defined at:
 18021 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 18022 ;; Parameters:    Size  Location     Type
 18023 ;;  c               4   34[COMRAM] long 
 18024 ;; Auto vars:     Size  Location     Type
 18025 ;;  sign            1    1[BANK0 ] unsigned char 
 18026 ;;  exp             1    0[BANK0 ] unsigned char 
 18027 ;; Return value:  Size  Location     Type
 18028 ;;                  3   34[COMRAM] float 
 18029 ;; Registers used:
 18030 ;;		wreg, status,2, status,0, cstack
 18031 ;; Tracked objects:
 18032 ;;		On entry : 0/0
 18033 ;;		On exit  : 0/0
 18034 ;;		Unchanged: 0/0
 18035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18036 ;;      Params:         4       0       0       0       0       0       0
 18037 ;;      Locals:         0       2       0       0       0       0       0
 18038 ;;      Temps:          4       0       0       0       0       0       0
 18039 ;;      Totals:         8       2       0       0       0       0       0
 18040 ;;Total ram usage:       10 bytes
 18041 ;; Hardware stack levels used:    1
 18042 ;; Hardware stack levels required when called:    5
 18043 ;; This function calls:
 18044 ;;		___ftpack
 18045 ;; This function is called by:
 18046 ;;		_loop
 18047 ;;		_accelgyroCalBNO055
 18048 ;;		_magCalBNO055
 18049 ;; This function uses a non-reentrant model
 18050 ;;
 18051                           
 18052                           	psect	text48
 18053  00522C                     __ptext48:
 18054                           	opt stack 0
 18055  00522C                     ___altoft:
 18056                           	opt stack 24
 18057                           
 18058                           ;incstack = 0
 18059  00522C  0E00               	movlw	0
 18060  00522E  0100               	movlb	0	; () banked
 18061  005230  6F61               	movwf	___altoft@sign& (0+255),b
 18062  005232  0E8E               	movlw	142
 18063  005234  0100               	movlb	0	; () banked
 18064  005236  6F60               	movwf	___altoft@exp& (0+255),b
 18065                           
 18066                           ; BSR set to: 0
 18067  005238  AE26               	btfss	___altoft@c+3,7,c
 18068  00523A  D013               	goto	l9315
 18069                           
 18070                           ; BSR set to: 0
 18071  00523C  1E26               	comf	___altoft@c+3,f,c
 18072  00523E  1E25               	comf	___altoft@c+2,f,c
 18073  005240  1E24               	comf	___altoft@c+1,f,c
 18074  005242  6C23               	negf	___altoft@c,c
 18075  005244  0E00               	movlw	0
 18076  005246  2224               	addwfc	___altoft@c+1,f,c
 18077  005248  2225               	addwfc	___altoft@c+2,f,c
 18078  00524A  2226               	addwfc	___altoft@c+3,f,c
 18079                           
 18080                           ; BSR set to: 0
 18081  00524C  0E01               	movlw	1
 18082  00524E  0100               	movlb	0	; () banked
 18083  005250  6F61               	movwf	___altoft@sign& (0+255),b
 18084                           
 18085                           ; BSR set to: 0
 18086  005252  D007               	goto	l9315
 18087  005254                     l9313:
 18088                           
 18089                           ; BSR set to: 0
 18090  005254  90D8               	bcf	status,0,c
 18091  005256  3226               	rrcf	___altoft@c+3,f,c
 18092  005258  3225               	rrcf	___altoft@c+2,f,c
 18093  00525A  3224               	rrcf	___altoft@c+1,f,c
 18094  00525C  3223               	rrcf	___altoft@c,f,c
 18095  00525E  0100               	movlb	0	; () banked
 18096  005260  2B60               	incf	___altoft@exp& (0+255),f,b
 18097  005262                     l9315:
 18098                           
 18099                           ; BSR set to: 0
 18100  005262  0E00               	movlw	0
 18101  005264  1423               	andwf	___altoft@c,w,c
 18102  005266  6E27               	movwf	??___altoft& (0+255),c
 18103  005268  0E00               	movlw	0
 18104  00526A  1424               	andwf	___altoft@c+1,w,c
 18105  00526C  6E28               	movwf	(??___altoft+1)& (0+255),c
 18106  00526E  0E00               	movlw	0
 18107  005270  1425               	andwf	___altoft@c+2,w,c
 18108  005272  6E29               	movwf	(??___altoft+2)& (0+255),c
 18109  005274  0EFF               	movlw	255
 18110  005276  1426               	andwf	___altoft@c+3,w,c
 18111  005278  6E2A               	movwf	(??___altoft+3)& (0+255),c
 18112  00527A  5027               	movf	??___altoft,w,c
 18113  00527C  1028               	iorwf	??___altoft+1,w,c
 18114  00527E  1029               	iorwf	??___altoft+2,w,c
 18115  005280  102A               	iorwf	??___altoft+3,w,c
 18116  005282  A4D8               	btfss	status,2,c
 18117  005284  D7E7               	goto	l9313
 18118                           
 18119                           ; BSR set to: 0
 18120                           
 18121                           ; BSR set to: 0
 18122  005286  C023  F01B         	movff	___altoft@c,___ftpack@arg
 18123  00528A  C024  F01C         	movff	___altoft@c+1,___ftpack@arg+1
 18124  00528E  C025  F01D         	movff	___altoft@c+2,___ftpack@arg+2
 18125  005292  C060  F01E         	movff	___altoft@exp,___ftpack@exp
 18126  005296  C061  F01F         	movff	___altoft@sign,___ftpack@sign
 18127  00529A  EC0B  F027         	call	___ftpack	;wreg free
 18128  00529E  C01B  F023         	movff	?___ftpack,?___altoft
 18129  0052A2  C01C  F024         	movff	?___ftpack+1,?___altoft+1
 18130  0052A6  C01D  F025         	movff	?___ftpack+2,?___altoft+2
 18131  0052AA  0012               	return	
 18132  0052AC                     __end_of___altoft:
 18133                           	opt stack 0
 18134                           tblptru	equ	0xFF8
 18135                           tblptrh	equ	0xFF7
 18136                           tblptrl	equ	0xFF6
 18137                           tablat	equ	0xFF5
 18138                           prodh	equ	0xFF4
 18139                           prodl	equ	0xFF3
 18140                           intcon	equ	0xFF2
 18141                           indf0	equ	0xFEF
 18142                           postinc0	equ	0xFEE
 18143                           fsr0h	equ	0xFEA
 18144                           fsr0l	equ	0xFE9
 18145                           wreg	equ	0xFE8
 18146                           postinc1	equ	0xFE6
 18147                           postdec1	equ	0xFE5
 18148                           plusw1	equ	0xFE3
 18149                           fsr1h	equ	0xFE2
 18150                           fsr1l	equ	0xFE1
 18151                           indf2	equ	0xFDF
 18152                           postinc2	equ	0xFDE
 18153                           postdec2	equ	0xFDD
 18154                           plusw2	equ	0xFDB
 18155                           fsr2h	equ	0xFDA
 18156                           fsr2l	equ	0xFD9
 18157                           status	equ	0xFD8
 18158                           
 18159 ;; *************** function ___ftpack *****************
 18160 ;; Defined at:
 18161 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  arg             3   26[COMRAM] unsigned um
 18164 ;;  exp             1   29[COMRAM] unsigned char 
 18165 ;;  sign            1   30[COMRAM] unsigned char 
 18166 ;; Auto vars:     Size  Location     Type
 18167 ;;		None
 18168 ;; Return value:  Size  Location     Type
 18169 ;;                  3   26[COMRAM] float 
 18170 ;; Registers used:
 18171 ;;		wreg, status,2, status,0
 18172 ;; Tracked objects:
 18173 ;;		On entry : 0/0
 18174 ;;		On exit  : 0/0
 18175 ;;		Unchanged: 0/0
 18176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18177 ;;      Params:         5       0       0       0       0       0       0
 18178 ;;      Locals:         0       0       0       0       0       0       0
 18179 ;;      Temps:          3       0       0       0       0       0       0
 18180 ;;      Totals:         8       0       0       0       0       0       0
 18181 ;;Total ram usage:        8 bytes
 18182 ;; Hardware stack levels used:    1
 18183 ;; Hardware stack levels required when called:    4
 18184 ;; This function calls:
 18185 ;;		Nothing
 18186 ;; This function is called by:
 18187 ;;		___altoft
 18188 ;;		___awtoft
 18189 ;;		___ftadd
 18190 ;;		___ftdiv
 18191 ;;		___ftmul
 18192 ;;		___lltoft
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           	psect	text49
 18197  004E16                     __ptext49:
 18198                           	opt stack 0
 18199  004E16                     ___ftpack:
 18200                           	opt stack 22
 18201                           
 18202                           ;incstack = 0
 18203  004E16  501E               	movf	___ftpack@exp,w,c
 18204  004E18  B4D8               	btfsc	status,2,c
 18205  004E1A  D005               	goto	l8005
 18206  004E1C  501B               	movf	___ftpack@arg,w,c
 18207  004E1E  101C               	iorwf	___ftpack@arg+1,w,c
 18208  004E20  101D               	iorwf	___ftpack@arg+2,w,c
 18209  004E22  A4D8               	btfss	status,2,c
 18210  004E24  D00C               	goto	l8011
 18211  004E26                     l8005:
 18212  004E26  0E00               	movlw	0
 18213  004E28  6E1B               	movwf	?___ftpack,c
 18214  004E2A  0E00               	movlw	0
 18215  004E2C  6E1C               	movwf	?___ftpack+1,c
 18216  004E2E  0E00               	movlw	0
 18217  004E30  6E1D               	movwf	?___ftpack+2,c
 18218  004E32  0012               	return	
 18219  004E34                     l8009:
 18220  004E34  2A1E               	incf	___ftpack@exp,f,c
 18221  004E36  90D8               	bcf	status,0,c
 18222  004E38  321D               	rrcf	___ftpack@arg+2,f,c
 18223  004E3A  321C               	rrcf	___ftpack@arg+1,f,c
 18224  004E3C  321B               	rrcf	___ftpack@arg,f,c
 18225  004E3E                     l8011:
 18226  004E3E  0E00               	movlw	0
 18227  004E40  141B               	andwf	___ftpack@arg,w,c
 18228  004E42  6E20               	movwf	??___ftpack& (0+255),c
 18229  004E44  0E00               	movlw	0
 18230  004E46  141C               	andwf	___ftpack@arg+1,w,c
 18231  004E48  6E21               	movwf	(??___ftpack+1)& (0+255),c
 18232  004E4A  0EFE               	movlw	254
 18233  004E4C  141D               	andwf	___ftpack@arg+2,w,c
 18234  004E4E  6E22               	movwf	(??___ftpack+2)& (0+255),c
 18235  004E50  5020               	movf	??___ftpack,w,c
 18236  004E52  1021               	iorwf	??___ftpack+1,w,c
 18237  004E54  1022               	iorwf	??___ftpack+2,w,c
 18238  004E56  B4D8               	btfsc	status,2,c
 18239  004E58  D00C               	goto	l8017
 18240  004E5A  D7EC               	goto	l8009
 18241  004E5C                     l8013:
 18242  004E5C  2A1E               	incf	___ftpack@exp,f,c
 18243  004E5E  0E01               	movlw	1
 18244  004E60  261B               	addwf	___ftpack@arg,f,c
 18245  004E62  0E00               	movlw	0
 18246  004E64  221C               	addwfc	___ftpack@arg+1,f,c
 18247  004E66  0E00               	movlw	0
 18248  004E68  221D               	addwfc	___ftpack@arg+2,f,c
 18249  004E6A  90D8               	bcf	status,0,c
 18250  004E6C  321D               	rrcf	___ftpack@arg+2,f,c
 18251  004E6E  321C               	rrcf	___ftpack@arg+1,f,c
 18252  004E70  321B               	rrcf	___ftpack@arg,f,c
 18253  004E72                     l8017:
 18254  004E72  0E00               	movlw	0
 18255  004E74  141B               	andwf	___ftpack@arg,w,c
 18256  004E76  6E20               	movwf	??___ftpack& (0+255),c
 18257  004E78  0E00               	movlw	0
 18258  004E7A  141C               	andwf	___ftpack@arg+1,w,c
 18259  004E7C  6E21               	movwf	(??___ftpack+1)& (0+255),c
 18260  004E7E  0EFF               	movlw	255
 18261  004E80  141D               	andwf	___ftpack@arg+2,w,c
 18262  004E82  6E22               	movwf	(??___ftpack+2)& (0+255),c
 18263  004E84  5020               	movf	??___ftpack,w,c
 18264  004E86  1021               	iorwf	??___ftpack+1,w,c
 18265  004E88  1022               	iorwf	??___ftpack+2,w,c
 18266  004E8A  B4D8               	btfsc	status,2,c
 18267  004E8C  D006               	goto	l8021
 18268  004E8E  D7E6               	goto	l8013
 18269  004E90                     l8019:
 18270  004E90  061E               	decf	___ftpack@exp,f,c
 18271  004E92  90D8               	bcf	status,0,c
 18272  004E94  361B               	rlcf	___ftpack@arg,f,c
 18273  004E96  361C               	rlcf	___ftpack@arg+1,f,c
 18274  004E98  361D               	rlcf	___ftpack@arg+2,f,c
 18275  004E9A                     l8021:
 18276  004E9A  BE1C               	btfsc	___ftpack@arg+1,7,c
 18277  004E9C  D003               	goto	l1755
 18278  004E9E  0E02               	movlw	2
 18279  004EA0  601E               	cpfslt	___ftpack@exp,c
 18280  004EA2  D7F6               	goto	l8019
 18281  004EA4                     l1755:
 18282  004EA4  A01E               	btfss	___ftpack@exp,0,c
 18283  004EA6  9E1C               	bcf	___ftpack@arg+1,7,c
 18284  004EA8  90D8               	bcf	status,0,c
 18285  004EAA  321E               	rrcf	___ftpack@exp,f,c
 18286  004EAC  501E               	movf	___ftpack@exp,w,c
 18287  004EAE  121D               	iorwf	___ftpack@arg+2,f,c
 18288  004EB0  501F               	movf	___ftpack@sign,w,c
 18289  004EB2  A4D8               	btfss	status,2,c
 18290  004EB4  8E1D               	bsf	___ftpack@arg+2,7,c
 18291  004EB6  C01B  F01B         	movff	___ftpack@arg,?___ftpack
 18292  004EBA  C01C  F01C         	movff	___ftpack@arg+1,?___ftpack+1
 18293  004EBE  C01D  F01D         	movff	___ftpack@arg+2,?___ftpack+2
 18294  004EC2  0012               	return	
 18295  004EC4                     __end_of___ftpack:
 18296                           	opt stack 0
 18297                           tblptru	equ	0xFF8
 18298                           tblptrh	equ	0xFF7
 18299                           tblptrl	equ	0xFF6
 18300                           tablat	equ	0xFF5
 18301                           prodh	equ	0xFF4
 18302                           prodl	equ	0xFF3
 18303                           intcon	equ	0xFF2
 18304                           indf0	equ	0xFEF
 18305                           postinc0	equ	0xFEE
 18306                           fsr0h	equ	0xFEA
 18307                           fsr0l	equ	0xFE9
 18308                           wreg	equ	0xFE8
 18309                           postinc1	equ	0xFE6
 18310                           postdec1	equ	0xFE5
 18311                           plusw1	equ	0xFE3
 18312                           fsr1h	equ	0xFE2
 18313                           fsr1l	equ	0xFE1
 18314                           indf2	equ	0xFDF
 18315                           postinc2	equ	0xFDE
 18316                           postdec2	equ	0xFDD
 18317                           plusw2	equ	0xFDB
 18318                           fsr2h	equ	0xFDA
 18319                           fsr2l	equ	0xFD9
 18320                           status	equ	0xFD8
 18321                           
 18322 ;; *************** function ___aldiv *****************
 18323 ;; Defined at:
 18324 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 18325 ;; Parameters:    Size  Location     Type
 18326 ;;  dividend        4   26[COMRAM] long 
 18327 ;;  divisor         4   30[COMRAM] long 
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;  quotient        4   36[COMRAM] long 
 18330 ;;  sign            1   35[COMRAM] unsigned char 
 18331 ;;  counter         1   34[COMRAM] unsigned char 
 18332 ;; Return value:  Size  Location     Type
 18333 ;;                  4   26[COMRAM] long 
 18334 ;; Registers used:
 18335 ;;		wreg, status,2, status,0
 18336 ;; Tracked objects:
 18337 ;;		On entry : 0/0
 18338 ;;		On exit  : 0/0
 18339 ;;		Unchanged: 0/0
 18340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18341 ;;      Params:         8       0       0       0       0       0       0
 18342 ;;      Locals:         6       0       0       0       0       0       0
 18343 ;;      Temps:          0       0       0       0       0       0       0
 18344 ;;      Totals:        14       0       0       0       0       0       0
 18345 ;;Total ram usage:       14 bytes
 18346 ;; Hardware stack levels used:    1
 18347 ;; Hardware stack levels required when called:    4
 18348 ;; This function calls:
 18349 ;;		Nothing
 18350 ;; This function is called by:
 18351 ;;		_accelgyroCalBNO055
 18352 ;; This function uses a non-reentrant model
 18353 ;;
 18354                           
 18355                           	psect	text50
 18356  0046FA                     __ptext50:
 18357                           	opt stack 0
 18358  0046FA                     ___aldiv:
 18359                           	opt stack 24
 18360                           
 18361                           ;incstack = 0
 18362  0046FA  0E00               	movlw	0
 18363  0046FC  6E24               	movwf	___aldiv@sign,c
 18364  0046FE  AE22               	btfss	___aldiv@divisor+3,7,c
 18365  004700  D00A               	goto	l9269
 18366  004702  1E22               	comf	___aldiv@divisor+3,f,c
 18367  004704  1E21               	comf	___aldiv@divisor+2,f,c
 18368  004706  1E20               	comf	___aldiv@divisor+1,f,c
 18369  004708  6C1F               	negf	___aldiv@divisor,c
 18370  00470A  0E00               	movlw	0
 18371  00470C  2220               	addwfc	___aldiv@divisor+1,f,c
 18372  00470E  2221               	addwfc	___aldiv@divisor+2,f,c
 18373  004710  2222               	addwfc	___aldiv@divisor+3,f,c
 18374  004712  0E01               	movlw	1
 18375  004714  6E24               	movwf	___aldiv@sign,c
 18376  004716                     l9269:
 18377  004716  AE1E               	btfss	___aldiv@dividend+3,7,c
 18378  004718  D00A               	goto	l9275
 18379  00471A  1E1E               	comf	___aldiv@dividend+3,f,c
 18380  00471C  1E1D               	comf	___aldiv@dividend+2,f,c
 18381  00471E  1E1C               	comf	___aldiv@dividend+1,f,c
 18382  004720  6C1B               	negf	___aldiv@dividend,c
 18383  004722  0E00               	movlw	0
 18384  004724  221C               	addwfc	___aldiv@dividend+1,f,c
 18385  004726  221D               	addwfc	___aldiv@dividend+2,f,c
 18386  004728  221E               	addwfc	___aldiv@dividend+3,f,c
 18387  00472A  0E01               	movlw	1
 18388  00472C  1A24               	xorwf	___aldiv@sign,f,c
 18389  00472E                     l9275:
 18390  00472E  0E00               	movlw	0
 18391  004730  6E25               	movwf	___aldiv@quotient,c
 18392  004732  0E00               	movlw	0
 18393  004734  6E26               	movwf	___aldiv@quotient+1,c
 18394  004736  0E00               	movlw	0
 18395  004738  6E27               	movwf	___aldiv@quotient+2,c
 18396  00473A  0E00               	movlw	0
 18397  00473C  6E28               	movwf	___aldiv@quotient+3,c
 18398  00473E  501F               	movf	___aldiv@divisor,w,c
 18399  004740  1020               	iorwf	___aldiv@divisor+1,w,c
 18400  004742  1021               	iorwf	___aldiv@divisor+2,w,c
 18401  004744  1022               	iorwf	___aldiv@divisor+3,w,c
 18402  004746  B4D8               	btfsc	status,2,c
 18403  004748  D02A               	goto	l9297
 18404  00474A  0E01               	movlw	1
 18405  00474C  6E23               	movwf	___aldiv@counter,c
 18406  00474E  D006               	goto	l9283
 18407  004750                     l9281:
 18408  004750  90D8               	bcf	status,0,c
 18409  004752  361F               	rlcf	___aldiv@divisor,f,c
 18410  004754  3620               	rlcf	___aldiv@divisor+1,f,c
 18411  004756  3621               	rlcf	___aldiv@divisor+2,f,c
 18412  004758  3622               	rlcf	___aldiv@divisor+3,f,c
 18413  00475A  2A23               	incf	___aldiv@counter,f,c
 18414  00475C                     l9283:
 18415  00475C  AE22               	btfss	___aldiv@divisor+3,7,c
 18416  00475E  D7F8               	goto	l9281
 18417  004760                     l9285:
 18418  004760  90D8               	bcf	status,0,c
 18419  004762  3625               	rlcf	___aldiv@quotient,f,c
 18420  004764  3626               	rlcf	___aldiv@quotient+1,f,c
 18421  004766  3627               	rlcf	___aldiv@quotient+2,f,c
 18422  004768  3628               	rlcf	___aldiv@quotient+3,f,c
 18423  00476A  501F               	movf	___aldiv@divisor,w,c
 18424  00476C  5C1B               	subwf	___aldiv@dividend,w,c
 18425  00476E  5020               	movf	___aldiv@divisor+1,w,c
 18426  004770  581C               	subwfb	___aldiv@dividend+1,w,c
 18427  004772  5021               	movf	___aldiv@divisor+2,w,c
 18428  004774  581D               	subwfb	___aldiv@dividend+2,w,c
 18429  004776  5022               	movf	___aldiv@divisor+3,w,c
 18430  004778  581E               	subwfb	___aldiv@dividend+3,w,c
 18431  00477A  A0D8               	btfss	status,0,c
 18432  00477C  D009               	goto	l9293
 18433  00477E  501F               	movf	___aldiv@divisor,w,c
 18434  004780  5E1B               	subwf	___aldiv@dividend,f,c
 18435  004782  5020               	movf	___aldiv@divisor+1,w,c
 18436  004784  5A1C               	subwfb	___aldiv@dividend+1,f,c
 18437  004786  5021               	movf	___aldiv@divisor+2,w,c
 18438  004788  5A1D               	subwfb	___aldiv@dividend+2,f,c
 18439  00478A  5022               	movf	___aldiv@divisor+3,w,c
 18440  00478C  5A1E               	subwfb	___aldiv@dividend+3,f,c
 18441  00478E  8025               	bsf	___aldiv@quotient,0,c
 18442  004790                     l9293:
 18443  004790  90D8               	bcf	status,0,c
 18444  004792  3222               	rrcf	___aldiv@divisor+3,f,c
 18445  004794  3221               	rrcf	___aldiv@divisor+2,f,c
 18446  004796  3220               	rrcf	___aldiv@divisor+1,f,c
 18447  004798  321F               	rrcf	___aldiv@divisor,f,c
 18448  00479A  2E23               	decfsz	___aldiv@counter,f,c
 18449  00479C  D7E1               	goto	l9285
 18450  00479E                     l9297:
 18451  00479E  5024               	movf	___aldiv@sign,w,c
 18452  0047A0  B4D8               	btfsc	status,2,c
 18453  0047A2  D008               	goto	l9301
 18454  0047A4  1E28               	comf	___aldiv@quotient+3,f,c
 18455  0047A6  1E27               	comf	___aldiv@quotient+2,f,c
 18456  0047A8  1E26               	comf	___aldiv@quotient+1,f,c
 18457  0047AA  6C25               	negf	___aldiv@quotient,c
 18458  0047AC  0E00               	movlw	0
 18459  0047AE  2226               	addwfc	___aldiv@quotient+1,f,c
 18460  0047B0  2227               	addwfc	___aldiv@quotient+2,f,c
 18461  0047B2  2228               	addwfc	___aldiv@quotient+3,f,c
 18462  0047B4                     l9301:
 18463  0047B4  C025  F01B         	movff	___aldiv@quotient,?___aldiv
 18464  0047B8  C026  F01C         	movff	___aldiv@quotient+1,?___aldiv+1
 18465  0047BC  C027  F01D         	movff	___aldiv@quotient+2,?___aldiv+2
 18466  0047C0  C028  F01E         	movff	___aldiv@quotient+3,?___aldiv+3
 18467  0047C4  0012               	return	
 18468  0047C6                     __end_of___aldiv:
 18469                           	opt stack 0
 18470                           tblptru	equ	0xFF8
 18471                           tblptrh	equ	0xFF7
 18472                           tblptrl	equ	0xFF6
 18473                           tablat	equ	0xFF5
 18474                           prodh	equ	0xFF4
 18475                           prodl	equ	0xFF3
 18476                           intcon	equ	0xFF2
 18477                           indf0	equ	0xFEF
 18478                           postinc0	equ	0xFEE
 18479                           fsr0h	equ	0xFEA
 18480                           fsr0l	equ	0xFE9
 18481                           wreg	equ	0xFE8
 18482                           postinc1	equ	0xFE6
 18483                           postdec1	equ	0xFE5
 18484                           plusw1	equ	0xFE3
 18485                           fsr1h	equ	0xFE2
 18486                           fsr1l	equ	0xFE1
 18487                           indf2	equ	0xFDF
 18488                           postinc2	equ	0xFDE
 18489                           postdec2	equ	0xFDD
 18490                           plusw2	equ	0xFDB
 18491                           fsr2h	equ	0xFDA
 18492                           fsr2l	equ	0xFD9
 18493                           status	equ	0xFD8
 18494                           
 18495 ;; *************** function _Delay *****************
 18496 ;; Defined at:
 18497 ;;		line 18 in file "Function.c"
 18498 ;; Parameters:    Size  Location     Type
 18499 ;;  wait            2   26[COMRAM] int 
 18500 ;; Auto vars:     Size  Location     Type
 18501 ;;  x               2   29[COMRAM] int 
 18502 ;; Return value:  Size  Location     Type
 18503 ;;                  1    wreg      void 
 18504 ;; Registers used:
 18505 ;;		wreg, status,2, status,0
 18506 ;; Tracked objects:
 18507 ;;		On entry : 0/0
 18508 ;;		On exit  : 0/0
 18509 ;;		Unchanged: 0/0
 18510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18511 ;;      Params:         2       0       0       0       0       0       0
 18512 ;;      Locals:         2       0       0       0       0       0       0
 18513 ;;      Temps:          1       0       0       0       0       0       0
 18514 ;;      Totals:         5       0       0       0       0       0       0
 18515 ;;Total ram usage:        5 bytes
 18516 ;; Hardware stack levels used:    1
 18517 ;; Hardware stack levels required when called:    4
 18518 ;; This function calls:
 18519 ;;		Nothing
 18520 ;; This function is called by:
 18521 ;;		_main
 18522 ;;		_Setup
 18523 ;;		_loop
 18524 ;;		_initBNO055
 18525 ;;		_accelgyroCalBNO055
 18526 ;;		_magCalBNO055
 18527 ;;		_respondTM
 18528 ;; This function uses a non-reentrant model
 18529 ;;
 18530                           
 18531                           	psect	text51
 18532  00568E                     __ptext51:
 18533                           	opt stack 0
 18534  00568E                     _Delay:
 18535                           	opt stack 25
 18536                           
 18537                           ;Function.c: 19: int x;
 18538                           ;Function.c: 20: for (x = 0; x < wait; x++) {
 18539                           
 18540                           ;incstack = 0
 18541  00568E  0E00               	movlw	0
 18542  005690  6E1F               	movwf	Delay@x+1,c
 18543  005692  0E00               	movlw	0
 18544  005694  6E1E               	movwf	Delay@x,c
 18545  005696  D00A               	goto	l939
 18546  005698                     l8621:
 18547                           
 18548                           ;Function.c: 21: _delay((unsigned long)((1)*(16000000/4000.0)));
 18549  005698  0E06               	movlw	6
 18550  00569A  6E1D               	movwf	??_Delay& (0+255),c
 18551  00569C  0E30               	movlw	48
 18552  00569E                     u12377:
 18553  00569E  2EE8               	decfsz	wreg,f,c
 18554  0056A0  D7FE               	goto	u12377
 18555  0056A2  2E1D               	decfsz	??_Delay& (0+255),f,c
 18556  0056A4  D7FC               	goto	u12377
 18557  0056A6  D000               	nop2	
 18558  0056A8  4A1E               	infsnz	Delay@x,f,c
 18559  0056AA  2A1F               	incf	Delay@x+1,f,c
 18560  0056AC                     l939:
 18561  0056AC  501B               	movf	Delay@wait,w,c
 18562  0056AE  5C1E               	subwf	Delay@x,w,c
 18563  0056B0  501F               	movf	Delay@x+1,w,c
 18564  0056B2  0A80               	xorlw	128
 18565  0056B4  6E1D               	movwf	??_Delay& (0+255),c
 18566  0056B6  501C               	movf	Delay@wait+1,w,c
 18567  0056B8  0A80               	xorlw	128
 18568  0056BA  581D               	subwfb	??_Delay& (0+255),w,c
 18569  0056BC  B0D8               	btfsc	status,0,c
 18570  0056BE  0012               	return	
 18571  0056C0  D7EB               	goto	l8621
 18572  0056C2                     __end_of_Delay:
 18573                           	opt stack 0
 18574                           tblptru	equ	0xFF8
 18575                           tblptrh	equ	0xFF7
 18576                           tblptrl	equ	0xFF6
 18577                           tablat	equ	0xFF5
 18578                           prodh	equ	0xFF4
 18579                           prodl	equ	0xFF3
 18580                           intcon	equ	0xFF2
 18581                           indf0	equ	0xFEF
 18582                           postinc0	equ	0xFEE
 18583                           fsr0h	equ	0xFEA
 18584                           fsr0l	equ	0xFE9
 18585                           wreg	equ	0xFE8
 18586                           postinc1	equ	0xFE6
 18587                           postdec1	equ	0xFE5
 18588                           plusw1	equ	0xFE3
 18589                           fsr1h	equ	0xFE2
 18590                           fsr1l	equ	0xFE1
 18591                           indf2	equ	0xFDF
 18592                           postinc2	equ	0xFDE
 18593                           postdec2	equ	0xFDD
 18594                           plusw2	equ	0xFDB
 18595                           fsr2h	equ	0xFDA
 18596                           fsr2l	equ	0xFD9
 18597                           status	equ	0xFD8
 18598                           
 18599 ;; *************** function _SYSTEM_Initialize *****************
 18600 ;; Defined at:
 18601 ;;		line 112 in file "mcc_generated_files/mcc.c"
 18602 ;; Parameters:    Size  Location     Type
 18603 ;;		None
 18604 ;; Auto vars:     Size  Location     Type
 18605 ;;		None
 18606 ;; Return value:  Size  Location     Type
 18607 ;;                  1    wreg      void 
 18608 ;; Registers used:
 18609 ;;		wreg, status,2, cstack
 18610 ;; Tracked objects:
 18611 ;;		On entry : 0/0
 18612 ;;		On exit  : 0/0
 18613 ;;		Unchanged: 0/0
 18614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18615 ;;      Params:         0       0       0       0       0       0       0
 18616 ;;      Locals:         0       0       0       0       0       0       0
 18617 ;;      Temps:          0       0       0       0       0       0       0
 18618 ;;      Totals:         0       0       0       0       0       0       0
 18619 ;;Total ram usage:        0 bytes
 18620 ;; Hardware stack levels used:    1
 18621 ;; Hardware stack levels required when called:    5
 18622 ;; This function calls:
 18623 ;;		_INTERRUPT_Initialize
 18624 ;;		_OSCILLATOR_Initialize
 18625 ;;		_PIN_MANAGER_Initialize
 18626 ;; This function is called by:
 18627 ;;		_main
 18628 ;; This function uses a non-reentrant model
 18629 ;;
 18630                           
 18631                           	psect	text52
 18632  005918                     __ptext52:
 18633                           	opt stack 0
 18634  005918                     _SYSTEM_Initialize:
 18635                           	opt stack 25
 18636                           
 18637                           ;mcc.c: 113: OSCILLATOR_Initialize();
 18638                           
 18639                           ;incstack = 0
 18640  005918  EC93  F02C         	call	_OSCILLATOR_Initialize	;wreg free
 18641                           
 18642                           ;mcc.c: 114: PIN_MANAGER_Initialize();
 18643  00591C  ECAC  F02A         	call	_PIN_MANAGER_Initialize	;wreg free
 18644                           
 18645                           ;mcc.c: 115: INTERRUPT_Initialize();
 18646  005920  EC7B  F02C         	call	_INTERRUPT_Initialize	;wreg free
 18647  005924  0012               	return		;funcret
 18648  005926                     __end_of_SYSTEM_Initialize:
 18649                           	opt stack 0
 18650                           tblptru	equ	0xFF8
 18651                           tblptrh	equ	0xFF7
 18652                           tblptrl	equ	0xFF6
 18653                           tablat	equ	0xFF5
 18654                           prodh	equ	0xFF4
 18655                           prodl	equ	0xFF3
 18656                           intcon	equ	0xFF2
 18657                           indf0	equ	0xFEF
 18658                           postinc0	equ	0xFEE
 18659                           fsr0h	equ	0xFEA
 18660                           fsr0l	equ	0xFE9
 18661                           wreg	equ	0xFE8
 18662                           postinc1	equ	0xFE6
 18663                           postdec1	equ	0xFE5
 18664                           plusw1	equ	0xFE3
 18665                           fsr1h	equ	0xFE2
 18666                           fsr1l	equ	0xFE1
 18667                           indf2	equ	0xFDF
 18668                           postinc2	equ	0xFDE
 18669                           postdec2	equ	0xFDD
 18670                           plusw2	equ	0xFDB
 18671                           fsr2h	equ	0xFDA
 18672                           fsr2l	equ	0xFD9
 18673                           status	equ	0xFD8
 18674                           
 18675 ;; *************** function _PIN_MANAGER_Initialize *****************
 18676 ;; Defined at:
 18677 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
 18678 ;; Parameters:    Size  Location     Type
 18679 ;;		None
 18680 ;; Auto vars:     Size  Location     Type
 18681 ;;		None
 18682 ;; Return value:  Size  Location     Type
 18683 ;;                  1    wreg      void 
 18684 ;; Registers used:
 18685 ;;		wreg, status,2
 18686 ;; Tracked objects:
 18687 ;;		On entry : 0/0
 18688 ;;		On exit  : 0/0
 18689 ;;		Unchanged: 0/0
 18690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18691 ;;      Params:         0       0       0       0       0       0       0
 18692 ;;      Locals:         0       0       0       0       0       0       0
 18693 ;;      Temps:          0       0       0       0       0       0       0
 18694 ;;      Totals:         0       0       0       0       0       0       0
 18695 ;;Total ram usage:        0 bytes
 18696 ;; Hardware stack levels used:    1
 18697 ;; Hardware stack levels required when called:    4
 18698 ;; This function calls:
 18699 ;;		Nothing
 18700 ;; This function is called by:
 18701 ;;		_SYSTEM_Initialize
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           	psect	text53
 18706  005558                     __ptext53:
 18707                           	opt stack 0
 18708  005558                     _PIN_MANAGER_Initialize:
 18709                           	opt stack 25
 18710                           
 18711                           ;pin_manager.c: 51: LATA = 0x00;
 18712                           
 18713                           ;incstack = 0
 18714  005558  0E00               	movlw	0
 18715  00555A  6E89               	movwf	3977,c	;volatile
 18716                           
 18717                           ;pin_manager.c: 52: TRISA = 0xFF;
 18718  00555C  6892               	setf	3986,c	;volatile
 18719                           
 18720                           ;pin_manager.c: 53: ANSELA = 0x2F;
 18721  00555E  0E2F               	movlw	47
 18722  005560  010F               	movlb	15	; () banked
 18723  005562  6F38               	movwf	56,b	;volatile
 18724                           
 18725                           ;pin_manager.c: 55: LATB = 0x00;
 18726  005564  0E00               	movlw	0
 18727  005566  6E8A               	movwf	3978,c	;volatile
 18728                           
 18729                           ; BSR set to: 15
 18730                           ;pin_manager.c: 56: TRISB = 0xFF;
 18731  005568  6893               	setf	3987,c	;volatile
 18732                           
 18733                           ;pin_manager.c: 57: ANSELB = 0x3F;
 18734  00556A  0E3F               	movlw	63
 18735  00556C  010F               	movlb	15	; () banked
 18736  00556E  6F39               	movwf	57,b	;volatile
 18737                           
 18738                           ;pin_manager.c: 58: WPUB = 0x00;
 18739  005570  0E00               	movlw	0
 18740  005572  6E61               	movwf	3937,c	;volatile
 18741                           
 18742                           ;pin_manager.c: 60: LATC = 0x18;
 18743  005574  0E18               	movlw	24
 18744  005576  6E8B               	movwf	3979,c	;volatile
 18745                           
 18746                           ; BSR set to: 15
 18747                           ;pin_manager.c: 61: TRISC = 0xFF;
 18748  005578  6894               	setf	3988,c	;volatile
 18749                           
 18750                           ;pin_manager.c: 62: ANSELC = 0x20;
 18751  00557A  0E20               	movlw	32
 18752  00557C  010F               	movlb	15	; () banked
 18753  00557E  6F3A               	movwf	58,b	;volatile
 18754                           
 18755                           ;pin_manager.c: 64: LATD = 0x00;
 18756  005580  0E00               	movlw	0
 18757  005582  6E8C               	movwf	3980,c	;volatile
 18758                           
 18759                           ; BSR set to: 15
 18760                           ;pin_manager.c: 65: TRISD = 0xFF;
 18761  005584  6895               	setf	3989,c	;volatile
 18762                           
 18763                           ; BSR set to: 15
 18764                           ;pin_manager.c: 66: ANSELD = 0xFF;
 18765  005586  010F               	movlb	15	; () banked
 18766  005588  693B               	setf	59,b	;volatile
 18767                           
 18768                           ;pin_manager.c: 68: LATE = 0x00;
 18769  00558A  0E00               	movlw	0
 18770  00558C  6E8D               	movwf	3981,c	;volatile
 18771                           
 18772                           ;pin_manager.c: 69: TRISE = 0x07;
 18773  00558E  0E07               	movlw	7
 18774  005590  6E96               	movwf	3990,c	;volatile
 18775                           
 18776                           ;pin_manager.c: 70: ANSELE = 0x07;
 18777  005592  0E07               	movlw	7
 18778  005594  010F               	movlb	15	; () banked
 18779  005596  6F3C               	movwf	60,b	;volatile
 18780                           
 18781                           ; BSR set to: 15
 18782                           ;pin_manager.c: 72: INTCON2bits.nRBPU = 0x01;
 18783  005598  8EF1               	bsf	intcon2,7,c	;volatile
 18784                           
 18785                           ; BSR set to: 15
 18786  00559A  0012               	return		;funcret
 18787  00559C                     __end_of_PIN_MANAGER_Initialize:
 18788                           	opt stack 0
 18789                           tblptru	equ	0xFF8
 18790                           tblptrh	equ	0xFF7
 18791                           tblptrl	equ	0xFF6
 18792                           tablat	equ	0xFF5
 18793                           prodh	equ	0xFF4
 18794                           prodl	equ	0xFF3
 18795                           intcon	equ	0xFF2
 18796                           intcon2	equ	0xFF1
 18797                           indf0	equ	0xFEF
 18798                           postinc0	equ	0xFEE
 18799                           fsr0h	equ	0xFEA
 18800                           fsr0l	equ	0xFE9
 18801                           wreg	equ	0xFE8
 18802                           postinc1	equ	0xFE6
 18803                           postdec1	equ	0xFE5
 18804                           plusw1	equ	0xFE3
 18805                           fsr1h	equ	0xFE2
 18806                           fsr1l	equ	0xFE1
 18807                           indf2	equ	0xFDF
 18808                           postinc2	equ	0xFDE
 18809                           postdec2	equ	0xFDD
 18810                           plusw2	equ	0xFDB
 18811                           fsr2h	equ	0xFDA
 18812                           fsr2l	equ	0xFD9
 18813                           status	equ	0xFD8
 18814                           
 18815 ;; *************** function _OSCILLATOR_Initialize *****************
 18816 ;; Defined at:
 18817 ;;		line 124 in file "mcc_generated_files/mcc.c"
 18818 ;; Parameters:    Size  Location     Type
 18819 ;;		None
 18820 ;; Auto vars:     Size  Location     Type
 18821 ;;		None
 18822 ;; Return value:  Size  Location     Type
 18823 ;;                  1    wreg      void 
 18824 ;; Registers used:
 18825 ;;		wreg, status,2
 18826 ;; Tracked objects:
 18827 ;;		On entry : 0/0
 18828 ;;		On exit  : 0/0
 18829 ;;		Unchanged: 0/0
 18830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18831 ;;      Params:         0       0       0       0       0       0       0
 18832 ;;      Locals:         0       0       0       0       0       0       0
 18833 ;;      Temps:          0       0       0       0       0       0       0
 18834 ;;      Totals:         0       0       0       0       0       0       0
 18835 ;;Total ram usage:        0 bytes
 18836 ;; Hardware stack levels used:    1
 18837 ;; Hardware stack levels required when called:    4
 18838 ;; This function calls:
 18839 ;;		Nothing
 18840 ;; This function is called by:
 18841 ;;		_SYSTEM_Initialize
 18842 ;; This function uses a non-reentrant model
 18843 ;;
 18844                           
 18845                           	psect	text54
 18846  005926                     __ptext54:
 18847                           	opt stack 0
 18848  005926                     _OSCILLATOR_Initialize:
 18849                           	opt stack 25
 18850                           
 18851                           ;mcc.c: 126: OSCCON = 0x70;
 18852                           
 18853                           ; BSR set to: 15
 18854                           ;incstack = 0
 18855  005926  0E70               	movlw	112
 18856  005928  6ED3               	movwf	4051,c	;volatile
 18857                           
 18858                           ;mcc.c: 128: OSCCON2 = 0x04;
 18859  00592A  0E04               	movlw	4
 18860  00592C  6ED2               	movwf	4050,c	;volatile
 18861                           
 18862                           ;mcc.c: 130: OSCTUNE = 0x00;
 18863  00592E  0E00               	movlw	0
 18864  005930  6E9B               	movwf	3995,c	;volatile
 18865  005932  0012               	return		;funcret
 18866  005934                     __end_of_OSCILLATOR_Initialize:
 18867                           	opt stack 0
 18868                           tblptru	equ	0xFF8
 18869                           tblptrh	equ	0xFF7
 18870                           tblptrl	equ	0xFF6
 18871                           tablat	equ	0xFF5
 18872                           prodh	equ	0xFF4
 18873                           prodl	equ	0xFF3
 18874                           intcon	equ	0xFF2
 18875                           intcon2	equ	0xFF1
 18876                           indf0	equ	0xFEF
 18877                           postinc0	equ	0xFEE
 18878                           fsr0h	equ	0xFEA
 18879                           fsr0l	equ	0xFE9
 18880                           wreg	equ	0xFE8
 18881                           postinc1	equ	0xFE6
 18882                           postdec1	equ	0xFE5
 18883                           plusw1	equ	0xFE3
 18884                           fsr1h	equ	0xFE2
 18885                           fsr1l	equ	0xFE1
 18886                           indf2	equ	0xFDF
 18887                           postinc2	equ	0xFDE
 18888                           postdec2	equ	0xFDD
 18889                           plusw2	equ	0xFDB
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function _INTERRUPT_Initialize *****************
 18895 ;; Defined at:
 18896 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;		None
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;		None
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      void 
 18903 ;; Registers used:
 18904 ;;		None
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18910 ;;      Params:         0       0       0       0       0       0       0
 18911 ;;      Locals:         0       0       0       0       0       0       0
 18912 ;;      Temps:          0       0       0       0       0       0       0
 18913 ;;      Totals:         0       0       0       0       0       0       0
 18914 ;;Total ram usage:        0 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    4
 18917 ;; This function calls:
 18918 ;;		Nothing
 18919 ;; This function is called by:
 18920 ;;		_SYSTEM_Initialize
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           	psect	text55
 18925  0058F6                     __ptext55:
 18926                           	opt stack 0
 18927  0058F6                     _INTERRUPT_Initialize:
 18928                           	opt stack 25
 18929                           
 18930                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
 18931                           
 18932                           ;incstack = 0
 18933  0058F6  9ED0               	bcf	4048,7,c	;volatile
 18934                           
 18935                           ;interrupt_manager.c: 59: IPR1bits.SSP1IP = 0;
 18936  0058F8  969F               	bcf	3999,3,c	;volatile
 18937                           
 18938                           ;interrupt_manager.c: 61: IPR2bits.BCL1IP = 0;
 18939  0058FA  96A2               	bcf	4002,3,c	;volatile
 18940                           
 18941                           ;interrupt_manager.c: 63: IPR1bits.RC1IP = 0;
 18942  0058FC  9A9F               	bcf	3999,5,c	;volatile
 18943                           
 18944                           ;interrupt_manager.c: 65: IPR1bits.TX1IP = 0;
 18945  0058FE  989F               	bcf	3999,4,c	;volatile
 18946                           
 18947                           ;interrupt_manager.c: 67: IPR1bits.CCP1IP = 0;
 18948  005900  949F               	bcf	3999,2,c	;volatile
 18949                           
 18950                           ;interrupt_manager.c: 69: IPR2bits.CCP2IP = 0;
 18951  005902  90A2               	bcf	4002,0,c	;volatile
 18952                           
 18953                           ;interrupt_manager.c: 71: IPR1bits.TMR2IP = 0;
 18954  005904  929F               	bcf	3999,1,c	;volatile
 18955                           
 18956                           ;interrupt_manager.c: 73: IPR1bits.ADIP = 0;
 18957  005906  9C9F               	bcf	3999,6,c	;volatile
 18958  005908  0012               	return		;funcret
 18959  00590A                     __end_of_INTERRUPT_Initialize:
 18960                           	opt stack 0
 18961                           tblptru	equ	0xFF8
 18962                           tblptrh	equ	0xFF7
 18963                           tblptrl	equ	0xFF6
 18964                           tablat	equ	0xFF5
 18965                           prodh	equ	0xFF4
 18966                           prodl	equ	0xFF3
 18967                           intcon	equ	0xFF2
 18968                           intcon2	equ	0xFF1
 18969                           indf0	equ	0xFEF
 18970                           postinc0	equ	0xFEE
 18971                           fsr0h	equ	0xFEA
 18972                           fsr0l	equ	0xFE9
 18973                           wreg	equ	0xFE8
 18974                           postinc1	equ	0xFE6
 18975                           postdec1	equ	0xFE5
 18976                           plusw1	equ	0xFE3
 18977                           fsr1h	equ	0xFE2
 18978                           fsr1l	equ	0xFE1
 18979                           indf2	equ	0xFDF
 18980                           postinc2	equ	0xFDE
 18981                           postdec2	equ	0xFDD
 18982                           plusw2	equ	0xFDB
 18983                           fsr2h	equ	0xFDA
 18984                           fsr2l	equ	0xFD9
 18985                           status	equ	0xFD8
 18986                           
 18987 ;; *************** function _I2C1_Initialize *****************
 18988 ;; Defined at:
 18989 ;;		line 194 in file "mcc_generated_files/i2c1.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;		None
 18992 ;; Auto vars:     Size  Location     Type
 18993 ;;		None
 18994 ;; Return value:  Size  Location     Type
 18995 ;;                  1    wreg      void 
 18996 ;; Registers used:
 18997 ;;		wreg, status,2, status,0
 18998 ;; Tracked objects:
 18999 ;;		On entry : 0/0
 19000 ;;		On exit  : 0/0
 19001 ;;		Unchanged: 0/0
 19002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19003 ;;      Params:         0       0       0       0       0       0       0
 19004 ;;      Locals:         0       0       0       0       0       0       0
 19005 ;;      Temps:          0       0       0       0       0       0       0
 19006 ;;      Totals:         0       0       0       0       0       0       0
 19007 ;;Total ram usage:        0 bytes
 19008 ;; Hardware stack levels used:    1
 19009 ;; Hardware stack levels required when called:    4
 19010 ;; This function calls:
 19011 ;;		Nothing
 19012 ;; This function is called by:
 19013 ;;		_main
 19014 ;; This function uses a non-reentrant model
 19015 ;;
 19016                           
 19017                           	psect	text56
 19018  0055DE                     __ptext56:
 19019                           	opt stack 0
 19020  0055DE                     _I2C1_Initialize:
 19021                           	opt stack 26
 19022                           
 19023                           ;i2c1.c: 195: i2c1_object.pTrHead = i2c1_tr_queue;
 19024                           
 19025                           ;incstack = 0
 19026  0055DE  0EF4               	movlw	low _i2c1_tr_queue
 19027  0055E0  0101               	movlb	1	; () banked
 19028  0055E2  6F02               	movwf	(_i2c1_object+2)& (0+255),b
 19029  0055E4  0E01               	movlw	high _i2c1_tr_queue
 19030  0055E6  0101               	movlb	1	; () banked
 19031  0055E8  6F03               	movwf	(_i2c1_object+3)& (0+255),b
 19032                           
 19033                           ;i2c1.c: 196: i2c1_object.pTrTail = i2c1_tr_queue;
 19034  0055EA  0EF4               	movlw	low _i2c1_tr_queue
 19035  0055EC  0101               	movlb	1	; () banked
 19036  0055EE  6F00               	movwf	_i2c1_object& (0+255),b
 19037  0055F0  0E01               	movlw	high _i2c1_tr_queue
 19038  0055F2  0101               	movlb	1	; () banked
 19039  0055F4  6F01               	movwf	(_i2c1_object+1)& (0+255),b
 19040                           
 19041                           ; BSR set to: 1
 19042                           ;i2c1.c: 197: i2c1_object.trStatus.s.empty = 1;
 19043  0055F6  0101               	movlb	1	; () banked
 19044  0055F8  8304               	bsf	(_i2c1_object+4)& (0+255),1,b
 19045                           
 19046                           ; BSR set to: 1
 19047                           ;i2c1.c: 198: i2c1_object.trStatus.s.full = 0;
 19048  0055FA  0101               	movlb	1	; () banked
 19049  0055FC  9104               	bcf	(_i2c1_object+4)& (0+255),0,b
 19050                           
 19051                           ; BSR set to: 1
 19052                           ;i2c1.c: 200: i2c1_object.i2cErrors = 0;
 19053  0055FE  0E00               	movlw	0
 19054  005600  0101               	movlb	1	; () banked
 19055  005602  6F06               	movwf	(_i2c1_object+6)& (0+255),b
 19056                           
 19057                           ; BSR set to: 1
 19058                           ;i2c1.c: 203: SSP1STAT = 0x80;
 19059  005604  0E80               	movlw	128
 19060  005606  6EC7               	movwf	4039,c	;volatile
 19061                           
 19062                           ; BSR set to: 1
 19063                           ;i2c1.c: 205: SSP1CON1 = 0x28;
 19064  005608  0E28               	movlw	40
 19065  00560A  6EC6               	movwf	4038,c	;volatile
 19066                           
 19067                           ; BSR set to: 1
 19068                           ;i2c1.c: 207: SSP1CON3 = 0x00;
 19069  00560C  0E00               	movlw	0
 19070  00560E  6ECB               	movwf	4043,c	;volatile
 19071                           
 19072                           ; BSR set to: 1
 19073                           ;i2c1.c: 209: SSP1ADD = 0x3F;
 19074  005610  0E3F               	movlw	63
 19075  005612  6EC8               	movwf	4040,c	;volatile
 19076                           
 19077                           ; BSR set to: 1
 19078                           ;i2c1.c: 213: PIR1bits.SSP1IF = 0;
 19079  005614  969E               	bcf	3998,3,c	;volatile
 19080                           
 19081                           ; BSR set to: 1
 19082                           ;i2c1.c: 215: PIE1bits.SSP1IE = 1;
 19083  005616  869D               	bsf	3997,3,c	;volatile
 19084                           
 19085                           ; BSR set to: 1
 19086  005618  0012               	return		;funcret
 19087  00561A                     __end_of_I2C1_Initialize:
 19088                           	opt stack 0
 19089                           tblptru	equ	0xFF8
 19090                           tblptrh	equ	0xFF7
 19091                           tblptrl	equ	0xFF6
 19092                           tablat	equ	0xFF5
 19093                           prodh	equ	0xFF4
 19094                           prodl	equ	0xFF3
 19095                           intcon	equ	0xFF2
 19096                           intcon2	equ	0xFF1
 19097                           indf0	equ	0xFEF
 19098                           postinc0	equ	0xFEE
 19099                           fsr0h	equ	0xFEA
 19100                           fsr0l	equ	0xFE9
 19101                           wreg	equ	0xFE8
 19102                           postinc1	equ	0xFE6
 19103                           postdec1	equ	0xFE5
 19104                           plusw1	equ	0xFE3
 19105                           fsr1h	equ	0xFE2
 19106                           fsr1l	equ	0xFE1
 19107                           indf2	equ	0xFDF
 19108                           postinc2	equ	0xFDE
 19109                           postdec2	equ	0xFDD
 19110                           plusw2	equ	0xFDB
 19111                           fsr2h	equ	0xFDA
 19112                           fsr2l	equ	0xFD9
 19113                           status	equ	0xFD8
 19114                           
 19115 ;; *************** function _EUSART1_Initialize *****************
 19116 ;; Defined at:
 19117 ;;		line 76 in file "mcc_generated_files/eusart1.c"
 19118 ;; Parameters:    Size  Location     Type
 19119 ;;		None
 19120 ;; Auto vars:     Size  Location     Type
 19121 ;;		None
 19122 ;; Return value:  Size  Location     Type
 19123 ;;                  1    wreg      void 
 19124 ;; Registers used:
 19125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19126 ;; Tracked objects:
 19127 ;;		On entry : 0/0
 19128 ;;		On exit  : 0/0
 19129 ;;		Unchanged: 0/0
 19130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19131 ;;      Params:         0       0       0       0       0       0       0
 19132 ;;      Locals:         0       0       0       0       0       0       0
 19133 ;;      Temps:          0       0       0       0       0       0       0
 19134 ;;      Totals:         0       0       0       0       0       0       0
 19135 ;;Total ram usage:        0 bytes
 19136 ;; Hardware stack levels used:    1
 19137 ;; Hardware stack levels required when called:    6
 19138 ;; This function calls:
 19139 ;;		_UART_buff_init
 19140 ;; This function is called by:
 19141 ;;		_main
 19142 ;;		_CommsStart
 19143 ;; This function uses a non-reentrant model
 19144 ;;
 19145                           
 19146                           	psect	text57
 19147  00561A                     __ptext57:
 19148                           	opt stack 0
 19149  00561A                     _EUSART1_Initialize:
 19150                           	opt stack 24
 19151                           
 19152                           ;eusart1.c: 78: PIE1bits.RC1IE = 0;
 19153                           
 19154                           ; BSR set to: 1
 19155                           ;incstack = 0
 19156  00561A  9A9D               	bcf	3997,5,c	;volatile
 19157                           
 19158                           ;eusart1.c: 79: PIE1bits.TX1IE = 0;
 19159  00561C  989D               	bcf	3997,4,c	;volatile
 19160                           
 19161                           ;eusart1.c: 84: BAUD1CON = 0x48;
 19162  00561E  0E48               	movlw	72
 19163  005620  6EB8               	movwf	4024,c	;volatile
 19164                           
 19165                           ;eusart1.c: 87: RC1STA = 0x98;
 19166  005622  0E98               	movlw	152
 19167  005624  6EAB               	movwf	4011,c	;volatile
 19168                           
 19169                           ;eusart1.c: 90: TX1STA = 0x26;
 19170  005626  0E26               	movlw	38
 19171  005628  6EAC               	movwf	4012,c	;volatile
 19172                           
 19173                           ;eusart1.c: 93: SPBRG1 = (((16000000/38400)/4)-1);
 19174  00562A  0E67               	movlw	103
 19175  00562C  6EAF               	movwf	4015,c	;volatile
 19176                           
 19177                           ;eusart1.c: 96: SPBRGH1 = 0x00;
 19178  00562E  0E00               	movlw	0
 19179  005630  6EB0               	movwf	4016,c	;volatile
 19180                           
 19181                           ;eusart1.c: 99: TXREG1 = 0x00;
 19182  005632  0E00               	movlw	0
 19183  005634  6EAD               	movwf	4013,c	;volatile
 19184                           
 19185                           ;eusart1.c: 102: RCREG1 = 0x00;
 19186  005636  0E00               	movlw	0
 19187  005638  6EAE               	movwf	4014,c	;volatile
 19188                           
 19189                           ;eusart1.c: 104: UART_buff_init(&input_buffer);
 19190  00563A  0E5F               	movlw	low _input_buffer
 19191  00563C  6E23               	movwf	UART_buff_init@_this,c
 19192  00563E  0E02               	movlw	high _input_buffer
 19193  005640  6E24               	movwf	UART_buff_init@_this+1,c
 19194  005642  EC21  F02C         	call	_UART_buff_init	;wreg free
 19195                           
 19196                           ;eusart1.c: 105: UART_buff_init(&output_buffer);
 19197  005646  0E00               	movlw	low _output_buffer
 19198  005648  6E23               	movwf	UART_buff_init@_this,c
 19199  00564A  0E03               	movlw	high _output_buffer
 19200  00564C  6E24               	movwf	UART_buff_init@_this+1,c
 19201  00564E  EC21  F02C         	call	_UART_buff_init	;wreg free
 19202                           
 19203                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
 19204  005652  8A9D               	bsf	3997,5,c	;volatile
 19205  005654  0012               	return		;funcret
 19206  005656                     __end_of_EUSART1_Initialize:
 19207                           	opt stack 0
 19208                           tblptru	equ	0xFF8
 19209                           tblptrh	equ	0xFF7
 19210                           tblptrl	equ	0xFF6
 19211                           tablat	equ	0xFF5
 19212                           prodh	equ	0xFF4
 19213                           prodl	equ	0xFF3
 19214                           intcon	equ	0xFF2
 19215                           intcon2	equ	0xFF1
 19216                           indf0	equ	0xFEF
 19217                           postinc0	equ	0xFEE
 19218                           fsr0h	equ	0xFEA
 19219                           fsr0l	equ	0xFE9
 19220                           wreg	equ	0xFE8
 19221                           postinc1	equ	0xFE6
 19222                           postdec1	equ	0xFE5
 19223                           plusw1	equ	0xFE3
 19224                           fsr1h	equ	0xFE2
 19225                           fsr1l	equ	0xFE1
 19226                           indf2	equ	0xFDF
 19227                           postinc2	equ	0xFDE
 19228                           postdec2	equ	0xFDD
 19229                           plusw2	equ	0xFDB
 19230                           fsr2h	equ	0xFDA
 19231                           fsr2l	equ	0xFD9
 19232                           status	equ	0xFD8
 19233                           
 19234 ;; *************** function _UART_buff_init *****************
 19235 ;; Defined at:
 19236 ;;		line 111 in file "mcc_generated_files/eusart1.c"
 19237 ;; Parameters:    Size  Location     Type
 19238 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
 19239 ;;		 -> output_buffer(86), input_buffer(86), 
 19240 ;; Auto vars:     Size  Location     Type
 19241 ;;		None
 19242 ;; Return value:  Size  Location     Type
 19243 ;;                  1    wreg      void 
 19244 ;; Registers used:
 19245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19246 ;; Tracked objects:
 19247 ;;		On entry : 0/0
 19248 ;;		On exit  : 0/0
 19249 ;;		Unchanged: 0/0
 19250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19251 ;;      Params:         2       0       0       0       0       0       0
 19252 ;;      Locals:         0       0       0       0       0       0       0
 19253 ;;      Temps:          0       0       0       0       0       0       0
 19254 ;;      Totals:         2       0       0       0       0       0       0
 19255 ;;Total ram usage:        2 bytes
 19256 ;; Hardware stack levels used:    1
 19257 ;; Hardware stack levels required when called:    5
 19258 ;; This function calls:
 19259 ;;		_memset
 19260 ;; This function is called by:
 19261 ;;		_EUSART1_Initialize
 19262 ;; This function uses a non-reentrant model
 19263 ;;
 19264                           
 19265                           	psect	text58
 19266  005842                     __ptext58:
 19267                           	opt stack 0
 19268  005842                     _UART_buff_init:
 19269                           	opt stack 24
 19270                           
 19271                           ;eusart1.c: 120: memset(_this, 0, sizeof (*_this));
 19272                           
 19273                           ;incstack = 0
 19274  005842  C023  F01B         	movff	UART_buff_init@_this,memset@p1
 19275  005846  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
 19276  00584A  0E00               	movlw	0
 19277  00584C  6E1E               	movwf	memset@c+1,c
 19278  00584E  0E00               	movlw	0
 19279  005850  6E1D               	movwf	memset@c,c
 19280  005852  0E00               	movlw	0
 19281  005854  6E20               	movwf	memset@n+1,c
 19282  005856  0E56               	movlw	86
 19283  005858  6E1F               	movwf	memset@n,c
 19284  00585A  ECC0  F02B         	call	_memset	;wreg free
 19285  00585E  0012               	return		;funcret
 19286  005860                     __end_of_UART_buff_init:
 19287                           	opt stack 0
 19288                           tblptru	equ	0xFF8
 19289                           tblptrh	equ	0xFF7
 19290                           tblptrl	equ	0xFF6
 19291                           tablat	equ	0xFF5
 19292                           prodh	equ	0xFF4
 19293                           prodl	equ	0xFF3
 19294                           intcon	equ	0xFF2
 19295                           intcon2	equ	0xFF1
 19296                           indf0	equ	0xFEF
 19297                           postinc0	equ	0xFEE
 19298                           fsr0h	equ	0xFEA
 19299                           fsr0l	equ	0xFE9
 19300                           wreg	equ	0xFE8
 19301                           postinc1	equ	0xFE6
 19302                           postdec1	equ	0xFE5
 19303                           plusw1	equ	0xFE3
 19304                           fsr1h	equ	0xFE2
 19305                           fsr1l	equ	0xFE1
 19306                           indf2	equ	0xFDF
 19307                           postinc2	equ	0xFDE
 19308                           postdec2	equ	0xFDD
 19309                           plusw2	equ	0xFDB
 19310                           fsr2h	equ	0xFDA
 19311                           fsr2l	equ	0xFD9
 19312                           status	equ	0xFD8
 19313                           
 19314 ;; *************** function _memset *****************
 19315 ;; Defined at:
 19316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\memset.c"
 19317 ;; Parameters:    Size  Location     Type
 19318 ;;  p1              2   26[COMRAM] PTR void 
 19319 ;;		 -> ring_buffer(206), output_buffer(86), input_buffer(86), 
 19320 ;;  c               2   28[COMRAM] int 
 19321 ;;  n               2   30[COMRAM] unsigned int 
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;  p               2   32[COMRAM] PTR unsigned char 
 19324 ;;		 -> ring_buffer(206), output_buffer(86), input_buffer(86), 
 19325 ;; Return value:  Size  Location     Type
 19326 ;;                  2   26[COMRAM] PTR void 
 19327 ;; Registers used:
 19328 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19329 ;; Tracked objects:
 19330 ;;		On entry : 0/0
 19331 ;;		On exit  : 0/0
 19332 ;;		Unchanged: 0/0
 19333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19334 ;;      Params:         6       0       0       0       0       0       0
 19335 ;;      Locals:         2       0       0       0       0       0       0
 19336 ;;      Temps:          0       0       0       0       0       0       0
 19337 ;;      Totals:         8       0       0       0       0       0       0
 19338 ;;Total ram usage:        8 bytes
 19339 ;; Hardware stack levels used:    1
 19340 ;; Hardware stack levels required when called:    4
 19341 ;; This function calls:
 19342 ;;		Nothing
 19343 ;; This function is called by:
 19344 ;;		_UART_buff_init
 19345 ;;		_UART_buff_flush
 19346 ;;		_FastTransfer_buffer_flush
 19347 ;; This function uses a non-reentrant model
 19348 ;;
 19349                           
 19350                           	psect	text59
 19351  005780                     __ptext59:
 19352                           	opt stack 0
 19353  005780                     _memset:
 19354                           	opt stack 24
 19355                           
 19356                           ;incstack = 0
 19357  005780  C01B  F021         	movff	memset@p1,memset@p
 19358  005784  C01C  F022         	movff	memset@p1+1,memset@p+1
 19359  005788  D008               	goto	l5789
 19360  00578A                     l5785:
 19361  00578A  C021  FFD9         	movff	memset@p,fsr2l
 19362  00578E  C022  FFDA         	movff	memset@p+1,fsr2h
 19363  005792  C01D  FFDF         	movff	memset@c,indf2
 19364  005796  4A21               	infsnz	memset@p,f,c
 19365  005798  2A22               	incf	memset@p+1,f,c
 19366  00579A                     l5789:
 19367  00579A  061F               	decf	memset@n,f,c
 19368  00579C  A0D8               	btfss	status,0,c
 19369  00579E  0620               	decf	memset@n+1,f,c
 19370  0057A0  281F               	incf	memset@n,w,c
 19371  0057A2  E1F3               	bnz	l5785
 19372  0057A4  2820               	incf	memset@n+1,w,c
 19373  0057A6  B4D8               	btfsc	status,2,c
 19374  0057A8  0012               	return	
 19375  0057AA  D7EF               	goto	l5785
 19376  0057AC                     __end_of_memset:
 19377                           	opt stack 0
 19378                           tblptru	equ	0xFF8
 19379                           tblptrh	equ	0xFF7
 19380                           tblptrl	equ	0xFF6
 19381                           tablat	equ	0xFF5
 19382                           prodh	equ	0xFF4
 19383                           prodl	equ	0xFF3
 19384                           intcon	equ	0xFF2
 19385                           intcon2	equ	0xFF1
 19386                           indf0	equ	0xFEF
 19387                           postinc0	equ	0xFEE
 19388                           fsr0h	equ	0xFEA
 19389                           fsr0l	equ	0xFE9
 19390                           wreg	equ	0xFE8
 19391                           postinc1	equ	0xFE6
 19392                           postdec1	equ	0xFE5
 19393                           plusw1	equ	0xFE3
 19394                           fsr1h	equ	0xFE2
 19395                           fsr1l	equ	0xFE1
 19396                           indf2	equ	0xFDF
 19397                           postinc2	equ	0xFDE
 19398                           postdec2	equ	0xFDD
 19399                           plusw2	equ	0xFDB
 19400                           fsr2h	equ	0xFDA
 19401                           fsr2l	equ	0xFD9
 19402                           status	equ	0xFD8
 19403                           
 19404 ;; *************** function _INTERRUPT_InterruptManager *****************
 19405 ;; Defined at:
 19406 ;;		line 76 in file "mcc_generated_files/interrupt_manager.c"
 19407 ;; Parameters:    Size  Location     Type
 19408 ;;		None
 19409 ;; Auto vars:     Size  Location     Type
 19410 ;;		None
 19411 ;; Return value:  Size  Location     Type
 19412 ;;                  1    wreg      void 
 19413 ;; Registers used:
 19414 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19415 ;; Tracked objects:
 19416 ;;		On entry : 0/0
 19417 ;;		On exit  : 0/0
 19418 ;;		Unchanged: 0/0
 19419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19420 ;;      Params:         0       0       0       0       0       0       0
 19421 ;;      Locals:         0       0       0       0       0       0       0
 19422 ;;      Temps:         14       0       0       0       0       0       0
 19423 ;;      Totals:        14       0       0       0       0       0       0
 19424 ;;Total ram usage:       14 bytes
 19425 ;; Hardware stack levels used:    1
 19426 ;; Hardware stack levels required when called:    3
 19427 ;; This function calls:
 19428 ;;		_ADC_ISR
 19429 ;;		_ECCP1_CaptureISR
 19430 ;;		_ECCP2_CaptureISR
 19431 ;;		_EUSART1_Receive_ISR
 19432 ;;		_EUSART1_Transmit_ISR
 19433 ;;		_I2C1_BusCollisionISR
 19434 ;;		_I2C1_ISR
 19435 ;;		_TMR2_ISR
 19436 ;; This function is called by:
 19437 ;;		Interrupt level 2
 19438 ;; This function uses a non-reentrant model
 19439 ;;
 19440                           
 19441                           	psect	intcode
 19442  000008                     __pintcode:
 19443                           	opt stack 0
 19444  000008                     _INTERRUPT_InterruptManager:
 19445                           	opt stack 20
 19446                           
 19447                           ;incstack = 0
 19448  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19449  00000A  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
 19450  00000E  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19451  000012  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19452  000016  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19453  00001A  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19454  00001E  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19455  000022  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19456  000026  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19457  00002A  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19458  00002E  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19459  000032  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19460  000036  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19461  00003A  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19462  00003E  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19463                           
 19464                           ;interrupt_manager.c: 78: if (PIE1bits.SSP1IE == 1 && PIR1bits.SSP1IF == 1) {
 19465  000042  B69D               	btfsc	3997,3,c	;volatile
 19466  000044  A69E               	btfss	3998,3,c	;volatile
 19467  000046  D003               	goto	i2l425
 19468                           
 19469                           ;interrupt_manager.c: 79: I2C1_ISR();
 19470  000048  EC7B  F01A         	call	_I2C1_ISR	;wreg free
 19471                           
 19472                           ;interrupt_manager.c: 80: } else if (PIE2bits.BCL1IE == 1 && PIR2bits.BCL1IF == 1) {
 19473  00004C  D029               	goto	i2l441
 19474  00004E                     i2l425:
 19475  00004E  B6A0               	btfsc	4000,3,c	;volatile
 19476  000050  A6A1               	btfss	4001,3,c	;volatile
 19477  000052  D003               	goto	i2l427
 19478                           
 19479                           ;interrupt_manager.c: 81: I2C1_BusCollisionISR();
 19480  000054  ECAC  F02C         	call	_I2C1_BusCollisionISR	;wreg free
 19481                           
 19482                           ;interrupt_manager.c: 82: } else if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 19483  000058  D023               	goto	i2l441
 19484  00005A                     i2l427:
 19485  00005A  BA9D               	btfsc	3997,5,c	;volatile
 19486  00005C  AA9E               	btfss	3998,5,c	;volatile
 19487  00005E  D003               	goto	i2l429
 19488                           
 19489                           ;interrupt_manager.c: 83: EUSART1_Receive_ISR();
 19490  000060  EC30  F02C         	call	_EUSART1_Receive_ISR	;wreg free
 19491                           
 19492                           ;interrupt_manager.c: 84: } else if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 19493  000064  D01D               	goto	i2l441
 19494  000066                     i2l429:
 19495  000066  B89D               	btfsc	3997,4,c	;volatile
 19496  000068  A89E               	btfss	3998,4,c	;volatile
 19497  00006A  D003               	goto	i2l431
 19498                           
 19499                           ;interrupt_manager.c: 85: EUSART1_Transmit_ISR();
 19500  00006C  EC7A  F02B         	call	_EUSART1_Transmit_ISR	;wreg free
 19501                           
 19502                           ;interrupt_manager.c: 86: } else if (PIE1bits.CCP1IE == 1 && PIR1bits.CCP1IF == 1) {
 19503  000070  D017               	goto	i2l441
 19504  000072                     i2l431:
 19505  000072  B49D               	btfsc	3997,2,c	;volatile
 19506  000074  A49E               	btfss	3998,2,c	;volatile
 19507  000076  D003               	goto	i2l433
 19508                           
 19509                           ;interrupt_manager.c: 87: ECCP1_CaptureISR();
 19510  000078  EC64  F02C         	call	_ECCP1_CaptureISR	;wreg free
 19511                           
 19512                           ;interrupt_manager.c: 88: } else if (PIE2bits.CCP2IE == 1 && PIR2bits.CCP2IF == 1) {
 19513  00007C  D011               	goto	i2l441
 19514  00007E                     i2l433:
 19515  00007E  B0A0               	btfsc	4000,0,c	;volatile
 19516  000080  A0A1               	btfss	4001,0,c	;volatile
 19517  000082  D003               	goto	i2l435
 19518                           
 19519                           ;interrupt_manager.c: 89: ECCP2_CaptureISR();
 19520  000084  EC58  F02C         	call	_ECCP2_CaptureISR	;wreg free
 19521                           
 19522                           ;interrupt_manager.c: 90: } else if (PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1) {
 19523  000088  D00B               	goto	i2l441
 19524  00008A                     i2l435:
 19525  00008A  B29D               	btfsc	3997,1,c	;volatile
 19526  00008C  A29E               	btfss	3998,1,c	;volatile
 19527  00008E  D003               	goto	i2l437
 19528                           
 19529                           ;interrupt_manager.c: 91: TMR2_ISR();
 19530  000090  EC9F  F02C         	call	_TMR2_ISR	;wreg free
 19531                           
 19532                           ;interrupt_manager.c: 92: } else if (PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1) {
 19533  000094  D005               	goto	i2l441
 19534  000096                     i2l437:
 19535  000096  BC9D               	btfsc	3997,6,c	;volatile
 19536  000098  AC9E               	btfss	3998,6,c	;volatile
 19537  00009A  D002               	goto	i2l441
 19538                           
 19539                           ;interrupt_manager.c: 93: ADC_ISR();
 19540  00009C  ECA8  F02C         	call	_ADC_ISR	;wreg free
 19541  0000A0                     i2l441:
 19542  0000A0  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19543  0000A4  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19544  0000A8  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19545  0000AC  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19546  0000B0  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19547  0000B4  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19548  0000B8  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19549  0000BC  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19550  0000C0  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19551  0000C4  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19552  0000C8  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19553  0000CC  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19554  0000D0  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19555  0000D4  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19556  0000D8  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19557  0000DA  0011               	retfie		f
 19558  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19559                           	opt stack 0
 19560                           pclatu	equ	0xFFB
 19561                           pclath	equ	0xFFA
 19562                           tblptru	equ	0xFF8
 19563                           tblptrh	equ	0xFF7
 19564                           tblptrl	equ	0xFF6
 19565                           tablat	equ	0xFF5
 19566                           prodh	equ	0xFF4
 19567                           prodl	equ	0xFF3
 19568                           intcon	equ	0xFF2
 19569                           intcon2	equ	0xFF1
 19570                           indf0	equ	0xFEF
 19571                           postinc0	equ	0xFEE
 19572                           fsr0h	equ	0xFEA
 19573                           fsr0l	equ	0xFE9
 19574                           wreg	equ	0xFE8
 19575                           postinc1	equ	0xFE6
 19576                           postdec1	equ	0xFE5
 19577                           plusw1	equ	0xFE3
 19578                           fsr1h	equ	0xFE2
 19579                           fsr1l	equ	0xFE1
 19580                           indf2	equ	0xFDF
 19581                           postinc2	equ	0xFDE
 19582                           postdec2	equ	0xFDD
 19583                           plusw2	equ	0xFDB
 19584                           fsr2h	equ	0xFDA
 19585                           fsr2l	equ	0xFD9
 19586                           status	equ	0xFD8
 19587                           
 19588 ;; *************** function _TMR2_ISR *****************
 19589 ;; Defined at:
 19590 ;;		line 107 in file "mcc_generated_files/tmr2.c"
 19591 ;; Parameters:    Size  Location     Type
 19592 ;;		None
 19593 ;; Auto vars:     Size  Location     Type
 19594 ;;		None
 19595 ;; Return value:  Size  Location     Type
 19596 ;;                  1    wreg      void 
 19597 ;; Registers used:
 19598 ;;		cstack
 19599 ;; Tracked objects:
 19600 ;;		On entry : 0/0
 19601 ;;		On exit  : 0/0
 19602 ;;		Unchanged: 0/0
 19603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19604 ;;      Params:         0       0       0       0       0       0       0
 19605 ;;      Locals:         0       0       0       0       0       0       0
 19606 ;;      Temps:          0       0       0       0       0       0       0
 19607 ;;      Totals:         0       0       0       0       0       0       0
 19608 ;;Total ram usage:        0 bytes
 19609 ;; Hardware stack levels used:    1
 19610 ;; Hardware stack levels required when called:    1
 19611 ;; This function calls:
 19612 ;;		_TMR2_CallBack
 19613 ;; This function is called by:
 19614 ;;		_INTERRUPT_InterruptManager
 19615 ;; This function uses a non-reentrant model
 19616 ;;
 19617                           
 19618                           	psect	text61
 19619  00593E                     __ptext61:
 19620                           	opt stack 0
 19621  00593E                     _TMR2_ISR:
 19622                           	opt stack 21
 19623                           
 19624                           ;tmr2.c: 110: PIR1bits.TMR2IF = 0;
 19625                           
 19626                           ;incstack = 0
 19627  00593E  929E               	bcf	3998,1,c	;volatile
 19628                           
 19629                           ;tmr2.c: 114: TMR2_CallBack();
 19630  005940  ECAB  F02C         	call	_TMR2_CallBack	;wreg free
 19631  005944  0012               	return		;funcret
 19632  005946                     __end_of_TMR2_ISR:
 19633                           	opt stack 0
 19634                           pclatu	equ	0xFFB
 19635                           pclath	equ	0xFFA
 19636                           tblptru	equ	0xFF8
 19637                           tblptrh	equ	0xFF7
 19638                           tblptrl	equ	0xFF6
 19639                           tablat	equ	0xFF5
 19640                           prodh	equ	0xFF4
 19641                           prodl	equ	0xFF3
 19642                           intcon	equ	0xFF2
 19643                           intcon2	equ	0xFF1
 19644                           indf0	equ	0xFEF
 19645                           postinc0	equ	0xFEE
 19646                           fsr0h	equ	0xFEA
 19647                           fsr0l	equ	0xFE9
 19648                           wreg	equ	0xFE8
 19649                           postinc1	equ	0xFE6
 19650                           postdec1	equ	0xFE5
 19651                           plusw1	equ	0xFE3
 19652                           fsr1h	equ	0xFE2
 19653                           fsr1l	equ	0xFE1
 19654                           indf2	equ	0xFDF
 19655                           postinc2	equ	0xFDE
 19656                           postdec2	equ	0xFDD
 19657                           plusw2	equ	0xFDB
 19658                           fsr2h	equ	0xFDA
 19659                           fsr2l	equ	0xFD9
 19660                           status	equ	0xFD8
 19661                           
 19662 ;; *************** function _TMR2_CallBack *****************
 19663 ;; Defined at:
 19664 ;;		line 119 in file "mcc_generated_files/tmr2.c"
 19665 ;; Parameters:    Size  Location     Type
 19666 ;;		None
 19667 ;; Auto vars:     Size  Location     Type
 19668 ;;		None
 19669 ;; Return value:  Size  Location     Type
 19670 ;;                  1    wreg      void 
 19671 ;; Registers used:
 19672 ;;		None
 19673 ;; Tracked objects:
 19674 ;;		On entry : 0/0
 19675 ;;		On exit  : 0/0
 19676 ;;		Unchanged: 0/0
 19677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19678 ;;      Params:         0       0       0       0       0       0       0
 19679 ;;      Locals:         0       0       0       0       0       0       0
 19680 ;;      Temps:          0       0       0       0       0       0       0
 19681 ;;      Totals:         0       0       0       0       0       0       0
 19682 ;;Total ram usage:        0 bytes
 19683 ;; Hardware stack levels used:    1
 19684 ;; This function calls:
 19685 ;;		Nothing
 19686 ;; This function is called by:
 19687 ;;		_TMR2_ISR
 19688 ;; This function uses a non-reentrant model
 19689 ;;
 19690                           
 19691                           	psect	text62
 19692  005956                     __ptext62:
 19693                           	opt stack 0
 19694  005956                     _TMR2_CallBack:
 19695                           	opt stack 21
 19696                           
 19697                           ;incstack = 0
 19698  005956  0012               	return		;funcret
 19699  005958                     __end_of_TMR2_CallBack:
 19700                           	opt stack 0
 19701                           pclatu	equ	0xFFB
 19702                           pclath	equ	0xFFA
 19703                           tblptru	equ	0xFF8
 19704                           tblptrh	equ	0xFF7
 19705                           tblptrl	equ	0xFF6
 19706                           tablat	equ	0xFF5
 19707                           prodh	equ	0xFF4
 19708                           prodl	equ	0xFF3
 19709                           intcon	equ	0xFF2
 19710                           intcon2	equ	0xFF1
 19711                           indf0	equ	0xFEF
 19712                           postinc0	equ	0xFEE
 19713                           fsr0h	equ	0xFEA
 19714                           fsr0l	equ	0xFE9
 19715                           wreg	equ	0xFE8
 19716                           postinc1	equ	0xFE6
 19717                           postdec1	equ	0xFE5
 19718                           plusw1	equ	0xFE3
 19719                           fsr1h	equ	0xFE2
 19720                           fsr1l	equ	0xFE1
 19721                           indf2	equ	0xFDF
 19722                           postinc2	equ	0xFDE
 19723                           postdec2	equ	0xFDD
 19724                           plusw2	equ	0xFDB
 19725                           fsr2h	equ	0xFDA
 19726                           fsr2l	equ	0xFD9
 19727                           status	equ	0xFD8
 19728                           
 19729 ;; *************** function _I2C1_ISR *****************
 19730 ;; Defined at:
 19731 ;;		line 226 in file "mcc_generated_files/i2c1.c"
 19732 ;; Parameters:    Size  Location     Type
 19733 ;;		None
 19734 ;; Auto vars:     Size  Location     Type
 19735 ;;		None
 19736 ;; Return value:  Size  Location     Type
 19737 ;;                  1    wreg      void 
 19738 ;; Registers used:
 19739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19740 ;; Tracked objects:
 19741 ;;		On entry : 0/0
 19742 ;;		On exit  : 0/0
 19743 ;;		Unchanged: 0/0
 19744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19745 ;;      Params:         0       0       0       0       0       0       0
 19746 ;;      Locals:         0       0       0       0       0       0       0
 19747 ;;      Temps:          2       0       0       0       0       0       0
 19748 ;;      Totals:         2       0       0       0       0       0       0
 19749 ;;Total ram usage:        2 bytes
 19750 ;; Hardware stack levels used:    1
 19751 ;; Hardware stack levels required when called:    1
 19752 ;; This function calls:
 19753 ;;		_I2C1_FunctionComplete
 19754 ;;		_I2C1_Stop
 19755 ;; This function is called by:
 19756 ;;		_INTERRUPT_InterruptManager
 19757 ;; This function uses a non-reentrant model
 19758 ;;
 19759                           
 19760                           	psect	text63
 19761  0034F6                     __ptext63:
 19762                           	opt stack 0
 19763  0034F6                     _I2C1_ISR:
 19764                           	opt stack 21
 19765                           
 19766                           ;i2c1.c: 228: static uint8_t *pi2c_buf_ptr;
 19767                           ;i2c1.c: 229: static uint16_t i2c_address = 0;
 19768                           ;i2c1.c: 230: static uint8_t i2c_bytes_left = 0;
 19769                           ;i2c1.c: 231: static uint8_t i2c_10bit_address_restart = 0;
 19770                           ;i2c1.c: 233: PIR1bits.SSP1IF = 0;
 19771                           
 19772                           ;incstack = 0
 19773  0034F6  969E               	bcf	3998,3,c	;volatile
 19774                           
 19775                           ;i2c1.c: 237: if (SSP1CON1bits.WCOL) {
 19776  0034F8  AEC6               	btfss	4038,7,c	;volatile
 19777  0034FA  D11B               	goto	i2l9863
 19778                           
 19779                           ;i2c1.c: 239: SSP1CON1bits.WCOL = 0;
 19780  0034FC  9EC6               	bcf	4038,7,c	;volatile
 19781                           
 19782                           ;i2c1.c: 240: i2c1_state = S_MASTER_IDLE;
 19783  0034FE  0E00               	movlw	0
 19784  003500  6E3B               	movwf	_i2c1_state,c
 19785                           
 19786                           ;i2c1.c: 241: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 19787  003502  0101               	movlb	1	; () banked
 19788  003504  EE20 F003          	lfsr	2,3
 19789  003508  5194               	movf	_p_i2c1_current& (0+255),w,b
 19790  00350A  26D9               	addwf	fsr2l,f,c
 19791  00350C  5195               	movf	(_p_i2c1_current+1)& (0+255),w,b
 19792  00350E  22DA               	addwfc	fsr2h,f,c
 19793  003510  CFDE F004          	movff	postinc2,??_I2C1_ISR
 19794  003514  CFDD F005          	movff	postdec2,??_I2C1_ISR+1
 19795  003518  C004  FFD9         	movff	??_I2C1_ISR,fsr2l
 19796  00351C  C005  FFDA         	movff	??_I2C1_ISR+1,fsr2h
 19797  003520  0E01               	movlw	1
 19798  003522  6EDF               	movwf	indf2,c
 19799                           
 19800                           ; BSR set to: 1
 19801                           ;i2c1.c: 244: p_i2c1_current = (0);
 19802  003524  0E00               	movlw	0
 19803  003526  0101               	movlb	1	; () banked
 19804  003528  6F94               	movwf	_p_i2c1_current& (0+255),b
 19805  00352A  0E00               	movlw	0
 19806  00352C  0101               	movlb	1	; () banked
 19807  00352E  6F95               	movwf	(_p_i2c1_current+1)& (0+255),b
 19808                           
 19809                           ; BSR set to: 1
 19810                           ;i2c1.c: 246: return;
 19811  003530  0012               	return	
 19812  003532                     i2l60:
 19813                           
 19814                           ;i2c1.c: 253: if (i2c1_object.trStatus.s.empty != 1) {
 19815  003532  0101               	movlb	1	; () banked
 19816  003534  B304               	btfsc	(_i2c1_object+4)& (0+255),1,b
 19817  003536  0012               	return	
 19818                           
 19819                           ; BSR set to: 1
 19820                           ;i2c1.c: 255: p_i2c1_current = i2c1_object.pTrHead;
 19821  003538  C102  F194         	movff	_i2c1_object+2,_p_i2c1_current
 19822  00353C  C103  F195         	movff	_i2c1_object+3,_p_i2c1_current+1
 19823                           
 19824                           ; BSR set to: 1
 19825                           ;i2c1.c: 256: i2c1_trb_count = i2c1_object.pTrHead->count;
 19826  003540  C102  FFD9         	movff	_i2c1_object+2,fsr2l
 19827  003544  C103  FFDA         	movff	_i2c1_object+3,fsr2h
 19828  003548  50DF               	movf	indf2,w,c
 19829  00354A  6E3C               	movwf	_i2c1_trb_count,c
 19830                           
 19831                           ; BSR set to: 1
 19832                           ;i2c1.c: 257: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 19833  00354C  0101               	movlb	1	; () banked
 19834  00354E  EE20 F001          	lfsr	2,1
 19835  003552  5102               	movf	(_i2c1_object+2)& (0+255),w,b
 19836  003554  26D9               	addwf	fsr2l,f,c
 19837  003556  5103               	movf	(_i2c1_object+3)& (0+255),w,b
 19838  003558  22DA               	addwfc	fsr2h,f,c
 19839  00355A  CFDE F196          	movff	postinc2,_p_i2c1_trb_current
 19840  00355E  CFDD F197          	movff	postdec2,_p_i2c1_trb_current+1
 19841                           
 19842                           ; BSR set to: 1
 19843                           ;i2c1.c: 259: i2c1_object.pTrHead++;
 19844  003562  0E05               	movlw	5
 19845  003564  0101               	movlb	1	; () banked
 19846  003566  2702               	addwf	(_i2c1_object+2)& (0+255),f,b
 19847  003568  0E00               	movlw	0
 19848  00356A  2303               	addwfc	(_i2c1_object+3)& (0+255),f,b
 19849                           
 19850                           ; BSR set to: 1
 19851                           ;i2c1.c: 262: if (i2c1_object.pTrHead == (i2c1_tr_queue + 1)) {
 19852  00356C  0EF9               	movlw	low (_i2c1_tr_queue+5)
 19853  00356E  0101               	movlb	1	; () banked
 19854  003570  1902               	xorwf	(_i2c1_object+2)& (0+255),w,b
 19855  003572  E10B               	bnz	i2l9755
 19856  003574  0E01               	movlw	high (_i2c1_tr_queue+5)
 19857  003576  0101               	movlb	1	; () banked
 19858  003578  1903               	xorwf	(_i2c1_object+3)& (0+255),w,b
 19859  00357A  A4D8               	btfss	status,2,c
 19860  00357C  D006               	goto	i2l9755
 19861                           
 19862                           ; BSR set to: 1
 19863                           ;i2c1.c: 264: i2c1_object.pTrHead = i2c1_tr_queue;
 19864  00357E  0EF4               	movlw	low _i2c1_tr_queue
 19865  003580  0101               	movlb	1	; () banked
 19866  003582  6F02               	movwf	(_i2c1_object+2)& (0+255),b
 19867  003584  0E01               	movlw	high _i2c1_tr_queue
 19868  003586  0101               	movlb	1	; () banked
 19869  003588  6F03               	movwf	(_i2c1_object+3)& (0+255),b
 19870  00358A                     i2l9755:
 19871                           
 19872                           ; BSR set to: 1
 19873                           ;i2c1.c: 265: }
 19874                           ;i2c1.c: 269: i2c1_object.trStatus.s.full = 0;
 19875  00358A  0101               	movlb	1	; () banked
 19876  00358C  9104               	bcf	(_i2c1_object+4)& (0+255),0,b
 19877                           
 19878                           ;i2c1.c: 272: if (i2c1_object.pTrHead == i2c1_object.pTrTail) {
 19879  00358E  0101               	movlb	1	; () banked
 19880  003590  5100               	movf	_i2c1_object& (0+255),w,b
 19881  003592  0101               	movlb	1	; () banked
 19882  003594  1902               	xorwf	(_i2c1_object+2)& (0+255),w,b
 19883  003596  E108               	bnz	i2l63
 19884  003598  0101               	movlb	1	; () banked
 19885  00359A  5101               	movf	(_i2c1_object+1)& (0+255),w,b
 19886  00359C  0101               	movlb	1	; () banked
 19887  00359E  1903               	xorwf	(_i2c1_object+3)& (0+255),w,b
 19888  0035A0  A4D8               	btfss	status,2,c
 19889  0035A2  D002               	goto	i2l63
 19890                           
 19891                           ; BSR set to: 1
 19892                           ;i2c1.c: 274: i2c1_object.trStatus.s.empty = 1;
 19893  0035A4  0101               	movlb	1	; () banked
 19894  0035A6  8304               	bsf	(_i2c1_object+4)& (0+255),1,b
 19895  0035A8                     i2l63:
 19896                           
 19897                           ; BSR set to: 1
 19898                           ;i2c1.c: 275: }
 19899                           ;i2c1.c: 278: SSP1CON2bits.SEN = 1;
 19900  0035A8  80C5               	bsf	4037,0,c	;volatile
 19901                           
 19902                           ; BSR set to: 1
 19903                           ;i2c1.c: 281: i2c1_state = S_MASTER_SEND_ADDR;
 19904  0035AA  0E02               	movlw	2
 19905  0035AC  6E3B               	movwf	_i2c1_state,c
 19906                           
 19907                           ; BSR set to: 1
 19908                           ;i2c1.c: 282: }
 19909                           ;i2c1.c: 284: break;
 19910  0035AE  0012               	return	
 19911  0035B0                     i2l65:
 19912                           
 19913                           ;i2c1.c: 291: SSP1CON2bits.RSEN = 1;
 19914  0035B0  82C5               	bsf	4037,1,c	;volatile
 19915                           
 19916                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 19917  0035B2  0E02               	movlw	2
 19918  0035B4  6E3B               	movwf	_i2c1_state,c
 19919                           
 19920                           ;i2c1.c: 296: break;
 19921  0035B6  0012               	return	
 19922  0035B8                     i2l66:
 19923                           
 19924                           ;i2c1.c: 300: if (SSP1CON2bits.ACKSTAT) {
 19925  0035B8  ACC5               	btfss	4037,6,c	;volatile
 19926  0035BA  D006               	goto	i2l9767
 19927                           
 19928                           ;i2c1.c: 301: i2c1_object.i2cErrors++;
 19929  0035BC  0101               	movlb	1	; () banked
 19930  0035BE  2B06               	incf	(_i2c1_object+6)& (0+255),f,b
 19931                           
 19932                           ; BSR set to: 1
 19933                           ;i2c1.c: 302: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 19934  0035C0  0E04               	movlw	4
 19935  0035C2  ECCE  F02A         	call	_I2C1_Stop
 19936                           
 19937                           ;i2c1.c: 303: } else {
 19938  0035C6  0012               	return	
 19939  0035C8                     i2l9767:
 19940                           
 19941                           ;i2c1.c: 305: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 19942  0035C8  90D8               	bcf	status,0,c
 19943  0035CA  0100               	movlb	0	; () banked
 19944  0035CC  31FD               	rrcf	(I2C1_ISR@i2c_address+1)& (0+255),w,b
 19945  0035CE  6E05               	movwf	(??_I2C1_ISR+1)& (0+255),c
 19946  0035D0  0100               	movlb	0	; () banked
 19947  0035D2  31FC               	rrcf	I2C1_ISR@i2c_address& (0+255),w,b
 19948  0035D4  6E04               	movwf	??_I2C1_ISR& (0+255),c
 19949  0035D6  5004               	movf	??_I2C1_ISR,w,c
 19950  0035D8  6EC9               	movwf	4041,c	;volatile
 19951                           
 19952                           ; BSR set to: 0
 19953                           ;i2c1.c: 308: if (i2c_address & 0x01) {
 19954  0035DA  0100               	movlb	0	; () banked
 19955  0035DC  A1FC               	btfss	I2C1_ISR@i2c_address& (0+255),0,b
 19956  0035DE  D003               	goto	i2l9773
 19957                           
 19958                           ; BSR set to: 0
 19959                           ;i2c1.c: 311: i2c1_state = S_MASTER_10BIT_RESTART;
 19960  0035E0  0E0B               	movlw	11
 19961  0035E2  6E3B               	movwf	_i2c1_state,c
 19962                           
 19963                           ;i2c1.c: 312: } else {
 19964  0035E4  0012               	return	
 19965  0035E6                     i2l9773:
 19966                           
 19967                           ; BSR set to: 0
 19968                           ;i2c1.c: 314: i2c1_state = S_MASTER_SEND_DATA;
 19969  0035E6  0E03               	movlw	3
 19970  0035E8  6E3B               	movwf	_i2c1_state,c
 19971                           
 19972                           ; BSR set to: 0
 19973                           ;i2c1.c: 315: }
 19974                           ;i2c1.c: 316: }
 19975                           ;i2c1.c: 318: break;
 19976                           
 19977                           ; BSR set to: 0
 19978  0035EA  0012               	return	
 19979  0035EC                     i2l71:
 19980                           
 19981                           ;i2c1.c: 322: if (SSP1CON2bits.ACKSTAT) {
 19982  0035EC  ACC5               	btfss	4037,6,c	;volatile
 19983  0035EE  D006               	goto	i2l72
 19984                           
 19985                           ;i2c1.c: 323: i2c1_object.i2cErrors++;
 19986  0035F0  0101               	movlb	1	; () banked
 19987  0035F2  2B06               	incf	(_i2c1_object+6)& (0+255),f,b
 19988                           
 19989                           ; BSR set to: 1
 19990                           ;i2c1.c: 324: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 19991  0035F4  0E04               	movlw	4
 19992  0035F6  ECCE  F02A         	call	_I2C1_Stop
 19993                           
 19994                           ;i2c1.c: 325: } else {
 19995  0035FA  0012               	return	
 19996  0035FC                     i2l72:
 19997                           
 19998                           ;i2c1.c: 328: SSP1CON2bits.RSEN = 1;
 19999  0035FC  82C5               	bsf	4037,1,c	;volatile
 20000                           
 20001                           ;i2c1.c: 332: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 20002  0035FE  C0FC  F004         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 20003  003602  C0FD  F005         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 20004  003606  C005  F004         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 20005  00360A  6A05               	clrf	??_I2C1_ISR+1,c
 20006  00360C  0E06               	movlw	6
 20007  00360E  1604               	andwf	??_I2C1_ISR,f,c
 20008  003610  0E00               	movlw	0
 20009  003612  1605               	andwf	??_I2C1_ISR+1,f,c
 20010  003614  0EF0               	movlw	240
 20011  003616  1004               	iorwf	??_I2C1_ISR,w,c
 20012  003618  0100               	movlb	0	; () banked
 20013  00361A  6FFC               	movwf	I2C1_ISR@i2c_address& (0+255),b
 20014  00361C  5005               	movf	??_I2C1_ISR+1,w,c
 20015  00361E  0100               	movlb	0	; () banked
 20016  003620  6FFD               	movwf	(I2C1_ISR@i2c_address+1)& (0+255),b
 20017                           
 20018                           ; BSR set to: 0
 20019                           ;i2c1.c: 335: i2c_address |= 0x0001;
 20020  003622  0100               	movlb	0	; () banked
 20021  003624  81FC               	bsf	I2C1_ISR@i2c_address& (0+255),0,b
 20022                           
 20023                           ; BSR set to: 0
 20024                           ;i2c1.c: 338: i2c_10bit_address_restart = 1;
 20025  003626  0E01               	movlw	1
 20026  003628  6E35               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 20027                           
 20028                           ; BSR set to: 0
 20029                           ;i2c1.c: 341: i2c1_state = S_MASTER_SEND_ADDR;
 20030  00362A  0E02               	movlw	2
 20031  00362C  6E3B               	movwf	_i2c1_state,c
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;i2c1.c: 342: }
 20035                           ;i2c1.c: 344: break;
 20036  00362E  0012               	return	
 20037  003630                     i2l9787:
 20038                           
 20039                           ;i2c1.c: 359: if (i2c_10bit_address_restart != 1) {
 20040  003630  0435               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 20041  003632  B4D8               	btfsc	status,2,c
 20042  003634  D01C               	goto	i2l76
 20043                           
 20044                           ;i2c1.c: 361: i2c_address = p_i2c1_trb_current->address;
 20045  003636  C196  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 20046  00363A  C197  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 20047  00363E  CFDE F0FC          	movff	postinc2,I2C1_ISR@i2c_address
 20048  003642  CFDD F0FD          	movff	postdec2,I2C1_ISR@i2c_address+1
 20049                           
 20050                           ;i2c1.c: 362: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 20051  003646  0101               	movlb	1	; () banked
 20052  003648  EE20 F003          	lfsr	2,3
 20053  00364C  5196               	movf	_p_i2c1_trb_current& (0+255),w,b
 20054  00364E  26D9               	addwf	fsr2l,f,c
 20055  003650  5197               	movf	(_p_i2c1_trb_current+1)& (0+255),w,b
 20056  003652  22DA               	addwfc	fsr2h,f,c
 20057  003654  CFDE F182          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 20058  003658  CFDD F183          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 20059                           
 20060                           ; BSR set to: 1
 20061                           ;i2c1.c: 363: i2c_bytes_left = p_i2c1_trb_current->length;
 20062  00365C  0101               	movlb	1	; () banked
 20063  00365E  EE20 F002          	lfsr	2,2
 20064  003662  5196               	movf	_p_i2c1_trb_current& (0+255),w,b
 20065  003664  26D9               	addwf	fsr2l,f,c
 20066  003666  5197               	movf	(_p_i2c1_trb_current+1)& (0+255),w,b
 20067  003668  22DA               	addwfc	fsr2h,f,c
 20068  00366A  50DF               	movf	indf2,w,c
 20069  00366C  6E36               	movwf	I2C1_ISR@i2c_bytes_left,c
 20070  00366E                     i2l76:
 20071                           
 20072                           ;i2c1.c: 383: SSP1BUF = i2c_address;
 20073  00366E  C0FC  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 20074                           
 20075                           ;i2c1.c: 384: if (i2c_address & 0x01) {
 20076  003672  0100               	movlb	0	; () banked
 20077  003674  A1FC               	btfss	I2C1_ISR@i2c_address& (0+255),0,b
 20078  003676  D003               	goto	i2l9807
 20079                           
 20080                           ; BSR set to: 0
 20081                           ;i2c1.c: 386: i2c1_state = S_MASTER_ACK_ADDR;
 20082  003678  0E05               	movlw	5
 20083  00367A  6E3B               	movwf	_i2c1_state,c
 20084                           
 20085                           ;i2c1.c: 387: } else {
 20086  00367C  0012               	return	
 20087  00367E                     i2l9807:
 20088                           
 20089                           ; BSR set to: 0
 20090                           ;i2c1.c: 389: i2c1_state = S_MASTER_SEND_DATA;
 20091  00367E  0E03               	movlw	3
 20092  003680  6E3B               	movwf	_i2c1_state,c
 20093                           
 20094                           ; BSR set to: 0
 20095                           ;i2c1.c: 390: }
 20096                           ;i2c1.c: 391: }
 20097                           ;i2c1.c: 392: break;
 20098                           
 20099                           ; BSR set to: 0
 20100  003682  0012               	return	
 20101  003684                     i2l82:
 20102                           
 20103                           ;i2c1.c: 397: if (SSP1CON2bits.ACKSTAT) {
 20104  003684  ACC5               	btfss	4037,6,c	;volatile
 20105  003686  D007               	goto	i2l9815
 20106                           
 20107                           ;i2c1.c: 399: i2c1_object.i2cErrors++;
 20108  003688  0101               	movlb	1	; () banked
 20109  00368A  2B06               	incf	(_i2c1_object+6)& (0+255),f,b
 20110                           
 20111                           ; BSR set to: 1
 20112                           ;i2c1.c: 402: SSP1CON2bits.ACKSTAT = 0;
 20113  00368C  9CC5               	bcf	4037,6,c	;volatile
 20114                           
 20115                           ; BSR set to: 1
 20116                           ;i2c1.c: 405: I2C1_Stop(I2C1_DATA_NO_ACK);
 20117  00368E  0E05               	movlw	5
 20118  003690  ECCE  F02A         	call	_I2C1_Stop
 20119                           
 20120                           ;i2c1.c: 407: } else {
 20121  003694  0012               	return	
 20122  003696                     i2l9815:
 20123                           
 20124                           ;i2c1.c: 409: if (i2c_bytes_left-- == 0U) {
 20125  003696  0636               	decf	I2C1_ISR@i2c_bytes_left,f,c
 20126  003698  2836               	incf	I2C1_ISR@i2c_bytes_left,w,c
 20127  00369A  A4D8               	btfss	status,2,c
 20128  00369C  D00F               	goto	i2l9825
 20129                           
 20130                           ;i2c1.c: 413: p_i2c1_trb_current++;
 20131  00369E  0E05               	movlw	5
 20132  0036A0  0101               	movlb	1	; () banked
 20133  0036A2  2796               	addwf	_p_i2c1_trb_current& (0+255),f,b
 20134  0036A4  0E00               	movlw	0
 20135  0036A6  2397               	addwfc	(_p_i2c1_trb_current+1)& (0+255),f,b
 20136                           
 20137                           ; BSR set to: 1
 20138                           ;i2c1.c: 416: if (--i2c1_trb_count == 0) {
 20139  0036A8  2E3C               	decfsz	_i2c1_trb_count,f,c
 20140  0036AA  D004               	goto	i2l86
 20141                           
 20142                           ; BSR set to: 1
 20143                           ;i2c1.c: 417: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 20144  0036AC  0E00               	movlw	0
 20145  0036AE  ECCE  F02A         	call	_I2C1_Stop
 20146                           
 20147                           ;i2c1.c: 418: } else {
 20148  0036B2  0012               	return	
 20149  0036B4                     i2l86:
 20150                           
 20151                           ; BSR set to: 1
 20152                           ;i2c1.c: 425: SSP1CON2bits.RSEN = 1;
 20153  0036B4  82C5               	bsf	4037,1,c	;volatile
 20154                           
 20155                           ; BSR set to: 1
 20156                           ;i2c1.c: 428: i2c1_state = S_MASTER_SEND_ADDR;
 20157  0036B6  0E02               	movlw	2
 20158  0036B8  6E3B               	movwf	_i2c1_state,c
 20159                           
 20160                           ; BSR set to: 1
 20161                           ;i2c1.c: 430: }
 20162                           ;i2c1.c: 431: } else {
 20163  0036BA  0012               	return	
 20164  0036BC                     i2l9825:
 20165                           
 20166                           ;i2c1.c: 433: SSP1BUF = *pi2c_buf_ptr++;
 20167  0036BC  C182  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 20168  0036C0  C183  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 20169  0036C4  50DF               	movf	indf2,w,c
 20170  0036C6  6EC9               	movwf	4041,c	;volatile
 20171  0036C8  0101               	movlb	1	; () banked
 20172  0036CA  4B82               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 20173  0036CC  2B83               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 20174                           
 20175                           ; BSR set to: 1
 20176                           ;i2c1.c: 434: }
 20177                           ;i2c1.c: 435: }
 20178                           ;i2c1.c: 436: break;
 20179                           
 20180                           ; BSR set to: 1
 20181  0036CE  0012               	return	
 20182  0036D0                     i2l89:
 20183                           
 20184                           ;i2c1.c: 441: if (SSP1CON2bits.ACKSTAT) {
 20185  0036D0  ACC5               	btfss	4037,6,c	;volatile
 20186  0036D2  D007               	goto	i2l90
 20187                           
 20188                           ;i2c1.c: 444: i2c1_object.i2cErrors++;
 20189  0036D4  0101               	movlb	1	; () banked
 20190  0036D6  2B06               	incf	(_i2c1_object+6)& (0+255),f,b
 20191                           
 20192                           ; BSR set to: 1
 20193                           ;i2c1.c: 447: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 20194  0036D8  0E04               	movlw	4
 20195  0036DA  ECCE  F02A         	call	_I2C1_Stop
 20196                           
 20197                           ;i2c1.c: 450: SSP1CON2bits.ACKSTAT = 0;
 20198  0036DE  9CC5               	bcf	4037,6,c	;volatile
 20199                           
 20200                           ;i2c1.c: 451: } else {
 20201  0036E0  0012               	return	
 20202  0036E2                     i2l90:
 20203                           
 20204                           ;i2c1.c: 452: SSP1CON2bits.RCEN = 1;
 20205  0036E2  86C5               	bsf	4037,3,c	;volatile
 20206                           
 20207                           ;i2c1.c: 453: i2c1_state = S_MASTER_ACK_RCV_DATA;
 20208  0036E4  0E08               	movlw	8
 20209  0036E6  6E3B               	movwf	_i2c1_state,c
 20210                           
 20211                           ;i2c1.c: 454: }
 20212                           ;i2c1.c: 455: break;
 20213  0036E8  0012               	return	
 20214  0036EA                     i2l9837:
 20215                           
 20216                           ;i2c1.c: 462: i2c1_state = S_MASTER_ACK_RCV_DATA;
 20217  0036EA  0E08               	movlw	8
 20218  0036EC  6E3B               	movwf	_i2c1_state,c
 20219                           
 20220                           ;i2c1.c: 465: SSP1CON2bits.RCEN = 1;
 20221  0036EE  86C5               	bsf	4037,3,c	;volatile
 20222                           
 20223                           ;i2c1.c: 467: break;
 20224  0036F0  0012               	return	
 20225  0036F2                     i2l9841:
 20226                           
 20227                           ;i2c1.c: 472: *pi2c_buf_ptr++ = SSP1BUF;
 20228  0036F2  C182  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 20229  0036F6  C183  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 20230  0036FA  CFC9 FFDF          	movff	4041,indf2	;volatile
 20231  0036FE  0101               	movlb	1	; () banked
 20232  003700  4B82               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 20233  003702  2B83               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 20234                           
 20235                           ; BSR set to: 1
 20236                           ;i2c1.c: 475: if (--i2c_bytes_left) {
 20237  003704  0E01               	movlw	1
 20238  003706  5E36               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 20239  003708  B4D8               	btfsc	status,2,c
 20240  00370A  D004               	goto	i2l94
 20241                           
 20242                           ; BSR set to: 1
 20243                           ;i2c1.c: 481: SSP1CON2bits.ACKDT = 0;
 20244  00370C  9AC5               	bcf	4037,5,c	;volatile
 20245                           
 20246                           ; BSR set to: 1
 20247                           ;i2c1.c: 484: i2c1_state = S_MASTER_RCV_DATA;
 20248  00370E  0E06               	movlw	6
 20249  003710  6E3B               	movwf	_i2c1_state,c
 20250                           
 20251                           ;i2c1.c: 485: } else {
 20252  003712  D003               	goto	i2l9853
 20253  003714                     i2l94:
 20254                           
 20255                           ; BSR set to: 1
 20256                           ;i2c1.c: 489: SSP1CON2bits.ACKDT = 1;
 20257  003714  8AC5               	bsf	4037,5,c	;volatile
 20258                           
 20259                           ; BSR set to: 1
 20260                           ;i2c1.c: 491: I2C1_FunctionComplete();
 20261  003716  EC3F  F02C         	call	_I2C1_FunctionComplete	;wreg free
 20262  00371A                     i2l9853:
 20263                           
 20264                           ;i2c1.c: 492: }
 20265                           ;i2c1.c: 495: SSP1CON2bits.ACKEN = 1;
 20266  00371A  88C5               	bsf	4037,4,c	;volatile
 20267                           
 20268                           ;i2c1.c: 496: break;
 20269  00371C  0012               	return	
 20270  00371E                     i2l9855:
 20271                           
 20272                           ;i2c1.c: 499: case S_MASTER_SEND_STOP:
 20273                           ;i2c1.c: 502: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 20274  00371E  0E00               	movlw	0
 20275  003720  ECCE  F02A         	call	_I2C1_Stop
 20276                           
 20277                           ;i2c1.c: 503: break;
 20278  003724  0012               	return	
 20279  003726                     i2l9857:
 20280                           
 20281                           ;i2c1.c: 509: i2c1_object.i2cErrors++;
 20282  003726  0101               	movlb	1	; () banked
 20283  003728  2B06               	incf	(_i2c1_object+6)& (0+255),f,b
 20284                           
 20285                           ; BSR set to: 1
 20286                           ;i2c1.c: 510: I2C1_Stop(I2C1_LOST_STATE);
 20287  00372A  0E06               	movlw	6
 20288  00372C  ECCE  F02A         	call	_I2C1_Stop
 20289                           
 20290                           ;i2c1.c: 513: }
 20291                           
 20292                           ;i2c1.c: 511: break;
 20293  003730  0012               	return	
 20294  003732                     i2l9863:
 20295  003732  503B               	movf	_i2c1_state,w,c
 20296                           
 20297                           ; Switch size 1, requested type "space"
 20298                           ; Number of cases is 11, Range of values is 0 to 11
 20299                           ; switch strategies available:
 20300                           ; Name         Instructions Cycles
 20301                           ; simple_byte           34    18 (average)
 20302                           ;	Chosen strategy is simple_byte
 20303  003734  0A00               	xorlw	0	; case 0
 20304  003736  B4D8               	btfsc	status,2,c
 20305  003738  D6FC               	goto	i2l60
 20306  00373A  0A01               	xorlw	1	; case 1
 20307  00373C  B4D8               	btfsc	status,2,c
 20308  00373E  D738               	goto	i2l65
 20309  003740  0A03               	xorlw	3	; case 2
 20310  003742  B4D8               	btfsc	status,2,c
 20311  003744  D775               	goto	i2l9787
 20312  003746  0A01               	xorlw	1	; case 3
 20313  003748  B4D8               	btfsc	status,2,c
 20314  00374A  D79C               	goto	i2l82
 20315  00374C  0A07               	xorlw	7	; case 4
 20316  00374E  B4D8               	btfsc	status,2,c
 20317  003750  D7E6               	goto	i2l9855
 20318  003752  0A01               	xorlw	1	; case 5
 20319  003754  B4D8               	btfsc	status,2,c
 20320  003756  D7BC               	goto	i2l89
 20321  003758  0A03               	xorlw	3	; case 6
 20322  00375A  B4D8               	btfsc	status,2,c
 20323  00375C  D7C6               	goto	i2l9837
 20324  00375E  0A01               	xorlw	1	; case 7
 20325  003760  B4D8               	btfsc	status,2,c
 20326  003762  D7DD               	goto	i2l9855
 20327  003764  0A0F               	xorlw	15	; case 8
 20328  003766  B4D8               	btfsc	status,2,c
 20329  003768  D7C4               	goto	i2l9841
 20330  00376A  0A02               	xorlw	2	; case 10
 20331  00376C  B4D8               	btfsc	status,2,c
 20332  00376E  D724               	goto	i2l66
 20333  003770  0A01               	xorlw	1	; case 11
 20334  003772  B4D8               	btfsc	status,2,c
 20335  003774  D73B               	goto	i2l71
 20336  003776  D7D7               	goto	i2l9857
 20337  003778                     __end_of_I2C1_ISR:
 20338                           	opt stack 0
 20339                           pclatu	equ	0xFFB
 20340                           pclath	equ	0xFFA
 20341                           tblptru	equ	0xFF8
 20342                           tblptrh	equ	0xFF7
 20343                           tblptrl	equ	0xFF6
 20344                           tablat	equ	0xFF5
 20345                           prodh	equ	0xFF4
 20346                           prodl	equ	0xFF3
 20347                           intcon	equ	0xFF2
 20348                           intcon2	equ	0xFF1
 20349                           indf0	equ	0xFEF
 20350                           postinc0	equ	0xFEE
 20351                           fsr0h	equ	0xFEA
 20352                           fsr0l	equ	0xFE9
 20353                           wreg	equ	0xFE8
 20354                           postinc1	equ	0xFE6
 20355                           postdec1	equ	0xFE5
 20356                           plusw1	equ	0xFE3
 20357                           fsr1h	equ	0xFE2
 20358                           fsr1l	equ	0xFE1
 20359                           indf2	equ	0xFDF
 20360                           postinc2	equ	0xFDE
 20361                           postdec2	equ	0xFDD
 20362                           plusw2	equ	0xFDB
 20363                           fsr2h	equ	0xFDA
 20364                           fsr2l	equ	0xFD9
 20365                           status	equ	0xFD8
 20366                           
 20367 ;; *************** function _I2C1_Stop *****************
 20368 ;; Defined at:
 20369 ;;		line 530 in file "mcc_generated_files/i2c1.c"
 20370 ;; Parameters:    Size  Location     Type
 20371 ;;  completion_c    1    wreg     enum E7739
 20372 ;; Auto vars:     Size  Location     Type
 20373 ;;  completion_c    1    2[COMRAM] enum E7739
 20374 ;; Return value:  Size  Location     Type
 20375 ;;                  1    wreg      void 
 20376 ;; Registers used:
 20377 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20378 ;; Tracked objects:
 20379 ;;		On entry : 0/0
 20380 ;;		On exit  : 0/0
 20381 ;;		Unchanged: 0/0
 20382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20383 ;;      Params:         0       0       0       0       0       0       0
 20384 ;;      Locals:         1       0       0       0       0       0       0
 20385 ;;      Temps:          2       0       0       0       0       0       0
 20386 ;;      Totals:         3       0       0       0       0       0       0
 20387 ;;Total ram usage:        3 bytes
 20388 ;; Hardware stack levels used:    1
 20389 ;; This function calls:
 20390 ;;		Nothing
 20391 ;; This function is called by:
 20392 ;;		_I2C1_ISR
 20393 ;; This function uses a non-reentrant model
 20394 ;;
 20395                           
 20396                           	psect	text64
 20397  00559C                     __ptext64:
 20398                           	opt stack 0
 20399  00559C                     _I2C1_Stop:
 20400                           	opt stack 21
 20401                           
 20402                           ;incstack = 0
 20403                           ;I2C1_Stop@completion_code stored from wreg
 20404  00559C  6E03               	movwf	I2C1_Stop@completion_code,c
 20405                           
 20406                           ;i2c1.c: 532: SSP1CON2bits.PEN = 1;
 20407  00559E  84C5               	bsf	4037,2,c	;volatile
 20408                           
 20409                           ;i2c1.c: 535: if (p_i2c1_current->pTrFlag != (0)) {
 20410  0055A0  0101               	movlb	1	; () banked
 20411  0055A2  EE20 F003          	lfsr	2,3
 20412  0055A6  5194               	movf	_p_i2c1_current& (0+255),w,b
 20413  0055A8  26D9               	addwf	fsr2l,f,c
 20414  0055AA  5195               	movf	(_p_i2c1_current+1)& (0+255),w,b
 20415  0055AC  22DA               	addwfc	fsr2h,f,c
 20416  0055AE  50DE               	movf	postinc2,w,c
 20417  0055B0  10DE               	iorwf	postinc2,w,c
 20418  0055B2  B4D8               	btfsc	status,2,c
 20419  0055B4  D011               	goto	i2l9373
 20420                           
 20421                           ; BSR set to: 1
 20422                           ;i2c1.c: 537: *(p_i2c1_current->pTrFlag) = completion_code;
 20423  0055B6  0101               	movlb	1	; () banked
 20424  0055B8  EE20 F003          	lfsr	2,3
 20425  0055BC  5194               	movf	_p_i2c1_current& (0+255),w,b
 20426  0055BE  26D9               	addwf	fsr2l,f,c
 20427  0055C0  5195               	movf	(_p_i2c1_current+1)& (0+255),w,b
 20428  0055C2  22DA               	addwfc	fsr2h,f,c
 20429  0055C4  CFDE F001          	movff	postinc2,??_I2C1_Stop
 20430  0055C8  CFDD F002          	movff	postdec2,??_I2C1_Stop+1
 20431  0055CC  C001  FFD9         	movff	??_I2C1_Stop,fsr2l
 20432  0055D0  C002  FFDA         	movff	??_I2C1_Stop+1,fsr2h
 20433  0055D4  C003  FFDF         	movff	I2C1_Stop@completion_code,indf2
 20434  0055D8                     i2l9373:
 20435                           
 20436                           ; BSR set to: 1
 20437                           ;i2c1.c: 538: }
 20438                           ;i2c1.c: 541: i2c1_state = S_MASTER_IDLE;
 20439  0055D8  0E00               	movlw	0
 20440  0055DA  6E3B               	movwf	_i2c1_state,c
 20441                           
 20442                           ; BSR set to: 1
 20443  0055DC  0012               	return		;funcret
 20444  0055DE                     __end_of_I2C1_Stop:
 20445                           	opt stack 0
 20446                           pclatu	equ	0xFFB
 20447                           pclath	equ	0xFFA
 20448                           tblptru	equ	0xFF8
 20449                           tblptrh	equ	0xFF7
 20450                           tblptrl	equ	0xFF6
 20451                           tablat	equ	0xFF5
 20452                           prodh	equ	0xFF4
 20453                           prodl	equ	0xFF3
 20454                           intcon	equ	0xFF2
 20455                           intcon2	equ	0xFF1
 20456                           indf0	equ	0xFEF
 20457                           postinc0	equ	0xFEE
 20458                           fsr0h	equ	0xFEA
 20459                           fsr0l	equ	0xFE9
 20460                           wreg	equ	0xFE8
 20461                           postinc1	equ	0xFE6
 20462                           postdec1	equ	0xFE5
 20463                           plusw1	equ	0xFE3
 20464                           fsr1h	equ	0xFE2
 20465                           fsr1l	equ	0xFE1
 20466                           indf2	equ	0xFDF
 20467                           postinc2	equ	0xFDE
 20468                           postdec2	equ	0xFDD
 20469                           plusw2	equ	0xFDB
 20470                           fsr2h	equ	0xFDA
 20471                           fsr2l	equ	0xFD9
 20472                           status	equ	0xFD8
 20473                           
 20474 ;; *************** function _I2C1_FunctionComplete *****************
 20475 ;; Defined at:
 20476 ;;		line 516 in file "mcc_generated_files/i2c1.c"
 20477 ;; Parameters:    Size  Location     Type
 20478 ;;		None
 20479 ;; Auto vars:     Size  Location     Type
 20480 ;;		None
 20481 ;; Return value:  Size  Location     Type
 20482 ;;                  1    wreg      void 
 20483 ;; Registers used:
 20484 ;;		wreg, status,2, status,0
 20485 ;; Tracked objects:
 20486 ;;		On entry : 0/0
 20487 ;;		On exit  : 0/0
 20488 ;;		Unchanged: 0/0
 20489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20490 ;;      Params:         0       0       0       0       0       0       0
 20491 ;;      Locals:         0       0       0       0       0       0       0
 20492 ;;      Temps:          0       0       0       0       0       0       0
 20493 ;;      Totals:         0       0       0       0       0       0       0
 20494 ;;Total ram usage:        0 bytes
 20495 ;; Hardware stack levels used:    1
 20496 ;; This function calls:
 20497 ;;		Nothing
 20498 ;; This function is called by:
 20499 ;;		_I2C1_ISR
 20500 ;; This function uses a non-reentrant model
 20501 ;;
 20502                           
 20503                           	psect	text65
 20504  00587E                     __ptext65:
 20505                           	opt stack 0
 20506  00587E                     _I2C1_FunctionComplete:
 20507                           	opt stack 21
 20508                           
 20509                           ;i2c1.c: 519: p_i2c1_trb_current++;
 20510                           
 20511                           ; BSR set to: 1
 20512                           ;incstack = 0
 20513  00587E  0E05               	movlw	5
 20514  005880  0101               	movlb	1	; () banked
 20515  005882  2796               	addwf	_p_i2c1_trb_current& (0+255),f,b
 20516  005884  0E00               	movlw	0
 20517  005886  2397               	addwfc	(_p_i2c1_trb_current+1)& (0+255),f,b
 20518                           
 20519                           ; BSR set to: 1
 20520                           ;i2c1.c: 522: if (--i2c1_trb_count == 0) {
 20521  005888  2E3C               	decfsz	_i2c1_trb_count,f,c
 20522  00588A  D003               	goto	i2l9381
 20523                           
 20524                           ; BSR set to: 1
 20525                           ;i2c1.c: 523: i2c1_state = S_MASTER_SEND_STOP;
 20526  00588C  0E04               	movlw	4
 20527  00588E  6E3B               	movwf	_i2c1_state,c
 20528                           
 20529                           ;i2c1.c: 524: } else {
 20530  005890  0012               	return	
 20531  005892                     i2l9381:
 20532                           
 20533                           ; BSR set to: 1
 20534                           ;i2c1.c: 525: i2c1_state = S_MASTER_RESTART;
 20535  005892  0E01               	movlw	1
 20536  005894  6E3B               	movwf	_i2c1_state,c
 20537  005896  0012               	return	
 20538  005898                     __end_of_I2C1_FunctionComplete:
 20539                           	opt stack 0
 20540                           pclatu	equ	0xFFB
 20541                           pclath	equ	0xFFA
 20542                           tblptru	equ	0xFF8
 20543                           tblptrh	equ	0xFF7
 20544                           tblptrl	equ	0xFF6
 20545                           tablat	equ	0xFF5
 20546                           prodh	equ	0xFF4
 20547                           prodl	equ	0xFF3
 20548                           intcon	equ	0xFF2
 20549                           intcon2	equ	0xFF1
 20550                           indf0	equ	0xFEF
 20551                           postinc0	equ	0xFEE
 20552                           fsr0h	equ	0xFEA
 20553                           fsr0l	equ	0xFE9
 20554                           wreg	equ	0xFE8
 20555                           postinc1	equ	0xFE6
 20556                           postdec1	equ	0xFE5
 20557                           plusw1	equ	0xFE3
 20558                           fsr1h	equ	0xFE2
 20559                           fsr1l	equ	0xFE1
 20560                           indf2	equ	0xFDF
 20561                           postinc2	equ	0xFDE
 20562                           postdec2	equ	0xFDD
 20563                           plusw2	equ	0xFDB
 20564                           fsr2h	equ	0xFDA
 20565                           fsr2l	equ	0xFD9
 20566                           status	equ	0xFD8
 20567                           
 20568 ;; *************** function _I2C1_BusCollisionISR *****************
 20569 ;; Defined at:
 20570 ;;		line 656 in file "mcc_generated_files/i2c1.c"
 20571 ;; Parameters:    Size  Location     Type
 20572 ;;		None
 20573 ;; Auto vars:     Size  Location     Type
 20574 ;;		None
 20575 ;; Return value:  Size  Location     Type
 20576 ;;                  1    wreg      void 
 20577 ;; Registers used:
 20578 ;;		None
 20579 ;; Tracked objects:
 20580 ;;		On entry : 0/0
 20581 ;;		On exit  : 0/0
 20582 ;;		Unchanged: 0/0
 20583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20584 ;;      Params:         0       0       0       0       0       0       0
 20585 ;;      Locals:         0       0       0       0       0       0       0
 20586 ;;      Temps:          0       0       0       0       0       0       0
 20587 ;;      Totals:         0       0       0       0       0       0       0
 20588 ;;Total ram usage:        0 bytes
 20589 ;; Hardware stack levels used:    1
 20590 ;; This function calls:
 20591 ;;		Nothing
 20592 ;; This function is called by:
 20593 ;;		_INTERRUPT_InterruptManager
 20594 ;; This function uses a non-reentrant model
 20595 ;;
 20596                           
 20597                           	psect	text66
 20598  005958                     __ptext66:
 20599                           	opt stack 0
 20600  005958                     _I2C1_BusCollisionISR:
 20601                           	opt stack 22
 20602                           
 20603                           ; BSR set to: 1
 20604                           ;incstack = 0
 20605  005958  0012               	return		;funcret
 20606  00595A                     __end_of_I2C1_BusCollisionISR:
 20607                           	opt stack 0
 20608                           pclatu	equ	0xFFB
 20609                           pclath	equ	0xFFA
 20610                           tblptru	equ	0xFF8
 20611                           tblptrh	equ	0xFF7
 20612                           tblptrl	equ	0xFF6
 20613                           tablat	equ	0xFF5
 20614                           prodh	equ	0xFF4
 20615                           prodl	equ	0xFF3
 20616                           intcon	equ	0xFF2
 20617                           intcon2	equ	0xFF1
 20618                           indf0	equ	0xFEF
 20619                           postinc0	equ	0xFEE
 20620                           fsr0h	equ	0xFEA
 20621                           fsr0l	equ	0xFE9
 20622                           wreg	equ	0xFE8
 20623                           postinc1	equ	0xFE6
 20624                           postdec1	equ	0xFE5
 20625                           plusw1	equ	0xFE3
 20626                           fsr1h	equ	0xFE2
 20627                           fsr1l	equ	0xFE1
 20628                           indf2	equ	0xFDF
 20629                           postinc2	equ	0xFDE
 20630                           postdec2	equ	0xFDD
 20631                           plusw2	equ	0xFDB
 20632                           fsr2h	equ	0xFDA
 20633                           fsr2l	equ	0xFD9
 20634                           status	equ	0xFD8
 20635                           
 20636 ;; *************** function _EUSART1_Transmit_ISR *****************
 20637 ;; Defined at:
 20638 ;;		line 213 in file "mcc_generated_files/eusart1.c"
 20639 ;; Parameters:    Size  Location     Type
 20640 ;;		None
 20641 ;; Auto vars:     Size  Location     Type
 20642 ;;		None
 20643 ;; Return value:  Size  Location     Type
 20644 ;;                  1    wreg      void 
 20645 ;; Registers used:
 20646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20647 ;; Tracked objects:
 20648 ;;		On entry : 0/0
 20649 ;;		On exit  : 0/0
 20650 ;;		Unchanged: 0/0
 20651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20652 ;;      Params:         0       0       0       0       0       0       0
 20653 ;;      Locals:         0       0       0       0       0       0       0
 20654 ;;      Temps:          0       0       0       0       0       0       0
 20655 ;;      Totals:         0       0       0       0       0       0       0
 20656 ;;Total ram usage:        0 bytes
 20657 ;; Hardware stack levels used:    1
 20658 ;; Hardware stack levels required when called:    2
 20659 ;; This function calls:
 20660 ;;		_UART_buff_size
 20661 ;;		i2_UART_buff_get
 20662 ;; This function is called by:
 20663 ;;		_INTERRUPT_InterruptManager
 20664 ;; This function uses a non-reentrant model
 20665 ;;
 20666                           
 20667                           	psect	text67
 20668  0056F4                     __ptext67:
 20669                           	opt stack 0
 20670  0056F4                     _EUSART1_Transmit_ISR:
 20671                           	opt stack 20
 20672                           
 20673                           ;eusart1.c: 215: if (UART_buff_size(&output_buffer) > 0) {
 20674                           
 20675                           ;incstack = 0
 20676  0056F4  0E00               	movlw	low _output_buffer
 20677  0056F6  6E01               	movwf	UART_buff_size@_this,c
 20678  0056F8  0E03               	movlw	high _output_buffer
 20679  0056FA  6E02               	movwf	UART_buff_size@_this+1,c
 20680  0056FC  EC70  F02C         	call	_UART_buff_size	;wreg free
 20681  005700  BE02               	btfsc	?_UART_buff_size+1,7,c
 20682  005702  D00D               	goto	i2l7159
 20683  005704  5002               	movf	?_UART_buff_size+1,w,c
 20684  005706  E103               	bnz	i2u705_40
 20685  005708  0401               	decf	?_UART_buff_size,w,c
 20686  00570A  A0D8               	btfss	status,0,c
 20687  00570C  D008               	goto	i2l7159
 20688  00570E                     i2u705_40:
 20689                           
 20690                           ;eusart1.c: 216: TXREG1 = UART_buff_get(&output_buffer);
 20691  00570E  0E00               	movlw	low _output_buffer
 20692  005710  6E07               	movwf	i2UART_buff_get@_this,c
 20693  005712  0E03               	movlw	high _output_buffer
 20694  005714  6E08               	movwf	i2UART_buff_get@_this+1,c
 20695  005716  EC4A  F028         	call	i2_UART_buff_get	;wreg free
 20696  00571A  6EAD               	movwf	4013,c	;volatile
 20697                           
 20698                           ;eusart1.c: 217: } else {
 20699  00571C  0012               	return	
 20700  00571E                     i2l7159:
 20701                           
 20702                           ;eusart1.c: 218: Transmit_stall = 1;
 20703  00571E  0E01               	movlw	1
 20704  005720  6E44               	movwf	_Transmit_stall,c
 20705                           
 20706                           ;eusart1.c: 219: PIE1bits.TX1IE = 0;
 20707  005722  989D               	bcf	3997,4,c	;volatile
 20708  005724  0012               	return	
 20709  005726                     __end_of_EUSART1_Transmit_ISR:
 20710                           	opt stack 0
 20711                           pclatu	equ	0xFFB
 20712                           pclath	equ	0xFFA
 20713                           tblptru	equ	0xFF8
 20714                           tblptrh	equ	0xFF7
 20715                           tblptrl	equ	0xFF6
 20716                           tablat	equ	0xFF5
 20717                           prodh	equ	0xFF4
 20718                           prodl	equ	0xFF3
 20719                           intcon	equ	0xFF2
 20720                           intcon2	equ	0xFF1
 20721                           indf0	equ	0xFEF
 20722                           postinc0	equ	0xFEE
 20723                           fsr0h	equ	0xFEA
 20724                           fsr0l	equ	0xFE9
 20725                           wreg	equ	0xFE8
 20726                           postinc1	equ	0xFE6
 20727                           postdec1	equ	0xFE5
 20728                           plusw1	equ	0xFE3
 20729                           fsr1h	equ	0xFE2
 20730                           fsr1l	equ	0xFE1
 20731                           indf2	equ	0xFDF
 20732                           postinc2	equ	0xFDE
 20733                           postdec2	equ	0xFDD
 20734                           plusw2	equ	0xFDB
 20735                           fsr2h	equ	0xFDA
 20736                           fsr2l	equ	0xFD9
 20737                           status	equ	0xFD8
 20738                           
 20739 ;; *************** function i2_UART_buff_get *****************
 20740 ;; Defined at:
 20741 ;;		line 136 in file "mcc_generated_files/eusart1.c"
 20742 ;; Parameters:    Size  Location     Type
 20743 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 20744 ;;		 -> output_buffer(86), input_buffer(86), 
 20745 ;; Auto vars:     Size  Location     Type
 20746 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
 20747 ;; Return value:  Size  Location     Type
 20748 ;;                  1    wreg      unsigned char 
 20749 ;; Registers used:
 20750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20751 ;; Tracked objects:
 20752 ;;		On entry : 0/0
 20753 ;;		On exit  : 0/0
 20754 ;;		Unchanged: 0/0
 20755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20756 ;;      Params:         2       0       0       0       0       0       0
 20757 ;;      Locals:         1       0       0       0       0       0       0
 20758 ;;      Temps:          2       0       0       0       0       0       0
 20759 ;;      Totals:         5       0       0       0       0       0       0
 20760 ;;Total ram usage:        5 bytes
 20761 ;; Hardware stack levels used:    1
 20762 ;; Hardware stack levels required when called:    1
 20763 ;; This function calls:
 20764 ;;		i2_UART_buff_modulo_inc
 20765 ;; This function is called by:
 20766 ;;		_EUSART1_Transmit_ISR
 20767 ;; This function uses a non-reentrant model
 20768 ;;
 20769                           
 20770                           	psect	text68
 20771  005094                     __ptext68:
 20772                           	opt stack 0
 20773  005094                     i2_UART_buff_get:
 20774                           	opt stack 20
 20775                           
 20776                           ;eusart1.c: 137: unsigned char c;
 20777                           ;eusart1.c: 138: if (_this->count > 0) {
 20778                           
 20779                           ;incstack = 0
 20780  005094  EE20 F054          	lfsr	2,84
 20781  005098  5007               	movf	i2UART_buff_get@_this,w,c
 20782  00509A  26D9               	addwf	fsr2l,f,c
 20783  00509C  5008               	movf	i2UART_buff_get@_this+1,w,c
 20784  00509E  22DA               	addwfc	fsr2h,f,c
 20785  0050A0  0E01               	movlw	1
 20786  0050A2  BEDB               	btfsc	plusw2,7,c
 20787  0050A4  D03C               	goto	i2l6961
 20788  0050A6  0E01               	movlw	1
 20789  0050A8  50DB               	movf	plusw2,w,c
 20790  0050AA  E103               	bnz	i2u688_40
 20791  0050AC  04DE               	decf	postinc2,w,c
 20792  0050AE  A0D8               	btfss	status,0,c
 20793  0050B0  D036               	goto	i2l6961
 20794  0050B2                     i2u688_40:
 20795                           
 20796                           ;eusart1.c: 139: c = _this->buf[_this->tail];
 20797  0050B2  EE20 F052          	lfsr	2,82
 20798  0050B6  5007               	movf	i2UART_buff_get@_this,w,c
 20799  0050B8  26D9               	addwf	fsr2l,f,c
 20800  0050BA  5008               	movf	i2UART_buff_get@_this+1,w,c
 20801  0050BC  22DA               	addwfc	fsr2h,f,c
 20802  0050BE  CFDE F009          	movff	postinc2,??i2_UART_buff_get
 20803  0050C2  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
 20804  0050C6  5009               	movf	??i2_UART_buff_get,w,c
 20805  0050C8  2407               	addwf	i2UART_buff_get@_this,w,c
 20806  0050CA  6ED9               	movwf	fsr2l,c
 20807  0050CC  500A               	movf	??i2_UART_buff_get+1,w,c
 20808  0050CE  2008               	addwfc	i2UART_buff_get@_this+1,w,c
 20809  0050D0  6EDA               	movwf	fsr2h,c
 20810  0050D2  50DF               	movf	indf2,w,c
 20811  0050D4  6E0B               	movwf	i2UART_buff_get@c,c
 20812                           
 20813                           ;eusart1.c: 140: _this->tail = UART_buff_modulo_inc(_this->tail, 80);
 20814  0050D6  EE20 F052          	lfsr	2,82
 20815  0050DA  5007               	movf	i2UART_buff_get@_this,w,c
 20816  0050DC  26D9               	addwf	fsr2l,f,c
 20817  0050DE  5008               	movf	i2UART_buff_get@_this+1,w,c
 20818  0050E0  22DA               	addwfc	fsr2h,f,c
 20819  0050E2  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 20820  0050E6  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 20821  0050EA  0E00               	movlw	0
 20822  0050EC  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 20823  0050EE  0E50               	movlw	80
 20824  0050F0  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 20825  0050F2  ECEB  F02B         	call	i2_UART_buff_modulo_inc	;wreg free
 20826  0050F6  EE20 F052          	lfsr	2,82
 20827  0050FA  5007               	movf	i2UART_buff_get@_this,w,c
 20828  0050FC  26D9               	addwf	fsr2l,f,c
 20829  0050FE  5008               	movf	i2UART_buff_get@_this+1,w,c
 20830  005100  22DA               	addwfc	fsr2h,f,c
 20831  005102  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 20832  005106  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 20833                           
 20834                           ;eusart1.c: 141: --_this->count;
 20835  00510A  EE20 F054          	lfsr	2,84
 20836  00510E  5007               	movf	i2UART_buff_get@_this,w,c
 20837  005110  26D9               	addwf	fsr2l,f,c
 20838  005112  5008               	movf	i2UART_buff_get@_this+1,w,c
 20839  005114  22DA               	addwfc	fsr2h,f,c
 20840  005116  06DE               	decf	postinc2,f,c
 20841  005118  0E00               	movlw	0
 20842  00511A  5ADD               	subwfb	postdec2,f,c
 20843                           
 20844                           ;eusart1.c: 142: } else {
 20845  00511C  D002               	goto	i2l303
 20846  00511E                     i2l6961:
 20847                           
 20848                           ;eusart1.c: 143: c = 0;
 20849  00511E  0E00               	movlw	0
 20850  005120  6E0B               	movwf	i2UART_buff_get@c,c
 20851  005122                     i2l303:
 20852                           
 20853                           ;eusart1.c: 144: }
 20854                           ;eusart1.c: 145: return (c);
 20855  005122  500B               	movf	i2UART_buff_get@c,w,c
 20856  005124  0012               	return	
 20857  005126                     __end_ofi2_UART_buff_get:
 20858                           	opt stack 0
 20859                           pclatu	equ	0xFFB
 20860                           pclath	equ	0xFFA
 20861                           tblptru	equ	0xFF8
 20862                           tblptrh	equ	0xFF7
 20863                           tblptrl	equ	0xFF6
 20864                           tablat	equ	0xFF5
 20865                           prodh	equ	0xFF4
 20866                           prodl	equ	0xFF3
 20867                           intcon	equ	0xFF2
 20868                           intcon2	equ	0xFF1
 20869                           indf0	equ	0xFEF
 20870                           postinc0	equ	0xFEE
 20871                           fsr0h	equ	0xFEA
 20872                           fsr0l	equ	0xFE9
 20873                           wreg	equ	0xFE8
 20874                           postinc1	equ	0xFE6
 20875                           postdec1	equ	0xFE5
 20876                           plusw1	equ	0xFE3
 20877                           fsr1h	equ	0xFE2
 20878                           fsr1l	equ	0xFE1
 20879                           indf2	equ	0xFDF
 20880                           postinc2	equ	0xFDE
 20881                           postdec2	equ	0xFDD
 20882                           plusw2	equ	0xFDB
 20883                           fsr2h	equ	0xFDA
 20884                           fsr2l	equ	0xFD9
 20885                           status	equ	0xFD8
 20886                           
 20887 ;; *************** function _UART_buff_size *****************
 20888 ;; Defined at:
 20889 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 20890 ;; Parameters:    Size  Location     Type
 20891 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
 20892 ;;		 -> output_buffer(86), input_buffer(86), 
 20893 ;; Auto vars:     Size  Location     Type
 20894 ;;		None
 20895 ;; Return value:  Size  Location     Type
 20896 ;;                  2    0[COMRAM] int 
 20897 ;; Registers used:
 20898 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20899 ;; Tracked objects:
 20900 ;;		On entry : 0/0
 20901 ;;		On exit  : 0/0
 20902 ;;		Unchanged: 0/0
 20903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20904 ;;      Params:         2       0       0       0       0       0       0
 20905 ;;      Locals:         0       0       0       0       0       0       0
 20906 ;;      Temps:          0       0       0       0       0       0       0
 20907 ;;      Totals:         2       0       0       0       0       0       0
 20908 ;;Total ram usage:        2 bytes
 20909 ;; Hardware stack levels used:    1
 20910 ;; This function calls:
 20911 ;;		Nothing
 20912 ;; This function is called by:
 20913 ;;		_EUSART1_Transmit_ISR
 20914 ;;		_Receive_available
 20915 ;; This function uses a non-reentrant model
 20916 ;;
 20917                           
 20918                           	psect	text69
 20919  0058E0                     __ptext69:
 20920                           	opt stack 0
 20921  0058E0                     _UART_buff_size:
 20922                           	opt stack 21
 20923                           
 20924                           ;eusart1.c: 158: return (_this->count);
 20925                           
 20926                           ;incstack = 0
 20927  0058E0  EE20 F054          	lfsr	2,84
 20928  0058E4  5001               	movf	UART_buff_size@_this,w,c
 20929  0058E6  26D9               	addwf	fsr2l,f,c
 20930  0058E8  5002               	movf	UART_buff_size@_this+1,w,c
 20931  0058EA  22DA               	addwfc	fsr2h,f,c
 20932  0058EC  CFDE F001          	movff	postinc2,?_UART_buff_size
 20933  0058F0  CFDD F002          	movff	postdec2,?_UART_buff_size+1
 20934  0058F4  0012               	return	
 20935  0058F6                     __end_of_UART_buff_size:
 20936                           	opt stack 0
 20937                           pclatu	equ	0xFFB
 20938                           pclath	equ	0xFFA
 20939                           tblptru	equ	0xFF8
 20940                           tblptrh	equ	0xFF7
 20941                           tblptrl	equ	0xFF6
 20942                           tablat	equ	0xFF5
 20943                           prodh	equ	0xFF4
 20944                           prodl	equ	0xFF3
 20945                           intcon	equ	0xFF2
 20946                           intcon2	equ	0xFF1
 20947                           indf0	equ	0xFEF
 20948                           postinc0	equ	0xFEE
 20949                           fsr0h	equ	0xFEA
 20950                           fsr0l	equ	0xFE9
 20951                           wreg	equ	0xFE8
 20952                           postinc1	equ	0xFE6
 20953                           postdec1	equ	0xFE5
 20954                           plusw1	equ	0xFE3
 20955                           fsr1h	equ	0xFE2
 20956                           fsr1l	equ	0xFE1
 20957                           indf2	equ	0xFDF
 20958                           postinc2	equ	0xFDE
 20959                           postdec2	equ	0xFDD
 20960                           plusw2	equ	0xFDB
 20961                           fsr2h	equ	0xFDA
 20962                           fsr2l	equ	0xFD9
 20963                           status	equ	0xFD8
 20964                           
 20965 ;; *************** function _EUSART1_Receive_ISR *****************
 20966 ;; Defined at:
 20967 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20968 ;; Parameters:    Size  Location     Type
 20969 ;;		None
 20970 ;; Auto vars:     Size  Location     Type
 20971 ;;  data            1   11[COMRAM] unsigned char 
 20972 ;; Return value:  Size  Location     Type
 20973 ;;                  1    wreg      void 
 20974 ;; Registers used:
 20975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20976 ;; Tracked objects:
 20977 ;;		On entry : 0/0
 20978 ;;		On exit  : 0/0
 20979 ;;		Unchanged: 0/0
 20980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20981 ;;      Params:         0       0       0       0       0       0       0
 20982 ;;      Locals:         1       0       0       0       0       0       0
 20983 ;;      Temps:          0       0       0       0       0       0       0
 20984 ;;      Totals:         1       0       0       0       0       0       0
 20985 ;;Total ram usage:        1 bytes
 20986 ;; Hardware stack levels used:    1
 20987 ;; Hardware stack levels required when called:    2
 20988 ;; This function calls:
 20989 ;;		i2_UART_buff_put
 20990 ;; This function is called by:
 20991 ;;		_INTERRUPT_InterruptManager
 20992 ;; This function uses a non-reentrant model
 20993 ;;
 20994                           
 20995                           	psect	text70
 20996  005860                     __ptext70:
 20997                           	opt stack 0
 20998  005860                     _EUSART1_Receive_ISR:
 20999                           	opt stack 20
 21000                           
 21001                           ;eusart1.c: 203: if (1 == RC1STAbits.OERR) {
 21002                           
 21003                           ;incstack = 0
 21004  005860  A2AB               	btfss	4011,1,c	;volatile
 21005  005862  D002               	goto	i2l340
 21006                           
 21007                           ;eusart1.c: 206: RC1STAbits.CREN = 0;
 21008  005864  98AB               	bcf	4011,4,c	;volatile
 21009                           
 21010                           ;eusart1.c: 207: RC1STAbits.CREN = 1;
 21011  005866  88AB               	bsf	4011,4,c	;volatile
 21012  005868                     i2l340:
 21013                           
 21014                           ;eusart1.c: 208: }
 21015                           ;eusart1.c: 209: unsigned char data = RCREG1;
 21016  005868  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
 21017                           
 21018                           ;eusart1.c: 210: UART_buff_put(&input_buffer, data);
 21019  00586C  0E5F               	movlw	low _input_buffer
 21020  00586E  6E07               	movwf	i2UART_buff_put@_this,c
 21021  005870  0E02               	movlw	high _input_buffer
 21022  005872  6E08               	movwf	i2UART_buff_put@_this+1,c
 21023  005874  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
 21024  005878  EC11  F022         	call	i2_UART_buff_put	;wreg free
 21025  00587C  0012               	return		;funcret
 21026  00587E                     __end_of_EUSART1_Receive_ISR:
 21027                           	opt stack 0
 21028                           pclatu	equ	0xFFB
 21029                           pclath	equ	0xFFA
 21030                           tblptru	equ	0xFF8
 21031                           tblptrh	equ	0xFF7
 21032                           tblptrl	equ	0xFF6
 21033                           tablat	equ	0xFF5
 21034                           prodh	equ	0xFF4
 21035                           prodl	equ	0xFF3
 21036                           intcon	equ	0xFF2
 21037                           intcon2	equ	0xFF1
 21038                           indf0	equ	0xFEF
 21039                           postinc0	equ	0xFEE
 21040                           fsr0h	equ	0xFEA
 21041                           fsr0l	equ	0xFE9
 21042                           wreg	equ	0xFE8
 21043                           postinc1	equ	0xFE6
 21044                           postdec1	equ	0xFE5
 21045                           plusw1	equ	0xFE3
 21046                           fsr1h	equ	0xFE2
 21047                           fsr1l	equ	0xFE1
 21048                           indf2	equ	0xFDF
 21049                           postinc2	equ	0xFDE
 21050                           postdec2	equ	0xFDD
 21051                           plusw2	equ	0xFDB
 21052                           fsr2h	equ	0xFDA
 21053                           fsr2l	equ	0xFD9
 21054                           status	equ	0xFD8
 21055                           
 21056 ;; *************** function i2_UART_buff_put *****************
 21057 ;; Defined at:
 21058 ;;		line 123 in file "mcc_generated_files/eusart1.c"
 21059 ;; Parameters:    Size  Location     Type
 21060 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
 21061 ;;		 -> output_buffer(86), input_buffer(86), 
 21062 ;;  c               1    8[COMRAM] const unsigned char 
 21063 ;; Auto vars:     Size  Location     Type
 21064 ;;		None
 21065 ;; Return value:  Size  Location     Type
 21066 ;;                  1    wreg      void 
 21067 ;; Registers used:
 21068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21069 ;; Tracked objects:
 21070 ;;		On entry : 0/0
 21071 ;;		On exit  : 0/0
 21072 ;;		Unchanged: 0/0
 21073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21074 ;;      Params:         3       0       0       0       0       0       0
 21075 ;;      Locals:         0       0       0       0       0       0       0
 21076 ;;      Temps:          2       0       0       0       0       0       0
 21077 ;;      Totals:         5       0       0       0       0       0       0
 21078 ;;Total ram usage:        5 bytes
 21079 ;; Hardware stack levels used:    1
 21080 ;; Hardware stack levels required when called:    1
 21081 ;; This function calls:
 21082 ;;		i2_UART_buff_modulo_inc
 21083 ;; This function is called by:
 21084 ;;		_EUSART1_Receive_ISR
 21085 ;; This function uses a non-reentrant model
 21086 ;;
 21087                           
 21088                           	psect	text71
 21089  004422                     __ptext71:
 21090                           	opt stack 0
 21091  004422                     i2_UART_buff_put:
 21092                           	opt stack 20
 21093                           
 21094                           ;eusart1.c: 124: if (_this->count < 80) {
 21095                           
 21096                           ;incstack = 0
 21097  004422  EE20 F054          	lfsr	2,84
 21098  004426  5007               	movf	i2UART_buff_put@_this,w,c
 21099  004428  26D9               	addwf	fsr2l,f,c
 21100  00442A  5008               	movf	i2UART_buff_put@_this+1,w,c
 21101  00442C  22DA               	addwfc	fsr2h,f,c
 21102  00442E  0E01               	movlw	1
 21103  004430  BEDB               	btfsc	plusw2,7,c
 21104  004432  D007               	goto	i2l6941
 21105  004434  0E01               	movlw	1
 21106  004436  50DB               	movf	plusw2,w,c
 21107  004438  E13A               	bnz	i2l6947
 21108  00443A  0E50               	movlw	80
 21109  00443C  5CDE               	subwf	postinc2,w,c
 21110  00443E  B0D8               	btfsc	status,0,c
 21111  004440  D036               	goto	i2l6947
 21112  004442                     i2l6941:
 21113                           
 21114                           ;eusart1.c: 125: _this->buf[_this->head] = c;
 21115  004442  EE20 F050          	lfsr	2,80
 21116  004446  5007               	movf	i2UART_buff_put@_this,w,c
 21117  004448  26D9               	addwf	fsr2l,f,c
 21118  00444A  5008               	movf	i2UART_buff_put@_this+1,w,c
 21119  00444C  22DA               	addwfc	fsr2h,f,c
 21120  00444E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 21121  004452  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 21122  004456  500A               	movf	??i2_UART_buff_put,w,c
 21123  004458  2407               	addwf	i2UART_buff_put@_this,w,c
 21124  00445A  6ED9               	movwf	fsr2l,c
 21125  00445C  500B               	movf	??i2_UART_buff_put+1,w,c
 21126  00445E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 21127  004460  6EDA               	movwf	fsr2h,c
 21128  004462  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 21129                           
 21130                           ;eusart1.c: 126: _this->head = UART_buff_modulo_inc(_this->head, 80);
 21131  004466  EE20 F050          	lfsr	2,80
 21132  00446A  5007               	movf	i2UART_buff_put@_this,w,c
 21133  00446C  26D9               	addwf	fsr2l,f,c
 21134  00446E  5008               	movf	i2UART_buff_put@_this+1,w,c
 21135  004470  22DA               	addwfc	fsr2h,f,c
 21136  004472  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 21137  004476  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 21138  00447A  0E00               	movlw	0
 21139  00447C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 21140  00447E  0E50               	movlw	80
 21141  004480  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 21142  004482  ECEB  F02B         	call	i2_UART_buff_modulo_inc	;wreg free
 21143  004486  EE20 F050          	lfsr	2,80
 21144  00448A  5007               	movf	i2UART_buff_put@_this,w,c
 21145  00448C  26D9               	addwf	fsr2l,f,c
 21146  00448E  5008               	movf	i2UART_buff_put@_this+1,w,c
 21147  004490  22DA               	addwfc	fsr2h,f,c
 21148  004492  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 21149  004496  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 21150                           
 21151                           ;eusart1.c: 127: ++_this->count;
 21152  00449A  EE20 F054          	lfsr	2,84
 21153  00449E  5007               	movf	i2UART_buff_put@_this,w,c
 21154  0044A0  26D9               	addwf	fsr2l,f,c
 21155  0044A2  5008               	movf	i2UART_buff_put@_this+1,w,c
 21156  0044A4  22DA               	addwfc	fsr2h,f,c
 21157  0044A6  2ADE               	incf	postinc2,f,c
 21158  0044A8  0E00               	movlw	0
 21159  0044AA  22DD               	addwfc	postdec2,f,c
 21160                           
 21161                           ;eusart1.c: 128: } else {
 21162  0044AC  0012               	return	
 21163  0044AE                     i2l6947:
 21164                           
 21165                           ;eusart1.c: 129: _this->buf[_this->head] = c;
 21166  0044AE  EE20 F050          	lfsr	2,80
 21167  0044B2  5007               	movf	i2UART_buff_put@_this,w,c
 21168  0044B4  26D9               	addwf	fsr2l,f,c
 21169  0044B6  5008               	movf	i2UART_buff_put@_this+1,w,c
 21170  0044B8  22DA               	addwfc	fsr2h,f,c
 21171  0044BA  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
 21172  0044BE  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
 21173  0044C2  500A               	movf	??i2_UART_buff_put,w,c
 21174  0044C4  2407               	addwf	i2UART_buff_put@_this,w,c
 21175  0044C6  6ED9               	movwf	fsr2l,c
 21176  0044C8  500B               	movf	??i2_UART_buff_put+1,w,c
 21177  0044CA  2008               	addwfc	i2UART_buff_put@_this+1,w,c
 21178  0044CC  6EDA               	movwf	fsr2h,c
 21179  0044CE  C009  FFDF         	movff	i2UART_buff_put@c,indf2
 21180                           
 21181                           ;eusart1.c: 130: _this->head = UART_buff_modulo_inc(_this->head, 80);
 21182  0044D2  EE20 F050          	lfsr	2,80
 21183  0044D6  5007               	movf	i2UART_buff_put@_this,w,c
 21184  0044D8  26D9               	addwf	fsr2l,f,c
 21185  0044DA  5008               	movf	i2UART_buff_put@_this+1,w,c
 21186  0044DC  22DA               	addwfc	fsr2h,f,c
 21187  0044DE  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 21188  0044E2  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 21189  0044E6  0E00               	movlw	0
 21190  0044E8  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 21191  0044EA  0E50               	movlw	80
 21192  0044EC  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 21193  0044EE  ECEB  F02B         	call	i2_UART_buff_modulo_inc	;wreg free
 21194  0044F2  EE20 F050          	lfsr	2,80
 21195  0044F6  5007               	movf	i2UART_buff_put@_this,w,c
 21196  0044F8  26D9               	addwf	fsr2l,f,c
 21197  0044FA  5008               	movf	i2UART_buff_put@_this+1,w,c
 21198  0044FC  22DA               	addwfc	fsr2h,f,c
 21199  0044FE  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 21200  004502  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 21201                           
 21202                           ;eusart1.c: 131: _this->tail = UART_buff_modulo_inc(_this->tail, 80);
 21203  004506  EE20 F052          	lfsr	2,82
 21204  00450A  5007               	movf	i2UART_buff_put@_this,w,c
 21205  00450C  26D9               	addwf	fsr2l,f,c
 21206  00450E  5008               	movf	i2UART_buff_put@_this+1,w,c
 21207  004510  22DA               	addwfc	fsr2h,f,c
 21208  004512  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
 21209  004516  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
 21210  00451A  0E00               	movlw	0
 21211  00451C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
 21212  00451E  0E50               	movlw	80
 21213  004520  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
 21214  004522  ECEB  F02B         	call	i2_UART_buff_modulo_inc	;wreg free
 21215  004526  EE20 F052          	lfsr	2,82
 21216  00452A  5007               	movf	i2UART_buff_put@_this,w,c
 21217  00452C  26D9               	addwf	fsr2l,f,c
 21218  00452E  5008               	movf	i2UART_buff_put@_this+1,w,c
 21219  004530  22DA               	addwfc	fsr2h,f,c
 21220  004532  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
 21221  004536  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
 21222  00453A  0012               	return	
 21223  00453C                     __end_ofi2_UART_buff_put:
 21224                           	opt stack 0
 21225                           pclatu	equ	0xFFB
 21226                           pclath	equ	0xFFA
 21227                           tblptru	equ	0xFF8
 21228                           tblptrh	equ	0xFF7
 21229                           tblptrl	equ	0xFF6
 21230                           tablat	equ	0xFF5
 21231                           prodh	equ	0xFF4
 21232                           prodl	equ	0xFF3
 21233                           intcon	equ	0xFF2
 21234                           intcon2	equ	0xFF1
 21235                           indf0	equ	0xFEF
 21236                           postinc0	equ	0xFEE
 21237                           fsr0h	equ	0xFEA
 21238                           fsr0l	equ	0xFE9
 21239                           wreg	equ	0xFE8
 21240                           postinc1	equ	0xFE6
 21241                           postdec1	equ	0xFE5
 21242                           plusw1	equ	0xFE3
 21243                           fsr1h	equ	0xFE2
 21244                           fsr1l	equ	0xFE1
 21245                           indf2	equ	0xFDF
 21246                           postinc2	equ	0xFDE
 21247                           postdec2	equ	0xFDD
 21248                           plusw2	equ	0xFDB
 21249                           fsr2h	equ	0xFDA
 21250                           fsr2l	equ	0xFD9
 21251                           status	equ	0xFD8
 21252                           
 21253 ;; *************** function i2_UART_buff_modulo_inc *****************
 21254 ;; Defined at:
 21255 ;;		line 161 in file "mcc_generated_files/eusart1.c"
 21256 ;; Parameters:    Size  Location     Type
 21257 ;;  value           2    0[COMRAM] const unsigned int 
 21258 ;;  modulus         2    2[COMRAM] const unsigned int 
 21259 ;; Auto vars:     Size  Location     Type
 21260 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
 21261 ;; Return value:  Size  Location     Type
 21262 ;;                  2    0[COMRAM] unsigned int 
 21263 ;; Registers used:
 21264 ;;		wreg, status,2, status,0
 21265 ;; Tracked objects:
 21266 ;;		On entry : 0/0
 21267 ;;		On exit  : 0/0
 21268 ;;		Unchanged: 0/0
 21269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21270 ;;      Params:         4       0       0       0       0       0       0
 21271 ;;      Locals:         2       0       0       0       0       0       0
 21272 ;;      Temps:          0       0       0       0       0       0       0
 21273 ;;      Totals:         6       0       0       0       0       0       0
 21274 ;;Total ram usage:        6 bytes
 21275 ;; Hardware stack levels used:    1
 21276 ;; This function calls:
 21277 ;;		Nothing
 21278 ;; This function is called by:
 21279 ;;		i2_UART_buff_put
 21280 ;;		i2_UART_buff_get
 21281 ;; This function uses a non-reentrant model
 21282 ;;
 21283                           
 21284                           	psect	text72
 21285  0057D6                     __ptext72:
 21286                           	opt stack 0
 21287  0057D6                     i2_UART_buff_modulo_inc:
 21288                           	opt stack 20
 21289                           
 21290                           ;eusart1.c: 162: unsigned int my_value = value + 1;
 21291                           
 21292                           ;incstack = 0
 21293  0057D6  0E01               	movlw	1
 21294  0057D8  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
 21295  0057DA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 21296  0057DC  0E00               	movlw	0
 21297  0057DE  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
 21298  0057E0  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 21299                           
 21300                           ;eusart1.c: 163: if (my_value >= modulus) {
 21301  0057E2  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
 21302  0057E4  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
 21303  0057E6  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
 21304  0057E8  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
 21305  0057EA  A0D8               	btfss	status,0,c
 21306  0057EC  D004               	goto	i2l6543
 21307                           
 21308                           ;eusart1.c: 164: my_value = 0;
 21309  0057EE  0E00               	movlw	0
 21310  0057F0  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
 21311  0057F2  0E00               	movlw	0
 21312  0057F4  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
 21313  0057F6                     i2l6543:
 21314                           
 21315                           ;eusart1.c: 165: }
 21316                           ;eusart1.c: 166: return (my_value);
 21317  0057F6  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
 21318  0057FA  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
 21319  0057FE  0012               	return	
 21320  005800                     __end_ofi2_UART_buff_modulo_inc:
 21321                           	opt stack 0
 21322                           pclatu	equ	0xFFB
 21323                           pclath	equ	0xFFA
 21324                           tblptru	equ	0xFF8
 21325                           tblptrh	equ	0xFF7
 21326                           tblptrl	equ	0xFF6
 21327                           tablat	equ	0xFF5
 21328                           prodh	equ	0xFF4
 21329                           prodl	equ	0xFF3
 21330                           intcon	equ	0xFF2
 21331                           intcon2	equ	0xFF1
 21332                           indf0	equ	0xFEF
 21333                           postinc0	equ	0xFEE
 21334                           fsr0h	equ	0xFEA
 21335                           fsr0l	equ	0xFE9
 21336                           wreg	equ	0xFE8
 21337                           postinc1	equ	0xFE6
 21338                           postdec1	equ	0xFE5
 21339                           plusw1	equ	0xFE3
 21340                           fsr1h	equ	0xFE2
 21341                           fsr1l	equ	0xFE1
 21342                           indf2	equ	0xFDF
 21343                           postinc2	equ	0xFDE
 21344                           postdec2	equ	0xFDD
 21345                           plusw2	equ	0xFDB
 21346                           fsr2h	equ	0xFDA
 21347                           fsr2l	equ	0xFD9
 21348                           status	equ	0xFD8
 21349                           
 21350 ;; *************** function _ECCP2_CaptureISR *****************
 21351 ;; Defined at:
 21352 ;;		line 80 in file "mcc_generated_files/eccp2.c"
 21353 ;; Parameters:    Size  Location     Type
 21354 ;;		None
 21355 ;; Auto vars:     Size  Location     Type
 21356 ;;  module          2    2[COMRAM] struct CCPR2Reg_tag
 21357 ;; Return value:  Size  Location     Type
 21358 ;;                  1    wreg      void 
 21359 ;; Registers used:
 21360 ;;		cstack
 21361 ;; Tracked objects:
 21362 ;;		On entry : 0/0
 21363 ;;		On exit  : 0/0
 21364 ;;		Unchanged: 0/0
 21365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21366 ;;      Params:         0       0       0       0       0       0       0
 21367 ;;      Locals:         2       0       0       0       0       0       0
 21368 ;;      Temps:          0       0       0       0       0       0       0
 21369 ;;      Totals:         2       0       0       0       0       0       0
 21370 ;;Total ram usage:        2 bytes
 21371 ;; Hardware stack levels used:    1
 21372 ;; Hardware stack levels required when called:    1
 21373 ;; This function calls:
 21374 ;;		_ECCP2_CallBack
 21375 ;; This function is called by:
 21376 ;;		_INTERRUPT_InterruptManager
 21377 ;; This function uses a non-reentrant model
 21378 ;;
 21379                           
 21380                           	psect	text73
 21381  0058B0                     __ptext73:
 21382                           	opt stack 0
 21383  0058B0                     _ECCP2_CaptureISR:
 21384                           	opt stack 21
 21385                           
 21386                           ;eccp2.c: 81: CCP_PERIOD_REG_T module;
 21387                           ;eccp2.c: 84: PIR2bits.CCP2IF = 0;
 21388                           
 21389                           ;incstack = 0
 21390  0058B0  90A1               	bcf	4001,0,c	;volatile
 21391                           
 21392                           ;eccp2.c: 87: module.ccpr2l = CCPR2L;
 21393  0058B2  CF67 F003          	movff	3943,ECCP2_CaptureISR@module	;volatile
 21394                           
 21395                           ;eccp2.c: 88: module.ccpr2h = CCPR2H;
 21396  0058B6  CF68 F004          	movff	3944,ECCP2_CaptureISR@module+1	;volatile
 21397                           
 21398                           ;eccp2.c: 91: ECCP2_CallBack(module.ccpr2_16Bit);
 21399  0058BA  C003  F001         	movff	ECCP2_CaptureISR@module,ECCP2_CallBack@capturedValue
 21400  0058BE  C004  F002         	movff	ECCP2_CaptureISR@module+1,ECCP2_CallBack@capturedValue+1
 21401  0058C2  ECAD  F02C         	call	_ECCP2_CallBack	;wreg free
 21402  0058C6  0012               	return		;funcret
 21403  0058C8                     __end_of_ECCP2_CaptureISR:
 21404                           	opt stack 0
 21405                           pclatu	equ	0xFFB
 21406                           pclath	equ	0xFFA
 21407                           tblptru	equ	0xFF8
 21408                           tblptrh	equ	0xFF7
 21409                           tblptrl	equ	0xFF6
 21410                           tablat	equ	0xFF5
 21411                           prodh	equ	0xFF4
 21412                           prodl	equ	0xFF3
 21413                           intcon	equ	0xFF2
 21414                           intcon2	equ	0xFF1
 21415                           indf0	equ	0xFEF
 21416                           postinc0	equ	0xFEE
 21417                           fsr0h	equ	0xFEA
 21418                           fsr0l	equ	0xFE9
 21419                           wreg	equ	0xFE8
 21420                           postinc1	equ	0xFE6
 21421                           postdec1	equ	0xFE5
 21422                           plusw1	equ	0xFE3
 21423                           fsr1h	equ	0xFE2
 21424                           fsr1l	equ	0xFE1
 21425                           indf2	equ	0xFDF
 21426                           postinc2	equ	0xFDE
 21427                           postdec2	equ	0xFDD
 21428                           plusw2	equ	0xFDB
 21429                           fsr2h	equ	0xFDA
 21430                           fsr2l	equ	0xFD9
 21431                           status	equ	0xFD8
 21432                           
 21433 ;; *************** function _ECCP2_CallBack *****************
 21434 ;; Defined at:
 21435 ;;		line 94 in file "mcc_generated_files/eccp2.c"
 21436 ;; Parameters:    Size  Location     Type
 21437 ;;  capturedValu    2    0[COMRAM] unsigned int 
 21438 ;; Auto vars:     Size  Location     Type
 21439 ;;		None
 21440 ;; Return value:  Size  Location     Type
 21441 ;;                  1    wreg      void 
 21442 ;; Registers used:
 21443 ;;		None
 21444 ;; Tracked objects:
 21445 ;;		On entry : 0/0
 21446 ;;		On exit  : 0/0
 21447 ;;		Unchanged: 0/0
 21448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21449 ;;      Params:         2       0       0       0       0       0       0
 21450 ;;      Locals:         0       0       0       0       0       0       0
 21451 ;;      Temps:          0       0       0       0       0       0       0
 21452 ;;      Totals:         2       0       0       0       0       0       0
 21453 ;;Total ram usage:        2 bytes
 21454 ;; Hardware stack levels used:    1
 21455 ;; This function calls:
 21456 ;;		Nothing
 21457 ;; This function is called by:
 21458 ;;		_ECCP2_CaptureISR
 21459 ;; This function uses a non-reentrant model
 21460 ;;
 21461                           
 21462                           	psect	text74
 21463  00595A                     __ptext74:
 21464                           	opt stack 0
 21465  00595A                     _ECCP2_CallBack:
 21466                           	opt stack 21
 21467                           
 21468                           ;incstack = 0
 21469  00595A  0012               	return		;funcret
 21470  00595C                     __end_of_ECCP2_CallBack:
 21471                           	opt stack 0
 21472                           pclatu	equ	0xFFB
 21473                           pclath	equ	0xFFA
 21474                           tblptru	equ	0xFF8
 21475                           tblptrh	equ	0xFF7
 21476                           tblptrl	equ	0xFF6
 21477                           tablat	equ	0xFF5
 21478                           prodh	equ	0xFF4
 21479                           prodl	equ	0xFF3
 21480                           intcon	equ	0xFF2
 21481                           intcon2	equ	0xFF1
 21482                           indf0	equ	0xFEF
 21483                           postinc0	equ	0xFEE
 21484                           fsr0h	equ	0xFEA
 21485                           fsr0l	equ	0xFE9
 21486                           wreg	equ	0xFE8
 21487                           postinc1	equ	0xFE6
 21488                           postdec1	equ	0xFE5
 21489                           plusw1	equ	0xFE3
 21490                           fsr1h	equ	0xFE2
 21491                           fsr1l	equ	0xFE1
 21492                           indf2	equ	0xFDF
 21493                           postinc2	equ	0xFDE
 21494                           postdec2	equ	0xFDD
 21495                           plusw2	equ	0xFDB
 21496                           fsr2h	equ	0xFDA
 21497                           fsr2l	equ	0xFD9
 21498                           status	equ	0xFD8
 21499                           
 21500 ;; *************** function _ECCP1_CaptureISR *****************
 21501 ;; Defined at:
 21502 ;;		line 80 in file "mcc_generated_files/eccp1.c"
 21503 ;; Parameters:    Size  Location     Type
 21504 ;;		None
 21505 ;; Auto vars:     Size  Location     Type
 21506 ;;  module          2    2[COMRAM] struct CCPR1Reg_tag
 21507 ;; Return value:  Size  Location     Type
 21508 ;;                  1    wreg      void 
 21509 ;; Registers used:
 21510 ;;		cstack
 21511 ;; Tracked objects:
 21512 ;;		On entry : 0/0
 21513 ;;		On exit  : 0/0
 21514 ;;		Unchanged: 0/0
 21515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21516 ;;      Params:         0       0       0       0       0       0       0
 21517 ;;      Locals:         2       0       0       0       0       0       0
 21518 ;;      Temps:          0       0       0       0       0       0       0
 21519 ;;      Totals:         2       0       0       0       0       0       0
 21520 ;;Total ram usage:        2 bytes
 21521 ;; Hardware stack levels used:    1
 21522 ;; Hardware stack levels required when called:    1
 21523 ;; This function calls:
 21524 ;;		_ECCP1_CallBack
 21525 ;; This function is called by:
 21526 ;;		_INTERRUPT_InterruptManager
 21527 ;; This function uses a non-reentrant model
 21528 ;;
 21529                           
 21530                           	psect	text75
 21531  0058C8                     __ptext75:
 21532                           	opt stack 0
 21533  0058C8                     _ECCP1_CaptureISR:
 21534                           	opt stack 21
 21535                           
 21536                           ;eccp1.c: 81: CCP_PERIOD_REG_T module;
 21537                           ;eccp1.c: 84: PIR1bits.CCP1IF = 0;
 21538                           
 21539                           ;incstack = 0
 21540  0058C8  949E               	bcf	3998,2,c	;volatile
 21541                           
 21542                           ;eccp1.c: 87: module.ccpr1l = CCPR1L;
 21543  0058CA  CFBE F003          	movff	4030,ECCP1_CaptureISR@module	;volatile
 21544                           
 21545                           ;eccp1.c: 88: module.ccpr1h = CCPR1H;
 21546  0058CE  CFBF F004          	movff	4031,ECCP1_CaptureISR@module+1	;volatile
 21547                           
 21548                           ;eccp1.c: 91: ECCP1_CallBack(module.ccpr1_16Bit);
 21549  0058D2  C003  F001         	movff	ECCP1_CaptureISR@module,ECCP1_CallBack@capturedValue
 21550  0058D6  C004  F002         	movff	ECCP1_CaptureISR@module+1,ECCP1_CallBack@capturedValue+1
 21551  0058DA  ECAE  F02C         	call	_ECCP1_CallBack	;wreg free
 21552  0058DE  0012               	return		;funcret
 21553  0058E0                     __end_of_ECCP1_CaptureISR:
 21554                           	opt stack 0
 21555                           pclatu	equ	0xFFB
 21556                           pclath	equ	0xFFA
 21557                           tblptru	equ	0xFF8
 21558                           tblptrh	equ	0xFF7
 21559                           tblptrl	equ	0xFF6
 21560                           tablat	equ	0xFF5
 21561                           prodh	equ	0xFF4
 21562                           prodl	equ	0xFF3
 21563                           intcon	equ	0xFF2
 21564                           intcon2	equ	0xFF1
 21565                           indf0	equ	0xFEF
 21566                           postinc0	equ	0xFEE
 21567                           fsr0h	equ	0xFEA
 21568                           fsr0l	equ	0xFE9
 21569                           wreg	equ	0xFE8
 21570                           postinc1	equ	0xFE6
 21571                           postdec1	equ	0xFE5
 21572                           plusw1	equ	0xFE3
 21573                           fsr1h	equ	0xFE2
 21574                           fsr1l	equ	0xFE1
 21575                           indf2	equ	0xFDF
 21576                           postinc2	equ	0xFDE
 21577                           postdec2	equ	0xFDD
 21578                           plusw2	equ	0xFDB
 21579                           fsr2h	equ	0xFDA
 21580                           fsr2l	equ	0xFD9
 21581                           status	equ	0xFD8
 21582                           
 21583 ;; *************** function _ECCP1_CallBack *****************
 21584 ;; Defined at:
 21585 ;;		line 94 in file "mcc_generated_files/eccp1.c"
 21586 ;; Parameters:    Size  Location     Type
 21587 ;;  capturedValu    2    0[COMRAM] unsigned int 
 21588 ;; Auto vars:     Size  Location     Type
 21589 ;;		None
 21590 ;; Return value:  Size  Location     Type
 21591 ;;                  1    wreg      void 
 21592 ;; Registers used:
 21593 ;;		None
 21594 ;; Tracked objects:
 21595 ;;		On entry : 0/0
 21596 ;;		On exit  : 0/0
 21597 ;;		Unchanged: 0/0
 21598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21599 ;;      Params:         2       0       0       0       0       0       0
 21600 ;;      Locals:         0       0       0       0       0       0       0
 21601 ;;      Temps:          0       0       0       0       0       0       0
 21602 ;;      Totals:         2       0       0       0       0       0       0
 21603 ;;Total ram usage:        2 bytes
 21604 ;; Hardware stack levels used:    1
 21605 ;; This function calls:
 21606 ;;		Nothing
 21607 ;; This function is called by:
 21608 ;;		_ECCP1_CaptureISR
 21609 ;; This function uses a non-reentrant model
 21610 ;;
 21611                           
 21612                           	psect	text76
 21613  00595C                     __ptext76:
 21614                           	opt stack 0
 21615  00595C                     _ECCP1_CallBack:
 21616                           	opt stack 21
 21617                           
 21618                           ;incstack = 0
 21619  00595C  0012               	return		;funcret
 21620  00595E                     __end_of_ECCP1_CallBack:
 21621                           	opt stack 0
 21622                           pclatu	equ	0xFFB
 21623                           pclath	equ	0xFFA
 21624                           tblptru	equ	0xFF8
 21625                           tblptrh	equ	0xFF7
 21626                           tblptrl	equ	0xFF6
 21627                           tablat	equ	0xFF5
 21628                           prodh	equ	0xFF4
 21629                           prodl	equ	0xFF3
 21630                           intcon	equ	0xFF2
 21631                           intcon2	equ	0xFF1
 21632                           indf0	equ	0xFEF
 21633                           postinc0	equ	0xFEE
 21634                           fsr0h	equ	0xFEA
 21635                           fsr0l	equ	0xFE9
 21636                           wreg	equ	0xFE8
 21637                           postinc1	equ	0xFE6
 21638                           postdec1	equ	0xFE5
 21639                           plusw1	equ	0xFE3
 21640                           fsr1h	equ	0xFE2
 21641                           fsr1l	equ	0xFE1
 21642                           indf2	equ	0xFDF
 21643                           postinc2	equ	0xFDE
 21644                           postdec2	equ	0xFDD
 21645                           plusw2	equ	0xFDB
 21646                           fsr2h	equ	0xFDA
 21647                           fsr2l	equ	0xFD9
 21648                           status	equ	0xFD8
 21649                           
 21650 ;; *************** function _ADC_ISR *****************
 21651 ;; Defined at:
 21652 ;;		line 121 in file "mcc_generated_files/adc.c"
 21653 ;; Parameters:    Size  Location     Type
 21654 ;;		None
 21655 ;; Auto vars:     Size  Location     Type
 21656 ;;		None
 21657 ;; Return value:  Size  Location     Type
 21658 ;;                  1    wreg      void 
 21659 ;; Registers used:
 21660 ;;		None
 21661 ;; Tracked objects:
 21662 ;;		On entry : 0/0
 21663 ;;		On exit  : 0/0
 21664 ;;		Unchanged: 0/0
 21665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21666 ;;      Params:         0       0       0       0       0       0       0
 21667 ;;      Locals:         0       0       0       0       0       0       0
 21668 ;;      Temps:          0       0       0       0       0       0       0
 21669 ;;      Totals:         0       0       0       0       0       0       0
 21670 ;;Total ram usage:        0 bytes
 21671 ;; Hardware stack levels used:    1
 21672 ;; This function calls:
 21673 ;;		Nothing
 21674 ;; This function is called by:
 21675 ;;		_INTERRUPT_InterruptManager
 21676 ;; This function uses a non-reentrant model
 21677 ;;
 21678                           
 21679                           	psect	text77
 21680  005950                     __ptext77:
 21681                           	opt stack 0
 21682  005950                     _ADC_ISR:
 21683                           	opt stack 22
 21684                           
 21685                           ;adc.c: 123: PIR1bits.ADIF = 0;
 21686                           
 21687                           ;incstack = 0
 21688  005950  9C9E               	bcf	3998,6,c	;volatile
 21689  005952  0012               	return		;funcret
 21690  005954                     __end_of_ADC_ISR:
 21691                           	opt stack 0
 21692                           pclatu	equ	0xFFB
 21693                           pclath	equ	0xFFA
 21694                           tblptru	equ	0xFF8
 21695                           tblptrh	equ	0xFF7
 21696                           tblptrl	equ	0xFF6
 21697                           tablat	equ	0xFF5
 21698                           prodh	equ	0xFF4
 21699                           prodl	equ	0xFF3
 21700                           intcon	equ	0xFF2
 21701                           intcon2	equ	0xFF1
 21702                           indf0	equ	0xFEF
 21703                           postinc0	equ	0xFEE
 21704                           fsr0h	equ	0xFEA
 21705                           fsr0l	equ	0xFE9
 21706                           wreg	equ	0xFE8
 21707                           postinc1	equ	0xFE6
 21708                           postdec1	equ	0xFE5
 21709                           plusw1	equ	0xFE3
 21710                           fsr1h	equ	0xFE2
 21711                           fsr1l	equ	0xFE1
 21712                           indf2	equ	0xFDF
 21713                           postinc2	equ	0xFDE
 21714                           postdec2	equ	0xFDD
 21715                           plusw2	equ	0xFDB
 21716                           fsr2h	equ	0xFDA
 21717                           fsr2l	equ	0xFD9
 21718                           status	equ	0xFD8
 21719                           pclatu	equ	0xFFB
 21720                           pclath	equ	0xFFA
 21721                           tblptru	equ	0xFF8
 21722                           tblptrh	equ	0xFF7
 21723                           tblptrl	equ	0xFF6
 21724                           tablat	equ	0xFF5
 21725                           prodh	equ	0xFF4
 21726                           prodl	equ	0xFF3
 21727                           intcon	equ	0xFF2
 21728                           intcon2	equ	0xFF1
 21729                           indf0	equ	0xFEF
 21730                           postinc0	equ	0xFEE
 21731                           fsr0h	equ	0xFEA
 21732                           fsr0l	equ	0xFE9
 21733                           wreg	equ	0xFE8
 21734                           postinc1	equ	0xFE6
 21735                           postdec1	equ	0xFE5
 21736                           plusw1	equ	0xFE3
 21737                           fsr1h	equ	0xFE2
 21738                           fsr1l	equ	0xFE1
 21739                           indf2	equ	0xFDF
 21740                           postinc2	equ	0xFDE
 21741                           postdec2	equ	0xFDD
 21742                           plusw2	equ	0xFDB
 21743                           fsr2h	equ	0xFDA
 21744                           fsr2l	equ	0xFD9
 21745                           status	equ	0xFD8
 21746                           
 21747                           	psect	text78
 21748  000000                     __ptext78:
 21749                           	opt stack 0
 21750                           pclatu	equ	0xFFB
 21751                           pclath	equ	0xFFA
 21752                           tblptru	equ	0xFF8
 21753                           tblptrh	equ	0xFF7
 21754                           tblptrl	equ	0xFF6
 21755                           tablat	equ	0xFF5
 21756                           prodh	equ	0xFF4
 21757                           prodl	equ	0xFF3
 21758                           intcon	equ	0xFF2
 21759                           intcon2	equ	0xFF1
 21760                           indf0	equ	0xFEF
 21761                           postinc0	equ	0xFEE
 21762                           fsr0h	equ	0xFEA
 21763                           fsr0l	equ	0xFE9
 21764                           wreg	equ	0xFE8
 21765                           postinc1	equ	0xFE6
 21766                           postdec1	equ	0xFE5
 21767                           plusw1	equ	0xFE3
 21768                           fsr1h	equ	0xFE2
 21769                           fsr1l	equ	0xFE1
 21770                           indf2	equ	0xFDF
 21771                           postinc2	equ	0xFDE
 21772                           postdec2	equ	0xFDD
 21773                           plusw2	equ	0xFDB
 21774                           fsr2h	equ	0xFDA
 21775                           fsr2l	equ	0xFD9
 21776                           status	equ	0xFD8
 21777                           
 21778                           	psect	rparam
 21779  0000                     pclatu	equ	0xFFB
 21780                           pclath	equ	0xFFA
 21781                           tblptru	equ	0xFF8
 21782                           tblptrh	equ	0xFF7
 21783                           tblptrl	equ	0xFF6
 21784                           tablat	equ	0xFF5
 21785                           prodh	equ	0xFF4
 21786                           prodl	equ	0xFF3
 21787                           intcon	equ	0xFF2
 21788                           intcon2	equ	0xFF1
 21789                           indf0	equ	0xFEF
 21790                           postinc0	equ	0xFEE
 21791                           fsr0h	equ	0xFEA
 21792                           fsr0l	equ	0xFE9
 21793                           wreg	equ	0xFE8
 21794                           postinc1	equ	0xFE6
 21795                           postdec1	equ	0xFE5
 21796                           plusw1	equ	0xFE3
 21797                           fsr1h	equ	0xFE2
 21798                           fsr1l	equ	0xFE1
 21799                           indf2	equ	0xFDF
 21800                           postinc2	equ	0xFDE
 21801                           postdec2	equ	0xFDD
 21802                           plusw2	equ	0xFDB
 21803                           fsr2h	equ	0xFDA
 21804                           fsr2l	equ	0xFD9
 21805                           status	equ	0xFD8
 21806                           
 21807                           	psect	temp
 21808  000045                     btemp:
 21809                           	opt stack 0
 21810  000045                     	ds	1
 21811  0000                     int$flags	set	btemp
 21812                           pclatu	equ	0xFFB
 21813                           pclath	equ	0xFFA
 21814                           tblptru	equ	0xFF8
 21815                           tblptrh	equ	0xFF7
 21816                           tblptrl	equ	0xFF6
 21817                           tablat	equ	0xFF5
 21818                           prodh	equ	0xFF4
 21819                           prodl	equ	0xFF3
 21820                           intcon	equ	0xFF2
 21821                           intcon2	equ	0xFF1
 21822                           indf0	equ	0xFEF
 21823                           postinc0	equ	0xFEE
 21824                           fsr0h	equ	0xFEA
 21825                           fsr0l	equ	0xFE9
 21826                           wreg	equ	0xFE8
 21827                           postinc1	equ	0xFE6
 21828                           postdec1	equ	0xFE5
 21829                           plusw1	equ	0xFE3
 21830                           fsr1h	equ	0xFE2
 21831                           fsr1l	equ	0xFE1
 21832                           indf2	equ	0xFDF
 21833                           postinc2	equ	0xFDE
 21834                           postdec2	equ	0xFDD
 21835                           plusw2	equ	0xFDB
 21836                           fsr2h	equ	0xFDA
 21837                           fsr2l	equ	0xFD9
 21838                           status	equ	0xFD8


Data Sizes:
    Strings     1727
    Constant    198
    Data        36
    BSS         986
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      68
    BANK0           160    152     160
    BANK1           256      0     255
    BANK2           256     14     255
    BANK3           256     50     136
    BANK4           256      0     206
    BANK5           256      0     200

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    i2c1_tr_queue.pTrFlag	PTR enum E7739 size(2) Largest target is 0
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 
		 -> I2CreadByte@status(COMRAM[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    memset@p1	PTR void  size(2) Largest target is 206
		 -> ring_buffer(BANK4[206]), output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK4[206]), output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    printf$2727	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_55(CODE[17]), STR_54(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_53(CODE[7]), printf@c(BANK0[1]), magBias(BANK2[9]), gyroBias(BANK1[9]), 
		 -> accelBias(BANK1[9]), I2C1_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 86
		 -> STR_52(CODE[22]), STR_51(CODE[59]), STR_50(CODE[29]), STR_49(CODE[86]), 
		 -> STR_48(CODE[16]), STR_47(CODE[18]), STR_46(CODE[34]), STR_45(CODE[17]), 
		 -> STR_44(CODE[38]), STR_43(CODE[36]), STR_42(CODE[27]), STR_41(CODE[37]), 
		 -> STR_40(CODE[39]), STR_39(CODE[60]), STR_38(CODE[25]), STR_37(CODE[34]), 
		 -> STR_36(CODE[32]), STR_35(CODE[24]), STR_34(CODE[28]), STR_33(CODE[32]), 
		 -> STR_32(CODE[36]), STR_31(CODE[33]), STR_30(CODE[22]), STR_29(CODE[34]), 
		 -> STR_28(CODE[39]), STR_27(CODE[31]), STR_26(CODE[31]), STR_25(CODE[31]), 
		 -> STR_24(CODE[31]), STR_23(CODE[41]), STR_22(CODE[36]), STR_21(CODE[29]), 
		 -> STR_20(CODE[37]), STR_19(CODE[21]), STR_18(CODE[23]), STR_17(CODE[27]), 
		 -> STR_16(CODE[29]), STR_15(CODE[30]), STR_14(CODE[32]), STR_13(CODE[31]), 
		 -> STR_12(CODE[33]), STR_11(CODE[30]), STR_10(CODE[18]), STR_9(CODE[31]), 
		 -> STR_8(CODE[20]), STR_7(CODE[40]), STR_6(CODE[38]), STR_5(CODE[38]), 
		 -> STR_4(CODE[39]), STR_3(CODE[25]), STR_2(CODE[24]), STR_1(CODE[33]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    readBytes@dest	PTR unsigned char  size(2) Largest target is 8
		 -> magCalBNO055@data(BANK0[6]), accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), 
		 -> readEulData@rawData(BANK0[6]), readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), 
		 -> readAccelData@rawData(BANK0[6]), 

    magCalBNO055@dest1	PTR float  size(2) Largest target is 9
		 -> magBias(BANK2[9]), 

    accelgyroCalBNO055@dest2	PTR float  size(2) Largest target is 9
		 -> gyroBias(BANK1[9]), 

    accelgyroCalBNO055@dest1	PTR float  size(2) Largest target is 9
		 -> accelBias(BANK1[9]), 

    readGRVData@destination	PTR int  size(2) Largest target is 6
		 -> GRVCount(BANK1[6]), 

    readLIAData@destination	PTR int  size(2) Largest target is 6
		 -> LIACount(BANK1[6]), 

    readEulData@destination	PTR int  size(2) Largest target is 6
		 -> EulCount(BANK1[6]), 

    readQuatData@destination	PTR int  size(2) Largest target is 8
		 -> quatCount(BANK1[8]), 

    readMagData@destination	PTR int  size(2) Largest target is 6
		 -> magCount(BANK1[6]), 

    readGyroData@destination	PTR int  size(2) Largest target is 6
		 -> gyroCount(BANK1[6]), 

    readAccelData@destination	PTR int  size(2) Largest target is 6
		 -> accelCount(BANK1[6]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> ring_buffer(BANK4[206]), NULL(NULL[0]), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), Send_put(), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 10
		 -> receiveArray(BANK2[10]), NULL(NULL[0]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 86
		 -> output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 86
		 -> output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 86
		 -> output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> ring_buffer(BANK4[206]), output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 86
		 -> output_buffer(BANK3[86]), input_buffer(BANK2[86]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 3
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), I2CwriteByte@Data(COMRAM[3]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterWrite@trBlock(BANK1[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 1535
		 -> readByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), 
		 -> readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), 
		 -> readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), RAM(DATA[1535]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 
		 -> I2CreadByte@status(COMRAM[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 
		 -> I2CreadByte@status(COMRAM[1]), 

    I2C1_MasterRead@pflag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), I2CreadByte@status(COMRAM[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 1535
		 -> readByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), 
		 -> readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), 
		 -> readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), RAM(DATA[1535]), 

    F7851.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    I2C1_MasterWrite@pflag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(2) Largest target is 3
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), I2CwriteByte@Data(COMRAM[3]), 

    F7846.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), I2C1_ISR@i2c_address(BANK0[2]), NULL(NULL[0]), 

    S21$pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 1535
		 -> readBytes@Data(BANK0[3]), readByte@Data(BANK0[3]), writeByte@Data(BANK0[3]), magCalBNO055@data(BANK0[6]), 
		 -> accelgyroCalBNO055@data(BANK3[6]), readGRVData@rawData(BANK0[6]), readLIAData@rawData(BANK0[6]), readEulData@rawData(BANK0[6]), 
		 -> readQuatData@rawData(BANK0[8]), readMagData@rawData(BANK0[6]), readGyroData@rawData(BANK0[6]), readAccelData@rawData(BANK0[6]), 
		 -> I2CwriteByte@Data(COMRAM[3]), RAM(DATA[1535]), 

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 
		 -> I2CreadByte@status(COMRAM[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    S33$pTrFlag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 
		 -> I2CreadByte@status(COMRAM[1]), 

    p_i2c1_current.pTrFlag	PTR enum E7739 size(2) Largest target is 1
		 -> readBytes@status(BANK0[1]), readByte@status(BANK0[1]), writeByte@status(BANK0[1]), I2CwriteByte@status(COMRAM[1]), 
		 -> I2CreadByte@status(COMRAM[1]), 

    S33$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK1[5]), I2C1_MasterWrite@trBlock(BANK1[5]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK1[5]), NULL(NULL[0]), 

    S44$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK1[5]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK1[5]), 

    S44$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK1[5]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK1[5]), 


Critical Paths under _main in COMRAM

    _loop->___altoft
    ___awtoft->___ftpack
    _readByte->_I2C1_MasterRead
    _readByte->_I2C1_MasterWrite
    _magCalBNO055->___altoft
    _accelgyroCalBNO055->___altoft
    _writeByte->_I2C1_MasterWrite
    _readBytes->_I2C1_MasterRead
    _readBytes->_I2C1_MasterWrite
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _printf->___altoft
    _printf->___lltoft
    _printf->___wmul
    _scale->___wmul
    _putch->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _UART_buff_get->_UART_buff_modulo_inc
    _fround->___wmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___lltoft
    ___ftge->___altoft
    ___ftdiv->___altoft
    ___altoft->___ftpack
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _I2C1_ISR->_I2C1_Stop
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc
    _ECCP2_CaptureISR->_ECCP2_CallBack
    _ECCP1_CaptureISR->_ECCP1_CallBack

Critical Paths under _main in BANK0

    _loop->_printf
    _readQuatData->_readBytes
    _readMagData->_readBytes
    _readLIAData->_readBytes
    _readGyroTempData->_readByte
    _readGyroData->_readBytes
    _readGRVData->_readBytes
    _readEulData->_readBytes
    _readAccelData->_readBytes
    _Setup->_magCalBNO055
    _sqrt->___ftsub
    _magCalBNO055->_printf
    _initBNO055->_writeByte
    _accelgyroCalBNO055->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___wmul
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___ftge->___altoft
    ___ftdiv->___altoft

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_Setup

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _Setup->_accelgyroCalBNO055

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  483546
                                            151 BANK0      1     1      0
                              _Delay
                 _EUSART1_Initialize
                    _I2C1_Initialize
                  _SYSTEM_Initialize
                              _Setup
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 6     6      0  159066
                                            104 BANK0      6     6      0
                              _Delay
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             _printf
                      _readAccelData
                           _readByte
                        _readEulData
                        _readGRVData
                       _readGyroData
                   _readGyroTempData
                        _readLIAData
                        _readMagData
                       _readQuatData
 ---------------------------------------------------------------------------------
 (2) _readQuatData                                        12    10      2    7852
                                             10 BANK0     12    10      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readMagData                                         10     8      2    7753
                                             10 BANK0     10     8      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readLIAData                                         10     8      2    7753
                                             10 BANK0     10     8      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readGyroTempData                                     0     0      0    5956
                           _readByte
 ---------------------------------------------------------------------------------
 (2) _readGyroData                                        10     8      2    7753
                                             10 BANK0     10     8      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readGRVData                                         10     8      2    7753
                                             10 BANK0     10     8      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readEulData                                         10     8      2    7753
                                             10 BANK0     10     8      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) _readAccelData                                       10     8      2    7753
                                             10 BANK0     10     8      2
                          _readBytes
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    4488
                                             34 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _Setup                                               17    17      0  321046
                                              0 BANK2     14    14      0
                              _Delay
                            ___ftmul
                 _accelgyroCalBNO055
                         _initBNO055
                       _magCalBNO055
                             _printf
                           _readByte
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                19    16      3   13005
                                             47 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (3) _readByte                                             8     7      1    5956
                                              0 BANK0      7     6      1
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (2) _magCalBNO055                                        47    45      2  104667
                                            104 BANK0     47    45      2
                              _Delay
                           ___altoft
                            ___awdiv
                            ___ftdiv
                             _printf
                          _readBytes
                          _writeByte
 ---------------------------------------------------------------------------------
 (2) _initBNO055                                           1     1      0   11822
                                              8 BANK0      1     1      0
                              _Delay
                          _writeByte
 ---------------------------------------------------------------------------------
 (2) _accelgyroCalBNO055                                  58    54      4  105079
                                            104 BANK0      8     4      4
                                              0 BANK3     50    50      0
                              _Delay
                            ___aldiv
                           ___altoft
                            ___ftdiv
                             ___ftge
                             _printf
                          _readBytes
                          _writeByte
 ---------------------------------------------------------------------------------
 (3) _writeByte                                            8     6      2    9213
                                              0 BANK0      8     6      2
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _readBytes                                           10     6      4    7342
                                              0 BANK0     10     6      4
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterWrite                                     7     0      7    2375
                                             35 COMRAM     7     0      7
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWriteTRBBuild                             9     2      7     494
                                             26 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (4) _I2C1_MasterRead                                      7     0      7    2098
                                             35 COMRAM     7     0      7
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterTRBInsert                                 6     2      4     494
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterReadTRBBuild                              9     2      7     525
                                             26 COMRAM     9     2      7
 ---------------------------------------------------------------------------------
 (2) _printf                                              58    47     11   70798
                                             47 BANK0     57    46     11
                           ___altoft (ARG)
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   14541
                                             19 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    2645
                                             38 COMRAM     1     1      0
                           _Send_put
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             26 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   14262
                                             19 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3004
                                             40 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    6420
                                              4 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2601
                                             32 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             26 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             26 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             34 COMRAM     8     4      4
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             39 COMRAM     1     1      0
                                              0 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             26 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     602
                                             26 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4903
                                             41 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4385
                                             29 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             26 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     968
                                              2 BANK0      9     3      6
                           ___altoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    6352
                                              2 BANK0     15     9      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    3712
                                             34 COMRAM     8     4      4
                                              0 BANK0      2     2      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             26 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             14     6      8    1369
                                             26 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _Delay                                                5     3      2    2609
                                             26 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   0     0      0     822
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (2) _UART_buff_init                                       2     0      2     822
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     672
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          14    14      0    1564
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                   _ECCP1_CaptureISR
                   _ECCP2_CaptureISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0       0
                      _TMR2_CallBack
 ---------------------------------------------------------------------------------
 (10) _TMR2_CallBack                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_ISR                                             2     2      0      31
                                              3 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (10) _I2C1_Stop                                           3     3      0      31
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) _I2C1_FunctionComplete                               0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0     630
                     _UART_buff_size
                    i2_UART_buff_get
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_get                                     5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) _UART_buff_size                                      2     0      2     150
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_put                                     5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (11) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _ECCP2_CaptureISR                                     2     2      0     111
                                              2 COMRAM     2     2      0
                     _ECCP2_CallBack
 ---------------------------------------------------------------------------------
 (10) _ECCP2_CallBack                                      2     0      2      64
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _ECCP1_CaptureISR                                     2     2      0     111
                                              2 COMRAM     2     2      0
                     _ECCP1_CallBack
 ---------------------------------------------------------------------------------
 (10) _ECCP1_CallBack                                      2     0      2      64
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay
   _EUSART1_Initialize
     _UART_buff_init
       _memset
   _I2C1_Initialize
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _Setup
     _Delay
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _accelgyroCalBNO055
       _Delay
       ___aldiv
       ___altoft
         ___ftpack
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftge
         ___altoft (ARG)
           ___ftpack
       _printf
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___altoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
       _writeByte
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _initBNO055
       _Delay
       _writeByte
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _magCalBNO055
       _Delay
       ___altoft
         ___ftpack
       ___awdiv
         ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       _printf
         ___altoft (ARG)
           ___ftpack
         ___awdiv (ARG)
           ___awmod (ARG)
         ___ftadd (ARG)
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___altoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftsub (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol (ARG)
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv (ARG)
         ___llmod (ARG)
           ___lldiv (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_ (ARG)
         __tdiv_to_l_ (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit (ARG)
         _putch (ARG)
           _Send_put
             _UART_buff_get
               _UART_buff_modulo_inc
             _UART_buff_put
               _UART_buff_modulo_inc
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
       _writeByte
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _printf
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftge (ARG)
         ___altoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _Send_put
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readByte
       _I2C1_MasterRead
         _I2C1_MasterReadTRBBuild
         _I2C1_MasterTRBInsert
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     _sqrt
       ___ftge
         ___altoft (ARG)
           ___ftpack
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
   _loop
     _Delay
     ___altoft
       ___ftpack
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     _printf
       ___altoft (ARG)
         ___ftpack
       ___awdiv (ARG)
         ___awmod (ARG)
       ___ftadd (ARG)
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftge (ARG)
         ___altoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol (ARG)
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv (ARG)
       ___llmod (ARG)
         ___lldiv (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_ (ARG)
       __tdiv_to_l_ (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _Send_put
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readAccelData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readByte
       _I2C1_MasterRead
         _I2C1_MasterReadTRBBuild
         _I2C1_MasterTRBInsert
       _I2C1_MasterWrite
         _I2C1_MasterTRBInsert
         _I2C1_MasterWriteTRBBuild
     _readEulData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readGRVData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readGyroData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readGyroTempData
       _readByte
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readLIAData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readMagData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
     _readQuatData
       _readBytes
         _I2C1_MasterRead
           _I2C1_MasterReadTRBBuild
           _I2C1_MasterTRBInsert
         _I2C1_MasterWrite
           _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _ECCP1_CaptureISR
     _ECCP1_CallBack
   _ECCP2_CaptureISR
     _ECCP2_CallBack
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     _UART_buff_size
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _TMR2_ISR
     _TMR2_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0      C8      15       78.1%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100     32      88      11       53.1%
BITBANK2           100      0       0       7        0.0%
BANK2              100      E      FF       8       99.6%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      FF       6       99.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     98      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      44       1       72.3%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     500       9        0.0%
DATA                 0      0     500      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Aug 14 04:45:39 2016

             i2_UART_buff_modulo_inc 57D6                         ___altoft@exp 0060  
           _eusart1TxBufferRemaining 01A8                                    _q 02D9  
                       _rx_array_inx 003F                        ___altoft@sign 0061  
                       ___awdiv@sign 0026                                   _ax 014C  
                                 _ay 014F                                   _az 0152  
                                 _gx 015E                                   _gy 0161  
                                 _gz 0164                                   _mx 016A  
                                 _my 016D                                   _mz 0170  
                ___wmul@multiplicand 0062            __size_of_readGyroTempData 000E  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                       ___ftadd@exp1 0088                         ___ftadd@exp2 0087  
                       ___ftadd@sign 0086                                  l303 5090  
                                l939 56AC                         __CFG_CPB$OFF 000000  
                                _PR2 000FBB                         __CFG_CPD$OFF 000000  
                                _Abw 0041                                  _Gbw 0042  
                                _Now 010D                                  _Yaw 0146  
                    _timer1ReloadVal 0033                      __end_of_ADC_ISR 5954  
                                _yaw 017C                                  _sum 0179  
                       ___awmod@sign 0020                                  wreg 000FE8  
                        main@address 00F7        i2UART_buff_modulo_inc@modulus 0003  
         __end_of_accelgyroCalBNO055 1C2A                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 006B                     __end_of_I2C1_ISR 3778  
                     magCalBNO055@ii 00E2                       magCalBNO055@jj 00F5  
                       ___ftdiv@sign 0070                                 l1127 2E00  
                               l2112 3A2C                                 l2113 3A18  
                               l1421 0AE6                                 l1343 0306  
                               l1408 09FC                                 l1470 1044  
                               l1393 098E                                 l1802 3942  
                               l1723 41D4                                 l1820 401E  
                               l1813 3E12                                 l1821 4046  
                               l1902 521A                                 l1486 1120  
                               l1912 4FF0                                 l1755 4EA4  
                               l1827 40AC                                 l1852 5816  
                               l1782 381A                                 l1784 3842  
                               l1793 3918                                 l1778 37E0  
                               l8011 4E3E                                 l8021 4E9A  
                               l8013 4E5C                                 l8005 4E26  
                               l8103 37EE                                 l8017 4E72  
                               l8009 4E34                                 l8201 3C9E  
                               l9001 0DEE                                 l8019 4E90  
                               l8131 38A8                                 l8115 3838  
                               l9003 0DF4                                 l8133 38B6  
                               l8125 387A                                 l8109 3828  
                               l8221 513A                                 l8205 3CBC  
                               l9101 112C                                 l8151 396C  
                               l8143 38FE                                 l8135 38C4  
                               l9023 0E80                                 l8063 4922  
                               l8303 54BA                                 l8161 39BA  
                               l8145 390C                                 l8137 38D0  
                               l8233 5160                                 l9113 11B6  
                               l9105 116A                                 l9041 0F26  
                               l9033 0EE4                                 l9017 0E3A  
                               l8065 492E                                 l8235 5168  
                               l8227 514A                                 l8171 3BD8  
                               l9027 0EB0                                 l9019 0E58  
                               l8059 4902                                 l9301 47B4  
                               l8421 4072                                 l8253 51A0  
                               l8245 5188                                 l8237 516C  
                               l8325 34AE                                 l8317 33D6  
                               l9141 139C                                 l9125 12B2  
                               l9117 11CA                                 l9133 1346  
                               l9061 1016                                 l9053 0FCA  
                               l8069 493E                                 l9213 4F14  
                               l8511 4846                                 l8431 409A  
                               l8191 3C60                                 l9119 1248  
                               l9135 1364                                 l9055 0FD4  
                               l9047 0F72                                 l9039 0F1C  
                               l9215 4F1C                                 l9151 4D78  
                               l5785 578A                                 l9313 5254  
                               l8601 4F9C                                 l8441 40DC  
                               l8433 40A6                                 l8425 4082  
                               l8249 5192                                 l8281 52FA  
                               l8273 52DA                                 l8265 52C0  
                               l8177 3C12                                 l8345 3018  
                               l9129 12E8                                 l9137 136C  
                               l9081 10B0                                 l9145 13B6  
                               l9217 4F24                                 l9233 4F64  
                               l9241 5330                                 l9153 4D96  
                               l9315 5262                                 l8507 4806  
                               l8531 3E82                                 l8611 5388  
                               l8275 52E2                                 l8195 3C7E  
                               l8363 3246                                 l8339 2F5E  
                               l9091 10DE                                 l9059 100C  
                               l9219 4F42                                 l9243 534E  
                               l9171 4DC8                                 l5789 579A  
                               l8621 5698                                 l9333 3D70  
                               l8517 488A                                 l8605 4FE0  
                               l8613 5396                                 l8461 413C  
                               l8277 52E6                                 l8285 5304  
                               l8269 52CC                                 l8357 318C  
                               l8349 303E                                 l9077 109E  
                               l9069 1052                                 l9501 195C  
                               l9173 4DE6                                 l9327 3D36  
                               l8447 40FA                                 l8391 3FE4  
                               l8375 583A                                 l9095 10F8  
                               l9087 10CC                                 l8711 038E  
                               l8631 0106                                 l9167 4DB8  
                               l9281 4750                                 l9353 3DD0  
                               l8561 3F54                                 l8553 3F28  
                               l8481 419A                                 l8385 3FB8  
                               l8289 5312                                 l8801 06B2  
                               l8721 03DC                                 l8705 033E  
                               l8633 011C                                 l8297 546E  
                               l9257 5370                                 l9441 14CE  
                               l9601 26C4                                 l9169 4DC0  
                               l9283 475C                                 l9275 472E  
                               l8563 3F5E                                 l8491 41C2  
                               l8803 06C8                                 l8731 040C  
                               l8723 03E6                                 l8707 034A  
                               l8651 0184                                 l8635 0122  
                               l8643 0138                                 l8627 00F0  
                               l9259 5378                                 l9187 4E08  
                               l9293 4790                                 l9285 4760  
                               l9269 4716                                 l8549 3F14  
                               l8581 51DC                                 l8493 41CE  
                               l8485 41AA                                 l8469 416C  
                               l8813 0758                                 l8805 06F8  
                               l8741 045C                                 l8717 03B6  
                               l8709 0350                                 l8637 0128  
                               l9197 4ED4                                 l9461 1620  
                               l9189 4E10                                 l8567 3F7A  
                               l8559 3F44                                 l8911 0AB4  
                               l8831 084A                                 l8807 070E  
                               l8751 04A6                                 l8743 0476  
                               l8727 03EE                                 l8735 0436  
                               l8647 0166                                 l8639 012E  
                               l9199 4EF2                                 l9297 479E  
                               l8577 51CC                                 l8913 0AC8  
                               l8905 0A98                                 l8833 0850  
                               l8817 0786                                 l8729 03F4  
                               l8681 028A                                 l9481 180A  
                               l8499 54EA                                 l8579 51D8  
                               l7971 57CC                                 l8923 0B0E  
                               l8907 0AA6                                 l8851 08E4  
                               l8827 07E4                                 l8763 051E  
                               l8747 048E                                 l8739 0456  
                               l8691 02F6                                 l8755 04AE  
                               l8667 022E                                 l8659 01FC  
                               l9467 173A                                 l8589 520C  
                               l8597 4F88                                 l8925 0B14  
                               l8917 0AEA                                 l8853 08EC  
                               l8845 0896                                 l8773 0564  
                               l8693 02FC                                 l8757 0504  
                               l8685 02D0                                 l9581 2570  
                               l9565 24B0                                 l8599 4F96  
                               l7983 4394                                 l8943 0C5E  
                               l8951 0CA0                                 l8695 0302  
                               l8679 027E                                 l8687 02E6  
                               l9591 266C                                 l9399 3A94  
                               l9727 566A                                 l7977 4328  
                               l8929 0B66                                 l8937 0C42  
                               l8881 0996                                 l8873 096A  
                               l8865 094A                                 l8857 0914  
                               l8697 030C                                 l9593 26A0  
                               l9585 25B0                                 l8963 0D06  
                               l8947 0C84                                 l8939 0C50  
                               l7997 508C                                 l8973 0D56  
                               l8893 09E8                                 l8885 09A4  
                               l8877 0978                                 l8869 095C  
                               l8797 0684                                 l8789 0614  
                               l9589 2628                                 l9597 26B4  
                               l9941 2C08                                 l9933 2BD0  
                               l8975 0D5C                                 l8967 0D2E  
                               l8887 09B8                                 l9951 2C48  
                               l9935 2BE0                                 STR_1 7C81  
                               STR_2 7F0C                                 l9953 2C58  
                               l9945 2C20                                 STR_3 7EC2  
                               STR_4 7AAB                                 l8987 0DA2  
                               l8899 0A0A                                 l9947 2C30  
                               l9939 2BF8                                 STR_5 7B1E  
                               STR_6 7AF8                                 l8989 0DA8  
                               STR_7 7A35                                 STR_8 7F7C  
                               l9983 2DE8                                 STR_9 7D9F  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 00B4  
                               i2l60 3532                                 _LIAx 0134  
                               i2l71 35EC                                 i2l63 35A8  
                               _LIAy 0137                                 i2l72 35FC  
                               _LIAz 013A                                 i2l65 35B0  
                               u9121 3F9C                                 i2l90 36E2  
                               i2l82 3684                                 i2l66 35B8  
                               i2l76 366E                                 u9141 3FC8  
                               i2l94 3714                                 i2l86 36B4  
                               i2l89 36D0                                 u9331 3E5E  
                               u8621 378E                                 u9350 3EA8  
                               u8470 5020                                 u8631 37AC  
                               u9355 3E9E                                 u8831 3BB4  
                               u9730 05AA                                 u9650 042C  
                               u8851 3BEE                                 u9580 0388  
                               u9735 059E                                 u9657 0422  
                               u9587 037E                                 _GRVx 0125  
                               _GRVy 0128                                 _GRVz 012B  
                               _TMR1 000FCE                                 _TMR2 000FBC  
                       ?_readLIAData 006A                                 _WPUB 000F61  
    __end_of_I2C1_MasterReadTRBBuild 5430                                 _Modr 01FC  
                               _aRes 0149                                 _Roll 0143  
                               _eInt 022E                                 _gRes 015B  
                               _mRes 0167                                 _beta 0155  
                    readByte@address 0064                         ?_readGRVData 006A  
                               _main 5754                         ___ftpack@arg 001B  
                               _loop 1C2A                         ___ftpack@exp 001E  
                               _roll 0176                                 _quat 02E5  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               indf0 000FEF                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
             ??_I2C1_MasterTRBInsert 001F                                 _zeta 017F  
                               btemp 0045                                 _sqrt 39E0  
                      __CFG_BORV$190 000000                                 pclat 000FFA  
                               prodh 000FF4                                 prodl 000FF3  
                               start 00DC                        __CFG_IESO$OFF 000000  
                       ___ftmul@cntr 0071                         ___param_bank 000010  
                       ___ftmul@sign 0072                         ?_readMagData 006A  
     I2C1_MasterWriteTRBBuild@length 001F       i2UART_buff_modulo_inc@my_value 0005  
                    readByte@timeOut 0065                         ?_readEulData 006A  
                       ___fttol@exp1 0088                         ___fttol@lval 0084  
               __end_of_magCalBNO055 290E                           _i2c1_state 003B  
     __size_of_OSCILLATOR_Initialize 000E            I2C1_MasterTRBInsert@count 0020  
      __end_of_OSCILLATOR_Initialize 5934                                l10061 21DA  
                              l10045 2176                                l10081 225C  
                              l10073 2228                                l10065 21F4  
                              l10057 21C0                                l10049 2190  
                              l10085 2276                                l10077 2242  
                              l10069 220E                                l10093 22AA  
                              l10089 2290                                l10429 576E  
          I2C1_MasterTRBInsert@pflag 001D                      __end_of___aldiv 47C6  
                              ?_main 0001               __size_of_readAccelData 00B0  
                    __end_of___awdiv 51AA                    __end_of_I2C1_Stop 55DE  
                              ?_loop 0001                      __end_of___ftadd 39E0  
                              STR_10 7FA2                                STR_11 7DDD  
                              STR_12 7CA2                                STR_20 7B44  
                              STR_21 7E36                                STR_13 7DBE  
                              STR_30 7F3B                                STR_14 7CE3  
                              STR_22 7BB2                                STR_15 7DFB  
                              STR_31 7C60                                STR_23 7A0C  
                              STR_16 7E53                                STR_24 7D80  
                              STR_32 7BD6                                STR_40 7A84  
                              STR_17 7EA7                                STR_25 7D42  
                              STR_33 7D03                                STR_41 7B69  
                              STR_18 7F24                                STR_42 7E8C  
                              STR_34 7E70                                STR_50 7E19  
                              STR_26 7D61                                STR_19 7F67  
                              STR_35 7EF4                                STR_27 7D23  
                              STR_43 7B8E                                STR_51 79D1  
                              STR_52 7F51                                STR_36 7CC3  
                              STR_44 7AD2                                STR_28 7A5D  
                    __end_of___awmod 531C                                STR_53 7FF7  
                              STR_45 7FD6                                STR_37 7C3E  
                              STR_29 7C1C                                STR_54 7FB4  
                              STR_38 7EDB                                STR_46 7BFA  
                              STR_55 7FC5                                STR_47 7F90  
                              STR_39 7995                                STR_48 7FE7  
                              STR_49 793F                      __end_of___ftdiv 3E48  
                    __end_of___ftneg 5824                                u10010 0ADE  
                    __end_of___lldiv 522C                                ?_sqrt 008F  
                              u11001 24BA                                u11010 256E  
                              u10310 0FBE                      __end_of___ftmul 3CFC  
                    ___awdiv@divisor 0023                                u10461 119E  
                              _T1CON 000FCD                      __end_of___llmod 5002  
                    __end_of___ftsub 5514                                u10821 3D12  
                    __end_of___fttol 3F8C                                u10901 1404  
                              u11285 2D32                                u10911 1416  
                              _T2CON 000FBA                                u10841 3D4C  
                              u10921 14D8                                u10951 1814  
                              u12377 569E                                u10971 2418  
                              u10981 242A                                u10991 243C  
                     __CFG_DEBUG$OFF 000000                                i2l303 5122  
                              i2l340 5868                                i2l431 0072  
                              i2l433 007E                                i2l441 00A0  
                              i2l425 004E                                i2l435 008A  
                              i2l427 005A                                i2l437 0096  
                              i2l429 0066                      ___awdiv@counter 0025  
                              _TMR1H 000FCF                                _TMR1L 000FCE  
                              _TRISA 000F92                                _TRISB 000F93  
                              _TRISC 000F94                                _TRISD 000F95  
                              _TRISE 000F96                                _Delay 568E  
             ECCP2_CaptureISR@module 0003         __end_of_I2C1_BusCollisionISR 595A  
                      __CFG_WRT0$OFF 000000                        __CFG_WRT1$OFF 000000  
                      __CFG_WRT2$OFF 000000                        __CFG_WRT3$OFF 000000  
                  ??_I2C1_MasterRead 002B                         ___lltoft@exp 0060  
               _EUSART1_Transmit_ISR 56F4                       __CFG_EBTR0$OFF 000000  
                     __CFG_FCMEN$OFF 000000                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                                _Pitch 0140  
                     __CFG_EBTR3$OFF 000000                    ??_I2C1_Initialize 001B  
                readGyroData@rawData 006E                                _Setup 290E  
                   __end_of_TMR2_ISR 5946                        __CFG_WRTB$OFF 000000  
                      __CFG_WRTC$OFF 000000                        __CFG_WRTD$OFF 000000  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 0026  
                              _brake 018C                      __end_of_dpowers 78D1  
                              _count 0111                                _errno 0192  
                              _myLed 01FE                                _scale 2E02  
                    __end_of_isdigit 5842                                _group 002B  
                              _pitch 0173                   __CFG_MCLRE$EXTMCLR 000000  
                      ___ftpack@sign 001F                                _putch 5934  
                              tablat 000FF5                                plusw1 000FE3  
                              plusw2 000FDB                  readBytes@subAddress 0060  
                              sqrt@a 008F                                sqrt@i 009B  
                              sqrt@q 009C                                sqrt@x 009F  
                              sqrt@z 0098                                status 000FD8  
                     __CFG_HFOFST$ON 000000                       __CFG_PBADEN$ON 000000  
    I2C1_MasterWriteTRBBuild@address 0020                      __initialization 461E  
              I2C1_MasterWrite@pdata 0024                      readBytes@status 0069  
              I2C1_MasterWrite@pflag 0029           __end_of_EUSART1_Initialize 5656  
                       __end_of_main 5780                         __end_of_loop 2402  
                       __end_of_sqrt 3B9E         accelgyroCalBNO055@accel_bias 037C  
        ECCP2_CallBack@capturedValue 0001         accelgyroCalBNO055@accel_temp 0356  
                          ??_ADC_ISR 0001          ?_INTERRUPT_InterruptManager 0001  
                        _i2c1_object 0100                               ??_main 002B  
                      ___fttol@sign1 0083                               ??_loop 00C8  
                             ??_sqrt 0092                        __activetblptr 000002  
                  ?_ECCP1_CaptureISR 0001                     __end_of_Send_put 5754  
               __size_of__tdiv_to_l_ 0132          accelgyroCalBNO055@gyro_bias 036C  
                             ?_Delay 001B                ?_EUSART1_Transmit_ISR 0001  
        accelgyroCalBNO055@gyro_temp 035C                   ??_ECCP1_CaptureISR 0003  
                   magCalBNO055@data 00CF                               ?_Setup 0001  
                      ?_readGyroData 006A                               _ADCON0 000FC2  
                             _ADCON1 000FC1                               _ADCON2 000FC0  
                   __end_of___altoft 52AC                     ___llmod@dividend 0060  
                             ?_scale 0073                               _ADRESH 000FC4  
                             _ADRESL 000FC3                               _CCPR1H 000FBF  
                             _CCPR2H 000F68                               _CCPR1L 000FBE  
                             _CCPR2L 000F67                     ___awdiv@dividend 0021  
                   __end_of___awtoft 568E                               _ANSELA 000F38  
                             ?_putch 0001                               _ANSELB 000F39  
                             _ANSELC 000F3A                               _ANSELD 000F3B  
                             _ANSELE 000F3C                     __end_of___ftpack 4EC4  
                      ?_readQuatData 006A                               _T1GCON 000FCC  
                    i2_UART_buff_get 5094                               _RC1STA 000FAB  
                   __end_of___lltoft 53E0                      i2_UART_buff_put 4422  
                     __CFG_WDTEN$OFF 000000                               Delay@x 001E  
        UART_buff_modulo_inc@modulus 001D                               i2l6543 57F6  
                             i2l7159 571E                               i2l6941 4442  
                             i2l6961 511E                               i2l6947 44AE  
                             i2l9381 5892                               i2l9373 55D8  
                             i2l9815 3696                               i2l9807 367E  
                             i2l9841 36F2                               i2l9825 36BC  
                             i2l9755 358A                               i2l9853 371A  
                             i2l9837 36EA                               i2l9773 35E6  
                             i2l9855 371E                               i2l9767 35C8  
                             i2l9863 3732                               i2l9857 3726  
                             i2l9787 3630                               _RCREG1 000FAE  
                             _OSCCON 000FD3                               _SPBRG1 000FAF  
                      _readAccelData 4CB8                               _TX1STA 000FAC  
                             _TXREG1 000FAD                    ?_ECCP2_CaptureISR 0001  
                         _Setup$3454 02F9                    ?_I2C1_MasterWrite 0024  
                             _Ascale 00F8                 accelgyroCalBNO055@ii 0368  
                             _Gscale 00FE                       __CFG_XINST$OFF 000000  
                 ??_ECCP2_CaptureISR 0003                   ??_I2C1_MasterWrite 002B  
                   __end_of__powers_ 791F                               Setup@c 02FC  
                             Setup@d 02F3                               Setup@e 02F4  
                             Setup@f 02F5                         _CCPTMRS0bits 000F49  
                     _p_i2c1_current 0194                               ___ftge 47C6  
            __size_of_ECCP1_CallBack 0002                        _output_buffer 0300  
                          ??___aldiv 0023                               ___wmul 56C2  
                          ??___awdiv 0025                            ??___ftadd 0083  
                     __CFG_STVREN$ON 000000                            ??___awmod 001F  
                          ??___ftdiv 0068                            ??___ftneg 001E  
                          ??___lldiv 0023                            ??___ftmul 006A  
                          ??___llmod 0028                            ??___ftsub 002B  
                          ??___fttol 007E                               _delt_t 0115  
                             _deltat 0158                           Setup@swlsb 02F6  
                         Setup@swmsb 02F7           ??_I2C1_MasterWriteTRBBuild 0022  
                   __end_of_readByte 4E16                               _intPin 01FD  
            __size_of_ECCP2_CallBack 0002                               _memset 5780  
                             _fround 326C                            ?_I2C1_ISR 0001  
                   _readGyroTempData 590A                               clear_0 4624  
                             clear_1 4630                               clear_2 463C  
                             clear_3 4648                               clear_4 4654  
                             clear_5 466E                     ___awdiv@quotient 0027  
                    ___awmod@divisor 001D                      ___awmod@counter 001F  
                             _printf 00E0                               _rx_len 0040  
                             _status 01AB     __size_of_I2C1_MasterReadTRBBuild 0050  
              ___ftmul@f3_as_product 006E                         __pdataCOMRAM 0041  
                          ??_isdigit 001B                        Send_put@_data 0026  
                     ??_readGyroData 006C               readMagData@destination 006A  
                       __mediumconst 7878                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
       __end_of_UART_buff_modulo_inc 57D6                               sqrt@og 0095  
                     ??_readQuatData 006C        I2C1_MasterWriteTRBBuild@pdata 001D  
                    _eusart1RxBuffer 0237                     readBytes@address 0067  
      __size_of_INTERRUPT_Initialize 0014                      _eusart1TxBuffer 023F  
                     ?_readAccelData 006A                    _SYSTEM_Initialize 5918  
                         __accesstop 0060              __end_of__initialization 46EC  
                         ___altoft@c 0023                           ___ftadd@f1 007D  
                         ___ftadd@f2 0080                __end_of_TMR2_CallBack 5958  
                         ___ftge@ff1 0062                           ___ftge@ff2 0065  
                 ?_SYSTEM_Initialize 0001                 __size_of_readLIAData 00B0  
                      ___rparam_used 000001                           ___ftdiv@f1 0062  
                         ___ftdiv@f2 0065                           ___ftdiv@f3 006C  
            ?i2_UART_buff_modulo_inc 0001                           ___ftneg@f1 001B  
                     _i2c1_trb_count 003C                 __size_of_readGRVData 00B0  
                         ___awtoft@c 0023                __size_of_magCalBNO055 050C  
                      __end_of_Delay 56C2                           ___ftmul@f1 0064  
                         ___ftmul@f2 0067                     readBytes@timeOut 0068  
              _I2C1_FunctionComplete 587E                 _I2C1_BusCollisionISR 5958  
                         ___ftsub@f1 0089                           ___ftsub@f2 008C  
                         ___fttol@f1 007A                       __pcstackCOMRAM 0001  
                         _accelCount 01D8                        __end_of_Setup 2E02  
             I2C1_MasterWrite@length 0026                         __pidataBANK0 5954  
                       __pidataBANK1 5946                         __pidataBANK2 5898  
                ??_SYSTEM_Initialize 001B                            ?_TMR2_ISR 0001  
                         ___lltoft@c 0023                        __end_of_scale 326C  
                      __end_of_putch 593E                           ??_I2C1_ISR 0004  
               __size_of_readMagData 00B0                 __size_of_readEulData 00B0  
                 UART_buff_get@_this 0021       I2C1_MasterReadTRBBuild@address 0020  
              __end_of_UART_buff_get 5094               ??_EUSART1_Transmit_ISR 000C  
              __end_of_UART_buff_put 4422                           __div_to_l_ 40BE  
                            ??_Delay 001D              __end_ofi2_UART_buff_get 5126  
            __end_ofi2_UART_buff_put 453C          __end_of_EUSART1_Receive_ISR 587E  
                            ??_Setup 02F1                      __div_to_l_@exp1 0026  
                    __div_to_l_@cntr 0025                              ??_scale 002B  
          __end_of_SYSTEM_Initialize 5926                      __div_to_l_@quot 0021  
                            ??_putch 0027                        _eusart1RxHead 01A6  
                  magCalBNO055@F8233 0218                    magCalBNO055@F8235 024D  
                  magCalBNO055@F8237 0253                    magCalBNO055@F8239 0259  
                _addressErrorCounter 0188                        _eusart1TxHead 01A9  
                      _eusart1RxTail 01A7               readGRVData@destination 006A  
                         __pbssBANK0 00F8                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                         __pbssBANK4 0400                           __pbssBANK5 0500  
                      _eusart1TxTail 01AA                         _magCalBNO055 2402  
             readEulData@destination 006A                      __CFG_PLLCFG$OFF 000000  
                        _Receive_get 000000       __end_ofi2_UART_buff_modulo_inc 5800  
                 __size_of_readBytes 00AA              __size_of_UART_buff_init 001E  
            __size_of_UART_buff_size 0016                        __div_to_l_@f1 001B  
                      __div_to_l_@f2 001E                  magCalBNO055@mag_max 00D6  
                magCalBNO055@mag_min 00DC                   _accelgyroCalBNO055 13D6  
                          ?_Send_put 0001                          loop@sysstat 00CC  
                  magCalBNO055@dest1 00C8                ?_I2C1_BusCollisionISR 0001  
                 __CFG_CCP2MX$PORTC1 000000                              ?___ftge 0062  
                            ?___wmul 0060                           ??_TMR2_ISR 0001  
                 __CFG_CCP3MX$PORTB5 000000                      _I2C1_MasterRead 547C  
                ?_accelgyroCalBNO055 00C8                      _I2C1_Initialize 55DE  
                            _CCP1CON 000FBD                              _CCP2CON 000F66  
                          ?___altoft 0023                              _ADC_ISR 5950  
                            ?_memset 001B                              ?_fround 0073  
                         _crc_buffer 02B5                            ?___awtoft 0023  
                          ?___ftpack 001B                              ?_printf 008F  
                          ?___lltoft 0023                   UART_buff_put@_this 0021  
        i2UART_buff_modulo_inc@value 0001                              _OSCCON2 000FD2  
                          _I2C1_Stop 559C                    _Receive_available 000000  
       UART_buff_modulo_inc@my_value 001F                    __CFG_PRICLKEN$OFF 000000  
                            _OSCTUNE 000F9B                              _SPBRGH1 000FB0  
                            _SSP1ADD 000FC8                  _receiveArrayAddress 0198  
                            _SSP1BUF 000FC9                              _OPRMode 0043  
                    ??_readAccelData 006C                 ??_accelgyroCalBNO055 00CC  
                            _PWRMode 01A4                         readByte@Data 0061  
                            _MOpMode 00FF                           _initBNO055 41E6  
      I2C1_MasterTRBInsert@ptrb_list 001B                            ?_readByte 0060  
                      _GyroMeasDrift 0131                        _GyroMeasError 01F9  
                 __size_of_writeByte 0064                    _alignErrorCounter 018A  
                    __CFG_PWRTEN$OFF 000000               ?_I2C1_FunctionComplete 0001  
                  __end_of__npowers_ 78F8                           ??_Send_put 0026  
                            __Hparam 0000        __size_of_I2C1_MasterTRBInsert 00BA  
                         _scale$3457 0076                              __Lparam 0000  
                            _TempOne 0184                              _TempTwo 0186  
                         _lastUpdate 011D                 __end_of_readGyroData 4B58  
                 _p_i2c1_trb_current 0196                       _ECCP1_CallBack 595C  
                          _AKNAKsend 0037                              ___aldiv 46FA  
                    __size_of___ftge 00C8                              ___awdiv 5126  
                            ___ftadd 3778                 _UART_buff_modulo_inc 57AC  
                            ___awmod 52AC                              ___ftdiv 3CFC  
                            ___ftneg 5800                              ___lldiv 51AA  
                    __size_of___wmul 0032                              ___ftmul 3B9E  
                            ___llmod 4F6E                              ___ftsub 54C8  
                            ___fttol 3E48                 __end_of_readQuatData 461E  
                     _ECCP2_CallBack 595A                              _calc_CS 003A  
                         ??___altoft 0027              readQuatData@destination 006A  
                            __pcinit 461E                           ??___awtoft 0026  
                         ??___ftpack 0020                      __size_of_memset 002C  
                    __size_of_fround 028A                              __ramtop 0600  
                            _magBias 02D0              _I2C1_MasterReadTRBBuild 53E0  
                   i2UART_buff_get@c 000B                           ??___lltoft 0027  
                            __ptext0 5754                              __ptext1 1C2A  
                            __ptext2 453C                              __ptext3 4948  
                            __ptext4 49F8                              __ptext5 590A  
                            __ptext6 4AA8                              __ptext7 4B58  
                            __ptext8 4C08                              __ptext9 4CB8  
                    __size_of_printf 12F6                     i2UART_buff_put@c 0009  
                  __end_of_hexpowers 793F                            _T1CONbits 000FCD  
                        ?__div_to_l_ 001B                    __end_of_readBytes 4F6E  
                            _dpowers 78A9                _OSCILLATOR_Initialize 5926  
                          _T2CONbits 000FBA                              _isdigit 5824  
       I2C1_MasterReadTRBBuild@pdata 001D                 I2C1_MasterRead@pdata 0024  
               I2C1_MasterRead@pflag 0029                     ___awmod@dividend 001B  
                   ___aldiv@dividend 001B                   _EUSART1_Initialize 561A  
                   ?i2_UART_buff_get 0007             ??_PIN_MANAGER_Initialize 001B  
                   ?i2_UART_buff_put 0007                           ?_I2C1_Stop 0001  
         __size_of_SYSTEM_Initialize 000E                 I2C1_ISR@pi2c_buf_ptr 0182  
               end_of_initialization 46EC                            Delay@wait 001B  
                  __end_of_octpowers 78A9                  ?_EUSART1_Initialize 0001  
           __end_of_readGyroTempData 5918                           _tempGCount 019E  
                         ??_readByte 002B                              memset@c 001D  
                            memset@n 001F                              memset@p 0021  
                      __Lmediumconst 7878            __size_of_ECCP1_CaptureISR 0018  
                         _tempMCount 01A0              __end_of_I2C1_MasterRead 54C8  
             ??_I2C1_BusCollisionISR 0001               __end_of_ECCP1_CallBack 595E  
            __end_of_I2C1_Initialize 561A                      ___lldiv@divisor 001F  
                    ___lldiv@counter 0027               __end_of_ECCP2_CallBack 595C  
                            printf@c 00C5                              printf@f 008F  
                readQuatData@rawData 006E                     ___aldiv@quotient 0025  
              ?_UART_buff_modulo_inc 001B                              postdec1 000FE5  
                            postdec2 000FDD          ECCP1_CallBack@capturedValue 0001  
                            postinc0 000FEE                              postinc1 000FE6  
                            postinc2 000FDE                       __tdiv_to_l_@f1 001B  
                     __tdiv_to_l_@f2 001E                 ??_EUSART1_Initialize 0025  
                      ??__tdiv_to_l_ 0021            __size_of_ECCP2_CaptureISR 0018  
          __size_of_I2C1_MasterWrite 004C               _dataAdressErrorCounter 0190  
                  __size_of_I2C1_ISR 0282                    __end_of_writeByte 5380  
                         _rx_address 00FB              readGyroData@destination 006A  
  I2C1_ISR@i2c_10bit_address_restart 0035                          ?_initBNO055 0001  
            accelgyroCalBNO055@F8200 0247              accelgyroCalBNO055@F8181 0107  
            accelgyroCalBNO055@F8177 0200              accelgyroCalBNO055@F8179 020C  
                        ___ftdiv@exp 006F                       _UART_buff_init 5842  
                        printf@width 00C3                       _UART_buff_size 58E0  
                    ?_ECCP1_CallBack 0001              I2C1_MasterWrite@address 0027  
                __size_of__div_to_l_ 0128                          ___ftmul@exp 006D  
                      _moduleAddress 003D              accelgyroCalBNO055@dest1 00C8  
            accelgyroCalBNO055@dest2 00CA                      ?_ECCP2_CallBack 0001  
                     readByte@status 0066            ??_I2C1_MasterReadTRBBuild 0022  
       __end_of_INTERRUPT_Initialize 590A                       __end_of___ftge 488E  
                    _crcErrorCounter 018E                       __end_of___wmul 56F4  
            I2C1_MasterWrite@trBlock 01EF                        __pidataCOMRAM 594C  
           I2C1_Stop@completion_code 0003                    __size_of_TMR2_ISR 0008  
             ?_OSCILLATOR_Initialize 0001                       __end_of_memset 57AC  
                     __end_of_fround 34F6                       __end_of_printf 13D6  
                start_initialization 461E                       readBytes@count 0061  
                        ??_I2C1_Stop 0001      __size_of_PIN_MANAGER_Initialize 0044  
                __end_of__tdiv_to_l_ 40BE                         _Gtemperature 012E  
  __size_of_I2C1_MasterWriteTRBBuild 0044                          putch@txData 0027  
          ?_I2C1_MasterWriteTRBBuild 001B                        ??_readLIAData 006C  
             __end_of_UART_buff_init 5860                       UART_buff_get@c 0025  
                 readByte@subAddress 0060               __end_of_UART_buff_size 58F6  
                      ??_readGRVData 006C                       UART_buff_put@c 0023  
              __size_of_readGyroData 00B0                      ___llmod@divisor 0064  
                    ___llmod@counter 0028                     ?_I2C1_MasterRead 0024  
                   ?_I2C1_Initialize 0001                __size_of_readQuatData 00E2  
             ??_UART_buff_modulo_inc 001F             readAccelData@destination 006A  
                          Setup@blid 02F8                        ??_readMagData 006C  
                           ??___ftge 0068                    __size_of_Send_put 002E  
                           ??___wmul 0029                        ??_readEulData 006C  
                        __pdataBANK0 00FE                          __pdataBANK1 01F9  
                        __pdataBANK2 02D9                             ?_ADC_ISR 0001  
                           ??_memset 0021                             ??_fround 002B  
                           ??_printf 009A                  __size_of_initBNO055 0122  
       I2C1_MasterWriteTRBBuild@ptrb 001B                       _eusart1RxCount 01A5  
                  __size_of___altoft 0080                           fround@prec 007C  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
             __size_of_TMR2_CallBack 0002                    __size_of___lltoft 0060  
                        __pbssCOMRAM 002B        __size_of_EUSART1_Transmit_ISR 0032  
                      __pcstackBANK0 0060                        __pcstackBANK2 02F1  
                      __pcstackBANK3 0356                            _accelBias 01AC  
                      _i2c1_tr_queue 01F4                         _readGyroData 4AA8  
                       _Receive_peek 000000                         _isdigit$2953 001C  
                UART_buff_init@_this 0023                         _readQuatData 453C  
                    ?_UART_buff_init 0023                      ?_UART_buff_size 0001  
            ??_I2C1_FunctionComplete 0001         __size_of_EUSART1_Receive_ISR 001E  
                 readEulData@rawData 006E                     _ECCP1_CaptureISR 58C8  
               magCalBNO055@mag_bias 00E9                 magCalBNO055@mag_temp 00E3  
                  __size_of_readByte 00AE               __size_of_UART_buff_get 0092  
             __size_of_UART_buff_put 011A                  __end_of_readLIAData 4AA8  
                         loop@syserr 00CD               _PIN_MANAGER_Initialize 5558  
                      Setup@selftest 02FD                  __end_of_readGRVData 4C08  
                          __pintcode 0008                        __pmediumconst 7878  
                           ?___aldiv 001B                             ?___awdiv 0021  
                           ?___ftadd 007D                             ?___awmod 001B  
                           ?___ftdiv 0062                             ?___ftneg 001B  
                           ?___lldiv 001B                             ?___ftmul 0064  
                           ?___llmod 0060                             ?___ftsub 0089  
                          __npowers_ 78D1                             ?___fttol 007A  
                 readLIAData@rawData 006E                             _I2C1_ISR 34F6  
       ??_INTERRUPT_InterruptManager 000D                          __tdiv_to_l_ 3F8C  
               i2UART_buff_get@_this 0007                     _ECCP2_CaptureISR 58B0  
                   _I2C1_MasterWrite 5430                  __end_of_readMagData 49F8  
                       ??__div_to_l_ 0021                             _BAUD1CON 000FB8  
                __end_of_readEulData 4CB8         __end_of_I2C1_MasterTRBInsert 4948  
                           ?_isdigit 0001                     writeByte@address 0065  
                     __size_of_Delay 0034               I2C1_MasterRead@address 0027  
                     __size_of_Setup 04F4                            _hexpowers 791F  
                          _readBytes 4EC4                       __size_of_scale 046A  
                     __size_of_putch 000A          __size_of_accelgyroCalBNO055 0854  
               _INTERRUPT_Initialize 58F6                         _receiveArray 02C6  
              __end_of_readAccelData 4D68          I2C1_MasterReadTRBBuild@ptrb 001B  
                    ___aldiv@divisor 001F               I2C1_MasterRead@trBlock 01EA  
                  ?_readGyroTempData 0001                     writeByte@timeOut 0066  
                    ___aldiv@counter 0023                       ___wmul@product 0029  
                           _LATCbits 000F8B                             _LIACount 01D2  
                          _gyroCount 01DE                  UART_buff_size@_this 0001  
                          _octpowers 7879                        _TMR2_CallBack 5956  
                           _IPR1bits 000F9F                             _IPR2bits 000FA2  
                           _PIE1bits 000F9D                             _PIE2bits 000FA0  
                 ??_readGyroTempData 002B               readLIAData@destination 006A  
__size_of_INTERRUPT_InterruptManager 00D4                             _GRVCount 01CC  
                           _PIR1bits 000F9E                   __end_of__div_to_l_ 41E6  
                           _PIR2bits 000FA1                             i2u705_40 570E  
                           i2u688_40 50B2                             _RCONbits 000FD0  
                writeByte@subAddress 0060                     __CFG_WDTPS$32768 000000  
                           _SSP1CON1 000FC6                             _SSP1CON3 000FCB  
                           _TMR2_ISR 593E                            _quatCount 01BE  
                           _APwrMode 0038                             _SSP1STAT 000FC7  
                       _input_buffer 025F                            _rx_buffer 0500  
                   __size_of_ADC_ISR 0004                           _ADCON0bits 000FC2  
                  ___wmul@multiplier 0060                             _GPwrMode 0039  
               i2UART_buff_put@_this 0007                           printf@flag 00C6  
                         printf@fval 00BA                        _UART_buff_get 5002  
                         printf@prec 00C1                        _UART_buff_put 4308  
             ECCP1_CaptureISR@module 0003                             _MPwrMode 00F9  
             accelgyroCalBNO055@data 0362                           ?_readBytes 0060  
           ??i2_UART_buff_modulo_inc 0005                   readMagData@rawData 006E  
                          _writeByte 531C                          _INTCON2bits 000FF1  
                          copy_data0 4688                            copy_data1 46A8  
                          copy_data2 46E0                ?_INTERRUPT_Initialize 0001  
                           _EulCount 01C6                        readBytes@Data 0064  
                       _Mtemperature 013D                         ??_initBNO055 0068  
                  _sendStructAddress 019A                     ??_ECCP1_CallBack 0003  
                      readBytes@dest 0062                          _firstUpdate 0119  
                        _readLIAData 49F8             __size_ofi2_UART_buff_get 0092  
           __size_ofi2_UART_buff_put 011A                          _readGRVData 4B58  
                     ?_TMR2_CallBack 0001                     ??_ECCP2_CallBack 0003  
                           __Hrparam 0000                             _TempData 0224  
                           _Send_put 5726        __size_of_I2C1_BusCollisionISR 0002  
                           __Lrparam 0000                   __CFG_BOREN$SBORDIS 000000  
           magCalBNO055@sample_count 00D5               I2C1_ISR@i2c_bytes_left 0036  
                        _readMagData 4948                    __CFG_P2BMX$PORTD2 000000  
            ??_OSCILLATOR_Initialize 001B                          _readEulData 4C08  
                   __size_of___aldiv 00CC                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 014C                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 522C  
                   __size_of___ftmul 015E                     __size_of___llmod 0094  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
        __size_of_EUSART1_Initialize 003C                             ___awtoft 5656  
                           ___ftpack 4E16                         Setup@calstat 02FE  
   __end_of_I2C1_MasterWriteTRBBuild 5558                          _fround$3455 0079  
                        _fround$3456 0076                             ___lltoft 5380  
                 __end_of_initBNO055 4308                       ?_UART_buff_get 0021  
                     ?_UART_buff_put 0021                     __size_of_isdigit 001E  
                I2C1_ISR@i2c_address 00FC                             _magCount 01E4  
                           __ptext10 5656                             __ptext11 290E  
                           __ptext20 5514                             __ptext12 39E0  
                           __ptext21 547C                             __ptext13 4D68  
                         _T1GCONbits 000FCC                             __ptext30 57AC  
                           __ptext22 488E                             __ptext14 2402  
                           __ptext31 5824                             __ptext23 53E0  
                           __ptext15 41E6                             __ptext40 4F6E  
                           __ptext32 326C                             __ptext24 00E0  
                           __ptext16 13D6                             __ptext41 51AA  
                           __ptext33 56C2                             __ptext25 2E02  
                           __ptext17 531C                             __ptext50 46FA  
                           __ptext42 3E48                             __ptext34 3B9E  
                           __ptext26 5934                             __ptext18 4EC4  
                           __ptext51 568E                             __ptext43 54C8  
                           __ptext35 52AC                             __ptext27 5726  
                           __ptext19 5430                             __ptext52 5918  
                           __ptext44 3778                             __ptext36 5126  
                           __ptext28 4308                             __ptext61 593E  
                           __ptext53 5558                             __ptext45 5800  
                           __ptext37 3F8C                             __ptext29 5002  
                           __ptext70 5860                             __ptext62 5956  
                           __ptext54 5926                             __ptext46 47C6  
                           __ptext38 40BE                             __ptext71 4422  
                           __ptext63 34F6                             __ptext55 58F6  
                           __ptext47 3CFC                             __ptext39 5380  
                           __ptext72 57D6                             __ptext64 559C  
                           __ptext56 55DE                             __ptext48 522C  
                           __ptext73 58B0                             __ptext65 587E  
                           __ptext57 561A                             __ptext49 4E16  
                           __ptext74 595A                             __ptext66 5958  
                           __ptext58 5842                             __ptext75 58C8  
                           __ptext67 56F4                             __ptext59 5780  
                           __ptext76 595C                             __ptext68 5094  
                           __ptext77 5950                             __ptext69 58E0  
                           __ptext78 0000                           ?_writeByte 0060  
                       _SSP1CON1bits 000FC6                         _SSP1CON2bits 000FC5  
                           __powers_ 78F8                        ?_magCalBNO055 00C8  
            EUSART1_Receive_ISR@data 000C                        _returnAddress 003E  
                           _readByte 4D68                        __size_of_main 002C  
                      __size_of_loop 07D8        I2C1_MasterReadTRBBuild@length 001F  
                      __size_of_sqrt 01BE                I2C1_MasterRead@length 0026  
                     _Transmit_stall 0044                             _gyroBias 01B5  
                    writeByte@status 0067                 _I2C1_MasterTRBInsert 488E  
     accelgyroCalBNO055@sample_count 0378                           _RC1STAbits 000FAB  
                           int$flags 0045                             _sumCount 0121  
                       _serial_write 0031                             _throttle 01A2  
 __end_of_INTERRUPT_InterruptManager 00DC           _INTERRUPT_InterruptManager 0008  
                          printf@idx 00A3                            printf@len 00B0  
                          printf@exp 00B8                            printf@val 00BD  
                _EUSART1_Receive_ISR 5860             __end_of_ECCP1_CaptureISR 58E0  
                         _INTCONbits 000FF2            UART_buff_modulo_inc@value 001B  
                   ??_UART_buff_init 0025                     ??_UART_buff_size 0003  
                        ??_readBytes 002B                             isdigit@c 001D  
             ??_INTERRUPT_Initialize 001B                             memset@p1 001B  
                   _serial_available 002D                             scale@scl 0079  
    __size_ofi2_UART_buff_modulo_inc 002A                       ??_magCalBNO055 00CA  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0029  
                   __tdiv_to_l_@cntr 0028                      ??_TMR2_CallBack 0001  
                   __tdiv_to_l_@quot 0024                 ?_EUSART1_Receive_ISR 0001  
                   ___lldiv@dividend 001B              ?_PIN_MANAGER_Initialize 0001  
           __end_of_ECCP2_CaptureISR 58C8             __end_of_I2C1_MasterWrite 547C  
     __size_of_I2C1_FunctionComplete 001A        __end_of_I2C1_FunctionComplete 5898  
              ?_I2C1_MasterTRBInsert 001B         __end_of_EUSART1_Transmit_ISR 5726  
           ?_I2C1_MasterReadTRBBuild 001B                          _ring_buffer 0400  
                  ??i2_UART_buff_get 0009                          _serial_peek 019C  
                        _serial_read 002F                    ??i2_UART_buff_put 000A  
                           printf@ap 00B2                             printf@cp 00AE  
      __size_of_UART_buff_modulo_inc 002A             __size_of_I2C1_MasterRead 004C  
           __size_of_I2C1_Initialize 003C                      ??_UART_buff_get 0023  
                    ??_UART_buff_put 0024                         ?__tdiv_to_l_ 001B  
                        _printf$2720 00A8                          _printf$2721 00AA  
                        _printf$2718 00A4                          _printf$2727 00AC  
                        _printf$2719 00A6                          _printf$3458 00A0  
                      writeByte@Data 0062                     ___lldiv@quotient 0023  
                      writeByte@data 0061                   readGRVData@rawData 006E  
           _I2C1_MasterWriteTRBBuild 5514                         ___aldiv@sign 0024  
                  __CFG_T3CMX$PORTC0 000000                       _maxDataAddress 00FA  
                        ??_writeByte 002B                ??_EUSART1_Receive_ISR 000C  
     __end_of_PIN_MANAGER_Initialize 559C                 readAccelData@rawData 006E  
                 __size_of_I2C1_Stop 0042                    __CFG_FOSC$INTIO67 000000  
