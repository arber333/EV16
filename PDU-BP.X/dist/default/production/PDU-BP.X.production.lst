

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Jun 09 21:41:43 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  001C1A                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _Transmit_stall
    78  001C1A  01                 	db	1
    79  0000                     _ANSELA	set	3896
    80  0000                     _ANSELB	set	3897
    81  0000                     _ANSELC	set	3898
    82  0000                     _ANSELCbits	set	3898
    83  0000                     _ANSELD	set	3899
    84  0000                     _ANSELE	set	3900
    85  0000                     _TMR1	set	4046
    86  0000                     _ADCON0	set	4034
    87  0000                     _ADCON0bits	set	4034
    88  0000                     _ADCON1	set	4033
    89  0000                     _ADCON2	set	4032
    90  0000                     _ADRESH	set	4036
    91  0000                     _ADRESL	set	4035
    92  0000                     _BAUD1CON	set	4024
    93  0000                     _EEADR	set	4009
    94  0000                     _EECON1bits	set	4006
    95  0000                     _EECON2	set	4007
    96  0000                     _EEDATA	set	4008
    97  0000                     _INTCON2bits	set	4081
    98  0000                     _INTCONbits	set	4082
    99  0000                     _IPR1bits	set	3999
   100  0000                     _LATA	set	3977
   101  0000                     _LATB	set	3978
   102  0000                     _LATC	set	3979
   103  0000                     _LATCbits	set	3979
   104  0000                     _LATD	set	3980
   105  0000                     _LATE	set	3981
   106  0000                     _OSCCON	set	4051
   107  0000                     _OSCCON2	set	4050
   108  0000                     _OSCTUNE	set	3995
   109  0000                     _PIE1bits	set	3997
   110  0000                     _PIR1bits	set	3998
   111  0000                     _RC1STA	set	4011
   112  0000                     _RC1STAbits	set	4011
   113  0000                     _RCONbits	set	4048
   114  0000                     _RCREG1	set	4014
   115  0000                     _SPBRG1	set	4015
   116  0000                     _SPBRGH1	set	4016
   117  0000                     _T1CON	set	4045
   118  0000                     _T1CONbits	set	4045
   119  0000                     _T1GCON	set	4044
   120  0000                     _T1GCONbits	set	4044
   121  0000                     _TABLAT	set	4085
   122  0000                     _TBLPTRH	set	4087
   123  0000                     _TBLPTRL	set	4086
   124  0000                     _TBLPTRU	set	4088
   125  0000                     _TMR1H	set	4047
   126  0000                     _TMR1L	set	4046
   127  0000                     _TRISA	set	3986
   128  0000                     _TRISB	set	3987
   129  0000                     _TRISC	set	3988
   130  0000                     _TRISCbits	set	3988
   131  0000                     _TRISD	set	3989
   132  0000                     _TRISE	set	3990
   133  0000                     _TX1STA	set	4012
   134  0000                     _TXREG1	set	4013
   135  0000                     _WPUB	set	3937
   136  0000                     _LATB0	set	31824
   137  0000                     _LATD4	set	31844
   138  0000                     _LATD5	set	31845
   139  0000                     _LATD6	set	31846
   140  0000                     _LATD7	set	31847
   141                           
   142                           ; #config settings
   143  0000                     
   144                           	psect	cinit
   145  001668                     __pcinit:
   146                           	opt stack 0
   147  001668                     start_initialization:
   148                           	opt stack 0
   149  001668                     __initialization:
   150                           	opt stack 0
   151                           
   152                           ; Clear objects allocated to BANK4 (206 bytes)
   153  001668  EE04  F000         	lfsr	0,__pbssBANK4
   154  00166C  0ECE               	movlw	206
   155  00166E                     clear_0:
   156  00166E  6AEE               	clrf	postinc0,c
   157  001670  06E8               	decf	wreg,f,c
   158  001672  E1FD               	bnz	clear_0
   159                           
   160                           ; Clear objects allocated to BANK3 (206 bytes)
   161  001674  EE03  F000         	lfsr	0,__pbssBANK3
   162  001678  0ECE               	movlw	206
   163  00167A                     clear_1:
   164  00167A  6AEE               	clrf	postinc0,c
   165  00167C  06E8               	decf	wreg,f,c
   166  00167E  E1FD               	bnz	clear_1
   167                           
   168                           ; Clear objects allocated to BANK2 (200 bytes)
   169  001680  EE02  F000         	lfsr	0,__pbssBANK2
   170  001684  0EC8               	movlw	200
   171  001686                     clear_2:
   172  001686  6AEE               	clrf	postinc0,c
   173  001688  06E8               	decf	wreg,f,c
   174  00168A  E1FD               	bnz	clear_2
   175                           
   176                           ; Clear objects allocated to BANK1 (206 bytes)
   177  00168C  EE01  F000         	lfsr	0,__pbssBANK1
   178  001690  0ECE               	movlw	206
   179  001692                     clear_3:
   180  001692  6AEE               	clrf	postinc0,c
   181  001694  06E8               	decf	wreg,f,c
   182  001696  E1FD               	bnz	clear_3
   183                           
   184                           ; Clear objects allocated to BANK0 (159 bytes)
   185  001698  EE00  F060         	lfsr	0,__pbssBANK0
   186  00169C  0E9F               	movlw	159
   187  00169E                     clear_4:
   188  00169E  6AEE               	clrf	postinc0,c
   189  0016A0  06E8               	decf	wreg,f,c
   190  0016A2  E1FD               	bnz	clear_4
   191                           
   192                           ; Clear objects allocated to COMRAM (30 bytes)
   193  0016A4  EE00  F027         	lfsr	0,__pbssCOMRAM
   194  0016A8  0E1E               	movlw	30
   195  0016AA                     clear_5:
   196  0016AA  6AEE               	clrf	postinc0,c
   197  0016AC  06E8               	decf	wreg,f,c
   198  0016AE  E1FD               	bnz	clear_5
   199                           
   200                           ; Initialize objects allocated to COMRAM (1 bytes)
   201                           ; load TBLPTR registers with __pidataCOMRAM
   202  0016B0  0E1A               	movlw	low __pidataCOMRAM
   203  0016B2  6EF6               	movwf	tblptrl,c
   204  0016B4  0E1C               	movlw	high __pidataCOMRAM
   205  0016B6  6EF7               	movwf	tblptrh,c
   206  0016B8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   207  0016BA  6EF8               	movwf	tblptru,c
   208  0016BC  0009               	tblrd		*+	;fetch initializer
   209  0016BE  CFF5 F045          	movff	tablat,__pdataCOMRAM
   210  0016C2                     end_of_initialization:
   211                           	opt stack 0
   212  0016C2                     __end_of__initialization:
   213                           	opt stack 0
   214  0016C2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   215  0016C4  6EF8               	movwf	tblptru,c
   216  0016C6  0100               	movlb	0
   217  0016C8  EFA4  F00D         	goto	_main	;jump to C main() function
   218                           tblptru	equ	0xFF8
   219                           tblptrh	equ	0xFF7
   220                           tblptrl	equ	0xFF6
   221                           tablat	equ	0xFF5
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           
   225                           	psect	bssCOMRAM
   226  000027                     __pbssCOMRAM:
   227                           	opt stack 0
   228  000027                     _alignErrorCounter:
   229                           	opt stack 0
   230  000027                     	ds	2
   231  000029                     _readwhat:
   232                           	opt stack 0
   233  000029                     	ds	2
   234  00002B                     _receiveArrayAddress:
   235                           	opt stack 0
   236  00002B                     	ds	2
   237  00002D                     _sendStructAddress:
   238                           	opt stack 0
   239  00002D                     	ds	2
   240  00002F                     _serial_available:
   241                           	opt stack 0
   242  00002F                     	ds	2
   243  000031                     _serial_peek:
   244                           	opt stack 0
   245  000031                     	ds	2
   246  000033                     _serial_read:
   247                           	opt stack 0
   248  000033                     	ds	2
   249  000035                     _serial_write:
   250                           	opt stack 0
   251  000035                     	ds	2
   252  000037                     _timer1ReloadVal:
   253                           	opt stack 0
   254  000037                     	ds	2
   255  000039                     updateComms@previousPowerState:
   256                           	opt stack 0
   257  000039                     	ds	2
   258  00003B                     _AKNAKsend:
   259                           	opt stack 0
   260  00003B                     	ds	1
   261  00003C                     _calc_CS:
   262                           	opt stack 0
   263  00003C                     	ds	1
   264  00003D                     _maxDataAddress:
   265                           	opt stack 0
   266  00003D                     	ds	1
   267  00003E                     _moduleAddress:
   268                           	opt stack 0
   269  00003E                     	ds	1
   270  00003F                     _returnAddress:
   271                           	opt stack 0
   272  00003F                     	ds	1
   273  000040                     _rx_address:
   274                           	opt stack 0
   275  000040                     	ds	1
   276  000041                     _rx_array_inx:
   277                           	opt stack 0
   278  000041                     	ds	1
   279  000042                     _rx_len:
   280                           	opt stack 0
   281  000042                     	ds	1
   282  000043                     _group:
   283                           	opt stack 0
   284  000043                     	ds	2
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           
   292                           	psect	dataCOMRAM
   293  000045                     __pdataCOMRAM:
   294                           	opt stack 0
   295  000045                     _Transmit_stall:
   296                           	opt stack 0
   297  000045                     	ds	1
   298                           tblptru	equ	0xFF8
   299                           tblptrh	equ	0xFF7
   300                           tblptrl	equ	0xFF6
   301                           tablat	equ	0xFF5
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           
   305                           	psect	bssBANK0
   306  000060                     __pbssBANK0:
   307                           	opt stack 0
   308  000060                     _registers:
   309                           	opt stack 0
   310  000060                     	ds	48
   311  000090                     _Current:
   312                           	opt stack 0
   313  000090                     	ds	12
   314  00009C                     _CurrentADC:
   315                           	opt stack 0
   316  00009C                     	ds	12
   317  0000A8                     _Currentcomp:
   318                           	opt stack 0
   319  0000A8                     	ds	12
   320  0000B4                     _data:
   321                           	opt stack 0
   322  0000B4                     	ds	12
   323  0000C0                     _addressErrorCounter:
   324                           	opt stack 0
   325  0000C0                     	ds	2
   326  0000C2                     _crcErrorCounter:
   327                           	opt stack 0
   328  0000C2                     	ds	2
   329  0000C4                     _dataAdressErrorCounter:
   330                           	opt stack 0
   331  0000C4                     	ds	2
   332  0000C6                     _receiveArray:
   333                           	opt stack 0
   334  0000C6                     	ds	40
   335  0000EE                     _crc_buffer:
   336                           	opt stack 0
   337  0000EE                     	ds	17
   338                           tblptru	equ	0xFF8
   339                           tblptrh	equ	0xFF7
   340                           tblptrl	equ	0xFF6
   341                           tablat	equ	0xFF5
   342                           postinc0	equ	0xFEE
   343                           wreg	equ	0xFE8
   344                           
   345                           	psect	bssBANK1
   346  000100                     __pbssBANK1:
   347                           	opt stack 0
   348  000100                     _ring_buffer:
   349                           	opt stack 0
   350  000100                     	ds	206
   351                           tblptru	equ	0xFF8
   352                           tblptrh	equ	0xFF7
   353                           tblptrl	equ	0xFF6
   354                           tablat	equ	0xFF5
   355                           postinc0	equ	0xFEE
   356                           wreg	equ	0xFE8
   357                           
   358                           	psect	bssBANK2
   359  000200                     __pbssBANK2:
   360                           	opt stack 0
   361  000200                     _rx_buffer:
   362                           	opt stack 0
   363  000200                     	ds	200
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           
   371                           	psect	bssBANK3
   372  000300                     __pbssBANK3:
   373                           	opt stack 0
   374  000300                     _input_buffer:
   375                           	opt stack 0
   376  000300                     	ds	206
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           
   384                           	psect	bssBANK4
   385  000400                     __pbssBANK4:
   386                           	opt stack 0
   387  000400                     _output_buffer:
   388                           	opt stack 0
   389  000400                     	ds	206
   390                           tblptru	equ	0xFF8
   391                           tblptrh	equ	0xFF7
   392                           tblptrl	equ	0xFF6
   393                           tablat	equ	0xFF5
   394                           postinc0	equ	0xFEE
   395                           wreg	equ	0xFE8
   396                           
   397                           	psect	cstackBANK1
   398  0001CE                     __pcstackBANK1:
   399                           	opt stack 0
   400  0001CE                     ??_FastTransfer_buffer_put:
   401  0001CE                     sendData@whereToSend:
   402                           	opt stack 0
   403  0001CE                     CRCcheck@SentCRC:
   404                           	opt stack 0
   405  0001CE                     begin@ptr:
   406                           	opt stack 0
   407  0001CE                     processPowerRequest@powerSet:
   408                           	opt stack 0
   409                           
   410                           ; 2 bytes @ 0x0
   411  0001CE                     	ds	1
   412  0001CF                     sendData@CS:
   413                           	opt stack 0
   414  0001CF                     CRCcheck@calculatedCRC:
   415                           	opt stack 0
   416                           
   417                           ; 1 bytes @ 0x1
   418  0001CF                     	ds	1
   419  0001D0                     begin@maxSize:
   420                           	opt stack 0
   421  0001D0                     sendData@i:
   422                           	opt stack 0
   423  0001D0                     ToSend@what:
   424                           	opt stack 0
   425  0001D0                     CRCcheck@arrayHolder:
   426                           	opt stack 0
   427                           
   428                           ; 3 bytes @ 0x2
   429  0001D0                     	ds	1
   430  0001D1                     begin@givenAddress:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x3
   434  0001D1                     	ds	1
   435  0001D2                     begin@error:
   436                           	opt stack 0
   437                           
   438                           ; 1 bytes @ 0x4
   439  0001D2                     	ds	1
   440  0001D3                     begin@stufftosend:
   441                           	opt stack 0
   442  0001D3                     CRCcheck@rt:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x5
   446  0001D3                     	ds	2
   447  0001D5                     ??_receiveData:
   448  0001D5                     begin@stufftoreceive:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x7
   452  0001D5                     	ds	2
   453  0001D7                     begin@stuffavailable:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x9
   457  0001D7                     	ds	2
   458  0001D9                     begin@stuffpeek:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0xB
   462  0001D9                     	ds	2
   463  0001DB                     receiveData@holder:
   464                           	opt stack 0
   465                           
   466                           ; 3 bytes @ 0xD
   467  0001DB                     	ds	3
   468  0001DE                     receiveData@holder_1345:
   469                           	opt stack 0
   470                           
   471                           ; 3 bytes @ 0x10
   472  0001DE                     	ds	3
   473  0001E1                     receiveData@crcHolder:
   474                           	opt stack 0
   475                           
   476                           ; 1 bytes @ 0x13
   477  0001E1                     	ds	1
   478  0001E2                     receiveData@crcHolder_1346:
   479                           	opt stack 0
   480                           
   481                           ; 1 bytes @ 0x14
   482  0001E2                     	ds	1
   483  0001E3                     receiveData@u:
   484                           	opt stack 0
   485                           
   486                           ; 2 bytes @ 0x15
   487  0001E3                     	ds	2
   488  0001E5                     receiveData@r:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x17
   492  0001E5                     	ds	2
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           
   500                           	psect	cstackBANK0
   501  0000FF                     __pcstackBANK0:
   502                           	opt stack 0
   503  0000FF                     ??_sendData:
   504  0000FF                     EnableSlavePower@slave:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x0
   508  0000FF                     	ds	1
   509                           tblptru	equ	0xFF8
   510                           tblptrh	equ	0xFF7
   511                           tblptrl	equ	0xFF6
   512                           tablat	equ	0xFF5
   513                           postinc0	equ	0xFEE
   514                           wreg	equ	0xFE8
   515                           
   516                           	psect	cstackCOMRAM
   517  000001                     __pcstackCOMRAM:
   518                           	opt stack 0
   519  000001                     ?i2_UART_buff_size:
   520                           	opt stack 0
   521  000001                     ?i2_UART_buff_modulo_inc:
   522                           	opt stack 0
   523  000001                     i2UART_buff_size@_this:
   524                           	opt stack 0
   525  000001                     i2UART_buff_modulo_inc@value:
   526                           	opt stack 0
   527                           
   528                           ; 2 bytes @ 0x0
   529  000001                     	ds	2
   530  000003                     i2UART_buff_modulo_inc@modulus:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x2
   534  000003                     	ds	2
   535  000005                     i2UART_buff_modulo_inc@my_value:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x4
   539  000005                     	ds	2
   540  000007                     i2UART_buff_put@_this:
   541                           	opt stack 0
   542  000007                     i2UART_buff_get@_this:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x6
   546  000007                     	ds	2
   547  000009                     ??i2_UART_buff_get:
   548  000009                     i2UART_buff_put@c:
   549                           	opt stack 0
   550                           
   551                           ; 1 bytes @ 0x8
   552  000009                     	ds	1
   553  00000A                     ??i2_UART_buff_put:
   554                           
   555                           ; 0 bytes @ 0x9
   556  00000A                     	ds	1
   557  00000B                     i2UART_buff_get@c:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0xA
   561  00000B                     	ds	1
   562  00000C                     EUSART1_Receive_ISR@data:
   563                           	opt stack 0
   564                           
   565                           ; 1 bytes @ 0xB
   566  00000C                     	ds	1
   567  00000D                     ??_INTERRUPT_InterruptManager:
   568                           
   569                           ; 0 bytes @ 0xC
   570  00000D                     	ds	14
   571  00001B                     ?_FastTransfer_buffer_modulo_inc:
   572                           	opt stack 0
   573  00001B                     ?_UART_buff_modulo_inc:
   574                           	opt stack 0
   575  00001B                     ?_UART_buff_size:
   576                           	opt stack 0
   577  00001B                     ?___awdiv:
   578                           	opt stack 0
   579  00001B                     DATAEE_ReadByte@bAdd:
   580                           	opt stack 0
   581  00001B                     SetPin595@Reg:
   582                           	opt stack 0
   583  00001B                     writeRegisters@val:
   584                           	opt stack 0
   585  00001B                     CRC8@data:
   586                           	opt stack 0
   587  00001B                     FastTransfer_buffer_modulo_inc@value:
   588                           	opt stack 0
   589  00001B                     crcBufS_put@_this:
   590                           	opt stack 0
   591  00001B                     crcBufS_status_put@_this:
   592                           	opt stack 0
   593  00001B                     crcBufS_get@_this:
   594                           	opt stack 0
   595  00001B                     UART_buff_size@_this:
   596                           	opt stack 0
   597  00001B                     UART_buff_modulo_inc@value:
   598                           	opt stack 0
   599  00001B                     UART_buff_peek@_this:
   600                           	opt stack 0
   601  00001B                     ___awdiv@dividend:
   602                           	opt stack 0
   603  00001B                     memset@p1:
   604                           	opt stack 0
   605  00001B                     Delay@wait:
   606                           	opt stack 0
   607                           
   608                           ; 4 bytes @ 0x1A
   609  00001B                     	ds	1
   610  00001C                     ??_ComputeStorageData:
   611                           
   612                           ; 0 bytes @ 0x1B
   613  00001C                     	ds	1
   614  00001D                     ??_UART_buff_peek:
   615  00001D                     ?_Receive_available:
   616                           	opt stack 0
   617  00001D                     CRC8@len:
   618                           	opt stack 0
   619  00001D                     crcBufS_put@address:
   620                           	opt stack 0
   621  00001D                     crcBufS_status_put@time:
   622                           	opt stack 0
   623  00001D                     crcBufS_get@time:
   624                           	opt stack 0
   625  00001D                     SetPin595@pin:
   626                           	opt stack 0
   627  00001D                     writeRegisters@i:
   628                           	opt stack 0
   629  00001D                     FastTransfer_buffer_modulo_inc@modulus:
   630                           	opt stack 0
   631  00001D                     UART_buff_modulo_inc@modulus:
   632                           	opt stack 0
   633  00001D                     ___awdiv@divisor:
   634                           	opt stack 0
   635  00001D                     memset@c:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0x1C
   639  00001D                     	ds	1
   640  00001E                     CRC8@sum:
   641                           	opt stack 0
   642  00001E                     crcBufS_put@oldCRC:
   643                           	opt stack 0
   644  00001E                     crcBufS_status_put@status:
   645                           	opt stack 0
   646  00001E                     crcBufS_get@space:
   647                           	opt stack 0
   648  00001E                     ComputeStorageData@i:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x1D
   652  00001E                     	ds	1
   653  00001F                     ??_Delay:
   654  00001F                     ??_crcBufS_get:
   655  00001F                     ??_crcBufS_status_put:
   656  00001F                     CRC8@extract:
   657                           	opt stack 0
   658  00001F                     crcBufS_put@status:
   659                           	opt stack 0
   660  00001F                     ___awdiv@counter:
   661                           	opt stack 0
   662  00001F                     SetPin595@value:
   663                           	opt stack 0
   664  00001F                     Clear595@i:
   665                           	opt stack 0
   666  00001F                     FastTransfer_buffer_modulo_inc@my_value:
   667                           	opt stack 0
   668  00001F                     UART_buff_modulo_inc@my_value:
   669                           	opt stack 0
   670  00001F                     memset@n:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x1E
   674  00001F                     	ds	1
   675  000020                     ??_crcBufS_put:
   676  000020                     CRC8@tempI:
   677                           	opt stack 0
   678  000020                     ___awdiv@sign:
   679                           	opt stack 0
   680  000020                     Delay@i:
   681                           	opt stack 0
   682                           
   683                           ; 4 bytes @ 0x1F
   684  000020                     	ds	1
   685  000021                     ??_SetPin595:
   686  000021                     CRC8@crc:
   687                           	opt stack 0
   688  000021                     FastTransfer_buffer_put@_this:
   689                           	opt stack 0
   690  000021                     UART_buff_put@_this:
   691                           	opt stack 0
   692  000021                     UART_buff_get@_this:
   693                           	opt stack 0
   694  000021                     ___awdiv@quotient:
   695                           	opt stack 0
   696  000021                     memset@p:
   697                           	opt stack 0
   698                           
   699                           ; 2 bytes @ 0x20
   700  000021                     	ds	2
   701  000023                     ??_UART_buff_get:
   702  000023                     FastTransfer_buffer_put@towhere:
   703                           	opt stack 0
   704  000023                     UART_buff_put@c:
   705                           	opt stack 0
   706  000023                     FastTransfer_buffer_flush@_this:
   707                           	opt stack 0
   708  000023                     crcBufS_status_put@wantedTime:
   709                           	opt stack 0
   710  000023                     UART_buff_init@_this:
   711                           	opt stack 0
   712                           
   713                           ; 2 bytes @ 0x22
   714  000023                     	ds	1
   715  000024                     ??_UART_buff_put:
   716  000024                     FastTransfer_buffer_put@towhat:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x23
   720  000024                     	ds	1
   721  000025                     UART_buff_get@c:
   722                           	opt stack 0
   723  000025                     EnableSlavePower@onof:
   724                           	opt stack 0
   725  000025                     FastTransfer_buffer_flush@clearBuffer:
   726                           	opt stack 0
   727  000025                     crcBufS_get@wantedTime:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x24
   731  000025                     	ds	1
   732  000026                     ToSend@where:
   733                           	opt stack 0
   734  000026                     Send_put@_data:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x25
   738  000026                     	ds	1
   739  000027                     tblptru	equ	0xFF8
   740                           tblptrh	equ	0xFF7
   741                           tblptrl	equ	0xFF6
   742                           tablat	equ	0xFF5
   743                           postinc0	equ	0xFEE
   744                           wreg	equ	0xFE8
   745                           
   746                           ; 0 bytes @ 0x26
   747 ;;
   748 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   749 ;;
   750 ;; *************** function _main *****************
   751 ;; Defined at:
   752 ;;		line 9 in file "main.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;		None
   755 ;; Auto vars:     Size  Location     Type
   756 ;;		None
   757 ;; Return value:  Size  Location     Type
   758 ;;		None               void
   759 ;; Registers used:
   760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   766 ;;      Params:         0       0       0       0       0       0       0
   767 ;;      Locals:         0       0       0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0
   769 ;;      Totals:         0       0       0       0       0       0       0
   770 ;;Total ram usage:        0 bytes
   771 ;; Hardware stack levels required when called:   10
   772 ;; This function calls:
   773 ;;		_PDUStartup
   774 ;;		_SYSTEM_Initialize
   775 ;;		_updateComms
   776 ;; This function is called by:
   777 ;;		Startup code after reset
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text0
   782  001B48                     __ptext0:
   783                           	opt stack 0
   784  001B48                     _main:
   785                           	opt stack 21
   786                           
   787                           ;main.c: 11: SYSTEM_Initialize();
   788                           
   789                           ;incstack = 0
   790  001B48  ECCD  F00A         	call	_SYSTEM_Initialize	;wreg free
   791                           
   792                           ;main.c: 12: PDUStartup();
   793  001B4C  EC9F  F00C         	call	_PDUStartup	;wreg free
   794                           
   795                           ;main.c: 30: (INTCONbits.GIE = 1);
   796  001B50  8EF2               	bsf	intcon,7,c	;volatile
   797                           
   798                           ;main.c: 33: (INTCONbits.PEIE = 1);
   799  001B52  8CF2               	bsf	intcon,6,c	;volatile
   800                           
   801                           ;main.c: 41: LATCbits.LATC5 = 0;
   802  001B54  9A8B               	bcf	3979,5,c	;volatile
   803  001B56  D000               	goto	l3791
   804  001B58                     l3791:
   805                           
   806                           ;main.c: 49: updateComms();
   807  001B58  EC82  F00C         	call	_updateComms	;wreg free
   808  001B5C  D7FD               	goto	l3791
   809  001B5E  EF4F  F000         	goto	start
   810  001B62                     __end_of_main:
   811                           	opt stack 0
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           intcon	equ	0xFF2
   817                           postinc0	equ	0xFEE
   818                           wreg	equ	0xFE8
   819                           
   820 ;; *************** function _updateComms *****************
   821 ;; Defined at:
   822 ;;		line 21 in file "Communications.c"
   823 ;; Parameters:    Size  Location     Type
   824 ;;		None
   825 ;; Auto vars:     Size  Location     Type
   826 ;;		None
   827 ;; Return value:  Size  Location     Type
   828 ;;		None               void
   829 ;; Registers used:
   830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
   831 ;; Tracked objects:
   832 ;;		On entry : 0/0
   833 ;;		On exit  : 0/0
   834 ;;		Unchanged: 0/0
   835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   836 ;;      Params:         0       0       0       0       0       0       0
   837 ;;      Locals:         0       0       0       0       0       0       0
   838 ;;      Temps:          0       0       0       0       0       0       0
   839 ;;      Totals:         0       0       0       0       0       0       0
   840 ;;Total ram usage:        0 bytes
   841 ;; Hardware stack levels used:    1
   842 ;; Hardware stack levels required when called:    9
   843 ;; This function calls:
   844 ;;		_processPowerRequest
   845 ;;		_receiveData
   846 ;;		_respondECU
   847 ;; This function is called by:
   848 ;;		_main
   849 ;; This function uses a non-reentrant model
   850 ;;
   851                           
   852                           	psect	text1
   853  001904                     __ptext1:
   854                           	opt stack 0
   855  001904                     _updateComms:
   856                           	opt stack 21
   857                           
   858                           ;Communications.c: 22: if (receiveData()) {
   859                           
   860                           ;incstack = 0
   861  001904  EC51  F000         	call	_receiveData	;wreg free
   862  001908  0900               	iorlw	0
   863  00190A  B4D8               	btfsc	status,2,c
   864  00190C  0012               	return	
   865                           
   866                           ;Communications.c: 23: static int previousPowerState;
   867                           ;Communications.c: 24: if (previousPowerState != receiveArray[1]) {
   868  00190E  5039               	movf	updateComms@previousPowerState,w,c
   869  001910  0100               	movlb	0	; () banked
   870  001912  19C8               	xorwf	(_receiveArray+2)& (0+255),w,b	;volatile
   871  001914  E105               	bnz	u3680
   872  001916  503A               	movf	updateComms@previousPowerState+1,w,c
   873  001918  0100               	movlb	0	; () banked
   874  00191A  19C9               	xorwf	(_receiveArray+3)& (0+255),w,b	;volatile
   875  00191C  B4D8               	btfsc	status,2,c
   876  00191E  D00B               	goto	l3749
   877  001920                     u3680:
   878                           
   879                           ; BSR set to: 0
   880                           ;Communications.c: 25: previousPowerState = receiveArray[1];
   881  001920  C0C8  F039         	movff	_receiveArray+2,updateComms@previousPowerState	;volatile
   882  001924  C0C9  F03A         	movff	_receiveArray+3,updateComms@previousPowerState+1	;volatile
   883                           
   884                           ; BSR set to: 0
   885                           ;Communications.c: 26: processPowerRequest(previousPowerState);
   886  001928  C039  F1CE         	movff	updateComms@previousPowerState,processPowerRequest@powerSet
   887  00192C  C03A  F1CF         	movff	updateComms@previousPowerState+1,processPowerRequest@powerSet+1
   888  001930  EC1B  F009         	call	_processPowerRequest	;wreg free
   889  001934  D000               	goto	l3749
   890  001936                     l3749:
   891                           
   892                           ;Communications.c: 27: }
   893                           ;Communications.c: 28: respondECU();
   894  001936  ECC4  F00B         	call	_respondECU	;wreg free
   895  00193A  0012               	return	
   896  00193C  0012               	return		;funcret
   897  00193E                     __end_of_updateComms:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           intcon	equ	0xFF2
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           status	equ	0xFD8
   907                           
   908 ;; *************** function _respondECU *****************
   909 ;; Defined at:
   910 ;;		line 48 in file "Communications.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;		None               void
   917 ;; Registers used:
   918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   924 ;;      Params:         0       0       0       0       0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0
   927 ;;      Totals:         0       0       0       0       0       0       0
   928 ;;Total ram usage:        0 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    8
   931 ;; This function calls:
   932 ;;		_Delay
   933 ;;		_ToSend
   934 ;;		_sendData
   935 ;; This function is called by:
   936 ;;		_updateComms
   937 ;; This function uses a non-reentrant model
   938 ;;
   939                           
   940                           	psect	text2
   941  001788                     __ptext2:
   942                           	opt stack 0
   943  001788                     _respondECU:
   944                           	opt stack 21
   945                           
   946                           ;Communications.c: 49: LATCbits.LATC5 = 1;
   947                           
   948                           ;incstack = 0
   949  001788  8A8B               	bsf	3979,5,c	;volatile
   950                           
   951                           ;Communications.c: 50: ToSend(0, 5);
   952  00178A  0E00               	movlw	0
   953  00178C  0101               	movlb	1	; () banked
   954  00178E  6FD1               	movwf	(ToSend@what+1)& (0+255),b
   955  001790  0E05               	movlw	5
   956  001792  6FD0               	movwf	ToSend@what& (0+255),b
   957  001794  0E00               	movlw	0
   958  001796  EC96  F00D         	call	_ToSend
   959                           
   960                           ;Communications.c: 51: ToSend(9, 5);
   961  00179A  0E00               	movlw	0
   962  00179C  0101               	movlb	1	; () banked
   963  00179E  6FD1               	movwf	(ToSend@what+1)& (0+255),b
   964  0017A0  0E05               	movlw	5
   965  0017A2  6FD0               	movwf	ToSend@what& (0+255),b
   966  0017A4  0E09               	movlw	9
   967  0017A6  EC96  F00D         	call	_ToSend
   968                           
   969                           ;Communications.c: 52: Delay(5);
   970  0017AA  0E05               	movlw	5
   971  0017AC  6E1B               	movwf	Delay@wait,c
   972  0017AE  0E00               	movlw	0
   973  0017B0  6E1C               	movwf	Delay@wait+1,c
   974  0017B2  0E00               	movlw	0
   975  0017B4  6E1D               	movwf	Delay@wait+2,c
   976  0017B6  0E00               	movlw	0
   977  0017B8  6E1E               	movwf	Delay@wait+3,c
   978  0017BA  EC3E  F00C         	call	_Delay	;wreg free
   979                           
   980                           ;Communications.c: 54: sendData(1);
   981  0017BE  0E01               	movlw	1
   982  0017C0  EC2A  F005         	call	_sendData
   983                           
   984                           ;Communications.c: 55: Delay(3);
   985  0017C4  0E03               	movlw	3
   986  0017C6  6E1B               	movwf	Delay@wait,c
   987  0017C8  0E00               	movlw	0
   988  0017CA  6E1C               	movwf	Delay@wait+1,c
   989  0017CC  0E00               	movlw	0
   990  0017CE  6E1D               	movwf	Delay@wait+2,c
   991  0017D0  0E00               	movlw	0
   992  0017D2  6E1E               	movwf	Delay@wait+3,c
   993  0017D4  EC3E  F00C         	call	_Delay	;wreg free
   994                           
   995                           ;Communications.c: 56: LATCbits.LATC5 = 0;
   996  0017D8  9A8B               	bcf	3979,5,c	;volatile
   997  0017DA  0012               	return		;funcret
   998  0017DC                     __end_of_respondECU:
   999                           	opt stack 0
  1000                           tblptru	equ	0xFF8
  1001                           tblptrh	equ	0xFF7
  1002                           tblptrl	equ	0xFF6
  1003                           tablat	equ	0xFF5
  1004                           intcon	equ	0xFF2
  1005                           postinc0	equ	0xFEE
  1006                           wreg	equ	0xFE8
  1007                           status	equ	0xFD8
  1008                           
  1009 ;; *************** function _sendData *****************
  1010 ;; Defined at:
  1011 ;;		line 53 in file "FastTransfer.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;  whereToSend     1    wreg     unsigned char 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  whereToSend     1    0[BANK1 ] unsigned char 
  1016 ;;  i               2    2[BANK1 ] int 
  1017 ;;  CS              1    1[BANK1 ] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;		None               void
  1020 ;; Registers used:
  1021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1027 ;;      Params:         0       0       0       0       0       0       0
  1028 ;;      Locals:         0       0       4       0       0       0       0
  1029 ;;      Temps:          0       1       0       0       0       0       0
  1030 ;;      Totals:         0       1       4       0       0       0       0
  1031 ;;Total ram usage:        5 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; Hardware stack levels required when called:    7
  1034 ;; This function calls:
  1035 ;;		Absolute function
  1036 ;;		_CRC8
  1037 ;;		_FastTransfer_buffer_flush
  1038 ;;		_Send_put
  1039 ;;		_crcBufS_put
  1040 ;; This function is called by:
  1041 ;;		_respondECU
  1042 ;; This function uses a non-reentrant model
  1043 ;;
  1044                           
  1045                           	psect	text3
  1046  000A54                     __ptext3:
  1047                           	opt stack 0
  1048  000A54                     _sendData:
  1049                           	opt stack 21
  1050                           
  1051                           ;incstack = 0
  1052                           ;sendData@whereToSend stored from wreg
  1053  000A54  0101               	movlb	1	; () banked
  1054  000A56  6FCE               	movwf	sendData@whereToSend& (0+255),b
  1055                           
  1056                           ; BSR set to: 1
  1057                           ;FastTransfer.c: 56: unsigned char CS = CRC8(sendStructAddress, ring_buffer.count);
  1058  000A58  C02D  F01B         	movff	_sendStructAddress,CRC8@data
  1059  000A5C  C02E  F01C         	movff	_sendStructAddress+1,CRC8@data+1
  1060  000A60  C1CC  F01D         	movff	_ring_buffer+204,CRC8@len
  1061  000A64  ECEE  F00B         	call	_CRC8	;wreg free
  1062  000A68  0101               	movlb	1	; () banked
  1063  000A6A  6FCF               	movwf	sendData@CS& (0+255),b
  1064                           
  1065                           ; BSR set to: 1
  1066                           ;FastTransfer.c: 58: serial_write(0x06);
  1067  000A6C  D801               	call	u2928
  1068  000A6E  D00B               	goto	l3433
  1069  000A70                     u2928:
  1070  000A70  0005               	push	
  1071  000A72  6EFA               	movwf	pclath,c
  1072  000A74  5035               	movf	_serial_write,w,c
  1073  000A76  6EFD               	movwf	tosl,c
  1074  000A78  5036               	movf	_serial_write+1,w,c
  1075  000A7A  6EFE               	movwf	tosh,c
  1076  000A7C  50F8               	movf	tblptru,w,c
  1077  000A7E  6EFF               	movwf	tosu,c
  1078  000A80  50FA               	movf	pclath,w,c
  1079  000A82  0E06               	movlw	6
  1080  000A84  0012               	return		;indir
  1081  000A86                     l3433:
  1082                           
  1083                           ;FastTransfer.c: 59: serial_write(0x85);
  1084  000A86  D801               	call	u2938
  1085  000A88  D00B               	goto	l3435
  1086  000A8A                     u2938:
  1087  000A8A  0005               	push	
  1088  000A8C  6EFA               	movwf	pclath,c
  1089  000A8E  5035               	movf	_serial_write,w,c
  1090  000A90  6EFD               	movwf	tosl,c
  1091  000A92  5036               	movf	_serial_write+1,w,c
  1092  000A94  6EFE               	movwf	tosh,c
  1093  000A96  50F8               	movf	tblptru,w,c
  1094  000A98  6EFF               	movwf	tosu,c
  1095  000A9A  50FA               	movf	pclath,w,c
  1096  000A9C  0E85               	movlw	133
  1097  000A9E  0012               	return		;indir
  1098  000AA0                     l3435:
  1099                           
  1100                           ;FastTransfer.c: 60: serial_write(whereToSend);
  1101  000AA0  D801               	call	u2948
  1102  000AA2  D00C               	goto	l3437
  1103  000AA4                     u2948:
  1104  000AA4  0005               	push	
  1105  000AA6  6EFA               	movwf	pclath,c
  1106  000AA8  5035               	movf	_serial_write,w,c
  1107  000AAA  6EFD               	movwf	tosl,c
  1108  000AAC  5036               	movf	_serial_write+1,w,c
  1109  000AAE  6EFE               	movwf	tosh,c
  1110  000AB0  50F8               	movf	tblptru,w,c
  1111  000AB2  6EFF               	movwf	tosu,c
  1112  000AB4  50FA               	movf	pclath,w,c
  1113  000AB6  0101               	movlb	1	; () banked
  1114  000AB8  51CE               	movf	sendData@whereToSend& (0+255),w,b
  1115  000ABA  0012               	return		;indir
  1116  000ABC                     l3437:
  1117                           
  1118                           ;FastTransfer.c: 61: serial_write(moduleAddress);
  1119  000ABC  D801               	call	u2958
  1120  000ABE  D00B               	goto	l3439
  1121  000AC0                     u2958:
  1122  000AC0  0005               	push	
  1123  000AC2  6EFA               	movwf	pclath,c
  1124  000AC4  5035               	movf	_serial_write,w,c
  1125  000AC6  6EFD               	movwf	tosl,c
  1126  000AC8  5036               	movf	_serial_write+1,w,c
  1127  000ACA  6EFE               	movwf	tosh,c
  1128  000ACC  50F8               	movf	tblptru,w,c
  1129  000ACE  6EFF               	movwf	tosu,c
  1130  000AD0  50FA               	movf	pclath,w,c
  1131  000AD2  503E               	movf	_moduleAddress,w,c
  1132  000AD4  0012               	return		;indir
  1133  000AD6                     l3439:
  1134                           
  1135                           ;FastTransfer.c: 62: serial_write(ring_buffer.count);
  1136  000AD6  D801               	call	u2968
  1137  000AD8  D00C               	goto	l3441
  1138  000ADA                     u2968:
  1139  000ADA  0005               	push	
  1140  000ADC  6EFA               	movwf	pclath,c
  1141  000ADE  5035               	movf	_serial_write,w,c
  1142  000AE0  6EFD               	movwf	tosl,c
  1143  000AE2  5036               	movf	_serial_write+1,w,c
  1144  000AE4  6EFE               	movwf	tosh,c
  1145  000AE6  50F8               	movf	tblptru,w,c
  1146  000AE8  6EFF               	movwf	tosu,c
  1147  000AEA  50FA               	movf	pclath,w,c
  1148  000AEC  0101               	movlb	1	; () banked
  1149  000AEE  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1150  000AF0  0012               	return		;indir
  1151  000AF2                     l3441:
  1152                           
  1153                           ;FastTransfer.c: 66: int i;
  1154                           ;FastTransfer.c: 67: for (i = 0; i < ring_buffer.count; i++) {
  1155  000AF2  0E00               	movlw	0
  1156  000AF4  0101               	movlb	1	; () banked
  1157  000AF6  6FD1               	movwf	(sendData@i+1)& (0+255),b
  1158  000AF8  0E00               	movlw	0
  1159  000AFA  6FD0               	movwf	sendData@i& (0+255),b
  1160  000AFC  D019               	goto	l3447
  1161  000AFE                     l3443:
  1162                           
  1163                           ;FastTransfer.c: 68: serial_write(*(sendStructAddress + i));
  1164  000AFE  D801               	call	u2978
  1165  000B00  D013               	goto	l3445
  1166  000B02                     u2978:
  1167  000B02  0005               	push	
  1168  000B04  6EFA               	movwf	pclath,c
  1169  000B06  5035               	movf	_serial_write,w,c
  1170  000B08  6EFD               	movwf	tosl,c
  1171  000B0A  5036               	movf	_serial_write+1,w,c
  1172  000B0C  6EFE               	movwf	tosh,c
  1173  000B0E  50F8               	movf	tblptru,w,c
  1174  000B10  6EFF               	movwf	tosu,c
  1175  000B12  50FA               	movf	pclath,w,c
  1176  000B14  0101               	movlb	1	; () banked
  1177  000B16  51D0               	movf	sendData@i& (0+255),w,b
  1178  000B18  242D               	addwf	_sendStructAddress,w,c
  1179  000B1A  6ED9               	movwf	fsr2l,c
  1180  000B1C  0101               	movlb	1	; () banked
  1181  000B1E  51D1               	movf	(sendData@i+1)& (0+255),w,b
  1182  000B20  202E               	addwfc	_sendStructAddress+1,w,c
  1183  000B22  6EDA               	movwf	fsr2h,c
  1184  000B24  50DF               	movf	indf2,w,c
  1185  000B26  0012               	return		;indir
  1186  000B28                     l3445:
  1187  000B28  0101               	movlb	1	; () banked
  1188  000B2A  4BD0               	infsnz	sendData@i& (0+255),f,b
  1189  000B2C  2BD1               	incf	(sendData@i+1)& (0+255),f,b
  1190  000B2E  D000               	goto	l3447
  1191  000B30                     l3447:
  1192                           
  1193                           ; BSR set to: 1
  1194  000B30  0101               	movlb	1	; () banked
  1195  000B32  51CC               	movf	(_ring_buffer+204)& (0+255),w,b
  1196  000B34  0101               	movlb	1	; () banked
  1197  000B36  5DD0               	subwf	sendData@i& (0+255),w,b
  1198  000B38  0101               	movlb	1	; () banked
  1199  000B3A  51D1               	movf	(sendData@i+1)& (0+255),w,b
  1200  000B3C  0A80               	xorlw	128
  1201  000B3E  0100               	movlb	0	; () banked
  1202  000B40  6FFF               	movwf	??_sendData& (0+255),b
  1203  000B42  0101               	movlb	1	; () banked
  1204  000B44  51CD               	movf	(_ring_buffer+205)& (0+255),w,b
  1205  000B46  0A80               	xorlw	128
  1206  000B48  0100               	movlb	0	; () banked
  1207  000B4A  59FF               	subwfb	??_sendData& (0+255),w,b
  1208  000B4C  A0D8               	btfss	status,0,c
  1209  000B4E  D7D7               	goto	l3443
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;FastTransfer.c: 69: }
  1213                           ;FastTransfer.c: 72: serial_write(CS);
  1214                           
  1215                           ; BSR set to: 0
  1216  000B50  D801               	call	u2998
  1217  000B52  D00C               	goto	l3451
  1218  000B54                     u2998:
  1219  000B54  0005               	push	
  1220  000B56  6EFA               	movwf	pclath,c
  1221  000B58  5035               	movf	_serial_write,w,c
  1222  000B5A  6EFD               	movwf	tosl,c
  1223  000B5C  5036               	movf	_serial_write+1,w,c
  1224  000B5E  6EFE               	movwf	tosh,c
  1225  000B60  50F8               	movf	tblptru,w,c
  1226  000B62  6EFF               	movwf	tosu,c
  1227  000B64  50FA               	movf	pclath,w,c
  1228  000B66  0101               	movlb	1	; () banked
  1229  000B68  51CF               	movf	sendData@CS& (0+255),w,b
  1230  000B6A  0012               	return		;indir
  1231  000B6C                     l3451:
  1232                           
  1233                           ;FastTransfer.c: 75: crcBufS_put(&crc_buffer, whereToSend, CS, 0);
  1234  000B6C  0EEE               	movlw	low _crc_buffer
  1235  000B6E  6E1B               	movwf	crcBufS_put@_this,c
  1236  000B70  0E00               	movlw	high _crc_buffer
  1237  000B72  6E1C               	movwf	crcBufS_put@_this+1,c
  1238  000B74  C1CE  F01D         	movff	sendData@whereToSend,crcBufS_put@address
  1239  000B78  C1CF  F01E         	movff	sendData@CS,crcBufS_put@oldCRC
  1240  000B7C  0E00               	movlw	0
  1241  000B7E  6E1F               	movwf	crcBufS_put@status,c
  1242  000B80  EC41  F008         	call	_crcBufS_put
  1243                           
  1244                           ;FastTransfer.c: 78: FastTransfer_buffer_flush(&ring_buffer, 1);
  1245  000B84  0E00               	movlw	low _ring_buffer
  1246  000B86  6E23               	movwf	FastTransfer_buffer_flush@_this,c
  1247  000B88  0E01               	movlw	high _ring_buffer
  1248  000B8A  6E24               	movwf	FastTransfer_buffer_flush@_this+1,c
  1249  000B8C  0E00               	movlw	0
  1250  000B8E  6E26               	movwf	FastTransfer_buffer_flush@clearBuffer+1,c
  1251  000B90  0E01               	movlw	1
  1252  000B92  6E25               	movwf	FastTransfer_buffer_flush@clearBuffer,c
  1253  000B94  EC66  F00B         	call	_FastTransfer_buffer_flush	;wreg free
  1254  000B98  0012               	return		;funcret
  1255  000B9A                     __end_of_sendData:
  1256                           	opt stack 0
  1257                           tosu	equ	0xFFF
  1258                           tosh	equ	0xFFE
  1259                           tosl	equ	0xFFD
  1260                           pclath	equ	0xFFA
  1261                           tblptru	equ	0xFF8
  1262                           tblptrh	equ	0xFF7
  1263                           tblptrl	equ	0xFF6
  1264                           tablat	equ	0xFF5
  1265                           intcon	equ	0xFF2
  1266                           postinc0	equ	0xFEE
  1267                           wreg	equ	0xFE8
  1268                           indf2	equ	0xFDF
  1269                           fsr2h	equ	0xFDA
  1270                           fsr2l	equ	0xFD9
  1271                           status	equ	0xFD8
  1272                           
  1273 ;; *************** function _crcBufS_put *****************
  1274 ;; Defined at:
  1275 ;;		line 321 in file "FastTransfer.c"
  1276 ;; Parameters:    Size  Location     Type
  1277 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  1278 ;;		 -> crc_buffer(17), 
  1279 ;;  address         1   28[COMRAM] unsigned char 
  1280 ;;  oldCRC          1   29[COMRAM] unsigned char 
  1281 ;;  status          1   30[COMRAM] unsigned char 
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;		None               void
  1286 ;; Registers used:
  1287 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1293 ;;      Params:         5       0       0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0       0       0
  1295 ;;      Temps:          2       0       0       0       0       0       0
  1296 ;;      Totals:         7       0       0       0       0       0       0
  1297 ;;Total ram usage:        7 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    4
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_sendData
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306                           
  1307                           	psect	text4
  1308  001082                     __ptext4:
  1309                           	opt stack 0
  1310  001082                     _crcBufS_put:
  1311                           	opt stack 23
  1312                           
  1313                           ;FastTransfer.c: 322: _this->buf[_this->head] = address;
  1314                           
  1315                           ;incstack = 0
  1316  001082  EE20 F00F          	lfsr	2,15
  1317  001086  501B               	movf	crcBufS_put@_this,w,c
  1318  001088  26D9               	addwf	fsr2l,f,c
  1319  00108A  501C               	movf	crcBufS_put@_this+1,w,c
  1320  00108C  22DA               	addwfc	fsr2h,f,c
  1321  00108E  CFDE F020          	movff	postinc2,??_crcBufS_put
  1322  001092  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1323  001096  5020               	movf	??_crcBufS_put,w,c
  1324  001098  241B               	addwf	crcBufS_put@_this,w,c
  1325  00109A  6ED9               	movwf	fsr2l,c
  1326  00109C  5021               	movf	??_crcBufS_put+1,w,c
  1327  00109E  201C               	addwfc	crcBufS_put@_this+1,w,c
  1328  0010A0  6EDA               	movwf	fsr2h,c
  1329  0010A2  C01D  FFDF         	movff	crcBufS_put@address,indf2
  1330                           
  1331                           ;FastTransfer.c: 323: _this->head++;
  1332  0010A6  EE20 F00F          	lfsr	2,15
  1333  0010AA  501B               	movf	crcBufS_put@_this,w,c
  1334  0010AC  26D9               	addwf	fsr2l,f,c
  1335  0010AE  501C               	movf	crcBufS_put@_this+1,w,c
  1336  0010B0  22DA               	addwfc	fsr2h,f,c
  1337  0010B2  2ADE               	incf	postinc2,f,c
  1338  0010B4  0E00               	movlw	0
  1339  0010B6  22DD               	addwfc	postdec2,f,c
  1340                           
  1341                           ;FastTransfer.c: 324: _this->buf[_this->head] = oldCRC;
  1342  0010B8  EE20 F00F          	lfsr	2,15
  1343  0010BC  501B               	movf	crcBufS_put@_this,w,c
  1344  0010BE  26D9               	addwf	fsr2l,f,c
  1345  0010C0  501C               	movf	crcBufS_put@_this+1,w,c
  1346  0010C2  22DA               	addwfc	fsr2h,f,c
  1347  0010C4  CFDE F020          	movff	postinc2,??_crcBufS_put
  1348  0010C8  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1349  0010CC  5020               	movf	??_crcBufS_put,w,c
  1350  0010CE  241B               	addwf	crcBufS_put@_this,w,c
  1351  0010D0  6ED9               	movwf	fsr2l,c
  1352  0010D2  5021               	movf	??_crcBufS_put+1,w,c
  1353  0010D4  201C               	addwfc	crcBufS_put@_this+1,w,c
  1354  0010D6  6EDA               	movwf	fsr2h,c
  1355  0010D8  C01E  FFDF         	movff	crcBufS_put@oldCRC,indf2
  1356                           
  1357                           ;FastTransfer.c: 325: _this->head++;
  1358  0010DC  EE20 F00F          	lfsr	2,15
  1359  0010E0  501B               	movf	crcBufS_put@_this,w,c
  1360  0010E2  26D9               	addwf	fsr2l,f,c
  1361  0010E4  501C               	movf	crcBufS_put@_this+1,w,c
  1362  0010E6  22DA               	addwfc	fsr2h,f,c
  1363  0010E8  2ADE               	incf	postinc2,f,c
  1364  0010EA  0E00               	movlw	0
  1365  0010EC  22DD               	addwfc	postdec2,f,c
  1366                           
  1367                           ;FastTransfer.c: 326: _this->buf[_this->head] = status;
  1368  0010EE  EE20 F00F          	lfsr	2,15
  1369  0010F2  501B               	movf	crcBufS_put@_this,w,c
  1370  0010F4  26D9               	addwf	fsr2l,f,c
  1371  0010F6  501C               	movf	crcBufS_put@_this+1,w,c
  1372  0010F8  22DA               	addwfc	fsr2h,f,c
  1373  0010FA  CFDE F020          	movff	postinc2,??_crcBufS_put
  1374  0010FE  CFDD F021          	movff	postdec2,??_crcBufS_put+1
  1375  001102  5020               	movf	??_crcBufS_put,w,c
  1376  001104  241B               	addwf	crcBufS_put@_this,w,c
  1377  001106  6ED9               	movwf	fsr2l,c
  1378  001108  5021               	movf	??_crcBufS_put+1,w,c
  1379  00110A  201C               	addwfc	crcBufS_put@_this+1,w,c
  1380  00110C  6EDA               	movwf	fsr2h,c
  1381  00110E  C01F  FFDF         	movff	crcBufS_put@status,indf2
  1382                           
  1383                           ;FastTransfer.c: 327: _this->head++;
  1384  001112  EE20 F00F          	lfsr	2,15
  1385  001116  501B               	movf	crcBufS_put@_this,w,c
  1386  001118  26D9               	addwf	fsr2l,f,c
  1387  00111A  501C               	movf	crcBufS_put@_this+1,w,c
  1388  00111C  22DA               	addwfc	fsr2h,f,c
  1389  00111E  2ADE               	incf	postinc2,f,c
  1390  001120  0E00               	movlw	0
  1391  001122  22DD               	addwfc	postdec2,f,c
  1392                           
  1393                           ;FastTransfer.c: 328: if (_this->head >= (5 * 3)) {
  1394  001124  EE20 F00F          	lfsr	2,15
  1395  001128  501B               	movf	crcBufS_put@_this,w,c
  1396  00112A  26D9               	addwf	fsr2l,f,c
  1397  00112C  501C               	movf	crcBufS_put@_this+1,w,c
  1398  00112E  22DA               	addwfc	fsr2h,f,c
  1399  001130  0E01               	movlw	1
  1400  001132  BEDB               	btfsc	plusw2,7,c
  1401  001134  0012               	return	
  1402  001136  0E01               	movlw	1
  1403  001138  50DB               	movf	plusw2,w,c
  1404  00113A  E104               	bnz	u2830
  1405  00113C  0E0F               	movlw	15
  1406  00113E  5CDE               	subwf	postinc2,w,c
  1407  001140  A0D8               	btfss	status,0,c
  1408  001142  0012               	return	
  1409  001144                     u2830:
  1410                           
  1411                           ;FastTransfer.c: 329: _this->head = 0;
  1412  001144  EE20 F00F          	lfsr	2,15
  1413  001148  501B               	movf	crcBufS_put@_this,w,c
  1414  00114A  26D9               	addwf	fsr2l,f,c
  1415  00114C  501C               	movf	crcBufS_put@_this+1,w,c
  1416  00114E  22DA               	addwfc	fsr2h,f,c
  1417  001150  0E00               	movlw	0
  1418  001152  6EDE               	movwf	postinc2,c
  1419  001154  0E00               	movlw	0
  1420  001156  6EDD               	movwf	postdec2,c
  1421  001158  0012               	return	
  1422  00115A  0012               	return		;funcret
  1423  00115C                     __end_of_crcBufS_put:
  1424                           	opt stack 0
  1425                           tosu	equ	0xFFF
  1426                           tosh	equ	0xFFE
  1427                           tosl	equ	0xFFD
  1428                           pclath	equ	0xFFA
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           intcon	equ	0xFF2
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           indf2	equ	0xFDF
  1437                           postinc2	equ	0xFDE
  1438                           postdec2	equ	0xFDD
  1439                           plusw2	equ	0xFDB
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _FastTransfer_buffer_flush *****************
  1445 ;; Defined at:
  1446 ;;		line 261 in file "FastTransfer.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  _this           2   34[COMRAM] PTR struct ringBufS
  1449 ;;		 -> ring_buffer(206), 
  1450 ;;  clearBuffer     2   36[COMRAM] const int 
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;		None               void
  1455 ;; Registers used:
  1456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1462 ;;      Params:         4       0       0       0       0       0       0
  1463 ;;      Locals:         0       0       0       0       0       0       0
  1464 ;;      Temps:          0       0       0       0       0       0       0
  1465 ;;      Totals:         4       0       0       0       0       0       0
  1466 ;;Total ram usage:        4 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:    5
  1469 ;; This function calls:
  1470 ;;		_memset
  1471 ;; This function is called by:
  1472 ;;		_sendData
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text5
  1477  0016CC                     __ptext5:
  1478                           	opt stack 0
  1479  0016CC                     _FastTransfer_buffer_flush:
  1480                           	opt stack 22
  1481                           
  1482                           ;FastTransfer.c: 262: _this->count = 0;
  1483                           
  1484                           ;incstack = 0
  1485  0016CC  EE20 F0CC          	lfsr	2,204
  1486  0016D0  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1487  0016D2  26D9               	addwf	fsr2l,f,c
  1488  0016D4  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1489  0016D6  22DA               	addwfc	fsr2h,f,c
  1490  0016D8  0E00               	movlw	0
  1491  0016DA  6EDE               	movwf	postinc2,c
  1492  0016DC  0E00               	movlw	0
  1493  0016DE  6EDD               	movwf	postdec2,c
  1494                           
  1495                           ;FastTransfer.c: 263: _this->head = 0;
  1496  0016E0  EE20 F0C8          	lfsr	2,200
  1497  0016E4  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1498  0016E6  26D9               	addwf	fsr2l,f,c
  1499  0016E8  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1500  0016EA  22DA               	addwfc	fsr2h,f,c
  1501  0016EC  0E00               	movlw	0
  1502  0016EE  6EDE               	movwf	postinc2,c
  1503  0016F0  0E00               	movlw	0
  1504  0016F2  6EDD               	movwf	postdec2,c
  1505                           
  1506                           ;FastTransfer.c: 264: _this->tail = 0;
  1507  0016F4  EE20 F0CA          	lfsr	2,202
  1508  0016F8  5023               	movf	FastTransfer_buffer_flush@_this,w,c
  1509  0016FA  26D9               	addwf	fsr2l,f,c
  1510  0016FC  5024               	movf	FastTransfer_buffer_flush@_this+1,w,c
  1511  0016FE  22DA               	addwfc	fsr2h,f,c
  1512  001700  0E00               	movlw	0
  1513  001702  6EDE               	movwf	postinc2,c
  1514  001704  0E00               	movlw	0
  1515  001706  6EDD               	movwf	postdec2,c
  1516                           
  1517                           ;FastTransfer.c: 265: if (clearBuffer) {
  1518  001708  5025               	movf	FastTransfer_buffer_flush@clearBuffer,w,c
  1519  00170A  1026               	iorwf	FastTransfer_buffer_flush@clearBuffer+1,w,c
  1520  00170C  B4D8               	btfsc	status,2,c
  1521  00170E  0012               	return	
  1522                           
  1523                           ;FastTransfer.c: 266: memset(_this->buf, 0, sizeof (_this->buf));
  1524  001710  C023  F01B         	movff	FastTransfer_buffer_flush@_this,memset@p1
  1525  001714  C024  F01C         	movff	FastTransfer_buffer_flush@_this+1,memset@p1+1
  1526  001718  0E00               	movlw	0
  1527  00171A  6E1E               	movwf	memset@c+1,c
  1528  00171C  0E00               	movlw	0
  1529  00171E  6E1D               	movwf	memset@c,c
  1530  001720  0E00               	movlw	0
  1531  001722  6E20               	movwf	memset@n+1,c
  1532  001724  0EC8               	movlw	200
  1533  001726  6E1F               	movwf	memset@n,c
  1534  001728  EC37  F00D         	call	_memset	;wreg free
  1535  00172C  0012               	return	
  1536  00172E  0012               	return		;funcret
  1537  001730                     __end_of_FastTransfer_buffer_flush:
  1538                           	opt stack 0
  1539                           tosu	equ	0xFFF
  1540                           tosh	equ	0xFFE
  1541                           tosl	equ	0xFFD
  1542                           pclath	equ	0xFFA
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           intcon	equ	0xFF2
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           indf2	equ	0xFDF
  1551                           postinc2	equ	0xFDE
  1552                           postdec2	equ	0xFDD
  1553                           plusw2	equ	0xFDB
  1554                           fsr2h	equ	0xFDA
  1555                           fsr2l	equ	0xFD9
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _ToSend *****************
  1559 ;; Defined at:
  1560 ;;		line 216 in file "FastTransfer.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  where           1    wreg     unsigned char 
  1563 ;;  what            2    2[BANK1 ] unsigned int 
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;  where           1   37[COMRAM] unsigned char 
  1566 ;; Return value:  Size  Location     Type
  1567 ;;		None               void
  1568 ;; Registers used:
  1569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1575 ;;      Params:         0       0       2       0       0       0       0
  1576 ;;      Locals:         1       0       0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0
  1578 ;;      Totals:         1       0       2       0       0       0       0
  1579 ;;Total ram usage:        3 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; Hardware stack levels required when called:    6
  1582 ;; This function calls:
  1583 ;;		_FastTransfer_buffer_put
  1584 ;; This function is called by:
  1585 ;;		_respondECU
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text6
  1590  001B2C                     __ptext6:
  1591                           	opt stack 0
  1592  001B2C                     _ToSend:
  1593                           	opt stack 22
  1594                           
  1595                           ;incstack = 0
  1596                           ;ToSend@where stored from wreg
  1597  001B2C  6E26               	movwf	ToSend@where,c
  1598                           
  1599                           ;FastTransfer.c: 217: FastTransfer_buffer_put(&ring_buffer, where, what);
  1600  001B2E  0E00               	movlw	low _ring_buffer
  1601  001B30  6E21               	movwf	FastTransfer_buffer_put@_this,c
  1602  001B32  0E01               	movlw	high _ring_buffer
  1603  001B34  6E22               	movwf	FastTransfer_buffer_put@_this+1,c
  1604  001B36  C026  F023         	movff	ToSend@where,FastTransfer_buffer_put@towhere
  1605  001B3A  C1D0  F024         	movff	ToSend@what,FastTransfer_buffer_put@towhat
  1606  001B3E  C1D1  F025         	movff	ToSend@what+1,FastTransfer_buffer_put@towhat+1
  1607  001B42  ECB8  F003         	call	_FastTransfer_buffer_put	;wreg free
  1608  001B46  0012               	return		;funcret
  1609  001B48                     __end_of_ToSend:
  1610                           	opt stack 0
  1611                           tosu	equ	0xFFF
  1612                           tosh	equ	0xFFE
  1613                           tosl	equ	0xFFD
  1614                           pclath	equ	0xFFA
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           intcon	equ	0xFF2
  1620                           postinc0	equ	0xFEE
  1621                           wreg	equ	0xFE8
  1622                           indf2	equ	0xFDF
  1623                           postinc2	equ	0xFDE
  1624                           postdec2	equ	0xFDD
  1625                           plusw2	equ	0xFDB
  1626                           fsr2h	equ	0xFDA
  1627                           fsr2l	equ	0xFD9
  1628                           status	equ	0xFD8
  1629                           
  1630 ;; *************** function _FastTransfer_buffer_put *****************
  1631 ;; Defined at:
  1632 ;;		line 223 in file "FastTransfer.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;  _this           2   32[COMRAM] PTR struct ringBufS
  1635 ;;		 -> ring_buffer(206), 
  1636 ;;  towhere         1   34[COMRAM] unsigned char 
  1637 ;;  towhat          2   35[COMRAM] unsigned int 
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;		None               void
  1642 ;; Registers used:
  1643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1649 ;;      Params:         5       0       0       0       0       0       0
  1650 ;;      Locals:         0       0       0       0       0       0       0
  1651 ;;      Temps:          0       0       2       0       0       0       0
  1652 ;;      Totals:         5       0       2       0       0       0       0
  1653 ;;Total ram usage:        7 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    5
  1656 ;; This function calls:
  1657 ;;		_FastTransfer_buffer_modulo_inc
  1658 ;; This function is called by:
  1659 ;;		_ToSend
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text7
  1664  000770                     __ptext7:
  1665                           	opt stack 0
  1666  000770                     _FastTransfer_buffer_put:
  1667                           	opt stack 22
  1668                           
  1669                           ;FastTransfer.c: 225: group.integer = towhat;
  1670                           
  1671                           ;incstack = 0
  1672  000770  C024  F043         	movff	FastTransfer_buffer_put@towhat,_group
  1673  000774  C025  F044         	movff	FastTransfer_buffer_put@towhat+1,_group+1
  1674                           
  1675                           ;FastTransfer.c: 227: if (_this->count < (200 - 3)) {
  1676  000778  EE20 F0CC          	lfsr	2,204
  1677  00077C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1678  00077E  26D9               	addwf	fsr2l,f,c
  1679  000780  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1680  000782  22DA               	addwfc	fsr2h,f,c
  1681  000784  0E01               	movlw	1
  1682  000786  BEDB               	btfsc	plusw2,7,c
  1683  000788  D007               	goto	l3337
  1684  00078A  0E01               	movlw	1
  1685  00078C  50DB               	movf	plusw2,w,c
  1686  00078E  E103               	bnz	u2851
  1687  000790  0EC5               	movlw	197
  1688  000792  5CDE               	subwf	postinc2,w,c
  1689  000794  B0D8               	btfsc	status,0,c
  1690  000796                     u2851:
  1691  000796  0012               	return	
  1692  000798                     l3337:
  1693                           
  1694                           ;FastTransfer.c: 228: _this->buf[_this->head] = towhere;
  1695  000798  EE20 F0C8          	lfsr	2,200
  1696  00079C  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1697  00079E  26D9               	addwf	fsr2l,f,c
  1698  0007A0  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1699  0007A2  22DA               	addwfc	fsr2h,f,c
  1700  0007A4  CFDE F1CE          	movff	postinc2,??_FastTransfer_buffer_put
  1701  0007A8  CFDD F1CF          	movff	postdec2,??_FastTransfer_buffer_put+1
  1702  0007AC  0101               	movlb	1	; () banked
  1703  0007AE  51CE               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1704  0007B0  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1705  0007B2  6ED9               	movwf	fsr2l,c
  1706  0007B4  0101               	movlb	1	; () banked
  1707  0007B6  51CF               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1708  0007B8  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1709  0007BA  6EDA               	movwf	fsr2h,c
  1710  0007BC  C023  FFDF         	movff	FastTransfer_buffer_put@towhere,indf2
  1711                           
  1712                           ; BSR set to: 1
  1713                           ;FastTransfer.c: 229: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1714  0007C0  EE20 F0C8          	lfsr	2,200
  1715  0007C4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1716  0007C6  26D9               	addwf	fsr2l,f,c
  1717  0007C8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1718  0007CA  22DA               	addwfc	fsr2h,f,c
  1719  0007CC  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1720  0007D0  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1721  0007D4  0E00               	movlw	0
  1722  0007D6  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1723  0007D8  0EC8               	movlw	200
  1724  0007DA  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1725  0007DC  EC09  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1726  0007E0  EE20 F0C8          	lfsr	2,200
  1727  0007E4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1728  0007E6  26D9               	addwf	fsr2l,f,c
  1729  0007E8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1730  0007EA  22DA               	addwfc	fsr2h,f,c
  1731  0007EC  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1732  0007F0  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1733                           
  1734                           ;FastTransfer.c: 230: ++_this->count;
  1735  0007F4  EE20 F0CC          	lfsr	2,204
  1736  0007F8  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1737  0007FA  26D9               	addwf	fsr2l,f,c
  1738  0007FC  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1739  0007FE  22DA               	addwfc	fsr2h,f,c
  1740  000800  2ADE               	incf	postinc2,f,c
  1741  000802  0E00               	movlw	0
  1742  000804  22DD               	addwfc	postdec2,f,c
  1743                           
  1744                           ;FastTransfer.c: 231: _this->buf[_this->head] = group.parts[0];
  1745  000806  EE20 F0C8          	lfsr	2,200
  1746  00080A  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1747  00080C  26D9               	addwf	fsr2l,f,c
  1748  00080E  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1749  000810  22DA               	addwfc	fsr2h,f,c
  1750  000812  CFDE F1CE          	movff	postinc2,??_FastTransfer_buffer_put
  1751  000816  CFDD F1CF          	movff	postdec2,??_FastTransfer_buffer_put+1
  1752  00081A  0101               	movlb	1	; () banked
  1753  00081C  51CE               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1754  00081E  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1755  000820  6ED9               	movwf	fsr2l,c
  1756  000822  0101               	movlb	1	; () banked
  1757  000824  51CF               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1758  000826  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1759  000828  6EDA               	movwf	fsr2h,c
  1760  00082A  C043  FFDF         	movff	_group,indf2
  1761                           
  1762                           ; BSR set to: 1
  1763                           ;FastTransfer.c: 232: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1764  00082E  EE20 F0C8          	lfsr	2,200
  1765  000832  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1766  000834  26D9               	addwf	fsr2l,f,c
  1767  000836  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1768  000838  22DA               	addwfc	fsr2h,f,c
  1769  00083A  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1770  00083E  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1771  000842  0E00               	movlw	0
  1772  000844  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1773  000846  0EC8               	movlw	200
  1774  000848  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1775  00084A  EC09  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1776  00084E  EE20 F0C8          	lfsr	2,200
  1777  000852  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1778  000854  26D9               	addwf	fsr2l,f,c
  1779  000856  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1780  000858  22DA               	addwfc	fsr2h,f,c
  1781  00085A  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1782  00085E  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1783                           
  1784                           ;FastTransfer.c: 233: ++_this->count;
  1785  000862  EE20 F0CC          	lfsr	2,204
  1786  000866  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1787  000868  26D9               	addwf	fsr2l,f,c
  1788  00086A  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1789  00086C  22DA               	addwfc	fsr2h,f,c
  1790  00086E  2ADE               	incf	postinc2,f,c
  1791  000870  0E00               	movlw	0
  1792  000872  22DD               	addwfc	postdec2,f,c
  1793                           
  1794                           ;FastTransfer.c: 234: _this->buf[_this->head] = group.parts[1];
  1795  000874  EE20 F0C8          	lfsr	2,200
  1796  000878  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1797  00087A  26D9               	addwf	fsr2l,f,c
  1798  00087C  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1799  00087E  22DA               	addwfc	fsr2h,f,c
  1800  000880  CFDE F1CE          	movff	postinc2,??_FastTransfer_buffer_put
  1801  000884  CFDD F1CF          	movff	postdec2,??_FastTransfer_buffer_put+1
  1802  000888  0101               	movlb	1	; () banked
  1803  00088A  51CE               	movf	??_FastTransfer_buffer_put& (0+255),w,b
  1804  00088C  2421               	addwf	FastTransfer_buffer_put@_this,w,c
  1805  00088E  6ED9               	movwf	fsr2l,c
  1806  000890  0101               	movlb	1	; () banked
  1807  000892  51CF               	movf	(??_FastTransfer_buffer_put+1)& (0+255),w,b
  1808  000894  2022               	addwfc	FastTransfer_buffer_put@_this+1,w,c
  1809  000896  6EDA               	movwf	fsr2h,c
  1810  000898  C044  FFDF         	movff	_group+1,indf2
  1811                           
  1812                           ; BSR set to: 1
  1813                           ;FastTransfer.c: 235: _this->head = FastTransfer_buffer_modulo_inc(_this->head, 200);
  1814  00089C  EE20 F0C8          	lfsr	2,200
  1815  0008A0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1816  0008A2  26D9               	addwf	fsr2l,f,c
  1817  0008A4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1818  0008A6  22DA               	addwfc	fsr2h,f,c
  1819  0008A8  CFDE F01B          	movff	postinc2,FastTransfer_buffer_modulo_inc@value
  1820  0008AC  CFDD F01C          	movff	postdec2,FastTransfer_buffer_modulo_inc@value+1
  1821  0008B0  0E00               	movlw	0
  1822  0008B2  6E1E               	movwf	FastTransfer_buffer_modulo_inc@modulus+1,c
  1823  0008B4  0EC8               	movlw	200
  1824  0008B6  6E1D               	movwf	FastTransfer_buffer_modulo_inc@modulus,c
  1825  0008B8  EC09  F00D         	call	_FastTransfer_buffer_modulo_inc	;wreg free
  1826  0008BC  EE20 F0C8          	lfsr	2,200
  1827  0008C0  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1828  0008C2  26D9               	addwf	fsr2l,f,c
  1829  0008C4  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1830  0008C6  22DA               	addwfc	fsr2h,f,c
  1831  0008C8  C01B  FFDE         	movff	?_FastTransfer_buffer_modulo_inc,postinc2
  1832  0008CC  C01C  FFDD         	movff	?_FastTransfer_buffer_modulo_inc+1,postdec2
  1833                           
  1834                           ;FastTransfer.c: 236: ++_this->count;
  1835  0008D0  EE20 F0CC          	lfsr	2,204
  1836  0008D4  5021               	movf	FastTransfer_buffer_put@_this,w,c
  1837  0008D6  26D9               	addwf	fsr2l,f,c
  1838  0008D8  5022               	movf	FastTransfer_buffer_put@_this+1,w,c
  1839  0008DA  22DA               	addwfc	fsr2h,f,c
  1840  0008DC  2ADE               	incf	postinc2,f,c
  1841  0008DE  0E00               	movlw	0
  1842  0008E0  22DD               	addwfc	postdec2,f,c
  1843  0008E2  0012               	return	
  1844  0008E4  0012               	return		;funcret
  1845  0008E6                     __end_of_FastTransfer_buffer_put:
  1846                           	opt stack 0
  1847                           tosu	equ	0xFFF
  1848                           tosh	equ	0xFFE
  1849                           tosl	equ	0xFFD
  1850                           pclath	equ	0xFFA
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           indf2	equ	0xFDF
  1859                           postinc2	equ	0xFDE
  1860                           postdec2	equ	0xFDD
  1861                           plusw2	equ	0xFDB
  1862                           fsr2h	equ	0xFDA
  1863                           fsr2l	equ	0xFD9
  1864                           status	equ	0xFD8
  1865                           
  1866 ;; *************** function _FastTransfer_buffer_modulo_inc *****************
  1867 ;; Defined at:
  1868 ;;		line 273 in file "FastTransfer.c"
  1869 ;; Parameters:    Size  Location     Type
  1870 ;;  value           2   26[COMRAM] const unsigned int 
  1871 ;;  modulus         2   28[COMRAM] const unsigned int 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  my_value        2   30[COMRAM] unsigned int 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  2   26[COMRAM] unsigned int 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1883 ;;      Params:         4       0       0       0       0       0       0
  1884 ;;      Locals:         2       0       0       0       0       0       0
  1885 ;;      Temps:          0       0       0       0       0       0       0
  1886 ;;      Totals:         6       0       0       0       0       0       0
  1887 ;;Total ram usage:        6 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    4
  1890 ;; This function calls:
  1891 ;;		Nothing
  1892 ;; This function is called by:
  1893 ;;		_FastTransfer_buffer_put
  1894 ;;		_FastTransfer_buffer_get
  1895 ;; This function uses a non-reentrant model
  1896 ;;
  1897                           
  1898                           	psect	text8
  1899  001A12                     __ptext8:
  1900                           	opt stack 0
  1901  001A12                     _FastTransfer_buffer_modulo_inc:
  1902                           	opt stack 22
  1903                           
  1904                           ;FastTransfer.c: 274: unsigned int my_value = value + 1;
  1905                           
  1906                           ;incstack = 0
  1907  001A12  0E01               	movlw	1
  1908  001A14  241B               	addwf	FastTransfer_buffer_modulo_inc@value,w,c
  1909  001A16  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1910  001A18  0E00               	movlw	0
  1911  001A1A  201C               	addwfc	FastTransfer_buffer_modulo_inc@value+1,w,c
  1912  001A1C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1913                           
  1914                           ;FastTransfer.c: 275: if (my_value >= modulus) {
  1915  001A1E  501D               	movf	FastTransfer_buffer_modulo_inc@modulus,w,c
  1916  001A20  5C1F               	subwf	FastTransfer_buffer_modulo_inc@my_value,w,c
  1917  001A22  501E               	movf	FastTransfer_buffer_modulo_inc@modulus+1,w,c
  1918  001A24  5820               	subwfb	FastTransfer_buffer_modulo_inc@my_value+1,w,c
  1919  001A26  A0D8               	btfss	status,0,c
  1920  001A28  D005               	goto	l2413
  1921                           
  1922                           ;FastTransfer.c: 276: my_value = 0;
  1923  001A2A  0E00               	movlw	0
  1924  001A2C  6E20               	movwf	FastTransfer_buffer_modulo_inc@my_value+1,c
  1925  001A2E  0E00               	movlw	0
  1926  001A30  6E1F               	movwf	FastTransfer_buffer_modulo_inc@my_value,c
  1927  001A32  D000               	goto	l2413
  1928  001A34                     l2413:
  1929                           
  1930                           ;FastTransfer.c: 277: }
  1931                           ;FastTransfer.c: 278: return (my_value);
  1932  001A34  C01F  F01B         	movff	FastTransfer_buffer_modulo_inc@my_value,?_FastTransfer_buffer_modulo_inc
  1933  001A38  C020  F01C         	movff	FastTransfer_buffer_modulo_inc@my_value+1,?_FastTransfer_buffer_modulo_inc+1
  1934  001A3C  0012               	return	
  1935  001A3E  0012               	return		;funcret
  1936  001A40                     __end_of_FastTransfer_buffer_modulo_inc:
  1937                           	opt stack 0
  1938                           tosu	equ	0xFFF
  1939                           tosh	equ	0xFFE
  1940                           tosl	equ	0xFFD
  1941                           pclath	equ	0xFFA
  1942                           tblptru	equ	0xFF8
  1943                           tblptrh	equ	0xFF7
  1944                           tblptrl	equ	0xFF6
  1945                           tablat	equ	0xFF5
  1946                           intcon	equ	0xFF2
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           indf2	equ	0xFDF
  1950                           postinc2	equ	0xFDE
  1951                           postdec2	equ	0xFDD
  1952                           plusw2	equ	0xFDB
  1953                           fsr2h	equ	0xFDA
  1954                           fsr2l	equ	0xFD9
  1955                           status	equ	0xFD8
  1956                           
  1957 ;; *************** function _receiveData *****************
  1958 ;; Defined at:
  1959 ;;		line 82 in file "FastTransfer.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  holder          3   16[BANK1 ] unsigned char [3]
  1964 ;;  crcHolder       1   20[BANK1 ] unsigned char 
  1965 ;;  holder          3   13[BANK1 ] unsigned char [3]
  1966 ;;  crcHolder       1   19[BANK1 ] unsigned char 
  1967 ;;  u               2   21[BANK1 ] int 
  1968 ;;  r               2   23[BANK1 ] int 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      unsigned char 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1978 ;;      Params:         0       0       0       0       0       0       0
  1979 ;;      Locals:         0       0      12       0       0       0       0
  1980 ;;      Temps:          0       0       6       0       0       0       0
  1981 ;;      Totals:         0       0      18       0       0       0       0
  1982 ;;Total ram usage:       18 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    8
  1985 ;; This function calls:
  1986 ;;		Absolute function
  1987 ;;		_CRC8
  1988 ;;		_CRCcheck
  1989 ;;		_Receive_available
  1990 ;;		_Receive_get
  1991 ;;		_Receive_peek
  1992 ;;		_Send_put
  1993 ;; This function is called by:
  1994 ;;		_updateComms
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           	psect	text9
  1999  0000A2                     __ptext9:
  2000                           	opt stack 0
  2001  0000A2                     _receiveData:
  2002                           	opt stack 21
  2003                           
  2004                           ;FastTransfer.c: 85: if (rx_len == 0) {
  2005                           
  2006                           ;incstack = 0
  2007  0000A2  5042               	movf	_rx_len,w,c
  2008  0000A4  A4D8               	btfss	status,2,c
  2009  0000A6  D0AF               	goto	l3559
  2010                           
  2011                           ;FastTransfer.c: 87: if (serial_available() > 4) {
  2012  0000A8  D801               	call	u3148
  2013  0000AA  D00A               	goto	u3149
  2014  0000AC                     u3148:
  2015  0000AC  0005               	push	
  2016  0000AE  6EFA               	movwf	pclath,c
  2017  0000B0  502F               	movf	_serial_available,w,c
  2018  0000B2  6EFD               	movwf	tosl,c
  2019  0000B4  5030               	movf	_serial_available+1,w,c
  2020  0000B6  6EFE               	movwf	tosh,c
  2021  0000B8  50F8               	movf	tblptru,w,c
  2022  0000BA  6EFF               	movwf	tosu,c
  2023  0000BC  50FA               	movf	pclath,w,c
  2024  0000BE  0012               	return		;indir
  2025  0000C0                     u3149:
  2026  0000C0  BE1E               	btfsc	?_Receive_available+1,7,c
  2027  0000C2  D0A1               	goto	l3559
  2028  0000C4  501E               	movf	?_Receive_available+1,w,c
  2029  0000C6  E11F               	bnz	l3535
  2030  0000C8  0E05               	movlw	5
  2031  0000CA  5C1D               	subwf	?_Receive_available,w,c
  2032  0000CC  B0D8               	btfsc	status,0,c
  2033  0000CE  D01B               	goto	l3535
  2034  0000D0  D09A               	goto	l3559
  2035                           
  2036                           ;FastTransfer.c: 89: while (serial_read() != 0x06) {
  2037  0000D2  D019               	goto	l3535
  2038  0000D4                     l3527:
  2039                           
  2040                           ;FastTransfer.c: 93: alignErrorCounter++;
  2041  0000D4  4A27               	infsnz	_alignErrorCounter,f,c
  2042  0000D6  2A28               	incf	_alignErrorCounter+1,f,c
  2043                           
  2044                           ;FastTransfer.c: 94: if (serial_available() < 5)
  2045  0000D8  D801               	call	u3168
  2046  0000DA  D00A               	goto	u3169
  2047  0000DC                     u3168:
  2048  0000DC  0005               	push	
  2049  0000DE  6EFA               	movwf	pclath,c
  2050  0000E0  502F               	movf	_serial_available,w,c
  2051  0000E2  6EFD               	movwf	tosl,c
  2052  0000E4  5030               	movf	_serial_available+1,w,c
  2053  0000E6  6EFE               	movwf	tosh,c
  2054  0000E8  50F8               	movf	tblptru,w,c
  2055  0000EA  6EFF               	movwf	tosu,c
  2056  0000EC  50FA               	movf	pclath,w,c
  2057  0000EE  0012               	return		;indir
  2058  0000F0                     u3169:
  2059  0000F0  BE1E               	btfsc	?_Receive_available+1,7,c
  2060  0000F2  D006               	goto	l3531
  2061  0000F4  501E               	movf	?_Receive_available+1,w,c
  2062  0000F6  E107               	bnz	l3535
  2063  0000F8  0E05               	movlw	5
  2064  0000FA  5C1D               	subwf	?_Receive_available,w,c
  2065  0000FC  B0D8               	btfsc	status,0,c
  2066  0000FE  D003               	goto	l3535
  2067  000100                     l3531:
  2068                           
  2069                           ;FastTransfer.c: 95: return 0;
  2070  000100  0E00               	movlw	0
  2071  000102  0012               	return	
  2072  000104  D000               	goto	l3535
  2073  000106                     l3535:
  2074  000106  D801               	call	u3188
  2075  000108  D00A               	goto	u3189
  2076  00010A                     u3188:
  2077  00010A  0005               	push	
  2078  00010C  6EFA               	movwf	pclath,c
  2079  00010E  5033               	movf	_serial_read,w,c
  2080  000110  6EFD               	movwf	tosl,c
  2081  000112  5034               	movf	_serial_read+1,w,c
  2082  000114  6EFE               	movwf	tosh,c
  2083  000116  50F8               	movf	tblptru,w,c
  2084  000118  6EFF               	movwf	tosu,c
  2085  00011A  50FA               	movf	pclath,w,c
  2086  00011C  0012               	return		;indir
  2087  00011E                     u3189:
  2088  00011E  0A06               	xorlw	6
  2089  000120  A4D8               	btfss	status,2,c
  2090  000122  D7D8               	goto	l3527
  2091                           
  2092                           ;FastTransfer.c: 96: }
  2093                           ;FastTransfer.c: 97: if (serial_read() == 0x85) {
  2094  000124  D801               	call	u3208
  2095  000126  D00A               	goto	u3209
  2096  000128                     u3208:
  2097  000128  0005               	push	
  2098  00012A  6EFA               	movwf	pclath,c
  2099  00012C  5033               	movf	_serial_read,w,c
  2100  00012E  6EFD               	movwf	tosl,c
  2101  000130  5034               	movf	_serial_read+1,w,c
  2102  000132  6EFE               	movwf	tosh,c
  2103  000134  50F8               	movf	tblptru,w,c
  2104  000136  6EFF               	movwf	tosu,c
  2105  000138  50FA               	movf	pclath,w,c
  2106  00013A  0012               	return		;indir
  2107  00013C                     u3209:
  2108  00013C  0A85               	xorlw	133
  2109  00013E  A4D8               	btfss	status,2,c
  2110  000140  D062               	goto	l3559
  2111                           
  2112                           ;FastTransfer.c: 98: rx_address = serial_read();
  2113  000142  D801               	call	u3228
  2114  000144  D00A               	goto	u3229
  2115  000146                     u3228:
  2116  000146  0005               	push	
  2117  000148  6EFA               	movwf	pclath,c
  2118  00014A  5033               	movf	_serial_read,w,c
  2119  00014C  6EFD               	movwf	tosl,c
  2120  00014E  5034               	movf	_serial_read+1,w,c
  2121  000150  6EFE               	movwf	tosh,c
  2122  000152  50F8               	movf	tblptru,w,c
  2123  000154  6EFF               	movwf	tosu,c
  2124  000156  50FA               	movf	pclath,w,c
  2125  000158  0012               	return		;indir
  2126  00015A                     u3229:
  2127  00015A  6E40               	movwf	_rx_address,c
  2128                           
  2129                           ;FastTransfer.c: 99: returnAddress = serial_read();
  2130  00015C  D801               	call	u3238
  2131  00015E  D00A               	goto	u3239
  2132  000160                     u3238:
  2133  000160  0005               	push	
  2134  000162  6EFA               	movwf	pclath,c
  2135  000164  5033               	movf	_serial_read,w,c
  2136  000166  6EFD               	movwf	tosl,c
  2137  000168  5034               	movf	_serial_read+1,w,c
  2138  00016A  6EFE               	movwf	tosh,c
  2139  00016C  50F8               	movf	tblptru,w,c
  2140  00016E  6EFF               	movwf	tosu,c
  2141  000170  50FA               	movf	pclath,w,c
  2142  000172  0012               	return		;indir
  2143  000174                     u3239:
  2144  000174  6E3F               	movwf	_returnAddress,c
  2145                           
  2146                           ;FastTransfer.c: 100: rx_len = serial_read();
  2147  000176  D801               	call	u3248
  2148  000178  D00A               	goto	u3249
  2149  00017A                     u3248:
  2150  00017A  0005               	push	
  2151  00017C  6EFA               	movwf	pclath,c
  2152  00017E  5033               	movf	_serial_read,w,c
  2153  000180  6EFD               	movwf	tosl,c
  2154  000182  5034               	movf	_serial_read+1,w,c
  2155  000184  6EFE               	movwf	tosh,c
  2156  000186  50F8               	movf	tblptru,w,c
  2157  000188  6EFF               	movwf	tosu,c
  2158  00018A  50FA               	movf	pclath,w,c
  2159  00018C  0012               	return		;indir
  2160  00018E                     u3249:
  2161  00018E  6E42               	movwf	_rx_len,c
  2162                           
  2163                           ;FastTransfer.c: 102: if (rx_address != moduleAddress) {
  2164  000190  503E               	movf	_moduleAddress,w,c
  2165  000192  1840               	xorwf	_rx_address,w,c
  2166  000194  B4D8               	btfsc	status,2,c
  2167  000196  D037               	goto	l3559
  2168                           
  2169                           ;FastTransfer.c: 103: addressErrorCounter++;
  2170  000198  0100               	movlb	0	; () banked
  2171  00019A  4BC0               	infsnz	_addressErrorCounter& (0+255),f,b
  2172  00019C  2BC1               	incf	(_addressErrorCounter+1)& (0+255),f,b
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;FastTransfer.c: 106: int u;
  2176                           ;FastTransfer.c: 107: for (u = 0; u <= (rx_len + 1); u++) {
  2177  00019E  0E00               	movlw	0
  2178  0001A0  0101               	movlb	1	; () banked
  2179  0001A2  6FE4               	movwf	(receiveData@u+1)& (0+255),b
  2180  0001A4  0E00               	movlw	0
  2181  0001A6  6FE3               	movwf	receiveData@u& (0+255),b
  2182  0001A8  D010               	goto	l3551
  2183  0001AA                     l3547:
  2184                           
  2185                           ; BSR set to: 1
  2186                           ;FastTransfer.c: 108: serial_read();
  2187  0001AA  D801               	call	u3268
  2188  0001AC  D00A               	goto	l3549
  2189  0001AE                     u3268:
  2190  0001AE  0005               	push	
  2191  0001B0  6EFA               	movwf	pclath,c
  2192  0001B2  5033               	movf	_serial_read,w,c
  2193  0001B4  6EFD               	movwf	tosl,c
  2194  0001B6  5034               	movf	_serial_read+1,w,c
  2195  0001B8  6EFE               	movwf	tosh,c
  2196  0001BA  50F8               	movf	tblptru,w,c
  2197  0001BC  6EFF               	movwf	tosu,c
  2198  0001BE  50FA               	movf	pclath,w,c
  2199  0001C0  0012               	return		;indir
  2200  0001C2                     l3549:
  2201  0001C2  0101               	movlb	1	; () banked
  2202  0001C4  4BE3               	infsnz	receiveData@u& (0+255),f,b
  2203  0001C6  2BE4               	incf	(receiveData@u+1)& (0+255),f,b
  2204  0001C8  D000               	goto	l3551
  2205  0001CA                     l3551:
  2206                           
  2207                           ; BSR set to: 1
  2208  0001CA  5042               	movf	_rx_len,w,c
  2209  0001CC  0101               	movlb	1	; () banked
  2210  0001CE  6FD5               	movwf	??_receiveData& (0+255),b
  2211  0001D0  6BD6               	clrf	(??_receiveData+1)& (0+255),b
  2212  0001D2  0E01               	movlw	1
  2213  0001D4  0101               	movlb	1	; () banked
  2214  0001D6  27D5               	addwf	??_receiveData& (0+255),f,b
  2215  0001D8  0E00               	movlw	0
  2216  0001DA  23D6               	addwfc	(??_receiveData+1)& (0+255),f,b
  2217  0001DC  0101               	movlb	1	; () banked
  2218  0001DE  51E3               	movf	receiveData@u& (0+255),w,b
  2219  0001E0  0101               	movlb	1	; () banked
  2220  0001E2  5DD5               	subwf	??_receiveData& (0+255),w,b
  2221  0001E4  0101               	movlb	1	; () banked
  2222  0001E6  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2223  0001E8  0A80               	xorlw	128
  2224  0001EA  0101               	movlb	1	; () banked
  2225  0001EC  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2226  0001EE  0101               	movlb	1	; () banked
  2227  0001F0  51E4               	movf	(receiveData@u+1)& (0+255),w,b
  2228  0001F2  0A80               	xorlw	128
  2229  0001F4  0101               	movlb	1	; () banked
  2230  0001F6  59D7               	subwfb	(??_receiveData+2)& (0+255),w,b
  2231  0001F8  B0D8               	btfsc	status,0,c
  2232  0001FA  D7D7               	goto	l3547
  2233                           
  2234                           ; BSR set to: 1
  2235                           ;FastTransfer.c: 109: }
  2236                           ;FastTransfer.c: 110: rx_len = 0;
  2237                           
  2238                           ; BSR set to: 1
  2239  0001FC  0E00               	movlw	0
  2240  0001FE  6E42               	movwf	_rx_len,c
  2241                           
  2242                           ; BSR set to: 1
  2243                           ;FastTransfer.c: 111: return 0;
  2244  000200  0E00               	movlw	0
  2245                           
  2246                           ; BSR set to: 1
  2247  000202  0012               	return	
  2248                           
  2249                           ; BSR set to: 1
  2250                           
  2251                           ; BSR set to: 1
  2252                           
  2253                           ; BSR set to: 1
  2254  000204  D000               	goto	l3559
  2255  000206                     l3559:
  2256                           
  2257                           ;FastTransfer.c: 112: }
  2258                           ;FastTransfer.c: 114: }
  2259                           ;FastTransfer.c: 115: }
  2260                           ;FastTransfer.c: 116: }
  2261                           ;FastTransfer.c: 119: if (rx_len != 0) {
  2262  000206  5042               	movf	_rx_len,w,c
  2263  000208  B4D8               	btfsc	status,2,c
  2264  00020A  D2AF               	goto	l3683
  2265                           
  2266                           ;FastTransfer.c: 122: if (rx_array_inx == 0) {
  2267  00020C  5041               	movf	_rx_array_inx,w,c
  2268  00020E  B4D8               	btfsc	status,2,c
  2269  000210  D002               	goto	l3565
  2270  000212  D048               	goto	l3583
  2271                           
  2272                           ;FastTransfer.c: 123: while (!(serial_available() >= 1));
  2273  000214  D000               	goto	l3565
  2274  000216                     l3565:
  2275  000216  D801               	call	u3308
  2276  000218  D00A               	goto	u3309
  2277  00021A                     u3308:
  2278  00021A  0005               	push	
  2279  00021C  6EFA               	movwf	pclath,c
  2280  00021E  502F               	movf	_serial_available,w,c
  2281  000220  6EFD               	movwf	tosl,c
  2282  000222  5030               	movf	_serial_available+1,w,c
  2283  000224  6EFE               	movwf	tosh,c
  2284  000226  50F8               	movf	tblptru,w,c
  2285  000228  6EFF               	movwf	tosu,c
  2286  00022A  50FA               	movf	pclath,w,c
  2287  00022C  0012               	return		;indir
  2288  00022E                     u3309:
  2289  00022E  BE1E               	btfsc	?_Receive_available+1,7,c
  2290  000230  D7F2               	goto	l3565
  2291  000232  501E               	movf	?_Receive_available+1,w,c
  2292  000234  E105               	bnz	l3567
  2293  000236  041D               	decf	?_Receive_available,w,c
  2294  000238  B0D8               	btfsc	status,0,c
  2295  00023A  D002               	goto	l3567
  2296  00023C  D7EC               	goto	l3565
  2297  00023E  D000               	goto	l3567
  2298  000240                     l3567:
  2299                           
  2300                           ;FastTransfer.c: 124: if (255 == serial_peek()) {
  2301  000240  D801               	call	u3328
  2302  000242  D00A               	goto	u3329
  2303  000244                     u3328:
  2304  000244  0005               	push	
  2305  000246  6EFA               	movwf	pclath,c
  2306  000248  5031               	movf	_serial_peek,w,c
  2307  00024A  6EFD               	movwf	tosl,c
  2308  00024C  5032               	movf	_serial_peek+1,w,c
  2309  00024E  6EFE               	movwf	tosh,c
  2310  000250  50F8               	movf	tblptru,w,c
  2311  000252  6EFF               	movwf	tosu,c
  2312  000254  50FA               	movf	pclath,w,c
  2313  000256  0012               	return		;indir
  2314  000258                     u3329:
  2315  000258  0AFF               	xorlw	255
  2316  00025A  A4D8               	btfss	status,2,c
  2317  00025C  D023               	goto	l3583
  2318                           
  2319                           ;FastTransfer.c: 125: CRCcheck();
  2320  00025E  EC73  F004         	call	_CRCcheck	;wreg free
  2321                           
  2322                           ;FastTransfer.c: 126: rx_len = 0;
  2323  000262  0E00               	movlw	0
  2324  000264  6E42               	movwf	_rx_len,c
  2325                           
  2326                           ;FastTransfer.c: 127: rx_array_inx = 0;
  2327  000266  0E00               	movlw	0
  2328  000268  6E41               	movwf	_rx_array_inx,c
  2329                           
  2330                           ;FastTransfer.c: 128: return 0;
  2331  00026A  0E00               	movlw	0
  2332  00026C  0012               	return	
  2333                           
  2334                           ;FastTransfer.c: 129: }
  2335                           ;FastTransfer.c: 130: }
  2336                           ;FastTransfer.c: 133: while (serial_available() && rx_array_inx <= rx_len) {
  2337  00026E  D01A               	goto	l3583
  2338  000270                     l3579:
  2339                           
  2340                           ;FastTransfer.c: 134: rx_buffer[rx_array_inx++] = serial_read();
  2341  000270  D801               	call	u3348
  2342  000272  D00A               	goto	u3349
  2343  000274                     u3348:
  2344  000274  0005               	push	
  2345  000276  6EFA               	movwf	pclath,c
  2346  000278  5033               	movf	_serial_read,w,c
  2347  00027A  6EFD               	movwf	tosl,c
  2348  00027C  5034               	movf	_serial_read+1,w,c
  2349  00027E  6EFE               	movwf	tosh,c
  2350  000280  50F8               	movf	tblptru,w,c
  2351  000282  6EFF               	movwf	tosu,c
  2352  000284  50FA               	movf	pclath,w,c
  2353  000286  0012               	return		;indir
  2354  000288                     u3349:
  2355  000288  0101               	movlb	1	; () banked
  2356  00028A  6FD5               	movwf	??_receiveData& (0+255),b
  2357  00028C  5041               	movf	_rx_array_inx,w,c
  2358  00028E  0D01               	mullw	1
  2359  000290  0E00               	movlw	low _rx_buffer
  2360  000292  24F3               	addwf	prodl,w,c
  2361  000294  6ED9               	movwf	fsr2l,c
  2362  000296  0E02               	movlw	high _rx_buffer
  2363  000298  20F4               	addwfc	prodh,w,c
  2364  00029A  6EDA               	movwf	fsr2h,c
  2365  00029C  C1D5  FFDF         	movff	??_receiveData,indf2
  2366                           
  2367                           ; BSR set to: 1
  2368  0002A0  2A41               	incf	_rx_array_inx,f,c
  2369  0002A2  D000               	goto	l3583
  2370  0002A4                     l3583:
  2371  0002A4  D801               	call	u3358
  2372  0002A6  D00A               	goto	u3359
  2373  0002A8                     u3358:
  2374  0002A8  0005               	push	
  2375  0002AA  6EFA               	movwf	pclath,c
  2376  0002AC  502F               	movf	_serial_available,w,c
  2377  0002AE  6EFD               	movwf	tosl,c
  2378  0002B0  5030               	movf	_serial_available+1,w,c
  2379  0002B2  6EFE               	movwf	tosh,c
  2380  0002B4  50F8               	movf	tblptru,w,c
  2381  0002B6  6EFF               	movwf	tosu,c
  2382  0002B8  50FA               	movf	pclath,w,c
  2383  0002BA  0012               	return		;indir
  2384  0002BC                     u3359:
  2385  0002BC  501D               	movf	?_Receive_available,w,c
  2386  0002BE  101E               	iorwf	?_Receive_available+1,w,c
  2387  0002C0  B4D8               	btfsc	status,2,c
  2388  0002C2  D006               	goto	l3587
  2389  0002C4  5041               	movf	_rx_array_inx,w,c
  2390  0002C6  5C42               	subwf	_rx_len,w,c
  2391  0002C8  A0D8               	btfss	status,0,c
  2392  0002CA  D002               	goto	l3587
  2393  0002CC  D7D1               	goto	l3579
  2394  0002CE  D000               	goto	l3587
  2395  0002D0                     l3587:
  2396                           
  2397                           ;FastTransfer.c: 135: }
  2398                           ;FastTransfer.c: 137: if (rx_len == (rx_array_inx - 1)) {
  2399  0002D0  5042               	movf	_rx_len,w,c
  2400  0002D2  0101               	movlb	1	; () banked
  2401  0002D4  6FD5               	movwf	??_receiveData& (0+255),b
  2402  0002D6  6BD6               	clrf	(??_receiveData+1)& (0+255),b
  2403  0002D8  0EFF               	movlw	255
  2404  0002DA  0101               	movlb	1	; () banked
  2405  0002DC  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2406  0002DE  0EFF               	movlw	255
  2407  0002E0  0101               	movlb	1	; () banked
  2408  0002E2  6FD8               	movwf	(??_receiveData+3)& (0+255),b
  2409  0002E4  5041               	movf	_rx_array_inx,w,c
  2410  0002E6  0101               	movlb	1	; () banked
  2411  0002E8  6FD9               	movwf	(??_receiveData+4)& (0+255),b
  2412  0002EA  6BDA               	clrf	(??_receiveData+5)& (0+255),b
  2413  0002EC  0101               	movlb	1	; () banked
  2414  0002EE  51D7               	movf	(??_receiveData+2)& (0+255),w,b
  2415  0002F0  0101               	movlb	1	; () banked
  2416  0002F2  27D9               	addwf	(??_receiveData+4)& (0+255),f,b
  2417  0002F4  0101               	movlb	1	; () banked
  2418  0002F6  51D8               	movf	(??_receiveData+3)& (0+255),w,b
  2419  0002F8  0101               	movlb	1	; () banked
  2420  0002FA  23DA               	addwfc	(??_receiveData+5)& (0+255),f,b
  2421  0002FC  0101               	movlb	1	; () banked
  2422  0002FE  51D5               	movf	??_receiveData& (0+255),w,b
  2423  000300  0101               	movlb	1	; () banked
  2424  000302  19D9               	xorwf	(??_receiveData+4)& (0+255),w,b
  2425  000304  E105               	bnz	u3381
  2426  000306  0101               	movlb	1	; () banked
  2427  000308  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2428  00030A  0101               	movlb	1	; () banked
  2429  00030C  19DA               	xorwf	(??_receiveData+5)& (0+255),w,b
  2430  00030E  A4D8               	btfss	status,2,c
  2431  000310                     u3381:
  2432  000310  D22C               	goto	l3683
  2433                           
  2434                           ; BSR set to: 1
  2435                           ;FastTransfer.c: 140: calc_CS = CRC8(rx_buffer, rx_len);
  2436  000312  0E00               	movlw	low _rx_buffer
  2437  000314  6E1B               	movwf	CRC8@data,c
  2438  000316  0E02               	movlw	high _rx_buffer
  2439  000318  6E1C               	movwf	CRC8@data+1,c
  2440  00031A  C042  F01D         	movff	_rx_len,CRC8@len
  2441  00031E  ECEE  F00B         	call	_CRC8	;wreg free
  2442  000322  6E3C               	movwf	_calc_CS,c
  2443                           
  2444                           ;FastTransfer.c: 144: if (calc_CS == rx_buffer[rx_array_inx - 1]) {
  2445  000324  0EFF               	movlw	255
  2446  000326  0101               	movlb	1	; () banked
  2447  000328  6FD5               	movwf	??_receiveData& (0+255),b
  2448  00032A  0EFF               	movlw	255
  2449  00032C  0101               	movlb	1	; () banked
  2450  00032E  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2451  000330  5041               	movf	_rx_array_inx,w,c
  2452  000332  0101               	movlb	1	; () banked
  2453  000334  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2454  000336  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2455  000338  0101               	movlb	1	; () banked
  2456  00033A  51D5               	movf	??_receiveData& (0+255),w,b
  2457  00033C  0101               	movlb	1	; () banked
  2458  00033E  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2459  000340  0101               	movlb	1	; () banked
  2460  000342  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2461  000344  0101               	movlb	1	; () banked
  2462  000346  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2463  000348  0E00               	movlw	low _rx_buffer
  2464  00034A  0101               	movlb	1	; () banked
  2465  00034C  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2466  00034E  6ED9               	movwf	fsr2l,c
  2467  000350  0E02               	movlw	high _rx_buffer
  2468  000352  0101               	movlb	1	; () banked
  2469  000354  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2470  000356  6EDA               	movwf	fsr2h,c
  2471  000358  503C               	movf	_calc_CS,w,c
  2472  00035A  18DE               	xorwf	postinc2,w,c
  2473  00035C  A4D8               	btfss	status,2,c
  2474  00035E  D13C               	goto	l3645
  2475                           
  2476                           ; BSR set to: 1
  2477                           ;FastTransfer.c: 147: int r;
  2478                           ;FastTransfer.c: 148: for (r = 0; r < rx_len; r = r + 3) {
  2479  000360  0E00               	movlw	0
  2480  000362  0101               	movlb	1	; () banked
  2481  000364  6FE6               	movwf	(receiveData@r+1)& (0+255),b
  2482  000366  0E00               	movlw	0
  2483  000368  6FE5               	movwf	receiveData@r& (0+255),b
  2484  00036A  D05C               	goto	l3605
  2485  00036C                     l3595:
  2486                           
  2487                           ; BSR set to: 1
  2488                           ;FastTransfer.c: 149: if (rx_buffer[r] < maxDataAddress) {
  2489  00036C  0E00               	movlw	low _rx_buffer
  2490  00036E  0101               	movlb	1	; () banked
  2491  000370  25E5               	addwf	receiveData@r& (0+255),w,b
  2492  000372  6ED9               	movwf	fsr2l,c
  2493  000374  0E02               	movlw	high _rx_buffer
  2494  000376  0101               	movlb	1	; () banked
  2495  000378  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2496  00037A  6EDA               	movwf	fsr2h,c
  2497  00037C  503D               	movf	_maxDataAddress,w,c
  2498  00037E  5CDE               	subwf	postinc2,w,c
  2499  000380  B0D8               	btfsc	status,0,c
  2500  000382  D041               	goto	l3601
  2501                           
  2502                           ; BSR set to: 1
  2503                           ;FastTransfer.c: 150: group.parts[0] = rx_buffer[r + 1];
  2504  000384  0E01               	movlw	1
  2505  000386  0101               	movlb	1	; () banked
  2506  000388  25E5               	addwf	receiveData@r& (0+255),w,b
  2507  00038A  0101               	movlb	1	; () banked
  2508  00038C  6FD5               	movwf	??_receiveData& (0+255),b
  2509  00038E  0E00               	movlw	0
  2510  000390  0101               	movlb	1	; () banked
  2511  000392  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2512  000394  0101               	movlb	1	; () banked
  2513  000396  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2514  000398  0E00               	movlw	low _rx_buffer
  2515  00039A  0101               	movlb	1	; () banked
  2516  00039C  25D5               	addwf	??_receiveData& (0+255),w,b
  2517  00039E  6ED9               	movwf	fsr2l,c
  2518  0003A0  0E02               	movlw	high _rx_buffer
  2519  0003A2  0101               	movlb	1	; () banked
  2520  0003A4  21D6               	addwfc	(??_receiveData+1)& (0+255),w,b
  2521  0003A6  6EDA               	movwf	fsr2h,c
  2522  0003A8  50DF               	movf	indf2,w,c
  2523  0003AA  6E43               	movwf	_group,c
  2524                           
  2525                           ;FastTransfer.c: 151: group.parts[1] = rx_buffer[r + 2];
  2526  0003AC  0E02               	movlw	2
  2527  0003AE  0101               	movlb	1	; () banked
  2528  0003B0  25E5               	addwf	receiveData@r& (0+255),w,b
  2529  0003B2  0101               	movlb	1	; () banked
  2530  0003B4  6FD5               	movwf	??_receiveData& (0+255),b
  2531  0003B6  0E00               	movlw	0
  2532  0003B8  0101               	movlb	1	; () banked
  2533  0003BA  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2534  0003BC  0101               	movlb	1	; () banked
  2535  0003BE  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2536  0003C0  0E00               	movlw	low _rx_buffer
  2537  0003C2  0101               	movlb	1	; () banked
  2538  0003C4  25D5               	addwf	??_receiveData& (0+255),w,b
  2539  0003C6  6ED9               	movwf	fsr2l,c
  2540  0003C8  0E02               	movlw	high _rx_buffer
  2541  0003CA  0101               	movlb	1	; () banked
  2542  0003CC  21D6               	addwfc	(??_receiveData+1)& (0+255),w,b
  2543  0003CE  6EDA               	movwf	fsr2h,c
  2544  0003D0  50DF               	movf	indf2,w,c
  2545  0003D2  6E44               	movwf	_group+1,c
  2546                           
  2547                           ; BSR set to: 1
  2548                           ;FastTransfer.c: 152: receiveArrayAddress[(rx_buffer[r])] = group.integer;
  2549  0003D4  0E00               	movlw	low _rx_buffer
  2550  0003D6  0101               	movlb	1	; () banked
  2551  0003D8  25E5               	addwf	receiveData@r& (0+255),w,b
  2552  0003DA  6ED9               	movwf	fsr2l,c
  2553  0003DC  0E02               	movlw	high _rx_buffer
  2554  0003DE  0101               	movlb	1	; () banked
  2555  0003E0  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2556  0003E2  6EDA               	movwf	fsr2h,c
  2557  0003E4  50DF               	movf	indf2,w,c
  2558  0003E6  0101               	movlb	1	; () banked
  2559  0003E8  6FD5               	movwf	??_receiveData& (0+255),b
  2560  0003EA  0101               	movlb	1	; () banked
  2561  0003EC  51D5               	movf	??_receiveData& (0+255),w,b
  2562  0003EE  0D02               	mullw	2
  2563  0003F0  50F3               	movf	prodl,w,c
  2564  0003F2  242B               	addwf	_receiveArrayAddress,w,c
  2565  0003F4  6ED9               	movwf	fsr2l,c
  2566  0003F6  50F4               	movf	prodh,w,c
  2567  0003F8  202C               	addwfc	_receiveArrayAddress+1,w,c
  2568  0003FA  6EDA               	movwf	fsr2h,c
  2569  0003FC  C043  FFDE         	movff	_group,postinc2
  2570  000400  C044  FFDD         	movff	_group+1,postdec2
  2571                           
  2572                           ;FastTransfer.c: 153: } else {
  2573  000404  D004               	goto	l3603
  2574  000406                     l3601:
  2575                           
  2576                           ; BSR set to: 1
  2577                           ;FastTransfer.c: 154: dataAdressErrorCounter++;
  2578  000406  0100               	movlb	0	; () banked
  2579  000408  4BC4               	infsnz	_dataAdressErrorCounter& (0+255),f,b
  2580  00040A  2BC5               	incf	(_dataAdressErrorCounter+1)& (0+255),f,b
  2581  00040C  D000               	goto	l3603
  2582  00040E                     l3603:
  2583  00040E  0E03               	movlw	3
  2584  000410  0101               	movlb	1	; () banked
  2585  000412  25E5               	addwf	receiveData@r& (0+255),w,b
  2586  000414  0101               	movlb	1	; () banked
  2587  000416  6FE5               	movwf	receiveData@r& (0+255),b
  2588  000418  0E00               	movlw	0
  2589  00041A  0101               	movlb	1	; () banked
  2590  00041C  21E6               	addwfc	(receiveData@r+1)& (0+255),w,b
  2591  00041E  0101               	movlb	1	; () banked
  2592  000420  6FE6               	movwf	(receiveData@r+1)& (0+255),b
  2593  000422  D000               	goto	l3605
  2594  000424                     l3605:
  2595                           
  2596                           ; BSR set to: 1
  2597  000424  5042               	movf	_rx_len,w,c
  2598  000426  0101               	movlb	1	; () banked
  2599  000428  6FD5               	movwf	??_receiveData& (0+255),b
  2600  00042A  6BD6               	clrf	(??_receiveData+1)& (0+255),b
  2601  00042C  0101               	movlb	1	; () banked
  2602  00042E  51D5               	movf	??_receiveData& (0+255),w,b
  2603  000430  0101               	movlb	1	; () banked
  2604  000432  5DE5               	subwf	receiveData@r& (0+255),w,b
  2605  000434  0101               	movlb	1	; () banked
  2606  000436  51E6               	movf	(receiveData@r+1)& (0+255),w,b
  2607  000438  0A80               	xorlw	128
  2608  00043A  0101               	movlb	1	; () banked
  2609  00043C  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2610  00043E  0101               	movlb	1	; () banked
  2611  000440  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2612  000442  0A80               	xorlw	128
  2613  000444  0101               	movlb	1	; () banked
  2614  000446  59D7               	subwfb	(??_receiveData+2)& (0+255),w,b
  2615  000448  A0D8               	btfss	status,0,c
  2616  00044A  D790               	goto	l3595
  2617                           
  2618                           ; BSR set to: 1
  2619                           ;FastTransfer.c: 155: }
  2620                           ;FastTransfer.c: 156: }
  2621                           ;FastTransfer.c: 159: if (AKNAKsend) {
  2622                           
  2623                           ; BSR set to: 1
  2624  00044C  503B               	movf	_AKNAKsend,w,c
  2625  00044E  B4D8               	btfsc	status,2,c
  2626  000450  D0BC               	goto	l3635
  2627                           
  2628                           ; BSR set to: 1
  2629                           ;FastTransfer.c: 160: unsigned char holder[3];
  2630                           ;FastTransfer.c: 161: holder[0] = 255;
  2631  000452  0101               	movlb	1	; () banked
  2632  000454  69DB               	setf	receiveData@holder& (0+255),b
  2633                           
  2634                           ; BSR set to: 1
  2635                           ;FastTransfer.c: 162: holder[1] = 1;
  2636  000456  0E01               	movlw	1
  2637  000458  0101               	movlb	1	; () banked
  2638  00045A  6FDC               	movwf	(receiveData@holder+1)& (0+255),b
  2639                           
  2640                           ; BSR set to: 1
  2641                           ;FastTransfer.c: 163: holder[2] = rx_buffer[rx_array_inx - 1];
  2642  00045C  0EFF               	movlw	255
  2643  00045E  0101               	movlb	1	; () banked
  2644  000460  6FD5               	movwf	??_receiveData& (0+255),b
  2645  000462  0EFF               	movlw	255
  2646  000464  0101               	movlb	1	; () banked
  2647  000466  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2648  000468  5041               	movf	_rx_array_inx,w,c
  2649  00046A  0101               	movlb	1	; () banked
  2650  00046C  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2651  00046E  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2652  000470  0101               	movlb	1	; () banked
  2653  000472  51D5               	movf	??_receiveData& (0+255),w,b
  2654  000474  0101               	movlb	1	; () banked
  2655  000476  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2656  000478  0101               	movlb	1	; () banked
  2657  00047A  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2658  00047C  0101               	movlb	1	; () banked
  2659  00047E  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2660  000480  0E00               	movlw	low _rx_buffer
  2661  000482  0101               	movlb	1	; () banked
  2662  000484  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2663  000486  6ED9               	movwf	fsr2l,c
  2664  000488  0E02               	movlw	high _rx_buffer
  2665  00048A  0101               	movlb	1	; () banked
  2666  00048C  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2667  00048E  6EDA               	movwf	fsr2h,c
  2668  000490  50DF               	movf	indf2,w,c
  2669  000492  0101               	movlb	1	; () banked
  2670  000494  6FDD               	movwf	(receiveData@holder+2)& (0+255),b
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;FastTransfer.c: 164: unsigned char crcHolder = CRC8(holder, 3);
  2674  000496  0EDB               	movlw	low receiveData@holder
  2675  000498  6E1B               	movwf	CRC8@data,c
  2676  00049A  0E01               	movlw	high receiveData@holder
  2677  00049C  6E1C               	movwf	CRC8@data+1,c
  2678  00049E  0E03               	movlw	3
  2679  0004A0  6E1D               	movwf	CRC8@len,c
  2680  0004A2  ECEE  F00B         	call	_CRC8	;wreg free
  2681  0004A6  0101               	movlb	1	; () banked
  2682  0004A8  6FE1               	movwf	receiveData@crcHolder& (0+255),b
  2683                           
  2684                           ; BSR set to: 1
  2685                           ;FastTransfer.c: 165: serial_write(0x06);
  2686  0004AA  D801               	call	u3438
  2687  0004AC  D00B               	goto	l3619
  2688  0004AE                     u3438:
  2689  0004AE  0005               	push	
  2690  0004B0  6EFA               	movwf	pclath,c
  2691  0004B2  5035               	movf	_serial_write,w,c
  2692  0004B4  6EFD               	movwf	tosl,c
  2693  0004B6  5036               	movf	_serial_write+1,w,c
  2694  0004B8  6EFE               	movwf	tosh,c
  2695  0004BA  50F8               	movf	tblptru,w,c
  2696  0004BC  6EFF               	movwf	tosu,c
  2697  0004BE  50FA               	movf	pclath,w,c
  2698  0004C0  0E06               	movlw	6
  2699  0004C2  0012               	return		;indir
  2700  0004C4                     l3619:
  2701                           
  2702                           ;FastTransfer.c: 166: serial_write(0x85);
  2703  0004C4  D801               	call	u3448
  2704  0004C6  D00B               	goto	l3621
  2705  0004C8                     u3448:
  2706  0004C8  0005               	push	
  2707  0004CA  6EFA               	movwf	pclath,c
  2708  0004CC  5035               	movf	_serial_write,w,c
  2709  0004CE  6EFD               	movwf	tosl,c
  2710  0004D0  5036               	movf	_serial_write+1,w,c
  2711  0004D2  6EFE               	movwf	tosh,c
  2712  0004D4  50F8               	movf	tblptru,w,c
  2713  0004D6  6EFF               	movwf	tosu,c
  2714  0004D8  50FA               	movf	pclath,w,c
  2715  0004DA  0E85               	movlw	133
  2716  0004DC  0012               	return		;indir
  2717  0004DE                     l3621:
  2718                           
  2719                           ;FastTransfer.c: 167: serial_write(returnAddress);
  2720  0004DE  D801               	call	u3458
  2721  0004E0  D00B               	goto	l3623
  2722  0004E2                     u3458:
  2723  0004E2  0005               	push	
  2724  0004E4  6EFA               	movwf	pclath,c
  2725  0004E6  5035               	movf	_serial_write,w,c
  2726  0004E8  6EFD               	movwf	tosl,c
  2727  0004EA  5036               	movf	_serial_write+1,w,c
  2728  0004EC  6EFE               	movwf	tosh,c
  2729  0004EE  50F8               	movf	tblptru,w,c
  2730  0004F0  6EFF               	movwf	tosu,c
  2731  0004F2  50FA               	movf	pclath,w,c
  2732  0004F4  503F               	movf	_returnAddress,w,c
  2733  0004F6  0012               	return		;indir
  2734  0004F8                     l3623:
  2735                           
  2736                           ;FastTransfer.c: 168: serial_write(moduleAddress);
  2737  0004F8  D801               	call	u3468
  2738  0004FA  D00B               	goto	l3625
  2739  0004FC                     u3468:
  2740  0004FC  0005               	push	
  2741  0004FE  6EFA               	movwf	pclath,c
  2742  000500  5035               	movf	_serial_write,w,c
  2743  000502  6EFD               	movwf	tosl,c
  2744  000504  5036               	movf	_serial_write+1,w,c
  2745  000506  6EFE               	movwf	tosh,c
  2746  000508  50F8               	movf	tblptru,w,c
  2747  00050A  6EFF               	movwf	tosu,c
  2748  00050C  50FA               	movf	pclath,w,c
  2749  00050E  503E               	movf	_moduleAddress,w,c
  2750  000510  0012               	return		;indir
  2751  000512                     l3625:
  2752                           
  2753                           ;FastTransfer.c: 169: serial_write(3);
  2754  000512  D801               	call	u3478
  2755  000514  D00B               	goto	l3627
  2756  000516                     u3478:
  2757  000516  0005               	push	
  2758  000518  6EFA               	movwf	pclath,c
  2759  00051A  5035               	movf	_serial_write,w,c
  2760  00051C  6EFD               	movwf	tosl,c
  2761  00051E  5036               	movf	_serial_write+1,w,c
  2762  000520  6EFE               	movwf	tosh,c
  2763  000522  50F8               	movf	tblptru,w,c
  2764  000524  6EFF               	movwf	tosu,c
  2765  000526  50FA               	movf	pclath,w,c
  2766  000528  0E03               	movlw	3
  2767  00052A  0012               	return		;indir
  2768  00052C                     l3627:
  2769                           
  2770                           ;FastTransfer.c: 170: serial_write(255);
  2771  00052C  D801               	call	u3488
  2772  00052E  D00B               	goto	l3629
  2773  000530                     u3488:
  2774  000530  0005               	push	
  2775  000532  6EFA               	movwf	pclath,c
  2776  000534  5035               	movf	_serial_write,w,c
  2777  000536  6EFD               	movwf	tosl,c
  2778  000538  5036               	movf	_serial_write+1,w,c
  2779  00053A  6EFE               	movwf	tosh,c
  2780  00053C  50F8               	movf	tblptru,w,c
  2781  00053E  6EFF               	movwf	tosu,c
  2782  000540  50FA               	movf	pclath,w,c
  2783  000542  0EFF               	movlw	255
  2784  000544  0012               	return		;indir
  2785  000546                     l3629:
  2786                           
  2787                           ;FastTransfer.c: 171: serial_write(1);
  2788  000546  D801               	call	u3498
  2789  000548  D00B               	goto	l3631
  2790  00054A                     u3498:
  2791  00054A  0005               	push	
  2792  00054C  6EFA               	movwf	pclath,c
  2793  00054E  5035               	movf	_serial_write,w,c
  2794  000550  6EFD               	movwf	tosl,c
  2795  000552  5036               	movf	_serial_write+1,w,c
  2796  000554  6EFE               	movwf	tosh,c
  2797  000556  50F8               	movf	tblptru,w,c
  2798  000558  6EFF               	movwf	tosu,c
  2799  00055A  50FA               	movf	pclath,w,c
  2800  00055C  0E01               	movlw	1
  2801  00055E  0012               	return		;indir
  2802  000560                     l3631:
  2803                           
  2804                           ;FastTransfer.c: 172: serial_write(rx_buffer[rx_array_inx - 1]);
  2805  000560  D801               	call	u3508
  2806  000562  D025               	goto	l3633
  2807  000564                     u3508:
  2808  000564  0005               	push	
  2809  000566  6EFA               	movwf	pclath,c
  2810  000568  5035               	movf	_serial_write,w,c
  2811  00056A  6EFD               	movwf	tosl,c
  2812  00056C  5036               	movf	_serial_write+1,w,c
  2813  00056E  6EFE               	movwf	tosh,c
  2814  000570  50F8               	movf	tblptru,w,c
  2815  000572  6EFF               	movwf	tosu,c
  2816  000574  50FA               	movf	pclath,w,c
  2817  000576  0EFF               	movlw	255
  2818  000578  0101               	movlb	1	; () banked
  2819  00057A  6FD5               	movwf	??_receiveData& (0+255),b
  2820  00057C  0EFF               	movlw	255
  2821  00057E  0101               	movlb	1	; () banked
  2822  000580  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2823  000582  5041               	movf	_rx_array_inx,w,c
  2824  000584  0101               	movlb	1	; () banked
  2825  000586  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2826  000588  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2827  00058A  0101               	movlb	1	; () banked
  2828  00058C  51D5               	movf	??_receiveData& (0+255),w,b
  2829  00058E  0101               	movlb	1	; () banked
  2830  000590  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2831  000592  0101               	movlb	1	; () banked
  2832  000594  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2833  000596  0101               	movlb	1	; () banked
  2834  000598  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2835  00059A  0E00               	movlw	low _rx_buffer
  2836  00059C  0101               	movlb	1	; () banked
  2837  00059E  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2838  0005A0  6ED9               	movwf	fsr2l,c
  2839  0005A2  0E02               	movlw	high _rx_buffer
  2840  0005A4  0101               	movlb	1	; () banked
  2841  0005A6  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2842  0005A8  6EDA               	movwf	fsr2h,c
  2843  0005AA  50DF               	movf	indf2,w,c
  2844  0005AC  0012               	return		;indir
  2845  0005AE                     l3633:
  2846                           
  2847                           ;FastTransfer.c: 173: serial_write(crcHolder);
  2848  0005AE  D801               	call	u3518
  2849  0005B0  D00C               	goto	l3635
  2850  0005B2                     u3518:
  2851  0005B2  0005               	push	
  2852  0005B4  6EFA               	movwf	pclath,c
  2853  0005B6  5035               	movf	_serial_write,w,c
  2854  0005B8  6EFD               	movwf	tosl,c
  2855  0005BA  5036               	movf	_serial_write+1,w,c
  2856  0005BC  6EFE               	movwf	tosh,c
  2857  0005BE  50F8               	movf	tblptru,w,c
  2858  0005C0  6EFF               	movwf	tosu,c
  2859  0005C2  50FA               	movf	pclath,w,c
  2860  0005C4  0101               	movlb	1	; () banked
  2861  0005C6  51E1               	movf	receiveData@crcHolder& (0+255),w,b
  2862  0005C8  0012               	return		;indir
  2863  0005CA                     l3635:
  2864                           
  2865                           ;FastTransfer.c: 174: }
  2866                           ;FastTransfer.c: 178: rx_len = 0;
  2867  0005CA  0E00               	movlw	0
  2868  0005CC  6E42               	movwf	_rx_len,c
  2869                           
  2870                           ;FastTransfer.c: 179: rx_array_inx = 0;
  2871  0005CE  0E00               	movlw	0
  2872  0005D0  6E41               	movwf	_rx_array_inx,c
  2873                           
  2874                           ;FastTransfer.c: 180: return 1;
  2875  0005D2  0E01               	movlw	1
  2876  0005D4  0012               	return	
  2877                           
  2878                           ;FastTransfer.c: 181: } else {
  2879  0005D6  D0C9               	goto	l3683
  2880  0005D8                     l3645:
  2881                           
  2882                           ;FastTransfer.c: 182: crcErrorCounter++;
  2883  0005D8  0100               	movlb	0	; () banked
  2884  0005DA  4BC2               	infsnz	_crcErrorCounter& (0+255),f,b
  2885  0005DC  2BC3               	incf	(_crcErrorCounter+1)& (0+255),f,b
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;FastTransfer.c: 184: if (AKNAKsend) {
  2889  0005DE  503B               	movf	_AKNAKsend,w,c
  2890  0005E0  B4D8               	btfsc	status,2,c
  2891  0005E2  D0BC               	goto	l3675
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;FastTransfer.c: 185: unsigned char holder[3];
  2895                           ;FastTransfer.c: 186: holder[0] = 255;
  2896  0005E4  0101               	movlb	1	; () banked
  2897  0005E6  69DE               	setf	receiveData@holder_1345& (0+255),b
  2898                           
  2899                           ; BSR set to: 1
  2900                           ;FastTransfer.c: 187: holder[1] = 2;
  2901  0005E8  0E02               	movlw	2
  2902  0005EA  0101               	movlb	1	; () banked
  2903  0005EC  6FDF               	movwf	(receiveData@holder_1345+1)& (0+255),b
  2904                           
  2905                           ; BSR set to: 1
  2906                           ;FastTransfer.c: 188: holder[2] = rx_buffer[rx_array_inx - 1];
  2907  0005EE  0EFF               	movlw	255
  2908  0005F0  0101               	movlb	1	; () banked
  2909  0005F2  6FD5               	movwf	??_receiveData& (0+255),b
  2910  0005F4  0EFF               	movlw	255
  2911  0005F6  0101               	movlb	1	; () banked
  2912  0005F8  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  2913  0005FA  5041               	movf	_rx_array_inx,w,c
  2914  0005FC  0101               	movlb	1	; () banked
  2915  0005FE  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  2916  000600  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  2917  000602  0101               	movlb	1	; () banked
  2918  000604  51D5               	movf	??_receiveData& (0+255),w,b
  2919  000606  0101               	movlb	1	; () banked
  2920  000608  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  2921  00060A  0101               	movlb	1	; () banked
  2922  00060C  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  2923  00060E  0101               	movlb	1	; () banked
  2924  000610  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  2925  000612  0E00               	movlw	low _rx_buffer
  2926  000614  0101               	movlb	1	; () banked
  2927  000616  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  2928  000618  6ED9               	movwf	fsr2l,c
  2929  00061A  0E02               	movlw	high _rx_buffer
  2930  00061C  0101               	movlb	1	; () banked
  2931  00061E  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  2932  000620  6EDA               	movwf	fsr2h,c
  2933  000622  50DF               	movf	indf2,w,c
  2934  000624  0101               	movlb	1	; () banked
  2935  000626  6FE0               	movwf	(receiveData@holder_1345+2)& (0+255),b
  2936                           
  2937                           ; BSR set to: 1
  2938                           ;FastTransfer.c: 189: unsigned char crcHolder = CRC8(holder, 3);
  2939  000628  0EDE               	movlw	low receiveData@holder_1345
  2940  00062A  6E1B               	movwf	CRC8@data,c
  2941  00062C  0E01               	movlw	high receiveData@holder_1345
  2942  00062E  6E1C               	movwf	CRC8@data+1,c
  2943  000630  0E03               	movlw	3
  2944  000632  6E1D               	movwf	CRC8@len,c
  2945  000634  ECEE  F00B         	call	_CRC8
  2946  000638  0101               	movlb	1	; () banked
  2947  00063A  6FE2               	movwf	receiveData@crcHolder_1346& (0+255),b
  2948                           
  2949                           ; BSR set to: 1
  2950                           ;FastTransfer.c: 190: serial_write(0x06);
  2951  00063C  D801               	call	u3538
  2952  00063E  D00B               	goto	l3659
  2953  000640                     u3538:
  2954  000640  0005               	push	
  2955  000642  6EFA               	movwf	pclath,c
  2956  000644  5035               	movf	_serial_write,w,c
  2957  000646  6EFD               	movwf	tosl,c
  2958  000648  5036               	movf	_serial_write+1,w,c
  2959  00064A  6EFE               	movwf	tosh,c
  2960  00064C  50F8               	movf	tblptru,w,c
  2961  00064E  6EFF               	movwf	tosu,c
  2962  000650  50FA               	movf	pclath,w,c
  2963  000652  0E06               	movlw	6
  2964  000654  0012               	return		;indir
  2965  000656                     l3659:
  2966                           
  2967                           ;FastTransfer.c: 191: serial_write(0x85);
  2968  000656  D801               	call	u3548
  2969  000658  D00B               	goto	l3661
  2970  00065A                     u3548:
  2971  00065A  0005               	push	
  2972  00065C  6EFA               	movwf	pclath,c
  2973  00065E  5035               	movf	_serial_write,w,c
  2974  000660  6EFD               	movwf	tosl,c
  2975  000662  5036               	movf	_serial_write+1,w,c
  2976  000664  6EFE               	movwf	tosh,c
  2977  000666  50F8               	movf	tblptru,w,c
  2978  000668  6EFF               	movwf	tosu,c
  2979  00066A  50FA               	movf	pclath,w,c
  2980  00066C  0E85               	movlw	133
  2981  00066E  0012               	return		;indir
  2982  000670                     l3661:
  2983                           
  2984                           ;FastTransfer.c: 192: serial_write(returnAddress);
  2985  000670  D801               	call	u3558
  2986  000672  D00B               	goto	l3663
  2987  000674                     u3558:
  2988  000674  0005               	push	
  2989  000676  6EFA               	movwf	pclath,c
  2990  000678  5035               	movf	_serial_write,w,c
  2991  00067A  6EFD               	movwf	tosl,c
  2992  00067C  5036               	movf	_serial_write+1,w,c
  2993  00067E  6EFE               	movwf	tosh,c
  2994  000680  50F8               	movf	tblptru,w,c
  2995  000682  6EFF               	movwf	tosu,c
  2996  000684  50FA               	movf	pclath,w,c
  2997  000686  503F               	movf	_returnAddress,w,c
  2998  000688  0012               	return		;indir
  2999  00068A                     l3663:
  3000                           
  3001                           ;FastTransfer.c: 193: serial_write(moduleAddress);
  3002  00068A  D801               	call	u3568
  3003  00068C  D00B               	goto	l3665
  3004  00068E                     u3568:
  3005  00068E  0005               	push	
  3006  000690  6EFA               	movwf	pclath,c
  3007  000692  5035               	movf	_serial_write,w,c
  3008  000694  6EFD               	movwf	tosl,c
  3009  000696  5036               	movf	_serial_write+1,w,c
  3010  000698  6EFE               	movwf	tosh,c
  3011  00069A  50F8               	movf	tblptru,w,c
  3012  00069C  6EFF               	movwf	tosu,c
  3013  00069E  50FA               	movf	pclath,w,c
  3014  0006A0  503E               	movf	_moduleAddress,w,c
  3015  0006A2  0012               	return		;indir
  3016  0006A4                     l3665:
  3017                           
  3018                           ;FastTransfer.c: 194: serial_write(3);
  3019  0006A4  D801               	call	u3578
  3020  0006A6  D00B               	goto	l3667
  3021  0006A8                     u3578:
  3022  0006A8  0005               	push	
  3023  0006AA  6EFA               	movwf	pclath,c
  3024  0006AC  5035               	movf	_serial_write,w,c
  3025  0006AE  6EFD               	movwf	tosl,c
  3026  0006B0  5036               	movf	_serial_write+1,w,c
  3027  0006B2  6EFE               	movwf	tosh,c
  3028  0006B4  50F8               	movf	tblptru,w,c
  3029  0006B6  6EFF               	movwf	tosu,c
  3030  0006B8  50FA               	movf	pclath,w,c
  3031  0006BA  0E03               	movlw	3
  3032  0006BC  0012               	return		;indir
  3033  0006BE                     l3667:
  3034                           
  3035                           ;FastTransfer.c: 195: serial_write(255);
  3036  0006BE  D801               	call	u3588
  3037  0006C0  D00B               	goto	l3669
  3038  0006C2                     u3588:
  3039  0006C2  0005               	push	
  3040  0006C4  6EFA               	movwf	pclath,c
  3041  0006C6  5035               	movf	_serial_write,w,c
  3042  0006C8  6EFD               	movwf	tosl,c
  3043  0006CA  5036               	movf	_serial_write+1,w,c
  3044  0006CC  6EFE               	movwf	tosh,c
  3045  0006CE  50F8               	movf	tblptru,w,c
  3046  0006D0  6EFF               	movwf	tosu,c
  3047  0006D2  50FA               	movf	pclath,w,c
  3048  0006D4  0EFF               	movlw	255
  3049  0006D6  0012               	return		;indir
  3050  0006D8                     l3669:
  3051                           
  3052                           ;FastTransfer.c: 196: serial_write(2);
  3053  0006D8  D801               	call	u3598
  3054  0006DA  D00B               	goto	l3671
  3055  0006DC                     u3598:
  3056  0006DC  0005               	push	
  3057  0006DE  6EFA               	movwf	pclath,c
  3058  0006E0  5035               	movf	_serial_write,w,c
  3059  0006E2  6EFD               	movwf	tosl,c
  3060  0006E4  5036               	movf	_serial_write+1,w,c
  3061  0006E6  6EFE               	movwf	tosh,c
  3062  0006E8  50F8               	movf	tblptru,w,c
  3063  0006EA  6EFF               	movwf	tosu,c
  3064  0006EC  50FA               	movf	pclath,w,c
  3065  0006EE  0E02               	movlw	2
  3066  0006F0  0012               	return		;indir
  3067  0006F2                     l3671:
  3068                           
  3069                           ;FastTransfer.c: 197: serial_write(rx_buffer[rx_array_inx - 1]);
  3070  0006F2  D801               	call	u3608
  3071  0006F4  D025               	goto	l3673
  3072  0006F6                     u3608:
  3073  0006F6  0005               	push	
  3074  0006F8  6EFA               	movwf	pclath,c
  3075  0006FA  5035               	movf	_serial_write,w,c
  3076  0006FC  6EFD               	movwf	tosl,c
  3077  0006FE  5036               	movf	_serial_write+1,w,c
  3078  000700  6EFE               	movwf	tosh,c
  3079  000702  50F8               	movf	tblptru,w,c
  3080  000704  6EFF               	movwf	tosu,c
  3081  000706  50FA               	movf	pclath,w,c
  3082  000708  0EFF               	movlw	255
  3083  00070A  0101               	movlb	1	; () banked
  3084  00070C  6FD5               	movwf	??_receiveData& (0+255),b
  3085  00070E  0EFF               	movlw	255
  3086  000710  0101               	movlb	1	; () banked
  3087  000712  6FD6               	movwf	(??_receiveData+1)& (0+255),b
  3088  000714  5041               	movf	_rx_array_inx,w,c
  3089  000716  0101               	movlb	1	; () banked
  3090  000718  6FD7               	movwf	(??_receiveData+2)& (0+255),b
  3091  00071A  6BD8               	clrf	(??_receiveData+3)& (0+255),b
  3092  00071C  0101               	movlb	1	; () banked
  3093  00071E  51D5               	movf	??_receiveData& (0+255),w,b
  3094  000720  0101               	movlb	1	; () banked
  3095  000722  27D7               	addwf	(??_receiveData+2)& (0+255),f,b
  3096  000724  0101               	movlb	1	; () banked
  3097  000726  51D6               	movf	(??_receiveData+1)& (0+255),w,b
  3098  000728  0101               	movlb	1	; () banked
  3099  00072A  23D8               	addwfc	(??_receiveData+3)& (0+255),f,b
  3100  00072C  0E00               	movlw	low _rx_buffer
  3101  00072E  0101               	movlb	1	; () banked
  3102  000730  25D7               	addwf	(??_receiveData+2)& (0+255),w,b
  3103  000732  6ED9               	movwf	fsr2l,c
  3104  000734  0E02               	movlw	high _rx_buffer
  3105  000736  0101               	movlb	1	; () banked
  3106  000738  21D8               	addwfc	(??_receiveData+3)& (0+255),w,b
  3107  00073A  6EDA               	movwf	fsr2h,c
  3108  00073C  50DF               	movf	indf2,w,c
  3109  00073E  0012               	return		;indir
  3110  000740                     l3673:
  3111                           
  3112                           ;FastTransfer.c: 198: serial_write(crcHolder);
  3113  000740  D801               	call	u3618
  3114  000742  D00C               	goto	l3675
  3115  000744                     u3618:
  3116  000744  0005               	push	
  3117  000746  6EFA               	movwf	pclath,c
  3118  000748  5035               	movf	_serial_write,w,c
  3119  00074A  6EFD               	movwf	tosl,c
  3120  00074C  5036               	movf	_serial_write+1,w,c
  3121  00074E  6EFE               	movwf	tosh,c
  3122  000750  50F8               	movf	tblptru,w,c
  3123  000752  6EFF               	movwf	tosu,c
  3124  000754  50FA               	movf	pclath,w,c
  3125  000756  0101               	movlb	1	; () banked
  3126  000758  51E2               	movf	receiveData@crcHolder_1346& (0+255),w,b
  3127  00075A  0012               	return		;indir
  3128  00075C                     l3675:
  3129                           
  3130                           ;FastTransfer.c: 199: }
  3131                           ;FastTransfer.c: 202: rx_len = 0;
  3132  00075C  0E00               	movlw	0
  3133  00075E  6E42               	movwf	_rx_len,c
  3134                           
  3135                           ;FastTransfer.c: 203: rx_array_inx = 0;
  3136  000760  0E00               	movlw	0
  3137  000762  6E41               	movwf	_rx_array_inx,c
  3138                           
  3139                           ;FastTransfer.c: 204: return 0;
  3140  000764  0E00               	movlw	0
  3141  000766  0012               	return	
  3142  000768  D000               	goto	l3683
  3143  00076A                     l3683:
  3144                           
  3145                           ;FastTransfer.c: 205: }
  3146                           ;FastTransfer.c: 206: }
  3147                           ;FastTransfer.c: 207: }
  3148                           ;FastTransfer.c: 210: return 0;
  3149  00076A  0E00               	movlw	0
  3150  00076C  0012               	return	
  3151  00076E  0012               	return		;funcret
  3152  000770                     __end_of_receiveData:
  3153                           	opt stack 0
  3154                           tosu	equ	0xFFF
  3155                           tosh	equ	0xFFE
  3156                           tosl	equ	0xFFD
  3157                           pclath	equ	0xFFA
  3158                           tblptru	equ	0xFF8
  3159                           tblptrh	equ	0xFF7
  3160                           tblptrl	equ	0xFF6
  3161                           tablat	equ	0xFF5
  3162                           prodh	equ	0xFF4
  3163                           prodl	equ	0xFF3
  3164                           intcon	equ	0xFF2
  3165                           postinc0	equ	0xFEE
  3166                           wreg	equ	0xFE8
  3167                           indf2	equ	0xFDF
  3168                           postinc2	equ	0xFDE
  3169                           postdec2	equ	0xFDD
  3170                           plusw2	equ	0xFDB
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _Send_put *****************
  3176 ;; Defined at:
  3177 ;;		line 130 in file "UART.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;  _data           1    wreg     unsigned char 
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;  _data           1   37[COMRAM] unsigned char 
  3182 ;; Return value:  Size  Location     Type
  3183 ;;		None               void
  3184 ;; Registers used:
  3185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3191 ;;      Params:         0       0       0       0       0       0       0
  3192 ;;      Locals:         1       0       0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0       0       0
  3194 ;;      Totals:         1       0       0       0       0       0       0
  3195 ;;Total ram usage:        1 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    6
  3198 ;; This function calls:
  3199 ;;		_UART_buff_get
  3200 ;;		_UART_buff_put
  3201 ;; This function is called by:
  3202 ;;		_SYSTEM_Initialize
  3203 ;;		_putch
  3204 ;;		_sendData
  3205 ;;		_receiveData
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           	psect	text10
  3210  0019E2                     __ptext10:
  3211                           	opt stack 0
  3212  0019E2                     _Send_put:
  3213                           	opt stack 21
  3214                           
  3215                           ;incstack = 0
  3216                           ;Send_put@_data stored from wreg
  3217  0019E2  6E26               	movwf	Send_put@_data,c
  3218                           
  3219                           ;UART.c: 131: UART_buff_put(&output_buffer, _data);
  3220  0019E4  0E00               	movlw	low _output_buffer
  3221  0019E6  6E21               	movwf	UART_buff_put@_this,c
  3222  0019E8  0E04               	movlw	high _output_buffer
  3223  0019EA  6E22               	movwf	UART_buff_put@_this+1,c
  3224  0019EC  C026  F023         	movff	Send_put@_data,UART_buff_put@c
  3225  0019F0  ECCD  F005         	call	_UART_buff_put
  3226                           
  3227                           ;UART.c: 132: if (Transmit_stall == 1) {
  3228  0019F4  0445               	decf	_Transmit_stall,w,c
  3229  0019F6  A4D8               	btfss	status,2,c
  3230  0019F8  0012               	return	
  3231                           
  3232                           ;UART.c: 133: Transmit_stall = 0;
  3233  0019FA  0E00               	movlw	0
  3234  0019FC  6E45               	movwf	_Transmit_stall,c
  3235                           
  3236                           ;UART.c: 134: TXREG1 = UART_buff_get(&output_buffer);
  3237  0019FE  0E00               	movlw	low _output_buffer
  3238  001A00  6E21               	movwf	UART_buff_get@_this,c
  3239  001A02  0E04               	movlw	high _output_buffer
  3240  001A04  6E22               	movwf	UART_buff_get@_this+1,c
  3241  001A06  ECC7  F009         	call	_UART_buff_get	;wreg free
  3242  001A0A  6EAD               	movwf	4013,c	;volatile
  3243                           
  3244                           ;UART.c: 135: PIE1bits.TX1IE = 1;
  3245  001A0C  889D               	bsf	3997,4,c	;volatile
  3246  001A0E  0012               	return	
  3247  001A10  0012               	return		;funcret
  3248  001A12                     __end_of_Send_put:
  3249                           	opt stack 0
  3250                           tosu	equ	0xFFF
  3251                           tosh	equ	0xFFE
  3252                           tosl	equ	0xFFD
  3253                           pclath	equ	0xFFA
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           postinc0	equ	0xFEE
  3262                           wreg	equ	0xFE8
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           plusw2	equ	0xFDB
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _UART_buff_put *****************
  3272 ;; Defined at:
  3273 ;;		line 68 in file "UART.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  3276 ;;		 -> output_buffer(206), input_buffer(206), 
  3277 ;;  c               1   34[COMRAM] const unsigned char 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;		None
  3280 ;; Return value:  Size  Location     Type
  3281 ;;		None               void
  3282 ;; Registers used:
  3283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3289 ;;      Params:         3       0       0       0       0       0       0
  3290 ;;      Locals:         0       0       0       0       0       0       0
  3291 ;;      Temps:          2       0       0       0       0       0       0
  3292 ;;      Totals:         5       0       0       0       0       0       0
  3293 ;;Total ram usage:        5 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    5
  3296 ;; This function calls:
  3297 ;;		_UART_buff_modulo_inc
  3298 ;; This function is called by:
  3299 ;;		_Send_put
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text11
  3304  000B9A                     __ptext11:
  3305                           	opt stack 0
  3306  000B9A                     _UART_buff_put:
  3307                           	opt stack 21
  3308                           
  3309                           ;UART.c: 69: if (_this->count < 200) {
  3310                           
  3311                           ;incstack = 0
  3312  000B9A  EE20 F0CC          	lfsr	2,204
  3313  000B9E  5021               	movf	UART_buff_put@_this,w,c
  3314  000BA0  26D9               	addwf	fsr2l,f,c
  3315  000BA2  5022               	movf	UART_buff_put@_this+1,w,c
  3316  000BA4  22DA               	addwfc	fsr2h,f,c
  3317  000BA6  0E01               	movlw	1
  3318  000BA8  BEDB               	btfsc	plusw2,7,c
  3319  000BAA  D007               	goto	l3269
  3320  000BAC  0E01               	movlw	1
  3321  000BAE  50DB               	movf	plusw2,w,c
  3322  000BB0  E13A               	bnz	l3275
  3323  000BB2  0EC8               	movlw	200
  3324  000BB4  5CDE               	subwf	postinc2,w,c
  3325  000BB6  B0D8               	btfsc	status,0,c
  3326  000BB8  D036               	goto	l3275
  3327  000BBA                     l3269:
  3328                           
  3329                           ;UART.c: 70: _this->buf[_this->head] = c;
  3330  000BBA  EE20 F0C8          	lfsr	2,200
  3331  000BBE  5021               	movf	UART_buff_put@_this,w,c
  3332  000BC0  26D9               	addwf	fsr2l,f,c
  3333  000BC2  5022               	movf	UART_buff_put@_this+1,w,c
  3334  000BC4  22DA               	addwfc	fsr2h,f,c
  3335  000BC6  CFDE F024          	movff	postinc2,??_UART_buff_put
  3336  000BCA  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3337  000BCE  5024               	movf	??_UART_buff_put,w,c
  3338  000BD0  2421               	addwf	UART_buff_put@_this,w,c
  3339  000BD2  6ED9               	movwf	fsr2l,c
  3340  000BD4  5025               	movf	??_UART_buff_put+1,w,c
  3341  000BD6  2022               	addwfc	UART_buff_put@_this+1,w,c
  3342  000BD8  6EDA               	movwf	fsr2h,c
  3343  000BDA  C023  FFDF         	movff	UART_buff_put@c,indf2
  3344                           
  3345                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3346  000BDE  EE20 F0C8          	lfsr	2,200
  3347  000BE2  5021               	movf	UART_buff_put@_this,w,c
  3348  000BE4  26D9               	addwf	fsr2l,f,c
  3349  000BE6  5022               	movf	UART_buff_put@_this+1,w,c
  3350  000BE8  22DA               	addwfc	fsr2h,f,c
  3351  000BEA  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3352  000BEE  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3353  000BF2  0E00               	movlw	0
  3354  000BF4  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3355  000BF6  0EC8               	movlw	200
  3356  000BF8  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3357  000BFA  EC20  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3358  000BFE  EE20 F0C8          	lfsr	2,200
  3359  000C02  5021               	movf	UART_buff_put@_this,w,c
  3360  000C04  26D9               	addwf	fsr2l,f,c
  3361  000C06  5022               	movf	UART_buff_put@_this+1,w,c
  3362  000C08  22DA               	addwfc	fsr2h,f,c
  3363  000C0A  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3364  000C0E  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3365                           
  3366                           ;UART.c: 72: ++_this->count;
  3367  000C12  EE20 F0CC          	lfsr	2,204
  3368  000C16  5021               	movf	UART_buff_put@_this,w,c
  3369  000C18  26D9               	addwf	fsr2l,f,c
  3370  000C1A  5022               	movf	UART_buff_put@_this+1,w,c
  3371  000C1C  22DA               	addwfc	fsr2h,f,c
  3372  000C1E  2ADE               	incf	postinc2,f,c
  3373  000C20  0E00               	movlw	0
  3374  000C22  22DD               	addwfc	postdec2,f,c
  3375                           
  3376                           ;UART.c: 73: } else {
  3377  000C24  0012               	return	
  3378  000C26                     l3275:
  3379                           
  3380                           ;UART.c: 74: _this->buf[_this->head] = c;
  3381  000C26  EE20 F0C8          	lfsr	2,200
  3382  000C2A  5021               	movf	UART_buff_put@_this,w,c
  3383  000C2C  26D9               	addwf	fsr2l,f,c
  3384  000C2E  5022               	movf	UART_buff_put@_this+1,w,c
  3385  000C30  22DA               	addwfc	fsr2h,f,c
  3386  000C32  CFDE F024          	movff	postinc2,??_UART_buff_put
  3387  000C36  CFDD F025          	movff	postdec2,??_UART_buff_put+1
  3388  000C3A  5024               	movf	??_UART_buff_put,w,c
  3389  000C3C  2421               	addwf	UART_buff_put@_this,w,c
  3390  000C3E  6ED9               	movwf	fsr2l,c
  3391  000C40  5025               	movf	??_UART_buff_put+1,w,c
  3392  000C42  2022               	addwfc	UART_buff_put@_this+1,w,c
  3393  000C44  6EDA               	movwf	fsr2h,c
  3394  000C46  C023  FFDF         	movff	UART_buff_put@c,indf2
  3395                           
  3396                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  3397  000C4A  EE20 F0C8          	lfsr	2,200
  3398  000C4E  5021               	movf	UART_buff_put@_this,w,c
  3399  000C50  26D9               	addwf	fsr2l,f,c
  3400  000C52  5022               	movf	UART_buff_put@_this+1,w,c
  3401  000C54  22DA               	addwfc	fsr2h,f,c
  3402  000C56  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3403  000C5A  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3404  000C5E  0E00               	movlw	0
  3405  000C60  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3406  000C62  0EC8               	movlw	200
  3407  000C64  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3408  000C66  EC20  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3409  000C6A  EE20 F0C8          	lfsr	2,200
  3410  000C6E  5021               	movf	UART_buff_put@_this,w,c
  3411  000C70  26D9               	addwf	fsr2l,f,c
  3412  000C72  5022               	movf	UART_buff_put@_this+1,w,c
  3413  000C74  22DA               	addwfc	fsr2h,f,c
  3414  000C76  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3415  000C7A  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3416                           
  3417                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  3418  000C7E  EE20 F0CA          	lfsr	2,202
  3419  000C82  5021               	movf	UART_buff_put@_this,w,c
  3420  000C84  26D9               	addwf	fsr2l,f,c
  3421  000C86  5022               	movf	UART_buff_put@_this+1,w,c
  3422  000C88  22DA               	addwfc	fsr2h,f,c
  3423  000C8A  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  3424  000C8E  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  3425  000C92  0E00               	movlw	0
  3426  000C94  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  3427  000C96  0EC8               	movlw	200
  3428  000C98  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  3429  000C9A  EC20  F00D         	call	_UART_buff_modulo_inc	;wreg free
  3430  000C9E  EE20 F0CA          	lfsr	2,202
  3431  000CA2  5021               	movf	UART_buff_put@_this,w,c
  3432  000CA4  26D9               	addwf	fsr2l,f,c
  3433  000CA6  5022               	movf	UART_buff_put@_this+1,w,c
  3434  000CA8  22DA               	addwfc	fsr2h,f,c
  3435  000CAA  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  3436  000CAE  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  3437  000CB2  0012               	return	
  3438  000CB4  0012               	return		;funcret
  3439  000CB6                     __end_of_UART_buff_put:
  3440                           	opt stack 0
  3441                           tosu	equ	0xFFF
  3442                           tosh	equ	0xFFE
  3443                           tosl	equ	0xFFD
  3444                           pclath	equ	0xFFA
  3445                           tblptru	equ	0xFF8
  3446                           tblptrh	equ	0xFF7
  3447                           tblptrl	equ	0xFF6
  3448                           tablat	equ	0xFF5
  3449                           prodh	equ	0xFF4
  3450                           prodl	equ	0xFF3
  3451                           intcon	equ	0xFF2
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           indf2	equ	0xFDF
  3455                           postinc2	equ	0xFDE
  3456                           postdec2	equ	0xFDD
  3457                           plusw2	equ	0xFDB
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _Receive_peek *****************
  3463 ;; Defined at:
  3464 ;;		line 118 in file "UART.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      unsigned char 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3478 ;;      Params:         0       0       0       0       0       0       0
  3479 ;;      Locals:         0       0       0       0       0       0       0
  3480 ;;      Temps:          0       0       0       0       0       0       0
  3481 ;;      Totals:         0       0       0       0       0       0       0
  3482 ;;Total ram usage:        0 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    5
  3485 ;; This function calls:
  3486 ;;		_UART_buff_peek
  3487 ;; This function is called by:
  3488 ;;		_SYSTEM_Initialize
  3489 ;;		_receiveData
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text12
  3494  001BD8                     __ptext12:
  3495                           	opt stack 0
  3496  001BD8                     _Receive_peek:
  3497                           	opt stack 23
  3498                           
  3499                           ;UART.c: 119: return UART_buff_peek(&input_buffer);
  3500                           
  3501                           ;incstack = 0
  3502  001BD8  0E00               	movlw	low _input_buffer
  3503  001BDA  6E1B               	movwf	UART_buff_peek@_this,c
  3504  001BDC  0E03               	movlw	high _input_buffer
  3505  001BDE  6E1C               	movwf	UART_buff_peek@_this+1,c
  3506  001BE0  EC65  F00D         	call	_UART_buff_peek	;wreg free
  3507  001BE4  0012               	return	
  3508  001BE6  0012               	return		;funcret
  3509  001BE8                     __end_of_Receive_peek:
  3510                           	opt stack 0
  3511                           tosu	equ	0xFFF
  3512                           tosh	equ	0xFFE
  3513                           tosl	equ	0xFFD
  3514                           pclath	equ	0xFFA
  3515                           tblptru	equ	0xFF8
  3516                           tblptrh	equ	0xFF7
  3517                           tblptrl	equ	0xFF6
  3518                           tablat	equ	0xFF5
  3519                           prodh	equ	0xFF4
  3520                           prodl	equ	0xFF3
  3521                           intcon	equ	0xFF2
  3522                           postinc0	equ	0xFEE
  3523                           wreg	equ	0xFE8
  3524                           indf2	equ	0xFDF
  3525                           postinc2	equ	0xFDE
  3526                           postdec2	equ	0xFDD
  3527                           plusw2	equ	0xFDB
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _UART_buff_peek *****************
  3533 ;; Defined at:
  3534 ;;		line 114 in file "UART.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  3537 ;;		 -> input_buffer(206), 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      unsigned char 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         2       0       0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0
  3551 ;;      Temps:          2       0       0       0       0       0       0
  3552 ;;      Totals:         4       0       0       0       0       0       0
  3553 ;;Total ram usage:        4 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    4
  3556 ;; This function calls:
  3557 ;;		Nothing
  3558 ;; This function is called by:
  3559 ;;		_Receive_peek
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text13
  3564  001ACA                     __ptext13:
  3565                           	opt stack 0
  3566  001ACA                     _UART_buff_peek:
  3567                           	opt stack 23
  3568                           
  3569                           ;UART.c: 115: return _this->buf[_this->tail];
  3570                           
  3571                           ;incstack = 0
  3572  001ACA  EE20 F0CA          	lfsr	2,202
  3573  001ACE  501B               	movf	UART_buff_peek@_this,w,c
  3574  001AD0  26D9               	addwf	fsr2l,f,c
  3575  001AD2  501C               	movf	UART_buff_peek@_this+1,w,c
  3576  001AD4  22DA               	addwfc	fsr2h,f,c
  3577  001AD6  CFDE F01D          	movff	postinc2,??_UART_buff_peek
  3578  001ADA  CFDD F01E          	movff	postdec2,??_UART_buff_peek+1
  3579  001ADE  501D               	movf	??_UART_buff_peek,w,c
  3580  001AE0  241B               	addwf	UART_buff_peek@_this,w,c
  3581  001AE2  6ED9               	movwf	fsr2l,c
  3582  001AE4  501E               	movf	??_UART_buff_peek+1,w,c
  3583  001AE6  201C               	addwfc	UART_buff_peek@_this+1,w,c
  3584  001AE8  6EDA               	movwf	fsr2h,c
  3585  001AEA  50DF               	movf	indf2,w,c
  3586  001AEC  0012               	return	
  3587  001AEE  0012               	return		;funcret
  3588  001AF0                     __end_of_UART_buff_peek:
  3589                           	opt stack 0
  3590                           tosu	equ	0xFFF
  3591                           tosh	equ	0xFFE
  3592                           tosl	equ	0xFFD
  3593                           pclath	equ	0xFFA
  3594                           tblptru	equ	0xFF8
  3595                           tblptrh	equ	0xFF7
  3596                           tblptrl	equ	0xFF6
  3597                           tablat	equ	0xFF5
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           intcon	equ	0xFF2
  3601                           postinc0	equ	0xFEE
  3602                           wreg	equ	0xFE8
  3603                           indf2	equ	0xFDF
  3604                           postinc2	equ	0xFDE
  3605                           postdec2	equ	0xFDD
  3606                           plusw2	equ	0xFDB
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _CRCcheck *****************
  3612 ;; Defined at:
  3613 ;;		line 373 in file "FastTransfer.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  rt              2    5[BANK1 ] int 
  3618 ;;  arrayHolder     3    2[BANK1 ] unsigned char [3]
  3619 ;;  calculatedCR    1    1[BANK1 ] unsigned char 
  3620 ;;  SentCRC         1    0[BANK1 ] unsigned char 
  3621 ;; Return value:  Size  Location     Type
  3622 ;;		None               void
  3623 ;; Registers used:
  3624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  3625 ;; Tracked objects:
  3626 ;;		On entry : 0/0
  3627 ;;		On exit  : 0/0
  3628 ;;		Unchanged: 0/0
  3629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3630 ;;      Params:         0       0       0       0       0       0       0
  3631 ;;      Locals:         0       0       7       0       0       0       0
  3632 ;;      Temps:          0       0       0       0       0       0       0
  3633 ;;      Totals:         0       0       7       0       0       0       0
  3634 ;;Total ram usage:        7 bytes
  3635 ;; Hardware stack levels used:    1
  3636 ;; Hardware stack levels required when called:    7
  3637 ;; This function calls:
  3638 ;;		Absolute function
  3639 ;;		_CRC8
  3640 ;;		_Receive_available
  3641 ;;		_Receive_get
  3642 ;;		_crcBufS_get
  3643 ;;		_crcBufS_status_put
  3644 ;; This function is called by:
  3645 ;;		_receiveData
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           	psect	text14
  3650  0008E6                     __ptext14:
  3651                           	opt stack 0
  3652  0008E6                     _CRCcheck:
  3653                           	opt stack 21
  3654                           
  3655                           ;FastTransfer.c: 375: while (!(serial_available() > 3));
  3656                           
  3657                           ;incstack = 0
  3658  0008E6  D000               	goto	l3457
  3659  0008E8                     l3457:
  3660  0008E8  D801               	call	u3008
  3661  0008EA  D00A               	goto	u3009
  3662  0008EC                     u3008:
  3663  0008EC  0005               	push	
  3664  0008EE  6EFA               	movwf	pclath,c
  3665  0008F0  502F               	movf	_serial_available,w,c
  3666  0008F2  6EFD               	movwf	tosl,c
  3667  0008F4  5030               	movf	_serial_available+1,w,c
  3668  0008F6  6EFE               	movwf	tosh,c
  3669  0008F8  50F8               	movf	tblptru,w,c
  3670  0008FA  6EFF               	movwf	tosu,c
  3671  0008FC  50FA               	movf	pclath,w,c
  3672  0008FE  0012               	return		;indir
  3673  000900                     u3009:
  3674  000900  BE1E               	btfsc	?_Receive_available+1,7,c
  3675  000902  D7F2               	goto	l3457
  3676  000904  501E               	movf	?_Receive_available+1,w,c
  3677  000906  E106               	bnz	l3459
  3678  000908  0E04               	movlw	4
  3679  00090A  5C1D               	subwf	?_Receive_available,w,c
  3680  00090C  B0D8               	btfsc	status,0,c
  3681  00090E  D002               	goto	l3459
  3682  000910  D7EB               	goto	l3457
  3683  000912  D000               	goto	l3459
  3684  000914                     l3459:
  3685                           
  3686                           ;FastTransfer.c: 377: unsigned char arrayHolder[3];
  3687                           ;FastTransfer.c: 378: arrayHolder[0] = serial_read();
  3688  000914  D801               	call	u3028
  3689  000916  D00A               	goto	u3029
  3690  000918                     u3028:
  3691  000918  0005               	push	
  3692  00091A  6EFA               	movwf	pclath,c
  3693  00091C  5033               	movf	_serial_read,w,c
  3694  00091E  6EFD               	movwf	tosl,c
  3695  000920  5034               	movf	_serial_read+1,w,c
  3696  000922  6EFE               	movwf	tosh,c
  3697  000924  50F8               	movf	tblptru,w,c
  3698  000926  6EFF               	movwf	tosu,c
  3699  000928  50FA               	movf	pclath,w,c
  3700  00092A  0012               	return		;indir
  3701  00092C                     u3029:
  3702  00092C  0101               	movlb	1	; () banked
  3703  00092E  6FD0               	movwf	CRCcheck@arrayHolder& (0+255),b
  3704                           
  3705                           ;FastTransfer.c: 379: arrayHolder[1] = serial_read();
  3706  000930  D801               	call	u3038
  3707  000932  D00A               	goto	u3039
  3708  000934                     u3038:
  3709  000934  0005               	push	
  3710  000936  6EFA               	movwf	pclath,c
  3711  000938  5033               	movf	_serial_read,w,c
  3712  00093A  6EFD               	movwf	tosl,c
  3713  00093C  5034               	movf	_serial_read+1,w,c
  3714  00093E  6EFE               	movwf	tosh,c
  3715  000940  50F8               	movf	tblptru,w,c
  3716  000942  6EFF               	movwf	tosu,c
  3717  000944  50FA               	movf	pclath,w,c
  3718  000946  0012               	return		;indir
  3719  000948                     u3039:
  3720  000948  0101               	movlb	1	; () banked
  3721  00094A  6FD1               	movwf	(CRCcheck@arrayHolder+1)& (0+255),b
  3722                           
  3723                           ;FastTransfer.c: 380: arrayHolder[2] = serial_read();
  3724  00094C  D801               	call	u3048
  3725  00094E  D00A               	goto	u3049
  3726  000950                     u3048:
  3727  000950  0005               	push	
  3728  000952  6EFA               	movwf	pclath,c
  3729  000954  5033               	movf	_serial_read,w,c
  3730  000956  6EFD               	movwf	tosl,c
  3731  000958  5034               	movf	_serial_read+1,w,c
  3732  00095A  6EFE               	movwf	tosh,c
  3733  00095C  50F8               	movf	tblptru,w,c
  3734  00095E  6EFF               	movwf	tosu,c
  3735  000960  50FA               	movf	pclath,w,c
  3736  000962  0012               	return		;indir
  3737  000964                     u3049:
  3738  000964  0101               	movlb	1	; () banked
  3739  000966  6FD2               	movwf	(CRCcheck@arrayHolder+2)& (0+255),b
  3740                           
  3741                           ;FastTransfer.c: 381: unsigned char SentCRC = serial_read();
  3742  000968  D801               	call	u3058
  3743  00096A  D00A               	goto	u3059
  3744  00096C                     u3058:
  3745  00096C  0005               	push	
  3746  00096E  6EFA               	movwf	pclath,c
  3747  000970  5033               	movf	_serial_read,w,c
  3748  000972  6EFD               	movwf	tosl,c
  3749  000974  5034               	movf	_serial_read+1,w,c
  3750  000976  6EFE               	movwf	tosh,c
  3751  000978  50F8               	movf	tblptru,w,c
  3752  00097A  6EFF               	movwf	tosu,c
  3753  00097C  50FA               	movf	pclath,w,c
  3754  00097E  0012               	return		;indir
  3755  000980                     u3059:
  3756  000980  0101               	movlb	1	; () banked
  3757  000982  6FCE               	movwf	CRCcheck@SentCRC& (0+255),b
  3758                           
  3759                           ; BSR set to: 1
  3760                           ;FastTransfer.c: 382: unsigned char calculatedCRC = CRC8(arrayHolder, 3);
  3761  000984  0ED0               	movlw	low CRCcheck@arrayHolder
  3762  000986  6E1B               	movwf	CRC8@data,c
  3763  000988  0E01               	movlw	high CRCcheck@arrayHolder
  3764  00098A  6E1C               	movwf	CRC8@data+1,c
  3765  00098C  0E03               	movlw	3
  3766  00098E  6E1D               	movwf	CRC8@len,c
  3767  000990  ECEE  F00B         	call	_CRC8	;wreg free
  3768  000994  0101               	movlb	1	; () banked
  3769  000996  6FCF               	movwf	CRCcheck@calculatedCRC& (0+255),b
  3770                           
  3771                           ; BSR set to: 1
  3772                           ;FastTransfer.c: 385: if (SentCRC == calculatedCRC) {
  3773  000998  0101               	movlb	1	; () banked
  3774  00099A  51CF               	movf	CRCcheck@calculatedCRC& (0+255),w,b
  3775  00099C  0101               	movlb	1	; () banked
  3776  00099E  19CE               	xorwf	CRCcheck@SentCRC& (0+255),w,b
  3777  0009A0  A4D8               	btfss	status,2,c
  3778  0009A2  D053               	goto	l3489
  3779                           
  3780                           ; BSR set to: 1
  3781                           ;FastTransfer.c: 387: int rt;
  3782                           ;FastTransfer.c: 388: for (rt = 0; rt < 5; rt++) {
  3783  0009A4  0E00               	movlw	0
  3784  0009A6  0101               	movlb	1	; () banked
  3785  0009A8  6FD4               	movwf	(CRCcheck@rt+1)& (0+255),b
  3786  0009AA  0E00               	movlw	0
  3787  0009AC  6FD3               	movwf	CRCcheck@rt& (0+255),b
  3788  0009AE                     l3467:
  3789                           
  3790                           ; BSR set to: 1
  3791  0009AE  0101               	movlb	1	; () banked
  3792  0009B0  BFD4               	btfsc	(CRCcheck@rt+1)& (0+255),7,b
  3793  0009B2  D00A               	goto	l3471
  3794  0009B4  0101               	movlb	1	; () banked
  3795  0009B6  51D4               	movf	(CRCcheck@rt+1)& (0+255),w,b
  3796  0009B8  E14C               	bnz	l630
  3797  0009BA  0E05               	movlw	5
  3798  0009BC  0101               	movlb	1	; () banked
  3799  0009BE  5DD3               	subwf	CRCcheck@rt& (0+255),w,b
  3800  0009C0  B0D8               	btfsc	status,0,c
  3801  0009C2  0012               	return	
  3802  0009C4  D001               	goto	l3471
  3803                           
  3804                           ; BSR set to: 1
  3805  0009C6  0012               	return	
  3806  0009C8                     l3471:
  3807                           
  3808                           ; BSR set to: 1
  3809                           ;FastTransfer.c: 389: if (returnAddress == crcBufS_get(&crc_buffer, rt, 0)) {
  3810  0009C8  0EEE               	movlw	low _crc_buffer
  3811  0009CA  6E1B               	movwf	crcBufS_get@_this,c
  3812  0009CC  0E00               	movlw	high _crc_buffer
  3813  0009CE  6E1C               	movwf	crcBufS_get@_this+1,c
  3814  0009D0  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3815  0009D4  0E00               	movlw	0
  3816  0009D6  6E1E               	movwf	crcBufS_get@space,c
  3817  0009D8  ECE9  F006         	call	_crcBufS_get	;wreg free
  3818  0009DC  183F               	xorwf	_returnAddress,w,c
  3819  0009DE  A4D8               	btfss	status,2,c
  3820  0009E0  D02F               	goto	l3485
  3821                           
  3822                           ;FastTransfer.c: 390: if (arrayHolder[2] == crcBufS_get(&crc_buffer, rt, 1)) {
  3823  0009E2  0EEE               	movlw	low _crc_buffer
  3824  0009E4  6E1B               	movwf	crcBufS_get@_this,c
  3825  0009E6  0E00               	movlw	high _crc_buffer
  3826  0009E8  6E1C               	movwf	crcBufS_get@_this+1,c
  3827  0009EA  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_get@time
  3828  0009EE  0E01               	movlw	1
  3829  0009F0  6E1E               	movwf	crcBufS_get@space,c
  3830  0009F2  ECE9  F006         	call	_crcBufS_get	;wreg free
  3831  0009F6  0101               	movlb	1	; () banked
  3832  0009F8  19D2               	xorwf	(CRCcheck@arrayHolder+2)& (0+255),w,b
  3833  0009FA  A4D8               	btfss	status,2,c
  3834  0009FC  D021               	goto	l3485
  3835                           
  3836                           ; BSR set to: 1
  3837                           ;FastTransfer.c: 391: if (arrayHolder[1] == 1) {
  3838  0009FE  0101               	movlb	1	; () banked
  3839  000A00  05D1               	decf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3840  000A02  A4D8               	btfss	status,2,c
  3841  000A04  D00C               	goto	l3481
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;FastTransfer.c: 392: crcBufS_status_put(&crc_buffer, rt, 1);
  3845  000A06  0EEE               	movlw	low _crc_buffer
  3846  000A08  6E1B               	movwf	crcBufS_status_put@_this,c
  3847  000A0A  0E00               	movlw	high _crc_buffer
  3848  000A0C  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3849  000A0E  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3850  000A12  0E01               	movlw	1
  3851  000A14  6E1E               	movwf	crcBufS_status_put@status,c
  3852  000A16  ECAE  F008         	call	_crcBufS_status_put	;wreg free
  3853                           
  3854                           ;FastTransfer.c: 393: break;
  3855  000A1A  0012               	return	
  3856                           
  3857                           ;FastTransfer.c: 394: } else if (arrayHolder[1] == 2) {
  3858  000A1C  D011               	goto	l3485
  3859  000A1E                     l3481:
  3860  000A1E  0E02               	movlw	2
  3861  000A20  0101               	movlb	1	; () banked
  3862  000A22  19D1               	xorwf	(CRCcheck@arrayHolder+1)& (0+255),w,b
  3863  000A24  A4D8               	btfss	status,2,c
  3864  000A26  D00C               	goto	l3485
  3865                           
  3866                           ; BSR set to: 1
  3867                           ;FastTransfer.c: 395: crcBufS_status_put(&crc_buffer, rt, 2);
  3868  000A28  0EEE               	movlw	low _crc_buffer
  3869  000A2A  6E1B               	movwf	crcBufS_status_put@_this,c
  3870  000A2C  0E00               	movlw	high _crc_buffer
  3871  000A2E  6E1C               	movwf	crcBufS_status_put@_this+1,c
  3872  000A30  C1D3  F01D         	movff	CRCcheck@rt,crcBufS_status_put@time
  3873  000A34  0E02               	movlw	2
  3874  000A36  6E1E               	movwf	crcBufS_status_put@status,c
  3875  000A38  ECAE  F008         	call	_crcBufS_status_put	;wreg free
  3876                           
  3877                           ;FastTransfer.c: 396: break;
  3878  000A3C  0012               	return	
  3879  000A3E  D000               	goto	l3485
  3880  000A40                     l3485:
  3881  000A40  0101               	movlb	1	; () banked
  3882  000A42  4BD3               	infsnz	CRCcheck@rt& (0+255),f,b
  3883  000A44  2BD4               	incf	(CRCcheck@rt+1)& (0+255),f,b
  3884  000A46  D7B3               	goto	l3467
  3885                           
  3886                           ; BSR set to: 1
  3887                           ;FastTransfer.c: 397: }
  3888                           ;FastTransfer.c: 398: }
  3889                           ;FastTransfer.c: 399: }
  3890                           ;FastTransfer.c: 400: }
  3891                           ;FastTransfer.c: 401: } else {
  3892                           
  3893                           ; BSR set to: 1
  3894  000A48  0012               	return	
  3895  000A4A                     l3489:
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;FastTransfer.c: 402: crcErrorCounter++;
  3899  000A4A  0100               	movlb	0	; () banked
  3900  000A4C  4BC2               	infsnz	_crcErrorCounter& (0+255),f,b
  3901  000A4E  2BC3               	incf	(_crcErrorCounter+1)& (0+255),f,b
  3902  000A50  0012               	return	
  3903  000A52                     l630:
  3904  000A52  0012               	return		;funcret
  3905  000A54                     __end_of_CRCcheck:
  3906                           	opt stack 0
  3907                           tosu	equ	0xFFF
  3908                           tosh	equ	0xFFE
  3909                           tosl	equ	0xFFD
  3910                           pclath	equ	0xFFA
  3911                           tblptru	equ	0xFF8
  3912                           tblptrh	equ	0xFF7
  3913                           tblptrl	equ	0xFF6
  3914                           tablat	equ	0xFF5
  3915                           prodh	equ	0xFF4
  3916                           prodl	equ	0xFF3
  3917                           intcon	equ	0xFF2
  3918                           postinc0	equ	0xFEE
  3919                           wreg	equ	0xFE8
  3920                           indf2	equ	0xFDF
  3921                           postinc2	equ	0xFDE
  3922                           postdec2	equ	0xFDD
  3923                           plusw2	equ	0xFDB
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928 ;; *************** function _crcBufS_status_put *****************
  3929 ;; Defined at:
  3930 ;;		line 336 in file "FastTransfer.c"
  3931 ;; Parameters:    Size  Location     Type
  3932 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  3933 ;;		 -> crc_buffer(17), 
  3934 ;;  time            1   28[COMRAM] unsigned char 
  3935 ;;  status          1   29[COMRAM] unsigned char 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  wantedTime      2   34[COMRAM] int 
  3938 ;; Return value:  Size  Location     Type
  3939 ;;		None               void
  3940 ;; Registers used:
  3941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3942 ;; Tracked objects:
  3943 ;;		On entry : 0/0
  3944 ;;		On exit  : 0/0
  3945 ;;		Unchanged: 0/0
  3946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3947 ;;      Params:         4       0       0       0       0       0       0
  3948 ;;      Locals:         2       0       0       0       0       0       0
  3949 ;;      Temps:          4       0       0       0       0       0       0
  3950 ;;      Totals:        10       0       0       0       0       0       0
  3951 ;;Total ram usage:       10 bytes
  3952 ;; Hardware stack levels used:    1
  3953 ;; Hardware stack levels required when called:    4
  3954 ;; This function calls:
  3955 ;;		Nothing
  3956 ;; This function is called by:
  3957 ;;		_CRCcheck
  3958 ;; This function uses a non-reentrant model
  3959 ;;
  3960                           
  3961                           	psect	text15
  3962  00115C                     __ptext15:
  3963                           	opt stack 0
  3964  00115C                     _crcBufS_status_put:
  3965                           	opt stack 23
  3966                           
  3967                           ;FastTransfer.c: 337: if (time >= 5) {
  3968                           
  3969                           ;incstack = 0
  3970  00115C  0E04               	movlw	4
  3971  00115E  641D               	cpfsgt	crcBufS_status_put@time,c
  3972  001160  D003               	goto	l3379
  3973                           
  3974                           ;FastTransfer.c: 338: time = 5 - 1;
  3975  001162  0E04               	movlw	4
  3976  001164  6E1D               	movwf	crcBufS_status_put@time,c
  3977  001166  D000               	goto	l3379
  3978  001168                     l3379:
  3979                           
  3980                           ;FastTransfer.c: 339: }
  3981                           ;FastTransfer.c: 340: time = time + 1;
  3982  001168  281D               	incf	crcBufS_status_put@time,w,c
  3983  00116A  6E1D               	movwf	crcBufS_status_put@time,c
  3984                           
  3985                           ;FastTransfer.c: 341: int wantedTime = time * 3;
  3986  00116C  501D               	movf	crcBufS_status_put@time,w,c
  3987  00116E  0D03               	mullw	3
  3988  001170  CFF3 F023          	movff	prodl,crcBufS_status_put@wantedTime
  3989  001174  CFF4 F024          	movff	prodh,crcBufS_status_put@wantedTime+1
  3990                           
  3991                           ;FastTransfer.c: 342: if (wantedTime > _this->head) {
  3992  001178  EE20 F00F          	lfsr	2,15
  3993  00117C  501B               	movf	crcBufS_status_put@_this,w,c
  3994  00117E  26D9               	addwf	fsr2l,f,c
  3995  001180  501C               	movf	crcBufS_status_put@_this+1,w,c
  3996  001182  22DA               	addwfc	fsr2h,f,c
  3997  001184  5023               	movf	crcBufS_status_put@wantedTime,w,c
  3998  001186  5CDE               	subwf	postinc2,w,c
  3999  001188  50DE               	movf	postinc2,w,c
  4000  00118A  0A80               	xorlw	128
  4001  00118C  6E21               	movwf	(??_crcBufS_status_put+2)& (0+255),c
  4002  00118E  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4003  001190  0A80               	xorlw	128
  4004  001192  5821               	subwfb	(??_crcBufS_status_put+2)& (0+255),w,c
  4005  001194  B0D8               	btfsc	status,0,c
  4006  001196  D02B               	goto	l3387
  4007                           
  4008                           ;FastTransfer.c: 343: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4009  001198  EE20 F00F          	lfsr	2,15
  4010  00119C  501B               	movf	crcBufS_status_put@_this,w,c
  4011  00119E  26D9               	addwf	fsr2l,f,c
  4012  0011A0  501C               	movf	crcBufS_status_put@_this+1,w,c
  4013  0011A2  22DA               	addwfc	fsr2h,f,c
  4014  0011A4  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4015  0011A8  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4016  0011AC  1E1F               	comf	??_crcBufS_status_put,f,c
  4017  0011AE  1E20               	comf	??_crcBufS_status_put+1,f,c
  4018  0011B0  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4019  0011B2  2A20               	incf	??_crcBufS_status_put+1,f,c
  4020  0011B4  5023               	movf	crcBufS_status_put@wantedTime,w,c
  4021  0011B6  261F               	addwf	??_crcBufS_status_put,f,c
  4022  0011B8  5024               	movf	crcBufS_status_put@wantedTime+1,w,c
  4023  0011BA  2220               	addwfc	??_crcBufS_status_put+1,f,c
  4024  0011BC  1E1F               	comf	??_crcBufS_status_put,f,c
  4025  0011BE  1E20               	comf	??_crcBufS_status_put+1,f,c
  4026  0011C0  4A1F               	infsnz	??_crcBufS_status_put,f,c
  4027  0011C2  2A20               	incf	??_crcBufS_status_put+1,f,c
  4028  0011C4  0E0F               	movlw	15
  4029  0011C6  241F               	addwf	??_crcBufS_status_put,w,c
  4030  0011C8  6E23               	movwf	crcBufS_status_put@wantedTime,c
  4031  0011CA  0E00               	movlw	0
  4032  0011CC  2020               	addwfc	??_crcBufS_status_put+1,w,c
  4033  0011CE  6E24               	movwf	crcBufS_status_put@wantedTime+1,c
  4034                           
  4035                           ;FastTransfer.c: 344: _this->buf[(wantedTime + 2)] = status;
  4036  0011D0  0E02               	movlw	2
  4037  0011D2  2423               	addwf	crcBufS_status_put@wantedTime,w,c
  4038  0011D4  6E1F               	movwf	??_crcBufS_status_put& (0+255),c
  4039  0011D6  0E00               	movlw	0
  4040  0011D8  2024               	addwfc	crcBufS_status_put@wantedTime+1,w,c
  4041  0011DA  6E20               	movwf	(??_crcBufS_status_put+1)& (0+255),c
  4042  0011DC  501F               	movf	??_crcBufS_status_put,w,c
  4043  0011DE  241B               	addwf	crcBufS_status_put@_this,w,c
  4044  0011E0  6ED9               	movwf	fsr2l,c
  4045  0011E2  5020               	movf	??_crcBufS_status_put+1,w,c
  4046  0011E4  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4047  0011E6  6EDA               	movwf	fsr2h,c
  4048  0011E8  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4049                           
  4050                           ;FastTransfer.c: 345: } else {
  4051  0011EC  0012               	return	
  4052  0011EE                     l3387:
  4053                           
  4054                           ;FastTransfer.c: 346: _this->buf[(_this->head - wantedTime) + 2] = status;
  4055  0011EE  EE20 F00F          	lfsr	2,15
  4056  0011F2  501B               	movf	crcBufS_status_put@_this,w,c
  4057  0011F4  26D9               	addwf	fsr2l,f,c
  4058  0011F6  501C               	movf	crcBufS_status_put@_this+1,w,c
  4059  0011F8  22DA               	addwfc	fsr2h,f,c
  4060  0011FA  CFDE F01F          	movff	postinc2,??_crcBufS_status_put
  4061  0011FE  CFDD F020          	movff	postdec2,??_crcBufS_status_put+1
  4062  001202  C023  F021         	movff	crcBufS_status_put@wantedTime,??_crcBufS_status_put+2
  4063  001206  C024  F022         	movff	crcBufS_status_put@wantedTime+1,??_crcBufS_status_put+3
  4064  00120A  1E21               	comf	??_crcBufS_status_put+2,f,c
  4065  00120C  1E22               	comf	??_crcBufS_status_put+3,f,c
  4066  00120E  4A21               	infsnz	??_crcBufS_status_put+2,f,c
  4067  001210  2A22               	incf	??_crcBufS_status_put+3,f,c
  4068  001212  501F               	movf	??_crcBufS_status_put,w,c
  4069  001214  2621               	addwf	??_crcBufS_status_put+2,f,c
  4070  001216  5020               	movf	??_crcBufS_status_put+1,w,c
  4071  001218  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4072  00121A  0E02               	movlw	2
  4073  00121C  2621               	addwf	??_crcBufS_status_put+2,f,c
  4074  00121E  0E00               	movlw	0
  4075  001220  2222               	addwfc	??_crcBufS_status_put+3,f,c
  4076  001222  5021               	movf	??_crcBufS_status_put+2,w,c
  4077  001224  241B               	addwf	crcBufS_status_put@_this,w,c
  4078  001226  6ED9               	movwf	fsr2l,c
  4079  001228  5022               	movf	??_crcBufS_status_put+3,w,c
  4080  00122A  201C               	addwfc	crcBufS_status_put@_this+1,w,c
  4081  00122C  6EDA               	movwf	fsr2h,c
  4082  00122E  C01E  FFDF         	movff	crcBufS_status_put@status,indf2
  4083  001232  0012               	return	
  4084  001234  0012               	return		;funcret
  4085  001236                     __end_of_crcBufS_status_put:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclath	equ	0xFFA
  4091                           tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           prodh	equ	0xFF4
  4096                           prodl	equ	0xFF3
  4097                           intcon	equ	0xFF2
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           indf2	equ	0xFDF
  4101                           postinc2	equ	0xFDE
  4102                           postdec2	equ	0xFDD
  4103                           plusw2	equ	0xFDB
  4104                           fsr2h	equ	0xFDA
  4105                           fsr2l	equ	0xFD9
  4106                           status	equ	0xFD8
  4107                           
  4108 ;; *************** function _crcBufS_get *****************
  4109 ;; Defined at:
  4110 ;;		line 353 in file "FastTransfer.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  _this           2   26[COMRAM] PTR struct crcBufS
  4113 ;;		 -> crc_buffer(17), 
  4114 ;;  time            1   28[COMRAM] unsigned char 
  4115 ;;  space           1   29[COMRAM] unsigned char 
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;  wantedTime      2   36[COMRAM] int 
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      unsigned char 
  4120 ;; Registers used:
  4121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4127 ;;      Params:         4       0       0       0       0       0       0
  4128 ;;      Locals:         2       0       0       0       0       0       0
  4129 ;;      Temps:          6       0       0       0       0       0       0
  4130 ;;      Totals:        12       0       0       0       0       0       0
  4131 ;;Total ram usage:       12 bytes
  4132 ;; Hardware stack levels used:    1
  4133 ;; Hardware stack levels required when called:    4
  4134 ;; This function calls:
  4135 ;;		Nothing
  4136 ;; This function is called by:
  4137 ;;		_CRCcheck
  4138 ;;		_AKNAK
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text16
  4143  000DD2                     __ptext16:
  4144                           	opt stack 0
  4145  000DD2                     _crcBufS_get:
  4146                           	opt stack 23
  4147                           
  4148                           ;FastTransfer.c: 354: if (time >= 5) {
  4149                           
  4150                           ;incstack = 0
  4151  000DD2  0E04               	movlw	4
  4152  000DD4  641D               	cpfsgt	crcBufS_get@time,c
  4153  000DD6  D003               	goto	l3355
  4154                           
  4155                           ;FastTransfer.c: 355: time = 5 - 1;
  4156  000DD8  0E04               	movlw	4
  4157  000DDA  6E1D               	movwf	crcBufS_get@time,c
  4158  000DDC  D000               	goto	l3355
  4159  000DDE                     l3355:
  4160                           
  4161                           ;FastTransfer.c: 356: }
  4162                           ;FastTransfer.c: 357: if (space >= 3) {
  4163  000DDE  0E02               	movlw	2
  4164  000DE0  641E               	cpfsgt	crcBufS_get@space,c
  4165  000DE2  D003               	goto	l3359
  4166                           
  4167                           ;FastTransfer.c: 358: space = 3 - 1;
  4168  000DE4  0E02               	movlw	2
  4169  000DE6  6E1E               	movwf	crcBufS_get@space,c
  4170  000DE8  D000               	goto	l3359
  4171  000DEA                     l3359:
  4172                           
  4173                           ;FastTransfer.c: 359: }
  4174                           ;FastTransfer.c: 360: time = time + 1;
  4175  000DEA  281D               	incf	crcBufS_get@time,w,c
  4176  000DEC  6E1D               	movwf	crcBufS_get@time,c
  4177                           
  4178                           ;FastTransfer.c: 361: int wantedTime = time * 3;
  4179  000DEE  501D               	movf	crcBufS_get@time,w,c
  4180  000DF0  0D03               	mullw	3
  4181  000DF2  CFF3 F025          	movff	prodl,crcBufS_get@wantedTime
  4182  000DF6  CFF4 F026          	movff	prodh,crcBufS_get@wantedTime+1
  4183                           
  4184                           ;FastTransfer.c: 362: if (wantedTime > _this->head) {
  4185  000DFA  EE20 F00F          	lfsr	2,15
  4186  000DFE  501B               	movf	crcBufS_get@_this,w,c
  4187  000E00  26D9               	addwf	fsr2l,f,c
  4188  000E02  501C               	movf	crcBufS_get@_this+1,w,c
  4189  000E04  22DA               	addwfc	fsr2h,f,c
  4190  000E06  5025               	movf	crcBufS_get@wantedTime,w,c
  4191  000E08  5CDE               	subwf	postinc2,w,c
  4192  000E0A  50DE               	movf	postinc2,w,c
  4193  000E0C  0A80               	xorlw	128
  4194  000E0E  6E21               	movwf	(??_crcBufS_get+2)& (0+255),c
  4195  000E10  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4196  000E12  0A80               	xorlw	128
  4197  000E14  5821               	subwfb	(??_crcBufS_get+2)& (0+255),w,c
  4198  000E16  B0D8               	btfsc	status,0,c
  4199  000E18  D02A               	goto	l3371
  4200                           
  4201                           ;FastTransfer.c: 363: wantedTime = ((5 * 3)) - (wantedTime - _this->head);
  4202  000E1A  EE20 F00F          	lfsr	2,15
  4203  000E1E  501B               	movf	crcBufS_get@_this,w,c
  4204  000E20  26D9               	addwf	fsr2l,f,c
  4205  000E22  501C               	movf	crcBufS_get@_this+1,w,c
  4206  000E24  22DA               	addwfc	fsr2h,f,c
  4207  000E26  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4208  000E2A  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4209  000E2E  1E1F               	comf	??_crcBufS_get,f,c
  4210  000E30  1E20               	comf	??_crcBufS_get+1,f,c
  4211  000E32  4A1F               	infsnz	??_crcBufS_get,f,c
  4212  000E34  2A20               	incf	??_crcBufS_get+1,f,c
  4213  000E36  5025               	movf	crcBufS_get@wantedTime,w,c
  4214  000E38  261F               	addwf	??_crcBufS_get,f,c
  4215  000E3A  5026               	movf	crcBufS_get@wantedTime+1,w,c
  4216  000E3C  2220               	addwfc	??_crcBufS_get+1,f,c
  4217  000E3E  1E1F               	comf	??_crcBufS_get,f,c
  4218  000E40  1E20               	comf	??_crcBufS_get+1,f,c
  4219  000E42  4A1F               	infsnz	??_crcBufS_get,f,c
  4220  000E44  2A20               	incf	??_crcBufS_get+1,f,c
  4221  000E46  0E0F               	movlw	15
  4222  000E48  241F               	addwf	??_crcBufS_get,w,c
  4223  000E4A  6E25               	movwf	crcBufS_get@wantedTime,c
  4224  000E4C  0E00               	movlw	0
  4225  000E4E  2020               	addwfc	??_crcBufS_get+1,w,c
  4226  000E50  6E26               	movwf	crcBufS_get@wantedTime+1,c
  4227                           
  4228                           ;FastTransfer.c: 364: return (_this->buf[(wantedTime + space)]);
  4229  000E52  501E               	movf	crcBufS_get@space,w,c
  4230  000E54  2425               	addwf	crcBufS_get@wantedTime,w,c
  4231  000E56  6E1F               	movwf	??_crcBufS_get& (0+255),c
  4232  000E58  0E00               	movlw	0
  4233  000E5A  2026               	addwfc	crcBufS_get@wantedTime+1,w,c
  4234  000E5C  6E20               	movwf	(??_crcBufS_get+1)& (0+255),c
  4235  000E5E  501F               	movf	??_crcBufS_get,w,c
  4236  000E60  241B               	addwf	crcBufS_get@_this,w,c
  4237  000E62  6ED9               	movwf	fsr2l,c
  4238  000E64  5020               	movf	??_crcBufS_get+1,w,c
  4239  000E66  201C               	addwfc	crcBufS_get@_this+1,w,c
  4240  000E68  6EDA               	movwf	fsr2h,c
  4241  000E6A  50DF               	movf	indf2,w,c
  4242                           
  4243                           ;FastTransfer.c: 365: } else {
  4244  000E6C  0012               	return	
  4245  000E6E                     l3371:
  4246                           
  4247                           ;FastTransfer.c: 366: return (_this->buf[(_this->head - wantedTime) + space]);
  4248  000E6E  EE20 F00F          	lfsr	2,15
  4249  000E72  501B               	movf	crcBufS_get@_this,w,c
  4250  000E74  26D9               	addwf	fsr2l,f,c
  4251  000E76  501C               	movf	crcBufS_get@_this+1,w,c
  4252  000E78  22DA               	addwfc	fsr2h,f,c
  4253  000E7A  CFDE F01F          	movff	postinc2,??_crcBufS_get
  4254  000E7E  CFDD F020          	movff	postdec2,??_crcBufS_get+1
  4255  000E82  C025  F021         	movff	crcBufS_get@wantedTime,??_crcBufS_get+2
  4256  000E86  C026  F022         	movff	crcBufS_get@wantedTime+1,??_crcBufS_get+3
  4257  000E8A  1E21               	comf	??_crcBufS_get+2,f,c
  4258  000E8C  1E22               	comf	??_crcBufS_get+3,f,c
  4259  000E8E  4A21               	infsnz	??_crcBufS_get+2,f,c
  4260  000E90  2A22               	incf	??_crcBufS_get+3,f,c
  4261  000E92  501E               	movf	crcBufS_get@space,w,c
  4262  000E94  6E23               	movwf	(??_crcBufS_get+4)& (0+255),c
  4263  000E96  6A24               	clrf	(??_crcBufS_get+5)& (0+255),c
  4264  000E98  5021               	movf	??_crcBufS_get+2,w,c
  4265  000E9A  2623               	addwf	??_crcBufS_get+4,f,c
  4266  000E9C  5022               	movf	??_crcBufS_get+3,w,c
  4267  000E9E  2224               	addwfc	??_crcBufS_get+5,f,c
  4268  000EA0  501F               	movf	??_crcBufS_get,w,c
  4269  000EA2  2623               	addwf	??_crcBufS_get+4,f,c
  4270  000EA4  5020               	movf	??_crcBufS_get+1,w,c
  4271  000EA6  2224               	addwfc	??_crcBufS_get+5,f,c
  4272  000EA8  5023               	movf	??_crcBufS_get+4,w,c
  4273  000EAA  241B               	addwf	crcBufS_get@_this,w,c
  4274  000EAC  6ED9               	movwf	fsr2l,c
  4275  000EAE  5024               	movf	??_crcBufS_get+5,w,c
  4276  000EB0  201C               	addwfc	crcBufS_get@_this+1,w,c
  4277  000EB2  6EDA               	movwf	fsr2h,c
  4278  000EB4  50DF               	movf	indf2,w,c
  4279  000EB6  0012               	return	
  4280  000EB8  0012               	return		;funcret
  4281  000EBA                     __end_of_crcBufS_get:
  4282                           	opt stack 0
  4283                           tosu	equ	0xFFF
  4284                           tosh	equ	0xFFE
  4285                           tosl	equ	0xFFD
  4286                           pclath	equ	0xFFA
  4287                           tblptru	equ	0xFF8
  4288                           tblptrh	equ	0xFF7
  4289                           tblptrl	equ	0xFF6
  4290                           tablat	equ	0xFF5
  4291                           prodh	equ	0xFF4
  4292                           prodl	equ	0xFF3
  4293                           intcon	equ	0xFF2
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           plusw2	equ	0xFDB
  4300                           fsr2h	equ	0xFDA
  4301                           fsr2l	equ	0xFD9
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _Receive_get *****************
  4305 ;; Defined at:
  4306 ;;		line 126 in file "UART.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;		None
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;		None
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      unsigned char 
  4313 ;; Registers used:
  4314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4320 ;;      Params:         0       0       0       0       0       0       0
  4321 ;;      Locals:         0       0       0       0       0       0       0
  4322 ;;      Temps:          0       0       0       0       0       0       0
  4323 ;;      Totals:         0       0       0       0       0       0       0
  4324 ;;Total ram usage:        0 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    6
  4327 ;; This function calls:
  4328 ;;		_UART_buff_get
  4329 ;; This function is called by:
  4330 ;;		_SYSTEM_Initialize
  4331 ;;		_getch
  4332 ;;		_CRCcheck
  4333 ;;		_receiveData
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text17
  4338  001BE8                     __ptext17:
  4339                           	opt stack 0
  4340  001BE8                     _Receive_get:
  4341                           	opt stack 22
  4342                           
  4343                           ;UART.c: 127: return UART_buff_get(&input_buffer);
  4344                           
  4345                           ;incstack = 0
  4346  001BE8  0E00               	movlw	low _input_buffer
  4347  001BEA  6E21               	movwf	UART_buff_get@_this,c
  4348  001BEC  0E03               	movlw	high _input_buffer
  4349  001BEE  6E22               	movwf	UART_buff_get@_this+1,c
  4350  001BF0  ECC7  F009         	call	_UART_buff_get	;wreg free
  4351  001BF4  0012               	return	
  4352  001BF6  0012               	return		;funcret
  4353  001BF8                     __end_of_Receive_get:
  4354                           	opt stack 0
  4355                           tosu	equ	0xFFF
  4356                           tosh	equ	0xFFE
  4357                           tosl	equ	0xFFD
  4358                           pclath	equ	0xFFA
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           intcon	equ	0xFF2
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf2	equ	0xFDF
  4369                           postinc2	equ	0xFDE
  4370                           postdec2	equ	0xFDD
  4371                           plusw2	equ	0xFDB
  4372                           fsr2h	equ	0xFDA
  4373                           fsr2l	equ	0xFD9
  4374                           status	equ	0xFD8
  4375                           
  4376 ;; *************** function _UART_buff_get *****************
  4377 ;; Defined at:
  4378 ;;		line 81 in file "UART.c"
  4379 ;; Parameters:    Size  Location     Type
  4380 ;;  _this           2   32[COMRAM] PTR struct UART_ring_buf
  4381 ;;		 -> output_buffer(206), input_buffer(206), 
  4382 ;; Auto vars:     Size  Location     Type
  4383 ;;  c               1   36[COMRAM] unsigned char 
  4384 ;; Return value:  Size  Location     Type
  4385 ;;                  1    wreg      unsigned char 
  4386 ;; Registers used:
  4387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4388 ;; Tracked objects:
  4389 ;;		On entry : 0/0
  4390 ;;		On exit  : 0/0
  4391 ;;		Unchanged: 0/0
  4392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4393 ;;      Params:         2       0       0       0       0       0       0
  4394 ;;      Locals:         1       0       0       0       0       0       0
  4395 ;;      Temps:          2       0       0       0       0       0       0
  4396 ;;      Totals:         5       0       0       0       0       0       0
  4397 ;;Total ram usage:        5 bytes
  4398 ;; Hardware stack levels used:    1
  4399 ;; Hardware stack levels required when called:    5
  4400 ;; This function calls:
  4401 ;;		_UART_buff_modulo_inc
  4402 ;; This function is called by:
  4403 ;;		_Receive_get
  4404 ;;		_Send_put
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text18
  4409  00138E                     __ptext18:
  4410                           	opt stack 0
  4411  00138E                     _UART_buff_get:
  4412                           	opt stack 21
  4413                           
  4414                           ;UART.c: 82: unsigned char c;
  4415                           ;UART.c: 83: if (_this->count > 0) {
  4416                           
  4417                           ;incstack = 0
  4418  00138E  EE20 F0CC          	lfsr	2,204
  4419  001392  5021               	movf	UART_buff_get@_this,w,c
  4420  001394  26D9               	addwf	fsr2l,f,c
  4421  001396  5022               	movf	UART_buff_get@_this+1,w,c
  4422  001398  22DA               	addwfc	fsr2h,f,c
  4423  00139A  0E01               	movlw	1
  4424  00139C  BEDB               	btfsc	plusw2,7,c
  4425  00139E  D03C               	goto	l3289
  4426  0013A0  0E01               	movlw	1
  4427  0013A2  50DB               	movf	plusw2,w,c
  4428  0013A4  E103               	bnz	u2790
  4429  0013A6  04DE               	decf	postinc2,w,c
  4430  0013A8  A0D8               	btfss	status,0,c
  4431  0013AA  D036               	goto	l3289
  4432  0013AC                     u2790:
  4433                           
  4434                           ;UART.c: 84: c = _this->buf[_this->tail];
  4435  0013AC  EE20 F0CA          	lfsr	2,202
  4436  0013B0  5021               	movf	UART_buff_get@_this,w,c
  4437  0013B2  26D9               	addwf	fsr2l,f,c
  4438  0013B4  5022               	movf	UART_buff_get@_this+1,w,c
  4439  0013B6  22DA               	addwfc	fsr2h,f,c
  4440  0013B8  CFDE F023          	movff	postinc2,??_UART_buff_get
  4441  0013BC  CFDD F024          	movff	postdec2,??_UART_buff_get+1
  4442  0013C0  5023               	movf	??_UART_buff_get,w,c
  4443  0013C2  2421               	addwf	UART_buff_get@_this,w,c
  4444  0013C4  6ED9               	movwf	fsr2l,c
  4445  0013C6  5024               	movf	??_UART_buff_get+1,w,c
  4446  0013C8  2022               	addwfc	UART_buff_get@_this+1,w,c
  4447  0013CA  6EDA               	movwf	fsr2h,c
  4448  0013CC  50DF               	movf	indf2,w,c
  4449  0013CE  6E25               	movwf	UART_buff_get@c,c
  4450                           
  4451                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  4452  0013D0  EE20 F0CA          	lfsr	2,202
  4453  0013D4  5021               	movf	UART_buff_get@_this,w,c
  4454  0013D6  26D9               	addwf	fsr2l,f,c
  4455  0013D8  5022               	movf	UART_buff_get@_this+1,w,c
  4456  0013DA  22DA               	addwfc	fsr2h,f,c
  4457  0013DC  CFDE F01B          	movff	postinc2,UART_buff_modulo_inc@value
  4458  0013E0  CFDD F01C          	movff	postdec2,UART_buff_modulo_inc@value+1
  4459  0013E4  0E00               	movlw	0
  4460  0013E6  6E1E               	movwf	UART_buff_modulo_inc@modulus+1,c
  4461  0013E8  0EC8               	movlw	200
  4462  0013EA  6E1D               	movwf	UART_buff_modulo_inc@modulus,c
  4463  0013EC  EC20  F00D         	call	_UART_buff_modulo_inc	;wreg free
  4464  0013F0  EE20 F0CA          	lfsr	2,202
  4465  0013F4  5021               	movf	UART_buff_get@_this,w,c
  4466  0013F6  26D9               	addwf	fsr2l,f,c
  4467  0013F8  5022               	movf	UART_buff_get@_this+1,w,c
  4468  0013FA  22DA               	addwfc	fsr2h,f,c
  4469  0013FC  C01B  FFDE         	movff	?_UART_buff_modulo_inc,postinc2
  4470  001400  C01C  FFDD         	movff	?_UART_buff_modulo_inc+1,postdec2
  4471                           
  4472                           ;UART.c: 86: --_this->count;
  4473  001404  EE20 F0CC          	lfsr	2,204
  4474  001408  5021               	movf	UART_buff_get@_this,w,c
  4475  00140A  26D9               	addwf	fsr2l,f,c
  4476  00140C  5022               	movf	UART_buff_get@_this+1,w,c
  4477  00140E  22DA               	addwfc	fsr2h,f,c
  4478  001410  06DE               	decf	postinc2,f,c
  4479  001412  0E00               	movlw	0
  4480  001414  5ADD               	subwfb	postdec2,f,c
  4481                           
  4482                           ;UART.c: 87: } else {
  4483  001416  D002               	goto	l726
  4484  001418                     l3289:
  4485                           
  4486                           ;UART.c: 88: c = 0;
  4487  001418  0E00               	movlw	0
  4488  00141A  6E25               	movwf	UART_buff_get@c,c
  4489  00141C                     l726:
  4490                           
  4491                           ;UART.c: 89: }
  4492                           ;UART.c: 90: return (c);
  4493  00141C  5025               	movf	UART_buff_get@c,w,c
  4494  00141E  0012               	return	
  4495  001420  0012               	return		;funcret
  4496  001422                     __end_of_UART_buff_get:
  4497                           	opt stack 0
  4498                           tosu	equ	0xFFF
  4499                           tosh	equ	0xFFE
  4500                           tosl	equ	0xFFD
  4501                           pclath	equ	0xFFA
  4502                           tblptru	equ	0xFF8
  4503                           tblptrh	equ	0xFF7
  4504                           tblptrl	equ	0xFF6
  4505                           tablat	equ	0xFF5
  4506                           prodh	equ	0xFF4
  4507                           prodl	equ	0xFF3
  4508                           intcon	equ	0xFF2
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           indf2	equ	0xFDF
  4512                           postinc2	equ	0xFDE
  4513                           postdec2	equ	0xFDD
  4514                           plusw2	equ	0xFDB
  4515                           fsr2h	equ	0xFDA
  4516                           fsr2l	equ	0xFD9
  4517                           status	equ	0xFD8
  4518                           
  4519 ;; *************** function _UART_buff_modulo_inc *****************
  4520 ;; Defined at:
  4521 ;;		line 106 in file "UART.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;  value           2   26[COMRAM] const unsigned int 
  4524 ;;  modulus         2   28[COMRAM] const unsigned int 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  my_value        2   30[COMRAM] unsigned int 
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  2   26[COMRAM] unsigned int 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2, status,0
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4536 ;;      Params:         4       0       0       0       0       0       0
  4537 ;;      Locals:         2       0       0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0
  4539 ;;      Totals:         6       0       0       0       0       0       0
  4540 ;;Total ram usage:        6 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    4
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_UART_buff_put
  4547 ;;		_UART_buff_get
  4548 ;; This function uses a non-reentrant model
  4549 ;;
  4550                           
  4551                           	psect	text19
  4552  001A40                     __ptext19:
  4553                           	opt stack 0
  4554  001A40                     _UART_buff_modulo_inc:
  4555                           	opt stack 21
  4556                           
  4557                           ;UART.c: 107: unsigned int my_value = value + 1;
  4558                           
  4559                           ;incstack = 0
  4560  001A40  0E01               	movlw	1
  4561  001A42  241B               	addwf	UART_buff_modulo_inc@value,w,c
  4562  001A44  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4563  001A46  0E00               	movlw	0
  4564  001A48  201C               	addwfc	UART_buff_modulo_inc@value+1,w,c
  4565  001A4A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4566                           
  4567                           ;UART.c: 108: if (my_value >= modulus) {
  4568  001A4C  501D               	movf	UART_buff_modulo_inc@modulus,w,c
  4569  001A4E  5C1F               	subwf	UART_buff_modulo_inc@my_value,w,c
  4570  001A50  501E               	movf	UART_buff_modulo_inc@modulus+1,w,c
  4571  001A52  5820               	subwfb	UART_buff_modulo_inc@my_value+1,w,c
  4572  001A54  A0D8               	btfss	status,0,c
  4573  001A56  D005               	goto	l3255
  4574                           
  4575                           ;UART.c: 109: my_value = 0;
  4576  001A58  0E00               	movlw	0
  4577  001A5A  6E20               	movwf	UART_buff_modulo_inc@my_value+1,c
  4578  001A5C  0E00               	movlw	0
  4579  001A5E  6E1F               	movwf	UART_buff_modulo_inc@my_value,c
  4580  001A60  D000               	goto	l3255
  4581  001A62                     l3255:
  4582                           
  4583                           ;UART.c: 110: }
  4584                           ;UART.c: 111: return (my_value);
  4585  001A62  C01F  F01B         	movff	UART_buff_modulo_inc@my_value,?_UART_buff_modulo_inc
  4586  001A66  C020  F01C         	movff	UART_buff_modulo_inc@my_value+1,?_UART_buff_modulo_inc+1
  4587  001A6A  0012               	return	
  4588  001A6C  0012               	return		;funcret
  4589  001A6E                     __end_of_UART_buff_modulo_inc:
  4590                           	opt stack 0
  4591                           tosu	equ	0xFFF
  4592                           tosh	equ	0xFFE
  4593                           tosl	equ	0xFFD
  4594                           pclath	equ	0xFFA
  4595                           tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           postinc0	equ	0xFEE
  4603                           wreg	equ	0xFE8
  4604                           indf2	equ	0xFDF
  4605                           postinc2	equ	0xFDE
  4606                           postdec2	equ	0xFDD
  4607                           plusw2	equ	0xFDB
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function _Receive_available *****************
  4613 ;; Defined at:
  4614 ;;		line 122 in file "UART.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;		None
  4617 ;; Auto vars:     Size  Location     Type
  4618 ;;		None
  4619 ;; Return value:  Size  Location     Type
  4620 ;;                  2   28[COMRAM] int 
  4621 ;; Registers used:
  4622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4623 ;; Tracked objects:
  4624 ;;		On entry : 0/0
  4625 ;;		On exit  : 0/0
  4626 ;;		Unchanged: 0/0
  4627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4628 ;;      Params:         2       0       0       0       0       0       0
  4629 ;;      Locals:         0       0       0       0       0       0       0
  4630 ;;      Temps:          0       0       0       0       0       0       0
  4631 ;;      Totals:         2       0       0       0       0       0       0
  4632 ;;Total ram usage:        2 bytes
  4633 ;; Hardware stack levels used:    1
  4634 ;; Hardware stack levels required when called:    5
  4635 ;; This function calls:
  4636 ;;		_UART_buff_size
  4637 ;; This function is called by:
  4638 ;;		_SYSTEM_Initialize
  4639 ;;		_CRCcheck
  4640 ;;		_receiveData
  4641 ;; This function uses a non-reentrant model
  4642 ;;
  4643                           
  4644                           	psect	text20
  4645  001B62                     __ptext20:
  4646                           	opt stack 0
  4647  001B62                     _Receive_available:
  4648                           	opt stack 23
  4649                           
  4650                           ;UART.c: 123: return UART_buff_size(&input_buffer);
  4651                           
  4652                           ;incstack = 0
  4653  001B62  0E00               	movlw	low _input_buffer
  4654  001B64  6E1B               	movwf	UART_buff_size@_this,c
  4655  001B66  0E03               	movlw	high _input_buffer
  4656  001B68  6E1C               	movwf	UART_buff_size@_this+1,c
  4657  001B6A  ECBD  F00D         	call	_UART_buff_size	;wreg free
  4658  001B6E  C01B  F01D         	movff	?_UART_buff_size,?_Receive_available
  4659  001B72  C01C  F01E         	movff	?_UART_buff_size+1,?_Receive_available+1
  4660  001B76  0012               	return	
  4661  001B78  0012               	return		;funcret
  4662  001B7A                     __end_of_Receive_available:
  4663                           	opt stack 0
  4664                           tosu	equ	0xFFF
  4665                           tosh	equ	0xFFE
  4666                           tosl	equ	0xFFD
  4667                           pclath	equ	0xFFA
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           postinc0	equ	0xFEE
  4676                           wreg	equ	0xFE8
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           plusw2	equ	0xFDB
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _UART_buff_size *****************
  4686 ;; Defined at:
  4687 ;;		line 102 in file "UART.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  _this           2   26[COMRAM] PTR struct UART_ring_buf
  4690 ;;		 -> output_buffer(206), input_buffer(206), 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  2   26[COMRAM] int 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4702 ;;      Params:         2       0       0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0
  4704 ;;      Temps:          0       0       0       0       0       0       0
  4705 ;;      Totals:         2       0       0       0       0       0       0
  4706 ;;Total ram usage:        2 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; Hardware stack levels required when called:    4
  4709 ;; This function calls:
  4710 ;;		Nothing
  4711 ;; This function is called by:
  4712 ;;		_Receive_available
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text21
  4717  001B7A                     __ptext21:
  4718                           	opt stack 0
  4719  001B7A                     _UART_buff_size:
  4720                           	opt stack 23
  4721                           
  4722                           ;UART.c: 103: return (_this->count);
  4723                           
  4724                           ;incstack = 0
  4725  001B7A  EE20 F0CC          	lfsr	2,204
  4726  001B7E  501B               	movf	UART_buff_size@_this,w,c
  4727  001B80  26D9               	addwf	fsr2l,f,c
  4728  001B82  501C               	movf	UART_buff_size@_this+1,w,c
  4729  001B84  22DA               	addwfc	fsr2h,f,c
  4730  001B86  CFDE F01B          	movff	postinc2,?_UART_buff_size
  4731  001B8A  CFDD F01C          	movff	postdec2,?_UART_buff_size+1
  4732  001B8E  0012               	return	
  4733  001B90  0012               	return		;funcret
  4734  001B92                     __end_of_UART_buff_size:
  4735                           	opt stack 0
  4736                           tosu	equ	0xFFF
  4737                           tosh	equ	0xFFE
  4738                           tosl	equ	0xFFD
  4739                           pclath	equ	0xFFA
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           postinc0	equ	0xFEE
  4748                           wreg	equ	0xFE8
  4749                           indf2	equ	0xFDF
  4750                           postinc2	equ	0xFDE
  4751                           postdec2	equ	0xFDD
  4752                           plusw2	equ	0xFDB
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function _CRC8 *****************
  4758 ;; Defined at:
  4759 ;;		line 34 in file "FastTransfer.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  data            2   26[COMRAM] PTR const unsigned char 
  4762 ;;		 -> NULL(0), CRCcheck@arrayHolder(3), receiveData@holder_1345(3), receiveData@holder(3), 
  4763 ;;		 -> rx_buffer(200), ring_buffer(206), 
  4764 ;;  len             1   28[COMRAM] unsigned char 
  4765 ;; Auto vars:     Size  Location     Type
  4766 ;;  sum             1   29[COMRAM] unsigned char 
  4767 ;;  tempI           1   31[COMRAM] unsigned char 
  4768 ;;  extract         1   30[COMRAM] unsigned char 
  4769 ;;  crc             1   32[COMRAM] unsigned char 
  4770 ;; Return value:  Size  Location     Type
  4771 ;;                  1    wreg      unsigned char 
  4772 ;; Registers used:
  4773 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4774 ;; Tracked objects:
  4775 ;;		On entry : 0/0
  4776 ;;		On exit  : 0/0
  4777 ;;		Unchanged: 0/0
  4778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4779 ;;      Params:         3       0       0       0       0       0       0
  4780 ;;      Locals:         4       0       0       0       0       0       0
  4781 ;;      Temps:          0       0       0       0       0       0       0
  4782 ;;      Totals:         7       0       0       0       0       0       0
  4783 ;;Total ram usage:        7 bytes
  4784 ;; Hardware stack levels used:    1
  4785 ;; Hardware stack levels required when called:    4
  4786 ;; This function calls:
  4787 ;;		Nothing
  4788 ;; This function is called by:
  4789 ;;		_sendData
  4790 ;;		_receiveData
  4791 ;;		_CRCcheck
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           	psect	text22
  4796  0017DC                     __ptext22:
  4797                           	opt stack 0
  4798  0017DC                     _CRC8:
  4799                           	opt stack 23
  4800                           
  4801                           ;FastTransfer.c: 35: unsigned char crc = 0x00;
  4802                           
  4803                           ;incstack = 0
  4804  0017DC  0E00               	movlw	0
  4805  0017DE  6E21               	movwf	CRC8@crc,c
  4806                           
  4807                           ;FastTransfer.c: 36: while (len--) {
  4808  0017E0  D01F               	goto	l3317
  4809  0017E2                     l3301:
  4810                           
  4811                           ;FastTransfer.c: 37: unsigned char extract = *data++;
  4812  0017E2  C01B  FFD9         	movff	CRC8@data,fsr2l
  4813  0017E6  C01C  FFDA         	movff	CRC8@data+1,fsr2h
  4814  0017EA  50DF               	movf	indf2,w,c
  4815  0017EC  6E1F               	movwf	CRC8@extract,c
  4816  0017EE  4A1B               	infsnz	CRC8@data,f,c
  4817  0017F0  2A1C               	incf	CRC8@data+1,f,c
  4818                           
  4819                           ;FastTransfer.c: 38: unsigned char tempI;
  4820                           ;FastTransfer.c: 39: for (tempI = 8; tempI; tempI--) {
  4821  0017F2  0E08               	movlw	8
  4822  0017F4  6E20               	movwf	CRC8@tempI,c
  4823  0017F6  D00F               	goto	l3315
  4824  0017F8                     l3307:
  4825                           
  4826                           ;FastTransfer.c: 40: unsigned char sum = (crc ^ extract) & 0x01;
  4827  0017F8  5021               	movf	CRC8@crc,w,c
  4828  0017FA  181F               	xorwf	CRC8@extract,w,c
  4829  0017FC  0B01               	andlw	1
  4830  0017FE  6E1E               	movwf	CRC8@sum,c
  4831                           
  4832                           ;FastTransfer.c: 41: crc >>= 1;
  4833  001800  90D8               	bcf	status,0,c
  4834  001802  3221               	rrcf	CRC8@crc,f,c
  4835                           
  4836                           ;FastTransfer.c: 42: if (sum) {
  4837  001804  501E               	movf	CRC8@sum,w,c
  4838  001806  B4D8               	btfsc	status,2,c
  4839  001808  D002               	goto	l516
  4840                           
  4841                           ;FastTransfer.c: 43: crc ^= 0x8C;
  4842  00180A  0E8C               	movlw	140
  4843  00180C  1A21               	xorwf	CRC8@crc,f,c
  4844  00180E                     l516:
  4845                           
  4846                           ;FastTransfer.c: 44: }
  4847                           ;FastTransfer.c: 45: extract >>= 1;
  4848  00180E  90D8               	bcf	status,0,c
  4849  001810  321F               	rrcf	CRC8@extract,f,c
  4850  001812  0620               	decf	CRC8@tempI,f,c
  4851  001814  D000               	goto	l3315
  4852  001816                     l3315:
  4853  001816  5020               	movf	CRC8@tempI,w,c
  4854  001818  B4D8               	btfsc	status,2,c
  4855  00181A  D002               	goto	l3317
  4856  00181C  D7ED               	goto	l3307
  4857  00181E  D000               	goto	l3317
  4858  001820                     l3317:
  4859  001820  061D               	decf	CRC8@len,f,c
  4860  001822  281D               	incf	CRC8@len,w,c
  4861  001824  A4D8               	btfss	status,2,c
  4862  001826  D7DD               	goto	l3301
  4863                           
  4864                           ;FastTransfer.c: 46: }
  4865                           ;FastTransfer.c: 47: }
  4866                           ;FastTransfer.c: 48: return crc;
  4867  001828  5021               	movf	CRC8@crc,w,c
  4868  00182A  0012               	return	
  4869  00182C  0012               	return		;funcret
  4870  00182E                     __end_of_CRC8:
  4871                           	opt stack 0
  4872                           tosu	equ	0xFFF
  4873                           tosh	equ	0xFFE
  4874                           tosl	equ	0xFFD
  4875                           pclath	equ	0xFFA
  4876                           tblptru	equ	0xFF8
  4877                           tblptrh	equ	0xFF7
  4878                           tblptrl	equ	0xFF6
  4879                           tablat	equ	0xFF5
  4880                           prodh	equ	0xFF4
  4881                           prodl	equ	0xFF3
  4882                           intcon	equ	0xFF2
  4883                           postinc0	equ	0xFEE
  4884                           wreg	equ	0xFE8
  4885                           indf2	equ	0xFDF
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _processPowerRequest *****************
  4894 ;; Defined at:
  4895 ;;		line 33 in file "Communications.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  powerSet        2    0[BANK1 ] int 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;		None
  4900 ;; Return value:  Size  Location     Type
  4901 ;;		None               void
  4902 ;; Registers used:
  4903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4909 ;;      Params:         0       0       2       0       0       0       0
  4910 ;;      Locals:         0       0       0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0
  4912 ;;      Totals:         0       0       2       0       0       0       0
  4913 ;;Total ram usage:        2 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    6
  4916 ;; This function calls:
  4917 ;;		_EnableSlavePower
  4918 ;;		_Update
  4919 ;; This function is called by:
  4920 ;;		_updateComms
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text23
  4925  001236                     __ptext23:
  4926                           	opt stack 0
  4927  001236                     _processPowerRequest:
  4928                           	opt stack 23
  4929                           
  4930                           ;Communications.c: 35: if (powerSet & 0x01) EnableSlavePower(BMM, ON);
  4931                           
  4932                           ;incstack = 0
  4933  001236  0101               	movlb	1	; () banked
  4934  001238  A1CE               	btfss	processPowerRequest@powerSet& (0+255),0,b
  4935  00123A  D008               	goto	l3691
  4936                           
  4937                           ; BSR set to: 1
  4938  00123C  0E00               	movlw	0
  4939  00123E  6E26               	movwf	EnableSlavePower@onof+1,c
  4940  001240  0E01               	movlw	1
  4941  001242  6E25               	movwf	EnableSlavePower@onof,c
  4942  001244  0E04               	movlw	4
  4943  001246  EC5D  F007         	call	_EnableSlavePower
  4944  00124A  D008               	goto	l3693
  4945  00124C                     l3691:
  4946                           
  4947                           ;Communications.c: 36: else EnableSlavePower(BMM, OFF);
  4948  00124C  0E00               	movlw	0
  4949  00124E  6E26               	movwf	EnableSlavePower@onof+1,c
  4950  001250  0E00               	movlw	0
  4951  001252  6E25               	movwf	EnableSlavePower@onof,c
  4952  001254  0E04               	movlw	4
  4953  001256  EC5D  F007         	call	_EnableSlavePower
  4954  00125A  D000               	goto	l3693
  4955  00125C                     l3693:
  4956                           
  4957                           ;Communications.c: 37: if (powerSet & 0x02) EnableSlavePower(MCS, ON);
  4958  00125C  0101               	movlb	1	; () banked
  4959  00125E  A3CE               	btfss	processPowerRequest@powerSet& (0+255),1,b
  4960  001260  D008               	goto	l3697
  4961                           
  4962                           ; BSR set to: 1
  4963  001262  0E00               	movlw	0
  4964  001264  6E26               	movwf	EnableSlavePower@onof+1,c
  4965  001266  0E01               	movlw	1
  4966  001268  6E25               	movwf	EnableSlavePower@onof,c
  4967  00126A  0E02               	movlw	2
  4968  00126C  EC5D  F007         	call	_EnableSlavePower
  4969  001270  D008               	goto	l3699
  4970  001272                     l3697:
  4971                           
  4972                           ;Communications.c: 38: else EnableSlavePower(MCS,OFF);
  4973  001272  0E00               	movlw	0
  4974  001274  6E26               	movwf	EnableSlavePower@onof+1,c
  4975  001276  0E00               	movlw	0
  4976  001278  6E25               	movwf	EnableSlavePower@onof,c
  4977  00127A  0E02               	movlw	2
  4978  00127C  EC5D  F007         	call	_EnableSlavePower
  4979  001280  D000               	goto	l3699
  4980  001282                     l3699:
  4981                           
  4982                           ;Communications.c: 39: if (powerSet & 0x04) EnableSlavePower(DDS,ON);
  4983  001282  0101               	movlb	1	; () banked
  4984  001284  A5CE               	btfss	processPowerRequest@powerSet& (0+255),2,b
  4985  001286  D008               	goto	l3703
  4986                           
  4987                           ; BSR set to: 1
  4988  001288  0E00               	movlw	0
  4989  00128A  6E26               	movwf	EnableSlavePower@onof+1,c
  4990  00128C  0E01               	movlw	1
  4991  00128E  6E25               	movwf	EnableSlavePower@onof,c
  4992  001290  0E01               	movlw	1
  4993  001292  EC5D  F007         	call	_EnableSlavePower
  4994  001296  D008               	goto	l3705
  4995  001298                     l3703:
  4996                           
  4997                           ;Communications.c: 40: else EnableSlavePower(DDS,OFF);
  4998  001298  0E00               	movlw	0
  4999  00129A  6E26               	movwf	EnableSlavePower@onof+1,c
  5000  00129C  0E00               	movlw	0
  5001  00129E  6E25               	movwf	EnableSlavePower@onof,c
  5002  0012A0  0E01               	movlw	1
  5003  0012A2  EC5D  F007         	call	_EnableSlavePower
  5004  0012A6  D000               	goto	l3705
  5005  0012A8                     l3705:
  5006                           
  5007                           ;Communications.c: 41: if(powerSet & 0x08) EnableSlavePower(SAS,ON);
  5008  0012A8  0101               	movlb	1	; () banked
  5009  0012AA  A7CE               	btfss	processPowerRequest@powerSet& (0+255),3,b
  5010  0012AC  D008               	goto	l3709
  5011                           
  5012                           ; BSR set to: 1
  5013  0012AE  0E00               	movlw	0
  5014  0012B0  6E26               	movwf	EnableSlavePower@onof+1,c
  5015  0012B2  0E01               	movlw	1
  5016  0012B4  6E25               	movwf	EnableSlavePower@onof,c
  5017  0012B6  0E03               	movlw	3
  5018  0012B8  EC5D  F007         	call	_EnableSlavePower
  5019  0012BC  D008               	goto	l3711
  5020  0012BE                     l3709:
  5021                           
  5022                           ;Communications.c: 42: else EnableSlavePower(SAS,OFF);
  5023  0012BE  0E00               	movlw	0
  5024  0012C0  6E26               	movwf	EnableSlavePower@onof+1,c
  5025  0012C2  0E00               	movlw	0
  5026  0012C4  6E25               	movwf	EnableSlavePower@onof,c
  5027  0012C6  0E03               	movlw	3
  5028  0012C8  EC5D  F007         	call	_EnableSlavePower
  5029  0012CC  D000               	goto	l3711
  5030  0012CE                     l3711:
  5031                           
  5032                           ;Communications.c: 43: if(powerSet & 0x10) EnableSlavePower(TSS, ON);
  5033  0012CE  0101               	movlb	1	; () banked
  5034  0012D0  A9CE               	btfss	processPowerRequest@powerSet& (0+255),4,b
  5035  0012D2  D008               	goto	l3715
  5036                           
  5037                           ; BSR set to: 1
  5038  0012D4  0E00               	movlw	0
  5039  0012D6  6E26               	movwf	EnableSlavePower@onof+1,c
  5040  0012D8  0E01               	movlw	1
  5041  0012DA  6E25               	movwf	EnableSlavePower@onof,c
  5042  0012DC  0E05               	movlw	5
  5043  0012DE  EC5D  F007         	call	_EnableSlavePower
  5044  0012E2  D007               	goto	l677
  5045  0012E4                     l3715:
  5046                           
  5047                           ;Communications.c: 44: else EnableSlavePower(TSS,OFF);
  5048  0012E4  0E00               	movlw	0
  5049  0012E6  6E26               	movwf	EnableSlavePower@onof+1,c
  5050  0012E8  0E00               	movlw	0
  5051  0012EA  6E25               	movwf	EnableSlavePower@onof,c
  5052  0012EC  0E05               	movlw	5
  5053  0012EE  EC5D  F007         	call	_EnableSlavePower
  5054  0012F2                     l677:
  5055                           
  5056                           ;Communications.c: 45: Update();
  5057  0012F2  EC08  F00E         	call	_Update	;wreg free
  5058  0012F6  0012               	return		;funcret
  5059  0012F8                     __end_of_processPowerRequest:
  5060                           	opt stack 0
  5061                           tosu	equ	0xFFF
  5062                           tosh	equ	0xFFE
  5063                           tosl	equ	0xFFD
  5064                           pclath	equ	0xFFA
  5065                           tblptru	equ	0xFF8
  5066                           tblptrh	equ	0xFF7
  5067                           tblptrl	equ	0xFF6
  5068                           tablat	equ	0xFF5
  5069                           prodh	equ	0xFF4
  5070                           prodl	equ	0xFF3
  5071                           intcon	equ	0xFF2
  5072                           postinc0	equ	0xFEE
  5073                           wreg	equ	0xFE8
  5074                           indf2	equ	0xFDF
  5075                           postinc2	equ	0xFDE
  5076                           postdec2	equ	0xFDD
  5077                           plusw2	equ	0xFDB
  5078                           fsr2h	equ	0xFDA
  5079                           fsr2l	equ	0xFD9
  5080                           status	equ	0xFD8
  5081                           
  5082 ;; *************** function _SYSTEM_Initialize *****************
  5083 ;; Defined at:
  5084 ;;		line 113 in file "mcc_generated_files/mcc.c"
  5085 ;; Parameters:    Size  Location     Type
  5086 ;;		None
  5087 ;; Auto vars:     Size  Location     Type
  5088 ;;		None
  5089 ;; Return value:  Size  Location     Type
  5090 ;;		None               void
  5091 ;; Registers used:
  5092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 0/0
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5098 ;;      Params:         0       0       0       0       0       0       0
  5099 ;;      Locals:         0       0       0       0       0       0       0
  5100 ;;      Temps:          0       0       0       0       0       0       0
  5101 ;;      Totals:         0       0       0       0       0       0       0
  5102 ;;Total ram usage:        0 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:    7
  5105 ;; This function calls:
  5106 ;;		_ADC_Initialize
  5107 ;;		_EUSART1_Initialize
  5108 ;;		_INTERRUPT_Initialize
  5109 ;;		_OSCILLATOR_Initialize
  5110 ;;		_PIN_MANAGER_Initialize
  5111 ;;		_begin
  5112 ;; This function is called by:
  5113 ;;		_main
  5114 ;; This function uses a non-reentrant model
  5115 ;;
  5116                           
  5117                           	psect	text24
  5118  00159A                     __ptext24:
  5119                           	opt stack 0
  5120  00159A                     _SYSTEM_Initialize:
  5121                           	opt stack 23
  5122                           
  5123                           ;mcc.c: 114: OSCILLATOR_Initialize();
  5124                           
  5125                           ;incstack = 0
  5126  00159A  ECFC  F00D         	call	_OSCILLATOR_Initialize	;wreg free
  5127                           
  5128                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  5129  00159E  EC01  F00B         	call	_PIN_MANAGER_Initialize	;wreg free
  5130                           
  5131                           ;mcc.c: 116: INTERRUPT_Initialize();
  5132  0015A2  EC03  F00E         	call	_INTERRUPT_Initialize	;wreg free
  5133                           
  5134                           ;mcc.c: 117: EUSART1_Initialize();
  5135  0015A6  EC64  F00C         	call	_EUSART1_Initialize	;wreg free
  5136                           
  5137                           ;mcc.c: 118: begin(receiveArray, sizeof (receiveArray), 5, 0, Send_put, Receive_get, Rec
      +                          eive_available, Receive_peek);
  5138  0015AA  0EC6               	movlw	low _receiveArray
  5139  0015AC  0101               	movlb	1	; () banked
  5140  0015AE  6FCE               	movwf	begin@ptr& (0+255),b
  5141  0015B0  0E00               	movlw	high _receiveArray
  5142  0015B2  0101               	movlb	1	; () banked
  5143  0015B4  6FCF               	movwf	(begin@ptr+1)& (0+255),b
  5144  0015B6  0E28               	movlw	40
  5145  0015B8  0101               	movlb	1	; () banked
  5146  0015BA  6FD0               	movwf	begin@maxSize& (0+255),b
  5147  0015BC  0E05               	movlw	5
  5148  0015BE  0101               	movlb	1	; () banked
  5149  0015C0  6FD1               	movwf	begin@givenAddress& (0+255),b
  5150  0015C2  0E00               	movlw	0
  5151  0015C4  0101               	movlb	1	; () banked
  5152  0015C6  6FD2               	movwf	begin@error& (0+255),b
  5153  0015C8  0EE2               	movlw	low _Send_put
  5154  0015CA  0101               	movlb	1	; () banked
  5155  0015CC  6FD3               	movwf	begin@stufftosend& (0+255),b
  5156  0015CE  0E19               	movlw	high _Send_put
  5157  0015D0  0101               	movlb	1	; () banked
  5158  0015D2  6FD4               	movwf	(begin@stufftosend+1)& (0+255),b
  5159  0015D4  0EE8               	movlw	low _Receive_get
  5160  0015D6  0101               	movlb	1	; () banked
  5161  0015D8  6FD5               	movwf	begin@stufftoreceive& (0+255),b
  5162  0015DA  0E1B               	movlw	high _Receive_get
  5163  0015DC  0101               	movlb	1	; () banked
  5164  0015DE  6FD6               	movwf	(begin@stufftoreceive+1)& (0+255),b
  5165  0015E0  0E62               	movlw	low _Receive_available
  5166  0015E2  0101               	movlb	1	; () banked
  5167  0015E4  6FD7               	movwf	begin@stuffavailable& (0+255),b
  5168  0015E6  0E1B               	movlw	high _Receive_available
  5169  0015E8  0101               	movlb	1	; () banked
  5170  0015EA  6FD8               	movwf	(begin@stuffavailable+1)& (0+255),b
  5171  0015EC  0ED8               	movlw	low _Receive_peek
  5172  0015EE  0101               	movlb	1	; () banked
  5173  0015F0  6FD9               	movwf	begin@stuffpeek& (0+255),b
  5174  0015F2  0E1B               	movlw	high _Receive_peek
  5175  0015F4  0101               	movlb	1	; () banked
  5176  0015F6  6FDA               	movwf	(begin@stuffpeek+1)& (0+255),b
  5177  0015F8  EC98  F00B         	call	_begin	;wreg free
  5178                           
  5179                           ;mcc.c: 120: ADC_Initialize();
  5180  0015FC  ECC9  F00D         	call	_ADC_Initialize	;wreg free
  5181  001600  0012               	return		;funcret
  5182  001602                     __end_of_SYSTEM_Initialize:
  5183                           	opt stack 0
  5184                           tosu	equ	0xFFF
  5185                           tosh	equ	0xFFE
  5186                           tosl	equ	0xFFD
  5187                           pclath	equ	0xFFA
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           prodh	equ	0xFF4
  5193                           prodl	equ	0xFF3
  5194                           intcon	equ	0xFF2
  5195                           postinc0	equ	0xFEE
  5196                           wreg	equ	0xFE8
  5197                           indf2	equ	0xFDF
  5198                           postinc2	equ	0xFDE
  5199                           postdec2	equ	0xFDD
  5200                           plusw2	equ	0xFDB
  5201                           fsr2h	equ	0xFDA
  5202                           fsr2l	equ	0xFD9
  5203                           status	equ	0xFD8
  5204                           
  5205 ;; *************** function _begin *****************
  5206 ;; Defined at:
  5207 ;;		line 18 in file "FastTransfer.c"
  5208 ;; Parameters:    Size  Location     Type
  5209 ;;  ptr             2    0[BANK1 ] PTR volatile int 
  5210 ;;		 -> receiveArray(40), 
  5211 ;;  maxSize         1    2[BANK1 ] unsigned char 
  5212 ;;  givenAddress    1    3[BANK1 ] unsigned char 
  5213 ;;  error           1    4[BANK1 ] unsigned char 
  5214 ;;  stufftosend     2    5[BANK1 ] PTR FTN(unsigned char ,)
  5215 ;;		 -> Send_put(0), 
  5216 ;;  stufftorecei    2    7[BANK1 ] PTR FTN()unsigned char 
  5217 ;;		 -> Receive_get(1), 
  5218 ;;  stuffavailab    2    9[BANK1 ] PTR FTN()int 
  5219 ;;		 -> Receive_available(2), 
  5220 ;;  stuffpeek       2   11[BANK1 ] PTR FTN()unsigned char 
  5221 ;;		 -> Receive_peek(1), 
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;		None
  5224 ;; Return value:  Size  Location     Type
  5225 ;;		None               void
  5226 ;; Registers used:
  5227 ;;		wreg, status,2, status,0, cstack
  5228 ;; Tracked objects:
  5229 ;;		On entry : 0/0
  5230 ;;		On exit  : 0/0
  5231 ;;		Unchanged: 0/0
  5232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5233 ;;      Params:         0       0      13       0       0       0       0
  5234 ;;      Locals:         0       0       0       0       0       0       0
  5235 ;;      Temps:          0       0       0       0       0       0       0
  5236 ;;      Totals:         0       0      13       0       0       0       0
  5237 ;;Total ram usage:       13 bytes
  5238 ;; Hardware stack levels used:    1
  5239 ;; Hardware stack levels required when called:    5
  5240 ;; This function calls:
  5241 ;;		___awdiv
  5242 ;; This function is called by:
  5243 ;;		_SYSTEM_Initialize
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text25
  5248  001730                     __ptext25:
  5249                           	opt stack 0
  5250  001730                     _begin:
  5251                           	opt stack 24
  5252                           
  5253                           ;FastTransfer.c: 19: receiveArrayAddress = ptr;
  5254                           
  5255                           ;incstack = 0
  5256  001730  C1CE  F02B         	movff	begin@ptr,_receiveArrayAddress
  5257  001734  C1CF  F02C         	movff	begin@ptr+1,_receiveArrayAddress+1
  5258                           
  5259                           ;FastTransfer.c: 20: moduleAddress = givenAddress;
  5260  001738  C1D1  F03E         	movff	begin@givenAddress,_moduleAddress
  5261                           
  5262                           ;FastTransfer.c: 21: serial_write = stufftosend;
  5263  00173C  C1D3  F035         	movff	begin@stufftosend,_serial_write
  5264  001740  C1D4  F036         	movff	begin@stufftosend+1,_serial_write+1
  5265                           
  5266                           ;FastTransfer.c: 22: serial_available = stuffavailable;
  5267  001744  C1D7  F02F         	movff	begin@stuffavailable,_serial_available
  5268  001748  C1D8  F030         	movff	begin@stuffavailable+1,_serial_available+1
  5269                           
  5270                           ;FastTransfer.c: 23: serial_peek = stuffpeek;
  5271  00174C  C1D9  F031         	movff	begin@stuffpeek,_serial_peek
  5272  001750  C1DA  F032         	movff	begin@stuffpeek+1,_serial_peek+1
  5273                           
  5274                           ;FastTransfer.c: 24: serial_read = stufftoreceive;
  5275  001754  C1D5  F033         	movff	begin@stufftoreceive,_serial_read
  5276  001758  C1D6  F034         	movff	begin@stufftoreceive+1,_serial_read+1
  5277                           
  5278                           ;FastTransfer.c: 25: maxDataAddress = maxSize / 2;
  5279  00175C  C1D0  F01B         	movff	begin@maxSize,___awdiv@dividend
  5280  001760  6A1C               	clrf	___awdiv@dividend+1,c
  5281  001762  0E00               	movlw	0
  5282  001764  6E1E               	movwf	___awdiv@divisor+1,c
  5283  001766  0E02               	movlw	2
  5284  001768  6E1D               	movwf	___awdiv@divisor,c
  5285  00176A  EC7C  F009         	call	___awdiv	;wreg free
  5286  00176E  501B               	movf	?___awdiv,w,c
  5287  001770  6E3D               	movwf	_maxDataAddress,c
  5288                           
  5289                           ;FastTransfer.c: 26: sendStructAddress = (unsigned char*) & ring_buffer;
  5290  001772  0E00               	movlw	low _ring_buffer
  5291  001774  6E2D               	movwf	_sendStructAddress,c
  5292  001776  0E01               	movlw	high _ring_buffer
  5293  001778  6E2E               	movwf	_sendStructAddress+1,c
  5294                           
  5295                           ;FastTransfer.c: 27: AKNAKsend = error;
  5296  00177A  C1D2  F03B         	movff	begin@error,_AKNAKsend
  5297                           
  5298                           ;FastTransfer.c: 28: alignErrorCounter = 0;
  5299  00177E  0E00               	movlw	0
  5300  001780  6E28               	movwf	_alignErrorCounter+1,c
  5301  001782  0E00               	movlw	0
  5302  001784  6E27               	movwf	_alignErrorCounter,c
  5303  001786  0012               	return		;funcret
  5304  001788                     __end_of_begin:
  5305                           	opt stack 0
  5306                           tosu	equ	0xFFF
  5307                           tosh	equ	0xFFE
  5308                           tosl	equ	0xFFD
  5309                           pclath	equ	0xFFA
  5310                           tblptru	equ	0xFF8
  5311                           tblptrh	equ	0xFF7
  5312                           tblptrl	equ	0xFF6
  5313                           tablat	equ	0xFF5
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           intcon	equ	0xFF2
  5317                           postinc0	equ	0xFEE
  5318                           wreg	equ	0xFE8
  5319                           indf2	equ	0xFDF
  5320                           postinc2	equ	0xFDE
  5321                           postdec2	equ	0xFDD
  5322                           plusw2	equ	0xFDB
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function ___awdiv *****************
  5328 ;; Defined at:
  5329 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  dividend        2   26[COMRAM] int 
  5332 ;;  divisor         2   28[COMRAM] int 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  quotient        2   32[COMRAM] int 
  5335 ;;  sign            1   31[COMRAM] unsigned char 
  5336 ;;  counter         1   30[COMRAM] unsigned char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  2   26[COMRAM] int 
  5339 ;; Registers used:
  5340 ;;		wreg, status,2, status,0
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5346 ;;      Params:         4       0       0       0       0       0       0
  5347 ;;      Locals:         4       0       0       0       0       0       0
  5348 ;;      Temps:          0       0       0       0       0       0       0
  5349 ;;      Totals:         8       0       0       0       0       0       0
  5350 ;;Total ram usage:        8 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    4
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_begin
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text26
  5361  0012F8                     __ptext26:
  5362                           	opt stack 0
  5363  0012F8                     ___awdiv:
  5364                           	opt stack 24
  5365                           
  5366                           ;incstack = 0
  5367  0012F8  0E00               	movlw	0
  5368  0012FA  6E20               	movwf	___awdiv@sign,c
  5369  0012FC  AE1E               	btfss	___awdiv@divisor+1,7,c
  5370  0012FE  D007               	goto	l2723
  5371  001300  6C1D               	negf	___awdiv@divisor,c
  5372  001302  1E1E               	comf	___awdiv@divisor+1,f,c
  5373  001304  B0D8               	btfsc	status,0,c
  5374  001306  2A1E               	incf	___awdiv@divisor+1,f,c
  5375  001308  0E01               	movlw	1
  5376  00130A  6E20               	movwf	___awdiv@sign,c
  5377  00130C  D000               	goto	l2723
  5378  00130E                     l2723:
  5379  00130E  AE1C               	btfss	___awdiv@dividend+1,7,c
  5380  001310  D007               	goto	l2729
  5381  001312  6C1B               	negf	___awdiv@dividend,c
  5382  001314  1E1C               	comf	___awdiv@dividend+1,f,c
  5383  001316  B0D8               	btfsc	status,0,c
  5384  001318  2A1C               	incf	___awdiv@dividend+1,f,c
  5385  00131A  0E01               	movlw	1
  5386  00131C  1A20               	xorwf	___awdiv@sign,f,c
  5387  00131E  D000               	goto	l2729
  5388  001320                     l2729:
  5389  001320  0E00               	movlw	0
  5390  001322  6E22               	movwf	___awdiv@quotient+1,c
  5391  001324  0E00               	movlw	0
  5392  001326  6E21               	movwf	___awdiv@quotient,c
  5393  001328  501D               	movf	___awdiv@divisor,w,c
  5394  00132A  101E               	iorwf	___awdiv@divisor+1,w,c
  5395  00132C  B4D8               	btfsc	status,2,c
  5396  00132E  D021               	goto	l2751
  5397  001330  0E01               	movlw	1
  5398  001332  6E1F               	movwf	___awdiv@counter,c
  5399  001334  D005               	goto	l2737
  5400  001336                     l2735:
  5401  001336  90D8               	bcf	status,0,c
  5402  001338  361D               	rlcf	___awdiv@divisor,f,c
  5403  00133A  361E               	rlcf	___awdiv@divisor+1,f,c
  5404  00133C  2A1F               	incf	___awdiv@counter,f,c
  5405  00133E  D000               	goto	l2737
  5406  001340                     l2737:
  5407  001340  BE1E               	btfsc	___awdiv@divisor+1,7,c
  5408  001342  D002               	goto	l2739
  5409  001344  D7F8               	goto	l2735
  5410  001346  D000               	goto	l2739
  5411  001348                     l2739:
  5412  001348  90D8               	bcf	status,0,c
  5413  00134A  3621               	rlcf	___awdiv@quotient,f,c
  5414  00134C  3622               	rlcf	___awdiv@quotient+1,f,c
  5415  00134E  501D               	movf	___awdiv@divisor,w,c
  5416  001350  5C1B               	subwf	___awdiv@dividend,w,c
  5417  001352  501E               	movf	___awdiv@divisor+1,w,c
  5418  001354  581C               	subwfb	___awdiv@dividend+1,w,c
  5419  001356  A0D8               	btfss	status,0,c
  5420  001358  D006               	goto	l2747
  5421  00135A  501D               	movf	___awdiv@divisor,w,c
  5422  00135C  5E1B               	subwf	___awdiv@dividend,f,c
  5423  00135E  501E               	movf	___awdiv@divisor+1,w,c
  5424  001360  5A1C               	subwfb	___awdiv@dividend+1,f,c
  5425  001362  8021               	bsf	___awdiv@quotient,0,c
  5426  001364  D000               	goto	l2747
  5427  001366                     l2747:
  5428  001366  90D8               	bcf	status,0,c
  5429  001368  321E               	rrcf	___awdiv@divisor+1,f,c
  5430  00136A  321D               	rrcf	___awdiv@divisor,f,c
  5431  00136C  2E1F               	decfsz	___awdiv@counter,f,c
  5432  00136E  D7EC               	goto	l2739
  5433  001370  D000               	goto	l2751
  5434  001372                     l2751:
  5435  001372  5020               	movf	___awdiv@sign,w,c
  5436  001374  B4D8               	btfsc	status,2,c
  5437  001376  D005               	goto	l2755
  5438  001378  6C21               	negf	___awdiv@quotient,c
  5439  00137A  1E22               	comf	___awdiv@quotient+1,f,c
  5440  00137C  B0D8               	btfsc	status,0,c
  5441  00137E  2A22               	incf	___awdiv@quotient+1,f,c
  5442  001380  D000               	goto	l2755
  5443  001382                     l2755:
  5444  001382  C021  F01B         	movff	___awdiv@quotient,?___awdiv
  5445  001386  C022  F01C         	movff	___awdiv@quotient+1,?___awdiv+1
  5446  00138A  0012               	return	
  5447  00138C  0012               	return		;funcret
  5448  00138E                     __end_of___awdiv:
  5449                           	opt stack 0
  5450                           tosu	equ	0xFFF
  5451                           tosh	equ	0xFFE
  5452                           tosl	equ	0xFFD
  5453                           pclath	equ	0xFFA
  5454                           tblptru	equ	0xFF8
  5455                           tblptrh	equ	0xFF7
  5456                           tblptrl	equ	0xFF6
  5457                           tablat	equ	0xFF5
  5458                           prodh	equ	0xFF4
  5459                           prodl	equ	0xFF3
  5460                           intcon	equ	0xFF2
  5461                           postinc0	equ	0xFEE
  5462                           wreg	equ	0xFE8
  5463                           indf2	equ	0xFDF
  5464                           postinc2	equ	0xFDE
  5465                           postdec2	equ	0xFDD
  5466                           plusw2	equ	0xFDB
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function _PIN_MANAGER_Initialize *****************
  5472 ;; Defined at:
  5473 ;;		line 50 in file "mcc_generated_files/pin_manager.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;		None
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;		None               void
  5480 ;; Registers used:
  5481 ;;		wreg, status,2
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5487 ;;      Params:         0       0       0       0       0       0       0
  5488 ;;      Locals:         0       0       0       0       0       0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0
  5490 ;;      Totals:         0       0       0       0       0       0       0
  5491 ;;Total ram usage:        0 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; Hardware stack levels required when called:    4
  5494 ;; This function calls:
  5495 ;;		Nothing
  5496 ;; This function is called by:
  5497 ;;		_SYSTEM_Initialize
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text27
  5502  001602                     __ptext27:
  5503                           	opt stack 0
  5504  001602                     _PIN_MANAGER_Initialize:
  5505                           	opt stack 25
  5506                           
  5507                           ;pin_manager.c: 52: LATA = 0x00;
  5508                           
  5509                           ;incstack = 0
  5510  001602  0E00               	movlw	0
  5511  001604  6E89               	movwf	3977,c	;volatile
  5512                           
  5513                           ;pin_manager.c: 53: TRISA = 0xF7;
  5514  001606  0EF7               	movlw	247
  5515  001608  6E92               	movwf	3986,c	;volatile
  5516                           
  5517                           ;pin_manager.c: 54: ANSELA = 0x27;
  5518  00160A  0E27               	movlw	39
  5519  00160C  010F               	movlb	15	; () banked
  5520  00160E  6F38               	movwf	56,b	;volatile
  5521                           
  5522                           ;pin_manager.c: 56: LATB = 0x01;
  5523  001610  0E01               	movlw	1
  5524  001612  6E8A               	movwf	3978,c	;volatile
  5525                           
  5526                           ;pin_manager.c: 57: TRISB = 0xFE;
  5527  001614  0EFE               	movlw	254
  5528  001616  6E93               	movwf	3987,c	;volatile
  5529                           
  5530                           ;pin_manager.c: 58: ANSELB = 0x3E;
  5531  001618  0E3E               	movlw	62
  5532  00161A  010F               	movlb	15	; () banked
  5533  00161C  6F39               	movwf	57,b	;volatile
  5534                           
  5535                           ;pin_manager.c: 59: WPUB = 0x00;
  5536  00161E  0E00               	movlw	0
  5537  001620  6E61               	movwf	3937,c	;volatile
  5538                           
  5539                           ;pin_manager.c: 61: LATC = 0x00;
  5540  001622  0E00               	movlw	0
  5541  001624  6E8B               	movwf	3979,c	;volatile
  5542                           
  5543                           ;pin_manager.c: 62: TRISC = 0xDF;
  5544  001626  0EDF               	movlw	223
  5545  001628  6E94               	movwf	3988,c	;volatile
  5546                           
  5547                           ;pin_manager.c: 63: ANSELC = 0x1C;
  5548  00162A  0E1C               	movlw	28
  5549  00162C  010F               	movlb	15	; () banked
  5550  00162E  6F3A               	movwf	58,b	;volatile
  5551                           
  5552                           ;pin_manager.c: 65: LATD = 0x00;
  5553  001630  0E00               	movlw	0
  5554  001632  6E8C               	movwf	3980,c	;volatile
  5555                           
  5556                           ;pin_manager.c: 66: TRISD = 0x0F;
  5557  001634  0E0F               	movlw	15
  5558  001636  6E95               	movwf	3989,c	;volatile
  5559                           
  5560                           ;pin_manager.c: 67: ANSELD = 0x0F;
  5561  001638  0E0F               	movlw	15
  5562  00163A  010F               	movlb	15	; () banked
  5563  00163C  6F3B               	movwf	59,b	;volatile
  5564                           
  5565                           ;pin_manager.c: 69: LATE = 0x00;
  5566  00163E  0E00               	movlw	0
  5567  001640  6E8D               	movwf	3981,c	;volatile
  5568                           
  5569                           ;pin_manager.c: 70: TRISE = 0x07;
  5570  001642  0E07               	movlw	7
  5571  001644  6E96               	movwf	3990,c	;volatile
  5572                           
  5573                           ;pin_manager.c: 71: ANSELE = 0x07;
  5574  001646  0E07               	movlw	7
  5575  001648  010F               	movlb	15	; () banked
  5576  00164A  6F3C               	movwf	60,b	;volatile
  5577                           
  5578                           ; BSR set to: 15
  5579                           ;pin_manager.c: 72: TRISCbits.RC6 = 1;
  5580  00164C  8C94               	bsf	3988,6,c	;volatile
  5581                           
  5582                           ; BSR set to: 15
  5583                           ;pin_manager.c: 73: TRISCbits.RC7 = 1;
  5584  00164E  8E94               	bsf	3988,7,c	;volatile
  5585                           
  5586                           ; BSR set to: 15
  5587                           ;pin_manager.c: 74: TRISCbits.RC5 = 0;
  5588  001650  9A94               	bcf	3988,5,c	;volatile
  5589                           
  5590                           ; BSR set to: 15
  5591                           ;pin_manager.c: 75: LATCbits.LATC5 = 1;
  5592  001652  8A8B               	bsf	3979,5,c	;volatile
  5593                           
  5594                           ; BSR set to: 15
  5595                           ;pin_manager.c: 76: LATCbits.LATC6 = 1;
  5596  001654  8C8B               	bsf	3979,6,c	;volatile
  5597                           
  5598                           ; BSR set to: 15
  5599                           ;pin_manager.c: 77: LATCbits.LATC7 = 1;
  5600  001656  8E8B               	bsf	3979,7,c	;volatile
  5601                           
  5602                           ; BSR set to: 15
  5603                           ;pin_manager.c: 78: ANSELCbits.ANSC5 =0;
  5604  001658  010F               	movlb	15	; () banked
  5605  00165A  9B3A               	bcf	58,5,b	;volatile
  5606                           
  5607                           ; BSR set to: 15
  5608                           ;pin_manager.c: 79: ANSELCbits.ANSC6 =0;
  5609  00165C  010F               	movlb	15	; () banked
  5610  00165E  9D3A               	bcf	58,6,b	;volatile
  5611                           
  5612                           ; BSR set to: 15
  5613                           ;pin_manager.c: 80: ANSELCbits.ANSC7 =0;
  5614  001660  010F               	movlb	15	; () banked
  5615  001662  9F3A               	bcf	58,7,b	;volatile
  5616                           
  5617                           ; BSR set to: 15
  5618                           ;pin_manager.c: 82: INTCON2bits.nRBPU = 0x01;
  5619  001664  8EF1               	bsf	intcon2,7,c	;volatile
  5620                           
  5621                           ; BSR set to: 15
  5622  001666  0012               	return		;funcret
  5623  001668                     __end_of_PIN_MANAGER_Initialize:
  5624                           	opt stack 0
  5625                           tosu	equ	0xFFF
  5626                           tosh	equ	0xFFE
  5627                           tosl	equ	0xFFD
  5628                           pclath	equ	0xFFA
  5629                           tblptru	equ	0xFF8
  5630                           tblptrh	equ	0xFF7
  5631                           tblptrl	equ	0xFF6
  5632                           tablat	equ	0xFF5
  5633                           prodh	equ	0xFF4
  5634                           prodl	equ	0xFF3
  5635                           intcon	equ	0xFF2
  5636                           intcon2	equ	0xFF1
  5637                           postinc0	equ	0xFEE
  5638                           wreg	equ	0xFE8
  5639                           indf2	equ	0xFDF
  5640                           postinc2	equ	0xFDE
  5641                           postdec2	equ	0xFDD
  5642                           plusw2	equ	0xFDB
  5643                           fsr2h	equ	0xFDA
  5644                           fsr2l	equ	0xFD9
  5645                           status	equ	0xFD8
  5646                           
  5647 ;; *************** function _OSCILLATOR_Initialize *****************
  5648 ;; Defined at:
  5649 ;;		line 123 in file "mcc_generated_files/mcc.c"
  5650 ;; Parameters:    Size  Location     Type
  5651 ;;		None
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;		None
  5654 ;; Return value:  Size  Location     Type
  5655 ;;		None               void
  5656 ;; Registers used:
  5657 ;;		wreg, status,2
  5658 ;; Tracked objects:
  5659 ;;		On entry : 0/0
  5660 ;;		On exit  : 0/0
  5661 ;;		Unchanged: 0/0
  5662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5663 ;;      Params:         0       0       0       0       0       0       0
  5664 ;;      Locals:         0       0       0       0       0       0       0
  5665 ;;      Temps:          0       0       0       0       0       0       0
  5666 ;;      Totals:         0       0       0       0       0       0       0
  5667 ;;Total ram usage:        0 bytes
  5668 ;; Hardware stack levels used:    1
  5669 ;; Hardware stack levels required when called:    4
  5670 ;; This function calls:
  5671 ;;		Nothing
  5672 ;; This function is called by:
  5673 ;;		_SYSTEM_Initialize
  5674 ;; This function uses a non-reentrant model
  5675 ;;
  5676                           
  5677                           	psect	text28
  5678  001BF8                     __ptext28:
  5679                           	opt stack 0
  5680  001BF8                     _OSCILLATOR_Initialize:
  5681                           	opt stack 25
  5682                           
  5683                           ;mcc.c: 125: OSCCON = 0x60;
  5684                           
  5685                           ; BSR set to: 15
  5686                           ;incstack = 0
  5687  001BF8  0E60               	movlw	96
  5688  001BFA  6ED3               	movwf	4051,c	;volatile
  5689                           
  5690                           ;mcc.c: 127: OSCCON2 = 0x04;
  5691  001BFC  0E04               	movlw	4
  5692  001BFE  6ED2               	movwf	4050,c	;volatile
  5693                           
  5694                           ;mcc.c: 129: OSCTUNE = 0x00;
  5695  001C00  0E00               	movlw	0
  5696  001C02  6E9B               	movwf	3995,c	;volatile
  5697  001C04  0012               	return		;funcret
  5698  001C06                     __end_of_OSCILLATOR_Initialize:
  5699                           	opt stack 0
  5700                           tosu	equ	0xFFF
  5701                           tosh	equ	0xFFE
  5702                           tosl	equ	0xFFD
  5703                           pclath	equ	0xFFA
  5704                           tblptru	equ	0xFF8
  5705                           tblptrh	equ	0xFF7
  5706                           tblptrl	equ	0xFF6
  5707                           tablat	equ	0xFF5
  5708                           prodh	equ	0xFF4
  5709                           prodl	equ	0xFF3
  5710                           intcon	equ	0xFF2
  5711                           intcon2	equ	0xFF1
  5712                           postinc0	equ	0xFEE
  5713                           wreg	equ	0xFE8
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           plusw2	equ	0xFDB
  5718                           fsr2h	equ	0xFDA
  5719                           fsr2l	equ	0xFD9
  5720                           status	equ	0xFD8
  5721                           
  5722 ;; *************** function _INTERRUPT_Initialize *****************
  5723 ;; Defined at:
  5724 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;		None               void
  5731 ;; Registers used:
  5732 ;;		None
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5738 ;;      Params:         0       0       0       0       0       0       0
  5739 ;;      Locals:         0       0       0       0       0       0       0
  5740 ;;      Temps:          0       0       0       0       0       0       0
  5741 ;;      Totals:         0       0       0       0       0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    4
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_SYSTEM_Initialize
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text29
  5753  001C06                     __ptext29:
  5754                           	opt stack 0
  5755  001C06                     _INTERRUPT_Initialize:
  5756                           	opt stack 25
  5757                           
  5758                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5759                           
  5760                           ;incstack = 0
  5761  001C06  9ED0               	bcf	4048,7,c	;volatile
  5762                           
  5763                           ;interrupt_manager.c: 60: IPR1bits.RC1IP = 0;
  5764  001C08  9A9F               	bcf	3999,5,c	;volatile
  5765                           
  5766                           ;interrupt_manager.c: 62: IPR1bits.TX1IP = 0;
  5767  001C0A  989F               	bcf	3999,4,c	;volatile
  5768                           
  5769                           ;interrupt_manager.c: 64: IPR1bits.ADIP = 0;
  5770  001C0C  9C9F               	bcf	3999,6,c	;volatile
  5771  001C0E  0012               	return		;funcret
  5772  001C10                     __end_of_INTERRUPT_Initialize:
  5773                           	opt stack 0
  5774                           tosu	equ	0xFFF
  5775                           tosh	equ	0xFFE
  5776                           tosl	equ	0xFFD
  5777                           pclath	equ	0xFFA
  5778                           tblptru	equ	0xFF8
  5779                           tblptrh	equ	0xFF7
  5780                           tblptrl	equ	0xFF6
  5781                           tablat	equ	0xFF5
  5782                           prodh	equ	0xFF4
  5783                           prodl	equ	0xFF3
  5784                           intcon	equ	0xFF2
  5785                           intcon2	equ	0xFF1
  5786                           postinc0	equ	0xFEE
  5787                           wreg	equ	0xFE8
  5788                           indf2	equ	0xFDF
  5789                           postinc2	equ	0xFDE
  5790                           postdec2	equ	0xFDD
  5791                           plusw2	equ	0xFDB
  5792                           fsr2h	equ	0xFDA
  5793                           fsr2l	equ	0xFD9
  5794                           status	equ	0xFD8
  5795                           
  5796 ;; *************** function _EUSART1_Initialize *****************
  5797 ;; Defined at:
  5798 ;;		line 21 in file "UART.c"
  5799 ;; Parameters:    Size  Location     Type
  5800 ;;		None
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;		None
  5803 ;; Return value:  Size  Location     Type
  5804 ;;		None               void
  5805 ;; Registers used:
  5806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5807 ;; Tracked objects:
  5808 ;;		On entry : 0/0
  5809 ;;		On exit  : 0/0
  5810 ;;		Unchanged: 0/0
  5811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5812 ;;      Params:         0       0       0       0       0       0       0
  5813 ;;      Locals:         0       0       0       0       0       0       0
  5814 ;;      Temps:          0       0       0       0       0       0       0
  5815 ;;      Totals:         0       0       0       0       0       0       0
  5816 ;;Total ram usage:        0 bytes
  5817 ;; Hardware stack levels used:    1
  5818 ;; Hardware stack levels required when called:    6
  5819 ;; This function calls:
  5820 ;;		_UART_buff_init
  5821 ;; This function is called by:
  5822 ;;		_SYSTEM_Initialize
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text30
  5827  0018C8                     __ptext30:
  5828                           	opt stack 0
  5829  0018C8                     _EUSART1_Initialize:
  5830                           	opt stack 23
  5831                           
  5832                           ;UART.c: 23: PIE1bits.RC1IE = 0;
  5833                           
  5834                           ;incstack = 0
  5835  0018C8  9A9D               	bcf	3997,5,c	;volatile
  5836                           
  5837                           ;UART.c: 24: PIE1bits.TX1IE = 0;
  5838  0018CA  989D               	bcf	3997,4,c	;volatile
  5839                           
  5840                           ;UART.c: 29: BAUD1CON = 0x48;
  5841  0018CC  0E48               	movlw	72
  5842  0018CE  6EB8               	movwf	4024,c	;volatile
  5843                           
  5844                           ;UART.c: 32: RC1STA = 0x98;
  5845  0018D0  0E98               	movlw	152
  5846  0018D2  6EAB               	movwf	4011,c	;volatile
  5847                           
  5848                           ;UART.c: 35: TX1STA = 0x26;
  5849  0018D4  0E26               	movlw	38
  5850  0018D6  6EAC               	movwf	4012,c	;volatile
  5851                           
  5852                           ;UART.c: 38: SPBRG1 = (((8000000/38400)/4)-1);
  5853  0018D8  0E33               	movlw	51
  5854  0018DA  6EAF               	movwf	4015,c	;volatile
  5855                           
  5856                           ;UART.c: 41: SPBRGH1 = 0x00;
  5857  0018DC  0E00               	movlw	0
  5858  0018DE  6EB0               	movwf	4016,c	;volatile
  5859                           
  5860                           ;UART.c: 44: TXREG1 = 0x00;
  5861  0018E0  0E00               	movlw	0
  5862  0018E2  6EAD               	movwf	4013,c	;volatile
  5863                           
  5864                           ;UART.c: 47: RCREG1 = 0x00;
  5865  0018E4  0E00               	movlw	0
  5866  0018E6  6EAE               	movwf	4014,c	;volatile
  5867                           
  5868                           ;UART.c: 49: UART_buff_init(&input_buffer);
  5869  0018E8  0E00               	movlw	low _input_buffer
  5870  0018EA  6E23               	movwf	UART_buff_init@_this,c
  5871  0018EC  0E03               	movlw	high _input_buffer
  5872  0018EE  6E24               	movwf	UART_buff_init@_this+1,c
  5873  0018F0  EC78  F00D         	call	_UART_buff_init	;wreg free
  5874                           
  5875                           ;UART.c: 50: UART_buff_init(&output_buffer);
  5876  0018F4  0E00               	movlw	low _output_buffer
  5877  0018F6  6E23               	movwf	UART_buff_init@_this,c
  5878  0018F8  0E04               	movlw	high _output_buffer
  5879  0018FA  6E24               	movwf	UART_buff_init@_this+1,c
  5880  0018FC  EC78  F00D         	call	_UART_buff_init	;wreg free
  5881                           
  5882                           ;UART.c: 52: PIE1bits.RC1IE = 1;
  5883  001900  8A9D               	bsf	3997,5,c	;volatile
  5884  001902  0012               	return		;funcret
  5885  001904                     __end_of_EUSART1_Initialize:
  5886                           	opt stack 0
  5887                           tosu	equ	0xFFF
  5888                           tosh	equ	0xFFE
  5889                           tosl	equ	0xFFD
  5890                           pclath	equ	0xFFA
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           intcon2	equ	0xFF1
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           indf2	equ	0xFDF
  5902                           postinc2	equ	0xFDE
  5903                           postdec2	equ	0xFDD
  5904                           plusw2	equ	0xFDB
  5905                           fsr2h	equ	0xFDA
  5906                           fsr2l	equ	0xFD9
  5907                           status	equ	0xFD8
  5908                           
  5909 ;; *************** function _UART_buff_init *****************
  5910 ;; Defined at:
  5911 ;;		line 56 in file "UART.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  _this           2   34[COMRAM] PTR struct UART_ring_buf
  5914 ;;		 -> output_buffer(206), input_buffer(206), 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;		None
  5917 ;; Return value:  Size  Location     Type
  5918 ;;		None               void
  5919 ;; Registers used:
  5920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5926 ;;      Params:         2       0       0       0       0       0       0
  5927 ;;      Locals:         0       0       0       0       0       0       0
  5928 ;;      Temps:          0       0       0       0       0       0       0
  5929 ;;      Totals:         2       0       0       0       0       0       0
  5930 ;;Total ram usage:        2 bytes
  5931 ;; Hardware stack levels used:    1
  5932 ;; Hardware stack levels required when called:    5
  5933 ;; This function calls:
  5934 ;;		_memset
  5935 ;; This function is called by:
  5936 ;;		_EUSART1_Initialize
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text31
  5941  001AF0                     __ptext31:
  5942                           	opt stack 0
  5943  001AF0                     _UART_buff_init:
  5944                           	opt stack 23
  5945                           
  5946                           ;UART.c: 65: memset(_this, 0, sizeof (*_this));
  5947                           
  5948                           ;incstack = 0
  5949  001AF0  C023  F01B         	movff	UART_buff_init@_this,memset@p1
  5950  001AF4  C024  F01C         	movff	UART_buff_init@_this+1,memset@p1+1
  5951  001AF8  0E00               	movlw	0
  5952  001AFA  6E1E               	movwf	memset@c+1,c
  5953  001AFC  0E00               	movlw	0
  5954  001AFE  6E1D               	movwf	memset@c,c
  5955  001B00  0E00               	movlw	0
  5956  001B02  6E20               	movwf	memset@n+1,c
  5957  001B04  0ECE               	movlw	206
  5958  001B06  6E1F               	movwf	memset@n,c
  5959  001B08  EC37  F00D         	call	_memset	;wreg free
  5960  001B0C  0012               	return		;funcret
  5961  001B0E                     __end_of_UART_buff_init:
  5962                           	opt stack 0
  5963                           tosu	equ	0xFFF
  5964                           tosh	equ	0xFFE
  5965                           tosl	equ	0xFFD
  5966                           pclath	equ	0xFFA
  5967                           tblptru	equ	0xFF8
  5968                           tblptrh	equ	0xFF7
  5969                           tblptrl	equ	0xFF6
  5970                           tablat	equ	0xFF5
  5971                           prodh	equ	0xFF4
  5972                           prodl	equ	0xFF3
  5973                           intcon	equ	0xFF2
  5974                           intcon2	equ	0xFF1
  5975                           postinc0	equ	0xFEE
  5976                           wreg	equ	0xFE8
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           plusw2	equ	0xFDB
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8
  5984                           
  5985 ;; *************** function _memset *****************
  5986 ;; Defined at:
  5987 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\memset.c"
  5988 ;; Parameters:    Size  Location     Type
  5989 ;;  p1              2   26[COMRAM] PTR void 
  5990 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5991 ;;  c               2   28[COMRAM] int 
  5992 ;;  n               2   30[COMRAM] unsigned int 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  p               2   32[COMRAM] PTR unsigned char 
  5995 ;;		 -> output_buffer(206), input_buffer(206), ring_buffer(206), 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  2   26[COMRAM] PTR void 
  5998 ;; Registers used:
  5999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6005 ;;      Params:         6       0       0       0       0       0       0
  6006 ;;      Locals:         2       0       0       0       0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0
  6008 ;;      Totals:         8       0       0       0       0       0       0
  6009 ;;Total ram usage:        8 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:    4
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_FastTransfer_buffer_flush
  6016 ;;		_UART_buff_init
  6017 ;;		_UART_buff_flush
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text32
  6022  001A6E                     __ptext32:
  6023                           	opt stack 0
  6024  001A6E                     _memset:
  6025                           	opt stack 22
  6026                           
  6027                           ;incstack = 0
  6028  001A6E  C01B  F021         	movff	memset@p1,memset@p
  6029  001A72  C01C  F022         	movff	memset@p1+1,memset@p+1
  6030  001A76  D009               	goto	l3265
  6031  001A78                     l3261:
  6032  001A78  C021  FFD9         	movff	memset@p,fsr2l
  6033  001A7C  C022  FFDA         	movff	memset@p+1,fsr2h
  6034  001A80  C01D  FFDF         	movff	memset@c,indf2
  6035  001A84  4A21               	infsnz	memset@p,f,c
  6036  001A86  2A22               	incf	memset@p+1,f,c
  6037  001A88  D000               	goto	l3265
  6038  001A8A                     l3265:
  6039  001A8A  061F               	decf	memset@n,f,c
  6040  001A8C  A0D8               	btfss	status,0,c
  6041  001A8E  0620               	decf	memset@n+1,f,c
  6042  001A90  281F               	incf	memset@n,w,c
  6043  001A92  E1F2               	bnz	l3261
  6044  001A94  2820               	incf	memset@n+1,w,c
  6045  001A96  A4D8               	btfss	status,2,c
  6046  001A98  D7EF               	goto	l3261
  6047                           
  6048                           ;	Return value of _memset is never used
  6049  001A9A  0012               	return		;funcret
  6050  001A9C                     __end_of_memset:
  6051                           	opt stack 0
  6052                           tosu	equ	0xFFF
  6053                           tosh	equ	0xFFE
  6054                           tosl	equ	0xFFD
  6055                           pclath	equ	0xFFA
  6056                           tblptru	equ	0xFF8
  6057                           tblptrh	equ	0xFF7
  6058                           tblptrl	equ	0xFF6
  6059                           tablat	equ	0xFF5
  6060                           prodh	equ	0xFF4
  6061                           prodl	equ	0xFF3
  6062                           intcon	equ	0xFF2
  6063                           intcon2	equ	0xFF1
  6064                           postinc0	equ	0xFEE
  6065                           wreg	equ	0xFE8
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           plusw2	equ	0xFDB
  6070                           fsr2h	equ	0xFDA
  6071                           fsr2l	equ	0xFD9
  6072                           status	equ	0xFD8
  6073                           
  6074 ;; *************** function _ADC_Initialize *****************
  6075 ;; Defined at:
  6076 ;;		line 59 in file "mcc_generated_files/adc.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;		None
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;		None
  6081 ;; Return value:  Size  Location     Type
  6082 ;;		None               void
  6083 ;; Registers used:
  6084 ;;		wreg, status,2
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6090 ;;      Params:         0       0       0       0       0       0       0
  6091 ;;      Locals:         0       0       0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0
  6093 ;;      Totals:         0       0       0       0       0       0       0
  6094 ;;Total ram usage:        0 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    4
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_SYSTEM_Initialize
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text33
  6105  001B92                     __ptext33:
  6106                           	opt stack 0
  6107  001B92                     _ADC_Initialize:
  6108                           	opt stack 25
  6109                           
  6110                           ;adc.c: 64: ADCON0 = 0x01;
  6111                           
  6112                           ;incstack = 0
  6113  001B92  0E01               	movlw	1
  6114  001B94  6EC2               	movwf	4034,c	;volatile
  6115                           
  6116                           ;adc.c: 67: ADCON1 = 0x80;
  6117  001B96  0E80               	movlw	128
  6118  001B98  6EC1               	movwf	4033,c	;volatile
  6119                           
  6120                           ;adc.c: 70: ADCON2 = 0x12;
  6121  001B9A  0E12               	movlw	18
  6122  001B9C  6EC0               	movwf	4032,c	;volatile
  6123                           
  6124                           ;adc.c: 73: ADRESL = 0x00;
  6125  001B9E  0E00               	movlw	0
  6126  001BA0  6EC3               	movwf	4035,c	;volatile
  6127                           
  6128                           ;adc.c: 76: ADRESH = 0x00;
  6129  001BA2  0E00               	movlw	0
  6130  001BA4  6EC4               	movwf	4036,c	;volatile
  6131                           
  6132                           ;adc.c: 79: PIE1bits.ADIE = 1;
  6133  001BA6  8C9D               	bsf	3997,6,c	;volatile
  6134  001BA8  0012               	return		;funcret
  6135  001BAA                     __end_of_ADC_Initialize:
  6136                           	opt stack 0
  6137                           tosu	equ	0xFFF
  6138                           tosh	equ	0xFFE
  6139                           tosl	equ	0xFFD
  6140                           pclath	equ	0xFFA
  6141                           tblptru	equ	0xFF8
  6142                           tblptrh	equ	0xFF7
  6143                           tblptrl	equ	0xFF6
  6144                           tablat	equ	0xFF5
  6145                           prodh	equ	0xFF4
  6146                           prodl	equ	0xFF3
  6147                           intcon	equ	0xFF2
  6148                           intcon2	equ	0xFF1
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           plusw2	equ	0xFDB
  6155                           fsr2h	equ	0xFDA
  6156                           fsr2l	equ	0xFD9
  6157                           status	equ	0xFD8
  6158                           
  6159 ;; *************** function _PDUStartup *****************
  6160 ;; Defined at:
  6161 ;;		line 14 in file "PDU.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;		None
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;		None
  6166 ;; Return value:  Size  Location     Type
  6167 ;;		None               void
  6168 ;; Registers used:
  6169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6175 ;;      Params:         0       0       0       0       0       0       0
  6176 ;;      Locals:         0       0       0       0       0       0       0
  6177 ;;      Temps:          0       0       0       0       0       0       0
  6178 ;;      Totals:         0       0       0       0       0       0       0
  6179 ;;Total ram usage:        0 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    7
  6182 ;; This function calls:
  6183 ;;		_ComputeStorageData
  6184 ;;		_EnableSlavePower
  6185 ;;		_StartUp595
  6186 ;;		_Update
  6187 ;; This function is called by:
  6188 ;;		_main
  6189 ;; This function uses a non-reentrant model
  6190 ;;
  6191                           
  6192                           	psect	text34
  6193  00193E                     __ptext34:
  6194                           	opt stack 0
  6195  00193E                     _PDUStartup:
  6196                           	opt stack 23
  6197                           
  6198                           ;PDU.c: 17: StartUp595();
  6199                           
  6200                           ;incstack = 0
  6201  00193E  EC97  F00A         	call	_StartUp595	;wreg free
  6202                           
  6203                           ;PDU.c: 19: EnableSlavePower(SAS, ON);
  6204  001942  0E00               	movlw	0
  6205  001944  6E26               	movwf	EnableSlavePower@onof+1,c
  6206  001946  0E01               	movlw	1
  6207  001948  6E25               	movwf	EnableSlavePower@onof,c
  6208  00194A  0E03               	movlw	3
  6209  00194C  EC5D  F007         	call	_EnableSlavePower
  6210                           
  6211                           ;PDU.c: 20: EnableSlavePower(DDS, ON);
  6212  001950  0E00               	movlw	0
  6213  001952  6E26               	movwf	EnableSlavePower@onof+1,c
  6214  001954  0E01               	movlw	1
  6215  001956  6E25               	movwf	EnableSlavePower@onof,c
  6216  001958  0E01               	movlw	1
  6217  00195A  EC5D  F007         	call	_EnableSlavePower
  6218                           
  6219                           ;PDU.c: 22: EnableSlavePower(BMM, ON);
  6220  00195E  0E00               	movlw	0
  6221  001960  6E26               	movwf	EnableSlavePower@onof+1,c
  6222  001962  0E01               	movlw	1
  6223  001964  6E25               	movwf	EnableSlavePower@onof,c
  6224  001966  0E04               	movlw	4
  6225  001968  EC5D  F007         	call	_EnableSlavePower
  6226                           
  6227                           ;PDU.c: 24: Update();
  6228  00196C  EC08  F00E         	call	_Update	;wreg free
  6229                           
  6230                           ;PDU.c: 26: ComputeStorageData();
  6231  001970  ECD0  F007         	call	_ComputeStorageData	;wreg free
  6232  001974  0012               	return		;funcret
  6233  001976                     __end_of_PDUStartup:
  6234                           	opt stack 0
  6235                           tosu	equ	0xFFF
  6236                           tosh	equ	0xFFE
  6237                           tosl	equ	0xFFD
  6238                           pclath	equ	0xFFA
  6239                           tblptru	equ	0xFF8
  6240                           tblptrh	equ	0xFF7
  6241                           tblptrl	equ	0xFF6
  6242                           tablat	equ	0xFF5
  6243                           prodh	equ	0xFF4
  6244                           prodl	equ	0xFF3
  6245                           intcon	equ	0xFF2
  6246                           intcon2	equ	0xFF1
  6247                           postinc0	equ	0xFEE
  6248                           wreg	equ	0xFE8
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           plusw2	equ	0xFDB
  6253                           fsr2h	equ	0xFDA
  6254                           fsr2l	equ	0xFD9
  6255                           status	equ	0xFD8
  6256                           
  6257 ;; *************** function _Update *****************
  6258 ;; Defined at:
  6259 ;;		line 121 in file "PDU.c"
  6260 ;; Parameters:    Size  Location     Type
  6261 ;;		None
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;		None
  6264 ;; Return value:  Size  Location     Type
  6265 ;;		None               void
  6266 ;; Registers used:
  6267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : 0/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6273 ;;      Params:         0       0       0       0       0       0       0
  6274 ;;      Locals:         0       0       0       0       0       0       0
  6275 ;;      Temps:          0       0       0       0       0       0       0
  6276 ;;      Totals:         0       0       0       0       0       0       0
  6277 ;;Total ram usage:        0 bytes
  6278 ;; Hardware stack levels used:    1
  6279 ;; Hardware stack levels required when called:    5
  6280 ;; This function calls:
  6281 ;;		_writeRegisters
  6282 ;; This function is called by:
  6283 ;;		_PDUStartup
  6284 ;;		_processPowerRequest
  6285 ;;		_ReadCurrent
  6286 ;; This function uses a non-reentrant model
  6287 ;;
  6288                           
  6289                           	psect	text35
  6290  001C10                     __ptext35:
  6291                           	opt stack 0
  6292  001C10                     _Update:
  6293                           	opt stack 23
  6294                           
  6295                           ;PDU.c: 122: writeRegisters();
  6296                           
  6297                           ;incstack = 0
  6298  001C10  EC5B  F00A         	call	_writeRegisters	;wreg free
  6299  001C14  0012               	return		;funcret
  6300  001C16                     __end_of_Update:
  6301                           	opt stack 0
  6302                           tosu	equ	0xFFF
  6303                           tosh	equ	0xFFE
  6304                           tosl	equ	0xFFD
  6305                           pclath	equ	0xFFA
  6306                           tblptru	equ	0xFF8
  6307                           tblptrh	equ	0xFF7
  6308                           tblptrl	equ	0xFF6
  6309                           tablat	equ	0xFF5
  6310                           prodh	equ	0xFF4
  6311                           prodl	equ	0xFF3
  6312                           intcon	equ	0xFF2
  6313                           intcon2	equ	0xFF1
  6314                           postinc0	equ	0xFEE
  6315                           wreg	equ	0xFE8
  6316                           indf2	equ	0xFDF
  6317                           postinc2	equ	0xFDE
  6318                           postdec2	equ	0xFDD
  6319                           plusw2	equ	0xFDB
  6320                           fsr2h	equ	0xFDA
  6321                           fsr2l	equ	0xFD9
  6322                           status	equ	0xFD8
  6323                           
  6324 ;; *************** function _StartUp595 *****************
  6325 ;; Defined at:
  6326 ;;		line 10 in file "Shift595.c"
  6327 ;; Parameters:    Size  Location     Type
  6328 ;;		None
  6329 ;; Auto vars:     Size  Location     Type
  6330 ;;		None
  6331 ;; Return value:  Size  Location     Type
  6332 ;;		None               void
  6333 ;; Registers used:
  6334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6335 ;; Tracked objects:
  6336 ;;		On entry : 0/0
  6337 ;;		On exit  : 0/0
  6338 ;;		Unchanged: 0/0
  6339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6340 ;;      Params:         0       0       0       0       0       0       0
  6341 ;;      Locals:         0       0       0       0       0       0       0
  6342 ;;      Temps:          0       0       0       0       0       0       0
  6343 ;;      Totals:         0       0       0       0       0       0       0
  6344 ;;Total ram usage:        0 bytes
  6345 ;; Hardware stack levels used:    1
  6346 ;; Hardware stack levels required when called:    6
  6347 ;; This function calls:
  6348 ;;		_Clear595
  6349 ;;		_Delay
  6350 ;; This function is called by:
  6351 ;;		_PDUStartup
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text36
  6356  00152E                     __ptext36:
  6357                           	opt stack 0
  6358  00152E                     _StartUp595:
  6359                           	opt stack 23
  6360                           
  6361                           ;incstack = 0
  6362                           ;Shift595.c: 12: do { LATD5 = 1; } while(0);
  6363  00152E  8A8C               	bsf	3980,5,c	;volatile
  6364  001530  D000               	goto	l2819
  6365  001532                     l2819:
  6366                           
  6367                           ;Shift595.c: 14: Delay(2);
  6368  001532  0E02               	movlw	2
  6369  001534  6E1B               	movwf	Delay@wait,c
  6370  001536  0E00               	movlw	0
  6371  001538  6E1C               	movwf	Delay@wait+1,c
  6372  00153A  0E00               	movlw	0
  6373  00153C  6E1D               	movwf	Delay@wait+2,c
  6374  00153E  0E00               	movlw	0
  6375  001540  6E1E               	movwf	Delay@wait+3,c
  6376  001542  EC3E  F00C         	call	_Delay	;wreg free
  6377  001546  D000               	goto	l2821
  6378  001548                     l2821:
  6379  001548  808A               	bsf	3978,0,c	;volatile
  6380                           
  6381                           ;Shift595.c: 16: Delay(2);
  6382  00154A  0E02               	movlw	2
  6383  00154C  6E1B               	movwf	Delay@wait,c
  6384  00154E  0E00               	movlw	0
  6385  001550  6E1C               	movwf	Delay@wait+1,c
  6386  001552  0E00               	movlw	0
  6387  001554  6E1D               	movwf	Delay@wait+2,c
  6388  001556  0E00               	movlw	0
  6389  001558  6E1E               	movwf	Delay@wait+3,c
  6390  00155A  EC3E  F00C         	call	_Delay	;wreg free
  6391  00155E  D000               	goto	l2823
  6392  001560                     l2823:
  6393  001560  908A               	bcf	3978,0,c	;volatile
  6394                           
  6395                           ;Shift595.c: 18: Delay(2);
  6396  001562  0E02               	movlw	2
  6397  001564  6E1B               	movwf	Delay@wait,c
  6398  001566  0E00               	movlw	0
  6399  001568  6E1C               	movwf	Delay@wait+1,c
  6400  00156A  0E00               	movlw	0
  6401  00156C  6E1D               	movwf	Delay@wait+2,c
  6402  00156E  0E00               	movlw	0
  6403  001570  6E1E               	movwf	Delay@wait+3,c
  6404  001572  EC3E  F00C         	call	_Delay	;wreg free
  6405  001576  D000               	goto	l2825
  6406  001578                     l2825:
  6407  001578  808A               	bsf	3978,0,c	;volatile
  6408                           
  6409                           ;Shift595.c: 20: Delay(2);
  6410  00157A  0E02               	movlw	2
  6411  00157C  6E1B               	movwf	Delay@wait,c
  6412  00157E  0E00               	movlw	0
  6413  001580  6E1C               	movwf	Delay@wait+1,c
  6414  001582  0E00               	movlw	0
  6415  001584  6E1D               	movwf	Delay@wait+2,c
  6416  001586  0E00               	movlw	0
  6417  001588  6E1E               	movwf	Delay@wait+3,c
  6418  00158A  EC3E  F00C         	call	_Delay	;wreg free
  6419  00158E  D000               	goto	l2827
  6420  001590                     l2827:
  6421  001590  9A8C               	bcf	3980,5,c	;volatile
  6422  001592  D000               	goto	l2829
  6423  001594                     l2829:
  6424                           
  6425                           ;Shift595.c: 23: Clear595();
  6426  001594  ECBB  F00C         	call	_Clear595	;wreg free
  6427  001598  0012               	return		;funcret
  6428  00159A                     __end_of_StartUp595:
  6429                           	opt stack 0
  6430                           tosu	equ	0xFFF
  6431                           tosh	equ	0xFFE
  6432                           tosl	equ	0xFFD
  6433                           pclath	equ	0xFFA
  6434                           tblptru	equ	0xFF8
  6435                           tblptrh	equ	0xFF7
  6436                           tblptrl	equ	0xFF6
  6437                           tablat	equ	0xFF5
  6438                           prodh	equ	0xFF4
  6439                           prodl	equ	0xFF3
  6440                           intcon	equ	0xFF2
  6441                           intcon2	equ	0xFF1
  6442                           postinc0	equ	0xFEE
  6443                           wreg	equ	0xFE8
  6444                           indf2	equ	0xFDF
  6445                           postinc2	equ	0xFDE
  6446                           postdec2	equ	0xFDD
  6447                           plusw2	equ	0xFDB
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function _Delay *****************
  6453 ;; Defined at:
  6454 ;;		line 9 in file "Functions.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  wait            4   26[COMRAM] long 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  i               4   31[COMRAM] long 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;		None               void
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, status,0
  6463 ;; Tracked objects:
  6464 ;;		On entry : 0/0
  6465 ;;		On exit  : 0/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6468 ;;      Params:         4       0       0       0       0       0       0
  6469 ;;      Locals:         4       0       0       0       0       0       0
  6470 ;;      Temps:          1       0       0       0       0       0       0
  6471 ;;      Totals:         9       0       0       0       0       0       0
  6472 ;;Total ram usage:        9 bytes
  6473 ;; Hardware stack levels used:    1
  6474 ;; Hardware stack levels required when called:    4
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_StartUp595
  6479 ;;		_respondECU
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text37
  6484  00187C                     __ptext37:
  6485                           	opt stack 0
  6486  00187C                     _Delay:
  6487                           	opt stack 24
  6488                           
  6489                           ;Functions.c: 10: long int i = 0;
  6490                           
  6491                           ;incstack = 0
  6492  00187C  0E00               	movlw	0
  6493  00187E  6E20               	movwf	Delay@i,c
  6494  001880  0E00               	movlw	0
  6495  001882  6E21               	movwf	Delay@i+1,c
  6496  001884  0E00               	movlw	0
  6497  001886  6E22               	movwf	Delay@i+2,c
  6498  001888  0E00               	movlw	0
  6499  00188A  6E23               	movwf	Delay@i+3,c
  6500                           
  6501                           ;Functions.c: 11: for (; wait > i; i++) {
  6502  00188C  D00E               	goto	l2609
  6503  00188E                     l2605:
  6504                           
  6505                           ;Functions.c: 12: _delay((unsigned long)((1)*(8000000/4000.0)));
  6506  00188E  0E03               	movlw	3
  6507  001890  6E1F               	movwf	??_Delay& (0+255),c
  6508  001892  0E98               	movlw	152
  6509  001894                     u3757:
  6510  001894  2EE8               	decfsz	wreg,f,c
  6511  001896  D7FE               	goto	u3757
  6512  001898  2E1F               	decfsz	??_Delay& (0+255),f,c
  6513  00189A  D7FC               	goto	u3757
  6514  00189C  0E01               	movlw	1
  6515  00189E  2620               	addwf	Delay@i,f,c
  6516  0018A0  0E00               	movlw	0
  6517  0018A2  2221               	addwfc	Delay@i+1,f,c
  6518  0018A4  2222               	addwfc	Delay@i+2,f,c
  6519  0018A6  2223               	addwfc	Delay@i+3,f,c
  6520  0018A8  D000               	goto	l2609
  6521  0018AA                     l2609:
  6522  0018AA  501B               	movf	Delay@wait,w,c
  6523  0018AC  5C20               	subwf	Delay@i,w,c
  6524  0018AE  501C               	movf	Delay@wait+1,w,c
  6525  0018B0  5821               	subwfb	Delay@i+1,w,c
  6526  0018B2  501D               	movf	Delay@wait+2,w,c
  6527  0018B4  5822               	subwfb	Delay@i+2,w,c
  6528  0018B6  5023               	movf	Delay@i+3,w,c
  6529  0018B8  0A80               	xorlw	128
  6530  0018BA  6E1F               	movwf	??_Delay& (0+255),c
  6531  0018BC  501E               	movf	Delay@wait+3,w,c
  6532  0018BE  0A80               	xorlw	128
  6533  0018C0  581F               	subwfb	??_Delay& (0+255),w,c
  6534  0018C2  A0D8               	btfss	status,0,c
  6535  0018C4  D7E4               	goto	l2605
  6536  0018C6  0012               	return		;funcret
  6537  0018C8                     __end_of_Delay:
  6538                           	opt stack 0
  6539                           tosu	equ	0xFFF
  6540                           tosh	equ	0xFFE
  6541                           tosl	equ	0xFFD
  6542                           pclath	equ	0xFFA
  6543                           tblptru	equ	0xFF8
  6544                           tblptrh	equ	0xFF7
  6545                           tblptrl	equ	0xFF6
  6546                           tablat	equ	0xFF5
  6547                           prodh	equ	0xFF4
  6548                           prodl	equ	0xFF3
  6549                           intcon	equ	0xFF2
  6550                           intcon2	equ	0xFF1
  6551                           postinc0	equ	0xFEE
  6552                           wreg	equ	0xFE8
  6553                           indf2	equ	0xFDF
  6554                           postinc2	equ	0xFDE
  6555                           postdec2	equ	0xFDD
  6556                           plusw2	equ	0xFDB
  6557                           fsr2h	equ	0xFDA
  6558                           fsr2l	equ	0xFD9
  6559                           status	equ	0xFD8
  6560                           
  6561 ;; *************** function _Clear595 *****************
  6562 ;; Defined at:
  6563 ;;		line 38 in file "Shift595.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  i               2   30[COMRAM] int 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;		None               void
  6570 ;; Registers used:
  6571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6577 ;;      Params:         0       0       0       0       0       0       0
  6578 ;;      Locals:         2       0       0       0       0       0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0
  6580 ;;      Totals:         2       0       0       0       0       0       0
  6581 ;;Total ram usage:        2 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    5
  6584 ;; This function calls:
  6585 ;;		_writeRegisters
  6586 ;; This function is called by:
  6587 ;;		_StartUp595
  6588 ;; This function uses a non-reentrant model
  6589 ;;
  6590                           
  6591                           	psect	text38
  6592  001976                     __ptext38:
  6593                           	opt stack 0
  6594  001976                     _Clear595:
  6595                           	opt stack 23
  6596                           
  6597                           ;Shift595.c: 39: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6598                           
  6599                           ;incstack = 0
  6600  001976  0E00               	movlw	0
  6601  001978  6E20               	movwf	Clear595@i+1,c
  6602  00197A  0E17               	movlw	23
  6603  00197C  6E1F               	movwf	Clear595@i,c
  6604  00197E                     l2613:
  6605  00197E  BE20               	btfsc	Clear595@i+1,7,c
  6606  001980  D013               	goto	l2623
  6607  001982  D001               	goto	l2617
  6608  001984  D011               	goto	l2623
  6609  001986                     l2617:
  6610                           
  6611                           ;Shift595.c: 40: registers[i] = 0;
  6612  001986  90D8               	bcf	status,0,c
  6613  001988  341F               	rlcf	Clear595@i,w,c
  6614  00198A  6ED9               	movwf	fsr2l,c
  6615  00198C  3420               	rlcf	Clear595@i+1,w,c
  6616  00198E  6EDA               	movwf	fsr2h,c
  6617  001990  0E60               	movlw	low _registers
  6618  001992  26D9               	addwf	fsr2l,f,c
  6619  001994  0E00               	movlw	high _registers
  6620  001996  22DA               	addwfc	fsr2h,f,c
  6621  001998  0E00               	movlw	0
  6622  00199A  6EDE               	movwf	postinc2,c
  6623  00199C  0E00               	movlw	0
  6624  00199E  6EDD               	movwf	postdec2,c
  6625  0019A0  061F               	decf	Clear595@i,f,c
  6626  0019A2  A0D8               	btfss	status,0,c
  6627  0019A4  0620               	decf	Clear595@i+1,f,c
  6628  0019A6  D7EB               	goto	l2613
  6629  0019A8                     l2623:
  6630                           
  6631                           ;Shift595.c: 41: }
  6632                           ;Shift595.c: 43: writeRegisters();
  6633  0019A8  EC5B  F00A         	call	_writeRegisters	;wreg free
  6634  0019AC  0012               	return		;funcret
  6635  0019AE                     __end_of_Clear595:
  6636                           	opt stack 0
  6637                           tosu	equ	0xFFF
  6638                           tosh	equ	0xFFE
  6639                           tosl	equ	0xFFD
  6640                           pclath	equ	0xFFA
  6641                           tblptru	equ	0xFF8
  6642                           tblptrh	equ	0xFF7
  6643                           tblptrl	equ	0xFF6
  6644                           tablat	equ	0xFF5
  6645                           prodh	equ	0xFF4
  6646                           prodl	equ	0xFF3
  6647                           intcon	equ	0xFF2
  6648                           intcon2	equ	0xFF1
  6649                           postinc0	equ	0xFEE
  6650                           wreg	equ	0xFE8
  6651                           indf2	equ	0xFDF
  6652                           postinc2	equ	0xFDE
  6653                           postdec2	equ	0xFDD
  6654                           plusw2	equ	0xFDB
  6655                           fsr2h	equ	0xFDA
  6656                           fsr2l	equ	0xFD9
  6657                           status	equ	0xFD8
  6658                           
  6659 ;; *************** function _writeRegisters *****************
  6660 ;; Defined at:
  6661 ;;		line 49 in file "Shift595.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;		None
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  i               2   28[COMRAM] int 
  6666 ;;  val             2   26[COMRAM] int 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;		None               void
  6669 ;; Registers used:
  6670 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6671 ;; Tracked objects:
  6672 ;;		On entry : 0/0
  6673 ;;		On exit  : 0/0
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6676 ;;      Params:         0       0       0       0       0       0       0
  6677 ;;      Locals:         4       0       0       0       0       0       0
  6678 ;;      Temps:          0       0       0       0       0       0       0
  6679 ;;      Totals:         4       0       0       0       0       0       0
  6680 ;;Total ram usage:        4 bytes
  6681 ;; Hardware stack levels used:    1
  6682 ;; Hardware stack levels required when called:    4
  6683 ;; This function calls:
  6684 ;;		Nothing
  6685 ;; This function is called by:
  6686 ;;		_Clear595
  6687 ;;		_Update
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           	psect	text39
  6692  0014B6                     __ptext39:
  6693                           	opt stack 0
  6694  0014B6                     _writeRegisters:
  6695                           	opt stack 23
  6696                           
  6697                           ;incstack = 0
  6698                           ;Shift595.c: 50: do { LATD5 = 1; } while(0);
  6699  0014B6  8A8C               	bsf	3980,5,c	;volatile
  6700  0014B8  D000               	goto	l2457
  6701  0014BA                     l2457:
  6702                           
  6703                           ;Shift595.c: 51: int val = 0;
  6704  0014BA  0E00               	movlw	0
  6705  0014BC  6E1C               	movwf	writeRegisters@val+1,c
  6706  0014BE  0E00               	movlw	0
  6707  0014C0  6E1B               	movwf	writeRegisters@val,c
  6708  0014C2  D000               	goto	l2459
  6709  0014C4                     l2459:
  6710  0014C4  9C8C               	bcf	3980,6,c	;volatile
  6711                           
  6712                           ;Shift595.c: 54: for (int i = 3 * 8 - 1; i >= 0; i--) {
  6713  0014C6  0E00               	movlw	0
  6714  0014C8  6E1E               	movwf	writeRegisters@i+1,c
  6715  0014CA  0E17               	movlw	23
  6716  0014CC  6E1D               	movwf	writeRegisters@i,c
  6717  0014CE                     l2461:
  6718  0014CE  BE1E               	btfsc	writeRegisters@i+1,7,c
  6719  0014D0  D027               	goto	l365
  6720  0014D2  D001               	goto	l350
  6721  0014D4  D025               	goto	l365
  6722  0014D6                     l350:
  6723  0014D6  9E8C               	bcf	3980,7,c	;volatile
  6724  0014D8  D000               	goto	l352
  6725  0014DA                     l352:
  6726  0014DA  9C8C               	bcf	3980,6,c	;volatile
  6727  0014DC  D000               	goto	l2465
  6728  0014DE                     l2465:
  6729                           
  6730                           ;Shift595.c: 58: val = registers[i];
  6731  0014DE  90D8               	bcf	status,0,c
  6732  0014E0  341D               	rlcf	writeRegisters@i,w,c
  6733  0014E2  6ED9               	movwf	fsr2l,c
  6734  0014E4  341E               	rlcf	writeRegisters@i+1,w,c
  6735  0014E6  6EDA               	movwf	fsr2h,c
  6736  0014E8  0E60               	movlw	low _registers
  6737  0014EA  26D9               	addwf	fsr2l,f,c
  6738  0014EC  0E00               	movlw	high _registers
  6739  0014EE  22DA               	addwfc	fsr2h,f,c
  6740  0014F0  CFDE F01B          	movff	postinc2,writeRegisters@val
  6741  0014F4  CFDD F01C          	movff	postdec2,writeRegisters@val+1
  6742                           
  6743                           ;Shift595.c: 59: if (val == 1) {
  6744  0014F8  041B               	decf	writeRegisters@val,w,c
  6745  0014FA  101C               	iorwf	writeRegisters@val+1,w,c
  6746  0014FC  A4D8               	btfss	status,2,c
  6747  0014FE  D002               	goto	l2469
  6748                           
  6749                           ;Shift595.c: 60: do { LATD4 = 1; } while(0);
  6750  001500  888C               	bsf	3980,4,c	;volatile
  6751                           
  6752                           ;Shift595.c: 61: } else if (val == 0) {
  6753  001502  D006               	goto	l361
  6754  001504                     l2469:
  6755  001504  501B               	movf	writeRegisters@val,w,c
  6756  001506  101C               	iorwf	writeRegisters@val+1,w,c
  6757  001508  A4D8               	btfss	status,2,c
  6758  00150A  D002               	goto	l361
  6759                           
  6760                           ;Shift595.c: 62: do { LATD4 = 0; } while(0);
  6761  00150C  988C               	bcf	3980,4,c	;volatile
  6762  00150E  D000               	goto	l361
  6763  001510                     l361:
  6764  001510  8E8C               	bsf	3980,7,c	;volatile
  6765  001512  D000               	goto	l363
  6766  001514                     l363:
  6767  001514  8C8C               	bsf	3980,6,c	;volatile
  6768  001516  D000               	goto	l2471
  6769  001518                     l2471:
  6770  001518  061D               	decf	writeRegisters@i,f,c
  6771  00151A  A0D8               	btfss	status,0,c
  6772  00151C  061E               	decf	writeRegisters@i+1,f,c
  6773  00151E  D7D7               	goto	l2461
  6774  001520                     l365:
  6775  001520  9C8C               	bcf	3980,6,c	;volatile
  6776  001522  D000               	goto	l367
  6777  001524                     l367:
  6778  001524  9E8C               	bcf	3980,7,c	;volatile
  6779  001526  D000               	goto	l369
  6780  001528                     l369:
  6781  001528  9A8C               	bcf	3980,5,c	;volatile
  6782  00152A  0012               	return	
  6783  00152C  0012               	return		;funcret
  6784  00152E                     __end_of_writeRegisters:
  6785                           	opt stack 0
  6786                           tosu	equ	0xFFF
  6787                           tosh	equ	0xFFE
  6788                           tosl	equ	0xFFD
  6789                           pclath	equ	0xFFA
  6790                           tblptru	equ	0xFF8
  6791                           tblptrh	equ	0xFF7
  6792                           tblptrl	equ	0xFF6
  6793                           tablat	equ	0xFF5
  6794                           prodh	equ	0xFF4
  6795                           prodl	equ	0xFF3
  6796                           intcon	equ	0xFF2
  6797                           intcon2	equ	0xFF1
  6798                           postinc0	equ	0xFEE
  6799                           wreg	equ	0xFE8
  6800                           indf2	equ	0xFDF
  6801                           postinc2	equ	0xFDE
  6802                           postdec2	equ	0xFDD
  6803                           plusw2	equ	0xFDB
  6804                           fsr2h	equ	0xFDA
  6805                           fsr2l	equ	0xFD9
  6806                           status	equ	0xFD8
  6807                           
  6808 ;; *************** function _EnableSlavePower *****************
  6809 ;; Defined at:
  6810 ;;		line 31 in file "PDU.c"
  6811 ;; Parameters:    Size  Location     Type
  6812 ;;  slave           1    wreg     enum E5
  6813 ;;  onof            2   36[COMRAM] int 
  6814 ;; Auto vars:     Size  Location     Type
  6815 ;;  slave           1    0[BANK0 ] enum E5
  6816 ;; Return value:  Size  Location     Type
  6817 ;;		None               void
  6818 ;; Registers used:
  6819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6820 ;; Tracked objects:
  6821 ;;		On entry : 0/0
  6822 ;;		On exit  : 0/0
  6823 ;;		Unchanged: 0/0
  6824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6825 ;;      Params:         2       0       0       0       0       0       0
  6826 ;;      Locals:         0       1       0       0       0       0       0
  6827 ;;      Temps:          0       0       0       0       0       0       0
  6828 ;;      Totals:         2       1       0       0       0       0       0
  6829 ;;Total ram usage:        3 bytes
  6830 ;; Hardware stack levels used:    1
  6831 ;; Hardware stack levels required when called:    5
  6832 ;; This function calls:
  6833 ;;		_SetPin595
  6834 ;; This function is called by:
  6835 ;;		_PDUStartup
  6836 ;;		_processPowerRequest
  6837 ;; This function uses a non-reentrant model
  6838 ;;
  6839                           
  6840                           	psect	text40
  6841  000EBA                     __ptext40:
  6842                           	opt stack 0
  6843  000EBA                     _EnableSlavePower:
  6844                           	opt stack 23
  6845                           
  6846                           ;incstack = 0
  6847                           ;EnableSlavePower@slave stored from wreg
  6848  000EBA  0100               	movlb	0	; () banked
  6849  000EBC  6FFF               	movwf	EnableSlavePower@slave& (0+255),b
  6850                           
  6851                           ; BSR set to: 0
  6852                           ;PDU.c: 32: switch (slave) {
  6853  000EBE  D05A               	goto	l3427
  6854  000EC0                     l3413:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;PDU.c: 34: SetPin595(2, 1, onof);
  6858  000EC0  0E00               	movlw	0
  6859  000EC2  6E1C               	movwf	SetPin595@Reg+1,c
  6860  000EC4  0E02               	movlw	2
  6861  000EC6  6E1B               	movwf	SetPin595@Reg,c
  6862  000EC8  0E00               	movlw	0
  6863  000ECA  6E1E               	movwf	SetPin595@pin+1,c
  6864  000ECC  0E01               	movlw	1
  6865  000ECE  6E1D               	movwf	SetPin595@pin,c
  6866  000ED0  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6867  000ED4  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6868  000ED8  EC17  F00C         	call	_SetPin595	;wreg free
  6869                           
  6870                           ;PDU.c: 35: break;
  6871  000EDC  0012               	return	
  6872  000EDE                     l3415:
  6873                           
  6874                           ;PDU.c: 37: SetPin595(3, 1, onof);
  6875  000EDE  0E00               	movlw	0
  6876  000EE0  6E1C               	movwf	SetPin595@Reg+1,c
  6877  000EE2  0E03               	movlw	3
  6878  000EE4  6E1B               	movwf	SetPin595@Reg,c
  6879  000EE6  0E00               	movlw	0
  6880  000EE8  6E1E               	movwf	SetPin595@pin+1,c
  6881  000EEA  0E01               	movlw	1
  6882  000EEC  6E1D               	movwf	SetPin595@pin,c
  6883  000EEE  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6884  000EF2  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6885  000EF6  EC17  F00C         	call	_SetPin595	;wreg free
  6886                           
  6887                           ;PDU.c: 38: break;
  6888  000EFA  0012               	return	
  6889  000EFC                     l3417:
  6890                           
  6891                           ;PDU.c: 40: SetPin595(2, 6, onof);
  6892  000EFC  0E00               	movlw	0
  6893  000EFE  6E1C               	movwf	SetPin595@Reg+1,c
  6894  000F00  0E02               	movlw	2
  6895  000F02  6E1B               	movwf	SetPin595@Reg,c
  6896  000F04  0E00               	movlw	0
  6897  000F06  6E1E               	movwf	SetPin595@pin+1,c
  6898  000F08  0E06               	movlw	6
  6899  000F0A  6E1D               	movwf	SetPin595@pin,c
  6900  000F0C  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6901  000F10  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6902  000F14  EC17  F00C         	call	_SetPin595	;wreg free
  6903                           
  6904                           ;PDU.c: 41: break;
  6905  000F18  0012               	return	
  6906  000F1A                     l3419:
  6907                           
  6908                           ;PDU.c: 43: SetPin595(3, 6, onof);
  6909  000F1A  0E00               	movlw	0
  6910  000F1C  6E1C               	movwf	SetPin595@Reg+1,c
  6911  000F1E  0E03               	movlw	3
  6912  000F20  6E1B               	movwf	SetPin595@Reg,c
  6913  000F22  0E00               	movlw	0
  6914  000F24  6E1E               	movwf	SetPin595@pin+1,c
  6915  000F26  0E06               	movlw	6
  6916  000F28  6E1D               	movwf	SetPin595@pin,c
  6917  000F2A  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6918  000F2E  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6919  000F32  EC17  F00C         	call	_SetPin595	;wreg free
  6920                           
  6921                           ;PDU.c: 44: break;
  6922  000F36  0012               	return	
  6923  000F38                     l3421:
  6924                           
  6925                           ;PDU.c: 46: SetPin595(1, 1, onof);
  6926  000F38  0E00               	movlw	0
  6927  000F3A  6E1C               	movwf	SetPin595@Reg+1,c
  6928  000F3C  0E01               	movlw	1
  6929  000F3E  6E1B               	movwf	SetPin595@Reg,c
  6930  000F40  0E00               	movlw	0
  6931  000F42  6E1E               	movwf	SetPin595@pin+1,c
  6932  000F44  0E01               	movlw	1
  6933  000F46  6E1D               	movwf	SetPin595@pin,c
  6934  000F48  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6935  000F4C  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6936  000F50  EC17  F00C         	call	_SetPin595	;wreg free
  6937                           
  6938                           ;PDU.c: 47: break;
  6939  000F54  0012               	return	
  6940  000F56                     l3423:
  6941                           
  6942                           ;PDU.c: 49: SetPin595(1, 6, onof);
  6943  000F56  0E00               	movlw	0
  6944  000F58  6E1C               	movwf	SetPin595@Reg+1,c
  6945  000F5A  0E01               	movlw	1
  6946  000F5C  6E1B               	movwf	SetPin595@Reg,c
  6947  000F5E  0E00               	movlw	0
  6948  000F60  6E1E               	movwf	SetPin595@pin+1,c
  6949  000F62  0E06               	movlw	6
  6950  000F64  6E1D               	movwf	SetPin595@pin,c
  6951  000F66  C025  F01F         	movff	EnableSlavePower@onof,SetPin595@value
  6952  000F6A  C026  F020         	movff	EnableSlavePower@onof+1,SetPin595@value+1
  6953  000F6E  EC17  F00C         	call	_SetPin595	;wreg free
  6954                           
  6955                           ;PDU.c: 51: }
  6956                           
  6957                           ;PDU.c: 50: break;
  6958  000F72  0012               	return	
  6959  000F74                     l3427:
  6960  000F74  0100               	movlb	0	; () banked
  6961  000F76  51FF               	movf	EnableSlavePower@slave& (0+255),w,b
  6962                           
  6963                           ; Switch size 1, requested type "space"
  6964                           ; Number of cases is 6, Range of values is 1 to 6
  6965                           ; switch strategies available:
  6966                           ; Name         Instructions Cycles
  6967                           ; simple_byte           19    10 (average)
  6968                           ;	Chosen strategy is simple_byte
  6969  000F78  0A01               	xorlw	1	; case 1
  6970  000F7A  B4D8               	btfsc	status,2,c
  6971  000F7C  D7CE               	goto	l3419
  6972  000F7E  0A03               	xorlw	3	; case 2
  6973  000F80  B4D8               	btfsc	status,2,c
  6974  000F82  D7BC               	goto	l3417
  6975  000F84  0A01               	xorlw	1	; case 3
  6976  000F86  B4D8               	btfsc	status,2,c
  6977  000F88  D79B               	goto	l3413
  6978  000F8A  0A07               	xorlw	7	; case 4
  6979  000F8C  B4D8               	btfsc	status,2,c
  6980  000F8E  D7A7               	goto	l3415
  6981  000F90  0A01               	xorlw	1	; case 5
  6982  000F92  B4D8               	btfsc	status,2,c
  6983  000F94  D7D1               	goto	l3421
  6984  000F96  0A03               	xorlw	3	; case 6
  6985  000F98  A4D8               	btfss	status,2,c
  6986  000F9A  0012               	return	
  6987  000F9C  D7DC               	goto	l3423
  6988                           
  6989                           ; BSR set to: 0
  6990  000F9E  0012               	return		;funcret
  6991  000FA0                     __end_of_EnableSlavePower:
  6992                           	opt stack 0
  6993                           tosu	equ	0xFFF
  6994                           tosh	equ	0xFFE
  6995                           tosl	equ	0xFFD
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           intcon2	equ	0xFF1
  7005                           postinc0	equ	0xFEE
  7006                           wreg	equ	0xFE8
  7007                           indf2	equ	0xFDF
  7008                           postinc2	equ	0xFDE
  7009                           postdec2	equ	0xFDD
  7010                           plusw2	equ	0xFDB
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _SetPin595 *****************
  7016 ;; Defined at:
  7017 ;;		line 31 in file "Shift595.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  Reg             2   26[COMRAM] int 
  7020 ;;  pin             2   28[COMRAM] int 
  7021 ;;  value           2   30[COMRAM] int 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;		None
  7024 ;; Return value:  Size  Location     Type
  7025 ;;		None               void
  7026 ;; Registers used:
  7027 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7033 ;;      Params:         6       0       0       0       0       0       0
  7034 ;;      Locals:         0       0       0       0       0       0       0
  7035 ;;      Temps:          4       0       0       0       0       0       0
  7036 ;;      Totals:        10       0       0       0       0       0       0
  7037 ;;Total ram usage:       10 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    4
  7040 ;; This function calls:
  7041 ;;		Nothing
  7042 ;; This function is called by:
  7043 ;;		_EnableSlavePower
  7044 ;;		_ReadCurrent
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text41
  7049  00182E                     __ptext41:
  7050                           	opt stack 0
  7051  00182E                     _SetPin595:
  7052                           	opt stack 23
  7053                           
  7054                           ;Shift595.c: 32: registers[((Reg - 1)*8) + pin] = value;
  7055                           
  7056                           ;incstack = 0
  7057  00182E  0EF0               	movlw	240
  7058  001830  6E21               	movwf	??_SetPin595& (0+255),c
  7059  001832  0EFF               	movlw	255
  7060  001834  6E22               	movwf	(??_SetPin595+1)& (0+255),c
  7061  001836  C01B  F023         	movff	SetPin595@Reg,??_SetPin595+2
  7062  00183A  C01C  F024         	movff	SetPin595@Reg+1,??_SetPin595+3
  7063  00183E  90D8               	bcf	status,0,c
  7064  001840  3623               	rlcf	??_SetPin595+2,f,c
  7065  001842  3624               	rlcf	??_SetPin595+3,f,c
  7066  001844  90D8               	bcf	status,0,c
  7067  001846  3623               	rlcf	??_SetPin595+2,f,c
  7068  001848  3624               	rlcf	??_SetPin595+3,f,c
  7069  00184A  90D8               	bcf	status,0,c
  7070  00184C  3623               	rlcf	??_SetPin595+2,f,c
  7071  00184E  3624               	rlcf	??_SetPin595+3,f,c
  7072  001850  501D               	movf	SetPin595@pin,w,c
  7073  001852  2623               	addwf	??_SetPin595+2,f,c
  7074  001854  501E               	movf	SetPin595@pin+1,w,c
  7075  001856  2224               	addwfc	??_SetPin595+3,f,c
  7076  001858  90D8               	bcf	status,0,c
  7077  00185A  3623               	rlcf	??_SetPin595+2,f,c
  7078  00185C  3624               	rlcf	??_SetPin595+3,f,c
  7079  00185E  5021               	movf	??_SetPin595,w,c
  7080  001860  2623               	addwf	??_SetPin595+2,f,c
  7081  001862  5022               	movf	??_SetPin595+1,w,c
  7082  001864  2224               	addwfc	??_SetPin595+3,f,c
  7083  001866  0E60               	movlw	low _registers
  7084  001868  2423               	addwf	??_SetPin595+2,w,c
  7085  00186A  6ED9               	movwf	fsr2l,c
  7086  00186C  0E00               	movlw	high _registers
  7087  00186E  2024               	addwfc	??_SetPin595+3,w,c
  7088  001870  6EDA               	movwf	fsr2h,c
  7089  001872  C01F  FFDE         	movff	SetPin595@value,postinc2
  7090  001876  C020  FFDD         	movff	SetPin595@value+1,postdec2
  7091  00187A  0012               	return		;funcret
  7092  00187C                     __end_of_SetPin595:
  7093                           	opt stack 0
  7094                           tosu	equ	0xFFF
  7095                           tosh	equ	0xFFE
  7096                           tosl	equ	0xFFD
  7097                           pclath	equ	0xFFA
  7098                           tblptru	equ	0xFF8
  7099                           tblptrh	equ	0xFF7
  7100                           tblptrl	equ	0xFF6
  7101                           tablat	equ	0xFF5
  7102                           prodh	equ	0xFF4
  7103                           prodl	equ	0xFF3
  7104                           intcon	equ	0xFF2
  7105                           intcon2	equ	0xFF1
  7106                           postinc0	equ	0xFEE
  7107                           wreg	equ	0xFE8
  7108                           indf2	equ	0xFDF
  7109                           postinc2	equ	0xFDE
  7110                           postdec2	equ	0xFDD
  7111                           plusw2	equ	0xFDB
  7112                           fsr2h	equ	0xFDA
  7113                           fsr2l	equ	0xFD9
  7114                           status	equ	0xFD8
  7115                           
  7116 ;; *************** function _ComputeStorageData *****************
  7117 ;; Defined at:
  7118 ;;		line 93 in file "PDU.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  i               2   29[COMRAM] int 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;		None               void
  7125 ;; Registers used:
  7126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7132 ;;      Params:         0       0       0       0       0       0       0
  7133 ;;      Locals:         2       0       0       0       0       0       0
  7134 ;;      Temps:          2       0       0       0       0       0       0
  7135 ;;      Totals:         4       0       0       0       0       0       0
  7136 ;;Total ram usage:        4 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    5
  7139 ;; This function calls:
  7140 ;;		_DATAEE_ReadByte
  7141 ;; This function is called by:
  7142 ;;		_PDUStartup
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           	psect	text42
  7147  000FA0                     __ptext42:
  7148                           	opt stack 0
  7149  000FA0                     _ComputeStorageData:
  7150                           	opt stack 24
  7151                           
  7152                           ;PDU.c: 94: for (int i = 0; i < 12; i++) {
  7153                           
  7154                           ;incstack = 0
  7155  000FA0  0E00               	movlw	0
  7156  000FA2  6E1F               	movwf	ComputeStorageData@i+1,c
  7157  000FA4  0E00               	movlw	0
  7158  000FA6  6E1E               	movwf	ComputeStorageData@i,c
  7159  000FA8                     l2833:
  7160  000FA8  BE1F               	btfsc	ComputeStorageData@i+1,7,c
  7161  000FAA  D008               	goto	l2837
  7162  000FAC  501F               	movf	ComputeStorageData@i+1,w,c
  7163  000FAE  E114               	bnz	l2843
  7164  000FB0  0E0C               	movlw	12
  7165  000FB2  5C1E               	subwf	ComputeStorageData@i,w,c
  7166  000FB4  B0D8               	btfsc	status,0,c
  7167  000FB6  D010               	goto	l2843
  7168  000FB8  D001               	goto	l2837
  7169  000FBA  D00E               	goto	l2843
  7170  000FBC                     l2837:
  7171                           
  7172                           ;PDU.c: 95: data[i] = DATAEE_ReadByte(i);
  7173  000FBC  0EB4               	movlw	low _data
  7174  000FBE  241E               	addwf	ComputeStorageData@i,w,c
  7175  000FC0  6ED9               	movwf	fsr2l,c
  7176  000FC2  0E00               	movlw	high _data
  7177  000FC4  201F               	addwfc	ComputeStorageData@i+1,w,c
  7178  000FC6  6EDA               	movwf	fsr2h,c
  7179  000FC8  501E               	movf	ComputeStorageData@i,w,c
  7180  000FCA  ECE1  F00D         	call	_DATAEE_ReadByte
  7181  000FCE  6EDF               	movwf	indf2,c
  7182  000FD0  4A1E               	infsnz	ComputeStorageData@i,f,c
  7183  000FD2  2A1F               	incf	ComputeStorageData@i+1,f,c
  7184  000FD4  D7E9               	goto	l2833
  7185  000FD6  D000               	goto	l2843
  7186  000FD8                     l2843:
  7187                           
  7188                           ;PDU.c: 96: }
  7189                           ;PDU.c: 97: Currentcomp[0] = ((data[0] << 8) | data[1]);
  7190  000FD8  0100               	movlb	0	; () banked
  7191  000FDA  51B5               	movf	(_data+1)& (0+255),w,b
  7192  000FDC  C0B4  F01C         	movff	_data,??_ComputeStorageData
  7193  000FE0  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7194  000FE2  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7195  000FE6  6A1C               	clrf	??_ComputeStorageData,c
  7196  000FE8  101C               	iorwf	??_ComputeStorageData,w,c
  7197  000FEA  0100               	movlb	0	; () banked
  7198  000FEC  6FA8               	movwf	_Currentcomp& (0+255),b
  7199  000FEE  501D               	movf	??_ComputeStorageData+1,w,c
  7200  000FF0  0100               	movlb	0	; () banked
  7201  000FF2  6FA9               	movwf	(_Currentcomp+1)& (0+255),b
  7202                           
  7203                           ;PDU.c: 98: Currentcomp[1] = ((data[2] << 8) | data[3]);
  7204  000FF4  0100               	movlb	0	; () banked
  7205  000FF6  51B7               	movf	(_data+3)& (0+255),w,b
  7206  000FF8  C0B6  F01C         	movff	_data+2,??_ComputeStorageData
  7207  000FFC  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7208  000FFE  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7209  001002  6A1C               	clrf	??_ComputeStorageData,c
  7210  001004  101C               	iorwf	??_ComputeStorageData,w,c
  7211  001006  0100               	movlb	0	; () banked
  7212  001008  6FAA               	movwf	(_Currentcomp+2)& (0+255),b
  7213  00100A  501D               	movf	??_ComputeStorageData+1,w,c
  7214  00100C  0100               	movlb	0	; () banked
  7215  00100E  6FAB               	movwf	(_Currentcomp+3)& (0+255),b
  7216                           
  7217                           ;PDU.c: 99: Currentcomp[2] = ((data[4] << 8) | data[5]);
  7218  001010  0100               	movlb	0	; () banked
  7219  001012  51B9               	movf	(_data+5)& (0+255),w,b
  7220  001014  C0B8  F01C         	movff	_data+4,??_ComputeStorageData
  7221  001018  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7222  00101A  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7223  00101E  6A1C               	clrf	??_ComputeStorageData,c
  7224  001020  101C               	iorwf	??_ComputeStorageData,w,c
  7225  001022  0100               	movlb	0	; () banked
  7226  001024  6FAC               	movwf	(_Currentcomp+4)& (0+255),b
  7227  001026  501D               	movf	??_ComputeStorageData+1,w,c
  7228  001028  0100               	movlb	0	; () banked
  7229  00102A  6FAD               	movwf	(_Currentcomp+5)& (0+255),b
  7230                           
  7231                           ;PDU.c: 100: Currentcomp[3] = ((data[6] << 8) | data[7]);
  7232  00102C  0100               	movlb	0	; () banked
  7233  00102E  51BB               	movf	(_data+7)& (0+255),w,b
  7234  001030  C0BA  F01C         	movff	_data+6,??_ComputeStorageData
  7235  001034  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7236  001036  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7237  00103A  6A1C               	clrf	??_ComputeStorageData,c
  7238  00103C  101C               	iorwf	??_ComputeStorageData,w,c
  7239  00103E  0100               	movlb	0	; () banked
  7240  001040  6FAE               	movwf	(_Currentcomp+6)& (0+255),b
  7241  001042  501D               	movf	??_ComputeStorageData+1,w,c
  7242  001044  0100               	movlb	0	; () banked
  7243  001046  6FAF               	movwf	(_Currentcomp+7)& (0+255),b
  7244                           
  7245                           ;PDU.c: 101: Currentcomp[4] = ((data[8] << 8) | data[9]);
  7246  001048  0100               	movlb	0	; () banked
  7247  00104A  51BD               	movf	(_data+9)& (0+255),w,b
  7248  00104C  C0BC  F01C         	movff	_data+8,??_ComputeStorageData
  7249  001050  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7250  001052  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7251  001056  6A1C               	clrf	??_ComputeStorageData,c
  7252  001058  101C               	iorwf	??_ComputeStorageData,w,c
  7253  00105A  0100               	movlb	0	; () banked
  7254  00105C  6FB0               	movwf	(_Currentcomp+8)& (0+255),b
  7255  00105E  501D               	movf	??_ComputeStorageData+1,w,c
  7256  001060  0100               	movlb	0	; () banked
  7257  001062  6FB1               	movwf	(_Currentcomp+9)& (0+255),b
  7258                           
  7259                           ;PDU.c: 102: Currentcomp[5] = ((data[10] << 8) | data[11]);
  7260  001064  0100               	movlb	0	; () banked
  7261  001066  51BF               	movf	(_data+11)& (0+255),w,b
  7262  001068  C0BE  F01C         	movff	_data+10,??_ComputeStorageData
  7263  00106C  6A1D               	clrf	(??_ComputeStorageData+1)& (0+255),c
  7264  00106E  C01C  F01D         	movff	??_ComputeStorageData,??_ComputeStorageData+1
  7265  001072  6A1C               	clrf	??_ComputeStorageData,c
  7266  001074  101C               	iorwf	??_ComputeStorageData,w,c
  7267  001076  0100               	movlb	0	; () banked
  7268  001078  6FB2               	movwf	(_Currentcomp+10)& (0+255),b
  7269  00107A  501D               	movf	??_ComputeStorageData+1,w,c
  7270  00107C  0100               	movlb	0	; () banked
  7271  00107E  6FB3               	movwf	(_Currentcomp+11)& (0+255),b
  7272                           
  7273                           ; BSR set to: 0
  7274  001080  0012               	return		;funcret
  7275  001082                     __end_of_ComputeStorageData:
  7276                           	opt stack 0
  7277                           tosu	equ	0xFFF
  7278                           tosh	equ	0xFFE
  7279                           tosl	equ	0xFFD
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           intcon	equ	0xFF2
  7288                           intcon2	equ	0xFF1
  7289                           postinc0	equ	0xFEE
  7290                           wreg	equ	0xFE8
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           plusw2	equ	0xFDB
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function _DATAEE_ReadByte *****************
  7300 ;; Defined at:
  7301 ;;		line 143 in file "mcc_generated_files/memory.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  bAdd            1    wreg     unsigned char 
  7304 ;; Auto vars:     Size  Location     Type
  7305 ;;  bAdd            1   26[COMRAM] unsigned char 
  7306 ;; Return value:  Size  Location     Type
  7307 ;;                  1    wreg      unsigned char 
  7308 ;; Registers used:
  7309 ;;		wreg, status,2
  7310 ;; Tracked objects:
  7311 ;;		On entry : 0/0
  7312 ;;		On exit  : 0/0
  7313 ;;		Unchanged: 0/0
  7314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7315 ;;      Params:         0       0       0       0       0       0       0
  7316 ;;      Locals:         1       0       0       0       0       0       0
  7317 ;;      Temps:          0       0       0       0       0       0       0
  7318 ;;      Totals:         1       0       0       0       0       0       0
  7319 ;;Total ram usage:        1 bytes
  7320 ;; Hardware stack levels used:    1
  7321 ;; Hardware stack levels required when called:    4
  7322 ;; This function calls:
  7323 ;;		Nothing
  7324 ;; This function is called by:
  7325 ;;		_ComputeStorageData
  7326 ;; This function uses a non-reentrant model
  7327 ;;
  7328                           
  7329                           	psect	text43
  7330  001BC2                     __ptext43:
  7331                           	opt stack 0
  7332  001BC2                     _DATAEE_ReadByte:
  7333                           	opt stack 24
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;incstack = 0
  7337                           ;DATAEE_ReadByte@bAdd stored from wreg
  7338  001BC2  6E1B               	movwf	DATAEE_ReadByte@bAdd,c
  7339                           
  7340                           ;memory.c: 145: EEADR = (bAdd & 0xFF);
  7341  001BC4  C01B  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  7342                           
  7343                           ;memory.c: 146: EECON1bits.CFGS = 0;
  7344  001BC8  9CA6               	bcf	4006,6,c	;volatile
  7345                           
  7346                           ;memory.c: 147: EECON1bits.EEPGD = 0;
  7347  001BCA  9EA6               	bcf	4006,7,c	;volatile
  7348                           
  7349                           ;memory.c: 148: EECON1bits.RD = 1;
  7350  001BCC  80A6               	bsf	4006,0,c	;volatile
  7351                           
  7352                           ;memory.c: 149: __nop();
  7353  001BCE  F000               	nop	
  7354                           
  7355                           ;memory.c: 150: __nop();
  7356  001BD0  F000               	nop	
  7357                           
  7358                           ;memory.c: 152: return (EEDATA);
  7359  001BD2  50A8               	movf	4008,w,c	;volatile
  7360  001BD4  0012               	return	
  7361  001BD6  0012               	return		;funcret
  7362  001BD8                     __end_of_DATAEE_ReadByte:
  7363                           	opt stack 0
  7364                           tosu	equ	0xFFF
  7365                           tosh	equ	0xFFE
  7366                           tosl	equ	0xFFD
  7367                           pclath	equ	0xFFA
  7368                           tblptru	equ	0xFF8
  7369                           tblptrh	equ	0xFF7
  7370                           tblptrl	equ	0xFF6
  7371                           tablat	equ	0xFF5
  7372                           prodh	equ	0xFF4
  7373                           prodl	equ	0xFF3
  7374                           intcon	equ	0xFF2
  7375                           intcon2	equ	0xFF1
  7376                           postinc0	equ	0xFEE
  7377                           wreg	equ	0xFE8
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           plusw2	equ	0xFDB
  7382                           fsr2h	equ	0xFDA
  7383                           fsr2l	equ	0xFD9
  7384                           status	equ	0xFD8
  7385                           
  7386 ;; *************** function _INTERRUPT_InterruptManager *****************
  7387 ;; Defined at:
  7388 ;;		line 67 in file "mcc_generated_files/interrupt_manager.c"
  7389 ;; Parameters:    Size  Location     Type
  7390 ;;		None
  7391 ;; Auto vars:     Size  Location     Type
  7392 ;;		None
  7393 ;; Return value:  Size  Location     Type
  7394 ;;		None               void
  7395 ;; Registers used:
  7396 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7397 ;; Tracked objects:
  7398 ;;		On entry : 0/0
  7399 ;;		On exit  : 0/0
  7400 ;;		Unchanged: 0/0
  7401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7402 ;;      Params:         0       0       0       0       0       0       0
  7403 ;;      Locals:         0       0       0       0       0       0       0
  7404 ;;      Temps:         14       0       0       0       0       0       0
  7405 ;;      Totals:        14       0       0       0       0       0       0
  7406 ;;Total ram usage:       14 bytes
  7407 ;; Hardware stack levels used:    1
  7408 ;; Hardware stack levels required when called:    3
  7409 ;; This function calls:
  7410 ;;		_ADC_ISR
  7411 ;;		_EUSART1_Receive_ISR
  7412 ;;		_EUSART1_Transmit_ISR
  7413 ;; This function is called by:
  7414 ;;		Interrupt level 2
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           	psect	intcode
  7419  000008                     __pintcode:
  7420                           	opt stack 0
  7421  000008                     _INTERRUPT_InterruptManager:
  7422                           	opt stack 21
  7423                           
  7424                           ;incstack = 0
  7425  000008  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  7426  00000C  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  7427  000010  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  7428  000014  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  7429  000018  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  7430  00001C  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  7431  000020  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  7432  000024  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  7433  000028  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  7434  00002C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  7435  000030  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  7436  000034  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  7437  000038  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  7438  00003C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  7439                           
  7440                           ;interrupt_manager.c: 70: if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  7441  000040  BA9D               	btfsc	3997,5,c	;volatile
  7442  000042  AA9E               	btfss	3998,5,c	;volatile
  7443  000044  D003               	goto	i2l106
  7444                           
  7445                           ;interrupt_manager.c: 71: {
  7446                           ;interrupt_manager.c: 72: EUSART1_Receive_ISR();
  7447  000046  EC87  F00D         	call	_EUSART1_Receive_ISR	;wreg free
  7448                           
  7449                           ;interrupt_manager.c: 73: }
  7450  00004A  D00C               	goto	i2l112
  7451  00004C                     i2l106:
  7452                           
  7453                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  7454  00004C  B89D               	btfsc	3997,4,c	;volatile
  7455  00004E  A89E               	btfss	3998,4,c	;volatile
  7456  000050  D003               	goto	i2l108
  7457                           
  7458                           ;interrupt_manager.c: 75: {
  7459                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
  7460  000052  ECD7  F00C         	call	_EUSART1_Transmit_ISR	;wreg free
  7461                           
  7462                           ;interrupt_manager.c: 77: }
  7463  000056  D006               	goto	i2l112
  7464  000058                     i2l108:
  7465                           
  7466                           ;interrupt_manager.c: 78: else if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  7467  000058  BC9D               	btfsc	3997,6,c	;volatile
  7468  00005A  AC9E               	btfss	3998,6,c	;volatile
  7469  00005C  D003               	goto	i2l112
  7470                           
  7471                           ;interrupt_manager.c: 79: {
  7472                           ;interrupt_manager.c: 80: ADC_ISR();
  7473  00005E  EC0B  F00E         	call	_ADC_ISR	;wreg free
  7474                           
  7475                           ;interrupt_manager.c: 82: else
  7476                           ;interrupt_manager.c: 83: {
  7477                           
  7478                           ;interrupt_manager.c: 81: }
  7479  000062  D000               	goto	i2l112
  7480  000064                     i2l112:
  7481  000064  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  7482  000068  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  7483  00006C  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  7484  000070  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  7485  000074  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  7486  000078  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  7487  00007C  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  7488  000080  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  7489  000084  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  7490  000088  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  7491  00008C  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  7492  000090  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  7493  000094  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  7494  000098  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  7495  00009C  0011               	retfie		f
  7496  00009E                     __end_of_INTERRUPT_InterruptManager:
  7497                           	opt stack 0
  7498                           tosu	equ	0xFFF
  7499                           tosh	equ	0xFFE
  7500                           tosl	equ	0xFFD
  7501                           pclatu	equ	0xFFB
  7502                           pclath	equ	0xFFA
  7503                           tblptru	equ	0xFF8
  7504                           tblptrh	equ	0xFF7
  7505                           tblptrl	equ	0xFF6
  7506                           tablat	equ	0xFF5
  7507                           prodh	equ	0xFF4
  7508                           prodl	equ	0xFF3
  7509                           intcon	equ	0xFF2
  7510                           intcon2	equ	0xFF1
  7511                           postinc0	equ	0xFEE
  7512                           fsr0h	equ	0xFEA
  7513                           fsr0l	equ	0xFE9
  7514                           wreg	equ	0xFE8
  7515                           fsr1h	equ	0xFE2
  7516                           fsr1l	equ	0xFE1
  7517                           indf2	equ	0xFDF
  7518                           postinc2	equ	0xFDE
  7519                           postdec2	equ	0xFDD
  7520                           plusw2	equ	0xFDB
  7521                           fsr2h	equ	0xFDA
  7522                           fsr2l	equ	0xFD9
  7523                           status	equ	0xFD8
  7524                           
  7525 ;; *************** function _EUSART1_Transmit_ISR *****************
  7526 ;; Defined at:
  7527 ;;		line 150 in file "UART.c"
  7528 ;; Parameters:    Size  Location     Type
  7529 ;;		None
  7530 ;; Auto vars:     Size  Location     Type
  7531 ;;		None
  7532 ;; Return value:  Size  Location     Type
  7533 ;;		None               void
  7534 ;; Registers used:
  7535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7536 ;; Tracked objects:
  7537 ;;		On entry : 0/0
  7538 ;;		On exit  : 0/0
  7539 ;;		Unchanged: 0/0
  7540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7541 ;;      Params:         0       0       0       0       0       0       0
  7542 ;;      Locals:         0       0       0       0       0       0       0
  7543 ;;      Temps:          0       0       0       0       0       0       0
  7544 ;;      Totals:         0       0       0       0       0       0       0
  7545 ;;Total ram usage:        0 bytes
  7546 ;; Hardware stack levels used:    1
  7547 ;; Hardware stack levels required when called:    2
  7548 ;; This function calls:
  7549 ;;		i2_UART_buff_get
  7550 ;;		i2_UART_buff_size
  7551 ;; This function is called by:
  7552 ;;		_INTERRUPT_InterruptManager
  7553 ;; This function uses a non-reentrant model
  7554 ;;
  7555                           
  7556                           	psect	text45
  7557  0019AE                     __ptext45:
  7558                           	opt stack 0
  7559  0019AE                     _EUSART1_Transmit_ISR:
  7560                           	opt stack 21
  7561                           
  7562                           ;UART.c: 152: if (UART_buff_size(&output_buffer) > 0) {
  7563                           
  7564                           ;incstack = 0
  7565  0019AE  0E00               	movlw	low _output_buffer
  7566  0019B0  6E01               	movwf	i2UART_buff_size@_this,c
  7567  0019B2  0E04               	movlw	high _output_buffer
  7568  0019B4  6E02               	movwf	i2UART_buff_size@_this+1,c
  7569  0019B6  ECD5  F00D         	call	i2_UART_buff_size	;wreg free
  7570  0019BA  BE02               	btfsc	?i2_UART_buff_size+1,7,c
  7571  0019BC  D00D               	goto	i2l3103
  7572  0019BE  5002               	movf	?i2_UART_buff_size+1,w,c
  7573  0019C0  E103               	bnz	i2u256_40
  7574  0019C2  0401               	decf	?i2_UART_buff_size,w,c
  7575  0019C4  A0D8               	btfss	status,0,c
  7576  0019C6  D008               	goto	i2l3103
  7577  0019C8                     i2u256_40:
  7578                           
  7579                           ;UART.c: 153: TXREG1 = UART_buff_get(&output_buffer);
  7580  0019C8  0E00               	movlw	low _output_buffer
  7581  0019CA  6E07               	movwf	i2UART_buff_get@_this,c
  7582  0019CC  0E04               	movlw	high _output_buffer
  7583  0019CE  6E08               	movwf	i2UART_buff_get@_this+1,c
  7584  0019D0  EC11  F00A         	call	i2_UART_buff_get	;wreg free
  7585  0019D4  6EAD               	movwf	4013,c	;volatile
  7586                           
  7587                           ;UART.c: 154: } else {
  7588  0019D6  0012               	return	
  7589  0019D8                     i2l3103:
  7590                           
  7591                           ;UART.c: 155: Transmit_stall = 1;
  7592  0019D8  0E01               	movlw	1
  7593  0019DA  6E45               	movwf	_Transmit_stall,c
  7594                           
  7595                           ;UART.c: 156: PIE1bits.TX1IE = 0;
  7596  0019DC  989D               	bcf	3997,4,c	;volatile
  7597  0019DE  0012               	return	
  7598  0019E0  0012               	return		;funcret
  7599  0019E2                     __end_of_EUSART1_Transmit_ISR:
  7600                           	opt stack 0
  7601                           tosu	equ	0xFFF
  7602                           tosh	equ	0xFFE
  7603                           tosl	equ	0xFFD
  7604                           pclatu	equ	0xFFB
  7605                           pclath	equ	0xFFA
  7606                           tblptru	equ	0xFF8
  7607                           tblptrh	equ	0xFF7
  7608                           tblptrl	equ	0xFF6
  7609                           tablat	equ	0xFF5
  7610                           prodh	equ	0xFF4
  7611                           prodl	equ	0xFF3
  7612                           intcon	equ	0xFF2
  7613                           intcon2	equ	0xFF1
  7614                           postinc0	equ	0xFEE
  7615                           fsr0h	equ	0xFEA
  7616                           fsr0l	equ	0xFE9
  7617                           wreg	equ	0xFE8
  7618                           fsr1h	equ	0xFE2
  7619                           fsr1l	equ	0xFE1
  7620                           indf2	equ	0xFDF
  7621                           postinc2	equ	0xFDE
  7622                           postdec2	equ	0xFDD
  7623                           plusw2	equ	0xFDB
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function i2_UART_buff_size *****************
  7629 ;; Defined at:
  7630 ;;		line 102 in file "UART.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  _this           2    0[COMRAM] PTR struct UART_ring_buf
  7633 ;;		 -> output_buffer(206), input_buffer(206), 
  7634 ;; Auto vars:     Size  Location     Type
  7635 ;;		None
  7636 ;; Return value:  Size  Location     Type
  7637 ;;                  2    0[COMRAM] int 
  7638 ;; Registers used:
  7639 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7640 ;; Tracked objects:
  7641 ;;		On entry : 0/0
  7642 ;;		On exit  : 0/0
  7643 ;;		Unchanged: 0/0
  7644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7645 ;;      Params:         2       0       0       0       0       0       0
  7646 ;;      Locals:         0       0       0       0       0       0       0
  7647 ;;      Temps:          0       0       0       0       0       0       0
  7648 ;;      Totals:         2       0       0       0       0       0       0
  7649 ;;Total ram usage:        2 bytes
  7650 ;; Hardware stack levels used:    1
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_EUSART1_Transmit_ISR
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text46
  7659  001BAA                     __ptext46:
  7660                           	opt stack 0
  7661  001BAA                     i2_UART_buff_size:
  7662                           	opt stack 22
  7663                           
  7664                           ;UART.c: 103: return (_this->count);
  7665                           
  7666                           ;incstack = 0
  7667  001BAA  EE20 F0CC          	lfsr	2,204
  7668  001BAE  5001               	movf	i2UART_buff_size@_this,w,c
  7669  001BB0  26D9               	addwf	fsr2l,f,c
  7670  001BB2  5002               	movf	i2UART_buff_size@_this+1,w,c
  7671  001BB4  22DA               	addwfc	fsr2h,f,c
  7672  001BB6  CFDE F001          	movff	postinc2,?i2_UART_buff_size
  7673  001BBA  CFDD F002          	movff	postdec2,?i2_UART_buff_size+1
  7674  001BBE  0012               	return	
  7675  001BC0  0012               	return		;funcret
  7676  001BC2                     __end_ofi2_UART_buff_size:
  7677                           	opt stack 0
  7678                           tosu	equ	0xFFF
  7679                           tosh	equ	0xFFE
  7680                           tosl	equ	0xFFD
  7681                           pclatu	equ	0xFFB
  7682                           pclath	equ	0xFFA
  7683                           tblptru	equ	0xFF8
  7684                           tblptrh	equ	0xFF7
  7685                           tblptrl	equ	0xFF6
  7686                           tablat	equ	0xFF5
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           intcon	equ	0xFF2
  7690                           intcon2	equ	0xFF1
  7691                           postinc0	equ	0xFEE
  7692                           fsr0h	equ	0xFEA
  7693                           fsr0l	equ	0xFE9
  7694                           wreg	equ	0xFE8
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           plusw2	equ	0xFDB
  7701                           fsr2h	equ	0xFDA
  7702                           fsr2l	equ	0xFD9
  7703                           status	equ	0xFD8
  7704                           
  7705 ;; *************** function i2_UART_buff_get *****************
  7706 ;; Defined at:
  7707 ;;		line 81 in file "UART.c"
  7708 ;; Parameters:    Size  Location     Type
  7709 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7710 ;;		 -> output_buffer(206), input_buffer(206), 
  7711 ;; Auto vars:     Size  Location     Type
  7712 ;;  UART_buff_ge    1   10[COMRAM] unsigned char 
  7713 ;; Return value:  Size  Location     Type
  7714 ;;                  1    wreg      unsigned char 
  7715 ;; Registers used:
  7716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7717 ;; Tracked objects:
  7718 ;;		On entry : 0/0
  7719 ;;		On exit  : 0/0
  7720 ;;		Unchanged: 0/0
  7721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7722 ;;      Params:         2       0       0       0       0       0       0
  7723 ;;      Locals:         1       0       0       0       0       0       0
  7724 ;;      Temps:          2       0       0       0       0       0       0
  7725 ;;      Totals:         5       0       0       0       0       0       0
  7726 ;;Total ram usage:        5 bytes
  7727 ;; Hardware stack levels used:    1
  7728 ;; Hardware stack levels required when called:    1
  7729 ;; This function calls:
  7730 ;;		i2_UART_buff_modulo_inc
  7731 ;; This function is called by:
  7732 ;;		_EUSART1_Transmit_ISR
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           	psect	text47
  7737  001422                     __ptext47:
  7738                           	opt stack 0
  7739  001422                     i2_UART_buff_get:
  7740                           	opt stack 21
  7741                           
  7742                           ;UART.c: 82: unsigned char c;
  7743                           ;UART.c: 83: if (_this->count > 0) {
  7744                           
  7745                           ;incstack = 0
  7746  001422  EE20 F0CC          	lfsr	2,204
  7747  001426  5007               	movf	i2UART_buff_get@_this,w,c
  7748  001428  26D9               	addwf	fsr2l,f,c
  7749  00142A  5008               	movf	i2UART_buff_get@_this+1,w,c
  7750  00142C  22DA               	addwfc	fsr2h,f,c
  7751  00142E  0E01               	movlw	1
  7752  001430  BEDB               	btfsc	plusw2,7,c
  7753  001432  D03C               	goto	i2l3075
  7754  001434  0E01               	movlw	1
  7755  001436  50DB               	movf	plusw2,w,c
  7756  001438  E103               	bnz	i2u253_40
  7757  00143A  04DE               	decf	postinc2,w,c
  7758  00143C  A0D8               	btfss	status,0,c
  7759  00143E  D036               	goto	i2l3075
  7760  001440                     i2u253_40:
  7761                           
  7762                           ;UART.c: 84: c = _this->buf[_this->tail];
  7763  001440  EE20 F0CA          	lfsr	2,202
  7764  001444  5007               	movf	i2UART_buff_get@_this,w,c
  7765  001446  26D9               	addwf	fsr2l,f,c
  7766  001448  5008               	movf	i2UART_buff_get@_this+1,w,c
  7767  00144A  22DA               	addwfc	fsr2h,f,c
  7768  00144C  CFDE F009          	movff	postinc2,??i2_UART_buff_get
  7769  001450  CFDD F00A          	movff	postdec2,??i2_UART_buff_get+1
  7770  001454  5009               	movf	??i2_UART_buff_get,w,c
  7771  001456  2407               	addwf	i2UART_buff_get@_this,w,c
  7772  001458  6ED9               	movwf	fsr2l,c
  7773  00145A  500A               	movf	??i2_UART_buff_get+1,w,c
  7774  00145C  2008               	addwfc	i2UART_buff_get@_this+1,w,c
  7775  00145E  6EDA               	movwf	fsr2h,c
  7776  001460  50DF               	movf	indf2,w,c
  7777  001462  6E0B               	movwf	i2UART_buff_get@c,c
  7778                           
  7779                           ;UART.c: 85: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  7780  001464  EE20 F0CA          	lfsr	2,202
  7781  001468  5007               	movf	i2UART_buff_get@_this,w,c
  7782  00146A  26D9               	addwf	fsr2l,f,c
  7783  00146C  5008               	movf	i2UART_buff_get@_this+1,w,c
  7784  00146E  22DA               	addwfc	fsr2h,f,c
  7785  001470  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  7786  001474  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  7787  001478  0E00               	movlw	0
  7788  00147A  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  7789  00147C  0EC8               	movlw	200
  7790  00147E  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  7791  001480  EC4E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  7792  001484  EE20 F0CA          	lfsr	2,202
  7793  001488  5007               	movf	i2UART_buff_get@_this,w,c
  7794  00148A  26D9               	addwf	fsr2l,f,c
  7795  00148C  5008               	movf	i2UART_buff_get@_this+1,w,c
  7796  00148E  22DA               	addwfc	fsr2h,f,c
  7797  001490  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  7798  001494  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  7799                           
  7800                           ;UART.c: 86: --_this->count;
  7801  001498  EE20 F0CC          	lfsr	2,204
  7802  00149C  5007               	movf	i2UART_buff_get@_this,w,c
  7803  00149E  26D9               	addwf	fsr2l,f,c
  7804  0014A0  5008               	movf	i2UART_buff_get@_this+1,w,c
  7805  0014A2  22DA               	addwfc	fsr2h,f,c
  7806  0014A4  06DE               	decf	postinc2,f,c
  7807  0014A6  0E00               	movlw	0
  7808  0014A8  5ADD               	subwfb	postdec2,f,c
  7809                           
  7810                           ;UART.c: 87: } else {
  7811  0014AA  D002               	goto	i2l726
  7812  0014AC                     i2l3075:
  7813                           
  7814                           ;UART.c: 88: c = 0;
  7815  0014AC  0E00               	movlw	0
  7816  0014AE  6E0B               	movwf	i2UART_buff_get@c,c
  7817  0014B0                     i2l726:
  7818                           
  7819                           ;UART.c: 89: }
  7820                           ;UART.c: 90: return (c);
  7821  0014B0  500B               	movf	i2UART_buff_get@c,w,c
  7822  0014B2  0012               	return	
  7823  0014B4  0012               	return		;funcret
  7824  0014B6                     __end_ofi2_UART_buff_get:
  7825                           	opt stack 0
  7826                           tosu	equ	0xFFF
  7827                           tosh	equ	0xFFE
  7828                           tosl	equ	0xFFD
  7829                           pclatu	equ	0xFFB
  7830                           pclath	equ	0xFFA
  7831                           tblptru	equ	0xFF8
  7832                           tblptrh	equ	0xFF7
  7833                           tblptrl	equ	0xFF6
  7834                           tablat	equ	0xFF5
  7835                           prodh	equ	0xFF4
  7836                           prodl	equ	0xFF3
  7837                           intcon	equ	0xFF2
  7838                           intcon2	equ	0xFF1
  7839                           postinc0	equ	0xFEE
  7840                           fsr0h	equ	0xFEA
  7841                           fsr0l	equ	0xFE9
  7842                           wreg	equ	0xFE8
  7843                           fsr1h	equ	0xFE2
  7844                           fsr1l	equ	0xFE1
  7845                           indf2	equ	0xFDF
  7846                           postinc2	equ	0xFDE
  7847                           postdec2	equ	0xFDD
  7848                           plusw2	equ	0xFDB
  7849                           fsr2h	equ	0xFDA
  7850                           fsr2l	equ	0xFD9
  7851                           status	equ	0xFD8
  7852                           
  7853 ;; *************** function _EUSART1_Receive_ISR *****************
  7854 ;; Defined at:
  7855 ;;		line 139 in file "UART.c"
  7856 ;; Parameters:    Size  Location     Type
  7857 ;;		None
  7858 ;; Auto vars:     Size  Location     Type
  7859 ;;  data            1   11[COMRAM] unsigned char 
  7860 ;; Return value:  Size  Location     Type
  7861 ;;		None               void
  7862 ;; Registers used:
  7863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7864 ;; Tracked objects:
  7865 ;;		On entry : 0/0
  7866 ;;		On exit  : 0/0
  7867 ;;		Unchanged: 0/0
  7868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7869 ;;      Params:         0       0       0       0       0       0       0
  7870 ;;      Locals:         1       0       0       0       0       0       0
  7871 ;;      Temps:          0       0       0       0       0       0       0
  7872 ;;      Totals:         1       0       0       0       0       0       0
  7873 ;;Total ram usage:        1 bytes
  7874 ;; Hardware stack levels used:    1
  7875 ;; Hardware stack levels required when called:    2
  7876 ;; This function calls:
  7877 ;;		i2_UART_buff_put
  7878 ;; This function is called by:
  7879 ;;		_INTERRUPT_InterruptManager
  7880 ;; This function uses a non-reentrant model
  7881 ;;
  7882                           
  7883                           	psect	text48
  7884  001B0E                     __ptext48:
  7885                           	opt stack 0
  7886  001B0E                     _EUSART1_Receive_ISR:
  7887                           	opt stack 21
  7888                           
  7889                           ;UART.c: 140: if (1 == RC1STAbits.OERR) {
  7890                           
  7891                           ;incstack = 0
  7892  001B0E  A2AB               	btfss	4011,1,c	;volatile
  7893  001B10  D002               	goto	i2l757
  7894                           
  7895                           ;UART.c: 143: RC1STAbits.CREN = 0;
  7896  001B12  98AB               	bcf	4011,4,c	;volatile
  7897                           
  7898                           ;UART.c: 144: RC1STAbits.CREN = 1;
  7899  001B14  88AB               	bsf	4011,4,c	;volatile
  7900  001B16                     i2l757:
  7901                           
  7902                           ;UART.c: 145: }
  7903                           ;UART.c: 146: unsigned char data = RCREG1;
  7904  001B16  CFAE F00C          	movff	4014,EUSART1_Receive_ISR@data	;volatile
  7905                           
  7906                           ;UART.c: 147: UART_buff_put(&input_buffer, data);
  7907  001B1A  0E00               	movlw	low _input_buffer
  7908  001B1C  6E07               	movwf	i2UART_buff_put@_this,c
  7909  001B1E  0E03               	movlw	high _input_buffer
  7910  001B20  6E08               	movwf	i2UART_buff_put@_this+1,c
  7911  001B22  C00C  F009         	movff	EUSART1_Receive_ISR@data,i2UART_buff_put@c
  7912  001B26  EC5B  F006         	call	i2_UART_buff_put	;wreg free
  7913  001B2A  0012               	return		;funcret
  7914  001B2C                     __end_of_EUSART1_Receive_ISR:
  7915                           	opt stack 0
  7916                           tosu	equ	0xFFF
  7917                           tosh	equ	0xFFE
  7918                           tosl	equ	0xFFD
  7919                           pclatu	equ	0xFFB
  7920                           pclath	equ	0xFFA
  7921                           tblptru	equ	0xFF8
  7922                           tblptrh	equ	0xFF7
  7923                           tblptrl	equ	0xFF6
  7924                           tablat	equ	0xFF5
  7925                           prodh	equ	0xFF4
  7926                           prodl	equ	0xFF3
  7927                           intcon	equ	0xFF2
  7928                           intcon2	equ	0xFF1
  7929                           postinc0	equ	0xFEE
  7930                           fsr0h	equ	0xFEA
  7931                           fsr0l	equ	0xFE9
  7932                           wreg	equ	0xFE8
  7933                           fsr1h	equ	0xFE2
  7934                           fsr1l	equ	0xFE1
  7935                           indf2	equ	0xFDF
  7936                           postinc2	equ	0xFDE
  7937                           postdec2	equ	0xFDD
  7938                           plusw2	equ	0xFDB
  7939                           fsr2h	equ	0xFDA
  7940                           fsr2l	equ	0xFD9
  7941                           status	equ	0xFD8
  7942                           
  7943 ;; *************** function i2_UART_buff_put *****************
  7944 ;; Defined at:
  7945 ;;		line 68 in file "UART.c"
  7946 ;; Parameters:    Size  Location     Type
  7947 ;;  _this           2    6[COMRAM] PTR struct UART_ring_buf
  7948 ;;		 -> output_buffer(206), input_buffer(206), 
  7949 ;;  c               1    8[COMRAM] const unsigned char 
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;		None
  7952 ;; Return value:  Size  Location     Type
  7953 ;;		None               void
  7954 ;; Registers used:
  7955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7961 ;;      Params:         3       0       0       0       0       0       0
  7962 ;;      Locals:         0       0       0       0       0       0       0
  7963 ;;      Temps:          2       0       0       0       0       0       0
  7964 ;;      Totals:         5       0       0       0       0       0       0
  7965 ;;Total ram usage:        5 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    1
  7968 ;; This function calls:
  7969 ;;		i2_UART_buff_modulo_inc
  7970 ;; This function is called by:
  7971 ;;		_EUSART1_Receive_ISR
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text49
  7976  000CB6                     __ptext49:
  7977                           	opt stack 0
  7978  000CB6                     i2_UART_buff_put:
  7979                           	opt stack 21
  7980                           
  7981                           ;UART.c: 69: if (_this->count < 200) {
  7982                           
  7983                           ;incstack = 0
  7984  000CB6  EE20 F0CC          	lfsr	2,204
  7985  000CBA  5007               	movf	i2UART_buff_put@_this,w,c
  7986  000CBC  26D9               	addwf	fsr2l,f,c
  7987  000CBE  5008               	movf	i2UART_buff_put@_this+1,w,c
  7988  000CC0  22DA               	addwfc	fsr2h,f,c
  7989  000CC2  0E01               	movlw	1
  7990  000CC4  BEDB               	btfsc	plusw2,7,c
  7991  000CC6  D007               	goto	i2l3055
  7992  000CC8  0E01               	movlw	1
  7993  000CCA  50DB               	movf	plusw2,w,c
  7994  000CCC  E13A               	bnz	i2l3061
  7995  000CCE  0EC8               	movlw	200
  7996  000CD0  5CDE               	subwf	postinc2,w,c
  7997  000CD2  B0D8               	btfsc	status,0,c
  7998  000CD4  D036               	goto	i2l3061
  7999  000CD6                     i2l3055:
  8000                           
  8001                           ;UART.c: 70: _this->buf[_this->head] = c;
  8002  000CD6  EE20 F0C8          	lfsr	2,200
  8003  000CDA  5007               	movf	i2UART_buff_put@_this,w,c
  8004  000CDC  26D9               	addwf	fsr2l,f,c
  8005  000CDE  5008               	movf	i2UART_buff_put@_this+1,w,c
  8006  000CE0  22DA               	addwfc	fsr2h,f,c
  8007  000CE2  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8008  000CE6  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8009  000CEA  500A               	movf	??i2_UART_buff_put,w,c
  8010  000CEC  2407               	addwf	i2UART_buff_put@_this,w,c
  8011  000CEE  6ED9               	movwf	fsr2l,c
  8012  000CF0  500B               	movf	??i2_UART_buff_put+1,w,c
  8013  000CF2  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8014  000CF4  6EDA               	movwf	fsr2h,c
  8015  000CF6  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8016                           
  8017                           ;UART.c: 71: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8018  000CFA  EE20 F0C8          	lfsr	2,200
  8019  000CFE  5007               	movf	i2UART_buff_put@_this,w,c
  8020  000D00  26D9               	addwf	fsr2l,f,c
  8021  000D02  5008               	movf	i2UART_buff_put@_this+1,w,c
  8022  000D04  22DA               	addwfc	fsr2h,f,c
  8023  000D06  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8024  000D0A  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8025  000D0E  0E00               	movlw	0
  8026  000D10  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8027  000D12  0EC8               	movlw	200
  8028  000D14  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8029  000D16  EC4E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8030  000D1A  EE20 F0C8          	lfsr	2,200
  8031  000D1E  5007               	movf	i2UART_buff_put@_this,w,c
  8032  000D20  26D9               	addwf	fsr2l,f,c
  8033  000D22  5008               	movf	i2UART_buff_put@_this+1,w,c
  8034  000D24  22DA               	addwfc	fsr2h,f,c
  8035  000D26  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8036  000D2A  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8037                           
  8038                           ;UART.c: 72: ++_this->count;
  8039  000D2E  EE20 F0CC          	lfsr	2,204
  8040  000D32  5007               	movf	i2UART_buff_put@_this,w,c
  8041  000D34  26D9               	addwf	fsr2l,f,c
  8042  000D36  5008               	movf	i2UART_buff_put@_this+1,w,c
  8043  000D38  22DA               	addwfc	fsr2h,f,c
  8044  000D3A  2ADE               	incf	postinc2,f,c
  8045  000D3C  0E00               	movlw	0
  8046  000D3E  22DD               	addwfc	postdec2,f,c
  8047                           
  8048                           ;UART.c: 73: } else {
  8049  000D40  0012               	return	
  8050  000D42                     i2l3061:
  8051                           
  8052                           ;UART.c: 74: _this->buf[_this->head] = c;
  8053  000D42  EE20 F0C8          	lfsr	2,200
  8054  000D46  5007               	movf	i2UART_buff_put@_this,w,c
  8055  000D48  26D9               	addwf	fsr2l,f,c
  8056  000D4A  5008               	movf	i2UART_buff_put@_this+1,w,c
  8057  000D4C  22DA               	addwfc	fsr2h,f,c
  8058  000D4E  CFDE F00A          	movff	postinc2,??i2_UART_buff_put
  8059  000D52  CFDD F00B          	movff	postdec2,??i2_UART_buff_put+1
  8060  000D56  500A               	movf	??i2_UART_buff_put,w,c
  8061  000D58  2407               	addwf	i2UART_buff_put@_this,w,c
  8062  000D5A  6ED9               	movwf	fsr2l,c
  8063  000D5C  500B               	movf	??i2_UART_buff_put+1,w,c
  8064  000D5E  2008               	addwfc	i2UART_buff_put@_this+1,w,c
  8065  000D60  6EDA               	movwf	fsr2h,c
  8066  000D62  C009  FFDF         	movff	i2UART_buff_put@c,indf2
  8067                           
  8068                           ;UART.c: 75: _this->head = UART_buff_modulo_inc(_this->head, 200);
  8069  000D66  EE20 F0C8          	lfsr	2,200
  8070  000D6A  5007               	movf	i2UART_buff_put@_this,w,c
  8071  000D6C  26D9               	addwf	fsr2l,f,c
  8072  000D6E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8073  000D70  22DA               	addwfc	fsr2h,f,c
  8074  000D72  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8075  000D76  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8076  000D7A  0E00               	movlw	0
  8077  000D7C  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8078  000D7E  0EC8               	movlw	200
  8079  000D80  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8080  000D82  EC4E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8081  000D86  EE20 F0C8          	lfsr	2,200
  8082  000D8A  5007               	movf	i2UART_buff_put@_this,w,c
  8083  000D8C  26D9               	addwf	fsr2l,f,c
  8084  000D8E  5008               	movf	i2UART_buff_put@_this+1,w,c
  8085  000D90  22DA               	addwfc	fsr2h,f,c
  8086  000D92  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8087  000D96  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8088                           
  8089                           ;UART.c: 76: _this->tail = UART_buff_modulo_inc(_this->tail, 200);
  8090  000D9A  EE20 F0CA          	lfsr	2,202
  8091  000D9E  5007               	movf	i2UART_buff_put@_this,w,c
  8092  000DA0  26D9               	addwf	fsr2l,f,c
  8093  000DA2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8094  000DA4  22DA               	addwfc	fsr2h,f,c
  8095  000DA6  CFDE F001          	movff	postinc2,i2UART_buff_modulo_inc@value
  8096  000DAA  CFDD F002          	movff	postdec2,i2UART_buff_modulo_inc@value+1
  8097  000DAE  0E00               	movlw	0
  8098  000DB0  6E04               	movwf	i2UART_buff_modulo_inc@modulus+1,c
  8099  000DB2  0EC8               	movlw	200
  8100  000DB4  6E03               	movwf	i2UART_buff_modulo_inc@modulus,c
  8101  000DB6  EC4E  F00D         	call	i2_UART_buff_modulo_inc	;wreg free
  8102  000DBA  EE20 F0CA          	lfsr	2,202
  8103  000DBE  5007               	movf	i2UART_buff_put@_this,w,c
  8104  000DC0  26D9               	addwf	fsr2l,f,c
  8105  000DC2  5008               	movf	i2UART_buff_put@_this+1,w,c
  8106  000DC4  22DA               	addwfc	fsr2h,f,c
  8107  000DC6  C001  FFDE         	movff	?i2_UART_buff_modulo_inc,postinc2
  8108  000DCA  C002  FFDD         	movff	?i2_UART_buff_modulo_inc+1,postdec2
  8109  000DCE  0012               	return	
  8110  000DD0  0012               	return		;funcret
  8111  000DD2                     __end_ofi2_UART_buff_put:
  8112                           	opt stack 0
  8113                           tosu	equ	0xFFF
  8114                           tosh	equ	0xFFE
  8115                           tosl	equ	0xFFD
  8116                           pclatu	equ	0xFFB
  8117                           pclath	equ	0xFFA
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           intcon2	equ	0xFF1
  8126                           postinc0	equ	0xFEE
  8127                           fsr0h	equ	0xFEA
  8128                           fsr0l	equ	0xFE9
  8129                           wreg	equ	0xFE8
  8130                           fsr1h	equ	0xFE2
  8131                           fsr1l	equ	0xFE1
  8132                           indf2	equ	0xFDF
  8133                           postinc2	equ	0xFDE
  8134                           postdec2	equ	0xFDD
  8135                           plusw2	equ	0xFDB
  8136                           fsr2h	equ	0xFDA
  8137                           fsr2l	equ	0xFD9
  8138                           status	equ	0xFD8
  8139                           
  8140 ;; *************** function i2_UART_buff_modulo_inc *****************
  8141 ;; Defined at:
  8142 ;;		line 106 in file "UART.c"
  8143 ;; Parameters:    Size  Location     Type
  8144 ;;  value           2    0[COMRAM] const unsigned int 
  8145 ;;  modulus         2    2[COMRAM] const unsigned int 
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;  UART_buff_mo    2    4[COMRAM] unsigned int 
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  2    0[COMRAM] unsigned int 
  8150 ;; Registers used:
  8151 ;;		wreg, status,2, status,0
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8157 ;;      Params:         4       0       0       0       0       0       0
  8158 ;;      Locals:         2       0       0       0       0       0       0
  8159 ;;      Temps:          0       0       0       0       0       0       0
  8160 ;;      Totals:         6       0       0       0       0       0       0
  8161 ;;Total ram usage:        6 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; This function calls:
  8164 ;;		Nothing
  8165 ;; This function is called by:
  8166 ;;		i2_UART_buff_put
  8167 ;;		i2_UART_buff_get
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           	psect	text50
  8172  001A9C                     __ptext50:
  8173                           	opt stack 0
  8174  001A9C                     i2_UART_buff_modulo_inc:
  8175                           	opt stack 21
  8176                           
  8177                           ;UART.c: 107: unsigned int my_value = value + 1;
  8178                           
  8179                           ;incstack = 0
  8180  001A9C  0E01               	movlw	1
  8181  001A9E  2401               	addwf	i2UART_buff_modulo_inc@value,w,c
  8182  001AA0  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8183  001AA2  0E00               	movlw	0
  8184  001AA4  2002               	addwfc	i2UART_buff_modulo_inc@value+1,w,c
  8185  001AA6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8186                           
  8187                           ;UART.c: 108: if (my_value >= modulus) {
  8188  001AA8  5003               	movf	i2UART_buff_modulo_inc@modulus,w,c
  8189  001AAA  5C05               	subwf	i2UART_buff_modulo_inc@my_value,w,c
  8190  001AAC  5004               	movf	i2UART_buff_modulo_inc@modulus+1,w,c
  8191  001AAE  5806               	subwfb	i2UART_buff_modulo_inc@my_value+1,w,c
  8192  001AB0  A0D8               	btfss	status,0,c
  8193  001AB2  D005               	goto	i2l2763
  8194                           
  8195                           ;UART.c: 109: my_value = 0;
  8196  001AB4  0E00               	movlw	0
  8197  001AB6  6E06               	movwf	i2UART_buff_modulo_inc@my_value+1,c
  8198  001AB8  0E00               	movlw	0
  8199  001ABA  6E05               	movwf	i2UART_buff_modulo_inc@my_value,c
  8200  001ABC  D000               	goto	i2l2763
  8201  001ABE                     i2l2763:
  8202                           
  8203                           ;UART.c: 110: }
  8204                           ;UART.c: 111: return (my_value);
  8205  001ABE  C005  F001         	movff	i2UART_buff_modulo_inc@my_value,?i2_UART_buff_modulo_inc
  8206  001AC2  C006  F002         	movff	i2UART_buff_modulo_inc@my_value+1,?i2_UART_buff_modulo_inc+1
  8207  001AC6  0012               	return	
  8208  001AC8  0012               	return		;funcret
  8209  001ACA                     __end_ofi2_UART_buff_modulo_inc:
  8210                           	opt stack 0
  8211                           tosu	equ	0xFFF
  8212                           tosh	equ	0xFFE
  8213                           tosl	equ	0xFFD
  8214                           pclatu	equ	0xFFB
  8215                           pclath	equ	0xFFA
  8216                           tblptru	equ	0xFF8
  8217                           tblptrh	equ	0xFF7
  8218                           tblptrl	equ	0xFF6
  8219                           tablat	equ	0xFF5
  8220                           prodh	equ	0xFF4
  8221                           prodl	equ	0xFF3
  8222                           intcon	equ	0xFF2
  8223                           intcon2	equ	0xFF1
  8224                           postinc0	equ	0xFEE
  8225                           fsr0h	equ	0xFEA
  8226                           fsr0l	equ	0xFE9
  8227                           wreg	equ	0xFE8
  8228                           fsr1h	equ	0xFE2
  8229                           fsr1l	equ	0xFE1
  8230                           indf2	equ	0xFDF
  8231                           postinc2	equ	0xFDE
  8232                           postdec2	equ	0xFDD
  8233                           plusw2	equ	0xFDB
  8234                           fsr2h	equ	0xFDA
  8235                           fsr2l	equ	0xFD9
  8236                           status	equ	0xFD8
  8237                           
  8238 ;; *************** function _ADC_ISR *****************
  8239 ;; Defined at:
  8240 ;;		line 128 in file "mcc_generated_files/adc.c"
  8241 ;; Parameters:    Size  Location     Type
  8242 ;;		None
  8243 ;; Auto vars:     Size  Location     Type
  8244 ;;		None
  8245 ;; Return value:  Size  Location     Type
  8246 ;;		None               void
  8247 ;; Registers used:
  8248 ;;		None
  8249 ;; Tracked objects:
  8250 ;;		On entry : 0/0
  8251 ;;		On exit  : 0/0
  8252 ;;		Unchanged: 0/0
  8253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8254 ;;      Params:         0       0       0       0       0       0       0
  8255 ;;      Locals:         0       0       0       0       0       0       0
  8256 ;;      Temps:          0       0       0       0       0       0       0
  8257 ;;      Totals:         0       0       0       0       0       0       0
  8258 ;;Total ram usage:        0 bytes
  8259 ;; Hardware stack levels used:    1
  8260 ;; This function calls:
  8261 ;;		Nothing
  8262 ;; This function is called by:
  8263 ;;		_INTERRUPT_InterruptManager
  8264 ;; This function uses a non-reentrant model
  8265 ;;
  8266                           
  8267                           	psect	text51
  8268  001C16                     __ptext51:
  8269                           	opt stack 0
  8270  001C16                     _ADC_ISR:
  8271                           	opt stack 23
  8272                           
  8273                           ;adc.c: 131: PIR1bits.ADIF = 0;
  8274                           
  8275                           ;incstack = 0
  8276  001C16  9C9E               	bcf	3998,6,c	;volatile
  8277  001C18  0012               	return		;funcret
  8278  001C1A                     __end_of_ADC_ISR:
  8279                           	opt stack 0
  8280  0000                     tosu	equ	0xFFF
  8281                           tosh	equ	0xFFE
  8282                           tosl	equ	0xFFD
  8283                           pclatu	equ	0xFFB
  8284                           pclath	equ	0xFFA
  8285                           tblptru	equ	0xFF8
  8286                           tblptrh	equ	0xFF7
  8287                           tblptrl	equ	0xFF6
  8288                           tablat	equ	0xFF5
  8289                           prodh	equ	0xFF4
  8290                           prodl	equ	0xFF3
  8291                           intcon	equ	0xFF2
  8292                           intcon2	equ	0xFF1
  8293                           postinc0	equ	0xFEE
  8294                           fsr0h	equ	0xFEA
  8295                           fsr0l	equ	0xFE9
  8296                           wreg	equ	0xFE8
  8297                           fsr1h	equ	0xFE2
  8298                           fsr1l	equ	0xFE1
  8299                           indf2	equ	0xFDF
  8300                           postinc2	equ	0xFDE
  8301                           postdec2	equ	0xFDD
  8302                           plusw2	equ	0xFDB
  8303                           fsr2h	equ	0xFDA
  8304                           fsr2l	equ	0xFD9
  8305                           status	equ	0xFD8
  8306                           tosu	equ	0xFFF
  8307                           tosh	equ	0xFFE
  8308                           tosl	equ	0xFFD
  8309                           pclatu	equ	0xFFB
  8310                           pclath	equ	0xFFA
  8311                           tblptru	equ	0xFF8
  8312                           tblptrh	equ	0xFF7
  8313                           tblptrl	equ	0xFF6
  8314                           tablat	equ	0xFF5
  8315                           prodh	equ	0xFF4
  8316                           prodl	equ	0xFF3
  8317                           intcon	equ	0xFF2
  8318                           intcon2	equ	0xFF1
  8319                           postinc0	equ	0xFEE
  8320                           fsr0h	equ	0xFEA
  8321                           fsr0l	equ	0xFE9
  8322                           wreg	equ	0xFE8
  8323                           fsr1h	equ	0xFE2
  8324                           fsr1l	equ	0xFE1
  8325                           indf2	equ	0xFDF
  8326                           postinc2	equ	0xFDE
  8327                           postdec2	equ	0xFDD
  8328                           plusw2	equ	0xFDB
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333                           	psect	text52
  8334  000000                     __ptext52:
  8335                           	opt stack 0
  8336                           tosu	equ	0xFFF
  8337                           tosh	equ	0xFFE
  8338                           tosl	equ	0xFFD
  8339                           pclatu	equ	0xFFB
  8340                           pclath	equ	0xFFA
  8341                           tblptru	equ	0xFF8
  8342                           tblptrh	equ	0xFF7
  8343                           tblptrl	equ	0xFF6
  8344                           tablat	equ	0xFF5
  8345                           prodh	equ	0xFF4
  8346                           prodl	equ	0xFF3
  8347                           intcon	equ	0xFF2
  8348                           intcon2	equ	0xFF1
  8349                           postinc0	equ	0xFEE
  8350                           fsr0h	equ	0xFEA
  8351                           fsr0l	equ	0xFE9
  8352                           wreg	equ	0xFE8
  8353                           fsr1h	equ	0xFE2
  8354                           fsr1l	equ	0xFE1
  8355                           indf2	equ	0xFDF
  8356                           postinc2	equ	0xFDE
  8357                           postdec2	equ	0xFDD
  8358                           plusw2	equ	0xFDB
  8359                           fsr2h	equ	0xFDA
  8360                           fsr2l	equ	0xFD9
  8361                           status	equ	0xFD8
  8362                           
  8363                           	psect	rparam
  8364  0000                     tosu	equ	0xFFF
  8365                           tosh	equ	0xFFE
  8366                           tosl	equ	0xFFD
  8367                           pclatu	equ	0xFFB
  8368                           pclath	equ	0xFFA
  8369                           tblptru	equ	0xFF8
  8370                           tblptrh	equ	0xFF7
  8371                           tblptrl	equ	0xFF6
  8372                           tablat	equ	0xFF5
  8373                           prodh	equ	0xFF4
  8374                           prodl	equ	0xFF3
  8375                           intcon	equ	0xFF2
  8376                           intcon2	equ	0xFF1
  8377                           postinc0	equ	0xFEE
  8378                           fsr0h	equ	0xFEA
  8379                           fsr0l	equ	0xFE9
  8380                           wreg	equ	0xFE8
  8381                           fsr1h	equ	0xFE2
  8382                           fsr1l	equ	0xFE1
  8383                           indf2	equ	0xFDF
  8384                           postinc2	equ	0xFDE
  8385                           postdec2	equ	0xFDD
  8386                           plusw2	equ	0xFDB
  8387                           fsr2h	equ	0xFDA
  8388                           fsr2l	equ	0xFD9
  8389                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         1007
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      69
    BANK0           160      1     160
    BANK1           256     25     231
    BANK2           256      0     200
    BANK3           256      0     206
    BANK4           256      0     206
    BANK5           256      0       0

Pointer List with Targets:

    memset@p1	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    memset@p	PTR unsigned char  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    UART_buff_peek@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> input_buffer(BANK3[206]), 

    UART_buff_size@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_get@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_put@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    UART_buff_init@_this	PTR struct UART_ring_buff size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), 

    crcBufS_get@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_status_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    crcBufS_put@_this	PTR struct crcBufS size(2) Largest target is 17
		 -> crc_buffer(BANK0[17]), 

    sp__memset	PTR void  size(2) Largest target is 206
		 -> output_buffer(BANK4[206]), input_buffer(BANK3[206]), ring_buffer(BANK1[206]), 

    FastTransfer_buffer_flush@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    FastTransfer_buffer_put@_this	PTR struct ringBufS size(2) Largest target is 206
		 -> ring_buffer(BANK1[206]), 

    CRC8@data	PTR const unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), CRCcheck@arrayHolder(BANK1[3]), receiveData@holder_1345(BANK1[3]), receiveData@holder(BANK1[3]), 
		 -> rx_buffer(BANK2[200]), ring_buffer(BANK1[206]), 

    sendStructAddress	PTR unsigned char  size(2) Largest target is 206
		 -> NULL(NULL[0]), ring_buffer(BANK1[206]), 

    begin@stufftoreceive	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_get(), 

    serial_read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_get(), 

    begin@stuffpeek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Receive_peek(), 

    serial_peek	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> Absolute function(), Receive_peek(), 

    begin@stuffavailable	PTR FTN()int  size(2) Largest target is 2
		 -> Receive_available(), 

    serial_available	PTR FTN()int  size(2) Largest target is 2
		 -> Absolute function(), Receive_available(), 

    begin@stufftosend	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Send_put(), 

    serial_write	PTR FTN(unsigned char ,)void  size(2) Largest target is 0
		 -> Absolute function(), Send_put(), 

    begin@ptr	PTR volatile int  size(2) Largest target is 40
		 -> receiveArray(BANK0[40]), 

    receiveArrayAddress	PTR volatile int  size(2) Largest target is 40
		 -> NULL(NULL[0]), receiveArray(BANK0[40]), 


Critical Paths under _main in COMRAM

    _respondECU->_ToSend
    _sendData->_FastTransfer_buffer_flush
    _sendData->_Send_put
    _FastTransfer_buffer_flush->_memset
    _ToSend->_FastTransfer_buffer_put
    _FastTransfer_buffer_put->_FastTransfer_buffer_modulo_inc
    _receiveData->_Send_put
    _Send_put->_UART_buff_get
    _Send_put->_UART_buff_put
    _UART_buff_put->_UART_buff_modulo_inc
    _Receive_peek->_UART_buff_peek
    _CRCcheck->_crcBufS_get
    _Receive_get->_UART_buff_get
    _UART_buff_get->_UART_buff_modulo_inc
    _Receive_available->_UART_buff_size
    _processPowerRequest->_EnableSlavePower
    _begin->___awdiv
    _EUSART1_Initialize->_UART_buff_init
    _UART_buff_init->_memset
    _PDUStartup->_EnableSlavePower
    _Update->_writeRegisters
    _StartUp595->_Delay
    _Clear595->_writeRegisters
    _EnableSlavePower->_SetPin595
    _ComputeStorageData->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR
    _EUSART1_Transmit_ISR->i2_UART_buff_get
    i2_UART_buff_get->i2_UART_buff_modulo_inc
    _EUSART1_Receive_ISR->i2_UART_buff_put
    i2_UART_buff_put->i2_UART_buff_modulo_inc

Critical Paths under _main in BANK0

    _respondECU->_sendData
    _processPowerRequest->_EnableSlavePower
    _PDUStartup->_EnableSlavePower

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _updateComms->_receiveData
    _respondECU->_ToSend
    _respondECU->_sendData
    _ToSend->_FastTransfer_buffer_put
    _receiveData->_CRCcheck
    _SYSTEM_Initialize->_begin

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   35657
                         _PDUStartup
                  _SYSTEM_Initialize
                        _updateComms
 ---------------------------------------------------------------------------------
 (1) _updateComms                                          0     0      0   25657
                _processPowerRequest
                        _receiveData
                         _respondECU
 ---------------------------------------------------------------------------------
 (2) _respondECU                                           0     0      0    7741
                              _Delay
                             _ToSend
                           _sendData
 ---------------------------------------------------------------------------------
 (3) _sendData                                             5     5      0    5704
                                              0 BANK0      1     1      0
                                              0 BANK1      4     4      0
                   Absolute function *
                               _CRC8
          _FastTransfer_buffer_flush
                           _Send_put *
                        _crcBufS_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_put                                          7     2      5     742
                                             26 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_flush                            4     0      4    1139
                                             34 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _ToSend                                               3     1      2    1607
                                             37 COMRAM     1     1      0
                                              2 BANK1      2     0      2
            _FastTransfer_buffer_put
 ---------------------------------------------------------------------------------
 (4) _FastTransfer_buffer_put                              7     2      5    1391
                                             32 COMRAM     5     0      5
                                              0 BANK1      2     2      0
     _FastTransfer_buffer_modulo_inc
 ---------------------------------------------------------------------------------
 (5) _FastTransfer_buffer_modulo_inc                       6     2      4     602
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _receiveData                                         18    18      0   10715
                                              7 BANK1     18    18      0
                   Absolute function *
                               _CRC8
                           _CRCcheck
                  _Receive_available *
                        _Receive_get *
                       _Receive_peek *
                           _Send_put *
 ---------------------------------------------------------------------------------
 (4) _Send_put                                             1     1      0    2614
                                             37 COMRAM     1     1      0
                      _UART_buff_get
                      _UART_buff_put
 ---------------------------------------------------------------------------------
 (5) _UART_buff_put                                        5     2      3    1418
                                             32 COMRAM     5     2      3
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (3) _Receive_peek                                         0     0      0     139
                     _UART_buff_peek
 ---------------------------------------------------------------------------------
 (4) _UART_buff_peek                                       4     2      2     139
                                             26 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _CRCcheck                                             7     7      0    5114
                                              0 BANK1      7     7      0
                   Absolute function *
                               _CRC8
                  _Receive_available *
                        _Receive_get *
                        _crcBufS_get
                 _crcBufS_status_put
 ---------------------------------------------------------------------------------
 (4) _crcBufS_status_put                                  10     6      4     908
                                             26 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (4) _crcBufS_get                                         12     8      4    1404
                                             26 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _Receive_get                                          0     0      0    1165
                      _UART_buff_get
 ---------------------------------------------------------------------------------
 (5) _UART_buff_get                                        5     3      2    1165
                                             32 COMRAM     5     3      2
               _UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (6) _UART_buff_modulo_inc                                 6     2      4     746
                                             26 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Receive_available                                    2     0      2     150
                                             28 COMRAM     2     0      2
                     _UART_buff_size
 ---------------------------------------------------------------------------------
 (4) _UART_buff_size                                       2     0      2     150
                                             26 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _CRC8                                                 7     4      3    1014
                                             26 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _processPowerRequest                                  2     0      2    7201
                                              0 BANK1      2     0      2
                   _EnableSlavePower
                             _Update
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    2307
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                              _begin
 ---------------------------------------------------------------------------------
 (2) _begin                                               13     0     13    1292
                                              0 BANK1     13     0     13
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     428
                                             26 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0    1015
                     _UART_buff_init
 ---------------------------------------------------------------------------------
 (3) _UART_buff_init                                       2     0      2    1015
                                             34 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (5) _memset                                               8     2      6     830
                                             26 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PDUStartup                                           0     0      0    7693
                 _ComputeStorageData
                   _EnableSlavePower
                         _StartUp595
                             _Update
 ---------------------------------------------------------------------------------
 (3) _Update                                               0     0      0     114
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (2) _StartUp595                                           0     0      0     612
                           _Clear595
                              _Delay
 ---------------------------------------------------------------------------------
 (3) _Delay                                                9     5      4     430
                                             26 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (3) _Clear595                                             2     2      0     182
                                             30 COMRAM     2     2      0
                     _writeRegisters
 ---------------------------------------------------------------------------------
 (4) _writeRegisters                                       4     4      0     114
                                             26 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _EnableSlavePower                                     3     1      2    6855
                                             36 COMRAM     2     0      2
                                              0 BANK0      1     1      0
                          _SetPin595
 ---------------------------------------------------------------------------------
 (4) _SetPin595                                           10     4      6    5637
                                             26 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (2) _ComputeStorageData                                   4     4      0     112
                                             27 COMRAM     4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      22
                                             26 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                          14    14      0    1209
                                             12 COMRAM    14    14      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0     528
                    i2_UART_buff_get
                   i2_UART_buff_size
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_size                                     2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_get                                      5     3      2     480
                                              6 COMRAM     5     3      2
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  1     1      0     681
                                             11 COMRAM     1     1      0
                    i2_UART_buff_put
 ---------------------------------------------------------------------------------
 (9) i2_UART_buff_put                                      5     2      3     658
                                              6 COMRAM     5     2      3
             i2_UART_buff_modulo_inc
 ---------------------------------------------------------------------------------
 (10) i2_UART_buff_modulo_inc                              6     2      4     298
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PDUStartup
     _ComputeStorageData
       _DATAEE_ReadByte
     _EnableSlavePower
       _SetPin595
     _StartUp595
       _Clear595
         _writeRegisters
       _Delay
     _Update
       _writeRegisters
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _UART_buff_init
         _memset
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _begin
       ___awdiv
   _updateComms
     _processPowerRequest
       _EnableSlavePower
         _SetPin595
       _Update
         _writeRegisters
     _receiveData
       Absolute function(Fake) *
       _CRC8 *
       _CRCcheck *
         Absolute function(Fake) *
         _CRC8 *
         _Receive_available *
           _UART_buff_size
         _Receive_get *
           _UART_buff_get
             _UART_buff_modulo_inc
         _crcBufS_get *
         _crcBufS_status_put *
       _Receive_available *
         _UART_buff_size
       _Receive_get *
         _UART_buff_get
           _UART_buff_modulo_inc
       _Receive_peek *
         _UART_buff_peek
       _Send_put *
         _UART_buff_get
           _UART_buff_modulo_inc
         _UART_buff_put
           _UART_buff_modulo_inc
     _respondECU
       _Delay
       _ToSend
         _FastTransfer_buffer_put
           _FastTransfer_buffer_modulo_inc
       _sendData
         Absolute function(Fake) *
         _CRC8 *
         _FastTransfer_buffer_flush *
           _memset
         _Send_put *
           _UART_buff_get
             _UART_buff_modulo_inc
           _UART_buff_put
             _UART_buff_modulo_inc
         _crcBufS_put *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
     i2_UART_buff_put
       i2_UART_buff_modulo_inc
   _EUSART1_Transmit_ISR
     i2_UART_buff_get
       i2_UART_buff_modulo_inc
     i2_UART_buff_size

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      CE      13       80.5%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      CE      11       80.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C8       8       78.1%
BITBANK1           100      0       0       5        0.0%
BANK1              100     19      E7       6       90.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      1      A0       4      100.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      45       1       72.6%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     430       9        0.0%
DATA                 0      0     430      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Jun 09 21:41:43 2015

      __end_of_FastTransfer_buffer_flush 1730                   i2_UART_buff_modulo_inc 1A9C  
                           _rx_array_inx 0041                             ___awdiv@sign 0020  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                                    l350 14D6                                      l352 14DA  
                                    l361 1510                                      l363 1514  
                                    l516 180E                                      l365 1520  
                                    l630 0A52                                      l367 1524  
                                    l369 1528                                      l726 141C  
                                    l677 12F2                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000                          _timer1ReloadVal 0037  
                        __end_of_ADC_ISR 1C1A     FastTransfer_buffer_flush@clearBuffer 0025  
                                    prod 000FF3                                      tosl 000FFD  
                                    wreg 000FE8            i2UART_buff_modulo_inc@modulus 0003  
                           __CFG_LVP$OFF 000000                                     l3301 17E2  
                                   l2413 1A34                                     l3307 17F8  
                                   l3315 1816                                     l3421 0F38  
                                   l3413 0EC0                                     l2461 14CE  
                                   l2613 197E                                     l2605 188E  
                                   l3261 1A78                                     l3317 1820  
                                   l3423 0F56                                     l3415 0EDE  
                                   l2471 1518                                     l2623 19A8  
                                   l3255 1A62                                     l3417 0EFC  
                                   l2465 14DE                                     l2457 14BA  
                                   l2617 1986                                     l2609 18AA  
                                   l3265 1A8A                                     l3601 0406  
                                   l3337 0798                                     l3441 0AF2  
                                   l3433 0A86                                     l3419 0F1A  
                                   l3427 0F74                                     l2459 14C4  
                                   l2723 130E                                     l3371 0E6E  
                                   l3355 0DDE                                     l3275 0C26  
                                   l3603 040E                                     l3531 0100  
                                   l3451 0B6C                                     l3443 0AFE  
                                   l3435 0AA0                                     l2469 1504  
                                   l2821 1548                                     l3269 0BBA  
                                   l3621 04DE                                     l3605 0424  
                                   l3445 0B28                                     l3437 0ABC  
                                   l2823 1560                                     l2735 1336  
                                   l2751 1372                                     l3711 12CE  
                                   l3703 1298                                     l3359 0DEA  
                                   l3471 09C8                                     l3631 0560  
                                   l3623 04F8                                     l3551 01CA  
                                   l3527 00D4                                     l3535 0106  
                                   l3447 0B30                                     l3439 0AD6  
                                   l2833 0FA8                                     l2825 1578  
                                   l2737 1340                                     l2729 1320  
                                   l3705 12A8                                     l3289 1418  
                                   l3481 0A1E                                     l3457 08E8  
                                   l3633 05AE                                     l3625 0512  
                                   l2843 0FD8                                     l2827 1590  
                                   l2819 1532                                     l2755 1382  
                                   l2747 1366                                     l2739 1348  
                                   l3715 12E4                                     l3387 11EE  
                                   l3379 1168                                     l3467 09AE  
                                   l3459 0914                                     l3627 052C  
                                   l3619 04C4                                     l3635 05CA  
                                   l3547 01AA                                     l2837 0FBC  
                                   l2829 1594                                     l3709 12BE  
                                   l3485 0A40                                     l3661 0670  
                                   l3629 0546                                     l3645 05D8  
                                   l3565 0216                                     l3549 01C2  
                                   l3671 06F2                                     l3663 068A  
                                   l3567 0240                                     l3583 02A4  
                                   l3559 0206                                     l3489 0A4A  
                                   l3673 0740                                     l3665 06A4  
                                   l3691 124C                                     l3667 06BE  
                                   l3659 0656                                     l3675 075C  
                                   l3595 036C                                     l3587 02D0  
                                   l3579 0270                                     l3683 076A  
                                   l3693 125C                                     l3669 06D8  
                                   l3749 1936                                     l3791 1B58  
                                   l3697 1272                     receiveData@crcHolder 01E1  
                                   l3699 1282                                     _CRC8 17DC  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     u3008 08EC  
                                   _LATD 000F8C                                     u3009 0900  
                                   _LATE 000F8D                                     u3028 0918  
                                   u3029 092C                                     u3038 0934  
                                   u3039 0948                                     u3048 0950  
                                   u3208 0128                                     u3049 0964  
                                   u3209 013C                                     u3058 096C  
                                   u3059 0980                                     u3308 021A  
                                   u3228 0146                                     u3148 00AC  
                                   u3309 022E                                     u3229 015A  
                                   u3149 00C0                                     u3238 0160  
                                   u3239 0174                                     u3328 0244  
                                   u3248 017A                                     u3168 00DC  
                                   u3329 0258                                     u3249 018E  
                                   u3169 00F0                                     u3508 0564  
                                   u3348 0274                                     u3268 01AE  
                                   u3188 010A                                     u3381 0310  
                                   u3349 0288                                     u3189 011E  
                                   u3518 05B2                                     u3438 04AE  
                                   u3358 02A8                                     u2830 1144  
                                   u3359 02BC                                     u3608 06F6  
                                   u3448 04C8                                     u3618 0744  
                                   u3538 0640                                     u3458 04E2  
                                   u2851 0796                                     u3548 065A  
                                   u3468 04FC                                     u2790 13AC  
                                   u3558 0674                                     u3478 0516  
                                   u3568 068E                                     u3488 0530  
                                   u2928 0A70                                     u3680 1920  
                                   u3578 06A8                                     u3498 054A  
                                   u2938 0A8A                                     u3588 06C2  
                                   u2948 0AA4                                     u3757 1894  
                                   u3598 06DC                                     u2958 0AC0  
                                   u2968 0ADA                                     u2978 0B02  
                                   u2998 0B54                                     _TMR1 000FCE  
                                   _WPUB 000F61                                     _data 00B4  
                                   _main 1B48                 __end_of_EnableSlavePower 0FA0  
                                   fsr0h 000FEA                                     fsr1h 000FE2  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                            __CFG_BORV$190 000000  
                                   pclat 000FFA                                     prodh 000FF4  
                                   prodl 000FF3          __end_of_FastTransfer_buffer_put 08E6  
                                   start 009E                            __CFG_IESO$OFF 000000  
                           ___param_bank 000010           i2UART_buff_modulo_inc@my_value 0005  
                                  ?_CRC8 001B                         __end_of_CRCcheck 0A54  
         __size_of_OSCILLATOR_Initialize 000E            __end_of_OSCILLATOR_Initialize 1C06  
                     crcBufS_put@address 001D                                    ?_main 0001  
                        __end_of___awdiv 138E                                    _EEADR 000FA9  
                        ___awdiv@divisor 001D                                    _T1CON 000FCD  
                                  _LATB0 007C50                                    _LATD4 007C64  
                                  _LATD5 007C65                                    _LATD6 007C66  
                                  _LATD7 007C67                           __CFG_DEBUG$OFF 000000  
                                  i2l112 0064                                    i2l106 004C  
                                  i2l108 0058                              ?_PDUStartup 0001  
                                  i2l726 14B0                                    i2l757 1B16  
                        ___awdiv@counter 001F                                    _TMR1H 000FCF  
                                  _TMR1L 000FCE                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                                  _TRISD 000F95                                    _TRISE 000F96  
                                  _Delay 187C                            __CFG_WRT0$OFF 000000  
                          __CFG_WRT1$OFF 000000                            __CFG_WRT2$OFF 000000  
                          __CFG_WRT3$OFF 000000                     _EUSART1_Transmit_ISR 19AE  
                         __CFG_EBTR0$OFF 000000                           __CFG_FCMEN$OFF 000000  
                         __CFG_EBTR1$OFF 000000                           __CFG_EBTR2$OFF 000000  
                         __CFG_EBTR3$OFF 000000                         ??_writeRegisters 001B  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                                    _begin 1730  
                        _DATAEE_ReadByte 1BC2                           __CFG_EBTRB$OFF 000000  
                                  _group 0043                       __CFG_MCLRE$EXTMCLR 000000  
                                  pclath 000FFA                                    tablat 000FF5  
                          ??_Receive_get 0026                     __size_of_crcBufS_get 00E8  
                                  plusw2 000FDB                           begin@stuffpeek 01D9  
                   __size_of_crcBufS_put 00DA                                    status 000FD8  
                       __end_of_Clear595 19AE                           __CFG_HFOFST$ON 000000  
                           ?_receiveData 0001                           __CFG_PBADEN$ON 000000  
                           __end_of_CRC8 182E                          CRCcheck@SentCRC 01CE  
                        __initialization 1668               __end_of_EUSART1_Initialize 1904  
                           __end_of_main 1B62                               _CurrentADC 009C  
                             ToSend@what 01D0                                   ??_CRC8 001E  
                              ??_ADC_ISR 0001              ?_INTERRUPT_InterruptManager 0001  
                                 ??_main 0027                            __activetblptr 000002  
                       __end_of_Send_put 1A12                __size_ofi2_UART_buff_size 0018  
                                 ?_Delay 001B                    ?_EUSART1_Transmit_ISR 0001  
          FastTransfer_buffer_put@towhat 0024                            ?_Receive_peek 0001  
                                 ?_begin 01CE                                   _ADCON0 000FC2  
                                 _ADCON1 000FC1                                   _ADCON2 000FC0  
                                 _ADRESH 000FC4                                   _ADRESL 000FC3  
                                 _EEDATA 000FA8                                   _EECON2 000FA7  
                       ___awdiv@dividend 001B                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _ANSELD 000F3B                                   _ANSELE 000F3C  
                                 _T1GCON 000FCC                          i2_UART_buff_get 1422  
                                 _RC1STA 000FAB                                   i2l3103 19D8  
                        i2_UART_buff_put 0CB6                                   i2l3061 0D42  
                                 Delay@i 0020                                   i2l3055 0CD6  
                                 i2l3075 14AC                           __CFG_WDTEN$OFF 000000  
            UART_buff_modulo_inc@modulus 001D                                   i2l2763 1ABE  
                                 _TABLAT 000FF5                                   _RCREG1 000FAE  
                                 _OSCCON 000FD3              __end_of_processPowerRequest 12F8  
                                 _SPBRG1 000FAF                                   _TX1STA 000FAC  
                                 _TXREG1 000FAD                      __size_of_PDUStartup 0038  
                         __CFG_XINST$OFF 000000                                   _ToSend 1B2C  
                    __end_of_Receive_get 1BF8                         crcBufS_get@_this 001B  
            ??_FastTransfer_buffer_flush 0027                                   _Update 1C10  
                     __size_of_SetPin595 004E                            _output_buffer 0400  
                       crcBufS_get@space 001E                                ??___awdiv 001F  
                              CRC8@tempI 0020                           __CFG_STVREN$ON 000000  
                                 _memset 1A6E                                   clear_0 166E  
                                 clear_1 167A                                   clear_2 1686  
                                 clear_3 1692                                   clear_4 169E  
                                 clear_5 16AA                         ___awdiv@quotient 0021  
                                 _rx_len 0042                         __end_of_sendData 0B9A  
                __end_of_DATAEE_ReadByte 1BD8                             __pdataCOMRAM 0045  
                          Send_put@_data 0026                           ??_Receive_peek 001F  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8         __size_of_FastTransfer_buffer_put 0176  
                             _StartUp595 152E             __end_of_UART_buff_modulo_inc 1A6E  
          __size_of_INTERRUPT_Initialize 000A                        _SYSTEM_Initialize 159A  
                             __accesstop 0060                  __end_of__initialization 16C2  
                              ?_CRCcheck 0001                       ?_SYSTEM_Initialize 0001  
                          ___rparam_used 000001                  ?i2_UART_buff_modulo_inc 0001  
                           ?_updateComms 0001                            __end_of_Delay 18C8  
                         __pcstackCOMRAM 0001                       _crcBufS_status_put 115C  
                    ??_SYSTEM_Initialize 0025                         crcBufS_put@_this 001B  
                          __end_of_begin 1788   __end_of_FastTransfer_buffer_modulo_inc 1A40  
__size_of_FastTransfer_buffer_modulo_inc 002E           _FastTransfer_buffer_modulo_inc 1A12  
           FastTransfer_buffer_put@_this 0021                              ToSend@where 0026  
            __size_of_ComputeStorageData 00E2                       UART_buff_get@_this 0021  
                    ?_crcBufS_status_put 001B                              _Currentcomp 00A8  
                  __end_of_UART_buff_get 1422                   ??_EUSART1_Transmit_ISR 000C  
                  __end_of_UART_buff_put 0CB6                                ?_Clear595 0001  
                                ??_Delay 001F                  __end_ofi2_UART_buff_get 14B6  
                __end_ofi2_UART_buff_put 0DD2              __end_of_EUSART1_Receive_ISR 1B2C  
              _FastTransfer_buffer_flush 16CC                                  CRC8@crc 0021  
                                CRC8@len 001D                                  CRC8@sum 001E  
                                ??_begin 0023                        __end_of_SetPin595 187C  
              __end_of_SYSTEM_Initialize 1602                   receiveData@holder_1345 01DE  
                    _addressErrorCounter 00C0                               __pbssBANK0 0060  
                             __pbssBANK1 0100                               __pbssBANK2 0200  
                             __pbssBANK3 0300                               __pbssBANK4 0400  
                        __CFG_PLLCFG$OFF 000000                              _Receive_get 1BE8  
                             ??_CRCcheck 0027                     ??_crcBufS_status_put 001F  
         __end_ofi2_UART_buff_modulo_inc 1ACA                        begin@givenAddress 01D1  
                      ?_EnableSlavePower 0025                  __size_of_UART_buff_init 001E  
                __size_of_UART_buff_peek 0026                  __size_of_UART_buff_size 0018  
                              ?_Send_put 0001                       ??_EnableSlavePower 0027  
                   __size_of_receiveData 06CE                                  ?_ToSend 01D0  
                     __CFG_CCP2MX$PORTC1 000000                                  ?_Update 0001  
                     __CFG_CCP3MX$PORTB5 000000      FastTransfer_buffer_modulo_inc@value 001B  
                                _ADC_ISR 1C16                                  ?_memset 001B  
                             _crc_buffer 00EE                  __size_of_ADC_Initialize 0018  
                       ?_DATAEE_ReadByte 0001                             ??_PDUStartup 0027  
                     UART_buff_put@_this 0021                               ??_Clear595 001F  
                       i2_UART_buff_size 1BAA              i2UART_buff_modulo_inc@value 0001  
                                _OSCCON2 000FD2                                  _TBLPTRH 000FF7  
                                _TBLPTRL 000FF6                                  _TBLPTRU 000FF8  
                            ?_StartUp595 0001                        _Receive_available 1B62  
           UART_buff_modulo_inc@my_value 001F                        __CFG_PRICLKEN$OFF 000000  
                                _OSCTUNE 000F9B                                  _SPBRGH1 000FB0  
                    sendData@whereToSend 01CE                      _receiveArrayAddress 002B  
                     ?_Receive_available 001D                               begin@error 01D2  
                    ??_Receive_available 001F                                ?_sendData 0001  
                                _Current 0090                        _alignErrorCounter 0027  
                        __CFG_PWRTEN$OFF 000000                               ??_Send_put 0026  
                                __Hparam 0000                                  __Lparam 0000  
                     __end_of_PDUStartup 1976                          __size_of_ToSend 001C  
                   __end_of_Receive_peek 1BE8                                _AKNAKsend 003B  
                        __size_of_Update 0006                                  ___awdiv 12F8  
                   _UART_buff_modulo_inc 1A40                                  _calc_CS 003C  
                                __pcinit 1668                          __size_of_memset 002E  
                                __ramtop 0600                         i2UART_buff_get@c 000B  
                                __ptext0 1B48                                  __ptext1 1904  
                                __ptext2 1788                                  __ptext3 0A54  
                                __ptext4 1082                                  __ptext5 16CC  
                                __ptext6 1B2C                                  __ptext7 0770  
                                __ptext8 1A12                                  __ptext9 00A2  
                       i2UART_buff_put@c 0009                                _T1CONbits 000FCD  
                  _OSCILLATOR_Initialize 1BF8                __end_of_Receive_available 1B7A  
                _FastTransfer_buffer_put 0770                    CRCcheck@calculatedCRC 01CF  
                     _EUSART1_Initialize 18C8                         ?i2_UART_buff_get 0007  
               ??_PIN_MANAGER_Initialize 001B                                Clear595@i 001F  
                       ?i2_UART_buff_put 0007             crcBufS_status_put@wantedTime 0023  
                          ??_crcBufS_get 001F                            ??_crcBufS_put 0020  
             __size_of_SYSTEM_Initialize 0068                     end_of_initialization 16C2  
                              Delay@wait 001B                      ?_EUSART1_Initialize 0001  
                                memset@c 001D                                  memset@n 001F  
                                memset@p 0021                            __Lmediumconst 0000  
                             ??_sendData 00FF                    ?_UART_buff_modulo_inc 001B  
                   __size_of_updateComms 003A                                  postdec2 000FDD  
                    __size_of_StartUp595 006C                                  postinc0 000FEE  
                                postinc2 000FDE                               _respondECU 1788  
                       begin@stufftosend 01D3                      CRCcheck@arrayHolder 01D0  
                           SetPin595@Reg 001B                     ??_EUSART1_Initialize 0025  
                           SetPin595@pin 001D                   _dataAdressErrorCounter 00C4  
                             _rx_address 0040                                _TRISCbits 000F94  
                           begin@maxSize 01D0       __size_of_FastTransfer_buffer_flush 0064  
                  i2UART_buff_size@_this 0001                           _UART_buff_init 1AF0  
                         _UART_buff_peek 1ACA                           _UART_buff_size 1B7A  
                    __end_of_crcBufS_get 0EBA                  __size_of_writeRegisters 0078  
                    __end_of_crcBufS_put 115C                        __size_of_CRCcheck 016E  
                          _moduleAddress 003E                               CRCcheck@rt 01D3  
           __size_of_processPowerRequest 00C2                           __end_of_ToSend 1B48  
           __end_of_INTERRUPT_Initialize 1C10                           __end_of_Update 1C16  
                        _crcErrorCounter 00C2                        crcBufS_put@oldCRC 001E  
                          __pidataCOMRAM 1C1A                           _ADC_Initialize 1B92  
              ??_FastTransfer_buffer_put 01CE                   ?_OSCILLATOR_Initialize 0001  
                         __end_of_memset 1A9C                        crcBufS_put@status 001F  
                           receiveData@r 01E5               __size_of_Receive_available 0018  
                           receiveData@u 01E3                      start_initialization 1668  
        __size_of_PIN_MANAGER_Initialize 0066                    crcBufS_get@wantedTime 0025  
                  EnableSlavePower@slave 00FF                        __size_of_Clear595 0038  
                 __end_of_UART_buff_init 1B0E                   __end_of_UART_buff_peek 1AF0  
                         UART_buff_get@c 0025                   __end_of_UART_buff_size 1B92  
                           ?_Receive_get 0001                                _SetPin595 182E  
                         UART_buff_put@c 0023                    __size_of_Receive_peek 0010  
                    DATAEE_ReadByte@bAdd 001B                 __end_ofi2_UART_buff_size 1BC2  
                               ??_ToSend 0026                   ??_UART_buff_modulo_inc 001F  
                               CRC8@data 001B                                 ??_Update 001F  
                        crcBufS_get@time 001D                        __size_of_Send_put 0030  
                            ?_respondECU 0001                   __end_of_ADC_Initialize 1BAA  
             __end_of_ComputeStorageData 1082                                 ?_ADC_ISR 0001  
                               ??_memset 0021                __size_of_EnableSlavePower 00E6  
                            __pbssCOMRAM 0027            __size_of_EUSART1_Transmit_ISR 0034  
                          __pcstackBANK0 00FF                            __pcstackBANK1 01CE  
                           ??_StartUp595 0024                             _Receive_peek 1BD8  
                    UART_buff_init@_this 0023                              _crcBufS_get 0DD2  
                    UART_buff_peek@_this 001B                              _crcBufS_put 1082  
                        ?_UART_buff_init 0023                          ?_UART_buff_peek 001B  
                        ?_UART_buff_size 001B             __size_of_EUSART1_Receive_ISR 001E  
                             ?_SetPin595 001B                            ??_receiveData 01D5  
            __size_of_crcBufS_status_put 00DA                               sendData@CS 01CF  
                 __size_of_UART_buff_get 0094                   __size_of_UART_buff_put 011C  
                 _PIN_MANAGER_Initialize 1602                        __size_of_sendData 0146  
                              __pintcode 0008                                 ?___awdiv 001B  
                     __end_of_StartUp595 159A                          ?_ADC_Initialize 0001  
           ??_INTERRUPT_InterruptManager 000D                     i2UART_buff_get@_this 0007  
                               _BAUD1CON 000FB8                           __size_of_Delay 004C  
                         __size_of_begin 0058                 __size_of_DATAEE_ReadByte 0016  
                    __size_of_respondECU 0054                     _INTERRUPT_Initialize 1C06  
                           _receiveArray 00C6              processPowerRequest@powerSet 01CE  
                               _CRCcheck 08E6                                 _LATCbits 000F8B  
                         _writeRegisters 14B6                      UART_buff_size@_this 001B  
                              _registers 0060                                 _IPR1bits 000F9F  
                               _PIE1bits 000F9D      __size_of_INTERRUPT_InterruptManager 0096  
                               i2u253_40 1440                                 i2u256_40 19C8  
                               _PIR1bits 000F9E                      begin@stuffavailable 01D7  
                               _RCONbits 000FD0                         __CFG_WDTPS$32768 000000  
                    __end_of_receiveData 0770           FastTransfer_buffer_flush@_this 0023  
                           _input_buffer 0300                                _rx_buffer 0200  
                       __size_of_ADC_ISR 0004                               _ADCON0bits 000FC2  
                   i2UART_buff_put@_this 0007                                 _Clear595 1976  
                          _UART_buff_get 138E                            _UART_buff_put 0B9A  
                    _processPowerRequest 1236                 ??i2_UART_buff_modulo_inc 0005  
                            _INTCON2bits 000FF1                    ?_INTERRUPT_Initialize 0001  
                      _sendStructAddress 002D                   __end_of_writeRegisters 152E  
                            ??_SetPin595 0021                     EnableSlavePower@onof 0025  
               __size_ofi2_UART_buff_get 0094                 __size_ofi2_UART_buff_put 011C  
                             _EECON1bits 000FA6                            ??_updateComms 0027  
                   __size_of_Receive_get 0010                                 __Hrparam 0000  
                               _Send_put 19E2                                 __Lrparam 0000  
                   ?_processPowerRequest 01CE                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTD2 000000                  ??_OSCILLATOR_Initialize 001B  
                       __size_of___awdiv 0096              __size_of_EUSART1_Initialize 003C  
                    begin@stufftoreceive 01D5                         _EnableSlavePower 0EBA  
                             _ANSELCbits 000F3A                           ?_UART_buff_get 0021  
                         ?_UART_buff_put 0021                              CRC8@extract 001F  
                              sendData@i 01D0                 crcBufS_status_put@status 001E  
                               __ptext10 19E2                                 __ptext11 0B9A  
                               __ptext20 1B62                                 __ptext12 1BD8  
                               __ptext21 1B7A                                 __ptext13 1ACA  
                             _T1GCONbits 000FCC                                 __ptext30 18C8  
                               __ptext22 17DC                                 __ptext14 08E6  
                               __ptext31 1AF0                                 __ptext23 1236  
                               __ptext15 115C                                 __ptext40 0EBA  
                               __ptext32 1A6E                                 __ptext24 159A  
                               __ptext16 0DD2                                 __ptext41 182E  
                               __ptext33 1B92                                 __ptext25 1730  
                               __ptext17 1BE8                                 __ptext50 1A9C  
                               __ptext42 0FA0                                 __ptext34 193E  
                               __ptext26 12F8                                 __ptext18 138E  
                               __ptext51 1C16                                 __ptext43 1BC2  
                               __ptext35 1C10                                 __ptext27 1602  
                               __ptext19 1A40                                 __ptext52 0000  
                               __ptext36 152E                                 __ptext28 1BF8  
                               __ptext45 19AE                                 __ptext37 187C  
                               __ptext29 1C06                                 __ptext46 1BAA  
                               __ptext38 1976                                 __ptext47 1422  
                               __ptext39 14B6                                 __ptext48 1B0E  
                               __ptext49 0CB6                            __size_of_CRC8 0052  
                               begin@ptr 01CE                  EUSART1_Receive_ISR@data 000C  
                        ?_writeRegisters 0001                            _returnAddress 003F  
                          __size_of_main 001A                              _receiveData 00A2  
                               _readwhat 0029                           _Transmit_stall 0045  
                               _sendData 0A54                        ??_DATAEE_ReadByte 001B  
                      ?i2_UART_buff_size 0001                    ??_processPowerRequest 0027  
                             _RC1STAbits 000FAB                             ??_respondECU 0027  
                     ??i2_UART_buff_size 0003                        writeRegisters@val 001B  
                           _serial_write 0035                      __end_of_updateComms 193E  
     __end_of_INTERRUPT_InterruptManager 009E               _INTERRUPT_InterruptManager 0008  
                    _EUSART1_Receive_ISR 1B0E                        receiveData@holder 01DB  
                             _INTCONbits 000FF2                      ComputeStorageData@i 001E  
              UART_buff_modulo_inc@value 001B                         ??_UART_buff_init 0025  
                       ??_UART_buff_peek 001D                         ??_UART_buff_size 001D  
                     _ComputeStorageData 0FA0                   ??_INTERRUPT_Initialize 001B  
                               memset@p1 001B                         _serial_available 002F  
        __size_ofi2_UART_buff_modulo_inc 002E                             ?_crcBufS_get 001B  
                           ?_crcBufS_put 001B                                 intlevel2 0000  
                crcBufS_status_put@_this 001B                       __end_of_respondECU 17DC  
                   ?_EUSART1_Receive_ISR 0001   FastTransfer_buffer_modulo_inc@my_value 001F  
         FastTransfer_buffer_put@towhere 0023                      ?_ComputeStorageData 0001  
                ?_PIN_MANAGER_Initialize 0001                           SetPin595@value 001F  
           __end_of_EUSART1_Transmit_ISR 19E2                              _ring_buffer 0100  
                       ??_ADC_Initialize 001B               ?_FastTransfer_buffer_flush 0023  
                      ??i2_UART_buff_get 0009                              _serial_peek 0031  
                            _serial_read 0033                        ??i2_UART_buff_put 000A  
               ?_FastTransfer_buffer_put 0021            __size_of_UART_buff_modulo_inc 002E  
                        ??_UART_buff_get 0023                          ??_UART_buff_put 0024  
                   ??_ComputeStorageData 001C    FastTransfer_buffer_modulo_inc@modulus 001D  
                             _PDUStartup 193E                   crcBufS_status_put@time 001D  
              receiveData@crcHolder_1346 01E2                        __CFG_T3CMX$PORTC0 000000  
                         _maxDataAddress 003D                          writeRegisters@i 001D  
             __end_of_crcBufS_status_put 1236                    ??_EUSART1_Receive_ISR 000C  
         __end_of_PIN_MANAGER_Initialize 1668         ??_FastTransfer_buffer_modulo_inc 001F  
        ?_FastTransfer_buffer_modulo_inc 001B            updateComms@previousPowerState 0039  
                      __CFG_FOSC$INTIO67 000000                              _updateComms 1904  
